void *sub_100070834(int64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      v18 = a1;
    }
    else {
      v18 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_10000AFB0();
    if (_CocoaArrayWrapper.endIndex.getter(v18)) {
      goto LABEL_3;
    }
LABEL_13:
    sub_10001198C();
    return _swiftEmptyArrayStorage;
  }

  v5 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  sub_10000AFB0();
  if (!v5) {
    goto LABEL_13;
  }
LABEL_3:
  sub_1000460E4(0LL, (a1 & 0xC000000000000001LL) == 0, a1);
  if ((a1 & 0xC000000000000001LL) != 0) {
    v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
  }
  else {
    v6 = *(id *)(a1 + 32);
  }
  v7 = v6;
  v8 = sub_10001198C();
  if (a2
    && (v9 = [v7 key],
        v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9),
        v12 = v11,
        v9,
        v13 = sub_100011B44(v10, v12, a2),
        v8 = sub_10001BEC0(),
        v13))
  {
    v22 = v13;
    sub_10001C064();
    sub_100073FF4(&v22, (uint64_t (*)(uint64_t))sub_10008B980, (uint64_t (*)(void *))sub_10007406C);
    v14 = sub_10001BE7C();
    v15 = v22;
    __chkstk_darwin(v14);
    v21 = v7;
    v16 = sub_10006E6F4(v15, sub_100026C48);

    swift_release();
  }

  else
  {
    __chkstk_darwin(v8);
    v21 = v2;
    sub_10008E148((void (*)(void *__return_ptr, uint64_t *))sub_1000755E8, (uint64_t)&v20, a1);
    v16 = v17;
  }

  return v16;
}

uint64_t sub_100070A14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008DB0(&qword_100131278);
  uint64_t v71 = *(void *)(v4 - 8);
  sub_100027F2C();
  __chkstk_darwin(v5);
  sub_100027FF8();
  uint64_t v66 = v6;
  __chkstk_darwin(v7);
  v69 = (char *)v62 - v8;
  v72 = (void *)a1;
  uint64_t v73 = a2;
  if (qword_100130288 != -1) {
LABEL_25:
  }
    swift_once(&qword_100130288, sub_10006F460);
  uint64_t v9 = sub_100008DB0(&qword_100131280);
  uint64_t v10 = sub_100008D98(v9, (uint64_t)qword_100135618);
  uint64_t v11 = sub_100008DB0(&qword_100131288);
  unint64_t v12 = sub_100026CE4();
  sub_1000674D0(&qword_100131298, &qword_100131280);
  uint64_t v14 = BidirectionalCollection<>.matches<A, B>(of:)(v10, type metadata for String, v11, v9, v12, v13);
  uint64_t v15 = *(void *)(v14 + 16);
  v16 = _swiftEmptyArrayStorage;
  uint64_t v70 = v4;
  uint64_t v63 = v14;
  if (v15)
  {
    v80 = _swiftEmptyArrayStorage;
    sub_100045370();
    sub_1000762D0();
    uint64_t v18 = v14 + v17;
    uint64_t v20 = *(void *)(v19 + 72);
    v67 = *(char **)(v19 + 16);
    uint64_t v68 = v20;
    v16 = v80;
    do
    {
      v21 = v69;
      ((void (*)(char *, uint64_t, uint64_t))v67)(v69, v18, v4);
      Regex.Match.output.getter(&v72, v4);
      uint64_t v22 = (uint64_t)v72;
      uint64_t v23 = v73;
      uint64_t v24 = v74;
      uint64_t v25 = v75;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v71 + 8))(v21, v4);
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
      {
        sub_100045370();
        v16 = v80;
      }

      unint64_t v27 = v16[2];
      unint64_t v26 = v16[3];
      if (v27 >= v26 >> 1)
      {
        sub_1000760D0(v26);
        sub_100045370();
        v16 = v80;
      }

      v16[2] = v27 + 1;
      v28 = &v16[4 * v27];
      v28[4] = v22;
      v28[5] = v23;
      v28[6] = v24;
      v28[7] = v25;
      v18 += v68;
      --v15;
      uint64_t v4 = v70;
    }

    while (v15);
    uint64_t v14 = v63;
  }

  v72 = v16;
  sub_10001BCF8();
  sub_100073FF4( (uint64_t *)&v72,  (uint64_t (*)(uint64_t))sub_10008B994,  (uint64_t (*)(void *))sub_1000746D0);
  sub_10001BEC0();
  uint64_t v29 = sub_100008DB0(&qword_1001312A0);
  sub_1000674D0(&qword_1001312A8, &qword_1001312A0);
  uint64_t v31 = v30;
  unint64_t v32 = sub_100026D20();
  uint64_t v4 = Sequence<>.joined(separator:)(0LL, 0xE000000000000000LL, v29, v31, v32);
  uint64_t v34 = v33;
  swift_release();
  v35 = *(char **)(v14 + 16);
  if (!v35)
  {
LABEL_22:
    sub_10001BE7C();
    return v4;
  }

  v62[0] = v4;
  v62[1] = v34;
  sub_1000762D0();
  uint64_t v37 = v14 + v36;
  v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16);
  uint64_t v64 = *(void *)(v38 + 72);
  v65 = v39;
  sub_10001C064();
  v40 = _swiftEmptyDictionarySingleton;
  uint64_t v41 = v70;
  uint64_t v42 = v66;
  while (1)
  {
    v67 = v35;
    v65(v42, v37, v41);
    Regex.Match.output.getter(&v72, v41);
    swift_bridgeObjectRelease();
    uint64_t v43 = v76;
    uint64_t v44 = v77;
    uint64_t v45 = v78;
    uint64_t v46 = v79;
    uint64_t v68 = Regex.Match.range.getter(v41);
    v69 = v47;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v40);
    v72 = v40;
    sub_100028068();
    unint64_t v49 = sub_100016078();
    uint64_t v51 = v40[2];
    BOOL v52 = (v50 & 1) == 0;
    Swift::Int v53 = v51 + v52;
    if (__OFADD__(v51, v52))
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }

    unint64_t v54 = v49;
    uint64_t v4 = v50;
    sub_100008DB0(&qword_1001312B8);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v53)) {
      break;
    }
LABEL_16:
    v40 = v72;
    if ((v4 & 1) != 0)
    {
      sub_100027F50();
    }

    else
    {
      sub_1000761DC((uint64_t)&v72[v54 >> 6]);
      v57 = (void *)(v40[6] + 32 * v54);
      void *v57 = v43;
      v57[1] = v44;
      v57[2] = v45;
      v57[3] = v46;
      sub_100027F50();
      uint64_t v58 = v40[2];
      BOOL v59 = __OFADD__(v58, 1LL);
      uint64_t v60 = v58 + 1;
      if (v59) {
        goto LABEL_24;
      }
      v40[2] = v60;
      sub_100027FA0();
    }

    sub_10001DED8();
    sub_10006C9B8();
    uint64_t v41 = v70;
    uint64_t v42 = v66;
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v66, v70);
    v37 += v64;
    v35 = v67 - 1;
    if (v67 == (char *)1)
    {
      sub_10001BE7C();
      uint64_t v4 = v62[0];
      goto LABEL_22;
    }
  }

  sub_100028068();
  unint64_t v55 = sub_100016078();
  if ((v4 & 1) == (v56 & 1))
  {
    unint64_t v54 = v55;
    goto LABEL_16;
  }

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Substring);
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

void sub_100070EAC(void **a1@<X0>, uint64_t *a2@<X8>)
{
  v3 = *a1;
  _s7BuilderVMa(0LL);
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 localizedStringForLocaleIdentifier:v4];

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v8 = v7;

  id v9 = [v3 key];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v12 = v11;

  *a2 = v10;
  a2[1] = v12;
  a2[2] = v6;
  a2[3] = v8;
}

uint64_t sub_100070F78(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2 && (uint64_t v3 = a2, *(void *)(a2 + 16)))
  {
    uint64_t v142 = a1 + 64;
    sub_10007609C();
    unint64_t v6 = v5 & v4;
    int64_t v143 = (unint64_t)(v7 + 63) >> 6;
    swift_bridgeObjectRetain();
    v151 = 0LL;
    int64_t v8 = 0LL;
    id v9 = _swiftEmptyDictionarySingleton;
    if (!v6) {
      goto LABEL_5;
    }
LABEL_4:
    unint64_t v10 = __clz(__rbit64(v6));
    uint64_t v11 = (v6 - 1) & v6;
    for (unint64_t i = v10 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v8 << 6))
    {
      int64_t v147 = v8;
      v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
      uint64_t v17 = v16[1];
      uint64_t v155 = *v16;
      uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8 * i);
      if ((unint64_t)v18 >> 62)
      {
        uint64_t v58 = v18 < 0 ? *(void *)(*(void *)(a1 + 56) + 8 * i) : v18 & 0xFFFFFFFFFFFFFF8LL;
        sub_100011A3C(v18);
        sub_100027FA0();
        uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v58);
        sub_10001BE7C();
      }

      else
      {
        uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        sub_10001C064();
        sub_100027FA0();
      }

      unint64_t v145 = v11;
      if (v19) {
        break;
      }
LABEL_57:
      sub_10001DED8();
      sub_10001BE7C();
      unint64_t v6 = v145;
      int64_t v8 = v147;
      if (v145) {
        goto LABEL_4;
      }
LABEL_5:
      int64_t v13 = v8 + 1;
      if (__OFADD__(v8, 1LL)) {
        goto LABEL_136;
      }
      if (v13 >= v143)
      {
LABEL_121:
        swift_release();
        uint64_t v63 = 0LL;
        uint64_t v127 = (uint64_t)v151;
        goto LABEL_122;
      }

      unint64_t v14 = *(void *)(v142 + 8 * v13);
      ++v8;
      if (!v14)
      {
        int64_t v8 = v13 + 1;
        if (v13 + 1 >= v143) {
          goto LABEL_121;
        }
        unint64_t v14 = *(void *)(v142 + 8 * v8);
        if (!v14)
        {
          int64_t v8 = v13 + 2;
          if (v13 + 2 >= v143) {
            goto LABEL_121;
          }
          unint64_t v14 = *(void *)(v142 + 8 * v8);
          if (!v14)
          {
            int64_t v15 = v13 + 3;
            if (v15 >= v143) {
              goto LABEL_121;
            }
            unint64_t v14 = *(void *)(v142 + 8 * v15);
            if (!v14)
            {
              while (1)
              {
                int64_t v8 = v15 + 1;
                if (__OFADD__(v15, 1LL)) {
                  goto LABEL_138;
                }
                if (v8 >= v143) {
                  goto LABEL_121;
                }
                unint64_t v14 = *(void *)(v142 + 8 * v8);
                ++v15;
                if (v14) {
                  goto LABEL_18;
                }
              }
            }

            int64_t v8 = v15;
          }
        }
      }

LABEL_78:
      uint64_t v61 = (v69 - 1) & v69;
    }

    uint64_t v146 = v72;
    uint64_t v75 = 4LL;
    uint64_t v144 = v74;
    while (1)
    {
      id v76 = (v149 & 0xC000000000000001LL) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v75 - 4, v149)
          : *(id *)(v149 + 8 * v75);
      uint64_t v77 = v76;
      if (__OFADD__(v75 - 4, 1LL)) {
        break;
      }
      uint64_t v154 = v75 - 3;
      id v78 = [v76 key];
      uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v78);
      uint64_t v81 = v80;

      uint64_t v82 = *a3;
      uint64_t v156 = v75;
      if (*(void *)(*a3 + 16LL) && (uint64_t v83 = sub_100076264(v79), (v84 & 1) != 0))
      {
        v85 = (uint64_t *)(*(void *)(v82 + 56) + 16 * v83);
        uint64_t v160 = v85[1];
        uint64_t v162 = *v85;
        swift_bridgeObjectRetain();
        sub_10001DEC4();
      }

      else
      {
        uint64_t v86 = v73;
        v152 = v63;
        uint64_t v87 = v79;
        v88 = v9;
        _s7BuilderVMa(0LL);
        NSString v89 = String._bridgeToObjectiveC()();
        v150 = v77;
        id v90 = [v77 localizedStringForLocaleIdentifier:v89];

        uint64_t v162 = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
        uint64_t v92 = v91;

        sub_1000280C8();
        uint64_t v160 = v92;
        sub_10000AFB0();
        char v93 = swift_isUniquelyReferenced_nonNull_native(*a3);
        v163 = (void *)*a3;
        *a3 = 0x8000000000000000LL;
        uint64_t v94 = v87;
        sub_100076264(v87);
        sub_1000762F0();
        if (v36) {
          goto LABEL_126;
        }
        unint64_t v97 = v95;
        char v98 = v96;
        sub_100008DB0(&qword_100130680);
        Swift::Bool v99 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v93, v87);
        id v9 = v88;
        uint64_t v73 = v86;
        if (v99)
        {
          uint64_t v100 = sub_100076264(v94);
          if ((v98 & 1) != (v101 & 1)) {
            goto LABEL_139;
          }
          unint64_t v97 = v100;
        }

        if ((v98 & 1) != 0)
        {
          v102 = (uint64_t *)(v163[7] + 16 * v97);
          swift_bridgeObjectRelease();
          uint64_t *v102 = v162;
          v102[1] = v160;
        }

        else
        {
          v163[(v97 >> 6) + 8] |= 1LL << v97;
          v103 = (uint64_t *)(v163[6] + 16 * v97);
          uint64_t *v103 = v94;
          v103[1] = v81;
          v104 = (uint64_t *)(v163[7] + 16 * v97);
          uint64_t *v104 = v162;
          v104[1] = v160;
          uint64_t v105 = v163[2];
          BOOL v36 = __OFADD__(v105, 1LL);
          uint64_t v106 = v105 + 1;
          if (v36) {
            goto LABEL_128;
          }
          v163[2] = v106;
          sub_1000280C8();
        }

        *a3 = v163;
        swift_bridgeObjectRelease_n(v81, 2LL);
        swift_bridgeObjectRelease();
        uint64_t v77 = v150;
        uint64_t v63 = v152;
      }

      sub_100027FA0();
      sub_100075674((uint64_t)v63, 0LL);
      char v107 = swift_isUniquelyReferenced_nonNull_native(v9);
      sub_100076184();
      sub_10007623C();
      if (v36) {
        goto LABEL_124;
      }
      uint64_t v110 = v108;
      char v111 = v109;
      sub_100008DB0(&qword_100132BD0);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v107, (Swift::Int)v9))
      {
        uint64_t v112 = sub_100076184();
        if ((v111 & 1) != (v113 & 1)) {
          goto LABEL_139;
        }
        uint64_t v110 = v112;
      }

      sub_10006C9B8();
      if ((v111 & 1) == 0)
      {
        sub_100076048();
        void *v114 = v146;
        v114[1] = v73;
        *(void *)(v9[7] + 8 * v110) = _swiftEmptyArrayStorage;
        uint64_t v115 = v9[2];
        uint64_t v116 = v115 + 1;
        BOOL v117 = __OFADD__(v115, 1LL);
        sub_10000AFB0();
        if (v117) {
          goto LABEL_127;
        }
        v9[2] = v116;
      }

      swift_bridgeObjectRetain();
      uint64_t v118 = v9[7];
      sub_10001198C();
      uint64_t v119 = *(void *)(v118 + 8 * v110);
      char v120 = swift_isUniquelyReferenced_nonNull_native(v119);
      *(void *)(v118 + 8 * v110) = v119;
      v121 = v77;
      if ((v120 & 1) == 0)
      {
        sub_1000760F0();
        uint64_t v119 = v124;
        *(void *)(v118 + 8 * v110) = v124;
      }

      unint64_t v122 = *(void *)(v119 + 16);
      if (v122 >= *(void *)(v119 + 24) >> 1)
      {
        sub_1000760F0();
        uint64_t v119 = v125;
        *(void *)(v118 + 8 * v110) = v125;
      }

      *(void *)(v119 + 16) = v122 + 1;
      uint64_t v123 = v119 + 16 * v122;
      *(void *)(v123 + 32) = v162;
      *(void *)(v123 + 40) = v160;
      sub_10001DED8();

      uint64_t v75 = v156 + 1;
      uint64_t v63 = sub_1000719E0;
      if (v154 == v144) {
        goto LABEL_114;
      }
    }

    __break(1u);
LABEL_124:
    __break(1u);
  }

  __break(1u);
LABEL_126:
  __break(1u);
LABEL_127:
  __break(1u);
LABEL_128:
  __break(1u);
LABEL_129:
  __break(1u);
LABEL_130:
  __break(1u);
LABEL_131:
  __break(1u);
LABEL_132:
  __break(1u);
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(type metadata for String);
  __break(1u);
LABEL_140:
  sub_1000761B4();
  sub_100076194();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)(v129, v130, v131, v132, v133, v134, v135, v136);
  __break(1u);
  return result;
}

void sub_1000719E0(void *a1@<X8>)
{
  *a1 = _swiftEmptyArrayStorage;
}

uint64_t sub_1000719F0( void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, void *a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v79 = *a2;
  uint64_t v17 = a2[2];
  uint64_t v76 = a2[1];
  uint64_t v18 = a2[3];
  sub_100070A14(v17, v18);
  int64_t v87 = v19;
  unint64_t v21 = v20;
  _s7BuilderVMa(0LL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v23 = sub_10006E2E8(v22, a3, a4);
  sub_100071F30(a3, a4, v79, v76, v17, v18, v21, v24, v71, v72, v73, a6, a7, v23, a8, a9, a10);
  if (v14)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  uint64_t v27 = v25;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v28 = 0LL;
  uint64_t v77 = v27 + 64;
  uint64_t v29 = 1LL << *(_BYTE *)(v27 + 32);
  if (v29 < 64) {
    uint64_t v30 = ~(-1LL << v29);
  }
  else {
    uint64_t v30 = -1LL;
  }
  unint64_t v31 = v30 & *(void *)(v27 + 64);
  int64_t v80 = (unint64_t)(v29 + 63) >> 6;
  uint64_t v82 = v27;
  uint64_t v32 = a1;
  uint64_t v75 = v17;
  while (v31)
  {
    unint64_t v33 = __clz(__rbit64(v31));
    v31 &= v31 - 1;
    unint64_t v34 = v33 | (v28 << 6);
LABEL_23:
    int64_t v87 = v28;
    char v38 = (uint64_t *)(*(void *)(v27 + 48) + 16 * v34);
    uint64_t v39 = *v38;
    uint64_t v40 = v38[1];
    uint64_t v41 = (uint64_t *)(*(void *)(v27 + 56) + 16 * v34);
    uint64_t v42 = v41[1];
    uint64_t v84 = *v41;
    uint64_t v43 = *a11;
    if (!*(void *)(*a11 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }

    Hasher.init(_seed:)(&v86, *(void *)(v43 + 40));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)(&v86, v39, v40);
    Swift::Int v44 = Hasher._finalize()();
    uint64_t v45 = -1LL << *(_BYTE *)(v43 + 32);
    unint64_t v46 = v44 & ~v45;
    uint64_t v47 = v43 + 56;
    if (((*(void *)(v43 + 56 + ((v46 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v46) & 1) != 0)
    {
      uint64_t v48 = *(void *)(v43 + 48);
      uint64_t v49 = (void *)(v48 + 16 * v46);
      uint64_t v50 = v49[1];
      BOOL v51 = *v49 == v39 && v50 == v40;
      if (!v51 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v49, v50, v39, v40, 0LL) & 1) == 0)
      {
        uint64_t v74 = ~v45;
        unint64_t v52 = (v46 + 1) & ~v45;
        if (((*(void *)(v47 + ((v52 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v52) & 1) != 0)
        {
          uint64_t v53 = (void *)(v48 + 16 * v52);
          uint64_t v54 = v53[1];
          BOOL v55 = *v53 == v39 && v54 == v40;
          if (v55 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v53, v54, v39, v40, 0LL) & 1) != 0) {
            goto LABEL_36;
          }
          for (unint64_t i = v52 + 1; ; unint64_t i = v57 + 1)
          {
            unint64_t v57 = i & v74;
            uint64_t v58 = (void *)(v48 + 16 * v57);
            uint64_t v59 = v58[1];
            BOOL v60 = *v58 == v39 && v59 == v40;
            if (v60 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v58, v59, v39, v40, 0LL) & 1) != 0) {
              goto LABEL_36;
            }
          }
        }

        goto LABEL_46;
      }

void sub_100071F30( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t isUniquelyReferenced_nonNull_native, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17)
{
  uint64_t v530 = a5;
  uint64_t v458 = a3;
  uint64_t v506 = a2;
  uint64_t v491 = a1;
  uint64_t v20 = a14;
  uint64_t v21 = String.subscript.getter(15LL, 983047LL);
  uint64_t v534 = v22;
  uint64_t v538 = v21;
  uint64_t v531 = v23;
  uint64_t v542 = a7;
  uint64_t v545 = v24;
  int64_t v29 = *(void *)(a7 + 16);
  uint64_t v30 = *(void *)(a14 + 16);
  uint64_t v548 = isUniquelyReferenced_nonNull_native;
  uint64_t v468 = a4;
  if (!v30)
  {
    v482 = _swiftEmptyDictionarySingleton;
    goto LABEL_23;
  }

  uint64_t v527 = *(void *)(a7 + 16);
  sub_1000119E4();
  a7 = 0LL;
  unint64_t v31 = _swiftEmptyDictionarySingleton;
  do
  {
    uint64_t v32 = *(void *)(v20 + a7 + 40);
    uint64_t v558 = *(void *)(v20 + a7 + 32);
    int64_t v29 = *(void *)(v20 + a7 + 48);
    uint64_t v33 = *(void *)(v20 + a7 + 56);
    uint64_t v34 = *(void *)(v20 + a7 + 72);
    uint64_t v552 = v30;
    uint64_t v555 = *(void *)(v20 + a7 + 64);
    uint64_t v35 = *(void *)(v20 + a7 + 80);
    char v36 = *(_BYTE *)(v20 + a7 + 88);
    char v37 = *(_BYTE *)(v20 + a7 + 89);
    uint64_t v38 = v31[2];
    uint64_t v569 = v32;
    swift_bridgeObjectRetain();
    sub_100011A3C(v33);
    uint64_t v565 = v34;
    sub_10001BD0C();
    uint64_t v561 = v35;
    sub_10001BCF8();
    if (v38)
    {
      uint64_t v39 = v31;
      uint64_t v40 = sub_100015F98(v29, v33);
      uint64_t v41 = _swiftEmptyArrayStorage;
      if ((v42 & 1) != 0)
      {
        uint64_t v41 = *(void **)(v31[7] + 8 * v40);
        sub_10001BD0C();
      }
    }

    else
    {
      uint64_t v39 = v31;
      uint64_t v41 = _swiftEmptyArrayStorage;
    }

    sub_10001DED8();
    swift_bridgeObjectRetain();
    sub_100027FA0();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0)
    {
      sub_100027F90();
      sub_10001454C();
      uint64_t v41 = v61;
    }

    unint64_t v44 = v41[2];
    unint64_t v43 = v41[3];
    if (v44 >= v43 >> 1)
    {
      sub_10003EF48(v43);
      sub_10001454C();
      uint64_t v41 = v62;
    }

    v41[2] = v44 + 1;
    uint64_t v45 = &v41[8 * v44];
    v45[4] = v558;
    v45[5] = v569;
    v45[6] = v29;
    v45[7] = v33;
    v45[8] = v555;
    v45[9] = v565;
    v45[10] = v561;
    *((_BYTE *)v45 + 88) = v36;
    *((_BYTE *)v45 + 89) = v37;
    sub_100027FA0();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v39);
    v580 = v39;
    uint64_t v46 = sub_1000762B0();
    uint64_t v48 = v39[2];
    BOOL v49 = (v47 & 1) == 0;
    Swift::Int v50 = v48 + v49;
    if (__OFADD__(v48, v49))
    {
LABEL_311:
      __break(1u);
LABEL_312:
      swift_bridgeObjectRelease();
      swift_release();
      a7 = (unint64_t)v482;
LABEL_314:
      sub_10001BC70();
      sub_10001198C();
      if (qword_1001302D8 != -1) {
        goto LABEL_339;
      }
      goto LABEL_315;
    }

    uint64_t v51 = v46;
    char v52 = v47;
    sub_100008DB0(&qword_100132BB8);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v50))
    {
      sub_1000762B0();
      sub_1000761F4();
      if (!v228)
      {
LABEL_340:
        v378 = type metadata for String;
        goto LABEL_341;
      }

      uint64_t v51 = v53;
    }

    unint64_t v31 = v580;
    if ((v52 & 1) != 0)
    {
      uint64_t v54 = v580;
      uint64_t v55 = v580[7];
      swift_bridgeObjectRelease();
      *(void *)(v55 + 8 * v51) = v41;
      unint64_t v31 = v54;
    }

    else
    {
      sub_100076078();
      unint64_t v57 = (int64_t *)(v56 + 16 * v51);
      int64_t *v57 = v29;
      v57[1] = v33;
      *(void *)(v31[7] + 8 * v51) = v41;
      uint64_t v58 = v31[2];
      BOOL v59 = __OFADD__(v58, 1LL);
      uint64_t v60 = v58 + 1;
      if (v59) {
        goto LABEL_320;
      }
      v31[2] = v60;
      sub_100027FA0();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001191C(v33);
    sub_10006C9B8();
    a7 += 64LL;
    uint64_t v20 = a14;
    --v30;
  }

  while (v552 != 1);
  v482 = v31;
  uint64_t v21 = sub_10001BC70();
  a4 = v468;
  char isUniquelyReferenced_nonNull_native = v548;
  int64_t v29 = v527;
LABEL_23:
  if ((a15 & 1) != 0)
  {
    if (!v29)
    {
      uint64_t v132 = sub_10007630C( v21,  v22,  v23,  v24,  v25,  v26,  v27,  v28,  v387,  v392,  v397,  v402,  v407,  v412,  v417,  v422,  v427,  v432,  v437,  v442,  v447,  v453,  v458,  v462,  v468,  v472,  v477,  (uint64_t)v482);
      sub_100076304( v132,  v133,  v134,  v135,  v136,  v137,  v138,  v139,  v389,  v394,  v399,  v404,  v409,  v414,  v419,  v424,  v429,  v434,  v439,  v444,  v449,  v455,  v460,  v464,  v470,  v474,  v479,  v484,  v486,  v488,  v489,  v490,  v491,  v492,  v493,  v494,  v497,  v500,  v503,  v505,  v506,  v507,  v509,  v512,  v515,  v518,  v521,  v524,  v527,
        v530,
        v531,
        v534,
        v538,
        v542,
        v545);
      if (qword_1001302D8 != -1) {
        goto LABEL_335;
      }
      goto LABEL_82;
    }

    sub_1000119E4();
    sub_100011BEC(v538, v534, v531, v545, v542);
    a7 = v63;
    uint64_t v21 = sub_10001BC70();
    if ((a7 & 1) != 0)
    {
      uint64_t v146 = sub_100076304( v21,  v22,  v23,  v24,  v25,  v26,  v27,  v28,  v387,  v392,  v397,  v402,  v407,  v412,  v417,  v422,  v427,  v432,  v437,  v442,  v447,  v453,  v458,  v462,  v468,  v472,  v477,  (uint64_t)v482,  v486,  v488,  v489,  v490,  v491,  v492,  v493,  v494,  v497,  v500,  v503,  v505,  v506,  v507,  v509,  v512,  v515,  v518,  v521,  v524,  v527,
               v530,
               v531,
               v534,
               v538,
               v542,
               v545);
      sub_10007630C( v146,  v147,  v148,  v149,  v150,  v151,  v152,  v153,  v390,  v395,  v400,  v405,  v410,  v415,  v420,  v425,  v430,  v435,  v440,  v445,  v450,  v456,  v461,  v465,  v471,  v475,  v480,  v485);
      if (qword_1001302D8 != -1) {
        goto LABEL_337;
      }
      goto LABEL_85;
    }
  }

  if ((unint64_t)v29 > 5)
  {
    char isUniquelyReferenced_nonNull_native = a4;
    uint64_t v64 = sub_10007630C( v21,  v22,  v23,  v24,  v25,  v26,  v27,  v28,  v387,  v392,  v397,  v402,  v407,  v412,  v417,  v422,  v427,  v432,  v437,  v442,  v447,  v453,  v458,  v462,  v468,  v472,  v477,  (uint64_t)v482);
    sub_100076304( v64,  v65,  v66,  v67,  v68,  v69,  v70,  v71,  v388,  v393,  v398,  v403,  v408,  v413,  v418,  v423,  v428,  v433,  v438,  v443,  v448,  v454,  v459,  v463,  v469,  v473,  v478,  v483,  v486,  v488,  v489,  v490,  v491,  v492,  v493,  v494,  v497,  v500,  v503,  v505,  v506,  v507,  v509,  v512,  v515,  v518,  v521,  v524,  v527,
      v530,
      v531,
      v534,
      v538,
      v542,
      v545);
    if (qword_1001302D8 == -1) {
      goto LABEL_28;
    }
    goto LABEL_332;
  }

  uint64_t v82 = a16;
  a7 = a13;
  sub_100033164(a13, v574);
  uint64_t v556 = v574[0];
  int64_t v559 = v574[3];
  uint64_t v83 = v574[4];
  uint64_t v550 = v574[1];
  int64_t v553 = (unint64_t)(v574[2] + 64LL) >> 6;
  sub_10000AFB0();
  uint64_t v84 = _swiftEmptyDictionarySingleton;
  v508 = a16;
  if (!v83) {
    goto LABEL_32;
  }
  while (2)
  {
    sub_1000762BC();
    uint64_t v562 = v83;
    unint64_t v86 = v85 | (v559 << 6);
LABEL_54:
    char v93 = (uint64_t *)(*(void *)(v556 + 48) + 16 * v86);
    uint64_t v94 = *v93;
    a7 = v93[1];
    uint64_t v95 = *(void *)(*(void *)(v556 + 56) + 8 * v86);
    uint64_t v96 = HIBYTE(a7) & 0xF;
    if ((a7 & 0x2000000000000000LL) == 0) {
      uint64_t v96 = v94;
    }
    uint64_t v97 = 7LL;
    if (((a7 >> 60) & ((v94 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v97 = 11LL;
    }
    uint64_t v98 = v97 | (v96 << 16);
    sub_10000AFB0();
    sub_10001C064();
    uint64_t v99 = String.subscript.getter(15LL, v98);
    uint64_t v101 = v100;
    uint64_t v103 = v102;
    uint64_t v105 = v104;
    uint64_t v570 = v95;
    sub_10001C064();
    int64_t v29 = sub_100047370();
    v580 = v84;
    uint64_t v566 = v99;
    unint64_t v106 = sub_10007615C();
    uint64_t v108 = v84[2];
    BOOL v109 = (v107 & 1) == 0;
    char isUniquelyReferenced_nonNull_native = v108 + v109;
    if (__OFADD__(v108, v109))
    {
      __break(1u);
LABEL_320:
      __break(1u);
LABEL_321:
      __break(1u);
LABEL_322:
      __break(1u);
LABEL_323:
      __break(1u);
LABEL_324:
      __break(1u);
LABEL_325:
      __break(1u);
LABEL_326:
      __break(1u);
LABEL_327:
      __break(1u);
LABEL_328:
      __break(1u);
LABEL_329:
      __break(1u);
LABEL_330:
      __break(1u);
LABEL_331:
      __break(1u);
LABEL_332:
      swift_once(&qword_1001302D8, sub_100088814);
LABEL_28:
      uint64_t v72 = sub_10000E918();
      uint64_t v73 = sub_100008D98(v72, (uint64_t)qword_100135780);
      uint64_t v74 = sub_100011A3C(isUniquelyReferenced_nonNull_native);
      Logger.logObject.getter(v74);
      os_log_type_t v75 = sub_100027FB0();
      if (sub_100027E64(v75))
      {
        sub_10000AE10(12LL);
        uint64_t v76 = sub_10007602C();
        sub_1000762E4(v76);
        sub_100027E2C(4.8149e-34);
        uint64_t v78 = sub_100027FA8(v458, v77, (uint64_t *)&v580);
        sub_100076010(v78);
        sub_10007603C();
        uint64_t v81 = "Skipping phrase template with too many tokens: %s";
        goto LABEL_87;
      }

      goto LABEL_88;
    }

    unint64_t v110 = v106;
    char v111 = v107;
    sub_100008DB0(&qword_100130688);
    Swift::Bool v112 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v29, isUniquelyReferenced_nonNull_native);
    char isUniquelyReferenced_nonNull_native = v548;
    if (v112)
    {
      sub_10007615C();
      sub_1000761F4();
      if (!v228)
      {
        v378 = &type metadata for Substring;
LABEL_341:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v378);
        __break(1u);
LABEL_342:
        sub_1000761B4();
        sub_100076194();
        _fatalErrorMessage(_:_:file:line:flags:)(v379, v380, v381, v382, v383, v384, v385, v386);
        __break(1u);
LABEL_343:
        swift_release();
        __break(1u);
        return;
      }

      unint64_t v110 = v113;
    }

    uint64_t v84 = v580;
    if ((v111 & 1) != 0)
    {
      uint64_t v114 = v580[7];
      swift_bridgeObjectRelease();
      *(void *)(v114 + 8 * v110) = v570;
    }

    else
    {
      sub_100076078();
      uint64_t v116 = (uint64_t *)(v115 + 32 * v110);
      *uint64_t v116 = v566;
      v116[1] = v101;
      v116[2] = v103;
      v116[3] = v105;
      *(void *)(v84[7] + 8 * v110) = v570;
      uint64_t v117 = v84[2];
      BOOL v59 = __OFADD__(v117, 1LL);
      uint64_t v118 = v117 + 1;
      if (v59) {
        goto LABEL_321;
      }
      v84[2] = v118;
      sub_10001BD0C();
    }

    swift_bridgeObjectRelease();
    sub_10001198C();
    sub_10000AEE8();
    sub_10006C9B8();
    uint64_t v82 = a16;
    uint64_t v83 = v562;
    if (v562) {
      continue;
    }
    break;
  }

LABEL_69:
  swift_release();
  uint64_t v119 = *(void *)(a12 + 16);
  unint64_t v120 = (unint64_t)_swiftEmptyArrayStorage;
  if (v119)
  {
    swift_bridgeObjectRetain();
    unint64_t v122 = (uint64_t *)(v121 + 40);
    uint64_t v123 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v125 = *(v122 - 1);
      uint64_t v124 = *v122;
      uint64_t v126 = HIBYTE(*v122) & 0xF;
      if ((*v122 & 0x2000000000000000LL) == 0) {
        uint64_t v126 = v125 & 0xFFFFFFFFFFFFLL;
      }
      if (v126)
      {
        sub_1000119E4();
        if ((swift_isUniquelyReferenced_nonNull_native(v123) & 1) == 0)
        {
          sub_10007613C();
          sub_1000141B8();
          uint64_t v123 = v130;
        }

        unint64_t v128 = v123[2];
        unint64_t v127 = v123[3];
        int64_t v29 = v128 + 1;
        if (v128 >= v127 >> 1)
        {
          sub_100076204(v127);
          sub_1000141B8();
          uint64_t v123 = v131;
        }

        v123[2] = v29;
        uint64_t v129 = &v123[2 * v128];
        v129[4] = v125;
        v129[5] = v124;
        uint64_t v82 = a16;
      }

      v122 += 2;
      --v119;
    }

    while (v119);
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = v548;
  }

  else
  {
    uint64_t v123 = _swiftEmptyArrayStorage;
  }

  uint64_t v160 = sub_100047370();
  v580 = v84;
  sub_100009754((uint64_t)v123, v538, v534, v531, v545, v160);
  uint64_t v451 = (uint64_t)v580;
  sub_10001198C();
  sub_10006C9B8();
  uint64_t v161 = sub_100008DB0(&qword_100130F68);
  uint64_t inited = swift_initStackObject(v161, v573);
  __int128 v504 = xmmword_1000F5520;
  *(_OWORD *)(inited + 16) = xmmword_1000F5520;
  *(void *)(inited + 32) = v530;
  *(void *)(inited + 40) = isUniquelyReferenced_nonNull_native;
  uint64_t v163 = v506;
  *(void *)(inited + 48) = v491;
  *(void *)(inited + 56) = v506;
  uint64_t v466 = inited;
  *(void *)(inited + 64) = _swiftEmptyArrayStorage;
  sub_10001C1BC();
  sub_10001BD0C();
  uint64_t v164 = sub_10000AE38();
  sub_100039394( v164,  v165,  v166,  v167,  v168,  v169,  v170,  v171,  v387,  v392,  v397,  v402,  v407,  v412,  v417,  v422,  v427,  v432,  a17,  v442,  v451,  v453,  v458,  v466,  v468,  v472);
  v173 = v172;
  sub_10000ADB0();
  v580 = v173;
  sub_100073FF4((uint64_t *)&v580, (uint64_t (*)(uint64_t))sub_10008B9A8, sub_10002602C);
  if (v477) {
    goto LABEL_343;
  }
  uint64_t v481 = 0LL;
  a7 = (unint64_t)v580;
  v174 = v482;
  uint64_t v431 = v580[2];
  if (v431)
  {
    unint64_t v175 = 0LL;
    uint64_t v436 = (uint64_t)(v580 + 4);
    uint64_t v487 = (uint64_t)(v82 + 7);
    uint64_t v426 = (uint64_t)v580;
    do
    {
      if (v175 >= *(void *)(a7 + 16)) {
        goto LABEL_331;
      }
      uint64_t v446 = v175;
      v176 = (unint64_t *)(v436 + 48 * v175);
      unint64_t v177 = *v176;
      int64_t v29 = v176[1];
      uint64_t v178 = v176[2];
      uint64_t v179 = v176[3];
      uint64_t v549 = v176[5];
      uint64_t v551 = v176[4];
      sub_10001BEF8();
      uint64_t v567 = v178;
      uint64_t v571 = v179;
      uint64_t v180 = static String._fromSubstring(_:)(v177, v29, v178, v179);
      unint64_t v554 = v29;
      unint64_t v557 = v177;
      uint64_t v560 = (unint64_t)v29 >> 16;
      uint64_t v563 = v177 >> 16;
      if (v174[2] && (uint64_t v182 = sub_100015F98(v180, v181), v174 = v482, (v183 & 1) != 0))
      {
        uint64_t v184 = *(void *)(v482[7] + 8 * v182);
        sub_10001BCF8();
        sub_10001198C();
        uint64_t v421 = v467[2];
        if (v421)
        {
          uint64_t v411 = (uint64_t)(v467 + 4);
          uint64_t v488 = v184 + 32;
          uint64_t v489 = *(void *)(v184 + 16);
          sub_10000AFB0();
          uint64_t v457 = 0LL;
          v185 = _swiftEmptyArrayStorage;
          uint64_t v476 = v184;
          while (!v489)
          {
            a7 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_140:
            uint64_t v235 = *(void *)(a7 + 16);
            uint64_t v236 = v185[2];
            int64_t v29 = v236 + v235;
            if (__OFADD__(v236, v235))
            {
              __break(1u);
LABEL_334:
              __break(1u);
LABEL_335:
              swift_once(&qword_1001302D8, sub_100088814);
LABEL_82:
              uint64_t v140 = sub_10000E918();
              uint64_t v73 = sub_100008D98(v140, (uint64_t)qword_100135780);
              uint64_t v141 = sub_100011A3C(isUniquelyReferenced_nonNull_native);
              Logger.logObject.getter(v141);
              os_log_type_t v142 = sub_100027FB0();
              if (sub_100027E64(v142))
              {
                sub_10000AE10(12LL);
                uint64_t v143 = sub_10007602C();
                sub_1000762E4(v143);
                sub_100027E2C(4.8149e-34);
                uint64_t v145 = sub_100027FA8(v530, v144, (uint64_t *)&v580);
                sub_100076010(v145);
                sub_10007603C();
                goto LABEL_87;
              }

LABEL_88:
              sub_10001191C(isUniquelyReferenced_nonNull_native);
LABEL_89:
              Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  type metadata for String,  type metadata for String,  &protocol witness table for String);
              goto LABEL_90;
            }

            char isUniquelyReferenced_nonNull_native = (uint64_t)v185;
            char v237 = swift_isUniquelyReferenced_nonNull_native(v185);
            uint64_t v238 = isUniquelyReferenced_nonNull_native;
            if ((v237 & 1) == 0 || v29 > *(void *)(isUniquelyReferenced_nonNull_native + 24) >> 1)
            {
              sub_100014948();
              uint64_t v238 = v239;
            }

            if (*(void *)(a7 + 16))
            {
              uint64_t v240 = *(void *)(v238 + 16);
              if ((*(void *)(v238 + 24) >> 1) - v240 < v235)
              {
                __break(1u);
LABEL_337:
                swift_once(&qword_1001302D8, sub_100088814);
LABEL_85:
                uint64_t v154 = sub_10000E918();
                uint64_t v73 = sub_100008D98(v154, (uint64_t)qword_100135780);
                uint64_t v155 = sub_100011A3C(isUniquelyReferenced_nonNull_native);
                Logger.logObject.getter(v155);
                os_log_type_t v156 = sub_100027FB0();
                if (!sub_100027E64(v156)) {
                  goto LABEL_88;
                }
                sub_10000AE10(12LL);
                uint64_t v157 = sub_10007602C();
                sub_1000762E4(v157);
                sub_100027E2C(4.8149e-34);
                uint64_t v159 = sub_100027FA8(v530, v158, (uint64_t *)&v580);
                sub_100076010(v159);
                sub_10007603C();
LABEL_87:
                sub_100027EEC((void *)&_mh_execute_header, v79, v80, v81);
                sub_100027F40();
                sub_10000AD78(v29);
                sub_10000AD78(v73);

                goto LABEL_89;
              }

              unint64_t v241 = v238 + 40 * v240 + 32;
              int64_t v29 = a7 + 32;
              sub_100076278();
              BOOL v244 = v244 || v241 >= v243;
              if (!v244) {
                goto LABEL_342;
              }
              char isUniquelyReferenced_nonNull_native = v242;
              sub_100008DB0(&qword_100130F70);
              sub_1000760BC();
              if (v235)
              {
                uint64_t v245 = *(void *)(isUniquelyReferenced_nonNull_native + 16);
                BOOL v59 = __OFADD__(v245, v235);
                uint64_t v246 = v245 + v235;
                if (v59)
                {
                  __break(1u);
LABEL_339:
                  swift_once(&qword_1001302D8, sub_100088814);
LABEL_315:
                  uint64_t v369 = sub_10000E918();
                  uint64_t v370 = sub_100008D98(v369, (uint64_t)qword_100135780);
                  uint64_t v371 = sub_100011A3C(v468);
                  Logger.logObject.getter(v371);
                  os_log_type_t v372 = sub_100027FB0();
                  if (sub_100027E64(v372))
                  {
                    sub_10000AE10(12LL);
                    uint64_t v373 = sub_10007602C();
                    sub_1000762E4(v373);
                    sub_100027E2C(4.8149e-34);
                    uint64_t v375 = sub_100027FA8(v458, v374, (uint64_t *)&v580);
                    sub_100076010(v375);
                    sub_10007603C();
                    sub_100027EEC( (void *)&_mh_execute_header,  v376,  v377,  "Skipping phrase template with an unrecognized token: %s");
                    sub_100027F40();
                    sub_10000AD78(v29);
                    sub_10000AD78(v370);
                  }

                  else
                  {

                    sub_10001191C(v468);
                  }

                  Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  type metadata for String,  type metadata for String,  &protocol witness table for String);
                  goto LABEL_309;
                }

                *(void *)(isUniquelyReferenced_nonNull_native + 16) = v246;
              }
            }

            else
            {
              char isUniquelyReferenced_nonNull_native = v238;
              if (v235) {
                goto LABEL_334;
              }
            }

            sub_10001198C();
            ++v457;
            v174 = v482;
            v185 = (void *)isUniquelyReferenced_nonNull_native;
            if (v457 == v421)
            {
              swift_bridgeObjectRelease();
              sub_10001191C((uint64_t)v467);
              v467 = (void *)isUniquelyReferenced_nonNull_native;
              goto LABEL_236;
            }
          }

          uint64_t v416 = (uint64_t)v185;
          v186 = (uint64_t *)(v411 + 40 * v457);
          uint64_t v187 = v186[1];
          unint64_t v120 = v186[3];
          uint64_t v510 = v186[2];
          uint64_t v513 = *v186;
          uint64_t v188 = v186[4];
          sub_10001BCF8();
          uint64_t v516 = v188;
          sub_10000AFB0();
          uint64_t v519 = v187;
          sub_10001BEF8();
          sub_100027FA0();
          uint64_t v189 = 0LL;
          a7 = (unint64_t)_swiftEmptyArrayStorage;
          uint64_t v546 = v120;
          while (2)
          {
            uint64_t v190 = v488 + (v189 << 6);
            uint64_t v191 = *(void *)(v190 + 48);
            uint64_t v528 = *(void *)(v191 + 16);
            if (!v528) {
              goto LABEL_137;
            }
            uint64_t v490 = v189;
            uint64_t v192 = *(void *)(v190 + 24);
            uint64_t v498 = *(void *)(v190 + 16);
            uint64_t v501 = *(void *)v190;
            uint64_t v193 = *(void *)(v190 + 40);
            uint64_t v495 = *(void *)(v190 + 32);
            uint64_t v525 = v191 + 32;
            HIDWORD(v492) = *(unsigned __int8 *)(v190 + 56);
            LODWORD(v493) = *(unsigned __int8 *)(v190 + 57);
            uint64_t v539 = *(void *)(v190 + 8);
            swift_bridgeObjectRetain();
            uint64_t v535 = v192;
            sub_10000AE38();
            uint64_t v532 = v193;
            sub_1000119E4();
            uint64_t v543 = v191;
            sub_100011A3C(v191);
            unint64_t v522 = sub_100026C50();
            uint64_t v194 = 0LL;
LABEL_104:
            v195 = (unint64_t *)(v525 + 16 * v194);
            unint64_t v196 = *v195;
            int64_t v197 = v195[1];
            v580 = (void *)v513;
            int64_t v581 = v519;
            unint64_t v575 = v196;
            int64_t v576 = v197;
            swift_bridgeObjectRetain();
            sub_10001C064();
            uint64_t v198 = String.replaceSubrange<A>(_:with:)(v551, v549, &v575, type metadata for String, v522);
            if (qword_100130280 != -1) {
              uint64_t v198 = swift_once(&qword_100130280, sub_10006F390);
            }
            uint64_t v205 = qword_100135610;
            uint64_t v206 = *(void *)(qword_100135610 + 16);
            if (!v206) {
              goto LABEL_110;
            }
            uint64_t v198 = sub_100075604( *(void *)(qword_100135610 + 32),  *(void *)(qword_100135610 + 40),  *(void *)(qword_100135610 + 48),  *(void *)(qword_100135610 + 56),  v557,  v554,  v567,  v571);
            if ((v198 & 1) != 0) {
              goto LABEL_108;
            }
            if (v206 != 1)
            {
              v220 = (void *)(v205 + 88);
              uint64_t v221 = 1LL;
              while (1)
              {
                unint64_t v120 = v221 + 1;
                if (__OFADD__(v221, 1LL))
                {
                  __break(1u);
                  goto LABEL_292;
                }

                uint64_t v222 = sub_1000760FC();
                BOOL v228 = v228 && v223 == v226;
                BOOL v229 = v228 && v224 == v227;
                if (v229 && v225 == v560) {
                  break;
                }
                LOBYTE(v391) = 0;
                uint64_t v198 = _stringCompareInternal(_:_:_:_:expecting:)(v222);
                if ((v198 & 1) != 0) {
                  break;
                }
                ++v221;
                v220 += 4;
                uint64_t v208 = v571;
                if (v120 == v206) {
                  goto LABEL_111;
                }
              }

    if ((v90 & 1) != 0) {
      goto LABEL_138;
    }
    uint64_t v98 = &v65[16 * v67];
    uint64_t v100 = *(void *)v98;
    uint64_t v99 = *((void *)v98 + 1);
    uint64_t v78 = __OFSUB__(v99, v100);
    uint64_t v101 = v99 - v100;
    if (v78) {
      goto LABEL_140;
    }
    if (v101 < v89) {
      goto LABEL_105;
    }
LABEL_96:
    unint64_t v106 = v67 - 1;
    if (v67 - 1 >= v63)
    {
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
      goto LABEL_143;
    }

    if (!v9) {
      goto LABEL_156;
    }
    char v107 = v10;
    uint64_t v108 = v65;
    BOOL v109 = &v65[16 * v106];
    unint64_t v110 = *(void *)v109;
    char v111 = v108;
    Swift::Bool v112 = v67;
    unint64_t v113 = &v108[16 * v67];
    uint64_t v114 = *((void *)v113 + 1);
    sub_10008AD78((char *)(v9 + 40LL * *(void *)v109), (char *)(v9 + 40LL * *(void *)v113), v9 + 40 * v114, v133);
    if (v134) {
      break;
    }
    if (v114 < v110) {
      goto LABEL_129;
    }
    if (v112 > *((void *)v107 + 2)) {
      goto LABEL_130;
    }
    *(void *)BOOL v109 = v110;
    *(void *)&v111[16 * v106 + 8] = v114;
    uint64_t v115 = *((void *)v107 + 2);
    if (v112 >= v115) {
      goto LABEL_131;
    }
    uint64_t v65 = v111;
    unint64_t v10 = v107;
    uint64_t v134 = 0LL;
    unint64_t v63 = v115 - 1;
    memmove(v113, v113 + 16, 16 * (v115 - 1 - v112));
    *((void *)v107 + 2) = v115 - 1;
    id v9 = v135;
    int64_t v8 = v132;
    if (v115 <= 2) {
      goto LABEL_105;
    }
  }

LABEL_108:
              uint64_t v207 = v516;
              sub_10000AE38();
              unint64_t v120 = v546;
              sub_100027FA0();
            }

            else
            {
LABEL_110:
              uint64_t v208 = v571;
LABEL_111:
              uint64_t v209 = sub_10007612C( v198,  v199,  v200,  v201,  v202,  v208,  v203,  v204,  v391,  v396,  v401,  v406,  v411,  v416,  v421,  v426,  v431,  v436,  v441,  v446,  v452,  v457,  v458,  (uint64_t)v467,  v468,  v476,  v481,  (uint64_t)v482,  v487,  v488,  v489,  v490,  v491,  v492,  v493,  v495,  v498,  v501,  v504,  *((uint64_t *)&v504 + 1),  v506,  (uint64_t)v508,  v510,  v513,  v516,  v519,  v522,  v525,  v528,
                       a7,
                       v532,
                       v535,
                       v539,
                       v543,
                       v546,
                       v549,
                       v551,
                       v554,
                       v557,
                       v560,
                       v563,
                       v567);
              char v211 = sub_10003ADDC(v209, v210, v508);
              sub_10000ADB0();
              swift_bridgeObjectRetain();
              sub_10001BEF8();
              sub_10000AE38();
              sub_1000280C8();
              uint64_t v207 = v516;
              sub_10000AE38();
              swift_bridgeObjectRetain();
              sub_10000AFB0();
              sub_10001C1BC();
              sub_100027FA0();
              sub_10001BD0C();
              if ((sub_100047370() & 1) == 0)
              {
                sub_1000760DC();
                uint64_t v207 = v233;
              }

              unint64_t v213 = *(void *)(v207 + 16);
              unint64_t v212 = *(void *)(v207 + 24);
              if (v213 >= v212 >> 1)
              {
                sub_1000760D0(v212);
                sub_10001454C();
                uint64_t v207 = v234;
              }

              *(void *)(v207 + 16) = v213 + 1;
              unint64_t v214 = v207 + (v213 << 6);
              *(void *)(v214 + 32) = v501;
              *(void *)(v214 + 40) = v539;
              *(void *)(v214 + 48) = v498;
              *(void *)(v214 + 56) = v535;
              char isUniquelyReferenced_nonNull_native = v532;
              *(void *)(v214 + 64) = v495;
              *(void *)(v214 + 72) = v532;
              unint64_t v120 = v546;
              *(void *)(v214 + 80) = v543;
              *(_BYTE *)(v214 + 88) = BYTE4(v492);
              *(_BYTE *)(v214 + 89) = (v211 | v493) & 1;
              sub_10001BE7C();
              sub_10000AEE8();
              sub_10001DF40();
              sub_10001BEC0();
              a7 = v530;
            }

            sub_10001BE7C();
            v215 = v580;
            int64_t v216 = v581;
            if ((swift_isUniquelyReferenced_nonNull_native(a7) & 1) == 0)
            {
              sub_10007613C();
              sub_100014948();
              a7 = v231;
            }

            unint64_t v218 = *(void *)(a7 + 16);
            unint64_t v217 = *(void *)(a7 + 24);
            if (v218 >= v217 >> 1)
            {
              sub_100076204(v217);
              sub_100014948();
              a7 = v232;
            }

            ++v194;
            *(void *)(a7 + 16) = v218 + 1;
            v219 = (void *)(a7 + 40 * v218);
            v219[4] = v215;
            v219[5] = v216;
            v219[6] = v510;
            v219[7] = v120;
            v219[8] = v207;
            if (v194 == v528)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_10001191C(v543);
              uint64_t v163 = v506;
              uint64_t v82 = v508;
              uint64_t v189 = v490;
LABEL_137:
              if (++v189 == v489)
              {
                swift_bridgeObjectRelease();
                sub_10001DED8();
                swift_bridgeObjectRelease();
                sub_10001BEC0();
                v185 = (void *)v416;
                goto LABEL_140;
              }

              continue;
            }

            goto LABEL_104;
          }
        }

        sub_10001BEC0();
        sub_10001198C();
        v467 = _swiftEmptyArrayStorage;
      }

      else
      {
        sub_10001198C();
        if (!*(void *)(v452 + 16)) {
          goto LABEL_312;
        }
        sub_1000119E4();
        unint64_t v247 = sub_100016078();
        if ((v248 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_release();
          sub_10001BC70();
          a7 = (unint64_t)v482;
          goto LABEL_314;
        }

        uint64_t v249 = *(void *)(*(void *)(v452 + 56) + 8 * v247);
        sub_10000AE38();
        sub_10001BC70();
        uint64_t v499 = v467[2];
        if (v499)
        {
          uint64_t v250 = *(void *)(v249 + 16);
          uint64_t v493 = v249;
          uint64_t v496 = (uint64_t)(v467 + 4);
          uint64_t v517 = v249 + 32;
          sub_10000AFB0();
          unint64_t v120 = 0LL;
          char isUniquelyReferenced_nonNull_native = (uint64_t)_swiftEmptyArrayStorage;
          uint64_t v514 = v250;
          do
          {
            if (v250)
            {
              uint64_t v511 = isUniquelyReferenced_nonNull_native;
              uint64_t v502 = v120;
              v251 = (uint64_t *)(v496 + 40 * v120);
              uint64_t v252 = v251[1];
              uint64_t v253 = v251[3];
              uint64_t v520 = v251[2];
              uint64_t v523 = *v251;
              uint64_t v254 = v251[4];
              v585 = _swiftEmptyArrayStorage;
              uint64_t v529 = v252;
              swift_bridgeObjectRetain();
              uint64_t v544 = v253;
              sub_10001BEF8();
              uint64_t v526 = v254;
              sub_10000AFB0();
              sub_100045640();
              unint64_t v120 = 0LL;
              v547 = v585;
              while (1)
              {
                v255 = (uint64_t *)(v517 + 16 * v120);
                uint64_t v256 = *v255;
                int64_t v29 = v255[1];
                sub_10001BD0C();
                sub_10001C064();
                uint64_t v536 = static String._fromSubstring(_:)(v557, v554, v567, v571);
                uint64_t v258 = v257;
                uint64_t v259 = sub_100008DB0((uint64_t *)&unk_100132130);
                uint64_t v260 = sub_100011A44(v259);
                *(_OWORD *)(v260 + 16) = v504;
                *(void *)(v260 + 32) = v256;
                *(void *)(v260 + 40) = v29;
                v580 = (void *)v523;
                int64_t v581 = v529;
                uint64_t v540 = v256;
                unint64_t v575 = v256;
                int64_t v576 = v29;
                unint64_t v261 = sub_100026C50();
                sub_100011A3C(v29);
                sub_10000AFB0();
                uint64_t v262 = String.replaceSubrange<A>(_:with:)(v551, v549, &v575, type metadata for String, v261);
                if (qword_100130280 != -1) {
                  uint64_t v262 = swift_once(&qword_100130280, sub_10006F390);
                }
                a7 = qword_100135610;
                uint64_t v269 = *(void *)(qword_100135610 + 16);
                if (v269)
                {
                  uint64_t v262 = sub_100075604( *(void *)(qword_100135610 + 32),  *(void *)(qword_100135610 + 40),  *(void *)(qword_100135610 + 48),  *(void *)(qword_100135610 + 56),  v557,  v554,  v567,  v571);
                  if ((v262 & 1) != 0)
                  {
LABEL_192:
                    swift_bridgeObjectRetain();
                    uint64_t v290 = v526;
                    sub_1000119E4();
                    goto LABEL_200;
                  }

                  uint64_t v533 = v258;
                  if (v269 != 1)
                  {
                    unint64_t v270 = a7 + 88;
                    uint64_t v271 = 1LL;
                    while (1)
                    {
                      a7 = v271 + 1;
                      if (__OFADD__(v271, 1LL)) {
                        break;
                      }
                      uint64_t v272 = sub_1000760FC();
                      if (v228 && v273 == v276 && v274 == v277 && v275 == v560) {
                        goto LABEL_192;
                      }
                      LOBYTE(v391) = 0;
                      uint64_t v262 = _stringCompareInternal(_:_:_:_:expecting:)(v272);
                      if ((v262 & 1) != 0) {
                        goto LABEL_192;
                      }
                      ++v271;
                      v270 += 32LL;
                      uint64_t v281 = v571;
                      if (a7 == v269) {
                        goto LABEL_185;
                      }
                    }

                    __break(1u);
LABEL_294:
                    v220 = _swiftEmptyArrayStorage;
                    goto LABEL_295;
                  }
                }

                else
                {
                  uint64_t v533 = v258;
                }

                uint64_t v281 = v571;
LABEL_185:
                uint64_t v282 = sub_10007612C( v262,  v263,  v264,  v265,  v266,  v281,  v267,  v268,  v391,  v396,  v401,  v406,  v411,  v416,  v421,  v426,  v431,  v436,  v441,  v446,  v452,  v457,  v458,  (uint64_t)v467,  v468,  v476,  v481,  (uint64_t)v482,  v487,  v488,  v489,  v490,  v491,  v492,  v493,  v496,  v499,  v502,  v504,  *((uint64_t *)&v504 + 1),  v506,  (uint64_t)v508,  v511,  v514,  v517,  v520,  v523,  v526,  v529,
                         v530,
                         v533,
                         v536,
                         v540,
                         v544,
                         (uint64_t)v547,
                         v549,
                         v551,
                         v554,
                         v557,
                         v560,
                         v563,
                         v567);
                uint64_t v284 = v283;
                uint64_t v285 = v82[2];
                if (!v285) {
                  goto LABEL_194;
                }
                uint64_t v286 = v282;
                uint64_t v287 = v82[4];
                uint64_t v288 = v82[5];
                BOOL v289 = v287 == v286 && v288 == v284;
                if (v289 || (sub_10007622C(v287, v288) & 1) != 0)
                {
                  sub_10007616C();
                  goto LABEL_195;
                }

                if (v285 == 1)
                {
LABEL_194:
                  sub_100076250();
                  goto LABEL_195;
                }

                a7 = v487;
                uint64_t v301 = 1LL;
                while (1)
                {
                  uint64_t v302 = v301 + 1;
                  if (__OFADD__(v301, 1LL))
                  {
                    __break(1u);
                    goto LABEL_311;
                  }

                  uint64_t v303 = *(void *)(a7 - 8);
                  uint64_t v304 = *(void *)a7;
                  BOOL v305 = v303 == v286 && v304 == v284;
                  if (v305 || (sub_10007622C(v303, v304) & 1) != 0) {
                    break;
                  }
                  a7 += 16LL;
                  ++v301;
                  if (v302 == v285)
                  {
                    sub_100076250();
                    goto LABEL_214;
                  }
                }

                sub_10007616C();
LABEL_214:
                uint64_t v163 = v506;
                uint64_t v82 = v508;
LABEL_195:
                sub_10000ADB0();
                sub_100011A3C(v163);
                sub_1000119E4();
                sub_10001BCF8();
                sub_100011A3C(v260);
                swift_bridgeObjectRetain();
                uint64_t v290 = v526;
                sub_1000119E4();
                sub_10000AFB0();
                sub_10001C064();
                unint64_t v291 = a7;
                if ((swift_isUniquelyReferenced_nonNull_native(v526) & 1) == 0)
                {
                  sub_1000760DC();
                  uint64_t v290 = v306;
                }

                unint64_t v293 = *(void *)(v290 + 16);
                unint64_t v292 = *(void *)(v290 + 24);
                if (v293 >= v292 >> 1)
                {
                  sub_10003EF48(v292);
                  sub_10001454C();
                  uint64_t v290 = v307;
                }

                *(void *)(v290 + 16) = v293 + 1;
                unint64_t v294 = v290 + (v293 << 6);
                *(void *)(v294 + 32) = v491;
                *(void *)(v294 + 40) = v163;
                *(void *)(v294 + 48) = v537;
                *(void *)(v294 + 56) = v291;
                *(void *)(v294 + 64) = v541;
                *(void *)(v294 + 72) = v29;
                *(void *)(v294 + 80) = v260;
                *(_BYTE *)(v294 + 88) = 1;
                *(_BYTE *)(v294 + 89) = v530;
                sub_10001191C(v260);
                sub_10001191C(v29);
                int64_t v29 = v291;
LABEL_200:
                sub_10001DF40();
                sub_10001191C(v29);
                sub_10001BEC0();
                sub_10000AEE8();
                v295 = v580;
                int64_t v296 = v581;
                v297 = v547;
                v585 = v547;
                unint64_t v299 = v547[2];
                unint64_t v298 = v547[3];
                int64_t v29 = v299 + 1;
                if (v299 >= v298 >> 1)
                {
                  sub_1000760D0(v298);
                  sub_100045640();
                  v297 = v585;
                }

                ++v120;
                v297[2] = v29;
                v547 = v297;
                v300 = &v297[5 * v299];
                v300[4] = v295;
                v300[5] = v296;
                v300[6] = v520;
                v300[7] = v544;
                v300[8] = v290;
                uint64_t v250 = v514;
                uint64_t v163 = v506;
                if (v120 == v514)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  char isUniquelyReferenced_nonNull_native = v511;
                  unint64_t v120 = v502;
                  v308 = v547;
                  goto LABEL_216;
                }
              }
            }

            v308 = _swiftEmptyArrayStorage;
LABEL_216:
            uint64_t v309 = v308[2];
            a7 = *(void *)(isUniquelyReferenced_nonNull_native + 16);
            if (__OFADD__(a7, v309)) {
              goto LABEL_323;
            }
            if ((swift_isUniquelyReferenced_nonNull_native(isUniquelyReferenced_nonNull_native) & 1) == 0
              || (int64_t)(a7 + v309) > *(void *)(isUniquelyReferenced_nonNull_native + 24) >> 1)
            {
              sub_100014948();
              char isUniquelyReferenced_nonNull_native = v310;
            }

            if (v308[2])
            {
              uint64_t v311 = *(void *)(isUniquelyReferenced_nonNull_native + 16);
              if ((*(void *)(isUniquelyReferenced_nonNull_native + 24) >> 1) - v311 < v309) {
                goto LABEL_328;
              }
              unint64_t v312 = isUniquelyReferenced_nonNull_native + 40 * v311 + 32;
              int64_t v29 = (int64_t)(v308 + 4);
              sub_100076278();
              if (!v244 && v312 < v313) {
                goto LABEL_342;
              }
              sub_100008DB0(&qword_100130F70);
              sub_1000760BC();
              uint64_t v82 = v508;
              if (v309)
              {
                uint64_t v315 = *(void *)(isUniquelyReferenced_nonNull_native + 16);
                BOOL v59 = __OFADD__(v315, v309);
                uint64_t v316 = v315 + v309;
                if (v59) {
                  goto LABEL_329;
                }
                *(void *)(isUniquelyReferenced_nonNull_native + 16) = v316;
              }
            }

            else
            {
              uint64_t v82 = v508;
              if (v309) {
                goto LABEL_324;
              }
            }

            ++v120;
            swift_bridgeObjectRelease();
          }

          while (v120 != v499);
          swift_bridgeObjectRelease();
          sub_10001191C((uint64_t)v467);
          v467 = (void *)isUniquelyReferenced_nonNull_native;
        }

        else
        {
          sub_10000ADB0();
          sub_10001198C();
          v467 = _swiftEmptyArrayStorage;
        }

        v174 = v482;
      }

LABEL_236:
      swift_bridgeObjectRelease();
      unint64_t v175 = v446 + 1;
      a7 = v426;
    }

    while (v446 + 1 != v431);
  }

  sub_10000ADB0();
  swift_release();
  char isUniquelyReferenced_nonNull_native = (uint64_t)_swiftEmptyArrayStorage;
  v580 = _swiftEmptyArrayStorage;
  sub_100033164(v441, &v575);
  a7 = v575;
  int64_t v317 = v576;
  int64_t v318 = v578;
  uint64_t v319 = v579;
  int64_t v29 = (unint64_t)(v577 + 64) >> 6;
  sub_100011A3C(v441);
  if (!v319) {
    goto LABEL_239;
  }
LABEL_238:
  v319 &= v319 - 1;
  while (1)
  {
    swift_bridgeObjectRetain();
    sub_100042858();
    if (v319) {
      goto LABEL_238;
    }
LABEL_239:
    int64_t v320 = v318 + 1;
    if (__OFADD__(v318, 1LL)) {
      goto LABEL_325;
    }
    if (v320 >= v29) {
      break;
    }
    uint64_t v321 = *(void *)(v317 + 8 * v320);
    if (!v321)
    {
      int64_t v322 = v318 + 2;
      if (v318 + 2 >= v29) {
        break;
      }
      uint64_t v321 = *(void *)(v317 + 8 * v322);
      if (v321) {
        goto LABEL_250;
      }
      int64_t v322 = v318 + 3;
      if (v318 + 3 >= v29) {
        break;
      }
      uint64_t v321 = *(void *)(v317 + 8 * v322);
      if (v321) {
        goto LABEL_250;
      }
      int64_t v322 = v318 + 4;
      if (v318 + 4 >= v29) {
        break;
      }
      uint64_t v321 = *(void *)(v317 + 8 * v322);
      if (v321) {
        goto LABEL_250;
      }
      int64_t v322 = v318 + 5;
      if (v318 + 5 >= v29) {
        break;
      }
      uint64_t v321 = *(void *)(v317 + 8 * v322);
      if (v321)
      {
LABEL_250:
        int64_t v320 = v322;
      }

      else
      {
        int64_t v320 = v318 + 6;
        if (v318 + 6 >= v29) {
          break;
        }
        uint64_t v321 = *(void *)(v317 + 8 * v320);
        if (!v321)
        {
          int64_t v323 = v318 + 7;
          do
          {
            if (v323 >= v29) {
              goto LABEL_260;
            }
            uint64_t v321 = *(void *)(v317 + 8 * v323++);
          }

          while (!v321);
          int64_t v320 = v323 - 1;
        }
      }
    }

    uint64_t v319 = (v321 - 1) & v321;
    int64_t v318 = v320;
  }

LABEL_260:
  sub_10000ADB0();
  swift_release();
  a7 = (unint64_t)v580;
  v585 = _swiftEmptyArrayStorage;
  sub_100033164(v441, &v580);
  int64_t v29 = v581;
  int64_t v324 = v583;
  char isUniquelyReferenced_nonNull_native = v584;
  int64_t v325 = (unint64_t)(v582 + 64) >> 6;
  sub_100011A3C(v441);
  if (!isUniquelyReferenced_nonNull_native) {
    goto LABEL_262;
  }
  while (2)
  {
    isUniquelyReferenced_nonNull_native &= isUniquelyReferenced_nonNull_native - 1;
LABEL_275:
    swift_bridgeObjectRetain();
    sub_100042858();
    if (isUniquelyReferenced_nonNull_native) {
      continue;
    }
    break;
  }

LABEL_262:
  int64_t v326 = v324 + 1;
  if (__OFADD__(v324, 1LL)) {
    goto LABEL_326;
  }
  if (v326 >= v325) {
    goto LABEL_283;
  }
  uint64_t v327 = *(void *)(v29 + 8 * v326);
  if (v327)
  {
LABEL_274:
    char isUniquelyReferenced_nonNull_native = (v327 - 1) & v327;
    int64_t v324 = v326;
    goto LABEL_275;
  }

  int64_t v328 = v324 + 2;
  if (v324 + 2 >= v325) {
    goto LABEL_283;
  }
  uint64_t v327 = *(void *)(v29 + 8 * v328);
  if (v327) {
    goto LABEL_273;
  }
  int64_t v328 = v324 + 3;
  if (v324 + 3 >= v325) {
    goto LABEL_283;
  }
  uint64_t v327 = *(void *)(v29 + 8 * v328);
  if (v327) {
    goto LABEL_273;
  }
  int64_t v328 = v324 + 4;
  if (v324 + 4 >= v325) {
    goto LABEL_283;
  }
  uint64_t v327 = *(void *)(v29 + 8 * v328);
  if (v327) {
    goto LABEL_273;
  }
  int64_t v328 = v324 + 5;
  if (v324 + 5 >= v325) {
    goto LABEL_283;
  }
  uint64_t v327 = *(void *)(v29 + 8 * v328);
  if (v327)
  {
LABEL_273:
    int64_t v326 = v328;
    goto LABEL_274;
  }

  int64_t v326 = v324 + 6;
  if (v324 + 6 >= v325) {
    goto LABEL_283;
  }
  uint64_t v327 = *(void *)(v29 + 8 * v326);
  if (v327) {
    goto LABEL_274;
  }
  int64_t v329 = v324 + 7;
  while (v329 < v325)
  {
    uint64_t v327 = *(void *)(v29 + 8 * v329++);
    if (v327)
    {
      int64_t v326 = v329 - 1;
      goto LABEL_274;
    }
  }

LABEL_283:
  swift_bridgeObjectRelease();
  swift_release();
  v330 = v585;
  uint64_t v331 = v585[2];
  if (!v331) {
    goto LABEL_294;
  }
  sub_1000119E4();
  v332 = v330 + 7;
  v220 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v334 = *(v332 - 1);
    uint64_t v333 = *v332;
    sub_10001C064();
    if ((sub_100047370() & 1) == 0)
    {
      sub_1000760F0();
      v220 = v337;
    }

    unint64_t v120 = v220[2];
    unint64_t v335 = v220[3];
    if (v120 >= v335 >> 1)
    {
      sub_1000760D0(v335);
      sub_1000760F0();
      v220 = v338;
    }

    v220[2] = v120 + 1;
    v336 = &v220[2 * v120];
    v336[4] = v334;
    v336[5] = v333;
    v332 += 8;
    --v331;
  }

  while (v331);
LABEL_292:
  sub_10001BC70();
LABEL_295:
  sub_10001BC70();
  sub_10000AE38();
  sub_10000AFB0();
  v339 = sub_10006E824((uint64_t)v467, (uint64_t)v220, a7);
  sub_10000ADB0();
  sub_10001BE7C();
  sub_10001198C();
  v585 = v339;
  sub_10007532C();
  uint64_t v340 = sub_1000BB3CC(15LL, (uint64_t)v585);
  uint64_t v344 = (uint64_t)sub_10003F194(v340, v341, v342, v343);
  uint64_t v352 = v344;
  uint64_t v353 = *(void *)(v344 + 16);
  if (v353)
  {
    sub_10000AFB0();
    v354 = (uint64_t *)(v352 + 64);
    v355 = _swiftEmptyDictionarySingleton;
    while (1)
    {
      uint64_t v564 = v353;
      char isUniquelyReferenced_nonNull_native = *(v354 - 4);
      int64_t v29 = *(v354 - 3);
      uint64_t v356 = *(v354 - 1);
      uint64_t v357 = *v354;
      a7 = *(v354 - 2);
      sub_100011A3C(v29);
      sub_1000119E4();
      sub_10001BCF8();
      uint64_t v568 = sub_100073A6C(a7, v356, v357);
      uint64_t v572 = v358;
      char v359 = sub_100047370();
      v585 = v355;
      sub_10007628C();
      sub_1000762F0();
      if (v59) {
        goto LABEL_327;
      }
      a7 = v360;
      char v362 = v361;
      sub_100008DB0(&qword_100130680);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v359, v120))
      {
        sub_10007628C();
        sub_1000761F4();
        if (!v228) {
          goto LABEL_340;
        }
        a7 = v363;
      }

      v355 = v585;
      if ((v362 & 1) != 0)
      {
        v364 = (uint64_t *)(v585[7] + 16 * a7);
        swift_bridgeObjectRelease();
        uint64_t *v364 = v568;
        v364[1] = v572;
      }

      else
      {
        sub_1000761DC((uint64_t)&v585[a7 >> 6]);
        v365 = (uint64_t *)(v355[6] + 16 * a7);
        uint64_t *v365 = isUniquelyReferenced_nonNull_native;
        v365[1] = v29;
        v366 = (uint64_t *)(v355[7] + 16 * a7);
        uint64_t *v366 = v568;
        v366[1] = v572;
        uint64_t v367 = v355[2];
        BOOL v59 = __OFADD__(v367, 1LL);
        uint64_t v368 = v367 + 1;
        if (v59) {
          goto LABEL_330;
        }
        v355[2] = v368;
        sub_10001C064();
      }

      sub_10001BEC0();
      swift_bridgeObjectRelease();
      sub_10001191C(v29);
      sub_10006C9B8();
      v354 += 5;
      --v353;
      if (v564 == 1)
      {
        uint64_t v344 = sub_10001198C();
        break;
      }
    }
  }

  sub_100068308( v344,  v345,  v346,  v347,  v348,  v349,  v350,  v351,  v391,  v396,  v401,  v406,  v411,  v416,  v421,  v426,  v431,  v436,  v441,  v446,  v452);
LABEL_309:
  swift_bridgeObjectRelease();
LABEL_90:
  sub_10001DEE8();
}

uint64_t sub_100073A6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  if (v5)
  {
    uint64_t v46 = a1;
    uint64_t v47 = a2;
    sub_10001C064();
    uint64_t v6 = 0LL;
    uint64_t v7 = _swiftEmptyArrayStorage;
    uint64_t v48 = a3;
    while (1)
    {
      uint64_t v50 = (uint64_t)v7;
      uint64_t v8 = *(void *)(a3 + v6 + 40);
      uint64_t v9 = *(void *)(a3 + v6 + 48);
      uint64_t v10 = *(void *)(a3 + v6 + 56);
      uint64_t v11 = *(void *)(a3 + v6 + 64);
      uint64_t v12 = *(void **)(a3 + v6 + 72);
      int v13 = *(unsigned __int8 *)(a3 + v6 + 88);
      int v14 = *(unsigned __int8 *)(a3 + v6 + 89);
      uint64_t v49 = v8;
      if (v13 == 1)
      {
        swift_bridgeObjectRetain();
        sub_10001BD0C();
        sub_100011A3C((uint64_t)v12);
        sub_10001C1BC();
        v15._countAndFlagsBits = v11;
        v15._object = v12;
        String.append(_:)(v15);
        sub_10001BEC0();
        sub_100038A74(34LL);
        if (v14) {
          goto LABEL_7;
        }
      }

      else
      {
        swift_bridgeObjectRetain();
        sub_10001BD0C();
        sub_100011A3C((uint64_t)v12);
        sub_10001C1BC();
        if (v14)
        {
LABEL_7:
          uint64_t v55 = v10;
          sub_10001BD0C();
          v24._countAndFlagsBits = 23357LL;
          v24._object = (void *)0xE200000000000000LL;
          String.append(_:)(v24);
          sub_1000761CC(v25, v26, v27, v28, v29, v30, v31, v32, v45, v46, v47, v48, v49, v50, v9);
          sub_10001DED8();
          sub_100038A74(93LL);
          swift_bridgeObjectRelease();
          sub_10001BEC0();
          sub_10000AEE8();
          goto LABEL_8;
        }
      }

      uint64_t v55 = v10;
      sub_10001BD0C();
      sub_100038A74(61LL);
      sub_1000761CC(v16, v17, v18, v19, v20, v21, v22, v23, v45, v46, v47, v48, v49, v50, v9);
      swift_bridgeObjectRelease();
      sub_10001BEC0();
      sub_10000AEE8();
      swift_bridgeObjectRelease();
LABEL_8:
      swift_bridgeObjectRelease();
      uint64_t v7 = (void *)v51;
      if ((swift_isUniquelyReferenced_nonNull_native(v51) & 1) == 0)
      {
        sub_100027F90();
        sub_1000141B8();
        uint64_t v7 = v36;
      }

      unint64_t v34 = v7[2];
      unint64_t v33 = v7[3];
      if (v34 >= v33 >> 1)
      {
        sub_10003EF48(v33);
        sub_1000141B8();
        uint64_t v7 = v37;
      }

      v7[2] = v34 + 1;
      uint64_t v35 = &v7[2 * v34];
      v35[4] = *(void *)v53;
      v35[5] = v55;
      v6 += 64LL;
      --v5;
      a3 = v48;
      if (!v5)
      {
        sub_10001BE7C();
        uint64_t v4 = v46;
        break;
      }
    }
  }

  uint64_t v38 = sub_100008DB0(&qword_100132BC0);
  sub_1000674D0(&qword_100132BC8, &qword_100132BC0);
  uint64_t v40 = BidirectionalCollection<>.joined(separator:)(44LL, 0xE100000000000000LL, v38, v39);
  char v42 = v41;
  sub_10001BEC0();
  sub_10001BEF8();
  v43._countAndFlagsBits = v40;
  v43._object = v42;
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  sub_10001BE7C();
  sub_10000AFB0();
  sub_100038A74(41LL);
  sub_10001198C();
  return v4;
}

id sub_100073D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSString v8 = String._bridgeToObjectiveC()();
  uint64_t v9 = swift_bridgeObjectRelease();
  sub_100011AB4(v9, (unint64_t *)&qword_100131250, &OBJC_CLASS___LNStaticDeferredLocalizedString_ptr);
  v10.super.isa = Array._bridgeToObjectiveC()().super.isa;
  sub_10001BE7C();
  sub_100008DB0(&qword_100130BE0);
  v11.super.isa = sub_10007626C().super.isa;
  uint64_t v12 = sub_10000AEE8();
  sub_100011AB4(v12, &qword_100130BE8, &OBJC_CLASS___LNValue_ptr);
  v13.super.isa = sub_10007626C().super.isa;
  sub_10001BEC0();
  if (a6)
  {
    type metadata accessor for LNPlatformName(0LL);
    sub_100011AB4(v14, &qword_100132BB0, &OBJC_CLASS___LNAvailabilityAnnotation_ptr);
    sub_100067940(&qword_1001308E0, (uint64_t (*)(uint64_t))type metadata accessor for LNPlatformName);
    v15.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }

  else
  {
    v15.super.isa = 0LL;
  }

  id v16 = [v6 initWithIntentIdentifier:v8 phraseTemplates:v10.super.isa parameterValues:v11.super.isa impliedValues:v13.super.isa availabilityAnnotations:v15.super.isa];

  return v16;
}

id sub_100073EA0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a5);
  if (!a7)
  {
    NSString v16 = 0LL;
    if (a9) {
      goto LABEL_3;
    }
LABEL_5:
    NSString v17 = 0LL;
    goto LABEL_6;
  }

  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a7);
  if (!a9) {
    goto LABEL_5;
  }
LABEL_3:
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a9);
LABEL_6:
  id v18 = [v9 initWithKind:a1 parentIdentifier:v14 phrase:v15 expected:v16 phraseTemplate:v17];

  return v18;
}

uint64_t sub_100073FAC(uint64_t *a1)
{
  return sub_100073FF4( a1,  (uint64_t (*)(uint64_t))sub_10008B980,  (uint64_t (*)(void *))sub_10007406C);
}

uint64_t sub_100073FD0(uint64_t *a1)
{
  return sub_100073FF4( a1,  (uint64_t (*)(uint64_t))sub_10008B994,  (uint64_t (*)(void *))sub_1000746D0);
}

uint64_t sub_100073FF4(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void *))
{
  uint64_t v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v6 = a2(v6);
  }
  uint64_t v7 = *(void *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  uint64_t result = a3(v9);
  *a1 = v6;
  return result;
}

void sub_10007406C(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      if (v3) {
        sub_100074DCC(0LL, v3, 1LL, a1);
      }
      return;
    }

    goto LABEL_144;
  }

  Swift::Int v5 = v4;
  sub_1000B0590(v3 / 2);
  uint64_t v104 = v6;
  uint64_t v105 = v3;
  unint64_t v106 = v7;
  uint64_t v102 = a1;
  if (v3 <= 0)
  {
    char v107 = (char *)_swiftEmptyArrayStorage;
    unint64_t v37 = _swiftEmptyArrayStorage[2];
LABEL_110:
    if (v37 < 2)
    {
LABEL_121:
      swift_bridgeObjectRelease();
      if (v3 >= -1)
      {
        *(void *)(v104 + 16) = 0LL;
        swift_bridgeObjectRelease();
        return;
      }

      goto LABEL_149;
    }

    uint64_t v94 = *v102;
    while (1)
    {
      unint64_t v95 = v37 - 2;
      if (v37 < 2) {
        break;
      }
      if (!v94) {
        goto LABEL_153;
      }
      uint64_t v96 = v107;
      uint64_t v97 = *(void *)&v107[16 * v95 + 32];
      uint64_t v98 = *(void *)&v107[16 * v37 + 24];
      sub_100074F8C( (char *)(v94 + 16 * v97),  (char *)(v94 + 16LL * *(void *)&v107[16 * v37 + 16]),  v94 + 16 * v98,  v106);
      if (v1) {
        goto LABEL_106;
      }
      if (v98 < v97) {
        goto LABEL_139;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v107) & 1) == 0) {
        uint64_t v96 = sub_10008B0EC((uint64_t)v107);
      }
      if (v95 >= *((void *)v96 + 2)) {
        goto LABEL_140;
      }
      uint64_t v99 = &v96[16 * v95 + 32];
      *(void *)uint64_t v99 = v97;
      *((void *)v99 + 1) = v98;
      unint64_t v100 = *((void *)v96 + 2);
      if (v37 > v100) {
        goto LABEL_141;
      }
      memmove(&v96[16 * v37 + 16], &v96[16 * v37 + 32], 16 * (v100 - v37));
      char v107 = v96;
      *((void *)v96 + 2) = v100 - 1;
      unint64_t v37 = v100 - 1;
      Swift::Int v3 = v105;
      if (v100 <= 2) {
        goto LABEL_121;
      }
    }

LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
    return;
  }

  Swift::Int v103 = v5;
  Swift::Int v8 = 0LL;
  uint64_t v9 = *a1;
  uint64_t v101 = *a1 + 8;
  char v107 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    Swift::Int v10 = v8++;
    if (v8 >= v3) {
      goto LABEL_32;
    }
    NSDictionary v11 = (uint64_t *)(v9 + 16 * v8);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    NSString v14 = (void *)(v9 + 16 * v10);
    uint64_t v15 = v14[1];
    if (v12 == *v14 && v13 == v15)
    {
      Swift::Int v18 = v10 + 2;
      if (v10 + 2 >= v3) {
        goto LABEL_31;
      }
      int v17 = 0;
LABEL_13:
      int v19 = (uint64_t *)(v101 + 16 * v18);
      do
      {
        uint64_t v20 = *(v19 - 1);
        uint64_t v21 = *v19;
        int v22 = (void *)(v9 + 16 * v8);
        uint64_t v23 = v22[1];
        if (v20 == *v22 && v21 == v23)
        {
          if ((v17 & 1) != 0) {
            goto LABEL_24;
          }
        }

        else if (((v17 ^ _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, *v22, v23, 1LL)) & 1) != 0)
        {
          goto LABEL_23;
        }

        v19 += 2;
        Swift::Int v25 = v18 + 1;
        Swift::Int v8 = v18;
        Swift::Int v18 = v25;
      }

      while (v25 < v3);
      Swift::Int v18 = v25;
      goto LABEL_23;
    }

    int v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, *v14, v15, 1LL);
    Swift::Int v18 = v10 + 2;
    if (v10 + 2 < v3) {
      goto LABEL_13;
    }
LABEL_23:
    Swift::Int v8 = v18;
    if ((v17 & 1) == 0) {
      goto LABEL_32;
    }
LABEL_24:
    if (v18 < v10) {
      goto LABEL_148;
    }
    if (v10 < v18)
    {
      uint64_t v26 = 16 * v18;
      uint64_t v27 = 16 * v10;
      Swift::Int v28 = v18;
      Swift::Int v29 = v10;
      do
      {
        if (v29 != --v28)
        {
          if (!v9) {
            goto LABEL_152;
          }
          uint64_t v30 = v9 + v26;
          uint64_t v31 = *(void *)(v9 + v27);
          uint64_t v32 = *(void *)(v9 + v27 + 8);
          *(_OWORD *)(v9 + v27) = *(_OWORD *)(v9 + v26 - 16);
          *(void *)(v30 - 16) = v31;
          *(void *)(v30 - 8) = v32;
        }

        ++v29;
        v26 -= 16LL;
        v27 += 16LL;
      }

      while (v29 < v28);
    }

LABEL_106:
  swift_bridgeObjectRelease();
  if (v105 < -1) {
    goto LABEL_145;
  }
  *(void *)(v104 + 16) = 0LL;
  swift_bridgeObjectRelease();
}

void sub_1000746D0(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      if (v3) {
        sub_100074E90(0LL, v3, 1LL, a1);
      }
      return;
    }

    goto LABEL_164;
  }

  Swift::Int v5 = v4;
  sub_1000B05A8(v3 / 2);
  uint64_t v116 = v6;
  uint64_t v117 = v3;
  uint64_t v118 = v7;
  uint64_t v114 = a1;
  if (v3 <= 0)
  {
    uint64_t v119 = (char *)_swiftEmptyArrayStorage;
    unint64_t v43 = _swiftEmptyArrayStorage[2];
LABEL_130:
    if (v43 < 2)
    {
LABEL_141:
      swift_bridgeObjectRelease();
      if (v117 >= -1)
      {
        *(void *)(v116 + 16) = 0LL;
        swift_bridgeObjectRelease();
        return;
      }

      goto LABEL_169;
    }

    uint64_t v105 = *v114;
    while (1)
    {
      unint64_t v106 = v43 - 2;
      if (v43 < 2) {
        break;
      }
      if (!v105) {
        goto LABEL_173;
      }
      char v107 = v119;
      uint64_t v108 = *(void *)&v119[16 * v106 + 32];
      uint64_t v109 = *(void *)&v119[16 * v43 + 24];
      sub_100075130( (char *)(v105 + 32 * v108),  (char *)(v105 + 32LL * *(void *)&v119[16 * v43 + 16]),  v105 + 32 * v109,  v118);
      if (v1) {
        goto LABEL_126;
      }
      if (v109 < v108) {
        goto LABEL_159;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v119) & 1) == 0) {
        char v107 = sub_10008B0EC((uint64_t)v119);
      }
      if (v106 >= *((void *)v107 + 2)) {
        goto LABEL_160;
      }
      unint64_t v110 = &v107[16 * v106 + 32];
      *(void *)unint64_t v110 = v108;
      *((void *)v110 + 1) = v109;
      unint64_t v111 = *((void *)v107 + 2);
      if (v43 > v111) {
        goto LABEL_161;
      }
      memmove(&v107[16 * v43 + 16], &v107[16 * v43 + 32], 16 * (v111 - v43));
      uint64_t v119 = v107;
      *((void *)v107 + 2) = v111 - 1;
      unint64_t v43 = v111 - 1;
      if (v111 <= 2) {
        goto LABEL_141;
      }
    }

LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
LABEL_167:
    __break(1u);
LABEL_168:
    __break(1u);
LABEL_169:
    __break(1u);
LABEL_170:
    __break(1u);
LABEL_171:
    __break(1u);
LABEL_172:
    __break(1u);
LABEL_173:
    __break(1u);
    return;
  }

  Swift::Int v115 = v5;
  Swift::Int v8 = 0LL;
  uint64_t v9 = *a1;
  uint64_t v112 = *a1 - 32;
  uint64_t v113 = *a1 + 16;
  uint64_t v119 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    Swift::Int v10 = v8++;
    if (v8 >= v3) {
      goto LABEL_45;
    }
    NSDictionary v11 = (unint64_t *)(v9 + 32 * v8);
    unint64_t v12 = *v11;
    unint64_t v13 = v11[1];
    unint64_t v14 = v11[2];
    unint64_t v15 = v11[3];
    NSString v16 = (void *)(v9 + 32 * v10);
    BOOL v17 = v14 == v16[2] && v15 == v16[3];
    BOOL v18 = v17 && v12 >> 16 == *v16 >> 16;
    if (v18 && v13 >> 16 == v16[1] >> 16)
    {
      Swift::Int v21 = v10 + 2;
      if (v10 + 2 >= v3) {
        goto LABEL_44;
      }
      int v20 = 0;
    }

    else
    {
      int v20 = _stringCompareInternal(_:_:_:_:expecting:)(v14);
      Swift::Int v21 = v10 + 2;
      if (v10 + 2 >= v3) {
        goto LABEL_36;
      }
    }

    int v22 = (void *)(v113 + 32 * v21);
    do
    {
      uint64_t v23 = (void *)(v9 + 32 * v8);
      if (*v22 == v23[2] && v22[1] == v23[3] && *(v22 - 2) >> 16 == *v23 >> 16 && *(v22 - 1) >> 16 == v23[1] >> 16)
      {
        if ((v20 & 1) != 0)
        {
          Swift::Int v3 = v117;
          goto LABEL_37;
        }
      }

      else if (((v20 ^ _stringCompareInternal(_:_:_:_:expecting:)(*v22)) & 1) != 0)
      {
        goto LABEL_35;
      }

      uint64_t v27 = v21 + 1;
      v22 += 4;
      Swift::Int v8 = v21;
      Swift::Int v21 = v27;
    }

    while (v27 < v117);
    Swift::Int v21 = v27;
LABEL_35:
    Swift::Int v3 = v117;
LABEL_36:
    Swift::Int v8 = v21;
    if ((v20 & 1) != 0)
    {
LABEL_37:
      if (v21 < v10) {
        goto LABEL_168;
      }
      if (v10 < v21)
      {
        uint64_t v28 = 32 * v21;
        uint64_t v29 = 32 * v10;
        Swift::Int v30 = v21;
        Swift::Int v31 = v10;
        do
        {
          if (v31 != --v30)
          {
            if (!v9) {
              goto LABEL_172;
            }
            uint64_t v32 = (_OWORD *)(v9 + v29);
            uint64_t v33 = v9 + v28;
            uint64_t v34 = *(void *)(v9 + v29 + 16);
            uint64_t v35 = *(void *)(v9 + v29 + 24);
            __int128 v36 = *(_OWORD *)(v9 + v29);
            __int128 v37 = *(_OWORD *)(v9 + v28 - 16);
            *uint64_t v32 = *(_OWORD *)(v9 + v28 - 32);
            v32[1] = v37;
            *(_OWORD *)(v33 - 32) = v36;
            *(void *)(v33 - 16) = v34;
            *(void *)(v33 - 8) = v35;
          }

          ++v31;
          v28 -= 32LL;
          v29 += 32LL;
        }

        while (v31 < v30);
      }

LABEL_44:
      Swift::Int v8 = v21;
    }

LABEL_126:
  swift_bridgeObjectRelease();
  if (v117 < -1) {
    goto LABEL_165;
  }
  *(void *)(v116 + 16) = 0LL;
  swift_bridgeObjectRelease();
}

uint64_t sub_100074DCC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
    while (2)
    {
      uint64_t v9 = (uint64_t *)(v7 + 16 * v4);
      uint64_t result = *v9;
      uint64_t v10 = v9[1];
      uint64_t v11 = v6;
      unint64_t v12 = (uint64_t *)v8;
      do
      {
        uint64_t v13 = *(v12 - 2);
        uint64_t v14 = *(v12 - 1);
        if (result == v13 && v10 == v14) {
          break;
        }
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v10, v13, v14, 1LL);
        if ((result & 1) == 0) {
          break;
        }
        if (!v7)
        {
          __break(1u);
          return result;
        }

        uint64_t result = *v12;
        uint64_t v10 = v12[1];
        *(_OWORD *)unint64_t v12 = *((_OWORD *)v12 - 1);
        *(v12 - 1) = v10;
        *(v12 - 2) = result;
        v12 -= 2;
        ++v11;
      }

      while (v4 != v11);
      ++v4;
      v8 += 16LL;
      if (v4 != a2) {
        continue;
      }
      break;
    }
  }

  return result;
}

uint64_t sub_100074E90(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 32 * a3 - 32;
    while (2)
    {
      uint64_t v9 = (unint64_t *)(v7 + 32 * v4);
      unint64_t v10 = *v9;
      unint64_t v11 = v9[1];
      uint64_t result = v9[2];
      unint64_t v12 = v9[3];
      uint64_t v13 = v6;
      uint64_t v14 = (void *)v8;
      do
      {
        if (result == v14[2] && v12 == v14[3] && v10 >> 16 == *v14 >> 16 && v11 >> 16 == v14[1] >> 16) {
          break;
        }
        uint64_t result = _stringCompareInternal(_:_:_:_:expecting:)(result);
        if ((result & 1) == 0) {
          break;
        }
        if (!v7)
        {
          __break(1u);
          return result;
        }

        BOOL v18 = v14 + 4;
        unint64_t v10 = v14[4];
        unint64_t v11 = v14[5];
        uint64_t result = v14[6];
        unint64_t v12 = v14[7];
        __int128 v19 = *(_OWORD *)v14;
        __int128 v20 = *((_OWORD *)v14 + 1);
        *uint64_t v14 = v10;
        v14[1] = v11;
        v14[2] = result;
        v14[3] = v12;
        v14 -= 4;
        ++v13;
        *BOOL v18 = v19;
        v18[1] = v20;
      }

      while (v4 != v13);
      ++v4;
      v8 += 32LL;
      if (v4 != a2) {
        continue;
      }
      break;
    }
  }

  return result;
}

uint64_t sub_100074F8C(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 16;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 16;
  if (v9 >= v11)
  {
    sub_100015BF8(a2, (uint64_t)(a3 - (void)a2) / 16, a4);
    unint64_t v12 = &v4[16 * v11];
    if (v7 >= v6 || v10 < 16) {
      goto LABEL_47;
    }
    __int128 v20 = (char *)(a3 - 16);
    while (1)
    {
      Swift::Int v21 = v20 + 16;
      uint64_t v22 = *((void *)v12 - 2);
      uint64_t v23 = *((void *)v12 - 1);
      Swift::String v24 = v12 - 16;
      uint64_t v25 = *((void *)v6 - 2);
      uint64_t v26 = *((void *)v6 - 1);
      BOOL v27 = v22 == v25 && v23 == v26;
      if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v25, v26, 1LL) & 1) == 0)
      {
        BOOL v29 = v21 != v12 || v20 >= v12;
        v12 -= 16;
        if (!v29) {
          goto LABEL_43;
        }
      }

      else
      {
        BOOL v28 = v21 != v6 || v20 >= v6;
        Swift::String v24 = v6 - 16;
        v6 -= 16;
        if (!v28) {
          goto LABEL_43;
        }
      }

      *(_OWORD *)__int128 v20 = *(_OWORD *)v24;
LABEL_43:
      v20 -= 16;
      if (v6 <= v7 || v12 <= v4) {
        goto LABEL_47;
      }
    }
  }

  sub_100015BF8(a1, (a2 - a1) / 16, a4);
  unint64_t v12 = &v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      uint64_t v14 = *((void *)v6 + 1);
      uint64_t v15 = *((void *)v4 + 1);
      BOOL v16 = *(void *)v6 == *(void *)v4 && v14 == v15;
      if (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v6, v14, *(void *)v4, v15, 1LL) & 1) != 0) {
        break;
      }
      BOOL v17 = v4;
      BOOL v16 = v7 == v4;
      v4 += 16;
      if (!v16) {
        goto LABEL_15;
      }
LABEL_16:
      v7 += 16;
    }

    BOOL v17 = v6;
    BOOL v16 = v7 == v6;
    v6 += 16;
    if (v16) {
      goto LABEL_16;
    }
LABEL_15:
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v17;
    goto LABEL_16;
  }

uint64_t sub_100075130(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 32;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 32;
  if (v9 >= v11)
  {
    sub_100015A74(a2, (uint64_t)(a3 - (void)a2) / 32, a4);
    unint64_t v12 = (unint64_t)&v4[32 * v11];
    if (v7 >= v6 || v10 < 32) {
      goto LABEL_55;
    }
    __int128 v20 = (char *)(a3 - 32);
    while (1)
    {
      Swift::Int v21 = (char *)(v12 - 32);
      uint64_t v22 = v20 + 32;
      uint64_t v23 = *(void *)(v12 - 16);
      BOOL v26 = v23 == *((void *)v6 - 2)
         && *(void *)(v12 - 8) == *((void *)v6 - 1)
         && *(void *)(v12 - 32) >> 16 == *((void *)v6 - 4) >> 16
         && *(void *)(v12 - 24) >> 16 == *((void *)v6 - 3) >> 16;
      if (v26 || (_stringCompareInternal(_:_:_:_:expecting:)(v23) & 1) == 0)
      {
        BOOL v28 = v22 != (char *)v12 || (unint64_t)v20 >= v12;
        v12 -= 32LL;
        if (!v28) {
          goto LABEL_51;
        }
      }

      else
      {
        BOOL v27 = v22 != v6 || v20 >= v6;
        Swift::Int v21 = v6 - 32;
        v6 -= 32;
        if (!v27) {
          goto LABEL_51;
        }
      }

      __int128 v29 = *((_OWORD *)v21 + 1);
      *(_OWORD *)__int128 v20 = *(_OWORD *)v21;
      *((_OWORD *)v20 + 1) = v29;
LABEL_51:
      v20 -= 32;
    }
  }

  sub_100015A74(a1, (a2 - a1) / 32, a4);
  unint64_t v12 = (unint64_t)&v4[32 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 32)
  {
    while (1)
    {
      uint64_t v13 = *((void *)v6 + 2);
      BOOL v14 = v13 == *((void *)v4 + 2) && *((void *)v6 + 3) == *((void *)v4 + 3);
      BOOL v15 = v14 && *(void *)v6 >> 16 == *(void *)v4 >> 16;
      BOOL v16 = v15 && *((void *)v6 + 1) >> 16 == *((void *)v4 + 1) >> 16;
      if (!v16 && (_stringCompareInternal(_:_:_:_:expecting:)(v13) & 1) != 0) {
        break;
      }
      BOOL v17 = v4;
      BOOL v14 = v7 == v4;
      v4 += 32;
      if (!v14) {
        goto LABEL_19;
      }
LABEL_20:
      v7 += 32;
    }

    BOOL v17 = v6;
    BOOL v14 = v7 == v6;
    v6 += 32;
    if (v14) {
      goto LABEL_20;
    }
LABEL_19:
    __int128 v18 = *((_OWORD *)v17 + 1);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v17;
    *((_OWORD *)v7 + 1) = v18;
    goto LABEL_20;
  }

void sub_10007532C()
{
  uint64_t v1 = *v0;
  unint64_t v2 = *(void *)(*v0 + 16);
  unint64_t v25 = v2 - 2;
  if (v2 >= 2)
  {
    unint64_t v3 = 0LL;
    while (1)
    {
      unint64_t v26 = 0LL;
      swift_stdlib_random(&v26, 8LL);
      uint64_t v4 = (v26 * (unsigned __int128)v2) >> 64;
      if (v2 > v26 * v2)
      {
        unint64_t v5 = -(uint64_t)v2 % v2;
        if (v5 > v26 * v2)
        {
          do
          {
            unint64_t v26 = 0LL;
            swift_stdlib_random(&v26, 8LL);
          }

          while (v5 > v26 * v2);
          uint64_t v4 = (v26 * (unsigned __int128)v2) >> 64;
        }
      }

      unint64_t v6 = v3 + v4;
      if (__OFADD__(v3, v4)) {
        break;
      }
      if (v3 != v6)
      {
        unint64_t v7 = *(void *)(v1 + 16);
        if (v3 >= v7) {
          goto LABEL_20;
        }
        if (v6 >= v7) {
          goto LABEL_21;
        }
        uint64_t v8 = (uint64_t *)(v1 + 32 + 40 * v3);
        uint64_t v9 = v8[2];
        uint64_t v10 = v8[3];
        uint64_t v11 = v8[4];
        unint64_t v12 = (uint64_t *)(v1 + 32 + 40 * v6);
        uint64_t v13 = v12[1];
        uint64_t v24 = *v12;
        uint64_t v14 = v12[3];
        uint64_t v22 = *v8;
        uint64_t v23 = v12[2];
        uint64_t v15 = v12[4];
        uint64_t v21 = v8[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native(v1) & 1) == 0)
        {
          sub_10008B9BC();
          uint64_t v1 = v16;
        }

        if (v3 >= *(void *)(v1 + 16)) {
          goto LABEL_22;
        }
        BOOL v17 = (void *)(v1 + 32 + 40 * v3);
        *BOOL v17 = v24;
        v17[1] = v13;
        v17[2] = v23;
        v17[3] = v14;
        v17[4] = v15;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v6 >= *(void *)(v1 + 16)) {
          goto LABEL_23;
        }
        __int128 v18 = (void *)(v1 + 32 + 40 * v6);
        *__int128 v18 = v22;
        v18[1] = v21;
        v18[2] = v9;
        v18[3] = v10;
        v18[4] = v11;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *__int128 v20 = v1;
      }

      --v2;
      if (v3++ == v25) {
        return;
      }
    }

    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
  }

uint64_t _s7BuilderVMa(uint64_t a1)
{
  uint64_t result = qword_100132C30;
  if (!qword_100132C30) {
    return swift_getSingletonMetadata(a1, &_s7BuilderVMn);
  }
  return result;
}

uint64_t sub_1000755A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008DB0(&qword_100130BC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void sub_1000755E8(void **a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_100075604( unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3 == a7 && a4 == a8 && a1 >> 16 == a5 >> 16 && a2 >> 16 == a6 >> 16) {
    return 1LL;
  }
  else {
    return _stringCompareInternal(_:_:_:_:expecting:)(a3) & 1;
  }
}

uint64_t sub_100075674(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

uint64_t _s18ExpectedInvocationVwxx(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

void _s18ExpectedInvocationVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  sub_10000AE38();
  sub_10000ADA8();
}

void *_s18ExpectedInvocationVwca(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

void *_s18ExpectedInvocationVwta(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *_s18ExpectedInvocationVMa()
{
  return &_s18ExpectedInvocationVN;
}

char *sub_10007579C(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v32 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v32 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v32);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Logger(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    __int128 v11 = *(_OWORD *)&a2[v8 + 24];
    *(_OWORD *)&a1[v8 + 24] = v11;
    (**(void (***)(char *, char *))(v11 - 8))(&a1[v8], &a2[v8]);
    uint64_t v12 = *((void *)v10 + 6);
    *((void *)v9 + 5) = *((void *)v10 + 5);
    *((void *)v9 + 6) = v12;
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = &a1[v13];
    uint64_t v16 = &a2[v13];
    uint64_t v17 = *((void *)v16 + 1);
    *(void *)uint64_t v15 = *(void *)v16;
    *((void *)v15 + 1) = v17;
    uint64_t v18 = *(void *)&a2[v14];
    *(void *)&a1[v14] = v18;
    uint64_t v19 = a3[8];
    uint64_t v20 = a3[9];
    uint64_t v21 = *(void *)&a2[v19];
    *(void *)&a1[v19] = v21;
    uint64_t v22 = *(void *)&a2[v20];
    *(void *)&a1[v20] = v22;
    uint64_t v23 = a3[10];
    uint64_t v24 = &a1[v23];
    unint64_t v25 = &a2[v23];
    __int128 v26 = *(_OWORD *)&a2[v23 + 24];
    *(_OWORD *)&a1[v23 + 24] = v26;
    uint64_t v27 = v26;
    uint64_t v34 = **(void (***)(char *, char *, uint64_t))(v26 - 8);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    v34(v24, v25, v27);
    uint64_t v28 = a3[11];
    uint64_t v29 = a3[12];
    uint64_t v30 = *(void *)&a2[v28];
    *(void *)&a1[v28] = v30;
    uint64_t v31 = *(void *)&a2[v29];
    *(void *)&a1[v29] = v31;
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v31);
  }

  return a1;
}

uint64_t sub_100075918(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  sub_10000AC58((void *)(a1 + *(int *)(a2 + 20)));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000AC58((void *)(a1 + *(int *)(a2 + 40)));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000759C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  __int128 v10 = *(_OWORD *)(a2 + v7 + 24);
  *(_OWORD *)(a1 + v7 + 24) = v10;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + v7, a2 + v7);
  uint64_t v11 = *(void *)(v9 + 48);
  *(void *)(v8 + 40) = *(void *)(v9 + 40);
  *(void *)(v8 + 48) = v11;
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v12);
  uint64_t v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = *(void *)(a2 + v13);
  *(void *)(a1 + v13) = v17;
  uint64_t v18 = a3[8];
  uint64_t v19 = a3[9];
  uint64_t v20 = *(void *)(a2 + v18);
  *(void *)(a1 + v18) = v20;
  uint64_t v21 = *(void *)(a2 + v19);
  *(void *)(a1 + v19) = v21;
  uint64_t v22 = a3[10];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  __int128 v25 = *(_OWORD *)(a2 + v22 + 24);
  *(_OWORD *)(a1 + v22 + 24) = v25;
  uint64_t v26 = v25;
  uint64_t v32 = **(void (***)(uint64_t, uint64_t, uint64_t))(v25 - 8);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  v32(v23, v24, v26);
  uint64_t v27 = a3[11];
  uint64_t v28 = a3[12];
  uint64_t v29 = *(void *)(a2 + v27);
  *(void *)(a1 + v27) = v29;
  uint64_t v30 = *(void *)(a2 + v28);
  *(void *)(a1 + v28) = v30;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v30);
  return a1;
}

uint64_t sub_100075B18(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  sub_1000271FC((void *)(a1 + v7), (void *)(a2 + v7));
  *(void *)(v8 + 40) = *(void *)(v9 + 40);
  *(void *)(v8 + 48) = *(void *)(v9 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1000271FC((void *)(a1 + a3[10]), (void *)(a2 + a3[10]));
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100075C70(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  __int128 v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(void *)(v9 + 48) = *(void *)(v10 + 48);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v12 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  uint64_t v13 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  __int128 v16 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *(_OWORD *)(v14 + 16) = v16;
  *(void *)(v14 + 32) = *(void *)(v15 + 32);
  uint64_t v17 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v17) = *(void *)(a2 + v17);
  return a1;
}

uint64_t sub_100075D38(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  sub_10000AC58((void *)(a1 + v7));
  __int128 v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
  *(void *)(v8 + 48) = *(void *)(v9 + 48);
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  *uint64_t v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[10];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  sub_10000AC58((void *)(a1 + v16));
  __int128 v19 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v19;
  *(void *)(v17 + 32) = *(void *)(v18 + 32);
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100075E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100075E74);
}

uint64_t sub_100075E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2) {
    return sub_100009E6C(a1, a2, v6);
  }
  unint64_t v8 = *(void *)(a1 + *(int *)(a3 + 20) + 24);
  if (v8 >= 0xFFFFFFFF) {
    LODWORD(v8) = -1;
  }
  return (v8 + 1);
}

uint64_t sub_100075EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100075EFC);
}

uint64_t sub_100075EFC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Logger(0LL);
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3) {
    return sub_100009E60(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  return result;
}

uint64_t sub_100075F74(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "8";
    v4[2] = &unk_1000F6A98;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[6] = &unk_1000F6AB0;
    v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256LL, 9LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_100076010(uint64_t a1)
{
  *(void *)(v3 - 168) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 168, v3 - 160, v2, v1);
}

uint64_t sub_10007602C()
{
  return swift_slowAlloc(32LL, -1LL);
}

uint64_t sub_10007603C()
{
  return swift_bridgeObjectRelease_n(v0, 3LL);
}

void sub_100076048()
{
  *(void *)(v0 + 8 * (v1 >> 6) + 64) |= 1LL << v1;
}

id sub_100076070(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

void sub_100076078()
{
  *(void *)(v0 + 8 * (v1 >> 6) + 64) |= 1LL << v1;
}

  ;
}

uint64_t sub_1000760BC()
{
  return swift_arrayInitWithCopy(v0);
}

BOOL sub_1000760D0@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void sub_1000760DC()
{
}

void sub_1000760F0()
{
}

uint64_t sub_1000760FC()
{
  return *(void *)(v0 - 8);
}

uint64_t sub_100076118@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return sub_100089ABC(0xD000000000000010LL, (a3 - 32) | 0x8000000000000000LL, a1, a2);
}

uint64_t sub_10007612C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  return static String._fromSubstring(_:)(a59, a58, a62, a6);
}

uint64_t sub_10007613C()
{
  return 0LL;
}

uint64_t sub_100076154( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return swift_bridgeObjectRelease(a20);
}

unint64_t sub_10007615C()
{
  return sub_100016078();
}

  ;
}

uint64_t sub_100076184()
{
  return sub_100015F98(v0, v1);
}

  ;
}

uint64_t sub_1000761AC()
{
  return _s7BuilderVMa(0LL);
}

  ;
}

void sub_1000761CC( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  v17._countAndFlagsBits = v15;
  v17._object = v16;
  String.append(_:)(v17);
}

void sub_1000761DC(uint64_t a1@<X8>)
{
  *(void *)(a1 + 64) |= 1LL << v1;
}

  ;
}

BOOL sub_100076204@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_10007621C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10007622C(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

  ;
}

  ;
}

uint64_t sub_100076264(uint64_t a1)
{
  return sub_100015F98(a1, v1);
}

NSDictionary sub_10007626C()
{
  return Dictionary._bridgeToObjectiveC()();
}

  ;
}

uint64_t sub_10007628C()
{
  return sub_100015F98(v1, v0);
}

  ;
}

  ;
}

uint64_t sub_1000762B0()
{
  return sub_100015F98(v0, v1);
}

  ;
}

  ;
}

uint64_t sub_1000762E4(uint64_t result)
{
  *(void *)(v1 - 128) = result;
  return result;
}

  ;
}

uint64_t sub_100076304( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  return swift_bridgeObjectRelease(a55);
}

uint64_t sub_10007630C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
  return swift_bridgeObjectRelease(a28);
}

void sub_100076314()
{
  uint64_t v0 = sub_100038C84();
  uint64_t v1 = sub_100008DB0(&qword_100132C88);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  sub_100039278((void *)1, 500LL, v0);
  qword_100135630 = v2;
}

uint64_t sub_100076368()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataChangedNotification);
  qword_100135638 = result;
  unk_100135640 = v1;
  return result;
}

void *sub_100076394(uint64_t a1, uint64_t a2)
{
  uint64_t v48 = a1;
  uint64_t v47 = type metadata accessor for Notification(0LL);
  uint64_t v3 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  unint64_t v46 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v45 - v6;
  if (*(void *)(a2 + 16))
  {
    unint64_t v8 = (void *)LNMetadataChangedNotification;
    __int128 v53 = 0u;
    __int128 v54 = 0u;
    uint64_t v9 = sub_100008DB0(&qword_100131A40);
    uint64_t inited = swift_initStackObject(v9, &v52);
    *(_OWORD *)(inited + 16) = xmmword_1000F57D0;
    uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataChangedNotificationEventKey);
    uint64_t v51 = v11;
    id v12 = v8;
    sub_100076AD4();
    *(void *)(inited + 96) = &type metadata for Int;
    *(void *)(inited + 72) = 1LL;
    uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataChangedNotificationBundlesKey);
    uint64_t v51 = v13;
    sub_100076AD4();
    unint64_t v14 = sub_100076854();
    swift_bridgeObjectRetain();
    sub_100039430();
    uint64_t v16 = v15;
    swift_bridgeObjectRelease();
    sub_100042310(v16);
    uint64_t v18 = v17;
    swift_release();
    id v19 = sub_100007998(v18);
    *(void *)(inited + 168) = v14;
    *(void *)(inited + 144) = v19;
    uint64_t v20 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    Notification.init(name:object:userInfo:)(v12, &v53, v20);
    sub_100014538();
    uint64_t v22 = v21;
    if (v21[2] >= v21[3] >> 1)
    {
      sub_100076AA8();
      uint64_t v22 = v42;
    }

    unint64_t v23 = sub_100076A84();
    v24(v23, v7, v47);
  }

  else
  {
    uint64_t v22 = _swiftEmptyArrayStorage;
  }

  if (*(void *)(v48 + 16))
  {
    uint64_t v45 = v3;
    __int128 v25 = (void *)LNMetadataChangedNotification;
    __int128 v53 = 0u;
    __int128 v54 = 0u;
    uint64_t v26 = sub_100008DB0(&qword_100131A40);
    uint64_t v27 = swift_initStackObject(v26, &v49);
    *(_OWORD *)(v27 + 16) = xmmword_1000F57D0;
    uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataChangedNotificationEventKey);
    uint64_t v51 = v28;
    id v29 = v25;
    sub_100076AC0();
    *(void *)(v27 + 96) = &type metadata for Int;
    *(void *)(v27 + 72) = 0LL;
    uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataChangedNotificationBundlesKey);
    uint64_t v51 = v30;
    sub_100076AC0();
    unint64_t v31 = sub_100076854();
    swift_bridgeObjectRetain();
    sub_100039430();
    uint64_t v33 = v32;
    swift_bridgeObjectRelease();
    sub_100042310(v33);
    uint64_t v35 = v34;
    swift_release();
    id v36 = sub_100007998(v35);
    *(void *)(v27 + 168) = v31;
    *(void *)(v27 + 144) = v36;
    uint64_t v37 = Dictionary.init(dictionaryLiteral:)( v27,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    Swift::Int v38 = v46;
    Notification.init(name:object:userInfo:)(v29, &v53, v37);
    if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
    {
      sub_100014538();
      uint64_t v22 = v43;
    }

    if (v22[2] >= v22[3] >> 1)
    {
      sub_100076AA8();
      uint64_t v22 = v44;
    }

    unint64_t v39 = sub_100076A84();
    v40(v39, v38, v47);
  }

  return v22;
}

uint64_t sub_100076758()
{
  v1._countAndFlagsBits = sub_100076AE8(v0);
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x65766F6D6572202CLL;
  v2._object = (void *)0xEB00000000203A64LL;
  String.append(_:)(v2);
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = sub_100076AE8(v3);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0x203A6465646461LL;
}

uint64_t sub_10007684C()
{
  return sub_100076758();
}

unint64_t sub_100076854()
{
  unint64_t result = qword_100131130;
  if (!qword_100131130)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSArray);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100131130);
  }

  return result;
}

uint64_t destroy for RegistryUpdatedNotification(void *a1)
{
  return swift_bridgeObjectRelease(a1[1]);
}

uint64_t *_s10LinkDaemon27RegistryUpdatedNotificationVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *assignWithCopy for RegistryUpdatedNotification(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

void *assignWithTake for RegistryUpdatedNotification(void *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for RegistryUpdatedNotification(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RegistryUpdatedNotification(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RegistryUpdatedNotification()
{
  return &type metadata for RegistryUpdatedNotification;
}

ValueMetadata *type metadata accessor for NotifyingRegistryObserver()
{
  return &type metadata for NotifyingRegistryObserver;
}

unint64_t sub_100076A24(uint64_t a1)
{
  unint64_t result = sub_100076A48();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100076A48()
{
  unint64_t result = qword_100132C90;
  if (!qword_100132C90)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F6B3C, &type metadata for RegistryUpdatedNotification);
    atomic_store(result, (unint64_t *)&qword_100132C90);
  }

  return result;
}

unint64_t sub_100076A84()
{
  *(void *)(v3 + 16) = v0;
  return v3
}

void sub_100076AA8()
{
}

uint64_t sub_100076AC0()
{
  return AnyHashable.init<A>(_:)(v0 + 208, v1, v2);
}

uint64_t sub_100076AD4()
{
  return AnyHashable.init<A>(_:)(v0 + 208, v2, v1);
}

uint64_t sub_100076AE8(uint64_t a1)
{
  return Set.description.getter(a1, v1, v2);
}

void *sub_100076AF4(void *a1)
{
  id v1 = [a1 impliedValues];
  uint64_t v2 = sub_10000A1A0(0LL, &qword_100130BE8, &OBJC_CLASS___LNValue_ptr);
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v1,  type metadata for String,  v2,  &protocol witness table for String);

  sub_100033164(v3, v49);
  uint64_t v4 = v49[0];
  int64_t v5 = v49[3];
  unint64_t v6 = v49[4];
  uint64_t v46 = v49[1];
  int64_t v47 = (unint64_t)(v49[2] + 64LL) >> 6;
  swift_bridgeObjectRetain();
  while (v6)
  {
    unint64_t v7 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v8 = v7 | (v5 << 6);
LABEL_26:
    uint64_t v16 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v8);
    uint64_t v18 = *v16;
    unint64_t v17 = v16[1];
    id v19 = *(void **)(*(void *)(v4 + 56) + 8 * v8);
    sub_10001BCF8();
    id v20 = v19;
    id v21 = [a1 intentIdentifier];
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    uint64_t v24 = v23;

    sub_100076EAC(v20, v18, v17, v22, v24, (uint64_t)v50);
    swift_bridgeObjectRelease();
    sub_100077694((uint64_t)v50, (uint64_t)v51);
    if (*((void *)&v51[0] + 1))
    {
      uint64_t v25 = sub_100008DB0(&qword_100130F78);
      uint64_t v26 = (_OWORD *)swift_allocObject(v25, 96LL, 7LL);
      __int128 v27 = v51[0];
      __int128 v28 = v51[1];
      v26[1] = xmmword_1000F5520;
      v26[2] = v27;
      __int128 v29 = v52[0];
      v26[3] = v28;
      v26[4] = v29;
      uint64_t v45 = v26;
      *(_OWORD *)((char *)v26 + 74) = *(_OWORD *)((char *)v52 + 10);
      sub_10001BCF8();
      char isUnique = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      uint64_t v30 = sub_1000776E8();
      uint64_t v32 = _swiftEmptyDictionarySingleton[2];
      BOOL v33 = (v31 & 1) == 0;
      Swift::Int v34 = v32 + v33;
      if (__OFADD__(v32, v33)) {
        goto LABEL_39;
      }
      unint64_t v35 = v30;
      char v36 = v31;
      sub_100008DB0(&qword_100132BB8);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v34))
      {
        uint64_t v37 = sub_1000776E8();
        if ((v36 & 1) != (v38 & 1)) {
          goto LABEL_41;
        }
        unint64_t v35 = v37;
      }

      if ((v36 & 1) != 0)
      {
        uint64_t v39 = _swiftEmptyDictionarySingleton[7];
        swift_bridgeObjectRelease();
        *(void *)(v39 + 8 * v35) = v45;
      }

      else
      {
        _swiftEmptyDictionarySingleton[(v35 >> 6) + 8] |= 1LL << v35;
        Swift::Int v40 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v35);
        uint64_t *v40 = v18;
        v40[1] = v17;
        *(void *)(_swiftEmptyDictionarySingleton[7] + 8 * v35) = v45;
        uint64_t v41 = _swiftEmptyDictionarySingleton[2];
        BOOL v13 = __OFADD__(v41, 1LL);
        uint64_t v42 = v41 + 1;
        if (v13) {
          goto LABEL_40;
        }
        _swiftEmptyDictionarySingleton[2] = v42;
        sub_10001BCF8();
      }

      swift_bridgeObjectRelease_n(v17, 2LL);
      swift_bridgeObjectRelease();
    }

    else
    {

      swift_bridgeObjectRelease();
    }
  }

  int64_t v9 = v5 + 1;
  if (!__OFADD__(v5, 1LL))
  {
    if (v9 >= v47) {
      goto LABEL_37;
    }
    unint64_t v10 = *(void *)(v46 + 8 * v9);
    int64_t v11 = v5 + 1;
    if (!v10)
    {
      sub_1000776DC();
      if (v12 == v13) {
        goto LABEL_37;
      }
      sub_1000776F4();
      if (!v10)
      {
        sub_1000776DC();
        if (v12 == v13) {
          goto LABEL_37;
        }
        sub_1000776F4();
        if (!v10)
        {
          sub_1000776DC();
          if (v12 == v13) {
            goto LABEL_37;
          }
          sub_1000776F4();
          if (!v10)
          {
            sub_1000776DC();
            if (v12 == v13) {
              goto LABEL_37;
            }
            sub_1000776F4();
            if (!v10)
            {
              int64_t v11 = v14 + 5;
              if (v14 + 5 >= v47) {
                goto LABEL_37;
              }
              unint64_t v10 = *(void *)(v46 + 8 * v11);
              if (!v10)
              {
                int64_t v15 = v5 + 7;
                while (v15 < v47)
                {
                  unint64_t v10 = *(void *)(v46 + 8 * v15++);
                  if (v10)
                  {
                    int64_t v11 = v15 - 1;
                    goto LABEL_25;
                  }
                }

void sub_100076EAC( void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  id v9 = [a1 valueType];
  uint64_t v10 = objc_opt_self(&OBJC_CLASS___LNLinkEnumerationValueType);
  uint64_t v11 = swift_dynamicCastObjCClass(v9, v10);
  if (v11)
  {
    char v12 = (void *)v11;
    id v13 = [a1 value];
    _bridgeAnyObjectToAny(_:)(&v60, v13);
    swift_unknownObjectRelease(v13);
    if ((swift_dynamicCast(&v58, &v60, (char *)&type metadata for Any + 8, type metadata for String, 6LL) & 1) != 0)
    {
      uint64_t v14 = (uint64_t)v58;
      int64_t v15 = v59;
      swift_bridgeObjectRetain();
      unint64_t v16 = a3;
      id v17 = objc_msgSend(v12, "enumerationIdentifier", swift_bridgeObjectRetain().n128_f64[0]);
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      unint64_t v20 = v19;

      uint64_t v60 = v18;
      unint64_t v61 = v20;
      v21._countAndFlagsBits = 46LL;
      v21._object = (void *)0xE100000000000000LL;
      String.append(_:)(v21);
      v22._countAndFlagsBits = v14;
      v22._object = v15;
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      uint64_t v24 = v60;
      unint64_t v23 = v61;
LABEL_4:

LABEL_31:
      uint64_t v46 = _swiftEmptyArrayStorage;
      uint64_t v48 = a4;
      uint64_t v47 = a2;
      goto LABEL_32;
    }
  }

  id v25 = [a1 valueType];
  uint64_t v26 = objc_opt_self(&OBJC_CLASS___LNPrimitiveValueType);
  uint64_t v27 = swift_dynamicCastObjCClass(v25, v26);
  if (v27)
  {
    uint64_t v28 = v27;
    sub_10000A1A0(0LL, (unint64_t *)&qword_1001317F0, &OBJC_CLASS___NSObject_ptr);
    id v29 = [(id)objc_opt_self(LNPrimitiveValueType) BOOLValueType];
    LOBYTE(v28) = static NSObject.== infix(_:_:)(v28, v29);

    if ((v28 & 1) != 0)
    {
      id v30 = [a1 value];
      _bridgeAnyObjectToAny(_:)(&v60, v30);
      swift_unknownObjectRelease(v30);
      if ((swift_dynamicCast(&v58, &v60, (char *)&type metadata for Any + 8, &type metadata for Bool, 6LL) & 1) != 0)
      {
        int v31 = v58;

        if (v31) {
          uint64_t v24 = 1163219540LL;
        }
        else {
          uint64_t v24 = 0x45534C4146LL;
        }
        if (v31) {
          unint64_t v23 = 0xE400000000000000LL;
        }
        else {
          unint64_t v23 = 0xE500000000000000LL;
        }
        goto LABEL_25;
      }
    }
  }

  id v9 = [a1 valueType];
  uint64_t v32 = objc_opt_self(&OBJC_CLASS___LNArrayValueType);
  BOOL v33 = (void *)swift_dynamicCastObjCClass(v9, v32);
  if (!v33) {
    goto LABEL_19;
  }
  id v34 = [v33 memberValueType];
  uint64_t v35 = objc_opt_self(&OBJC_CLASS___LNEntityValueType);
  if (!swift_dynamicCastObjCClass(v34, v35))
  {

    goto LABEL_22;
  }

  id v36 = [a1 value];
  _bridgeAnyObjectToAny(_:)(&v60, v36);
  swift_unknownObjectRelease(v36);
  uint64_t v37 = sub_100008DB0((uint64_t *)&unk_100132780);
  if ((swift_dynamicCast(&v58, &v60, (char *)&type metadata for Any + 8, v37, 6LL) & 1) != 0)
  {
    if (v58[2])
    {
      uint64_t v24 = v58[4];
      unint64_t v23 = v58[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      unint64_t v16 = a3;
      swift_bridgeObjectRetain();
      goto LABEL_4;
    }

    swift_bridgeObjectRelease();
  }

  else
  {
LABEL_19:
  }

uint64_t sub_100077534()
{
  id v1 = (void *)objc_opt_self(&OBJC_CLASS___LNPrimitiveValueType);
  id v2 = [v1 intValueType];
  char v3 = static NSObject.== infix(_:_:)(v0, v2);

  if ((v3 & 1) != 0) {
    return 1LL;
  }
  id v4 = [v1 doubleValueType];
  char v5 = static NSObject.== infix(_:_:)(v0, v4);

  if ((v5 & 1) != 0) {
    return 1LL;
  }
  id v6 = [v1 int16ValueType];
  char v7 = static NSObject.== infix(_:_:)(v0, v6);

  if ((v7 & 1) != 0) {
    return 1LL;
  }
  id v8 = [v1 int32ValueType];
  char v9 = static NSObject.== infix(_:_:)(v0, v8);

  if ((v9 & 1) != 0) {
    return 1LL;
  }
  id v11 = [v1 int64ValueType];
  char v12 = static NSObject.== infix(_:_:)(v0, v11);

  return v12 & 1;
}

uint64_t sub_100077694(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008DB0((uint64_t *)&unk_100132C98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

  ;
}

uint64_t sub_1000776E8()
{
  return sub_100015F98(v1, v0);
}

  ;
}

void sub_100077700(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LNActionRecord(0LL);
  uint64_t v23 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v22 = (uint64_t)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  id v8 = (char *)&v19 - v7;
  char v9 = _swiftEmptyArrayStorage;
  id v25 = _swiftEmptyArrayStorage;
  uint64_t v21 = *(void *)(a1 + 16);
  if (v21)
  {
    uint64_t v24 = a2;
    unint64_t v10 = 0LL;
    id v11 = type metadata accessor for LNActionRecord;
    uint64_t v20 = a1;
    while (v10 < *(void *)(a1 + 16))
    {
      unint64_t v12 = (*(unsigned __int8 *)(v23 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
      uint64_t v13 = *(void *)(v23 + 72);
      sub_100084214(a1 + v12 + v13 * v10, (uint64_t)v8, v11);
      __chkstk_darwin(v14);
      *(&v19 - 2) = (uint64_t)v8;
      if ((sub_100078C30(v24, sub_100084240) & 1) != 0)
      {
        int64_t v15 = v11;
        sub_100084248((uint64_t)v8, v22, v11);
        if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0) {
          sub_1000453D8(0LL, v9[2] + 1LL, 1);
        }
        char v9 = v25;
        unint64_t v17 = v25[2];
        unint64_t v16 = v25[3];
        if (v17 >= v16 >> 1)
        {
          sub_1000453D8(v16 > 1, v17 + 1, 1);
          char v9 = v25;
        }

        void v9[2] = v17 + 1;
        uint64_t v18 = (uint64_t)v9 + v12 + v17 * v13;
        id v11 = v15;
        sub_100084248(v22, v18, v15);
        a1 = v20;
      }

      else
      {
        sub_100058D54((uint64_t)v8, v11);
      }

      if (v21 == ++v10)
      {
        a2 = v24;
        goto LABEL_13;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_13:
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a1);
  }

uint64_t sub_100077924(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v52[0];
  int64_t v51 = v52[3];
  unint64_t v6 = v52[4];
  uint64_t v49 = v52[1];
  int64_t v50 = (unint64_t)(v52[2] + 64LL) >> 6;
  swift_bridgeObjectRetain();
  while (1)
  {
    if (v6)
    {
      unint64_t v7 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v8 = v7 | (v51 << 6);
      goto LABEL_20;
    }

    int64_t v9 = v51 + 1;
    if (__OFADD__(v51, 1LL)) {
      break;
    }
    if (v9 >= v50) {
      goto LABEL_38;
    }
    unint64_t v10 = *(void *)(v49 + 8 * v9);
    int64_t v11 = v51 + 1;
    if (!v10)
    {
      int64_t v11 = v51 + 2;
      if (v51 + 2 >= v50) {
        goto LABEL_38;
      }
      unint64_t v10 = *(void *)(v49 + 8 * v11);
      if (!v10)
      {
        int64_t v11 = v51 + 3;
        if (v51 + 3 >= v50) {
          goto LABEL_38;
        }
        unint64_t v10 = *(void *)(v49 + 8 * v11);
        if (!v10)
        {
          int64_t v11 = v51 + 4;
          if (v51 + 4 >= v50) {
            goto LABEL_38;
          }
          unint64_t v10 = *(void *)(v49 + 8 * v11);
          if (!v10)
          {
            int64_t v11 = v51 + 5;
            if (v51 + 5 >= v50) {
              goto LABEL_38;
            }
            unint64_t v10 = *(void *)(v49 + 8 * v11);
            if (!v10)
            {
              int64_t v12 = v51 + 6;
              while (v12 < v50)
              {
                unint64_t v10 = *(void *)(v49 + 8 * v12++);
                if (v10)
                {
                  int64_t v11 = v12 - 1;
                  goto LABEL_19;
                }
              }

void *sub_100077DEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_1000849B4();
    uint64_t v4 = type metadata accessor for LNActionRecord(0LL);
    uint64_t v5 = *(void *)(v4 - 8);
    uint64_t v6 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v7 = *(void *)(v5 + 72);
    do
    {
      id v8 = *(id *)(v6 + *(int *)(v4 + 24));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v8);
      uint64_t v9 = *(void *)(v11 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
      uint64_t v10 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v8);
      specialized ContiguousArray._endMutation()(v10);
      v6 += v7;
      --v2;
    }

    while (v2);
    return (void *)v11;
  }

  return result;
}

void *sub_100077EBC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000452D4();
    uint64_t v3 = *(void *)(type metadata accessor for LNBundleRecord(0LL) - 8);
    uint64_t v4 = *(void *)(v3 + 72);
    uint64_t v5 = (uint64_t *)(((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + a1 + 8);
    do
    {
      uint64_t v7 = *(v5 - 1);
      uint64_t v6 = *v5;
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain();
      if (v9 >= v8 >> 1) {
        sub_1000452D4();
      }
      uint64_t v5 = (uint64_t *)((char *)v5 + v4);
      _swiftEmptyArrayStorage[2] = v9 + 1;
      uint64_t v10 = &_swiftEmptyArrayStorage[2 * v9];
      v10[4] = v7;
      v10[5] = v6;
      --v1;
    }

    while (v1);
  }

  return _swiftEmptyArrayStorage;
}

void *sub_100077FB0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_1000849B4();
    uint64_t v4 = (void **)(a1 + 48);
    do
    {
      uint64_t v5 = *v4;
      v4 += 3;
      id v6 = v5;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v6);
      uint64_t v7 = *(void *)(v9 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v7);
      uint64_t v8 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v6);
      specialized ContiguousArray._endMutation()(v8);
      --v2;
    }

    while (v2);
    return (void *)v9;
  }

  return result;
}

uint64_t sub_100078050(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  while (v7)
  {
    uint64_t v22 = a3;
    a3 = 4LL;
    while (1)
    {
      id v8 = (a1 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a3 - 4, a1)
         : *(id *)(a1 + 8 * a3);
      uint64_t v9 = v8;
      uint64_t v10 = a3 - 3;
      if (__OFADD__(a3 - 4, 1LL)) {
        break;
      }
      uint64_t v11 = sub_10003E5D0(v8);
      if (!v12) {
        goto LABEL_14;
      }
      uint64_t v13 = v12;
      if (v11 == a2 && v12 == v22)
      {
        swift_bridgeObjectRelease(v12);
      }

      else
      {
        char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, a2, v22, 0LL);
        swift_bridgeObjectRelease(v13);
        if ((v15 & 1) == 0)
        {
LABEL_14:

          goto LABEL_17;
        }
      }

      sub_10000A1A0(0LL, (unint64_t *)&qword_1001317F0, &OBJC_CLASS___NSObject_ptr);
      id v16 = [v9 valueType];
      char v17 = static NSObject.== infix(_:_:)(v16, a4);

      if ((v17 & 1) != 0)
      {
        uint64_t v18 = 1LL;
        goto LABEL_20;
      }

uint64_t sub_10007820C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a1);
  unint64_t v5 = v4;
  uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a2);
  unint64_t v8 = v7;
  char v9 = static Data.== infix(_:_:)(v3, v5, v6, v7);
  sub_10000A1D8(v6, v8);
  sub_10000A1D8(v3, v5);
  return v9 & 1;
}

BOOL sub_100078288(char a1, char a2)
{
  return qword_1000F6D78[a1] == qword_1000F6D78[a2];
}

void sub_1000782AC(uint64_t a1, void *a2)
{
  unint64_t v4 = *(void (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4();
  swift_release(v3);
}

void sub_1000782FC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = v26;
  uint64_t v10 = *a1;
  if (!*(void *)(*a1 + 16))
  {
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }

  uint64_t v11 = v25;
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_100015F98(v11, v9);
  if ((v13 & 1) == 0)
  {
LABEL_5:
    uint64_t v15 = sub_10000A1A0(0LL, (unint64_t *)&unk_100132490, &OBJC_CLASS___LNActionMetadata_ptr);
    uint64_t v14 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v15,  &protocol witness table for String);
    goto LABEL_6;
  }

  uint64_t v14 = *(void *)(*(void *)(v10 + 56) + 8 * v12);
  swift_bridgeObjectRetain();
LABEL_6:
  swift_bridgeObjectRelease(v9);
  uint64_t v16 = v22;
  uint64_t v17 = v23;
  uint64_t v18 = v24;
  swift_bridgeObjectRetain();
  id v19 = v18;
  swift_isUniquelyReferenced_nonNull_native(v14);
  sub_100008F68((uint64_t)v19, v16, v17);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v20 = v26;
  swift_bridgeObjectRetain();
  sub_10003E3AC();
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v23);
  uint64_t v21 = v24;
  swift_bridgeObjectRelease(v20);
}

void sub_100078490( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t *a8, void *a9, void (*a10)(id, uint64_t, uint64_t, uint64_t), void (*a11)(uint64_t, uint64_t, uint64_t))
{
  v35[0] = a2;
  v35[1] = a3;
  v35[2] = a4;
  swift_getAtKeyPath(&v33, v35, a5);
  swift_getAtKeyPath(&v32, v35, a6);
  swift_getAtKeyPath(&v30, &v32, a7);
  uint64_t v15 = v34;
  uint64_t v16 = *a1;
  if (!*(void *)(*a1 + 16))
  {
    sub_10001BD0C();
    goto LABEL_5;
  }

  uint64_t v17 = v33;
  sub_10001BD0C();
  uint64_t v18 = sub_100015F98(v17, v15);
  if ((v19 & 1) == 0)
  {
LABEL_5:
    uint64_t v21 = sub_10000A1A0(0LL, a8, a9);
    uint64_t v20 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v21,  &protocol witness table for String);
    goto LABEL_6;
  }

  uint64_t v20 = *(void *)(*(void *)(v16 + 56) + 8 * v18);
  swift_bridgeObjectRetain();
LABEL_6:
  sub_10000AEE8();
  uint64_t v22 = v30;
  uint64_t v23 = v31;
  id v24 = v32;
  sub_10001BD0C();
  id v25 = v24;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v20);
  a10(v25, v22, v23, isUniquelyReferenced_nonNull_native);
  sub_10000AEE8();
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v27 = v33;
  uint64_t v28 = v34;
  sub_10001C064();
  a11(v20, v27, v28);
  sub_10001BE7C();
  swift_bridgeObjectRelease(v31);
  id v29 = v32;
  sub_10001BE7C();
}

void _LNMetadataProviderDirect.actions()()
{
}

uint64_t _LNMetadataProviderDirect.actions(forBundleIdentifier:andActionIdentifier:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100078738( a1,  a2,  a3,  a4,  (uint64_t (*)(id, id, uint64_t, uint64_t, uint64_t, uint64_t))sub_10007A7AC);
}

void _LNMetadataProviderDirect.actionsConforming(to:logicalType:bundleIdentifier:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void _LNMetadataProviderDirect.actionsAndSystemProtocolDefaults(forBundleIdentifier:)()
{
  id v1 = v0;
  sub_10007B198();
}

void _LNMetadataProviderDirect.actions(forBundleIdentifier:)()
{
}

void _LNMetadataProviderDirect.actionIdentifiers(forBundleIdentifier:)()
{
}

uint64_t _LNMetadataProviderDirect.action(forBundleIdentifier:andActionIdentifier:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100078738( a1,  a2,  a3,  a4,  (uint64_t (*)(id, id, uint64_t, uint64_t, uint64_t, uint64_t))sub_100079604);
}

uint64_t _LNMetadataProviderDirect.action(forBundleIdentifier:actionIdentifier:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100078738( a1,  a2,  a3,  a4,  (uint64_t (*)(id, id, uint64_t, uint64_t, uint64_t, uint64_t))sub_10007BEE4);
}

uint64_t sub_100078738( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(id, id, uint64_t, uint64_t, uint64_t, uint64_t))
{
  id v11 = v5;
  sub_10001BCF8();
  sub_10001C064();
  return a5(v11, v11, a1, a2, a3, a4);
}

void _LNMetadataProviderDirect.actionsConforming(to:withParametersOfTypes:bundleIdentifier:)()
{
  id v1 = v0;
  sub_10007A324();
  sub_100059474();
}

void _LNMetadataProviderDirect.actions(withFullyQualifiedIdentifiers:)()
{
}

void _LNMetadataProviderDirect.bundles()()
{
}

void _LNMetadataProviderDirect.bundleRegistrations()()
{
}

void _LNMetadataProviderDirect.queries()()
{
}

void _LNMetadataProviderDirect.queries(forBundleIdentifier:ofType:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void _LNMetadataProviderDirect.query(forBundleIdentifier:queryIdentifier:)()
{
}

void _LNMetadataProviderDirect.enums()()
{
}

void _LNMetadataProviderDirect.enums(forBundleIdentifier:)()
{
}

void _LNMetadataProviderDirect.enum(forBundleIdentifier:enumIdentifier:)()
{
}

void _LNMetadataProviderDirect.entities()()
{
}

void _LNMetadataProviderDirect.entities(forBundleIdentifier:)()
{
}

void sub_10007898C()
{
}

void _LNMetadataProviderDirect.entity(forBundleIdentifier:entityIdentifier:)()
{
}

void sub_1000789E0()
{
  id v1 = v0;
  swift_bridgeObjectRetain();
  sub_10001BD0C();
  sub_10007CCE4();
}

void _LNMetadataProviderDirect.entityIdentifiers(forBundleIdentifier:)()
{
}

void sub_100078A84()
{
  id v1 = v0;
  sub_10007BA90();
  sub_100059474();
}

id _LNMetadataProviderDirect.metadataVersion(forBundleIdentifier:error:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = v3;
  sub_10001BEF8();
  uint64_t v6 = sub_100084A80();
  return sub_10007D334(v6, v7, v8, v9, a3);
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _LNMetadataProviderDirect.appShortcutsProviderMangledTypeName(forBundleIdentifier:)( Swift::String forBundleIdentifier)
{
  id v6 = v2;
  sub_100084818();
  id v7 = sub_10007D8EC((uint64_t)v3, v3, v5, v4);
  if (!v1 && !v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    sub_10008443C();
    id v9 = objc_allocWithZone(&OBJC_CLASS___NSError);
    id v10 = sub_1000842B4(0LL, (uint64_t)v2, 9004LL);
    id v7 = (id)swift_willThrow(v10);
  }

  result._object = v8;
  result._countAndFlagsBits = (uint64_t)v7;
  return result;
}

void _LNMetadataProviderDirect.examplePhrases(forBundleIdentifier:)()
{
}

uint64_t sub_100078C30(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, id))
{
  uint64_t v4 = v20[0];
  uint64_t v21 = v20[1];
  int64_t v5 = v20[3];
  unint64_t v6 = v20[4];
  int64_t v7 = (unint64_t)(v20[2] + 64LL) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v5 << 6);
      goto LABEL_20;
    }

    int64_t v11 = v5 + 1;
    if (__OFADD__(v5, 1LL)) {
      break;
    }
    if (v11 >= v7) {
      goto LABEL_22;
    }
    unint64_t v12 = *(void *)(v21 + 8 * v11);
    int64_t v13 = v5 + 1;
    if (!v12)
    {
      int64_t v13 = v5 + 2;
      if (v5 + 2 >= v7) {
        goto LABEL_22;
      }
      unint64_t v12 = *(void *)(v21 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v5 + 3;
        if (v5 + 3 >= v7) {
          goto LABEL_22;
        }
        unint64_t v12 = *(void *)(v21 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v5 + 4;
          if (v5 + 4 >= v7) {
            goto LABEL_22;
          }
          unint64_t v12 = *(void *)(v21 + 8 * v13);
          if (!v12)
          {
            int64_t v13 = v5 + 5;
            if (v5 + 5 >= v7) {
              goto LABEL_22;
            }
            unint64_t v12 = *(void *)(v21 + 8 * v13);
            if (!v12)
            {
              int64_t v14 = v5 + 6;
              while (v14 < v7)
              {
                unint64_t v12 = *(void *)(v21 + 8 * v14++);
                if (v12)
                {
                  int64_t v13 = v14 - 1;
                  goto LABEL_19;
                }
              }

void *_LNMetadataProviderDirect.__allocating_init(connection:options:)()
{
  id v3 = objc_allocWithZone(v0);
  return _LNMetadataProviderDirect.init(connection:options:)(v2, v1);
}

void *_LNMetadataProviderDirect.init(connection:options:)(void *a1, uint64_t a2)
{
  uint64_t v52 = a2;
  ObjectType = (objc_class *)swift_getObjectType(v2);
  uint64_t v4 = sub_100008DB0(&qword_100130BC0);
  sub_100027F2C();
  __chkstk_darwin(v5);
  uint64_t v55 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v56 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v56 + 64);
  __chkstk_darwin(v7);
  double v10 = __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v49 - v11;
  uint64_t v60 = swift_allocBox(v4, v10);
  uint64_t v54 = v13;
  uint64_t v58 = v7;
  sub_100009E60(v13, 1LL, 1LL, v7);
  uint64_t v14 = sub_10000C254((uint64_t)&unk_1001254B8, 24LL);
  *(void *)(v14 + 16) = 0LL;
  uint64_t v15 = (uint64_t *)(v14 + 16);
  uint64_t v65 = sub_100083B94;
  uint64_t v66 = v14;
  uint64_t v63 = _NSConcreteStackBlock;
  uint64_t v64 = 1107296256LL;
  uint64_t v16 = sub_100084A4C((uint64_t)sub_1000782AC);
  uint64_t v17 = v2;
  sub_1000849AC();
  sub_100084A44();
  BOOL v57 = a1;
  id v18 = [a1 synchronousRemoteObjectProxyWithErrorHandler:v16];
  _Block_release(v16);
  _bridgeAnyObjectToAny(_:)(&v63, v18);
  swift_unknownObjectRelease(v18);
  uint64_t v19 = sub_100008DB0(&qword_100132CA8);
  if ((swift_dynamicCast(v62, &v63, (char *)&type metadata for Any + 8, v19, 6LL) & 1) != 0)
  {
    uint64_t v49 = v8;
    int64_t v50 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v20 = v56;
    uint64_t v21 = (void *)v62[0];
    uint64_t v22 = sub_10000C254((uint64_t)&unk_100125508, 32LL);
    uint64_t v23 = v60;
    *(void *)(v22 + 16) = v14;
    *(void *)(v22 + 24) = v23;
    uint64_t v65 = sub_100083BE0;
    uint64_t v66 = v22;
    uint64_t v63 = _NSConcreteStackBlock;
    uint64_t v64 = 1107296256LL;
    id v24 = sub_100084A4C((uint64_t)sub_10000421C);
    sub_1000849AC();
    swift_retain();
    swift_release();
    int64_t v51 = v21;
    [v21 fetchDatabaseURL:v24];
    _Block_release(v24);
    uint64_t v25 = v54;
    sub_100084A04(v54, (uint64_t)&v63);
    uint64_t v26 = v25;
    uint64_t v16 = v55;
    sub_100026CB8(v26, (uint64_t)v55, &qword_100130BC0);
    if (sub_100009E6C((uint64_t)v16, 1LL, v58) == 1)
    {

      sub_100026E14((uint64_t)v16, &qword_100130BC0);
      sub_100084A04((uint64_t)v15, (uint64_t)v62);
      uint64_t v27 = *v15;
      if (!*v15)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
        sub_10008443C();
        id v37 = objc_allocWithZone(&OBJC_CLASS___NSError);
        sub_1000842B4((uint64_t)v16, v23, 9003LL);
        uint64_t v27 = 0LL;
      }

      Swift::Int v38 = v57;
      uint64_t v39 = swift_errorRetain(v27);
      swift_willThrow(v39);
      sub_100084A44();
      sub_100038920();
      sub_1000849DC();
    }

    else
    {
      uint64_t v54 = v14;
      uint64_t v30 = *(void (**)(char *, void *, uint64_t))(v20 + 32);
      uint64_t v31 = v12;
      v30(v12, v16, v58);
      URL.startAccessingSecurityScopedResource()();
      URL.absoluteString.getter(v32);
      sub_10008443C();
      uint64_t v33 = type metadata accessor for Connection();
      sub_10000C254(v33, 121LL);
      uint64_t v34 = v53;
      uint64_t v35 = Connection.init(_:readonly:)((uint64_t)v16, (unint64_t)v12, 1);
      if (!v34)
      {
        uint64_t v41 = v35;
        swift_retain();
        Connection.busyTimeout.setter(0.5);
        uint64_t v42 = v50;
        uint64_t v43 = v58;
        (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v50, v31, v58);
        uint64_t v44 = *(unsigned __int8 *)(v20 + 80);
        uint64_t v45 = (v44 + 16) & ~v44;
        uint64_t v46 = swift_allocObject(&unk_100125558, v45 + v49, v44 | 7);
        v30((char *)(v46 + v45), v42, v43);
        swift_beginAccess(v41 + 24, v62, 1LL, 0LL);
        uint64_t v47 = *(void *)(v41 + 24);
        uint64_t v48 = *(void *)(v41 + 32);
        *(void *)(v41 + 24) = sub_100083C48;
        *(void *)(v41 + 32) = v46;
        sub_100075674(v47, v48);
        *(void *)&v17[OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_connection] = v41;
        v17[OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion] = (v52 & 2) != 0;

        v61.receiver = v17;
        v61.super_class = ObjectType;
        uint64_t v16 = objc_msgSendSuper2(&v61, "init");
        swift_release();
        sub_1000849DC();
        sub_1000849FC();
        (*(void (**)(char *, uint64_t))(v56 + 8))(v31, v43);
        swift_release();
        swift_release();
        return v16;
      }

      URL.stopAccessingSecurityScopedResource()();
      swift_willThrow(v36);
      sub_1000849DC();
      sub_1000849FC();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v12, v58);
      sub_100084A44();
      swift_release();
    }
  }

  else
  {

    static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    sub_10008443C();
    id v28 = objc_allocWithZone(&OBJC_CLASS___NSError);
    id v29 = sub_1000842B4((uint64_t)v16, (uint64_t)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL), 9003LL);
    swift_willThrow(v29);
    swift_release();
    sub_100038920();
    sub_1000849FC();
  }

  swift_deallocPartialClassInstance(v17, ObjectType, 17LL, 7LL);
  return v16;
}

uint64_t sub_1000793AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = a1;
  swift_errorRelease(v4);
  return swift_errorRetain(a1);
}

uint64_t sub_1000793FC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100008DB0(&qword_100130BC0);
  double v9 = __chkstk_darwin(v8);
  uint64_t v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = swift_projectBox(a4, v9);
  uint64_t v13 = 1LL;
  swift_beginAccess(a3 + 16, v19, 1LL, 0LL);
  uint64_t v14 = *(void *)(a3 + 16);
  *(void *)(a3 + 16) = a2;
  swift_errorRetain(a2);
  swift_errorRelease(v14);
  if (a1)
  {
    id v15 = [a1 url];
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v15);

    uint64_t v13 = 0LL;
  }

  uint64_t v16 = type metadata accessor for URL(0LL);
  sub_100009E60((uint64_t)v11, v13, 1LL, v16);
  swift_beginAccess(v12, v18, 1LL, 0LL);
  return sub_1000334E8((uint64_t)v11, v12);
}

id sub_1000795AC(uint64_t a1)
{
  ObjectType = (objc_class *)swift_getObjectType(v1);
  *(void *)&v1[OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_connection] = a1;
  v1[OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion] = 0;
  v5.receiver = v1;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, "init");
}

void sub_100079604()
{
  objc_super v5 = v4;
  uint64_t v44 = v6;
  sub_100084608();
  uint64_t v43 = *(void *)(sub_1000842CC(__stack_chk_guard) - 8);
  sub_100027F2C();
  __chkstk_darwin(v7);
  sub_1000842D8();
  sub_100084414();
  if (!v30
    || (uint64_t v8 = (void *)objc_opt_self(&OBJC_CLASS___RBSProcessHandle),
        uint64_t v0 = 0x10012F000LL,
        [sub_1000845AC(v8) isApplication],
        sub_100084714(),
        !v3))
  {
    sub_1000844B0();
    if (v1)
    {
      sub_10001BE7C();
      uint64_t v22 = v0;
LABEL_28:
      swift_bridgeObjectRelease(v22);

      goto LABEL_29;
    }

    goto LABEL_10;
  }

  double v9 = (void *)objc_opt_self(&OBJC_CLASS___RBSTarget);
  id v10 = sub_1000845AC(v9);
  uint64_t v11 = sub_100008DB0(&qword_100130BD0);
  uint64_t v12 = sub_100011924(v11);
  *(_OWORD *)(v12 + 16) = xmmword_1000F5530;
  sub_100011AB4(v12, &qword_100132D58, &OBJC_CLASS___RBSDomainAttribute_ptr);
  sub_1000842A0();
  sub_100059698();
  id v15 = sub_10008427C(v13, v14, (uint64_t)"FinishTaskInterruptable");
  *(void *)(v12 + 32) = v15;
  sub_10008440C((uint64_t)v15);
  id v16 = objc_allocWithZone(&OBJC_CLASS___RBSAssertion);
  sub_100084350((uint64_t)"AppIntents Query");
  sub_100084724();
  id v18 = (os_log_s *)v12;
  if (sub_100084404(v17, "acquireWithError:"))
  {
    id v19 = (id)v12;
    sub_1000844B0();
    sub_1000846C4();
    if (v1)
    {
      sub_100011ADC(v20, *(const char **)(v21 + 1144));
      goto LABEL_12;
    }

    sub_100011ADC(v20, *(const char **)(v21 + 1144));

LABEL_10:
    sub_10001BE7C();
    sub_10001198C();
LABEL_29:
    sub_1000843B8();
    sub_10001DEE8();
    return;
  }

  id v23 = (id)v12;
  sub_1000843E8();
  sub_100028040();
  sub_1000592C0();
LABEL_12:
  sub_100084328();
  uint64_t v24 = sub_100008DB0(&qword_100130620);
  uint64_t v25 = sub_100011AB4(v24, &qword_1001332E0, &OBJC_CLASS___NSError_ptr);
  uint64_t v26 = sub_100084310(v25);
  if (!(_DWORD)v26)
  {
LABEL_26:

    goto LABEL_27;
  }

  id v27 = sub_100011930(v26, "domain");
  sub_100011A74((uint64_t)v27);
  sub_100084664();
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  BOOL v30 = v1 == v28 && v10 == (id)v29;
  if (v30)
  {
    sub_10001191C((uint64_t)v10);
  }

  else
  {
    uint64_t v24 = sub_100084334(v28, v29);
    sub_10000AEE8();
    sub_10001DED8();
    if ((v24 & 1) == 0)
    {

      sub_100084844();
LABEL_27:
      sub_1000843F0();
      sub_10001BE7C();
      uint64_t v22 = v44;
      goto LABEL_28;
    }
  }

  uint64_t v31 = sub_100059344();
  if ((id)getLNLogCategoryMetadata(v31))
  {
    sub_100084600();
    id v32 = v45;
    sub_1000843F8();
    os_log_type_t v33 = sub_10000AF38();
    if (sub_100068360(v33))
    {
      sub_10000AE10(12LL);
      os_log_type_t v41 = v24;
      uint64_t v42 = sub_10000AE10(32LL);
      uint64_t v46 = v42;
      sub_1000844F4(4.8149e-34);
      id v35 = sub_100011A6C(v34, "localizedDescription");
      sub_1000845B4((uint64_t)v35);
      sub_100084860();
      uint64_t v38 = sub_100084770(v36, v37, &v46);
      sub_1000843CC(v38);

      sub_10001DF40();
      uint64_t v24 = (uint64_t)v40;
      sub_10000AF5C((void *)&_mh_execute_header, v18, v41, "Failed to acquire assertions: %s", v40);
      sub_10000AF48(v42);
      sub_10000AD78(v42);
      sub_10000AD78((uint64_t)v40);
    }

    else
    {
    }

    sub_100084420(v43);
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    sub_10008443C();
    id v39 = objc_allocWithZone(&OBJC_CLASS___NSError);
    sub_100084290(v24, (uint64_t)v18);
    sub_1000842C0();

    goto LABEL_26;
  }

  __break(1u);
}

void sub_1000799DC()
{
}

void sub_100079A28()
{
}

void sub_100079A74()
{
  uint64_t v4 = v3;
  sub_100084608();
  uint64_t v46 = *(void *)(sub_1000842CC(__stack_chk_guard) - 8);
  sub_100027F2C();
  __chkstk_darwin(v5);
  sub_10000AEB0();
  sub_100084414();
  if (!v31
    || (uint64_t v6 = (void *)objc_opt_self(&OBJC_CLASS___RBSProcessHandle),
        [sub_1000848AC(v6) isApplication],
        sub_1000848A4(),
        !v2))
  {
    sub_10000AE98();
    uint64_t v21 = sub_100084748();
    if (v0)
    {
      sub_10001198C();

      sub_10003EF28();
LABEL_28:
      sub_1000843B8();
      sub_10001DEE8();
      return;
    }

    uint64_t v22 = v21;
    sub_10003EF28();
    sub_1000846BC(v22);

    sub_10000AEE8();
LABEL_10:
    sub_10001198C();
    goto LABEL_28;
  }

  uint64_t v7 = (void *)objc_opt_self(&OBJC_CLASS___RBSTarget);
  id v8 = sub_1000848AC(v7);
  uint64_t v9 = sub_100008DB0(&qword_100130BD0);
  uint64_t v10 = sub_100011924(v9);
  *(_OWORD *)(v10 + 16) = xmmword_1000F5530;
  sub_100011AB4(v10, &qword_100132D58, &OBJC_CLASS___RBSDomainAttribute_ptr);
  sub_1000842A0();
  sub_100059698();
  id v13 = sub_10008427C(v11, v12, (uint64_t)"FinishTaskInterruptable");
  *(void *)(v10 + 32) = v13;
  sub_10008440C((uint64_t)v13);
  id v14 = objc_allocWithZone(&OBJC_CLASS___RBSAssertion);
  id v15 = sub_1000842F0((uint64_t)"AppIntents Query");
  v48[0] = 0LL;
  uint64_t v45 = v15;
  if (sub_100084404(v15, "acquireWithError:"))
  {
    uint64_t v16 = *(void *)&v1[OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_connection];
    id v17 = 0LL;
    swift_retain(v16);
    uint64_t v18 = sub_10008475C();
    id v19 = (os_log_s *)v0;
    if (v0)
    {
      uint64_t v20 = sub_100068140();
      id v15 = v45;
      sub_100076070(v20, "invalidate");
      goto LABEL_12;
    }

    uint64_t v40 = v18;
    sub_100068140();
    sub_1000846BC(v40);
    uint64_t v41 = sub_10001DF40();
    sub_100011ADC(v41, "invalidate");

    goto LABEL_10;
  }

  id v23 = 0LL;
  id v19 = (os_log_s *)sub_1000843E8();

  sub_1000592C0();
LABEL_12:
  sub_100084328();
  uint64_t v24 = sub_100008DB0(&qword_100130620);
  uint64_t v25 = sub_100011AB4(v24, &qword_1001332E0, &OBJC_CLASS___NSError_ptr);
  uint64_t v26 = sub_1000843B0((uint64_t)&v47, (uint64_t)v48, v24, v25);
  if (!(_DWORD)v26)
  {

    goto LABEL_27;
  }

  id v27 = v47;
  uint64_t v28 = (uint64_t)sub_100011930(v26, "domain");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  sub_1000849E4();
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  BOOL v31 = v15 == (id)v29 && v0 == (void)v30;
  if (v31)
  {
    sub_10001191C(v0);
  }

  else
  {
    uint64_t v4 = v30;
    uint64_t v28 = sub_100084378((uint64_t)v15, v0, v29);
    sub_10001DEC4();
    sub_10001DED8();
    if ((v28 & 1) == 0)
    {

      sub_100084844();
LABEL_27:
      sub_1000843F0();
      sub_10001198C();

      goto LABEL_28;
    }
  }

  uint64_t v32 = sub_100059344();
  if ((id)getLNLogCategoryMetadata(v32))
  {
    sub_100084694();
    id v33 = v27;
    sub_100084A74();
    os_log_type_t v34 = sub_10000AF38();
    if (sub_100067CA8(v34))
    {
      os_log_type_t v43 = v28;
      uint64_t v28 = sub_10000AE10(12LL);
      uint64_t v44 = sub_10000AE10(32LL);
      v48[2] = v44;
      *(_DWORD *)uint64_t v28 = 136315138;
      id v35 = sub_100011A6C(v44, "localizedDescription");
      sub_1000844D4((uint64_t)v35);
      sub_100084B40();
      uint64_t v36 = sub_10008442C();
      uint64_t v37 = sub_1000848B4(v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v37, v38, v39, v28 + 12);

      sub_10001DEC4();
      sub_10000AF5C((void *)&_mh_execute_header, v19, v43, "Failed to acquire assertions: %s", (uint8_t *)v28);
      sub_10000AF48(v44);
      sub_10000AD78(v44);
      sub_10000AD78(v28);
    }

    else
    {
    }

    sub_100084B1C(v46);
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    sub_100084AA0();
    id v42 = objc_allocWithZone(&OBJC_CLASS___NSError);
    sub_100084290((uint64_t)v19, v28);
    sub_1000842C0();

    goto LABEL_27;
  }

  __break(1u);
}

void sub_100079EFC()
{
  uint64_t v44 = v4;
  uint64_t v6 = v5;
  sub_100084608();
  uint64_t v43 = *(void *)(sub_1000842CC(__stack_chk_guard) - 8);
  sub_100027F2C();
  __chkstk_darwin(v7);
  sub_1000842D8();
  sub_100084414();
  if (!v30
    || (id v8 = (void *)objc_opt_self(&OBJC_CLASS___RBSProcessHandle),
        uint64_t v0 = 0x10012F000LL,
        [sub_1000845AC(v8) isApplication],
        sub_100084714(),
        !v3))
  {
    sub_10008448C();
    if (v1)
    {
      sub_10001BE7C();

      uint64_t v22 = v0;
LABEL_28:
      swift_bridgeObjectRelease(v22);
      goto LABEL_29;
    }

    goto LABEL_10;
  }

  uint64_t v9 = (void *)objc_opt_self(&OBJC_CLASS___RBSTarget);
  id v10 = sub_1000845AC(v9);
  uint64_t v11 = sub_100008DB0(&qword_100130BD0);
  uint64_t v12 = sub_100011924(v11);
  *(_OWORD *)(v12 + 16) = xmmword_1000F5530;
  sub_100011AB4(v12, &qword_100132D58, &OBJC_CLASS___RBSDomainAttribute_ptr);
  sub_1000842A0();
  sub_100059698();
  id v15 = sub_10008427C(v13, v14, (uint64_t)"FinishTaskInterruptable");
  *(void *)(v12 + 32) = v15;
  sub_10008440C((uint64_t)v15);
  id v16 = objc_allocWithZone(&OBJC_CLASS___RBSAssertion);
  sub_100084350((uint64_t)"AppIntents Query");
  sub_100084724();
  uint64_t v18 = (os_log_s *)v12;
  if (sub_100084404(v17, "acquireWithError:"))
  {
    id v19 = (id)v12;
    sub_10008448C();
    sub_1000846C4();
    if (v1)
    {
      sub_100011ADC(v20, *(const char **)(v21 + 1144));
      goto LABEL_12;
    }

    sub_100011ADC(v20, *(const char **)(v21 + 1144));

LABEL_10:
    sub_10001BE7C();
    sub_10001198C();
LABEL_29:
    sub_1000843B8();
    sub_10001DEE8();
    return;
  }

  id v23 = (id)v12;
  sub_1000843E8();
  sub_100028040();
  sub_1000592C0();
LABEL_12:
  sub_100084328();
  uint64_t v24 = sub_100008DB0(&qword_100130620);
  uint64_t v25 = sub_100011AB4(v24, &qword_1001332E0, &OBJC_CLASS___NSError_ptr);
  uint64_t v26 = sub_100084310(v25);
  if (!(_DWORD)v26)
  {
LABEL_26:

    goto LABEL_27;
  }

  id v27 = sub_100011930(v26, "domain");
  sub_100011A74((uint64_t)v27);
  sub_100084664();
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  BOOL v30 = v1 == v28 && v10 == (id)v29;
  if (v30)
  {
    sub_10001191C((uint64_t)v10);
  }

  else
  {
    uint64_t v24 = sub_100084334(v28, v29);
    sub_10000AEE8();
    sub_10001DED8();
    if ((v24 & 1) == 0)
    {

      sub_100084844();
LABEL_27:
      sub_1000843F0();
      sub_10001BE7C();

      uint64_t v22 = v44;
      goto LABEL_28;
    }
  }

  uint64_t v31 = sub_100059344();
  if ((id)getLNLogCategoryMetadata(v31))
  {
    sub_100084600();
    id v32 = v45;
    sub_1000843F8();
    os_log_type_t v33 = sub_10000AF38();
    if (sub_100068360(v33))
    {
      sub_10000AE10(12LL);
      os_log_type_t v41 = v24;
      uint64_t v42 = sub_10000AE10(32LL);
      uint64_t v46 = v42;
      sub_1000844F4(4.8149e-34);
      id v35 = sub_100011A6C(v34, "localizedDescription");
      sub_1000845B4((uint64_t)v35);
      sub_100084860();
      uint64_t v38 = sub_100084770(v36, v37, &v46);
      sub_1000843CC(v38);

      sub_10001DF40();
      uint64_t v24 = (uint64_t)v40;
      sub_10000AF5C((void *)&_mh_execute_header, v18, v41, "Failed to acquire assertions: %s", v40);
      sub_10000AF48(v42);
      sub_10000AD78(v42);
      sub_10000AD78((uint64_t)v40);
    }

    else
    {
    }

    sub_100084420(v43);
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    sub_10008443C();
    id v39 = objc_allocWithZone(&OBJC_CLASS___NSError);
    sub_100084290(v24, (uint64_t)v18);
    sub_1000842C0();

    goto LABEL_26;
  }

  __break(1u);
}

void sub_10007A2D8()
{
}

void sub_10007A324()
{
  uint64_t v48 = *(void *)(sub_1000842CC(__stack_chk_guard) - 8);
  sub_100027F2C();
  __chkstk_darwin(v2);
  sub_1000842D8();
  sub_100084414();
  if (!v28
    || (int v3 = (void *)objc_opt_self(&OBJC_CLASS___RBSProcessHandle),
        id v4 = sub_10008468C(v3),
        unsigned int v5 = [v4 isApplication],
        v4,
        !v5))
  {
    sub_100084620();
    if (v0)
    {
LABEL_27:
      sub_10001BE7C();

      sub_10001198C();
      goto LABEL_28;
    }

    goto LABEL_9;
  }

  uint64_t v6 = (void *)objc_opt_self(&OBJC_CLASS___RBSTarget);
  id v7 = sub_10008468C(v6);
  uint64_t v8 = sub_100008DB0(&qword_100130BD0);
  uint64_t v9 = sub_100011924(v8);
  *(_OWORD *)(v9 + 16) = xmmword_1000F5530;
  sub_100011AB4(v9, &qword_100132D58, &OBJC_CLASS___RBSDomainAttribute_ptr);
  sub_1000842A0();
  sub_100059698();
  id v12 = sub_10008427C(v10, v11, (uint64_t)"FinishTaskInterruptable");
  *(void *)(v9 + 32) = v12;
  sub_10008440C((uint64_t)v12);
  id v13 = objc_allocWithZone(&OBJC_CLASS___RBSAssertion);
  unint64_t v14 = sub_1000846E8();
  id v16 = sub_10008436C(v14, v15, v7);
  uint64_t v50 = 0LL;
  id v17 = 0LL;
  if (sub_100084404(v16, "acquireWithError:"))
  {
    id v18 = 0LL;
    sub_100084620();
    sub_1000846C4();
    if (v0)
    {
      sub_100084AB8(v19);
      goto LABEL_11;
    }

    sub_100084AB8(v19);

LABEL_9:
    sub_10001BE7C();
    sub_10001198C();
LABEL_28:
    sub_1000843B8();
    sub_10001DEE8();
    return;
  }

  id v20 = 0LL;
  id v17 = (os_log_s *)sub_1000843E8();

  sub_1000592C0();
LABEL_11:
  sub_100084328();
  uint64_t v21 = (void *)sub_100008DB0(&qword_100130620);
  uint64_t v22 = sub_100011AB4((uint64_t)v21, &qword_1001332E0, &OBJC_CLASS___NSError_ptr);
  if (!sub_1000843B0((uint64_t)&v49, (uint64_t)&v50, (uint64_t)v21, v22))
  {

    goto LABEL_26;
  }

  uint64_t v46 = v16;
  id v47 = v49;
  uint64_t v23 = sub_1000845B4((uint64_t)[v49 domain]);
  uint64_t v25 = v24;

  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  BOOL v28 = v23 == v26 && v25 == (void *)v27;
  if (v28)
  {
    sub_10001191C((uint64_t)v25);
  }

  else
  {
    char v29 = sub_10001BB00(v23, (uint64_t)v25, v26, v27);
    sub_10001DED8();
    sub_10001DEC4();
    if ((v29 & 1) == 0)
    {

      sub_100084844();
LABEL_26:
      sub_1000843F0();
      goto LABEL_27;
    }
  }

  uint64_t v30 = sub_100059344();
  if ((id)getLNLogCategoryMetadata(v30))
  {
    sub_100084600();
    id v31 = v47;
    sub_1000843F8();
    os_log_type_t v32 = sub_10000AF38();
    if (os_log_type_enabled(v17, v32))
    {
      os_log_type_t v45 = v32;
      os_log_type_t v33 = (uint8_t *)sub_10000AE10(12LL);
      uint64_t v34 = sub_10000AE10(32LL);
      uint64_t v35 = sub_100084898(v34);
      *(_DWORD *)os_log_type_t v33 = 136315138;
      id v36 = sub_100011A6C(v35, "localizedDescription");
      uint64_t v25 = (void *)sub_100084B4C((uint64_t)v36);

      uint64_t v37 = sub_100084478();
      uint64_t v38 = sub_1000848B4(v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v38, v39, v40, v33 + 12);

      sub_10001DEC4();
      sub_10000AF5C((void *)&_mh_execute_header, v17, v45, "Failed to acquire assertions: %s", v33);
      sub_10000AF48((uint64_t)v47);
      sub_10000AD78((uint64_t)v47);
      sub_10000AD78((uint64_t)v33);
    }

    else
    {
    }

    sub_100084420(v48);
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    uint64_t v43 = v42;
    id v44 = objc_allocWithZone(&OBJC_CLASS___NSError);
    sub_100084290(v41, v43);
    sub_1000842C0();

    goto LABEL_26;
  }

  __break(1u);
}

void sub_10007A760()
{
}

void sub_10007A7AC()
{
  id v4 = v3;
  uint64_t v43 = v5;
  sub_100084608();
  uint64_t v42 = *(void *)(sub_1000842CC(__stack_chk_guard) - 8);
  sub_100027F2C();
  __chkstk_darwin(v6);
  sub_1000842D8();
  sub_100084414();
  if (!v30
    || (id v7 = (void *)objc_opt_self(&OBJC_CLASS___RBSProcessHandle),
        [sub_1000845AC(v7) isApplication],
        sub_100084714(),
        !v2))
  {
    sub_100068340();
    sub_10008454C();
    if (v0)
    {
      sub_10001BE7C();
      sub_10001198C();

      sub_100068168();
LABEL_28:
      sub_1000843B8();
      sub_10001DEE8();
      return;
    }

    uint64_t v22 = v21;
    sub_100068168();
    sub_100084964(v22);

    sub_10001BEC0();
LABEL_10:
    sub_10001BE7C();
    sub_10001198C();
    goto LABEL_28;
  }

  uint64_t v8 = (void *)objc_opt_self(&OBJC_CLASS___RBSTarget);
  id v9 = sub_1000845AC(v8);
  uint64_t v10 = sub_100008DB0(&qword_100130BD0);
  uint64_t v11 = sub_100011924(v10);
  *(_OWORD *)(v11 + 16) = xmmword_1000F5530;
  sub_100011AB4(v11, &qword_100132D58, &OBJC_CLASS___RBSDomainAttribute_ptr);
  sub_1000842A0();
  sub_100059698();
  id v14 = sub_10008427C(v12, v13, (uint64_t)"FinishTaskInterruptable");
  *(void *)(v11 + 32) = v14;
  sub_10008440C((uint64_t)v14);
  id v15 = objc_allocWithZone(&OBJC_CLASS___RBSAssertion);
  sub_100084350((uint64_t)"AppIntents Query");
  sub_100084724();
  id v17 = (os_log_s *)v11;
  if (sub_100084404(v16, "acquireWithError:"))
  {
    id v18 = (id)v11;
    sub_100068340();
    sub_10008454C();
    id v17 = v0;
    if (v0)
    {
      uint64_t v20 = sub_100068168();
      sub_100011ADC(v20, "invalidate");
      goto LABEL_12;
    }

    uint64_t v37 = v19;
    sub_100068168();
    sub_100084964(v37);
    uint64_t v38 = sub_10001DF40();
    sub_100076070(v38, "invalidate");

    goto LABEL_10;
  }

  id v23 = (id)v11;
  sub_1000843E8();
  sub_100028040();
  sub_1000592C0();
LABEL_12:
  sub_100084328();
  uint64_t v24 = sub_100008DB0(&qword_100130620);
  uint64_t v25 = sub_100011AB4(v24, &qword_1001332E0, &OBJC_CLASS___NSError_ptr);
  uint64_t v26 = sub_100084310(v25);
  if (!(_DWORD)v26)
  {
LABEL_26:

    goto LABEL_27;
  }

  id v27 = sub_100011930(v26, "domain");
  sub_100011A74((uint64_t)v27);
  sub_100084664();
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  BOOL v30 = v0 == (os_log_s *)v28 && v9 == (id)v29;
  if (v30)
  {
    sub_10001191C((uint64_t)v9);
  }

  else
  {
    uint64_t v24 = sub_100084334(v28, v29);
    sub_10000AEE8();
    sub_10001DED8();
    if ((v24 & 1) == 0)
    {

LABEL_27:
      sub_1000843F0();
      sub_10001BE7C();
      swift_bridgeObjectRelease(v43);

      goto LABEL_28;
    }
  }

  uint64_t v31 = sub_100059344();
  if ((id)getLNLogCategoryMetadata(v31))
  {
    sub_100084600();
    id v32 = v44;
    sub_1000843F8();
    os_log_type_t v33 = sub_10000AF38();
    if (sub_100068360(v33))
    {
      sub_10000AE10(12LL);
      os_log_type_t v41 = v24;
      uint64_t v45 = sub_10000AE10(32LL);
      sub_1000848CC(4.8149e-34);
      id v35 = sub_100011A6C(v34, "localizedDescription");
      sub_1000845B4((uint64_t)v35);
      sub_100084B34();
      uint64_t v36 = sub_10008442C();
      sub_1000845D8(v36);

      sub_10001DEC4();
      uint64_t v24 = (uint64_t)v40;
      sub_10000AF5C((void *)&_mh_execute_header, v17, v41, "Failed to acquire assertions: %s", v40);
      sub_10000AF48(v45);
      sub_10000AD78(v45);
      sub_10000AD78((uint64_t)v40);
    }

    else
    {
    }

    sub_100084420(v42);
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    sub_10008443C();
    id v39 = objc_allocWithZone(&OBJC_CLASS___NSError);
    sub_100084290(v24, (uint64_t)v17);
    sub_1000842C0();

    goto LABEL_26;
  }

  __break(1u);
}

void sub_10007ABFC()
{
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion) != 1
    || (id v7 = (void *)objc_opt_self(&OBJC_CLASS___RBSProcessHandle),
        [sub_1000849D4(v7) isApplication],
        sub_100028040(),
        !v1))
  {
    sub_10000AE98();
    sub_1000351C8((uint64_t)v50);
    sub_100008D74(v50, v51);
    if (qword_100130138 != -1) {
      swift_once(&qword_100130138, sub_1000350E4);
    }
    v49[0] = v4;
    v49[1] = v5;
    sub_1000849A4();
    sub_10008469C();
    sub_10008458C();
    sub_10001DEC4();
    sub_10001BEC0();
    uint64_t v21 = (void *)sub_10008477C();
    uint64_t v22 = sub_100035AB0(v21);
    if (v2)
    {
      sub_10000AC58(v50);
      sub_10001DED8();

      sub_10003EF28();
LABEL_31:
      sub_1000843B8();
      sub_10001DEE8();
      return;
    }

    uint64_t v23 = v22;
    sub_10000AC58(v50);
    sub_10003EF28();
    sub_100084964(v23);
    sub_100084AE4();
    sub_10001198C();
LABEL_13:
    sub_10001DED8();
    goto LABEL_31;
  }

  id v47 = v3;
  uint64_t v8 = (void *)objc_opt_self(&OBJC_CLASS___RBSTarget);
  id v9 = sub_1000849D4(v8);
  uint64_t v10 = sub_100008DB0(&qword_100130BD0);
  uint64_t v11 = sub_100011924(v10);
  *(_OWORD *)(v11 + 16) = xmmword_1000F5530;
  sub_100011AB4(v11, &qword_100132D58, &OBJC_CLASS___RBSDomainAttribute_ptr);
  sub_1000842A0();
  sub_100059698();
  id v14 = sub_10008427C(v12, v13, (uint64_t)"FinishTaskInterruptable");
  sub_100084994((uint64_t)v14);
  id v15 = objc_allocWithZone(&OBJC_CLASS___RBSAssertion);
  id v16 = sub_10008463C((uint64_t)"AppIntents Query");
  v50[0] = 0LL;
  if ([v16 acquireWithError:v50])
  {
    sub_100084B10();
    swift_retain();
    sub_1000351C8((uint64_t)v50);
    sub_100008D74(v50, v51);
    if (qword_100130138 != -1) {
      swift_once(&qword_100130138, sub_1000350E4);
    }
    sub_100084AF0(&qword_100135300);
    sub_1000849A4();
    sub_1000846FC();
    sub_10008456C();
    sub_10001198C();
    sub_10001BC70();
    id v17 = (void *)sub_1000847A8();
    uint64_t v18 = sub_100035AB0(v17);
    uint64_t v19 = v2;
    if (v2)
    {
      uint64_t v20 = sub_1000844DC();
      sub_100076070(v20, "invalidate");
      goto LABEL_15;
    }

    uint64_t v43 = (void *)v18;
    sub_1000844DC();
    sub_100084964((uint64_t)v43);
    uint64_t v44 = sub_10001198C();
    sub_100084AAC(v44, "invalidate");
    sub_10008498C();

    goto LABEL_13;
  }

  id v24 = v50[0];
  uint64_t v19 = (void *)sub_100084A2C();

  sub_1000592C0();
LABEL_15:
  uint64_t v25 = v47;
  v50[0] = v19;
  sub_1000843A8();
  uint64_t v26 = sub_100008DB0(&qword_100130620);
  uint64_t v27 = sub_100011AB4(v26, &qword_1001332E0, &OBJC_CLASS___NSError_ptr);
  uint64_t v29 = sub_10008439C((uint64_t)v49, (uint64_t)v50, v28, v27);
  if (!(_DWORD)v29)
  {

    sub_1000846B4();
    uint64_t v36 = v5;
LABEL_30:
    swift_bridgeObjectRelease(v36);

    goto LABEL_31;
  }

  BOOL v30 = (void *)v49[0];
  id v31 = sub_100011930(v29, "domain");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  sub_1000849F0();
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  if (v16 == (id)v32 && v26 == v33)
  {
    sub_10001191C(v26);
  }

  else
  {
    id v4 = (void *)v33;
    char v35 = sub_10001BB00((uint64_t)v16, v26, v32, v33);
    sub_10001198C();
    sub_10001DEC4();
    if ((v35 & 1) == 0)
    {

      sub_1000846B4();
      sub_10001DED8();
      sub_10008498C();
      goto LABEL_31;
    }
  }

  uint64_t v37 = sub_100059344();
  if ((id)getLNLogCategoryMetadata(v37))
  {
    sub_100084694();
    id v38 = v30;
    sub_100084658();
    os_log_type_t v39 = sub_10000AF38();
    if (sub_10006824C(v39))
    {
      sub_10000AE10(12LL);
      uint64_t v48 = sub_10000AE10(32LL);
      sub_1000847E8(4.8149e-34);
      id v41 = sub_10000C25C(v40, "localizedDescription");
      sub_1000844D4((uint64_t)v41);
      sub_100084A38();
      uint64_t v42 = sub_10008496C();
      sub_10008450C(v42);

      sub_10001DF40();
      uint64_t v26 = (uint64_t)v46;
      sub_10000AF5C( (void *)&_mh_execute_header,  (os_log_s *)v19,  (os_log_type_t)v5,  "Failed to acquire assertions: %s",  v46);
      sub_10000AF48(v48);
      sub_10000AD78(v48);
      sub_10000AD78((uint64_t)v46);
    }

    else
    {
    }

    sub_100084944();
    uint64_t v25 = v47;
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    sub_10008443C();
    id v45 = objc_allocWithZone(&OBJC_CLASS___NSError);
    sub_100084290(v26, (uint64_t)v19);
    sub_1000842C0();

    sub_1000846B4();
    uint64_t v36 = v5;
    goto LABEL_30;
  }

  __break(1u);
}

void sub_10007B198()
{
  uint64_t v5 = v4;
  sub_100084608();
  sub_1000842CC(__stack_chk_guard);
  sub_100084738();
  __chkstk_darwin(v6);
  sub_10000AEB0();
  sub_100084414();
  if (!v26
    || (id v7 = (void *)objc_opt_self(&OBJC_CLASS___RBSProcessHandle),
        [sub_100084924(v7) isApplication],
        sub_1000848A4(),
        !v3))
  {
    sub_1000846D0();
    if (v0)
    {
LABEL_27:

      sub_10001198C();
      goto LABEL_28;
    }

    goto LABEL_9;
  }

  uint64_t v8 = (void *)objc_opt_self(&OBJC_CLASS___RBSTarget);
  sub_100084924(v8);
  uint64_t v9 = sub_100008DB0(&qword_100130BD0);
  uint64_t v10 = sub_100011924(v9);
  *(_OWORD *)(v10 + 16) = xmmword_1000F5530;
  sub_100011AB4(v10, &qword_100132D58, &OBJC_CLASS___RBSDomainAttribute_ptr);
  sub_1000842A0();
  sub_100059698();
  id v13 = sub_10008427C(v11, v12, (uint64_t)"FinishTaskInterruptable");
  *(void *)(v10 + 32) = v13;
  sub_10008440C((uint64_t)v13);
  id v14 = objc_allocWithZone(&OBJC_CLASS___RBSAssertion);
  id v15 = sub_1000842F0((uint64_t)"AppIntents Query");
  uint64_t v16 = 0LL;
  if (sub_100084404(v15, "acquireWithError:"))
  {
    id v17 = 0LL;
    sub_1000846D0();
    sub_1000846C4();
    if (v0)
    {
      sub_100084614(v18);
      goto LABEL_11;
    }

    sub_100084614(v18);

LABEL_9:
    sub_10001198C();
LABEL_28:
    sub_1000843B8();
    sub_10001DEE8();
    return;
  }

  id v19 = 0LL;
  sub_1000843E8();
  sub_10008492C();
  sub_1000592C0();
LABEL_11:
  sub_100084328();
  uint64_t v20 = sub_100008DB0(&qword_100130620);
  uint64_t v21 = sub_100011AB4(v20, &qword_1001332E0, &OBJC_CLASS___NSError_ptr);
  uint64_t v22 = sub_100084384(v21);
  if (!(_DWORD)v22)
  {

    goto LABEL_26;
  }

  os_log_type_t v39 = v15;
  id v23 = sub_100011930(v22, "domain");
  sub_1000844D4((uint64_t)v23);
  sub_1000845F4();
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  BOOL v26 = v15 == (id)v24 && v5 == (void *)v25;
  if (v26)
  {
    sub_10001191C((uint64_t)v5);
  }

  else
  {
    LOBYTE(v20) = v25;
    char v27 = sub_10001BB00((uint64_t)v15, (uint64_t)v5, v24, v25);
    sub_10001DEC4();
    sub_10001BEC0();
    if ((v27 & 1) == 0)
    {

      sub_100084A58();
LABEL_26:
      sub_1000843F0();
      goto LABEL_27;
    }
  }

  uint64_t v28 = sub_100059344();
  if ((id)getLNLogCategoryMetadata(v28))
  {
    sub_100084694();
    id v29 = v40;
    sub_100084658();
    os_log_type_t v30 = sub_10000AF38();
    if (sub_10000AEC8(v30))
    {
      sub_10000AE10(12LL);
      uint64_t v31 = sub_10000AE10(32LL);
      sub_100084898(v31);
      sub_10008490C(4.8149e-34);
      id v33 = sub_10000C25C(v32, "localizedDescription");
      sub_100084B4C((uint64_t)v33);
      sub_100084830();
      uint64_t v34 = sub_1000847D4();
      sub_1000845BC(v34);

      sub_10001DED8();
      uint64_t v16 = (uint64_t)v37;
      sub_10000AF5C((void *)&_mh_execute_header, v36, (os_log_type_t)v20, "Failed to acquire assertions: %s", v37);
      sub_10000AF48(v38);
      sub_10000AD78(v38);
      sub_10000AD78((uint64_t)v37);
    }

    else
    {
    }

    sub_100084934();
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    sub_100084AA0();
    id v35 = objc_allocWithZone(&OBJC_CLASS___NSError);
    sub_100084290(v16, v2);
    sub_1000842C0();

    goto LABEL_26;
  }

  __break(1u);
}

void sub_10007B558()
{
}

void sub_10007B5A4()
{
  uint64_t v5 = v4;
  uint64_t v6 = sub_1000842CC(__stack_chk_guard);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100068380();
  sub_100084414();
  if (!v30
    || (objc_msgSend( objc_msgSend((id)objc_opt_self(RBSProcessHandle), "currentProcess"),  "isApplication"),  sub_100084714(),  !v2))
  {
    uint64_t v21 = sub_1000849AC();
    uint64_t v22 = sub_1000BCE40(v21);
    if (v0)
    {

      sub_100038920();
    }

    else
    {
      uint64_t v23 = v22;
      sub_100038920();
      sub_100077EBC(v23);

      sub_10001BE7C();
    }

    goto LABEL_26;
  }

  id v8 = [(id)objc_opt_self(RBSTarget) currentProcess];
  uint64_t v9 = sub_100008DB0(&qword_100130BD0);
  uint64_t v10 = sub_100011924(v9);
  *(_OWORD *)(v10 + 16) = xmmword_1000F5530;
  sub_100011AB4(v10, &qword_100132D58, &OBJC_CLASS___RBSDomainAttribute_ptr);
  sub_1000842A0();
  sub_100059698();
  id v13 = sub_10008427C(v11, v12, (uint64_t)"FinishTaskInterruptable");
  *(void *)(v10 + 32) = v13;
  v45[1] = (id)v10;
  sub_10008440C((uint64_t)v13);
  id v14 = objc_allocWithZone(&OBJC_CLASS___RBSAssertion);
  sub_10008436C(0xD000000000000010LL, 0x80000001000FAF10LL, v8);
  sub_100084724();
  uint64_t v16 = (void *)v10;
  if (sub_100084404(v15, "acquireWithError:"))
  {
    uint64_t v10 = *(void *)&v5[OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_connection];
    id v17 = v16;
    uint64_t v18 = swift_retain();
    uint64_t v19 = sub_1000BCE40(v18);
    uint64_t v16 = v0;
    if (!v0)
    {
      uint64_t v38 = v19;
      swift_release();
      sub_100077EBC(v38);
      uint64_t v39 = sub_10001BEC0();
      sub_100011ADC(v39, "invalidate");

LABEL_26:
      sub_1000843B8();
      sub_10001DEE8();
      return;
    }

    uint64_t v20 = swift_release();
    sub_100011ADC(v20, "invalidate");
  }

  else
  {
    id v24 = (id)v10;
    sub_1000843E8();
    sub_10008492C();
    sub_1000592C0();
  }

  sub_100084328();
  uint64_t v25 = sub_100008DB0(&qword_100130620);
  uint64_t v26 = sub_100011AB4(v25, &qword_1001332E0, &OBJC_CLASS___NSError_ptr);
  if (!sub_100084384(v26))
  {
LABEL_25:

    sub_1000843F0();
    goto LABEL_26;
  }

  uint64_t v43 = v6;
  os_log_type_t v27 = (os_log_type_t)v45[0];
  sub_100084A6C((uint64_t)[v45[0] domain]);
  sub_100084AD8();
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  BOOL v30 = v6 == v28 && v10 == (void)v29;
  if (v30)
  {
    sub_10001191C(v10);
  }

  else
  {
    int v3 = v29;
    char v31 = sub_100084378(v6, v10, v28);
    sub_10001DF40();
    sub_10001DED8();
    if ((v31 & 1) == 0)
    {

      goto LABEL_25;
    }
  }

  uint64_t v32 = sub_100059344();
  if ((id)getLNLogCategoryMetadata(v32))
  {
    Logger.init(_:)();
    id v33 = v45[0];
    sub_100084A60();
    os_log_type_t v34 = sub_10000AF38();
    if (sub_10000AEC8(v34))
    {
      id v35 = (uint8_t *)sub_10000AE10(12LL);
      uint64_t v42 = (void *)sub_10000AE10(32LL);
      v45[3] = v42;
      id v41 = v35;
      *(_DWORD *)id v35 = 136315138;
      id v36 = sub_100011A6C((uint64_t)v42, "localizedDescription");
      sub_1000844D4((uint64_t)v36);
      sub_1000845F4();
      uint64_t v44 = sub_100084478();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, v45, v35 + 4, v35 + 12);

      sub_10001DEC4();
      uint64_t v37 = (os_log_s *)v16;
      uint64_t v16 = v41;
      sub_10000AF5C((void *)&_mh_execute_header, v37, v27, "Failed to acquire assertions: %s", v41);
      sub_10000AF48((uint64_t)v42);
      sub_10000AD78((uint64_t)v42);
      sub_10000AD78((uint64_t)v41);
    }

    else
    {
    }

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v43);
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    sub_100084A94();
    id v40 = objc_allocWithZone(&OBJC_CLASS___NSError);
    sub_100084290((uint64_t)v16, v7);
    sub_1000842C0();

    goto LABEL_25;
  }

  __break(1u);
}

void sub_10007BA44()
{
}

void sub_10007BA90()
{
  id v4 = v3;
  sub_100084608();
  uint64_t v39 = *(void *)(sub_1000842CC(__stack_chk_guard) - 8);
  sub_100027F2C();
  __chkstk_darwin(v5);
  sub_10000AEB0();
  sub_100084414();
  if (!v26
    || (uint64_t v6 = (void *)objc_opt_self(&OBJC_CLASS___RBSProcessHandle),
        [sub_1000848AC(v6) isApplication],
        sub_1000848A4(),
        !v2))
  {
    sub_10000AE98();
    sub_100084748();
    if (v0)
    {

      sub_10003EF28();
LABEL_27:
      sub_10001198C();
      goto LABEL_28;
    }

    sub_10003EF28();
    goto LABEL_10;
  }

  uint64_t v7 = (void *)objc_opt_self(&OBJC_CLASS___RBSTarget);
  id v8 = sub_1000848AC(v7);
  uint64_t v9 = sub_100008DB0(&qword_100130BD0);
  uint64_t v10 = sub_100011924(v9);
  *(_OWORD *)(v10 + 16) = xmmword_1000F5530;
  sub_100011AB4(v10, &qword_100132D58, &OBJC_CLASS___RBSDomainAttribute_ptr);
  sub_1000842A0();
  sub_100059698();
  id v13 = sub_10008427C(v11, v12, (uint64_t)"FinishTaskInterruptable");
  *(void *)(v10 + 32) = v13;
  specialized Array._endMutation()(v13);
  id v14 = objc_allocWithZone(&OBJC_CLASS___RBSAssertion);
  id v15 = sub_1000842F0((uint64_t)"AppIntents Query");
  id v41 = 0LL;
  if ([v15 acquireWithError:&v41])
  {
    id v8 = *(id *)&v1[OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_connection];
    id v16 = v41;
    swift_retain();
    sub_10008475C();
    id v17 = (void *)v0;
    if (v0)
    {
      sub_100068140();
      [v15 invalidate];
      goto LABEL_12;
    }

    sub_100068140();
    [v15 invalidate];

LABEL_10:
    sub_10001198C();
LABEL_28:
    sub_1000843B8();
    sub_10001DEE8();
    return;
  }

  id v18 = v41;
  id v17 = (void *)sub_1000843E8();

  sub_1000592C0();
LABEL_12:
  id v41 = v17;
  sub_1000843A8();
  uint64_t v19 = sub_100008DB0(&qword_100130620);
  uint64_t v20 = sub_100011AB4(v19, &qword_1001332E0, &OBJC_CLASS___NSError_ptr);
  uint64_t v21 = sub_1000843B0((uint64_t)&v40, (uint64_t)&v41, v19, v20);
  if (!(_DWORD)v21)
  {
LABEL_26:
    sub_100084A58();
    sub_100084A10();

    goto LABEL_27;
  }

  uint64_t v22 = v40;
  uint64_t v23 = (uint64_t)sub_100011930(v21, "domain");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  sub_1000849E4();
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  BOOL v26 = v8 == (id)v24 && v0 == (void)v25;
  if (v26)
  {
    sub_10001191C(v0);
  }

  else
  {
    id v4 = v25;
    uint64_t v23 = sub_100084378((uint64_t)v8, v0, v24);
    sub_10001DEC4();
    sub_10001DED8();
    if ((v23 & 1) == 0)
    {

      goto LABEL_26;
    }
  }

  uint64_t v27 = sub_100059344();
  if ((id)getLNLogCategoryMetadata(v27))
  {
    sub_100084694();
    id v28 = v22;
    sub_100084A74();
    os_log_type_t v29 = sub_10000AF38();
    if (sub_100067CA8(v29))
    {
      os_log_type_t v37 = v23;
      uint64_t v23 = sub_10000AE10(12LL);
      uint64_t v30 = sub_10000AE10(32LL);
      uint64_t v31 = sub_100084898(v30);
      *(_DWORD *)uint64_t v23 = 136315138;
      id v32 = sub_100011A6C(v31, "localizedDescription");
      sub_1000844D4((uint64_t)v32);
      sub_100084B40();
      uint64_t v33 = sub_10008442C();
      uint64_t v34 = sub_100084A18(v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v34, v35, v23 + 4, v23 + 12);

      sub_10001DEC4();
      sub_10000AF5C( (void *)&_mh_execute_header,  (os_log_s *)v17,  v37,  "Failed to acquire assertions: %s",  (uint8_t *)v23);
      sub_10000AF48(v38);
      sub_10000AD78(v38);
      sub_10000AD78(v23);
    }

    else
    {
    }

    sub_100084B1C(v39);
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    sub_100084AA0();
    id v36 = objc_allocWithZone(&OBJC_CLASS___NSError);
    sub_100084290((uint64_t)v17, v23);
    sub_1000842C0();

    goto LABEL_26;
  }

  __break(1u);
}

void sub_10007BEE4()
{
  id v4 = v3;
  sub_100084608();
  uint64_t v40 = *(void *)(sub_1000842CC(__stack_chk_guard) - 8);
  sub_100027F2C();
  __chkstk_darwin(v5);
  sub_1000842D8();
  sub_100084414();
  if (!v27
    || (uint64_t v6 = (void *)objc_opt_self(&OBJC_CLASS___RBSProcessHandle),
        [sub_1000845AC(v6) isApplication],
        sub_100084714(),
        !v2))
  {
    sub_100084454();
    if (v0)
    {
      sub_10001BE7C();
LABEL_28:
      swift_bridgeObjectRelease();

      goto LABEL_29;
    }

    goto LABEL_10;
  }

  uint64_t v7 = (void *)objc_opt_self(&OBJC_CLASS___RBSTarget);
  id v8 = sub_1000845AC(v7);
  uint64_t v9 = sub_100008DB0(&qword_100130BD0);
  uint64_t v10 = sub_100011924(v9);
  *(_OWORD *)(v10 + 16) = xmmword_1000F5530;
  sub_100011AB4(v10, &qword_100132D58, &OBJC_CLASS___RBSDomainAttribute_ptr);
  sub_1000842A0();
  sub_100059698();
  id v13 = sub_10008427C(v11, v12, (uint64_t)"FinishTaskInterruptable");
  *(void *)(v10 + 32) = v13;
  sub_10008440C((uint64_t)v13);
  id v14 = objc_allocWithZone(&OBJC_CLASS___RBSAssertion);
  sub_100084350((uint64_t)"AppIntents Query");
  sub_100084724();
  id v16 = (os_log_s *)v10;
  if (sub_100084404(v15, "acquireWithError:"))
  {
    id v17 = (id)v10;
    sub_100084454();
    sub_1000846C4();
    if (v0)
    {
      sub_100011ADC(v18, *(const char **)(v19 + 1144));
      goto LABEL_12;
    }

    sub_100011ADC(v18, *(const char **)(v19 + 1144));

LABEL_10:
    sub_10001BE7C();
    sub_10001198C();
LABEL_29:
    sub_1000843B8();
    sub_10001DEE8();
    return;
  }

  id v20 = (id)v10;
  sub_1000843E8();
  sub_100028040();
  sub_1000592C0();
LABEL_12:
  sub_100084328();
  uint64_t v21 = sub_100008DB0(&qword_100130620);
  uint64_t v22 = sub_100011AB4(v21, &qword_1001332E0, &OBJC_CLASS___NSError_ptr);
  uint64_t v23 = sub_100084310(v22);
  if (!(_DWORD)v23)
  {
LABEL_26:

    goto LABEL_27;
  }

  id v24 = sub_100011930(v23, "domain");
  sub_100011A74((uint64_t)v24);
  sub_100084664();
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  BOOL v27 = v0 == v25 && v8 == (id)v26;
  if (v27)
  {
    sub_10001191C((uint64_t)v8);
  }

  else
  {
    uint64_t v21 = sub_100084334(v25, v26);
    sub_10000AEE8();
    sub_10001DED8();
    if ((v21 & 1) == 0)
    {

      sub_100084844();
LABEL_27:
      sub_1000843F0();
      sub_10001BE7C();
      goto LABEL_28;
    }
  }

  uint64_t v28 = sub_100059344();
  if ((id)getLNLogCategoryMetadata(v28))
  {
    sub_100084600();
    id v29 = v41;
    sub_1000843F8();
    os_log_type_t v30 = sub_10000AF38();
    if (sub_100068360(v30))
    {
      sub_10000AE10(12LL);
      os_log_type_t v38 = v21;
      uint64_t v39 = sub_10000AE10(32LL);
      v42[0] = v39;
      sub_1000844F4(4.8149e-34);
      id v32 = sub_100011A6C(v31, "localizedDescription");
      sub_1000845B4((uint64_t)v32);
      sub_100084860();
      uint64_t v35 = sub_100084770(v33, v34, v42);
      sub_1000843CC(v35);

      sub_10001DF40();
      uint64_t v21 = (uint64_t)v37;
      sub_10000AF5C((void *)&_mh_execute_header, v16, v38, "Failed to acquire assertions: %s", v37);
      sub_10000AF48(v39);
      sub_10000AD78(v39);
      sub_10000AD78((uint64_t)v37);
    }

    else
    {
    }

    sub_100084420(v40);
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    sub_10008443C();
    id v36 = objc_allocWithZone(&OBJC_CLASS___NSError);
    sub_100084290(v21, (uint64_t)v16);
    sub_1000842C0();

    goto LABEL_26;
  }

  __break(1u);
}

void sub_10007C2BC()
{
}

void sub_10007C308()
{
  id v4 = v3;
  uint64_t v5 = (void *)sub_1000842CC(__stack_chk_guard);
  uint64_t v6 = *(v5 - 1);
  __chkstk_darwin(v5);
  sub_100068380();
  sub_100084414();
  if (!v25
    || (objc_msgSend( objc_msgSend((id)objc_opt_self(RBSProcessHandle), "currentProcess"),  "isApplication"),  sub_100084714(),  !v2))
  {
    sub_10008497C();
    if (!v0)
    {

      goto LABEL_27;
    }

    goto LABEL_26;
  }

  id v7 = [(id)objc_opt_self(RBSTarget) currentProcess];
  uint64_t v8 = sub_100008DB0(&qword_100130BD0);
  uint64_t v9 = sub_100011924(v8);
  *(_OWORD *)(v9 + 16) = xmmword_1000F5530;
  sub_100011AB4(v9, &qword_100132D58, &OBJC_CLASS___RBSDomainAttribute_ptr);
  sub_1000842A0();
  sub_100059698();
  id v12 = sub_10008427C(v10, v11, (uint64_t)"FinishTaskInterruptable");
  *(void *)(v9 + 32) = v12;
  v40[1] = (id)v9;
  sub_10008440C((uint64_t)v12);
  id v13 = objc_allocWithZone(&OBJC_CLASS___RBSAssertion);
  sub_10008436C(0xD000000000000010LL, 0x80000001000FAF10LL, v7);
  sub_100084724();
  id v15 = (os_log_s *)v9;
  if (sub_100084404(v14, "acquireWithError:"))
  {
    id v16 = (id)v9;
    sub_10008497C();
    sub_1000846C4();
    if (!v0)
    {
      sub_100011ADC(v17, *(const char **)(v18 + 1144));

LABEL_27:
      sub_1000843B8();
      sub_10001DEE8();
      return;
    }

    sub_100011ADC(v17, *(const char **)(v18 + 1144));
  }

  else
  {
    id v19 = (id)v9;
    sub_1000843E8();
    sub_10008492C();
    sub_1000592C0();
  }

  sub_100084328();
  uint64_t v20 = sub_100008DB0(&qword_100130620);
  uint64_t v21 = sub_100011AB4(v20, &qword_1001332E0, &OBJC_CLASS___NSError_ptr);
  if (!sub_100084384(v21))
  {
LABEL_25:

    sub_1000843F0();
LABEL_26:

    goto LABEL_27;
  }

  os_log_type_t v38 = v5;
  os_log_type_t v22 = (os_log_type_t)v40[0];
  sub_100084A6C((uint64_t)[v40[0] domain]);
  sub_100084AD8();
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  BOOL v25 = v9 == v23 && v0 == (void)v24;
  if (v25)
  {
    sub_10001191C(v0);
  }

  else
  {
    uint64_t v5 = v24;
    char v26 = sub_100084378(v9, v0, v23);
    sub_10001DF40();
    sub_10001DED8();
    if ((v26 & 1) == 0)
    {

      goto LABEL_25;
    }
  }

  uint64_t v27 = sub_100059344();
  if ((id)getLNLogCategoryMetadata(v27))
  {
    Logger.init(_:)();
    id v28 = v40[0];
    sub_100084A60();
    os_log_type_t v29 = sub_10000AF38();
    if (sub_10000AEC8(v29))
    {
      os_log_type_t v30 = (uint8_t *)sub_10000AE10(12LL);
      uint64_t v31 = sub_10000AE10(32LL);
      uint64_t v32 = sub_100084898(v31);
      id v36 = v30;
      *(_DWORD *)os_log_type_t v30 = 136315138;
      id v33 = sub_100011A6C(v32, "localizedDescription");
      sub_1000844D4((uint64_t)v33);
      sub_1000845F4();
      uint64_t v39 = sub_100084478();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v30 + 4, v30 + 12);

      sub_10001DEC4();
      uint64_t v34 = v15;
      id v15 = (os_log_s *)v36;
      sub_10000AF5C((void *)&_mh_execute_header, v34, v22, "Failed to acquire assertions: %s", v36);
      sub_10000AF48(v37);
      sub_10000AD78(v37);
      sub_10000AD78((uint64_t)v36);
    }

    else
    {
    }

    (*(void (**)(uint64_t, void *))(v6 + 8))(v1, v38);
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    sub_100084A94();
    id v35 = objc_allocWithZone(&OBJC_CLASS___NSError);
    sub_100084290((uint64_t)v15, v6);
    sub_1000842C0();

    goto LABEL_25;
  }

  __break(1u);
}

void sub_10007C714()
{
}

void sub_10007C760()
{
  uint64_t v54 = v2;
  id v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v53 = *(void *)(sub_1000842CC(__stack_chk_guard) - 8);
  sub_100027F2C();
  __chkstk_darwin(v9);
  sub_1000842D8();
  if (*(_BYTE *)(v8 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion) != 1
    || (uint64_t v10 = (void *)objc_opt_self(&OBJC_CLASS___RBSProcessHandle),
        [sub_10008468C(v10) isApplication],
        sub_100028040(),
        !v0))
  {
    swift_retain();
    uint64_t v26 = sub_10008452C();
    if (v1)
    {
      sub_10001BC70();

      sub_100047164();
LABEL_8:
      uint64_t v27 = v4;
LABEL_9:
      swift_bridgeObjectRelease(v27);
LABEL_12:
      sub_1000843B8();
      sub_10001DEE8();
      return;
    }

    uint64_t v28 = v26;
    sub_100047164();
    sub_1000846BC(v28);

    sub_10000AEE8();
    goto LABEL_11;
  }

  uint64_t v11 = (void *)objc_opt_self(&OBJC_CLASS___RBSTarget);
  id v12 = sub_10008468C(v11);
  uint64_t v13 = sub_100008DB0(&qword_100130BD0);
  uint64_t v14 = sub_100011924(v13);
  *(_OWORD *)(v14 + 16) = xmmword_1000F5530;
  sub_100011AB4(v14, &qword_100132D58, &OBJC_CLASS___RBSDomainAttribute_ptr);
  sub_1000842A0();
  sub_100059698();
  id v17 = sub_10008427C(v15, v16, (uint64_t)"FinishTaskInterruptable");
  *(void *)(v14 + 32) = v17;
  sub_10008440C((uint64_t)v17);
  id v18 = objc_allocWithZone(&OBJC_CLASS___RBSAssertion);
  unint64_t v19 = sub_1000846E8();
  sub_10008436C(v19, v20, v12);
  sub_100084724();
  os_log_type_t v22 = (os_log_s *)v14;
  if (sub_100084404(v21, "acquireWithError:"))
  {
    id v23 = (id)v14;
    swift_retain();
    uint64_t v24 = sub_10008452C();
    os_log_type_t v22 = v1;
    if (v1)
    {
      uint64_t v25 = sub_100047164();
      sub_100011ADC(v25, "invalidate");
      goto LABEL_14;
    }

    uint64_t v47 = v24;
    sub_100047164();
    sub_1000846BC(v47);
    uint64_t v48 = sub_10001DF40();
    sub_100011ADC(v48, "invalidate");

LABEL_11:
    sub_10001BC70();
    sub_10001DED8();
    goto LABEL_12;
  }

  id v29 = (id)v14;
  sub_1000843E8();
  sub_100028040();
  sub_1000592C0();
  id v4 = v54;
LABEL_14:
  sub_100084328();
  uint64_t v30 = sub_100008DB0(&qword_100130620);
  uint64_t v31 = sub_100011AB4(v30, &qword_1001332E0, &OBJC_CLASS___NSError_ptr);
  uint64_t v32 = sub_100084310(v31);
  if (!(_DWORD)v32)
  {

    sub_1000843F0();
    sub_10001BC70();

    goto LABEL_8;
  }

  uint64_t v52 = (void *)v14;
  id v33 = sub_100011930(v32, "domain");
  uint64_t v34 = sub_1000845B4((uint64_t)v33);
  uint64_t v36 = v35;

  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  if (v34 == v37 && v36 == (void)v38)
  {
    sub_10001191C(v36);
  }

  else
  {
    id v4 = v38;
    char v40 = sub_100084378(v34, v36, v37);
    sub_10001198C();
    sub_10001DED8();
    if ((v40 & 1) == 0)
    {

LABEL_29:
      sub_1000843F0();
      sub_10001BC70();

      uint64_t v27 = v54;
      goto LABEL_9;
    }
  }

  uint64_t v41 = sub_100059344();
  if ((id)getLNLogCategoryMetadata(v41))
  {
    sub_100084600();
    id v42 = v55;
    sub_1000843F8();
    os_log_type_t v43 = sub_10000AF38();
    if (sub_100068360(v43))
    {
      sub_10000AE10(12LL);
      os_log_type_t v51 = v36;
      uint64_t v56 = sub_10000AE10(32LL);
      sub_1000848CC(4.8149e-34);
      id v45 = sub_100011A6C(v44, "localizedDescription");
      sub_1000845B4((uint64_t)v45);
      sub_100084B34();
      uint64_t v46 = sub_10008442C();
      sub_1000845D8(v46);

      sub_10001DEC4();
      uint64_t v36 = (uint64_t)v50;
      sub_10000AF5C((void *)&_mh_execute_header, v22, v51, "Failed to acquire assertions: %s", v50);
      sub_10000AF48(v56);
      sub_10000AD78(v56);
      sub_10000AD78((uint64_t)v50);
    }

    else
    {
    }

    sub_100084420(v53);
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    sub_10008443C();
    id v49 = objc_allocWithZone(&OBJC_CLASS___NSError);
    sub_100084290(v36, (uint64_t)v22);
    sub_1000842C0();

    goto LABEL_29;
  }

  __break(1u);
}

void sub_10007CBF0()
{
}

void sub_10007CC44()
{
}

void sub_10007CC90()
{
}

void sub_10007CCE4()
{
  uint64_t v68 = v3;
  uint64_t v70 = v2;
  uint64_t v5 = v4;
  uint64_t v72 = v6;
  uint64_t v73 = v7;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  id v12 = (void *)sub_1000842CC(__stack_chk_guard);
  uint64_t v67 = *(v12 - 1);
  sub_100027F2C();
  __chkstk_darwin(v13);
  sub_1000842D8();
  sub_100084414();
  if (!v46
    || (uint64_t v14 = (void *)objc_opt_self(&OBJC_CLASS___RBSProcessHandle),
        id v15 = sub_10008468C(v14),
        unsigned int v16 = [v15 isApplication],
        v15,
        !v16))
  {
    uint64_t v34 = *(void *)&v11[OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_connection];
    sub_100068340();
    v5(v9, v72, v70, v73, v34);
    if (v0)
    {
      swift_bridgeObjectRelease();
      sub_10001BEC0();

      sub_100068168();
LABEL_34:
      sub_1000843B8();
      sub_10001DEE8();
      return;
    }

    if (v35)
    {

      sub_100068168();
    }

    else
    {
      v68(v9, v72, v70, v73, v34);
      uint64_t v62 = v48;
      sub_100068168();

      if (!v62) {
        goto LABEL_12;
      }
    }

    sub_10001BC70();
LABEL_12:
    sub_10001BE7C();
    sub_10001BEC0();
    goto LABEL_34;
  }

  id v17 = (void *)objc_opt_self(&OBJC_CLASS___RBSTarget);
  id v18 = sub_10008468C(v17);
  uint64_t v19 = sub_100008DB0(&qword_100130BD0);
  uint64_t v20 = sub_100011924(v19);
  *(_OWORD *)(v20 + 16) = xmmword_1000F5530;
  sub_100011AB4(v20, &qword_100132D58, &OBJC_CLASS___RBSDomainAttribute_ptr);
  sub_1000842A0();
  sub_100059698();
  id v23 = sub_10008427C(v21, v22, (uint64_t)"FinishTaskInterruptable");
  *(void *)(v20 + 32) = v23;
  specialized Array._endMutation()(v23);
  id v24 = objc_allocWithZone(&OBJC_CLASS___RBSAssertion);
  unint64_t v25 = sub_1000846E8();
  id v27 = sub_10008436C(v25, v26, v18);
  id v75 = 0LL;
  unsigned int v28 = [v27 acquireWithError:&v75];
  id v29 = v75;
  if (v28)
  {
    id v30 = v75;
    sub_1000849AC();
    uint64_t v31 = sub_100084AC4();
    ((void (*)(uint64_t))v5)(v31);
    id v29 = v0;
    if (v0)
    {
      uint64_t v33 = sub_100038920();
      sub_100011ADC(v33, "invalidate");
      goto LABEL_14;
    }

    if (v32)
    {
      sub_100038920();
    }

    else
    {
      uint64_t v63 = sub_100084AC4();
      ((void (*)(uint64_t))v68)(v63);
      uint64_t v65 = v64;
      uint64_t v60 = sub_100038920();
      if (!v65) {
        goto LABEL_30;
      }
    }

    uint64_t v60 = sub_10001BE7C();
LABEL_30:
    sub_100011ADC(v60, "invalidate");

    goto LABEL_12;
  }

  id v36 = v75;
  sub_1000843E8();
  sub_100028040();
  sub_1000592C0();
LABEL_14:
  id v75 = v29;
  sub_1000843A8();
  uint64_t v37 = sub_100008DB0(&qword_100130620);
  uint64_t v38 = sub_100011AB4(v37, &qword_1001332E0, &OBJC_CLASS___NSError_ptr);
  if (!sub_10008439C((uint64_t)&v74, (uint64_t)&v75, v39, v38))
  {
LABEL_21:

    sub_100084A10();
LABEL_33:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    goto LABEL_34;
  }

  id v71 = v27;
  id v40 = v74;
  uint64_t v41 = sub_1000845B4((uint64_t)[v74 domain]);
  uint64_t v43 = v42;

  uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  BOOL v46 = v41 == v44 && v43 == v45;
  if (v46)
  {
    sub_10001191C(v43);
  }

  else
  {
    char v47 = sub_10001BB00(v41, v43, v44, v45);
    sub_10001BC70();
    sub_10001DF40();
    if ((v47 & 1) == 0)
    {

      goto LABEL_21;
    }
  }

  uint64_t v49 = sub_100059344();
  if ((id)getLNLogCategoryMetadata(v49))
  {
    sub_100084600();
    id v50 = v40;
    Logger.logObject.getter(v50);
    os_log_type_t v51 = sub_10000AF38();
    if (os_log_type_enabled(v1, v51))
    {
      uint64_t v52 = (uint8_t *)sub_10000AE10(12LL);
      uint64_t v66 = sub_10000AE10(32LL);
      uint64_t v76 = v66;
      *(_DWORD *)uint64_t v52 = 136315138;
      uint64_t v53 = sub_100084A6C((uint64_t)[v50 localizedDescription]);
      char v69 = v11;
      unint64_t v55 = v54;

      uint64_t v56 = v53;
      id v27 = v71;
      uint64_t v57 = sub_10000DE60(v56, v55, &v76);
      uint64_t v58 = sub_100084A18(v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v58, v59, v52 + 4, v52 + 12);

      uint64_t v11 = v69;
      swift_bridgeObjectRelease();
      sub_10000AF5C((void *)&_mh_execute_header, v1, v51, "Failed to acquire assertions: %s", v52);
      uint64_t v43 = v66;
      sub_10000AF48(v66);
      sub_10000AD78(v66);
      sub_10000AD78((uint64_t)v52);
    }

    else
    {
    }

    (*(void (**)(os_log_s *, void *))(v67 + 8))(v1, v12);
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    sub_100084A94();
    id v61 = objc_allocWithZone(&OBJC_CLASS___NSError);
    sub_100084290((uint64_t)v1, v43);
    sub_1000842C0();

    sub_100084A10();
    goto LABEL_33;
  }

  __break(1u);
}

void sub_10007D294()
{
}

void sub_10007D2E0()
{
}

id sub_10007D334(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v66 = *(void *)(v10 - 8);
  uint64_t v67 = v10;
  __chkstk_darwin(v10);
  id v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion) != 1
    || (id v13 = [(id)objc_opt_self(RBSProcessHandle) currentProcess],
        unsigned int v14 = [v13 isApplication],
        v13,
        !v14))
  {
    sub_100082614(a5, &v71);
    if (v5)
    {
LABEL_26:
      swift_bridgeObjectRelease(a4);

      return a2;
    }

    goto LABEL_8;
  }

  id v15 = [(id)objc_opt_self(RBSTarget) currentProcess];
  uint64_t v16 = sub_100008DB0(&qword_100130BD0);
  uint64_t v17 = swift_allocObject(v16, 40LL, 7LL);
  *(_OWORD *)(v17 + 16) = xmmword_1000F5530;
  sub_10000A1A0(0LL, &qword_100132D58, &OBJC_CLASS___RBSDomainAttribute_ptr);
  id v18 = sub_10007FCE4(0xD000000000000010LL, 0x80000001000FAF30LL, 0xD000000000000017LL, 0x80000001000FAF50LL);
  *(void *)(v17 + 32) = v18;
  id v70 = (id)v17;
  specialized Array._endMutation()(v18);
  uint64_t v19 = (uint64_t)v70;
  id v20 = objc_allocWithZone(&OBJC_CLASS___RBSAssertion);
  id v21 = sub_100083C80(0xD000000000000010LL, 0x80000001000FAF10LL, v15, v19);
  id v70 = 0LL;
  unsigned int v22 = [v21 acquireWithError:&v70];
  id v23 = v70;
  if (v22)
  {
    id v24 = v70;
    sub_100082614(a5, &v71);
    unint64_t v25 = v5;
    if (v5)
    {
      [v21 invalidate];
      goto LABEL_10;
    }

    [v21 invalidate];

LABEL_8:
    a2 = v71;
    swift_bridgeObjectRelease(a4);
    return a2;
  }

  id v26 = v70;
  unint64_t v25 = (void *)_convertNSErrorToError(_:)(v23);

  swift_willThrow(v27);
LABEL_10:
  id v70 = v25;
  swift_errorRetain(v25);
  uint64_t v28 = sub_100008DB0(&qword_100130620);
  uint64_t v29 = sub_10000A1A0(0LL, &qword_1001332E0, &OBJC_CLASS___NSError_ptr);
  if (!swift_dynamicCast(&v69, &v70, v28, v29, 0LL))
  {

    goto LABEL_25;
  }

  id v65 = v21;
  id v30 = v69;
  id v31 = [v69 domain];
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  uint64_t v34 = v33;

  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  if (v32 == v35 && v34 == v36)
  {
    swift_bridgeObjectRelease_n(v34, 2LL);
  }

  else
  {
    uint64_t v38 = v36;
    char v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v34, v35, v36, 0LL);
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(v38);
    if ((v39 & 1) == 0)
    {

LABEL_25:
      swift_errorRelease(v70);
      goto LABEL_26;
    }
  }

  uint64_t v40 = swift_errorRelease(v25);
  id result = (id)getLNLogCategoryMetadata(v40);
  if (result)
  {
    Logger.init(_:)();
    id v42 = v30;
    uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
    os_log_type_t v44 = static os_log_type_t.error.getter();
    int v45 = v44;
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v46 = swift_slowAlloc(12LL, -1LL);
      int v63 = v45;
      char v47 = (uint8_t *)v46;
      uint64_t v64 = swift_slowAlloc(32LL, -1LL);
      uint64_t v72 = v64;
      uint64_t v62 = v47;
      *(_DWORD *)char v47 = 136315138;
      id v61 = v47 + 4;
      id v48 = [v42 localizedDescription];
      uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
      unint64_t v51 = v50;

      uint64_t v68 = sub_10000DE60(v49, v51, &v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v61, v47 + 12);

      swift_bridgeObjectRelease(v51);
      uint64_t v52 = v62;
      _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v63, "Failed to acquire assertions: %s", v62, 0xCu);
      uint64_t v53 = v64;
      swift_arrayDestroy(v64, 1LL);
      swift_slowDealloc(v53, -1LL, -1LL);
      swift_slowDealloc(v52, -1LL, -1LL);
    }

    else
    {
    }

    (*(void (**)(char *, uint64_t))(v66 + 8))(v12, v67);
    id v54 = v65;
    uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    uint64_t v57 = v56;
    id v58 = objc_allocWithZone(&OBJC_CLASS___NSError);
    id v59 = sub_100083AC4(v55, v57, 9006LL, 0LL);
    swift_willThrow(v59);

    goto LABEL_25;
  }

  __break(1u);
  return result;
}

id sub_10007D8EC(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v68 = a4;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion) != 1
    || (id v12 = [(id)objc_opt_self(RBSProcessHandle) currentProcess],
        unsigned int v13 = [v12 isApplication],
        v12,
        !v13))
  {
    uint64_t v8 = *(void *)&a2[OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_connection];
    swift_retain();
    uint64_t v27 = a3;
    uint64_t v25 = v68;
    sub_1000C02F0(v27, v68, (uint64_t)v76);
    if (v4)
    {
      swift_bridgeObjectRelease(v25);

      swift_release();
      return (id)v8;
    }

    swift_release();
    sub_100026C8C((uint64_t)v76, (uint64_t)&v79, &qword_100132760);
    if (*((void *)&v79 + 1))
    {
      __int128 v72 = v79;
      uint64_t v8 = v80;
      sub_100025F44((uint64_t)&v72);
    }

    else
    {
      uint64_t v8 = 0LL;
    }

    id v20 = a2;
LABEL_20:

    swift_bridgeObjectRelease(v25);
    return (id)v8;
  }

  id v14 = [(id)objc_opt_self(RBSTarget) currentProcess];
  uint64_t v15 = sub_100008DB0(&qword_100130BD0);
  uint64_t v16 = swift_allocObject(v15, 40LL, 7LL);
  *(_OWORD *)(v16 + 16) = xmmword_1000F5530;
  sub_10000A1A0(0LL, &qword_100132D58, &OBJC_CLASS___RBSDomainAttribute_ptr);
  id v17 = sub_10007FCE4(0xD000000000000010LL, 0x80000001000FAF30LL, 0xD000000000000017LL, 0x80000001000FAF50LL);
  *(void *)(v16 + 32) = v17;
  id v71 = (id)v16;
  specialized Array._endMutation()(v17);
  uint64_t v18 = (uint64_t)v71;
  id v19 = objc_allocWithZone(&OBJC_CLASS___RBSAssertion);
  id v20 = sub_100083C80(0xD000000000000010LL, 0x80000001000FAF10LL, v14, v18);
  id v71 = 0LL;
  unsigned int v21 = [v20 acquireWithError:&v71];
  id v22 = v71;
  if (v21)
  {
    id v23 = v71;
    swift_retain();
    uint64_t v24 = a3;
    uint64_t v25 = v68;
    sub_1000C02F0(v24, v68, (uint64_t)v75);
    id v26 = v4;
    if (v4)
    {
      swift_release();
      [v20 invalidate];
      goto LABEL_11;
    }

    swift_release();
    sub_100026C8C((uint64_t)v75, (uint64_t)&v77, &qword_100132760);
    if (*((void *)&v77 + 1))
    {
      __int128 v73 = v77;
      uint64_t v8 = v78;
      sub_100025F44((uint64_t)&v73);
    }

    else
    {
      uint64_t v8 = 0LL;
    }

    [v20 invalidate];

    goto LABEL_20;
  }

  id v28 = v71;
  id v26 = (void *)_convertNSErrorToError(_:)(v22);

  swift_willThrow(v29);
  uint64_t v25 = v68;
LABEL_11:
  id v71 = v26;
  swift_errorRetain(v26);
  uint64_t v30 = sub_100008DB0(&qword_100130620);
  uint64_t v31 = sub_10000A1A0(0LL, &qword_1001332E0, &OBJC_CLASS___NSError_ptr);
  if (!swift_dynamicCast(&v70, &v71, v30, v31, 0LL))
  {

    swift_errorRelease(v71);
    uint64_t v41 = v25;
    goto LABEL_30;
  }

  id v67 = v70;
  id v32 = [v70 domain];
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
  uint64_t v35 = v34;

  uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  if (v33 == v36 && v35 == v37)
  {
    swift_bridgeObjectRelease_n(v35, 2LL);
  }

  else
  {
    uint64_t v39 = v37;
    char v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v36, v37, 0LL);
    swift_bridgeObjectRelease(v35);
    swift_bridgeObjectRelease(v39);
    if ((v40 & 1) == 0)
    {

      swift_errorRelease(v71);
      uint64_t v41 = v68;
LABEL_30:
      swift_bridgeObjectRelease(v41);

      return (id)v8;
    }
  }

  uint64_t v42 = swift_errorRelease(v26);
  id result = (id)getLNLogCategoryMetadata(v42);
  if (result)
  {
    Logger.init(_:)();
    id v44 = v67;
    int v45 = (void *)Logger.logObject.getter(v44);
    os_log_type_t v46 = static os_log_type_t.error.getter();
    int v47 = v46;
    if (os_log_type_enabled((os_log_t)v45, v46))
    {
      id v67 = v45;
      uint64_t v48 = swift_slowAlloc(12LL, -1LL);
      int v65 = v47;
      uint64_t v49 = (uint8_t *)v48;
      uint64_t v66 = swift_slowAlloc(32LL, -1LL);
      uint64_t v74 = v66;
      uint64_t v64 = v49;
      *(_DWORD *)uint64_t v49 = 136315138;
      int v63 = v49 + 4;
      unint64_t v50 = v44;
      id v51 = [v44 localizedDescription];
      uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      unint64_t v53 = v52;

      id v44 = v50;
      uint64_t v69 = sub_10000DE60(v62, v53, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v63, v49 + 12);

      swift_bridgeObjectRelease(v53);
      id v54 = v67;
      uint64_t v55 = v64;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v67,  (os_log_type_t)v65,  "Failed to acquire assertions: %s",  v64,  0xCu);
      uint64_t v56 = v66;
      swift_arrayDestroy(v66, 1LL);
      swift_slowDealloc(v56, -1LL, -1LL);
      swift_slowDealloc(v55, -1LL, -1LL);
    }

    else
    {
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v57 = v68;
    uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    uint64_t v8 = v59;
    id v60 = objc_allocWithZone(&OBJC_CLASS___NSError);
    id v61 = sub_100083AC4(v58, v8, 9006LL, 0LL);
    swift_willThrow(v61);

    swift_errorRelease(v71);
    uint64_t v41 = v57;
    goto LABEL_30;
  }

  __break(1u);
  return result;
}

void sub_10007E024()
{
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion) != 1
    || (uint64_t v7 = (void *)objc_opt_self(&OBJC_CLASS___RBSProcessHandle),
        [sub_1000849D4(v7) isApplication],
        sub_100028040(),
        !v1))
  {
    sub_10000AE98();
    sub_1000B864C((uint64_t)v49);
    sub_100008D74(v49, v50);
    if (qword_100130358 != -1) {
      swift_once(&qword_100130358, sub_1000B85DC);
    }
    v48[0] = v4;
    v48[1] = v5;
    sub_1000849A4();
    sub_10008469C();
    sub_10008458C();
    sub_10001DEC4();
    sub_10001BEC0();
    unsigned int v21 = (void *)sub_10008477C();
    uint64_t v22 = sub_1000B8BA4(v21);
    if (v2)
    {
      sub_10000AC58(v49);
      sub_10001DED8();

      sub_10003EF28();
LABEL_31:
      sub_1000843B8();
      sub_10001DEE8();
      return;
    }

    uint64_t v23 = v22;
    sub_10000AC58(v49);
    sub_10003EF28();
    sub_1000846BC(v23);
    sub_100084AE4();
    sub_10001198C();
LABEL_13:
    sub_10001DED8();
    goto LABEL_31;
  }

  os_log_type_t v46 = v3;
  uint64_t v8 = (void *)objc_opt_self(&OBJC_CLASS___RBSTarget);
  id v9 = sub_1000849D4(v8);
  uint64_t v10 = sub_100008DB0(&qword_100130BD0);
  uint64_t v11 = sub_100011924(v10);
  *(_OWORD *)(v11 + 16) = xmmword_1000F5530;
  sub_100011AB4(v11, &qword_100132D58, &OBJC_CLASS___RBSDomainAttribute_ptr);
  sub_1000842A0();
  sub_100059698();
  id v14 = sub_10008427C(v12, v13, (uint64_t)"FinishTaskInterruptable");
  sub_100084994((uint64_t)v14);
  id v15 = objc_allocWithZone(&OBJC_CLASS___RBSAssertion);
  id v16 = sub_10008463C((uint64_t)"AppIntents Query");
  v49[0] = 0LL;
  if ([v16 acquireWithError:v49])
  {
    sub_100084B10();
    swift_retain();
    sub_1000B864C((uint64_t)v49);
    sub_100008D74(v49, v50);
    if (qword_100130358 != -1) {
      swift_once(&qword_100130358, sub_1000B85DC);
    }
    sub_100084AF0(&qword_100135958);
    sub_1000849A4();
    sub_1000846FC();
    sub_10008456C();
    sub_10001198C();
    sub_10001BC70();
    id v17 = (void *)sub_1000847A8();
    uint64_t v18 = sub_1000B8BA4(v17);
    id v19 = v2;
    if (v2)
    {
      uint64_t v20 = sub_1000844DC();
      sub_100076070(v20, "invalidate");
      goto LABEL_15;
    }

    uint64_t v42 = (void *)v18;
    sub_1000844DC();
    sub_1000846BC((uint64_t)v42);
    uint64_t v43 = sub_10001198C();
    sub_100084AAC(v43, "invalidate");
    sub_10008498C();

    goto LABEL_13;
  }

  id v24 = v49[0];
  id v19 = (void *)sub_100084A2C();

  sub_1000592C0();
LABEL_15:
  uint64_t v25 = v46;
  v49[0] = v19;
  sub_1000843A8();
  uint64_t v26 = sub_100008DB0(&qword_100130620);
  uint64_t v27 = sub_100011AB4(v26, &qword_1001332E0, &OBJC_CLASS___NSError_ptr);
  uint64_t v29 = sub_10008439C((uint64_t)v48, (uint64_t)v49, v28, v27);
  if (!(_DWORD)v29)
  {

    sub_1000846B4();
LABEL_30:
    swift_bridgeObjectRelease();

    goto LABEL_31;
  }

  uint64_t v30 = (void *)v48[0];
  id v31 = sub_100011930(v29, "domain");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  sub_1000849F0();
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  if (v16 == (id)v32 && v26 == v33)
  {
    sub_10001191C(v26);
  }

  else
  {
    id v4 = (void *)v33;
    char v35 = sub_10001BB00((uint64_t)v16, v26, v32, v33);
    sub_10001198C();
    sub_10001DEC4();
    if ((v35 & 1) == 0)
    {

      sub_1000846B4();
      sub_10001DED8();
      sub_10008498C();
      goto LABEL_31;
    }
  }

  uint64_t v36 = sub_100059344();
  if ((id)getLNLogCategoryMetadata(v36))
  {
    sub_100084694();
    id v37 = v30;
    sub_100084658();
    os_log_type_t v38 = sub_10000AF38();
    if (sub_10006824C(v38))
    {
      sub_10000AE10(12LL);
      uint64_t v47 = sub_10000AE10(32LL);
      sub_1000847E8(4.8149e-34);
      id v40 = sub_10000C25C(v39, "localizedDescription");
      sub_1000844D4((uint64_t)v40);
      sub_100084A38();
      uint64_t v41 = sub_10008496C();
      sub_10008450C(v41);

      sub_10001DF40();
      uint64_t v26 = (uint64_t)v45;
      sub_10000AF5C( (void *)&_mh_execute_header,  (os_log_s *)v19,  (os_log_type_t)v5,  "Failed to acquire assertions: %s",  v45);
      sub_10000AF48(v47);
      sub_10000AD78(v47);
      sub_10000AD78((uint64_t)v45);
    }

    else
    {
    }

    sub_100084944();
    uint64_t v25 = v46;
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    sub_10008443C();
    id v44 = objc_allocWithZone(&OBJC_CLASS___NSError);
    sub_100084290(v26, (uint64_t)v19);
    sub_1000842C0();

    sub_1000846B4();
    goto LABEL_30;
  }

  __break(1u);
}

void sub_10007E5C0( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v64 = a8;
  uint64_t v65 = a4;
  id v66 = a2;
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v61 = *(void *)(v13 - 8);
  uint64_t v62 = v13;
  __chkstk_darwin(v13);
  int v63 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion) != 1
    || (id v15 = [(id)objc_opt_self(RBSProcessHandle) currentProcess],
        unsigned int v16 = [v15 isApplication],
        v15,
        !v16))
  {
    id v27 = v66;
    sub_100082D80((uint64_t)v66, a3, v65, a5, a6);
    if (v8)
    {
LABEL_26:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }

    goto LABEL_8;
  }

  id v17 = [(id)objc_opt_self(RBSTarget) currentProcess];
  uint64_t v18 = sub_100008DB0(&qword_100130BD0);
  uint64_t v19 = swift_allocObject(v18, 40LL, 7LL);
  *(_OWORD *)(v19 + 16) = xmmword_1000F5530;
  sub_10000A1A0(0LL, &qword_100132D58, &OBJC_CLASS___RBSDomainAttribute_ptr);
  id v20 = sub_10007FCE4(0xD000000000000010LL, 0x80000001000FAF30LL, 0xD000000000000017LL, 0x80000001000FAF50LL);
  *(void *)(v19 + 32) = v20;
  id v69 = (id)v19;
  specialized Array._endMutation()(v20);
  uint64_t v21 = (uint64_t)v69;
  id v22 = objc_allocWithZone(&OBJC_CLASS___RBSAssertion);
  id v23 = sub_100083C80(0xD000000000000010LL, 0x80000001000FAF10LL, v17, v21);
  id v69 = 0LL;
  unsigned int v24 = [v23 acquireWithError:&v69];
  id v25 = v69;
  if (v24)
  {
    id v26 = v69;
    id v27 = v66;
    sub_100082D80((uint64_t)v66, a3, v65, a5, a6);
    uint64_t v28 = v8;
    if (v8)
    {
      [v23 invalidate];
      goto LABEL_10;
    }

    [v23 invalidate];

LABEL_8:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }

  id v29 = v69;
  uint64_t v28 = (void *)_convertNSErrorToError(_:)(v25);

  swift_willThrow(v30);
  id v27 = v66;
LABEL_10:
  id v69 = v28;
  swift_errorRetain(v28);
  uint64_t v31 = sub_100008DB0(&qword_100130620);
  uint64_t v32 = sub_10000A1A0(0LL, &qword_1001332E0, &OBJC_CLASS___NSError_ptr);
  if (!swift_dynamicCast(&v68, &v69, v31, v32, 0LL))
  {

LABEL_25:
    swift_errorRelease(v69);
    goto LABEL_26;
  }

  id v60 = v23;
  id v33 = v68;
  id v34 = [v68 domain];
  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  uint64_t v37 = v36;

  uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  if (v35 == v38 && v37 == v39)
  {
    swift_bridgeObjectRelease_n(v37, 2LL);
  }

  else
  {
    char v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v37, v38, v39, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v41 & 1) == 0)
    {

      swift_errorRelease(v69);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
  }

  uint64_t v42 = swift_errorRelease(v28);
  if ((id)getLNLogCategoryMetadata(v42))
  {
    uint64_t v43 = v63;
    Logger.init(_:)();
    id v44 = v33;
    int v45 = (os_log_s *)Logger.logObject.getter(v44);
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v48 = swift_slowAlloc(32LL, -1LL);
      uint64_t v70 = v48;
      *(_DWORD *)uint64_t v47 = 136315138;
      uint64_t v59 = v47 + 4;
      id v49 = [v44 localizedDescription];
      uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
      unint64_t v52 = v51;

      uint64_t v67 = sub_10000DE60(v50, v52, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v59, v47 + 12);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Failed to acquire assertions: %s", v47, 0xCu);
      swift_arrayDestroy(v48, 1LL);
      swift_slowDealloc(v48, -1LL, -1LL);
      swift_slowDealloc(v47, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v61 + 8))(v63, v62);
    }

    else
    {

      (*(void (**)(char *, uint64_t))(v61 + 8))(v43, v62);
    }

    id v27 = v66;
    uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    uint64_t v55 = v54;
    id v56 = objc_allocWithZone(&OBJC_CLASS___NSError);
    id v57 = sub_100083AC4(v53, v55, 9006LL, 0LL);
    swift_willThrow(v57);

    goto LABEL_25;
  }

  __break(1u);
}

void sub_10007EBF0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  id v65 = a2;
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v62 = *(void *)(v12 - 8);
  uint64_t v63 = v12;
  __chkstk_darwin(v12);
  uint64_t v64 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion) != 1
    || (id v14 = [(id)objc_opt_self(RBSProcessHandle) currentProcess],
        unsigned int v15 = [v14 isApplication],
        v14,
        !v15))
  {
    id v28 = v65;
    sub_10008321C((uint64_t)v65, a3, a4, a5, a6);
    if (v6)
    {
      swift_bridgeObjectRelease();

      return;
    }

    goto LABEL_9;
  }

  id v16 = [(id)objc_opt_self(RBSTarget) currentProcess];
  uint64_t v17 = sub_100008DB0(&qword_100130BD0);
  uint64_t v18 = swift_allocObject(v17, 40LL, 7LL);
  *(_OWORD *)(v18 + 16) = xmmword_1000F5530;
  sub_10000A1A0(0LL, &qword_100132D58, &OBJC_CLASS___RBSDomainAttribute_ptr);
  id v19 = sub_10007FCE4(0xD000000000000010LL, 0x80000001000FAF30LL, 0xD000000000000017LL, 0x80000001000FAF50LL);
  *(void *)(v18 + 32) = v19;
  id v68 = (id)v18;
  specialized Array._endMutation()(v19);
  uint64_t v20 = (uint64_t)v68;
  id v21 = objc_allocWithZone(&OBJC_CLASS___RBSAssertion);
  id v22 = sub_100083C80(0xD000000000000010LL, 0x80000001000FAF10LL, v16, v20);
  id v68 = 0LL;
  unsigned int v23 = [v22 acquireWithError:&v68];
  id v24 = v68;
  if (v23)
  {
    id v25 = v68;
    id v26 = v65;
    sub_10008321C((uint64_t)v65, a3, a4, a5, a6);
    id v27 = v6;
    if (v6)
    {
      [v22 invalidate];
      goto LABEL_11;
    }

    [v22 invalidate];

LABEL_9:
    swift_bridgeObjectRelease();
    return;
  }

  id v29 = v68;
  id v27 = (void *)_convertNSErrorToError(_:)(v24);

  swift_willThrow(v30);
LABEL_11:
  id v68 = v27;
  swift_errorRetain(v27);
  uint64_t v31 = sub_100008DB0(&qword_100130620);
  uint64_t v32 = sub_10000A1A0(0LL, &qword_1001332E0, &OBJC_CLASS___NSError_ptr);
  if (!swift_dynamicCast(&v67, &v68, v31, v32, 0LL))
  {

    goto LABEL_26;
  }

  id v61 = v22;
  id v33 = v67;
  id v34 = [v67 domain];
  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  uint64_t v37 = v36;

  uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  if (v35 == v38 && v37 == v39)
  {
    swift_bridgeObjectRelease_n(v37, 2LL);
  }

  else
  {
    char v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v37, v38, v39, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v41 & 1) == 0)
    {

LABEL_26:
      swift_errorRelease(v68);
      swift_bridgeObjectRelease();

      return;
    }
  }

  uint64_t v42 = swift_errorRelease(v27);
  if ((id)getLNLogCategoryMetadata(v42))
  {
    uint64_t v43 = v64;
    Logger.init(_:)();
    id v44 = v33;
    int v45 = (os_log_s *)Logger.logObject.getter(v44);
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v60 = swift_slowAlloc(32LL, -1LL);
      uint64_t v69 = v60;
      *(_DWORD *)uint64_t v47 = 136315138;
      uint64_t v59 = v47 + 4;
      id v48 = [v44 localizedDescription];
      uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
      unint64_t v51 = v50;

      uint64_t v66 = sub_10000DE60(v49, v51, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v59, v47 + 12);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Failed to acquire assertions: %s", v47, 0xCu);
      uint64_t v52 = v60;
      swift_arrayDestroy(v60, 1LL);
      swift_slowDealloc(v52, -1LL, -1LL);
      swift_slowDealloc(v47, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v62 + 8))(v64, v63);
    }

    else
    {

      (*(void (**)(char *, uint64_t))(v62 + 8))(v43, v63);
    }

    id v53 = v61;
    uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    uint64_t v56 = v55;
    id v57 = objc_allocWithZone(&OBJC_CLASS___NSError);
    id v58 = sub_100083AC4(v54, v56, 9006LL, 0LL);
    swift_willThrow(v58);

    goto LABEL_26;
  }

  __break(1u);
}

id sub_10007F1D8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v77 = a4;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion) != 1
    || (id v11 = [(id)objc_opt_self(RBSProcessHandle) currentProcess],
        unsigned int v12 = [v11 isApplication],
        v11,
        !v12))
  {
    swift_retain();
    sub_10001CA18();
    if (v4)
    {
      swift_errorRelease(v4);
      swift_release();
    }

    else
    {
      uint64_t v33 = v29;
      swift_release();
      if (v33)
      {
        uint64_t v7 = sub_100083EA8(v33);

        swift_bridgeObjectRelease();
        goto LABEL_13;
      }
    }

    uint64_t v7 = type metadata accessor for MetadataError(0LL);
    sub_100008C18( (unint64_t *)&unk_100132D70,  (uint64_t (*)(uint64_t))&type metadata accessor for MetadataError,  (uint64_t)&protocol conformance descriptor for MetadataError);
    swift_allocError(v7, v30, 0LL, 0LL);
    uint64_t v32 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v7 - 8) + 104LL))( v31,  enum case for MetadataError.cacheLookupFailed(_:),  v7);
    swift_willThrow(v32);
LABEL_10:
    swift_bridgeObjectRelease();

    return (id)v7;
  }

  id v13 = [(id)objc_opt_self(RBSTarget) currentProcess];
  uint64_t v14 = sub_100008DB0(&qword_100130BD0);
  uint64_t v15 = swift_allocObject(v14, 40LL, 7LL);
  *(_OWORD *)(v15 + 16) = xmmword_1000F5530;
  sub_10000A1A0(0LL, &qword_100132D58, &OBJC_CLASS___RBSDomainAttribute_ptr);
  id v16 = sub_10007FCE4(0xD000000000000010LL, 0x80000001000FAF30LL, 0xD000000000000017LL, 0x80000001000FAF50LL);
  *(void *)(v15 + 32) = v16;
  id v80 = (id)v15;
  specialized Array._endMutation()(v16);
  uint64_t v17 = (uint64_t)v80;
  id v18 = objc_allocWithZone(&OBJC_CLASS___RBSAssertion);
  id v19 = sub_100083C80(0xD000000000000010LL, 0x80000001000FAF10LL, v13, v17);
  id v80 = 0LL;
  unsigned int v20 = [v19 acquireWithError:&v80];
  id v21 = v80;
  if (v20)
  {
    id v22 = v80;
    swift_retain();
    sub_10001CA18();
    if (v4)
    {
      swift_errorRelease(v4);
      swift_release();
LABEL_6:
      uint64_t v24 = type metadata accessor for MetadataError(0LL);
      sub_100008C18( (unint64_t *)&unk_100132D70,  (uint64_t (*)(uint64_t))&type metadata accessor for MetadataError,  (uint64_t)&protocol conformance descriptor for MetadataError);
      id v26 = (void *)swift_allocError(v24, v25, 0LL, 0LL);
      uint64_t v28 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v24 - 8) + 104LL))( v27,  enum case for MetadataError.cacheLookupFailed(_:),  v24);
      swift_willThrow(v28);
      [v19 invalidate];
      goto LABEL_16;
    }

    uint64_t v65 = v23;
    swift_release();
    if (!v65) {
      goto LABEL_6;
    }
    uint64_t v7 = sub_100083EA8(v65);
    swift_bridgeObjectRelease();
    [v19 invalidate];

LABEL_13:
    swift_bridgeObjectRelease();
    return (id)v7;
  }

  id v35 = v80;
  id v26 = (void *)_convertNSErrorToError(_:)(v21);

  swift_willThrow(v36);
LABEL_16:
  id v80 = v26;
  swift_errorRetain(v26);
  uint64_t v37 = sub_100008DB0(&qword_100130620);
  uint64_t v38 = sub_10000A1A0(0LL, &qword_1001332E0, &OBJC_CLASS___NSError_ptr);
  if (!swift_dynamicCast(&v79, &v80, v37, v38, 0LL))
  {

    swift_errorRelease(v80);
    goto LABEL_10;
  }

  id v76 = v19;
  id v39 = v79;
  id v40 = [v79 domain];
  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
  uint64_t v43 = v42;

  uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  if (v41 == v44 && v43 == v45)
  {
    swift_bridgeObjectRelease_n(v43, 2LL);
  }

  else
  {
    char v47 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v43, v44, v45, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v47 & 1) == 0)
    {

      swift_errorRelease(v80);
      goto LABEL_10;
    }
  }

  uint64_t v48 = swift_errorRelease(v26);
  id result = (id)getLNLogCategoryMetadata(v48);
  if (result)
  {
    Logger.init(_:)();
    id v49 = v39;
    unint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
    os_log_type_t v51 = static os_log_type_t.error.getter();
    int v52 = v51;
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v53 = swift_slowAlloc(12LL, -1LL);
      int v74 = v52;
      uint64_t v54 = (uint8_t *)v53;
      uint64_t v75 = swift_slowAlloc(32LL, -1LL);
      uint64_t v81 = v75;
      __int128 v73 = v54;
      *(_DWORD *)uint64_t v54 = 136315138;
      id v71 = v54 + 4;
      id v55 = [v49 localizedDescription];
      uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
      os_log_t v72 = v50;
      id v57 = v49;
      uint64_t v58 = v56;
      unint64_t v60 = v59;

      uint64_t v61 = v58;
      id v49 = v57;
      uint64_t v78 = sub_10000DE60(v61, v60, &v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v71, v54 + 12);

      swift_bridgeObjectRelease();
      os_log_t v63 = v72;
      uint64_t v62 = v73;
      _os_log_impl((void *)&_mh_execute_header, v72, (os_log_type_t)v74, "Failed to acquire assertions: %s", v73, 0xCu);
      uint64_t v64 = v75;
      swift_arrayDestroy(v75, 1LL);
      swift_slowDealloc(v64, -1LL, -1LL);
      swift_slowDealloc(v62, -1LL, -1LL);
    }

    else
    {
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    id v66 = v76;
    uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    uint64_t v7 = v68;
    id v69 = objc_allocWithZone(&OBJC_CLASS___NSError);
    id v70 = sub_100083AC4(v67, v7, 9006LL, 0LL);
    swift_willThrow(v70);

    swift_errorRelease(v80);
    goto LABEL_10;
  }

  __break(1u);
  return result;
}

void sub_10007F920()
{
  uint64_t v4 = v3;
  sub_1000842CC(__stack_chk_guard);
  sub_100084738();
  __chkstk_darwin(v5);
  sub_10000AEB0();
  sub_100084414();
  if (!v25
    || (uint64_t v6 = (void *)objc_opt_self(&OBJC_CLASS___RBSProcessHandle),
        [sub_100084924(v6) isApplication],
        sub_1000848A4(),
        !v2))
  {
    sub_10008484C();
    if (v0)
    {
LABEL_27:
      sub_10001BC70();

      goto LABEL_28;
    }

    goto LABEL_9;
  }

  uint64_t v7 = (void *)objc_opt_self(&OBJC_CLASS___RBSTarget);
  sub_100084924(v7);
  uint64_t v8 = sub_100008DB0(&qword_100130BD0);
  uint64_t v9 = sub_100011924(v8);
  *(_OWORD *)(v9 + 16) = xmmword_1000F5530;
  sub_100011AB4(v9, &qword_100132D58, &OBJC_CLASS___RBSDomainAttribute_ptr);
  sub_1000842A0();
  sub_100059698();
  id v12 = sub_10008427C(v10, v11, (uint64_t)"FinishTaskInterruptable");
  *(void *)(v9 + 32) = v12;
  sub_10008440C((uint64_t)v12);
  id v13 = objc_allocWithZone(&OBJC_CLASS___RBSAssertion);
  id v14 = sub_1000842F0((uint64_t)"AppIntents Query");
  uint64_t v15 = 0LL;
  if (sub_100084404(v14, "acquireWithError:"))
  {
    id v16 = 0LL;
    sub_10008484C();
    sub_1000846C4();
    if (v0)
    {
      sub_100084614(v17);
      goto LABEL_11;
    }

    sub_100084614(v17);

LABEL_9:
    sub_10001BC70();
LABEL_28:
    sub_1000843B8();
    sub_10001DEE8();
    return;
  }

  id v18 = 0LL;
  sub_1000843E8();
  sub_10008492C();
  sub_1000592C0();
LABEL_11:
  sub_100084328();
  uint64_t v19 = sub_100008DB0(&qword_100130620);
  uint64_t v20 = sub_100011AB4(v19, &qword_1001332E0, &OBJC_CLASS___NSError_ptr);
  uint64_t v21 = sub_100084384(v20);
  if (!(_DWORD)v21)
  {

    goto LABEL_26;
  }

  uint64_t v38 = v14;
  id v22 = sub_100011930(v21, "domain");
  sub_1000844D4((uint64_t)v22);
  sub_1000845F4();
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  BOOL v25 = v14 == (id)v23 && v0 == (void *)v24;
  if (v25)
  {
    sub_10001191C((uint64_t)v0);
  }

  else
  {
    LOBYTE(v19) = v24;
    char v26 = sub_10001BB00((uint64_t)v14, (uint64_t)v0, v23, v24);
    sub_10001DEC4();
    sub_10001BEC0();
    if ((v26 & 1) == 0)
    {

      sub_100084A58();
LABEL_26:
      sub_1000843F0();
      goto LABEL_27;
    }
  }

  uint64_t v27 = sub_100059344();
  if ((id)getLNLogCategoryMetadata(v27))
  {
    sub_100084694();
    id v28 = v39;
    sub_100084658();
    os_log_type_t v29 = sub_10000AF38();
    if (sub_10000AEC8(v29))
    {
      sub_10000AE10(12LL);
      uint64_t v30 = sub_10000AE10(32LL);
      sub_100084898(v30);
      sub_10008490C(4.8149e-34);
      id v32 = sub_10000C25C(v31, "localizedDescription");
      sub_100084B4C((uint64_t)v32);
      sub_100084830();
      uint64_t v33 = sub_1000847D4();
      sub_1000845BC(v33);

      sub_10001DED8();
      uint64_t v15 = (uint64_t)v36;
      sub_10000AF5C((void *)&_mh_execute_header, v35, (os_log_type_t)v19, "Failed to acquire assertions: %s", v36);
      sub_10000AF48(v37);
      sub_10000AD78(v37);
      sub_10000AD78((uint64_t)v36);
    }

    else
    {
    }

    sub_100084934();
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    sub_100084AA0();
    id v34 = objc_allocWithZone(&OBJC_CLASS___NSError);
    sub_100084290(v15, v1);
    sub_1000842C0();

    goto LABEL_26;
  }

  __break(1u);
}

id sub_10007FCE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  id v9 = [(id)swift_getObjCClassFromMetadata(v4) attributeWithDomain:v7 name:v8];

  return v9;
}

uint64_t sub_10007FD74@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100035AB0(v13);
  sub_10000AC58(v13);
  uint64_t result = swift_release();
  if (!v1)
  {
    uint64_t KeyPath = swift_getKeyPath(&unk_1000F6D10);
    uint64_t v6 = swift_getKeyPath(&unk_1000F6D30);
    uint64_t v7 = swift_getKeyPath(&unk_1000F6D58);
    v13[0] = (uint64_t)&_swiftEmptyDictionarySingleton;
    uint64_t v8 = *(void *)(v3 + 16);
    if (v8)
    {
      uint64_t v9 = *(void *)(type metadata accessor for LNActionRecord(0LL) - 8);
      uint64_t v10 = v3 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
      uint64_t v11 = *(void *)(v9 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_1000782FC(v13, v10, v7, KeyPath, v6);
        v10 += v11;
        --v8;
      }

      while (v8);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease(v3);
      id v12 = (void *)v13[0];
    }

    else
    {
      swift_release();
      swift_release();
      id v12 = &_swiftEmptyDictionarySingleton;
    }

    swift_bridgeObjectRelease(v3);
    uint64_t result = swift_release();
    *a1 = v12;
  }

  return result;
}

uint64_t sub_10007FF1C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  unint64_t v12 = *(void *)(a1 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_connection);
  swift_retain();
  sub_10003642C(a2, a3, a4, a5, v12);
  uint64_t v14 = v13;
  uint64_t result = swift_release();
  if (!v6)
  {
    uint64_t KeyPath = swift_getKeyPath(&unk_1000F6D10);
    uint64_t v17 = swift_getKeyPath(&unk_1000F6D30);
    uint64_t v18 = swift_getKeyPath(&unk_1000F6D58);
    uint64_t v24 = &_swiftEmptyDictionarySingleton;
    uint64_t v19 = *(void *)(v14 + 16);
    if (v19)
    {
      uint64_t v20 = *(void *)(type metadata accessor for LNActionRecord(0LL) - 8);
      uint64_t v21 = v14 + ((*(unsigned __int8 *)(v20 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
      uint64_t v22 = *(void *)(v20 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_1000782FC((uint64_t *)&v24, v21, v18, KeyPath, v17);
        v21 += v22;
        --v19;
      }

      while (v19);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease(v14);
      uint64_t v23 = v24;
    }

    else
    {
      swift_release();
      swift_release();
      uint64_t v23 = &_swiftEmptyDictionarySingleton;
    }

    swift_bridgeObjectRelease(v14);
    uint64_t result = swift_release();
    *a6 = v23;
  }

  return result;
}

uint64_t sub_1000801FC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v69 = a1;
  swift_retain();
  sub_1000351C8((uint64_t)v66);
  id v57 = a3;
  if (a2)
  {
    uint64_t v7 = v67;
    uint64_t v8 = v68;
    sub_100008D74(v66, (uint64_t)v67);
    if (qword_100130138 != -1) {
LABEL_29:
    }
      swift_once(&qword_100130138, sub_1000350E4);
    *(void *)&__int128 v63 = v69;
    *((void *)&v63 + 1) = a2;
    == infix<A>(_:_:)();
    uint64_t v10 = v9;
    uint64_t v12 = v11;
    uint64_t v64 = v7;
    uint64_t v65 = v8;
    sub_10001AFA8(&v63);
    QueryType.filter(_:)();
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v10);
    sub_10000AC58(v66);
    sub_100009EEC(&v63, (uint64_t)v66);
  }

  uint64_t v13 = v4;
  uint64_t v14 = sub_100035AB0(v66);
  uint64_t v8 = v13;
  sub_10000AC58(v66);
  uint64_t result = swift_release();
  if (!v13)
  {
    uint64_t KeyPath = swift_getKeyPath(&unk_1000F6D10);
    uint64_t v17 = swift_getKeyPath(&unk_1000F6D30);
    uint64_t v18 = swift_getKeyPath(&unk_1000F6D58);
    uint64_t v7 = _swiftEmptyDictionarySingleton;
    v66[0] = (uint64_t)_swiftEmptyDictionarySingleton;
    uint64_t v19 = v14;
    uint64_t v20 = *(void *)(v14 + 16);
    if (v20)
    {
      uint64_t v60 = a2;
      uint64_t v21 = *(void *)(type metadata accessor for LNActionRecord(0LL) - 8);
      uint64_t v22 = v14 + ((*(unsigned __int8 *)(v21 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
      uint64_t v23 = *(void *)(v21 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_1000782FC(v66, v22, v18, KeyPath, v17);
        uint64_t v8 = 0LL;
        v22 += v23;
        --v20;
      }

      while (v20);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease(v19);
      uint64_t v24 = (void *)v66[0];
      a2 = v60;
    }

    else
    {
      swift_release();
      swift_release();
      uint64_t v24 = _swiftEmptyDictionarySingleton;
    }

    swift_bridgeObjectRelease(v19);
    swift_release();
    swift_retain();
    uint64_t v25 = sub_100068628(v69, a2);
    uint64_t v56 = (uint64_t)v24;
    swift_release();
    v66[0] = (uint64_t)_swiftEmptyDictionarySingleton;
    uint64_t v26 = *(void *)(v25 + 16);
    uint64_t v55 = v25;
    if (v26)
    {
      uint64_t v27 = (uint64_t *)(v25 + 72);
      uint64_t v7 = _swiftEmptyDictionarySingleton;
      do
      {
        uint64_t v28 = *(v27 - 5);
        a2 = *(v27 - 4);
        uint64_t v4 = *(v27 - 2);
        uint64_t v29 = *v27;
        uint64_t v61 = *(v27 - 3);
        uint64_t v62 = *(v27 - 1);
        swift_bridgeObjectRetain_n(a2, 2LL);
        swift_bridgeObjectRetain();
        uint64_t v69 = v29;
        swift_bridgeObjectRetain();
        unint64_t v31 = sub_100015F98(v28, a2);
        uint64_t v32 = v7[2];
        BOOL v33 = (v30 & 1) == 0;
        uint64_t v34 = v32 + v33;
        if (__OFADD__(v32, v33))
        {
          __break(1u);
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }

        char v35 = v30;
        if (v7[3] < v34)
        {
          sub_10001772C(v34, 1LL);
          uint64_t v7 = (void *)v66[0];
          uint64_t v36 = sub_100015F98(v28, a2);
          if ((v35 & 1) != (v37 & 1))
          {
            uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
            __break(1u);
            return result;
          }

          unint64_t v31 = v36;
        }

        if ((v35 & 1) != 0)
        {
          uint64_t v58 = v4;
          swift_bridgeObjectRelease(a2);
          uint64_t v38 = v7[7];
          uint64_t v39 = *(void *)(v38 + 8 * v31);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v39);
          *(void *)(v38 + 8 * v31) = v39;
          uint64_t v59 = v26;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100014964();
            uint64_t v39 = v52;
            *(void *)(v38 + 8 * v31) = v52;
          }

          unint64_t v41 = *(void *)(v39 + 16);
          unint64_t v42 = v41 + 1;
          if (v41 >= *(void *)(v39 + 24) >> 1)
          {
            sub_100014964();
            unint64_t v42 = v41 + 1;
            uint64_t v39 = v53;
            *(void *)(v38 + 8 * v31) = v53;
          }

          *(void *)(v39 + 16) = v42;
          uint64_t v43 = (void *)(v39 + 48 * v41);
          v43[4] = v28;
          v43[5] = a2;
          uint64_t v26 = v59;
          v43[6] = v61;
          v43[7] = v58;
          uint64_t v44 = v69;
          v43[8] = v62;
          v43[9] = v44;
        }

        else
        {
          uint64_t v45 = sub_100008DB0(&qword_100130FE0);
          uint64_t v46 = swift_allocObject(v45, 80LL, 7LL);
          *(_OWORD *)(v46 + 16) = xmmword_1000F5520;
          *(void *)(v46 + 32) = v28;
          *(void *)(v46 + 40) = a2;
          *(void *)(v46 + 48) = v61;
          *(void *)(v46 + 56) = v4;
          uint64_t v47 = v69;
          *(void *)(v46 + 64) = v62;
          *(void *)(v46 + 72) = v47;
          v7[(v31 >> 6) + 8] |= 1LL << v31;
          uint64_t v48 = (uint64_t *)(v7[6] + 16 * v31);
          *uint64_t v48 = v28;
          v48[1] = a2;
          *(void *)(v7[7] + 8 * v31) = v46;
          uint64_t v49 = v7[2];
          BOOL v50 = __OFADD__(v49, 1LL);
          uint64_t v51 = v49 + 1;
          if (v50) {
            goto LABEL_28;
          }
          v7[2] = v51;
        }

        v27 += 6;
        --v26;
      }

      while (v26);
    }

    swift_bridgeObjectRelease(v55);
    swift_retain();
    uint64_t v54 = sub_100077924(_swiftEmptyDictionarySingleton, v56, (uint64_t)v7);
    swift_release();
    uint64_t result = swift_bridgeObjectRelease(v56);
    uint64_t *v57 = v54;
  }

  return result;
}

void sub_100080874(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v29 = a5;
  uint64_t v30 = type metadata accessor for LNActionRecord(0LL);
  __chkstk_darwin(v30);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100008DB0((uint64_t *)&unk_100132D98);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v28 - v16;
  swift_retain();
  sub_1000358E8(a1, a2, a3, a4);
  uint64_t v19 = v18;
  swift_release();
  if (!v5)
  {
    uint64_t v20 = v29;
    sub_100038B20();
    swift_bridgeObjectRelease(v19);
    sub_100026CB8((uint64_t)v17, (uint64_t)v14, (uint64_t *)&unk_100132D98);
    uint64_t v21 = v30;
    if (sub_100009E6C((uint64_t)v14, 1LL, v30) == 1)
    {
      sub_100026E14((uint64_t)v14, (uint64_t *)&unk_100132D98);
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
      uint64_t v24 = v23;
      id v25 = objc_allocWithZone(&OBJC_CLASS___NSError);
      id v26 = sub_100083AC4(v22, v24, 9004LL, 0LL);
      swift_willThrow(v26);
      sub_100026E14((uint64_t)v17, (uint64_t *)&unk_100132D98);
    }

    else
    {
      sub_100026E14((uint64_t)v17, (uint64_t *)&unk_100132D98);
      sub_100084248((uint64_t)v14, (uint64_t)v11, type metadata accessor for LNActionRecord);
      id v27 = *(id *)&v11[*(int *)(v21 + 24)];
      sub_100058D54((uint64_t)v11, type metadata accessor for LNActionRecord);
      *uint64_t v20 = v27;
    }
  }

void sub_100080B84(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  unint64_t v31 = a5;
  uint64_t v10 = sub_100008DB0((uint64_t *)&unk_100132D98);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v28 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v28 - v17;
  swift_retain();
  sub_1000358E8(a1, a2, a3, a4);
  uint64_t v32 = v5;
  if (v5)
  {
    swift_release();
    return;
  }

  uint64_t v29 = v12;
  uint64_t v30 = v18;
  sub_100038B20();
  swift_bridgeObjectRelease();
  uint64_t v19 = type metadata accessor for LNActionRecord(0LL);
  if (sub_100009E6C((uint64_t)v15, 1LL, v19) == 1)
  {
    uint64_t v22 = (uint64_t)v30;
    uint64_t v23 = v32;
    sub_100036090(a1, a2, a3, a4, v20, v21, (uint64_t)v30);
    swift_release();
    sub_100026E14((uint64_t)v15, (uint64_t *)&unk_100132D98);
    if (v23) {
      return;
    }
  }

  else
  {
    swift_release();
    uint64_t v22 = (uint64_t)v30;
    sub_100084248((uint64_t)v15, (uint64_t)v30, type metadata accessor for LNActionRecord);
    sub_100009E60(v22, 0LL, 1LL, v19);
  }

  uint64_t v24 = (uint64_t)v29;
  sub_100026C8C(v22, (uint64_t)v29, (uint64_t *)&unk_100132D98);
  int v25 = sub_100009E6C(v24, 1LL, v19);
  id v26 = v31;
  if (v25 == 1)
  {
    sub_100026E14(v24, (uint64_t *)&unk_100132D98);
    id v27 = 0LL;
  }

  else
  {
    id v27 = *(id *)(v24 + *(int *)(v19 + 24));
    sub_100058D54(v24, type metadata accessor for LNActionRecord);
  }

  *id v26 = v27;
}

uint64_t sub_100080EDC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v32 = a4;
  swift_retain();
  sub_1000351C8((uint64_t)v29);
  if (a2)
  {
    uint64_t v8 = v30;
    uint64_t v9 = v31;
    sub_100008D74(v29, v30);
    if (qword_100130138 != -1) {
      swift_once(&qword_100130138, sub_1000350E4);
    }
    *(void *)&__int128 v26 = a1;
    *((void *)&v26 + 1) = a2;
    == infix<A>(_:_:)();
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    uint64_t v27 = v8;
    uint64_t v28 = v9;
    sub_10001AFA8(&v26);
    QueryType.filter(_:)();
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v11);
    sub_10000AC58(v29);
    sub_100009EEC(&v26, (uint64_t)v29);
  }

  uint64_t v14 = sub_100035AB0(v29);
  sub_10000AC58(v29);
  uint64_t result = swift_release();
  if (!v4)
  {
    swift_bridgeObjectRetain();
    sub_100077700(v14, a3);
    uint64_t v17 = v16;
    uint64_t KeyPath = swift_getKeyPath(&unk_1000F6D10);
    uint64_t v19 = swift_getKeyPath(&unk_1000F6D30);
    uint64_t v20 = swift_getKeyPath(&unk_1000F6D58);
    v29[0] = (uint64_t)_swiftEmptyDictionarySingleton;
    uint64_t v21 = *(void *)(v17 + 16);
    if (v21)
    {
      uint64_t v22 = *(void *)(type metadata accessor for LNActionRecord(0LL) - 8);
      uint64_t v23 = v17 + ((*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
      uint64_t v24 = *(void *)(v22 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_1000782FC(v29, v23, v20, KeyPath, v19);
        v23 += v24;
        --v21;
      }

      while (v21);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease(v17);
      int v25 = (void *)v29[0];
    }

    else
    {
      swift_release();
      swift_release();
      int v25 = _swiftEmptyDictionarySingleton;
    }

    swift_bridgeObjectRelease(v17);
    uint64_t result = swift_release();
    *uint64_t v32 = v25;
  }

  return result;
}

uint64_t sub_100081170(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a4
  uint64_t v8 = sub_10000A1A0(0LL, &qword_100130BA8, &OBJC_CLASS___LNActionParameterMetadata_ptr);
  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

  swift_bridgeObjectRetain();
  LOBYTE(v7) = sub_100078050(v9, a1, a2, a3);
  swift_bridgeObjectRelease(v9);
  return v7 & 1;
}

uint64_t sub_100081394@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v5 = sub_100035DA4(a1);
  uint64_t result = swift_release();
  if (!v2)
  {
    uint64_t KeyPath = swift_getKeyPath(&unk_1000F6D10);
    uint64_t v8 = swift_getKeyPath(&unk_1000F6D30);
    uint64_t v9 = swift_getKeyPath(&unk_1000F6D58);
    uint64_t v15 = _swiftEmptyDictionarySingleton;
    uint64_t v10 = v5[2];
    if (v10)
    {
      uint64_t v11 = *(void *)(type metadata accessor for LNActionRecord(0LL) - 8);
      uint64_t v12 = (uint64_t)v5 + ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
      uint64_t v13 = *(void *)(v11 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_1000782FC((uint64_t *)&v15, v12, v9, KeyPath, v8);
        v12 += v13;
        --v10;
      }

      while (v10);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease(v5);
      uint64_t v14 = v15;
    }

    else
    {
      swift_release();
      swift_release();
      uint64_t v14 = _swiftEmptyDictionarySingleton;
    }

    swift_bridgeObjectRelease(v5);
    uint64_t result = swift_release();
    *a2 = v14;
  }

  return result;
}

uint64_t sub_1000816B8@<X0>(void *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for LNBundleRecord(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (void *)((char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = swift_retain();
  uint64_t v8 = sub_1000BCE40(v7);
  uint64_t result = swift_release();
  if (!v1)
  {
    uint64_t v10 = *(void *)(v8 + 16);
    if (v10)
    {
      v24[1] = 0LL;
      int v25 = a1;
      uint64_t v27 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v10);
      uint64_t v11 = *(unsigned __int8 *)(v4 + 80);
      v24[0] = v8;
      uint64_t v12 = v8 + ((v11 + 32) & ~v11);
      uint64_t v26 = *(void *)(v4 + 72);
      do
      {
        sub_100084214(v12, (uint64_t)v6, type metadata accessor for LNBundleRecord);
        uint64_t v14 = *v6;
        uint64_t v13 = v6[1];
        uint64_t v15 = (uint64_t *)((char *)v6 + *(int *)(v3 + 24));
        uint64_t v17 = *v15;
        unint64_t v16 = v15[1];
        id v18 = objc_allocWithZone(&OBJC_CLASS___LNRegisteredBundleMetadata);
        swift_bridgeObjectRetain();
        sub_10000A280(v17, v16);
        id v19 = sub_100083D24(v14, v13, v17, v16);
        sub_100058D54((uint64_t)v6, type metadata accessor for LNBundleRecord);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v20);
        uint64_t v21 = v27[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v21);
        uint64_t v22 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v19);
        specialized ContiguousArray._endMutation()(v22);
        v12 += v26;
        --v10;
      }

      while (v10);
      uint64_t v23 = v27;
      uint64_t result = swift_bridgeObjectRelease(v24[0]);
      a1 = v25;
    }

    else
    {
      uint64_t result = swift_bridgeObjectRelease(v8);
      uint64_t v23 = _swiftEmptyArrayStorage;
    }

    *a1 = v23;
  }

  return result;
}

uint64_t sub_10008193C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = qword_100130470;
  swift_retain();
  if (v4 != -1) {
    swift_once(&qword_100130470, sub_1000C5E44);
  }
  memcpy(__dst, &unk_1001342F0, 0xA8uLL);
  v22[3] = (uint64_t)&type metadata for Table;
  v22[4] = (uint64_t)&protocol witness table for Table;
  v22[0] = swift_allocObject(&unk_100125580, 184LL, 7LL);
  memcpy((void *)(v22[0] + 16), &unk_1001342F0, 0xA8uLL);
  sub_10001D9AC(__dst);
  Connection.prepareRowIterator(_:)(v22);
  uint64_t v6 = v5;
  uint64_t v7 = sub_10000AC58(v22);
  if (v2) {
    return swift_release();
  }
  __chkstk_darwin(v7);
  swift_retain();
  RowIterator.compactMap<A>(_:)();
  uint64_t v10 = v8;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease(v6);
  swift_release();
  uint64_t KeyPath = swift_getKeyPath(&unk_1000F6CA8);
  uint64_t v12 = swift_getKeyPath(&unk_1000F6CC8);
  uint64_t v13 = swift_getKeyPath(&unk_1000F6CF0);
  v22[0] = (uint64_t)_swiftEmptyDictionarySingleton;
  uint64_t v14 = *(void *)(v10 + 16);
  if (v14)
  {
    uint64_t v24 = a1;
    swift_bridgeObjectRetain();
    uint64_t v21 = v10;
    uint64_t v15 = (void **)(v10 + 48);
    do
    {
      uint64_t v17 = (uint64_t)*(v15 - 1);
      unint64_t v16 = *v15;
      uint64_t v18 = (uint64_t)*(v15 - 2);
      swift_bridgeObjectRetain();
      id v19 = v16;
      sub_100078490( v22,  v18,  v17,  (uint64_t)v19,  v13,  KeyPath,  v12,  (unint64_t *)&qword_100132460,  &OBJC_CLASS___LNQueryMetadata_ptr,  (void (*)(id, uint64_t, uint64_t, uint64_t))sub_100009888,  (void (*)(uint64_t, uint64_t, uint64_t))sub_10003E3F4);

      swift_bridgeObjectRelease(v17);
      v15 += 3;
      --v14;
    }

    while (v14);
    swift_release();
    swift_release();
    uint64_t v10 = v21;
    swift_bridgeObjectRelease(v21);
    uint64_t v20 = (void *)v22[0];
    a1 = v24;
  }

  else
  {
    swift_release();
    swift_release();
    uint64_t v20 = _swiftEmptyDictionarySingleton;
  }

  swift_bridgeObjectRelease(v10);
  uint64_t result = swift_release();
  *a1 = v20;
  return result;
}

uint64_t sub_100081DBC@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = qword_100130450;
  swift_retain();
  if (v4 != -1) {
    swift_once(&qword_100130450, sub_1000C539C);
  }
  memcpy(__dst, &unk_100134200, 0xA8uLL);
  v22[3] = (uint64_t)&type metadata for Table;
  v22[4] = (uint64_t)&protocol witness table for Table;
  v22[0] = swift_allocObject(&unk_100125580, 184LL, 7LL);
  memcpy((void *)(v22[0] + 16), &unk_100134200, 0xA8uLL);
  sub_10001D9AC(__dst);
  Connection.prepareRowIterator(_:)(v22);
  uint64_t v6 = v5;
  uint64_t v7 = sub_10000AC58(v22);
  if (v2) {
    return swift_release();
  }
  __chkstk_darwin(v7);
  swift_retain();
  RowIterator.compactMap<A>(_:)();
  uint64_t v10 = v8;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease(v6);
  swift_release();
  uint64_t KeyPath = swift_getKeyPath(&unk_1000F6C40);
  uint64_t v12 = swift_getKeyPath(&unk_1000F6C60);
  uint64_t v13 = swift_getKeyPath(&unk_1000F6C88);
  v22[0] = (uint64_t)_swiftEmptyDictionarySingleton;
  uint64_t v14 = *(void *)(v10 + 16);
  if (v14)
  {
    uint64_t v24 = a1;
    swift_bridgeObjectRetain();
    uint64_t v21 = v10;
    uint64_t v15 = (void **)(v10 + 48);
    do
    {
      uint64_t v17 = (uint64_t)*(v15 - 1);
      unint64_t v16 = *v15;
      uint64_t v18 = (uint64_t)*(v15 - 2);
      swift_bridgeObjectRetain();
      id v19 = v16;
      sub_100078490( v22,  v18,  v17,  (uint64_t)v19,  v13,  KeyPath,  v12,  (unint64_t *)&qword_100132450,  &OBJC_CLASS___LNEnumMetadata_ptr,  (void (*)(id, uint64_t, uint64_t, uint64_t))sub_100009928,  (void (*)(uint64_t, uint64_t, uint64_t))sub_10003E400);

      swift_bridgeObjectRelease(v17);
      v15 += 3;
      --v14;
    }

    while (v14);
    swift_release();
    swift_release();
    uint64_t v10 = v21;
    swift_bridgeObjectRelease(v21);
    uint64_t v20 = (void *)v22[0];
    a1 = v24;
  }

  else
  {
    swift_release();
    swift_release();
    uint64_t v20 = _swiftEmptyDictionarySingleton;
  }

  swift_bridgeObjectRelease(v10);
  uint64_t result = swift_release();
  *a1 = v20;
  return result;
}

id sub_100082138( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), unint64_t *a6, void *a7)
{
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v13 = v12;
  id v14 = a1;
  a5(v11, v13);
  sub_10001BEC0();

  sub_10000A1A0(0LL, a6, a7);
  Array._bridgeToObjectiveC()();
  sub_100084824();
  return 0LL;
}

uint64_t sub_100082210@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_connection);
  uint64_t v6 = qword_100130430;
  swift_retain();
  if (v6 != -1) {
    swift_once(&qword_100130430, sub_1000C4664);
  }
  memcpy(__dst, &unk_100134110, 0xA8uLL);
  v20[3] = (uint64_t)&type metadata for Table;
  v20[4] = (uint64_t)&protocol witness table for Table;
  v20[0] = swift_allocObject(&unk_100125580, 184LL, 7LL);
  memcpy((void *)(v20[0] + 16), &unk_100134110, 0xA8uLL);
  sub_10001D9AC(__dst);
  uint64_t v7 = sub_1000C47A0(v20, v5);
  sub_10000AC58(v20);
  uint64_t result = swift_release();
  if (!v3)
  {
    uint64_t KeyPath = swift_getKeyPath(&unk_1000F6BD0);
    uint64_t v10 = swift_getKeyPath(&unk_1000F6BF8);
    uint64_t v11 = swift_getKeyPath(&unk_1000F6C20);
    v20[0] = (uint64_t)_swiftEmptyDictionarySingleton;
    uint64_t v12 = *(void *)(v7 + 16);
    if (v12)
    {
      uint64_t v22 = a2;
      swift_bridgeObjectRetain();
      uint64_t v19 = v7;
      uint64_t v13 = (void **)(v7 + 48);
      do
      {
        uint64_t v15 = (uint64_t)*(v13 - 1);
        id v14 = *v13;
        uint64_t v16 = (uint64_t)*(v13 - 2);
        swift_bridgeObjectRetain();
        id v17 = v14;
        sub_100078490( v20,  v16,  v15,  (uint64_t)v17,  v11,  KeyPath,  v10,  (unint64_t *)&qword_100132440,  &OBJC_CLASS___LNEntityMetadata_ptr,  (void (*)(id, uint64_t, uint64_t, uint64_t))sub_100009940,  (void (*)(uint64_t, uint64_t, uint64_t))sub_10003E40C);

        swift_bridgeObjectRelease(v15);
        v13 += 3;
        --v12;
      }

      while (v12);
      swift_release();
      swift_release();
      uint64_t v7 = v19;
      swift_bridgeObjectRelease(v19);
      uint64_t v18 = (void *)v20[0];
      a2 = v22;
    }

    else
    {
      swift_release();
      swift_release();
      uint64_t v18 = _swiftEmptyDictionarySingleton;
    }

    swift_bridgeObjectRelease(v7);
    uint64_t result = swift_release();
    *a2 = v18;
  }

  return result;
}

id sub_100082488(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t *a5)
{
  id v7 = a1;
  a4();

  sub_100008DB0(a5);
  Dictionary._bridgeToObjectiveC()();
  sub_100084824();
  return sub_10005936C(0LL);
}

id sub_100082554(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  if (a3)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    uint64_t v9 = v8;
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v9 = 0LL;
  }

  id v10 = a1;
  a5(v7, v9);

  swift_bridgeObjectRelease();
  Array._bridgeToObjectiveC()();
  sub_100084824();
  return sub_10005936C(0LL);
}

void sub_100082614(void *a1@<X3>, void *a2@<X8>)
{
  uint64_t v5 = sub_100008DB0(&qword_100132D90);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_retain();
  sub_1000BD2B4();
  swift_release();
  if (!v2)
  {
    uint64_t v8 = type metadata accessor for LNBundleRecord(0LL);
    if (sub_100009E6C((uint64_t)v7, 1LL, v8) == 1)
    {
      sub_100026E14((uint64_t)v7, &qword_100132D90);
      if (a1)
      {
        uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
        uint64_t v11 = v10;
        id v12 = objc_allocWithZone(&OBJC_CLASS___NSError);
        id v13 = sub_100083AC4(v9, v11, 9004LL, 0LL);
        id v14 = v13;
        uint64_t v15 = 0LL;
        *a1 = v13;
      }

      else
      {
        uint64_t v15 = 0LL;
      }
    }

    else
    {
      uint64_t v15 = *(void *)&v7[*(int *)(v8 + 32)];
      sub_100058D54((uint64_t)v7, type metadata accessor for LNBundleRecord);
    }

    *a2 = v15;
  }

id _LNMetadataProviderDirect.__allocating_init()()
{
  return [objc_allocWithZone(v0) init];
}

void _LNMetadataProviderDirect.init()()
{
}

void *sub_100082948(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyDictionarySingleton;
  }
  id v30 = (id)objc_opt_self(&OBJC_CLASS___LNSystemProtocol);
  swift_bridgeObjectRetain();
  uint64_t v29 = a1;
  for (unint64_t i = (uint64_t *)(a1 + 72); ; i += 6)
  {
    uint64_t v5 = *(i - 2);
    uint64_t v4 = *(i - 1);
    uint64_t v6 = *i;
    unint64_t v7 = *(i - 4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10001BCF8();
    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = [v30 protocolOrNilWithIdentifier:v8];

    if (!v9)
    {
      sub_10001BEC0();
      swift_bridgeObjectRelease(v5);
      unint64_t v21 = v7;
      goto LABEL_14;
    }

    uint64_t v31 = v5;
    unint64_t v32 = v7;
    sub_10001BCF8();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    unint64_t v11 = sub_10001627C((uint64_t)v9);
    uint64_t v13 = _swiftEmptyDictionarySingleton[2];
    BOOL v14 = (v12 & 1) == 0;
    Swift::Int v15 = v13 + v14;
    if (__OFADD__(v13, v14)) {
      break;
    }
    unint64_t v16 = v11;
    char v17 = v12;
    sub_100008DB0((uint64_t *)&unk_100132DB0);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v15))
    {
      unint64_t v18 = sub_10001627C((uint64_t)v9);
      if ((v17 & 1) != (v19 & 1)) {
        goto LABEL_19;
      }
      unint64_t v16 = v18;
    }

    if ((v17 & 1) != 0)
    {
      uint64_t v20 = (void *)(_swiftEmptyDictionarySingleton[7] + 16 * v16);
      swift_bridgeObjectRelease(v20[1]);
      *uint64_t v20 = v4;
      v20[1] = v6;
    }

    else
    {
      _swiftEmptyDictionarySingleton[(v16 >> 6) + 8] |= 1LL << v16;
      *(void *)(_swiftEmptyDictionarySingleton[6] + 8 * v16) = v9;
      uint64_t v22 = (void *)(_swiftEmptyDictionarySingleton[7] + 16 * v16);
      *uint64_t v22 = v4;
      v22[1] = v6;
      uint64_t v23 = _swiftEmptyDictionarySingleton[2];
      BOOL v24 = __OFADD__(v23, 1LL);
      uint64_t v25 = v23 + 1;
      if (v24) {
        goto LABEL_18;
      }
      _swiftEmptyDictionarySingleton[2] = v25;
      id v26 = v9;
    }

    sub_10001BEC0();
    swift_bridgeObjectRelease(v31);
    swift_bridgeObjectRelease(v32);

    unint64_t v21 = 0x8000000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v21);
    if (!--v1)
    {
      swift_bridgeObjectRelease(v29);
      return _swiftEmptyDictionarySingleton;
    }
  }

  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  uint64_t v28 = sub_10000A1A0(0LL, (unint64_t *)&qword_100130BA0, &OBJC_CLASS___LNSystemProtocol_ptr);
  uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v28);
  __break(1u);
  return result;
}

void sub_100082B78( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void (**a6)(void, void, void))
{
  uint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  id v11 = a5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10007E5C0((uint64_t)v11, v11, a1, a2, &v16, &v15, a3, a4);
  uint64_t v12 = v15;
  if (!v16)
  {
    swift_errorRetain(v15);
    v13.super.isa = 0LL;
    if (v12) {
      goto LABEL_3;
    }
LABEL_5:
    BOOL v14 = 0LL;
    goto LABEL_6;
  }

  swift_errorRetain(v15);
  sub_10000A1A0(0LL, &qword_100132D50, &OBJC_CLASS___LNAutoShortcut_ptr);
  swift_bridgeObjectRetain();
  v13.super.isa = Array._bridgeToObjectiveC()().super.isa;
  if (!v12) {
    goto LABEL_5;
  }
LABEL_3:
  BOOL v14 = (void *)_convertErrorToNSError(_:)(v12);
LABEL_6:
  ((void (**)(void, Class, void *))a6)[2](a6, v13.super.isa, v14);

  swift_errorRelease(v12);
  swift_bridgeObjectRelease();
  swift_errorRelease(v12);
  swift_bridgeObjectRelease();
  _Block_release(a6);
}

uint64_t _LNMetadataProviderDirect.autoShortcuts(forBundleIdentifier:localeIdentifier:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  id v9 = v4;
  sub_10001BD0C();
  sub_10001BEF8();
  sub_10007E5C0((uint64_t)v9, v9, a1, a2, &v13, &v12, a3, a4);
  uint64_t v10 = v12;
  sub_10001BEF8();
  swift_errorRetain(v10);
  sub_1000848FC();
  sub_10008471C();
  swift_bridgeObjectRelease();
  sub_10008471C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100082D80(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  if (v5)
  {
    swift_release();
    uint64_t v10 = type metadata accessor for MetadataError(0LL);
    sub_100008C18( (unint64_t *)&unk_100132D70,  (uint64_t (*)(uint64_t))&type metadata accessor for MetadataError,  (uint64_t)&protocol conformance descriptor for MetadataError);
    uint64_t v12 = swift_allocError(v10, v11, 0LL, 0LL);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v10 - 8) + 104LL))( v13,  enum case for MetadataError.cacheLookupFailed(_:),  v10);
    swift_errorRelease(v5);
    uint64_t v14 = *a5;
    *a5 = v12;
    return swift_errorRelease(v14);
  }

  swift_release();
  sub_1000840A8(v24);
  sub_100026C8C((uint64_t)v24, (uint64_t)v25, &qword_100132760);
  if (v26)
  {
    swift_retain();
    sub_10001C440();
    uint64_t v22 = v16;
    swift_release();
    if (!v22)
    {
      uint64_t v17 = type metadata accessor for MetadataError(0LL);
      sub_100008C18( (unint64_t *)&unk_100132D70,  (uint64_t (*)(uint64_t))&type metadata accessor for MetadataError,  (uint64_t)&protocol conformance descriptor for MetadataError);
      uint64_t v19 = swift_allocError(v17, v18, 0LL, 0LL);
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v17 - 8) + 104LL))( v20,  enum case for MetadataError.cacheLookupFailed(_:),  v17);
      uint64_t v21 = *a5;
      *a5 = v19;
      return swift_errorRelease(v21);
    }

    uint64_t v23 = sub_10003F290(1000LL, v22);
    swift_bridgeObjectRelease();
    *a4 = v23;
  }

  else
  {
    *a4 = _swiftEmptyArrayStorage;
  }

  return swift_bridgeObjectRelease();
}

void sub_100083050(uint64_t a1, uint64_t a2, void *a3, void (**a4)(void, void, void))
{
  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  id v7 = a3;
  swift_bridgeObjectRetain();
  sub_10007EBF0((uint64_t)v7, v7, a1, a2, &v11, &v12);
  uint64_t v8 = v11;
  if (!v12)
  {
    swift_errorRetain(v11);
    v9.super.isa = 0LL;
    if (v8) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v10 = 0LL;
    goto LABEL_6;
  }

  swift_errorRetain(v11);
  swift_bridgeObjectRetain();
  sub_100008DB0(&qword_100133520);
  v9.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (!v8) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v10 = (void *)_convertErrorToNSError(_:)(v8);
LABEL_6:
  ((void (**)(void, Class, void *))a4)[2](a4, v9.super.isa, v10);

  swift_errorRelease(v8);
  swift_bridgeObjectRelease();
  swift_errorRelease(v8);
  swift_bridgeObjectRelease();
  _Block_release(a4);
}

uint64_t _LNMetadataProviderDirect.autoShortcuts(forLocaleIdentifier:completion:)()
{
  id v1 = v0;
  sub_10001BEF8();
  uint64_t v2 = sub_100084A80();
  sub_10007EBF0(v2, v3, v4, v5, v6, v7);
  sub_10001BEF8();
  swift_errorRetain(0LL);
  sub_1000848FC();
  sub_10008471C();
  swift_bridgeObjectRelease();
  sub_10008471C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10008321C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  if (v5)
  {
    swift_errorRelease(v5);
    swift_release();
LABEL_3:
    uint64_t v9 = type metadata accessor for MetadataError(0LL);
    sub_100008C18( (unint64_t *)&unk_100132D70,  (uint64_t (*)(uint64_t))&type metadata accessor for MetadataError,  (uint64_t)&protocol conformance descriptor for MetadataError);
    uint64_t v11 = swift_allocError(v9, v10, 0LL, 0LL);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v9 - 8) + 104LL))( v12,  enum case for MetadataError.cacheLookupFailed(_:),  v9);
    uint64_t v13 = *a4;
    *a4 = v11;
    return swift_errorRelease(v13);
  }

  uint64_t v15 = v8;
  swift_release();
  if (!v15) {
    goto LABEL_3;
  }
  uint64_t v16 = sub_100083EA8(v15);
  swift_bridgeObjectRelease();
  *a5 = v16;
  return swift_bridgeObjectRelease();
}

void _LNMetadataProviderDirect.autoShortcuts(forLocaleIdentifier:)()
{
}

void sub_1000833D4()
{
  uint64_t v1 = sub_1000848E4();
  v0(v1);
  sub_100059474();
}

void _LNMetadataProviderDirect.properties(forIdentifiers:)()
{
}

uint64_t sub_100083518@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v58 = *(void *)(v2 - 8);
  uint64_t v59 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for LNAppShortcutParameterRecord(0LL);
  __chkstk_darwin(v5);
  id v7 = (char *)v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100008DB0(&qword_100131268);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v48 - v13;
  swift_retain();
  uint64_t v15 = (uint64_t)v57;
  sub_10003DACC();
  if (v15)
  {
    swift_errorRelease(v15);
    swift_release();
    uint64_t v17 = type metadata accessor for MetadataError(0LL);
    sub_100008C18( (unint64_t *)&unk_100132D70,  (uint64_t (*)(uint64_t))&type metadata accessor for MetadataError,  (uint64_t)&protocol conformance descriptor for MetadataError);
    swift_allocError(v17, v18, 0LL, 0LL);
    uint64_t v20 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v17 - 8) + 104LL))( v19,  enum case for MetadataError.cacheLookupFailed(_:),  v17);
    return swift_willThrow(v20);
  }

  uint64_t v22 = v16;
  id v57 = v14;
  uint64_t v51 = v11;
  uint64_t v52 = v7;
  v48[2] = 0LL;
  uint64_t v49 = a1;
  uint64_t v50 = v5;
  uint64_t v54 = v4;
  swift_release();
  uint64_t v23 = *(void *)(v22 + 16);
  if (!v23)
  {
    uint64_t v25 = _swiftEmptyDictionarySingleton;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v49 = v25;
    return result;
  }

  uint64_t v24 = v22 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  uint64_t v56 = *(void *)(v9 + 72);
  v48[1] = v22;
  swift_bridgeObjectRetain();
  uint64_t v25 = _swiftEmptyDictionarySingleton;
  uint64_t v26 = (uint64_t)v54;
  uint64_t v27 = v50;
  uint64_t v28 = (uint64_t)v51;
  uint64_t v29 = (uint64_t)v52;
  uint64_t v30 = (uint64_t)v57;
  while (1)
  {
    sub_100026CB8(v24, v30, &qword_100131268);
    sub_100026CB8(v30, v28, &qword_100131268);
    if (sub_100009E6C(v28, 1LL, v27) == 1)
    {
      sub_100026E14(v28, &qword_100131268);
      goto LABEL_16;
    }

    sub_100084248(v28, v29, type metadata accessor for LNAppShortcutParameterRecord);
    uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16);
    v31(v26, v29, v59);
    id v32 = *(id *)(v29 + *(int *)(v27 + 36));
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
    uint64_t v60 = v25;
    unint64_t v34 = sub_100016144(v26);
    uint64_t v36 = v25[2];
    BOOL v37 = (v35 & 1) == 0;
    Swift::Int v38 = v36 + v37;
    if (__OFADD__(v36, v37)) {
      break;
    }
    unint64_t v39 = v34;
    char v40 = v35;
    id v55 = v32;
    uint64_t v53 = (void (*)(unint64_t, char *, uint64_t))v31;
    sub_100008DB0(&qword_100133500);
    Swift::Bool v41 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v38);
    uint64_t v28 = (uint64_t)v51;
    uint64_t v29 = (uint64_t)v52;
    if (v41)
    {
      unint64_t v42 = sub_100016144((uint64_t)v54);
      if ((v40 & 1) != (v43 & 1)) {
        goto LABEL_23;
      }
      unint64_t v39 = v42;
    }

    uint64_t v25 = v60;
    if ((v40 & 1) != 0)
    {
      uint64_t v44 = v60[7];

      *(void *)(v44 + 8 * v39) = v55;
      uint64_t v26 = (uint64_t)v54;
    }

    else
    {
      v60[(v39 >> 6) + 8] |= 1LL << v39;
      uint64_t v26 = (uint64_t)v54;
      v53(v25[6] + *(void *)(v58 + 72) * v39, v54, v59);
      *(void *)(v25[7] + 8 * v39) = v55;
      uint64_t v45 = v25[2];
      BOOL v46 = __OFADD__(v45, 1LL);
      uint64_t v47 = v45 + 1;
      if (v46) {
        goto LABEL_22;
      }
      v25[2] = v47;
    }

    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v26, v59);
    sub_100058D54(v29, type metadata accessor for LNAppShortcutParameterRecord);
    uint64_t v27 = v50;
LABEL_16:
    uint64_t v30 = (uint64_t)v57;
    sub_100026E14((uint64_t)v57, &qword_100131268);
    v24 += v56;
    if (!--v23)
    {
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
  }

  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v59);
  __break(1u);
  return result;
}

void sub_100083A70(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 identifier];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

id sub_100083AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (a4)
  {
    v9.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a4);
  }

  else
  {
    v9.super.isa = 0LL;
  }

  id v10 = [v4 initWithDomain:v8 code:a3 userInfo:v9.super.isa];

  return v10;
}

uint64_t sub_100083B70()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100083B94(uint64_t a1)
{
  return sub_1000793AC(a1, v1);
}

uint64_t sub_100083B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100083BAC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100083BB4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100083BE0(void *a1, uint64_t a2)
{
  return sub_1000793FC(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_100083BE8()
{
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100083C48()
{
}

id sub_100083C80(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  sub_10000A1A0(0LL, (unint64_t *)&unk_100132D60, &OBJC_CLASS___RBSAttribute_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a4);
  id v10 = [v4 initWithExplanation:v8 target:a3 attributes:isa];

  return v10;
}

id sub_100083D24(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v10 = [v4 initWithBundleIdentifier:v8 installIdentifier:isa];
  sub_10000A1D8(a3, a4);

  return v10;
}

id sub_100083DAC(uint64_t a1, uint64_t a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  sub_10000A1A0(0LL, (unint64_t *)&qword_100130BA0, &OBJC_CLASS___LNSystemProtocol_ptr);
  sub_100038038();
  Class v6 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2);
  id v7 = [v2 initWithActions:isa systemProtocolDefaults:v6];

  return v7;
}

uint64_t type metadata accessor for _LNMetadataProviderDirect()
{
  return objc_opt_self(&OBJC_CLASS____TtC10LinkDaemon25_LNMetadataProviderDirect);
}

uint64_t sub_100083EA8(uint64_t a1)
{
  uint64_t result = static _DictionaryStorage.copy(original:)(a1);
  uint64_t v3 = (void *)result;
  int64_t v4 = 0LL;
  uint64_t v28 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v6 = a1 + 64;
  uint64_t v5 = v7;
  uint64_t v8 = 1LL << *(_BYTE *)(v6 - 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & v5;
  uint64_t v26 = v6;
  int64_t v27 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = result + 64;
  if ((v9 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v12 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v4 << 6))
  {
    uint64_t v17 = (uint64_t *)(*(void *)(v28 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = *(void *)(*(void *)(v28 + 56) + 8 * i);
    sub_10001C064();
    sub_10001BD0C();
    uint64_t v21 = sub_10003F290(1000LL, v20);
    uint64_t result = sub_10000AEE8();
    *(void *)(v11 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    uint64_t v22 = (void *)(v3[6] + 16 * i);
    *uint64_t v22 = v18;
    v22[1] = v19;
    *(void *)(v3[7] + 8 * i) = v21;
    uint64_t v23 = v3[2];
    BOOL v24 = __OFADD__(v23, 1LL);
    uint64_t v25 = v23 + 1;
    if (v24)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }

    v3[2] = v25;
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1LL)) {
      goto LABEL_24;
    }
    if (v14 >= v27) {
      return (uint64_t)v3;
    }
    unint64_t v15 = *(void *)(v26 + 8 * v14);
    ++v4;
    if (!v15)
    {
      int64_t v4 = v14 + 1;
      if (v14 + 1 >= v27) {
        return (uint64_t)v3;
      }
      unint64_t v15 = *(void *)(v26 + 8 * v4);
      if (!v15)
      {
        int64_t v4 = v14 + 2;
        if (v14 + 2 >= v27) {
          return (uint64_t)v3;
        }
        unint64_t v15 = *(void *)(v26 + 8 * v4);
        if (!v15) {
          break;
        }
      }
    }

uint64_t *sub_1000840A8(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1000840D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }

  return result;
}

uint64_t sub_100084108()
{
  uint64_t v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[13]);
  }

  uint64_t v2 = v0[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    uint64_t v3 = v0[16];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v0[17]);
    }
  }

  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184LL, 7LL);
}

const char *sub_100084190()
{
  return "identifier";
}

void sub_10008419C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_1000841B0(uint64_t a1, uint64_t a2)
{
  return sub_1000C5450(a1, a2, v2);
}

uint64_t sub_1000841B8@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000C5610(*(uint64_t (**)(void))(v1 + 16), a1);
}

void sub_1000841D0(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_1000841E4(uint64_t a1, uint64_t a2)
{
  return sub_1000C5FB0(a1, a2, v2);
}

void sub_1000841EC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_100084200(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_100084214(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = sub_100084954(a1, a2, a3);
  sub_10002807C(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
  sub_10000ADA8();
}

uint64_t sub_100084240(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_100081170(a1, a2, a3, *(void *)(v3 + 16));
}

void sub_100084248(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = sub_100084954(a1, a2, a3);
  sub_10002807C(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL));
  sub_10000ADA8();
}

id sub_10008427C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_10007FCE4(0xD000000000000010LL, a1, a2, (a3 - 32) | 0x8000000000000000LL);
}

id sub_100084290(uint64_t a1, uint64_t a2)
{
  return sub_100083AC4(a1, a2, 9006LL, 0LL);
}

  ;
}

id sub_1000842B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100083AC4(a1, a2, a3, 0LL);
}

uint64_t sub_1000842C0()
{
  return swift_willThrow();
}

uint64_t sub_1000842CC@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 88) = a1;
  return type metadata accessor for Logger(0LL);
}

  ;
}

id sub_1000842F0@<X0>(uint64_t a1@<X8>)
{
  return sub_100083C80(0xD000000000000010LL, (a1 - 32) | 0x8000000000000000LL, v2, v1);
}

uint64_t sub_100084310(uint64_t a1)
{
  return swift_dynamicCast(v2 - 120, v2 - 112, v1, a1, 0LL);
}

uint64_t sub_100084328()
{
  *(void *)(v1 - 112) = v0;
  return swift_errorRetain(v0);
}

uint64_t sub_100084334(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(v3, v2, a1, a2, 0LL);
}

id sub_100084350@<X0>(uint64_t a1@<X8>)
{
  return sub_100083C80(0xD000000000000010LL, (a1 - 32) | 0x8000000000000000LL, v2, v1);
}

id sub_10008436C(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_100083C80(a1, a2, a3, v3);
}

uint64_t sub_100084378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, v3, 0LL);
}

uint64_t sub_100084384(uint64_t a1)
{
  return swift_dynamicCast(v2 - 120, v2 - 112, v1, a1, 0LL);
}

uint64_t sub_10008439C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, v4, a4, 0LL);
}

uint64_t sub_1000843A8()
{
  return swift_errorRetain(v0);
}

uint64_t sub_1000843B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 0LL);
}

  ;
}

  ;
}

uint64_t sub_1000843CC(uint64_t a1)
{
  *(void *)(v2 - 128) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 128, v2 - 120, *(void *)(v2 - 192), v1);
}

uint64_t sub_1000843E8()
{
  return _convertNSErrorToError(_:)(v0);
}

uint64_t sub_1000843F0()
{
  return swift_errorRelease(*(void *)(v0 - 112));
}

uint64_t sub_1000843F8()
{
  return Logger.logObject.getter();
}

id sub_100084404(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2 - 112);
}

uint64_t sub_10008440C(uint64_t a1)
{
  return specialized Array._endMutation()(a1);
}

  ;
}

uint64_t sub_100084420@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_10008442C()
{
  return sub_10000DE60(v0, v1, (uint64_t *)(v2 - 96));
}

  ;
}

void sub_100084448()
{
}

void sub_100084454()
{
}

uint64_t sub_100084478()
{
  return sub_10000DE60(v1, v0, (uint64_t *)(v2 - 96));
}

uint64_t sub_10008448C()
{
  return sub_10007FF1C(v0, v1, v2, v3, *(void *)(v4 - 136), (void *)(v4 - 104));
}

void sub_1000844B0()
{
}

uint64_t sub_1000844D4(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_1000844DC()
{
  return swift_release();
}

void sub_1000844F4(float a1)
{
  *(void *)(v2 - 184) = v1;
  *uint64_t v1 = a1;
  *(void *)(v2 - 192) = v1 + 1;
}

uint64_t sub_10008450C(uint64_t a1)
{
  *(void *)(v2 - 200) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 200, v2 - 192, *(void *)(v2 - 264), v1);
}

uint64_t sub_10008452C()
{
  return sub_1000C5714(v1, v0, v2, *(void *)(v3 - 144));
}

void sub_10008454C()
{
}

uint64_t sub_10008456C()
{
  return QueryType.filter(_:)();
}

uint64_t sub_10008458C()
{
  return QueryType.filter(_:)();
}

id sub_1000845AC(void *a1)
{
  return [a1 *(SEL *)(v1 + 1496)];
}

uint64_t sub_1000845B4(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_1000845BC(uint64_t a1)
{
  *(void *)(v2 - 128) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 128, v2 - 120, *(void *)(v2 - 184), v1);
}

uint64_t sub_1000845D8(uint64_t a1)
{
  *(void *)(v2 - 128) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 128, v2 - 120, *(void *)(v2 - 200), v1);
}

void sub_1000845F4()
{
}

uint64_t sub_100084600()
{
  return Logger.init(_:)();
}

  ;
}

id sub_100084614@<X0>(uint64_t a1@<X8>)
{
  return [v1 *(SEL *)(a1 + 1144)];
}

uint64_t sub_100084620()
{
  return sub_100080EDC(v2, v0, v1, (void *)(v3 - 104));
}

id sub_10008463C@<X0>(uint64_t a1@<X8>)
{
  return sub_100083C80(0xD000000000000010LL, (a1 - 32) | 0x8000000000000000LL, v2, v1);
}

uint64_t sub_100084658()
{
  return Logger.logObject.getter();
}

void sub_100084664()
{
}

uint64_t sub_100084670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_bridgeObjectRetain(a4);
}

id sub_10008468C(void *a1)
{
  return [a1 *(SEL *)(v1 + 1496)];
}

uint64_t sub_100084694()
{
  return Logger.init(_:)();
}

void *sub_10008469C()
{
  *(void *)(v2 - 152) = v0;
  *(void *)(v2 - 144) = v1;
  return sub_10001AFA8((void *)(v2 - 176));
}

uint64_t sub_1000846B4()
{
  return swift_errorRelease(*(void *)(v0 - 136));
}

void *sub_1000846BC(uint64_t a1)
{
  return sub_100077FB0(a1);
}

  ;
}

uint64_t sub_1000846D0()
{
  return sub_1000801FC(v1, v0, (uint64_t *)(v2 - 104));
}

unint64_t sub_1000846E8()
{
  return 0xD000000000000010LL;
}

void *sub_1000846FC()
{
  *(void *)(v2 - 152) = v0;
  *(void *)(v2 - 144) = v1;
  return sub_10001AFA8((void *)(v2 - 176));
}

void sub_100084714()
{
}

uint64_t sub_10008471C()
{
  return swift_errorRelease(v0);
}

void sub_100084724()
{
  *(void *)(v0 - 112) = 0LL;
}

id sub_100084730()
{
  return v0;
}

  ;
}

uint64_t sub_100084748()
{
  return v2(v3, v0, v1);
}

uint64_t sub_10008475C()
{
  return v2(v3, v0, v1);
}

uint64_t sub_100084770(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10000DE60(v4, v3, a3);
}

uint64_t sub_10008477C()
{
  return v0 - 136;
}

uint64_t sub_1000847A8()
{
  return v0 - 136;
}

uint64_t sub_1000847D4()
{
  return sub_10000DE60(v0, v1, (uint64_t *)(v2 - 96));
}

void sub_1000847E8(float a1)
{
  *(void *)(v2 - 256) = v1;
  *unint64_t v1 = a1;
  *(void *)(v2 - 264) = v1 + 1;
}

void sub_100084804()
{
}

uint64_t sub_100084818()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100084824()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_100084830()
{
  *(void *)(v2 - 176) = v0;
}

void sub_100084844()
{
}

uint64_t sub_10008484C()
{
  return v2(v0, v1);
}

void sub_100084860()
{
}

id sub_10008486C()
{
  return v0;
}

void sub_100084880()
{
  *(void *)(v1 - 216) = v0;
}

uint64_t sub_100084898(uint64_t result)
{
  *(void *)(v1 - 152) = result;
  *(void *)(v1 - 96) = result;
  return result;
}

void sub_1000848A4()
{
}

id sub_1000848AC(void *a1)
{
  return [a1 *(SEL *)(v1 + 1496)];
}

uint64_t sub_1000848B4(uint64_t a1)
{
  *(void *)(v1 - 128) = a1;
  return v1 - 128;
}

void sub_1000848CC(float a1)
{
  *(void *)(v2 - 192) = v1;
  *uint64_t v1 = a1;
  *(void *)(v2 - 200) = v1 + 1;
}

uint64_t sub_1000848E4()
{
  return v0;
}

uint64_t sub_1000848FC()
{
  return v0(v1, v2);
}

void sub_10008490C(float a1)
{
  *(void *)(v2 - 168) = v1;
  *uint64_t v1 = a1;
  *(void *)(v2 - 184) = v1 + 1;
}

id sub_100084924(void *a1)
{
  return [a1 *(SEL *)(v1 + 1496)];
}

void sub_10008492C()
{
}

uint64_t sub_100084934()
{
  return (*(uint64_t (**)(uint64_t, void))(v0 + 8))(v1, *(void *)(v2 - 136));
}

uint64_t sub_100084944()
{
  return (*(uint64_t (**)(uint64_t, void))(v0 + 8))(v1, *(void *)(v2 - 216));
}

uint64_t sub_100084954(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3(0LL);
}

void *sub_100084964(uint64_t a1)
{
  return sub_100077DEC(a1);
}

uint64_t sub_10008496C()
{
  return sub_10000DE60(v0, v1, (uint64_t *)(v2 - 184));
}

uint64_t sub_10008497C()
{
  return v1(v0);
}

void sub_10008498C()
{
}

uint64_t sub_100084994(uint64_t a1)
{
  *(void *)(v1 + 32) = a1;
  *(void *)(v2 - sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = v1;
  return specialized Array._endMutation()(a1);
}

void sub_1000849A4()
{
  == infix<A>(_:_:)();
}

uint64_t sub_1000849AC()
{
  return swift_retain(v0);
}

uint64_t sub_1000849B4()
{
  return specialized ContiguousArray.reserveCapacity(_:)(v0);
}

  ;
}

id sub_1000849D4(void *a1)
{
  return [a1 *(SEL *)(v1 + 1496)];
}

uint64_t sub_1000849DC()
{
  return swift_unknownObjectRelease(*(void *)(v0 - 256));
}

void sub_1000849E4()
{
}

void sub_1000849F0()
{
}

void sub_1000849FC()
{
}

uint64_t sub_100084A04(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 0LL, 0LL);
}

uint64_t sub_100084A10()
{
  return swift_errorRelease(*(void *)(v0 - 104));
}

uint64_t sub_100084A18(uint64_t a1)
{
  *(void *)(v1 - 120) = a1;
  return v1 - 120;
}

uint64_t sub_100084A2C()
{
  return _convertNSErrorToError(_:)(v0);
}

void sub_100084A38()
{
}

uint64_t sub_100084A44()
{
  return swift_release(v0);
}

void *sub_100084A4C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 120) = a1;
  *(void *)(v2 - 112) = v1;
  return _Block_copy((const void *)(v2 - 136));
}

void sub_100084A58()
{
}

uint64_t sub_100084A60()
{
  return Logger.logObject.getter();
}

uint64_t sub_100084A6C(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_100084A74()
{
  return Logger.logObject.getter();
}

uint64_t sub_100084A80()
{
  return v0;
}

  ;
}

  ;
}

id sub_100084AAC(uint64_t a1, const char *a2)
{
  return [*(id *)(v2 - 240) a2];
}

id sub_100084AB8@<X0>(uint64_t a1@<X8>)
{
  return [v1 *(SEL *)(a1 + 1144)];
}

uint64_t sub_100084AC4()
{
  return v0;
}

void sub_100084AD8()
{
}

void sub_100084AE4()
{
}

uint64_t sub_100084AF0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = *a1;
  uint64_t v4 = *(void *)(v2 - 232);
  *(void *)(v2 - 176) = v1;
  *(void *)(v2 - 168) = v4;
  return result;
}

id sub_100084B04()
{
  return v0;
}

id sub_100084B10()
{
  return v0;
}

uint64_t sub_100084B1C@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_100084B28@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 96) = a1;
  return type metadata accessor for Logger(0LL);
}

void sub_100084B34()
{
}

void sub_100084B40()
{
}

uint64_t sub_100084B4C(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_100084B54()
{
  *(void *)(v1 + 16) = v0;
  return swift_task_switch(sub_100084B6C, v0, 0LL);
}

uint64_t sub_100084B6C()
{
  uint64_t v1 = (char *)sub_10005A284();
  *(void *)(v0 + 24) = v1;
  swift_release();
  uint64_t v2 = *(void *)&v1[OBJC_IVAR____TtC10LinkDaemon8Registry_ready];
  *(void *)(v0 + 32) = v2;
  if (v2)
  {
    uint64_t v3 = async function pointer to Task<>.value.getter[1];
    swift_retain();
    uint64_t v4 = (void *)swift_task_alloc(v3);
    *(void *)(v0 + 40) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_100084C58;
    return Task<>.value.getter();
  }

  else
  {

    return (*(uint64_t (**)(void))(v0 + 8))(0LL);
  }

uint64_t sub_100084C58()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16LL);
  sub_10000E8E4(*(void *)(*(void *)v0 + 40LL));
  swift_release();
  return swift_task_switch(sub_100084CAC, v1, 0LL);
}

uint64_t sub_100084CAC()
{
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t type metadata accessor for UpdateRegistryService()
{
  return objc_opt_self(&OBJC_CLASS____TtC10LinkDaemon21UpdateRegistryService);
}

unint64_t sub_100084D04()
{
  return 0xD00000000000001FLL;
}

uint64_t sub_100084D20()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_100132E74);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100084D68;
  return sub_100084B54();
}

uint64_t sub_100084D68(char a1)
{
  if (v1) {
    return v2[1]();
  }
  else {
    return ((uint64_t (*)(void))v2[1])(a1 & 1);
  }
}

void *sub_100084DC4(unint64_t a1, unint64_t a2)
{
  Swift::Int v3 = a1;
  if (a1 >> 62) {
    goto LABEL_28;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v4)
  {
    while (1)
    {
      sub_1000452D4();
      if (v4 < 0) {
        break;
      }
      char v43 = (void *)a2;
      uint64_t v5 = 0LL;
      uint64_t v6 = _swiftEmptyArrayStorage;
      uint64_t v45 = v4;
      unint64_t v46 = v3 & 0xC000000000000001LL;
      Swift::Int v44 = v3;
      while (v4 != v5)
      {
        Swift::Int v7 = v3;
        if (v46) {
          id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
        }
        else {
          id v8 = *(id *)(v3 + 8 * v5 + 32);
        }
        uint64_t v9 = v8;
        id v10 = [v8 key];
        uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
        uint64_t v13 = v12;

        uint64_t v14 = *(void *)a2;
        if (*(void *)(*(void *)a2 + 16LL) && (uint64_t v15 = sub_100015F98(v11, v13), (v16 & 1) != 0))
        {
          uint64_t v17 = (uint64_t *)(*(void *)(v14 + 56) + 16 * v15);
          uint64_t v49 = *v17;
          uint64_t v18 = v9;
          uint64_t v19 = v17[1];
          swift_bridgeObjectRetain();

          swift_bridgeObjectRelease();
          Swift::Int v3 = v7;
          uint64_t v4 = v45;
        }

        else
        {
          uint64_t v48 = v6;
          NSString v20 = String._bridgeToObjectiveC()();
          uint64_t v47 = v9;
          id v21 = [v9 localizedStringForLocaleIdentifier:v20];

          uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
          uint64_t v19 = v22;

          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)a2);
          uint64_t v24 = *(void *)a2;
          uint64_t v50 = *(void **)a2;
          *(void *)a2 = 0x8000000000000000LL;
          uint64_t v25 = v11;
          uint64_t v26 = sub_100015F98(v11, v13);
          uint64_t v28 = *(void *)(v24 + 16);
          BOOL v29 = (v27 & 1) == 0;
          Swift::Int v3 = v28 + v29;
          if (__OFADD__(v28, v29)) {
            goto LABEL_26;
          }
          a2 = v26;
          char v30 = v27;
          sub_100008DB0(&qword_100130680);
          if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v3))
          {
            uint64_t v31 = sub_100015F98(v25, v13);
            if ((v30 & 1) != (v32 & 1)) {
              goto LABEL_35;
            }
            a2 = v31;
          }

          if ((v30 & 1) != 0)
          {
            BOOL v33 = (uint64_t *)(v50[7] + 16 * a2);
            swift_bridgeObjectRelease();
            *BOOL v33 = v49;
            v33[1] = v19;
          }

          else
          {
            v50[(a2 >> 6) + 8] |= 1LL << a2;
            unint64_t v34 = (uint64_t *)(v50[6] + 16 * a2);
            *unint64_t v34 = v25;
            v34[1] = v13;
            char v35 = (uint64_t *)(v50[7] + 16 * a2);
            uint64_t *v35 = v49;
            v35[1] = v19;
            uint64_t v36 = v50[2];
            BOOL v37 = __OFADD__(v36, 1LL);
            uint64_t v38 = v36 + 1;
            if (v37) {
              goto LABEL_27;
            }
            v50[2] = v38;
            swift_bridgeObjectRetain();
          }

          a2 = (unint64_t)v43;
          *char v43 = v50;

          swift_bridgeObjectRelease_n(v13, 2LL);
          swift_bridgeObjectRelease();
          Swift::Int v3 = v44;
          uint64_t v4 = v45;
          uint64_t v6 = v48;
        }

        unint64_t v39 = v6[2];
        if (v39 >= v6[3] >> 1) {
          sub_1000452D4();
        }
        ++v5;
        v6[2] = v39 + 1;
        char v40 = &v6[2 * v39];
        v40[4] = v49;
        v40[5] = v19;
        if (v4 == v5)
        {
          swift_bridgeObjectRelease();
          return v6;
        }
      }

      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      if (v3 < 0) {
        uint64_t v41 = v3;
      }
      else {
        uint64_t v41 = v3 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v41);
      swift_bridgeObjectRelease();
      if (!v4) {
        goto LABEL_32;
      }
    }

    __break(1u);
LABEL_35:
    uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(type metadata for String);
    __break(1u);
  }

  else
  {
LABEL_32:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }

  return result;
}

void *sub_100085174(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    sub_100008DB0(&qword_100130ED0);
    uint64_t v4 = (void *)static _DictionaryStorage.allocate(capacity:)(v3);
  }

  else
  {
    uint64_t v4 = _swiftEmptyDictionarySingleton;
  }

  Swift::Int v7 = v4;
  sub_100086764(a1, 1, &v7);
  uint64_t v5 = v7;
  if (v1) {
    swift_release();
  }
  return v5;
}

void sub_100085200( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v178 = a4;
  uint64_t v179 = a8;
  uint64_t v173 = a7;
  uint64_t v177 = a3;
  uint64_t v8 = a2;
  uint64_t v168 = a1;
  int64_t v197 = _swiftEmptyArrayStorage;
  if (a2 >> 62) {
    goto LABEL_123;
  }
  uint64_t v9 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (2)
  {
    id v10 = _swiftEmptyArrayStorage;
    p_align = &stru_10012DFE8.align;
    if (v9)
    {
      v195 = _swiftEmptyArrayStorage;
      sub_100045428();
      if (v9 < 0)
      {
        __break(1u);
        return;
      }

      uint64_t v12 = 0LL;
      id v10 = v195;
      do
      {
        if ((v8 & 0xC000000000000001LL) != 0) {
          id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v8);
        }
        else {
          id v13 = *(id *)(v8 + 8 * v12 + 32);
        }
        id v14 = v13;
        id v15 = objc_msgSend(v13, *((SEL *)p_align + 508));
        uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        uint64_t v18 = v17;

        v195 = v10;
        unint64_t v20 = v10[2];
        unint64_t v19 = v10[3];
        if (v20 >= v19 >> 1)
        {
          sub_1000760D0(v19);
          sub_100045428();
          id v10 = v195;
        }

        ++v12;
        v10[2] = v20 + 1;
        id v21 = &v10[3 * v20];
        v21[4] = v16;
        v21[5] = v18;
        v21[6] = v14;
        p_align = (_DWORD *)(&stru_10012DFE8 + 24);
      }

      while (v9 != v12);
    }

    uint64_t v22 = sub_100085174((uint64_t)v10);
    uint64_t v163 = 0LL;
    if ((unint64_t)v168 >> 62)
    {
      if (v168 < 0) {
        uint64_t v8 = v168;
      }
      else {
        uint64_t v8 = v168 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v23 = sub_100011A50();
      if (v23)
      {
LABEL_14:
        unint64_t v24 = 0LL;
        unint64_t v170 = v168 & 0xC000000000000001LL;
        uint64_t v165 = v168 & 0xFFFFFFFFFFFFFF8LL;
        uint64_t v164 = v168 + 32;
        uint64_t v167 = v173 + 80;
        uint64_t v166 = (void *)LNValueTypeSpecificMetadataKeyLinkEnumerationSupportedValues;
        v176 = (void *)LNValueTypeSpecificMetadataKeyBoolTrueDisplayName;
        unint64_t v175 = (void *)LNValueTypeSpecificMetadataKeyBoolFalseDisplayName;
        v174 = (char *)&type metadata for Any + 8;
        uint64_t v25 = &selRef_isLowPowerDeviceEnabled;
        uint64_t v180 = _swiftEmptyArrayStorage;
        uint64_t v181 = (uint64_t)v22;
        uint64_t v169 = v23;
        while (1)
        {
          if (v170)
          {
            unint64_t v26 = v24;
            id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v24, v168);
          }

          else
          {
            if (v24 >= *(void *)(v165 + 16)) {
              goto LABEL_121;
            }
            unint64_t v26 = v24;
            id v27 = *(id *)(v164 + 8 * v24);
          }

          id v182 = v27;
          BOOL v28 = __OFADD__(v26, 1LL);
          uint64_t v8 = v26 + 1;
          if (v28)
          {
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
            goto LABEL_122;
          }

          uint64_t v172 = v8;
          id v29 = [v27 parameters];
          uint64_t v30 = sub_10000A1A0(0LL, &qword_100130BA8, &OBJC_CLASS___LNActionParameterMetadata_ptr);
          unint64_t v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v29, v30);

          if (!(v31 >> 62))
          {
            uint64_t v8 = *(void *)((v31 & 0xFFFFFFFFFFFFF8LL) + 0x10);
            if (v8) {
              break;
            }
            goto LABEL_116;
          }

          swift_bridgeObjectRetain();
          uint64_t v8 = sub_100011A50();
          sub_10000ADB0();
          if (v8) {
            break;
          }
LABEL_116:

          sub_10000ADB0();
          unint64_t v24 = v172;
          if (v172 == v169) {
            goto LABEL_131;
          }
        }

        unint64_t v32 = 0LL;
        unint64_t v187 = v31 & 0xC000000000000001LL;
        unint64_t v183 = v31 + 32;
        uint64_t v184 = v31 & 0xFFFFFFFFFFFFFF8LL;
        unint64_t v186 = v31;
        uint64_t v185 = v8;
        while (1)
        {
          if (v187)
          {
            BOOL v33 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v32, v31);
          }

          else
          {
            if (v32 >= *(void *)(v184 + 16)) {
              goto LABEL_119;
            }
            BOOL v33 = *(id *)(v183 + 8 * v32);
          }

          unint64_t v34 = v33;
          BOOL v28 = __OFADD__(v32, 1LL);
          unint64_t v35 = v32 + 1;
          if (v28)
          {
            __break(1u);
LABEL_119:
            __break(1u);
            goto LABEL_120;
          }

          uint64_t v36 = sub_10003E5D0(v33);
          unint64_t v192 = v35;
          if (v37) {
            break;
          }
          Swift::Int v44 = v34;
LABEL_87:

          unint64_t v32 = v192;
          if (v192 == v8) {
            goto LABEL_116;
          }
        }

        uint64_t v38 = v36;
        uint64_t v39 = v37;
        uint64_t v8 = (uint64_t)sub_100028058(v36, "valueType");
        uint64_t v40 = objc_opt_self(&OBJC_CLASS___LNLinkEnumerationValueType);
        uint64_t v41 = (void *)sub_1000869DC(v40);
        uint64_t v193 = v34;
        if (v41)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)([v41 v25[117]]);
          sub_1000869C0();
          if (v22[2])
          {
            uint64_t v42 = sub_100015F98(v31, (uint64_t)v34);
            if ((v43 & 1) != 0)
            {
              Swift::Int v44 = *(id *)(v22[7] + 8 * v42);
              sub_100011958();
              uint64_t v45 = sub_1000280C8();
              id v46 = sub_100086944(v45, *((const char **)p_align + 508));
              uint64_t v47 = sub_100086990((uint64_t)v46);
              uint64_t v49 = v48;

              uint64_t v50 = v180[2];
              if (v50)
              {
                uint64_t v51 = v180[4];
                uint64_t v52 = v180[5];
                if (v51 == v47 && v52 == v49)
                {
                  sub_10001DEC4();
                  uint64_t v22 = (void *)v181;
LABEL_82:
                  uint64_t v25 = &selRef_isLowPowerDeviceEnabled;
                  goto LABEL_83;
                }

                uint64_t v25 = &selRef_isLowPowerDeviceEnabled;
                if ((sub_100086934(v51, v52) & 1) != 0)
                {
LABEL_38:
                  swift_bridgeObjectRelease();
                  uint64_t v22 = (void *)v181;
LABEL_83:
                  sub_10000ADB0();

                  sub_10000AEE8();
                  goto LABEL_86;
                }

                uint64_t v140 = (uint64_t)v180;
                if (v50 != 1)
                {
                  uint64_t v141 = v180[6];
                  uint64_t v142 = v180[7];
                  BOOL v143 = v141 == v47 && v142 == v49;
                  if (v143 || (sub_100086934(v141, v142) & 1) != 0) {
                    goto LABEL_38;
                  }
                  uint64_t v140 = (uint64_t)v180;
                  if (v50 != 2)
                  {
                    uint64_t v144 = v180 + 9;
                    uint64_t v145 = 2LL;
                    while (1)
                    {
                      uint64_t v146 = v145 + 1;
                      if (__OFADD__(v145, 1LL)) {
                        break;
                      }
                      uint64_t v147 = *(v144 - 1);
                      uint64_t v148 = *v144;
                      BOOL v149 = v147 == v47 && v148 == v49;
                      if (v149 || (sub_100086934(v147, v148) & 1) != 0)
                      {
                        swift_bridgeObjectRelease();
                        p_align = (_DWORD *)(&stru_10012DFE8 + 24);
                        uint64_t v22 = (void *)v181;
                        goto LABEL_82;
                      }

                      v144 += 2;
                      ++v145;
                      if (v146 == v50)
                      {
                        sub_1000869B4((uint64_t)v180);
                        p_align = (_DWORD *)(&stru_10012DFE8 + 24);
                        goto LABEL_74;
                      }
                    }

LABEL_122:
                    __break(1u);
LABEL_123:
                    if (v8 < 0) {
                      uint64_t v159 = v8;
                    }
                    else {
                      uint64_t v159 = v8 & 0xFFFFFFFFFFFFFF8LL;
                    }
                    sub_10000AFB0();
                    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v159);
                    sub_10001198C();
                    continue;
                  }
                }

                sub_1000869B4(v140);
              }

              else
              {
                uint64_t v47 = (uint64_t)v180;
                swift_bridgeObjectRelease();
LABEL_74:
                uint64_t v25 = &selRef_isLowPowerDeviceEnabled;
              }

              uint64_t v108 = sub_10000ADB0();
              id v109 = sub_100086944(v108, *((const char **)p_align + 508));
              static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
              sub_1000869C0();
              if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) != 0)
              {
                unint64_t v110 = v180;
              }

              else
              {
                sub_100027F90();
                sub_1000141B8();
                unint64_t v110 = v157;
              }

              unint64_t v112 = v110[2];
              unint64_t v111 = v110[3];
              if (v112 >= v111 >> 1)
              {
                sub_1000760D0(v111);
                sub_1000141B8();
                unint64_t v110 = v158;
              }

              v110[2] = v112 + 1;
              uint64_t v180 = v110;
              uint64_t v113 = &v110[2 * v112];
              v113[4] = v49;
              v113[5] = v50;
              if ([v193 dynamicOptionsSupport])
              {

                sub_10000AEE8();
LABEL_72:
                uint64_t v22 = (void *)v181;
                goto LABEL_86;
              }

              id v114 = sub_100086944(0LL, "cases");
              uint64_t v115 = sub_10000A1A0(0LL, &qword_100131BE8, &OBJC_CLASS___LNEnumCaseMetadata_ptr);
              uint64_t v191 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v114, v115);

              id v116 = [v193 typeSpecificMetadata];
              type metadata accessor for LNValueTypeSpecificMetadataKey(0LL);
              uint64_t v118 = v117;
              unint64_t v119 = sub_10003E6A0();
              unint64_t v120 = (char *)&type metadata for Any + 8;
              uint64_t v121 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v116,  v118,  (char *)&type metadata for Any + 8,  v119);

              id v122 = v166;
              sub_100011CEC(v122, v121);

              sub_10001BEC0();
              if (v196)
              {
                uint64_t v123 = sub_100008DB0((uint64_t *)&unk_100132780);
                int v124 = swift_dynamicCast(&v194, &v195, (char *)&type metadata for Any + 8, v123, 6LL);
                if ((v124 & 1) != 0)
                {
                  unint64_t v120 = (char *)v163;
                  uint64_t v191 = sub_10003A474((unint64_t)v191, v194);
                  id v139 = sub_10008694C( (int)v191,  v132,  v133,  v134,  v135,  v136,  v137,  v138,  v160,  v161,  v162,  v163,  v164,  v165,  (uint64_t)v166,  v167,  v168,  v169,  v170,  v171,  v172,  v173,  (uint64_t)v174,  (uint64_t)v175,  (uint64_t)v176,  v177,  v178,  (uint64_t)v179,  (uint64_t)v180,  v181,  v182);
LABEL_111:
                  uint64_t v189 = sub_100086990((uint64_t)v139);
                  uint64_t v151 = v150;

                  id v153 = sub_100086944(v152, *((const char **)p_align + 508));
                  unint64_t v154 = sub_100086990((uint64_t)v153);
                  uint64_t v156 = v155;

                  sub_100085DE4( v189,  v151,  v154,  v156,  v38,  v39,  (unint64_t)v191,  v177,  v178,  (unint64_t)v179);
                  sub_10001BEC0();
                  sub_10001BC70();
                  sub_10000ADB0();
                  sub_10000AEE8();
                  sub_100042858();

                  Swift::Int v44 = (void *)v8;
                  goto LABEL_72;
                }
              }

              else
              {
                int v124 = sub_1000869D4();
              }

              id v139 = sub_10008694C( v124,  v125,  v126,  v127,  v128,  v129,  v130,  v131,  v160,  v161,  v162,  v163,  v164,  v165,  (uint64_t)v166,  v167,  v168,  v169,  v170,  v171,  v172,  v173,  (uint64_t)v174,  (uint64_t)v175,  (uint64_t)v176,  v177,  v178,  (uint64_t)v179,  (uint64_t)v180,  v181,  v182);
              goto LABEL_111;
            }
          }

          uint64_t v54 = sub_100011958();
        }

        else
        {
        }

        id v55 = sub_100028058(v54, "valueType");
        uint64_t v56 = sub_1000869CC();
        uint64_t v57 = sub_1000869DC(v56);
        if (v57)
        {
          uint64_t v58 = v57;
          sub_10000A1A0(0LL, (unint64_t *)&qword_1001317F0, &OBJC_CLASS___NSObject_ptr);
          id v59 = [(id)sub_1000869CC() BOOLValueType];
          LOBYTE(v58) = static NSObject.== infix(_:_:)(v58, v59);

          if ((v58 & 1) != 0)
          {
            id v60 = [v34 typeSpecificMetadata];
            type metadata accessor for LNValueTypeSpecificMetadataKey(0LL);
            uint64_t v62 = v61;
            unint64_t v63 = sub_10003E6A0();
            uint64_t v64 = (void *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v60, v62, v174, v63);

            sub_100086998((uint64_t)v176);
            if (v196)
            {
              uint64_t v65 = sub_10000A1A0( 0LL,  (unint64_t *)&qword_100131250,  &OBJC_CLASS___LNStaticDeferredLocalizedString_ptr);
              else {
                Swift::Int v44 = 0LL;
              }
            }

            else
            {
              sub_1000869D4();
              Swift::Int v44 = 0LL;
            }

            sub_100086998((uint64_t)v175);

            sub_10000ADB0();
            if (v196)
            {
              uint64_t v94 = sub_10000A1A0( 0LL,  (unint64_t *)&qword_100131250,  &OBJC_CLASS___LNStaticDeferredLocalizedString_ptr);
              int v95 = sub_10008696C(v94, (uint64_t)&type metadata for Any);
              if (v95) {
                __int128 v103 = v194;
              }
              else {
                __int128 v103 = 0LL;
              }
            }

            else
            {
              int v95 = sub_1000869D4();
              __int128 v103 = 0LL;
            }

            id v104 =  sub_10008694C( v95,  v96,  v97,  v98,  v99,  v100,  v101,  v102,  v160,  v161,  v162,  v163,  v164,  v165,  (uint64_t)v166,  v167,  v168,  v169,  v170,  v171,  v172,  v173,  (uint64_t)v174,  (uint64_t)v175,  (uint64_t)v176,  v177,  v178,  (uint64_t)v179,  (uint64_t)v180,  v181,  v182);
            uint64_t v105 = sub_100028048((uint64_t)v104);
            uint64_t v107 = v106;

            sub_100086254(v105, v107, v38, v39, v44, v103, v177, v178, v179);
            sub_10001BEC0();
            sub_10000AEE8();
            sub_100042858();

            goto LABEL_72;
          }

          uint64_t v66 = sub_10000AEE8();
        }

        else
        {
          sub_10000AEE8();
        }

        Swift::Int v44 = sub_100028058(v66, "valueType");
        uint64_t v67 = sub_1000869CC();
        if (swift_dynamicCastObjCClass(v44, v67))
        {
          uint64_t v190 = sub_10003E5D0(v34);
          if (v68)
          {
            uint64_t v69 = v68;
            id v70 = v44;
            char v71 = sub_100077534();

            if ((v71 & 1) != 0)
            {
              id v80 =  sub_10008694C( v72,  v73,  v74,  v75,  v76,  v77,  v78,  v79,  v160,  v161,  v162,  v163,  v164,  v165,  (uint64_t)v166,  v167,  v168,  v169,  v170,  v171,  v172,  v173,  (uint64_t)v174,  (uint64_t)v175,  (uint64_t)v176,  v177,  v178,  (uint64_t)v179,  (uint64_t)v180,  v181,  v182);
              uint64_t v188 = sub_100086990((uint64_t)v80);
              uint64_t v82 = v81;

              uint64_t v83 = *(void *)(v173 + 16);
              if (v83)
              {
                uint64_t v171 = (uint64_t)v70;
                swift_bridgeObjectRetain();
                uint64_t v84 = (uint64_t *)v167;
                unint64_t v85 = _swiftEmptyArrayStorage;
                do
                {
                  uint64_t v87 = *(v84 - 2);
                  uint64_t v86 = *(v84 - 1);
                  uint64_t v88 = *v84;
                  swift_bridgeObjectRetain();
                  sub_10000AFB0();
                  sub_1000119E4();
                  swift_bridgeObjectRetain();
                  if ((swift_isUniquelyReferenced_nonNull_native(v85) & 1) == 0)
                  {
                    sub_100027F90();
                    sub_10001454C();
                    unint64_t v85 = v92;
                  }

                  unint64_t v90 = v85[2];
                  unint64_t v89 = v85[3];
                  if (v90 >= v89 >> 1)
                  {
                    sub_1000760D0(v89);
                    sub_10001454C();
                    unint64_t v85 = v93;
                  }

                  v85[2] = v90 + 1;
                  uint64_t v91 = &v85[8 * v90];
                  v91[4] = v188;
                  v91[5] = v82;
                  v91[6] = v190;
                  v91[7] = v69;
                  v91[8] = v87;
                  v91[9] = v86;
                  v91[10] = v88;
                  v84 += 8;
                  *((_WORD *)v91 + 44) = 0;
                  --v83;
                  Swift::Int v44 = v34;
                }

                while (v83);
                sub_10000ADB0();
                sub_10001198C();
                uint64_t v25 = &selRef_isLowPowerDeviceEnabled;
                id v70 = (void *)v171;
              }

              else
              {
                sub_10000ADB0();
                Swift::Int v44 = v34;
              }

              sub_10001198C();
              sub_100042858();

              p_align = (_DWORD *)(&stru_10012DFE8 + 24);
              uint64_t v22 = (void *)v181;
              goto LABEL_86;
            }

            sub_10001198C();
          }

          else
          {
          }

          Swift::Int v44 = v34;
        }

        else
        {
        }

LABEL_131:
  swift_bridgeObjectRelease();
  sub_10001BEC0();
  swift_bridgeObjectRelease();
}

void *sub_100085DE4( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  uint64_t v10 = a7;
  if (a7 >> 62) {
    goto LABEL_49;
  }
  uint64_t v11 = *(void *)((a7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  sub_1000119E4();
  for (; v11; uint64_t v11 = sub_100011A50())
  {
    unint64_t v12 = 0LL;
    unint64_t v13 = v10 & 0xC000000000000001LL;
    uint64_t v71 = v10 + 32;
    uint64_t v72 = v10 & 0xFFFFFFFFFFFFFF8LL;
    id v14 = _swiftEmptyArrayStorage;
    uint64_t v81 = _swiftEmptyArrayStorage;
    unint64_t v73 = v10 & 0xC000000000000001LL;
    uint64_t v74 = v11;
    while (1)
    {
      if (v13)
      {
        id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v10);
      }

      else
      {
        if (v12 >= *(void *)(v72 + 16)) {
          goto LABEL_47;
        }
        id v15 = *(id *)(v71 + 8 * v12);
      }

      uint64_t v16 = v15;
      if (__OFADD__(v12++, 1LL))
      {
        __break(1u);
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }

      swift_bridgeObjectRetain();
      id v19 = sub_100086944(v18, "identifier");
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      uint64_t v22 = v21;

      uint64_t v23 = v14[2];
      if (v23)
      {
        uint64_t v24 = v14[4];
        uint64_t v25 = v14[5];
        BOOL v26 = v24 == v20 && v25 == v22;
        if (v26 || (sub_100086934(v24, v25) & 1) != 0)
        {
LABEL_31:
          sub_10001DF40();
LABEL_32:
          sub_10000ADB0();
          goto LABEL_33;
        }

        if (v23 != 1)
        {
          uint64_t v58 = v14[6];
          uint64_t v59 = v14[7];
          BOOL v60 = v58 == v20 && v59 == v22;
          if (v60 || (sub_100086934(v58, v59) & 1) != 0) {
            goto LABEL_31;
          }
          if (v23 != 2) {
            break;
          }
        }
      }

      sub_10001DF40();
LABEL_17:
      uint64_t v27 = sub_10000ADB0();
      id v28 = sub_100086944(v27, "identifier");
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
      uint64_t v31 = v30;

      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100027F90();
        sub_1000141B8();
        id v14 = (void *)isUniquelyReferenced_nonNull_native;
      }

      unint64_t v34 = v14[2];
      unint64_t v33 = v14[3];
      if (v34 >= v33 >> 1)
      {
        sub_1000760D0(v33);
        sub_1000141B8();
        id v14 = (void *)isUniquelyReferenced_nonNull_native;
      }

      v14[2] = v34 + 1;
      unint64_t v35 = &v14[2 * v34];
      v35[4] = v29;
      v35[5] = v31;
      id v36 = sub_100086944(isUniquelyReferenced_nonNull_native, "displayRepresentation");
      sub_10003E630(v36);
      uint64_t v37 = sub_100008DB0(&qword_100130BD0);
      uint64_t inited = swift_initStackObject(v37, v84);
      *(_OWORD *)(inited + 16) = xmmword_1000F5530;
      id v39 = sub_100086944(inited, "displayRepresentation");
      id v40 = [v39 title];

      *(void *)(inited + 32) = v40;
      unint64_t v82 = inited;
      specialized Array._endMutation()(v41);
      sub_1000428EC();
      unint64_t v42 = v82;
      sub_10000AFB0();
      char v43 = sub_100084DC4(v42, a10);
      sub_10000ADB0();
      unint64_t v82 = a3;
      uint64_t v83 = a4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10000AFB0();
      v44._countAndFlagsBits = 46LL;
      v44._object = (void *)0xE100000000000000LL;
      String.append(_:)(v44);
      id v46 = sub_100086944(v45, "identifier");
      uint64_t v47 = sub_100028048((uint64_t)v46);
      uint64_t v49 = v48;

      v50._countAndFlagsBits = v47;
      v50._object = v49;
      String.append(_:)(v50);
      swift_bridgeObjectRelease();
      unint64_t v51 = v82;
      uint64_t v52 = v83;
      uint64_t v53 = v81;
      if ((swift_isUniquelyReferenced_nonNull_native(v81) & 1) == 0)
      {
        sub_100027F90();
        sub_10001454C();
        uint64_t v53 = v66;
      }

      uint64_t v54 = v53;
      unint64_t v55 = v53[2];
      uint64_t v81 = v54;
      unint64_t v56 = v54[3];
      if (v55 >= v56 >> 1)
      {
        sub_1000760D0(v56);
        sub_10001454C();
        uint64_t v81 = v67;
      }

      v81[2] = v55 + 1;
      uint64_t v57 = &v81[8 * v55];
      uint64_t v11 = v74;
      v57[4] = a1;
      v57[5] = a2;
      v57[6] = a5;
      v57[7] = a6;
      v57[8] = v51;
      v57[9] = v52;
      v57[10] = v43;
      *((_WORD *)v57 + 44) = 0;
      unint64_t v13 = v73;
LABEL_33:

      if (v12 == v11)
      {
        sub_10001BC70();
        uint64_t v68 = v81;
        goto LABEL_51;
      }
    }

    uint64_t v70 = v10;
    uint64_t v61 = v14 + 9;
    uint64_t v10 = 2LL;
    while (1)
    {
      uint64_t v62 = v10 + 1;
      if (__OFADD__(v10, 1LL)) {
        break;
      }
      uint64_t v63 = *(v61 - 1);
      uint64_t v64 = *v61;
      BOOL v65 = v63 == v20 && v64 == v22;
      if (v65 || (sub_100086934(v63, v64) & 1) != 0)
      {
        sub_10001DF40();
        uint64_t v10 = v70;
        unint64_t v13 = v73;
        uint64_t v11 = v74;
        goto LABEL_32;
      }

      v61 += 2;
      ++v10;
      if (v62 == v23)
      {
        sub_10001DF40();
        uint64_t v10 = v70;
        goto LABEL_17;
      }
    }

LABEL_48:
    __break(1u);
LABEL_49:
    sub_1000119E4();
  }

  sub_10001BC70();
  uint64_t v68 = _swiftEmptyArrayStorage;
LABEL_51:
  sub_10001DF40();
  return v68;
}

          __break(1u);
          goto LABEL_49;
        }

uint64_t sub_100086254( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  uint64_t v13 = sub_100008DB0(&qword_100130BC0);
  __chkstk_darwin(v13);
  type metadata accessor for URL(0LL);
  sub_100086958();
  id v14 = objc_allocWithZone(&OBJC_CLASS___LNStaticDeferredLocalizedString);
  id v15 = sub_100086980(0x64656C62616E65LL, 0xE700000000000000LL, 0x64656C62616E65LL, 0xE700000000000000LL);
  sub_100086958();
  id v16 = objc_allocWithZone(&OBJC_CLASS___LNStaticDeferredLocalizedString);
  id v17 = sub_100086980(0x64656C6261736964LL, 0xE800000000000000LL, 0x64656C6261736964LL, 0xE800000000000000LL);
  if (a5) {
    id v18 = a5;
  }
  else {
    id v18 = v15;
  }
  id v62 = a6;
  if (!a6) {
    id v62 = v17;
  }
  uint64_t v57 = v17;
  uint64_t v58 = v15;
  uint64_t v19 = sub_100008DB0((uint64_t *)&unk_100132130);
  uint64_t v61 = sub_10000C254(v19, 48LL);
  *(_OWORD *)(v61 + 16) = xmmword_1000F5520;
  id v20 = a5;
  id v21 = a6;
  sub_1000119E4();
  uint64_t v22 = sub_10001BD0C();
  id v23 = sub_100028058(v22, "key");
  sub_100028048((uint64_t)v23);

  uint64_t v24 = *a9;
  id v55 = v18;
  if (*(void *)(*a9 + 16) && (uint64_t v25 = sub_1000869A8(), (v26 & 1) != 0))
  {
    uint64_t v27 = (void *)(*(void *)(v24 + 56) + 16 * v25);
    uint64_t v28 = v27[1];
    *(void *)(v61 + 32) = *v27;
    *(void *)(v61 + 40) = v28;
    swift_bridgeObjectRetain();
    uint64_t v29 = a9;
  }

  else
  {
    NSString v30 = String._bridgeToObjectiveC()();
    id v31 = [v18 localizedStringForLocaleIdentifier:v30];
    uint64_t v29 = a9;
    uint64_t v32 = a2;
    uint64_t v33 = a4;
    id v34 = v31;

    uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
    uint64_t v37 = v36;

    a4 = v33;
    a2 = v32;
    sub_1000280C8();
    sub_10000AFB0();
    sub_10003E274();
    sub_10001DEC4();
    *(void *)(v61 + 32) = v35;
    *(void *)(v61 + 40) = v37;
  }

  sub_10001DEC4();
  uint64_t v38 = sub_10000C254(v19, 48LL);
  *(_OWORD *)(v38 + 16) = xmmword_1000F5520;
  uint64_t v56 = a2;
  sub_1000119E4();
  uint64_t v39 = a4;
  sub_10001BD0C();
  id v40 = [v62 key];
  static String._unconditionallyBridgeFromObjectiveC(_:)(v40);

  uint64_t v41 = *v29;
  if (*(void *)(*v29 + 16) && (uint64_t v42 = sub_1000869A8(), (v43 & 1) != 0))
  {
    Swift::String v44 = (uint64_t *)(*(void *)(v41 + 56) + 16 * v42);
    uint64_t v46 = *v44;
    uint64_t v45 = v44[1];
    sub_10001BD0C();
    uint64_t v47 = v55;
    uint64_t v48 = v62;
  }

  else
  {
    NSString v49 = String._bridgeToObjectiveC()();
    uint64_t v48 = v62;
    id v50 = [v62 localizedStringForLocaleIdentifier:v49];

    uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
    uint64_t v45 = v51;

    sub_1000280C8();
    sub_10001BD0C();
    sub_10003E274();
    sub_10001DEC4();
    uint64_t v47 = v55;
  }

  *(void *)(v38 + 32) = v46;
  *(void *)(v38 + 40) = v45;
  sub_10001DEC4();
  uint64_t v52 = sub_100008DB0(&qword_100130F78);
  uint64_t v53 = sub_10000C254(v52, 160LL);
  *(_OWORD *)(v53 + 16) = xmmword_1000F57D0;
  *(void *)(v53 + 32) = a1;
  *(void *)(v53 + 40) = v56;
  *(void *)(v53 + 48) = a3;
  *(void *)(v53 + 56) = v39;
  *(void *)(v53 + 64) = 1163219540LL;
  *(void *)(v53 + 72) = 0xE400000000000000LL;
  *(void *)(v53 + 80) = v61;
  *(_WORD *)(v53 + 88) = 0;
  *(void *)(v53 + 96) = a1;
  *(void *)(v53 + 104) = v56;
  *(void *)(v53 + 112) = a3;
  *(void *)(v53 + 120) = v39;
  *(void *)(v53 + 128) = 0x45534C4146LL;
  *(void *)(v53 + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = 0xE500000000000000LL;
  *(void *)(v53 + 144) = v38;
  *(_WORD *)(v53 + 152) = 0;

  return v53;
}

id sub_100086650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  NSString v12 = String._bridgeToObjectiveC()();
  sub_10001DF40();
  if (a4)
  {
    NSString v13 = String._bridgeToObjectiveC()();
    sub_10001BEC0();
    if (a6)
    {
LABEL_3:
      NSString v14 = String._bridgeToObjectiveC()();
      sub_10000AEE8();
      goto LABEL_6;
    }
  }

  else
  {
    NSString v13 = 0LL;
    if (a6) {
      goto LABEL_3;
    }
  }

  NSString v14 = 0LL;
LABEL_6:
  uint64_t v15 = type metadata accessor for URL(0LL);
  id v17 = 0LL;
  if (sub_100009E6C(a7, 1LL, v15) != 1)
  {
    URL._bridgeToObjectiveC()(v16);
    id v17 = v18;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(a7, v15);
  }

  id v19 = [v8 initWithKey:v12 defaultValue:v13 table:v14 bundleURL:v17];

  return v19;
}

uint64_t sub_100086764(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  for (unint64_t i = (void **)(a1 + 48); ; i += 3)
  {
    uint64_t v8 = (uint64_t)*(i - 2);
    uint64_t v7 = (uint64_t)*(i - 1);
    uint64_t v9 = *i;
    uint64_t v10 = (void *)*a3;
    swift_bridgeObjectRetain();
    id v11 = v9;
    unint64_t v13 = sub_100015F98(v8, v7);
    uint64_t v14 = v10[2];
    BOOL v15 = (v12 & 1) == 0;
    uint64_t v16 = v14 + v15;
    if (__OFADD__(v14, v15)) {
      break;
    }
    char v17 = v12;
    if (v10[3] >= v16)
    {
      if ((a2 & 1) == 0)
      {
        sub_100008DB0(&qword_100130738);
        _NativeDictionary.copy()();
      }
    }

    else
    {
      sub_1000174E4(v16, a2 & 1);
      uint64_t v18 = sub_100015F98(v8, v7);
      if ((v17 & 1) != (v19 & 1)) {
        goto LABEL_18;
      }
      unint64_t v13 = v18;
    }

    id v20 = (void *)*a3;
    if ((v17 & 1) != 0)
    {
      id v21 = *(id *)(v20[7] + 8 * v13);
      swift_bridgeObjectRelease();

      uint64_t v22 = v20[7];
      *(void *)(v22 + 8 * v13) = v21;
    }

    else
    {
      v20[(v13 >> 6) + 8] |= 1LL << v13;
      id v23 = (uint64_t *)(v20[6] + 16 * v13);
      *id v23 = v8;
      v23[1] = v7;
      *(void *)(v20[7] + 8 * v13) = v11;
      uint64_t v24 = v20[2];
      BOOL v25 = __OFADD__(v24, 1LL);
      uint64_t v26 = v24 + 1;
      if (v25) {
        goto LABEL_17;
      }
      v20[2] = v26;
    }

    a2 = 1;
    if (!--v4)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }

  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100086934(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

id sub_100086944(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

id sub_10008694C( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, id a31)
{
  return [a31 *(SEL *)(v31 + 4064)];
}

uint64_t sub_100086958()
{
  return sub_100009E60(v0, 1LL, 1LL, v1);
}

uint64_t sub_10008696C@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return swift_dynamicCast(v2 - 144, v2 - 136, a2 + 8, a1, 6LL);
}

id sub_100086980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100086650(a1, a2, a3, a4, 0LL, 0LL, v4);
}

uint64_t sub_100086990(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_100086998(uint64_t a1)
{
  return sub_100011CEC(a1, v1);
}

uint64_t sub_1000869A8()
{
  return sub_100015F98(v1, v0);
}

uint64_t sub_1000869B4@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(a1);
}

void sub_1000869C0()
{
}

uint64_t sub_1000869CC()
{
  return objc_opt_self(*(void *)(v0 + 1816));
}

uint64_t sub_1000869D4()
{
  return sub_10000F3D8(v0 - 136);
}

uint64_t sub_1000869DC(uint64_t a1)
{
  return swift_dynamicCastObjCClass(v1, a1);
}

void sub_1000869E8(uint64_t a1, uint64_t a2)
{
  if (qword_1001302A0 != -1) {
    swift_once(&qword_1001302A0, sub_100087270);
  }
  sub_10001DEBC(v15, &unk_100135648);
  sub_10001D9AC(v15);
  if (qword_1001302A8 != -1) {
    swift_once(&qword_1001302A8, sub_1000872C8);
  }
  sub_10001DECC((uint64_t)&qword_1001356F0);
  v14[0] = a1;
  v14[1] = a2;
  == infix<A>(_:_:)();
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  sub_10001DEBC(&v13, v15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.filter(_:)( v5,  v7,  v9,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table,  (uint64_t)v14);
  swift_bridgeObjectRelease_n(v9, 2LL);
  swift_bridgeObjectRelease_n(v7, 2LL);
  sub_10001DAF0(v15);
  sub_10001DEBC(v16, v14);
  sub_10001DEBC(v14, v16);
  AppIntents_SQLite::Delete v17 = QueryType.delete()();
  uint64_t countAndFlagsBits = v17.template._countAndFlagsBits;
  object = v17.template._object;
  rawValue = v17.bindings._rawValue;
  sub_10001DAF0(v16);
  v18.template._uint64_t countAndFlagsBits = countAndFlagsBits;
  v18.template._object = object;
  v18.bindings._rawValue = rawValue;
  Connection.run(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001DEE8();
}

void sub_100086BA0(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  id v7 = [a1 action];
  id v8 = [v7 identifier];

  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  uint64_t v11 = v10;

  id v12 = [a1 action];
  id v13 = [v12 parameters];

  uint64_t v14 = sub_10000A1A0(0LL, &qword_1001309A8, &OBJC_CLASS___LNProperty_ptr);
  static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

  BOOL v15 = sub_100087090();
  if (v4)
  {
    sub_10001BEC0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    AppIntents_SQLite::Delete v17 = v15;
    uint64_t v18 = v16;
    uint64_t v26 = v11;
    swift_bridgeObjectRelease();
    uint64_t v24 = sub_1000B25E0(a1);
    uint64_t v25 = v19;
    id v20 = [a1 context];
    id v21 = sub_10008719C();
    uint64_t v23 = v22;

    *a4 = a2;
    a4[1] = a3;
    a4[2] = v9;
    a4[3] = v26;
    a4[4] = v17;
    a4[5] = v18;
    a4[6] = v24;
    a4[7] = v25;
    a4[8] = v21;
    a4[9] = v23;
  }

void sub_100086D7C(__int128 *a1)
{
  if (qword_1001302A0 != -1) {
    swift_once(&qword_1001302A0, sub_100087270);
  }
  sub_10001DEBC(v37, &unk_100135648);
  sub_10001DEBC(v35, &unk_100135648);
  sub_10001D9AC(v37);
  if (qword_1001302A8 != -1) {
    swift_once(&qword_1001302A8, sub_1000872C8);
  }
  uint64_t v2 = sub_10001DECC((uint64_t)&qword_1001356F0);
  __int128 v33 = *a1;
  <- infix<A>(_:_:)( v2,  v3,  v4,  (uint64_t)&v33,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String);
  uint64_t v5 = sub_100008DB0(&qword_1001323E0);
  uint64_t v6 = swift_allocObject(v5, 352LL, 7LL);
  *(_OWORD *)(v6 + 16) = xmmword_1000F5FF0;
  if (qword_1001302B0 != -1) {
    swift_once(&qword_1001302B0, sub_1000872E4);
  }
  uint64_t v7 = sub_10001DECC((uint64_t)&qword_100135708);
  __int128 v33 = a1[1];
  sub_100088794( v7,  v8,  v9,  v10,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String,  v11,  v12,  v33);
  if (qword_1001302B8 != -1) {
    swift_once(&qword_1001302B8, sub_10008736C);
  }
  uint64_t v13 = sub_10001DECC((uint64_t)&qword_100135720);
  __int128 v33 = a1[2];
  sub_100088794( v13,  v14,  v15,  v16,  (uint64_t)&type metadata for Data,  (uint64_t)&protocol witness table for Data,  v17,  v18,  v33);
  if (qword_1001302C0 != -1) {
    swift_once(&qword_1001302C0, sub_1000873D4);
  }
  uint64_t v19 = qword_100135738;
  uint64_t v20 = unk_100135740;
  uint64_t v21 = qword_100135748;
  sub_100088714((uint64_t)(a1 + 3), (uint64_t)v36);
  sub_100088714((uint64_t)v36, (uint64_t)&v33);
  sub_10001B4C8((uint64_t)v36);
  <- infix<A>(_:_:)( v19,  v20,  v21,  (uint64_t)&v33,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String);
  sub_100025F44((uint64_t)v36);
  if (qword_1001302C8 != -1) {
    swift_once(&qword_1001302C8, sub_10008743C);
  }
  uint64_t v22 = sub_10001DECC((uint64_t)&qword_100135750);
  __int128 v33 = a1[4];
  sub_100088794( v22,  v23,  v24,  v25,  (uint64_t)&type metadata for Data,  (uint64_t)&protocol witness table for Data,  v26,  v27,  v33);
  uint64_t v28 = QueryType.insert(_:_:)((uint64_t)v34);
  NSString v30 = v29;
  uint64_t v32 = v31;
  swift_setDeallocating(v6);
  sub_100058874();
  sub_10001DC30(v34);
  sub_10001DEBC(v38, v35);
  sub_10001DAF0(v38);
  v39.template._uint64_t countAndFlagsBits = v28;
  v39.template._object = v30;
  v39.bindings._rawValue = v32;
  Connection.run(_:)(v39);
  sub_10001BEC0();
  swift_bridgeObjectRelease();
  sub_10001DEE8();
}

void *sub_100087090()
{
  uint64_t v0 = (void *)objc_opt_self(&OBJC_CLASS___NSKeyedArchiver);
  sub_10000A1A0(0LL, &qword_1001309A8, &OBJC_CLASS___LNProperty_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v7 = 0LL;
  id v2 = [v0 archivedDataWithRootObject:isa requiringSecureCoding:1 error:&v7];

  id v3 = v7;
  if (v2)
  {
    uint64_t v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
  }

  else
  {
    uint64_t v4 = v3;
    _convertNSErrorToError(_:)(v3);

    swift_willThrow(v5);
  }

  return v4;
}

void *sub_10008719C()
{
  id v5 = 0LL;
  id v1 =  [(id)objc_opt_self(NSKeyedArchiver) archivedDataWithRootObject:v0 requiringSecureCoding:1 error:&v5];
  id v2 = v5;
  if (v1)
  {
    id v3 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);
  }

  else
  {
    id v3 = v2;
    _convertNSErrorToError(_:)(v2);

    swift_willThrow();
  }

  return v3;
}

void *sub_100087270()
{
  return sub_10001DEBC(&unk_100135648, v1);
}

uint64_t sub_1000872C8(uint64_t a1)
{
  return sub_100087300(a1, (uint64_t)&qword_1001356F0, 0x80000001000F96E0LL);
}

uint64_t sub_1000872E4(uint64_t a1)
{
  return sub_100087300(a1, (uint64_t)&qword_100135708, 0x80000001000FACA0LL);
}

uint64_t sub_100087300(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = sub_100008DB0((uint64_t *)&unk_1001323C0);
  uint64_t v5 = sub_10008864C((unint64_t *)&qword_100131110, (uint64_t *)&unk_1001323C0);
  return ExpressionType.init(_:)(0xD000000000000010LL, a3, v4, v5);
}

uint64_t sub_10008736C()
{
  uint64_t v0 = sub_100008DB0((uint64_t *)&unk_1001323D0);
  uint64_t v1 = sub_10008864C(&qword_100131118, (uint64_t *)&unk_1001323D0);
  return ExpressionType.init(_:)(0xD000000000000011LL, 0x80000001000FB030LL, v0, v1);
}

uint64_t sub_1000873D4()
{
  uint64_t v0 = sub_100008DB0(&qword_100131138);
  uint64_t v1 = sub_10008864C(&qword_100131140, &qword_100131138);
  return ExpressionType.init(_:)(0x694B746567646977LL, 0xEA0000000000646ELL, v0, v1);
}

uint64_t sub_10008743C()
{
  uint64_t v0 = sub_100008DB0((uint64_t *)&unk_1001323D0);
  uint64_t v1 = sub_10008864C(&qword_100131118, (uint64_t *)&unk_1001323D0);
  return ExpressionType.init(_:)(0x436465646F636E65LL, 0xEE00747865746E6FLL, v0, v1);
}

uint64_t sub_1000874AC@<X0>(uint64_t a1@<X8>)
{
  if (qword_1001302A0 != -1) {
    swift_once(&qword_1001302A0, sub_100087270);
  }
  uint64_t v1 = sub_10001DEBC(v316, &unk_100135648);
  sub_1000389CC( (uint64_t)v1,  v2,  v3,  v4,  v5,  v6,  v7,  v8,  v222,  v236,  a1,  v269,  v270,  v271,  v272,  v273,  v274,  v275,  v276,  v277,  v278,  v279,  v280,  v281,  v282,  v283,  v284,  v285,  v286,  v287,  v288,  v289,  v290,  v291,  v292,  (uint64_t)v293,  (uint64_t)v294,  v295,  v296,  v297,  v298,  (uint64_t)v299,  v300,  v301,  v302,  v303,  v304,  v305,  v306,
    v307,
    v308,
    v309,
    v310,
    v311,
    v312,
    v313,
    v314,
    v315,
    v316[0]);
  if (qword_100130130 != -1) {
    swift_once(&qword_100130130, sub_100035098);
  }
  sub_10001DEBC(v317, &unk_100135258);
  sub_1000389C4();
  if (qword_100130390 != -1) {
    swift_once(&qword_100130390, sub_1000BDEE8);
  }
  sub_10001DEBC(v318, &unk_100135A88);
  sub_10001DEBC(v319, v316);
  sub_1000887F0();
  if (qword_1001302A8 != -1) {
    swift_once(&qword_1001302A8, sub_1000872C8);
  }
  uint64_t v9 = sub_10001DEBC(v320, v316);
  sub_1000389CC( (uint64_t)v9,  v10,  v11,  v12,  v13,  v14,  v15,  v16,  v223,  v237,  v253,  v269,  v270,  v271,  v272,  v273,  v274,  v275,  v276,  v277,  v278,  v279,  v280,  v281,  v282,  v283,  v284,  v285,  v286,  v287,  v288,  v289,  v290,  v291,  v292,  (uint64_t)v293,  (uint64_t)v294,  v295,  v296,  v297,  v298,  (uint64_t)v299,  v300,  v301,  v302,  v303,  v304,  v305,  v306,
    v307,
    v308,
    v309,
    v310,
    v311,
    v312,
    v313,
    v314,
    v315,
    v316[0]);
  uint64_t v17 = sub_1000887C8();
  uint64_t v22 = QueryType.namespace<A>(_:)(v17, v18, v19, v20, v21);
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  sub_100088780( v22,  v23,  v25,  v27,  v28,  v29,  v30,  v31,  v224,  v238,  v254,  v269,  v270,  v271,  v272,  v273,  v274,  v275,  v276,  v277,  v278,  v279,  v280,  v281,  v282,  v283,  v284,  v285,  v286,  v287,  v288,  v289,  v290,  v291,  v292,  (uint64_t)v293,  (uint64_t)v294,  v295,  v296,  v297,  v298,  (uint64_t)v299,  v300,  v301,  v302,  v303,  v304,  v305,  v306,
    v307,
    v308,
    v309,
    v310,
    v311,
    v312,
    v313,
    v314,
    v315,
    v316[0]);
  uint64_t v32 = sub_100008DB0((uint64_t *)&unk_1001323C0);
  uint64_t v298 = v32;
  unint64_t v299 = &protocol witness table for Expression<A>;
  uint64_t v295 = v22;
  uint64_t v296 = v24;
  uint64_t v297 = v26;
  uint64_t v33 = sub_100008DB0(&qword_100131160);
  uint64_t v34 = swift_allocObject(v33, 272LL, 7LL);
  *(_OWORD *)(v34 + 16) = xmmword_1000F69D0;
  if (qword_1001302B0 != -1) {
    swift_once(&qword_1001302B0, sub_1000872E4);
  }
  uint64_t v35 = sub_10001DEBC(v320, v316);
  char v43 = sub_1000389CC( (uint64_t)v35,  v36,  v37,  v38,  v39,  v40,  v41,  v42,  v225,  v239,  v255,  v269,  v270,  v271,  v272,  v273,  v274,  v275,  v276,  v277,  v278,  v279,  v280,  v281,  v282,  v283,  v284,  v285,  v286,  v287,  v288,  v289,  v290,  v291,  v292,  (uint64_t)v293,  (uint64_t)v294,  v295,  v296,  v297,  v298,  (uint64_t)v299,  v300,  v301,  v302,  v303,  v304,  v305,  v306,
          v307,
          v308,
          v309,
          v310,
          v311,
          v312,
          v313,
          v314,
          v315,
          v316[0]);
  uint64_t v46 = sub_1000887B4((uint64_t)v43, v44, v45, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
  uint64_t v48 = v47;
  uint64_t v50 = v49;
  sub_100088780( v46,  v47,  v49,  v51,  v52,  v53,  v54,  v55,  v226,  v240,  v256,  v269,  v270,  v271,  v272,  v273,  v274,  v275,  v276,  v277,  v278,  v279,  v280,  v281,  v282,  v283,  v284,  v285,  v286,  v287,  v288,  v289,  v290,  v291,  v292,  (uint64_t)v293,  (uint64_t)v294,  v295,  v296,  v297,  v298,  (uint64_t)v299,  v300,  v301,  v302,  v303,  v304,  v305,  v306,
    v307,
    v308,
    v309,
    v310,
    v311,
    v312,
    v313,
    v314,
    v315,
    v316[0]);
  *(void *)(v34 + 56) = v32;
  *(void *)(v34 + 64) = &protocol witness table for Expression<A>;
  *(void *)(v34 + 32) = v46;
  *(void *)(v34 + 40) = v48;
  *(void *)(v34 + 48) = v50;
  if (qword_1001302B8 != -1) {
    swift_once(&qword_1001302B8, sub_10008736C);
  }
  uint64_t v56 = qword_100135720;
  uint64_t v57 = qword_100135730;
  uint64_t v58 = sub_10001DEBC(v320, v316);
  uint64_t v66 = sub_1000389CC( (uint64_t)v58,  v59,  v60,  v61,  v62,  v63,  v64,  v65,  v227,  v241,  v257,  v269,  v270,  v271,  v272,  v273,  v274,  v275,  v276,  v277,  v278,  v279,  v280,  v281,  v282,  v283,  v284,  v285,  v286,  v287,  v288,  v289,  v290,  v291,  v292,  (uint64_t)v293,  (uint64_t)v294,  v295,  v296,  v297,  v298,  (uint64_t)v299,  v300,  v301,  v302,  v303,  v304,  v305,  v306,
          v307,
          v308,
          v309,
          v310,
          v311,
          v312,
          v313,
          v314,
          v315,
          v316[0]);
  uint64_t v69 = sub_1000887B4((uint64_t)v66, v67, v68, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for Data);
  sub_10008876C( v69,  v70,  v71,  v72,  v73,  v74,  v75,  v76,  v228,  v242,  v258,  v269,  v270,  v271,  v272,  v273,  v274,  v275,  v276,  v277,  v278,  v279,  v280,  v281,  v282,  v283,  v284,  v285,  v286,  v287,  v288,  v289,  v290,  v291,  v292,  (uint64_t)v293,  (uint64_t)v294,  v295,  v296,  v297,  v298,  (uint64_t)v299,  v300,  v301,  v302,  v303,  v304,  v305,  v306,
    v307,
    v308,
    v309,
    v310,
    v311,
    v312,
    v313,
    v314,
    v315,
    v316[0]);
  uint64_t v77 = sub_100008DB0((uint64_t *)&unk_1001323D0);
  *(void *)(v34 + 96) = v77;
  *(void *)(v34 + 104) = &protocol witness table for Expression<A>;
  *(void *)(v34 + 72) = v56;
  *(void *)(v34 + 80) = v48;
  *(void *)(v34 + 88) = v57;
  if (qword_1001302C0 != -1) {
    swift_once(&qword_1001302C0, sub_1000873D4);
  }
  uint64_t v78 = qword_100135738;
  uint64_t v79 = unk_100135740;
  id v80 = sub_10001DEBC(v320, v316);
  sub_1000389CC( (uint64_t)v80,  v81,  v82,  v83,  v84,  v85,  v86,  v87,  v229,  v243,  v259,  v269,  v270,  v271,  v272,  v273,  v274,  v275,  v276,  v277,  v278,  v279,  v280,  v281,  v282,  v283,  v284,  v285,  v286,  v287,  v288,  v289,  v290,  v291,  v292,  (uint64_t)v293,  (uint64_t)v294,  v295,  v296,  v297,  v298,  (uint64_t)v299,  v300,  v301,  v302,  v303,  v304,  v305,  v306,
    v307,
    v308,
    v309,
    v310,
    v311,
    v312,
    v313,
    v314,
    v315,
    v316[0]);
  uint64_t v88 = sub_100008DB0((uint64_t *)&unk_100130C00);
  uint64_t v91 = sub_1000887A0(v88, v89, v90, (uint64_t)&type metadata for Table, v88);
  sub_10008876C( v91,  v92,  v93,  v94,  v95,  v96,  v97,  v98,  v230,  v244,  v260,  v269,  v270,  v271,  v272,  v273,  v274,  v275,  v276,  v277,  v278,  v279,  v280,  v281,  v282,  v283,  v284,  v285,  v286,  v287,  v288,  v289,  v290,  v291,  v292,  (uint64_t)v293,  (uint64_t)v294,  v295,  v296,  v297,  v298,  (uint64_t)v299,  v300,  v301,  v302,  v303,  v304,  v305,  v306,
    v307,
    v308,
    v309,
    v310,
    v311,
    v312,
    v313,
    v314,
    v315,
    v316[0]);
  *(void *)(v34 + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = sub_100008DB0(&qword_100131138);
  *(void *)(v34 + 144) = &protocol witness table for Expression<A>;
  *(void *)(v34 + 112) = v78;
  *(void *)(v34 + 120) = v48;
  *(void *)(v34 + 128) = v79;
  if (qword_1001302C8 != -1) {
    swift_once(&qword_1001302C8, sub_10008743C);
  }
  uint64_t v99 = qword_100135750;
  uint64_t v100 = *(void *)algn_100135758;
  int v101 = sub_10001DEBC(v320, v316);
  id v109 = sub_1000389CC( (uint64_t)v101,  v102,  v103,  v104,  v105,  v106,  v107,  v108,  v231,  v245,  v261,  v269,  v270,  v271,  v272,  v273,  v274,  v275,  v276,  v277,  v278,  v279,  v280,  v281,  v282,  v283,  v284,  v285,  v286,  v287,  v288,  v289,  v290,  v291,  v292,  (uint64_t)v293,  (uint64_t)v294,  v295,  v296,  v297,  v298,  (uint64_t)v299,  v300,  v301,  v302,  v303,  v304,  v305,  v306,
           v307,
           v308,
           v309,
           v310,
           v311,
           v312,
           v313,
           v314,
           v315,
           v316[0]);
  uint64_t v112 = sub_1000887A0((uint64_t)v109, v110, v111, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for Data);
  sub_10008876C( v112,  v113,  v114,  v115,  v116,  v117,  v118,  v119,  v232,  v246,  v262,  v269,  v270,  v271,  v272,  v273,  v274,  v275,  v276,  v277,  v278,  v279,  v280,  v281,  v282,  v283,  v284,  v285,  v286,  v287,  v288,  v289,  v290,  v291,  v292,  (uint64_t)v293,  (uint64_t)v294,  v295,  v296,  v297,  v298,  (uint64_t)v299,  v300,  v301,  v302,  v303,  v304,  v305,  v306,
    v307,
    v308,
    v309,
    v310,
    v311,
    v312,
    v313,
    v314,
    v315,
    v316[0]);
  *(void *)(v34 + 176) = v77;
  *(void *)(v34 + 184) = &protocol witness table for Expression<A>;
  *(void *)(v34 + 152) = v99;
  *(void *)(v34 + 160) = v48;
  *(void *)(v34 + 168) = v100;
  if (qword_100130148 != -1) {
    swift_once(&qword_100130148, sub_1000351A8);
  }
  uint64_t v120 = qword_100135330;
  uint64_t v121 = *(void *)algn_100135338;
  uint64_t v122 = qword_100135340;
  sub_10001DEBC(v320, v317);
  sub_1000389C4();
  uint64_t v124 = sub_100088788(v120, v121, v122, v123, (uint64_t)&type metadata for String);
  uint64_t v126 = v125;
  uint64_t v128 = v127;
  sub_1000887F8();
  *(void *)(v34 + 216) = v32;
  *(void *)(v34 + 224) = &protocol witness table for Expression<A>;
  *(void *)(v34 + 192) = v124;
  *(void *)(v34 + 200) = v126;
  *(void *)(v34 + 208) = v128;
  if (qword_1001303B8 != -1) {
    swift_once(&qword_1001303B8, sub_1000BE150);
  }
  uint64_t v129 = qword_100135B60;
  uint64_t v130 = *(void *)algn_100135B68;
  uint64_t v131 = qword_100135B70;
  sub_10001DEBC(v320, v318);
  sub_1000887F0();
  uint64_t v133 = sub_100088788(v129, v130, v131, v132, (uint64_t)&type metadata for Int);
  uint64_t v135 = v134;
  sub_1000887D8();
  *(void *)(v34 + 256) = sub_100008DB0(&qword_100131988);
  *(void *)(v34 + 264) = &protocol witness table for Expression<A>;
  *(void *)(v34 + 232) = v133;
  *(void *)(v34 + 240) = v135;
  *(void *)(v34 + 248) = v130;
  SchemaType.select(_:_:)( (uint64_t)&v295,  v34,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table);
  swift_setDeallocating(v34);
  sub_100058868();
  sub_10000AC58(&v295);
  sub_10001DEBC(v319, v320);
  uint64_t v290 = sub_100038A2C((uint64_t)&unk_1001255D8);
  sub_10001DEBC((void *)(v290 + 16), v317);
  int v136 = sub_10001DEBC(&v295, v316);
  sub_1000389CC( (uint64_t)v136,  v137,  v138,  v139,  v140,  v141,  v142,  v143,  v233,  v247,  v263,  v269,  v270,  v271,  v272,  v273,  v274,  v275,  v276,  v277,  v278,  v279,  v280,  v281,  v282,  v283,  v284,  v285,  v286,  v287,  v288,  v289,  v290,  v291,  v292,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table,  v295,  v296,  v297,  v298,  (uint64_t)v299,  v300,  v301,  v302,  v303,  v304,  v305,  v306,
    v307,
    v308,
    v309,
    v310,
    v311,
    v312,
    v313,
    v314,
    v315,
    v316[0]);
  sub_1000389C4();
  uint64_t v144 = sub_1000887C8();
  uint64_t v149 = sub_100088788(v144, v145, v146, v147, v148);
  sub_100088780( v149,  v150,  v151,  v152,  v153,  v154,  v155,  v156,  v234,  v248,  v264,  v269,  v270,  v271,  v272,  v273,  v274,  v275,  v276,  v277,  v278,  v279,  v280,  v281,  v282,  v283,  v284,  v285,  v286,  v287,  v288,  v289,  v290,  v291,  v292,  (uint64_t)v293,  (uint64_t)v294,  v295,  v296,  v297,  v298,  (uint64_t)v299,  v300,  v301,  v302,  v303,  v304,  v305,  v306,
    v307,
    v308,
    v309,
    v310,
    v311,
    v312,
    v313,
    v314,
    v315,
    v316[0]);
  if (qword_100130138 != -1) {
    swift_once(&qword_100130138, sub_1000350E4);
  }
  uint64_t v157 = qword_100135300;
  uint64_t v158 = *(void *)algn_100135308;
  uint64_t v159 = qword_100135310;
  sub_10001DEBC(&v295, v317);
  sub_1000389C4();
  sub_1000887E4(v157, v158, v159, (uint64_t)&type metadata for Table);
  sub_1000887F8();
  == infix<A>(_:_:)();
  uint64_t v249 = v160;
  uint64_t v162 = v161;
  uint64_t v164 = v163;
  sub_10001DEC4();
  sub_10001BE7C();
  sub_100011958();
  swift_bridgeObjectRelease();
  uint64_t v165 = qword_100135708;
  uint64_t v166 = unk_100135710;
  uint64_t v167 = qword_100135718;
  uint64_t v168 = sub_10001DEBC(&v295, v316);
  sub_1000389CC( (uint64_t)v168,  v169,  v170,  v171,  v172,  v173,  v174,  v175,  (uint64_t)&protocol witness table for String,  v249,  v265,  v269,  v270,  v271,  v272,  v273,  v274,  v275,  v276,  v277,  v278,  v279,  v280,  v281,  v282,  v283,  v284,  v285,  v286,  v287,  v288,  v289,  v290,  v291,  v292,  (uint64_t)v293,  (uint64_t)v294,  v295,  v296,  v297,  v298,  (uint64_t)v299,  v300,  v301,  v302,  v303,  v304,  v305,  v306,
    v307,
    v308,
    v309,
    v310,
    v311,
    v312,
    v313,
    v314,
    v315,
    v316[0]);
  uint64_t v176 = sub_1000887E4(v165, v166, v167, (uint64_t)&type metadata for Table);
  sub_100088780( v176,  v177,  v178,  v179,  v180,  v181,  v182,  v183,  v235,  v250,  v266,  v269,  v270,  v271,  v272,  v273,  v274,  v275,  v276,  v277,  v278,  v279,  v280,  v281,  v282,  v283,  v284,  v285,  v286,  v287,  v288,  v289,  v290,  v291,  v292,  (uint64_t)v293,  (uint64_t)v294,  v295,  v296,  v297,  v298,  (uint64_t)v299,  v300,  v301,  v302,  v303,  v304,  v305,  v306,
    v307,
    v308,
    v309,
    v310,
    v311,
    v312,
    v313,
    v314,
    v315,
    v316[0]);
  if (qword_100130140 != -1) {
    swift_once(&qword_100130140, sub_100035108);
  }
  uint64_t v184 = qword_100135318;
  uint64_t v185 = unk_100135320;
  uint64_t v186 = qword_100135328;
  sub_10001DEBC(&v295, v317);
  QueryType.namespace<A>(_:)(v184, v185, v186, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
  sub_1000887F8();
  == infix<A>(_:_:)();
  uint64_t v188 = v187;
  uint64_t v190 = v189;
  uint64_t v192 = v191;
  swift_bridgeObjectRelease();
  sub_10001DEC4();
  swift_bridgeObjectRelease();
  sub_100011958();
  && infix(_:_:)(v251, v162, v164, v188, v190, v192);
  uint64_t v194 = v193;
  uint64_t v196 = v195;
  uint64_t v198 = v197;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BE7C();
  swift_bridgeObjectRelease();
  sub_10001DEBC(&v269, v319);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.join(_:_:on:)( 1,  &v290,  v194,  v196,  v198,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table,  (uint64_t)&v295);
  sub_10001191C(v198);
  sub_10001191C(v196);
  sub_10001DAF0(v319);
  sub_10000AC58(&v290);
  sub_10001DEBC(v320, &v295);
  unint64_t v293 = &type metadata for Table;
  unint64_t v294 = &protocol witness table for Table;
  uint64_t v290 = sub_100038A2C((uint64_t)&unk_1001255D8);
  sub_10001DEBC((void *)(v290 + 16), v318);
  sub_10001DEBC(&v269, v316);
  sub_1000887F0();
  uint64_t v199 = sub_1000887C8();
  uint64_t v202 = QueryType.namespace<A>(_:)( v199,  v200,  v201,  (uint64_t)&type metadata for Table,  (uint64_t)&type metadata for String);
  sub_100088780( v202,  v203,  v204,  v205,  v206,  v207,  v208,  v209,  (uint64_t)&protocol witness table for String,  v251,  v267,  v269,  v270,  v271,  v272,  v273,  v274,  v275,  v276,  v277,  v278,  v279,  v280,  v281,  v282,  v283,  v284,  v285,  v286,  v287,  v288,  v289,  v290,  v291,  v292,  (uint64_t)v293,  (uint64_t)v294,  v295,  v296,  v297,  v298,  (uint64_t)v299,  v300,  v301,  v302,  v303,  v304,  v305,  v306,
    v307,
    v308,
    v309,
    v310,
    v311,
    v312,
    v313,
    v314,
    v315,
    v316[0]);
  if (qword_100130398 != -1) {
    swift_once(&qword_100130398, sub_1000BDF38);
  }
  uint64_t v210 = qword_100135B30;
  uint64_t v211 = *(void *)algn_100135B38;
  uint64_t v212 = qword_100135B40;
  sub_10001DEBC(&v269, v318);
  QueryType.namespace<A>(_:)(v210, v211, v212, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
  sub_1000887D8();
  == infix<A>(_:_:)();
  uint64_t v214 = v213;
  uint64_t v216 = v215;
  uint64_t v218 = v217;
  swift_bridgeObjectRelease();
  sub_10001BE7C();
  swift_bridgeObjectRelease();
  sub_100011958();
  v268[3] = (uint64_t)&type metadata for Table;
  v268[4] = (uint64_t)&protocol witness table for Table;
  uint64_t v219 = sub_100038A2C((uint64_t)&unk_1001255D8);
  uint64_t v220 = v219 + 16;
  *uint64_t v268 = v219;
  sub_10001DEBC(&v269, v320);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.join(_:_:on:)( 1,  &v290,  v214,  v216,  v218,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table,  v220);
  sub_10001191C(v218);
  sub_10001191C(v216);
  sub_10001DAF0(v320);
  return sub_10000AC58(&v290);
}

uint64_t sub_100087EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008DB0(&qword_100130BC0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001302A8 != -1) {
    swift_once(&qword_1001302A8, sub_1000872C8);
  }
  sub_10001DECC((uint64_t)&qword_1001356F0);
  Row.get<A>(_:)();
  uint64_t v8 = v35;
  uint64_t v7 = v36;
  if (qword_1001303B8 != -1) {
    swift_once(&qword_1001303B8, sub_1000BE150);
  }
  sub_10001DECC((uint64_t)&qword_100135B60);
  sub_10008875C();
  uint64_t v9 = v35;
  if (qword_100130148 != -1) {
    swift_once(&qword_100130148, sub_1000351A8);
  }
  sub_10001DECC((uint64_t)&qword_100135330);
  sub_10008875C();
  sub_100011AB4(v11, (unint64_t *)&unk_100132490, &OBJC_CLASS___LNActionMetadata_ptr);
  uint64_t v13 = v35;
  uint64_t v12 = v36;
  uint64_t v14 = type metadata accessor for URL(0LL);
  sub_100009E60((uint64_t)v6, 1LL, 1LL, v14);
  uint64_t v15 = (void *)static LNActionMetadata.fromJSON(_:bundleMetadataVersion:bundleURL:effectiveBundleIdentifier:)( v13,  v12,  v9,  v6,  0LL);
  sub_10000C218((uint64_t)v6, &qword_100130BC0);
  swift_bridgeObjectRelease();
  if (qword_1001302B8 != -1) {
    swift_once(&qword_1001302B8, sub_10008736C);
  }
  sub_10001DECC((uint64_t)&qword_100135720);
  sub_10008875C();
  uint64_t v16 = v35;
  unint64_t v17 = v36;
  sub_100088374(v35, v36);
  sub_10000A1D8(v16, v17);
  objc_allocWithZone(&OBJC_CLASS___LNAction);
  swift_bridgeObjectRetain();
  id v18 = v15;
  id v19 = sub_1000884F8(v18);
  if (qword_1001302C0 != -1) {
    swift_once(&qword_1001302C0, sub_1000873D4);
  }
  uint64_t v20 = sub_10001DECC((uint64_t)&qword_100135738);
  Row.get<A>(_:)( v20,  v21,  v22,  a1,  a2,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String,  v23,  v34[0],  (void *)v34[1],  v35,  v36,  v37,  v38,  v39,  v40,  v41,  v42,  v43,  v44);
  uint64_t v25 = v35;
  uint64_t v24 = v36;
  if (qword_1001302C8 != -1) {
    swift_once(&qword_1001302C8, sub_10008743C);
  }
  sub_10001DECC((uint64_t)&qword_100135750);
  sub_10008875C();
  uint64_t v26 = v35;
  unint64_t v27 = v36;
  uint64_t v29 = sub_100011AB4(v28, &qword_100131120, &OBJC_CLASS___NSKeyedUnarchiver_ptr);
  uint64_t v30 = sub_100011AB4(v29, qword_100132E78, &OBJC_CLASS___LNRelevantContext_ptr);
  uint64_t v31 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v30, v26, v27, v30);
  if (v31)
  {
    sub_10000A1D8(v26, v27);
    id v32 = objc_allocWithZone(&OBJC_CLASS___LNRelevantIntent);
    id v33 = sub_100088598(v8, v7, v19, v25, v24, v31);

    return (uint64_t)v33;
  }

  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000001DLL,  0x80000001000FAFE0LL,  "LinkDaemon/LNRelevantIntentRecord.swift",  39LL,  2LL,  145LL,  0);
    __break(1u);
  }

  return result;
}

uint64_t sub_100088374(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100008DB0(&qword_100131128);
  uint64_t v6 = swift_allocObject(v5, 48LL, 7LL);
  *(_OWORD *)(v6 + 16) = xmmword_1000F57D0;
  *(void *)(v6 + 32) = sub_10000A1A0(0LL, (unint64_t *)&qword_100131130, &OBJC_CLASS___NSArray_ptr);
  *(void *)(v6 + 40) = sub_10000A1A0(0LL, &qword_1001309A8, &OBJC_CLASS___LNProperty_ptr);
  static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)(v9, v6, a1, a2);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v2)
  {
    if (v9[3])
    {
      uint64_t v8 = sub_100008DB0(&qword_100131EC8);
    }

    else
    {
      sub_10000C218((uint64_t)v9, &qword_100130EA0);
    }

    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000026LL,  0x80000001000FB000LL,  "LinkDaemon/LNRelevantIntentRecord.swift",  39LL,  2LL,  163LL,  0);
    __break(1u);
  }

  return result;
}

id sub_1000884F8(void *a1)
{
  NSString v3 = String._bridgeToObjectiveC()();
  uint64_t v4 = sub_100011958();
  sub_100011AB4(v4, &qword_1001309A8, &OBJC_CLASS___LNProperty_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  sub_10001198C();
  id v6 = [v1 initWithMetadata:a1 bundleIdentifier:v3 parameters:isa];

  return v6;
}

id sub_100088598(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v7 = v6;
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (a5)
  {
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a5);
  }

  else
  {
    NSString v13 = 0LL;
  }

  id v14 = [v7 initWithBundleIdentifier:v12 action:a3 widgetKind:v13 context:a6];

  return v14;
}

uint64_t sub_10008864C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_100008E58(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10008868C()
{
  uint64_t v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[13]);
  }

  uint64_t v2 = v0[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    uint64_t v3 = v0[16];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v0[17]);
    }
  }

  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184LL, 7LL);
}

uint64_t sub_100088714(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008DB0((uint64_t *)&unk_100130C00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void sub_10008875C()
{
}

void *sub_10008876C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  return sub_10001DAF0(&a59);
}

void *sub_100088780( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  return sub_10001DAF0(&a59);
}

uint64_t sub_100088788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return QueryType.namespace<A>(_:)(a1, a2, a3, v5, a5);
}

void sub_100088794( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000887A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return QueryType.namespace<A>(_:)(v5, v6, v7, a4, a5);
}

uint64_t sub_1000887B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return QueryType.namespace<A>(_:)(v5, v6, v7, a4, a5);
}

uint64_t sub_1000887C8()
{
  return v0;
}

void *sub_1000887D8()
{
  return sub_10001DAF0(&STACK[0x2E0]);
}

uint64_t sub_1000887E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return QueryType.namespace<A>(_:)(a1, a2, a3, a4, v4);
}

void *sub_1000887F0()
{
  return sub_10001D9AC(&STACK[0x2E0]);
}

void *sub_1000887F8()
{
  return sub_10001DAF0(&STACK[0x238]);
}

uint64_t sub_100088800(uint64_t a1)
{
  return sub_100088850(a1, qword_100135768, &LNLogCategoryExecution);
}

uint64_t sub_100088814(uint64_t a1)
{
  return sub_100088850(a1, qword_100135780, &LNLogCategoryGeneral);
}

uint64_t sub_100088828(uint64_t a1)
{
  return sub_100088850(a1, qword_100135798, &LNLogCategoryMetadata);
}

uint64_t sub_10008883C(uint64_t a1)
{
  return sub_100088850(a1, qword_1001357B0, &LNLogCategoryVocabulary);
}

uint64_t sub_100088850(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_10000A07C(v5, a2);
  sub_100008D98(v5, (uint64_t)a2);
  uint64_t result = *a3;
  if (*a3)
  {
    uint64_t v8 = String.init(cString:)();
    uint64_t result = LNLogSubsystem;
    if (LNLogSubsystem)
    {
      uint64_t v9 = v7;
      uint64_t v10 = String.init(cString:)();
      return Logger.init(subsystem:category:)(v10, v11, v8, v9);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_1000888DC()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A07C(v0, qword_1001357C8);
  sub_100008D98(v0, (uint64_t)qword_1001357C8);
  return Logger.init(subsystem:category:)( 0xD000000000000018LL,  0x80000001000FB050LL,  0x49656D69746E7552LL,  0xED00007365757373LL);
}

uint64_t sub_10008895C(uint64_t *a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for () + 64;
  v4[2] = &unk_1000F6E68;
  uint64_t result = type metadata accessor for LazyTask.State(319LL, a1[10], a1[11], a1[12]);
  if (v3 <= 0x3F)
  {
    v4[3] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 4LL, v4, a1 + 13);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000889F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 80LL);
  uint64_t v5 = type metadata accessor for Result( 0LL,  v4,  *(void *)(*(void *)v1 + 88LL),  &protocol self-conformance witness table for Error);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v9 - v6;
  sub_100088AF8();
  if (v1[40] == 1) {
    sub_1000CABC0( (void (*)(void))sub_1000897F8,  (uint64_t)v1,  v3,  (uint64_t)&type metadata for () + 8,  (uint64_t)&off_100125718);
  }
  return swift_willThrow();
}

void sub_100088AF8()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = type metadata accessor for Result( 0LL,  *(void *)(*(void *)v0 + 80LL),  *(void *)(*(void *)v0 + 88LL),  *(void *)(*(void *)v0 + 96LL));
  sub_1000CABC0((void (*)(void))sub_100089810, v0, v1, v2, (uint64_t)&off_100125718);
}

uint64_t sub_100088B60@<X0>(void (**a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v3 = *a1;
  uint64_t v4 = *((void *)*a1 + 10);
  uint64_t v5 = *((void *)*a1 + 11);
  uint64_t v6 = *((void *)*a1 + 12);
  uint64_t v7 = type metadata accessor for LazyTask.State(0LL, v4, v5, v6);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  NSString v13 = (char *)&v18 - v12;
  id v14 = (char *)a1 + *((void *)v3 + 16);
  swift_beginAccess(v14, v21, 0LL, 0LL);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v14, v7);
  uint64_t v15 = type metadata accessor for Result(0LL, v4, v5, v6);
  uint64_t v16 = v19;
  a1[3]();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL))(v11, v16, v15);
  sub_100009E60((uint64_t)v11, 0LL, 1LL, v15);
  swift_beginAccess(v14, v20, 33LL, 0LL);
  (*(void (**)(char *, char *, uint64_t))(v8 + 40))(v14, v11, v7);
  return swift_endAccess(v20);
}

id *sub_100088D04()
{
  uint64_t v1 = (uint64_t *)*v0;

  swift_release();
  uint64_t v2 = (char *)v0 + *((void *)*v0 + 16);
  uint64_t v3 = type metadata accessor for LazyTask.State(0LL, v1[10], v1[11], v1[12]);
  (*(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  return v0;
}

uint64_t sub_100088D6C()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for LazyTask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000C8B4(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LazyTask);
}

uint64_t type metadata accessor for LazyTask.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000C8B4(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LazyTask.State);
}

uint64_t sub_100088DA8(void *a1)
{
  uint64_t result = type metadata accessor for Result(319LL, a1[2], a1[3], a1[4]);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 0LL, *(void *)(result - 8) + 64LL, 1LL);
    return 0LL;
  }

  return result;
}

uint64_t *sub_100088E04(uint64_t *__dst, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = __dst;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    uint64_t v6 = *(void *)(v4 + 64);
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  uint64_t v7 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    unsigned int v11 = *((unsigned __int8 *)a2 + v6);
    if (v11 > 1)
    {
      memcpy(__dst, a2, v6 + 1);
    }

    else if (v11 == 1)
    {
      (*(void (**)(uint64_t *))(v5 + 16))(__dst);
      *((_BYTE *)v3 + v6) = 1;
    }

    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(__dst);
      *((_BYTE *)v3 + v6) = 0;
    }
  }

  else
  {
    uint64_t v10 = *a2;
    uint64_t *v3 = *a2;
    unint64_t v3 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain(v10);
  }

  return v3;
}

uint64_t sub_100088ED8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8LL);
  unint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = *(void *)(v2 - 8);
  if (*(void *)(v5 + 64) > v4) {
    unint64_t v4 = *(void *)(v5 + 64);
  }
  unsigned int v6 = *(unsigned __int8 *)(result + v4);
  if (v6 <= 1)
  {
    if (v6 == 1) {
      uint64_t v3 = *(void *)(v2 - 8);
    }
    return (*(uint64_t (**)(void))(v3 + 8))();
  }

  return result;
}

void *sub_100088F14(void *__dst, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    uint64_t v6 = *(void *)(v4 + 64);
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  unsigned int v7 = a2[v6];
  if (v7 > 1)
  {
    memcpy(__dst, a2, v6 + 1);
  }

  else if (v7 == 1)
  {
    (*(void (**)(void *))(v5 + 16))(__dst);
    *((_BYTE *)__dst + v6) = 1;
  }

  else
  {
    (*(void (**)(void *))(v4 + 16))(__dst);
    *((_BYTE *)__dst + v6) = 0;
  }

  return __dst;
}

unsigned __int8 *sub_100088FA4(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(void *)(v6 - 8);
  if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
    uint64_t v9 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v9 = *(void *)(v8 + 64);
  }
  unsigned int v10 = __dst[v9];
  unsigned int v11 = __src[v9];
  if (v10 > 1)
  {
    if (v11 <= 1)
    {
      if (v11 != 1)
      {
LABEL_30:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(__dst, __src, v5);
        __dst[v9] = 0;
        return __dst;
      }

      goto LABEL_20;
    }

void *sub_100089120(void *__dst, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    uint64_t v6 = *(void *)(v4 + 64);
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  unsigned int v7 = a2[v6];
  if (v7 > 1)
  {
    memcpy(__dst, a2, v6 + 1);
  }

  else if (v7 == 1)
  {
    (*(void (**)(void *))(v5 + 32))(__dst);
    *((_BYTE *)__dst + v6) = 1;
  }

  else
  {
    (*(void (**)(void *))(v4 + 32))(__dst);
    *((_BYTE *)__dst + v6) = 0;
  }

  return __dst;
}

unsigned __int8 *sub_1000891B0(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(void *)(v6 - 8);
  if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
    uint64_t v9 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v9 = *(void *)(v8 + 64);
  }
  unsigned int v10 = __dst[v9];
  unsigned int v11 = __src[v9];
  if (v10 > 1)
  {
    if (v11 <= 1)
    {
      if (v11 != 1)
      {
LABEL_30:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(__dst, __src, v5);
        __dst[v9] = 0;
        return __dst;
      }

      goto LABEL_20;
    }

uint64_t sub_10008932C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8LL) + 64LL);
  if (v3 <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL)) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL);
  }
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_21;
  }
  unint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  unsigned int v8 = ((a2 + ~(-1 << v5) - 253) >> v5) + 1;
  if (HIWORD(v8))
  {
    int v6 = *(_DWORD *)(a1 + v4);
    if (v6) {
      goto LABEL_14;
    }
LABEL_21:
    unsigned int v10 = *(unsigned __int8 *)(a1 + v3);
    if (v10 >= 2) {
      unsigned int v11 = (v10 ^ 0xFF) + 1;
    }
    else {
      unsigned int v11 = 0;
    }
    if (v11 >= 2) {
      return v11 - 1;
    }
    else {
      return 0LL;
    }
  }

  if (v8 > 0xFF)
  {
    int v6 = *(unsigned __int16 *)(a1 + v4);
    if (*(_WORD *)(a1 + v4)) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }

  if (v8 < 2) {
    goto LABEL_21;
  }
LABEL_6:
  int v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4)) {
    goto LABEL_21;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (!(_DWORD)v4) {
    return (v9 + 254);
  }
  return ((uint64_t (*)(void))((char *)&loc_1000893F4 + 4 * byte_1000F6E2A[(v4 - 1)]))();
}

void sub_10008944C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8LL) + 64LL);
  if (*(void *)(*(void *)(*(void *)(a4 + 24) - 8LL) + 64LL) > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8LL) + 64LL);
  }
  size_t v6 = v5 + 1;
  char v7 = 8 * (v5 + 1);
  if (a3 < 0xFE)
  {
    unsigned int v8 = 0;
  }

  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << v7) - 253) >> v7) + 1;
    if (HIWORD(v10))
    {
      unsigned int v8 = &dword_100000004;
    }

    else if (v10 >= 0x100)
    {
      unsigned int v8 = 2;
    }

    else
    {
      unsigned int v8 = v10 > 1;
    }
  }

  else
  {
    unsigned int v8 = &_mh_execute_header.magic + 1;
  }

  if (a2 <= 0xFD) {
    __asm { BR              X11 }
  }

  unsigned int v9 = a2 - 254;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      int v11 = v9 & ~(-1 << v7);
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v11;
        *((_BYTE *)a1 + 2) = BYTE2(v11);
      }

      else if ((_DWORD)v6 == 2)
      {
        *a1 = v11;
      }

      else
      {
        *(_BYTE *)a1 = v11;
      }
    }
  }

  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v9;
  }

  __asm { BR              X10 }

uint64_t sub_1000895F4(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 64LL);
  if (*(void *)(*(void *)(*(void *)(a2 + 24) - 8LL) + 64LL) > v2) {
    unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 24) - 8LL) + 64LL);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + v2);
  if (v3 >= 2) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0LL;
  }
}

void *sub_100089624(void *result, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL);
  if (*(void *)(*(void *)(*(void *)(a3 + 24) - 8LL) + 64LL) > v3) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8LL) + 64LL);
  }
  if (a2 > 0xFE)
  {
    size_t v4 = (v3 + 1);
    if ((_DWORD)v4)
    {
      else {
        int v5 = 4;
      }
      bzero(result, v4);
      __asm { BR              X10 }
    }
  }

  else if (a2)
  {
    *((_BYTE *)result + v3) = -(char)a2;
  }

  return result;
}

id sub_1000896F8()
{
  return *(id *)(v0 + 16);
}

uint64_t sub_100089700(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)a1 + 80LL);
  uint64_t v3 = *(void *)(*(void *)a1 + 88LL);
  uint64_t v4 = type metadata accessor for LazyTask.State( 0LL,  v2,  v3,  (uint64_t)&protocol self-conformance witness table for Error);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = &v12[-v6 - 8];
  uint64_t v8 = type metadata accessor for Result(0LL, v2, v3, &protocol self-conformance witness table for Error);
  sub_100009E60((uint64_t)v7, 1LL, 1LL, v8);
  uint64_t v9 = a1 + *(void *)(*(void *)a1 + 128LL);
  swift_beginAccess(v9, v12, 33LL, 0LL);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v5 + 40))(v9, v7, v4);
  return swift_endAccess(v12);
}

uint64_t sub_1000897F8()
{
  return sub_100089700(v0);
}

uint64_t sub_100089810@<X0>(uint64_t a1@<X8>)
{
  return sub_100088B60(v1, a1);
}

void sub_100089828(void (*a1)(uint64_t *__return_ptr, void *, __n128), uint64_t a2, uint64_t a3)
{
  uint64_t v36 = v35[0];
  int64_t v4 = v35[3];
  unint64_t v5 = v35[4];
  uint64_t v26 = v35[1];
  int64_t v27 = (unint64_t)(v35[2] + 64LL) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v6 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v5)
    {
      unint64_t v7 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v8 = v7 | (v4 << 6);
      goto LABEL_15;
    }

    int64_t v9 = v4 + 1;
    if (__OFADD__(v4, 1LL)) {
      break;
    }
    if (v9 >= v27) {
      goto LABEL_29;
    }
    unint64_t v10 = *(void *)(v26 + 8 * v9);
    if (!v10)
    {
      int64_t v11 = v4 + 2;
      if (v4 + 2 >= v27) {
        goto LABEL_29;
      }
      unint64_t v10 = *(void *)(v26 + 8 * v11);
      if (v10) {
        goto LABEL_13;
      }
      int64_t v11 = v4 + 3;
      if (v4 + 3 >= v27) {
        goto LABEL_29;
      }
      unint64_t v10 = *(void *)(v26 + 8 * v11);
      if (v10) {
        goto LABEL_13;
      }
      int64_t v11 = v4 + 4;
      if (v4 + 4 >= v27) {
        goto LABEL_29;
      }
      unint64_t v10 = *(void *)(v26 + 8 * v11);
      if (v10)
      {
LABEL_13:
        int64_t v9 = v11;
      }

      else
      {
        int64_t v9 = v4 + 5;
        if (v4 + 5 >= v27) {
          goto LABEL_29;
        }
        unint64_t v10 = *(void *)(v26 + 8 * v9);
        if (!v10)
        {
          int64_t v23 = v4 + 6;
          while (v23 < v27)
          {
            unint64_t v10 = *(void *)(v26 + 8 * v23++);
            if (v10)
            {
              int64_t v9 = v23 - 1;
              goto LABEL_14;
            }
          }

uint64_t sub_100089ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = v4;
  uint64_t v9 = sub_100008DB0(&qword_100132F80);
  uint64_t v76 = *(void *)(v9 - 8);
  double v10 = __chkstk_darwin(v9);
  uint64_t v77 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Locale(0LL, v10);
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = __chkstk_darwin(v12);
  int64_t v16 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a4)
  {
    uint64_t v17 = a4;
  }

  else
  {
    uint64_t v18 = static Locale.current.getter(v14);
    a3 = Locale.identifier.getter(v18);
    uint64_t v17 = v19;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }

  Class isa = (Class)objc_msgSend(v5, "localizations", swift_bridgeObjectRetain().n128_f64[0]);
  if (!isa)
  {
    static Array._unconditionallyBridgeFromObjectiveC(_:)(0LL, &type metadata for String);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }

  uint64_t v21 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle);
  uint64_t v22 = sub_100008DB0((uint64_t *)&unk_100132130);
  uint64_t v23 = sub_10000C254(v22, 48LL);
  *(_OWORD *)(v23 + 16) = xmmword_1000F5520;
  *(void *)(v23 + 32) = a3;
  *(void *)(v23 + 40) = v17;
  Class v24 = Array._bridgeToObjectiveC()().super.isa;
  sub_10001DF40();
  id v25 = [v21 preferredLocalizationsFromArray:isa forPreferences:v24];

  uint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v25, &type metadata for String);
  if (!*(void *)(v26 + 16))
  {
    sub_10001198C();
    uint64_t v28 = sub_100008DB0((uint64_t *)&unk_100132780);
    return Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v28,  &protocol witness table for String);
  }

  swift_bridgeObjectRetain();
  sub_10001198C();
  if (a2) {
    NSString v27 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v27 = 0LL;
  }
  NSString v30 = String._bridgeToObjectiveC()();
  sub_10000ADB0();
  id v31 = [v5 localizedStringsForTable:v27 localization:v30];

  uint64_t v32 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v31,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  uint64_t v33 = sub_100008DB0(&qword_100132F88);
  uint64_t v34 = v77;
  uint64_t v35 = Regex.init(_regexString:version:)(0xD00000000000002CLL, 0x80000001000FB080LL, 1LL, v33);
  __chkstk_darwin(v35);
  *(&v74 - 2) = (uint64_t)v34;
  swift_bridgeObjectRetain();
  sub_100089828((void (*)(uint64_t *__return_ptr, void *, __n128))sub_10008A34C, (uint64_t)(&v74 - 4), v32);
  uint64_t v37 = v36;
  sub_10000ADB0();
  id v80 = v37;
  swift_bridgeObjectRetain();
  sub_10008A41C(&v80);
  sub_10001198C();
  uint64_t v38 = v80[2];
  if (!v38)
  {
    __int128 v29 = _swiftEmptyDictionarySingleton;
LABEL_36:
    (*(void (**)(char *, uint64_t))(v76 + 8))(v77, v9);
    swift_release();
    sub_10000ADB0();
    return (uint64_t)v29;
  }

  uint64_t v75 = v9;
  __int128 v29 = _swiftEmptyDictionarySingleton;
  uint64_t v74 = swift_retain();
  uint64_t v39 = (uint64_t *)(v74 + 64);
  uint64_t v78 = v32;
  while (1)
  {
    if (!*(void *)(v32 + 16)) {
      goto LABEL_33;
    }
    uint64_t v40 = *(v39 - 1);
    uint64_t v41 = *v39;
    uint64_t v42 = *(v39 - 4);
    uint64_t v43 = *(v39 - 3);
    swift_bridgeObjectRetain_n(v43, 2LL);
    sub_10001C1BC();
    uint64_t v44 = sub_100015F98(v42, v43);
    if ((v45 & 1) == 0)
    {
      sub_10001DF40();
      swift_bridgeObjectRelease_n(v43, 2LL);
      goto LABEL_33;
    }

    uint64_t v46 = (uint64_t *)(*(void *)(v32 + 56) + 16 * v44);
    uint64_t v47 = *v46;
    uint64_t v48 = v46[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v49 = v29[2];
    sub_10001C1BC();
    if (v49)
    {
      uint64_t v50 = sub_10008BF48(v40);
      uint64_t v51 = _swiftEmptyArrayStorage;
      if ((v52 & 1) != 0)
      {
        uint64_t v51 = *(void **)(v29[7] + 8 * v50);
        swift_bridgeObjectRetain();
      }
    }

    else
    {
      uint64_t v51 = _swiftEmptyArrayStorage;
    }

    sub_10001DF40();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v51);
    uint64_t v79 = v40;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10008BF3C();
      uint64_t v51 = v71;
    }

    unint64_t v54 = v51[2];
    if (v54 >= v51[3] >> 1)
    {
      sub_10008BF3C();
      uint64_t v51 = v72;
    }

    _OWORD v51[2] = v54 + 1;
    uint64_t v55 = &v51[2 * v54];
    v55[4] = v47;
    v55[5] = v48;
    sub_10001C1BC();
    char v56 = swift_isUniquelyReferenced_nonNull_native(v29);
    id v80 = v29;
    uint64_t v57 = sub_10008BF48(v79);
    uint64_t v59 = v29[2];
    BOOL v60 = (v58 & 1) == 0;
    Swift::Int v61 = v59 + v60;
    if (__OFADD__(v59, v60)) {
      break;
    }
    unint64_t v62 = v57;
    char v63 = v58;
    sub_100008DB0(&qword_100132BD0);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v56, v61))
    {
      uint64_t v64 = sub_100015F98(v79, v41);
      if ((v63 & 1) != (v65 & 1)) {
        goto LABEL_40;
      }
      unint64_t v62 = v64;
    }

    __int128 v29 = v80;
    if ((v63 & 1) != 0)
    {
      uint64_t v66 = v80[7];
      swift_bridgeObjectRelease();
      *(void *)(v66 + 8 * v62) = v51;
    }

    else
    {
      v80[(v62 >> 6) + 8] |= 1LL << v62;
      uint64_t v67 = (void *)(v29[6] + 16 * v62);
      void *v67 = v79;
      v67[1] = v41;
      *(void *)(v29[7] + 8 * v62) = v51;
      uint64_t v68 = v29[2];
      BOOL v69 = __OFADD__(v68, 1LL);
      uint64_t v70 = v68 + 1;
      if (v69) {
        goto LABEL_39;
      }
      v29[2] = v70;
      sub_10001C1BC();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v41, 2LL);
    swift_bridgeObjectRelease();
    uint64_t v32 = v78;
LABEL_33:
    v39 += 5;
    if (!--v38)
    {
      swift_release();
      uint64_t v9 = v75;
      goto LABEL_36;
    }
  }

  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_10008A0AC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100008DB0(&qword_100132F98);
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100008DB0(&qword_100132FA0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *a1;
  uint64_t v12 = a1[1];
  uint64_t v14 = sub_100008DB0(&qword_100132F80);
  Regex.wholeMatch(in:)(v13, v12, v14, v15);
  if (v2)
  {
    swift_errorRelease(v2);
    sub_100009E60((uint64_t)v7, 1LL, 1LL, v8);
LABEL_4:
    uint64_t result = sub_10008B940((uint64_t)v7);
LABEL_5:
    *(void *)(a2 + 32) = 0LL;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }

  uint64_t v27 = v13;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
  swift_getKeyPath(&unk_1000F6ED0);
  Regex.Match.subscript.getter(&v28);
  swift_release();
  uint64_t v18 = v28;
  uint64_t v17 = v29;
  if (!((v29 ^ v28) >> 14))
  {
    swift_bridgeObjectRelease();
LABEL_13:
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    goto LABEL_5;
  }

  uint64_t v26 = v30;
  uint64_t v32 = v31;
  uint64_t v19 = (unsigned __int8 *)sub_10008B9D0(v28, v29, (unint64_t)v30, v31, 10LL);
  if ((v20 & 0x100) != 0)
  {
    uint64_t v26 = sub_10008B100(v18, v17, (uint64_t)v26, v32, 10LL);
    char v21 = v22;
  }

  else
  {
    char v21 = v20;
    uint64_t v26 = v19;
  }

  swift_bridgeObjectRelease();
  if ((v21 & 1) != 0) {
    goto LABEL_13;
  }
  swift_getKeyPath(&unk_1000F6EF0);
  swift_bridgeObjectRetain();
  Regex.Match.subscript.getter(&v28);
  swift_release();
  uint64_t v23 = static String._fromSubstring(_:)(v28, v29, v30, v31);
  uint64_t v25 = v24;
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  *(void *)a2 = v27;
  *(void *)(a2 + 8) = v12;
  *(void *)(a2 + 16) = v26;
  *(void *)(a2 + 24) = v23;
  *(void *)(a2 + 32) = v25;
  return result;
}

uint64_t sub_10008A34C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10008A0AC(a1, a2);
}

void *sub_10008A364(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_100008DB0(&qword_100130B00);
  uint64_t v5 = (void *)sub_10000C254(v4, v2 + 32);
  size_t v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_10008A3C4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = a1 >> 16;
  if ((a3 & 0x1000000000000000LL) == 0 || (a2 & 0x800000000000000LL) != 0)
  {
    uint64_t v9 = String.UTF16View.index(_:offsetBy:)(15LL, v5, a2);
    sub_10008BF24(v9);
    return v10 | 4;
  }

  else
  {
    uint64_t v6 = String.UTF8View._foreignIndex(_:offsetBy:)(15LL, v5);
    sub_10008BF24(v6);
    return v7 | 8;
  }

void sub_10008A41C(void *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_10008B92C();
    uint64_t v2 = v3;
  }

  uint64_t v4 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  sub_10008A484(v5);
  *a1 = v2;
}

void sub_10008A484(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      if (v3) {
        sub_10008AC38(0LL, v3, 1LL, a1);
      }
      return;
    }

    goto LABEL_149;
  }

  Swift::Int v5 = v4;
  uint64_t v134 = v1;
  sub_1000B059C(v3 / 2);
  uint64_t v126 = v6;
  uint64_t v133 = v7;
  uint64_t v130 = v3;
  uint64_t v124 = a1;
  if (v3 <= 0)
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
    unint64_t v63 = _swiftEmptyArrayStorage[2];
LABEL_114:
    if (v63 < 2)
    {
LABEL_125:
      swift_bridgeObjectRelease();
      if (v130 >= -1)
      {
        *(void *)(v126 + 16) = 0LL;
        swift_bridgeObjectRelease();
        return;
      }

      goto LABEL_154;
    }

    uint64_t v116 = *v124;
    while (1)
    {
      unint64_t v117 = v63 - 2;
      if (v63 < 2) {
        break;
      }
      if (!v116) {
        goto LABEL_158;
      }
      uint64_t v118 = *(void *)&v10[16 * v117 + 32];
      uint64_t v119 = *(void *)&v10[16 * v63 + 24];
      sub_10008AD78( (char *)(v116 + 40 * v118),  (char *)(v116 + 40LL * *(void *)&v10[16 * v63 + 16]),  v116 + 40 * v119,  v133);
      if (v134) {
        goto LABEL_110;
      }
      if (v119 < v118) {
        goto LABEL_144;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0) {
        uint64_t v10 = sub_10008B0EC((uint64_t)v10);
      }
      if (v117 >= *((void *)v10 + 2)) {
        goto LABEL_145;
      }
      uint64_t v120 = &v10[16 * v117 + 32];
      *(void *)uint64_t v120 = v118;
      *((void *)v120 + 1) = v119;
      unint64_t v121 = *((void *)v10 + 2);
      if (v63 > v121) {
        goto LABEL_146;
      }
      memmove(&v10[16 * v63 + 16], &v10[16 * v63 + 32], 16 * (v121 - v63));
      *((void *)v10 + 2) = v121 - 1;
      unint64_t v63 = v121 - 1;
      if (v121 <= 2) {
        goto LABEL_125;
      }
    }

LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
    return;
  }

  Swift::Int v125 = v5;
  uint64_t v8 = 0LL;
  uint64_t v9 = *a1;
  uint64_t v122 = *a1 + 32;
  uint64_t v123 = *a1 + 112;
  uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v11 = v3;
  uint64_t v135 = *a1;
  while (1)
  {
    uint64_t v12 = v8++;
    uint64_t v128 = v10;
    uint64_t v129 = v12;
    if (v8 < v11)
    {
      uint64_t v13 = (void *)(v9 + 40 * v8);
      uint64_t v14 = v13[2];
      uint64_t v15 = v13[3];
      uint64_t v16 = v13[4];
      uint64_t v17 = (void *)(v9 + 40 * v12);
      uint64_t v18 = v17[2];
      uint64_t v19 = v17[3];
      uint64_t v20 = v17[4];
      BOOL v21 = v15 == v19 && v16 == v20;
      if (v21 || (uint64_t v9 = v135, (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17[3], v17[4], 0LL) & 1) != 0))
      {
        int v22 = v14 < v18;
      }

      else
      {
        uint64_t v9 = v135;
        int v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v19, v20, 1LL);
      }

      uint64_t v12 = v129;
      uint64_t v8 = v129 + 2;
      if (v129 + 2 < v130)
      {
        uint64_t v23 = (void *)(v123 + 40 * v129);
        while (1)
        {
          uint64_t v24 = *(v23 - 2);
          uint64_t v25 = *(v23 - 1);
          uint64_t v26 = *v23;
          uint64_t v27 = *(v23 - 7);
          uint64_t v28 = *(v23 - 6);
          uint64_t v29 = *(v23 - 5);
          BOOL v30 = v25 == v28 && v26 == v29;
          if (v30
            || (uint64_t v9 = v135,
                (_stringCompareWithSmolCheck(_:_:expecting:)(*(v23 - 1), *v23, *(v23 - 6), *(v23 - 5), 0LL) & 1) != 0))
          {
            int v31 = v24 < v27;
          }

          else
          {
            int v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, v28, v29, 1LL);
            uint64_t v9 = v135;
          }

          uint64_t v10 = v128;
          if (((v22 ^ v31) & 1) != 0) {
            break;
          }
          ++v8;
          v23 += 5;
          if (v8 >= v130)
          {
            uint64_t v8 = v130;
            break;
          }
        }

        uint64_t v12 = v129;
      }

      if ((v22 & 1) != 0)
      {
        if (v8 < v12) {
          goto LABEL_151;
        }
        if (v12 < v8)
        {
          uint64_t v32 = 40 * v8;
          uint64_t v33 = 40 * v12;
          uint64_t v34 = v8;
          uint64_t v35 = v12;
          do
          {
            if (v35 != --v34)
            {
              if (!v9) {
                goto LABEL_157;
              }
              uint64_t v36 = v9 + v33;
              uint64_t v37 = v9 + v32;
              uint64_t v38 = *(void *)(v9 + v33);
              uint64_t v39 = *(void *)(v9 + v33 + 8);
              uint64_t v40 = *(void *)(v9 + v33 + 32);
              __int128 v41 = *(_OWORD *)(v9 + v33 + 16);
              uint64_t v42 = *(void *)(v9 + v32 - 8);
              __int128 v43 = *(_OWORD *)(v9 + v32 - 24);
              *(_OWORD *)uint64_t v36 = *(_OWORD *)(v9 + v32 - 40);
              *(_OWORD *)(v36 + 16) = v43;
              *(void *)(v36 + 32) = v42;
              *(void *)(v37 - 40) = v38;
              *(void *)(v37 - 32) = v39;
              *(_OWORD *)(v37 - 24) = v41;
              *(void *)(v37 - 8) = v40;
            }

            ++v35;
            v32 -= 40LL;
            v33 += 40LL;
          }

          while (v35 < v34);
        }
      }
    }

    if (v8 < v130)
    {
      if (__OFSUB__(v8, v12)) {
        goto LABEL_148;
      }
      if (v8 - v12 < v125)
      {
        if (__OFADD__(v12, v125)) {
          goto LABEL_152;
        }
        if (v12 + v125 >= v130) {
          uint64_t v44 = v130;
        }
        else {
          uint64_t v44 = v12 + v125;
        }
        if (v44 < v12) {
          goto LABEL_153;
        }
        if (v8 != v44)
        {
          char v45 = (void *)(v122 + 40 * v8);
          uint64_t v127 = v44;
          do
          {
            uint64_t v46 = (void *)(v9 + 40 * v8);
            uint64_t v47 = v46[2];
            uint64_t v48 = v46[3];
            uint64_t v49 = v46[4];
            uint64_t v50 = v12;
            uint64_t v131 = v45;
            do
            {
              uint64_t v52 = *(v45 - 7);
              uint64_t v51 = *(v45 - 6);
              uint64_t v53 = *(v45 - 5);
              BOOL v54 = v48 == v51 && v49 == v53;
              if (v54
                || (uint64_t v9 = v135,
                    (_stringCompareWithSmolCheck(_:_:expecting:)(v48, v49, *(v45 - 6), *(v45 - 5), 0LL) & 1) != 0))
              {
                if (v47 >= v52) {
                  break;
                }
              }

              else
              {
                uint64_t v9 = v135;
                if ((_stringCompareWithSmolCheck(_:_:expecting:)(v48, v49, v51, v53, 1LL) & 1) == 0) {
                  break;
                }
              }

              if (!v9) {
                goto LABEL_155;
              }
              uint64_t v55 = v45 - 4;
              uint64_t v49 = *v45;
              char v56 = v45 - 9;
              uint64_t v57 = *(v45 - 5);
              *(v45 - 5) = *v45;
              v45 -= 5;
              uint64_t v58 = v45[1];
              uint64_t v59 = v45[2];
              uint64_t v47 = v45[3];
              uint64_t v48 = v45[4];
              __int128 v60 = v56[1];
              *(_OWORD *)uint64_t v55 = *v56;
              *((_OWORD *)v55 + 1) = v60;
              v55[4] = v57;
              *(v45 - 4) = v58;
              *(v45 - 3) = v59;
              *(v45 - 2) = v47;
              *(v45 - 1) = v48;
              ++v50;
            }

            while (v8 != v50);
            ++v8;
            char v45 = v131 + 5;
            uint64_t v12 = v129;
          }

          while (v8 != v127);
          uint64_t v8 = v127;
          uint64_t v10 = v128;
        }
      }
    }

    if (v8 < v12) {
      goto LABEL_147;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0) {
      uint64_t v10 = sub_10008B000(0LL, *((void *)v10 + 2) + 1LL, 1, v10);
    }
    unint64_t v62 = *((void *)v10 + 2);
    unint64_t v61 = *((void *)v10 + 3);
    unint64_t v63 = v62 + 1;
    uint64_t v9 = v135;
    uint64_t v64 = v129;
    if (v62 >= v61 >> 1)
    {
      uint64_t v9 = v135;
      uint64_t v10 = sub_10008B000((char *)(v61 > 1), v62 + 1, 1, v10);
      uint64_t v64 = v129;
    }

    *((void *)v10 + 2) = v63;
    char v65 = v10 + 32;
    uint64_t v66 = &v10[16 * v62 + 32];
    *(void *)uint64_t v66 = v64;
    *((void *)v66 + 1) = v8;
    if (v62) {
      break;
    }
    unint64_t v63 = 1LL;
LABEL_105:
    Swift::Int v11 = v130;
    if (v8 >= v130) {
      goto LABEL_114;
    }
  }

  uint64_t v132 = v8;
  while (1)
  {
    unint64_t v67 = v63 - 1;
    if (v63 >= 4)
    {
      uint64_t v72 = &v65[16 * v63];
      uint64_t v73 = *((void *)v72 - 8);
      uint64_t v74 = *((void *)v72 - 7);
      BOOL v78 = __OFSUB__(v74, v73);
      uint64_t v75 = v74 - v73;
      if (v78) {
        goto LABEL_132;
      }
      uint64_t v77 = *((void *)v72 - 6);
      uint64_t v76 = *((void *)v72 - 5);
      BOOL v78 = __OFSUB__(v76, v77);
      uint64_t v70 = v76 - v77;
      char v71 = v78;
      if (v78) {
        goto LABEL_133;
      }
      unint64_t v79 = v63 - 2;
      id v80 = &v65[16 * v63 - 32];
      uint64_t v82 = *(void *)v80;
      uint64_t v81 = *((void *)v80 + 1);
      BOOL v78 = __OFSUB__(v81, v82);
      uint64_t v83 = v81 - v82;
      if (v78) {
        goto LABEL_134;
      }
      BOOL v78 = __OFADD__(v70, v83);
      uint64_t v84 = v70 + v83;
      if (v78) {
        goto LABEL_136;
      }
      if (v84 >= v75)
      {
        uint64_t v102 = &v65[16 * v67];
        uint64_t v104 = *(void *)v102;
        uint64_t v103 = *((void *)v102 + 1);
        BOOL v78 = __OFSUB__(v103, v104);
        uint64_t v105 = v103 - v104;
        if (v78) {
          goto LABEL_142;
        }
        BOOL v95 = v70 < v105;
        goto LABEL_94;
      }
    }

    else
    {
      if (v63 != 3)
      {
        uint64_t v96 = *((void *)v10 + 4);
        uint64_t v97 = *((void *)v10 + 5);
        BOOL v78 = __OFSUB__(v97, v96);
        uint64_t v89 = v97 - v96;
        char v90 = v78;
        goto LABEL_88;
      }

      uint64_t v69 = *((void *)v10 + 4);
      uint64_t v68 = *((void *)v10 + 5);
      BOOL v78 = __OFSUB__(v68, v69);
      uint64_t v70 = v68 - v69;
      char v71 = v78;
    }

    if ((v71 & 1) != 0) {
      goto LABEL_135;
    }
    unint64_t v79 = v63 - 2;
    uint64_t v85 = &v65[16 * v63 - 32];
    uint64_t v87 = *(void *)v85;
    uint64_t v86 = *((void *)v85 + 1);
    BOOL v88 = __OFSUB__(v86, v87);
    uint64_t v89 = v86 - v87;
    char v90 = v88;
    if (v88) {
      goto LABEL_137;
    }
    uint64_t v91 = &v65[16 * v67];
    uint64_t v93 = *(void *)v91;
    uint64_t v92 = *((void *)v91 + 1);
    BOOL v78 = __OFSUB__(v92, v93);
    uint64_t v94 = v92 - v93;
    if (v78) {
      goto LABEL_139;
    }
    if (__OFADD__(v89, v94)) {
      goto LABEL_141;
    }
    if (v89 + v94 >= v70)
    {
      BOOL v95 = v70 < v94;
LABEL_94:
      if (v95) {
        unint64_t v67 = v79;
      }
      goto LABEL_96;
    }

LABEL_110:
  swift_bridgeObjectRelease();
  if (v130 < -1) {
    goto LABEL_150;
  }
  *(void *)(v126 + 16) = 0LL;
  swift_bridgeObjectRelease();
}

uint64_t sub_10008AC38(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v22 = result;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v24 = *a4;
    Swift::Int v5 = (void *)(*a4 + 40 * a3 + 32);
    while (2)
    {
      uint64_t v6 = (void *)(v24 + 40 * v4);
      uint64_t v7 = v6[2];
      uint64_t v8 = v6[3];
      uint64_t v9 = v6[4];
      uint64_t v10 = v22;
      uint64_t v23 = v5;
      do
      {
        uint64_t v12 = *(v5 - 7);
        uint64_t v11 = *(v5 - 6);
        uint64_t v13 = *(v5 - 5);
        BOOL v14 = v8 == v11 && v9 == v13;
        if (v14
          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, *(v5 - 6), *(v5 - 5), 0LL), (result & 1) != 0))
        {
          if (v7 >= v12) {
            break;
          }
        }

        else
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v11, v13, 1LL);
          if ((result & 1) == 0) {
            break;
          }
        }

        if (!v24)
        {
          __break(1u);
          return result;
        }

        uint64_t v15 = v5 - 4;
        uint64_t v9 = *v5;
        uint64_t v16 = v5 - 9;
        uint64_t v17 = *(v5 - 5);
        *(v5 - 5) = *v5;
        v5 -= 5;
        uint64_t v18 = v5[1];
        uint64_t v19 = v5[2];
        uint64_t v7 = v5[3];
        uint64_t v8 = v5[4];
        __int128 v20 = v16[1];
        *(_OWORD *)uint64_t v15 = *v16;
        *((_OWORD *)v15 + 1) = v20;
        v15[4] = v17;
        *(v5 - 4) = v18;
        *(v5 - 3) = v19;
        *(v5 - 2) = v7;
        *(v5 - 1) = v8;
        ++v10;
      }

      while (v4 != v10);
      ++v4;
      Swift::Int v5 = v23 + 5;
      if (v4 != a2) {
        continue;
      }
      break;
    }
  }

  return result;
}

uint64_t sub_10008AD78(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a2;
  Swift::Int v5 = a1;
  uint64_t v6 = a2 - a1;
  uint64_t v7 = (a2 - a1) / 40;
  uint64_t v8 = a3 - (void)a2;
  uint64_t v9 = (uint64_t)(a3 - (void)a2) / 40;
  if (v7 >= v9)
  {
    sub_100015C50(a2, (uint64_t)(a3 - (void)a2) / 40, a4);
    uint64_t v11 = a4;
    uint64_t v12 = &a4[40 * v9];
    if (v5 >= v4 || v8 < 40) {
      goto LABEL_54;
    }
    unint64_t v30 = a3 - 40;
    while (1)
    {
      int v31 = (char *)(v30 + 40);
      uint64_t v32 = *((void *)v12 - 3);
      uint64_t v33 = *((void *)v12 - 2);
      uint64_t v34 = *((void *)v12 - 1);
      uint64_t v35 = *((void *)v4 - 3);
      uint64_t v36 = *((void *)v4 - 2);
      uint64_t v37 = *((void *)v4 - 1);
      BOOL v38 = v33 == v36 && v34 == v37;
      if (v38
        || (uint64_t v48 = v12,
            v39 = _stringCompareWithSmolCheck(_:_:expecting:)( *((void *)v12 - 2),  *((void *)v12 - 1),  *((void *)v4 - 2),  *((void *)v4 - 1),  0LL),  v12 = v48,  v31 = (char *)(v30 + 40),  uint64_t v11 = a4,  (v39 & 1) != 0))
      {
        if (v32 < v35) {
          goto LABEL_38;
        }
      }

      else
      {
        char v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v34, v36, v37, 1LL);
        uint64_t v12 = v48;
        int v31 = (char *)(v30 + 40);
        uint64_t v11 = a4;
        if ((v42 & 1) != 0)
        {
LABEL_38:
          uint64_t v40 = v4 - 40;
          BOOL v41 = v31 != v4 || v30 >= (unint64_t)v4;
          v4 -= 40;
          if (!v41) {
            goto LABEL_50;
          }
          goto LABEL_49;
        }
      }

      uint64_t v40 = v12 - 40;
      BOOL v43 = v31 != v12 || v30 >= (unint64_t)v12;
      v12 -= 40;
      if (!v43) {
        goto LABEL_50;
      }
LABEL_49:
      __int128 v44 = *(_OWORD *)v40;
      __int128 v45 = *((_OWORD *)v40 + 1);
      *(void *)(v30 + 32) = *((void *)v40 + 4);
      *(_OWORD *)unint64_t v30 = v44;
      *(_OWORD *)(v30 + 16) = v45;
LABEL_50:
      v30 -= 40LL;
      if (v4 <= v5 || v12 <= v11) {
        goto LABEL_54;
      }
    }
  }

  sub_100015C50(a1, (a2 - a1) / 40, a4);
  uint64_t v11 = a4;
  uint64_t v12 = &a4[40 * v7];
  if ((unint64_t)v4 < a3 && v6 >= 40)
  {
    unint64_t v13 = a3;
    do
    {
      uint64_t v14 = *((void *)v4 + 2);
      uint64_t v15 = *((void *)v4 + 3);
      uint64_t v16 = *((void *)v4 + 4);
      uint64_t v17 = *((void *)v11 + 2);
      uint64_t v18 = *((void *)v11 + 3);
      uint64_t v19 = *((void *)v11 + 4);
      BOOL v20 = v15 == v18 && v16 == v19;
      if (v20
        || (uint64_t v51 = v11,
            BOOL v21 = v12,
            v22 = _stringCompareWithSmolCheck(_:_:expecting:)( *((void *)v4 + 3),  *((void *)v4 + 4),  *((void *)v11 + 3),  v19,  0LL),  v13 = a3,  v12 = v21,  uint64_t v11 = v51,  (v22 & 1) != 0))
      {
        if (v14 < v17) {
          goto LABEL_11;
        }
      }

      else
      {
        char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v18, v19, 1LL);
        unint64_t v13 = a3;
        uint64_t v12 = v21;
        uint64_t v11 = v51;
        if ((v25 & 1) != 0)
        {
LABEL_11:
          BOOL v20 = v5 == v4;
          uint64_t v23 = v4;
          v4 += 40;
          if (v20 && v5 < v4) {
            goto LABEL_23;
          }
          goto LABEL_22;
        }
      }

      BOOL v20 = v5 == v11;
      uint64_t v23 = v11;
      v11 += 40;
      if (v20 && v5 < v11) {
        goto LABEL_23;
      }
LABEL_22:
      __int128 v27 = *(_OWORD *)v23;
      __int128 v28 = *((_OWORD *)v23 + 1);
      *((void *)v5 + 4) = *((void *)v23 + 4);
      *(_OWORD *)Swift::Int v5 = v27;
      *((_OWORD *)v5 + 1) = v28;
LABEL_23:
      v5 += 40;
    }

    while (v11 < v12 && (unint64_t)v4 < v13);
  }

  uint64_t v4 = v5;
LABEL_54:
  sub_100015C50(v11, (v12 - v11) / 40, v4);
  return 1LL;
}

char *sub_10008B000(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008DB0(&qword_100132F90);
    uint64_t v11 = (char *)sub_10000C254(v10, 16 * v9 + 32);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || &v14[16 * v8] <= v13) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 16 * v8);
  }

  sub_10001198C();
  return v11;
}

char *sub_10008B0EC(uint64_t a1)
{
  return sub_10008B000(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

unsigned __int8 *sub_10008B100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  unint64_t v6 = sub_10008BAA8();
  __n128 v7 = swift_bridgeObjectRetain();
  uint64_t v8 = String.init<A>(_:)(&v18, &type metadata for Substring, &protocol witness table for Substring, v6, v7);
  uint64_t v10 = v8;
  unint64_t v11 = v9;
  if ((v9 & 0x1000000000000000LL) == 0)
  {
    if ((v9 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v13 = HIBYTE(v11) & 0xF;
    uint64_t v18 = v10;
    uint64_t v19 = v11 & 0xFFFFFFFFFFFFFFLL;
    size_t v12 = (unsigned __int8 *)&v18;
    goto LABEL_7;
  }

  uint64_t v10 = sub_10008B46C(v8, v9);
  unint64_t v15 = v14;
  swift_bridgeObjectRelease();
  unint64_t v11 = v15;
  if ((v15 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v10 & 0x1000000000000000LL) != 0)
  {
    size_t v12 = (unsigned __int8 *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v13 = v10 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    size_t v12 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v10, v11);
  }

LABEL_7:
  uint64_t v16 = sub_10008B1F0(v12, v13, a5);
  swift_bridgeObjectRelease();
  return v16;
}

  __break(1u);
}

  swift_release();
  _Block_release(a2);
}

    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_7;
  }

  *a1 = *a2;
  unint64_t v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  return a1;
}

unsigned __int8 *sub_10008B1F0(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v15 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v16 = a3 + 48;
        unsigned __int8 v17 = a3 + 55;
        unsigned __int8 v18 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = 58;
        }

        else
        {
          unsigned __int8 v18 = 97;
          unsigned __int8 v17 = 65;
        }

        if (result)
        {
          uint64_t v9 = 0LL;
          uint64_t v19 = result + 1;
          do
          {
            unsigned int v20 = *v19;
            if (v20 < 0x30 || v20 >= v16)
            {
              if (v20 < 0x41 || v20 >= v17)
              {
                uint64_t v13 = 0LL;
                if (v20 < 0x61 || v20 >= v18) {
                  return (unsigned __int8 *)v13;
                }
                char v21 = -87;
              }

              else
              {
                char v21 = -55;
              }
            }

            else
            {
              char v21 = -48;
            }

            uint64_t v22 = v9 * a3;
            uint64_t v9 = v22 + (v20 + v21);
            ++v19;
            --v15;
          }

          while (v15);
          return (unsigned __int8 *)v9;
        }

        return 0LL;
      }

      return 0LL;
    }
  }

  else
  {
    if (v4 != 45)
    {
      if (a2)
      {
        unsigned __int8 v23 = a3 + 48;
        unsigned __int8 v24 = a3 + 55;
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v23 = 58;
        }

        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v24 = 65;
        }

        if (result)
        {
          uint64_t v26 = 0LL;
          do
          {
            unsigned int v27 = *result;
            if (v27 < 0x30 || v27 >= v23)
            {
              if (v27 < 0x41 || v27 >= v24)
              {
                uint64_t v13 = 0LL;
                if (v27 < 0x61 || v27 >= v25) {
                  return (unsigned __int8 *)v13;
                }
                char v28 = -87;
              }

              else
              {
                char v28 = -55;
              }
            }

            else
            {
              char v28 = -48;
            }

            uint64_t v29 = v26 * a3;
            uint64_t v26 = v29 + (v27 + v28);
            ++result;
            --v3;
          }

          while (v3);
          return (unsigned __int8 *)(v29 + (v27 + v28));
        }

        return 0LL;
      }

      return 0LL;
    }

    if (a2 >= 1)
    {
      uint64_t v5 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v6 = a3 + 48;
        unsigned __int8 v7 = a3 + 55;
        unsigned __int8 v8 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = 58;
        }

        else
        {
          unsigned __int8 v8 = 97;
          unsigned __int8 v7 = 65;
        }

        if (result)
        {
          uint64_t v9 = 0LL;
          for (unint64_t i = result + 1; ; ++i)
          {
            unsigned int v11 = *i;
            if (v11 < 0x30 || v11 >= v6)
            {
              if (v11 < 0x41 || v11 >= v7)
              {
                uint64_t v13 = 0LL;
                if (v11 < 0x61 || v11 >= v8) {
                  return (unsigned __int8 *)v13;
                }
                char v12 = -87;
              }

              else
              {
                char v12 = -55;
              }
            }

            else
            {
              char v12 = -48;
            }

            uint64_t v14 = v9 * a3;
            uint64_t v9 = v14 - (v11 + v12);
            if (!--v5) {
              return (unsigned __int8 *)v9;
            }
          }
        }

        return 0LL;
      }

      return 0LL;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_10008B46C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = sub_10008B4C8((uint64_t)sub_10008B4C4, 0LL, a1, a2);
  uint64_t v6 = sub_10008B4FC(v2, v3, v4, v5);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_10008B4C8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v4 = a3;
  }
  uint64_t v5 = 7LL;
  if (((a4 >> 60) & ((a3 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v5 = 11LL;
  }
  return String.subscript.getter(15LL, v5 | (v4 << 16));
}

uint64_t sub_10008B4FC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5 = a3;
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    unint64_t v12 = sub_10008B640(a1, a2, a3, a4);
    if (v12)
    {
      uint64_t v9 = v12;
      unint64_t v8 = (unint64_t)sub_10008A364(v12, 0LL);
      unint64_t v5 = sub_10008B72C((unint64_t)v14, v8 + 32, v9, a1, a2, v5, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }

    else
    {
      unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
    }

    uint64_t v13 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(void *)(v8 + 16));
    swift_release();
    return v13;
  }

  else
  {
    unint64_t v8 = a1 >> 16;
    uint64_t v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000LL) == 0)
    {
      if ((a3 & 0x1000000000000000LL) != 0)
      {
        uint64_t v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }

unint64_t sub_10008B640( unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4LL << v8;
  if ((result & 0xC) == 4LL << v8)
  {
    uint64_t result = sub_10008A3C4(result, a3, a4);
    unint64_t v7 = result;
  }

  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_10008A3C4(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000LL) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }

  else if ((a4 & 0x1000000000000000LL) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }

  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }

  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }

  __break(1u);
  return result;
}

unint64_t sub_10008B72C( unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0LL;
    goto LABEL_35;
  }

  if (a3 < 0) {
    goto LABEL_38;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0LL;
    unint64_t v12 = a4;
LABEL_35:
    *uint64_t v9 = a4;
    v9[1] = a5;
    void v9[2] = a6;
    v9[3] = a7;
    void v9[4] = v12;
    return v11;
  }

  uint64_t v11 = 0LL;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000LL) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4LL << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000LL) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    uint64_t result = v12;
    if ((v12 & 0xC) == v15) {
      uint64_t result = sub_10008A3C4(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000LL) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
    }

    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000LL) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((_BYTE *)v28 + v18);
      }

      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000LL) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter(a6, a7);
        }
        char v19 = *(_BYTE *)(result + v18);
      }
    }

    if ((v12 & 0xC) == v15)
    {
      uint64_t result = sub_10008A3C4(v12, a6, a7);
      unint64_t v12 = result;
      if ((a7 & 0x1000000000000000LL) == 0)
      {
LABEL_27:
        unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000LL) + 65540;
        goto LABEL_31;
      }
    }

    else if ((a7 & 0x1000000000000000LL) == 0)
    {
      goto LABEL_27;
    }

    if (v23 <= v12 >> 16) {
      goto LABEL_37;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_31:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_35;
    }

    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_35;
    }
  }

  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

void sub_10008B92C()
{
}

uint64_t sub_10008B940(uint64_t a1)
{
  uint64_t v2 = sub_100008DB0(&qword_100132F98);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_10008B980()
{
}

void sub_10008B994()
{
}

void sub_10008B9A8(uint64_t a1)
{
}

void sub_10008B9BC()
{
}

uint64_t sub_10008B9D0( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    uint64_t result = 0LL;
    goto LABEL_8;
  }

  if ((a4 & 0x2000000000000000LL) != 0)
  {
    uint64_t v12 = HIBYTE(a4) & 0xF;
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v11 = v15;
  }

  else if ((a3 & 0x1000000000000000LL) != 0)
  {
    uint64_t v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v12 = a3 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v11 = (void *)_StringObject.sharedUTF8.getter(a3, a4);
  }

  uint64_t result = sub_10008BAE4((uint64_t)v11, v12, a1, a2, a3, a4, a5);
  if (!v5)
  {
    char v16 = v14 & 1;
LABEL_8:
    LOBYTE(v15[0]) = (a4 & 0x1000000000000000LL) != 0;
  }

  return result;
}

unint64_t sub_10008BAA8()
{
  unint64_t result = qword_100132FA8;
  if (!qword_100132FA8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_100132FA8);
  }

  return result;
}

uint64_t sub_10008BAE4( uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7)
{
  unint64_t v11 = a3;
  uint64_t v12 = result;
  uint64_t v13 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000LL) == 0) {
    LOBYTE(v13) = 1;
  }
  uint64_t v14 = 4LL << v13;
  unint64_t v15 = a3 & 0xC;
  unint64_t v16 = a3;
  if (v15 == 4LL << v13)
  {
    unint64_t result = sub_10008A3C4(a3, a5, a6);
    unint64_t v16 = result;
  }

  uint64_t v17 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x1000000000000000LL) != 0)
  {
    unint64_t v19 = a5 & 0xFFFFFFFFFFFFLL;
    if ((a6 & 0x2000000000000000LL) != 0) {
      unint64_t v19 = HIBYTE(a6) & 0xF;
    }
    if (v19 < v16 >> 16) {
      goto LABEL_96;
    }
    unint64_t result = String.UTF8View._foreignDistance(from:to:)(15LL, v16, a5, a6);
    uint64_t v18 = result;
    uint64_t v17 = HIBYTE(a6) & 0xF;
  }

  else
  {
    uint64_t v18 = v16 >> 16;
  }

  if (v15 == v14)
  {
    uint64_t v20 = v17;
    unint64_t result = sub_10008A3C4(v11, a5, a6);
    uint64_t v17 = v20;
    unint64_t v11 = result;
  }

  if ((a4 & 0xC) == v14)
  {
    unint64_t v21 = a4;
    uint64_t v22 = v17;
    unint64_t result = sub_10008A3C4(v21, a5, a6);
    uint64_t v17 = v22;
    a4 = result;
    if ((a6 & 0x1000000000000000LL) == 0) {
      goto LABEL_11;
    }
  }

  else if ((a6 & 0x1000000000000000LL) == 0)
  {
LABEL_11:
    unint64_t result = (a4 >> 16) - (v11 >> 16);
    goto LABEL_22;
  }

  unint64_t v23 = a5 & 0xFFFFFFFFFFFFLL;
  if ((a6 & 0x2000000000000000LL) != 0) {
    unint64_t v23 = v17;
  }
  if (v23 < v11 >> 16) {
    goto LABEL_92;
  }
  if (v23 < a4 >> 16)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }

  unint64_t result = String.UTF8View._foreignDistance(from:to:)(v11, a4, a5, a6);
LABEL_22:
  uint64_t v24 = v18 + result;
  if (__OFADD__(v18, result))
  {
    __break(1u);
    goto LABEL_91;
  }

  if (v24 < v18)
  {
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }

  unsigned __int8 v25 = (unsigned __int8 *)(v12 + v18);
  if (!v12) {
    unsigned __int8 v25 = 0LL;
  }
  int v26 = *v25;
  if (v26 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v37 = a7 + 48;
        unsigned __int8 v38 = a7 + 55;
        unsigned __int8 v39 = a7 + 87;
        if (a7 > 10)
        {
          unsigned __int8 v37 = 58;
        }

        else
        {
          unsigned __int8 v39 = 97;
          unsigned __int8 v38 = 65;
        }

        if (v25)
        {
          uint64_t v30 = 0LL;
          uint64_t v40 = v25 + 1;
          uint64_t v41 = result - 1;
          do
          {
            unsigned int v42 = *v40;
            if (v42 < 0x30 || v42 >= v37)
            {
              if (v42 < 0x41 || v42 >= v38)
              {
                uint64_t v35 = 0LL;
                if (v42 < 0x61 || v42 >= v39) {
                  return v35;
                }
                char v43 = -87;
              }

              else
              {
                char v43 = -55;
              }
            }

            else
            {
              char v43 = -48;
            }

            uint64_t v44 = v30 * a7;
            uint64_t v30 = v44 + (v42 + v43);
            ++v40;
            --v41;
          }

          while (v41);
          return v30;
        }

        return 0LL;
      }

      return 0LL;
    }

    goto LABEL_95;
  }

  if (v26 != 45)
  {
    if (v24 != v18)
    {
      unsigned __int8 v45 = a7 + 48;
      unsigned __int8 v46 = a7 + 55;
      unsigned __int8 v47 = a7 + 87;
      if (a7 > 10)
      {
        unsigned __int8 v45 = 58;
      }

      else
      {
        unsigned __int8 v47 = 97;
        unsigned __int8 v46 = 65;
      }

      if (v25)
      {
        uint64_t v48 = 0LL;
        do
        {
          unsigned int v49 = *v25;
          if (v49 < 0x30 || v49 >= v45)
          {
            if (v49 < 0x41 || v49 >= v46)
            {
              uint64_t v35 = 0LL;
              if (v49 < 0x61 || v49 >= v47) {
                return v35;
              }
              char v50 = -87;
            }

            else
            {
              char v50 = -55;
            }
          }

          else
          {
            char v50 = -48;
          }

          uint64_t v51 = v48 * a7;
          uint64_t v48 = v51 + (v49 + v50);
          ++v25;
          --result;
        }

        while (result);
        return v51 + (v49 + v50);
      }

      return 0LL;
    }

    return 0LL;
  }

  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v27 = a7 + 48;
      unsigned __int8 v28 = a7 + 55;
      unsigned __int8 v29 = a7 + 87;
      if (a7 > 10)
      {
        unsigned __int8 v27 = 58;
      }

      else
      {
        unsigned __int8 v29 = 97;
        unsigned __int8 v28 = 65;
      }

      if (v25)
      {
        uint64_t v30 = 0LL;
        int v31 = v25 + 1;
        uint64_t v32 = result - 1;
        while (1)
        {
          unsigned int v33 = *v31;
          if (v33 < 0x30 || v33 >= v27)
          {
            if (v33 < 0x41 || v33 >= v28)
            {
              uint64_t v35 = 0LL;
              if (v33 < 0x61 || v33 >= v29) {
                return v35;
              }
              char v34 = -87;
            }

            else
            {
              char v34 = -55;
            }
          }

          else
          {
            char v34 = -48;
          }

          uint64_t v36 = v30 * a7;
          uint64_t v30 = v36 - (v33 + v34);
          ++v31;
          if (!--v32) {
            return v30;
          }
        }
      }

      return 0LL;
    }

    return 0LL;
  }

LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
  return result;
}

unint64_t sub_10008BF24(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

void sub_10008BF3C()
{
}

uint64_t sub_10008BF48(uint64_t a1)
{
  return sub_100015F98(a1, v1);
}

id sub_10008BF54()
{
  id result = [(id)objc_opt_self(NSDistributedNotificationCenter) defaultCenter];
  qword_1001357E0 = (uint64_t)result;
  return result;
}

void *sub_10008BF8C(uint64_t a1, uint64_t a2)
{
  uint64_t v49 = a2;
  uint64_t v48 = type metadata accessor for Notification(0LL);
  uint64_t v3 = *(void *)(v48 - 8);
  uint64_t v4 = __chkstk_darwin(v48);
  unsigned __int8 v47 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v46 - v6;
  if (*(void *)(a1 + 16))
  {
    uint64_t v8 = (void *)LNTranscriptChangedNotification;
    __int128 v54 = 0u;
    __int128 v55 = 0u;
    uint64_t v9 = sub_100008DB0(&qword_100131A40);
    uint64_t inited = swift_initStackObject(v9, &v53);
    *(_OWORD *)(inited + 16) = xmmword_1000F57D0;
    uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNTranscriptChangedNotificationEventKey);
    uint64_t v52 = v11;
    id v12 = v8;
    sub_100076AD4();
    *(void *)(inited + 96) = &type metadata for Int;
    *(void *)(inited + 72) = 0LL;
    uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNTranscriptChangedNotificationStreamsKey);
    uint64_t v52 = v13;
    sub_100076AD4();
    unint64_t v14 = sub_100076854();
    swift_bridgeObjectRetain(a1);
    sub_100039430();
    uint64_t v16 = v15;
    swift_bridgeObjectRelease(a1);
    sub_100042310(v16);
    uint64_t v18 = v17;
    swift_release(v16);
    id v19 = sub_100007998(v18);
    *(void *)(inited + 168) = v14;
    *(void *)(inited + 144) = v19;
    uint64_t v20 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    Notification.init(name:object:userInfo:)(v12, &v54, v20);
    sub_100014538();
    uint64_t v22 = v21;
    if (v21[2] >= v21[3] >> 1)
    {
      sub_100076AA8();
      uint64_t v22 = v43;
    }

    unint64_t v23 = sub_100076A84();
    v24(v23, v7, v48);
  }

  else
  {
    uint64_t v22 = _swiftEmptyArrayStorage;
  }

  if (*(void *)(v49 + 16))
  {
    uint64_t v46 = v3;
    unsigned __int8 v25 = (void *)LNTranscriptChangedNotification;
    __int128 v54 = 0u;
    __int128 v55 = 0u;
    uint64_t v26 = v49;
    uint64_t v27 = sub_100008DB0(&qword_100131A40);
    uint64_t v28 = swift_initStackObject(v27, &v50);
    *(_OWORD *)(v28 + 16) = xmmword_1000F57D0;
    uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNTranscriptChangedNotificationEventKey);
    uint64_t v52 = v29;
    id v30 = v25;
    sub_100076AC0();
    *(void *)(v28 + 96) = &type metadata for Int;
    *(void *)(v28 + 72) = 1LL;
    uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNTranscriptChangedNotificationStreamsKey);
    uint64_t v52 = v31;
    sub_100076AC0();
    unint64_t v32 = sub_100076854();
    swift_bridgeObjectRetain(v26);
    sub_100039430();
    uint64_t v34 = v33;
    swift_bridgeObjectRelease(v26);
    sub_100042310(v34);
    uint64_t v36 = v35;
    swift_release(v34);
    id v37 = sub_100007998(v36);
    *(void *)(v28 + 168) = v32;
    *(void *)(v28 + 144) = v37;
    uint64_t v38 = Dictionary.init(dictionaryLiteral:)( v28,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    unsigned __int8 v39 = v47;
    Notification.init(name:object:userInfo:)(v30, &v54, v38);
    if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
    {
      sub_100014538();
      uint64_t v22 = v44;
    }

    if (v22[2] >= v22[3] >> 1)
    {
      sub_100076AA8();
      uint64_t v22 = v45;
    }

    unint64_t v40 = sub_100076A84();
    v41(v40, v39, v48);
  }

  return v22;
}

ValueMetadata *type metadata accessor for NotifyingTranscriptObserver()
{
  return &type metadata for NotifyingTranscriptObserver;
}

void *sub_10008C360(uint64_t a1, uint64_t a2)
{
  if (qword_100130300 != -1) {
LABEL_53:
  }
    swift_once(&qword_100130300, sub_10008CB48);
  NSString v4 = sub_10008D4C4();
  uint64_t v5 = &selRef_isLowPowerDeviceEnabled;
  id v6 = sub_10008D4EC();

  uint64_t v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v107 = v7;

  if (qword_100130308 != -1) {
    swift_once(&qword_100130308, sub_10008CB7C);
  }
  NSString v8 = sub_10008D4C4();
  id v9 = sub_10008D4EC();

  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v12 = v11;

  uint64_t v120 = (void *)v10;
  uint64_t v121 = v12;
  v119[0] = 0x69746167656E7B24LL;
  v119[1] = 0xEB000000007D6576LL;
  if (qword_100130318 != -1) {
    swift_once(&qword_100130318, sub_10008D2CC);
  }
  uint64_t v13 = (void *)qword_100135800;
  NSString v14 = sub_10008D4C4();
  id v15 = [v13 localizedStringForLocaleIdentifier:v14];

  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v18 = v17;

  v118[0] = v16;
  v118[1] = v18;
  unint64_t v95 = sub_1000118E0();
  unint64_t v96 = v95;
  unint64_t v104 = v95;
  unint64_t v94 = v95;
  uint64_t v103 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v119,  v118,  0LL,  0LL,  0LL,  1LL,  type metadata for String,  type metadata for String);
  uint64_t v106 = v19;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (qword_100130310 != -1) {
    swift_once(&qword_100130310, sub_10008CC7C);
  }
  if ((qword_1001357F8 & 0xC000000000000001LL) != 0)
  {
    if (qword_1001357F8 < 0) {
      uint64_t v20 = qword_1001357F8;
    }
    else {
      uint64_t v20 = qword_1001357F8 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v99 = 0LL;
    uint64_t v21 = 0LL;
    unint64_t v22 = 0LL;
    unint64_t v23 = __CocoaDictionary.makeIterator()(v20) | 0x8000000000000000LL;
  }

  else
  {
    uint64_t v24 = -1LL << *(_BYTE *)(qword_1001357F8 + 32);
    uint64_t v21 = ~v24;
    uint64_t v99 = qword_1001357F8 + 64;
    uint64_t v25 = -v24;
    if (v25 < 64) {
      uint64_t v26 = ~(-1LL << v25);
    }
    else {
      uint64_t v26 = -1LL;
    }
    unint64_t v22 = v26 & *(void *)(qword_1001357F8 + 64);
    unint64_t v23 = qword_1001357F8;
  }

  swift_bridgeObjectRetain();
  int64_t v31 = 0LL;
  int64_t v98 = (unint64_t)(v21 + 64) >> 6;
  unint64_t v32 = _swiftEmptyArrayStorage;
  uint64_t v97 = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v101 = a1;
  unint64_t v102 = v23;
  uint64_t v100 = a2;
  while (1)
  {
    int64_t v114 = v31;
    unint64_t v116 = v22;
    if ((v23 & 0x8000000000000000LL) == 0) {
      break;
    }
    unint64_t v37 = v23;
    uint64_t v38 = __CocoaDictionary.Iterator.next()(v27, v28, v29, v30);
    if (!v38) {
      goto LABEL_50;
    }
    uint64_t v40 = v38;
    uint64_t v41 = v39;
    v119[0] = v38;
    unsigned int v42 = v32;
    unint64_t v43 = sub_10008D448();
    swift_unknownObjectRetain(v40);
    swift_dynamicCast(&v120, v119, v97, v43, 7LL);
    id v44 = v120;
    swift_unknownObjectRelease(v40);
    v119[0] = v41;
    swift_unknownObjectRetain(v41);
    unint64_t v45 = v43;
    unint64_t v32 = v42;
    swift_dynamicCast(&v120, v119, v97, v45, 7LL);
    id v46 = v120;
    swift_unknownObjectRelease(v41);
    int64_t v36 = v114;
    uint64_t v34 = v116;
LABEL_38:
    unint64_t v23 = v37;
    if (!v44) {
      goto LABEL_50;
    }
    unint64_t v111 = v34;
    int64_t v112 = v36;
    uint64_t v113 = v32;
    NSString v52 = sub_10008D4C4();
    id v109 = v46;
    id v53 = objc_msgSend(v46, v5[2], v52, type metadata for String, v94, v95, v96);

    uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
    char v56 = v55;

    uint64_t v57 = qword_100130320;
    swift_bridgeObjectRetain();
    if (v57 != -1) {
      swift_once(&qword_100130320, sub_10008D390);
    }
    NSString v58 = sub_10008D4C4();
    id v59 = sub_10008D4EC();

    uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
    uint64_t v62 = v61;

    uint64_t v120 = (void *)v60;
    uint64_t v121 = v62;
    v63._uint64_t countAndFlagsBits = v54;
    v63._object = v56;
    String.append(_:)(v63);
    unint64_t v117 = v56;
    swift_bridgeObjectRelease();
    uint64_t v108 = v120;
    uint64_t v115 = v121;
    NSString v64 = sub_10008D4C4();
    char v65 = v5;
    uint64_t v110 = v44;
    id v66 = objc_msgSend(v44, v5[2], v64);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
    uint64_t v120 = (void *)v105;
    uint64_t v121 = v107;
    a1 = 0x7265626D756E7B24LL;
    uint64_t v67 = sub_10008D4FC();
    uint64_t v69 = sub_10008D4D0(v67, v68);
    a2 = v70;
    uint64_t v120 = (void *)v103;
    uint64_t v121 = v106;
    uint64_t v71 = sub_10008D4FC();
    unint64_t v94 = v104;
    uint64_t v73 = sub_10008D4D0(v71, v72);
    uint64_t v75 = v74;
    swift_bridgeObjectRelease();
    uint64_t v76 = sub_100008DB0((uint64_t *)&unk_100132130);
    uint64_t v77 = sub_100011A44(v76);
    *(_OWORD *)(v77 + 16) = xmmword_1000F5520;
    *(void *)(v77 + 32) = v69;
    *(void *)(v77 + 40) = a2;
    uint64_t v78 = sub_100011A44(v76);
    *(_OWORD *)(v78 + 16) = xmmword_1000F5520;
    *(void *)(v78 + 32) = v73;
    *(void *)(v78 + 40) = v75;
    unint64_t v79 = v113;
    uint64_t v80 = v113[2];
    if (__OFADD__(v80, 2LL))
    {
      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }

    uint64_t v81 = v78;
    if (!swift_isUniquelyReferenced_nonNull_native(v113) || v80 + 2 > v113[3] >> 1)
    {
      sub_10001454C();
      unint64_t v79 = v82;
    }

    a2 = v100;
    a1 = v101;
    uint64_t v5 = v65;
    unint64_t v83 = v79[2];
    unint64_t v84 = v79[3];
    uint64_t v85 = v79;
    unint64_t v86 = v83 + 1;
    sub_10008D514();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v83 >= v84 >> 1)
    {
      sub_10008D520();
      uint64_t v85 = v91;
    }

    v85[2] = v86;
    uint64_t v87 = &v85[8 * v83];
    v87[4] = 0LL;
    v87[5] = 0xE000000000000000LL;
    v87[6] = 0LL;
    v87[7] = 0xE000000000000000LL;
    v87[8] = v54;
    v87[9] = v117;
    v87[10] = v77;
    *((_WORD *)v87 + 44) = 0;
    unint64_t v88 = v83 + 2;
    unint64_t v89 = v85[3];
    sub_10008D514();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v86 >= v89 >> 1)
    {
      sub_10008D520();
      uint64_t v85 = v92;
    }

    v85[2] = v88;
    char v90 = &v85[8 * v86];
    unint64_t v32 = v85;
    v90[4] = 0LL;
    v90[5] = 0xE000000000000000LL;
    v90[6] = 0LL;
    v90[7] = 0xE000000000000000LL;
    v90[8] = v108;
    v90[9] = v115;
    v90[10] = v81;
    *((_WORD *)v90 + 44) = 0;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v27 = swift_bridgeObjectRelease_n(0xE000000000000000LL, 4LL);
    unint64_t v22 = v111;
    int64_t v31 = v112;
    unint64_t v23 = v102;
  }

  if (v22)
  {
    unint64_t v33 = __clz(__rbit64(v22));
    uint64_t v34 = (v22 - 1) & v22;
    unint64_t v35 = v33 | (v31 << 6);
    int64_t v36 = v31;
LABEL_37:
    unint64_t v37 = v23;
    uint64_t v50 = *(void **)(*(void *)(v23 + 48) + 8 * v35);
    uint64_t v51 = *(void **)(*(void *)(v23 + 56) + 8 * v35);
    id v44 = v50;
    id v46 = v51;
    goto LABEL_38;
  }

  int64_t v47 = v31 + 1;
  if (__OFADD__(v31, 1LL)) {
    goto LABEL_52;
  }
  if (v47 >= v98) {
    goto LABEL_50;
  }
  unint64_t v48 = *(void *)(v99 + 8 * v47);
  int64_t v36 = v31 + 1;
  if (v48) {
    goto LABEL_36;
  }
  int64_t v36 = v31 + 2;
  if (v31 + 2 >= v98) {
    goto LABEL_50;
  }
  unint64_t v48 = *(void *)(v99 + 8 * v36);
  if (v48) {
    goto LABEL_36;
  }
  int64_t v36 = v31 + 3;
  if (v31 + 3 >= v98) {
    goto LABEL_50;
  }
  unint64_t v48 = *(void *)(v99 + 8 * v36);
  if (v48) {
    goto LABEL_36;
  }
  int64_t v36 = v31 + 4;
  if (v31 + 4 >= v98) {
    goto LABEL_50;
  }
  unint64_t v48 = *(void *)(v99 + 8 * v36);
  if (v48)
  {
LABEL_36:
    uint64_t v34 = (v48 - 1) & v48;
    unint64_t v35 = __clz(__rbit64(v48)) + (v36 << 6);
    goto LABEL_37;
  }

  int64_t v49 = v31 + 5;
  while (v49 < v98)
  {
    unint64_t v48 = *(void *)(v99 + 8 * v49++);
    if (v48)
    {
      int64_t v36 = v49 - 1;
      goto LABEL_36;
    }
  }

LABEL_50:
  sub_10001B100(v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v32;
}

                __break(1u);
              }

              NSString v14 = v9 + 5;
            }
          }
        }
      }

id sub_10008CB48(uint64_t a1)
{
  return sub_10008CBB0(a1, 0x80000001000FB4C0LL, 0x7265626D756E7B24LL, 0xE90000000000007DLL, &qword_1001357E8);
}

id sub_10008CB7C(uint64_t a1)
{
  return sub_10008CBB0(a1, 0x80000001000FB470LL, 0xD000000000000015LL, 0x80000001000FB4A0LL, &qword_1001357F0);
}

id sub_10008CBB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = sub_100008DB0(&qword_100130BC0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for URL(0LL);
  sub_100009E60((uint64_t)v11, 1LL, 1LL, v12);
  id v13 = objc_allocWithZone(&OBJC_CLASS___LNStaticDeferredLocalizedString);
  id result = sub_100086650(0xD000000000000029LL, a2, a3, a4, 0LL, 0LL, (uint64_t)v11);
  *a5 = result;
  return result;
}

uint64_t sub_10008CC7C()
{
  uint64_t v0 = sub_100008DB0(&qword_100130BC0);
  __chkstk_darwin(v0);
  uint64_t v2 = &v25[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v3 = sub_100008DB0(&qword_100132FB0);
  uint64_t inited = swift_initStackObject(v3, v25);
  *(_OWORD *)(inited + 16) = xmmword_1000F6F60;
  uint64_t v5 = type metadata accessor for URL(0LL);
  sub_100009E60((uint64_t)v2, 1LL, 1LL, v5);
  id v6 = objc_allocWithZone(&OBJC_CLASS___LNStaticDeferredLocalizedString);
  *(void *)(inited + 32) = sub_100086650( 0xD000000000000020LL,  0x80000001000FB0E0LL,  7305076LL,  0xE300000000000000LL,  0LL,  0LL,  (uint64_t)v2);
  sub_100009E60((uint64_t)v2, 1LL, 1LL, v5);
  id v7 = objc_allocWithZone(&OBJC_CLASS___LNStaticDeferredLocalizedString);
  *(void *)(inited + 40) = sub_100086650( 0xD000000000000023LL,  0x80000001000FB110LL,  50LL,  0xE100000000000000LL,  0LL,  0LL,  (uint64_t)v2);
  sub_100009E60((uint64_t)v2, 1LL, 1LL, v5);
  id v8 = objc_allocWithZone(&OBJC_CLASS___LNStaticDeferredLocalizedString);
  *(void *)(inited + 48) = sub_100086650( 0xD000000000000021LL,  0x80000001000FB140LL,  1920298854LL,  0xE400000000000000LL,  0LL,  0LL,  (uint64_t)v2);
  sub_100009E60((uint64_t)v2, 1LL, 1LL, v5);
  id v9 = objc_allocWithZone(&OBJC_CLASS___LNStaticDeferredLocalizedString);
  *(void *)(inited + 56) = sub_100086650( 0xD000000000000024LL,  0x80000001000FB170LL,  52LL,  0xE100000000000000LL,  0LL,  0LL,  (uint64_t)v2);
  sub_100009E60((uint64_t)v2, 1LL, 1LL, v5);
  id v10 = objc_allocWithZone(&OBJC_CLASS___LNStaticDeferredLocalizedString);
  *(void *)(inited + 64) = sub_100086650( 0xD000000000000025LL,  0x80000001000FB1A0LL,  0x6E65657472696874LL,  0xE800000000000000LL,  0LL,  0LL,  (uint64_t)v2);
  sub_100009E60((uint64_t)v2, 1LL, 1LL, v5);
  id v11 = objc_allocWithZone(&OBJC_CLASS___LNStaticDeferredLocalizedString);
  *(void *)(inited + 72) = sub_100086650( 0xD000000000000028LL,  0x80000001000FB1D0LL,  13105LL,  0xE200000000000000LL,  0LL,  0LL,  (uint64_t)v2);
  sub_100009E60((uint64_t)v2, 1LL, 1LL, v5);
  id v12 = objc_allocWithZone(&OBJC_CLASS___LNStaticDeferredLocalizedString);
  *(void *)(inited + 80) = sub_100086650( 0xD000000000000026LL,  0x80000001000FB200LL,  0x6E6F79746E657774LL,  0xE900000000000065LL,  0LL,  0LL,  (uint64_t)v2);
  sub_100009E60((uint64_t)v2, 1LL, 1LL, v5);
  id v13 = objc_allocWithZone(&OBJC_CLASS___LNStaticDeferredLocalizedString);
  *(void *)(inited + 88) = sub_100086650( 0xD000000000000029LL,  0x80000001000FB230LL,  12594LL,  0xE200000000000000LL,  0LL,  0LL,  (uint64_t)v2);
  sub_100009E60((uint64_t)v2, 1LL, 1LL, v5);
  id v14 = objc_allocWithZone(&OBJC_CLASS___LNStaticDeferredLocalizedString);
  *(void *)(inited + 96) = sub_100086650( 0xD000000000000023LL,  0x80000001000FB260LL,  0x797472696874LL,  0xE600000000000000LL,  0LL,  0LL,  (uint64_t)v2);
  sub_100009E60((uint64_t)v2, 1LL, 1LL, v5);
  id v15 = objc_allocWithZone(&OBJC_CLASS___LNStaticDeferredLocalizedString);
  *(void *)(inited + 104) = sub_100086650( 0xD000000000000026LL,  0x80000001000FB290LL,  12339LL,  0xE200000000000000LL,  0LL,  0LL,  (uint64_t)v2);
  sub_100009E60((uint64_t)v2, 1LL, 1LL, v5);
  id v16 = objc_allocWithZone(&OBJC_CLASS___LNStaticDeferredLocalizedString);
  *(void *)(inited + 112) = sub_100086650( 0xD00000000000002ELL,  0x80000001000FB2C0LL,  0xD000000000000011LL,  0x80000001000FB2F0LL,  0LL,  0LL,  (uint64_t)v2);
  sub_100009E60((uint64_t)v2, 1LL, 1LL, v5);
  id v17 = objc_allocWithZone(&OBJC_CLASS___LNStaticDeferredLocalizedString);
  *(void *)(inited + 120) = sub_100086650( 0xD000000000000031LL,  0x80000001000FB310LL,  3159345LL,  0xE300000000000000LL,  0LL,  0LL,  (uint64_t)v2);
  sub_100009E60((uint64_t)v2, 1LL, 1LL, v5);
  id v18 = objc_allocWithZone(&OBJC_CLASS___LNStaticDeferredLocalizedString);
  *(void *)(inited + 128) = sub_100086650( 0xD00000000000002BLL,  0x80000001000FB350LL,  0x6E696F70206F7774LL,  0xEE00657669662074LL,  0LL,  0LL,  (uint64_t)v2);
  sub_100009E60((uint64_t)v2, 1LL, 1LL, v5);
  id v19 = objc_allocWithZone(&OBJC_CLASS___LNStaticDeferredLocalizedString);
  *(void *)(inited + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = sub_100086650( 0xD00000000000002ELL,  0x80000001000FB380LL,  3485234LL,  0xE300000000000000LL,  0LL,  0LL,  (uint64_t)v2);
  sub_100009E60((uint64_t)v2, 1LL, 1LL, v5);
  id v20 = objc_allocWithZone(&OBJC_CLASS___LNStaticDeferredLocalizedString);
  *(void *)(inited + 144) = sub_100086650( 0xD00000000000002FLL,  0x80000001000FB3B0LL,  0xD000000000000012LL,  0x80000001000FB3E0LL,  0LL,  0LL,  (uint64_t)v2);
  sub_100009E60((uint64_t)v2, 1LL, 1LL, v5);
  id v21 = objc_allocWithZone(&OBJC_CLASS___LNStaticDeferredLocalizedString);
  *(void *)(inited + 152) = sub_100086650( 0xD000000000000032LL,  0x80000001000FB400LL,  875444017LL,  0xE400000000000000LL,  0LL,  0LL,  (uint64_t)v2);
  unint64_t v22 = sub_10008D448();
  unint64_t v23 = sub_10008D484();
  uint64_t result = Dictionary.init(dictionaryLiteral:)(inited, v22, v22, v23);
  qword_1001357F8 = result;
  return result;
}

id sub_10008D2CC()
{
  uint64_t v0 = sub_100008DB0(&qword_100130BC0);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for URL(0LL);
  sub_100009E60((uint64_t)v2, 1LL, 1LL, v3);
  id v4 = objc_allocWithZone(&OBJC_CLASS___LNStaticDeferredLocalizedString);
  id result = sub_100086650( 0xD000000000000025LL,  0x80000001000FB440LL,  0x657669746167656ELL,  0xE800000000000000LL,  0LL,  0LL,  (uint64_t)v2);
  qword_100135800 = (uint64_t)result;
  return result;
}

id sub_10008D390()
{
  uint64_t v0 = sub_100008DB0(&qword_100130BC0);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for URL(0LL);
  sub_100009E60((uint64_t)v2, 1LL, 1LL, v3);
  id v4 = objc_allocWithZone(&OBJC_CLASS___LNStaticDeferredLocalizedString);
  id result = sub_100086650(0xD000000000000028LL, 0x80000001000FB0B0LL, 45LL, 0xE100000000000000LL, 0LL, 0LL, (uint64_t)v2);
  qword_100135808 = (uint64_t)result;
  return result;
}

unint64_t sub_10008D448()
{
  unint64_t result = qword_100131250;
  if (!qword_100131250)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___LNStaticDeferredLocalizedString);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100131250);
  }

  return result;
}

unint64_t sub_10008D484()
{
  unint64_t result = qword_100132FB8;
  if (!qword_100132FB8)
  {
    unint64_t v1 = sub_10008D448();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100132FB8);
  }

  return result;
}

NSString sub_10008D4C4()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_10008D4D0(uint64_t a1, uint64_t a2)
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(a1, a2, 0LL, 0LL, 0LL, 1LL, v2, v2);
}

id sub_10008D4EC()
{
  return objc_msgSend(v0, *(SEL *)(v2 + 16), v1);
}

uint64_t sub_10008D4FC()
{
  *(void *)(v4 - 120) = v0;
  *(void *)(v4 - 112) = v1;
  *(void *)(v4 - sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = v3;
  *(void *)(v4 - 128) = v2;
  return v4 - 120;
}

uint64_t sub_10008D514()
{
  return swift_bridgeObjectRetain_n(0xE000000000000000LL, 2LL);
}

void sub_10008D520()
{
}

uint64_t sub_10008D52C(void *a1, uint64_t a2)
{
  id v4 = [a1 bundleIdentifier];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  uint64_t v8 = sub_100011B44(v5, v7, a2);
  swift_bridgeObjectRelease();
  if (v8)
  {
    id v9 = [a1 actionIdentifier];
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    uint64_t v12 = v11;

    sub_1000130A4(v10, v12, v8);
    LOBYTE(v9) = v13;
    swift_bridgeObjectRelease();
    sub_10001198C();
    char v14 = v9 ^ 1;
  }

  else
  {
    char v14 = 1;
  }

  return v14 & 1;
}

uint64_t sub_10008D600(uint64_t a1, __n128 a2)
{
  uint64_t v3 = Set.init(minimumCapacity:)( *(void *)(a1 + 16),  &type metadata for String,  &protocol witness table for String,  a2);
  uint64_t v11 = v3;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v6 = *(v5 - 1);
      uint64_t v7 = *v5;
      swift_bridgeObjectRetain();
      sub_100018380(&v10, v6, v7);
      swift_bridgeObjectRelease();
      v5 += 2;
      --v4;
    }

    while (v4);
    sub_10001198C();
    return v11;
  }

  else
  {
    uint64_t v8 = v3;
    sub_10001198C();
  }

  return v8;
}

#error "10008D74C: call analysis failed (funcsize=78)"
uint64_t sub_10008D7E0()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  _BYTE v19[200];
  uint64_t v0 = sub_100008DB0(&qword_100132FC0);
  uint64_t inited = swift_initStackObject(v0, v19);
  *(_OWORD *)(inited + 16) = xmmword_1000F60E0;
  sub_10004C058();
  *(void *)(v2 + 32) = 0xD000000000000010LL;
  *(void *)(v2 + 40) = v3;
  *(void *)(inited + 48) = sub_10008D600((uint64_t)&off_1001222D0, v4);
  *(void *)(inited + 56) = 0xD000000000000015LL;
  sub_10004C058();
  *(void *)(inited + 64) = v5;
  *(void *)(inited + 72) = sub_10008D600((uint64_t)&off_100122300, v6);
  *(void *)(inited + 80) = 0xD000000000000015LL;
  sub_10004C058();
  *(void *)(inited + 88) = v7;
  *(void *)(inited + 96) = sub_10008D600((uint64_t)&off_100122340, v8);
  *(void *)(inited + 104) = 0xD00000000000001ALL;
  sub_10004C058();
  *(void *)(inited + 112) = v9;
  *(void *)(inited + 120) = sub_10008D600((uint64_t)&off_1001223B0, v10);
  *(void *)(inited + 128) = 0xD000000000000013LL;
  sub_10004C058();
  *(void *)(inited + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = v11;
  *(void *)(inited + 144) = sub_10008D600((uint64_t)&off_1001223E0, v12);
  *(void *)(inited + 152) = 0xD00000000000001ALL;
  sub_10004C058();
  *(void *)(inited + 160) = v13;
  *(void *)(inited + 168) = sub_10008D600((uint64_t)&off_100122430, v14);
  *(void *)(inited + 176) = 0xD000000000000010LL;
  sub_10004C058();
  *(void *)(inited + 184) = v15;
  *(void *)(inited + 192) = sub_10008D600((uint64_t)&off_1001224B0, v16);
  id v17 = sub_100008DB0(&qword_100132FC8);
  return Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v17, &protocol witness table for String);
}

unint64_t sub_10008D950()
{
  unint64_t result = qword_100130BA0;
  if (!qword_100130BA0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___LNSystemProtocol);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100130BA0);
  }

  return result;
}

ValueMetadata *type metadata accessor for AppShortcutDenyList()
{
  return &type metadata for AppShortcutDenyList;
}

void sub_10008D99C(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  id v50 = a2;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = type metadata accessor for LSLinkBundleRecord(0LL);
  __chkstk_darwin(v54);
  id v53 = (void *)((char *)v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  char v65 = _swiftEmptyArrayStorage;
  uint64_t v56 = *(void *)(a1 + 16);
  if (!v56)
  {
LABEL_23:

    swift_bridgeObjectRelease();
    return;
  }

  int64_t v49 = v8;
  uint64_t v51 = v6;
  uint64_t v52 = v5;
  unint64_t v11 = 0LL;
  uint64_t v12 = a1 + 32;
  *(void *)&__int128 v9 = 136315138LL;
  __int128 v47 = v9;
  v46[1] = (char *)&type metadata for Any + 8;
  uint64_t v55 = a1;
  while (v11 < *(void *)(a1 + 16))
  {
    sub_10001AFE4(v12, (uint64_t)&v63);
    char v13 = sub_100008D74(&v63, v64);
    sub_1000B5044(0LL, &qword_100132790, &OBJC_CLASS___LSBundleRecord_ptr);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    uint64_t v16 = v3;
    id v17 = (void *)static LSBundleRecord.with(bundleIdentifier:allowSystemAppPlaceholder:)(*v13, v15, 1LL);
    if (v3)
    {
      uint64_t v3 = 0LL;
      swift_errorRelease(v16);
      type metadata accessor for DaemonRecord(0LL);
      id v18 = (void *)static DaemonRecord.from(bundleIdentifier:)(v14, v15);

      id v19 = v53;
      sub_100084214((uint64_t)v13, (uint64_t)v53, type metadata accessor for LSLinkBundleRecord);
      if (!v18)
      {
        type metadata accessor for FrameworkRecord(0LL);
        id v20 = (void *)static FrameworkRecord.from(bundleIdentifier:)(*v19, v19[1]);
        if (!v20)
        {
          sub_100058D54((uint64_t)v19, type metadata accessor for LSLinkBundleRecord);
LABEL_16:
          uint64_t v31 = qword_100130330;
          id v32 = v50;
          if (v31 != -1) {
            swift_once(&qword_100130330, sub_100091538);
          }
          uint64_t v33 = v52;
          uint64_t v34 = sub_100008D98(v52, (uint64_t)qword_100135860);
          uint64_t v35 = v51;
          int64_t v36 = v49;
          (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v49, v34, v33);

          sub_10001AFE4((uint64_t)&v63, (uint64_t)v60);
          uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
          os_log_type_t v39 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v38, v39))
          {
            uint64_t v40 = swift_slowAlloc(12LL, -1LL);
            uint64_t v48 = swift_slowAlloc(32LL, -1LL);
            *(void *)&__int128 v57 = v48;
            *(_DWORD *)uint64_t v40 = v47;
            uint64_t v41 = v61;
            uint64_t v42 = v62;
            sub_100008D74(v60, v61);
            uint64_t v43 = (*(uint64_t (**)(uint64_t))(*(void *)(v42 + 8) + 8LL))(v41);
            *(void *)(v40 + 4) = sub_10000DE60(v43, v44, (uint64_t *)&v57);
            swift_bridgeObjectRelease();
            sub_10000AC58(v60);
            _os_log_impl((void *)&_mh_execute_header, v38, v39, "%s is not link enabled", (uint8_t *)v40, 0xCu);
            uint64_t v45 = v48;
            swift_arrayDestroy(v48, 1LL);
            a1 = v55;
            swift_slowDealloc(v45, -1LL, -1LL);
            swift_slowDealloc(v40, -1LL, -1LL);

            (*(void (**)(char *, uint64_t))(v51 + 8))(v36, v52);
          }

          else
          {
            sub_10000AC58(v60);

            (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v33);
            a1 = v55;
          }

          sub_10000AC58(&v63);
          goto LABEL_22;
        }
      }

      sub_100058D54((uint64_t)v19, type metadata accessor for LSLinkBundleRecord);
    }

    else
    {
      id v21 = v17;
      unsigned __int8 v22 = objc_msgSend(v17, "swift_isAppIntentsEnabled");

      if ((v22 & 1) == 0) {
        goto LABEL_16;
      }
    }

    sub_100009EEC(&v63, (uint64_t)v60);
    unint64_t v23 = v65;
    if ((swift_isUniquelyReferenced_nonNull_native(v65) & 1) == 0)
    {
      sub_100045308();
      unint64_t v23 = v65;
    }

    unint64_t v24 = v23[2];
    if (v24 >= v23[3] >> 1)
    {
      sub_100045308();
      unint64_t v23 = v65;
    }

    uint64_t v25 = sub_10004BB58((uint64_t)v60, v61);
    double v26 = __chkstk_darwin(v25);
    uint64_t v28 = (char *)v46 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *, double))(v29 + 16))(v28, v26);
    uint64_t v58 = v54;
    id v59 = &off_100126180;
    uint64_t v30 = sub_10001AFA8(&v57);
    sub_100084248((uint64_t)v28, (uint64_t)v30, type metadata accessor for LSLinkBundleRecord);
    v23[2] = v24 + 1;
    sub_100009EEC(&v57, (uint64_t)&v23[5 * v24 + 4]);
    sub_10000AC58(v60);
    a1 = v55;
LABEL_22:
    ++v11;
    v12 += 40LL;
    if (v56 == v11) {
      goto LABEL_23;
    }
  }

  __break(1u);
}

void *sub_10008DED0(uint64_t (*a1)(uint64_t *), void *a2, unint64_t a3)
{
  unint64_t v4 = a3;
  uint64_t v29 = _swiftEmptyArrayStorage;
  if (a3 >> 62) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v7)
  {
    while (1)
    {
      unint64_t v8 = 0LL;
      uint64_t v26 = v4 & 0xFFFFFFFFFFFFFF8LL;
      unint64_t v27 = v4 & 0xC000000000000001LL;
      unint64_t v25 = v4;
      while (v27)
      {
        uint64_t v9 = sub_1000B8020(v8);
LABEL_7:
        uint64_t v10 = (void *)v9;
        unint64_t v11 = v8 + 1;
        if (__OFADD__(v8, 1LL)) {
          goto LABEL_17;
        }
        uint64_t v28 = v9;
        uint64_t v12 = a2;
        uint64_t v13 = a1(&v28);
        if (v3)
        {
          sub_10001BC70();

          swift_release();
          return v12;
        }

        if ((v13 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
          uint64_t v14 = v7;
          uint64_t v15 = a1;
          uint64_t v16 = a2;
          uint64_t v17 = v29[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
          uint64_t v18 = v17;
          a2 = v16;
          a1 = v15;
          uint64_t v7 = v14;
          unint64_t v4 = v25;
          uint64_t v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v10);
          specialized ContiguousArray._endMutation()(v19);
        }

        else
        {
        }

        ++v8;
        if (v11 == v7)
        {
          uint64_t v12 = v29;
          goto LABEL_23;
        }
      }

      if (v8 < *(void *)(v26 + 16)) {
        break;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      sub_1000B8064();
      if (v21 != v22) {
        unint64_t v23 = v4;
      }
      else {
        unint64_t v23 = v20;
      }
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v23);
      if (!v7) {
        goto LABEL_22;
      }
    }

    uint64_t v9 = (uint64_t)sub_10003F0A0(v4 + 8 * v8);
    goto LABEL_7;
  }

void sub_10008E060()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = v0;
    sub_1000B763C();
    uint64_t v3 = (void *)(v2 + 32);
    do
    {
      uint64_t v5 = v3[3];
      uint64_t v4 = v3[4];
      sub_100008D74(v3, v5);
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(v4 + 8) + 8LL))(v5);
      uint64_t v8 = v7;
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
        sub_1000B75CC();
      }
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      if (v9 >= _swiftEmptyArrayStorage[3] >> 1) {
        sub_1000B75CC();
      }
      _swiftEmptyArrayStorage[2] = v9 + 1;
      uint64_t v10 = &_swiftEmptyArrayStorage[2 * v9];
      v10[4] = v6;
      v10[5] = v8;
      v3 += 5;
      --v1;
    }

    while (v1);
  }

  sub_10001DEE8();
}

void sub_10008E148(void (*a1)(void *__return_ptr, uint64_t *), uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v5 = a3;
  if (a3 >> 62) {
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (v6)
  {
    unint64_t v23 = _swiftEmptyArrayStorage;
    sub_10004533C();
    if (v6 < 0)
    {
      __break(1u);
      return;
    }

    uint64_t v7 = 0LL;
    uint64_t v8 = v23;
    unint64_t v18 = v5;
    unint64_t v19 = v5 & 0xC000000000000001LL;
    uint64_t v17 = v6;
    while (v6 != v7)
    {
      if (v19) {
        uint64_t v9 = sub_1000B8020(v7);
      }
      else {
        uint64_t v9 = (uint64_t)sub_10003F0A0(v5 + 8 * v7);
      }
      uint64_t v10 = (void *)v9;
      uint64_t v21 = v9;
      a1(v22, &v21);
      if (v4)
      {
        swift_release();

        return;
      }

      uint64_t v12 = v22[0];
      uint64_t v11 = v22[1];
      uint64_t v13 = v22[2];
      uint64_t v14 = v22[3];
      unint64_t v23 = v8;
      unint64_t v15 = v8[2];
      if (v15 >= v8[3] >> 1)
      {
        sub_10004533C();
        uint64_t v8 = v23;
      }

      ++v7;
      v8[2] = v15 + 1;
      uint64_t v16 = &v8[4 * v15];
      v16[4] = v12;
      v16[5] = v11;
      v16[6] = v13;
      v16[7] = v14;
      uint64_t v6 = v17;
      unint64_t v5 = v18;
      uint64_t v4 = 0LL;
      if (v17 == v7) {
        return;
      }
    }

    __break(1u);
LABEL_18:
    sub_1000119E4();
    uint64_t v6 = sub_100028060();
    sub_10001BC70();
  }

void sub_10008E2D0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = v0;
    sub_1000B763C();
    uint64_t v3 = *(void *)(type metadata accessor for LNBundleRecord(0LL) - 8);
    uint64_t v4 = *(void *)(v3 + 72);
    unint64_t v5 = (uint64_t *)(((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + v2 + 8);
    do
    {
      uint64_t v7 = *(v5 - 1);
      uint64_t v6 = *v5;
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = _swiftEmptyArrayStorage[3];
      sub_10001C064();
      if (v9 >= v8 >> 1) {
        sub_1000B75CC();
      }
      unint64_t v5 = (uint64_t *)((char *)v5 + v4);
      _swiftEmptyArrayStorage[2] = v9 + 1;
      uint64_t v10 = &_swiftEmptyArrayStorage[2 * v9];
      v10[4] = v7;
      v10[5] = v6;
      --v1;
    }

    while (v1);
  }

  sub_10001DEE8();
}

void *sub_10008E390(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000452D4();
    uint64_t v3 = (void *)(a1 + 32);
    do
    {
      uint64_t v4 = v3[3];
      uint64_t v5 = v3[4];
      sub_100008D74(v3, v4);
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
      uint64_t v8 = v7;
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
        sub_1000452D4();
      }
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      if (v9 >= _swiftEmptyArrayStorage[3] >> 1) {
        sub_1000452D4();
      }
      _swiftEmptyArrayStorage[2] = v9 + 1;
      uint64_t v10 = &_swiftEmptyArrayStorage[2 * v9];
      v10[4] = v6;
      v10[5] = v8;
      v3 += 5;
      --v1;
    }

    while (v1);
  }

  return _swiftEmptyArrayStorage;
}

void sub_10008E4AC(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (v6)
  {
    uint64_t v21 = _swiftEmptyArrayStorage;
    sub_1000456F8();
    if (v6 < 0)
    {
      __break(1u);
      return;
    }

    uint64_t v7 = 0LL;
    uint64_t v8 = v21;
    while (v6 != v7)
    {
      if ((a3 & 0xC000000000000001LL) != 0) {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, a3);
      }
      else {
        id v9 = *(id *)(a3 + 8 * v7 + 32);
      }
      uint64_t v10 = v9;
      id v18 = v9;
      a1(&v19, &v18);
      if (v4)
      {
        swift_release();

        return;
      }

      uint64_t v4 = 0LL;

      uint64_t v11 = v19;
      __int128 v12 = v20;
      uint64_t v21 = v8;
      unint64_t v13 = v8[2];
      if (v13 >= v8[3] >> 1)
      {
        __int128 v16 = v20;
        sub_1000456F8();
        __int128 v12 = v16;
        uint64_t v8 = v21;
      }

      ++v7;
      v8[2] = v13 + 1;
      uint64_t v14 = &v8[3 * v13];
      v14[4] = v11;
      *(_OWORD *)(v14 + 5) = v12;
      if (v6 == v7) {
        return;
      }
    }

    __break(1u);
LABEL_18:
    if (a3 < 0) {
      uint64_t v15 = a3;
    }
    else {
      uint64_t v15 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v15);
    swift_bridgeObjectRelease();
  }

void *sub_10008E648(uint64_t a1, char *a2)
{
  uint64_t v5 = type metadata accessor for Logger(0LL);
  __chkstk_darwin(v5);
  id v9 = (char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    uint64_t v40 = v7;
    uint64_t v41 = v6;
    v37[2] = v2;
    id v39 = a2;
    int64_t v49 = &a2[OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource];
    __n128 v11 = swift_bridgeObjectRetain();
    __int128 v12 = _swiftEmptyArrayStorage;
    v37[1] = a1;
    unint64_t v13 = (unint64_t *)(a1 + 40);
    v11.n128_u64[0] = 136315138LL;
    __n128 v38 = v11;
    v37[3] = (char *)&type metadata for Any + 8;
    do
    {
      uint64_t v15 = *(v13 - 1);
      unint64_t v14 = *v13;
      sub_100008D74(v49, *((void *)v49 + 3));
      swift_bridgeObjectRetain();
      sub_1000AFCF4((uint64_t)&v46);
      if (v47)
      {
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v42 = v12;
        uint64_t v16 = qword_100130330;
        id v17 = v39;
        if (v16 != -1) {
          swift_once(&qword_100130330, sub_100091538);
        }
        uint64_t v18 = v41;
        uint64_t v19 = sub_100008D98(v41, (uint64_t)qword_100135860);
        uint64_t v20 = v40;
        (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v9, v19, v18);

        uint64_t v21 = swift_bridgeObjectRetain_n(v14, 2LL);
        char v22 = (os_log_s *)Logger.logObject.getter(v21);
        os_log_type_t v23 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v22, v23))
        {
          uint64_t v24 = swift_slowAlloc(12LL, -1LL);
          uint64_t v25 = swift_slowAlloc(32LL, -1LL);
          *(void *)&v48[0] = v25;
          *(_DWORD *)uint64_t v24 = v38.n128_u32[0];
          swift_bridgeObjectRetain();
          *(void *)(v24 + 4) = sub_10000DE60(v15, v14, (uint64_t *)v48);
          swift_bridgeObjectRelease_n(v14, 3LL);
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to map %s", (uint8_t *)v24, 0xCu);
          swift_arrayDestroy(v25, 1LL);
          swift_slowDealloc(v25, -1LL, -1LL);
          swift_slowDealloc(v24, -1LL, -1LL);

          (*(void (**)(char *, uint64_t))(v40 + 8))(v9, v41);
        }

        else
        {

          swift_bridgeObjectRelease_n(v14, 2LL);
          (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v18);
        }

        swift_bridgeObjectRelease();
        __int128 v12 = v42;
      }

      if (v47)
      {
        sub_100009EEC(&v46, (uint64_t)v48);
        sub_100009EEC(v48, (uint64_t)&v46);
        if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
        {
          sub_100014190();
          __int128 v12 = v34;
        }

        unint64_t v26 = v12[2];
        if (v26 >= v12[3] >> 1)
        {
          sub_100014190();
          unint64_t v27 = v35;
        }

        else
        {
          unint64_t v27 = v12;
        }

        uint64_t v28 = sub_10004BB58((uint64_t)&v46, v47);
        double v29 = __chkstk_darwin(v28);
        uint64_t v31 = (char *)v37 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *, double))(v32 + 16))(v31, v29);
        uint64_t v44 = type metadata accessor for LSLinkBundleRecord(0LL);
        uint64_t v45 = &off_100126180;
        uint64_t v33 = sub_10001AFA8(&v43);
        sub_100084248((uint64_t)v31, (uint64_t)v33, type metadata accessor for LSLinkBundleRecord);
        __int128 v12 = v27;
        v27[2] = v26 + 1;
        sub_100009EEC(&v43, (uint64_t)&v27[5 * v26 + 4]);
        sub_10000AC58(&v46);
      }

      else
      {
        sub_100026E14((uint64_t)&v46, &qword_1001333C8);
      }

      v13 += 2;
      --v10;
    }

    while (v10);

    swift_bridgeObjectRelease();
  }

  else
  {

    return _swiftEmptyArrayStorage;
  }

  return v12;
}

void sub_10008EA6C(unint64_t a1, uint64_t (*a2)(void))
{
  if (a1 >> 62) {
    goto LABEL_17;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  sub_1000119E4();
  for (; v3; uint64_t v3 = sub_100028060())
  {
    uint64_t v4 = _swiftEmptyArrayStorage;
    uint64_t v5 = 4LL;
    uint64_t v16 = v3;
    while (1)
    {
      id v6 = (a1 & 0xC000000000000001LL) != 0 ? (id)sub_1000B8020(v5 - 4) : *(id *)(a1 + 8 * v5);
      uint64_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1LL)) {
        break;
      }
      uint64_t v9 = a2();
      uint64_t v11 = v10;

      if (v11)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
        {
          sub_100027F90();
          sub_1000141B8();
          uint64_t v4 = v14;
        }

        unint64_t v12 = v4[2];
        if (v12 >= v4[3] >> 1)
        {
          sub_1000141B8();
          uint64_t v4 = v15;
        }

        v4[2] = v12 + 1;
        unint64_t v13 = &v4[2 * v12];
        v13[4] = v9;
        uint64_t v13[5] = v11;
        uint64_t v3 = v16;
      }

      ++v5;
      if (v8 == v3) {
        goto LABEL_18;
      }
    }

    __break(1u);
LABEL_17:
    sub_1000119E4();
  }

void sub_10008EBB4(uint64_t a1)
{
  uint64_t v2 = sub_100008DB0(&qword_100132D90);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for LNBundleRecord(0LL);
  uint64_t v40 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v35 = (uint64_t)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v34 = (uint64_t)&v31 - v8;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v31 - v10;
  __chkstk_darwin(v12);
  unint64_t v14 = (char *)&v31 - v13;
  sub_100033164(a1, v39);
  uint64_t v15 = v39[0];
  int64_t v16 = v39[3];
  unint64_t v17 = v39[4];
  uint64_t v37 = v39[1];
  int64_t v38 = (unint64_t)(v39[2] + 64LL) >> 6;
  swift_bridgeObjectRetain();
  int64_t v36 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v17)
    {
      unint64_t v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_20;
    }

    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v20 >= v38) {
      goto LABEL_27;
    }
    unint64_t v21 = *(void *)(v37 + 8 * v20);
    int64_t v22 = v16 + 1;
    if (!v21)
    {
      int64_t v22 = v16 + 2;
      if (v16 + 2 >= v38) {
        goto LABEL_27;
      }
      unint64_t v21 = *(void *)(v37 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = v16 + 3;
        if (v16 + 3 >= v38) {
          goto LABEL_27;
        }
        unint64_t v21 = *(void *)(v37 + 8 * v22);
        if (!v21)
        {
          int64_t v22 = v16 + 4;
          if (v16 + 4 >= v38) {
            goto LABEL_27;
          }
          unint64_t v21 = *(void *)(v37 + 8 * v22);
          if (!v21)
          {
            int64_t v22 = v16 + 5;
            if (v16 + 5 >= v38) {
              goto LABEL_27;
            }
            unint64_t v21 = *(void *)(v37 + 8 * v22);
            if (!v21)
            {
              int64_t v23 = v16 + 6;
              while (v23 < v38)
              {
                unint64_t v21 = *(void *)(v37 + 8 * v23++);
                if (v21)
                {
                  int64_t v22 = v23 - 1;
                  goto LABEL_19;
                }
              }

uint64_t sub_10008EF44(uint64_t a1, char *a2)
{
  return sub_10008EF70(a2);
}

uint64_t sub_10008EF70(char *a1)
{
  uint64_t v2 = v1;
  char v4 = *a1;
  __int128 v23 = *(_OWORD *)(a1 + 8);
  uint64_t v5 = *((void *)a1 + 3);
  uint64_t v21 = *((void *)a1 + 4);
  uint64_t v22 = v5;
  char v6 = a1[40];
  uint64_t v7 = *((void *)a1 + 6);
  uint64_t v8 = *((void *)a1 + 7);
  uint64_t v9 = sub_100008DB0(&qword_100133910);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  os_unfair_lock_assert_owner((os_unfair_lock_t)(*(void *)(v1 + 16) + 16LL));
  *(_BYTE *)(v1 + 40) = 1;
  uint64_t v13 = v1 + 32;
  swift_beginAccess(v13, v31, 0LL, 0LL);
  if (*(void *)(*(void *)(v2 + 32) + 16LL))
  {
    swift_beginAccess(v13, &v24, 33LL, 0LL);
    sub_10008F310((uint64_t)v12);
    swift_endAccess(&v24);
    uint64_t v24 = v4 & 1;
    __int128 v25 = v23;
    uint64_t v26 = v22;
    uint64_t v27 = v21;
    uint64_t v28 = v6 & 1;
    uint64_t v29 = v7;
    uint64_t v30 = v8;
    sub_1000B4CCC(a1);
    CheckedContinuation.resume(returning:)(&v24, v9);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  else
  {
    swift_beginAccess(v2 + 24, &v24, 33LL, 0LL);
    sub_1000B4CCC(a1);
    sub_1000B06A0((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100014174);
    uint64_t v15 = *(void *)(*(void *)(v2 + 24) + 16LL);
    sub_1000B06F8(v15, (uint64_t (*)(BOOL))sub_100014174);
    uint64_t v16 = *(void *)(v2 + 24);
    *(void *)(v16 + 16) = v15 + 1;
    unint64_t v17 = (_OWORD *)(v16 + (v15 << 6));
    __int128 v18 = *(_OWORD *)a1;
    __int128 v19 = *((_OWORD *)a1 + 1);
    __int128 v20 = *((_OWORD *)a1 + 3);
    v17[4] = *((_OWORD *)a1 + 2);
    v17[5] = v20;
    v17[2] = v18;
    v17[3] = v19;
    return swift_endAccess(&v24);
  }

void sub_10008F130(uint64_t a1, uint64_t (*a2)(void))
{
  char v4 = (os_unfair_lock_s *)(*(void *)(v2 + 16) + 16LL);
  os_unfair_lock_lock(v4);
  sub_100032AB0(v5, a2);
  os_unfair_lock_unlock(v4);
}

uint64_t sub_10008F19C(uint64_t a1, char *a2)
{
  uint64_t v4 = a1;
  swift_beginAccess(a1 + 24, v17, 1LL, 0LL);
  uint64_t v5 = *(void *)(*(void *)(v4 + 24) + 16LL);
  if (v5)
  {
    uint64_t v15 = a2;
    uint64_t v16 = v4;
    uint64_t v18 = v2;
    swift_bridgeObjectRetain();
    uint64_t v7 = (void *)(v6 + 48);
    do
    {
      uint64_t v8 = (void (*)(uint64_t))v7[4];
      if (v8)
      {
        uint64_t v9 = v7[5];
        uint64_t v10 = v7[1];
        unint64_t v11 = v7[2];
        unint64_t v12 = sub_1000B4F54();
        uint64_t v13 = swift_allocError(&type metadata for Registry.IndexingQueue.Change.ChangeError, v12, 0LL, 0LL);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_100058E4C(v10, v11);
        sub_100047094((uint64_t)v8, v9);
        sub_100047094((uint64_t)v8, v9);
        v8(v13);
        swift_errorRelease(v13);
        sub_100075674((uint64_t)v8, v9);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10000A21C(v10, v11);
        sub_100075674((uint64_t)v8, v9);
      }

      v7 += 8;
      --v5;
    }

    while (v5);
    swift_bridgeObjectRelease();
    a2 = v15;
    uint64_t v4 = v16;
  }

  *(void *)(v4 + 24) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  return sub_10008EF70(a2);
}

void sub_10008F310(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100008DB0(&qword_100133938);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *v1;
  if (!*(void *)(*v1 + 16))
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  sub_100038AD4(*v1);
  uint64_t v7 = sub_100008DB0(&qword_100133910);
  if (sub_100009E6C((uint64_t)v5, 1LL, v7) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, v5, v7);
    if (*(void *)(v6 + 16))
    {
      sub_1000B077C(0LL, 1LL);
      return;
    }

    goto LABEL_6;
  }

void sub_10008F3F0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (os_unfair_lock_s *)(*(void *)(v1 + 16) + 16LL);
  os_unfair_lock_lock(v4);
  uint64_t v5 = (uint64_t *)(v1 + 24);
  swift_beginAccess(v5, v24, 0LL, 0LL);
  if (*(void *)(*(void *)(v2 + 24) + 16LL))
  {
    swift_beginAccess(v5, &v20, 33LL, 0LL);
    uint64_t v6 = *v5;
    if (*(void *)(*v5 + 16))
    {
      uint64_t v8 = *(void *)(v6 + 80);
      uint64_t v7 = *(void *)(v6 + 88);
      uint64_t v9 = *(unsigned __int8 *)(v6 + 72);
      uint64_t v11 = *(void *)(v6 + 56);
      unint64_t v10 = *(void *)(v6 + 64);
      uint64_t v13 = *(void *)(v6 + 40);
      uint64_t v12 = *(void *)(v6 + 48);
      uint64_t v14 = *(unsigned __int8 *)(v6 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100058E4C(v11, v10);
      sub_100047094(v8, v7);
      sub_1000B0894(0LL, 1LL);
      swift_endAccess(&v20);
      os_unfair_lock_unlock(v4);
      *(void *)&__int128 v20 = v14;
      *((void *)&v20 + 1) = v13;
      *(void *)&__int128 v21 = v12;
      *((void *)&v21 + 1) = v11;
      *(void *)&__int128 v22 = v10;
      *((void *)&v22 + 1) = v9;
      *(void *)&__int128 v23 = v8;
      *((void *)&v23 + 1) = v7;
      uint64_t v15 = sub_100008DB0(&qword_100133910);
      CheckedContinuation.resume(returning:)(&v20, v15);
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    if ((*(_BYTE *)(v2 + 40) & 1) != 0)
    {
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      uint64_t v16 = sub_100008DB0(&qword_100133910);
      CheckedContinuation.resume(returning:)(&v20, v16);
    }

    else
    {
      swift_beginAccess(v2 + 32, &v20, 33LL, 0LL);
      sub_1000B06A0((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100014160);
      uint64_t v17 = *(void *)(*(void *)(v2 + 32) + 16LL);
      sub_1000B06F8(v17, (uint64_t (*)(BOOL))sub_100014160);
      uint64_t v18 = *(void *)(v2 + 32);
      *(void *)(v18 + 16) = v17 + 1;
      uint64_t v19 = sub_100008DB0(&qword_100133910);
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16LL))( v18 + ((*(unsigned __int8 *)(*(void *)(v19 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v19 - 8) + 80LL))
      + *(void *)(*(void *)(v19 - 8) + 72LL) * v17,
        a1,
        v19);
      swift_endAccess(&v20);
    }

    os_unfair_lock_unlock(v4);
  }

uint64_t sub_10008F5E0(uint64_t a1)
{
  return swift_release();
}

uint64_t sub_10008F614()
{
  uint64_t v1 = sub_100008DB0(&qword_100133990);
  uint64_t v2 = swift_allocObject(v1, 20LL, 7LL);
  *(_DWORD *)(v2 + 16) = 0;
  *(void *)(v0 + 16) = v2;
  *(void *)(v0 + 24) = _swiftEmptyArrayStorage;
  *(void *)(v0 + 32) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v0 + 40) = 0;
  return v0;
}

void *sub_10008F658(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    sub_100008DB0(&qword_100130E90);
    uint64_t v4 = (void *)static _DictionaryStorage.allocate(capacity:)(v3);
  }

  else
  {
    uint64_t v4 = _swiftEmptyDictionarySingleton;
  }

  uint64_t v7 = v4;
  sub_1000B0BA0(a1, 1, (uint64_t)&v7);
  uint64_t v5 = v7;
  if (v1) {
    swift_release();
  }
  return v5;
}

void sub_10008F6E4()
{
  char v5 = v4;
  uint64_t v7 = v6;
  uint64_t v22 = sub_1000B700C();
  uint64_t v8 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  sub_1000B6FC4();
  sub_1000B71AC();
  __chkstk_darwin(v9);
  sub_100068380();
  if (qword_100130428 != -1) {
    swift_once(&qword_100130428, sub_1000C2D08);
  }
  uint64_t v10 = sub_100008D98(v0, (uint64_t)qword_100135CB0);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v3, v10, v0);
  uint64_t v12 = off_100126240[v5];
  uint64_t v13 = (os_log_s *)OSSignposter.logHandle.getter(v11);
  os_signpost_type_t v14 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    uint64_t v15 = v7;
    uint64_t v16 = (uint8_t *)sub_10000AE10(2LL);
    *(_WORD *)uint64_t v16 = 0;
    os_signpost_id_t v17 = OSSignpostID.rawValue.getter();
    sub_1000B7848((void *)&_mh_execute_header, v13, v14, v17, v12, "", v16);
    uint64_t v18 = (uint64_t)v16;
    uint64_t v7 = v15;
    sub_10000AD78(v18);
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v1, v7, v22);
  uint64_t v19 = type metadata accessor for OSSignpostIntervalState(0LL);
  sub_1000B7498(v19);
  uint64_t v20 = sub_1000B7014();
  OSSignpostIntervalState.init(id:isOpen:)(v20, v21);
  sub_1000B71D4(v3, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_10000AD58();
}

void sub_10008F854()
{
}

void sub_10008F878()
{
  uint64_t v2 = v1;
  char v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = sub_1000B700C();
  __chkstk_darwin(v11);
  sub_1000B6A6C();
  if (*v8 != -1LL) {
    swift_once(v8, v2);
  }
  uint64_t v12 = type metadata accessor for OSSignposter(0LL);
  sub_100008D98(v12, v6);
  unint64_t v13 = v4(v10);
  char v15 = v14;
  uint64_t v16 = (os_log_s *)OSSignposter.logHandle.getter();
  os_signpost_type_t v17 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0) {
    goto LABEL_12;
  }
  if ((v15 & 1) == 0)
  {
    if (v13)
    {
LABEL_11:
      uint64_t v18 = (uint8_t *)sub_10000AE10(2LL);
      os_signpost_id_t v19 = sub_1000B74B8(v18);
      sub_1000B7848((void *)&_mh_execute_header, v16, v17, v19, (const char *)v13, "", v18);
      sub_10000AD78((uint64_t)v18);
LABEL_12:

      uint64_t v20 = sub_1000B6F6C();
      v21(v20);
      uint64_t v22 = type metadata accessor for OSSignpostIntervalState(0LL);
      sub_1000B7498(v22);
      OSSignpostIntervalState.init(id:isOpen:)(v0, 1LL);
      sub_10000AD58();
      return;
    }

    __break(1u);
  }

  if (HIDWORD(v13))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  if (v13 >> 11 != 27)
  {
    if (WORD1(v13) <= 0x10u)
    {
      unint64_t v13 = (unint64_t)&v23;
      goto LABEL_11;
    }

    goto LABEL_14;
  }

void sub_10008F9E4(uint64_t a1, uint64_t a2)
{
  if (a2) {
    _convertErrorToNSError(_:)(a2);
  }
  uint64_t v2 = sub_10000AF9C();
  id v5 = v3;
  v4(v2);
}

uint64_t sub_10008FA38(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100067ABC((uint64_t)sub_10008FA4C);
}

uint64_t sub_10008FA4C()
{
  uint64_t v1 = sub_10000AE38();
  id v2 = sub_10003F9CC(v1, "currentConnection");
  sub_1000B6CF4((uint64_t)v2);
  uint64_t v3 = (void *)swift_task_alloc(dword_1001332CC);
  *(void *)(v0 + 48) = v3;
  void *v3 = v0;
  v3[1] = sub_10008FAD0;
  uint64_t v4 = sub_1000B62A8();
  return sub_10009C318(v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10008FAD0()
{
  if (v0)
  {
    sub_10000EA88();
    return sub_10000AE28();
  }

  else
  {
    sub_1000B6D40();
    uint64_t v2 = sub_1000B686C();
    return sub_1000B6338(v2, v3);
  }

uint64_t sub_10008FB14(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100067ABC((uint64_t)sub_10008FB28);
}

uint64_t sub_10008FB28()
{
  uint64_t v1 = sub_10000AE38();
  id v2 = sub_10003F9CC(v1, "currentConnection");
  sub_1000B6CF4((uint64_t)v2);
  uint64_t v3 = (void *)swift_task_alloc(dword_100133734);
  *(void *)(v0 + 48) = v3;
  void *v3 = v0;
  v3[1] = sub_10008FAD0;
  uint64_t v4 = sub_1000B62A8();
  return sub_10009C84C(v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10008FBAC(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100067ABC((uint64_t)sub_10008FBC0);
}

uint64_t sub_10008FBC0()
{
  uint64_t v1 = sub_10000AE38();
  id v2 = sub_10003F9CC(v1, "currentConnection");
  sub_1000B6CF4((uint64_t)v2);
  uint64_t v3 = (void *)swift_task_alloc(dword_1001336C4);
  *(void *)(v0 + 48) = v3;
  void *v3 = v0;
  v3[1] = sub_10008FAD0;
  uint64_t v4 = sub_1000B62A8();
  return sub_10009CD80(v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10008FC44()
{
  *(void *)(v1 + 16) = v0;
  return sub_100067ABC((uint64_t)sub_10008FC54);
}

uint64_t sub_10008FC54()
{
  id v1 = sub_1000B6D00();
  id v2 = sub_100011ABC((uint64_t)v1, "currentConnection");
  sub_1000B72E4((uint64_t)v2);
  uint64_t v3 = (void *)swift_task_alloc(dword_10013331C);
  *(void *)(v0 + 32) = v3;
  void *v3 = v0;
  v3[1] = sub_10008FCC8;
  uint64_t v4 = sub_1000B62A8();
  return sub_10009D2B4(v4, v5, v6, v7, v8);
}

uint64_t sub_10008FCC8()
{
  if (v0)
  {
    sub_10000EA88();
    return sub_10000AE28();
  }

  else
  {
    sub_1000B6F2C();
    uint64_t v2 = sub_1000B686C();
    return sub_1000B6338(v2, v3);
  }

void sub_10008FD0C()
{
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  sub_100008DB0(&qword_1001332F8);
  sub_100011A24();
  __chkstk_darwin(v7);
  uint64_t v66 = sub_1000B6EC8(v8, v63);
  uint64_t v64 = *(void *)(v66 - 8);
  sub_100027F2C();
  __chkstk_darwin(v9);
  sub_1000B71C0();
  uint64_t v10 = sub_100011A34();
  __chkstk_darwin(v10);
  sub_100008DB0(&qword_100133300);
  sub_100011A24();
  __chkstk_darwin(v11);
  sub_1000B7888();
  uint64_t v12 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v67 = *(void *)(v12 - 8);
  sub_100027F2C();
  __chkstk_darwin(v13);
  uint64_t v14 = sub_1000B6980();
  char v15 = (int *)type metadata accessor for LSLinkBundleRecord(v14);
  sub_100011A24();
  __chkstk_darwin(v16);
  sub_10000AEB0();
  uint64_t v17 = sub_1000B25EC(v4, (SEL *)&selRef_bundleIdentifier);
  if (!v18)
  {

LABEL_14:
    sub_1000B75C0(v6, 1LL);
    goto LABEL_17;
  }

  uint64_t v68 = v10;
  uint64_t *v0 = v17;
  v0[1] = v18;
  uint64_t v19 = objc_opt_self(&OBJC_CLASS___LSApplicationRecord);
  uint64_t v20 = sub_1000B7DB0(v19);
  uint64_t v21 = &selRef_isLowPowerDeviceEnabled;
  if (v20
    && (uint64_t v22 = (void *)v20,
        id v23 = v4,
        uint64_t v20 = sub_1000B2644(v22),
        uint64_t v21 = &selRef_isLowPowerDeviceEnabled,
        v24 >> 60 != 15))
  {
    uint64_t v31 = (uint64_t *)((char *)v0 + v15[6]);
    *uint64_t v31 = v20;
    v31[1] = v24;
  }

  else
  {
    id v25 = sub_100068358(v20, v21[22]);
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v25);

    uint64_t v26 = sub_100008DB0(&qword_100133308);
    uint64_t v27 = sub_1000B7D0C(v26);
    *(_OWORD *)(v27 + 16) = xmmword_1000F5520;
    sub_1000B7D04(v27, NSURLContentModificationDateKey);
    sub_100066580(v27);
    sub_1000B7E08();
    if (v27)
    {
      sub_10001DED8();
      sub_10000AD70();
      sub_1000B77C4();
      sub_1000B748C();
      sub_100009E60(v28, v29, v30, v12);
LABEL_12:

      sub_100026E14(v2, &qword_100133300);
LABEL_13:
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }

    sub_1000B77C4();
    sub_10001DED8();
    sub_1000B7130();
    sub_100009E60(v39, v40, v41, v12);
    sub_1000B6D2C(v2, 1LL, v12);
    if (v54) {
      goto LABEL_12;
    }
    uint64_t v49 = sub_1000B7958();
    uint64_t v51 = v50(v49);
    URLResourceValues.contentModificationDate.getter(v51);
    uint64_t v52 = sub_1000B7014();
    sub_1000B6D2C(v52, v53, v66);
    if (v54)
    {

      uint64_t v55 = sub_1000B71D4(v1, *(uint64_t (**)(uint64_t, uint64_t))(v67 + 8));
      sub_1000B7E64(v55, &qword_1001332F8);
      goto LABEL_13;
    }

    uint64_t v56 = sub_1000B7658();
    uint64_t v58 = v57(v56);
    double v59 = Date.timeIntervalSinceReferenceDate.getter(v58);
    uint64_t v65 = sub_1000B6F1C(v59);
    uint64_t v61 = v60;
    sub_1000B7FD4(*(uint64_t (**)(uint64_t, uint64_t))(v64 + 8));
    uint64_t v20 = sub_1000B71D4(v1, *(uint64_t (**)(uint64_t, uint64_t))(v67 + 8));
    uint64_t v62 = (uint64_t *)((char *)v0 + v15[6]);
    *uint64_t v62 = v65;
    v62[1] = v61;
  }

  id v32 = sub_100068358(v20, "registrationDate");
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v33 = objc_opt_self(&OBJC_CLASS___LSApplicationRecord);
  uint64_t v34 = sub_1000B7DB0(v33);
  if (v34)
  {
    id v35 = v4;
    char v36 = sub_10000EBAC();

    uint64_t v37 = v15[8];
    char v38 = v36 & 1;
  }

  else
  {
    uint64_t v37 = v15[8];
    char v38 = 1;
  }

  *((_BYTE *)v0 + v37) = v38;
  *((_BYTE *)v0 + v15[9]) = 0;
  id v42 = sub_100068358(v34, "URL");
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v42);

  sub_1000B7130();
  sub_100009E60(v43, v44, v45, v68);
  sub_100084214((uint64_t)v0, v6, type metadata accessor for LSLinkBundleRecord);
  sub_1000B7130();
  sub_100009E60(v46, v47, v48, (uint64_t)v15);
  sub_1000B7E10((uint64_t)v0);
LABEL_17:
  sub_10000AD58();
}

uint64_t sub_100090128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  void v4[9] = a2;
  return sub_100067ABC((uint64_t)sub_10009013C);
}

uint64_t sub_10009013C()
{
  uint64_t v1 = (void *)v0[11];
  objc_opt_self(&OBJC_CLASS___NSXPCConnection);
  id v2 = v1;
  sub_10000AFB0();
  uint64_t v3 = sub_10000AE38();
  id v4 = sub_100028058(v3, "currentConnection");
  v0[12] = (uint64_t)v4;
  uint64_t v5 = (uint64_t **)swift_task_alloc(dword_10013395C);
  v0[13] = (uint64_t)v5;
  *uint64_t v5 = v0;
  v5[1] = (uint64_t *)sub_1000901FC;
  return sub_10009E30C( (uint64_t)v5,  (uint64_t)v4,  0x7972747369676552LL,  0xEE00726F72726520LL,  v0[11],  v0[11],  v0[8],  v0[9]);
}

uint64_t sub_1000901FC()
{
  if (!v1) {

  }
  sub_10000EA88();
  return sub_10004BEA0();
}

uint64_t sub_100090240()
{
  unint64_t v1 = v0[8];
  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t result = sub_10001C064();
    if (v2) {
      goto LABEL_3;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    uint64_t v13 = (uint64_t (*)(void))sub_1000681B8();
    return sub_1000B6AD4(v13);
  }

  sub_10001C064();
  uint64_t result = sub_10003EF5C();
  uint64_t v2 = result;
  if (!result) {
    goto LABEL_9;
  }
LABEL_3:
  if (v2 >= 1)
  {
    uint64_t v4 = 0LL;
    uint64_t v14 = v0[8] + 32LL;
    do
    {
      if ((v1 & 0xC000000000000001LL) != 0) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v0[8]);
      }
      else {
        id v5 = *(id *)(v14 + 8 * v4);
      }
      uint64_t v6 = v5;
      uint64_t v7 = v0[9];
      uint64_t v8 = v0[10];
      ++v4;
      NSString v9 = String._bridgeToObjectiveC()();
      uint64_t v10 = (void *)sub_10000C254((uint64_t)&unk_100126068, 40LL);
      v10[2] = v7;
      v10[3] = v8;
      v10[4] = v6;
      v0[6] = sub_1000B5038;
      v0[7] = v10;
      v0[2] = _NSConcreteStackBlock;
      v0[3] = 1107296256LL;
      v0[4] = sub_1000ABD3C;
      v0[5] = &unk_100126080;
      uint64_t v11 = _Block_copy(v0 + 2);
      sub_10001C1BC();
      id v12 = v6;
      sub_100068168();
      AnalyticsSendEventLazy(v9, v11);
      _Block_release(v11);
    }

    while (v2 != v4);
    goto LABEL_9;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000903D8()
{
  return sub_10000C914(*(uint64_t (**)(void))(v0 + 8));
}

unint64_t *sub_100090404(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) > *(void *)(a2 + 16) >> 3) {
    return sub_1000B1438(a1, a2);
  }
  sub_1000B12A0(a1);
  return (unint64_t *)a2;
}

uint64_t sub_100090454()
{
  uint64_t v0 = sub_100008DB0(&qword_100133998);
  uint64_t v1 = sub_10000C254(v0, 72LL);
  *(_OWORD *)(v1 + 16) = xmmword_1000F5520;
  if (qword_100130290 != -1) {
    swift_once(&qword_100130290, sub_100076314);
  }
  uint64_t v2 = qword_100135630;
  *(void *)(v1 + 56) = &type metadata for NotifyingRegistryObserver;
  *(void *)(v1 + 64) = &off_100125478;
  *(void *)(v1 + 32) = v2;
  qword_100135810 = (uint64_t)sub_100090518;
  *(void *)algn_100135818 = 0LL;
  qword_100135820 = (uint64_t)sub_100090560;
  unk_100135828 = 0LL;
  qword_100135830 = (uint64_t)sub_100090590;
  unk_100135838 = 0LL;
  qword_100135840 = (uint64_t)sub_1000905D0;
  unk_100135848 = 0LL;
  qword_100135850 = v1;
  unk_100135858 = 0x4014000000000000LL;
  return swift_retain(v2);
}

void sub_100090518(void *a1@<X0>, void *a2@<X8>)
{
  if (!v2) {
    memcpy(a2, __src, 0x88uLL);
  }
}

uint64_t sub_100090560()
{
  return static AssistantPrebuiltLibrary.library.getter();
}

uint64_t sub_100090590@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for LSLinkBundleSource();
  uint64_t result = swift_allocObject(v2, 16LL, 7LL);
  a1[3] = v2;
  a1[4] = (uint64_t)&off_100125840;
  *a1 = result;
  return result;
}

uint64_t (*sub_1000905D0())(uint64_t a1)
{
  uint64_t v1 = sub_100008DB0(&qword_100130BC0);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v17 - v9;
  uint64_t v11 = (uint64_t (*)(uint64_t)) [(id)objc_opt_self(NSFileManager) defaultManager];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNDaemonBundleIdentifier);
  uint64_t v14 = v13;
  sub_10003F9DC(v12, v13);

  swift_bridgeObjectRelease(v14);
  if (!v0)
  {
    type metadata accessor for Registry(0LL);
    URL.appendingPathComponent(_:isDirectory:)(0x6573616261746164LL, 0xE800000000000000LL, 1LL);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v3, v10, v4);
    sub_100009E60((uint64_t)v3, 0LL, 1LL, v4);
    uint64_t v11 = sub_1000907D8((uint64_t)v7, (unint64_t)v3);
    sub_100026E14((uint64_t)v3, &qword_100130BC0);
    uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v7, v4);
    v16(v10, v4);
  }

  return v11;
}

uint64_t (*sub_1000907D8(uint64_t a1, unint64_t a2))(uint64_t a1)
{
  unint64_t v129 = a2;
  uint64_t v2 = type metadata accessor for RegistryError(0LL);
  __chkstk_darwin(v2);
  uint64_t v123 = (char *)&v115 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v125 = (uint64_t)&v115 - v5;
  uint64_t v6 = sub_100008DB0(&qword_100130BC0);
  __chkstk_darwin(v6);
  uint64_t v127 = (uint64_t)&v115 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v133 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(char **)(v133 - 8);
  __chkstk_darwin(v133);
  uint64_t v120 = (uint8_t *)&v115 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v126 = (uint8_t *)&v115 - v11;
  __chkstk_darwin(v12);
  uint64_t v122 = (uint8_t *)&v115 - v13;
  __chkstk_darwin(v14);
  uint64_t v132 = (char *)&v115 - v15;
  __chkstk_darwin(v16);
  uint64_t v18 = (uint8_t *)&v115 - v17;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v115 - v20;
  id v130 = (id)objc_opt_self(&OBJC_CLASS___NSFileManager);
  uint64_t v22 = (char **)[v130 defaultManager];
  URL.path.getter(v22);
  uint64_t v24 = v23;
  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v24);
  uint64_t v137 = 0LL;
  unsigned int v26 = [v22 createDirectoryAtPath:v25 withIntermediateDirectories:1 attributes:0 error:&v137];

  uint64_t v27 = v137;
  if (!v26)
  {
    id v42 = v137;
    _convertNSErrorToError(_:)(v27);

    swift_willThrow(v43);
    return v27;
  }

  uint64_t v116 = v2;
  uint64_t v28 = v137;
  unint64_t v115 = (unint64_t)"staticVocabularyExtraction";
  URL.appendingPathComponent(_:)(0xD00000000000001BLL, 0x80000001000FBF90LL);
  if (qword_100130330 != -1) {
    goto LABEL_54;
  }
  while (1)
  {
    uint64_t v117 = type metadata accessor for Logger(0LL);
    uint64_t v29 = sub_100008D98(v117, (uint64_t)qword_100135860);
    uint64_t v30 = (uint64_t (*)(uint8_t *, char *, uint64_t))*((void *)v8 + 2);
    uint64_t v31 = v30(v18, v21, v133);
    uint64_t v118 = v29;
    id v32 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v33 = static os_log_type_t.debug.getter();
    BOOL v34 = os_log_type_enabled(v32, v33);
    uint64_t v124 = v21;
    uint64_t v121 = v22;
    uint64_t v119 = v30;
    if (v34)
    {
      id v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      char v36 = (uint64_t (*)(uint64_t))swift_slowAlloc(32LL, -1LL);
      uint64_t v137 = v36;
      *(_DWORD *)id v35 = 136315138;
      uint64_t v37 = URL.path.getter(v36);
      unint64_t v39 = v38;
      uint64_t v134 = sub_10000DE60(v37, v38, (uint64_t *)&v137);
      uint64_t v21 = v124;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v35 + 4, v35 + 12);
      swift_bridgeObjectRelease(v39);
      uint64_t v131 = (void (*)(uint8_t *, uint64_t))*((void *)v8 + 1);
      v131(v18, v133);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Loading metadata store from %s", v35, 0xCu);
      swift_arrayDestroy(v36, 1LL);
      uint64_t v40 = v36;
      uint64_t v30 = v119;
      swift_slowDealloc(v40, -1LL, -1LL);
      uint64_t v41 = v35;
      uint64_t v22 = v121;
      swift_slowDealloc(v41, -1LL, -1LL);
    }

    else
    {
      uint64_t v131 = (void (*)(uint8_t *, uint64_t))*((void *)v8 + 1);
      v131(v18, v133);
    }

    uint64_t v44 = v127;
    sub_100026CB8(v129, v127, &qword_100130BC0);
    if (sub_100009E6C(v44, 1LL, v133) == 1)
    {
      sub_100026E14(v44, &qword_100130BC0);
      uint64_t v45 = v22;
      goto LABEL_38;
    }

    uint64_t v46 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v8 + 4))(v132, v44, v133);
    URL.path.getter(v46);
    uint64_t v48 = v47;
    NSString v49 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v48);
    uint64_t v137 = 0LL;
    uint64_t v45 = v22;
    id v50 = [v22 contentsOfDirectoryAtPath:v49 error:&v137];

    uint64_t v51 = v137;
    if (!v50) {
      break;
    }
    uint64_t v52 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v50, &type metadata for String);
    uint64_t v53 = v51;

    uint64_t v54 = *(void *)(v52 + 16);
    uint64_t v127 = v52;
    if (v54)
    {
      unint64_t v55 = sub_1000118E0();
      uint64_t v56 = (uint8_t **)(v52 + 40);
      uint64_t v21 = (char *)_swiftEmptyArrayStorage;
      unint64_t v57 = v115 | 0x8000000000000000LL;
      unint64_t v129 = v115 | 0x8000000000000000LL;
      do
      {
        uint64_t v58 = (uint64_t (*)(uint64_t))*(v56 - 1);
        uint64_t v18 = *v56;
        uint64_t v137 = v58;
        uint64_t v138 = v18;
        uint64_t v134 = 0xD00000000000001BLL;
        unint64_t v135 = v57;
        swift_bridgeObjectRetain();
        if ((StringProtocol.contains<A>(_:)(&v134, &type metadata for String, &type metadata for String, v55, v55) & 1) != 0)
        {
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v21);
          uint64_t v136 = (uint64_t)v21;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_1000452D4();
            uint64_t v21 = (char *)v136;
          }

          unint64_t v60 = *((void *)v21 + 2);
          if (v60 >= *((void *)v21 + 3) >> 1)
          {
            sub_1000452D4();
            uint64_t v21 = (char *)v136;
          }

          *((void *)v21 + 2) = v60 + 1;
          uint64_t v61 = &v21[16 * v60];
          *((void *)v61 + 4) = v58;
          *((void *)v61 + 5) = v18;
          unint64_t v57 = v129;
        }

        else
        {
          swift_bridgeObjectRelease(v18);
        }

        v56 += 2;
        --v54;
      }

      while (v54);
    }

    else
    {
      uint64_t v21 = (char *)_swiftEmptyArrayStorage;
    }

    uint64_t v65 = swift_bridgeObjectRelease(v127);
    uint64_t v66 = *((void *)v21 + 2);
    if (!v66)
    {
      v131((uint8_t *)v132, v133);
      swift_release(v21);
LABEL_32:
      uint64_t v45 = v121;
      uint64_t v21 = v124;
      uint64_t v30 = v119;
      goto LABEL_38;
    }

    uint64_t v67 = (os_log_s *)Logger.logObject.getter(v65);
    os_log_type_t v68 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v67, v68))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "Found a database at the old location, removing...", v18, 2u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    unint64_t v69 = 0LL;
    uint64_t v8 = v21 + 40;
    uint64_t v22 = &selRef_isLowPowerDeviceEnabled;
    uint64_t v70 = v122;
    while (v69 < *((void *)v21 + 2))
    {
      uint64_t v72 = *((void *)v8 - 1);
      uint64_t v71 = *(void *)v8;
      swift_bridgeObjectRetain();
      URL.appendingPathComponent(_:)(v72, v71);
      swift_bridgeObjectRelease(v71);
      id v73 = [v130 defaultManager];
      URL._bridgeToObjectiveC()(v74);
      uint64_t v76 = v75;
      uint64_t v137 = 0LL;
      uint64_t v18 = (uint8_t *)[v73 removeItemAtURL:v75 error:&v137];

      uint64_t v77 = v137;
      if (!(_DWORD)v18)
      {
        uint64_t v78 = v77;
        swift_release(v21);
        uint64_t v63 = _convertNSErrorToError(_:)(v78);

        swift_willThrow(v79);
        v131(v70, v133);
        uint64_t v45 = v121;
        uint64_t v30 = v119;
        goto LABEL_34;
      }

      ++v69;
      v131(v70, v133);
      v8 += 16;
      if (v66 == v69)
      {
        swift_release(v21);
        v131((uint8_t *)v132, v133);
        goto LABEL_32;
      }
    }

    __break(1u);
LABEL_54:
    swift_once(&qword_100130330, sub_100091538);
  }

  uint64_t v62 = v137;
  uint64_t v63 = _convertNSErrorToError(_:)(v51);

  swift_willThrow(v64);
LABEL_34:
  swift_errorRetain(v63);
  uint64_t v80 = swift_errorRetain(v63);
  uint64_t v81 = (os_log_s *)Logger.logObject.getter(v80);
  os_log_type_t v82 = static os_log_type_t.error.getter();
  BOOL v83 = os_log_type_enabled(v81, v82);
  uint64_t v128 = 0LL;
  if (v83)
  {
    unint64_t v84 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v85 = (uint64_t (**)(uint64_t))swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)unint64_t v84 = 138412290;
    swift_errorRetain(v63);
    unint64_t v86 = (uint64_t (*)(uint64_t))_swift_stdlib_bridgeErrorToNSError(v63);
    uint64_t v137 = v86;
    uint64_t v45 = v121;
    uint64_t v30 = v119;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v84 + 4, v84 + 12);
    void *v85 = v86;
    swift_errorRelease(v63);
    swift_errorRelease(v63);
    _os_log_impl((void *)&_mh_execute_header, v81, v82, "Failed to remove old database: %@", v84, 0xCu);
    sub_100008DB0((uint64_t *)&unk_100132620);
    swift_arrayDestroy(v85, 1LL);
    swift_slowDealloc(v85, -1LL, -1LL);
    swift_slowDealloc(v84, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease(v63);
    swift_errorRelease(v63);
  }

  swift_errorRelease(v63);
  v131((uint8_t *)v132, v133);
  uint64_t v21 = v124;
LABEL_38:
  type metadata accessor for MetadataStore(0LL);
  uint64_t v87 = (uint64_t)v126;
  v30(v126, v21, v133);
  uint64_t v88 = v128;
  sub_100051AF0(v87);
  uint64_t v27 = v89;
  if (!v88)
  {
    v131((uint8_t *)v21, v133);

    return v27;
  }

  uint64_t v134 = v88;
  swift_errorRetain(v88);
  uint64_t v90 = sub_100008DB0(&qword_100130620);
  if (swift_dynamicCast(&v137, &v134, v90, &type metadata for MetadataStore.CreationError, 0LL))
  {
    uint64_t v91 = (uint64_t)v137;
    if (v138 == 2)
    {
      uint64_t v92 = swift_errorRelease(v88);
      uint64_t v93 = (os_log_s *)Logger.logObject.getter(v92);
      os_log_type_t v94 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v93, v94))
      {
        uint64_t v95 = swift_slowAlloc(22LL, -1LL);
        *(_DWORD *)uint64_t v95 = 134218240;
        uint64_t v136 = v91;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v95 + 4, v95 + 12);
        *(_WORD *)(v95 + 12) = 2048;
        uint64_t v136 = 103LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v95 + 14, v95 + 22);
        _os_log_impl( (void *)&_mh_execute_header,  v93,  v94,  "Metadata store version mismatch detected (database: %lld, expected: %ld). Recreating the metadata store database",  (uint8_t *)v95,  0x16u);
        swift_slowDealloc(v95, -1LL, -1LL);
      }

      unint64_t v96 = v124;
      sub_100051C24();
      uint64_t v97 = (uint64_t)v120;
      v30(v120, v96, v133);
      sub_100051AF0(v97);
      uint64_t v27 = v114;
      v131((uint8_t *)v96, v133);

      swift_errorRelease(v134);
      return v27;
    }

    sub_100059064((uint64_t)v137, v138);
  }

  swift_errorRelease(v134);
  uint64_t v98 = v125;
  sub_10009206C();
  uint64_t v99 = (uint64_t)v123;
  if (qword_1001302F0 != -1) {
    swift_once(&qword_1001302F0, sub_1000888DC);
  }
  sub_100008D98(v117, (uint64_t)qword_1001357C8);
  sub_100084214(v98, v99, type metadata accessor for RegistryError);
  uint64_t v101 = (os_log_s *)Logger.logObject.getter(v100);
  os_log_type_t v102 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v101, v102))
  {
    uint64_t v103 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    unint64_t v104 = (uint64_t (*)(uint64_t))swift_slowAlloc(32LL, -1LL);
    uint64_t v137 = v104;
    *(_DWORD *)uint64_t v103 = 136315138;
    sub_100092208();
    unint64_t v106 = v105;
    uint64_t v134 = sub_10000DE60(v107, v105, (uint64_t *)&v137);
    uint64_t v45 = v121;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v103 + 4, v103 + 12);
    swift_bridgeObjectRelease(v106);
    sub_100058D54(v99, type metadata accessor for RegistryError);
    _os_log_impl((void *)&_mh_execute_header, v101, v102, "Error loading metadata store: %s", v103, 0xCu);
    swift_arrayDestroy(v104, 1LL);
    swift_slowDealloc(v104, -1LL, -1LL);
    swift_slowDealloc(v103, -1LL, -1LL);
  }

  else
  {
    sub_100058D54(v99, type metadata accessor for RegistryError);
  }

  uint64_t v108 = v116;
  uint64_t v27 = type metadata accessor for RegistryError;
  sub_100067940((unint64_t *)&unk_1001332D0, type metadata accessor for RegistryError);
  swift_allocError(v108, v109, 0LL, 0LL);
  uint64_t v110 = v125;
  sub_100084214(v125, v111, type metadata accessor for RegistryError);
  swift_willThrow(v112);

  swift_errorRelease(v88);
  sub_100058D54(v110, type metadata accessor for RegistryError);
  v131((uint8_t *)v124, v133);
  return v27;
}

uint64_t sub_100091538()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A07C(v0, qword_100135860);
  sub_100008D98(v0, (uint64_t)qword_100135860);
  uint64_t v8 = type metadata accessor for Registry(0LL);
  uint64_t v1 = sub_100008DB0((uint64_t *)&unk_100132590);
  uint64_t v3 = String.init<A>(describing:)(&v8, v1);
  uint64_t result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    uint64_t v5 = v2;
    uint64_t v6 = String.init(cString:)(LNLogSubsystem);
    return Logger.init(subsystem:category:)(v6, v7, v3, v5);
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_1000915E0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v23;
  a20 = v24;
  uint64_t v26 = v25;
  ObjectType = (objc_class *)swift_getObjectType(v20);
  sub_100008DB0(&qword_100131780);
  sub_100011A24();
  __chkstk_darwin(v27);
  sub_1000B7528(v28, v80[0]);
  sub_100008DB0(&qword_100133040);
  sub_100011A24();
  __chkstk_darwin(v29);
  sub_100068380();
  uint64_t v30 = OBJC_IVAR____TtC10LinkDaemon8Registry_ready;
  *(void *)&v20[OBJC_IVAR____TtC10LinkDaemon8Registry_ready] = 0LL;
  uint64_t v31 = &v20[OBJC_IVAR____TtC10LinkDaemon8Registry_lastMetadataAudit];
  uint64_t v32 = sub_100008DB0(&qword_1001333B8);
  sub_1000280A8(v22, v33, v34, v32);
  *(_DWORD *)uint64_t v31 = 0;
  id v35 = v20;
  char v36 = &v31[*(int *)(sub_100008DB0(&qword_100133048) + 28)];
  uint64_t v37 = sub_100008DB0(&qword_100133970);
  bzero(v36, *(void *)(*(void *)(v37 - 8) + 64LL));
  uint64_t v38 = sub_1000B7614();
  sub_100026C8C(v38, v39, &qword_100133040);
  uint64_t v40 = *(void *)(v26 + 40);
  (*(void (**)(__int128 *__return_ptr))(v26 + 32))(&v92);
  uint64_t v41 = &v35[OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource];
  sub_100009EEC(&v92, (uint64_t)&v35[OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource]);
  id v42 = *(uint64_t (**)(uint64_t))(v26 + 48);
  uint64_t v86 = *(void *)(v26 + 56);
  uint64_t v43 = v42(v26);
  if (v21)
  {
    swift_release(*(void *)(v26 + 8));
    sub_100075674(*(void *)(v26 + 16), *(void *)(v26 + 24));
    swift_release(v86);
    swift_release(v40);
    a10 = *(void *)(v26 + 64);
    sub_10000A054(&a10);
    sub_10000AC58(v41);
    swift_release(*(void *)&v20[v30]);
    sub_100026E14((uint64_t)v31, &qword_100133048);

    swift_deallocPartialClassInstance( v35,  ObjectType,  *(unsigned int *)((swift_isaMask & *(void *)v35) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *(void *)v35) + 0x34LL));
  }

  else
  {
    uint64_t v44 = (void *)v43;
    uint64_t v84 = OBJC_IVAR____TtC10LinkDaemon8Registry_store;
    *(void *)&v35[OBJC_IVAR____TtC10LinkDaemon8Registry_store] = v43;
    uint64_t v45 = type metadata accessor for MetadataStore(0LL);
    uint64_t v93 = v45;
    os_log_type_t v94 = &off_100123420;
    *(void *)&__int128 v92 = v44;
    uint64_t v46 = type metadata accessor for AppShortcutInterpolator();
    uint64_t v47 = sub_1000B7BA8(v46, 152LL);
    uint64_t v48 = sub_1000B7BF8();
    uint64_t v81 = v80;
    uint64_t v49 = *(void *)(*(void *)(v45 - 8) + 64LL);
    __chkstk_darwin(v48);
    unint64_t v50 = (v49 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    uint64_t v82 = v40;
    uint64_t v83 = 0LL;
    sub_1000B8014(v51, v52);
    uint64_t v53 = *(uint64_t *)((char *)v80 - v50);
    uint64_t v90 = v45;
    uint64_t v91 = &off_100123420;
    *(void *)&__int128 v89 = v53;
    id v54 = v44;
    swift_defaultActor_initialize(v47);
    sub_100009EEC(&v89, v47 + 112);
    sub_10000AC58(&v92);

    uint64_t v81 = (uint64_t *)OBJC_IVAR____TtC10LinkDaemon8Registry_appShortcutInterpolator;
    *(void *)&v35[OBJC_IVAR____TtC10LinkDaemon8Registry_appShortcutInterpolator] = v47;
    unint64_t v55 = *(void **)&v35[v84];
    uint64_t v93 = v45;
    os_log_type_t v94 = &off_100123CB8;
    *(void *)&__int128 v92 = v55;
    uint64_t v56 = type metadata accessor for AssistantIntentPhraseInterpolator();
    uint64_t v57 = sub_1000B7BA8(v56, 152LL);
    uint64_t v58 = sub_1000B7BF8();
    v80[1] = (uint64_t)v80;
    __chkstk_darwin(v58);
    sub_1000B8014(v59, v60);
    uint64_t v61 = *(uint64_t *)((char *)v80 - v50);
    uint64_t v90 = v45;
    uint64_t v91 = &off_100123CB8;
    *(void *)&__int128 v89 = v61;
    id v62 = v55;
    swift_defaultActor_initialize(v57);
    sub_100009EEC(&v89, v57 + 112);
    sub_10000AC58(&v92);

    *(void *)&v35[OBJC_IVAR____TtC10LinkDaemon8Registry_examplePhraseInterpolator] = v57;
    uint64_t v63 = *(void *)(v26 + 64);
    *(void *)&v35[OBJC_IVAR____TtC10LinkDaemon8Registry_observers] = v63;
    uint64_t v64 = *(void **)&v35[v84];
    uint64_t v65 = *(uint64_t *)((char *)v81 + (void)v35);
    uint64_t v66 = *(void *)(v26 + 8);
    uint64_t v81 = *(uint64_t **)v26;
    uint64_t v67 = *(void *)(v26 + 16);
    uint64_t v68 = *(void *)(v26 + 24);
    uint64_t v69 = type metadata accessor for Registry.IndexingQueue();
    sub_1000B7BA8(v69, 200LL);
    swift_bridgeObjectRetain_n(v63, 2LL);
    id v70 = v64;
    swift_retain(v65);
    sub_10000C7FC();
    swift_retain(v66);
    uint64_t v84 = v67;
    sub_100047094(v67, v68);
    *(void *)&v35[OBJC_IVAR____TtC10LinkDaemon8Registry_indexingQueue] = sub_100095A90( (uint64_t)v70,  v65,  v57,  v63,  (uint64_t)v81,  v66,  v67,  v68);

    v88.receiver = v35;
    v88.super_class = ObjectType;
    id v71 = objc_msgSendSuper2(&v88, "init");
    uint64_t v72 = type metadata accessor for TaskPriority(0LL);
    uint64_t v73 = v85;
    sub_1000280A8(v85, v74, v75, v72);
    uint64_t v76 = (void *)swift_allocObject(&unk_1001260B8, 40LL, 7LL);
    v76[2] = 0LL;
    v76[3] = 0LL;
    v76[4] = v71;
    uint64_t v77 = (char *)v71;
    uint64_t v78 = sub_10000D1F0(v73, (uint64_t)&unk_100133980, (uint64_t)v76);
    swift_release(v66);
    sub_100075674(v84, v68);

    swift_bridgeObjectRelease(v63);
    swift_release(v86);
    swift_release(v82);
    uint64_t v79 = *(void *)&v77[OBJC_IVAR____TtC10LinkDaemon8Registry_ready];
    *(void *)&v77[OBJC_IVAR____TtC10LinkDaemon8Registry_ready] = v78;
    swift_release(v79);
  }

  sub_10001DEE8();
}

uint64_t sub_100091AA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v4[3] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  void v4[4] = v6;
  v4[5] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100091B08, 0LL, 0LL);
}

uint64_t sub_100091B08()
{
  if ((sub_100091D44() & 1) != 0)
  {
    sub_1000B7B40(OBJC_IVAR____TtC10LinkDaemon8Registry_lastMetadataAudit);
    uint64_t v3 = sub_100008DB0(&qword_100133048);
    sub_1000B7F7C(v3, &qword_100133040);
    sub_100008DB0(&qword_1001333B8);
    sub_1000B7A20();
    id v4 = sub_100091F6C();
    sub_1000B7074((uint64_t)v4);
    sub_10000AFA8();
    return sub_10000EA08(*(uint64_t (**)(void))(v1 + 8));
  }

  else
  {
    uint64_t v6 = qword_100130330;
    id v7 = *(id *)(v1 + 16);
    if (v6 == -1)
    {
      uint64_t v8 = v7;
    }

    else
    {
      swift_once(&qword_100130330, sub_100091538);
      uint64_t v8 = *(void **)(v1 + 16);
    }

    sub_1000B7AD4();
    uint64_t v9 = sub_100008D98(v0, (uint64_t)qword_100135860);
    sub_1000B69D0(v6, v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));

    uint64_t v10 = static os_log_type_t.default.getter();
    uint64_t v11 = (os_log_s *)sub_10006801C();
    if (os_log_type_enabled(v11, (os_log_type_t)v10))
    {
      uint64_t v12 = (_WORD *)sub_10000AE10(2LL);
      sub_1000B6EA4(v12);
      sub_1000B6604((void *)&_mh_execute_header, v13, v14, "Starting registry sync");
      sub_10000AD78(v10);
    }

    sub_1000B7AD4();

    sub_1000B66A8(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    uint64_t v15 = (void *)swift_task_alloc(dword_10013334C);
    *(void *)(v1 + 48) = v15;
    *uint64_t v15 = v1;
    v15[1] = sub_100091C90;
    sub_10000EA88();
    return sub_1000B7410(v16, v17, v18);
  }

uint64_t sub_100091C90()
{
  return sub_10000E998();
}

uint64_t sub_100091CC4()
{
  uint64_t v1 = sub_100008DB0(&qword_100133048);
  sub_1000B7F7C(v1, &qword_100133040);
  sub_100008DB0(&qword_1001333B8);
  sub_1000B7A20();
  id v2 = sub_100091F6C();
  sub_1000B7074((uint64_t)v2);
  sub_10000AFA8();
  return sub_10000EA08(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100091D44()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC10LinkDaemon8Registry_store);
  id v2 = sub_1000B76D0((void *)(v0 + OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource));
  return sub_1000B35CC(*v2, v1);
}

uint64_t sub_100091D80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for OSSignpostID(0LL);
  v4[6] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[7] = v6;
  v4[8] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100091DE4, 0LL, 0LL);
}

uint64_t sub_100091DE4()
{
  v0[9] = v1;
  id v2 = (uint64_t **)swift_task_alloc(dword_100133354);
  v0[10] = (uint64_t)v2;
  *id v2 = v0;
  v2[1] = (uint64_t *)sub_100091E68;
  return sub_1000925CC((uint64_t)v2, v0[5], v0[2], v0[3], v0[4]);
}

uint64_t sub_100091E68()
{
  return sub_10000E998();
}

uint64_t sub_100091EAC()
{
  uint64_t v1 = *(void *)(v0 + 56);
  sub_1000AE918();
  sub_1000389DC();
  sub_1000B66A8(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_10000AFA8();
  return sub_10000EA08(*(uint64_t (**)(void))(v0 + 8));
}

void sub_100091F1C()
{
}

id sub_100091F6C()
{
  id v0 = [(id)objc_opt_self(LSDatabaseContext) sharedDatabaseContext];
  id v8 = 0LL;
  unsigned int v1 = [v0 startAccessingReturningError:&v8];
  id v2 = v8;
  if (v1)
  {
    id v3 = v8;
    id v4 = [v0 currentPersistentIdentifier];
    [v0 stopAccessing];
  }

  else
  {
    id v5 = v8;
    uint64_t v6 = _convertNSErrorToError(_:)(v2);

    swift_willThrow();
    swift_errorRelease(v6);
    return 0LL;
  }

  return v4;
}

uint64_t sub_10009206C()
{
  uint64_t v31 = v2;
  uint64_t v32 = v3;
  uint64_t v5 = v4;
  id v7 = v6;
  sub_1000B6C88();
  sub_100011A24();
  __chkstk_darwin(v8);
  sub_100068380();
  sub_1000B7A58();
  uint64_t v9 = sub_100008DB0(&qword_100130620);
  if (sub_1000843B0(v1, (uint64_t)v30, v9, v0))
  {
    sub_100084248(v1, (uint64_t)v7, type metadata accessor for RegistryError);
    return sub_1000B7670();
  }

  sub_1000B7670();
  uint64_t v11 = sub_1000B7A58();
  sub_1000B67F8(v11, &qword_1001332E0, &OBJC_CLASS___NSError_ptr);
  uint64_t v13 = sub_1000843B0((uint64_t)&v29, (uint64_t)v30, v9, v12);
  if ((_DWORD)v13)
  {
    uint64_t v14 = v29;
    id v15 = sub_100068358(v13, "domain");
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    uint64_t v18 = v17;

    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNConnectionErrorDomain);
    if (v16 == v19 && v18 == v20)
    {
      uint64_t v23 = sub_10001191C(v18);
    }

    else
    {
      char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v19, v20, 0LL);
      sub_10001BE7C();
      uint64_t v23 = sub_10001BEC0();
      if ((v22 & 1) == 0)
      {

        goto LABEL_14;
      }
    }

    id v24 = sub_100068358(v23, "code");

    if (v24 == (id)1700)
    {
      uint64_t v25 = sub_1000B6F6C();
      swift_storeEnumTagMultiPayload(v25, v26, 6LL);
      return sub_1000B7670();
    }
  }

void sub_100092208()
{
  uint64_t v2 = sub_1000338B4();
  __chkstk_darwin(v2);
  sub_1000B78A0();
  type metadata accessor for RegistryError(0LL);
  sub_100011A24();
  __chkstk_darwin(v3);
  sub_100068380();
  sub_100084214(v0, v1, v4);
  uint64_t v5 = sub_1000B7614();
  id v7 = (char *)&loc_1000922A4 + *((int *)qword_1000925B0 + swift_getEnumCaseMultiPayload(v5, v6));
  __asm { BR              X10 }

uint64_t sub_1000922B4()
{
  uint64_t v2 = *(void *)(v1 - 96);
  *(void *)(v1 - 104) = *(void *)(v1 - 104);
  *(void *)(v1 - 96) = v2;
  sub_1000B7E6C();
  sub_10001BC70();
  return sub_10000AF9C();
}

uint64_t sub_1000925CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[14] = a4;
  v5[15] = a5;
  v5[12] = a2;
  v5[13] = a3;
  uint64_t v6 = type metadata accessor for RegistryError(0LL);
  v5[16] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Logger(0LL);
  v5[17] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[18] = v8;
  v5[19] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100092650, 0LL, 0LL);
}

uint64_t sub_100092650()
{
  uint64_t v46 = v1;
  uint64_t v47 = v2;
  uint64_t v45 = v0;
  uint64_t v3 = qword_100130330;
  id v4 = *(id *)(v0 + 96);
  if (v3 == -1)
  {
    uint64_t v5 = v4;
  }

  else
  {
    swift_once(&qword_100130330, sub_100091538);
    uint64_t v5 = *(void **)(v0 + 96);
  }

  uint64_t v41 = (uint64_t *)(v0 + 88);
  uint64_t v7 = *(void *)(v0 + 144);
  uint64_t v6 = *(void *)(v0 + 152);
  uint64_t v8 = *(void *)(v0 + 136);
  uint64_t v9 = (os_log_s *)sub_100008D98(v8, (uint64_t)qword_100135860);
  *(void *)(v0 + 160) = v9;
  sub_1000B69D0(v6, (uint64_t)v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));

  sub_10006801C();
  os_log_type_t v10 = sub_100041BDC();
  if (sub_100068360(v10))
  {
    uint64_t v11 = (_WORD *)sub_10000AE10(2LL);
    sub_1000B6EA4(v11);
    sub_1000B6604((void *)&_mh_execute_header, v12, v13, "Updating the metadata store");
    sub_10000AD78(v8);
  }

  uint64_t v14 = *(void *)(v0 + 144);
  uint64_t v15 = *(void *)(v0 + 104);

  sub_1000B66A8(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8));
  uint64_t v16 = os_transaction_create("com.apple.linkd.synchronizeMetadataStore");
  uint64_t v17 = v16;
  *(void *)(v0 + 168) = v16;
  if (v15)
  {
    uint64_t v43 = v16;
    uint64_t v18 = *(void *)(v0 + 112);
    uint64_t v19 = *(void *)(v0 + 120);
    uint64_t v20 = *(void *)(v0 + 104);
    uint64_t v21 = (void *)v20;
    uint64_t v22 = v18;
    uint64_t v23 = v19;
  }

  else
  {
    uint64_t v21 = sub_100092D40();
    uint64_t v22 = v38;
    uint64_t v23 = v39;
    uint64_t v43 = v17;
    uint64_t v18 = *(void *)(v0 + 112);
    uint64_t v19 = *(void *)(v0 + 120);
    uint64_t v20 = *(void *)(v0 + 104);
  }

  uint64_t v42 = v0 + 16;
  sub_100011A3C((uint64_t)v21);
  sub_1000B646C();
  sub_100011A3C(v23);
  uint64_t v24 = sub_1000B34CC(v20, v18, v19);
  uint64_t v25 = v9;
  Logger.logObject.getter(v24);
  os_log_type_t v26 = sub_100041BDC();
  if (sub_100068360(v26))
  {
    uint64_t v27 = (uint8_t *)sub_10000AE10(12LL);
    uint64_t v40 = sub_10000AE10(32LL);
    uint64_t v44 = (void *)v40;
    *(_DWORD *)uint64_t v27 = 136315138;
    unint64_t v28 = sub_100092DA4((uint64_t)v21, v22, v23);
    *uint64_t v41 = sub_10000DE60(v28, v29, (uint64_t *)&v44);
    sub_1000B7B94((uint64_t)v41, v0 + 96, (uint64_t)(v27 + 4));
    sub_10000ADB0();
    sub_10001191C((uint64_t)v21);
    sub_10001191C(v22);
    sub_10001191C(v23);
    uint64_t v25 = v9;
    sub_10000AF5C((void *)&_mh_execute_header, v9, (os_log_type_t)v18, "Detected changes:\n %s", v27);
    sub_10000AF48(v40);
    sub_10000AD78(v40);
    sub_10000AD78((uint64_t)v27);
  }

  else
  {
    sub_10001191C((uint64_t)v21);
    sub_10001191C(v22);
    sub_10001191C(v23);
  }

  uint64_t v30 = *(void *)(v0 + 96);
  uint64_t v44 = v21;
  sub_1000280C8();
  sub_10001BCF8();
  sub_100043338();
  uint64_t v31 = (uint64_t)v44;
  sub_1000B76D0((void *)(v30 + OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource));
  sub_10001C1BC();
  uint64_t v32 = sub_1000AEBC8();
  unint64_t v34 = v33;
  uint64_t v35 = sub_10000C254((uint64_t)&unk_100125990, 24LL);
  *(void *)(v35 + 16) = v43;
  swift_unknownObjectRetain(v43);
  sub_100092F34(v31, v22, v32, v34, 1, (uint64_t)Int64.datatypeValue.getter, v35, v42);
  sub_10001DEC4();
  sub_10001DF40();
  sub_10001BEC0();
  char v36 = (void *)swift_task_alloc(dword_10013307C);
  *(void *)(v0 + 176) = v36;
  *char v36 = v0;
  v36[1] = sub_100092ADC;
  return sub_100095C20(v42);
}

uint64_t sub_100092ADC()
{
  *(void *)(v0 + 184) = v1;
  swift_task_dealloc(v3);
  if (!v1) {
    sub_1000B3524((void *)(v0 + 16));
  }
  sub_10000EA88();
  return sub_10004BEA0();
}

uint64_t sub_100092B30(uint64_t a1)
{
  uint64_t v2 = *(os_log_s **)(v1 + 160);
  Logger.logObject.getter(a1);
  os_log_type_t v3 = sub_100041BDC();
  if (os_log_type_enabled(v2, v3))
  {
    id v4 = (uint8_t *)sub_10000AE10(2LL);
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Finished updating the metadata store", v4, 2u);
    sub_10000AD78((uint64_t)v4);

    sub_100011A58();
  }

  else
  {
    sub_100011A58();
  }

  sub_1000B75B4();
  sub_10000AF6C();
  uint64_t v5 = (uint64_t (*)(void))sub_1000681B8();
  return sub_10000EA08(v5);
}

uint64_t sub_100092BD8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22)
{
  a21 = v24;
  a22 = v25;
  a20 = v23;
  uint64_t v26 = v23[21];
  sub_1000B3524(v23 + 2);
  swift_unknownObjectRelease(v26);
  sub_10004BF04();
  uint64_t v27 = sub_10004BF04();
  Logger.logObject.getter(v27);
  os_log_type_t v28 = sub_1000B6578();
  if (sub_1000B6908(v22))
  {
    unint64_t v29 = (uint8_t *)sub_10000AE10(12LL);
    uint64_t v30 = sub_10000AE10(32LL);
    *(_DWORD *)unint64_t v29 = 136315138;
    a11 = v30;
    sub_10009206C();
    sub_100092208();
    uint64_t v32 = v31;
    sub_1000593C0(v31, type metadata accessor for RegistryError);
    v23[10] = sub_1000B8034(v32, v33, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v23 + 10, v23 + 11, v29 + 4, v29 + 12);
    sub_10001DEC4();
    sub_10004BDA4();
    sub_10004BDA4();
    sub_10000AF5C((void *)&_mh_execute_header, v22, v28, "Error updating the metadata store: %s", v29);
    sub_10000AF48(v30);
    sub_10000AD78(v30);
    sub_10000AD78((uint64_t)v29);

    sub_10004BDA4();
  }

  else
  {
    sub_10004BDA4();
    sub_10004BDA4();
    sub_10004BDA4();
  }

  sub_1000B75B4();
  sub_10000AF6C();
  unint64_t v34 = (uint64_t (*)(void))sub_1000681B8();
  return sub_1000B6AD4(v34);
}

void *sub_100092D40()
{
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC10LinkDaemon8Registry_store);
  sub_10001AFE4(v0 + OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource, (uint64_t)v5);
  uint64_t result = sub_100093070(v2, v5);
  if (v1) {
    return (void *)v4;
  }
  return result;
}

unint64_t sub_100092DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v16 = 0LL;
    unint64_t v17 = 0xE000000000000000LL;
    v7._uint64_t countAndFlagsBits = 0x646E75622077654ELL;
    v7._object = (void *)0xED00000A3A73656CLL;
    String.append(_:)(v7);
    uint64_t v8 = a1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_100095654();
      v8 += 40LL;
      --v5;
    }

    while (v5);
    swift_bridgeObjectRelease();
    uint64_t v9 = *(void *)(a3 + 16);
    if (!v9) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }

  uint64_t v9 = *(void *)(a3 + 16);
  if (!v9 && !*(void *)(a2 + 16)) {
    return 0xD000000000000013LL;
  }
  uint64_t v16 = 0LL;
  unint64_t v17 = 0xE000000000000000LL;
  if (v9)
  {
LABEL_9:
    v10._object = (void *)0x80000001000FBC40LL;
    v10._uint64_t countAndFlagsBits = 0xD000000000000016LL;
    String.append(_:)(v10);
    uint64_t v11 = a3 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_100095654();
      v11 += 40LL;
      --v9;
    }

    while (v9);
    swift_bridgeObjectRelease();
  }

LABEL_12:
  uint64_t v12 = *(void *)(a2 + 16);
  if (v12)
  {
    v13._object = (void *)0x80000001000FBC60LL;
    v13._uint64_t countAndFlagsBits = 0xD000000000000016LL;
    String.append(_:)(v13);
    uint64_t v14 = (void *)(a2 + 32);
    swift_bridgeObjectRetain();
    do
    {
      sub_100095840(v14, (uint64_t)&v16);
      v14 += 5;
      --v12;
    }

    while (v12);
    swift_bridgeObjectRelease();
  }

  return v16;
}

    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    return a1;
  }

  if (!v8)
  {
    swift_release();
    goto LABEL_12;
  }

  Swift::String v10 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v10;
  swift_release();
  return a1;
}

            uint64_t v14 = v16;
LABEL_9:
            Swift::String v7 = (v15 - 1) & v15;
            Swift::String v10 = __clz(__rbit64(v15)) + (v14 << 6);
            uint64_t v8 = v14;
            goto LABEL_5;
          }
        }
      }
    }

uint64_t sub_100092F34@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16 = sub_10008E390(a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_10000A280(a3, a4);
  sub_10000A21C(0LL, 0xF000000000000000LL);
  sub_100047094(a6, a7);
  sub_100075674(0LL, 0LL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100058E4C(a3, a4);
  sub_100047094(a6, a7);
  sub_100075674(a6, a7);
  sub_10000A1D8(a3, a4);
  swift_bridgeObjectRelease_n(a1, 2LL);
  swift_bridgeObjectRelease_n(v16, 2LL);
  sub_10000A21C(a3, a4);
  uint64_t result = sub_100075674(a6, a7);
  *(_BYTE *)a8 = a5;
  *(void *)(a8 + 8) = a1;
  *(void *)(a8 + 16) = v16;
  *(void *)(a8 + 24) = a3;
  *(void *)(a8 + 32) = a4;
  *(_BYTE *)(a8 + 40) = 0;
  *(void *)(a8 + 48) = a6;
  *(void *)(a8 + 56) = a7;
  return result;
}

void *sub_100093070(void *a1, void *a2)
{
  uint64_t v33 = a2;
  uint64_t v4 = type metadata accessor for LNBundleRecord(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Swift::String v7 = (uint64_t *)((char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = sub_100008DB0(&qword_100130E98);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = _swiftEmptyArrayStorage;
  uint64_t v42 = _swiftEmptyArrayStorage;
  uint64_t v40 = _swiftEmptyArrayStorage;
  uint64_t v41 = _swiftEmptyArrayStorage;
  sub_100052FFC();
  if (v2)
  {

    uint64_t v14 = v33;
  }

  else
  {
    uint64_t v15 = v13;
    uint64_t v35 = v8;
    uint64_t v31 = a1;
    uint64_t v32 = 0LL;
    uint64_t v16 = *(void *)(v13 + 16);
    if (v16)
    {
      uint64_t v38 = _swiftEmptyArrayStorage;
      sub_1000456C4();
      uint64_t v17 = *(unsigned __int8 *)(v5 + 80);
      uint64_t v30 = v15;
      uint64_t v18 = v15 + ((v17 + 32) & ~v17);
      uint64_t v34 = *(void *)(v5 + 72);
      uint64_t v19 = v38;
      do
      {
        sub_100084214(v18, (uint64_t)v7, type metadata accessor for LNBundleRecord);
        uint64_t v20 = objc_autoreleasePoolPush();
        uint64_t v21 = (uint64_t)v11 + *(int *)(v35 + 48);
        uint64_t v22 = v7[1];
        *uint64_t v11 = *v7;
        v11[1] = v22;
        sub_100084214((uint64_t)v7, v21, type metadata accessor for LNBundleRecord);
        swift_bridgeObjectRetain();
        objc_autoreleasePoolPop(v20);
        sub_100058D54((uint64_t)v7, type metadata accessor for LNBundleRecord);
        if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
        {
          sub_1000456C4();
          uint64_t v19 = v38;
        }

        unint64_t v23 = v19[2];
        if (v23 >= v19[3] >> 1)
        {
          sub_1000456C4();
          uint64_t v19 = v38;
        }

        v19[2] = v23 + 1;
        sub_100026C8C( (uint64_t)v11,  (uint64_t)v19 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
        + *(void *)(v9 + 72) * v23,
          &qword_100130E98);
        v18 += v34;
        --v16;
      }

      while (v16);
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v19 = _swiftEmptyArrayStorage;
    }

    uint64_t v24 = v32;
    uint64_t v14 = v33;
    uint64_t v39 = sub_10008F658((uint64_t)v19);
    uint64_t v25 = sub_100008D74(v14, v14[3]);
    sub_1000AED70(*v25, (uint64_t *)&v39, (uint64_t)&v40, (uint64_t *)&v41, (uint64_t *)&v42);
    uint64_t v12 = v31;
    if (!v24)
    {
      swift_beginAccess(&v39, &v38, 0LL, 0LL);
      swift_bridgeObjectRetain();
      sub_10008EBB4(v27);
      uint64_t v29 = v28;
      swift_bridgeObjectRelease();
      sub_1000424F8(v29);
      swift_bridgeObjectRelease();
      swift_beginAccess(&v41, v37, 33LL, 0LL);
      sub_100043324();
      swift_endAccess(v37);

      swift_beginAccess(&v42, v37, 0LL, 0LL);
      uint64_t v12 = v42;
      swift_beginAccess(&v40, v36, 0LL, 0LL);
      swift_bridgeObjectRelease();
      sub_10000AC58(v14);
      return v12;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  sub_10000AC58(v14);
  return v12;
}

uint64_t sub_1000933F8()
{
  v1[6] = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v1[7] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[8] = v3;
  unint64_t v4 = (*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[9] = swift_task_alloc(v4);
  v1[10] = swift_task_alloc(v4);
  return swift_task_switch(sub_100093468, 0LL, 0LL);
}

#error "100093764: call analysis failed (funcsize=318)"
uint64_t sub_1000939AC()
{
  uint64_t v0;
  sub_10000EA30();
  sub_10000E8E4(*(void *)(v0 + 96));
  sub_1000389DC();
  sub_10000EA88();
  return sub_10000E998();
}

#error "100093CA8: call analysis failed (funcsize=307)"
uint64_t sub_100093EF8()
{
  uint64_t v0;
  sub_10000EA30();
  sub_10000E8E4(*(void *)(v0 + 136));
  sub_100011958();
  sub_10001198C();
  sub_10000ADB0();
  sub_10000EA88();
  return sub_10000AE28();
}

uint64_t sub_100093F44()
{
  return sub_10000C914(*(uint64_t (**)(void))(v0 + 8));
}

void sub_100093F74(uint64_t a1@<X0>, void (*a2)(char *, uint64_t)@<X1>, char *a3@<X8>)
{
  uint64_t v140 = a2;
  uint64_t v143 = (char *)type metadata accessor for Logger(0LL);
  uint64_t v145 = *((void *)v143 - 1);
  __chkstk_darwin(v143);
  uint64_t v144 = (char *)&v124 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v142 = (char *)&v124 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v141 = (char *)&v124 - v10;
  __chkstk_darwin(v11);
  uint64_t v146 = (char *)&v124 - v12;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v124 - v14;
  uint64_t v16 = sub_100008DB0(&qword_100133040);
  __chkstk_darwin(v16);
  uint64_t v137 = (char *)&v124 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v124 - v19;
  uint64_t v21 = sub_100008DB0(&qword_1001333B8);
  __chkstk_darwin(v21);
  uint64_t v139 = (char *)&v124 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v124 - v24;
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v124 - v27;
  uint64_t v138 = a1;
  uint64_t v29 = a1;
  uint64_t v31 = v30;
  sub_100026CB8(v29, (uint64_t)v20, &qword_100133040);
  if (sub_100009E6C((uint64_t)v20, 1LL, v31) != 1)
  {
    uint64_t v131 = a3;
    uint64_t v128 = v31;
    uint64_t v33 = *(int *)(v31 + 48);
    uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v34(v28, v20, v6);
    uint64_t v35 = *(void **)&v20[v33];
    *(void *)&v28[v33] = v35;
    uint64_t v133 = v7;
    char v36 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    unint64_t v135 = v28;
    v36(v25, v28, v6);
    v34(v15, v25, v6);
    uint64_t v127 = v35;
    id v129 = v35;
    uint64_t v37 = v146;
    Date.init()(v129);
    double v38 = Date.timeIntervalSince(_:)(v15);
    uint64_t v39 = qword_100130330;
    uint64_t v40 = v140;
    uint64_t v41 = v6;
    if (v39 != -1) {
      swift_once(&qword_100130330, sub_100091538);
    }
    uint64_t v42 = v143;
    uint64_t v43 = sub_100008D98((uint64_t)v143, (uint64_t)qword_100135860);
    uint64_t v44 = v144;
    uint64_t v45 = v145;
    uint64_t v46 = *(void (**)(char *))(v145 + 16);
    uint64_t v136 = v43;
    v46(v144);
    uint64_t v132 = v40;

    uint64_t v47 = v141;
    id v130 = v15;
    v36(v141, v15, v6);
    uint64_t v48 = v142;
    uint64_t v134 = (void (*)(char *, uint64_t, uint64_t))v36;
    uint64_t v49 = ((uint64_t (*)(char *, char *, uint64_t))v36)(v142, v37, v41);
    unint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
    os_log_type_t v51 = static os_log_type_t.debug.getter();
    int v52 = v51;
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v53 = swift_slowAlloc(32LL, -1LL);
      int v126 = v52;
      uint64_t v54 = v41;
      uint64_t v55 = v53;
      uint64_t v125 = swift_slowAlloc(64LL, -1LL);
      double v149 = *(double *)&v125;
      *(_DWORD *)uint64_t v55 = 136315650;
      sub_100067940( (unint64_t *)&unk_100131860,  (uint64_t (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v56 = v48;
      uint64_t v58 = v57;
      uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter(v54, v57);
      uint64_t v147 = sub_10000DE60(v59, v60, (uint64_t *)&v149);
      os_log_t v124 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148, v55 + 4, v55 + 12);
      swift_bridgeObjectRelease();
      uint64_t v61 = *(void (**)(char *, uint64_t))(v133 + 8);
      uint64_t v140 = v61;
      v61(v47, v54);
      *(_WORD *)(v55 + 12) = 2080;
      uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter(v54, v58);
      uint64_t v147 = sub_10000DE60(v62, v63, (uint64_t *)&v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148, v55 + 14, v55 + 22);
      swift_bridgeObjectRelease();
      v61(v56, v54);
      *(_WORD *)(v55 + 22) = 2048;
      uint64_t v147 = *(void *)&v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148, v55 + 24, v55 + 32);
      os_log_t v64 = v124;
      _os_log_impl( (void *)&_mh_execute_header,  v124,  (os_log_type_t)v126,  "Comparing %s to %s for audit: %fs",  (uint8_t *)v55,  0x20u);
      uint64_t v65 = v125;
      swift_arrayDestroy(v125, 2LL);
      swift_slowDealloc(v65, -1LL, -1LL);
      uint64_t v66 = v55;
      uint64_t v41 = v54;
      swift_slowDealloc(v66, -1LL, -1LL);

      (*(void (**)(char *, char *))(v145 + 8))(v144, v42);
    }

    else
    {
      uint64_t v67 = *(void (**)(char *, uint64_t))(v133 + 8);
      v67(v47, v41);
      uint64_t v140 = v67;
      v67(v48, v41);

      (*(void (**)(char *, char *))(v45 + 8))(v44, v42);
    }

    uint64_t v68 = (uint64_t)v135;
    double v69 = sub_100056D00();
    id v70 = v134;
    if (v69 >= v38)
    {
      uint64_t v89 = *(void *)&v69;

      uint64_t v91 = (os_log_s *)Logger.logObject.getter(v90);
      os_log_type_t v92 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v91, v92))
      {
        uint64_t v93 = swift_slowAlloc(22LL, -1LL);
        *(_DWORD *)uint64_t v93 = 134218240;
        double v149 = v38;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150, v93 + 4, v93 + 12);
        *(_WORD *)(v93 + 12) = 2048;
        double v149 = *(double *)&v89;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150, v93 + 14, v93 + 22);
        _os_log_impl((void *)&_mh_execute_header, v91, v92, "Debounce not exceeded %f < %f", (uint8_t *)v93, 0x16u);
        swift_slowDealloc(v93, -1LL, -1LL);
      }
    }

    else
    {
      id v71 = (char *)sub_100091F6C();
      uint64_t v72 = *(int *)(v128 + 48);
      uint64_t v73 = v139;
      v70(v139, v68, v41);
      uint64_t v74 = v127;
      *(void *)&v73[v72] = v127;
      uint64_t v75 = ((uint64_t (*)(char *, uint64_t))v140)(v73, v41);
      if (v74)
      {
        uint64_t v145 = v41;
        if (!v71) {
          goto LABEL_20;
        }
        id v76 = v129;
        uint64_t v143 = v71;
        uint64_t v77 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v127);
        unint64_t v79 = v78;
        uint64_t v80 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v71);
        uint64_t v81 = v71;
        unint64_t v83 = v82;
        char v84 = static Data.== infix(_:_:)(v77, v79, v80, v82);
        unint64_t v85 = v83;
        id v71 = v81;
        sub_10000A1D8(v80, v85);
        sub_10000A1D8(v77, v79);

        if ((v84 & 1) == 0)
        {
LABEL_20:
          sub_100026E14(v138, &qword_100133040);
          id v95 = v129;
          unint64_t v96 = v71;
          id v97 = v95;
          uint64_t v98 = v96;
          uint64_t v99 = (os_log_s *)Logger.logObject.getter(v98);
          os_log_type_t v100 = static os_log_type_t.info.getter();
          BOOL v101 = os_log_type_enabled(v99, v100);
          uint64_t v144 = v71;
          if (v101)
          {
            uint64_t v102 = (uint64_t)v71;
            uint64_t v103 = swift_slowAlloc(22LL, -1LL);
            uint64_t v143 = (char *)swift_slowAlloc(64LL, -1LL);
            double v149 = *(double *)&v143;
            *(_DWORD *)uint64_t v103 = 136315394;
            uint64_t v147 = (uint64_t)v97;
            type metadata accessor for LSPersistentIdentifier(0LL);
            uint64_t v105 = v104;
            id v106 = v97;
            uint64_t v107 = String.init<A>(describing:)(&v147, v105);
            uint64_t v147 = sub_10000DE60(v107, v108, (uint64_t *)&v149);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148, v103 + 4, v103 + 12);

            swift_bridgeObjectRelease();
            *(_WORD *)(v103 + 12) = 2080;
            uint64_t v147 = v102;
            uint64_t v109 = v98;
            uint64_t v110 = sub_100008DB0(&qword_1001333C0);
            uint64_t v111 = String.init<A>(describing:)(&v147, v110);
            uint64_t v147 = sub_10000DE60(v111, v112, (uint64_t *)&v149);
            uint64_t v68 = (uint64_t)v135;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148, v103 + 14, v103 + 22);

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v99, v100, "%s != %s", (uint8_t *)v103, 0x16u);
            uint64_t v113 = v143;
            swift_arrayDestroy(v143, 2LL);
            swift_slowDealloc(v113, -1LL, -1LL);
            swift_slowDealloc(v103, -1LL, -1LL);
          }

          else
          {
          }

          uint64_t v115 = v145;
          uint64_t v116 = (uint64_t)v137;
          uint64_t v117 = (os_log_s *)Logger.logObject.getter(v114);
          os_log_type_t v118 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v117, v118))
          {
            uint64_t v119 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v119 = 0;
            _os_log_impl((void *)&_mh_execute_header, v117, v118, "Audit conditions met, proceeding", v119, 2u);
            swift_slowDealloc(v119, -1LL, -1LL);
          }

          uint64_t v120 = v128;
          uint64_t v121 = *(int *)(v128 + 48);
          Date.init()(v122);

          uint64_t v123 = v140;
          v140(v146, v115);
          v123(v130, v115);
          sub_100026E14(v68, &qword_1001333B8);
          *(void *)(v116 + v121) = v144;
          char v32 = 1;
          sub_100009E60(v116, 0LL, 1LL, v120);
          sub_100026C8C(v116, v138, &qword_100133040);
          goto LABEL_26;
        }

        uint64_t v41 = v145;
      }

      uint64_t v86 = (os_log_s *)Logger.logObject.getter(v75);
      os_log_type_t v87 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v86, v87))
      {
        objc_super v88 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)objc_super v88 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v86,  v87,  "LSDatabaseContext appears unchanged, skipping audit",  v88,  2u);
        swift_slowDealloc(v88, -1LL, -1LL);
      }
    }

    os_log_type_t v94 = v140;
    v140(v146, v41);
    v94(v130, v41);
    sub_100026E14(v68, &qword_1001333B8);
    char v32 = 0;
LABEL_26:
    a3 = v131;
    goto LABEL_27;
  }

  sub_100026E14((uint64_t)v20, &qword_100133040);
  char v32 = 0;
LABEL_27:
  *a3 = v32;
}

uint64_t sub_100094A50(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != 1) {
    return 0LL;
  }
  v14[14] = v4;
  v14[15] = v5;
  uint64_t v9 = sub_100008DB0((uint64_t *)&unk_100133378);
  uint64_t inited = swift_initStackObject(v9, v14);
  *(_OWORD *)(inited + 16) = xmmword_1000F5520;
  *(void *)(inited + 32) = 0x7365676E616863LL;
  *(void *)(inited + 40) = 0xE700000000000000LL;
  unint64_t v11 = sub_100092DA4(a2, a3, a4);
  *(void *)(inited + 72) = type metadata for String;
  *(void *)(inited + 48) = v11;
  *(void *)(inited + 56) = v12;
  Dictionary.init(dictionaryLiteral:)( inited,  type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  return 0x6146207469647541LL;
}

void sub_100094B3C()
{
}

uint64_t sub_100094C08()
{
  return type metadata accessor for Registry(0LL);
}

uint64_t type metadata accessor for Registry(uint64_t a1)
{
  return sub_1000B074C(a1, (uint64_t *)&unk_100133028, (uint64_t)&nominal type descriptor for Registry);
}

void sub_100094C24(uint64_t a1)
{
  v4[0] = "(";
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = &unk_1000F6FE8;
  sub_100094CD0(319LL);
  if (v3 <= 0x3F)
  {
    void v4[4] = *(void *)(v2 - 8) + 64LL;
    v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_updateClassMetadata2(a1, 256LL, 8LL, v4, a1 + 80);
  }

void sub_100094CD0(uint64_t a1)
{
  if (!qword_100133038)
  {
    uint64_t v2 = sub_100008E58(&qword_100133040);
    unint64_t v3 = type metadata accessor for Mutex(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_100133038);
    }
  }

char *sub_100094D28()
{
  if (&swift_runtimeSupportsNoncopyableTypes) {
    return (char *)sub_100008DB0(&qword_100133048);
  }
  else {
    return (char *)&type metadata for () + 8;
  }
}

void sub_100094D50(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v50 = type metadata accessor for LNBundleRecord(0LL);
  __chkstk_darwin(v50);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v42 - v10;
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t *)((char *)&v42 - v13);
  if (qword_1001302D0 != -1) {
    swift_once(&qword_1001302D0, sub_100088800);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  sub_100008D98(v15, (uint64_t)qword_100135768);
  sub_100084214(a1, (uint64_t)v14, type metadata accessor for LNBundleRecord);
  sub_100084214(a1, (uint64_t)v11, type metadata accessor for LNBundleRecord);
  sub_100084214(a2, (uint64_t)v8, type metadata accessor for LNBundleRecord);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.fault.getter();
  int v19 = v18;
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v20 = swift_slowAlloc(32LL, -1LL);
    uint64_t v46 = swift_slowAlloc(96LL, -1LL);
    uint64_t v53 = v46;
    *(_DWORD *)uint64_t v20 = 136315650;
    uint64_t v49 = v3;
    uint64_t v47 = a1;
    uint64_t v21 = *v14;
    unint64_t v22 = v14[1];
    swift_bridgeObjectRetain();
    uint64_t v51 = sub_10000DE60(v21, v22, &v53);
    uint64_t v43 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease();
    sub_100058D54((uint64_t)v14, type metadata accessor for LNBundleRecord);
    *(_WORD *)(v20 + 12) = 2080;
    int v45 = v19;
    uint64_t v23 = v50;
    uint64_t v24 = (uint64_t *)&v11[*(int *)(v50 + 24)];
    uint64_t v25 = *v24;
    unint64_t v26 = v24[1];
    sub_10000A280(*v24, v26);
    uint64_t v27 = Data.description.getter(v25, v26);
    uint64_t v48 = a3;
    uint64_t v28 = v27;
    os_log_t v44 = v17;
    unint64_t v30 = v29;
    unint64_t v31 = v26;
    a1 = v47;
    sub_10000A1D8(v25, v31);
    uint64_t v51 = sub_10000DE60(v28, v30, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v20 + 14, v20 + 22);
    swift_bridgeObjectRelease();
    sub_100058D54((uint64_t)v11, type metadata accessor for LNBundleRecord);
    *(_WORD *)(v20 + 22) = 2080;
    uint64_t v32 = *(int *)(v23 + 24);
    uint64_t v33 = (uint64_t)v43;
    uint64_t v34 = (uint64_t *)&v43[v32];
    uint64_t v35 = *v34;
    unint64_t v36 = v34[1];
    sub_10000A280(*v34, v36);
    uint64_t v37 = Data.description.getter(v35, v36);
    unint64_t v39 = v38;
    sub_10000A1D8(v35, v36);
    uint64_t v40 = v37;
    a3 = v48;
    uint64_t v51 = sub_10000DE60(v40, v39, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v20 + 24, v20 + 32);
    swift_bridgeObjectRelease();
    sub_100058D54(v33, type metadata accessor for LNBundleRecord);
    uint64_t v17 = v44;
    _os_log_impl( (void *)&_mh_execute_header,  v44,  (os_log_type_t)v45,  "Found non-unique bundle %s: %s vs %s",  (uint8_t *)v20,  0x20u);
    uint64_t v41 = v46;
    swift_arrayDestroy(v46, 3LL);
    swift_slowDealloc(v41, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  else
  {
    sub_100058D54((uint64_t)v14, type metadata accessor for LNBundleRecord);
    sub_100058D54((uint64_t)v11, type metadata accessor for LNBundleRecord);
    sub_100058D54((uint64_t)v8, type metadata accessor for LNBundleRecord);
  }

  sub_100084214(a1, a3, type metadata accessor for LNBundleRecord);
}

void sub_100095114(void *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v62 = (uint64_t *)a3;
  unint64_t v63 = a4;
  uint64_t v9 = sub_100008DB0(&qword_100132D90);
  __chkstk_darwin(v9);
  uint64_t v68 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v58 - v12;
  uint64_t v14 = type metadata accessor for LNBundleRecord(0LL);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = a1[3];
  uint64_t v17 = a1[4];
  sub_100008D74(a1, v18);
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)(v17 + 8) + 8LL))(v18);
  uint64_t v21 = v20;
  swift_beginAccess(a2, v65, 32LL, 0LL);
  sub_100011DDC(v19, v21, *a2, (uint64_t)v13);
  swift_bridgeObjectRelease();
  if (sub_100009E6C((uint64_t)v13, 1LL, v14) == 1)
  {
    sub_100026E14((uint64_t)v13, &qword_100132D90);
    swift_endAccess(v65);
    sub_100008D74(a1, a1[3]);
    if ((sub_1000ACF94() & 1) != 0)
    {
      sub_10001AFE4((uint64_t)a1, (uint64_t)v65);
      swift_beginAccess(a5, v64, 33LL, 0LL);
      sub_1000B06A0((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100014190);
      uint64_t v22 = *(void *)(*a5 + 16);
      sub_1000B06F8(v22, (uint64_t (*)(BOOL))sub_100014190);
      uint64_t v23 = sub_10004BB58((uint64_t)v65, v66);
      double v24 = __chkstk_darwin(v23);
      unint64_t v26 = (char *)&v58 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *, double))(v27 + 16))(v26, v24);
      sub_1000B2748(v22, (uint64_t)v26, a5);
      sub_10000AC58(v65);
      swift_endAccess(v64);
    }
  }

  else
  {
    uint64_t v61 = v5;
    sub_100084248((uint64_t)v13, (uint64_t)v16, type metadata accessor for LNBundleRecord);
    swift_endAccess(v65);
    uint64_t v28 = (uint64_t *)&v16[*(int *)(v14 + 24)];
    uint64_t v29 = *v28;
    unint64_t v30 = v28[1];
    uint64_t v31 = a1[3];
    uint64_t v32 = a1[4];
    sub_100008D74(a1, v31);
    uint64_t v33 = *(void *)(v32 + 8);
    uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t))(v33 + 24);
    sub_10000A280(v29, v30);
    uint64_t v35 = v34(v31, v33);
    unint64_t v37 = v36;
    LOBYTE(v33) = static Data.== infix(_:_:)(v29, v30, v35, v36);
    sub_10000A1D8(v35, v37);
    sub_10000A1D8(v29, v30);
    if ((v33 & 1) == 0)
    {
      sub_100008D74(a1, a1[3]);
      if ((sub_1000ACF94() & 1) != 0)
      {
        sub_10001AFE4((uint64_t)a1, (uint64_t)v65);
        unint64_t v38 = v62;
        swift_beginAccess(v62, v64, 33LL, 0LL);
        sub_1000B06A0((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100014190);
        uint64_t v39 = *(void *)(*v38 + 16);
        sub_1000B06F8(v39, (uint64_t (*)(BOOL))sub_100014190);
        uint64_t v40 = sub_10004BB58((uint64_t)v65, v66);
        double v41 = __chkstk_darwin(v40);
        uint64_t v43 = (char *)&v58 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *, double))(v44 + 16))(v43, v41);
        sub_1000B2748(v39, (uint64_t)v43, v38);
      }

      else
      {
        uint64_t v45 = a1[3];
        uint64_t v46 = a1[4];
        uint64_t v47 = sub_100008D74(a1, v45);
        uint64_t v66 = v45;
        uint64_t v62 = *(uint64_t **)(v46 + 8);
        uint64_t v67 = (uint64_t)v62;
        uint64_t v48 = sub_10001AFA8(v65);
        uint64_t v59 = *(void (**)(char *, void *, uint64_t, double))(*(void *)(v45 - 8) + 16LL);
        unint64_t v60 = v48;
        ((void (*)(void *, void *, uint64_t))v59)(v48, v47, v45);
        uint64_t v49 = v63;
        swift_beginAccess(v63, v64, 33LL, 0LL);
        sub_1000B06A0((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100014A00);
        uint64_t v50 = *(void *)(*v49 + 16);
        uint64_t v51 = sub_1000B06F8(v50, (uint64_t (*)(BOOL))sub_100014A00);
        double v52 = __chkstk_darwin(v51);
        uint64_t v54 = (char *)&v58 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        v59(v54, v60, v45, v52);
        sub_1000B3CA8(v50, (uint64_t)v54, v49, v45, (uint64_t)v62);
      }

      sub_10000AC58(v65);
      swift_endAccess(v64);
    }

    sub_100058D54((uint64_t)v16, type metadata accessor for LNBundleRecord);
  }

  uint64_t v55 = a1[3];
  uint64_t v56 = a1[4];
  sub_100008D74(a1, v55);
  (*(void (**)(uint64_t))(*(void *)(v56 + 8) + 8LL))(v55);
  swift_beginAccess(a2, v65, 33LL, 0LL);
  uint64_t v57 = (uint64_t)v68;
  sub_100032FA8();
  swift_endAccess(v65);
  swift_bridgeObjectRelease();
  sub_100026E14(v57, &qword_100132D90);
}

uint64_t sub_100095654()
{
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for Data.Iterator(0LL);
  uint64_t v20 = *(void *)(v3 - 8);
  sub_100027F2C();
  __chkstk_darwin(v4);
  sub_10000AEB0();
  uint64_t v5 = v2[4];
  sub_100008D74(v2, v2[3]);
  v6._uint64_t countAndFlagsBits = sub_1000B7F4C(*(uint64_t (**)(uint64_t))(*(void *)(v5 + 8) + 8LL));
  String.append(_:)(v6);
  sub_10001DF40();
  v7._uint64_t countAndFlagsBits = 8250LL;
  v7._object = (void *)0xE200000000000000LL;
  String.append(_:)(v7);
  uint64_t v8 = v2[4];
  sub_100008D74(v2, v2[3]);
  uint64_t v9 = sub_1000B7F4C(*(uint64_t (**)(uint64_t))(*(void *)(v8 + 8) + 24LL));
  unint64_t v11 = v10;
  uint64_t v19 = v9;
  Data.makeIterator()(v9, v10);
  sub_100067940(&qword_100133358, (uint64_t (*)(uint64_t))&type metadata accessor for Data.Iterator);
  sub_1000B7478();
  if ((v22 & 1) == 0)
  {
    do
    {
      uint64_t v12 = sub_100008DB0(&qword_100133360);
      uint64_t v13 = swift_allocObject(v12, 72LL, 7LL);
      *(_OWORD *)(v13 + 16) = xmmword_1000F5520;
      *(void *)(v13 + 56) = &type metadata for UInt8;
      *(void *)(v13 + 64) = &protocol witness table for UInt8;
      *(_BYTE *)(v13 + 32) = v21;
      v14._uint64_t countAndFlagsBits = String.init(format:_:)(0x786868323025LL, 0xE600000000000000LL);
      String.append(_:)(v14);
      sub_10001198C();
      sub_1000B7478();
    }

    while (v22 != 1);
  }

  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v0, v3);
  sub_10000A1D8(v19, v11);
  v15._uint64_t countAndFlagsBits = 0LL;
  v15._object = (void *)0xE000000000000000LL;
  String.append(_:)(v15);
  sub_10001198C();
  v16._uint64_t countAndFlagsBits = 10LL;
  v16._object = (void *)0xE100000000000000LL;
  String.append(_:)(v16);
  v17._uint64_t countAndFlagsBits = 8237LL;
  v17._object = (void *)0xE200000000000000LL;
  String.append(_:)(v17);
  return sub_10001198C();
}

uint64_t sub_100095840(void *a1, uint64_t a2)
{
  uint64_t v25 = a2;
  uint64_t v3 = type metadata accessor for Data.Iterator(0LL);
  uint64_t v24 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v28._uint64_t countAndFlagsBits = 8237LL;
  v28._object = (void *)0xE200000000000000LL;
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100008D74(a1, v6);
  v8._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 8250LL;
  v9._object = (void *)0xE200000000000000LL;
  String.append(_:)(v9);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100008D74(a1, v10);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 24))(v10, v11);
  unint64_t v14 = v13;
  v27._uint64_t countAndFlagsBits = 0LL;
  v27._object = (void *)0xE000000000000000LL;
  uint64_t v23 = v12;
  Data.makeIterator()(v12, v13);
  sub_100067940(&qword_100133358, (uint64_t (*)(uint64_t))&type metadata accessor for Data.Iterator);
  uint64_t v16 = v15;
  dispatch thunk of IteratorProtocol.next()(v3, v15);
  if ((v30 & 1) == 0)
  {
    __int128 v26 = xmmword_1000F5520;
    do
    {
      char v17 = v29;
      uint64_t v18 = sub_100008DB0(&qword_100133360);
      uint64_t v19 = swift_allocObject(v18, 72LL, 7LL);
      *(_OWORD *)(v19 + 16) = v26;
      *(void *)(v19 + 56) = &type metadata for UInt8;
      *(void *)(v19 + 64) = &protocol witness table for UInt8;
      *(_BYTE *)(v19 + 32) = v17;
      v20._uint64_t countAndFlagsBits = String.init(format:_:)(0x786868323025LL, 0xE600000000000000LL);
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      dispatch thunk of IteratorProtocol.next()(v3, v16);
    }

    while (v30 != 1);
  }

  (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v3);
  sub_10000A1D8(v23, v14);
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = 10LL;
  v21._object = (void *)0xE100000000000000LL;
  String.append(_:)(v21);
  String.append(_:)(v28);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100095A90( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_BYTE *)(v8 + 144) = 1;
  uint64_t v17 = sub_100008DB0(&qword_100133988);
  swift_allocObject(v17, 41LL, 7LL);
  uint64_t v18 = sub_10008F614();
  *(void *)(v8 + 112) = a5;
  *(void *)(v8 + 120) = a6;
  *(void *)(v8 + 152) = a4;
  *(void *)(v8 + 160) = v18;
  *(void *)(v8 + 168) = 0LL;
  *(void *)(v8 + 176) = a1;
  *(void *)(v8 + 184) = a2;
  *(void *)(v8 + 192) = a3;
  *(void *)(v8 + 128) = a7;
  *(void *)(v8 + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = a8;
  return v8;
}

uint64_t sub_100095B34(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100008DB0(&qword_100131780);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10008F130(a1, sub_1000B5000);
  uint64_t v7 = type metadata accessor for TaskPriority(0LL);
  sub_100009E60((uint64_t)v6, 1LL, 1LL, v7);
  uint64_t v8 = (void *)swift_allocObject(&unk_100126040, 40LL, 7LL);
  v8[2] = 0LL;
  v8[3] = 0LL;
  v8[4] = v2;
  swift_retain();
  sub_10000D1F0((uint64_t)v6, (uint64_t)&unk_100133948, (uint64_t)v8);
  return swift_release();
}

uint64_t sub_100095C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return swift_task_switch(sub_1000B622C, a4, 0LL);
}

uint64_t sub_100095C20(uint64_t a1)
{
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = v1;
  return swift_task_switch(sub_100095C38, 0LL, 0LL);
}

uint64_t sub_100095C38()
{
  uint64_t v1 = *(__int128 **)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  __int128 v3 = v1[3];
  __int128 v5 = *v1;
  __int128 v4 = v1[1];
  *(_OWORD *)(v0 + 48) = v1[2];
  *(_OWORD *)(v0 + 64) = v3;
  *(_OWORD *)(v0 + 16) = v5;
  *(_OWORD *)(v0 + 32) = v4;
  uint64_t v6 = sub_1000B703C();
  *(void *)(v0 + 96) = v6;
  *(void *)(v6 + 16) = v0 + 16;
  *(void *)(v6 + 24) = v2;
  sub_1000B4CCC(v1);
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 104) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100095CEC;
  sub_10000EA88();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_100095CEC()
{
  if (!v1) {
    swift_task_dealloc(*(void *)(v0 + 96));
  }
  sub_10000EA88();
  return sub_10004BEA0();
}

uint64_t sub_100095D30()
{
  __int128 v4 = (uint64_t (*)(void))sub_1000681B8();
  return sub_100068024(v4);
}

uint64_t sub_100095D7C()
{
  return sub_100068024(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_100095DD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100008DB0(&qword_100131780);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100008DB0(&qword_100133918);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  double v12 = __chkstk_darwin(v9);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))( (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v9,  v12);
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = (v13 + 16) & ~v13;
  uint64_t v15 = swift_allocObject(&unk_100125FF0, v14 + v11, v13 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))( v15 + v14,  (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v9);
  uint64_t v16 = *(void *)(a2 + 48);
  uint64_t v17 = *(void *)(a2 + 56);
  *(void *)(a2 + 48) = sub_1000B4E7C;
  *(void *)(a2 + 56) = v15;
  sub_100075674(v16, v17);
  __int128 v18 = *(_OWORD *)(a2 + 16);
  v23[0] = *(_OWORD *)a2;
  v23[1] = v18;
  __int128 v19 = *(_OWORD *)(a2 + 48);
  v23[2] = *(_OWORD *)(a2 + 32);
  v23[3] = v19;
  sub_1000B4CCC(v23);
  sub_10008F130((uint64_t)v23, sub_1000B4F3C);
  sub_1000B3524(v23);
  uint64_t v20 = type metadata accessor for TaskPriority(0LL);
  sub_100009E60((uint64_t)v8, 1LL, 1LL, v20);
  Swift::String v21 = (void *)swift_allocObject(&unk_100126018, 40LL, 7LL);
  v21[2] = 0LL;
  v21[3] = 0LL;
  v21[4] = a3;
  swift_retain();
  sub_10000D1F0((uint64_t)v8, (uint64_t)&unk_100133928, (uint64_t)v21);
  return swift_release();
}

uint64_t sub_100095F84(uint64_t a1)
{
  if (a1)
  {
    uint64_t v4 = a1;
    swift_errorRetain(a1);
    uint64_t v1 = sub_100008DB0(&qword_100133918);
    return CheckedContinuation.resume(throwing:)(&v4, v1);
  }

  else
  {
    uint64_t v3 = sub_100008DB0(&qword_100133918);
    return CheckedContinuation.resume(returning:)(v3, v3);
  }

uint64_t sub_100095FE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return swift_task_switch(sub_100095FFC, a4, 0LL);
}

uint64_t sub_100095FFC()
{
  return sub_10000C914(*(uint64_t (**)(void))(v0 + 8));
}

void sub_100096024()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100008DB0(&qword_100131780);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!*(void *)(v0 + 168))
  {
    if (qword_100130330 != -1) {
      swift_once(&qword_100130330, sub_100091538);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    uint64_t v6 = sub_100008D98(v5, (uint64_t)qword_100135860);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Starting processing task", v9, 2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    uint64_t v10 = type metadata accessor for TaskPriority(0LL);
    sub_100009E60((uint64_t)v4, 1LL, 1LL, v10);
    sub_100067940(&qword_1001338F8, (uint64_t (*)(uint64_t))type metadata accessor for Registry.IndexingQueue);
    uint64_t v12 = v11;
    uint64_t v13 = (void *)swift_allocObject(&unk_100125FC8, 40LL, 7LL);
    v13[2] = v1;
    v13[3] = v12;
    v13[4] = v1;
    swift_retain_n(v1, 2LL);
    *(void *)(v1 + 168) = sub_10000D1F0((uint64_t)v4, (uint64_t)&unk_100133900, (uint64_t)v13);
    swift_release();
  }

uint64_t sub_1000961CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 248) = a4;
  return swift_task_switch(sub_1000961E4, a4, 0LL);
}

uint64_t sub_1000961E4()
{
  *(void *)(v0 + 216) = *(void *)(*(void *)(v0 + 248) + 160LL);
  sub_100067940(&qword_1001338F8, (uint64_t (*)(uint64_t))type metadata accessor for Registry.IndexingQueue);
  sub_10000C7FC();
  sub_10000EA88();
  return sub_10000E998();
}

uint64_t sub_100096238()
{
  uint64_t v1 = sub_1000B703C();
  *(void *)(v0 + 256) = v1;
  *(void *)(v1 + 16) = v0 + 216;
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 264) = v2;
  sub_100008DB0(&qword_100133908);
  *uint64_t v2 = v0;
  v2[1] = sub_1000962D8;
  sub_10000EA88();
  return withCheckedContinuation<A>(isolation:function:_:)( v3,  v4,  v5,  0x29287478656ELL,  0xE600000000000000LL,  v6,  v1,  v7);
}

uint64_t sub_1000962D8()
{
  return sub_10004BEA0();
}

uint64_t sub_100096318()
{
  uint64_t v2 = *(void *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 88);
  *(void *)(v1 + 272) = v2;
  *(void *)(v1 + 280) = v3;
  uint64_t v4 = *(void *)(v1 + 96);
  uint64_t v5 = *(void *)(v1 + 104);
  *(void *)(v1 + 288) = v4;
  *(void *)(v1 + 296) = v5;
  uint64_t v6 = *(void *)(v1 + 112);
  uint64_t v7 = *(void *)(v1 + 120);
  *(void *)(v1 + 304) = v6;
  *(void *)(v1 + 312) = v7;
  uint64_t v8 = *(void *)(v1 + 128);
  uint64_t v9 = *(void *)(v1 + 136);
  *(void *)(v1 + 320) = v8;
  *(void *)(v1 + 328) = v9;
  if (v3)
  {
    *(_BYTE *)(v1 + 16) = v2 & 1;
    *(void *)(v1 + 24) = v3;
    *(void *)(v1 + 32) = v4;
    *(void *)(v1 + 40) = v5;
    *(void *)(v1 + 48) = v6;
    *(_BYTE *)(v1 + 56) = v7 & 1;
    *(void *)(v1 + 64) = v8;
    *(void *)(v1 + 72) = v9;
    uint64_t v10 = (void *)swift_task_alloc(dword_100133084);
    *(void *)(v1 + 336) = v10;
    *uint64_t v10 = v1;
    v10[1] = sub_10009645C;
    return sub_1000967F4(v1 + 16, 0);
  }

  else
  {
    swift_release();
    if (qword_100130330 != -1) {
      swift_once(&qword_100130330, sub_100091538);
    }
    uint64_t v12 = sub_10000E918();
    uint64_t v13 = (void *)sub_100008D98(v12, (uint64_t)qword_100135860);
    Logger.logObject.getter(v13);
    os_log_type_t v14 = sub_100041BDC();
    if (sub_100068360(v14))
    {
      uint64_t v15 = (_WORD *)sub_10000AE10(2LL);
      sub_1000B6EA4(v15);
      sub_1000B6604((void *)&_mh_execute_header, v16, v17, "Processing task ending");
      sub_10000AD78(v0);
    }

    uint64_t v18 = *(void *)(v1 + 248);

    *(void *)(v18 + 168) = 0LL;
    swift_release();
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

uint64_t sub_10009645C()
{
  v0[43] = v2;
  v0[44] = v3;
  v0[45] = v1;
  sub_10004C0C4(v4);
  return sub_10004BEA0();
}

uint64_t sub_1000964B0()
{
  uint64_t v1 = *(void *)(v0[31] + 152);
  uint64_t v35 = *(void *)(v1 + 16);
  if (v35)
  {
    unint64_t v38 = v0 + 18;
    uint64_t v2 = v0[44];
    uint64_t v3 = v0[45];
    uint64_t v33 = *(void *)(v2 + 16);
    uint64_t v32 = v1 + 32;
    uint64_t result = sub_100027FA0();
    unint64_t v5 = 0LL;
    uint64_t v31 = (uint64_t *)(v2 + 40);
    uint64_t v34 = v1;
    while (v5 < *(void *)(v1 + 16))
    {
      unint64_t v36 = v5;
      sub_10001AFE4(v32 + 40 * v5, (uint64_t)v38);
      sub_100008D74(v38, v0[21]);
      sub_10001C064();
      sub_10008E060();
      uint64_t v7 = v6;
      uint64_t v37 = v3;
      sub_10001BE7C();
      uint64_t v9 = Set.init(minimumCapacity:)( *(void *)(v7 + 16),  type metadata for String,  &protocol witness table for String,  v8);
      v0[28] = v9;
      uint64_t v10 = *(void *)(v7 + 16);
      if (v10)
      {
        uint64_t v11 = (uint64_t *)(v7 + 40);
        do
        {
          uint64_t v12 = *(v11 - 1);
          uint64_t v13 = *v11;
          sub_10001C064();
          sub_100018380(v0 + 25, v12, v13);
          swift_bridgeObjectRelease();
          v11 += 2;
          --v10;
        }

        while (v10);
        sub_10001DED8();
        uint64_t v14 = v0[28];
      }

      else
      {
        uint64_t v14 = v9;
        sub_10001DED8();
      }

      sub_100064A28(v14, (uint64_t)&_swiftEmptySetSingleton);
      sub_10001BE7C();
      sub_100008D74(v38, v0[21]);
      sub_100027FA0();
      v0[29] = Set.init(minimumCapacity:)(v33, type metadata for String, &protocol witness table for String, v15);
      uint64_t v16 = v31;
      for (uint64_t i = v33; i; --i)
      {
        uint64_t v18 = *(v16 - 1);
        uint64_t v19 = *v16;
        sub_10001C064();
        sub_100018380(v0 + 23, v18, v19);
        swift_bridgeObjectRelease();
        v16 += 2;
      }

      swift_bridgeObjectRelease();
      sub_100064A28((uint64_t)&_swiftEmptySetSingleton, v0[29]);
      sub_10001BE7C();
      uint64_t result = sub_10000AC58(v38);
      unint64_t v5 = v36 + 1;
      uint64_t v1 = v34;
      uint64_t v3 = v37;
      if (v36 + 1 == v35)
      {
        swift_bridgeObjectRelease();
        goto LABEL_13;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_13:
    uint64_t v20 = v0[40];
    uint64_t v21 = v0[41];
    unint64_t v23 = v0[38];
    uint64_t v22 = v0[39];
    uint64_t v25 = v0[36];
    uint64_t v24 = v0[37];
    uint64_t v27 = v0[34];
    uint64_t v26 = v0[35];
    swift_bridgeObjectRelease();
    sub_10001DED8();
    sub_1000B4DB4(v27, v26, v25, v24, v23, v22, v20, v21);
    sub_10000EA88();
    return sub_1000B6C04(v28, v29, v30);
  }

  return result;
}

uint64_t sub_100096744()
{
  return swift_unexpectedError(*(void *)(v0 + 360), "LinkDaemon/Registry.swift", 25LL, 1LL, 572LL);
}

void *sub_100096760@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t result = (*(void *(**)(void *__return_ptr))(v2 + 112))(__src);
  if (!v3)
  {
    memcpy(v8, __src, sizeof(v8));
    if (a1)
    {
      uint64_t v7 = swift_retain();
      sub_1000C7A68(v7);
      swift_release();
    }

    sub_1000C9024();
    return memcpy(a2, v8, 0x88uLL);
  }

  return result;
}

uint64_t sub_1000967F4(uint64_t a1, char a2)
{
  *(_BYTE *)(v3 + 760) = a2;
  *(void *)(v3 + 480) = a1;
  *(void *)(v3 + 488) = v2;
  uint64_t v4 = type metadata accessor for Schema.RuntimeError(0LL);
  *(void *)(v3 + 496) = v4;
  unint64_t v5 = (*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v3 + 504) = swift_task_alloc(v5);
  *(void *)(v3 + 512) = swift_task_alloc(v5);
  *(void *)(v3 + 520) = swift_task_alloc(v5);
  uint64_t v6 = type metadata accessor for RegistryError(0LL);
  *(void *)(v3 + 528) = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Data.Iterator(0LL);
  *(void *)(v3 + 536) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v3 + 544) = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v3 + 552) = swift_task_alloc(v9);
  *(void *)(v3 + 560) = swift_task_alloc(v9);
  return swift_task_switch(sub_1000968C8, v2, 0LL);
}

uint64_t sub_1000968C8( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_log_t log, uint64_t a16, uint64_t a17, uint64_t a18, __int128 a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35)
{
  uint64_t v160 = v36;
  uint64_t v161 = v37;
  uint64_t v159 = v35;
  uint64_t v38 = v35 + 748;
  uint64_t v39 = v35 + 752;
  uint64_t v40 = v35 + 756;
  if (qword_100130330 != -1) {
    swift_once(&qword_100130330, sub_100091538);
  }
  double v41 = (_BYTE *)(v35 + 757);
  uint64_t v42 = *(void *)(v35 + 488);
  uint64_t v43 = sub_10000E918();
  *(void *)(v35 + 568) = sub_100008D98(v43, (uint64_t)qword_100135860);
  sub_1000B7868();
  sub_1000B7868();
  sub_1000B7868();
  sub_10000C7FC();
  sub_1000B7868();
  sub_10000C7FC();
  uint64_t v44 = (os_log_s *)sub_10004BF88();
  os_log_type_t v45 = static os_log_type_t.default.getter();
  if (sub_1000B77A4(v45))
  {
    LODWORD(v146) = v42;
    uint64_t v148 = v44;
    uint64_t v150 = v35 + 752;
    uint64_t v152 = v35 + 756;
    uint64_t v154 = v35 + 757;
    uint64_t v141 = v35 + 424;
    uint64_t v142 = v35 + 744;
    uint64_t v46 = *(void *)(v35 + 480);
    uint64_t v47 = sub_10000AE10(24LL);
    uint64_t v144 = sub_10000AE10(32LL);
    uint64_t v156 = v144;
    *(_DWORD *)uint64_t v47 = 136315650;
    sub_1000B7464(v46 + 24);
    sub_1000B79C0();
    if (*(void *)(v35 + 384) >> 60 == 15LL)
    {
      uint64_t v49 = 1701736302LL;
    }

    else
    {
      uint64_t v139 = v35 + 748;
      uint64_t v50 = *(void *)(v35 + 536);
      uint64_t v157 = 0LL;
      unint64_t v158 = 0xE000000000000000LL;
      uint64_t v51 = sub_1000B7F34();
      sub_10000A280(v51, v52);
      uint64_t v53 = sub_1000B7F34();
      Data.makeIterator()(v53, v54);
      sub_1000B7330();
      sub_100067940(&qword_100133358, (uint64_t (*)(uint64_t))&type metadata accessor for Data.Iterator);
      dispatch thunk of IteratorProtocol.next()(v50, v55);
      if ((*(_BYTE *)(v35 + 759) & 1) != 0)
      {
        uint64_t v49 = 0LL;
      }

      else
      {
        uint64_t v138 = v47;
        do
        {
          uint64_t v56 = sub_100008DB0(&qword_100133360);
          uint64_t v57 = (__n128 *)sub_10000C254(v56, 72LL);
          sub_1000B715C( v57,  v58,  v59,  v60,  v61,  v62,  v63,  v64,  v138,  v139,  v141,  v142,  v144,  v146,  (uint64_t)v148,  v150,  v152,  v154,  v65);
          *(void *)(v66 + 56) = &type metadata for UInt8;
          *(void *)(v66 + 64) = &protocol witness table for UInt8;
          v162._uint64_t countAndFlagsBits = sub_1000B6720(v66);
          sub_1000B7838(v162);
          sub_10001DEC4();
          uint64_t v67 = sub_1000B7F34();
          dispatch thunk of IteratorProtocol.next()(v67, v68);
        }

        while (*(_BYTE *)(v35 + 759) != 1);
        uint64_t v49 = v157;
        uint64_t v47 = v138;
      }

      sub_10000AF40(*(void *)(v35 + 544));
      uint64_t v38 = v139;
    }

    uint64_t v39 = v150;
    double v69 = *(_BYTE **)(v35 + 480);
    uint64_t v70 = *(void *)(v35 + 488);
    *(void *)(v35 + 424) = sub_100067C8C(v49, v48, &v156);
    sub_1000B6D94(v141, v35 + 432, v71, v47 + 12);
    sub_10000AEE8();
    sub_1000B6EB0();
    sub_1000B6EB0();
    *(_WORD *)(v47 + 12) = 1024;
    sub_1000B6EB0();
    *(_DWORD *)(v35 + 752) = *v69 & 1;
    uint64_t v40 = v152;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v150, v152, v47 + 14, v47 + 18);
    sub_1000B6EB0();
    *(_WORD *)(v47 + 18) = 1024;
    LODWORD(v69) = *(unsigned __int8 *)(v70 + 144);
    sub_1000389DC();
    *(_DWORD *)(v35 + 744) = (_DWORD)v69;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v142, v38, v47 + 20, v47 + 24);
    sub_1000389DC();
    _os_log_impl( (void *)&_mh_execute_header,  v148,  (os_log_type_t)v146,  "Applying change to version %s, authoritative=%{BOOL}d, isStoreDirty=%{BOOL}d)",  (uint8_t *)v47,  0x18u);
    sub_10000AF48(v144);
    sub_10000AD78(v144);
    sub_10000AD78(v47);

    double v41 = (_BYTE *)v154;
  }

  else
  {
    sub_1000389DC();
    sub_1000B6EB0();
    sub_1000B6EB0();
    sub_1000B6EB0();
    sub_1000B6EB0();

    sub_1000389DC();
  }

  uint64_t v72 = *(void **)(*(void *)(v35 + 480) + 16LL);
  id v73 = *(id *)(*(void *)(v35 + 488) + 176LL);
  uint64_t v74 = 0LL;
  sub_100053018(v72);

  sub_10008E2D0();
  id v76 = v75;
  uint64_t result = sub_10001198C();
  *(void *)(v35 + 576) = v76;
  uint64_t v78 = v76[2];
  *(void *)(v35 + 584) = v78;
  if (v78)
  {
    v41[4] = 0;
    *(void *)(v35 + 608) = _swiftEmptyArrayStorage;
    *(_OWORD *)(v35 + 592) = 0u;
    if (v76[2])
    {
      *(void *)(v35 + 616) = v76[4];
      *(void *)(v35 + 624) = v76[5];
      sub_10000AFB0();
      unint64_t v79 = (void *)sub_1000B7E78();
      *(void *)(v35 + 632) = v79;
      *unint64_t v79 = v35;
      v79[1] = sub_1000970EC;
      uint64_t v80 = sub_1000B75D4();
      return sub_10009A2F8(v80, v81);
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    uint64_t v153 = v40;
    *(void *)(v35 + 648) = _swiftEmptyArrayStorage;
    uint64_t v82 = *(void *)(v35 + 488);
    sub_10001BE7C();
    uint64_t v83 = sub_100008DB0(&qword_1001338D8);
    uint64_t v85 = sub_1000B7870(v83, v84, v83);
    uint64_t v86 = sub_100008DB0((uint64_t *)&unk_1001338E0);
    uint64_t v88 = sub_1000B7870(v86, v87, v86);
    uint64_t v89 = *(uint64_t (**)(void))(v82 + 128);
    if (v89) {
      uint64_t v90 = sub_1000B7C84(v89);
    }
    else {
      uint64_t v90 = 0LL;
    }
    sub_1000B6A2C(v90);
    if (v92)
    {
      v41[5] = *(_BYTE *)(v91 + 40);
      *(void *)(v35 + 712) = _swiftEmptyArrayStorage;
      v41[6] = 0;
      *(_OWORD *)(v35 + 696) = 0u;
      *(void *)(v35 + 688) = v85;
      *(void *)(v35 + 680) = v88;
      swift_bridgeObjectRetain();
      sub_1000B6F78();
      sub_1000B7C10();
      uint64_t v93 = (void *)swift_task_alloc(dword_10013308C);
      *(void *)(v35 + 728) = v93;
      *uint64_t v93 = v35;
      v93[1] = sub_1000975E4;
      uint64_t v94 = sub_1000B70C8();
      return sub_1000B6888(v94, v95, v96);
    }

    else
    {
      sub_10001BE7C();
      sub_10000AEE8();
      sub_1000B70DC();
      uint64_t v155 = v41;
      if (!v99 & v98)
      {
        sub_1000B6E04();
      }

      else
      {
        uint64_t v74 = *(void **)(v97 + 24);
        sub_1000B7BE0();
        if ((v100 & 1) != 0 || (type metadata for String[144] & 1) == 0)
        {
          sub_1000B7E98();
          sub_1000B7E8C();
          sub_1000B7EA4();
        }
      }

      sub_1000B7784();
      sub_100047360();
      sub_1000B4CCC(v74);
      uint64_t v101 = sub_100047360();
      uint64_t v102 = (os_log_s *)Logger.logObject.getter(v101);
      int v103 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v102, (os_log_type_t)v103))
      {
        uint64_t v151 = v39;
        uint64_t v140 = v38;
        uint64_t v147 = v35 + 448;
        uint64_t v104 = *(void *)(v35 + 480);
        uint64_t v105 = sub_10000AE10(18LL);
        uint64_t v149 = sub_10000AE10(32LL);
        uint64_t v156 = v149;
        *(_DWORD *)uint64_t v105 = 136315394;
        sub_1000B7464(v104 + 24);
        sub_1000B79C0();
        if (*(void *)(v35 + 400) >> 60 == 15LL)
        {
          uint64_t v107 = 1701736302LL;
        }

        else
        {
          uint64_t v109 = *(void *)(v35 + 536);
          uint64_t v157 = 0LL;
          unint64_t v158 = 0xE000000000000000LL;
          uint64_t v110 = sub_1000B7EE0();
          sub_10000A280(v110, v111);
          uint64_t v112 = sub_1000B7EE0();
          Data.makeIterator()(v112, v113);
          sub_1000B7330();
          sub_100067940(&qword_100133358, (uint64_t (*)(uint64_t))&type metadata accessor for Data.Iterator);
          dispatch thunk of IteratorProtocol.next()(v109, v114);
          if ((*v155 & 1) != 0)
          {
            uint64_t v107 = 0LL;
          }

          else
          {
            LODWORD(v141) = v103;
            uint64_t v143 = v105;
            uint64_t v145 = (uint64_t)v102;
            uint64_t v115 = v155;
            do
            {
              uint64_t v116 = sub_100008DB0(&qword_100133360);
              uint64_t v117 = (__n128 *)sub_10000C254(v116, 72LL);
              sub_1000B715C( v117,  v118,  v119,  v120,  v121,  v122,  v123,  v124,  v138,  v140,  v141,  v143,  v145,  v147,  v149,  v151,  v153,  (uint64_t)v155,  v125);
              *(void *)(v126 + 56) = &type metadata for UInt8;
              *(void *)(v126 + 64) = &protocol witness table for UInt8;
              v163._uint64_t countAndFlagsBits = sub_1000B6720(v126);
              sub_1000B7838(v163);
              sub_10001DED8();
              uint64_t v127 = sub_1000B7EE0();
              dispatch thunk of IteratorProtocol.next()(v127, v128);
            }

            while (*v115 != 1);
            uint64_t v107 = v157;
            uint64_t v105 = v143;
            uint64_t v102 = (os_log_s *)v145;
            LOBYTE(v103) = v141;
          }

          sub_1000B68E8();
        }

        id v130 = *(void **)(v35 + 480);
        uint64_t v129 = *(void *)(v35 + 488);
        uint64_t v131 = sub_1000B7470(v107, v106, &v156);
        sub_1000B7B9C(v131);
        sub_1000B642C(v147, v132, v133, v134);
        sub_10001BE7C();
        sub_1000B3524(v130);
        sub_1000B3524(v130);
        *(_WORD *)(v105 + 12) = 1024;
        int v135 = *(unsigned __int8 *)(v129 + 144);
        sub_100084A44();
        *(_DWORD *)(v35 + 748) = v135;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v140, v151, v105 + 14, v105 + 18);
        sub_100084A44();
        sub_1000B73E4( (void *)&_mh_execute_header,  v102,  (os_log_type_t)v103,  "Finished applying change to version %s, isStoreDirty=%{BOOL}d",  (uint8_t *)v105);
        unint64_t v108 = (void (*)(void))v149;
        sub_10000AF48(v149);
        sub_10000AD78(v149);
        sub_10000AD78(v105);
      }

      else
      {
        unint64_t v108 = *(void (**)(void))(v35 + 488);
        sub_100047164();
        sub_1000B7308();
        sub_1000B7308();

        sub_100047164();
      }

      sub_1000389DC();
      sub_1000B7C6C();
      if (v108)
      {
        swift_errorRetain(0LL);
        v108(0LL);
        swift_errorRelease(0LL);
      }

      sub_1000B7734();
      swift_errorRelease(0LL);
      sub_10000AF6C();
      sub_10000AFA8();
      sub_10004D844();
      sub_10004D858();
      sub_10004D884();
      sub_100059648();
      sub_1000B7728();
      return sub_1000B68A4((uint64_t)_swiftEmptyArrayStorage, v136, v137);
    }
  }

  return result;
}

uint64_t sub_1000970EC()
{
  *(void *)(v0 + 640) = v1;
  swift_task_dealloc(v3);
  return sub_10004BEA0();
}

void sub_10009713C()
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + 608));
  uint64_t v2 = *(void *)(v0 + 608);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_100027F90();
    sub_1000141B8();
    uint64_t v2 = v68;
  }

  unint64_t v3 = *(void *)(v2 + 16);
  if (v3 >= *(void *)(v2 + 24) >> 1)
  {
    sub_1000141B8();
    uint64_t v2 = v69;
  }

  uint64_t v4 = *(void *)(v0 + 624);
  uint64_t v5 = *(void *)(v0 + 616);
  uint64_t v6 = *(void *)(v0 + 584);
  uint64_t v7 = *(void *)(v0 + 600) + 1LL;
  *(void *)(v2 + 16) = v3 + 1;
  uint64_t v8 = v2 + 16 * v3;
  *(void *)(v8 + 32) = v5;
  *(void *)(v8 + 40) = v4;
  if (v7 != v6)
  {
    uint64_t v28 = *(void *)(v0 + 600) + 1LL;
    *(void *)(v0 + 608) = v2;
    sub_1000B7B2C(v28);
    if (v30)
    {
      __break(1u);
    }

    else
    {
      sub_1000B7700(v29);
      sub_10000AFB0();
      uint64_t v31 = (void *)sub_1000B7E78();
      *(void *)(v0 + 632) = v31;
      uint64_t v32 = sub_1000B77DC(v31, (uint64_t)sub_1000970EC);
      sub_1000B6B44(v32, v33);
    }

    return;
  }

  unint64_t v9 = (_BYTE *)(v0 + 757);
  uint64_t v10 = *(void *)(v0 + 640);
  uint64_t v11 = *(void *)(v0 + 592);
  uint64_t v12 = *(unsigned __int8 *)(v0 + 761);
  *(void *)(v0 + 648) = v2;
  uint64_t v13 = *(void *)(v0 + 488);
  swift_bridgeObjectRelease();
  uint64_t v14 = sub_100008DB0(&qword_1001338D8);
  __n128 v15 = _swiftEmptyArrayStorage;
  sub_1000B79A8(v14, v16, v14);
  uint64_t v17 = sub_100008DB0((uint64_t *)&unk_1001338E0);
  sub_1000B79A8(v17, v18, v17);
  uint64_t v19 = *(uint64_t (**)(void))(v13 + 128);
  if (v19)
  {
    uint64_t v20 = sub_1000B7C84(v19);
    if (!v10) {
      goto LABEL_10;
    }
    sub_10000AD70();
  }

  uint64_t v20 = 0LL;
LABEL_10:
  uint64_t v21 = sub_1000B6A2C(v20);
  if (v23)
  {
    *(_BYTE *)(v0 + 762) = *(_BYTE *)(v22 + 40);
    *(void *)(v0 + 712) = _swiftEmptyArrayStorage;
    *(void *)(v0 + 704) = 0LL;
    *(void *)(v0 + 696) = v11;
    *(_BYTE *)(v0 + 763) = v12;
    sub_1000B7718(v21);
    sub_1000B6F78();
    sub_1000B7C10();
    uint64_t v24 = (void *)swift_task_alloc(dword_10013308C);
    *(void *)(v0 + 728) = v24;
    *uint64_t v24 = v0;
    v24[1] = sub_1000975E4;
    uint64_t v25 = sub_1000B70C8();
    sub_1000B6B60(v25, v26, v27);
  }

  else
  {
    sub_10000AEE8();
    sub_10001BEC0();
    if ((v12 & 1) != 0 || (uint64_t v34 = *(void *)(v0 + 480), *(void *)(v34 + 32) >> 60 == 15LL))
    {
      sub_1000B6E04();
    }

    else
    {
      __n128 v15 = *(void **)(v34 + 24);
      sub_1000B7BE0();
      if ((v42 & 1) != 0 || (type metadata for String[144] & 1) == 0)
      {
        uint64_t v43 = sub_1000B7608();
        sub_10000A280(v43, v44);
        uint64_t v45 = sub_1000B7608();
        sub_10009A910(v45, v46);
        uint64_t v47 = sub_1000B7608();
        sub_10000A21C(v47, v48);
      }
    }

    sub_1000B7774();
    sub_10001BE38();
    sub_1000B4CCC(v15);
    uint64_t v35 = sub_10001BE38();
    Logger.logObject.getter(v35);
    uint64_t v36 = sub_1000B7880();
    if (sub_1000B7404((os_log_type_t)v36))
    {
      id v76 = (os_log_s *)v12;
      sub_1000B7BB0();
      uint64_t v74 = v38;
      uint64_t v75 = v37;
      uint64_t v39 = *(void *)(v0 + 480);
      uint64_t v40 = sub_10000AE10(18LL);
      uint64_t v73 = sub_10000AE10(32LL);
      *(_DWORD *)uint64_t v40 = 136315394;
      sub_1000B705C(v39 + 24, v36);
      sub_1000B705C(v36, v12);
      sub_1000B76F0();
      if (!v41 & v30)
      {
        unint64_t v49 = 0xE400000000000000LL;
      }

      else
      {
        uint64_t v72 = v11;
        sub_1000B7A8C();
        unint64_t v49 = 0xE000000000000000LL;
        sub_1000B7F28();
        sub_1000B76C0();
        sub_1000B7330();
        sub_100067940(&qword_100133358, (uint64_t (*)(uint64_t))&type metadata accessor for Data.Iterator);
        sub_1000B7348(v39);
        if ((*v9 & 1) == 0)
        {
          uint64_t v71 = v40;
          do
          {
            uint64_t v50 = *(void *)(v0 + 536);
            uint64_t v51 = sub_100008DB0(&qword_100133360);
            uint64_t v52 = sub_10000C254(v51, 72LL);
            *(_OWORD *)(v52 + 16) = xmmword_1000F5520;
            *(void *)(v52 + 56) = &type metadata for UInt8;
            *(void *)(v52 + 64) = &protocol witness table for UInt8;
            v77._uint64_t countAndFlagsBits = sub_1000B6720(v52);
            sub_1000B7CE4(v77);
            sub_100011958();
            sub_1000B7348(v50);
          }

          while (*v9 != 1);
          unint64_t v49 = 0xE000000000000000LL;
        }

        sub_1000B68E8();
      }

      uint64_t v53 = v73;
      uint64_t v54 = sub_1000B775C();
      uint64_t v56 = sub_10000DE60(v54, v49, v55);
      sub_1000B7B9C(v56);
      sub_1000B6780(v74, v57, v58, v59);
      sub_10001198C();
      sub_1000B7964();
      sub_1000B7964();
      *(_WORD *)(v40 + 12) = 1024;
      uint64_t v60 = sub_100068168();
      sub_1000B774C(v60, v61, v40 + 14, v40 + 18, v62, v63, v64, v65, v70, v71, v72, v73, v74, v75);
      sub_100068168();
      uint64_t v12 = (uint64_t)v76;
      sub_1000B73E4( (void *)&_mh_execute_header,  v76,  (os_log_type_t)v36,  "Finished applying change to version %s, isStoreDirty=%{BOOL}d",  (uint8_t *)v40);
      sub_10000AF48(v53);
      sub_10000AD78(v53);
      sub_10000AD78(v40);
    }

    else
    {
      sub_10001BB08();
      sub_1000B7308();
      sub_1000B7308();

      sub_10001BB08();
    }

    sub_1000389DC();
    sub_1000B7C6C();
    if (v12)
    {
      sub_1000B7350();
      sub_1000B803C();
      sub_1000B65C4();
    }

    sub_1000B7688();
    sub_1000B65C4();
    sub_10000AF6C();
    sub_10004D844();
    sub_10004D858();
    sub_10004D884();
    sub_100059648();
    sub_100067F4C();
    sub_1000B7728();
    sub_1000B6B7C((uint64_t)_swiftEmptyArrayStorage, v66, v67);
  }

uint64_t sub_1000975E4()
{
  *(void *)(v0 + 736) = v1;
  swift_task_dealloc(v3);
  return sub_10004BEA0();
}

#error "100097BFC: call analysis failed (funcsize=540)"
void sub_100097ED8()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  os_log_s *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  void (*v20)(void);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(void);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  void (*v60)(uint64_t);
  uint64_t v61;
  uint64_t (*v62)(void);
  uint64_t v63;
  os_log_s *v64;
  uint64_t v65[3];
  Swift::String v66;
  uint64_t v1 = (_BYTE *)(v0 + 757);
  uint64_t v2 = *(void *)(v0 + 640);
  swift_errorRelease(*(void *)(v0 + 592));
  sub_10004BF04();
  sub_10004BF04();
  sub_10001BEF8();
  uint64_t v3 = sub_10004BF04();
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  uint64_t v5 = static os_log_type_t.fault.getter();
  uint64_t v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 624);
  if (v6)
  {
    uint64_t v8 = *(void *)(v0 + 528);
    unint64_t v9 = sub_10000AE10(22LL);
    uint64_t v10 = sub_10000AE10(64LL);
    v65[0] = v10;
    *(_DWORD *)unint64_t v9 = 136315394;
    uint64_t v11 = sub_10000AE38();
    *(void *)(v9 + 4) = sub_1000B7ED4(v11, v12, v65);
    sub_100027E5C(v7);
    *(_WORD *)(v9 + 12) = 2080;
    sub_10009206C();
    sub_100092208();
    uint64_t v14 = v13;
    sub_100058D54(v8, type metadata accessor for RegistryError);
    *(void *)(v9 + 14) = sub_1000B8034(v14, v15, v65);
    uint64_t v1 = (_BYTE *)(v0 + 757);
    swift_bridgeObjectRelease();
    sub_100041BE4();
    sub_100041BE4();
    sub_1000B64C4( (void *)&_mh_execute_header,  v4,  v5,  "Error unregistering %s from the\nmetadata store: %s",  (uint8_t *)v9);
    sub_1000B64BC(v10);
    sub_10000AD78(v10);
    sub_10000AD78(v9);
  }

  else
  {
    sub_10001191C(*(void *)(v0 + 624));
    sub_100041BE4();
    sub_100041BE4();
  }

  if (v1[3] == 1)
  {
    uint64_t v17 = *(void *)(v0 + 480);
    uint64_t v16 = *(void *)(v0 + 488);
    swift_bridgeObjectRelease();
    uint64_t v18 = sub_10000ADB0();
    *(_BYTE *)(v16 + 144) = 1;
    swift_willThrow(v18);
    uint64_t v19 = *(void (**)(uint64_t))(v17 + 48);
    if (v19)
    {
      sub_10000ADF4();
      v19(v2);
      sub_10000AD70();
    }

    sub_1000B7688();
    sub_10000AD70();
    sub_10000AF6C();
    sub_10000AFA8();
    sub_10004D858();
    sub_10004D884();
    sub_100059648();
    sub_100067F4C();
    uint64_t v20 = (void (*)(void))sub_1000680E4();
    v20();
    return;
  }

  uint64_t v21 = *(void *)(v0 + 584);
  uint64_t v22 = *(void *)(v0 + 600) + 1LL;
  sub_10000AD70();
  if (v22 != v21)
  {
    uint64_t v38 = *(void *)(v0 + 600) + 1LL;
    *(void *)(v0 + 592) = v2;
    v1[4] = 1;
    sub_1000B7B2C(v38);
    if (v40)
    {
      __break(1u);
    }

    else
    {
      sub_1000B7700(v39);
      sub_10000AFB0();
      char v41 = (void *)sub_1000B7E78();
      *(void *)(v0 + 632) = v41;
      char v42 = sub_1000B77DC(v41, (uint64_t)sub_1000970EC);
      sub_1000B6B44(v42, v43);
    }

    return;
  }

  *(void *)(v0 + 648) = *(void *)(v0 + 608);
  uint64_t v23 = *(void *)(v0 + 488);
  swift_bridgeObjectRelease();
  uint64_t v24 = sub_100008DB0(&qword_1001338D8);
  char v26 = (unsigned __int8 *)sub_1000B7998(v24, v25, v24);
  uint64_t v27 = sub_100008DB0((uint64_t *)&unk_1001338E0);
  sub_1000B7998(v27, v28, v27);
  uint64_t v29 = *(uint64_t (**)(void))(v23 + 128);
  if (v29)
  {
    char v30 = sub_1000B7C78(v29);
    if (!&protocol witness table for String) {
      goto LABEL_13;
    }
    sub_10000AD70();
  }

  char v30 = 0LL;
LABEL_13:
  uint64_t v31 = sub_1000B6A2C(v30);
  if (v33)
  {
    v1[5] = *(_BYTE *)(v32 + 40);
    *(void *)(v0 + 712) = _swiftEmptyArrayStorage;
    *(void *)(v0 + 704) = 0LL;
    *(void *)(v0 + 696) = v2;
    v1[6] = 1;
    sub_1000B7718(v31);
    sub_1000B6F78();
    sub_1000B7C10();
    uint64_t v34 = (void *)swift_task_alloc(dword_10013308C);
    *(void *)(v0 + 728) = v34;
    *uint64_t v34 = v0;
    v34[1] = sub_1000975E4;
    uint64_t v35 = sub_1000B70C8();
    sub_1000B6B60(v35, v36, v37);
  }

  else
  {
    sub_10000AEE8();
    sub_10001BEC0();
    sub_1000B6E04();
    sub_1000B7774();
    sub_10001BE38();
    sub_1000B4CCC(_swiftEmptyArrayStorage);
    unint64_t v44 = sub_10001BE38();
    Logger.logObject.getter(v44);
    uint64_t v45 = sub_1000B8070();
    if (sub_1000B77B4(v45))
    {
      uint64_t v64 = (os_log_s *)v26;
      unint64_t v46 = *(void *)(v0 + 480);
      uint64_t v47 = sub_10000AE10(18LL);
      uint64_t v63 = sub_10000AE10(32LL);
      *(_DWORD *)uint64_t v47 = 136315394;
      sub_1000B705C(v46 + 24, v0 + 344);
      sub_1000B705C(v0 + 344, v0 + 392);
      sub_1000B76F0();
      if (!(!v48 & v40))
      {
        sub_1000B7A8C();
        v65[0] = 0LL;
        v65[1] = 0xE000000000000000LL;
        sub_1000B7F28();
        sub_1000B76C0();
        sub_1000B7330();
        sub_100067940(&qword_100133358, (uint64_t (*)(uint64_t))&type metadata accessor for Data.Iterator);
        sub_1000B7348(v46);
        if ((*v1 & 1) == 0)
        {
          do
          {
            char v26 = *(unsigned __int8 **)(v0 + 552);
            unint64_t v49 = *(void *)(v0 + 536);
            uint64_t v50 = sub_100008DB0(&qword_100133360);
            uint64_t v51 = sub_10000C254(v50, 72LL);
            *(_OWORD *)(v51 + 16) = xmmword_1000F5520;
            *(void *)(v51 + 56) = &type metadata for UInt8;
            *(void *)(v51 + 64) = &protocol witness table for UInt8;
            v66._uint64_t countAndFlagsBits = sub_1000B6720(v51);
            sub_1000B7CE4(v66);
            sub_100011958();
            sub_1000B7348(v49);
          }

          while (*v1 != 1);
        }

        sub_1000B68E8();
      }

      uint64_t v52 = sub_1000B775C();
      uint64_t v55 = sub_100027FA8(v52, v53, v54);
      sub_1000B7B9C(v55);
      sub_1000B6780(v0 + 448, v56, v57, v58);
      sub_10001DF40();
      sub_1000B7964();
      sub_1000B7964();
      *(_WORD *)(v47 + 12) = 1024;
      uint64_t v59 = v26[144];
      sub_100068168();
      *(_DWORD *)(v0 + 748) = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 748, v0 + 752, v47 + 14, v47 + 18);
      sub_100068168();
      sub_1000B73E4( (void *)&_mh_execute_header,  v64,  (os_log_type_t)type metadata for String,  "Finished applying change to version %s, isStoreDirty=%{BOOL}d",  (uint8_t *)v47);
      sub_10000AF48(v63);
      sub_10000AD78(v63);
      sub_10000AD78(v47);
    }

    else
    {
      sub_10001BB08();
      sub_1000B7308();
      sub_1000B7308();

      sub_10001BB08();
    }

    sub_1000389DC();
    uint64_t v60 = *(void (**)(uint64_t))(*(void *)(v0 + 480) + 48LL);
    if (v60)
    {
      sub_10004BF04();
      v60(v2);
      sub_10004BDA4();
    }

    sub_1000B7688();
    sub_10004BDA4();
    sub_10000AF6C();
    sub_10004D844();
    sub_10004D858();
    sub_10004D884();
    sub_100059648();
    sub_100067F4C();
    sub_1000B7728();
    sub_1000B6B7C((uint64_t)_swiftEmptyArrayStorage, v61, v62);
  }

#error "100098A5C: call analysis failed (funcsize=640)"
uint64_t sub_100098F48(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  *(void *)(v4 + 24) = a3;
  *(void *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 112) = a2;
  *(void *)(v4 + 16) = a1;
  uint64_t v5 = type metadata accessor for OSSignpostID(0LL);
  *(void *)(v4 + 40) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v4 + 48) = v6;
  *(void *)(v4 + 56) = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100098FB0, v3, 0LL);
}

uint64_t sub_100098FB0()
{
  uint64_t v2 = v1[3];
  if (!v2)
  {
    uint64_t v3 = *(uint64_t (**)(void))(v1[4] + 128LL);
    if (!v3)
    {
LABEL_5:
      uint64_t v2 = 0LL;
      goto LABEL_6;
    }

    uint64_t v2 = sub_1000B7C78(v3);
    if (v0)
    {
      sub_10000AD70();
      goto LABEL_5;
    }
  }

uint64_t sub_100099018()
{
  *(void *)(v0 + 72) = v1;
  return sub_10000E998();
}

uint64_t sub_100099078()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void **)(v2 + 176);
  *(void *)(v0 + 80) = v4;
  uint64_t v5 = (void *)swift_task_alloc(48LL);
  *(void *)(v0 + 88) = v5;
  uint64_t v5[2] = v2;
  v5[3] = v3;
  v5[4] = v1;
  v4;
  uint64_t v6 = (void *)sub_10001BFD0();
  *(void *)(v0 + 96) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100099118;
  return sub_1000537CC(*(void *)(v0 + 16), *(_BYTE *)(v0 + 112), (uint64_t)&unk_1001338D0, (uint64_t)v5);
}

uint64_t sub_100099118()
{
  *(void *)(v0 + 104) = v1;
  swift_task_dealloc(v3);
  if (!v1)
  {

    sub_10000AF6C();
  }

  return sub_10004BEA0();
}

uint64_t sub_100099178()
{
  uint64_t v1 = *(void *)(v0 + 48);
  sub_1000B7FBC();
  sub_1000389DC();
  sub_1000B66A8(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1000B7D48();
  return sub_1000B6688(v2, v3, v4);
}

uint64_t sub_1000991E0()
{
  uint64_t v0 = (uint64_t (*)(void))sub_1000681B8();
  return sub_10000C914(v0);
}

uint64_t sub_10009920C()
{
  sub_10000AF6C();
  sub_10000EA88();
  return sub_10000E998();
}

uint64_t sub_100099240()
{
  uint64_t v1 = *(void *)(v0 + 48);
  sub_1000B7FBC();
  sub_1000389DC();
  sub_1000B66A8(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1000B7D48();
  return sub_1000B6688(v2, v3, v4);
}

uint64_t sub_1000992A8()
{
  return sub_10000C914(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000992D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[55] = a2;
  v3[56] = a3;
  v3[54] = a1;
  uint64_t v5 = sub_100008DB0(&qword_100130BC0);
  v3[57] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10009933C, a1, 0LL);
}

uint64_t sub_10009933C()
{
  v0[58] = 0LL;
  sub_10000EA88();
  return sub_1000B62D8(v1, v2, v3);
}

uint64_t sub_10009939C()
{
  if (qword_100130330 != -1) {
    swift_once(&qword_100130330, sub_100091538);
  }
  uint64_t v2 = sub_10000E918();
  uint64_t v3 = (os_log_s *)sub_100008D98(v2, (uint64_t)qword_100135860);
  v0[59] = v3;
  uint64_t v4 = sub_1000B7658();
  sub_10001AFE4(v4, v5);
  sub_10006801C();
  os_log_type_t v6 = sub_1000B7880();
  if (sub_1000B6588(v6))
  {
    uint64_t v7 = (uint8_t *)sub_10000AE10(12LL);
    uint64_t v13 = sub_10000AE10(32LL);
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v8 = sub_1000B6A98(v0 + 25);
    v0[53] = sub_1000B8058(v8, v9, v10, v11);
    sub_1000B7294((uint64_t)(v0 + 53), (uint64_t)(v0 + 54), (uint64_t)(v7 + 4));
    sub_10000ADB0();
    sub_1000B7900();
    sub_10000AF5C((void *)&_mh_execute_header, v3, v1, "Registering %s in the metadata store", v7);
    sub_10000AF48(v13);
    sub_10000AD78(v13);
    sub_10000AD78((uint64_t)v7);
  }

  else
  {
    sub_1000B7900();
  }

  return sub_1000B68C0((uint64_t)sub_1000994E4, v0[54], 0LL);
}

uint64_t sub_1000994E4()
{
  os_log_type_t v1 = *(void **)(*(void *)(v0 + 432) + 176LL);
  *(void *)(v0 + 480) = v1;
  id v2 = v1;
  sub_10000EA88();
  return sub_10000E998();
}

uint64_t sub_10009951C()
{
  uint64_t v2 = *(void *)(v0 + 456);
  uint64_t v1 = *(void *)(v0 + 464);
  uint64_t v3 = *(void **)(v0 + 440);
  uint64_t v4 = sub_1000B65A0(v3);
  os_log_type_t v6 = v5;
  uint64_t v8 = v3[3];
  uint64_t v7 = v3[4];
  sub_100008D74(v3, v8);
  (*(void (**)(uint64_t))(*(void *)(v7 + 8) + 16LL))(v8);
  uint64_t v10 = v3[3];
  uint64_t v9 = v3[4];
  sub_100008D74(v3, v10);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)(v9 + 8) + 24LL))(v10);
  unint64_t v13 = v12;
  uint64_t v14 = sub_100008D74(v3, v3[3]);
  uint64_t v15 = sub_1000B7214();
  uint64_t v16 = *(void *)(v0 + 104);
  unint64_t v17 = *(void *)(v0 + 32);
  char v18 = *((_BYTE *)v14 + *(int *)(v15 + 36));
  __int128 v19 = *(_OWORD *)(v0 + 40);
  uint64_t v20 = *(void *)(v0 + 56);
  unint64_t v21 = *(void *)(v0 + 64);
  *(void *)(v0 + 488) = v17;
  *(void *)(v0 + 496) = v21;
  sub_100055030( v4,  v6,  v2,  v11,  v13,  v18,  v16,  v17,  v19,  *((uint64_t *)&v19 + 1),  v20,  v21,  *(void *)(v0 + 72),  *(void *)(v0 + 80),  *(void *)(v0 + 88),  *(void *)(v0 + 96),  *(void *)(v0 + 120),  *(void *)(v0 + 128),  *(void *)(v0 + 136),  *(void *)(v0 + 144));
  *(void *)(v0 + 504) = v1;
  if (v1)
  {
    uint64_t v22 = *(void **)(v0 + 480);
    sub_1000B7EC8();
    sub_10001198C();

    uint64_t v23 = sub_1000B4BD8((void *)(v0 + 16));
    sub_1000B7F7C((uint64_t)v23, &qword_100130BC0);
    sub_1000B7850();
    uint64_t v24 = (uint64_t (*)(void))sub_1000680E4();
    return v24();
  }

  else
  {
    char v26 = *(void **)(v0 + 480);
    uint64_t v27 = *(void *)(v0 + 432);
    sub_1000B7EC8();
    sub_10001198C();

    sub_1000B7650(v28, &qword_100130BC0);
    return sub_1000B6C04((uint64_t)sub_1000996BC, v27, 0LL);
  }

uint64_t sub_1000996BC()
{
  *(void *)(v0 + 51sub_100096760(v0[56], v0 + 2) = *(void *)(*(void *)(v0 + 432) + 184LL);
  swift_retain();
  sub_10000EA88();
  return sub_10000E998();
}

uint64_t sub_1000996F4()
{
  uint64_t v1 = sub_10000C7FC();
  *(void *)(v0 + 520) = sub_100028058(v1, "sharedVocabulary");
  *(void *)(v0 + 528) = sub_10008D7E0();
  sub_1000389DC();
  return sub_10000AE28();
}

uint64_t sub_100099764()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 432) + 176LL);
  *(void *)(v0 + 536) = v1;
  id v2 = v1;
  sub_10000EA88();
  return sub_10000E998();
}

#error "100099874: call analysis failed (funcsize=122)"
uint64_t sub_10009999C()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v1 = *(void **)(*(void *)(v0 + 432) + 176LL);
  *(void *)(v0 + 568) = v1;
  id v2 = v1;
  sub_10000EA88();
  return sub_10000E998();
}

uint64_t sub_1000999D4()
{
  uint64_t v1 = v0[70];
  uint64_t v2 = sub_1000B65A0((void *)v0[55]);
  uint64_t v4 = (os_log_s *)v3;
  sub_100052F48(v2, v3);
  v0[72] = v5;
  if (v1)
  {
    os_log_type_t v6 = (void *)v0[71];
    uint64_t v7 = v0[69];
    uint64_t v8 = (void *)v0[65];
    sub_10001198C();

    sub_100084A44();
    sub_10001DF40();
    sub_10001BEC0();
    sub_10000AEE8();
    sub_1000B4BD8(v0 + 2);
    sub_1000B7828();
    sub_10000ADF4();
    uint64_t v9 = sub_10000ADF4();
    Logger.logObject.getter(v9);
    os_log_type_t v10 = sub_100027FB0();
    if (sub_1000B6588(v10))
    {
      uint64_t v11 = sub_10000AE10(22LL);
      uint64_t v54 = sub_10000AE10(64LL);
      *(_DWORD *)uint64_t v11 = 136315394;
      uint64_t v12 = sub_1000B6A98(v0 + 30);
      uint64_t v17 = sub_1000B7820(v12, v13, v14, v15, v16);
      sub_1000B70A4(v17, v18, v19, v20, v21, v22, v23, v24, (uint64_t)(v0 + 46));
      sub_10000ADB0();
      sub_10000AC58(v0 + 30);
      *(_WORD *)(v11 + 1sub_100096760(v0[56], v0 + 2) = 2080;
      v0[47] = v1;
      sub_10000ADF4();
      uint64_t v25 = sub_100008DB0(&qword_100130620);
      uint64_t v26 = sub_1000B7DBC(v25);
      uint64_t v31 = sub_1000B7820(v26, v27, v28, v29, v30);
      sub_1000B71FC(v31, v32, v33, v34, v35, v36, v37, v38, v51, (uint64_t)(v0 + 48));
      sub_10001BE7C();
      sub_10000AD70();
      sub_10000AD70();
      sub_1000B6348(v39, v40, v41, v42, v43, v44, v45, v46, v52, v53, v54);
      sub_10000AD78(v11 + 14);
      sub_10000AD78(v11);

      sub_10000AD70();
    }

    else
    {
      sub_10000AD70();
      sub_10000AC58(v0 + 30);
      sub_10000AD70();
      sub_10000AD70();
    }

    v0[75] = 0LL;
    return sub_1000B6C20((uint64_t)sub_100099DD8, v0[54], 0LL);
  }

  else
  {
    uint64_t v47 = v5;
    unint64_t v48 = (void *)v0[71];
    sub_10001198C();

    unint64_t v49 = (void *)swift_task_alloc(dword_10013052C);
    v0[73] = v49;
    *unint64_t v49 = v0;
    v49[1] = sub_100099C0C;
    return sub_100004290(v0[55], v0[69], v0[68], v47, v0[61], v0[64], v0[65], v0[66]);
  }

uint64_t sub_100099C0C()
{
  *(void *)(v1 + 59sub_100096760(v0[56], v0 + 2) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease();
  if (v0)
  {
    sub_10001198C();
    sub_10000ADB0();
  }

  else
  {
    sub_100011958();
    sub_10001198C();
    sub_1000B4BD8((void *)(v1 + 16));
  }

  sub_10000EA88();
  return swift_task_switch(v4, v5, v6);
}

uint64_t sub_100099CA4()
{
  uint64_t v13 = v0[74];
  if (qword_100130150 != -1) {
    swift_once(&qword_100130150, sub_100038C14);
  }
  uint64_t v1 = (void *)v0[65];
  uint64_t v2 = (void *)v0[55];
  uint64_t v3 = v2[4];
  sub_100008D74(v2, v2[3]);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(v3 + 8) + 8LL);
  swift_retain();
  uint64_t v5 = sub_1000B7958();
  uint64_t v6 = v4(v5);
  uint64_t v8 = v7;
  uint64_t v9 = sub_100008DB0((uint64_t *)&unk_100132130);
  uint64_t inited = swift_initStackObject(v9, v0 + 19);
  *(_OWORD *)(inited + 16) = xmmword_1000F5520;
  *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = v6;
  *(void *)(inited + 40) = v8;
  sub_10001BCF8();
  sub_1000663F4(inited);
  sub_1000648AC(v11);
  sub_10000AEE8();
  sub_10001BEC0();
  swift_release();
  sub_10001BB08();

  sub_10001198C();
  v0[75] = v13;
  return swift_task_switch(sub_100099DD8, v0[54], 0LL);
}

uint64_t sub_100099DD8()
{
  *(void *)(v0 + 608) = *(void *)(*(void *)(v0 + 432) + 192LL);
  swift_retain();
  sub_10000EA88();
  return sub_10000E998();
}

uint64_t sub_100099E10()
{
  *(void *)(v0 + 616) = sub_1000B6AE0(*(void **)(v0 + 440));
  *(void *)(v0 + 624) = v1;
  return sub_10000AE28();
}

uint64_t sub_100099E58()
{
  uint64_t v1 = *(void *)(v0 + 600);
  sub_100040284(*(void *)(v0 + 616), *(void **)(v0 + 624), 0x53555F6E65LL, 0xE500000000000000LL);
  *(void *)(v0 + 63sub_100096760(v0[56], v0 + 2) = v1;
  swift_bridgeObjectRelease();
  if (v1)
  {
    sub_1000389DC();
    sub_10000EA88();
    return sub_10000AE28();
  }

  else
  {
    sub_10000ADB0();
    sub_100047164();
    sub_1000B7850();
    uint64_t v3 = (uint64_t (*)(void))sub_1000681B8();
    return sub_100067BC8(v3);
  }

uint64_t sub_100099EE8()
{
  uint64_t v1 = (os_log_s *)v0[55];
  sub_1000B4BD8(v0 + 2);
  sub_1000B6F78();
  Logger.logObject.getter(v2);
  os_log_type_t v3 = sub_100027FB0();
  if (os_log_type_enabled(v1, v3))
  {
    uint64_t v4 = (uint8_t *)sub_10000AE10(12LL);
    uint64_t v21 = sub_10000AE10(32LL);
    *(_DWORD *)uint64_t v4 = 136315138;
    sub_100008D74(v0 + 40, v0[43]);
    uint64_t v5 = sub_1000B75F4();
    v0[52] = sub_1000B8058(v5, v6, v7, v8);
    sub_1000B7B94((uint64_t)(v0 + 52), (uint64_t)(v0 + 53), (uint64_t)(v4 + 4));
    sub_10000ADB0();
    sub_1000B7900();
    sub_10000AF5C( (void *)&_mh_execute_header,  v1,  v3,  "AutoShortcutsDonator failed to donate App Shortcuts to Siri Vocabulary and server for %s",  v4);
    sub_10000AF48(v21);
    sub_10000AD78(v21);
    sub_10000AD78((uint64_t)v4);
    swift_errorRelease();
  }

  else
  {
    swift_errorRelease();
    sub_1000B7900();
  }

  if (qword_100130150 != -1) {
    swift_once(&qword_100130150, sub_100038C14);
  }
  uint64_t v9 = (void *)v0[65];
  os_log_type_t v10 = (void *)v0[55];
  uint64_t v11 = v10[4];
  sub_100008D74(v10, v10[3]);
  uint64_t v12 = *(uint64_t (**)(uint64_t))(*(void *)(v11 + 8) + 8LL);
  sub_100047360();
  uint64_t v13 = sub_1000B7958();
  uint64_t v14 = v12(v13);
  uint64_t v16 = v15;
  uint64_t v17 = sub_100008DB0((uint64_t *)&unk_100132130);
  uint64_t inited = swift_initStackObject(v17, v0 + 19);
  *(_OWORD *)(inited + 16) = xmmword_1000F5520;
  *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = v14;
  *(void *)(inited + 40) = v16;
  sub_10001BCF8();
  sub_1000663F4(inited);
  sub_1000648AC(v19);
  sub_10001BE7C();

  sub_10001BB08();
  sub_100047164();
  sub_10001BEC0();
  sub_10000AEE8();
  v0[75] = 0LL;
  return sub_1000B68C0((uint64_t)sub_100099DD8, v0[54], 0LL);
}

uint64_t sub_10009A0EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, uint64_t a24)
{
  a23 = v26;
  a24 = v27;
  a22 = v24;
  uint64_t v28 = (os_log_s *)v24[79];
  sub_1000B7CF0(v24[55]);
  sub_10004BF04();
  uint64_t v29 = sub_10004BF04();
  Logger.logObject.getter(v29);
  os_log_type_t v30 = sub_100027FB0();
  if (sub_1000B6588(v30))
  {
    uint64_t v31 = v24[79];
    uint64_t v32 = sub_10000AE10(22LL);
    uint64_t v33 = sub_10000AE10(64LL);
    a13 = v33;
    *(_DWORD *)uint64_t v32 = 136315394;
    sub_100008D74(v24 + 35, v24[38]);
    uint64_t v34 = sub_1000B75F4();
    v24[51] = sub_10000DE60(v34, v35, &a13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v24 + 51, v24 + 52, v32 + 4, v32 + 12);
    sub_10000ADB0();
    sub_10000AC58(v24 + 35);
    *(_WORD *)(v32 + 1sub_100096760(v0[56], v0 + 2) = 2080;
    v24[50] = v31;
    sub_10000ADF4();
    uint64_t v36 = sub_100008DB0(&qword_100130620);
    uint64_t v37 = String.init<A>(describing:)(v24 + 50, v36);
    v24[45] = sub_10000DE60(v37, v38, &a13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v24 + 45, v24 + 46, v32 + 14, v32 + 22);
    sub_10001DF40();
    sub_10000AD70();
    sub_10000AD70();
    sub_1000B64BC(v33);
    sub_10000AD78(v33);
    sub_10000AD78(v32);

    sub_10000AD70();
  }

  else
  {
    sub_100059344();
    sub_10000AC58(v24 + 35);
    sub_100059344();
    sub_100059344();
  }

  sub_1000B7850();
  uint64_t v39 = (uint64_t (*)(void))sub_1000681B8();
  return sub_1000B6C3C(v39);
}

id sub_10009A290@<X0>(void **a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v6 = a2[3];
  uint64_t v5 = a2[4];
  sub_100008D74(a2, v6);
  *a3 = (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 8) + 8LL))(v6);
  a3[1] = v7;
  a3[2] = v4;
  return v4;
}

uint64_t sub_10009A2F8(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10009A35C, v2, 0LL);
}

uint64_t sub_10009A35C(double a1)
{
  return sub_10000E998();
}

uint64_t sub_10009A38C()
{
  v0[8] = v1;
  uint64_t v2 = (uint64_t **)swift_task_alloc(dword_1001338C4);
  v0[9] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = (uint64_t *)sub_10009A408;
  return sub_10009A584((uint64_t)v2, v0[2], v0[3], v0[4]);
}

uint64_t sub_10009A408()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 72LL);
  *(void *)(*(void *)v1 + 8_swift_stdlib_reportUnimplementedInitializer("LinkDaemon.Registry", 19LL, "init()", 6LL, 0LL) = v0;
  swift_task_dealloc(v2);
  sub_10000EA88();
  return sub_10000E998();
}

uint64_t sub_10009A460()
{
  uint64_t v1 = *(void *)(v0 + 48);
  sub_1000B7FB0();
  sub_1000389DC();
  sub_1000B66A8(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1000B7D48();
  return sub_1000B6688(v2, v3, v4);
}

uint64_t sub_10009A4C8()
{
  uint64_t v1 = (uint64_t (*)(void))sub_1000681B8();
  return sub_10000C914(v1);
}

uint64_t sub_10009A4F0()
{
  uint64_t v1 = *(void *)(v0 + 48);
  sub_1000B7FB0();
  sub_1000389DC();
  sub_1000B66A8(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1000B7D48();
  return sub_1000B6688(v2, v3, v4);
}

uint64_t sub_10009A558()
{
  return sub_10000C914(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10009A584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[10] = a3;
  v4[11] = a4;
  void v4[9] = a2;
  return swift_task_switch(sub_10009A5A0, a4, 0LL);
}

uint64_t sub_10009A5A0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22)
{
  a21 = v23;
  a22 = v24;
  a20 = v22;
  if (qword_100130330 != -1) {
    swift_once(&qword_100130330, sub_100091538);
  }
  os_log_type_t v25 = (os_log_s *)v22[10];
  uint64_t v26 = sub_10000E918();
  os_log_type_t v27 = sub_100008D98(v26, (uint64_t)qword_100135860);
  sub_100011A3C((uint64_t)v25);
  sub_10006801C();
  os_log_type_t v28 = sub_100041BDC();
  BOOL v29 = sub_100068360(v28);
  uint64_t v30 = v22[10];
  if (v29)
  {
    uint64_t v31 = v22[9];
    uint64_t v32 = (uint8_t *)sub_10000AE10(12LL);
    uint64_t v33 = sub_10000AE10(32LL);
    a10 = v33;
    *(_DWORD *)uint64_t v32 = 136315138;
    sub_10001C064();
    v22[8] = sub_1000B7470(v31, v34, &a10);
    sub_1000B7B94((uint64_t)(v22 + 8), (uint64_t)(v22 + 9), (uint64_t)(v32 + 4));
    sub_100027E5C(v30);
    sub_10000AF5C((void *)&_mh_execute_header, v25, v27, "Attempting to unregister %s from the metadata store", v32);
    sub_10000AF48(v33);
    sub_10000AD78(v33);
    sub_10000AD78((uint64_t)v32);
  }

  else
  {

    sub_10001191C(v30);
  }

  id v35 = *(id *)(v22[11] + 176LL);
  sub_1000B7E80();
  sub_100056A44();
  v22[12] = 0LL;
  uint64_t v36 = v22[11];

  v22[13] = *(void *)(v36 + 184);
  objc_opt_self(&OBJC_CLASS____INVocabulary);
  uint64_t v37 = sub_10000C7FC();
  v22[14] = sub_10003F9CC(v37, "sharedVocabulary");
  v22[15] = sub_10008D7E0();
  sub_10000EA88();
  return sub_1000B68C0(v38, v39, v40);
}

uint64_t sub_10009A77C()
{
  uint64_t v1 = *(void *)(v0 + 96);
  sub_1000039C8( *(void *)(v0 + 72),  *(void *)(v0 + 80),  8LL,  *(void *)(v0 + 104),  *(void **)(v0 + 112),  *(void *)(v0 + 120));
  if (v1)
  {
    *(void *)(v0 + 128) = v1;
    uint64_t v2 = *(void *)(v0 + 88);
    uint64_t v3 = sub_10009A8D4;
  }

  else
  {
    sub_1000039C8( *(void *)(v0 + 72),  *(void *)(v0 + 80),  18LL,  *(void *)(v0 + 104),  *(void **)(v0 + 112),  *(void *)(v0 + 120));
    uint64_t v5 = *(void *)(v0 + 88);
    sub_100003C54();
    uint64_t v3 = sub_10009A808;
    uint64_t v2 = v5;
  }

  return sub_1000B62D8((uint64_t)v3, v2, 0LL);
}

uint64_t sub_10009A808()
{
  if (qword_100130150 != -1) {
    swift_once(&qword_100130150, sub_100038C14);
  }
  uint64_t v1 = (void *)v0[14];
  uint64_t v3 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v4 = sub_100008DB0((uint64_t *)&unk_100132130);
  uint64_t inited = swift_initStackObject(v4, v0 + 2);
  *(_OWORD *)(inited + 16) = xmmword_1000F5520;
  *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = v3;
  *(void *)(inited + 40) = v2;
  sub_10001C064();
  swift_retain();
  sub_1000663F4(inited);
  sub_1000648AC(v6);
  sub_10001BE7C();
  sub_100068168();
  sub_10001BB08();

  sub_10001198C();
  uint64_t v7 = (uint64_t (*)(void))sub_1000681B8();
  return sub_1000B6AC8(v7);
}

uint64_t sub_10009A8D4()
{
  uint64_t v1 = *(void **)(v0 + 112);
  swift_release();

  sub_10000ADB0();
  return sub_10000EA08(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10009A910(uint64_t a1, unint64_t a2)
{
  unint64_t v10 = a2;
  uint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static OSSignpostID.exclusive.getter(v6);
  sub_10008F878();
  sub_10009AA20(v2, a1, v10);
  sub_1000AE918();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

void sub_10009AA20(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = type metadata accessor for RegistryError(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Data.Iterator(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v14 = *(id *)(a1 + 176);
  sub_100053514();
  if (v3)
  {

    if (qword_100130330 != -1) {
      swift_once(&qword_100130330, sub_100091538);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    sub_100008D98(v15, (uint64_t)qword_100135860);
    swift_errorRetain(v3);
    uint64_t v16 = swift_errorRetain(v3);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v20 = swift_slowAlloc(32LL, -1LL);
      uint64_t v51 = v20;
      *(_DWORD *)uint64_t v19 = 136315138;
      *(void *)&__int128 v48 = v19 + 4;
      sub_10009206C();
      sub_100092208();
      uint64_t v22 = v21;
      unint64_t v24 = v23;
      sub_100058D54((uint64_t)v9, type metadata accessor for RegistryError);
      uint64_t v53 = sub_10000DE60(v22, v24, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v48, v19 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "Error updating the metadata store last seen version: %s",  v19,  0xCu);
      swift_arrayDestroy(v20, 1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);

      swift_errorRelease(v3);
    }

    else
    {
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      swift_errorRelease(v3);
    }
  }

  else
  {

    *(_BYTE *)(a1 + 144) = 0;
    if (qword_100130330 != -1) {
      swift_once(&qword_100130330, sub_100091538);
    }
    uint64_t v25 = type metadata accessor for Logger(0LL);
    sub_100008D98(v25, (uint64_t)qword_100135860);
    sub_10000A280(a2, a3);
    uint64_t v26 = sub_10000A280(a2, a3);
    os_log_type_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    int v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, (os_log_type_t)v28))
    {
      int v42 = v28;
      uint64_t v44 = v11;
      os_log_t v45 = v27;
      BOOL v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v41 = swift_slowAlloc(32LL, -1LL);
      uint64_t v53 = v41;
      uint64_t v43 = v29;
      *(_DWORD *)BOOL v29 = 136315138;
      uint64_t v51 = 0LL;
      unint64_t v52 = 0xE000000000000000LL;
      sub_10000A280(a2, a3);
      Data.makeIterator()(a2, a3);
      uint64_t v46 = a2;
      unint64_t v47 = a3;
      sub_10000A1D8(a2, a3);
      sub_100067940(&qword_100133358, (uint64_t (*)(uint64_t))&type metadata accessor for Data.Iterator);
      uint64_t v31 = v30;
      dispatch thunk of IteratorProtocol.next()(v10, v30);
      if ((v50 & 1) == 0)
      {
        __int128 v48 = xmmword_1000F5520;
        do
        {
          char v32 = v49;
          uint64_t v33 = sub_100008DB0(&qword_100133360);
          uint64_t v34 = swift_allocObject(v33, 72LL, 7LL);
          *(_OWORD *)(v34 + 16) = v48;
          *(void *)(v34 + 56) = &type metadata for UInt8;
          *(void *)(v34 + 64) = &protocol witness table for UInt8;
          *(_BYTE *)(v34 + 3sub_100096760(v0[56], v0 + 2) = v32;
          v35._uint64_t countAndFlagsBits = String.init(format:_:)(0x786868323025LL, 0xE600000000000000LL);
          String.append(_:)(v35);
          swift_bridgeObjectRelease();
          dispatch thunk of IteratorProtocol.next()(v10, v31);
        }

        while (v50 != 1);
      }

      uint64_t v36 = v43;
      (*(void (**)(char *, uint64_t))(v44 + 8))(v13, v10);
      uint64_t v51 = sub_10000DE60(v51, v52, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v36 + 4, v36 + 12);
      swift_bridgeObjectRelease();
      uint64_t v38 = v46;
      unint64_t v37 = v47;
      sub_10000A1D8(v46, v47);
      sub_10000A1D8(v38, v37);
      os_log_type_t v27 = v45;
      _os_log_impl( (void *)&_mh_execute_header,  v45,  (os_log_type_t)v42,  "Updated metadata store last seen version to: %s",  v36,  0xCu);
      uint64_t v39 = v41;
      swift_arrayDestroy(v41, 1LL);
      swift_slowDealloc(v39, -1LL, -1LL);
      swift_slowDealloc(v36, -1LL, -1LL);
    }

    else
    {
      sub_10000A1D8(a2, a3);
      sub_10000A1D8(a2, a3);
    }
  }

uint64_t sub_10009AF88()
{
  swift_release();
  swift_release();
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_10009AFE4()
{
  uint64_t v0 = sub_10009AF88();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for Registry.IndexingQueue()
{
  return objc_opt_self(&OBJC_CLASS____TtCC10LinkDaemon8RegistryP33_C46A68FC02810268DC26B23770B1528113IndexingQueue);
}

uint64_t sub_10009B01C()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
  qword_100135878 = result;
  unk_100135880 = v1;
  return result;
}

uint64_t *sub_10009B048()
{
  if (qword_100130338 != -1) {
    swift_once(&qword_100130338, sub_10009B01C);
  }
  return &qword_100135878;
}

void sub_10009B088()
{
  uint64_t v4 = (char *)sub_10009B0E4 + 4 * byte_1000F6F90[sub_1000B7DC8()];
  __asm { BR              X10 }

uint64_t sub_10009B0E4(uint64_t a1)
{
  return 9001LL;
}

void sub_10009B154()
{
  uint64_t v2 = v1;
  sub_1000B6C88();
  sub_100011A24();
  __chkstk_darwin(v3);
  sub_1000B6A6C();
  uint64_t v20 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  sub_100092208();
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  uint64_t v19 = &type metadata for String;
  v18[0] = v5;
  v18[1] = v7;
  sub_1000B7370(v8, v9, v8, v9);
  sub_100084214(v2, (uint64_t)v0, type metadata accessor for RegistryError);
  uint64_t v10 = sub_1000B7DC8();
  if ((_DWORD)v10 == 3)
  {
    v18[0] = *v0;
    uint64_t v11 = sub_100008DB0(&qword_100130620);
    sub_1000B67F8(v11, &qword_1001332E0, &OBJC_CLASS___NSError_ptr);
    uint64_t v13 = v12;
    if ((swift_dynamicCast(&v17, v18, v11, v12, 6LL) & 1) != 0)
    {
      uint64_t v14 = v17;
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
      uint64_t v19 = v13;
      v18[0] = v14;
      sub_1000B7370(v15, v16, v15, v16);
    }
  }

  else
  {
    sub_1000B71A4(v10, type metadata accessor for RegistryError);
  }

  sub_10001BE4C();
}

uint64_t sub_10009B2A4()
{
  uint64_t v0 = qword_100135878;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_10009B2E4(uint64_t a1)
{
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10009B324(uint64_t a1)
{
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10009B364()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(LNDaemonRegistryService);
  qword_100135888 = result;
  unk_100135890 = v1;
  return result;
}

void sub_10009B390()
{
  if (qword_100130340 != -1) {
    swift_once(&qword_100130340, sub_10009B364);
  }
  sub_10000AE38();
  sub_10000AF9C();
  sub_10000ADA8();
}

void sub_10009B3E0(void *a1@<X8>)
{
  id v3 = sub_1000B047C(v1, (uint64_t)sub_10009B43C, 0LL);
  a1[3] = sub_100008DB0(&qword_100131808);
  *a1 = v3;
  sub_10000AF74();
}

uint64_t sub_10009B43C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_100008DB0(&qword_100131780);
  double v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = Selector.description.getter("resetWithReply:", v7);
  if (v10 == a1 && v11 == a2) {
    return swift_bridgeObjectRelease();
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v10, v11, 0LL);
  uint64_t result = swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
    uint64_t v15 = type metadata accessor for TaskPriority(0LL);
    sub_100009E60((uint64_t)v9, 1LL, 1LL, v15);
    uint64_t v16 = (void *)swift_allocObject(&unk_100125940, 40LL, 7LL);
    v16[2] = 0LL;
    v16[3] = 0LL;
    v16[4] = a3;
    id v17 = a3;
    sub_10000D1F0((uint64_t)v9, (uint64_t)&unk_100133330, (uint64_t)v16);
    return swift_release();
  }

  return result;
}

uint64_t sub_10009B564()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10013333C);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000E8DC;
  return sub_1000933F8();
}

uint64_t sub_10009B5AC()
{
  uint64_t v41 = v3;
  uint64_t v42 = v4;
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for RegistryError(0LL);
  sub_100011A24();
  __chkstk_darwin(v8);
  uint64_t v9 = sub_1000B6980();
  uint64_t v10 = type metadata accessor for Logger(v9);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_1000B7544();
  sub_10009B8E0(v12);
  if ((v13 & 1) == 0)
  {
    uint64_t v37 = v7;
    sub_10004D8B0();
    uint64_t v14 = qword_100130330;
    id v15 = v0;
    if (v14 != -1) {
      swift_once(&qword_100130330, sub_100091538);
    }
    uint64_t v16 = sub_100008D98(v10, (uint64_t)qword_100135860);
    uint64_t v17 = v11;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v1, v16, v10);

    sub_10001BCF8();
    id v18 = v6;
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc(28LL, -1LL);
      uint64_t v35 = swift_slowAlloc(64LL, -1LL);
      uint64_t v40 = v35;
      *(_DWORD *)uint64_t v21 = 136315650;
      os_log_type_t v34 = v20;
      uint64_t v36 = v17;
      sub_10001BCF8();
      uint64_t v22 = sub_10001BF00();
      uint64_t v38 = sub_10000DE60(v22, v23, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v21 + 4, v21 + 12);
      sub_1000B7F40();
      sub_10000ADB0();
      *(_WORD *)(v21 + 1sub_100096760(v0[56], v0 + 2) = 1024;
      unsigned int v25 = [v18 processIdentifier];

      LODWORD(v38) = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, (char *)&v38 + 4, v21 + 14, v21 + 18);

      *(_WORD *)(v21 + 18) = 2080;
      swift_storeEnumTagMultiPayload(v2, v37, 5LL);
      sub_100092208();
      uint64_t v27 = v26;
      unint64_t v29 = v28;
      sub_100058D54(v2, type metadata accessor for RegistryError);
      uint64_t v38 = sub_10000DE60(v27, v29, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v21 + 20, v21 + 28);
      sub_10001DF40();
      _os_log_impl( (void *)&_mh_execute_header,  v19,  v34,  "%s with PID %d needs access to Registry: %s",  (uint8_t *)v21,  0x1Cu);
      swift_arrayDestroy(v35, 2LL);
      sub_10000AD78(v35);
      sub_10000AD78(v21);

      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v1, v10);
    }

    else
    {

      sub_1000B7F40();
      uint64_t v30 = sub_1000B75D4();
      v32(v30, v31);
    }
  }

  [v6 resume];
  return 1LL;
}

void sub_10009B8E0(uint64_t a1)
{
  Class isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
  sub_10004DE24(0xD000000000000018LL, 0x80000001000FAAC0LL, isa);

  sub_10000AF74();
}

void sub_10009B950(char *a1, void (**a2)(void, void, void))
{
  uint64_t v4 = sub_100008DB0(&qword_100131780);
  __chkstk_darwin(v4);
  uint64_t v90 = (uint64_t)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v92 = v6;
  uint64_t v93 = v7;
  __chkstk_darwin(v6);
  uint64_t v91 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for String.Encoding(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100008DB0(&qword_100130BC0);
  __chkstk_darwin(v13);
  id v15 = (char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for URL(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v89 = (char *)&v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v88 = (char *)&v82 - v20;
  __chkstk_darwin(v21);
  uint64_t v94 = (char *)&v82 - v22;
  __chkstk_darwin(v23);
  char v95 = (char *)&v82 - v24;
  uint64_t v96 = swift_allocObject(&unk_100125F78, 24LL, 7LL);
  *(void *)(v96 + 16) = a2;
  unsigned int v25 = (void *)objc_opt_self(&OBJC_CLASS___NSXPCConnection);
  _Block_copy(a2);
  id v26 = [v25 currentConnection];
  if (!v26) {
    goto LABEL_4;
  }
  uint64_t v27 = v26;
  id v87 = a1;
  uint64_t v28 = *(void *)&a1[OBJC_IVAR____TtC10LinkDaemon8Registry_store] + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_URL;
  swift_beginAccess(v28, v99, 0LL, 0LL);
  sub_100026CB8(v28, (uint64_t)v15, &qword_100130BC0);
  if (sub_100009E6C((uint64_t)v15, 1LL, v16) == 1)
  {

    sub_100026E14((uint64_t)v15, &qword_100130BC0);
LABEL_4:
    uint64_t v29 = type metadata accessor for RegistryError(0LL);
    sub_100067940((unint64_t *)&unk_1001332D0, type metadata accessor for RegistryError);
    uint64_t v31 = swift_allocError(v29, v30, 0LL, 0LL);
    swift_storeEnumTagMultiPayload(v32, v29, 4LL);
    uint64_t v33 = (void *)_convertErrorToNSError(_:)(v31);
    ((void (**)(void, void, void *))a2)[2](a2, 0LL, v33);

    swift_errorRelease(v31);
    goto LABEL_7;
  }

  uint64_t v34 = v17;
  uint64_t v35 = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 32))(v95, v15, v16);
  uint64_t v36 = (uint64_t)v94;
  URL.deletingLastPathComponent()(v35);
  uint64_t v37 = sub_10004DA14(v36, 0);
  uint64_t v39 = v38;
  static String.Encoding.utf8.getter();
  uint64_t v86 = String.data(using:allowLossyConversion:)(v12, 0LL, v37, v39);
  unint64_t v41 = v40;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (v41 >> 60 == 15)
  {
    uint64_t v42 = type metadata accessor for RegistryError(0LL);
    sub_100067940((unint64_t *)&unk_1001332D0, type metadata accessor for RegistryError);
    uint64_t v44 = swift_allocError(v42, v43, 0LL, 0LL);
    swift_storeEnumTagMultiPayload(v45, v42, 4LL);
    uint64_t v46 = (void *)_convertErrorToNSError(_:)(v44);
    ((void (**)(void, void, void *))a2)[2](a2, 0LL, v46);

    swift_errorRelease(v44);
    unint64_t v47 = *(void (**)(char *, uint64_t))(v34 + 8);
    v47(v94, v16);
    v47(v95, v16);
  }

  else
  {
    uint64_t v48 = qword_100130330;
    id v49 = v87;
    if (v48 != -1) {
      swift_once(&qword_100130330, sub_100091538);
    }
    uint64_t v50 = v92;
    uint64_t v51 = sub_100008D98(v92, (uint64_t)qword_100135860);
    unint64_t v52 = v91;
    (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))(v91, v51, v50);
    id v84 = v49;

    uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
    uint64_t v54 = v88;
    uint64_t v55 = v16;
    v53(v88, v94, v16);
    id v87 = v27;
    uint64_t v56 = (os_log_s *)Logger.logObject.getter(v87);
    os_log_type_t v57 = static os_log_type_t.default.getter();
    BOOL v58 = os_log_type_enabled(v56, v57);
    unint64_t v85 = v41;
    if (v58)
    {
      uint64_t v59 = swift_slowAlloc(18LL, -1LL);
      uint64_t v60 = swift_slowAlloc(32LL, -1LL);
      v98[0] = v60;
      *(_DWORD *)uint64_t v59 = 67240450;
      uint64_t v83 = v53;
      id v61 = v87;
      LODWORD(v97) = [v87 processIdentifier];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, (char *)&v97 + 4, v59 + 4, v59 + 8);

      *(_WORD *)(v59 + 8) = 2080;
      sub_100067940( (unint64_t *)&qword_100131820,  (uint64_t (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter(v55, v62);
      uint64_t v97 = sub_10000DE60(v63, v64, v98);
      uint64_t v53 = v83;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98, v59 + 10, v59 + 18);
      swift_bridgeObjectRelease();
      uint64_t v88 = *(char **)(v34 + 8);
      ((void (*)(char *, uint64_t))v88)(v54, v55);
      _os_log_impl( (void *)&_mh_execute_header,  v56,  v57,  "Granting %{public}d read access to %s",  (uint8_t *)v59,  0x12u);
      swift_arrayDestroy(v60, 1LL);
      swift_slowDealloc(v60, -1LL, -1LL);
      swift_slowDealloc(v59, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v93 + 8))(v91, v92);
    }

    else
    {

      uint64_t v88 = *(char **)(v34 + 8);
      ((void (*)(char *, uint64_t))v88)(v54, v55);

      (*(void (**)(char *, uint64_t))(v93 + 8))(v52, v50);
    }

    v53(v89, v95, v55);
    id v65 = objc_allocWithZone(&OBJC_CLASS___NSSecurityScopedURLWrapper);
    unint64_t v67 = v85;
    uint64_t v66 = v86;
    sub_10000A280(v86, v85);
    sub_1000B03E4();
    uint64_t v69 = v68;
    uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNWaitForDatabaseReadyEntitlement);
    uint64_t v71 = v55;
    id v72 = v87;
    char v74 = sub_10004DE24(v70, v73, 0LL);
    swift_bridgeObjectRelease();
    uint64_t v75 = type metadata accessor for TaskPriority(0LL);
    uint64_t v76 = v90;
    sub_100009E60(v90, 1LL, 1LL, v75);
    uint64_t v77 = swift_allocObject(&unk_100125FA0, 72LL, 7LL);
    *(void *)(v77 + 16) = 0LL;
    *(void *)(v77 + 24) = 0LL;
    *(_BYTE *)(v77 + 3sub_100096760(v0[56], v0 + 2) = v74 & 1;
    uint64_t v78 = v84;
    *(void *)(v77 + 40) = v84;
    *(void *)(v77 + 48) = sub_1000B4AB0;
    *(void *)(v77 + 56) = v96;
    *(void *)(v77 + 64) = v69;
    id v79 = v78;
    swift_retain();
    id v80 = v69;
    sub_10000D1F0(v76, (uint64_t)&unk_1001338B0, v77);

    swift_release();
    sub_10000A21C(v66, v67);

    uint64_t v81 = (void (*)(char *, uint64_t))v88;
    ((void (*)(char *, uint64_t))v88)(v94, v71);
    v81(v95, v71);
  }

uint64_t sub_10009C13C( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 3sub_100096760(v0[56], v0 + 2) = a7;
  *(void *)(v8 + 40) = a8;
  *(void *)(v8 + 16) = a5;
  *(void *)(v8 + 24) = a6;
  *(_BYTE *)(v8 + 64) = a4;
  return swift_task_switch(sub_10009C15C, 0LL, 0LL);
}

uint64_t sub_10009C15C()
{
  if (*(_BYTE *)(v0 + 64) == 1
    && (uint64_t v1 = *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC10LinkDaemon8Registry_ready),
        (*(void *)(v0 + 48) = v1) != 0LL))
  {
    sub_10000C7FC();
    uint64_t v2 = (void *)sub_10001BFD0();
    *(void *)(v0 + 56) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10009C1E0;
    sub_1000B6EE8();
    return sub_1000B6ABC();
  }

  else
  {
    sub_1000B7794();
    return sub_10000EA08(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_10009C1E0()
{
  return sub_10000E998();
}

uint64_t sub_10009C220()
{
  return sub_10000C914(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10009C294()
{
  *(void *)(v1 + 16) = v0;
  return sub_100067ABC((uint64_t)sub_10009C2A4);
}

uint64_t sub_10009C2A4()
{
  id v1 = sub_1000B6D00();
  id v2 = sub_100011ABC((uint64_t)v1, "currentConnection");
  sub_1000B72E4((uint64_t)v2);
  uint64_t v3 = (void *)swift_task_alloc(dword_1001338A4);
  *(void *)(v0 + 3sub_100096760(v0[56], v0 + 2) = v3;
  void *v3 = v0;
  v3[1] = sub_10008FCC8;
  uint64_t v4 = sub_1000B62A8();
  return sub_10009F58C(v4, v5, v6, v7, v8);
}

uint64_t sub_10009C318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  v7[11] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[12] = v9;
  v7[13] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for RegistryError(0LL);
  v7[14] = v10;
  unint64_t v11 = (*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[15] = swift_task_alloc(v11);
  v7[16] = swift_task_alloc(v11);
  return swift_task_switch(sub_10009C3B8, 0LL, 0LL);
}

#error "10009C50C: call analysis failed (funcsize=140)"
uint64_t sub_10009C61C()
{
  uint64_t v0;
  sub_10000E8E4(*(void *)(*(void *)v0 + 144LL));
  sub_1000389DC();
  sub_10000EA88();
  return sub_10000E998();
}

#error "10009C73C: call analysis failed (funcsize=112)"
uint64_t sub_10009C84C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  v7[11] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[12] = v9;
  v7[13] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for RegistryError(0LL);
  v7[14] = v10;
  unint64_t v11 = (*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[15] = swift_task_alloc(v11);
  v7[16] = swift_task_alloc(v11);
  return swift_task_switch(sub_10009C8EC, 0LL, 0LL);
}

#error "10009CA40: call analysis failed (funcsize=140)"
uint64_t sub_10009CB50()
{
  uint64_t v0;
  sub_10000E8E4(*(void *)(*(void *)v0 + 144LL));
  sub_1000389DC();
  sub_10000EA88();
  return sub_10000E998();
}

#error "10009CC70: call analysis failed (funcsize=112)"
uint64_t sub_10009CD80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  v7[11] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[12] = v9;
  v7[13] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for RegistryError(0LL);
  v7[14] = v10;
  unint64_t v11 = (*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[15] = swift_task_alloc(v11);
  v7[16] = swift_task_alloc(v11);
  return swift_task_switch(sub_10009CE20, 0LL, 0LL);
}

#error "10009CF74: call analysis failed (funcsize=140)"
uint64_t sub_10009D084()
{
  uint64_t v0;
  sub_10000E8E4(*(void *)(*(void *)v0 + 144LL));
  sub_1000389DC();
  sub_10000EA88();
  return sub_10000E998();
}

#error "10009D1A4: call analysis failed (funcsize=112)"
uint64_t sub_10009D2B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  v5[7] = a4;
  v5[8] = a5;
  void v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  v5[9] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[10] = v7;
  v5[11] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for RegistryError(0LL);
  v5[12] = v8;
  uint64_t v9 = (*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[13] = swift_task_alloc(v9);
  v5[14] = swift_task_alloc(v9);
  return swift_task_switch(sub_10009D350, 0LL, 0LL);
}

#error "10009D49C: call analysis failed (funcsize=136)"
uint64_t sub_10009D5A4()
{
  uint64_t v0;
  sub_10000E8E4(*(void *)(*(void *)v0 + 128LL));
  sub_1000389DC();
  sub_10000EA88();
  return sub_10000E998();
}

#error "10009D6BC: call analysis failed (funcsize=108)"
uint64_t sub_10009D7C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  v7[11] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[12] = v9;
  v7[13] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for RegistryError(0LL);
  v7[14] = v10;
  unint64_t v11 = (*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[15] = swift_task_alloc(v11);
  v7[16] = swift_task_alloc(v11);
  return swift_task_switch(sub_10009D864, 0LL, 0LL);
}

#error "10009D9C8: call analysis failed (funcsize=154)"
uint64_t sub_10009DB00()
{
  uint64_t v0;
  sub_10000E8E4(*(void *)(*(void *)v0 + 144LL));
  sub_1000389DC();
  sub_10000EA88();
  return sub_10000E998();
}

#error "10009DC30: call analysis failed (funcsize=126)"
uint64_t sub_10009DD68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  v7[11] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[12] = v9;
  v7[13] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for RegistryError(0LL);
  v7[14] = v10;
  unint64_t v11 = (*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[15] = swift_task_alloc(v11);
  v7[16] = swift_task_alloc(v11);
  return swift_task_switch(sub_10009DE08, 0LL, 0LL);
}

#error "10009DF6C: call analysis failed (funcsize=154)"
uint64_t sub_10009E0A4()
{
  uint64_t v0;
  sub_10000E8E4(*(void *)(*(void *)v0 + 144LL));
  sub_1000389DC();
  sub_10000EA88();
  return sub_10000E998();
}

#error "10009E1D4: call analysis failed (funcsize=126)"
uint64_t sub_10009E30C( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  v8[10] = a8;
  v8[11] = v14;
  v8[8] = a6;
  v8[9] = a7;
  v8[6] = a4;
  v8[7] = a5;
  v8[4] = a2;
  v8[5] = a3;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  v8[12] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[13] = v10;
  v8[14] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = type metadata accessor for RegistryError(0LL);
  v8[15] = v11;
  uint64_t v12 = (*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[16] = swift_task_alloc(v12);
  v8[17] = swift_task_alloc(v12);
  return swift_task_switch(sub_10009E3B0, 0LL, 0LL);
}

#error "10009E514: call analysis failed (funcsize=149)"
uint64_t sub_10009E634()
{
  uint64_t v0;
  sub_10000E8E4(*(void *)(*(void *)v0 + 152LL));
  sub_1000389DC();
  sub_10000EA88();
  return sub_10000E998();
}

#error "10009E760: call analysis failed (funcsize=120)"
uint64_t sub_10009E880( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  *(_BYTE *)(v8 + 176) = a8;
  *(void *)(v8 + 80) = a7;
  *(void *)(v8 + 88) = v14;
  *(void *)(v8 + 64) = a5;
  *(void *)(v8 + 7sub_100096760(v0[56], v0 + 2) = a6;
  *(void *)(v8 + 48) = a3;
  *(void *)(v8 + 56) = a4;
  *(void *)(v8 + 3sub_100096760(v0[56], v0 + 2) = a1;
  *(void *)(v8 + 40) = a2;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  *(void *)(v8 + 96) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 104) = v10;
  *(void *)(v8 + 11sub_100096760(v0[56], v0 + 2) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = type metadata accessor for RegistryError(0LL);
  *(void *)(v8 + 120) = v11;
  uint64_t v12 = (*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v8 + 128) = swift_task_alloc(v12);
  *(void *)(v8 + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = swift_task_alloc(v12);
  return swift_task_switch(sub_10009E928, 0LL, 0LL);
}

uint64_t sub_10009E928()
{
  id v1 = (void *)v0[5];
  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNWaitForDatabaseReadyEntitlement);
    sub_1000B64CC();
    char v2 = sub_1000B63D0();
    sub_100011958();
    if ((v2 & 1) != 0)
    {
      uint64_t v3 = *(void *)(v0[8] + OBJC_IVAR____TtC10LinkDaemon8Registry_ready);
      v0[18] = v3;
      if (v3)
      {
        sub_100047360();
        uint64_t v4 = (void *)sub_10000AF64();
        sub_1000B7B88(v4, (uint64_t)sub_10009E9F8);
        sub_100068080();
        return sub_1000B64D8();
      }
    }
  }

  uint64_t v6 = swift_task_alloc(dword_100133464);
  uint64_t v7 = (void *)sub_1000B7B08(v6);
  *uint64_t v7 = v0;
  v7[1] = sub_10009EA88;
  uint64_t v8 = sub_1000B6B34();
  return sub_1000AC048(v8, v9, v10, v11, v12);
}

uint64_t sub_10009E9F8()
{
  return sub_10000E998();
}

uint64_t sub_10009EA38()
{
  uint64_t v1 = swift_task_alloc(dword_100133464);
  char v2 = (void *)sub_1000B7B08(v1);
  *char v2 = v0;
  v2[1] = sub_10009EA88;
  uint64_t v3 = sub_1000B6B34();
  return sub_1000AC048(v3, v4, v5, v6, v7);
}

uint64_t sub_10009EA88()
{
  return sub_10000E998();
}

uint64_t sub_10009EAC4()
{
  uint64_t v1 = *(void **)(v0 + 88);
  swift_bridgeObjectRelease();

  sub_10000AF6C();
  sub_10000AFA8();
  sub_10004D844();
  char v2 = (uint64_t (*)(void))sub_1000681B8();
  return sub_10000EA08(v2);
}

#error "10009EBCC: call analysis failed (funcsize=109)"
uint64_t sub_10009ECF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  v6[8] = a5;
  v6[9] = a6;
  v6[6] = a3;
  v6[7] = a4;
  v6[4] = a1;
  v6[5] = a2;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  v6[10] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[11] = v8;
  v6[12] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for RegistryError(0LL);
  v6[13] = v9;
  uint64_t v10 = (*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v6[14] = swift_task_alloc(v10);
  v6[15] = swift_task_alloc(v10);
  return swift_task_switch(sub_10009ED8C, 0LL, 0LL);
}

uint64_t sub_10009ED8C()
{
  uint64_t v1 = (void *)v0[5];
  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNWaitForDatabaseReadyEntitlement);
    sub_1000B64CC();
    char v2 = sub_1000B63D0();
    sub_100011958();
    if ((v2 & 1) != 0)
    {
      uint64_t v3 = *(void *)(v0[8] + OBJC_IVAR____TtC10LinkDaemon8Registry_ready);
      v0[16] = v3;
      if (v3)
      {
        sub_100047360();
        uint64_t v4 = (void *)sub_10000AF64();
        v0[17] = v4;
        *uint64_t v4 = v0;
        v4[1] = sub_10009EE58;
        sub_100068080();
        return sub_1000B64D8();
      }
    }
  }

  uint64_t v6 = swift_task_alloc(dword_10013343C);
  uint64_t v7 = (void *)sub_1000B7B20(v6);
  *uint64_t v7 = v0;
  v7[1] = sub_10009EEE0;
  uint64_t v8 = sub_1000B6B34();
  return sub_1000AD3F0(v8, v9);
}

uint64_t sub_10009EE58()
{
  return sub_10000E998();
}

uint64_t sub_10009EE98()
{
  uint64_t v1 = swift_task_alloc(dword_10013343C);
  char v2 = (void *)sub_1000B7B20(v1);
  *char v2 = v0;
  v2[1] = sub_10009EEE0;
  uint64_t v3 = sub_1000B6B34();
  return sub_1000AD3F0(v3, v4);
}

uint64_t sub_10009EEE0()
{
  return sub_10000E998();
}

uint64_t sub_10009EF1C()
{
  uint64_t v0 = (uint64_t (*)(void))sub_1000681B8();
  return sub_100067BC8(v0);
}

#error "10009F018: call analysis failed (funcsize=104)"
uint64_t sub_10009F128( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  v8[10] = a7;
  v8[11] = a8;
  v8[8] = a5;
  v8[9] = a6;
  v8[6] = a3;
  v8[7] = a4;
  v8[4] = a1;
  v8[5] = a2;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  v8[12] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[13] = v10;
  v8[14] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  char v11 = type metadata accessor for RegistryError(0LL);
  v8[15] = v11;
  uint64_t v12 = (*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[16] = swift_task_alloc(v12);
  v8[17] = swift_task_alloc(v12);
  return swift_task_switch(sub_10009F1C8, 0LL, 0LL);
}

uint64_t sub_10009F1C8()
{
  uint64_t v1 = (void *)v0[5];
  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNWaitForDatabaseReadyEntitlement);
    sub_1000B64CC();
    char v2 = sub_1000B63D0();
    sub_100011958();
    if ((v2 & 1) != 0)
    {
      uint64_t v3 = *(void *)(v0[8] + OBJC_IVAR____TtC10LinkDaemon8Registry_ready);
      v0[18] = v3;
      if (v3)
      {
        sub_100047360();
        uint64_t v4 = (void *)sub_10000AF64();
        sub_1000B7B88(v4, (uint64_t)sub_10009F294);
        sub_100068080();
        return sub_1000B64D8();
      }
    }
  }

  uint64_t v6 = swift_task_alloc(dword_1001333F4);
  uint64_t v7 = (void *)sub_1000B7B08(v6);
  *uint64_t v7 = v0;
  v7[1] = sub_10009F320;
  uint64_t v8 = sub_1000B6B34();
  return sub_1000ADBA8(v8, v9, v10, v11);
}

uint64_t sub_10009F294()
{
  return sub_10000E998();
}

uint64_t sub_10009F2D4()
{
  uint64_t v1 = swift_task_alloc(dword_1001333F4);
  char v2 = (void *)sub_1000B7B08(v1);
  *char v2 = v0;
  v2[1] = sub_10009F320;
  uint64_t v3 = sub_1000B6B34();
  return sub_1000ADBA8(v3, v4, v5, v6);
}

uint64_t sub_10009F320()
{
  return sub_10000E998();
}

uint64_t sub_10009F35C()
{
  uint64_t v0 = (uint64_t (*)(void))sub_1000681B8();
  return sub_10000EA08(v0);
}

#error "10009F464: call analysis failed (funcsize=110)"
uint64_t sub_10009F58C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  v5[7] = a4;
  v5[8] = a5;
  void v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  v5[9] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[10] = v7;
  v5[11] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for RegistryError(0LL);
  v5[12] = v8;
  uint64_t v9 = (*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[13] = swift_task_alloc(v9);
  v5[14] = swift_task_alloc(v9);
  return swift_task_switch(sub_10009F628, 0LL, 0LL);
}

#error "10009F774: call analysis failed (funcsize=136)"
uint64_t sub_10009F87C()
{
  uint64_t v0;
  sub_10000E8E4(*(void *)(*(void *)v0 + 128LL));
  sub_1000389DC();
  sub_10000EA88();
  return sub_10000E998();
}

#error "10009F994: call analysis failed (funcsize=108)"
uint64_t sub_10009FA9C( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  v8[11] = a8;
  v8[12] = v14;
  v8[9] = a6;
  v8[10] = a7;
  v8[7] = a4;
  v8[8] = a5;
  v8[5] = a2;
  v8[6] = a3;
  v8[4] = a1;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  v8[13] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[14] = v10;
  v8[15] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for RegistryError(0LL);
  v8[16] = v11;
  uint64_t v12 = (*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[17] = swift_task_alloc(v12);
  v8[18] = swift_task_alloc(v12);
  return swift_task_switch(sub_10009FB44, 0LL, 0LL);
}

#error "10009FCA0: call analysis failed (funcsize=143)"
uint64_t sub_10009FDB0()
{
  uint64_t v0;
  sub_10000E8E4(*(void *)(*(void *)v0 + 160LL));
  sub_1000389DC();
  sub_10000EA88();
  return sub_10000E998();
}

#error "10009FED8: call analysis failed (funcsize=115)"
uint64_t sub_10009FFE8( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  v8[11] = a8;
  v8[12] = v14;
  v8[9] = a6;
  v8[10] = a7;
  v8[7] = a4;
  v8[8] = a5;
  v8[5] = a2;
  v8[6] = a3;
  v8[4] = a1;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  v8[13] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[14] = v10;
  v8[15] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for RegistryError(0LL);
  v8[16] = v11;
  uint64_t v12 = (*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[17] = swift_task_alloc(v12);
  v8[18] = swift_task_alloc(v12);
  return swift_task_switch(sub_1000A0090, 0LL, 0LL);
}

#error "1000A01EC: call analysis failed (funcsize=151)"
uint64_t sub_1000A031C()
{
  uint64_t v0;
  sub_10000E8E4(*(void *)(*(void *)v0 + 160LL));
  sub_1000389DC();
  sub_10000EA88();
  return sub_10000E998();
}

#error "1000A0444: call analysis failed (funcsize=123)"
uint64_t sub_1000A0574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  v6[8] = a5;
  v6[9] = a6;
  v6[6] = a3;
  v6[7] = a4;
  v6[4] = a1;
  v6[5] = a2;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  v6[10] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[11] = v8;
  v6[12] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for RegistryError(0LL);
  v6[13] = v9;
  uint64_t v10 = (*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v6[14] = swift_task_alloc(v10);
  v6[15] = swift_task_alloc(v10);
  return swift_task_switch(sub_1000A0610, 0LL, 0LL);
}

#error "1000A0770: call analysis failed (funcsize=145)"
uint64_t sub_1000A0888()
{
  uint64_t v0;
  sub_10000E8E4(*(void *)(*(void *)v0 + 136LL));
  sub_1000389DC();
  sub_10000EA88();
  return sub_10000E998();
}

#error "1000A09AC: call analysis failed (funcsize=115)"
uint64_t sub_1000A0AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  v7[11] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[12] = v9;
  v7[13] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for RegistryError(0LL);
  v7[14] = v10;
  uint64_t v11 = (*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[15] = swift_task_alloc(v11);
  v7[16] = swift_task_alloc(v11);
  return swift_task_switch(sub_1000A0B64, 0LL, 0LL);
}

#error "1000A0CC8: call analysis failed (funcsize=154)"
uint64_t sub_1000A0E00()
{
  uint64_t v0;
  sub_10000E8E4(*(void *)(*(void *)v0 + 144LL));
  sub_1000389DC();
  sub_10000EA88();
  return sub_10000E998();
}

#error "1000A0F30: call analysis failed (funcsize=126)"
uint64_t sub_1000A1068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  v5[7] = a4;
  v5[8] = a5;
  void v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  v5[9] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[10] = v7;
  v5[11] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for RegistryError(0LL);
  v5[12] = v8;
  uint64_t v9 = (*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[13] = swift_task_alloc(v9);
  v5[14] = swift_task_alloc(v9);
  return swift_task_switch(sub_1000A1104, 0LL, 0LL);
}

#error "1000A1250: call analysis failed (funcsize=136)"
uint64_t sub_1000A1358()
{
  uint64_t v0;
  sub_10000E8E4(*(void *)(*(void *)v0 + 128LL));
  sub_1000389DC();
  sub_10000EA88();
  return sub_10000E998();
}

#error "1000A1470: call analysis failed (funcsize=108)"
uint64_t sub_1000A1578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  v5[7] = a4;
  v5[8] = a5;
  void v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  v5[9] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[10] = v7;
  v5[11] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for RegistryError(0LL);
  v5[12] = v8;
  uint64_t v9 = (*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[13] = swift_task_alloc(v9);
  v5[14] = swift_task_alloc(v9);
  return swift_task_switch(sub_1000A1614, 0LL, 0LL);
}

#error "1000A1760: call analysis failed (funcsize=136)"
uint64_t sub_1000A1868()
{
  uint64_t v0;
  sub_10000E8E4(*(void *)(*(void *)v0 + 128LL));
  sub_1000389DC();
  sub_10000EA88();
  return sub_10000E998();
}

#error "1000A1980: call analysis failed (funcsize=108)"
uint64_t sub_1000A1A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  v5[7] = a4;
  v5[8] = a5;
  void v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  v5[9] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[10] = v7;
  v5[11] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for RegistryError(0LL);
  v5[12] = v8;
  uint64_t v9 = (*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[13] = swift_task_alloc(v9);
  v5[14] = swift_task_alloc(v9);
  return swift_task_switch(sub_1000A1B24, 0LL, 0LL);
}

#error "1000A1C70: call analysis failed (funcsize=136)"
uint64_t sub_1000A1D78()
{
  uint64_t v0;
  sub_10000E8E4(*(void *)(*(void *)v0 + 128LL));
  sub_1000389DC();
  sub_10000EA88();
  return sub_10000E998();
}

#error "1000A1E90: call analysis failed (funcsize=108)"
uint64_t sub_1000A1F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  v7[11] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[12] = v9;
  v7[13] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for RegistryError(0LL);
  v7[14] = v10;
  uint64_t v11 = (*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[15] = swift_task_alloc(v11);
  v7[16] = swift_task_alloc(v11);
  return swift_task_switch(sub_1000A2038, 0LL, 0LL);
}

#error "1000A218C: call analysis failed (funcsize=140)"
uint64_t sub_1000A229C()
{
  uint64_t v0;
  sub_10000E8E4(*(void *)(*(void *)v0 + 144LL));
  sub_1000389DC();
  sub_10000EA88();
  return sub_10000E998();
}

#error "1000A23BC: call analysis failed (funcsize=112)"
uint64_t sub_1000A24CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  v5[7] = a4;
  v5[8] = a5;
  void v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  v5[9] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[10] = v7;
  v5[11] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for RegistryError(0LL);
  v5[12] = v8;
  uint64_t v9 = (*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[13] = swift_task_alloc(v9);
  v5[14] = swift_task_alloc(v9);
  return swift_task_switch(sub_1000A2568, 0LL, 0LL);
}

#error "1000A26B4: call analysis failed (funcsize=136)"
uint64_t sub_1000A27BC()
{
  uint64_t v0;
  sub_10000E8E4(*(void *)(*(void *)v0 + 128LL));
  sub_1000389DC();
  sub_10000EA88();
  return sub_10000E998();
}

#error "1000A28D4: call analysis failed (funcsize=108)"
uint64_t sub_1000A29DC( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  v8[11] = a8;
  v8[12] = v14;
  v8[9] = a6;
  v8[10] = a7;
  v8[7] = a4;
  v8[8] = a5;
  v8[5] = a2;
  v8[6] = a3;
  v8[4] = a1;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  v8[13] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[14] = v10;
  v8[15] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for RegistryError(0LL);
  v8[16] = v11;
  uint64_t v12 = (*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[17] = swift_task_alloc(v12);
  v8[18] = swift_task_alloc(v12);
  return swift_task_switch(sub_1000A2A84, 0LL, 0LL);
}

#error "1000A2BE0: call analysis failed (funcsize=148)"
uint64_t sub_1000A2D04()
{
  uint64_t v0;
  sub_10000E8E4(*(void *)(*(void *)v0 + 160LL));
  sub_1000389DC();
  sub_10000EA88();
  return sub_10000E998();
}

#error "1000A2E2C: call analysis failed (funcsize=120)"
uint64_t sub_1000A2F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  v7[10] = a6;
  v7[11] = a7;
  v7[8] = a4;
  v7[9] = a5;
  v7[6] = a2;
  v7[7] = a3;
  v7[5] = a1;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  v7[12] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[13] = v9;
  v7[14] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for RegistryError(0LL);
  v7[15] = v10;
  uint64_t v11 = (*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[16] = swift_task_alloc(v11);
  v7[17] = swift_task_alloc(v11);
  return swift_task_switch(sub_1000A301C, 0LL, 0LL);
}

#error "1000A3244: call analysis failed (funcsize=214)"
uint64_t sub_1000A33A8()
{
  uint64_t v0;
  sub_10000E8E4(*(void *)(*(void *)v0 + 152LL));
  sub_1000389DC();
  sub_10000EA88();
  return sub_10000E998();
}

#error "1000A35A8: call analysis failed (funcsize=181)"
uint64_t sub_1000A3718( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  v8[12] = a8;
  v8[13] = v14;
  v8[10] = a6;
  v8[11] = a7;
  v8[8] = a4;
  v8[9] = a5;
  v8[6] = a2;
  v8[7] = a3;
  v8[5] = a1;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  v8[14] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[15] = v10;
  v8[16] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for RegistryError(0LL);
  v8[17] = v11;
  uint64_t v12 = (*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[18] = swift_task_alloc(v12);
  v8[19] = swift_task_alloc(v12);
  return swift_task_switch(sub_1000A37C0, 0LL, 0LL);
}

uint64_t sub_1000A37C0()
{
  uint64_t v1 = (void *)v0[5];
  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNWaitForDatabaseReadyEntitlement);
    sub_1000B64CC();
    char v2 = sub_1000B63D0();
    sub_100011958();
    if ((v2 & 1) != 0)
    {
      uint64_t v3 = *(void *)(v0[8] + OBJC_IVAR____TtC10LinkDaemon8Registry_ready);
      v0[20] = v3;
      if (v3)
      {
        sub_100047360();
        uint64_t v4 = (void *)sub_10000AF64();
        v0[21] = v4;
        *uint64_t v4 = v0;
        v4[1] = sub_1000A389C;
        sub_100068080();
        return sub_1000B64D8();
      }
    }
  }

  uint64_t v6 = (void *)swift_task_alloc(dword_1001335D4);
  v0[22] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1000A392C;
  uint64_t v7 = sub_1000B7064();
  return sub_1000A89B4(v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1000A389C()
{
  return sub_10000E998();
}

uint64_t sub_1000A38D4()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1001335D4);
  *(void *)(v0 + 176) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000A392C;
  uint64_t v2 = sub_1000B7064();
  return sub_1000A89B4(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1000A392C()
{
  uint64_t v3 = *(void *)(v2 + 176);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 184) = v0;
  swift_task_dealloc(v3);
  sub_10000EA88();
  return sub_10000E998();
}

uint64_t sub_1000A397C()
{
  uint64_t v1 = *(void **)(v0 + 88);
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v0 + 16);

  sub_10001BE7C();
  sub_10000AF6C();
  sub_10000AFA8();
  sub_10004D844();
  return sub_1000B6D48(v2, *(uint64_t (**)(void))(v0 + 8));
}

#error "1000A3AB4: call analysis failed (funcsize=119)"
uint64_t sub_1000A3BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  v6[9] = a5;
  v6[10] = v5;
  v6[7] = a3;
  v6[8] = a4;
  v6[5] = a1;
  v6[6] = a2;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  v6[11] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[12] = v8;
  v6[13] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for RegistryError(0LL);
  v6[14] = v9;
  uint64_t v10 = (*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v6[15] = swift_task_alloc(v10);
  v6[16] = swift_task_alloc(v10);
  return swift_task_switch(sub_1000A3C84, 0LL, 0LL);
}

uint64_t sub_1000A3C84()
{
  uint64_t v1 = *(void **)(v0 + 40);
  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNWaitForDatabaseReadyEntitlement);
    sub_1000B64CC();
    uint64_t v2 = sub_1000B63D0();
    sub_100011958();
    if ((v2 & 1) != 0)
    {
      sub_1000B6BC4(*(void *)(v0 + 80));
      if (v2)
      {
        sub_100047360();
        uint64_t v3 = (void *)sub_10000AF64();
        sub_1000B6BB8(v3, (uint64_t)sub_1000A3D44);
        sub_100068080();
        return sub_1000B64D8();
      }
    }
  }

  uint64_t v5 = sub_1000B7DE0();
  uint64_t v10 = v6;
  uint64_t v7 = swift_task_alloc(v5);
  uint64_t v8 = (void *)sub_1000B7B14(v7);
  uint64_t v9 = sub_1000B7AF4(v8);
  return sub_1000B7148(v9, v10);
}

uint64_t sub_1000A3D44()
{
  return sub_10000E998();
}

uint64_t sub_1000A3D84()
{
  uint64_t v0 = sub_1000B7DE0();
  uint64_t v6 = v1;
  uint64_t v2 = swift_task_alloc(v0);
  uint64_t v3 = (void *)sub_1000B7B14(v2);
  uint64_t v4 = sub_1000B7AF4(v3);
  return sub_1000B7148(v4, v6);
}

uint64_t sub_1000A3DCC()
{
  return sub_10000E998();
}

uint64_t sub_1000A3E08()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_task_dealloc(*(void *)(v0 + 128));
  sub_10000AF6C();
  sub_10000AFA8();
  return sub_1000B6338(v1, *(uint64_t (**)(void))(v0 + 8));
}

#error "1000A3F18: call analysis failed (funcsize=109)"
uint64_t sub_1000A402C( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  v8[11] = a8;
  v8[12] = v14;
  v8[9] = a6;
  v8[10] = a7;
  v8[7] = a4;
  v8[8] = a5;
  v8[5] = a2;
  v8[6] = a3;
  v8[4] = a1;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  v8[13] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[14] = v10;
  v8[15] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for RegistryError(0LL);
  v8[16] = v11;
  uint64_t v12 = (*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[17] = swift_task_alloc(v12);
  v8[18] = swift_task_alloc(v12);
  return swift_task_switch(sub_1000A40D4, 0LL, 0LL);
}

uint64_t sub_1000A40D4()
{
  uint64_t v1 = (void *)v0[4];
  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNWaitForDatabaseReadyEntitlement);
    sub_1000B64CC();
    uint64_t v2 = sub_1000B63D0();
    sub_100011958();
    if ((v2 & 1) != 0)
    {
      sub_1000B7C04(v0[7]);
      if (v2)
      {
        sub_100047360();
        uint64_t v3 = (void *)sub_10000AF64();
        sub_1000B8028(v3, (uint64_t)sub_1000A418C);
        sub_100068080();
        return sub_1000B64D8();
      }
    }
  }

  v0[21] = *(void *)(v0[8] + OBJC_IVAR____TtC10LinkDaemon8Registry_appShortcutInterpolator);
  return sub_10000AE28();
}

uint64_t sub_1000A418C()
{
  return sub_10000E998();
}

uint64_t sub_1000A41CC()
{
  *(void *)(v0 + 168) = *(void *)(*(void *)(v0 + 64)
                                    + OBJC_IVAR____TtC10LinkDaemon8Registry_appShortcutInterpolator);
  return sub_10000E998();
}

uint64_t sub_1000A420C()
{
  v0[22] = (uint64_t)sub_10001ECD4(v0[9], v0[10], v0[11], v0[12]);
  v0[23] = 0LL;
  sub_10000EA88();
  return sub_1000B62D8(v1, v2, v3);
}

uint64_t sub_1000A4264()
{
  uint64_t v1 = *(void **)(v0 + 64);
  uint64_t v2 = sub_10003F290(1000LL, *(void *)(v0 + 176));
  sub_10000ADB0();

  sub_10001BEC0();
  sub_10000AEE8();
  sub_10000AFA8();
  sub_10004D844();
  sub_10004D858();
  return sub_1000B6D48((uint64_t)v2, *(uint64_t (**)(void))(v0 + 8));
}

#error "1000A43C4: call analysis failed (funcsize=121)"
uint64_t sub_1000A44FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  v7[11] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[12] = v9;
  v7[13] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for RegistryError(0LL);
  v7[14] = v10;
  uint64_t v11 = (*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[15] = swift_task_alloc(v11);
  v7[16] = swift_task_alloc(v11);
  return swift_task_switch(sub_1000A459C, 0LL, 0LL);
}

uint64_t sub_1000A459C()
{
  uint64_t v1 = (void *)v0[4];
  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNWaitForDatabaseReadyEntitlement);
    sub_1000B64CC();
    uint64_t v2 = sub_1000B63D0();
    sub_100011958();
    if ((v2 & 1) != 0)
    {
      sub_1000B6BC4(v0[7]);
      if (v2)
      {
        sub_100047360();
        uint64_t v3 = (void *)sub_10000AF64();
        sub_1000B6BB8(v3, (uint64_t)sub_1000A4654);
        sub_100068080();
        return sub_1000B64D8();
      }
    }
  }

  v0[19] = *(void *)(v0[8] + OBJC_IVAR____TtC10LinkDaemon8Registry_appShortcutInterpolator);
  return sub_10000AE28();
}

uint64_t sub_1000A4654()
{
  return sub_10000E998();
}

uint64_t sub_1000A4694()
{
  *(void *)(v0 + 15sub_100096760(v0[56], v0 + 2) = *(void *)(*(void *)(v0 + 64)
                                    + OBJC_IVAR____TtC10LinkDaemon8Registry_appShortcutInterpolator);
  return sub_10000E998();
}

uint64_t sub_1000A46D4()
{
  v0[20] = v1;
  v0[21] = 0LL;
  sub_10000EA88();
  return sub_1000B62D8(v2, v3, v4);
}

uint64_t sub_1000A4728( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = *(void **)(v10 + 64);
  sub_1000B1020(*(void *)(v10 + 160));
  sub_10000ADB0();

  sub_10001BEC0();
  sub_10000AFA8();
  sub_10004D858();
  sub_10004D884();
  sub_1000B7110();
  return v13(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

#error "1000A4870: call analysis failed (funcsize=117)"
uint64_t sub_1000A4998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  v6[9] = a5;
  v6[10] = a6;
  v6[7] = a3;
  v6[8] = a4;
  v6[5] = a1;
  v6[6] = a2;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  v6[11] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[12] = v8;
  v6[13] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for RegistryError(0LL);
  v6[14] = v9;
  uint64_t v10 = (*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v6[15] = swift_task_alloc(v10);
  v6[16] = swift_task_alloc(v10);
  return swift_task_switch(sub_1000A4A34, 0LL, 0LL);
}

uint64_t sub_1000A4A34()
{
  uint64_t v1 = *(void **)(v0 + 40);
  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNWaitForDatabaseReadyEntitlement);
    sub_1000B64CC();
    uint64_t v2 = sub_1000B63D0();
    sub_100011958();
    if ((v2 & 1) != 0)
    {
      sub_1000B6BC4(*(void *)(v0 + 64));
      if (v2)
      {
        sub_100047360();
        uint64_t v3 = (void *)sub_10000AF64();
        sub_1000B6BB8(v3, (uint64_t)sub_1000A4AF8);
        sub_100068080();
        return sub_1000B64D8();
      }
    }
  }

  uint64_t v5 = swift_task_alloc(dword_1001334F4);
  uint64_t v6 = (void *)sub_1000B7B14(v5);
  uint64_t v7 = sub_1000B7AE0(v6);
  return sub_1000AB020(v7, v8, v9);
}

uint64_t sub_1000A4AF8()
{
  return sub_10000E998();
}

uint64_t sub_1000A4B38()
{
  uint64_t v0 = swift_task_alloc(dword_1001334F4);
  uint64_t v1 = (void *)sub_1000B7B14(v0);
  uint64_t v2 = sub_1000B7AE0(v1);
  return sub_1000AB020(v2, v3, v4);
}

uint64_t sub_1000A4B80()
{
  return sub_10000E998();
}

uint64_t sub_1000A4BBC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_10001BE7C();
  sub_10000AF6C();
  sub_10000AFA8();
  sub_10004D844();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

#error "1000A4CE4: call analysis failed (funcsize=112)"
uint64_t sub_1000A4E08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  v7[11] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[12] = v9;
  v7[13] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for RegistryError(0LL);
  v7[14] = v10;
  uint64_t v11 = (*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[15] = swift_task_alloc(v11);
  v7[16] = swift_task_alloc(v11);
  return swift_task_switch(sub_1000A4EA8, 0LL, 0LL);
}

#error "1000A4FE4: call analysis failed (funcsize=135)"
uint64_t sub_1000A50F4()
{
  uint64_t v0;
  sub_10000E8E4(*(void *)(*(void *)v0 + 144LL));
  sub_1000389DC();
  sub_10000EA88();
  return sub_10000E998();
}

#error "1000A51FC: call analysis failed (funcsize=107)"
uint64_t sub_1000A530C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  v5[8] = a4;
  v5[9] = a5;
  v5[6] = a2;
  v5[7] = a3;
  void v5[5] = a1;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  v5[10] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[11] = v7;
  v5[12] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for RegistryError(0LL);
  v5[13] = v8;
  uint64_t v9 = (*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[14] = swift_task_alloc(v9);
  v5[15] = swift_task_alloc(v9);
  return swift_task_switch(sub_1000A53A8, 0LL, 0LL);
}

uint64_t sub_1000A53A8()
{
  uint64_t v1 = (void *)v0[5];
  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNWaitForDatabaseReadyEntitlement);
    sub_1000B64CC();
    char v2 = sub_1000B63D0();
    sub_100011958();
    if ((v2 & 1) != 0)
    {
      uint64_t v3 = *(void *)(v0[8] + OBJC_IVAR____TtC10LinkDaemon8Registry_ready);
      v0[16] = v3;
      if (v3)
      {
        sub_100047360();
        uint64_t v4 = (void *)sub_10000AF64();
        v0[17] = v4;
        *uint64_t v4 = v0;
        v4[1] = sub_1000A5478;
        sub_100068080();
        return sub_1000B64D8();
      }
    }
  }

  uint64_t v6 = swift_task_alloc(dword_10013349C);
  uint64_t v7 = (void *)sub_1000B7B20(v6);
  *uint64_t v7 = v0;
  v7[1] = sub_1000A5504;
  uint64_t v8 = sub_1000B7064();
  return sub_1000AB7CC(v8, v9);
}

uint64_t sub_1000A5478()
{
  return sub_10000E998();
}

uint64_t sub_1000A54B8()
{
  uint64_t v1 = swift_task_alloc(dword_10013349C);
  char v2 = (void *)sub_1000B7B20(v1);
  *char v2 = v0;
  v2[1] = sub_1000A5504;
  uint64_t v3 = sub_1000B7064();
  return sub_1000AB7CC(v3, v4);
}

uint64_t sub_1000A5504()
{
  return sub_10000E998();
}

uint64_t sub_1000A5540()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_10000AF6C();
  sub_10000AFA8();
  sub_10004D844();
  return sub_1000B6D48(v1, *(uint64_t (**)(void))(v0 + 8));
}

#error "1000A564C: call analysis failed (funcsize=104)"
void __cdecl -[Registry actionsWithReply:](_TtC10LinkDaemon8Registry *self, SEL a2, id a3)
{
  sub_1000AD904(self, (int)a2, a3, (uint64_t)&unk_100125F50);
}

uint64_t sub_1000A5770(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_10013389C;
  a2;
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000A57D0;
  return sub_10009C294();
}

uint64_t sub_1000A57D0()
{
  uint64_t v5 = *v1;
  char v2 = *(void **)(v5 + 16);
  uint64_t v3 = *v1;
  sub_10004BEB8(*(void *)(v5 + 32), &v5);

  if (v0)
  {
    sub_1000680A0();
    sub_1000B650C();
    sub_1000B6BF8();
  }

  else
  {
    sub_100008DB0(&qword_100132480);
    sub_1000B6D08();
    sub_10000ADB0();
    sub_1000B6BEC();
  }

  sub_100067C94();

  sub_100067E10();
  return sub_10000EA08(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_1000A5878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  uint64_t v5[2] = a1;
  return sub_100067ABC((uint64_t)sub_1000A5890);
}

uint64_t sub_1000A5890()
{
  uint64_t v1 = sub_100056F04(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_1000A5904(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v10 = v9;
  void v4[4] = v9;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v13 = v12;
  v4[5] = v12;
  uint64_t v14 = dword_100133884;
  a4;
  uint64_t v15 = (void *)swift_task_alloc(v14);
  v4[6] = v15;
  *uint64_t v15 = v4;
  v15[1] = sub_1000A59B8;
  return sub_1000A5878(v8, v10, v11, v13);
}

uint64_t sub_1000A59B8()
{
  uint64_t v10 = v2;
  uint64_t v11 = v3;
  uint64_t v9 = v1;
  uint64_t v9 = (void *)*v1;
  uint64_t v4 = (void *)v9[4];
  uint64_t v5 = (void *)v9[2];
  uint64_t v6 = *v1;
  sub_10004BEB8(v9[6], &v9);

  sub_100011958();
  uint64_t v7 = sub_10001BE7C();
  if (v0)
  {
    sub_1000680A0();
    sub_1000B650C();
    sub_1000B6BF8();
  }

  else
  {
    sub_1000B67F8(v7, (unint64_t *)&unk_100132490, &OBJC_CLASS___LNActionMetadata_ptr);
    sub_1000B68FC();
    sub_10000ADB0();
    sub_1000B6BEC();
  }

  sub_100067C94();

  sub_100067E10();
  return sub_10000EA08(*(uint64_t (**)(void))(v6 + 8));
}

uint64_t sub_1000A5A64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  uint64_t v5[2] = a1;
  return sub_100067ABC((uint64_t)sub_1000A5A7C);
}

uint64_t sub_1000A5A7C()
{
  uint64_t v1 = *(void **)(v0 + 48);
  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___NSXPCConnection);
  sub_10000AE38();
  id v3 = v1;
  sub_10000AFB0();
  id v4 = sub_1000B7154(v2);
  sub_1000B796C((uint64_t)v4);
  uint64_t v5 = (void *)swift_task_alloc(dword_10013386C);
  *(void *)(v0 + 64) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1000A5B18;
  uint64_t v6 = sub_1000B62A8();
  return sub_10009FA9C(v6, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_1000A5B18()
{
  if (v0)
  {
    sub_10000EA88();
    return sub_10000AE28();
  }

  else
  {
    sub_1000B79B8();
    uint64_t v2 = sub_1000B686C();
    return sub_1000B6338(v2, v3);
  }

uint64_t sub_1000A5B5C()
{
  return sub_10000C914(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000A5C08(uint64_t a1, uint64_t a2, uint64_t a3, void *aBlock, void *a5)
{
  uint64_t v5[2] = a5;
  v5[3] = _Block_copy(aBlock);
  sub_1000B5044(0LL, (unint64_t *)&qword_100130BA0, &OBJC_CLASS___LNSystemProtocol_ptr);
  uint64_t v11 = v10;
  unint64_t v12 = sub_100038038();
  uint64_t v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)(a1, v11, v12);
  v5[4] = v13;
  if (a3)
  {
    a3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    uint64_t v15 = v14;
  }

  else
  {
    uint64_t v15 = 0LL;
  }

  void v5[5] = v15;
  uint64_t v16 = dword_100133864;
  a5;
  uint64_t v17 = (void *)swift_task_alloc(v16);
  v5[6] = v17;
  *uint64_t v17 = v5;
  v17[1] = sub_1000A5CF4;
  return sub_1000A5A64(v13, a2, a3, v15);
}

uint64_t sub_1000A5CF4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16)
{
  a15 = v18;
  a16 = v19;
  a14 = v17;
  a14 = (void *)*v17;
  uint64_t v20 = (void *)a14[2];
  uint64_t v21 = *v17;
  sub_10004BEB8(a14[6], &a14);

  sub_100011958();
  swift_bridgeObjectRelease();
  if (v16)
  {
    sub_1000680A0();
    sub_1000B650C();
    sub_100068420();
  }

  else
  {
    sub_100008DB0(&qword_100132480);
    sub_1000B6D08();
    sub_10000ADB0();
    sub_100068488();
  }

  sub_100067C94();

  sub_100067E10();
  return sub_100067B00(*(uint64_t (**)(void))(v21 + 8));
}

uint64_t sub_1000A5DA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  uint64_t v5[2] = a1;
  return sub_100067ABC((uint64_t)sub_1000A5DBC);
}

uint64_t sub_1000A5DBC()
{
  uint64_t v1 = (void *)v0[6];
  uint64_t v2 = (void *)v0[2];
  id v3 = (void *)objc_opt_self(&OBJC_CLASS___NSXPCConnection);
  sub_10000AE38();
  id v4 = v1;
  id v5 = v2;
  sub_10000AFB0();
  id v6 = sub_1000B7154(v3);
  sub_1000B796C((uint64_t)v6);
  uint64_t v7 = (void *)swift_task_alloc(dword_10013384C);
  v0[8] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1000A5B18;
  uint64_t v8 = sub_1000B62A8();
  return sub_10009FFE8(v8, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t sub_1000A5E78(void *a1, uint64_t a2, uint64_t a3, void *aBlock, void *a5)
{
  uint64_t v5[2] = a1;
  v5[3] = a5;
  v5[4] = _Block_copy(aBlock);
  sub_1000B5044(0LL, &qword_100132488, &OBJC_CLASS___LNValueType_ptr);
  uint64_t v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a2,  &type metadata for String,  v10,  &protocol witness table for String);
  void v5[5] = v11;
  if (a3)
  {
    a3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    uint64_t v13 = v12;
  }

  else
  {
    uint64_t v13 = 0LL;
  }

  v5[6] = v13;
  uint64_t v14 = dword_100133844;
  id v15 = a1;
  a5;
  uint64_t v16 = (void *)swift_task_alloc(v14);
  v5[7] = v16;
  void *v16 = v5;
  v16[1] = sub_1000A5F6C;
  return sub_1000A5DA4((uint64_t)v15, v11, a3, v13);
}

uint64_t sub_1000A5F6C()
{
  id v4 = (void *)v2[2];
  id v3 = (void *)v2[3];
  uint64_t v5 = *v1;
  sub_10004BEB8(v2[7], v6);

  sub_100011958();
  swift_bridgeObjectRelease();
  if (v0)
  {
    sub_1000680A0();
    sub_1000B650C();
    sub_100068420();
  }

  else
  {
    sub_100008DB0(&qword_100132480);
    sub_1000B6D08();
    sub_10000ADB0();
    sub_100068488();
  }

  sub_100067C94();

  sub_100067E10();
  return sub_10000EA08(*(uint64_t (**)(void))(v5 + 8));
}

uint64_t sub_1000A6038(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v8 = v7;
  v3[4] = v7;
  uint64_t v9 = dword_1001332C4;
  a3;
  uint64_t v10 = (void *)swift_task_alloc(v9);
  v3[5] = v10;
  *uint64_t v10 = v3;
  v10[1] = sub_1000A60C4;
  return sub_10008FA38(v6, v8);
}

uint64_t sub_1000A60C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16)
{
  a15 = v18;
  a16 = v19;
  a14 = v17;
  a14 = (void *)*v17;
  uint64_t v20 = (void *)a14[2];
  uint64_t v21 = *v17;
  sub_10004BEB8(a14[5], &a14);

  uint64_t v22 = sub_100011958();
  if (v16)
  {
    sub_1000680A0();
    sub_1000B650C();
    sub_100068420();
  }

  else
  {
    sub_1000B67F8(v22, (unint64_t *)&unk_100132490, &OBJC_CLASS___LNActionMetadata_ptr);
    sub_1000B68FC();
    sub_10000ADB0();
    sub_100068488();
  }

  sub_100067C94();

  sub_100067E10();
  return sub_100067B00(*(uint64_t (**)(void))(v21 + 8));
}

uint64_t sub_1000A615C(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_100067ABC((uint64_t)sub_1000A616C);
}

uint64_t sub_1000A616C()
{
  uint64_t v1 = sub_10000AE38();
  *(void *)(v0 + 3sub_100096760(v0[56], v0 + 2) = sub_10003F9CC(v1, "currentConnection");
  uint64_t v2 = (void *)swift_task_alloc(dword_10013380C);
  *(void *)(v0 + 40) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000A61F0;
  uint64_t v3 = sub_1000B62A8();
  return sub_1000A0574(v3, v4, v5, v6, v7, v8);
}

uint64_t sub_1000A61F0()
{
  *(void *)(v1 + 48) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    sub_10000EA88();
    return sub_10000AE28();
  }

  else
  {

    uint64_t v5 = sub_1000B686C();
    return sub_1000B6338(v5, v6);
  }

uint64_t sub_1000A6248()
{
  return sub_10000C914(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000A6284(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  sub_1000B5044(0LL, &qword_1001337F0, &OBJC_CLASS___LNFullyQualifiedActionIdentifier_ptr);
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, v6);
  v3[4] = v7;
  uint64_t v8 = dword_1001337FC;
  a3;
  uint64_t v9 = (void *)swift_task_alloc(v8);
  v3[5] = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_1000A6324;
  return sub_1000A615C(v7);
}

uint64_t sub_1000A6324( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16)
{
  a15 = v18;
  a16 = v19;
  a14 = v17;
  a14 = (void *)*v17;
  uint64_t v20 = (void *)a14[2];
  uint64_t v21 = *v17;
  sub_10004BEB8(a14[5], &a14);

  sub_100011958();
  if (v16)
  {
    sub_1000680A0();
    sub_1000B650C();
    sub_100068420();
  }

  else
  {
    sub_100008DB0(&qword_100132480);
    sub_1000B6D08();
    sub_10000ADB0();
    sub_100068488();
  }

  sub_100067C94();

  sub_100067E10();
  return sub_100067B00(*(uint64_t (**)(void))(v21 + 8));
}

uint64_t sub_1000A63C8(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100067ABC((uint64_t)sub_1000A63DC);
}

uint64_t sub_1000A63DC()
{
  uint64_t v1 = *(void **)(v0 + 32);
  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___NSXPCConnection);
  sub_10000AE38();
  id v3 = v1;
  id v4 = sub_1000B7154(v2);
  sub_1000B6CF4((uint64_t)v4);
  uint64_t v5 = (void *)swift_task_alloc(dword_1001337DC);
  *(void *)(v0 + 48) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10008FAD0;
  uint64_t v6 = sub_1000B62A8();
  return sub_1000A0AC4(v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1000A647C(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  if (a1)
  {
    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    uint64_t v7 = v6;
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  v3[4] = v7;
  uint64_t v8 = dword_1001337CC;
  a3;
  uint64_t v9 = (void *)swift_task_alloc(v8);
  v3[5] = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_1000A6514;
  return sub_1000A63C8(a1, v7);
}

uint64_t sub_1000A6514()
{
  uint64_t v6 = *v1;
  uint64_t v2 = *(void **)(v6 + 16);
  uint64_t v3 = *v1;
  sub_10004BEB8(*(void *)(v6 + 40), &v6);

  uint64_t v4 = swift_bridgeObjectRelease();
  if (v0)
  {
    sub_1000680A0();
    sub_1000B650C();
    sub_1000B6BF8();
  }

  else
  {
    sub_1000B67F8(v4, &qword_1001337D0, &OBJC_CLASS___LNBundleActionsMetadata_ptr);
    sub_1000B6D08();
    sub_10000ADB0();
    sub_1000B6BEC();
  }

  sub_100067C94();

  sub_100067E10();
  return sub_10000EA08(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_1000A65CC(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100067ABC((uint64_t)sub_1000A65E0);
}

uint64_t sub_1000A65E0()
{
  uint64_t v1 = *(void **)(v0 + 32);
  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___NSXPCConnection);
  sub_10000AE38();
  id v3 = v1;
  id v4 = sub_1000B7154(v2);
  sub_1000B6CF4((uint64_t)v4);
  uint64_t v5 = (void *)swift_task_alloc(dword_1001337B4);
  *(void *)(v0 + 48) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10008FAD0;
  uint64_t v6 = sub_1000B62A8();
  return sub_10009D7C4(v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1000A6680(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  if (a1)
  {
    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    uint64_t v7 = v6;
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  v3[4] = v7;
  uint64_t v8 = dword_1001337AC;
  a3;
  uint64_t v9 = (void *)swift_task_alloc(v8);
  v3[5] = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_1000A6718;
  return sub_1000A65CC(a1, v7);
}

uint64_t sub_1000A6718()
{
  uint64_t v5 = *v1;
  uint64_t v2 = *(void **)(v5 + 16);
  uint64_t v3 = *v1;
  sub_10004BEB8(*(void *)(v5 + 40), &v5);

  swift_bridgeObjectRelease();
  if (v0)
  {
    sub_1000680A0();
    sub_1000B650C();
    sub_1000B6BF8();
  }

  else
  {
    Array._bridgeToObjectiveC()();
    sub_10000ADB0();
    sub_1000B6BEC();
  }

  sub_100067C94();

  sub_100067E10();
  return sub_10000EA08(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_1000A67C8(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_100133314;
  a2;
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000A6828;
  return sub_10008FC44();
}

uint64_t sub_1000A6828()
{
  uint64_t v5 = *v1;
  uint64_t v2 = *(void **)(v5 + 16);
  uint64_t v3 = *v1;
  sub_10004BEB8(*(void *)(v5 + 32), &v5);

  if (v0)
  {
    sub_1000680A0();
    sub_1000B650C();
    sub_1000B6BF8();
  }

  else
  {
    Array._bridgeToObjectiveC()();
    sub_10000ADB0();
    sub_1000B6BEC();
  }

  sub_100067C94();

  sub_100067E10();
  return sub_10000EA08(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_1000A68BC()
{
  *(void *)(v1 + 16) = v0;
  return sub_100067ABC((uint64_t)sub_1000A68CC);
}

uint64_t sub_1000A68CC()
{
  id v1 = sub_1000B6D00();
  id v2 = sub_100011ABC((uint64_t)v1, "currentConnection");
  sub_1000B72E4((uint64_t)v2);
  uint64_t v3 = (void *)swift_task_alloc(dword_100133784);
  *(void *)(v0 + 3sub_100096760(v0[56], v0 + 2) = v3;
  void *v3 = v0;
  v3[1] = sub_10008FCC8;
  uint64_t v4 = sub_1000B62A8();
  return sub_1000A1068(v4, v5, v6, v7, v8);
}

uint64_t sub_1000A6954(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_100133774;
  a2;
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000A69B4;
  return sub_1000A68BC();
}

uint64_t sub_1000A69B4()
{
  uint64_t v6 = *v1;
  id v2 = *(void **)(v6 + 16);
  uint64_t v3 = *v1;
  sub_10004BEB8(*(void *)(v6 + 32), &v6);

  if (v0)
  {
    sub_1000680A0();
    sub_1000B650C();
    sub_1000B6BF8();
  }

  else
  {
    sub_1000B67F8(v4, (unint64_t *)&unk_100132470, &OBJC_CLASS___LNRegisteredBundleMetadata_ptr);
    sub_1000B68FC();
    sub_10000ADB0();
    sub_1000B6BEC();
  }

  sub_100067C94();

  sub_100067E10();
  return sub_10000EA08(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_1000A6A50()
{
  *(void *)(v1 + 16) = v0;
  return sub_100067ABC((uint64_t)sub_1000A6A60);
}

uint64_t sub_1000A6A60()
{
  id v1 = sub_1000B6D00();
  id v2 = sub_100011ABC((uint64_t)v1, "currentConnection");
  sub_1000B72E4((uint64_t)v2);
  uint64_t v3 = (void *)swift_task_alloc(dword_10013375C);
  *(void *)(v0 + 3sub_100096760(v0[56], v0 + 2) = v3;
  void *v3 = v0;
  v3[1] = sub_10008FCC8;
  uint64_t v4 = sub_1000B62A8();
  return sub_1000A1578(v4, v5, v6, v7, v8);
}

uint64_t sub_1000A6AE8(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_10013374C;
  a2;
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000A6B48;
  return sub_1000A6A50();
}

uint64_t sub_1000A6B48()
{
  uint64_t v5 = *v1;
  id v2 = *(void **)(v5 + 16);
  uint64_t v3 = *v1;
  sub_10004BEB8(*(void *)(v5 + 32), &v5);

  if (v0)
  {
    sub_1000680A0();
    sub_1000B650C();
    sub_1000B6BF8();
  }

  else
  {
    sub_100008DB0(&qword_100133750);
    sub_1000B6D08();
    sub_10000ADB0();
    sub_1000B6BEC();
  }

  sub_100067C94();

  sub_100067E10();
  return sub_10000EA08(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_1000A6C04(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v8 = v7;
  v3[4] = v7;
  uint64_t v9 = dword_100133724;
  a3;
  uint64_t v10 = (void *)swift_task_alloc(v9);
  v3[5] = v10;
  *uint64_t v10 = v3;
  v10[1] = sub_1000A6C90;
  return sub_10008FB14(v6, v8);
}

uint64_t sub_1000A6C90( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16)
{
  a15 = v18;
  a16 = v19;
  a14 = v17;
  a14 = (void *)*v17;
  uint64_t v20 = (void *)a14[2];
  uint64_t v21 = *v17;
  sub_10004BEB8(a14[5], &a14);

  uint64_t v22 = sub_100011958();
  if (v16)
  {
    sub_1000680A0();
    sub_1000B650C();
    sub_100068420();
  }

  else
  {
    sub_1000B67F8(v22, (unint64_t *)&qword_100132440, &OBJC_CLASS___LNEntityMetadata_ptr);
    sub_1000B68FC();
    sub_10000ADB0();
    sub_100068488();
  }

  sub_100067C94();

  sub_100067E10();
  return sub_100067B00(*(uint64_t (**)(void))(v21 + 8));
}

uint64_t sub_1000A6D28(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100067ABC((uint64_t)sub_1000A6D3C);
}

uint64_t sub_1000A6D3C()
{
  id v1 = *(void **)(v0 + 32);
  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___NSXPCConnection);
  sub_10000AE38();
  id v3 = v1;
  id v4 = sub_1000B7154(v2);
  sub_1000B6CF4((uint64_t)v4);
  uint64_t v5 = (void *)swift_task_alloc(dword_10013370C);
  *(void *)(v0 + 48) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10008FAD0;
  uint64_t v6 = sub_1000B62A8();
  return sub_10009DD68(v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1000A6DDC(int a1, int a2, int a3, void *a4)
{
  uint64_t v6 = (void *)sub_10000C254(v4, 40LL);
  sub_1000B7978(v6);
  id v7 = v5;
  uint64_t v8 = sub_10000AF9C();
  return sub_100067D00(v8, v9);
}

uint64_t sub_1000A6E18(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  if (a1)
  {
    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    uint64_t v7 = v6;
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  v3[4] = v7;
  uint64_t v8 = dword_100133704;
  a3;
  uint64_t v9 = (void *)swift_task_alloc(v8);
  v3[5] = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_1000B6268;
  return sub_1000A6D28(a1, v7);
}

uint64_t sub_1000A6EB0()
{
  *(void *)(v1 + 16) = v0;
  return sub_100067ABC((uint64_t)sub_1000A6EC0);
}

uint64_t sub_1000A6EC0()
{
  id v1 = sub_1000B6D00();
  id v2 = sub_100011ABC((uint64_t)v1, "currentConnection");
  sub_1000B72E4((uint64_t)v2);
  id v3 = (void *)swift_task_alloc(dword_1001336EC);
  *(void *)(v0 + 3sub_100096760(v0[56], v0 + 2) = v3;
  void *v3 = v0;
  v3[1] = sub_10008FCC8;
  uint64_t v4 = sub_1000B62A8();
  return sub_1000A1A88(v4, v5, v6, v7, v8);
}

uint64_t sub_1000A6F48(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_1001336DC;
  a2;
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000A6FA8;
  return sub_1000A6EB0();
}

uint64_t sub_1000A6FA8()
{
  uint64_t v5 = *v1;
  id v2 = *(void **)(v5 + 16);
  uint64_t v3 = *v1;
  sub_10004BEB8(*(void *)(v5 + 32), &v5);

  if (v0)
  {
    sub_1000680A0();
    sub_1000B650C();
    sub_1000B6BF8();
  }

  else
  {
    sub_100008DB0(&qword_1001336E0);
    sub_1000B6D08();
    sub_10000ADB0();
    sub_1000B6BEC();
  }

  sub_100067C94();

  sub_100067E10();
  return sub_10000EA08(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_1000A7064(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v8 = v7;
  v3[4] = v7;
  uint64_t v9 = dword_1001336B4;
  a3;
  uint64_t v10 = (void *)swift_task_alloc(v9);
  v3[5] = v10;
  *uint64_t v10 = v3;
  v10[1] = sub_1000A70F0;
  return sub_10008FBAC(v6, v8);
}

uint64_t sub_1000A70F0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16)
{
  a15 = v18;
  a16 = v19;
  a14 = v17;
  a14 = (void *)*v17;
  uint64_t v20 = (void *)a14[2];
  uint64_t v21 = *v17;
  sub_10004BEB8(a14[5], &a14);

  uint64_t v22 = sub_100011958();
  if (v16)
  {
    sub_1000680A0();
    sub_1000B650C();
    sub_100068420();
  }

  else
  {
    sub_1000B67F8(v22, (unint64_t *)&qword_100132450, &OBJC_CLASS___LNEnumMetadata_ptr);
    sub_1000B68FC();
    sub_10000ADB0();
    sub_100068488();
  }

  sub_100067C94();

  sub_100067E10();
  return sub_100067B00(*(uint64_t (**)(void))(v21 + 8));
}

uint64_t sub_1000A7188(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100067ABC((uint64_t)sub_1000A719C);
}

uint64_t sub_1000A719C()
{
  uint64_t v1 = sub_10000AE38();
  id v2 = sub_10003F9CC(v1, "currentConnection");
  sub_1000B6CF4((uint64_t)v2);
  uint64_t v3 = (void *)swift_task_alloc(dword_10013369C);
  *(void *)(v0 + 48) = v3;
  void *v3 = v0;
  v3[1] = sub_1000A7220;
  uint64_t v4 = sub_1000B62A8();
  return sub_1000A1F98(v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000A7220()
{
  if (v0)
  {
    sub_10000EA88();
    return sub_10000AE28();
  }

  else
  {
    sub_1000B6D40();
    uint64_t v2 = sub_1000B686C();
    return sub_1000B6338(v2, v3);
  }

uint64_t sub_1000A7264()
{
  return sub_10000C914(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000A72A0(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v8 = v7;
  v3[4] = v7;
  uint64_t v9 = dword_10013368C;
  a3;
  uint64_t v10 = (void *)swift_task_alloc(v9);
  v3[5] = v10;
  *uint64_t v10 = v3;
  v10[1] = sub_1000A732C;
  return sub_1000A7188(v6, v8);
}

uint64_t sub_1000A732C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16)
{
  a15 = v18;
  a16 = v19;
  a14 = v17;
  a14 = (void *)*v17;
  uint64_t v20 = (void *)a14[2];
  uint64_t v21 = *v17;
  sub_10004BEB8(a14[5], &a14);

  uint64_t v22 = sub_100011958();
  if (v16)
  {
    sub_1000680A0();
    sub_1000B650C();
    sub_100068420();
  }

  else
  {
    sub_1000B67F8(v22, &qword_100133690, &OBJC_CLASS___LNExamplePhraseDescription_ptr);
    sub_1000B68FC();
    sub_10000ADB0();
    sub_100068488();
  }

  sub_100067C94();

  sub_100067E10();
  return sub_100067B00(*(uint64_t (**)(void))(v21 + 8));
}

uint64_t sub_1000A73C4()
{
  *(void *)(v1 + 16) = v0;
  return sub_100067ABC((uint64_t)sub_1000A73D4);
}

uint64_t sub_1000A73D4()
{
  id v1 = sub_1000B6D00();
  id v2 = sub_100011ABC((uint64_t)v1, "currentConnection");
  sub_1000B72E4((uint64_t)v2);
  uint64_t v3 = (void *)swift_task_alloc(dword_100133674);
  *(void *)(v0 + 3sub_100096760(v0[56], v0 + 2) = v3;
  void *v3 = v0;
  v3[1] = sub_10008FCC8;
  uint64_t v4 = sub_1000B62A8();
  return sub_1000A24CC(v4, v5, v6, v7, v8);
}

uint64_t sub_1000A745C(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_100133664;
  a2;
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000A74BC;
  return sub_1000A73C4();
}

uint64_t sub_1000A74BC()
{
  uint64_t v5 = *v1;
  id v2 = *(void **)(v5 + 16);
  uint64_t v3 = *v1;
  sub_10004BEB8(*(void *)(v5 + 32), &v5);

  if (v0)
  {
    sub_1000680A0();
    sub_1000B650C();
    sub_1000B6BF8();
  }

  else
  {
    sub_100008DB0(&qword_100132468);
    sub_1000B6D08();
    sub_10000ADB0();
    sub_1000B6BEC();
  }

  sub_100067C94();

  sub_100067E10();
  return sub_10000EA08(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_1000A7564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  uint64_t v5[2] = a1;
  return sub_100067ABC((uint64_t)sub_1000A757C);
}

uint64_t sub_1000A757C()
{
  id v1 = *(void **)(v0 + 48);
  id v2 = (void *)objc_opt_self(&OBJC_CLASS___NSXPCConnection);
  sub_10000AE38();
  id v3 = v1;
  sub_10000AFB0();
  id v4 = sub_1000B7154(v2);
  sub_1000B796C((uint64_t)v4);
  uint64_t v5 = (void *)swift_task_alloc(dword_10013364C);
  *(void *)(v0 + 64) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1000A7618;
  uint64_t v6 = sub_1000B62A8();
  return sub_1000A29DC(v6, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_1000A7618()
{
  if (v0)
  {
    sub_10000EA88();
    return sub_10000AE28();
  }

  else
  {
    sub_1000B79B8();
    uint64_t v2 = sub_1000B686C();
    return sub_1000B6338(v2, v3);
  }

uint64_t sub_1000A76D4(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v10 = v9;
  void v4[4] = v9;
  if (a2)
  {
    a2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
    uint64_t v12 = v11;
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  v4[5] = v12;
  uint64_t v13 = dword_10013363C;
  a4;
  uint64_t v14 = (void *)swift_task_alloc(v13);
  v4[6] = v14;
  *uint64_t v14 = v4;
  v14[1] = sub_1000A7794;
  return sub_1000A7564(v8, v10, a2, v12);
}

uint64_t sub_1000A7794( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16)
{
  a15 = v18;
  a16 = v19;
  a14 = v17;
  a14 = (void *)*v17;
  uint64_t v20 = (void *)a14[2];
  uint64_t v21 = *v17;
  sub_10004BEB8(a14[6], &a14);

  sub_100011958();
  uint64_t v22 = swift_bridgeObjectRelease();
  if (v16)
  {
    sub_1000680A0();
    sub_1000B650C();
    sub_100068420();
  }

  else
  {
    sub_1000B67F8(v22, (unint64_t *)&qword_100132460, &OBJC_CLASS___LNQueryMetadata_ptr);
    sub_1000B68FC();
    sub_10000ADB0();
    sub_100068488();
  }

  sub_100067C94();

  sub_100067E10();
  return sub_100067B00(*(uint64_t (**)(void))(v21 + 8));
}

uint64_t sub_1000A7838(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100067ABC((uint64_t)sub_1000A784C);
}

uint64_t sub_1000A784C()
{
  uint64_t v1 = sub_10000AE38();
  id v2 = sub_10003F9CC(v1, "currentConnection");
  sub_1000B6CF4((uint64_t)v2);
  id v3 = (void *)swift_task_alloc(dword_100133624);
  *(void *)(v0 + 48) = v3;
  void *v3 = v0;
  v3[1] = sub_10008FAD0;
  uint64_t v4 = sub_1000B62A8();
  return sub_1000A2F50(v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000A78E4(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v8 = v7;
  v3[4] = v7;
  uint64_t v9 = dword_10013361C;
  a3;
  uint64_t v10 = (void *)swift_task_alloc(v9);
  v3[5] = v10;
  *uint64_t v10 = v3;
  v10[1] = sub_1000A7970;
  return sub_1000A7838(v6, v8);
}

uint64_t sub_1000A7970( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16)
{
  a15 = v18;
  a16 = v19;
  a14 = v17;
  uint64_t v20 = (void *)*v17;
  a14 = v20;
  uint64_t v21 = (void *)v20[2];
  uint64_t v22 = (void *)*v17;
  sub_10004BEB8(v20[5], &a14);

  sub_100011958();
  uint64_t v23 = v20[3];
  if (v16)
  {
    uint64_t v24 = (void *)sub_100067E64();
    sub_100059344();
    (*(void (**)(uint64_t))(v23 + 16))(v23);
  }

  else
  {
    uint64_t v25 = sub_1000B7E80();
    sub_1000B745C(v25, v26, v27);
  }

  sub_1000680F0();
  return sub_100067B00((uint64_t (*)(void))v22[1]);
}

uint64_t sub_1000A79F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[69] = v6;
  v7[68] = a6;
  v7[67] = a5;
  v7[66] = a4;
  v7[65] = a3;
  v7[63] = a1;
  v7[64] = a2;
  uint64_t v8 = sub_10000E918();
  v7[70] = v8;
  v7[71] = *(void *)(v8 - 8);
  v7[72] = sub_10000AF64();
  v7[73] = sub_10000AF64();
  sub_10000EA88();
  return sub_10000E998();
}

uint64_t sub_1000A7A90()
{
  uint64_t v80 = v1;
  uint64_t v81 = v2;
  id v79 = v0;
  unint64_t v3 = sub_100033964(v0[65], v0[66]);
  uint64_t v5 = v4;
  uint64_t v6 = v0[63];
  uint64_t v7 = v0[64];
  v0[74] = *(void *)(v0[69] + OBJC_IVAR____TtC10LinkDaemon8Registry_store);
  uint64_t v8 = (void *)sub_10004F0A8(v6, v7, v3, v5);
  v0[75] = v8;
  v0[76] = 0LL;
  sub_10000AEE8();
  uint64_t v10 = (void *)objc_opt_self(&OBJC_CLASS___LNConnectionPolicy);
  id v11 = sub_1000B7860(v10, "policyWithActionMetadata:");
  v0[55] = 0LL;
  id v12 = [v11 connectionWithError:v0 + 55];
  v0[77] = v12;

  uint64_t v13 = (void *)v0[55];
  uint64_t v14 = (void *)v0[69];
  if (v12)
  {
    id v15 = sub_100028058((uint64_t)v13, "bundleIdentifier");
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    uint64_t v18 = v17;

    v0[78] = v16;
    v0[79] = v18;
    uint64_t v19 = qword_100130330;
    id v20 = v14;
    if (v19 != -1) {
      swift_once(&qword_100130330, sub_100091538);
    }
    uint64_t v21 = v0[73];
    uint64_t v22 = v0[71];
    uint64_t v23 = (void *)v0[69];
    uint64_t v24 = sub_100008D98(v0[70], (uint64_t)qword_100135860);
    v0[80] = v24;
    sub_1000B78B8(v21, v24, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 16));

    uint64_t v25 = sub_100011A3C(v18);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    BOOL v28 = sub_1000B6598(v26);
    uint64_t v29 = v0[73];
    uint64_t v30 = v0[71];
    uint64_t v31 = v0[70];
    if (v28)
    {
      uint64_t v32 = (uint8_t *)sub_10000AE10(12LL);
      uint64_t v75 = v30;
      uint64_t v33 = sub_10000AE10(32LL);
      uint64_t v78 = v33;
      *(_DWORD *)uint64_t v32 = 136315138;
      sub_10000AFB0();
      uint64_t v34 = sub_1000B75D4();
      v0[62] = sub_10000DE60(v34, v35, v36);
      sub_1000B7294((uint64_t)(v0 + 62), (uint64_t)(v0 + 63), (uint64_t)(v32 + 4));
      sub_100027E5C(v18);
      sub_10000AF5C((void *)&_mh_execute_header, v26, v27, "Effective bundle identifier for Nessie: %s", v32);
      sub_10000AF48(v33);
      sub_10000AD78(v33);
      sub_10000AD78((uint64_t)v32);

      uint64_t v45 = sub_1000B6A14( v37,  v38,  v39,  v40,  v41,  v42,  v43,  v44,  v74,  (uint64_t)(v0 + 62),  (uint64_t)(v0 + 63),  v31,  v75,  v29);
    }

    else
    {
      sub_10001191C(v18);

      uint64_t v45 = sub_1000B7614();
    }

    v46(v45);
    NSString v65 = String._bridgeToObjectiveC()();
    v0[81] = v65;
    v0[7] = v0 + 54;
    v0[53] = sub_1000B6FFC((uint64_t)sub_1000A7FC4);
    v0[49] = _NSConcreteStackBlock;
    v0[50] = 0x40000000LL;
    v0[51] = sub_1000A869C;
    v0[52] = &unk_100125C58;
    [v12 fetchActionForAppShortcutIdentifier:v65 completionHandler:v0 + 49];
    return swift_continuation_await(v0 + 2);
  }

  else
  {
    id v47 = v13;
    _convertNSErrorToError(_:)(v13);

    sub_1000592C0();
    sub_100059344();
    uint64_t v48 = qword_100130330;
    id v49 = v14;
    if (v48 != -1) {
      id v49 = (id)swift_once(&qword_100130330, sub_100091538);
    }
    uint64_t v50 = (os_log_s *)v0[72];
    uint64_t v51 = (void *)v0[69];
    uint64_t v52 = v0[64];
    sub_1000B6794((uint64_t)v49, (uint64_t)qword_100135860);

    uint64_t v53 = sub_100011A3C(v52);
    Logger.logObject.getter(v53);
    os_log_type_t v54 = sub_10000AF38();
    BOOL v55 = sub_1000B6908(v50);
    uint64_t v56 = v0[72];
    uint64_t v57 = v0[71];
    uint64_t v58 = v0[64];
    if (v55)
    {
      uint64_t v59 = v0[63];
      uint64_t v77 = v0[70];
      uint64_t v60 = (uint8_t *)sub_10000AE10(12LL);
      uint64_t v76 = v56;
      uint64_t v61 = sub_10000AE10(32LL);
      uint64_t v78 = v61;
      *(_DWORD *)uint64_t v60 = 136315138;
      sub_10001C1BC();
      uint64_t v63 = sub_100027FA8(v59, v62, &v78);
      sub_1000B7B9C(v63);
      sub_1000B7AB4((uint64_t)(v0 + 56), v64);
      sub_100027E5C(v58);
      sub_10000AF5C((void *)&_mh_execute_header, v50, v54, "Could not open connection to app: %s", v60);
      sub_10000AF48(v61);
      sub_10000AD78(v61);
      sub_10000AD78((uint64_t)v60);

      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v76, v77);
    }

    else
    {
      sub_10001191C(v0[64]);

      uint64_t v67 = sub_1000B6878();
      v69(v67, v68);
    }

    uint64_t v71 = v0[63];
    uint64_t v70 = v0[64];
    sub_1000B6C88();
    sub_100067940((unint64_t *)&unk_1001332D0, type metadata accessor for RegistryError);
    sub_1000B6324(v72);
    *uint64_t v73 = v71;
    v73[1] = v70;
    sub_1000B7D3C((uint64_t)v73);
    sub_10000AE38();
    sub_1000B6D9C();

    sub_1000B75A8();
    sub_10000AF6C();
    uint64_t v9 = (uint64_t (*)(void))sub_1000B7CB8();
    return sub_1000B6270(v9);
  }

uint64_t sub_1000A7FC4()
{
  *(void *)(v0 + 656) = v1;
  if (v1) {
    swift_bridgeObjectRelease();
  }
  sub_10000EA88();
  return sub_10000E998();
}

uint64_t sub_1000A804C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
  a27 = v30;
  a28 = v31;
  a26 = v28;
  uint64_t v32 = *(void *)(v28 + 544);
  id v33 = *(id *)(v28 + 432);

  if (v32)
  {
    uint64_t v34 = *(void *)(v28 + 632);
    uint64_t v35 = *(void *)(v28 + 624);
    uint64_t v36 = *(void *)(v28 + 608);
    uint64_t v37 = *(void *)(v28 + 544);
    uint64_t v38 = *(void *)(v28 + 536);
    sub_10001C1BC();
    sub_100052E68(v35, v34, v38, v37);
    if (v36)
    {
      uint64_t v39 = *(void **)(v28 + 616);
      uint64_t v40 = *(void **)(v28 + 600);
      sub_10001DF40();

      sub_10000ADB0();
      sub_1000B75A8();
      sub_10000AF6C();
      uint64_t v41 = (uint64_t (*)(void))sub_1000B7CB8();
      return sub_1000B6270(v41);
    }

    sub_10000ADB0();
    uint64_t v51 = sub_1000B7608();
    sub_100026C8C(v51, v52, v53);
    uint64_t v43 = *(os_log_s **)(v28 + 640);
    if (*(void *)(v28 + 192))
    {
      memcpy((void *)(v28 + 80), (const void *)(v28 + 184), 0x68uLL);
      sub_10001DF40();
      id v54 = sub_1000BEE18(v33, v28 + 80);
      sub_1000B7F90();
      id v55 = v54;
      uint64_t v56 = sub_1000B7F90();
      Logger.logObject.getter(v56);
      os_log_type_t v57 = sub_1000B8070();
      BOOL v58 = os_log_type_enabled((os_log_t)sub_1000B4378, v57);
      uint64_t v59 = *(void **)(v28 + 616);
      uint64_t v60 = *(void **)(v28 + 600);
      if (v58)
      {
        uint64_t v82 = *(void **)(v28 + 600);
        uint64_t v61 = sub_10000AE10(22LL);
        uint64_t v80 = sub_10000AE10(64LL);
        a16 = v80;
        *(_DWORD *)uint64_t v61 = 136315394;
        id v62 = sub_100028058(v80, "description");
        static String._unconditionallyBridgeFromObjectiveC(_:)(v62);

        *(void *)(v28 + 480) = sub_1000B7ED4(v63, v64, &a16);
        sub_1000B6D94(v28 + 480, v28 + 488, v65, v61 + 12);
        sub_10000ADB0();

        *(_WORD *)(v61 + 1sub_100096760(v0[56], v0 + 2) = 2080;
        uint64_t v66 = *(void *)(v28 + 152);
        sub_1000280C8();
        *(void *)(v28 + 488) = sub_1000B8034(v66, v67, &a16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v28 + 488, v28 + 496, v61 + 14, v61 + 22);
        sub_10001DEC4();
        sub_1000B6B28();
        sub_1000B6B28();
        sub_1000B64C4( (void *)&_mh_execute_header,  (os_log_s *)sub_1000B4378,  v57,  "Found %s for type %s",  (uint8_t *)v61);
        sub_1000B64BC(v80);
        sub_10000AD78(v80);
        sub_10000AD78(v61);

        sub_1000B6B28();
      }

      else
      {
        sub_1000B6B28();

        sub_1000B6B28();
        sub_1000B6B28();
      }

      goto LABEL_11;
    }

    sub_100011A3C(*(void *)(v28 + 512));
    uint64_t v71 = sub_10001C1BC();
    Logger.logObject.getter(v71);
    os_log_type_t v72 = sub_10000AF38();
    if (sub_100067CA8(v72))
    {
      uint64_t v79 = *(void *)(v28 + 536);
      uint64_t v73 = *(void *)(v28 + 512);
      uint64_t v81 = *(void *)(v28 + 504);
      uint64_t v74 = sub_10000AE10(22LL);
      uint64_t v83 = sub_10000AE10(64LL);
      a16 = v83;
      *(_DWORD *)uint64_t v74 = 136315394;
      sub_10001C1BC();
      *(void *)(v28 + 464) = sub_100027FA8(v79, v75, &a16);
      sub_1000B6D94(v28 + 464, v28 + 472, v76, v74 + 12);
      sub_100027E5C(v37);
      *(_WORD *)(v74 + 1sub_100096760(v0[56], v0 + 2) = 2080;
      sub_100027FA0();
      *(void *)(v28 + 47sub_100096760(v0[56], v0 + 2) = sub_1000B69F0(v81, v77, &a16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v28 + 472, v28 + 480, v74 + 14, v74 + 22);
      sub_100027E5C(v73);
      sub_1000B64C4( (void *)&_mh_execute_header,  v43,  (os_log_type_t)(v28 + 32),  "Did not find a matching span record for %s for %s",  (uint8_t *)v74);
      sub_1000B64BC(v83);
      sub_10000AD78(v83);
      sub_10000AD78(v74);
    }

    else
    {
      uint64_t v78 = *(void *)(v28 + 512);
      sub_10001191C(v37);
      sub_10001191C(v78);
    }
  }

  else
  {
    uint64_t v43 = *(os_log_s **)(v28 + 640);
    swift_bridgeObjectRelease();
    id v33 = v33;
    Logger.logObject.getter(v33);
    os_log_type_t v44 = sub_100041BDC();
    if (sub_100067CA8(v44))
    {
      uint64_t v45 = (uint8_t *)sub_10000AE10(12LL);
      uint64_t v46 = sub_10000AE10(32LL);
      a16 = v46;
      *(_DWORD *)uint64_t v45 = 136315138;
      id v47 = sub_10003F9CC(v46, "action");
      id v48 = [v47 description];

      uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
      *(void *)(v28 + 456) = sub_100027FA8(v49, v50, &a16);
      sub_1000B7294(v28 + 456, v28 + 464, (uint64_t)(v45 + 4));
      sub_10001DF40();

      sub_10000AF5C((void *)&_mh_execute_header, v43, v29, "No parameter identifier given, returning action %s", v45);
      sub_10000AF48(v46);
      sub_10000AD78(v46);
      sub_10000AD78((uint64_t)v45);
    }

    else
    {
    }
  }

  uint64_t v68 = *(void **)(v28 + 616);
  uint64_t v69 = *(void **)(v28 + 600);
  id v55 = sub_10003F9CC(v70, "action");

LABEL_11:
  sub_1000B75A8();
  sub_10000AF6C();
  return sub_1000B628C((uint64_t)v55, *(uint64_t (**)(void))(v28 + 8));
}

uint64_t sub_1000A8604(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 648);
  unint64_t v3 = *(void **)(v1 + 616);
  uint64_t v4 = *(void **)(v1 + 600);
  swift_willThrow(a1);

  swift_task_dealloc(*(void *)(v1 + 584));
  sub_10000AFA8();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000A869C(uint64_t a1, void *a2, void *a3)
{
  return sub_1000A8EBC( a1,  a2,  a3,  (uint64_t (*)(void, void *))sub_1000BC0E0,  (uint64_t (*)(void, void *))sub_1000BCDC4);
}

uint64_t sub_1000A86C4()
{
  uint64_t v1 = v0;
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  id v11 = _Block_copy(v10);
  id v12 = (void *)sub_10000C254(v1, 56LL);
  v12[2] = v7;
  v12[3] = v5;
  v12[4] = v3;
  v12[5] = v11;
  v12[6] = v9;
  id v13 = v7;
  id v14 = v5;
  id v15 = v3;
  id v16 = v9;
  uint64_t v17 = sub_10000AF9C();
  return sub_1000BC15C(v17, v18);
}

uint64_t sub_1000A8744(uint64_t a1, uint64_t a2, uint64_t a3, void *aBlock, void *a5)
{
  uint64_t v5[2] = a5;
  v5[3] = _Block_copy(aBlock);
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v12 = v11;
  v5[4] = v11;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v15 = v14;
  void v5[5] = v14;
  if (a3)
  {
    a3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    uint64_t v17 = v16;
  }

  else
  {
    uint64_t v17 = 0LL;
  }

  v5[6] = v17;
  uint64_t v18 = dword_1001335FC;
  a5;
  uint64_t v19 = (void *)swift_task_alloc(v18);
  v5[7] = v19;
  *uint64_t v19 = v5;
  v19[1] = sub_1000A882C;
  return sub_1000A79F8(v10, v12, v13, v15, a3, v17);
}

uint64_t sub_1000A882C()
{
  uint64_t v13 = v2;
  uint64_t v14 = v3;
  uint64_t v12 = v1;
  uint64_t v4 = v0;
  uint64_t v6 = v5;
  uint64_t v7 = (void *)*v1;
  uint64_t v12 = v7;
  uint64_t v8 = (void *)v7[2];
  uint64_t v9 = (void *)*v1;
  sub_10004BEB8(v7[7], &v12);

  sub_100011958();
  sub_10001BE7C();
  uint64_t v10 = v7[3];
  swift_bridgeObjectRelease();
  if (v4)
  {
    sub_1000680A0();
    sub_1000B650C();
    sub_10003EE9C(v10, 0LL, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16));

    sub_100067E10();
  }

  else
  {
    sub_1000B745C(v10, (uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t, void))(v10 + 16));
    sub_100067E10();
  }

  return sub_10000EA08((uint64_t (*)(void))v9[1]);
}

uint64_t sub_1000A88DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  uint64_t v5[2] = a1;
  return sub_100067ABC((uint64_t)sub_1000A88F4);
}

uint64_t sub_1000A88F4()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = (void *)v0[6];
  objc_opt_self(&OBJC_CLASS___NSXPCConnection);
  sub_10000AFB0();
  id v3 = v2;
  uint64_t v4 = sub_10000AE38();
  id v5 = sub_100028058(v4, "currentConnection");
  sub_1000B796C((uint64_t)v5);
  uint64_t v6 = (uint64_t **)swift_task_alloc(dword_1001335CC);
  v0[8] = (uint64_t)v6;
  *uint64_t v6 = v0;
  v6[1] = (uint64_t *)sub_1000A7618;
  return sub_1000A3718(v1, 0x7972747369676552LL, 0xEE00726F72726520LL, v0[6], v0[2], v0[3], v0[6], v0[4]);
}

uint64_t sub_1000A89B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[22] = a5;
  v6[23] = a6;
  v6[20] = a3;
  v6[21] = a4;
  v6[18] = a1;
  v6[19] = a2;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  _BYTE v6[24] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[25] = v8;
  v6[26] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000A8A48, 0LL, 0LL);
}

uint64_t sub_1000A8A48( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  a25 = v28;
  a26 = v29;
  a24 = v26;
  uint64_t v30 = (void *)objc_opt_self(&OBJC_CLASS___LNConnectionPolicy);
  sub_10000AF9C();
  id v31 = [v30 policyWithBundleIdentifier:String._bridgeToObjectiveC()()];
  sub_1000B7FA8();
  *(void *)(v26 + 120) = 0LL;
  id v32 = sub_1000B7860(v27, "connectionWithError:");
  *(void *)(v26 + 216) = v32;

  id v33 = *(void **)(v26 + 120);
  if (v32)
  {
    id v34 = v33;
    *(void *)(v26 + 224) = sub_1000B7F1C();
    *(void *)(v26 + 56) = v26 + 136;
    uint64_t v35 = sub_1000B6FFC((uint64_t)sub_1000A8D50);
    *(void *)(v26 + 80) = _NSConcreteStackBlock;
    uint64_t v36 = (void *)(v26 + 80);
    v36[1] = 0x40000000LL;
    v36[2] = sub_1000A869C;
    v36[3] = &unk_100125BF0;
    v36[4] = v35;
    sub_1000B7910(v35, "fetchActionForAutoShortcutPhrase:completionHandler:");
    return sub_1000B6CD8();
  }

  else
  {
    uint64_t v38 = *(void **)(v26 + 168);
    id v39 = v33;
    sub_1000B7F58();
    sub_1000B7FA8();
    sub_1000B6D9C();
    sub_1000B69A8();
    uint64_t v40 = qword_100130330;
    id v41 = v38;
    if (v40 != -1) {
      id v41 = (id)swift_once(&qword_100130330, sub_100091538);
    }
    uint64_t v42 = *(os_log_s **)(v26 + 208);
    uint64_t v43 = *(void *)(v26 + 160);
    os_log_type_t v44 = *(void **)(v26 + 168);
    sub_1000B6794((uint64_t)v41, (uint64_t)qword_100135860);

    uint64_t v45 = sub_100011A3C(v43);
    Logger.logObject.getter(v45);
    os_log_type_t v46 = sub_10000AF38();
    BOOL v47 = sub_1000B6908(v42);
    unint64_t v48 = *(void *)(v26 + 160);
    if (v47)
    {
      uint64_t v60 = *(void *)(v26 + 192);
      uint64_t v61 = *(void *)(v26 + 200);
      uint64_t v49 = *(void *)(v26 + 152);
      uint64_t v59 = *(void *)(v26 + 208);
      uint64_t v50 = (uint8_t *)sub_10000AE10(12LL);
      uint64_t v51 = sub_10000AE10(32LL);
      a14 = v51;
      *(_DWORD *)uint64_t v50 = 136315138;
      sub_10001BCF8();
      *(void *)(v26 + 128) = sub_10000DE60(v49, v48, &a14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v26 + 128, v26 + 136, v50 + 4, v50 + 12);
      sub_1000B6460();
      sub_10000AF5C((void *)&_mh_execute_header, v42, v46, "Could not open connection to app: %s", v50);
      sub_10000AF48(v51);
      sub_10000AD78(v51);
      sub_10000AD78((uint64_t)v50);

      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v59, v60);
    }

    else
    {
      sub_10001191C(*(void *)(v26 + 160));

      uint64_t v52 = sub_1000B69C4();
      v54(v52, v53);
    }

    uint64_t v56 = *(void *)(v26 + 152);
    uint64_t v55 = *(void *)(v26 + 160);
    sub_1000B6C88();
    sub_100067940((unint64_t *)&unk_1001332D0, type metadata accessor for RegistryError);
    sub_1000B6324(v57);
    *BOOL v58 = v56;
    v58[1] = v55;
    sub_1000B7D3C((uint64_t)v58);
    sub_10000AFB0();
    sub_1000592C0();
    swift_task_dealloc(*(void *)(v26 + 208));
    return sub_100067B54(*(uint64_t (**)(void))(v26 + 8));
  }

uint64_t sub_1000A8D50()
{
  *(void *)(v0 + 23sub_100096760(v0[56], v0 + 2) = v1;
  sub_10000EA88();
  return sub_10000E998();
}

uint64_t sub_1000A8DD0()
{
  uint64_t v1 = *(void **)(v0 + 224);
  uint64_t v2 = *(void **)(v0 + 144);

  *uint64_t v2 = *(void *)(v0 + 136);
  sub_10000AF6C();
  return sub_100067BC8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000A8E48(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 224);
  id v3 = *(void **)(v1 + 216);
  swift_willThrow(a1);

  swift_task_dealloc(*(void *)(v1 + 208));
  return sub_100068024(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1000A8EBC( uint64_t result, void *a2, void *a3, uint64_t (*a4)(void, void *), uint64_t (*a5)(void, void *))
{
  if (a3) {
    return a4(*(void *)(result + 32), a3);
  }
  a3 = a2;
  a4 = a5;
  if (a2) {
    return a4(*(void *)(result + 32), a3);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A8F1C(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v10 = v9;
  void v4[4] = v9;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v13 = v12;
  v4[5] = v12;
  uint64_t v14 = dword_1001335C4;
  a4;
  uint64_t v15 = (void *)swift_task_alloc(v14);
  v4[6] = v15;
  *uint64_t v15 = v4;
  v15[1] = sub_1000A8FD0;
  return sub_1000A88DC(v8, v10, v11, v13);
}

uint64_t sub_1000A8FD0()
{
  uint64_t v13 = v2;
  uint64_t v14 = v3;
  uint64_t v12 = v1;
  uint64_t v4 = v0;
  uint64_t v6 = v5;
  uint64_t v7 = (void *)*v1;
  uint64_t v12 = v7;
  uint64_t v8 = (void *)v7[2];
  uint64_t v9 = (void *)*v1;
  sub_10004BEB8(v7[6], &v12);

  sub_100011958();
  sub_10001BE7C();
  uint64_t v10 = v7[3];
  if (v4)
  {
    sub_1000680A0();
    sub_1000B650C();
    sub_10003EE9C(v10, 0LL, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16));

    sub_100067E10();
  }

  else
  {
    sub_1000B745C(v7[3], (uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t, void))(v10 + 16));
    sub_100067E10();
  }

  return sub_10000EA08((uint64_t (*)(void))v9[1]);
}

uint64_t sub_1000A9078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  return sub_100067ABC((uint64_t)sub_1000A9090);
}

uint64_t sub_1000A9090()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = swift_task_alloc(64LL);
  *(void *)(v0 + 64) = v5;
  __int128 v6 = *(_OWORD *)(v0 + 40);
  *(void *)(v5 + 16) = v1;
  *(void *)(v5 + 24) = v4;
  *(void *)(v5 + 3sub_100096760(v0[56], v0 + 2) = v3;
  *(void *)(v5 + 40) = v2;
  *(_OWORD *)(v5 + 48) = v6;
  *(void *)(v0 + 7sub_100096760(v0[56], v0 + 2) = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  uint64_t v7 = (void *)swift_task_alloc(dword_100133594);
  *(void *)(v0 + 80) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1000A9140;
  uint64_t v8 = sub_1000B6C58();
  return sub_1000A3BE8(v8, v9, v10, v11, v12);
}

uint64_t sub_1000A9140()
{
  *(void *)(v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    sub_10000EA88();
    return sub_10000AE28();
  }

  else
  {

    sub_10000AF6C();
    uint64_t v5 = sub_1000B6E48();
    return sub_1000B6338(v5, v6);
  }

uint64_t sub_1000A919C()
{
  sub_10000AF6C();
  return sub_10000C914(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000A91CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[3] = a2;
  v7[4] = a7;
  v7[2] = a1;
  uint64_t v12 = sub_100008DB0(&qword_100131268);
  v7[5] = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for LNAppShortcutParameterRecord(0LL);
  v7[6] = v13;
  v7[7] = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = (void *)swift_task_alloc(dword_1001335C4);
  v7[8] = v14;
  *uint64_t v14 = v7;
  v14[1] = sub_1000A9298;
  return sub_1000A88DC(a3, a4, a5, a6);
}

uint64_t sub_1000A9298()
{
  v0[9] = v3;
  v0[10] = v1;
  sub_10004C0C4(v4);
  if (v1)
  {
    swift_task_dealloc(v0[7]);
    sub_10000AFA8();
    return sub_10000EA08(*(uint64_t (**)(void))(v2 + 8));
  }

  else
  {
    sub_10000EA88();
    return sub_10004BEA0();
  }

uint64_t sub_1000A92F8()
{
  uint64_t v1 = *(void *)(v0 + 80);
  id v2 = [*(id *)(v0 + 72) parameters];
  sub_1000B67F8((uint64_t)v2, &qword_1001309A8, &OBJC_CLASS___LNProperty_ptr);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  unint64_t v34 = v4;
  sub_100052DB0();
  if (!v1)
  {
    sub_1000B6D2C(*(void *)(v0 + 40), 1LL, *(void *)(v0 + 48));
    if (v6)
    {
      uint64_t v7 = *(void **)(v0 + 72);
      uint64_t v8 = sub_10000AEE8();
      sub_1000B7650(v8, &qword_100131268);
      uint64_t v9 = type metadata accessor for RegistryError(0LL);
      sub_100067940((unint64_t *)&unk_1001332D0, type metadata accessor for RegistryError);
      sub_100038AC8(v9, v10);
      sub_1000338B4();
      uint64_t v11 = sub_1000B7E80();
      v12(v11);
      uint64_t v13 = sub_10001BF00();
      swift_storeEnumTagMultiPayload(v13, v14, 2LL);
      sub_1000B6D9C();

      goto LABEL_6;
    }

    uint64_t v17 = *(void *)(v0 + 56);
    uint64_t v18 = sub_1000B7658();
    sub_100084248(v18, v19, v20);
    unint64_t v21 = sub_1000B703C();
    *(void *)(v21 + 16) = v17;
    sub_1000B2168(sub_1000B42D4, v21);
    uint64_t v23 = v22;
    if (v34 >> 62)
    {
      sub_10000AE38();
      id v25 = (id)sub_10006CA28();
      sub_10000ADB0();
    }

    else
    {
      unint64_t v24 = v34 & 0xFFFFFFFFFFFFF8LL;
      id v25 = *(id *)((v34 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    if ((uint64_t)v25 < v23)
    {
      __break(1u);
    }

    else
    {
      uint64_t v27 = *(void *)(v0 + 48);
      uint64_t v26 = *(void *)(v0 + 56);
      sub_1000B69C4();
      sub_1000B0990();
      sub_10004D884();
      id v25 = *(id *)(v26 + *(int *)(v27 + 36));
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v25);
      unint64_t v21 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v24 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v21 < v24 >> 1)
      {
LABEL_12:
        uint64_t v28 = *(void **)(v0 + 72);
        uint64_t v29 = *(void *)(v0 + 56);
        uint64_t v30 = *(void **)(v0 + 16);
        uint64_t v31 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v25);
        specialized Array._endMutation()(v31);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        sub_10000ADB0();
        id v33 = sub_1000B7860(v28, "actionWithParameters:");

        sub_100058D54(v29, type metadata accessor for LNAppShortcutParameterRecord);
        *uint64_t v30 = v33;
        sub_100067F4C();
        sub_10004D844();
        uint64_t v15 = (uint64_t (*)(void))sub_1000681B8();
        return v15();
      }
    }

    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v21 + 1, 1LL);
    goto LABEL_12;
  }

  uint64_t v5 = *(void **)(v0 + 72);
  sub_10000AEE8();

LABEL_6:
  swift_task_dealloc(*(void *)(v0 + 56));
  sub_10000AF6C();
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t sub_1000A9650(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, void *a5)
{
  uint64_t v5[2] = a5;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  v5[3] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[4] = v12;
  uint64_t v13 = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  void v5[5] = v13;
  v5[6] = _Block_copy(a4);
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v16 = v15;
  v5[7] = v15;
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v19 = v18;
  v5[8] = v18;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v20 = dword_1001335AC;
  a5;
  unint64_t v21 = (void *)swift_task_alloc(v20);
  v5[9] = v21;
  void *v21 = v5;
  v21[1] = sub_1000A9750;
  return sub_1000A9078(v14, v16, v17, v19, v13);
}

uint64_t sub_1000A9750( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18)
{
  a17 = v20;
  a18 = v21;
  a16 = v19;
  uint64_t v22 = v18;
  unint64_t v24 = v23;
  id v25 = (void *)*v19;
  a16 = v25;
  sub_10004BEB8(v25[9], &a16);
  uint64_t v26 = (void (**)(void, void, void))v25[6];
  uint64_t v27 = (void *)v25[2];
  sub_10000AF40(v25[4]);

  sub_10001BE7C();
  sub_10000AEE8();
  if (v22)
  {
    uint64_t v28 = (void *)_convertErrorToNSError(_:)(v22);
    sub_10000AD70();
    ((void (**)(void, void, void *))v26)[2](v26, 0LL, v28);

    _Block_release(v26);
  }

  else
  {
    sub_1000B745C((uint64_t)v26, (uint64_t)v24, (uint64_t (*)(uint64_t, uint64_t, void))v26[2]);
    _Block_release(v26);
  }

  swift_task_dealloc(v25[5]);
  sub_1000B7110();
  return v29(v29, v30, v31, v32, v33, v34, v35, v36, a9, a10);
}

uint64_t sub_1000A981C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[8] = a7;
  v8[9] = v7;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  return sub_100067ABC((uint64_t)sub_1000A9838);
}

uint64_t sub_1000A9838()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  __int128 v13 = *(_OWORD *)(v0 + 16);
  __int128 v14 = *(_OWORD *)(v0 + 32);
  uint64_t v5 = swift_task_alloc(80LL);
  *(void *)(v0 + 80) = v5;
  *(void *)(v5 + 16) = v2;
  *(_OWORD *)(v5 + 24) = v13;
  *(void *)(v5 + 40) = v4;
  *(void *)(v5 + 48) = v3;
  *(_OWORD *)(v5 + 56) = v14;
  *(void *)(v5 + 7sub_100096760(v0[56], v0 + 2) = v1;
  *(void *)(v0 + 88) = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  char v6 = (void *)swift_task_alloc(dword_100133594);
  *(void *)(v0 + 96) = v6;
  *char v6 = v0;
  v6[1] = sub_1000A9900;
  uint64_t v7 = sub_1000B6C58();
  return sub_1000A3BE8(v7, v8, v9, v10, v11);
}

uint64_t sub_1000A9900()
{
  if (v0)
  {
    sub_10000EA88();
    return sub_10000AE28();
  }

  else
  {

    sub_10000AF6C();
    uint64_t v3 = sub_1000B6E48();
    return sub_1000B6338(v3, v4);
  }

uint64_t sub_1000A994C()
{
  sub_10000AF6C();
  return sub_10000C914(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000A997C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[25] = a8;
  v8[26] = v17;
  v8[23] = a6;
  v8[24] = a7;
  v8[21] = a4;
  v8[22] = a5;
  v8[19] = a2;
  v8[20] = a3;
  v8[18] = a1;
  uint64_t v9 = sub_100008DB0(&qword_100131268);
  v8[27] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for LNAppShortcutParameterRecord(0LL);
  v8[28] = v10;
  v8[29] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100008DB0((uint64_t *)&unk_100132900);
  v8[30] = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  v8[31] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v8[32] = v13;
  v8[33] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Logger(0LL);
  v8[34] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v8[35] = v15;
  v8[36] = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000A9AB0, 0LL, 0LL);
}

uint64_t sub_1000A9AB0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  a25 = v27;
  a26 = v28;
  a24 = v26;
  uint64_t v29 = *(void *)(v26 + 176);
  uint64_t v30 = *(void *)(v26 + 184);
  uint64_t v31 = *(void *)(v26 + 160);
  uint64_t v32 = *(void *)(v26 + 168);
  *(void *)(v26 + 296) = *(void *)(*(void *)(v26 + 152) + OBJC_IVAR____TtC10LinkDaemon8Registry_store);
  uint64_t v33 = sub_10004F0A8(v31, v32, v29, v30);
  *(void *)(v26 + 304) = v33;
  *(void *)(v26 + 31sub_100096760(v0[56], v0 + 2) = 0LL;
  uint64_t v34 = (void *)v33;
  uint64_t v35 = (void *)objc_opt_self(&OBJC_CLASS___LNConnectionPolicy);
  id v36 = sub_1000B7860(v35, "policyWithActionMetadata:");
  *(void *)(v26 + 120) = 0LL;
  id v37 = [v36 connectionWithError:v26 + 120];
  *(void *)(v26 + 320) = v37;

  uint64_t v38 = *(void **)(v26 + 120);
  if (v37)
  {
    id v39 = v38;
    *(void *)(v26 + 328) = sub_1000B7F1C();
    *(void *)(v26 + 56) = v26 + 136;
    uint64_t v40 = sub_1000B6FFC((uint64_t)sub_1000A9DFC);
    *(void *)(v26 + 80) = _NSConcreteStackBlock;
    id v41 = (void *)(v26 + 80);
    v41[1] = 0x40000000LL;
    v41[2] = sub_1000A869C;
    v41[3] = &unk_100125BB0;
    v41[4] = v40;
    sub_1000B7910(v40, "fetchActionForAutoShortcutPhrase:completionHandler:");
    return sub_1000B6CD8();
  }

  else
  {
    uint64_t v43 = *(void **)(v26 + 152);
    id v44 = v38;
    sub_1000B7F58();
    sub_1000B7FA8();
    sub_1000B6D9C();
    sub_1000B69A8();
    uint64_t v45 = qword_100130330;
    id v46 = v43;
    if (v45 != -1) {
      id v46 = (id)swift_once(&qword_100130330, sub_100091538);
    }
    BOOL v47 = *(os_log_s **)(v26 + 288);
    uint64_t v48 = *(void *)(v26 + 168);
    uint64_t v49 = *(void **)(v26 + 152);
    sub_1000B6794((uint64_t)v46, (uint64_t)qword_100135860);

    uint64_t v50 = sub_100011A3C(v48);
    Logger.logObject.getter(v50);
    os_log_type_t v51 = sub_10000AF38();
    BOOL v52 = sub_1000B6908(v47);
    uint64_t v54 = *(void *)(v26 + 280);
    uint64_t v53 = *(void *)(v26 + 288);
    uint64_t v55 = *(void *)(v26 + 168);
    if (v52)
    {
      uint64_t v56 = *(void *)(v26 + 160);
      uint64_t v69 = *(void *)(v26 + 272);
      uint64_t v57 = (uint8_t *)sub_10000AE10(12LL);
      uint64_t v68 = v53;
      uint64_t v58 = sub_10000AE10(32LL);
      a14 = v58;
      *(_DWORD *)uint64_t v57 = 136315138;
      sub_10001C1BC();
      *(void *)(v26 + 128) = sub_100027FA8(v56, v59, &a14);
      sub_1000B7AB4(v26 + 128, v26 + 136);
      sub_100027E5C(v55);
      sub_10000AF5C((void *)&_mh_execute_header, v47, v51, "Could not open connection to app: %s", v57);
      sub_10000AF48(v58);
      sub_10000AD78(v58);
      sub_10000AD78((uint64_t)v57);

      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v68, v69);
    }

    else
    {
      sub_10001191C(*(void *)(v26 + 168));

      uint64_t v60 = sub_1000B6878();
      v62(v60, v61);
    }

    uint64_t v64 = *(void *)(v26 + 160);
    uint64_t v63 = *(void *)(v26 + 168);
    uint64_t v65 = type metadata accessor for RegistryError(0LL);
    sub_100067940((unint64_t *)&unk_1001332D0, type metadata accessor for RegistryError);
    sub_100038AC8(v65, v66);
    void *v67 = v64;
    v67[1] = v63;
    swift_storeEnumTagMultiPayload(v67, v65, 1LL);
    sub_10001BEF8();
    sub_1000592C0();

    sub_1000B7418();
    sub_10000AFA8();
    sub_10004D844();
    sub_10004D858();
    sub_10004D884();
    return sub_100067B54(*(uint64_t (**)(void))(v26 + 8));
  }

uint64_t sub_1000A9DFC()
{
  *(void *)(v0 + 336) = v1;
  sub_10000EA88();
  return sub_10000E998();
}

uint64_t sub_1000A9E7C()
{
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v2 = *(void **)(v0 + 136);

  uint64_t v3 = sub_1000B7608();
  sub_100026CB8(v3, v4, v5);
  uint64_t v6 = sub_1000B7014();
  sub_1000B6D2C(v6, v7, v1);
  if (!v8)
  {
    uint64_t v13 = *(void *)(v0 + 312);
    id v14 = *(id *)(v0 + 216);
    uint64_t v15 = (*(uint64_t (**)(void, void, void))(*(void *)(v0 + 256) + 32LL))( *(void *)(v0 + 264),  *(void *)(v0 + 240),  *(void *)(v0 + 248));
    id v16 = sub_10003F9CC(v15, "parameters");
    sub_1000B67F8((uint64_t)v16, &qword_1001309A8, &OBJC_CLASS___LNProperty_ptr);
    uint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);

    sub_100052DB0();
    if (v13)
    {
      uint64_t v19 = *(void **)(v0 + 304);

      sub_10001BEC0();
      uint64_t v20 = sub_1000B7658();
LABEL_10:
      v22(v20, v21);
      sub_1000B742C();
      sub_10000AF6C();
      sub_10000AFA8();
      sub_10004D844();
      sub_10004D858();
      uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
      return sub_1000B6C3C(v12);
    }

    uint64_t v23 = *(void *)(v0 + 216);
    uint64_t v24 = sub_1000B7014();
    sub_1000B6D2C(v24, v25, v26);
    if (v8)
    {
      uint64_t v27 = *(void **)(v0 + 320);
      uint64_t v28 = *(void **)(v0 + 304);
      uint64_t v30 = *(void *)(v0 + 256);
      uint64_t v29 = *(void *)(v0 + 264);
      uint64_t v31 = *(void *)(v0 + 248);
      uint64_t v32 = sub_10001BEC0();
      sub_1000B7E64(v32, &qword_100131268);
      sub_1000B6C88();
      sub_100067940((unint64_t *)&unk_1001332D0, type metadata accessor for RegistryError);
      sub_1000B6324(v33);
      uint64_t v35 = v34;
      sub_100067EF8(v34, v29, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16));
      uint64_t v36 = swift_storeEnumTagMultiPayload(v35, v23, 2LL);
      swift_willThrow(v36);

      uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
      uint64_t v20 = v29;
      uint64_t v21 = v31;
      goto LABEL_10;
    }

    uint64_t v38 = *(void *)(v0 + 232);
    uint64_t v39 = sub_10001BF00();
    sub_100084248(v39, v40, v41);
    uint64_t v42 = sub_1000B703C();
    *(void *)(v42 + 16) = v38;
    sub_1000B2168(sub_1000B6230, v42);
    int64_t v44 = v43;
    if ((unint64_t)v18 >> 62)
    {
      if (v18 < 0) {
        uint64_t v57 = v18;
      }
      else {
        uint64_t v57 = v18 & 0xFFFFFFFFFFFFFF8LL;
      }
      sub_10000AE38();
      uint64_t v46 = _CocoaArrayWrapper.endIndex.getter(v57);
      unint64_t v43 = sub_10000ADB0();
    }

    else
    {
      unint64_t v45 = v18 & 0xFFFFFFFFFFFFF8LL;
      uint64_t v46 = *(void *)((v18 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    if (v46 < v44)
    {
      __break(1u);
    }

    else
    {
      uint64_t v48 = *(void *)(v0 + 224);
      uint64_t v47 = *(void *)(v0 + 232);
      sub_1000B7EB0();
      sub_1000B0990();
      sub_100059648();
      id v14 = *(id *)(v47 + *(int *)(v48 + 36));
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v14);
      unint64_t v43 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v45 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v43 < v45 >> 1)
      {
LABEL_16:
        uint64_t v49 = *(void **)(v0 + 320);
        uint64_t v50 = *(void **)(v0 + 304);
        uint64_t v51 = *(void *)(v0 + 256);
        uint64_t v52 = *(void *)(v0 + 264);
        uint64_t v53 = *(void *)(v0 + 248);
        uint64_t v59 = *(void *)(v0 + 232);
        uint64_t v60 = *(void **)(v0 + 144);
        uint64_t v54 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v43, v14);
        specialized Array._endMutation()(v54);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        sub_10000ADB0();
        id v56 = [v2 actionWithParameters:isa];

        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v52, v53);
        sub_100058D54(v59, type metadata accessor for LNAppShortcutParameterRecord);
        *uint64_t v60 = v56;
        goto LABEL_4;
      }
    }

    unint64_t v58 = v43;
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v43 + 1, 1LL);
    unint64_t v43 = v58;
    goto LABEL_16;
  }

  uint64_t v9 = *(void **)(v0 + 304);
  uint64_t v10 = *(void **)(v0 + 144);

  sub_1000B7650(v11, (uint64_t *)&unk_100132900);
  *uint64_t v10 = v2;
LABEL_4:
  sub_1000B742C();
  sub_10000AF6C();
  sub_10000AFA8();
  sub_10004D844();
  sub_10004D858();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return sub_1000B6C3C(v12);
}

uint64_t sub_1000AA24C(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 328);
  uint64_t v3 = *(void **)(v1 + 320);
  uint64_t v4 = *(void **)(v1 + 304);
  swift_willThrow(a1);

  sub_1000B7418();
  sub_10000AFA8();
  sub_10004D844();
  sub_10004D858();
  sub_10004D884();
  return sub_1000B6AC8(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1000AA2DC(id *a1, uint64_t a2)
{
  id v3 = [*a1 identifier];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  id v7 =  [*(id *)(a2 + *(int *)(type metadata accessor for LNAppShortcutParameterRecord(0) + 36)) identifier];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v10 = v9;

  if (v4 == v8 && v6 == v10) {
    char v12 = 1;
  }
  else {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v8, v10, 0LL);
  }
  sub_10000ADB0();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

uint64_t sub_1000AA448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, void *a6)
{
  v6[2] = a6;
  uint64_t v13 = sub_100008DB0((uint64_t *)&unk_100132900);
  uint64_t v14 = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v6[3] = v14;
  v6[4] = _Block_copy(a5);
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v17 = v16;
  v6[5] = v16;
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v20 = v19;
  v6[6] = v19;
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v23 = v22;
  v6[7] = v22;
  if (a4)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(a4);
    uint64_t v24 = 0LL;
  }

  else
  {
    uint64_t v24 = 1LL;
  }

  uint64_t v25 = type metadata accessor for UUID(0LL);
  sub_100009E60(v14, v24, 1LL, v25);
  uint64_t v26 = dword_10013357C;
  a6;
  uint64_t v27 = (void *)swift_task_alloc(v26);
  v6[8] = v27;
  *uint64_t v27 = v6;
  v27[1] = sub_1000AA598;
  return sub_1000A981C(v15, v17, v18, v20, v21, v23, v14);
}

uint64_t sub_1000AA598(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = (void *)*v2;
  uint64_t v14 = v5;
  uint64_t v6 = (void *)*v2;
  sub_10004BEB8(v5[8], &v14);
  id v7 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v5[4];
  uint64_t v8 = (void *)v5[2];
  sub_100026E14(v5[3], (uint64_t *)&unk_100132900);

  sub_10001BE7C();
  sub_10000AEE8();
  sub_10001BEC0();
  if (v3)
  {
    uint64_t v9 = (void *)_convertErrorToNSError(_:)(v3);
    sub_10000AD70();
    sub_10003EE9C((uint64_t)v7, 0LL, v7[2]);

    _Block_release(v7);
  }

  else
  {
    uint64_t v10 = sub_10000AF9C();
    sub_1000B745C(v10, v11, v12);
    _Block_release(v7);
  }

  swift_task_dealloc(v5[3]);
  return sub_10000EA08((uint64_t (*)(void))v6[1]);
}

uint64_t sub_1000AA670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  void v5[5] = a3;
  v5[3] = a1;
  uint64_t v6 = sub_10000E918();
  v5[8] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[9] = v7;
  v5[10] = sub_1000B6B04(*(void *)(v7 + 64));
  sub_10000EA88();
  return sub_10000E998();
}

uint64_t sub_1000AA6C0()
{
  uint64_t v1 = qword_100130330;
  id v2 = *(id *)(v0 + 56);
  if (v1 == -1)
  {
    uint64_t v3 = v2;
  }

  else
  {
    swift_once(&qword_100130330, sub_100091538);
    uint64_t v3 = *(void **)(v0 + 56);
  }

  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 32);
  uint64_t v7 = sub_100008D98(*(void *)(v0 + 64), (uint64_t)qword_100135860);
  sub_1000B69D0(v4, v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));

  sub_100011A3C(v6);
  sub_10006801C();
  os_log_type_t v8 = sub_100041BDC();
  BOOL v9 = sub_100067CA8(v8);
  uint64_t v11 = *(void *)(v0 + 72);
  uint64_t v10 = *(void *)(v0 + 80);
  unint64_t v12 = *(void *)(v0 + 32);
  if (v9)
  {
    uint64_t v13 = *(void *)(v0 + 24);
    uint64_t v33 = *(void *)(v0 + 64);
    uint64_t v14 = (uint8_t *)sub_10000AE10(12LL);
    uint64_t v32 = v10;
    uint64_t v15 = sub_10000AE10(32LL);
    uint64_t v34 = v15;
    *(_DWORD *)uint64_t v14 = 136315138;
    sub_10001BCF8();
    *(void *)(v0 + 16) = sub_10000DE60(v13, v12, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v14 + 4, v14 + 12);
    sub_1000B6460();
    sub_10000AF5C( (void *)&_mh_execute_header,  (os_log_s *)v3,  (os_log_type_t)v6,  "Handling request for AppShortcut lookup with bundleIdentifier: %s",  v14);
    sub_10000AF48(v15);
    sub_10000AD78(v15);
    sub_10000AD78((uint64_t)v14);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v32, v33);
  }

  else
  {
    sub_10001191C(*(void *)(v0 + 32));

    uint64_t v16 = sub_1000B6F6C();
    v18(v16, v17);
  }

  uint64_t v19 = *(void **)(v0 + 56);
  objc_opt_self(&OBJC_CLASS___NSXPCConnection);
  id v20 = v19;
  sub_10000AFB0();
  uint64_t v21 = sub_10000AE38();
  *(void *)(v0 + 88) = sub_100028058(v21, "currentConnection");
  uint64_t v22 = (void *)swift_task_alloc(dword_10013355C);
  *(void *)(v0 + 96) = v22;
  *uint64_t v22 = v0;
  v22[1] = sub_1000A9900;
  uint64_t v23 = sub_1000B62A8();
  return sub_1000A402C(v23, v24, v25, v26, v27, v28, v29, v30);
}

uint64_t sub_1000AA904(void *a1, int a2, void *a3, void *a4, void *aBlock, uint64_t a6)
{
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = (void *)sub_10000C254(a6, 48LL);
  v11[2] = a3;
  v11[3] = a4;
  v11[4] = v10;
  v11[5] = a1;
  id v12 = a3;
  id v13 = a4;
  id v14 = a1;
  uint64_t v15 = sub_10000AF9C();
  return sub_100067D00(v15, v16);
}

uint64_t sub_1000AA968(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v10 = v9;
  void v4[4] = v9;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v13 = v12;
  v4[5] = v12;
  uint64_t v14 = dword_10013354C;
  a4;
  uint64_t v15 = (void *)swift_task_alloc(v14);
  v4[6] = v15;
  *uint64_t v15 = v4;
  v15[1] = sub_1000AAA1C;
  return sub_1000AA670(v8, v10, v11, v13);
}

uint64_t sub_1000AAA1C()
{
  uint64_t v10 = v2;
  uint64_t v11 = v3;
  uint64_t v9 = v1;
  uint64_t v9 = (void *)*v1;
  uint64_t v4 = (void *)v9[4];
  uint64_t v5 = (void *)v9[2];
  uint64_t v6 = *v1;
  sub_10004BEB8(v9[6], &v9);

  sub_100011958();
  uint64_t v7 = sub_10001BE7C();
  if (v0)
  {
    sub_1000680A0();
    sub_1000B650C();
    sub_1000B6BF8();
  }

  else
  {
    sub_1000B67F8(v7, &qword_100132D50, &OBJC_CLASS___LNAutoShortcut_ptr);
    sub_1000B68FC();
    sub_10000ADB0();
    sub_1000B6BEC();
  }

  sub_100067C94();

  sub_100067E10();
  return sub_10000EA08(*(uint64_t (**)(void))(v6 + 8));
}

uint64_t sub_1000AAAC8(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = sub_10000E918();
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = sub_1000B6B04(*(void *)(v5 + 64));
  sub_10000EA88();
  return sub_10000E998();
}

uint64_t sub_1000AAB14()
{
  uint64_t v1 = qword_100130330;
  id v2 = *(id *)(v0 + 32);
  if (v1 == -1)
  {
    uint64_t v3 = v2;
  }

  else
  {
    swift_once(&qword_100130330, sub_100091538);
    uint64_t v3 = *(void **)(v0 + 32);
  }

  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v7 = sub_100008D98(v6, (uint64_t)qword_100135860);
  sub_1000B69D0(v4, v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));

  sub_10006801C();
  os_log_type_t v8 = sub_100041BDC();
  if (sub_100068360(v8))
  {
    uint64_t v9 = (_WORD *)sub_10000AE10(2LL);
    sub_1000B6EA4(v9);
    sub_1000B6604((void *)&_mh_execute_header, v10, v11, "Handling request for all AppShortcuts");
    sub_10000AD78(v6);
  }

  uint64_t v12 = *(void *)(v0 + 48);
  uint64_t v13 = *(void **)(v0 + 32);

  sub_1000B66A8(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
  objc_opt_self(&OBJC_CLASS___NSXPCConnection);
  id v14 = v13;
  uint64_t v15 = sub_10001C064();
  *(void *)(v0 + 64) = sub_100011ABC(v15, "currentConnection");
  uint64_t v16 = (void *)swift_task_alloc(dword_10013352C);
  *(void *)(v0 + 7sub_100096760(v0[56], v0 + 2) = v16;
  void *v16 = v0;
  v16[1] = sub_1000AAC54;
  uint64_t v17 = sub_1000B62A8();
  return sub_1000A44FC(v17, v18, v19, v20, v21, v22, v23);
}

uint64_t sub_1000AAC54()
{
  *(void *)(v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    sub_10000EA88();
    return sub_10000AE28();
  }

  else
  {

    sub_10000AF6C();
    uint64_t v5 = sub_1000B6E48();
    return sub_1000B6338(v5, v6);
  }

uint64_t sub_1000AACB0()
{
  sub_10000AF6C();
  return sub_10000C914(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000AACF4(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v8 = v7;
  v3[4] = v7;
  uint64_t v9 = dword_10013351C;
  a3;
  uint64_t v10 = (void *)swift_task_alloc(v9);
  v3[5] = v10;
  *uint64_t v10 = v3;
  v10[1] = sub_1000AAD80;
  return sub_1000AAAC8(v6, v8);
}

uint64_t sub_1000AAD80( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16)
{
  a15 = v18;
  a16 = v19;
  a14 = v17;
  a14 = (void *)*v17;
  uint64_t v20 = (void *)a14[2];
  uint64_t v21 = *v17;
  sub_10004BEB8(a14[5], &a14);

  sub_100011958();
  if (v16)
  {
    sub_1000680A0();
    sub_1000B650C();
    sub_100068420();
  }

  else
  {
    sub_100008DB0(&qword_100133520);
    sub_1000B6D08();
    sub_10000ADB0();
    sub_100068488();
  }

  sub_100067C94();

  sub_100067E10();
  return sub_100067B00(*(uint64_t (**)(void))(v21 + 8));
}

uint64_t sub_1000AAE24(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = sub_10000E918();
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = sub_1000B6B04(*(void *)(v4 + 64));
  sub_10000EA88();
  return sub_10000E998();
}

uint64_t sub_1000AAE6C()
{
  uint64_t v1 = qword_100130330;
  id v2 = *(id *)(v0 + 24);
  if (v1 == -1)
  {
    uint64_t v3 = v2;
  }

  else
  {
    swift_once(&qword_100130330, sub_100091538);
    uint64_t v3 = *(void **)(v0 + 24);
  }

  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v6 = *(void *)(v0 + 32);
  uint64_t v7 = sub_100008D98(v6, (uint64_t)qword_100135860);
  sub_1000B69D0(v4, v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));

  sub_10006801C();
  os_log_type_t v8 = sub_100041BDC();
  if (sub_100068360(v8))
  {
    uint64_t v9 = (_WORD *)sub_10000AE10(2LL);
    sub_1000B6EA4(v9);
    sub_1000B6604((void *)&_mh_execute_header, v10, v11, "Handling request for App Shortcut properties");
    sub_10000AD78(v6);
  }

  uint64_t v12 = *(void *)(v0 + 40);
  uint64_t v13 = *(void **)(v0 + 24);

  sub_1000B66A8(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
  objc_opt_self(&OBJC_CLASS___NSXPCConnection);
  id v14 = v13;
  uint64_t v15 = sub_10001C064();
  id v16 = sub_100011ABC(v15, "currentConnection");
  sub_1000B796C((uint64_t)v16);
  uint64_t v17 = (void *)swift_task_alloc(dword_1001334EC);
  *(void *)(v0 + 64) = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_1000AAFA4;
  uint64_t v18 = sub_1000B62A8();
  return sub_1000A4998(v18, v19, v20, v21, v22, v23);
}

uint64_t sub_1000AAFA4()
{
  if (v0)
  {
    sub_10000EA88();
    return sub_10000AE28();
  }

  else
  {

    sub_10000AF6C();
    uint64_t v3 = sub_1000B6E48();
    return sub_1000B6338(v3, v4);
  }

uint64_t sub_1000AAFF0()
{
  sub_10000AF6C();
  return sub_10000C914(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000AB020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for LNAppShortcutParameterRecord(0LL);
  v3[8] = v6;
  v3[9] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)(sub_100008DB0(&qword_100131268) - 8);
  v3[10] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[11] = swift_task_alloc(v8);
  v3[12] = swift_task_alloc(v8);
  return swift_task_switch(sub_1000AB0E0, 0LL, 0LL);
}

unint64_t sub_1000AB0E0()
{
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2)
  {
LABEL_16:
    uint64_t v38 = *(void **)(v0 + 16);
    sub_10001DF40();
    *uint64_t v38 = _swiftEmptyDictionarySingleton;
    sub_10000AFA8();
    sub_10004D844();
    sub_10004D858();
    sub_10004D884();
    uint64_t v39 = (uint64_t (*)(void))sub_1000681B8();
    return sub_100067B54(v39);
  }

  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v42 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v6 = *(void *)(v3 + 72);
  sub_10001C1BC();
  uint64_t v40 = v6;
  uint64_t v41 = v4;
  while (1)
  {
    uint64_t v8 = *(void *)(v0 + 88);
    uint64_t v7 = *(void *)(v0 + 96);
    uint64_t v9 = *(void *)(v0 + 64);
    uint64_t v10 = sub_1000B7E80();
    sub_100026CB8(v10, v11, &qword_100131268);
    sub_100026CB8(v7, v8, &qword_100131268);
    int v12 = sub_100009E6C(v8, 1LL, v9);
    uint64_t v13 = *(void *)(v0 + 88);
    if (v12 == 1)
    {
      sub_100026E14(v13, &qword_100131268);
      goto LABEL_14;
    }

    uint64_t v14 = *(void *)(v0 + 72);
    uint64_t v15 = *(void *)(v0 + 56);
    uint64_t v16 = *(void *)(v0 + 40);
    sub_100084248(v13, v14, type metadata accessor for LNAppShortcutParameterRecord);
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    v17(v15, v14, v16);
    id v18 = *(id *)(v14 + *(int *)(v42 + 36));
    char v19 = sub_100047370();
    unint64_t result = sub_100016144(v15);
    uint64_t v22 = _swiftEmptyDictionarySingleton[2];
    BOOL v23 = (v21 & 1) == 0;
    Swift::Int v24 = v22 + v23;
    if (__OFADD__(v22, v23)) {
      break;
    }
    unint64_t v25 = result;
    char v26 = v21;
    sub_100008DB0(&qword_100133500);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v19, v24))
    {
      unint64_t v27 = sub_100016144(*(void *)(v0 + 56));
      if ((v26 & 1) != (v28 & 1)) {
        return sub_1000B6CBC();
      }
      unint64_t v25 = v27;
    }

    if ((v26 & 1) != 0)
    {
      uint64_t v29 = _swiftEmptyDictionarySingleton[7];

      *(void *)(v29 + 8 * v25) = v18;
      uint64_t v4 = v41;
    }

    else
    {
      uint64_t v30 = *(void *)(v0 + 56);
      uint64_t v31 = *(void *)(v0 + 40);
      _swiftEmptyDictionarySingleton[(v25 >> 6) + 8] |= 1LL << v25;
      uint64_t v4 = v41;
      unint64_t result = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v17)( _swiftEmptyDictionarySingleton[6] + *(void *)(v41 + 72) * v25,  v30,  v31);
      *(void *)(_swiftEmptyDictionarySingleton[7] + 8 * v25) = v18;
      uint64_t v32 = _swiftEmptyDictionarySingleton[2];
      BOOL v33 = __OFADD__(v32, 1LL);
      uint64_t v34 = v32 + 1;
      if (v33) {
        goto LABEL_19;
      }
      _swiftEmptyDictionarySingleton[2] = v34;
    }

    uint64_t v35 = *(void *)(v0 + 72);
    sub_10006C9B8();
    uint64_t v36 = sub_1000B7958();
    v37(v36);
    sub_100058D54(v35, type metadata accessor for LNAppShortcutParameterRecord);
    uint64_t v6 = v40;
LABEL_14:
    sub_100026E14(*(void *)(v0 + 96), &qword_100131268);
    v5 += v6;
    if (!--v2)
    {
      sub_10001DF40();
      goto LABEL_16;
    }
  }

  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_1000AB3B8(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  v3[4] = v6;
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, v6);
  v3[5] = v7;
  uint64_t v8 = dword_1001334E4;
  a3;
  uint64_t v9 = (void *)swift_task_alloc(v8);
  v3[6] = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_1000AB44C;
  return sub_1000AAE24(v7);
}

uint64_t sub_1000AB44C()
{
  uint64_t v3 = *(void **)(v2 + 16);
  uint64_t v4 = *v1;
  sub_10004BEB8(*(void *)(v2 + 48), v5);

  uint64_t v6 = sub_100011958();
  if (v0)
  {
    sub_1000680A0();
    sub_1000B650C();
    sub_100068420();
  }

  else
  {
    sub_1000B67F8(v6, &qword_1001309A8, &OBJC_CLASS___LNProperty_ptr);
    sub_100067940(&qword_100130E40, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    sub_1000B79D0();
    Dictionary._bridgeToObjectiveC()();
    sub_10000ADB0();
    sub_100068488();
  }

  sub_100067C94();

  sub_100067E10();
  return sub_100067B00(*(uint64_t (**)(void))(v4 + 8));
}

uint64_t sub_1000AB508(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100067ABC((uint64_t)sub_1000AB51C);
}

uint64_t sub_1000AB51C()
{
  uint64_t v1 = sub_10000AE38();
  id v2 = sub_10003F9CC(v1, "currentConnection");
  sub_1000B6CF4((uint64_t)v2);
  uint64_t v3 = (void *)swift_task_alloc(dword_1001334CC);
  *(void *)(v0 + 48) = v3;
  void *v3 = v0;
  v3[1] = sub_10008FAD0;
  uint64_t v4 = sub_1000B62A8();
  return sub_1000A4E08(v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000AB5B4(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v8 = v7;
  v3[4] = v7;
  uint64_t v9 = dword_1001334BC;
  a3;
  uint64_t v10 = (void *)swift_task_alloc(v9);
  v3[5] = v10;
  *uint64_t v10 = v3;
  v10[1] = sub_1000AB640;
  return sub_1000AB508(v6, v8);
}

uint64_t sub_1000AB640( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16)
{
  a15 = v18;
  a16 = v19;
  a14 = v17;
  a14 = (void *)*v17;
  uint64_t v20 = (void *)a14[2];
  uint64_t v21 = *v17;
  sub_10004BEB8(a14[5], &a14);

  uint64_t v22 = sub_100011958();
  if (v16)
  {
    sub_1000680A0();
    sub_1000B650C();
    sub_100068420();
  }

  else
  {
    sub_1000B67F8(v22, &qword_1001334C0, &OBJC_CLASS___LNRelevantIntent_ptr);
    sub_1000B68FC();
    sub_10000ADB0();
    sub_100068488();
  }

  sub_100067C94();

  sub_100067E10();
  return sub_100067B00(*(uint64_t (**)(void))(v21 + 8));
}

uint64_t sub_1000AB6D8()
{
  *(void *)(v1 + 16) = v0;
  return sub_100067ABC((uint64_t)sub_1000AB6E8);
}

uint64_t sub_1000AB6E8()
{
  id v1 = sub_1000B6D00();
  id v2 = sub_100011ABC((uint64_t)v1, "currentConnection");
  sub_1000B72E4((uint64_t)v2);
  uint64_t v3 = (void *)swift_task_alloc(dword_100133494);
  *(void *)(v0 + 3sub_100096760(v0[56], v0 + 2) = v3;
  void *v3 = v0;
  v3[1] = sub_1000AB75C;
  uint64_t v4 = sub_1000B62A8();
  return sub_1000A530C(v4, v5, v6, v7, v8);
}

uint64_t sub_1000AB75C()
{
  if (v0)
  {
    sub_10000EA88();
    return sub_10000AE28();
  }

  else
  {
    sub_1000B6F2C();
    uint64_t v2 = sub_1000B686C();
    return sub_1000B6338(v2, v3);
  }

uint64_t sub_1000AB7A0()
{
  return sub_10000C914(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000AB7CC(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_task_switch(sub_1000AB7E4, 0LL, 0LL);
}

uint64_t sub_1000AB7E4()
{
  unint64_t v1 = (unint64_t)sub_100058428(0LL, 0LL);
  if (v1 >> 62) {
    goto LABEL_26;
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  sub_10001BD0C();
  while (1)
  {
    unint64_t v37 = isUniquelyReferenced_nonNull_native;
    if (!v2) {
      break;
    }
    uint64_t v3 = 0LL;
    unint64_t v39 = v1 & 0xC000000000000001LL;
    uint64_t v4 = _swiftEmptyDictionarySingleton;
    unint64_t v38 = v1;
    while (1)
    {
      if (v39)
      {
        uint64_t v5 = sub_1000B7614();
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v6);
      }

      else
      {
        id v7 = *(id *)(v1 + 8 * v3 + 32);
      }

      uint64_t v8 = v7;
      if (__OFADD__(v3, 1LL)) {
        break;
      }
      uint64_t v40 = v3 + 1;
      id v9 = sub_100011ABC((uint64_t)v7, "bundleIdentifier");
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      uint64_t v12 = v11;

      id v13 = v8;
      unint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
      uint64_t v41 = v4;
      uint64_t v14 = sub_1000B79F8();
      uint64_t v16 = v4[2];
      BOOL v17 = (v15 & 1) == 0;
      Swift::Int v18 = v16 + v17;
      if (__OFADD__(v16, v17)) {
        goto LABEL_24;
      }
      unint64_t v1 = v14;
      char v19 = v15;
      sub_100008DB0(&qword_1001334A0);
      Swift::Bool v20 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v18);
      uint64_t v4 = v41;
      if (v20)
      {
        uint64_t v21 = sub_1000B79F8();
        if ((v19 & 1) != (v22 & 1)) {
          return sub_1000B6CBC();
        }
        unint64_t v1 = v21;
      }

      uint64_t v23 = sub_10006C9B8();
      if ((v19 & 1) == 0)
      {
        v41[(v1 >> 6) + 8] |= 1LL << v1;
        Swift::Int v24 = (uint64_t *)(v41[6] + 16 * v1);
        *Swift::Int v24 = v10;
        v24[1] = v12;
        *(void *)(v41[7] + 8 * sub_10000A21C(v0, v1) = _swiftEmptyArrayStorage;
        uint64_t v25 = v41[2];
        BOOL v26 = __OFADD__(v25, 1LL);
        uint64_t v27 = v25 + 1;
        if (v26) {
          goto LABEL_25;
        }
        v41[2] = v27;
        uint64_t v23 = sub_10001C1BC();
      }

      char v28 = (void *)(v41[7] + 8 * v1);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v23);
      unint64_t isUniquelyReferenced_nonNull_native = *(void *)((*v28 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v29 = *(void *)((*v28 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (isUniquelyReferenced_nonNull_native >= v29 >> 1)
      {
        BOOL v31 = sub_1000B7948(v29);
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31, v32, v33);
      }

      uint64_t v30 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)( isUniquelyReferenced_nonNull_native,  v13);
      specialized Array._endMutation()(v30);
      sub_10001DF40();

      ++v3;
      unint64_t v1 = v38;
      if (v40 == v2) {
        goto LABEL_21;
      }
    }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    sub_100011A3C(v1);
    uint64_t v2 = sub_10003EF5C();
    sub_10000AEE8();
  }

  uint64_t v4 = _swiftEmptyDictionarySingleton;
LABEL_21:
  uint64_t v34 = *(void **)(v37 + 16);
  sub_10001191C(v1);
  *uint64_t v34 = v4;
  uint64_t v35 = (uint64_t (*)(void))sub_1000681B8();
  return sub_100067B54(v35);
}

uint64_t sub_1000ABA60(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_100133484;
  a2;
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000ABAC0;
  return sub_1000AB6D8();
}

uint64_t sub_1000ABAC0()
{
  uint64_t v5 = *v1;
  uint64_t v2 = *(void **)(v5 + 16);
  uint64_t v3 = *v1;
  sub_10004BEB8(*(void *)(v5 + 32), &v5);

  if (v0)
  {
    sub_1000680A0();
    sub_1000B650C();
    sub_1000B6BF8();
  }

  else
  {
    sub_100008DB0(&qword_100133488);
    sub_1000B6D08();
    sub_10000ADB0();
    sub_1000B6BEC();
  }

  sub_100067C94();

  sub_100067E10();
  return sub_10000EA08(*(uint64_t (**)(void))(v3 + 8));
}

void sub_1000ABB68(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = sub_100008DB0(&qword_100133968);
  uint64_t inited = swift_initStackObject(v4, &v12);
  *(_OWORD *)(inited + 16) = xmmword_1000F5FF0;
  *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = 0xD000000000000010LL;
  *(void *)(inited + 40) = 0x80000001000F96E0LL;
  *(void *)(inited + 48) = String._bridgeToObjectiveC()();
  *(void *)(inited + 56) = 0xD000000000000010LL;
  *(void *)(inited + 64) = 0x80000001000FBEF0LL;
  id v6 = [a3 action];
  id v7 = [v6 identifier];

  if (v7)
  {
    *(void *)(inited + 7sub_100096760(v0[56], v0 + 2) = v7;
    strcpy((char *)(inited + 80), "relevanceType");
    *(_WORD *)(inited + 94) = -4864;
    id v8 = [a3 context];
    id v9 = [v8 analyticsDescription];

    if (v9)
    {
      *(void *)(inited + 96) = v9;
      *(void *)(inited + 104) = 0x694B746567646977LL;
      *(void *)(inited + 11sub_100096760(v0[56], v0 + 2) = 0xEA0000000000646ELL;
      sub_1000B25EC(a3, (SEL *)&selRef_widgetKind);
      NSString v10 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      *(void *)(inited + 120) = v10;
      sub_1000B5044(0LL, (unint64_t *)&qword_1001317F0, &OBJC_CLASS___NSObject_ptr);
      Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v11, &protocol witness table for String);
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

Class sub_1000ABD3C(uint64_t a1)
{
  unint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  if (v3)
  {
    sub_1000B5044(0LL, (unint64_t *)&qword_1001317F0, &OBJC_CLASS___NSObject_ptr);
    v4.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }

  else
  {
    v4.super.Class isa = 0LL;
  }

  return v4.super.isa;
}

uint64_t sub_1000ABDC0(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 3sub_100096760(v0[56], v0 + 2) = v3;
  *(_BYTE *)(v4 + 88) = a3;
  *(void *)(v4 + 16) = a1;
  return sub_100067ABC((uint64_t)sub_1000ABDD8);
}

uint64_t sub_1000ABDD8()
{
  unint64_t v1 = (char *)v0[4];
  uint64_t v2 = *(void *)&v1[OBJC_IVAR____TtC10LinkDaemon8Registry_ready];
  v0[5] = v2;
  if (v2)
  {
    sub_10000C7FC();
    uint64_t v3 = (void *)sub_10001BFD0();
    v0[6] = v3;
    void *v3 = v0;
    v3[1] = sub_1000ABEDC;
    sub_1000B6EE8();
    return Task<>.value.getter();
  }

  else
  {
    sub_1000B7384();
    int v13 = sub_1000B7CD0(v5, v6, v7, v8, v9, v10, v11, v12, v30, v32, v34);
    sub_1000B69F8(v13, v14, v15, v16, v17, v18, v19, v20, v31, v33, v35);
    sub_1000B6D20();
    v0[7] = v36;
    objc_opt_self(&OBJC_CLASS___NSXPCConnection);
    sub_10000AFB0();
    v0[8] = sub_100086944((uint64_t)v1, "currentConnection");
    uint64_t v21 = (void *)swift_task_alloc(dword_10013345C);
    v0[9] = v21;
    char v22 = sub_1000B6E58(v21, (uint64_t)sub_1000ABFBC);
    return sub_1000B6E34((uint64_t)v22, v23, v24, v25, v26, v27, v28, v29);
  }

uint64_t sub_1000ABEDC()
{
  return sub_10000E998();
}

uint64_t sub_1000ABF14()
{
  unint64_t v1 = (void *)v0[4];
  sub_1000B7384();
  int v10 = sub_1000B7CD0(v2, v3, v4, v5, v6, v7, v8, v9, v28, v30, v32);
  sub_1000B69F8(v10, v11, v12, v13, v14, v15, v16, v17, v29, v31, v33);
  sub_1000B6D20();
  v0[7] = v34;
  objc_opt_self(&OBJC_CLASS___NSXPCConnection);
  sub_10000AFB0();
  v0[8] = sub_100086944((uint64_t)v1, "currentConnection");
  int v18 = (void *)swift_task_alloc(dword_10013345C);
  v0[9] = v18;
  int v19 = sub_1000B6E58(v18, (uint64_t)sub_1000ABFBC);
  return sub_1000B6E34((uint64_t)v19, v20, v21, v22, v23, v24, v25, v26);
}

uint64_t sub_1000ABFBC()
{
  *(void *)(v0 + 80) = v1;
  swift_task_dealloc(v3);
  if (!v1)
  {

    sub_10000ADB0();
  }

  sub_10000EA88();
  return sub_10004BEA0();
}

uint64_t sub_1000AC018()
{
  sub_10000ADB0();
  return sub_10000C914(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000AC048(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  *(void *)(v5 + 96) = a3;
  *(void *)(v5 + 104) = a5;
  *(_BYTE *)(v5 + 200) = a4;
  *(void *)(v5 + 88) = a2;
  uint64_t v6 = type metadata accessor for LSLinkBundleRecord(0LL);
  *(void *)(v5 + 11sub_100096760(v0[56], v0 + 2) = v6;
  unint64_t v7 = (*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v5 + 120) = swift_task_alloc(v7);
  *(void *)(v5 + 128) = swift_task_alloc(v7);
  unint64_t v8 = (*(void *)(*(void *)(sub_100008DB0(&qword_100133390) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v5 + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = swift_task_alloc(v8);
  *(void *)(v5 + 144) = swift_task_alloc(v8);
  *(void *)(v5 + 15sub_100096760(v0[56], v0 + 2) = swift_task_alloc(v8);
  return swift_task_switch(sub_1000AC0FC, 0LL, 0LL);
}

uint64_t sub_1000AC0FC()
{
  uint64_t v1 = *(void *)(v0 + 112);
  sub_1000B67F8(v2, &qword_100132790, &OBJC_CLASS___LSBundleRecord_ptr);
  uint64_t v3 = sub_10000AF9C();
  id v5 = sub_1000AC710(v3, v4);
  *(void *)(v0 + 160) = v5;
  sub_1000B748C();
  sub_100009E60(v6, v7, v8, v1);
  if (v5)
  {
    id v9 = v5;
    sub_10008FD0C();
  }

  else
  {
    sub_1000B7E5C();
    uint64_t v10 = sub_1000B7D28();
    if (static DaemonRecord.from(bundleIdentifier:)(v10, v11))
    {
      sub_1000AC8D8();
    }

    else
    {
      type metadata accessor for FrameworkRecord(0LL);
      uint64_t v12 = sub_1000B7D28();
      if (!static FrameworkRecord.from(bundleIdentifier:)(v12, v13)) {
        goto LABEL_8;
      }
      sub_1000ACC28();
    }
  }

  uint64_t v14 = *(void *)(v0 + 144);
  sub_100026E14(*(void *)(v0 + 152), &qword_100133390);
  sub_1000B7464(v14);
LABEL_8:
  uint64_t v15 = *(void *)(v0 + 136);
  uint64_t v16 = *(void *)(v0 + 112);
  sub_100026CB8(*(void *)(v0 + 152), v15, &qword_100133390);
  sub_1000B6D2C(v15, 1LL, v16);
  if (v17)
  {
    uint64_t v19 = *(void *)(v0 + 88);
    uint64_t v18 = *(void *)(v0 + 96);
    sub_100026E14(*(void *)(v0 + 136), &qword_100133390);
    uint64_t v20 = type metadata accessor for RegistryError(0LL);
    sub_100067940((unint64_t *)&unk_1001332D0, type metadata accessor for RegistryError);
    sub_100038AC8(v20, v21);
    *uint64_t v22 = v19;
    v22[1] = v18;
    swift_storeEnumTagMultiPayload(v22, v20, 0LL);
    sub_10001BEF8();
    sub_1000B6D9C();

LABEL_14:
    sub_1000B7650(v23, &qword_100133390);
    swift_task_dealloc(*(void *)(v0 + 152));
    sub_10000AF6C();
    sub_10000AFA8();
    sub_10004D844();
    sub_10004D884();
    return sub_1000B6AC8(*(uint64_t (**)(void))(v0 + 8));
  }

  uint64_t v24 = *(void **)(v0 + 128);
  sub_100084248(*(void *)(v0 + 136), (uint64_t)v24, type metadata accessor for LSLinkBundleRecord);
  uint64_t v25 = (void *)static LSBundleRecord.with(bundleIdentifier:allowSystemAppPlaceholder:)(*v24, v24[1], 1LL);
  unsigned __int8 v26 = objc_msgSend(v25, "swift_isAppIntentsEnabled");

  char v27 = *(_BYTE *)(v0 + 200);
  if ((v26 & 1) == 0 && (*(_BYTE *)(v0 + 200) & 1) == 0)
  {
    uint64_t v28 = *(void *)(v0 + 128);
    sub_1000B6C88();
    sub_100067940((unint64_t *)&unk_1001332D0, type metadata accessor for RegistryError);
    sub_1000B6324(v29);
    swift_storeEnumTagMultiPayload(v30, 0LL, 4LL);
    sub_1000B6D9C();

    sub_100058D54(v28, type metadata accessor for LSLinkBundleRecord);
    goto LABEL_14;
  }

  uint64_t v32 = *(void *)(v0 + 128);
  uint64_t v33 = *(void *)(v0 + 112);
  uint64_t v34 = sub_100008DB0(&qword_100130E60);
  uint64_t v35 = sub_10000C254(v34, 72LL);
  *(void *)(v0 + 168) = v35;
  *(_OWORD *)(v35 + 16) = xmmword_1000F5520;
  *(void *)(v35 + 56) = v33;
  *(void *)(v35 + 64) = &off_100126180;
  uint64_t v36 = sub_10001AFA8((void *)(v35 + 32));
  sub_100084214(v32, (uint64_t)v36, type metadata accessor for LSLinkBundleRecord);
  *(_BYTE *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = v35;
  *(void *)(v0 + 3sub_100096760(v0[56], v0 + 2) = _swiftEmptyArrayStorage;
  *(_OWORD *)(v0 + 40) = xmmword_1000F4470;
  *(_BYTE *)(v0 + 56) = v27;
  *(void *)(v0 + 64) = 0LL;
  *(void *)(v0 + 7sub_100096760(v0[56], v0 + 2) = 0LL;
  unint64_t v37 = (void *)swift_task_alloc(dword_100133084);
  *(void *)(v0 + 176) = v37;
  *unint64_t v37 = v0;
  v37[1] = sub_1000AC4A0;
  sub_1000B7110();
  return sub_1000967F4(v38, v39);
}

uint64_t sub_1000AC4A0()
{
  uint64_t v2 = *v1;
  sub_10004BF9C();
  *(void *)(v2 + 184) = v3;
  *(void *)(v2 + 19sub_100096760(v0[56], v0 + 2) = v0;
  sub_10004C0C4(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000B6D74();
  if (!v0) {
    sub_10001198C();
  }
  sub_10000EA88();
  return sub_10000AE28();
}

uint64_t sub_1000AC518( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, uint64_t a28)
{
  a27 = v29;
  a28 = v30;
  a26 = v28;
  uint64_t v31 = *(void *)(v28[13] + OBJC_IVAR____TtC10LinkDaemon8Registry_observers);
  uint64_t v47 = *(void *)(v31 + 16);
  if (v47)
  {
    uint64_t result = sub_1000280C8();
    unint64_t v33 = 0LL;
    while (v33 < *(void *)(v31 + 16))
    {
      sub_1000B76D0((void *)(v31 + 32 + 40 * v33));
      sub_10001BD0C();
      sub_10008E060();
      uint64_t v35 = v34;
      sub_10000AEE8();
      uint64_t v37 = Set.init(minimumCapacity:)( *(void *)(v35 + 16),  type metadata for String,  &protocol witness table for String,  v36);
      uint64_t v48 = v37;
      uint64_t v38 = *(void *)(v35 + 16);
      if (v38)
      {
        char v39 = (uint64_t *)(v35 + 40);
        do
        {
          uint64_t v40 = *(v39 - 1);
          uint64_t v41 = *v39;
          sub_10001BCF8();
          sub_100018380(&a15, v40, v41);
          swift_bridgeObjectRelease();
          v39 += 2;
          --v38;
        }

        while (v38);
        sub_10001DED8();
        uint64_t v42 = v48;
      }

      else
      {
        uint64_t v42 = v37;
        sub_10001DED8();
      }

      ++v33;
      sub_100064A28(v42, (uint64_t)&_swiftEmptySetSingleton);
      uint64_t result = sub_10000AEE8();
      if (v33 == v47) {
        goto LABEL_12;
      }
    }

    __break(1u);
  }

  else
  {
    sub_1000280C8();
LABEL_12:
    unint64_t v43 = (void *)v28[20];
    uint64_t v44 = v28[16];
    sub_10001DEC4();
    sub_10000ADB0();

    sub_100058D54(v44, type metadata accessor for LSLinkBundleRecord);
    sub_1000B7E64(v45, &qword_100133390);
    sub_10004D844();
    sub_10004D858();
    sub_10004D884();
    sub_100059648();
    sub_100067F4C();
    uint64_t v46 = (uint64_t (*)(void))sub_1000681B8();
    return sub_1000B6270(v46);
  }

  return result;
}

uint64_t sub_1000AC69C()
{
  sub_1000B71A4(v1, type metadata accessor for LSLinkBundleRecord);
  sub_1000B7650(v2, &qword_100133390);
  swift_task_dealloc(*(void *)(v0 + 152));
  sub_10000AFA8();
  sub_10004D844();
  sub_10004D858();
  sub_10004D884();
  return sub_100068024(*(uint64_t (**)(void))(v0 + 8));
}

id sub_1000AC710(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = static DaemonRecord.from(bundleIdentifier:)(a1, a2);
  if (v4)
  {
    id v5 = (id)v4;
    uint64_t v6 = DaemonRecord.attributionBundleIdentifier.getter();
    if (v7)
    {
      uint64_t v8 = v6;
      uint64_t v9 = v7;
      sub_1000B5044(0LL, &qword_100132790, &OBJC_CLASS___LSBundleRecord_ptr);
      uint64_t v15 = (void *)static LSBundleRecord.with(bundleIdentifier:allowSystemAppPlaceholder:)(v8, v9, 1LL);
      swift_bridgeObjectRelease();
LABEL_8:

      return v15;
    }
  }

  sub_1000B5044(0LL, &qword_100132790, &OBJC_CLASS___LSBundleRecord_ptr);
  uint64_t v10 = (void *)static LSBundleRecord.with(bundleIdentifier:allowSystemAppPlaceholder:)(a1, a2, 1LL);
  uint64_t v11 = objc_opt_self(&OBJC_CLASS___LSApplicationExtensionRecord);
  uint64_t v12 = swift_dynamicCastObjCClass(v10, v11);
  if (!v12) {
    return v10;
  }
  uint64_t v15 = (void *)v12;
  id v5 = v10;
  uint64_t v13 = LSApplicationExtensionRecord.attributionBundleIdentifier.getter();
  if (v14)
  {
    uint64_t v15 = (void *)static LSBundleRecord.with(bundleIdentifier:allowSystemAppPlaceholder:)(v13, v14, 1LL);
    swift_bridgeObjectRelease();

    goto LABEL_8;
  }

  id v16 = [v15 containingBundleRecord];

  if (v16)
  {

    return v16;
  }

  return v15;
}

void sub_1000AC8D8()
{
  id v5 = v4;
  uint64_t v7 = v6;
  sub_100008DB0(&qword_1001332F8);
  sub_100011A24();
  __chkstk_darwin(v8);
  uint64_t v50 = sub_1000B6EC8(v9, v46);
  uint64_t v48 = *(void *)(v50 - 8);
  sub_100027F2C();
  __chkstk_darwin(v10);
  sub_1000B71C0();
  uint64_t v47 = v11;
  sub_100008DB0(&qword_100130BC0);
  sub_100011A24();
  __chkstk_darwin(v12);
  sub_1000B7888();
  sub_100008DB0(&qword_100133300);
  sub_100011A24();
  __chkstk_darwin(v13);
  uint64_t v14 = sub_1000B6980();
  uint64_t v15 = type metadata accessor for URLResourceValues(v14);
  uint64_t v51 = *(void *)(v15 - 8);
  sub_100027F2C();
  __chkstk_darwin(v16);
  char v17 = (int *)sub_1000B6F8C();
  sub_100011A24();
  __chkstk_darwin(v18);
  sub_1000B7544();
  *uint64_t v1 = DaemonRecord.bundleIdentifier.getter();
  v1[1] = v19;
  DaemonRecord.metadataURLs.getter();
  sub_100038BD8();
  sub_10000ADB0();
  uint64_t v20 = sub_100011A34();
  sub_1000B6D2C(v3, 1LL, v20);
  if (v21)
  {
    sub_100026E14(v3, &qword_100130BC0);
LABEL_6:
    sub_1000B748C();
    sub_100009E60(v24, v25, v26, v15);
LABEL_7:

    sub_100026E14(v2, &qword_100133300);
    goto LABEL_8;
  }

  uint64_t v22 = sub_100008DB0(&qword_100133308);
  uint64_t v23 = sub_1000B7D0C(v22);
  *(_OWORD *)(v23 + 16) = xmmword_1000F5520;
  sub_1000B7D04(v23, NSURLContentModificationDateKey);
  sub_100066580(v23);
  sub_1000B7E08();
  if (v7)
  {
    sub_10000AD70();
    sub_10001BE7C();
    sub_1000B73D0();
    goto LABEL_6;
  }

  sub_10001BE7C();
  sub_1000B73D0();
  sub_1000B7130();
  sub_100009E60(v29, v30, v31, v15);
  sub_1000B6D2C(v2, 1LL, v15);
  if (v21) {
    goto LABEL_7;
  }
  uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 32))(v0, v2, v15);
  URLResourceValues.contentModificationDate.getter(v32);
  sub_1000B6D2C(v49, 1LL, v50);
  if (!v21)
  {
    uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 32))(v47, v49, v50);
    double v34 = Date.timeIntervalSinceReferenceDate.getter(v33);
    uint64_t v35 = sub_1000B6F1C(v34);
    uint64_t v37 = v36;
    sub_1000B7FD4(*(uint64_t (**)(uint64_t, uint64_t))(v48 + 8));
    uint64_t v38 = sub_1000B7DD4(*(uint64_t (**)(uint64_t, uint64_t))(v51 + 8));
    char v39 = (void *)((char *)v1 + v17[6]);
    *char v39 = v35;
    v39[1] = v37;
    Date.init()(v38);

    *((_BYTE *)v1 + v17[8]) = 1;
    *((_BYTE *)v1 + v17[9]) = 1;
    sub_1000B748C();
    sub_100009E60(v40, v41, v42, v20);
    sub_1000B7D1C((uint64_t)v1);
    sub_1000B7130();
    sub_100009E60(v43, v44, v45, (uint64_t)v17);
    sub_1000B7E10((uint64_t)v1);
    goto LABEL_9;
  }

  sub_1000B7DD4(*(uint64_t (**)(uint64_t, uint64_t))(v51 + 8));
  sub_100026E14(v49, &qword_1001332F8);
LABEL_8:
  swift_bridgeObjectRelease();
  uint64_t v27 = sub_1000B7014();
  sub_1000B75C0(v27, v28);
LABEL_9:
  sub_10000AD58();
}

void sub_1000ACC28()
{
  uint64_t v3 = v2;
  uint64_t v66 = v4;
  sub_100008DB0(&qword_1001332F8);
  sub_100011A24();
  __chkstk_darwin(v5);
  sub_1000B71C0();
  uint64_t v62 = v6;
  uint64_t v7 = sub_1000B75A0();
  uint64_t v60 = *(void *)(v7 - 8);
  uint64_t v61 = v7;
  sub_100027F2C();
  __chkstk_darwin(v8);
  sub_1000B7528(v9, v59);
  uint64_t v10 = sub_100011A34();
  __chkstk_darwin(v10);
  sub_100008DB0(&qword_100133300);
  sub_100011A24();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v63 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v14 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  uint64_t v65 = sub_1000B6F8C();
  sub_100011A24();
  double v16 = __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  *uint64_t v18 = FrameworkRecord.bundleIdentifier.getter(v16);
  v18[1] = v19;
  id v64 = v3;
  FrameworkRecord.metadataURL.getter();
  uint64_t v20 = sub_100008DB0(&qword_100133308);
  uint64_t v21 = sub_1000B7D0C(v20);
  *(_OWORD *)(v21 + 16) = xmmword_1000F5520;
  sub_1000B7D04(v21, NSURLContentModificationDateKey);
  sub_100066580(v21);
  sub_1000B7E08();
  if (v1)
  {
    sub_10000AEE8();
    sub_10000AD70();
    sub_1000B76E0();
    sub_1000B748C();
    sub_100009E60(v22, v23, v24, v63);
LABEL_5:

    uint64_t v32 = &qword_100133300;
    uint64_t v33 = (uint64_t)v13;
    goto LABEL_6;
  }

  uint64_t v25 = v14;
  uint64_t v27 = v61;
  uint64_t v26 = v62;
  sub_1000B76E0();
  sub_10000AEE8();
  sub_1000B7130();
  uint64_t v28 = v63;
  sub_100009E60(v29, v30, v31, v63);
  sub_1000B6D2C((uint64_t)v13, 1LL, v28);
  if (v42) {
    goto LABEL_5;
  }
  uint64_t v38 = v25;
  uint64_t v39 = sub_100067EF8(v0, (uint64_t)v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 32));
  URLResourceValues.contentModificationDate.getter(v39);
  uint64_t v40 = sub_1000B7014();
  sub_1000B6D2C(v40, v41, v27);
  if (!v42)
  {
    uint64_t v43 = sub_1000B78B8(v59, v26, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 32));
    double v44 = Date.timeIntervalSinceReferenceDate.getter(v43);
    uint64_t v45 = sub_1000B6F1C(v44);
    uint64_t v47 = v46;
    uint64_t v48 = sub_1000B7EE0();
    v49(v48);
    uint64_t v50 = sub_1000B71D4(v0, *(uint64_t (**)(uint64_t, uint64_t))(v38 + 8));
    uint64_t v51 = v65;
    uint64_t v52 = (void *)((char *)v18 + *(int *)(v65 + 24));
    *uint64_t v52 = v45;
    v52[1] = v47;
    uint64_t v53 = Date.init()(v50);
    *((_BYTE *)v18 + *(int *)(v51 + 3sub_10000E8E4(*((void *)*v2 + 2)) = 1;
    *((_BYTE *)v18 + *(int *)(v51 + 36)) = 2;
    id v54 = v64;
    FrameworkRecord.bundleURL.getter(v53);

    sub_1000B7130();
    sub_100009E60(v55, v56, v57, v10);
    uint64_t v58 = v66;
    sub_1000B7D1C((uint64_t)v18);
    sub_100009E60(v58, 0LL, 1LL, v51);
    sub_1000B7E10((uint64_t)v18);
    goto LABEL_7;
  }

  sub_1000B7664(*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
  uint64_t v32 = &qword_1001332F8;
  uint64_t v33 = v26;
LABEL_6:
  sub_100026E14(v33, v32);
  swift_bridgeObjectRelease();
  sub_1000B748C();
  sub_100009E60(v34, v35, v36, v37);
LABEL_7:
  sub_10000AD58();
}

id sub_1000ACF94()
{
  uint64_t v3 = (void *)((uint64_t (*)(void, void, uint64_t))static LSBundleRecord.with(bundleIdentifier:allowSystemAppPlaceholder:))( *v0,  v0[1],  1LL);
  id v4 = objc_msgSend(v3, "swift_isAppIntentsEnabled");

  return v4;
}

uint64_t sub_1000AD110(uint64_t a1, char a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v10 = v9;
  void v4[4] = v9;
  uint64_t v11 = dword_100133454;
  a4;
  uint64_t v12 = (void *)swift_task_alloc(v11);
  v4[5] = v12;
  *uint64_t v12 = v4;
  v12[1] = sub_1000AD1AC;
  return sub_1000ABDC0(v8, v10, a2);
}

uint64_t sub_1000AD1AC()
{
  uint64_t v3 = (void *)v2[2];
  uint64_t v4 = *v1;
  sub_10004BEB8(v2[5], v5);

  sub_10001198C();
  uint64_t v6 = v2[3];
  if (v0)
  {
    uint64_t v7 = (void *)sub_100067E64();
    sub_100059344();
    sub_1000B66A8(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16));
  }

  else
  {
    sub_100067C14();
  }

  sub_1000680F0();
  return sub_10000EA08(*(uint64_t (**)(void))(v4 + 8));
}

uint64_t sub_1000AD220()
{
  *(void *)(v1 + 16) = v0;
  return sub_100067ABC((uint64_t)sub_1000AD230);
}

uint64_t sub_1000AD230()
{
  uint64_t v1 = *(void *)(v0[2] + OBJC_IVAR____TtC10LinkDaemon8Registry_ready);
  v0[3] = v1;
  if (v1)
  {
    sub_10000C7FC();
    uint64_t v2 = (void *)sub_10001BFD0();
    v0[4] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1000AD2F0;
    sub_1000B6EE8();
    return sub_1000B6ABC();
  }

  else
  {
    objc_opt_self(&OBJC_CLASS___NSXPCConnection);
    id v4 = sub_1000B6D00();
    id v5 = sub_100011ABC((uint64_t)v4, "currentConnection");
    sub_1000B6CF4((uint64_t)v5);
    uint64_t v6 = (void *)swift_task_alloc(dword_100133434);
    v0[6] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_1000AD39C;
    sub_1000B70F0();
    return sub_1000B713C(v7, v8, v9, v10, v11, v12);
  }

uint64_t sub_1000AD2F0()
{
  return sub_10000E998();
}

uint64_t sub_1000AD328()
{
  id v1 = sub_1000B6D00();
  id v2 = sub_100011ABC((uint64_t)v1, "currentConnection");
  sub_1000B6CF4((uint64_t)v2);
  uint64_t v3 = (void *)swift_task_alloc(dword_100133434);
  *(void *)(v0 + 48) = v3;
  void *v3 = v0;
  v3[1] = sub_1000AD39C;
  sub_1000B70F0();
  return sub_1000B713C(v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1000AD39C()
{
  *(void *)(v0 + 56) = v1;
  swift_task_dealloc(v3);
  if (!v1) {

  }
  sub_10000EA88();
  return sub_10004BEA0();
}

uint64_t sub_1000AD3F0(uint64_t a1, uint64_t a2)
{
  v2[2] = a2;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[3] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[4] = v4;
  v2[5] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000AD450, 0LL, 0LL);
}

uint64_t sub_1000AD450()
{
  uint64_t v3 = qword_100130330;
  id v4 = *(id *)(v1 + 16);
  if (v3 == -1)
  {
    uint64_t v5 = v4;
  }

  else
  {
    swift_once(&qword_100130330, sub_100091538);
    uint64_t v5 = *(void **)(v1 + 16);
  }

  sub_1000B7AD4();
  uint64_t v6 = sub_100008D98(v0, (uint64_t)qword_100135860);
  *(void *)(v1 + 48) = v6;
  sub_1000B69D0(v3, v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));

  sub_10006801C();
  os_log_type_t v7 = sub_100041BDC();
  if (sub_100068360(v7))
  {
    uint64_t v8 = (_WORD *)sub_10000AE10(2LL);
    sub_1000B6EA4(v8);
    sub_1000B6604((void *)&_mh_execute_header, v9, v10, "Resetting the metadata store");
    sub_10000AD78(v0);
  }

  uint64_t v11 = *(void *)(v1 + 32);
  uint64_t v12 = *(void *)(v1 + 16);

  sub_1000B66A8(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
  uint64_t v13 = *(void *)(v12 + OBJC_IVAR____TtC10LinkDaemon8Registry_indexingQueue);
  *(void *)(v1 + 56) = v13;
  return sub_1000B6688((uint64_t)sub_1000AD53C, v13, 0LL);
}

uint64_t sub_1000AD53C()
{
  *(_BYTE *)(*(void *)(v0 + 56) + 144LL) = 1;
  return sub_100067ABC((uint64_t)sub_1000AD554);
}

uint64_t sub_1000AD554()
{
  uint64_t v1 = *(void *)(v0 + 16);
  type metadata accessor for MetadataStore(0LL);
  sub_100056A24(*(void *)(v1 + OBJC_IVAR____TtC10LinkDaemon8Registry_store));
  uint64_t v2 = *(void **)(v0 + 48);
  Logger.logObject.getter(v3);
  os_log_type_t v4 = sub_100041BDC();
  if (sub_100068360(v4))
  {
    uint64_t v5 = (_WORD *)sub_10000AE10(2LL);
    sub_1000B6EA4(v5);
    sub_1000B6604((void *)&_mh_execute_header, v6, v7, "Finished resetting the metadata store");
    sub_10000AD78(0LL);
  }

  sub_10000AFA8();
  uint64_t v8 = (uint64_t (*)(void))sub_1000681B8();
  return sub_100067BC8(v8);
}

uint64_t sub_1000AD610(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_10013342C;
  a2;
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000B6264;
  return sub_1000AD220();
}

uint64_t sub_1000AD670()
{
  v1[2] = v0;
  uint64_t v2 = sub_1000B700C();
  v1[3] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[4] = v3;
  v1[5] = sub_1000B6B04(*(void *)(v3 + 64));
  sub_10000EA88();
  return sub_10000E998();
}

uint64_t sub_1000AD6B8()
{
  uint64_t v1 = *(void *)(v0[2] + OBJC_IVAR____TtC10LinkDaemon8Registry_ready);
  v0[6] = v1;
  if (v1)
  {
    sub_10000C7FC();
    uint64_t v2 = (void *)sub_10001BFD0();
    v0[7] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1000AD784;
    sub_1000B6EE8();
    return sub_1000B6ABC();
  }

  else
  {
    sub_1000B77D4();
    sub_1000B7FE0();
    v0[8] = v4;
    uint64_t v5 = (void *)swift_task_alloc(dword_10013334C);
    v0[9] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_1000AD844;
    sub_10000EA88();
    return sub_1000B7410(v6, v7, v8);
  }

uint64_t sub_1000AD784()
{
  return sub_10000E998();
}

uint64_t sub_1000AD7C4()
{
  *(void *)(v0 + 64) = v1;
  uint64_t v2 = (void *)swift_task_alloc(dword_10013334C);
  *(void *)(v0 + 7sub_100096760(v0[56], v0 + 2) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000AD844;
  sub_10000EA88();
  return sub_100091D80(v3, v4, v5);
}

uint64_t sub_1000AD844()
{
  return sub_10000E998();
}

uint64_t sub_1000AD880()
{
  uint64_t v1 = (uint64_t (*)(void))sub_1000681B8();
  return sub_10000EA08(v1);
}

uint64_t sub_1000AD904(void *a1, int a2, void *aBlock, uint64_t a4)
{
  uint64_t v6 = _Block_copy(aBlock);
  uint64_t v7 = sub_10000C254(a4, 32LL);
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 24) = a1;
  id v8 = a1;
  uint64_t v9 = sub_10000AF9C();
  return sub_1000BC15C(v9, v10);
}

uint64_t sub_1000AD958(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_100133414;
  a2;
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000AD9B8;
  return sub_1000AD670();
}

uint64_t sub_1000AD9B8()
{
  uint64_t v3 = (void *)v2[2];
  uint64_t v4 = *v1;
  sub_10004BEB8(v2[4], v5);

  uint64_t v6 = v2[3];
  if (v0)
  {
    uint64_t v7 = (void *)sub_100067E64();
    sub_100059344();
    sub_1000B66A8(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16));
  }

  else
  {
    sub_100067C14();
  }

  sub_1000680F0();
  return sub_10000EA08(*(uint64_t (**)(void))(v4 + 8));
}

uint64_t sub_1000ADA28(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100067ABC((uint64_t)sub_1000ADA3C);
}

uint64_t sub_1000ADA3C()
{
  uint64_t v1 = (void *)v0[4];
  _StringGuts.grow(_:)(25LL);
  int v10 = sub_1000B7CD0(v2, v3, v4, v5, v6, v7, v8, v9, v23, 0LL, 0xE000000000000000LL);
  sub_1000B69F8(v10, v11, v12, v13, v14, v15, v16, v17, v24, v25, v27);
  sub_1000B6D20();
  v0[5] = v28;
  objc_opt_self(&OBJC_CLASS___NSXPCConnection);
  id v18 = v1;
  uint64_t v19 = sub_10000AFB0();
  id v20 = sub_100086944(v19, "currentConnection");
  v0[6] = (uint64_t)v20;
  uint64_t v21 = (uint64_t **)swift_task_alloc(dword_1001333EC);
  v0[7] = (uint64_t)v21;
  void *v21 = v0;
  v21[1] = (uint64_t *)sub_1000ADB20;
  return sub_10009F128((uint64_t)v21, (uint64_t)v20, v26, v28, v0[4], v0[4], v0[2], v0[3]);
}

uint64_t sub_1000ADB20()
{
  *(void *)(v0 + 64) = v1;
  swift_task_dealloc(v3);
  if (!v1)
  {

    sub_10000ADB0();
  }

  sub_10000EA88();
  return sub_10004BEA0();
}

uint64_t sub_1000ADB78()
{
  sub_10000ADB0();
  return sub_10000C914(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000ADBA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[11] = a3;
  v4[12] = a4;
  v4[10] = a2;
  return swift_task_switch(sub_1000ADBC4, 0LL, 0LL);
}

uint64_t sub_1000ADBC4()
{
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v3 = sub_100008DB0((uint64_t *)&unk_100132130);
  uint64_t v4 = sub_10000C254(v3, 48LL);
  *(void *)(v0 + 104) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_1000F5520;
  *(void *)(v4 + 3sub_100096760(v0[56], v0 + 2) = v2;
  *(void *)(v4 + 40) = v1;
  *(_BYTE *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = _swiftEmptyArrayStorage;
  *(void *)(v0 + 3sub_100096760(v0[56], v0 + 2) = v4;
  *(_OWORD *)(v0 + 40) = xmmword_1000F4470;
  *(_BYTE *)(v0 + 56) = 0;
  *(void *)(v0 + 64) = 0LL;
  *(void *)(v0 + 7sub_100096760(v0[56], v0 + 2) = 0LL;
  uint64_t v5 = dword_100133084;
  sub_10000AFB0();
  uint64_t v6 = (void *)swift_task_alloc(v5);
  *(void *)(v0 + 11sub_100096760(v0[56], v0 + 2) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1000ADC80;
  uint64_t v7 = sub_1000B7014();
  return sub_1000967F4(v7, v8);
}

uint64_t sub_1000ADC80()
{
  *(void *)(v1 + 120) = v3;
  *(void *)(v1 + 128) = v0;
  swift_task_dealloc(v4);
  if (!v0)
  {
    swift_bridgeObjectRelease();
    sub_10000ADB0();
    sub_1000B6D74();
    sub_10001198C();
  }

  sub_10000EA88();
  return sub_10000AE28();
}

uint64_t sub_1000ADCEC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  a25 = v27;
  a26 = v28;
  a24 = v26;
  uint64_t v29 = *(void *)(*(void *)(v26 + 80) + OBJC_IVAR____TtC10LinkDaemon8Registry_observers);
  uint64_t v30 = *(void *)(v26 + 120);
  uint64_t v42 = *(void *)(v29 + 16);
  if (v42)
  {
    uint64_t v31 = *(void *)(v30 + 16);
    uint64_t result = sub_10001C064();
    unint64_t v33 = 0LL;
    while (v33 < *(void *)(v29 + 16))
    {
      sub_1000B76D0((void *)(v29 + 32 + 40 * v33));
      sub_10000AE38();
      uint64_t v35 = Set.init(minimumCapacity:)(v31, type metadata for String, &protocol witness table for String, v34);
      uint64_t v43 = v35;
      uint64_t v36 = (uint64_t *)(v30 + 40);
      uint64_t v37 = v31;
      if (v31)
      {
        do
        {
          uint64_t v38 = *(v36 - 1);
          uint64_t v39 = *v36;
          sub_100027FA0();
          sub_100018380(&a14, v38, v39);
          swift_bridgeObjectRelease();
          v36 += 2;
          --v37;
        }

        while (v37);
        sub_1000B7BC4();
        uint64_t v40 = v43;
      }

      else
      {
        uint64_t v40 = v35;
        sub_1000B7BC4();
      }

      ++v33;
      sub_100064A28((uint64_t)&_swiftEmptySetSingleton, v40);
      uint64_t result = sub_10001DEC4();
      if (v33 == v42)
      {
        sub_1000B7BC4();
        goto LABEL_10;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_10:
    sub_10001BE7C();
    uint64_t v41 = (uint64_t (*)(void))sub_1000681B8();
    return sub_100067B54(v41);
  }

  return result;
}

uint64_t sub_1000ADE1C()
{
  return sub_10000C914(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000ADE6C(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v8 = v7;
  v3[4] = v7;
  uint64_t v9 = dword_1001333E4;
  a3;
  int v10 = (void *)swift_task_alloc(v9);
  v3[5] = v10;
  *int v10 = v3;
  v10[1] = sub_1000B6220;
  return sub_1000ADA28(v6, v8);
}

void sub_1000ADEF8()
{
}

uint64_t sub_1000ADF0C()
{
  return 1LL;
}

void sub_1000ADF30()
{
  qword_100135898 = (uint64_t)&off_100122270;
}

double sub_1000ADF44()
{
  if (qword_100130348 != -1) {
    swift_once(&qword_100130348, sub_1000ADF30);
  }
  *(void *)&double result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

void sub_1000ADF84()
{
  uint64_t v4 = v3;
  unint64_t v42 = v6;
  uint64_t v43 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = sub_10000E918();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_1000B6FE0();
  sub_1000B71AC();
  __chkstk_darwin(v11);
  sub_1000B6FA8();
  sub_10008F878();
  uint64_t v13 = v12;
  sub_1000B71D4(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  int v14 = (os_log_s *)qword_100130330;
  id v15 = v0;
  if (v14 != (os_log_s *)-1LL) {
    swift_once(&qword_100130330, sub_100091538);
  }
  uint64_t v16 = sub_100008D98(v9, (uint64_t)qword_100135860);
  sub_100067EF8((uint64_t)v0, v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16));

  uint64_t v17 = sub_1000B646C();
  Logger.logObject.getter(v17);
  os_log_type_t v18 = sub_1000B7880();
  if (sub_1000B7404(v18))
  {
    os_log_type_t v37 = v18;
    uint64_t v38 = v14;
    uint64_t v39 = v0;
    uint64_t v40 = v10;
    uint64_t v41 = v9;
    uint64_t v19 = (uint8_t *)sub_10000AE10(12LL);
    uint64_t v36 = sub_10000AE10(32LL);
    uint64_t v44 = v36;
    *(_DWORD *)uint64_t v19 = 136315138;
    uint64_t v20 = *(void *)(v8 + 16);
    if (v20)
    {
      sub_1000452D4();
      uint64_t v21 = v8 + 32;
      do
      {
        sub_10001AFE4(v21, (uint64_t)v45);
        v22._uint64_t countAndFlagsBits = sub_1000B65A0(v45);
        String.append(_:)(v22);
        sub_10001198C();
        sub_1000B6D20();
        sub_10000AC58(v45);
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
          sub_1000B75CC();
        }
        unint64_t v23 = _swiftEmptyArrayStorage[2];
        if (v23 >= _swiftEmptyArrayStorage[3] >> 1) {
          sub_1000B72B4();
        }
        _swiftEmptyArrayStorage[2] = v23 + 1;
        uint64_t v24 = &_swiftEmptyArrayStorage[2 * v23];
        v24[4] = 34LL;
        uint64_t v24[5] = 0xE100000000000000LL;
        v21 += 40LL;
        --v20;
      }

      while (v20);
      unint64_t v25 = v42;
    }

    else
    {
      unint64_t v25 = v42;
    }

    v45[0] = _swiftEmptyArrayStorage;
    uint64_t v26 = sub_10001C1C4();
    sub_1000B7D14((unint64_t *)&qword_100131990);
    uint64_t v28 = BidirectionalCollection<>.joined(separator:)(44LL, 0xE100000000000000LL, v26, v27);
    sub_10001198C();
    uint64_t v30 = sub_1000B7470(v28, v29, &v44);
    uint64_t v31 = sub_1000B7A30(v30);
    sub_1000B6780(v31, v32, v33, v34);
    sub_10001191C(v8);
    sub_10001BE7C();
    sub_10000AF5C((void *)&_mh_execute_header, v38, v37, "App Intents enabled bundle(s) installed: %s", v19);
    sub_10000AF48(v36);
    sub_10000AD78(v36);
    sub_10000AD78((uint64_t)v19);

    (*(void (**)(void *, uint64_t))(v40 + 8))(v39, v41);
  }

  else
  {

    sub_10001191C(v8);
    sub_1000B7664(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
    unint64_t v25 = v42;
  }

  if (v4) {
    os_transaction_needs_more_time(v4);
  }
  uint64_t v35 = sub_10000C254((uint64_t)&unk_1001259E0, 32LL);
  *(void *)(v35 + 16) = v4;
  *(void *)(v35 + 24) = v13;
  LOBYTE(v45[0]) = 0;
  v45[1] = v8;
  v45[2] = _swiftEmptyArrayStorage;
  v45[3] = v43;
  v45[4] = v25;
  char v46 = 0;
  uint64_t v47 = sub_1000B3D90;
  uint64_t v48 = v35;
  sub_10001C1BC();
  swift_unknownObjectRetain(v4);
  swift_retain();
  sub_10000A280(v43, v25);
  sub_100095B34((uint64_t)v45);
  sub_10001198C();
  sub_10001DF40();
  sub_10000A21C(v43, v25);
  sub_1000B7F84();
  swift_release();
  sub_10000AD58();
}

void sub_1000AE384()
{
  uint64_t v4 = v3;
  uint64_t v43 = v5;
  unint64_t v44 = v6;
  uint64_t v8 = v7;
  uint64_t v9 = sub_10000E918();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_1000B6FE0();
  sub_1000B71AC();
  __chkstk_darwin(v11);
  sub_1000B6FA8();
  sub_1000B7014();
  sub_10008F878();
  uint64_t v13 = v12;
  sub_1000B71D4(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  int v14 = (os_log_s *)qword_100130330;
  id v15 = v0;
  if (v14 != (os_log_s *)-1LL) {
    swift_once(&qword_100130330, sub_100091538);
  }
  uint64_t v16 = sub_100008D98(v9, (uint64_t)qword_100135860);
  sub_100067EF8((uint64_t)v0, v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16));

  uint64_t v17 = sub_100011A3C(v8);
  Logger.logObject.getter(v17);
  os_log_type_t v42 = sub_1000B7880();
  uint64_t v18 = v10;
  unint64_t v19 = v44;
  if (sub_1000B7404(v42))
  {
    uint64_t v39 = v14;
    uint64_t v40 = v0;
    uint64_t v41 = v4;
    uint64_t v20 = (uint8_t *)sub_10000AE10(12LL);
    uint64_t v37 = sub_10000AE10(32LL);
    uint64_t v45 = v37;
    uint64_t v38 = v20;
    *(_DWORD *)uint64_t v20 = 136315138;
    uint64_t v21 = *(void *)(v8 + 16);
    uint64_t v22 = v43;
    if (v21)
    {
      sub_1000452D4();
      uint64_t v23 = v8 + 40;
      do
      {
        uint64_t v46 = 34LL;
        uint64_t v47 = (void *)0xE100000000000000LL;
        sub_10001BEF8();
        v24._uint64_t countAndFlagsBits = sub_1000B7608();
        String.append(_:)(v24);
        sub_1000B6D20();
        sub_100011958();
        unint64_t v25 = _swiftEmptyArrayStorage[2];
        if (v25 >= _swiftEmptyArrayStorage[3] >> 1) {
          sub_1000B72B4();
        }
        v23 += 16LL;
        _swiftEmptyArrayStorage[2] = v25 + 1;
        uint64_t v26 = &_swiftEmptyArrayStorage[2 * v25];
        v26[4] = 34LL;
        v26[5] = 0xE100000000000000LL;
        --v21;
      }

      while (v21);
      uint64_t v22 = v43;
      unint64_t v19 = v44;
    }

    uint64_t v46 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v27 = sub_10001C1C4();
    sub_1000B7D14((unint64_t *)&qword_100131990);
    uint64_t v29 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v27, v28);
    sub_10001DEC4();
    uint64_t v31 = sub_100067C8C(v29, v30, &v45);
    uint64_t v32 = sub_1000B7A30(v31);
    sub_1000B642C(v32, v33, v34, v35);
    sub_10001191C(v8);
    sub_10000AEE8();
    sub_10000AF5C((void *)&_mh_execute_header, v39, v42, "Detected uninstalled bundle(s): %s", v38);
    sub_10000AF48(v37);
    sub_10000AD78(v37);
    sub_10000AD78((uint64_t)v38);

    (*(void (**)(void *, uint64_t))(v18 + 8))(v40, v9);
    uint64_t v4 = v41;
  }

  else
  {

    sub_10001191C(v8);
    sub_1000B7664(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
    uint64_t v22 = v43;
  }

  if (v4) {
    os_transaction_needs_more_time(v4);
  }
  uint64_t v36 = sub_10000C254((uint64_t)&unk_100125A08, 32LL);
  *(void *)(v36 + 16) = v4;
  *(void *)(v36 + 24) = v13;
  LOBYTE(v46) = 0;
  uint64_t v47 = _swiftEmptyArrayStorage;
  uint64_t v48 = v8;
  uint64_t v49 = v22;
  unint64_t v50 = v19;
  char v51 = 0;
  uint64_t v52 = sub_1000B3DF8;
  uint64_t v53 = v36;
  sub_100027FA0();
  swift_unknownObjectRetain(v4);
  swift_retain();
  sub_10000A280(v22, v19);
  sub_100095B34((uint64_t)&v46);
  sub_10001DED8();
  sub_10001198C();
  sub_10000A21C(v22, v19);
  sub_1000B7F84();
  sub_100084A44();
  sub_10000AD58();
}

void sub_1000AE730()
{
  char v5 = v4;
  uint64_t v6 = type metadata accessor for OSSignpostError(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = sub_1000B6980();
  uint64_t v21 = *(void *)(type metadata accessor for OSSignpostID(v8) - 8);
  sub_100027F2C();
  __chkstk_darwin(v9);
  sub_1000B6FC4();
  sub_1000B7E40();
  __chkstk_darwin(v10);
  sub_100068380();
  if (qword_100130428 != -1) {
    swift_once(&qword_100130428, sub_1000C2D08);
  }
  uint64_t v11 = sub_100008D98(v1, (uint64_t)qword_100135CB0);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16))(v2, v11, v1);
  uint64_t v20 = off_100126240[v5];
  uint64_t v13 = (os_log_s *)OSSignposter.logHandle.getter(v12);
  uint64_t v14 = OSSignpostIntervalState.signpostID.getter();
  os_signpost_type_t v19 = static os_signpost_type_t.end.getter(v14);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    uint64_t v15 = swift_retain();
    checkForErrorAndConsumeState(state:)(v15);
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v7 + 88))(v3, v6) == enum case for OSSignpostError.doubleEnd(_:))
    {
      uint64_t v16 = "[Error] Interval already ended";
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
      uint64_t v16 = "";
    }

    uint64_t v17 = (uint8_t *)sub_10000AE10(2LL);
    os_signpost_id_t v18 = sub_1000B74B8(v17);
    sub_1000B7848((void *)&_mh_execute_header, v13, v19, v18, v20, v16, v17);
    sub_10000AD78((uint64_t)v17);
  }

  sub_1000B7CD8(v21);
  sub_1000B79E8();
  sub_10000AD58();
}

void sub_1000AE8F4()
{
}

void sub_1000AE918()
{
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  type metadata accessor for OSSignpostError(0LL);
  sub_1000B7E40();
  __chkstk_darwin(v15);
  sub_100068380();
  uint64_t v28 = *(void *)(sub_1000B700C() - 8);
  sub_100027F2C();
  __chkstk_darwin(v16);
  if (*v10 != -1LL) {
    swift_once(v10, v4);
  }
  uint64_t v17 = type metadata accessor for OSSignposter(0LL);
  sub_100008D98(v17, v8);
  unint64_t v18 = v6(v12);
  char v20 = v19;
  uint64_t v21 = (os_log_s *)OSSignposter.logHandle.getter();
  uint64_t v22 = OSSignpostIntervalState.signpostID.getter();
  os_signpost_type_t v23 = static os_signpost_type_t.end.getter(v22);
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0) {
    goto LABEL_15;
  }
  if ((v20 & 1) == 0)
  {
    if (v18)
    {
LABEL_11:
      uint64_t v24 = swift_retain(v14);
      checkForErrorAndConsumeState(state:)(v24);
      swift_release(v14);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v0 + 88))(v2, v1) == enum case for OSSignpostError.doubleEnd(_:))
      {
        unint64_t v25 = "[Error] Interval already ended";
      }

      else
      {
        sub_1000B79E8();
        unint64_t v25 = "";
      }

      uint64_t v26 = (uint8_t *)sub_10000AE10(2LL);
      os_signpost_id_t v27 = sub_1000B74B8(v26);
      sub_1000B7848((void *)&_mh_execute_header, v21, v23, v27, (const char *)v18, v25, v26);
      sub_10000AD78((uint64_t)v26);
LABEL_15:

      sub_1000B7CD8(v28);
      sub_10000AD58();
      return;
    }

    __break(1u);
  }

  if (HIDWORD(v18))
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if (v18 >> 11 != 27)
  {
    if (WORD1(v18) <= 0x10u)
    {
      unint64_t v18 = (unint64_t)&v29;
      goto LABEL_11;
    }

    goto LABEL_17;
  }

double sub_1000AEAE4()
{
  return sub_1000ADF44();
}

uint64_t sub_1000AEAF8(void *a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  char v5 = sub_100008D74(a1, a1[3]);
  __int128 v6 = *((_OWORD *)v5 + 1);
  v8[0] = *(_OWORD *)v5;
  v8[1] = v6;
  uint64_t v9 = v5[4];
  return sub_1000B3244((uint64_t *)v8, a2, v4);
}

void sub_1000AEB48()
{
}

void sub_1000AEB68(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_1000AEB90(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 24);
  uint64_t v3 = *(void *)v2;
  sub_10000A280(*(void *)v2, *(void *)(v2 + 8));
  return v3;
}

uint64_t sub_1000AEBC8()
{
  id v0 = [(id)objc_opt_self(LSApplicationWorkspace) defaultWorkspace];
  if (!v0) {
    __break(1u);
  }
  uint64_t v1 = v0;
  id v16 = 0LL;
  v17[0] = 0LL;
  [v0 getKnowledgeUUID:v17 andSequenceNumber:&v16];

  id v2 = v16;
  uint64_t v3 = (void *)v17[0];
  if (v17[0])
  {
    id v4 = v16;
    id v5 = v3;
    uint64_t v6 = sub_1000AED14();
    uint64_t v8 = v7;
  }

  else
  {
    uint64_t v10 = type metadata accessor for __DataStorage(0LL);
    sub_1000B7498(v10);
    sub_1000B6D00();
    uint64_t v9 = __DataStorage.init(length:)(16LL);
    uint64_t v8 = v9 | 0x4000000000000000LL;
    uint64_t v6 = 0x1000000000LL;
  }

  v17[0] = v6;
  v17[1] = v8;
  if (v2) {
    id v11 = sub_10003F9CC(v9, "unsignedLongLongValue");
  }
  else {
    id v11 = 0LL;
  }
  id v16 = v11;
  uint64_t v12 = sub_1000B032C((uint64_t)&v16, (uint64_t)v17);
  unint64_t v14 = v13;
  Data.append(_:)();
  sub_10000A1D8(v12, v14);

  return v17[0];
}

uint64_t sub_1000AED14()
{
  uint64_t v1 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(16LL, &type metadata for UInt8);
  v1[2] = 16LL;
  v1[5] = 0LL;
  v1[4] = 0LL;
  [v0 getUUIDBytes:v1 + 4];
  return sub_1000B028C((uint64_t)v1);
}

void sub_1000AED70(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v159 = a4;
  uint64_t v160 = a5;
  uint64_t v157 = a2;
  uint64_t v158 = a3;
  uint64_t v6 = sub_100008DB0(&qword_100133388);
  __chkstk_darwin(v6);
  uint64_t v155 = (char *)&v142 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v150 = (char *)&v142 - v9;
  uint64_t v10 = sub_100008DB0(&qword_100133390);
  __chkstk_darwin(v10);
  uint64_t v145 = (char *)&v142 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v144 = (char *)&v142 - v13;
  __chkstk_darwin(v14);
  uint64_t v149 = (char *)&v142 - v15;
  __chkstk_darwin(v16);
  unint64_t v18 = (char *)&v142 - v17;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v142 - v20;
  uint64_t v22 = type metadata accessor for LSLinkBundleRecord(0LL);
  __chkstk_darwin(v22);
  uint64_t v143 = (uint64_t)&v142 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24);
  uint64_t v142 = (uint64_t)&v142 - v25;
  __chkstk_darwin(v26);
  uint64_t v146 = (uint64_t)&v142 - v27;
  __chkstk_darwin(v28);
  uint64_t v147 = (uint64_t)&v142 - v29;
  __chkstk_darwin(v30);
  uint64_t v156 = (uint64_t)&v142 - v31;
  type metadata accessor for DaemonRecord(0LL);
  unint64_t v32 = static DaemonRecord.enumerated.getter();
  sub_1000B5044(0LL, (unint64_t *)&unk_100133398, &OBJC_CLASS___LSApplicationExtensionRecord_ptr);
  unint64_t v33 = static LSApplicationExtensionRecord.enumeratedStandaloneAppIntentsExtensions.getter();
  id v34 = [(id)objc_opt_self(LSApplicationRecord) enumeratorWithOptions:0];
  uint64_t v35 = &selRef_isLowPowerDeviceEnabled;
  id v151 = v34;
  uint64_t v165 = v22;
  uint64_t v148 = v18;
  unint64_t v154 = (unint64_t)v21;
  do
  {
    uint64_t v36 = objc_autoreleasePoolPush();
    id v37 = [v34 v35[221]];
    id v38 = v37;
    if (v37)
    {
      uint64_t v161 = v36;
      id v39 = v37;
      sub_10008FD0C();
      if (sub_100009E6C((uint64_t)v21, 1LL, v22) == 1)
      {

        sub_100026E14((uint64_t)v21, &qword_100133390);
      }

      else
      {
        uint64_t v40 = v156;
        sub_100084248((uint64_t)v21, v156, type metadata accessor for LSLinkBundleRecord);
        __chkstk_darwin(v41);
        *(&v142 - sub_100096760(v0[56], v0 + 2) = v40;
        swift_bridgeObjectRetain();
        os_log_type_t v42 = sub_10008DED0((uint64_t (*)(uint64_t *))sub_1000B3584, &v142 - 4, v32);
        uint64_t v43 = swift_bridgeObjectRelease();
        __chkstk_darwin(v43);
        *(&v142 - sub_100096760(v0[56], v0 + 2) = v40;
        swift_bridgeObjectRetain();
        unint64_t v44 = sub_10008DED0((uint64_t (*)(uint64_t *))sub_1000B35A8, &v142 - 4, v33);
        swift_bridgeObjectRelease();
        uint64_t v163 = v22;
        uint64_t v164 = &off_100126180;
        uint64_t v45 = sub_10001AFA8(v162);
        sub_100084214(v40, (uint64_t)v45, type metadata accessor for LSLinkBundleRecord);
        sub_100095114(v162, v157, v158, v159, v160);
        if (v5)
        {

          sub_100058D54(v40, type metadata accessor for LSLinkBundleRecord);
          sub_10000AC58(v162);
          objc_autoreleasePoolPop(v161);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          return;
        }

        sub_100058D54(v40, type metadata accessor for LSLinkBundleRecord);
        sub_10000AC58(v162);
        unint64_t v33 = (unint64_t)v44;
        unint64_t v32 = (unint64_t)v42;
        id v34 = v151;
        uint64_t v22 = v165;
        uint64_t v21 = (char *)v154;
        uint64_t v35 = &selRef_isLowPowerDeviceEnabled;
      }

      uint64_t v36 = v161;
    }

    objc_autoreleasePoolPop(v36);
  }

  while (v38);
  swift_bridgeObjectRetain();
  sub_10008EA6C(v46, (uint64_t (*)(void))&LSApplicationExtensionRecord.attributionBundleIdentifier.getter);
  uint64_t v48 = v47;
  unint64_t v154 = v33;
  swift_bridgeObjectRelease();
  uint64_t v50 = sub_10008D600(v48, v49);
  swift_bridgeObjectRetain();
  sub_10008EA6C(v51, (uint64_t (*)(void))&DaemonRecord.attributionBundleIdentifier.getter);
  uint64_t v53 = v52;
  id v54 = v5;
  uint64_t v153 = v32;
  swift_bridgeObjectRelease();
  uint64_t v56 = sub_10008D600(v53, v55);
  uint64_t v57 = sub_10005A3C8(v56, v50);
  uint64_t v58 = v57;
  uint64_t v59 = 0LL;
  uint64_t v60 = *(void *)(v57 + 56);
  uint64_t v156 = v57 + 56;
  uint64_t v61 = 1LL << *(_BYTE *)(v57 + 32);
  uint64_t v62 = -1LL;
  if (v61 < 64) {
    uint64_t v62 = ~(-1LL << v61);
  }
  unint64_t v63 = v62 & v60;
  uint64_t v161 = (void *)((unint64_t)(v61 + 63) >> 6);
  uint64_t v64 = (uint64_t)v148;
  int64_t v152 = v57;
  if ((v62 & v60) == 0) {
    goto LABEL_13;
  }
LABEL_12:
  unint64_t v65 = __clz(__rbit64(v63));
  v63 &= v63 - 1;
  for (unint64_t i = v65 | (v59 << 6); ; unint64_t i = __clz(__rbit64(v68)) + (v59 << 6))
  {
    uint64_t v70 = (uint64_t *)(*(void *)(v58 + 48) + 16 * i);
    uint64_t v71 = *v70;
    uint64_t v72 = v70[1];
    swift_bridgeObjectRetain();
    uint64_t v73 = objc_autoreleasePoolPush();
    sub_1000B5044(0LL, &qword_100132790, &OBJC_CLASS___LSBundleRecord_ptr);
    uint64_t v75 = v74;
    uint64_t v76 = v71;
    uint64_t v53 = v75;
    uint64_t v77 = (void *)static LSBundleRecord.with(bundleIdentifier:allowSystemAppPlaceholder:)(v76, v72, 1LL);
    if (v54)
    {
      swift_errorRelease(v54);
      id v54 = 0LL;
    }

    else
    {
      uint64_t v53 = v77;
      sub_10008FD0C();
      uint64_t v78 = v165;
      if (sub_100009E6C(v64, 1LL, v165) == 1)
      {

        sub_100026E14(v64, &qword_100133390);
      }

      else
      {
        uint64_t v79 = v64;
        uint64_t v80 = v147;
        sub_100084248(v79, v147, type metadata accessor for LSLinkBundleRecord);
        uint64_t v163 = v78;
        uint64_t v164 = &off_100126180;
        uint64_t v81 = sub_10001AFA8(v162);
        sub_100084214(v80, (uint64_t)v81, type metadata accessor for LSLinkBundleRecord);
        sub_100095114(v162, v157, v158, v159, v160);

        sub_100058D54(v80, type metadata accessor for LSLinkBundleRecord);
        sub_10000AC58(v162);
        uint64_t v64 = (uint64_t)v148;
      }

      uint64_t v58 = v152;
    }

    objc_autoreleasePoolPop(v73);
    swift_bridgeObjectRelease();
    if (v63) {
      goto LABEL_12;
    }
LABEL_13:
    if (__OFADD__(v59++, 1LL))
    {
      __break(1u);
      goto LABEL_102;
    }

    unint64_t v68 = *(void *)(v156 + 8 * v59);
    if (!v68) {
      break;
    }
LABEL_23:
    unint64_t v63 = (v68 - 1) & v68;
  }

  uint64_t v69 = v59 + 1;
  unint64_t v68 = *(void *)(v156 + 8 * v69);
  if (v68) {
    goto LABEL_22;
  }
  uint64_t v69 = v59 + 2;
  unint64_t v68 = *(void *)(v156 + 8 * v69);
  if (v68) {
    goto LABEL_22;
  }
  uint64_t v69 = v59 + 3;
  unint64_t v68 = *(void *)(v156 + 8 * v69);
  if (v68)
  {
LABEL_22:
    uint64_t v59 = v69;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v59 = v69 + 1;
    if (__OFADD__(v69, 1LL)) {
      goto LABEL_105;
    }
    unint64_t v68 = *(void *)(v156 + 8 * v59);
    ++v69;
    if (v68) {
      goto LABEL_23;
    }
  }

LABEL_102:
      __break(1u);
    }
  }

      __break(1u);
    }

    __break(1u);
  }

  double result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1000AFC78(uint64_t a1, void *a2, uint64_t (*a3)(void))
{
  uint64_t v4 = a3();
  if (v5)
  {
    uint64_t v6 = a2[1];
    if (v4 == *a2 && v5 == v6)
    {
      sub_10000ADB0();
      char v9 = 0;
    }

    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0LL);
      sub_10000ADB0();
      char v9 = v8 ^ 1;
    }
  }

  else
  {
    char v9 = 1;
  }

  return v9 & 1;
}

void sub_1000AFCF4(uint64_t a1@<X8>)
{
  uint64_t v4 = sub_10001BF00();
  id v6 = sub_100066138(v4, v5, 0LL);
  if (v6)
  {
    id v7 = v6;
    sub_10008FD0C();
    uint64_t v8 = sub_1000B7214();
    sub_1000B6D2C(v1, 1LL, v8);
    if (v9)
    {

      sub_100026E14(v1, &qword_100133390);
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 3sub_100096760(v0[56], v0 + 2) = 0LL;
    }

    else
    {
      *(void *)(a1 + 24) = v8;
      *(void *)(a1 + 3sub_100096760(v0[56], v0 + 2) = &off_100126180;
      uint64_t v10 = sub_10001AFA8((void *)a1);
      sub_100084248(v1, (uint64_t)v10, type metadata accessor for LSLinkBundleRecord);
    }
  }

  else
  {
    *(void *)(a1 + 3sub_100096760(v0[56], v0 + 2) = 0LL;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }

uint64_t DateFunctions.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t type metadata accessor for LSLinkBundleSource()
{
  return objc_opt_self(&OBJC_CLASS____TtC10LinkDaemon18LSLinkBundleSource);
}

uint64_t destroy for Registry.IndexingQueue.Change(uint64_t *a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v3 = a1[4];
  if (v3 >> 60 != 15) {
    uint64_t result = sub_10000A1D8(a1[3], v3);
  }
  if (a1[6]) {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for Registry.IndexingQueue.Change(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = (uint64_t *)(a2 + 24);
  unint64_t v6 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v5;
  }

  else
  {
    uint64_t v7 = *v5;
    sub_10000A280(*v5, v6);
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 3sub_100096760(v0[56], v0 + 2) = v6;
  }

  uint64_t v8 = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = v9;
    swift_retain();
  }

  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }

  return a1;
}

uint64_t assignWithCopy for Registry.IndexingQueue.Change(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (uint64_t *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) >> 60 == 15LL)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v6 = *v4;
      sub_10000A280(*v4, *(void *)(a2 + 32));
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 3sub_100096760(v0[56], v0 + 2) = v5;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v5 >> 60 == 15)
  {
    sub_1000B009C(a1 + 24);
LABEL_6:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v4;
    goto LABEL_8;
  }

  uint64_t v7 = *v4;
  sub_10000A280(*v4, *(void *)(a2 + 32));
  uint64_t v8 = *(void *)(a1 + 24);
  unint64_t v9 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 3sub_100096760(v0[56], v0 + 2) = v5;
  sub_10000A1D8(v8, v9);
LABEL_8:
  uint64_t v10 = *(void *)(a1 + 48);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  uint64_t v11 = *(void *)(a2 + 48);
  if (!v10)
  {
    if (v11)
    {
      uint64_t v13 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = v11;
      *(void *)(a1 + 56) = v13;
      swift_retain();
      return a1;
    }

uint64_t sub_1000B009C(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for Registry.IndexingQueue.Change(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 3sub_100096760(v0[56], v0 + 2) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Registry.IndexingQueue.Change(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  __int128 v4 = (_OWORD *)(a2 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v5 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v6 = *(void *)(a2 + 32);
  if (v6 >> 60 == 15)
  {
    sub_1000B009C(a1 + 24);
LABEL_4:
    *(_OWORD *)(a1 + 24) = *v4;
    goto LABEL_6;
  }

  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)v4;
  *(void *)(a1 + 3sub_100096760(v0[56], v0 + 2) = v6;
  sub_10000A1D8(v7, v5);
LABEL_6:
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 48);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  if (!v9)
  {
    if (v8)
    {
      uint64_t v11 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = v8;
      *(void *)(a1 + 56) = v11;
      return a1;
    }

uint64_t getEnumTagSinglePayload for Registry.IndexingQueue.Change(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 64))
    {
      LODWORD(vsub_100096760(v0[56], v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(vsub_100096760(v0[56], v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(vsub_100096760(v0[56], v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Registry.IndexingQueue.Change(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 64) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Registry.IndexingQueue.Change()
{
  return &type metadata for Registry.IndexingQueue.Change;
}

uint64_t type metadata accessor for RegistryError(uint64_t a1)
{
  return sub_1000B074C(a1, qword_100133A10, (uint64_t)&nominal type descriptor for RegistryError);
}

uint64_t sub_1000B028C(uint64_t a1)
{
  uint64_t v8 = sub_10001C1C4();
  sub_1000B7D14(&qword_100133370);
  uint64_t v9 = v2;
  v7[0] = a1;
  sub_100008D74(v7, v8);
  sub_10000AFB0();
  uint64_t v3 = sub_1000B7658();
  sub_1000B2560(v3, v4, v5);
  sub_10001198C();
  sub_10000AC58(v7);
  return sub_10000AF9C();
}

uint64_t sub_1000B032C(uint64_t a1, uint64_t a2)
{
  v8[3] = &type metadata for UnsafeRawBufferPointer;
  v8[4] = &protocol witness table for UnsafeRawBufferPointer;
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v2 = sub_100008D74(v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  uint64_t v3 = *v2;
  if (*v2 && (uint64_t v4 = v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      uint64_t v6 = Data.InlineData.init(_:)();
    }

    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      uint64_t v6 = Data.LargeSlice.init(_:)();
    }

    else
    {
      uint64_t v6 = Data.InlineSlice.init(_:)();
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  sub_10000AC58(v8);
  return v6;
}

void sub_1000B03E4()
{
  uint64_t v1 = v0;
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  char v7 = v6;
  uint64_t v9 = v8;
  URL._bridgeToObjectiveC()(v10);
  uint64_t v12 = v11;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v1 initWithURL:v12 readonly:v7 & 1 scope:isa];

  sub_10000A1D8(v5, v3);
  uint64_t v14 = sub_100011A34();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8LL))(v9, v14);
  sub_10001BE4C();
}

id sub_1000B047C(void *a1, uint64_t a2, uint64_t a3)
{
  v8[4] = a2;
  void v8[5] = a3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256LL;
  _OWORD v8[2] = sub_1000B0518;
  v8[3] = &unk_100125908;
  uint64_t v5 = _Block_copy(v8);
  id v6 = [v3 initWithValue:a1 wrapper:v5];

  _Block_release(v5);
  swift_release();
  return v6;
}

uint64_t sub_1000B0518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v8 = v7;
  swift_retain(v4);
  swift_unknownObjectRetain(a3);
  v5(v6, v8, a3);
  swift_release(v4);
  swift_bridgeObjectRelease(v8);
  return swift_unknownObjectRelease(a3);
}

void sub_1000B0590(uint64_t a1)
{
}

void sub_1000B059C(uint64_t a1)
{
}

void sub_1000B05A8(uint64_t a1)
{
}

void sub_1000B05B4(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    sub_1000B7930();
    sub_1000B727C( (uint64_t)"Fatal error",  v2,  v3,  (uint64_t)"Can't construct Array with count < 0",  v4,  v5,  (uint64_t)"Swift/Array.swift");
    __break(1u);
  }

  else
  {
    if (a1) {
      *(void *)(static Array._allocateBufferUninitialized(minimumCapacity:)(a1, a2) + 16) = a1;
    }
    sub_1000B7CF8();
  }

void sub_1000B0618(uint64_t a1)
{
}

void sub_1000B0624(uint64_t a1, uint64_t *a2)
{
  if (a1 < 0)
  {
    sub_1000B7930();
    sub_1000B727C( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"Can't construct Array with count < 0",  v6,  v7,  (uint64_t)"Swift/Array.swift");
    __break(1u);
  }

  else
  {
    if (a1)
    {
      uint64_t v3 = sub_100008DB0(a2);
      *(void *)(static Array._allocateBufferUninitialized(minimumCapacity:)(a1, v3) + 16) = a1;
    }

    sub_1000B7CF8();
  }

void sub_1000B0694()
{
}

void sub_1000B06A0(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *uint64_t v1 = v3;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native) {
    *uint64_t v1 = a1(isUniquelyReferenced_nonNull_native, *(void *)(v3 + 16) + 1LL, 1LL, v3);
  }
  sub_10000AF74();
}

uint64_t sub_1000B06EC(uint64_t a1)
{
  return sub_1000B06F8(a1, (uint64_t (*)(BOOL))sub_100013EF0);
}

uint64_t sub_1000B06F8(uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24LL);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    __n128 result = a2(v3 > 1);
    *(void *)uint64_t v2 = result;
  }

  return result;
}

uint64_t type metadata accessor for LSLinkBundleRecord(uint64_t a1)
{
  return sub_1000B074C(a1, qword_100133AA0, (uint64_t)&nominal type descriptor for LSLinkBundleRecord);
}

uint64_t sub_1000B074C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

void sub_1000B077C(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16LL);
  if (v5 < a2)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if (__OFADD__(v5, v8))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  if (!swift_isUniquelyReferenced_nonNull_native(*v2) || v5 - v7 > *(void *)(v4 + 24) >> 1)
  {
    sub_100014160();
    uint64_t v4 = v9;
  }

  uint64_t v10 = *(void *)(sub_100008DB0(&qword_100133910) - 8);
  uint64_t v11 = v4 + ((*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  uint64_t v12 = *(void *)(v10 + 72);
  swift_arrayDestroy(v11 + v12 * a1, v7);
  if (!v7) {
    goto LABEL_13;
  }
  uint64_t v13 = *(void *)(v4 + 16);
  if (__OFSUB__(v13, a2)) {
    goto LABEL_19;
  }
  sub_100015B94(v11 + v12 * a2, v13 - a2);
  uint64_t v14 = *(void *)(v4 + 16);
  BOOL v15 = __OFADD__(v14, v8);
  uint64_t v16 = v14 - v7;
  if (!v15)
  {
    *(void *)(v4 + 16) = v16;
LABEL_13:
    *uint64_t v2 = v4;
    return;
  }

char *sub_1000B0894(char *result, uint64_t a2)
{
  if (((unint64_t)result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16LL);
  if (v5 < a2)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v6 = result;
  uint64_t v7 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v8 = &result[-a2];
  if (__OFSUB__(0LL, v7))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if (__OFADD__(v5, v8))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  if (!swift_isUniquelyReferenced_nonNull_native(*v2) || v5 - v7 > *(void *)(v4 + 24) >> 1)
  {
    sub_100014174();
    uint64_t v4 = v9;
  }

  uint64_t v10 = (char *)(v4 + 32 + ((void)v6 << 6));
  uint64_t result = (char *)swift_arrayDestroy(v10, v7);
  if (!v7) {
    goto LABEL_13;
  }
  uint64_t v11 = *(void *)(v4 + 16);
  if (__OFSUB__(v11, a2)) {
    goto LABEL_19;
  }
  uint64_t result = sub_100015BA0((char *)(v4 + 32 + (a2 << 6)), v11 - a2, v10);
  uint64_t v12 = *(void *)(v4 + 16);
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 - v7;
  if (!v13)
  {
    *(void *)(v4 + 16) = v14;
LABEL_13:
    *uint64_t v2 = v4;
    return result;
  }

uint64_t sub_1000B0990()
{
  if (v5 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v0 = v6;
    uint64_t v2 = v5;
    unint64_t v3 = *v1;
    if (!(*v1 >> 62))
    {
      uint64_t v7 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      goto LABEL_4;
    }
  }

  sub_1000B8064();
  sub_1000119E4();
  uint64_t v7 = sub_10006CA28();
  sub_10001BC70();
LABEL_4:
  if (v7 < v0)
  {
    __break(1u);
    goto LABEL_32;
  }

  if (__OFSUB__(v0, v2))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  uint64_t v4 = v2 - v0;
  if (__OFSUB__(0LL, v0 - v2))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  unint64_t v3 = *v1;
  if (!(*v1 >> 62))
  {
    uint64_t v8 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    goto LABEL_9;
  }

uint64_t sub_1000B0BA0(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v60 = a3;
  uint64_t v6 = type metadata accessor for LNBundleRecord(0LL);
  uint64_t v57 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v53 = (uint64_t)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v51 - v9;
  __chkstk_darwin(v11);
  BOOL v13 = (char *)&v51 - v12;
  uint64_t v14 = sub_100008DB0(&qword_100130E98);
  __chkstk_darwin(v14);
  uint64_t v18 = (uint64_t *)((char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v19 = *(void *)(a1 + 16);
  if (!v19) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v58 = v3;
  uint64_t v56 = (uint64_t)v18 + *(int *)(v15 + 48);
  uint64_t v20 = a1 + ((*(unsigned __int8 *)(v16 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  uint64_t v54 = *(void *)(v16 + 72);
  uint64_t v51 = a1;
  swift_bridgeObjectRetain();
  char v21 = type metadata accessor for LNBundleRecord;
  __n128 v55 = v18;
  uint64_t v52 = v10;
  while (1)
  {
    uint64_t v59 = v20;
    sub_100026CB8(v20, (uint64_t)v18, &qword_100130E98);
    uint64_t v23 = v18[1];
    v63[0] = *v18;
    uint64_t v22 = v63[0];
    v63[1] = v23;
    uint64_t v24 = (uint64_t)v13;
    unint64_t v25 = v21;
    sub_100084248(v56, (uint64_t)v13, v21);
    uint64_t v26 = *(void **)v60;
    unint64_t v28 = sub_100015F98(v22, v23);
    uint64_t v29 = v26[2];
    BOOL v30 = (v27 & 1) == 0;
    uint64_t v31 = v29 + v30;
    if (__OFADD__(v29, v30))
    {
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      goto LABEL_22;
    }

    char v32 = v27;
    if (v26[3] >= v31)
    {
      if ((a2 & 1) == 0)
      {
        sub_100008DB0(&qword_1001333B0);
        _NativeDictionary.copy()();
      }
    }

    else
    {
      sub_100017920(v31, a2 & 1);
      uint64_t v33 = sub_100015F98(v22, v23);
      if ((v32 & 1) != (v34 & 1)) {
        goto LABEL_21;
      }
      unint64_t v28 = v33;
    }

    uint64_t v35 = *(void **)v60;
    if ((v32 & 1) != 0) {
      break;
    }
    v35[(v28 >> 6) + 8] |= 1LL << v28;
    os_log_type_t v42 = (uint64_t *)(v35[6] + 16 * v28);
    *os_log_type_t v42 = v22;
    v42[1] = v23;
    uint64_t v43 = v35[7] + *(void *)(v57 + 72) * v28;
    BOOL v13 = (char *)v24;
    char v21 = v25;
    sub_100084248(v24, v43, v25);
    uint64_t v44 = v35[2];
    BOOL v45 = __OFADD__(v44, 1LL);
    uint64_t v46 = v44 + 1;
    if (v45) {
      goto LABEL_20;
    }
    v35[2] = v46;
LABEL_14:
    uint64_t v18 = v55;
    uint64_t v20 = v59 + v54;
    a2 = 1;
    if (!--v19) {
      return swift_bridgeObjectRelease_n(v51, 2LL);
    }
  }

  uint64_t v36 = v19;
  unint64_t v37 = *(void *)(v57 + 72) * v28;
  uint64_t v38 = v35[7] + v37;
  uint64_t v39 = v53;
  char v21 = v25;
  sub_100084214(v38, v53, v25);
  uint64_t v40 = (uint64_t)v52;
  BOOL v13 = (char *)v24;
  uint64_t v41 = v58;
  sub_100094D50(v39, v24, (uint64_t)v52);
  uint64_t v58 = v41;
  if (!v41)
  {
    sub_100058D54(v39, v21);
    sub_100058D54(v24, v21);
    swift_bridgeObjectRelease();
    sub_1000B3D20(v40, *(void *)(*(void *)v60 + 56LL) + v37);
    uint64_t v19 = v36;
    goto LABEL_14;
  }

  sub_100058D54(v39, type metadata accessor for LNBundleRecord);
  uint64_t v64 = v58;
  swift_errorRetain(v58);
  uint64_t v48 = sub_100008DB0(&qword_100130620);
  if ((swift_dynamicCast(v48, &v64, v48, &type metadata for _MergeError, 0LL) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_100058D54(v24, type metadata accessor for LNBundleRecord);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_errorRelease(v64);
  }

uint64_t sub_1000B1020(uint64_t a1)
{
  uint64_t result = static _DictionaryStorage.copy(original:)(a1);
  uint64_t v3 = (void *)result;
  int64_t v4 = 0LL;
  uint64_t v28 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v6 = a1 + 64;
  uint64_t v5 = v7;
  uint64_t v8 = 1LL << *(_BYTE *)(v6 - 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & v5;
  uint64_t v26 = v6;
  int64_t v27 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = result + 64;
  if ((v9 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v12 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v4 << 6))
  {
    uint64_t v17 = (uint64_t *)(*(void *)(v28 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = *(void *)(*(void *)(v28 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v21 = sub_10003F290(1000LL, v20);
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v11 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    uint64_t v22 = (void *)(v3[6] + 16 * i);
    *uint64_t v22 = v18;
    v22[1] = v19;
    *(void *)(v3[7] + 8 * i) = v21;
    uint64_t v23 = v3[2];
    BOOL v24 = __OFADD__(v23, 1LL);
    uint64_t v25 = v23 + 1;
    if (v24)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }

    v3[2] = v25;
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1LL)) {
      goto LABEL_24;
    }
    if (v14 >= v27) {
      return (uint64_t)v3;
    }
    unint64_t v15 = *(void *)(v26 + 8 * v14);
    ++v4;
    if (!v15)
    {
      int64_t v4 = v14 + 1;
      if (v14 + 1 >= v27) {
        return (uint64_t)v3;
      }
      unint64_t v15 = *(void *)(v26 + 8 * v4);
      if (!v15)
      {
        int64_t v4 = v14 + 2;
        if (v14 + 2 >= v27) {
          return (uint64_t)v3;
        }
        unint64_t v15 = *(void *)(v26 + 8 * v4);
        if (!v15) {
          break;
        }
      }
    }

void sub_1000B122C()
{
}

uint64_t sub_1000B1244(unint64_t a1)
{
  if (a1 >> 62)
  {
    sub_10000AFB0();
    uint64_t v2 = sub_10003EF5C();
    sub_10001198C();
  }

  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v2, 0LL, a1);
}

void sub_1000B12A0(uint64_t a1)
{
  if (!*(void *)(*(void *)v1 + 16LL)) {
    return;
  }
  uint64_t v3 = a1 + 56;
  uint64_t v4 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v8 = 0LL;
  if (!v6) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    int64_t v14 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    swift_bridgeObjectRetain();
    sub_1000B18A8(v15, v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v11 >= v7) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v12 = *(void *)(v3 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }

unint64_t *sub_1000B1438(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v41 = a1 + 56;
    uint64_t v5 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v39 = ~v5;
    if (-v5 < 64) {
      uint64_t v6 = ~(-1LL << -(char)v5);
    }
    else {
      uint64_t v6 = -1LL;
    }
    unint64_t v7 = v6 & v4;
    int64_t v40 = (unint64_t)(63 - v5) >> 6;
    uint64_t v8 = a2 + 56;
    swift_bridgeObjectRetain();
    int64_t v9 = 0LL;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v11 = v10 | (v9 << 6);
    while (1)
    {
      uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      Hasher.init(_seed:)(v42, *(void *)(v2 + 40));
      swift_bridgeObjectRetain();
      String.hash(into:)(v42, v18, v17);
      Swift::Int v19 = Hasher._finalize()();
      uint64_t v20 = -1LL << *(_BYTE *)(v2 + 32);
      unint64_t v21 = v19 & ~v20;
      if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) != 0) {
        break;
      }
LABEL_37:
      swift_bridgeObjectRelease();
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v12 = v9 + 1;
      if (__OFADD__(v9, 1LL))
      {
        __break(1u);
        goto LABEL_50;
      }

      if (v12 >= v40) {
        goto LABEL_48;
      }
      unint64_t v13 = *(void *)(v41 + 8 * v12);
      int64_t v14 = v9 + 1;
      if (!v13)
      {
        int64_t v14 = v9 + 2;
        if (v9 + 2 >= v40) {
          goto LABEL_48;
        }
        unint64_t v13 = *(void *)(v41 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v9 + 3;
          if (v9 + 3 >= v40) {
            goto LABEL_48;
          }
          unint64_t v13 = *(void *)(v41 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v9 + 4;
            if (v9 + 4 >= v40) {
              goto LABEL_48;
            }
            unint64_t v13 = *(void *)(v41 + 8 * v14);
            if (!v13)
            {
              int64_t v15 = v9 + 5;
              if (v9 + 5 >= v40)
              {
LABEL_48:
                sub_10001B100(a1);
                return (unint64_t *)v2;
              }

              unint64_t v13 = *(void *)(v41 + 8 * v15);
              if (!v13)
              {
                while (1)
                {
                  int64_t v14 = v15 + 1;
                  if (__OFADD__(v15, 1LL)) {
                    break;
                  }
                  if (v14 >= v40) {
                    goto LABEL_48;
                  }
                  unint64_t v13 = *(void *)(v41 + 8 * v14);
                  ++v15;
                  if (v13) {
                    goto LABEL_22;
                  }
                }

uint64_t sub_1000B18A8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)(v21, *(void *)(*v2 + 40LL));
  swift_bridgeObjectRetain();
  String.hash(into:)(v21, a1, a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0LL;
  }

  uint64_t v9 = *(void *)(v5 + 48);
  unint64_t v10 = (void *)(v9 + 16 * v8);
  uint64_t v11 = v10[1];
  BOOL v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
  {
    uint64_t v16 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v16;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v17 = (void *)(v9 + 16 * v8);
      uint64_t v18 = v17[1];
      BOOL v19 = *v17 == a1 && v18 == a2;
    }

    while (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) == 0);
  }

  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v14 = *v2;
  v21[0] = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100019D44();
    uint64_t v14 = v21[0];
  }

  uint64_t v15 = *(void *)(*(void *)(v14 + 48) + 16 * v8);
  sub_1000B1FB0(v8);
  *uint64_t v2 = v21[0];
  swift_bridgeObjectRelease();
  return v15;
}

unint64_t *sub_1000B1A34( unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v41 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v43 = a3 + 56;
  while (2)
  {
    uint64_t v40 = v8;
    do
    {
      while (1)
      {
        int64_t v9 = a5[3];
        unint64_t v10 = a5[4];
        if (v10)
        {
          uint64_t v11 = (v10 - 1) & v10;
          unint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
          goto LABEL_15;
        }

        int64_t v13 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
          __break(1u);
          goto LABEL_48;
        }

        int64_t v14 = (unint64_t)(a5[2] + 64LL) >> 6;
        int64_t v15 = a5[3];
        if (v13 >= v14) {
          goto LABEL_46;
        }
        uint64_t v16 = a5[1];
        unint64_t v17 = *(void *)(v16 + 8 * v13);
        if (!v17)
        {
          int64_t v18 = v9 + 2;
          int64_t v15 = v9 + 1;
          if (v9 + 2 >= v14) {
            goto LABEL_46;
          }
          unint64_t v17 = *(void *)(v16 + 8 * v18);
          if (!v17)
          {
            int64_t v15 = v9 + 2;
            if (v9 + 3 >= v14) {
              goto LABEL_46;
            }
            unint64_t v17 = *(void *)(v16 + 8 * (v9 + 3));
            if (v17)
            {
              int64_t v13 = v9 + 3;
              goto LABEL_14;
            }

            int64_t v18 = v9 + 4;
            int64_t v15 = v9 + 3;
            if (v9 + 4 >= v14) {
              goto LABEL_46;
            }
            unint64_t v17 = *(void *)(v16 + 8 * v18);
            if (!v17)
            {
              int64_t v13 = v9 + 5;
              int64_t v15 = v9 + 4;
              if (v9 + 5 >= v14) {
                goto LABEL_46;
              }
              unint64_t v17 = *(void *)(v16 + 8 * v13);
              if (!v17)
              {
                int64_t v38 = v9 + 6;
                while (v38 < v14)
                {
                  unint64_t v17 = *(void *)(v16 + 8 * v38++);
                  if (v17)
                  {
                    int64_t v13 = v38 - 1;
                    goto LABEL_14;
                  }
                }

                int64_t v15 = v14 - 1;
LABEL_46:
                a5[3] = v15;
                a5[4] = 0LL;
                swift_retain();
                return (unint64_t *)sub_1000B1D24(v41, a2, v40, a3);
              }

              goto LABEL_14;
            }
          }

          int64_t v13 = v18;
        }

Swift::Int sub_1000B1D24(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_35:
    swift_release();
    return (Swift::Int)v8;
  }

  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_100008DB0((uint64_t *)&unk_100130DF0);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v5);
  uint64_t v8 = (void *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0LL;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0LL;
  Swift::Int v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }

    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1LL)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_35;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_35;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_35;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }

LABEL_40:
  __break(1u);
  return result;
}

        ++v29;
      }

      while (v20 != v29);
    }

    unint64_t v23 = (unint64_t)(v2 + 9);
    size_t v35 = v2[9];
    uint64_t v266 = (uint64_t *)(v2 + 9);
    uint64_t v32 = *(char ***)((v35 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_45:
    uint64_t v29 = v267;
    if (v32)
    {
      uint64_t v20 = 0LL;
      unint64_t v12 = (uint64_t)&selRef_assistantDefinedSchemas;
      BOOL v26 = (os_log_s *)&qword_100134560;
      *(void *)&uint64_t v263 = &v279;
      *(void *)&uint64_t v36 = 136315394LL;
      uint64_t v257 = v36;
      uint64_t v253 = (void **)((char *)&type metadata for Any + 8);
      *(void *)&uint64_t v36 = 136315650LL;
      uint64_t v258 = v36;
      uint64_t v270 = (void **)v32;
      do
      {
        uint64_t v111 = *(void *)v23;
        if ((*(void *)v23 & 0xC000000000000001LL) != 0)
        {
          unint64_t v112 = (char **)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v111);
        }

        else
        {
          if (v20 >= *(void *)((v111 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
            goto LABEL_127;
          }
          unint64_t v112 = (char **)sub_10003F0A0(v111 + 8 * v20);
        }

        unint64_t v21 = v112;
        if (sub_100026BAC( v112,  (SEL *)&selRef_assistantDefinedSchemas,  &qword_100134560,  &OBJC_CLASS___LNAssistantDefinedSchemaConformance_ptr))
        {
          sub_1000CAAF8();
          if (v113)
          {
            if (!sub_1000CAA4C())
            {
LABEL_79:

              sub_10000ADB0();
              goto LABEL_80;
            }
          }

          else if (!*(void *)(v6 + 16))
          {
            goto LABEL_79;
          }

          if ((v35 & 0xC000000000000001LL) != 0)
          {
            uint64_t v114 = sub_1000CA9AC();
          }

          else
          {
            if (!*(void *)(v6 + 16)) {
              goto LABEL_131;
            }
            uint64_t v114 = (uint64_t)sub_1000CAB18();
          }

          uint64_t v115 = (void *)v114;
          uint64_t v116 = sub_10000ADB0();
          uint64_t v117 = AssistantPrebuiltLibrary.enums.getter(v116);
          unint64_t v118 = sub_1000C932C();
          BOOL v26 = (os_log_s *)v119;
          Swift::Int v6 = (uint64_t)v262;
          if (*(void *)(v117 + 16) && (sub_100015F98(v118, v119), (v120 & 1) != 0))
          {
            sub_1000CAB08();
            v121(v6);
            uint64_t v122 = 0LL;
          }

          else
          {
            uint64_t v122 = 1LL;
          }

          uint64_t v123 = v275;
          sub_100009E60(v6, v122, 1LL, v275);
          sub_10001DF40();
          sub_10001BEC0();
          if (sub_100009E6C(v6, 1LL, v123) == 1)
          {
            sub_10000C218(v6, &qword_100134548);
            uint64_t v279 = &unk_100127290;
            uint64_t v124 = sub_100008DB0((uint64_t *)&unk_100132590);
            size_t v35 = sub_1000CA9B8(v124);
            if (!LNLogSubsystem) {
              goto LABEL_153;
            }
            int64_t v126 = v125;
            unint64_t v127 = String.init(cString:)(LNLogSubsystem);
            uint64_t v128 = v255;
            Logger.init(subsystem:category:)(v127, v129, v35, v126);
            Swift::Int v6 = v115;
            uint64_t v130 = v21;
            sub_1000B6D00();
            unint64_t v21 = (char **)sub_1000CAB84();
            size_t v35 = (uint64_t)v128;
            Logger.logObject.getter(v21);
            uint64_t v131 = sub_10000AF38();
            if (sub_100068360(v131))
            {
              id v132 = sub_10000AE10(22LL);
              uint64_t v133 = sub_10000AE10(64LL);
              sub_1000CAB8C(v133, (uint64_t)&v282);
              sub_1000CAA98((uint64_t)&v280);
              int v135 = sub_100011ADC(v134, "name");
              uint64_t v136 = static String._unconditionallyBridgeFromObjectiveC(_:)(v135);
              int64_t v138 = v137;

              uint64_t v139 = sub_10000DE60(v136, v138, (uint64_t *)&v279);
              uint64_t v140 = sub_1000CAB58(v139);
              uint64_t v141 = v263;
              sub_1000B642C(v140, v263, v142, v143);

              swift_bridgeObjectRelease();
              *(_WORD *)(v132 + 1sub_100096760(v0[56], v0 + 2) = 2080;
              uint64_t v144 = [v21 identifier];
              uint64_t v2 = (unint64_t *)static String._unconditionallyBridgeFromObjectiveC(_:)(v144);
              uint64_t v29 = v145;

              unint64_t v23 = (unint64_t)v266;
              uint64_t v146 = sub_1000CAA20();
              uint64_t v147 = sub_1000CAB58(v146);
              sub_1000B642C(v147, v141, v148, v149);

              sub_1000CAA00();
              Swift::Int v6 = v260;
              sub_1000CAB44(v260, 2LL);
              sub_10000AD78(v6);
              sub_10000AD78(v132);

              sub_1000CA9C4();
              id v151 = (uint64_t)v255;
            }

            else
            {

              sub_1000CA9C4();
              id v151 = (uint64_t)v128;
            }

            sub_1000CABB8(v151, v150);
            uint64_t v32 = (char **)v270;
            unint64_t v12 = (uint64_t)&selRef_assistantDefinedSchemas;
            BOOL v26 = (os_log_s *)&qword_100134560;
          }

          else
          {
            (*(void (**)(void *, uint64_t, uint64_t))(v265 + 32))(v269, v6, v123);
            int64_t v152 = v273;
            sub_100011A3C(v273);
            uint64_t v153 = v115;
            unint64_t v154 = v21;
            unint64_t v21 = (char **)sub_1000CAB84();
            uint64_t v32 = v115;
            uint64_t v155 = (os_log_s *)sub_1000CAB30();
            uint64_t v156 = static os_log_type_t.info.getter();
            if (sub_1000CAAB0(v156))
            {
              uint64_t v157 = sub_10000AE10(32LL);
              uint64_t v158 = sub_10000AE10(96LL);
              sub_1000CAB8C(v158, (uint64_t)&v282);
              sub_1000CAA98((uint64_t)&v281);
              uint64_t v159 = sub_1000C932C();
              uint64_t v161 = sub_1000B804C(v159, v160);
              Swift::String v162 = sub_1000CAB58(v161);
              sub_1000B642C(v162, v263, v163, v164);

              sub_10000ADB0();
              *(_WORD *)(v157 + 1sub_100096760(v0[56], v0 + 2) = 2080;
              swift_bridgeObjectRetain();
              uint64_t v165 = sub_1000CAA70();
              uint64_t v167 = sub_10000DE60(v165, v152, v166);
              sub_1000CA974(v167, v168, v169, v157 + 22);
              uint64_t v170 = sub_100027E5C(v152);
              *(_WORD *)(v157 + 2sub_100096760(v0[56], v0 + 2) = 2080;
              uint64_t v171 = sub_100011ADC(v170, "identifier");
              uint64_t v172 = static String._unconditionallyBridgeFromObjectiveC(_:)(v171);
              uint64_t v29 = v173;

              uint64_t v174 = sub_10000DE60(v172, v29, (uint64_t *)&v279);
              sub_1000CA974(v174, v175, v176, v157 + 32);

              sub_1000CAA00();
              sub_1000CAB28( (void *)&_mh_execute_header,  v155,  (os_log_type_t)v259,  "Applying %s to %s:%s",  (uint8_t *)v157);
              uint64_t v177 = v260;
              sub_1000CAA34();
              sub_10000AD78(v177);
              sub_10000AD78(v157);
            }

            else
            {

              sub_10001191C(v152);
            }

            uint64_t v2 = v276;
            Swift::Int v6 = AssistantPrebuiltEnum.metadata.getter();
            sub_1000C932C();
            uint64_t v178 = sub_1000CABA4();
            sub_10000ADB0();
            [v32 copyWithDescriptiveMetadataFromEnum:v6 usingLibraryKey:v178];
            sub_100028040();

            unint64_t v23 = (unint64_t)v266;
            unint64_t v12 = *v266;
            uint64_t isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v266);
            *(void *)unint64_t v23 = v12;
            BOOL v26 = (os_log_s *)&qword_100134560;
            if (!isUniquelyReferenced_nonNull_bridgeObject || v12 < 0 || (v12 & 0x4000000000000000LL) != 0)
            {
              unint64_t v12 = sub_1000B1240(v12);
              *(void *)unint64_t v23 = v12;
            }

            if (v20 >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
              goto LABEL_134;
            }
            sub_1000CA998((v12 & 0xFFFFFFFFFFFFFF8LL) + 8 * v20);
            size_t v35 = v23;
            specialized Array._endMutation()(v180);

            (*(void (**)(void *, uint64_t))(v265 + 8))(v269, v275);
            uint64_t v32 = (char **)v270;
            unint64_t v12 = (uint64_t)&selRef_assistantDefinedSchemas;
          }
        }

        else
        {
        }

unint64_t sub_1000B1FB0(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v24, *(void *)(v3 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v24, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        Swift::Int v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 >= v9 && v2 >= v14)
          {
LABEL_15:
            uint64_t v17 = *(void *)(v3 + 48);
            uint64_t v18 = (_OWORD *)(v17 + 16 * v2);
            uint64_t v19 = (_OWORD *)(v17 + 16 * v6);
            BOOL v20 = v2 != v6 || v18 >= v19 + 1;
            int64_t v2 = v6;
            if (v20)
            {
              *uint64_t v18 = *v19;
              int64_t v2 = v6;
            }
          }
        }

        else if (v14 >= v9 || v2 >= v14)
        {
          goto LABEL_15;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    Swift::Int result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v21 = *(void *)(v3 + 16);
  BOOL v22 = __OFSUB__(v21, 1LL);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 16) = v23;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

void sub_1000B2168(uint64_t (*a1)(id *), uint64_t a2)
{
  uint64_t v4 = v2;
  sub_10001C1BC();
  sub_1000B7F34();
  unint64_t v7 = sub_1000B2464();
  char v9 = v8;
  sub_10001DF40();
  if (!v3)
  {
    if ((v9 & 1) != 0)
    {
      if (*v4 >> 62)
      {
        sub_10000AE38();
        sub_100028060();
        sub_10000ADB0();
      }
    }

    else
    {
      unint64_t v10 = v7 + 1;
      if (__OFADD__(v7, 1LL)) {
        goto LABEL_56;
      }
      if (*v4 >> 62)
      {
LABEL_57:
        sub_10000AE38();
        uint64_t v11 = sub_100028060();
        sub_10000ADB0();
      }

      else
      {
        uint64_t v11 = *(void *)((*v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }

      if (v10 != v11)
      {
        unint64_t v10 = v7 + 5;
        uint64_t v31 = a2;
        do
        {
          unint64_t v12 = v10 - 4;
          unint64_t v13 = *v4;
          if ((*v4 & 0xC000000000000001LL) != 0)
          {
            id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, v13);
          }

          else
          {
            if ((v12 & 0x8000000000000000LL) != 0)
            {
              __break(1u);
LABEL_47:
              __break(1u);
LABEL_48:
              __break(1u);
LABEL_49:
              __break(1u);
LABEL_50:
              __break(1u);
LABEL_51:
              __break(1u);
LABEL_52:
              __break(1u);
LABEL_53:
              __break(1u);
LABEL_54:
              __break(1u);
LABEL_55:
              __break(1u);
LABEL_56:
              __break(1u);
              goto LABEL_57;
            }

            if (v12 >= *(void *)((v13 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
              goto LABEL_47;
            }
            id v14 = *(id *)(v13 + 8 * v10);
          }

          unint64_t v15 = v14;
          id v32 = v14;
          char v16 = a1(&v32);

          if ((v16 & 1) == 0)
          {
            if (v12 != v7)
            {
              unint64_t v17 = *v4;
              if ((*v4 & 0xC000000000000001LL) != 0)
              {
                id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, *v4);
                unint64_t v17 = *v4;
              }

              else
              {
                if ((v7 & 0x8000000000000000LL) != 0) {
                  goto LABEL_50;
                }
                if (v7 >= *(void *)((v17 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
                  goto LABEL_51;
                }
                id v18 = sub_10003F0A0(v17 + 8 * v7);
              }

              if ((v17 & 0xC000000000000001LL) != 0)
              {
                id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, v17);
                unint64_t v17 = *v4;
              }

              else
              {
                if ((v12 & 0x8000000000000000LL) != 0) {
                  goto LABEL_52;
                }
                if (v12 >= *(void *)((v17 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
                  goto LABEL_53;
                }
                id v19 = *(id *)(v17 + 8 * v10);
              }

              int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v17);
              *uint64_t v4 = v17;
              if (!isUniquelyReferenced_nonNull_bridgeObject
                || (v17 & 0x8000000000000000LL) != 0
                || (v17 & 0x4000000000000000LL) != 0)
              {
                unint64_t v17 = sub_1000B1244(v17);
                *uint64_t v4 = v17;
              }

              uint64_t v21 = *(void **)((v17 & 0xFFFFFFFFFFFFFF8LL) + 8 * v7 + 0x20);
              *(void *)((v17 & 0xFFFFFFFFFFFFFF8LL) + 8 * v7 + 0x20) = v19;

              specialized Array._endMutation()(v22);
              unint64_t v23 = *v4;
              int v24 = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
              *uint64_t v4 = v23;
              if (!v24 || (v23 & 0x8000000000000000LL) != 0 || (v23 & 0x4000000000000000LL) != 0)
              {
                unint64_t v23 = sub_1000B1244(v23);
                *uint64_t v4 = v23;
              }

              a2 = v31;
              if ((v12 & 0x8000000000000000LL) != 0) {
                goto LABEL_54;
              }
              uint64_t v25 = v23 & 0xFFFFFFFFFFFFFF8LL;
              if (v12 >= *(void *)((v23 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
                goto LABEL_55;
              }
              BOOL v26 = *(void **)(v25 + 8 * v10);
              *(void *)(v25 + 8 * v10) = v18;

              specialized Array._endMutation()(v27);
            }

            if (__OFADD__(v7++, 1LL)) {
              goto LABEL_49;
            }
          }

          unint64_t v29 = v10 - 3;
          if (__OFADD__(v12, 1LL)) {
            goto LABEL_48;
          }
          if (*v4 >> 62)
          {
            sub_10000AE38();
            uint64_t v30 = sub_100028060();
            sub_10000ADB0();
          }

          else
          {
            uint64_t v30 = *(void *)((*v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
          }

          ++v10;
        }

        while (v29 != v30);
      }
    }
  }

  sub_10006C994();
}

uint64_t sub_1000B2464()
{
  uint64_t v15 = v1;
  uint64_t v16 = v3;
  unint64_t v4 = v2;
  unint64_t v6 = v5;
  if (v2 >> 62)
  {
LABEL_14:
    sub_10001C064();
    uint64_t v7 = sub_100028060();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v7 = *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v8 = 0LL;
  if (v7)
  {
    while (1)
    {
      id v9 = (v4 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v4)
         : sub_10003F0A0(v4 + 8 * v8);
      unint64_t v10 = v9;
      id v14 = v9;
      char v11 = v6(&v14);

      if (v0 || (v11 & 1) != 0) {
        break;
      }
      uint64_t v12 = v8 + 1;
      if (__OFADD__(v8, 1LL))
      {
        __break(1u);
        goto LABEL_14;
      }

      ++v8;
      if (v12 == v7) {
        return 0LL;
      }
    }
  }

  return v8;
}

uint64_t sub_1000B2560@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    Swift::Int result = 0LL;
LABEL_4:
    unint64_t v5 = 0xC000000000000000LL;
    goto LABEL_5;
  }

  if (v4 <= 14)
  {
    Swift::Int result = Data.InlineData.init(_:)();
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }

  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    Swift::Int result = Data.LargeSlice.init(_:)();
    unint64_t v5 = v8 | 0x8000000000000000LL;
  }

  else
  {
    Swift::Int result = Data.InlineSlice.init(_:)();
    unint64_t v5 = v6 | 0x4000000000000000LL;
  }

uint64_t sub_1000B25D4(void *a1)
{
  return sub_1000B25EC(a1, (SEL *)&selRef_bundleIdentifier);
}

uint64_t sub_1000B25E0(void *a1)
{
  return sub_1000B25EC(a1, (SEL *)&selRef_widgetKind);
}

uint64_t sub_1000B25EC(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    uint64_t v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  }

  return sub_10000AF9C();
}

uint64_t sub_1000B2644(void *a1)
{
  id v2 = [a1 uniqueInstallIdentifier];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t sub_1000B26B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100096760(v0[56], v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B26C0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000B26CC()
{
  uint64_t v0 = swift_task_alloc(dword_10013332C);
  uint64_t v1 = (void *)sub_10000E9E0(v0);
  sub_1000B6844(v1);
  return sub_10009B564();
}

uint64_t sub_1000B2718(uint64_t a1, _OWORD *a2)
{
  __int128 v2 = a2[1];
  v5[0] = *a2;
  v5[1] = v2;
  __int128 v3 = a2[3];
  uint64_t v5[2] = a2[2];
  v5[3] = v3;
  return sub_10008EF44(a1, (char *)v5);
}

uint64_t sub_1000B2748(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v10 = type metadata accessor for LSLinkBundleRecord(0LL);
  char v11 = &off_100126180;
  uint64_t v6 = sub_10001AFA8(&v9);
  sub_100084248(a2, (uint64_t)v6, type metadata accessor for LSLinkBundleRecord);
  uint64_t v7 = *a3;
  *(void *)(v7 + 16) = a1 + 1;
  return sub_100009EEC(&v9, v7 + 40 * a1 + 32);
}

uint64_t sub_1000B27D0(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v88 = a2;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  char v11 = (char *)&v82 - v10;
  __chkstk_darwin(v12);
  id v14 = (char *)&v82 - v13;
  uint64_t v93 = &unk_1001231E8;
  uint64_t v94 = &off_100123208;
  uint64_t v15 = swift_allocObject(&unk_1001259B8, 56LL, 7LL);
  v92[0] = v15;
  uint64_t v16 = *a1;
  __int128 v17 = *(_OWORD *)(a1 + 1);
  __int128 v95 = *(_OWORD *)(a1 + 3);
  v96[0] = v17;
  __int128 v18 = *((_OWORD *)a1 + 1);
  *(_OWORD *)(v15 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v15 + 3sub_100096760(v0[56], v0 + 2) = v18;
  *(void *)(v15 + 48) = a1[4];
  id v19 = sub_100008D74(v92, (uint64_t)&unk_1001231E8);
  __int128 v20 = *((_OWORD *)v19 + 1);
  __int128 v98 = *(_OWORD *)v19;
  __int128 v99 = v20;
  uint64_t v100 = v19[4];
  swift_unknownObjectRetain(v16);
  sub_10001B4C8((uint64_t)v96);
  sub_10001B4C8((uint64_t)&v95);
  uint64_t v21 = sub_100011EFC();
  if (!v22) {
    goto LABEL_19;
  }
  uint64_t v23 = v21;
  unint64_t v24 = v22;
  uint64_t v25 = sub_100008D74(v92, (uint64_t)v93);
  __int128 v26 = *((_OWORD *)v25 + 1);
  v96[1] = *(_OWORD *)v25;
  v96[2] = v26;
  uint64_t v97 = v25[4];
  uint64_t v27 = sub_100011F9C();
  if (!v27) {
    goto LABEL_18;
  }
  uint64_t v28 = v27;
  sub_100011B48(0x4449656C646E7562LL, 0xE900000000000073LL, v27, &v89);
  if (v90)
  {
    uint64_t v29 = sub_100008DB0((uint64_t *)&unk_100132780);
    if ((swift_dynamicCast(&v91, &v89, (char *)&type metadata for Any + 8, v29, 6LL) & 1) != 0)
    {
      uint64_t v30 = v91;
      if (*(void *)(v91 + 16))
      {
        sub_100011B48(0x686563616C507369LL, 0xED00007265646C6FLL, v28, &v89);
        swift_bridgeObjectRelease();
        if (v90)
        {
          if ((swift_dynamicCast(&v91, &v89, (char *)&type metadata for Any + 8, &type metadata for Bool, 6LL) & 1) != 0
            && (v91 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v31 = qword_100130330;
            id v32 = a3;
            if (v31 != -1) {
              swift_once(&qword_100130330, sub_100091538);
            }
            uint64_t v33 = sub_100008D98(v5, (uint64_t)qword_100135860);
            uint64_t v34 = v6;
            (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v11, v33, v5);

            uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
            os_log_type_t v37 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v36, v37))
            {
              int64_t v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
              *(_WORD *)int64_t v38 = 0;
              _os_log_impl((void *)&_mh_execute_header, v36, v37, "Event ignored: application is placeholder", v38, 2u);
              swift_slowDealloc(v38, -1LL, -1LL);
            }

            (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v5);
            return sub_10000AC58(v92);
          }
        }

        else
        {
          sub_100026E14((uint64_t)&v89, &qword_100130EA0);
        }

        uint64_t v49 = qword_100130330;
        Swift::String v50 = a3;
        if (v49 != -1) {
          swift_once(&qword_100130330, sub_100091538);
        }
        uint64_t v51 = sub_100008D98(v5, (uint64_t)qword_100135860);
        (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v51, v5);

        swift_bridgeObjectRetain_n(v24, 2LL);
        uint64_t v52 = swift_bridgeObjectRetain_n(v30, 2LL);
        uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
        os_log_type_t v54 = static os_log_type_t.default.getter();
        int v55 = v54;
        uint64_t v87 = v53;
        if (os_log_type_enabled(v53, v54))
        {
          uint64_t v56 = swift_slowAlloc(22LL, -1LL);
          int v85 = v55;
          uint64_t v57 = v56;
          uint64_t v83 = swift_slowAlloc(64LL, -1LL);
          *(void *)&__int128 v89 = v83;
          *(_DWORD *)uint64_t v57 = 136315394;
          uint64_t v86 = v50;
          swift_bridgeObjectRetain();
          uint64_t v91 = sub_10000DE60(v23, v24, (uint64_t *)&v89);
          uint64_t v84 = v6;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v57 + 4, v57 + 12);
          swift_bridgeObjectRelease_n(v24, 3LL);
          *(_WORD *)(v57 + 1sub_100096760(v0[56], v0 + 2) = 2080;
          uint64_t v82 = v57 + 14;
          swift_bridgeObjectRetain();
          uint64_t v59 = Array.description.getter(v58, type metadata for String);
          unint64_t v61 = v60;
          swift_bridgeObjectRelease();
          uint64_t v62 = v59;
          Swift::String v50 = v86;
          uint64_t v91 = sub_10000DE60(v62, v61, (uint64_t *)&v89);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v82, v57 + 22);
          swift_bridgeObjectRelease_n(v30, 2LL);
          swift_bridgeObjectRelease();
          unint64_t v63 = v87;
          _os_log_impl((void *)&_mh_execute_header, v87, (os_log_type_t)v85, "%s => %s", (uint8_t *)v57, 0x16u);
          uint64_t v64 = v83;
          swift_arrayDestroy(v83, 2LL);
          swift_slowDealloc(v64, -1LL, -1LL);
          swift_slowDealloc(v57, -1LL, -1LL);

          (*(void (**)(char *, uint64_t))(v84 + 8))(v8, v5);
        }

        else
        {

          swift_bridgeObjectRelease_n(v30, 2LL);
          swift_bridgeObjectRelease_n(v24, 2LL);
          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        }

        if (v23 == 0xD00000000000002ELL && v24 == 0x80000001000FBCF0LL
          || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002ELL, 0x80000001000FBCF0LL, v23, v24, 0LL) & 1) != 0)
        {
          swift_bridgeObjectRelease();
          unint64_t v65 = v50;
          uint64_t v66 = sub_10008E648(v30, v65);
          swift_bridgeObjectRelease();
          uint64_t v67 = v65;
          sub_10008D99C((uint64_t)v66, v67);
          if (!*(void *)(v68 + 16))
          {
            swift_bridgeObjectRelease();
            return sub_10000AC58(v92);
          }

          sub_100008D74( &v67[OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource],  *(void *)&v67[OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource + 24]);
          uint64_t v69 = sub_1000AEBC8();
          unint64_t v71 = v70;
          sub_1000ADF84();
          swift_bridgeObjectRelease();
          uint64_t v72 = v69;
          unint64_t v73 = v71;
        }

        else
        {
          if ((v23 != 0xD000000000000030LL || v24 != 0x80000001000FBD20LL)
            && (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000030LL, 0x80000001000FBD20LL, v23, v24, 0LL) & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            uint64_t v78 = (os_log_s *)Logger.logObject.getter(v77);
            os_log_type_t v79 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v78, v79))
            {
              uint64_t v80 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
              uint64_t v81 = swift_slowAlloc(32LL, -1LL);
              *(void *)&__int128 v89 = v81;
              *(_DWORD *)uint64_t v80 = 136315138;
              swift_bridgeObjectRetain();
              uint64_t v91 = sub_10000DE60(v23, v24, (uint64_t *)&v89);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v80 + 4, v80 + 12);
              swift_bridgeObjectRelease_n(v24, 3LL);
              _os_log_impl((void *)&_mh_execute_header, v78, v79, "Event ignored: unknown event name - %s", v80, 0xCu);
              swift_arrayDestroy(v81, 1LL);
              swift_slowDealloc(v81, -1LL, -1LL);
              swift_slowDealloc(v80, -1LL, -1LL);
            }

            else
            {

              swift_bridgeObjectRelease_n(v24, 2LL);
            }

            return sub_10000AC58(v92);
          }

          swift_bridgeObjectRelease();
          sub_100008D74( &v50[OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource],  *(void *)&v50[OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource + 24]);
          uint64_t v74 = sub_1000AEBC8();
          unint64_t v76 = v75;
          sub_1000AE384();
          swift_bridgeObjectRelease();
          uint64_t v72 = v74;
          unint64_t v73 = v76;
        }

        sub_10000A1D8(v72, v73);
        return sub_10000AC58(v92);
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
    }

uint64_t sub_1000B3244(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v16 = &unk_1001231E8;
  __int128 v17 = &off_100123208;
  uint64_t v6 = swift_allocObject(&unk_1001259B8, 56LL, 7LL);
  v15[0] = v6;
  uint64_t v7 = *a1;
  __int128 v8 = *(_OWORD *)(a1 + 1);
  __int128 v18 = *(_OWORD *)(a1 + 3);
  __int128 v19 = v8;
  __int128 v9 = *((_OWORD *)a1 + 1);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v6 + 3sub_100096760(v0[56], v0 + 2) = v9;
  *(void *)(v6 + 48) = a1[4];
  uint64_t v10 = sub_100008D74(v15, (uint64_t)&unk_1001231E8);
  __int128 v11 = *((_OWORD *)v10 + 1);
  __int128 v23 = *(_OWORD *)v10;
  __int128 v24 = v11;
  uint64_t v25 = v10[4];
  swift_unknownObjectRetain(v7);
  sub_10001B4C8((uint64_t)&v19);
  sub_10001B4C8((uint64_t)&v18);
  uint64_t v12 = sub_100011F9C();
  if (!v12)
  {
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    goto LABEL_5;
  }

  sub_100011B48(0x4449656C646E7562LL, 0xE900000000000073LL, v12, &v20);
  swift_bridgeObjectRelease();
  if (!*((void *)&v21 + 1))
  {
LABEL_5:
    sub_100026E14((uint64_t)&v20, &qword_100130EA0);
    return sub_10000AC58(v15);
  }

  sub_100026E14((uint64_t)&v20, &qword_100130EA0);
  uint64_t v13 = sub_100008D74(v15, (uint64_t)v16);
  __int128 v20 = *(_OWORD *)v13;
  __int128 v21 = *((_OWORD *)v13 + 1);
  uint64_t v22 = v13[4];
  sub_1000B27D0((uint64_t *)&v20, a2, a3);
  return sub_10000AC58(v15);
}

int64_t sub_1000B33B0(int64_t result, int a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (Swift::Int result = 1LL << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }

  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }

  unint64_t v8 = v7 & (-2LL << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0LL;
  }
  unint64_t v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    unint64_t v10 = *(void *)(v6 + 8 * v9);
    if (v10) {
      return __clz(__rbit64(v10)) + (v9 << 6);
    }
    unint64_t v11 = (unint64_t)(result + 63) >> 6;
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      unint64_t v10 = *(void *)(v6 + 8 * v9);
      if (v10) {
        return __clz(__rbit64(v10)) + (v9 << 6);
      }
      while (v5 + 3 < v11)
      {
        unint64_t v10 = *(void *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }

  return result;
}

uint64_t sub_1000B3494()
{
  uint64_t v0 = sub_1000B6EF8();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1000B34C0(char a1)
{
  return sub_100094A50(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1000B34CC(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_bridgeObjectRetain(result);
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a3);
  }

  return result;
}

uint64_t sub_1000B3504()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void *sub_1000B3524(void *a1)
{
  uint64_t v2 = a1[3];
  unint64_t v3 = a1[4];
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[7];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000A21C(v2, v3);
  sub_100075674(v4, v5);
  return a1;
}

uint64_t sub_1000B3584(uint64_t a1)
{
  return sub_1000AFC78(a1, *(void **)(v1 + 16), (uint64_t (*)(void))&DaemonRecord.attributionBundleIdentifier.getter) & 1;
}

uint64_t sub_1000B35A8(uint64_t a1)
{
  return sub_1000AFC78( a1,  *(void **)(v1 + 16),  (uint64_t (*)(void))&LSApplicationExtensionRecord.attributionBundleIdentifier.getter) & 1;
}

uint64_t sub_1000B35CC(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Data.Iterator(0LL);
  uint64_t v56 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v64 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v51 - v7;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v63 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v61 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v72 = type metadata accessor for LSLinkBundleSource();
  unint64_t v73 = &off_100125840;
  v71[0] = a1;
  sub_100008D74(v71, v72);
  swift_retain();
  uint64_t v11 = sub_1000AEBC8();
  unint64_t v13 = v12;
  uint64_t v14 = sub_100053174();
  unint64_t v16 = v15;
  uint64_t v17 = qword_1001301E0;
  id v18 = a2;
  __int128 v19 = v61;
  if (v17 != -1) {
    swift_once(&qword_1001301E0, sub_100051A54);
  }
  uint64_t v20 = sub_100008D98(v9, (uint64_t)qword_1001353A8);
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v19, v20, v9);

  sub_10000A280(v11, v13);
  sub_100058E4C(v14, v16);
  sub_10000A280(v11, v13);
  uint64_t v21 = sub_100058E4C(v14, v16);
  uint64_t v22 = v9;
  __int128 v23 = (os_log_s *)Logger.logObject.getter(v21);
  int v57 = static os_log_type_t.default.getter();
  BOOL v24 = os_log_type_enabled(v23, (os_log_type_t)v57);
  unint64_t v25 = v16 >> 60;
  uint64_t v62 = v14;
  if (v24)
  {
    os_log_t v53 = v23;
    unint64_t v59 = v16 >> 60;
    uint64_t v54 = v22;
    __int128 v26 = (uint8_t *)swift_slowAlloc(22LL, -1LL);
    uint64_t v27 = swift_slowAlloc(64LL, -1LL);
    uint64_t v52 = v27;
    uint64_t v58 = v26;
    *(_DWORD *)__int128 v26 = 136315394;
    uint64_t v68 = 0LL;
    unint64_t v69 = 0xE000000000000000LL;
    v70[0] = v27;
    sub_10000A280(v11, v13);
    Data.makeIterator()(v11, v13);
    uint64_t v60 = v11;
    unint64_t v55 = v13;
    sub_10000A1D8(v11, v13);
    sub_100067940(&qword_100133358, (uint64_t (*)(uint64_t))&type metadata accessor for Data.Iterator);
    uint64_t v29 = v28;
    dispatch thunk of IteratorProtocol.next()(v4, v28);
    if ((v67 & 1) == 0)
    {
      __int128 v65 = xmmword_1000F5520;
      do
      {
        char v30 = v66;
        uint64_t v31 = sub_100008DB0(&qword_100133360);
        uint64_t v32 = swift_allocObject(v31, 72LL, 7LL);
        *(_OWORD *)(v32 + 16) = v65;
        *(void *)(v32 + 56) = &type metadata for UInt8;
        *(void *)(v32 + 64) = &protocol witness table for UInt8;
        *(_BYTE *)(v32 + 3sub_100096760(v0[56], v0 + 2) = v30;
        v33._uint64_t countAndFlagsBits = String.init(format:_:)(0x786868323025LL, 0xE600000000000000LL);
        String.append(_:)(v33);
        swift_bridgeObjectRelease();
        dispatch thunk of IteratorProtocol.next()(v4, v29);
      }

      while (v67 != 1);
    }

    uint64_t v34 = v58;
    uint64_t v56 = *(void *)(v56 + 8);
    ((void (*)(char *, uint64_t))v56)(v8, v4);
    uint64_t v68 = sub_10000DE60(v68, v69, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v34 + 4, v34 + 12);
    swift_bridgeObjectRelease();
    uint64_t v35 = v60;
    unint64_t v13 = v55;
    sub_10000A1D8(v60, v55);
    sub_10000A1D8(v35, v13);
    *((_WORD *)v34 + 6) = 2080;
    if (v59 <= 0xE)
    {
      uint64_t v68 = 0LL;
      unint64_t v69 = 0xE000000000000000LL;
      uint64_t v38 = v62;
      sub_10000A280(v62, v16);
      uint64_t v39 = v64;
      Data.makeIterator()(v38, v16);
      sub_10000A21C(v38, v16);
      dispatch thunk of IteratorProtocol.next()(v4, v29);
      if ((v67 & 1) == 0)
      {
        __int128 v65 = xmmword_1000F5520;
        do
        {
          char v40 = v66;
          uint64_t v41 = sub_100008DB0(&qword_100133360);
          uint64_t v42 = swift_allocObject(v41, 72LL, 7LL);
          *(_OWORD *)(v42 + 16) = v65;
          *(void *)(v42 + 56) = &type metadata for UInt8;
          *(void *)(v42 + 64) = &protocol witness table for UInt8;
          *(_BYTE *)(v42 + 3sub_100096760(v0[56], v0 + 2) = v40;
          v43._uint64_t countAndFlagsBits = String.init(format:_:)(0x786868323025LL, 0xE600000000000000LL);
          String.append(_:)(v43);
          uint64_t v39 = v64;
          swift_bridgeObjectRelease();
          dispatch thunk of IteratorProtocol.next()(v4, v29);
        }

        while (v67 != 1);
      }

      ((void (*)(char *, uint64_t))v56)(v39, v4);
      uint64_t v37 = v68;
      unint64_t v36 = v69;
      unint64_t v13 = v55;
    }

    else
    {
      unint64_t v36 = 0xE400000000000000LL;
      uint64_t v37 = 1701736302LL;
    }

    uint64_t v44 = v58;
    uint64_t v68 = sub_10000DE60(v37, v36, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v44 + 14, v44 + 22);
    swift_bridgeObjectRelease();
    uint64_t v45 = v62;
    sub_10000A21C(v62, v16);
    sub_10000A21C(v45, v16);
    os_log_t v46 = v53;
    _os_log_impl( (void *)&_mh_execute_header,  v53,  (os_log_type_t)v57,  "Application source version: %s\nMetadata store version: %s",  v44,  0x16u);
    uint64_t v47 = v52;
    swift_arrayDestroy(v52, 2LL);
    swift_slowDealloc(v47, -1LL, -1LL);
    swift_slowDealloc(v44, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v63 + 8))(v61, v54);
    unint64_t v25 = v59;
    uint64_t v11 = v60;
  }

  else
  {
    sub_10000A1D8(v11, v13);
    sub_10000A1D8(v11, v13);
    sub_10000A21C(v14, v16);
    sub_10000A21C(v14, v16);

    (*(void (**)(char *, uint64_t))(v63 + 8))(v19, v22);
  }

  if (v25 <= 0xE)
  {
    sub_10000A280(v11, v13);
    uint64_t v49 = v62;
    sub_100058E4C(v62, v16);
    char v48 = static Data.== infix(_:_:)(v11, v13, v49, v16);
    sub_10000A21C(v49, v16);
    sub_10000A21C(v49, v16);
    sub_10000A1D8(v11, v13);
    sub_10000A1D8(v11, v13);
  }

  else
  {
    sub_10000A21C(v11, v13);
    sub_10000A21C(v62, v16);
    char v48 = 0;
  }

  sub_10000AC58(v71);
  return v48 & 1;
}

uint64_t sub_1000B3CA8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  uint64_t v9 = sub_10001AFA8(&v12);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32LL))(v9, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + 16) = a1 + 1;
  return sub_100009EEC(&v12, v10 + 40 * a1 + 32);
}

uint64_t sub_1000B3D20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LNBundleRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B3D64()
{
  uint64_t v0 = sub_1000B7338();
  return swift_deallocObject(v0, v1, v2);
}

void sub_1000B3D90()
{
}

uint64_t sub_1000B3DD0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1000B3DF8()
{
}

uint64_t sub_1000B3E38()
{
  uint64_t v1 = (void *)sub_1000685D4();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100067D64(v1, (uint64_t)sub_10000E8DC);
  return sub_10000E930(v2, v3, v4, v5);
}

uint64_t sub_1000B3E7C()
{
  uint64_t v1 = (void *)sub_100068148();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100067BE8(v1, (uint64_t)sub_10000E8DC);
  return sub_10000E920(v2, v3, v4);
}

uint64_t sub_1000B3EC0()
{
  uint64_t v1 = (void *)sub_100068148();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100067BE8(v1, (uint64_t)sub_10000E8DC);
  return sub_10000E920(v2, v3, v4);
}

uint64_t sub_1000B3F00()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000B3F2C()
{
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(_BYTE *)(v0 + 24);
  uint64_t v5 = *(void **)(v0 + 32);
  uint64_t v4 = *(void **)(v0 + 40);
  uint64_t v6 = (void *)sub_100067DDC();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_10000E8DC;
  return ((uint64_t (*)(uint64_t, char, void *, void *))((char *)&dword_100133440 + dword_100133440))( v2,  v3,  v5,  v4);
}

uint64_t sub_1000B3FA4()
{
  uint64_t v1 = (void *)sub_100068148();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100067BE8(v1, (uint64_t)sub_10000E8DC);
  return sub_10000E920(v2, v3, v4);
}

uint64_t sub_1000B3FE8()
{
  uint64_t v1 = (void *)sub_1000685D4();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100067D64(v1, (uint64_t)sub_10000E8DC);
  return sub_10000E930(v2, v3, v4, v5);
}

uint64_t sub_1000B402C()
{
  uint64_t v1 = (void *)sub_1000685D4();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100067D64(v1, (uint64_t)sub_10000D124);
  return sub_10000E930(v2, v3, v4, v5);
}

uint64_t sub_1000B4070()
{
  uint64_t v1 = (void *)sub_1000685D4();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100067D64(v1, (uint64_t)sub_10000E8DC);
  return sub_10000E930(v2, v3, v4, v5);
}

uint64_t sub_1000B40B4()
{
  uint64_t v1 = (void *)sub_100067DDC();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100067ADC(v1, (uint64_t)sub_10000E8DC);
  return sub_100067AC8(v2, v3, v4, v5, v6);
}

uint64_t sub_1000B40F4()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_1000B4130( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = (void *)swift_task_alloc(dword_100133564);
  *(void *)(v10 + 16) = v11;
  *uint64_t v11 = v10;
  v11[1] = sub_10000E8DC;
  sub_1000B7110();
  return v18(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

uint64_t sub_1000B41AC()
{
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = swift_task_alloc(dword_100133584);
  uint64_t v5 = (void *)sub_10000E9E0(v4);
  *uint64_t v5 = v1;
  v5[1] = sub_10000E8DC;
  uint64_t v6 = sub_1000B7184();
  return sub_1000A997C(v6, v7, v8, v9, v10, v11, v2, v3);
}

uint64_t sub_1000B4234()
{
  uint64_t v1 = (void *)sub_1000B7840();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100067EB0(v1, (uint64_t)sub_10000E8DC);
  return sub_100067E9C(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1000B4274()
{
  uint64_t v1 = swift_task_alloc(dword_1001335B4);
  uint64_t v2 = (void *)sub_10000E9E0(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_10000E8DC;
  sub_1000B7184();
  sub_1000B7110();
  return sub_1000A91CC(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1000B42D4(id *a1)
{
  return sub_1000AA2DC(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_1000B42F4()
{
  uint64_t v1 = (void *)sub_100067DDC();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100067ADC(v1, (uint64_t)sub_10000E8DC);
  return sub_100067AC8(v2, v3, v4, v5, v6);
}

uint64_t sub_1000B4338()
{
  uint64_t v1 = (void *)sub_1000B7840();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100067EB0(v1, (uint64_t)sub_10000E8DC);
  return sub_100067E9C(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1000B4378( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    id v16 = a5;
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(a9);
    swift_bridgeObjectRetain(a11);
    id v17 = a12;
    return swift_bridgeObjectRetain(a13);
  }

  return result;
}

void *sub_1000B43FC( void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_1000B4450( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);

    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(a9);
    swift_bridgeObjectRelease(a11);

    return swift_bridgeObjectRelease(a13);
  }

  return result;
}

uint64_t sub_1000B44D8()
{
  uint64_t v1 = (void *)sub_1000685D4();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100067D64(v1, (uint64_t)sub_10000E8DC);
  return sub_10000E930(v2, v3, v4, v5);
}

uint64_t sub_1000B451C()
{
  uint64_t v1 = (void *)sub_100067DDC();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100067ADC(v1, (uint64_t)sub_10000E8DC);
  return sub_100067AC8(v2, v3, v4, v5, v6);
}

uint64_t sub_1000B4560()
{
  uint64_t v1 = (void *)sub_100068148();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100067BE8(v1, (uint64_t)sub_10000E8DC);
  return sub_10000E920(v2, v3, v4);
}

uint64_t sub_1000B45A4()
{
  uint64_t v1 = (void *)sub_1000685D4();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100067D64(v1, (uint64_t)sub_10000E8DC);
  return sub_10000E930(v2, v3, v4, v5);
}

uint64_t sub_1000B45E8()
{
  uint64_t v1 = (void *)sub_1000685D4();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100067D64(v1, (uint64_t)sub_10000E8DC);
  return sub_10000E930(v2, v3, v4, v5);
}

uint64_t sub_1000B462C()
{
  uint64_t v1 = (void *)sub_100068148();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100067BE8(v1, (uint64_t)sub_10000E8DC);
  return sub_10000E920(v2, v3, v4);
}

uint64_t sub_1000B4670()
{
  uint64_t v1 = (void *)sub_1000685D4();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100067D64(v1, (uint64_t)sub_10000E8DC);
  return sub_10000E930(v2, v3, v4, v5);
}

uint64_t sub_1000B46B4()
{
  uint64_t v1 = (void *)sub_1000685D4();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100067D64(v1, (uint64_t)sub_10000E8DC);
  return sub_10000E930(v2, v3, v4, v5);
}

uint64_t sub_1000B46F8()
{
  uint64_t v1 = (void *)sub_100068148();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100067BE8(v1, (uint64_t)sub_10000E8DC);
  return sub_10000E920(v2, v3, v4);
}

uint64_t sub_1000B473C()
{
  uint64_t v1 = (void *)sub_100068148();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100067BE8(v1, (uint64_t)sub_10000E8DC);
  return sub_10000E920(v2, v3, v4);
}

uint64_t sub_1000B4780()
{
  uint64_t v1 = (void *)sub_100068148();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100067BE8(v1, (uint64_t)sub_10000E8DC);
  return sub_10000E920(v2, v3, v4);
}

uint64_t sub_1000B47C4()
{
  uint64_t v1 = (void *)sub_1000685D4();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100067D64(v1, (uint64_t)sub_10000E8DC);
  return sub_10000E930(v2, v3, v4, v5);
}

uint64_t sub_1000B4808()
{
  uint64_t v1 = (void *)sub_1000685D4();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100067D64(v1, (uint64_t)sub_10000E8DC);
  return sub_10000E930(v2, v3, v4, v5);
}

uint64_t sub_1000B484C()
{
  uint64_t v1 = (void *)sub_1000685D4();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100067D64(v1, (uint64_t)sub_10000E8DC);
  return sub_10000E930(v2, v3, v4, v5);
}

uint64_t sub_1000B4890()
{
  uint64_t v1 = sub_1000B6EF8();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000B48B4()
{
  uint64_t v1 = (void *)sub_1000685D4();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100067D64(v1, (uint64_t)sub_10000E8DC);
  return sub_10000E930(v2, v3, v4, v5);
}

uint64_t sub_1000B48F8()
{
  uint64_t v1 = sub_1000B7338();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000B4928()
{
  uint64_t v1 = (void *)sub_1000B7840();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100067EB0(v1, (uint64_t)sub_10000E8DC);
  return sub_100067E9C(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1000B4968()
{
  uint64_t v1 = sub_1000B7338();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000B4994()
{
  uint64_t v1 = (void *)sub_1000B7840();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100067EB0(v1, (uint64_t)sub_10000E8DC);
  return sub_100067E9C(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1000B49D8()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000B4A08()
{
  uint64_t v1 = (void *)sub_100067DDC();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100067ADC(v1, (uint64_t)sub_10000E8DC);
  return sub_100067AC8(v2, v3, v4, v5, v6);
}

uint64_t sub_1000B4A4C()
{
  uint64_t v1 = (void *)sub_100068148();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100067BE8(v1, (uint64_t)sub_10000E8DC);
  return sub_10000E920(v2, v3, v4);
}

uint64_t sub_1000B4A8C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1000B4AB0(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000B4AB8()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_1000B4AEC(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  char v6 = *(_BYTE *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v10 = *(void *)(v1 + 56);
  uint64_t v9 = *(void *)(v1 + 64);
  uint64_t v11 = swift_task_alloc(dword_1001338AC);
  uint64_t v12 = (void *)sub_10000E9E0(v11);
  *uint64_t v12 = v2;
  v12[1] = sub_10000E8DC;
  return sub_10009C13C(a1, v4, v5, v6, v7, v8, v10, v9);
}

uint64_t sub_1000B4B7C()
{
  uint64_t v4 = (void *)swift_task_alloc(dword_1001338CC);
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_10000D124;
  return sub_1000992D8(v0, v2, v1);
}

void *sub_1000B4BD8(void *a1)
{
  uint64_t v12 = a1[2];
  uint64_t v13 = a1[1];
  uint64_t v14 = a1[4];
  uint64_t v2 = a1[6];
  uint64_t v3 = a1[7];
  uint64_t v4 = a1[8];
  uint64_t v5 = a1[9];
  uint64_t v6 = a1[10];
  uint64_t v8 = a1[12];
  uint64_t v7 = a1[13];
  uint64_t v9 = a1[14];
  uint64_t v10 = a1[15];
  swift_bridgeObjectRelease(a1[16]);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v14);
  return a1;
}

id sub_1000B4CB0@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  return sub_10009A290(a1, *(void **)(v2 + 16), a2);
}

void *sub_1000B4CCC(void *a1)
{
  uint64_t v2 = a1[3];
  unint64_t v3 = a1[4];
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100058E4C(v2, v3);
  sub_100047094(v4, v5);
  return a1;
}

uint64_t sub_1000B4D30(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B4D60()
{
  uint64_t v0 = swift_task_alloc(dword_1001338F4);
  uint64_t v1 = (void *)sub_10000E9E0(v0);
  uint64_t v2 = sub_1000B6844(v1);
  return sub_1000961CC(v2, v3, v4, v5);
}

uint64_t sub_1000B4DAC(uint64_t a1)
{
  return sub_10008F5E0(a1);
}

uint64_t sub_1000B4DB4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000A21C(a4, a5);
    return sub_100075674(a7, a8);
  }

  return result;
}

uint64_t sub_1000B4E1C(uint64_t a1)
{
  return sub_100095DD4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000B4E24()
{
  uint64_t v0 = sub_100008DB0(&qword_100133918);
  sub_10000AF40(*(void *)(v0 - 8));
  uint64_t v1 = sub_1000B79D0();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000B4E7C(uint64_t a1)
{
  return sub_100095F84(a1);
}

uint64_t sub_1000B4EC0()
{
  uint64_t v0 = swift_task_alloc(dword_100133924);
  uint64_t v1 = (void *)sub_10000E9E0(v0);
  uint64_t v2 = sub_1000B6844(v1);
  return sub_100095FE4(v2, v3, v4, v5);
}

uint64_t sub_1000B4F0C(uint64_t a1, _OWORD *a2)
{
  __int128 v2 = a2[1];
  v5[0] = *a2;
  v5[1] = v2;
  __int128 v3 = a2[3];
  uint64_t v5[2] = a2[2];
  v5[3] = v3;
  return sub_10008F19C(a1, (char *)v5);
}

uint64_t sub_1000B4F3C()
{
  return sub_1000B4F0C(*(void *)(v0 + 16), *(_OWORD **)(v0 + 24));
}

unint64_t sub_1000B4F54()
{
  unint64_t result = qword_100133930;
  if (!qword_100133930)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F73A8, &type metadata for Registry.IndexingQueue.Change.ChangeError);
    atomic_store(result, (unint64_t *)&qword_100133930);
  }

  return result;
}

uint64_t sub_1000B4F94()
{
  uint64_t v0 = sub_1000B6EF8();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1000B4FB4()
{
  uint64_t v0 = swift_task_alloc(dword_100133944);
  uint64_t v1 = (void *)sub_10000E9E0(v0);
  uint64_t v2 = sub_1000B6844(v1);
  return sub_100095C08(v2, v3, v4, v5);
}

uint64_t sub_1000B5000()
{
  return sub_1000B2718(*(void *)(v0 + 16), *(_OWORD **)(v0 + 24));
}

uint64_t sub_1000B5018()
{
  uint64_t v0 = sub_1000B6EF8();
  return swift_deallocObject(v0, v1, v2);
}

void sub_1000B5038()
{
}

void sub_1000B5044(uint64_t a1, unint64_t *a2, void *a3)
{
  if (!*a2)
  {
    uint64_t v4 = objc_opt_self(*a3);
    atomic_store(swift_getObjCClassMetadata(v4), a2);
  }

  sub_10000ADA8();
}

uint64_t sub_1000B507C()
{
  uint64_t v0 = sub_1000B6EF8();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1000B5098()
{
  uint64_t v0 = swift_task_alloc(dword_10013397C);
  uint64_t v1 = (void *)sub_10000E9E0(v0);
  uint64_t v2 = sub_1000B6844(v1);
  return sub_100091AA8(v2, v3, v4, v5);
}

uint64_t storeEnumTagSinglePayload for Registry.IndexingQueue.Change.ChangeError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(sub_100075674(v3, v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1000B5124 + 4 * byte_1000F6F97[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000B5144 + 4 * byte_1000F6F9C[v4]))();
  }
}

_BYTE *sub_1000B5124(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1000B5144(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000B514C(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000B5154(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000B515C(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000B5164(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Registry.IndexingQueue.Change.ChangeError()
{
  return &type metadata for Registry.IndexingQueue.Change.ChangeError;
}

uint64_t *sub_1000B5180(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v12);
  }

  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        swift_bridgeObjectRetain(v8);
        uint64_t v9 = a1;
        uint64_t v10 = a3;
        uint64_t v11 = 0LL;
        goto LABEL_9;
      case 1u:
        uint64_t v13 = a2[1];
        *a1 = *a2;
        a1[1] = v13;
        swift_bridgeObjectRetain(v13);
        uint64_t v9 = a1;
        uint64_t v10 = a3;
        uint64_t v11 = 1LL;
        goto LABEL_9;
      case 2u:
        uint64_t v14 = type metadata accessor for UUID(0LL);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v14 - 8) + 16LL))(a1, a2, v14);
        uint64_t v9 = a1;
        uint64_t v10 = a3;
        uint64_t v11 = 2LL;
        goto LABEL_9;
      case 3u:
        uint64_t v15 = *a2;
        swift_errorRetain(v15);
        *a1 = v15;
        uint64_t v9 = a1;
        uint64_t v10 = a3;
        uint64_t v11 = 3LL;
LABEL_9:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(void *)(v5 + 64));
        break;
    }
  }

  return a1;
}

uint64_t sub_1000B52A8(void *a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
    case 1:
      uint64_t result = swift_bridgeObjectRelease(a1[1]);
      break;
    case 2:
      uint64_t v4 = type metadata accessor for UUID(0LL);
      uint64_t result = (*(uint64_t (**)(void *, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
      break;
    case 3:
      uint64_t result = swift_errorRelease(*a1);
      break;
    default:
      return result;
  }

  return result;
}

void *sub_1000B5330(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain(v6);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 0LL;
      goto LABEL_7;
    case 1u:
      uint64_t v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      swift_bridgeObjectRetain(v10);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 1LL;
      goto LABEL_7;
    case 2u:
      uint64_t v11 = type metadata accessor for UUID(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16LL))(a1, a2, v11);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 2LL;
      goto LABEL_7;
    case 3u:
      uint64_t v12 = *a2;
      swift_errorRetain(v12);
      *a1 = v12;
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 3LL;
LABEL_7:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

void *sub_1000B5430(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100058D54((uint64_t)a1, type metadata accessor for RegistryError);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        uint64_t v6 = a1;
        uint64_t v7 = a3;
        uint64_t v8 = 0LL;
        goto LABEL_8;
      case 1u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        uint64_t v6 = a1;
        uint64_t v7 = a3;
        uint64_t v8 = 1LL;
        goto LABEL_8;
      case 2u:
        uint64_t v9 = type metadata accessor for UUID(0LL);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16LL))(a1, a2, v9);
        uint64_t v6 = a1;
        uint64_t v7 = a3;
        uint64_t v8 = 2LL;
        goto LABEL_8;
      case 3u:
        uint64_t v10 = *a2;
        swift_errorRetain();
        *a1 = v10;
        uint64_t v6 = a1;
        uint64_t v7 = a3;
        uint64_t v8 = 3LL;
LABEL_8:
        swift_storeEnumTagMultiPayload(v6, v7, v8);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

void *sub_1000B5558(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 2)
  {
    uint64_t v6 = type metadata accessor for UUID(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 2LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

void *sub_1000B55E4(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100058D54((uint64_t)a1, type metadata accessor for RegistryError);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 2)
    {
      uint64_t v6 = type metadata accessor for UUID(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 2LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t sub_1000B5694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_1000B56A4(uint64_t a1)
{
  v4[0] = &unk_1000F71A0;
  v4[1] = &unk_1000F71A0;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[2] = *(void *)(result - 8) + 64LL;
    v4[3] = &unk_1000F71B8;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 4LL, v4);
    return 0LL;
  }

  return result;
}

void *sub_1000B571C(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL(0LL);
    swift_bridgeObjectRetain();
    if (sub_100009E6C((uint64_t)v10, 1LL, v11))
    {
      uint64_t v12 = sub_100008DB0(&qword_100130BC0);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
      sub_100009E60((uint64_t)v9, 0LL, 1LL, v11);
    }

    uint64_t v14 = a3[6];
    uint64_t v15 = (void *)((char *)v4 + v14);
    id v16 = (void *)((char *)a2 + v14);
    uint64_t v17 = *v16;
    unint64_t v18 = v16[1];
    sub_10000A280(*v16, v18);
    *uint64_t v15 = v17;
    v15[1] = v18;
    uint64_t v19 = a3[7];
    uint64_t v20 = (char *)v4 + v19;
    uint64_t v21 = (char *)a2 + v19;
    uint64_t v22 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16LL))(v20, v21, v22);
    uint64_t v23 = a3[9];
    *((_BYTE *)v4 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    *((_BYTE *)v4 + v23) = *((_BYTE *)a2 + v23);
  }

  return v4;
}

uint64_t sub_1000B5874(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for URL(0LL);
  sub_10000A1D8(*(void *)(a1 + a2[6]), *(void *)(a1 + a2[6] + 8));
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
}

void *sub_1000B5910(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL(0LL);
  swift_bridgeObjectRetain();
  if (sub_100009E6C((uint64_t)v9, 1LL, v10))
  {
    uint64_t v11 = sub_100008DB0(&qword_100130BC0);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
    sub_100009E60((uint64_t)v8, 0LL, 1LL, v10);
  }

  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  sub_10000A280(*v14, v16);
  *uint64_t v13 = v15;
  v13[1] = v16;
  uint64_t v17 = a3[7];
  unint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16LL))(v18, v19, v20);
  uint64_t v21 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *((_BYTE *)a1 + v21) = *((_BYTE *)a2 + v21);
  return a1;
}

void *sub_1000B5A3C(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL(0LL);
  int v10 = sub_100009E6C((uint64_t)v7, 1LL, v9);
  int v11 = sub_100009E6C((uint64_t)v8, 1LL, v9);
  if (!v10)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }

  if (v11)
  {
LABEL_6:
    uint64_t v13 = sub_100008DB0(&qword_100130BC0);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v7, v8, v9);
  sub_100009E60((uint64_t)v7, 0LL, 1LL, v9);
LABEL_7:
  uint64_t v14 = a3[6];
  uint64_t v15 = (void *)((char *)a1 + v14);
  unint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = *v16;
  unint64_t v18 = v16[1];
  sub_10000A280(*v16, v18);
  uint64_t v19 = *v15;
  unint64_t v20 = v15[1];
  *uint64_t v15 = v17;
  v15[1] = v18;
  sub_10000A1D8(v19, v20);
  uint64_t v21 = a3[7];
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 24LL))(v22, v23, v24);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

_OWORD *sub_1000B5BCC(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL(0LL);
  if (sub_100009E6C((uint64_t)v8, 1LL, v9))
  {
    uint64_t v10 = sub_100008DB0(&qword_100130BC0);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
    sub_100009E60((uint64_t)v7, 0LL, 1LL, v9);
  }

  uint64_t v11 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32LL))(v12, v13, v14);
  uint64_t v15 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *((_BYTE *)a1 + v15) = *((_BYTE *)a2 + v15);
  return a1;
}

void *sub_1000B5CD0(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL(0LL);
  int v11 = sub_100009E6C((uint64_t)v8, 1LL, v10);
  int v12 = sub_100009E6C((uint64_t)v9, 1LL, v10);
  if (!v11)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }

  if (v12)
  {
LABEL_6:
    uint64_t v14 = sub_100008DB0(&qword_100130BC0);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  sub_100009E60((uint64_t)v8, 0LL, 1LL, v10);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = *(void *)((char *)a1 + v15);
  unint64_t v17 = *(void *)((char *)a1 + v15 + 8);
  *(_OWORD *)((char *)a1 + v15) = *(_OWORD *)((char *)a2 + v15);
  sub_10000A1D8(v16, v17);
  uint64_t v18 = a3[7];
  uint64_t v19 = (char *)a1 + v18;
  unint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 40LL))(v19, v20, v21);
  uint64_t v22 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *((_BYTE *)a1 + v2sub_100096760(v0[56], v0 + 2) = *((_BYTE *)a2 + v22);
  return a1;
}

uint64_t sub_1000B5E3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B5E48);
}

void sub_1000B5E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_10000AF74();
  }

  else
  {
    uint64_t v6 = sub_100008DB0(&qword_100130BC0);
    if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(int *)(a3 + 20);
    }

    else
    {
      uint64_t v7 = sub_1000B75A0();
      uint64_t v8 = *(int *)(a3 + 28);
    }

    sub_100009E6C(a1 + v8, a2, v7);
  }

uint64_t sub_1000B5ED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B5EE4);
}

void sub_1000B5EE4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + 8) = (a2 - 1);
    sub_10000AF74();
  }

  else
  {
    uint64_t v8 = sub_100008DB0(&qword_100130BC0);
    if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(int *)(a4 + 20);
    }

    else
    {
      uint64_t v9 = sub_1000B75A0();
      uint64_t v10 = *(int *)(a4 + 28);
    }

    sub_100009E60(a1 + v10, a2, a2, v9);
  }

void sub_1000B5F70(uint64_t a1)
{
  v6[0] = &unk_1000F71A0;
  sub_100038798(319LL);
  if (v3 <= 0x3F)
  {
    v6[1] = *(void *)(v2 - 8) + 64LL;
    v6[2] = &unk_1000F71E8;
    uint64_t v4 = type metadata accessor for Date(319LL);
    if (v5 <= 0x3F)
    {
      v6[3] = *(void *)(v4 - 8) + 64LL;
      v6[4] = &unk_1000F7200;
      v6[5] = &unk_1000F7218;
      swift_initStructMetadata(a1, 256LL, 6LL, v6, a1 + 16);
    }
  }

void sub_1000B601C()
{
}

unint64_t sub_1000B6050()
{
  unint64_t result = qword_100133AF0;
  if (!qword_100133AF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F7380, &type metadata for Registry.IndexingQueue.Change.ChangeError);
    atomic_store(result, (unint64_t *)&qword_100133AF0);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for LSLinkBundleRecord.RecordType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for LSLinkBundleRecord.RecordType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(sub_100075674(v3, v4) = 1;
  }
  else {
    LODWORD(sub_100075674(v3, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1000B6160 + 4 * byte_1000F6FB6[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000B6194 + 4 * byte_1000F6FB1[v4]))();
}

uint64_t sub_1000B6194(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B619C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000B61A4LL);
  }
  return result;
}

uint64_t sub_1000B61B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000B61B8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1000B61BC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B61C4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LSLinkBundleRecord.RecordType()
{
  return &type metadata for LSLinkBundleRecord.RecordType;
}

unint64_t sub_1000B61E4()
{
  unint64_t result = qword_100133B00;
  if (!qword_100133B00)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F7484, &type metadata for LSLinkBundleRecord.RecordType);
    atomic_store(result, (unint64_t *)&qword_100133B00);
  }

  return result;
}

uint64_t sub_1000B6230(id *a1)
{
  return sub_1000B42D4(a1) & 1;
}

id sub_1000B624C@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  return sub_1000B4CB0(a1, a2);
}

uint64_t sub_1000B6270(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000B628C(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_1000B62A8()
{
  return v0;
}

uint64_t sub_1000B62D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_1000B62E4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100008D98(v4, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v3, v5, v4);
}

uint64_t sub_1000B6308()
{
  return ((uint64_t (*)(void))Task<>.value.getter)();
}

uint64_t sub_1000B6324(uint64_t a1)
{
  return swift_allocError(v1, a1, 0LL, 0LL);
}

uint64_t sub_1000B6338(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_1000B6348( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return swift_arrayDestroy(a11, 2LL);
}

uint64_t sub_1000B635C(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v5, v3, v1, v4 + 22);
}

  ;
}

void sub_1000B6390(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_1000B63A4(float a1)
{
  *uint64_t v2 = a1;
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_1000B63B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(v11 + 16) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a10, a9, v10, v12 + 12);
}

uint64_t sub_1000B63D0()
{
  return sub_10004DE24(v0, v1, 0LL);
}

BOOL sub_1000B63E4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void sub_1000B63F4()
{
  *(_WORD *)(v0 + 1sub_100096760(v0[56], v0 + 2) = 2080;
  sub_100092208();
}

uint64_t sub_1000B6404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  return sub_10000DE60(v7, v8, (uint64_t *)va);
}

uint64_t sub_1000B6414()
{
  return swift_arrayDestroy(v0, 2LL);
}

void sub_1000B6420(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

uint64_t sub_1000B642C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v4, a4);
}

uint64_t sub_1000B6434()
{
  return v0;
}

uint64_t sub_1000B6444()
{
  return sub_10009206C();
}

uint64_t sub_1000B6454( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  return sub_10000DE60(a1, a2, (uint64_t *)va);
}

uint64_t sub_1000B6460()
{
  return swift_bridgeObjectRelease_n(v0, 3LL);
}

uint64_t sub_1000B646C()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

uint64_t sub_1000B6478()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 48);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 56) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_1000B649C()
{
  return v0;
}

uint64_t sub_1000B64AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return a12;
}

uint64_t sub_1000B64BC(uint64_t a1)
{
  return swift_arrayDestroy(a1, 2LL);
}

void sub_1000B64C4(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

id sub_1000B64CC()
{
  return v0;
}

uint64_t sub_1000B64D8()
{
  return ((uint64_t (*)(void))Task<>.value.getter)();
}

uint64_t sub_1000B64E8()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 32);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 40) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_1000B650C()
{
  return swift_errorRelease(v0);
}

uint64_t sub_1000B6518(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100008D98(v3, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
}

void sub_1000B653C()
{
}

void sub_1000B6554()
{
}

void sub_1000B6568(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000B6578()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_1000B6580( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  return sub_10000DE60(a1, a2, (uint64_t *)va);
}

BOOL sub_1000B6588(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

BOOL sub_1000B6598(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_1000B65A0(void *a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 8) + 8LL))(v1);
}

uint64_t sub_1000B65C4()
{
  return swift_errorRelease(v0);
}

void sub_1000B65CC(uint64_t a1, uint64_t a2)
{
}

  ;
}

uint64_t sub_1000B65F0(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain(v2);
}

void sub_1000B6604(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

  ;
}

uint64_t sub_1000B662C()
{
  uint64_t v3 = *v1;
  os_log_type_t v4 = (uint64_t *)(v2 - 8);
  *os_log_type_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 64);
  *os_log_type_t v4 = *v1;
  *(void *)(v3 + 7sub_100096760(v0[56], v0 + 2) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_1000B6650()
{
  return Logger.logObject.getter();
}

void sub_1000B6658()
{
}

void sub_1000B6660()
{
}

uint64_t sub_1000B666C(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1, v4, v3, v5 + 22);
}

uint64_t sub_1000B6688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

void sub_1000B669C()
{
}

uint64_t sub_1000B66A8@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_1000B66B4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100008D98(v4, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v3, v5, v4);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000B6714()
{
  return sub_10009206C();
}

uint64_t sub_1000B6720(uint64_t a1)
{
  *(_BYTE *)(a1 + 3sub_100096760(v0[56], v0 + 2) = v1;
  return String.init(format:_:)(0x786868323025LL, 0xE600000000000000LL);
}

uint64_t sub_1000B6738( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 + 16) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a9, v9, v11, v12 + 12);
}

uint64_t sub_1000B6750( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a10, v11, v10, a4);
}

uint64_t sub_1000B6760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  return sub_10000DE60(v5, v6, (uint64_t *)va);
}

void sub_1000B6770()
{
  *(_WORD *)(v0 + 1sub_100096760(v0[56], v0 + 2) = 2080;
  sub_100092208();
}

uint64_t sub_1000B6780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v4, a4);
}

  ;
}

uint64_t sub_1000B6794(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100008D98(v3, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
}

void sub_1000B67B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

void sub_1000B67C4()
{
}

  ;
}

id sub_1000B67E0@<X0>(uint64_t a1@<X8>)
{
  return *(id *)(a1 + v1);
}

void sub_1000B67E8(uint64_t a1, uint64_t a2)
{
}

void sub_1000B67F8(uint64_t a1, unint64_t *a2, void *a3)
{
}

uint64_t sub_1000B6800(float a1)
{
  *uint64_t v2 = a1;
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_1000B6814()
{
  return swift_willThrow();
}

void sub_1000B681C(unint64_t *a1)
{
}

void sub_1000B6824(uint64_t a1)
{
}

void sub_1000B682C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000B6834( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return a11;
}

uint64_t sub_1000B6844(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_1000B6860()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_1000B686C()
{
  return v0;
}

uint64_t sub_1000B6878()
{
  return v0;
}

uint64_t sub_1000B6888(uint64_t a1, char a2, uint64_t a3)
{
  return sub_100098F48(a1, a2, a3);
}

uint64_t sub_1000B68A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_1000B68C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_1000B68DC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  return sub_10000DE60(a1, a2, (uint64_t *)va);
}

uint64_t sub_1000B68E8()
{
  return (*(uint64_t (**)(void, void))(v0[68] + 8LL))(v0[69], v0[67]);
}

NSArray sub_1000B68FC()
{
  return Array._bridgeToObjectiveC()();
}

BOOL sub_1000B6908(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_1000B6910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  return sub_10000DE60(v7, v8, (uint64_t *)va);
}

void sub_1000B6920()
{
  *(_WORD *)(v0 + 1sub_100096760(v0[56], v0 + 2) = 2080;
  sub_100092208();
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000B6980()
{
  return 0LL;
}

void sub_1000B699C()
{
}

uint64_t sub_1000B69A8()
{
  return swift_errorRelease(v0);
}

  ;
}

uint64_t sub_1000B69BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return swift_errorRelease(a15);
}

uint64_t sub_1000B69C4()
{
  return v0;
}

uint64_t sub_1000B69D0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

  ;
}

  ;
}

uint64_t sub_1000B69F0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10000DE60(a1, v3, a3);
}

void sub_1000B69F8( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v13._uint64_t countAndFlagsBits = v12;
  v13._object = v11;
  String.append(_:)(v13);
}

uint64_t sub_1000B6A14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return a14;
}

uint64_t sub_1000B6A24()
{
  return swift_willThrow();
}

uint64_t sub_1000B6A2C(uint64_t a1)
{
  v1[82] = a1;
  uint64_t result = *(void *)(v1[60] + 8LL);
  v1[83] = result;
  v1[59] = result;
  v1[84] = *(void *)(result + 16);
  return result;
}

void sub_1000B6A4C()
{
  uint64_t v2 = (void *)(v1 - 8);
  *uint64_t v2 = *v0;
  *uint64_t v2 = *v0;
}

  ;
}

void sub_1000B6A84(unint64_t *a1)
{
}

uint64_t sub_1000B6A8C()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_1000B6A98(void *a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(v1 + 8) + 8LL))(v2);
}

uint64_t sub_1000B6ABC()
{
  return ((uint64_t (*)(void))Task<>.value.getter)();
}

uint64_t sub_1000B6AC8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000B6AD4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000B6AE0(void *a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(v1 + 8) + 8LL))(v2);
}

uint64_t sub_1000B6B04@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

void sub_1000B6B10(uint64_t a1, uint64_t a2)
{
}

void sub_1000B6B1C()
{
}

void *sub_1000B6B28()
{
  return sub_1000B43FC(v1, v0);
}

uint64_t sub_1000B6B34()
{
  return *(void *)(v0 + 32);
}

uint64_t sub_1000B6B44(uint64_t a1, uint64_t a2)
{
  return sub_10009A2F8(a1, a2);
}

uint64_t sub_1000B6B60(uint64_t a1, char a2, uint64_t a3)
{
  return sub_100098F48(a1, a2, a3);
}

uint64_t sub_1000B6B7C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

  ;
}

uint64_t sub_1000B6BA8()
{
  return v0;
}

void *sub_1000B6BB8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 + 144) = result;
  *uint64_t result = v2;
  result[1] = a2;
  return result;
}

void sub_1000B6BC4(uint64_t a1@<X8>)
{
  *(void *)(v2 + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = *(void *)(a1 + v1);
}

uint64_t sub_1000B6BD0(uint64_t (*a1)(void))
{
  return a1();
}

  ;
}

  ;
}

uint64_t sub_1000B6C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_1000B6C20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_1000B6C3C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000B6C58()
{
  return v0;
}

uint64_t sub_1000B6C88()
{
  return type metadata accessor for RegistryError(0LL);
}

uint64_t sub_1000B6CA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100091D80(a1, a2, a3);
}

uint64_t sub_1000B6CBC()
{
  return ((uint64_t (*)(void))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:))();
}

uint64_t sub_1000B6CD8()
{
  return ((uint64_t (*)(void))swift_continuation_await)();
}

uint64_t sub_1000B6CF4(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

id sub_1000B6D00()
{
  return v0;
}

NSDictionary sub_1000B6D08()
{
  return Dictionary._bridgeToObjectiveC()();
}

void sub_1000B6D10(unint64_t *a1)
{
}

void sub_1000B6D18()
{
}

void sub_1000B6D20()
{
  v0._uint64_t countAndFlagsBits = 34LL;
  v0._object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
}

uint64_t sub_1000B6D2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100009E6C(a1, a2, a3);
}

void sub_1000B6D40()
{
}

uint64_t sub_1000B6D48(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_1000B6D50()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 96);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 104) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_1000B6D74()
{
  return sub_100075674(0LL, 0LL);
}

uint64_t sub_1000B6D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v4, a4);
}

uint64_t sub_1000B6D9C()
{
  return swift_willThrow();
}

uint64_t sub_1000B6DA4()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 144);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 15sub_100096760(v0[56], v0 + 2) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_1000B6DC4()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 152);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 160) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_1000B6DE4()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 160);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 168) = v0;
  return swift_task_dealloc(v5);
}

void sub_1000B6E04()
{
  *(_BYTE *)(*(void *)(v0 + 488) + 144LL) = 1;
}

uint64_t sub_1000B6E14()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 104);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 11sub_100096760(v0[56], v0 + 2) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_1000B6E34( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  return sub_10009E880(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1000B6E48()
{
  return v0;
}

void *sub_1000B6E58@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *uint64_t result = v2;
  result[1] = a2;
  *(void *)(v3 + 16) = *(void *)(v2 + 32);
  return result;
}

  ;
}

  ;
}

_WORD *sub_1000B6EA4(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

void *sub_1000B6EB0()
{
  return sub_1000B3524(v0);
}

  ;
}

uint64_t sub_1000B6EC8@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 176) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return type metadata accessor for Date(0LL);
}

  ;
}

uint64_t sub_1000B6EF8()
{
  return v0;
}

uint64_t sub_1000B6F08()
{
  return swift_willThrow();
}

uint64_t sub_1000B6F10()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_1000B6F1C(double a1)
{
  *(double *)(v1 - 144) = a1;
  return Data.init(bytes:count:)(v1 - 144, 8LL);
}

void sub_1000B6F2C()
{
}

  ;
}

  ;
}

uint64_t sub_1000B6F6C()
{
  return v0;
}

void sub_1000B6F78()
{
}

id sub_1000B6F84()
{
  return v0;
}

uint64_t sub_1000B6F8C()
{
  return type metadata accessor for LSLinkBundleRecord(0LL);
}

uint64_t sub_1000B6FA8()
{
  return static OSSignpostID.exclusive.getter();
}

uint64_t sub_1000B6FC4()
{
  return type metadata accessor for OSSignposter(0LL);
}

uint64_t sub_1000B6FE0()
{
  return type metadata accessor for OSSignpostID(0LL);
}

uint64_t sub_1000B6FFC@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v2;
  *(void *)(v2 + 24) = a1;
  return swift_continuation_init(v1, 1LL);
}

uint64_t sub_1000B700C()
{
  return type metadata accessor for OSSignpostID(0LL);
}

uint64_t sub_1000B7014()
{
  return v0;
}

  ;
}

uint64_t sub_1000B703C()
{
  return swift_task_alloc(32LL);
}

void sub_1000B7044()
{
  *(void *)(v0 - 104) = 0LL;
  *(void *)(v0 - 96) = 0xE000000000000000LL;
}

uint64_t sub_1000B7054()
{
  return sub_10009206C();
}

void sub_1000B705C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000B7064()
{
  return v0;
}

void sub_1000B7074(uint64_t a1)
{
  *(void *)(v2 + sub_100075674(v3, v4) = a1;
  sub_100009E60(v2, 0LL, 1LL, v3);
  os_unfair_lock_unlock(v1);
}

void sub_1000B709C()
{
}

uint64_t sub_1000B70A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 368) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a9, v12, v11, v10 + 12);
}

  ;
}

uint64_t sub_1000B70C8()
{
  return v0;
}

  ;
}

  ;
}

  ;
}

void sub_1000B7128(unint64_t *a1)
{
}

  ;
}

uint64_t sub_1000B713C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_10009ECF0(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1000B7148(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

id sub_1000B7154(void *a1)
{
  return [a1 v1];
}

__n128 sub_1000B715C( __n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __n128 a19)
{
  __n128 result = a19;
  a1[1] = a19;
  return result;
}

uint64_t sub_1000B716C()
{
  return Logger.logObject.getter();
}

  ;
}

uint64_t sub_1000B7184()
{
  return v0;
}

void sub_1000B71A4(uint64_t a1, uint64_t (*a2)(void))
{
}

  ;
}

  ;
}

uint64_t sub_1000B71D4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_1000B71DC@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(a6 + 16) = a1;
  uint64_t v10 = a6 + 16 * v6;
  *(void *)(v10 + 3sub_100096760(v0[56], v0 + 2) = v8;
  *(void *)(v10 + 40) = v9;
  return v7;
}

uint64_t sub_1000B71FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(v11 + 384) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a10, v11 + 392, v10, v12 + 22);
}

uint64_t sub_1000B7214()
{
  return type metadata accessor for LSLinkBundleRecord(0LL);
}

void sub_1000B721C()
{
}

void sub_1000B7234()
{
}

void sub_1000B724C()
{
}

void sub_1000B7264()
{
}

uint64_t sub_1000B727C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11LL, 2LL, a4, 36LL, 2LL, a7, 17LL);
}

uint64_t sub_1000B7294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3, v3);
}

void *sub_1000B729C(int a1, int a2, int a3, void *aBlock)
{
  return _Block_copy(aBlock);
}

void sub_1000B72B4()
{
}

void sub_1000B72CC()
{
}

uint64_t sub_1000B72E4(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

void sub_1000B72F0()
{
}

void *sub_1000B7308()
{
  return sub_1000B3524(v0);
}

uint64_t sub_1000B7310@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v12[86] = v11;
  v12[85] = a11;
  return v12[83] + 40 * a1 + 32;
}

uint64_t sub_1000B7330()
{
  return sub_1000B4D30(v0);
}

uint64_t sub_1000B7338()
{
  return v0;
}

uint64_t sub_1000B7348(uint64_t a1)
{
  return dispatch thunk of IteratorProtocol.next()(a1, v1);
}

uint64_t sub_1000B7350()
{
  return swift_errorRetain(v0);
}

void sub_1000B7358()
{
}

void sub_1000B7370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1000B7384()
{
}

uint64_t sub_1000B7398()
{
  return swift_errorRelease(*(void *)(v0 + 696));
}

  ;
}

void sub_1000B73BC()
{
}

void sub_1000B73C4()
{
}

uint64_t sub_1000B73D0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8LL))(v0, v1);
}

void sub_1000B73E4(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

void sub_1000B73EC(uint64_t a1@<X8>)
{
  *(void *)(v2 + 120) = *(void *)(a1 + v1);
}

void sub_1000B73F8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = (a2 - 32) | 0x8000000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

BOOL sub_1000B7404(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000B7410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100091D80(a1, a2, a3);
}

uint64_t sub_1000B7418()
{
  return swift_task_dealloc(*(void *)(v0 + 288));
}

uint64_t sub_1000B742C()
{
  return swift_task_dealloc(*(void *)(v0 + 288));
}

uint64_t sub_1000B7440@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return v3;
}

uint64_t sub_1000B745C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, void)@<X8>)
{
  return a3(a1, a2, 0LL);
}

void sub_1000B7464(uint64_t a1)
{
}

uint64_t sub_1000B7470(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10000DE60(a1, v3, a3);
}

uint64_t sub_1000B7478()
{
  return dispatch thunk of IteratorProtocol.next()(v0, v1);
}

  ;
}

uint64_t sub_1000B7498(uint64_t a1)
{
  return swift_allocObject(a1, *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));
}

uint64_t sub_1000B74A4(uint64_t a1)
{
  return BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v1, a1);
}

uint64_t sub_1000B74B8(_WORD *a1)
{
  *a1 = 0;
  return OSSignpostID.rawValue.getter();
}

uint64_t sub_1000B74C4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, a1, v1);
}

void sub_1000B74D8()
{
}

void sub_1000B74EC()
{
}

void sub_1000B7500()
{
}

void sub_1000B7514()
{
}

void sub_1000B7528(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 208) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

  ;
}

  ;
}

void *sub_1000B757C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 + 128) = result;
  *__n128 result = v2;
  result[1] = a2;
  return result;
}

  ;
}

  ;
}

uint64_t sub_1000B75A0()
{
  return type metadata accessor for Date(0LL);
}

uint64_t sub_1000B75A8()
{
  return swift_task_dealloc(*(void *)(v0 + 584));
}

uint64_t sub_1000B75B4()
{
  return swift_task_dealloc(*(void *)(v0 + 152));
}

uint64_t sub_1000B75C0(uint64_t a1, uint64_t a2)
{
  return sub_100009E60(a1, a2, 1LL, v2);
}

void sub_1000B75CC()
{
}

uint64_t sub_1000B75D4()
{
  return v0;
}

void sub_1000B75E0()
{
}

uint64_t sub_1000B75F4()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(v0 + 8) + 8LL))(v1);
}

uint64_t sub_1000B7608()
{
  return v0;
}

uint64_t sub_1000B7614()
{
  return v0;
}

uint64_t sub_1000B7620()
{
  return swift_errorRetain(v0);
}

uint64_t sub_1000B7628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100034254(0, v4, a3, v3);
}

void sub_1000B763C()
{
}

void sub_1000B7650(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_1000B7658()
{
  return v0;
}

uint64_t sub_1000B7664@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_1000B7670()
{
  return swift_errorRelease(*(void *)(v0 - 72));
}

uint64_t sub_1000B7678()
{
  return *(void *)(v0 + 40);
}

  ;
}

  ;
}

uint64_t sub_1000B76B0()
{
  return *(void *)(v0 + 72);
}

uint64_t sub_1000B76C0()
{
  return Data.makeIterator()(v0, v1);
}

void *sub_1000B76D0(void *a1)
{
  return sub_100008D74(a1, a1[3]);
}

uint64_t sub_1000B76D8()
{
  return swift_willThrow();
}

uint64_t sub_1000B76E0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

  ;
}

void sub_1000B7700(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 16 * a1;
  *(void *)(v2 + 616) = *(void *)(v3 + 32);
  *(void *)(v2 + 624) = *(void *)(v3 + 40);
}

uint64_t sub_1000B7718(uint64_t a1)
{
  *(void *)(v1 + 688) = v2;
  *(void *)(v1 + 680) = v3;
  return swift_bridgeObjectRetain(a1);
}

  ;
}

  ;
}

uint64_t sub_1000B774C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(_DWORD *)(v15 + 748) = v14;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a14, v15 + 752, a3, a4);
}

uint64_t sub_1000B775C()
{
  return v0;
}

void *sub_1000B7774()
{
  return sub_1000B4CCC(*(void **)(v0 + 480));
}

void *sub_1000B7784()
{
  return sub_1000B4CCC(*(void **)(v0 + 480));
}

uint64_t sub_1000B7794()
{
  return (*(uint64_t (**)(void, void))(v0 + 24))(*(void *)(v0 + 40), 0LL);
}

BOOL sub_1000B77A4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

BOOL sub_1000B77B4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000B77C4()
{
  return (*(uint64_t (**)(uint64_t, void))(v1 + 8))(v0, *(void *)(v2 - 152));
}

uint64_t sub_1000B77D4()
{
  return static OSSignpostID.exclusive.getter();
}

uint64_t sub_1000B77DC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return v3;
}

  ;
}

uint64_t sub_1000B7810()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 24));
}

uint64_t sub_1000B7820(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  return sub_10000DE60(a1, a2, (uint64_t *)va);
}

void sub_1000B7828()
{
}

void sub_1000B7838(Swift::String a1)
{
}

uint64_t sub_1000B7840()
{
  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

void sub_1000B7848( void *a1, os_log_s *a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5, const char *a6, uint8_t *a7)
{
}

uint64_t sub_1000B7850()
{
  return swift_task_dealloc(*(void *)(v0 + 456));
}

void sub_1000B7858()
{
}

id sub_1000B7860(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2);
}

void *sub_1000B7868()
{
  return sub_1000B4CCC(v0);
}

uint64_t sub_1000B7870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Dictionary.init(dictionaryLiteral:)(v3, v4, a3, v5);
}

uint64_t sub_1000B7880()
{
  return static os_log_type_t.default.getter();
}

  ;
}

  ;
}

uint64_t sub_1000B78B8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

void sub_1000B78C0( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  v17._uint64_t countAndFlagsBits = v16;
  v17._object = v15;
  String.append(_:)(v17);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000B7900()
{
  return sub_10000AC58(v0);
}

void *sub_1000B7908()
{
  return sub_1000B3524(v0);
}

id sub_1000B7910(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2, v4);
}

void sub_1000B7920(uint64_t a1, uint64_t a2)
{
}

  ;
}

BOOL sub_1000B7948@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_1000B7958()
{
  return v0;
}

void *sub_1000B7964()
{
  return sub_1000B3524(v0);
}

uint64_t sub_1000B796C(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

id sub_1000B7978(void *a1)
{
  a1[2] = v1;
  a1[3] = v3;
  a1[4] = v2;
  return v1;
}

uint64_t sub_1000B7988()
{
  return static DaemonRecord.from(bundleIdentifier:)(v0, v1);
}

uint64_t sub_1000B7998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Dictionary.init(dictionaryLiteral:)(v5, v3, a3, v4);
}

uint64_t sub_1000B79A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Dictionary.init(dictionaryLiteral:)(v4, v3, a3, v5);
}

void sub_1000B79B8()
{
}

void sub_1000B79C0()
{
}

uint64_t sub_1000B79D0()
{
  return v0;
}

void *sub_1000B79E0()
{
  return sub_1000B3524(v0);
}

uint64_t sub_1000B79E8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1000B79F8()
{
  return sub_100015F98(v1, v0);
}

uint64_t sub_1000B7A08()
{
  return sub_10003A208(v0);
}

uint64_t sub_1000B7A18( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return swift_bridgeObjectRelease(a18);
}

uint64_t sub_1000B7A20()
{
  return Date.init()();
}

uint64_t sub_1000B7A30(uint64_t a1)
{
  *(void *)(v1 - 15sub_100096760(v0[56], v0 + 2) = a1;
  return v1 - 152;
}

  ;
}

uint64_t sub_1000B7A58()
{
  *(void *)(v1 - 7sub_100096760(v0[56], v0 + 2) = v0;
  return swift_errorRetain(v0);
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000B7AB4(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v3, v2);
}

  ;
}

  ;
}

uint64_t sub_1000B7AE0(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_1000B7AF4(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_1000B7B08(uint64_t result)
{
  *(void *)(v1 + 160) = result;
  return result;
}

uint64_t sub_1000B7B14(uint64_t result)
{
  *(void *)(v1 + 15sub_100096760(v0[56], v0 + 2) = result;
  return result;
}

uint64_t sub_1000B7B20(uint64_t result)
{
  *(void *)(v1 + 144) = result;
  return result;
}

void sub_1000B7B2C(uint64_t a1@<X8>)
{
  *(void *)(v1 + 600) = a1;
}

void sub_1000B7B40(uint64_t a1@<X8>)
{
}

  ;
}

  ;
}

  ;
}

void *sub_1000B7B88@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 + 15sub_100096760(v0[56], v0 + 2) = result;
  *__n128 result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_1000B7B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3, v3);
}

uint64_t sub_1000B7B9C(uint64_t result)
{
  *(void *)(v1 + 448) = result;
  return result;
}

uint64_t sub_1000B7BA8(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, 15LL);
}

  ;
}

uint64_t sub_1000B7BC4()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 120));
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000B7BF8()
{
  return sub_10004BB58(v1 - 128, v0);
}

void sub_1000B7C04(uint64_t a1@<X8>)
{
  *(void *)(v2 + 15sub_100096760(v0[56], v0 + 2) = *(void *)(a1 + v1);
}

void sub_1000B7C10()
{
  *(void *)(v0 + 720) = 3LL;
}

uint64_t sub_1000B7C1C(uint64_t a1)
{
  return v1 + *(int *)(a1 + 28);
}

uint64_t sub_1000B7C30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100058670(a1, a2, a3);
}

void *sub_1000B7C3C(uint64_t a1, uint64_t a2)
{
  return sub_100058428(a1, a2);
}

void sub_1000B7C48()
{
}

void sub_1000B7C54()
{
}

void sub_1000B7C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

  ;
}

uint64_t sub_1000B7C78@<X0>(uint64_t (*a1)(void)@<X8>)
{
  return a1();
}

uint64_t sub_1000B7C84@<X0>(uint64_t (*a1)(void)@<X8>)
{
  return a1();
}

  ;
}

  ;
}

uint64_t sub_1000B7CB8()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_1000B7CC4()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_1000B7CD0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return swift_bridgeObjectRelease(a11);
}

uint64_t sub_1000B7CD8@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

void sub_1000B7CE4(Swift::String a1)
{
}

void sub_1000B7CF0(uint64_t a1)
{
}

  ;
}

id sub_1000B7D04@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(void *)(a1 + 3sub_100096760(v0[56], v0 + 2) = a2;
  return a2;
}

uint64_t sub_1000B7D0C(uint64_t a1)
{
  return swift_initStackObject(a1, v1 - 128);
}

void sub_1000B7D14(unint64_t *a1)
{
}

void sub_1000B7D1C(uint64_t a1)
{
}

uint64_t sub_1000B7D28()
{
  return v0;
}

uint64_t sub_1000B7D3C(uint64_t a1)
{
  return swift_storeEnumTagMultiPayload(a1, v1, 1LL);
}

  ;
}

uint64_t sub_1000B7D54@<X0>(uint64_t a1@<X8>)
{
  return swift_release(*(void *)(v1 + a1));
}

void *sub_1000B7D5C@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  return sub_100096760(a1, a2);
}

void sub_1000B7D68()
{
}

void sub_1000B7D74()
{
}

void sub_1000B7D80()
{
}

void sub_1000B7D8C()
{
}

void sub_1000B7D98()
{
}

void sub_1000B7DA4()
{
}

uint64_t sub_1000B7DB0(uint64_t a1)
{
  return swift_dynamicCastObjCClass(v1, a1);
}

uint64_t sub_1000B7DBC(uint64_t a1)
{
  return String.init<A>(describing:)(v1, a1);
}

uint64_t sub_1000B7DC8()
{
  return swift_getEnumCaseMultiPayload(v0, v1);
}

uint64_t sub_1000B7DD4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_1000B7DE0()
{
  return *(unsigned int *)(*(void *)(v0 + 64) + 4LL);
}

void sub_1000B7DF4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(void *)(v13 - 16) = a13;
}

uint64_t sub_1000B7E08()
{
  return URL.resourceValues(forKeys:)();
}

void sub_1000B7E10(uint64_t a1)
{
}

  ;
}

uint64_t sub_1000B7E2C()
{
  return swift_willThrow();
}

void sub_1000B7E34()
{
}

  ;
}

uint64_t sub_1000B7E54()
{
  return swift_task_dealloc(*(void *)(v0 + 80));
}

uint64_t sub_1000B7E5C()
{
  return type metadata accessor for DaemonRecord(0LL);
}

void sub_1000B7E64(uint64_t a1, uint64_t *a2)
{
}

void sub_1000B7E6C()
{
  v2._uint64_t countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t sub_1000B7E78()
{
  return swift_task_alloc(v0);
}

uint64_t sub_1000B7E80()
{
  return v0;
}

uint64_t sub_1000B7E8C()
{
  return sub_10009A910(v1, v0);
}

uint64_t sub_1000B7E98()
{
  return sub_10000A280(v1, v0);
}

uint64_t sub_1000B7EA4()
{
  return sub_10000A21C(v1, v0);
}

uint64_t sub_1000B7EB0()
{
  return v0;
}

void sub_1000B7EBC(uint64_t a1@<X8>)
{
}

uint64_t sub_1000B7EC8()
{
  return sub_10000A1D8(v1, v0);
}

uint64_t sub_1000B7ED4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10000DE60(v4, v3, a3);
}

uint64_t sub_1000B7EE0()
{
  return v0;
}

  ;
}

  ;
}

uint64_t sub_1000B7F14()
{
  return sub_10000AC58(v0);
}

NSString sub_1000B7F1C()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_1000B7F28()
{
  return sub_10000A280(v0, v1);
}

uint64_t sub_1000B7F34()
{
  return v0;
}

uint64_t sub_1000B7F40()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_1000B7F4C@<X0>(uint64_t (*a1)(uint64_t)@<X8>)
{
  return a1(v1);
}

uint64_t sub_1000B7F58()
{
  return _convertNSErrorToError(_:)(v0);
}

uint64_t sub_1000B7F64()
{
  return type metadata accessor for OSStateHandler();
}

void sub_1000B7F70()
{
}

void sub_1000B7F7C(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_1000B7F84()
{
  return sub_100075674(v1, v0);
}

void *sub_1000B7F90()
{
  return sub_1000B43FC(v0, v1);
}

void sub_1000B7F9C()
{
}

void sub_1000B7FA8()
{
}

void sub_1000B7FB0()
{
}

void sub_1000B7FBC()
{
}

unint64_t *sub_1000B7FC8()
{
  return sub_100090404(v0, v1);
}

uint64_t sub_1000B7FD4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

void sub_1000B7FE0()
{
}

  ;
}

  ;
}

uint64_t sub_1000B8014(uint64_t a1, uint64_t a2)
{
  return v4(v3, a2, v2);
}

uint64_t sub_1000B8020(uint64_t a1)
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(a1, v1);
}

void *sub_1000B8028@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 + 160) = result;
  *__n128 result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_1000B8034(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10000DE60(a1, v3, a3);
}

uint64_t sub_1000B803C()
{
  return v0(v1);
}

void sub_1000B8044()
{
}

uint64_t sub_1000B804C(uint64_t a1, unint64_t a2)
{
  return sub_10000DE60(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t sub_1000B8058(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  return sub_10000DE60(a1, a2, (uint64_t *)va);
}

  ;
}

uint64_t sub_1000B8070()
{
  return static os_log_type_t.default.getter();
}

  ;
}

uint64_t sub_1000B808C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    sub_100008D74(v53, v54);
    if (qword_100130358 != -1) {
      swift_once(&qword_100130358, sub_1000B85DC);
    }
    sub_10001DECC((uint64_t)&qword_100135958);
    == infix<A>(_:_:)();
    sub_100038994(v8, v9, v10, v11, v12, v13, v14, v15, a1, a2, v44, v47, v50);
    sub_10003886C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v16 = sub_10000AC58(v53);
    sub_10003887C(v16, v17, v18, v19, v20, v21, v22, v23, v42, v45, v48, v51, v53[0]);
  }

  if (a4)
  {
    sub_100008D74(v53, v54);
    if (qword_100130360 != -1) {
      swift_once(&qword_100130360, sub_1000B8600);
    }
    sub_10001DECC((uint64_t)&qword_100135970);
    == infix<A>(_:_:)();
    sub_100038994(v24, v25, v26, v27, v28, v29, v30, v31, a3, a4, v44, v47, v50);
    sub_10003886C();
    swift_bridgeObjectRelease();
    sub_10001BE7C();
    uint64_t v32 = sub_10000AC58(v53);
    sub_10003887C(v32, v33, v34, v35, v36, v37, v38, v39, v43, v46, v49, v52, v53[0]);
  }

  uint64_t v40 = sub_1000B8BA4(v53);
  sub_10000AC58(v53);
  return v40;
}

uint64_t sub_1000B8274(uint64_t a1, void *a2)
{
  Swift::String v5 = LNExamplePhraseDescription.asJson()();
  uint64_t result = v5._countAndFlagsBits;
  if (!v6)
  {
    if (qword_100130350 != -1) {
      swift_once(&qword_100130350, sub_1000B8580);
    }
    sub_10001DEBC(v39, &unk_1001358B0);
    sub_10001DEBC(v36, &unk_1001358B0);
    sub_10001D9AC(v39);
    if (qword_100130358 != -1) {
      swift_once(&qword_100130358, sub_1000B85DC);
    }
    uint64_t v7 = sub_10001DECC((uint64_t)&qword_100135958);
    v34._uint64_t countAndFlagsBits = a1;
    v34._object = a2;
    <- infix<A>(_:_:)( v7,  v8,  v9,  (uint64_t)&v34,  (uint64_t)type metadata for String,  (uint64_t)&protocol witness table for String);
    uint64_t v10 = sub_100008DB0(&qword_1001323E0);
    uint64_t inited = swift_initStackObject(v10, v33);
    *(_OWORD *)(inited + 16) = xmmword_1000F5520;
    if (qword_100130368 != -1) {
      swift_once(&qword_100130368, sub_1000B8624);
    }
    uint64_t v12 = sub_10001DECC((uint64_t)&qword_100135988);
    Swift::String v34 = v5;
    <- infix<A>(_:_:)( v12,  v13,  v14,  (uint64_t)&v34,  (uint64_t)type metadata for String,  (uint64_t)&protocol witness table for String);
    swift_bridgeObjectRelease();
    uint64_t v15 = QueryType.insert(_:_:)((uint64_t)v35);
    uint64_t v17 = v16;
    uint64_t v19 = v18;
    swift_setDeallocating(inited);
    sub_100058874();
    sub_10001DC30(v35);
    sub_10001DEBC(v40, v36);
    sub_10001DAF0(v40);
    v41.template._uint64_t countAndFlagsBits = v15;
    v41.template._object = v17;
    v41.bindings._rawValue = v19;
    Connection.run(_:)(v41);
    if (v20)
    {
      swift_bridgeObjectRelease();
      sub_10001BE7C();
      v35[0] = v20;
      swift_errorRetain(v20);
      uint64_t v21 = sub_100008DB0(&qword_100130620);
      if (swift_dynamicCast(v36, v35, v21, &type metadata for Result, 0LL))
      {
        swift_errorRelease(v20);
        uint64_t v22 = v36[1];
        int v23 = v37;
        uint64_t v24 = v38;
        if (v37 == 19)
        {
          uint64_t v25 = type metadata accessor for Schema.RuntimeError(0LL);
          unint64_t v26 = sub_100037E5C();
          sub_100038AC8(v25, v26);
          *uint64_t v27 = 0xD0000000000000FALL;
          v27[1] = 0x80000001000F9C40LL;
          uint64_t v28 = swift_storeEnumTagMultiPayload(v27, v25, 0LL);
          swift_willThrow(v28);
          swift_release();
          swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t v29 = v36[0];
          unint64_t v30 = sub_100037E20();
          uint64_t v31 = sub_100038AC8((uint64_t)&type metadata for Result, v30);
          *(void *)uint64_t v32 = v29;
          *(void *)(v32 + 8) = v22;
          *(_DWORD *)(v32 + 16) = v23;
          *(void *)(v32 + 24) = v24;
          swift_willThrow(v31);
        }
      }

      return swift_errorRelease(v35[0]);
    }

    else
    {
      swift_bridgeObjectRelease();
      return sub_10001BE7C();
    }
  }

  return result;
}

void *sub_1000B8580()
{
  return memcpy(&unk_1001358B0, __src, 0xA8uLL);
}

uint64_t sub_1000B85DC(uint64_t a1)
{
  return sub_100028168(a1, (uint64_t)&qword_100135958, 0xD000000000000010LL, 0x80000001000F96E0LL);
}

uint64_t sub_1000B8600(uint64_t a1)
{
  return sub_100028168(a1, (uint64_t)&qword_100135970, 0xD000000000000010LL, 0x80000001000F9FE0LL);
}

uint64_t sub_1000B8624(uint64_t a1)
{
  return sub_100028168(a1, (uint64_t)&qword_100135988, 0x7470697263736564LL, 0xEB000000006E6F69LL);
}

uint64_t sub_1000B864C@<X0>(uint64_t a1@<X8>)
{
  if (qword_100130350 != -1) {
    swift_once(&qword_100130350, sub_1000B8580);
  }
  uint64_t v1 = sub_10001DEBC(v166, &unk_1001358B0);
  sub_1000389CC( (uint64_t)v1,  v2,  v3,  v4,  v5,  v6,  v7,  v8,  v100,  v106,  a1,  (uint64_t)v119,  v120,  v121,  v122,  (uint64_t)v123,  v124,  v125,  v126,  v127,  v128,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  v136,  v137,  v138,  v139,  v140,  v141,  v142,  (uint64_t)v143,  (uint64_t)v144,  v145,  v146,  v147,  v148,  v149,  v150,  v151,  v152,  v153,  v154,  v155,  v156,
    v157,
    v158,
    v159,
    v160,
    v161,
    v162,
    v163,
    v164,
    v165,
    v166[0]);
  if (qword_100130390 != -1) {
    swift_once(&qword_100130390, sub_1000BDEE8);
  }
  sub_10001DEBC(v167, &unk_100135A88);
  sub_10001DEBC(v168, v166);
  sub_1000389C4();
  if (qword_100130358 != -1) {
    swift_once(&qword_100130358, sub_1000B85DC);
  }
  uint64_t v9 = qword_100135958;
  uint64_t v10 = unk_100135960;
  uint64_t v11 = qword_100135968;
  uint64_t v12 = sub_10001DEBC(&v145, v166);
  sub_1000389CC( (uint64_t)v12,  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v101,  v107,  v113,  (uint64_t)v119,  v120,  v121,  v122,  (uint64_t)v123,  v124,  v125,  v126,  v127,  v128,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  v136,  v137,  v138,  v139,  v140,  v141,  v142,  (uint64_t)v143,  (uint64_t)v144,  v145,  v146,  v147,  v148,  v149,  v150,  v151,  v152,  v153,  v154,  v155,  v156,
    v157,
    v158,
    v159,
    v160,
    v161,
    v162,
    v163,
    v164,
    v165,
    v166[0]);
  uint64_t v20 = QueryType.namespace<A>(_:)(v9, v10, v11, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
  sub_1000B8EE0( v20,  v21,  v22,  v23,  v24,  v25,  v26,  v27,  v102,  v108,  v114,  (uint64_t)v119,  v120,  v121,  v122,  (uint64_t)v123,  v124,  v125,  v126,  v127,  v128,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  v136,  v137,  v138,  v139,  v140,  v141,  v142,  (uint64_t)v143,  (uint64_t)v144,  v145,  v146,  v147,  v148,  v149,  v150,  v151,  v152,  v153,  v154,  v155,  v156,
    v157,
    v158,
    v159,
    v160,
    v161,
    v162,
    v163,
    v164,
    v165,
    v166[0]);
  uint64_t v28 = sub_100008DB0((uint64_t *)&unk_1001323C0);
  uint64_t v122 = v28;
  uint64_t v123 = &protocol witness table for Expression<A>;
  unint64_t v119 = &v145;
  uint64_t v120 = v9;
  uint64_t v121 = v10;
  uint64_t v29 = sub_100008DB0(&qword_100131160);
  uint64_t v30 = swift_allocObject(v29, 152LL, 7LL);
  *(_OWORD *)(v30 + 16) = xmmword_1000F57E0;
  if (qword_100130360 != -1) {
    swift_once(&qword_100130360, sub_1000B8600);
  }
  uint64_t v31 = qword_100135970;
  uint64_t v32 = *(void *)algn_100135978;
  uint64_t v33 = qword_100135980;
  Swift::String v34 = sub_10001DEBC(&v145, v166);
  sub_1000389CC( (uint64_t)v34,  v35,  v36,  v37,  v38,  v39,  v40,  v41,  v103,  v109,  v115,  (uint64_t)v119,  v120,  v121,  v122,  (uint64_t)v123,  v124,  v125,  v126,  v127,  v128,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  v136,  v137,  v138,  v139,  v140,  v141,  v142,  (uint64_t)v143,  (uint64_t)v144,  v145,  v146,  v147,  v148,  v149,  v150,  v151,  v152,  v153,  v154,  v155,  v156,
    v157,
    v158,
    v159,
    v160,
    v161,
    v162,
    v163,
    v164,
    v165,
    v166[0]);
  uint64_t v42 = QueryType.namespace<A>(_:)(v31, v32, v33, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
  sub_1000B8EE0( v42,  v43,  v44,  v45,  v46,  v47,  v48,  v49,  v104,  v110,  v116,  (uint64_t)v119,  v120,  v121,  v122,  (uint64_t)v123,  v124,  v125,  v126,  v127,  v128,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  v136,  v137,  v138,  v139,  v140,  v141,  v142,  (uint64_t)v143,  (uint64_t)v144,  v145,  v146,  v147,  v148,  v149,  v150,  v151,  v152,  v153,  v154,  v155,  v156,
    v157,
    v158,
    v159,
    v160,
    v161,
    v162,
    v163,
    v164,
    v165,
    v166[0]);
  *(void *)(v30 + 56) = v28;
  *(void *)(v30 + 64) = &protocol witness table for Expression<A>;
  *(void *)(v30 + 3sub_100096760(v0[56], v0 + 2) = &v145;
  *(void *)(v30 + 40) = v31;
  *(void *)(v30 + 48) = v32;
  if (qword_100130368 != -1) {
    swift_once(&qword_100130368, sub_1000B8624);
  }
  uint64_t v50 = qword_100135988;
  uint64_t v51 = unk_100135990;
  uint64_t v52 = qword_100135998;
  os_log_t v53 = sub_10001DEBC(&v145, v166);
  sub_1000389CC( (uint64_t)v53,  v54,  v55,  v56,  v57,  v58,  v59,  v60,  v105,  v111,  v117,  (uint64_t)v119,  v120,  v121,  v122,  (uint64_t)v123,  v124,  v125,  v126,  v127,  v128,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  v136,  v137,  v138,  v139,  v140,  v141,  v142,  (uint64_t)v143,  (uint64_t)v144,  v145,  v146,  v147,  v148,  v149,  v150,  v151,  v152,  v153,  v154,  v155,  v156,
    v157,
    v158,
    v159,
    v160,
    v161,
    v162,
    v163,
    v164,
    v165,
    v166[0]);
  uint64_t v62 = sub_1000B8EF4(v50, v51, v52, v61, (uint64_t)&type metadata for String);
  uint64_t v64 = v63;
  uint64_t v66 = v65;
  sub_10001DAF0(v166);
  *(void *)(v30 + 96) = v28;
  *(void *)(v30 + 104) = &protocol witness table for Expression<A>;
  *(void *)(v30 + 7sub_100096760(v0[56], v0 + 2) = v62;
  *(void *)(v30 + 80) = v64;
  *(void *)(v30 + 88) = v66;
  if (qword_1001303B8 != -1) {
    swift_once(&qword_1001303B8, sub_1000BE150);
  }
  uint64_t v67 = qword_100135B60;
  uint64_t v68 = *(void *)algn_100135B68;
  uint64_t v69 = qword_100135B70;
  sub_10001DEBC(&v145, v167);
  sub_1000389C4();
  uint64_t v71 = sub_1000B8EF4(v67, v68, v69, v70, (uint64_t)&type metadata for Int);
  uint64_t v73 = v72;
  uint64_t v75 = v74;
  sub_10001DAF0(v167);
  *(void *)(v30 + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = sub_100008DB0(&qword_100131988);
  *(void *)(v30 + 144) = &protocol witness table for Expression<A>;
  *(void *)(v30 + 11sub_100096760(v0[56], v0 + 2) = v71;
  *(void *)(v30 + 120) = v73;
  *(void *)(v30 + 128) = v75;
  SchemaType.select(_:_:)( (uint64_t)&v119,  v30,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table);
  swift_setDeallocating(v30);
  sub_100058868();
  sub_10000AC58(&v119);
  sub_10001DEBC(v168, &v145);
  uint64_t v143 = &type metadata for Table;
  uint64_t v144 = &protocol witness table for Table;
  uint64_t v140 = sub_100038A2C((uint64_t)&unk_100126378);
  sub_10001DEBC((void *)(v140 + 16), v167);
  uint64_t v76 = qword_100135958;
  uint64_t v77 = unk_100135960;
  uint64_t v78 = qword_100135968;
  sub_10001DEBC(&v119, v166);
  sub_1000389C4();
  sub_1000B8EF4(v76, v77, v78, v79, (uint64_t)&type metadata for String);
  uint64_t v81 = v80;
  uint64_t v83 = v82;
  sub_10001DAF0(v166);
  if (qword_100130398 != -1) {
    swift_once(&qword_100130398, sub_1000BDF38);
  }
  uint64_t v84 = qword_100135B30;
  uint64_t v85 = *(void *)algn_100135B38;
  uint64_t v86 = qword_100135B40;
  sub_10001DEBC(&v119, v167);
  QueryType.namespace<A>(_:)(v84, v85, v86, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
  uint64_t v88 = v87;
  uint64_t v90 = v89;
  sub_10001DAF0(v167);
  == infix<A>(_:_:)();
  uint64_t v92 = v91;
  uint64_t v94 = v93;
  uint64_t v96 = v95;
  swift_bridgeObjectRelease(v83);
  swift_bridgeObjectRelease(v81);
  swift_bridgeObjectRelease(v90);
  swift_bridgeObjectRelease(v88);
  v118[3] = (uint64_t)&type metadata for Table;
  v118[4] = (uint64_t)&protocol witness table for Table;
  uint64_t v97 = sub_100038A2C((uint64_t)&unk_100126378);
  uint64_t v98 = v97 + 16;
  *unint64_t v118 = v97;
  sub_10001DEBC(&v119, v168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.join(_:_:on:)( 1,  &v140,  v92,  v94,  v96,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table,  v98);
  swift_bridgeObjectRelease_n(v96, 2LL);
  swift_bridgeObjectRelease_n(v94, 2LL);
  sub_10001DAF0(v168);
  return sub_10000AC58(&v140);
}

uint64_t sub_1000B8BA4(void *a1)
{
  uint64_t v3 = Connection.prepareRowIterator(_:)(a1);
  if (!v1)
  {
    __chkstk_darwin(v3);
    swift_retain();
    RowIterator.compactMap<A>(_:)();
    uint64_t v2 = v5;
    swift_release();
    sub_1000B8F00();
    swift_release();
  }

  return v2;
}

uint64_t sub_1000B8C84()
{
  if (qword_100130358 != -1) {
    swift_once(&qword_100130358, sub_1000B85DC);
  }
  Row.get<A>(_:)();
  if (qword_100130368 != -1) {
    swift_once(&qword_100130368, sub_1000B8624);
  }
  Row.get<A>(_:)();
  sub_1000B8E0C();
  static LNExamplePhraseDescription.fromJSON(_:)();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1000B8DD4()
{
  return sub_1000B8C84();
}

uint64_t sub_1000B8DDC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2)
  {
    *a1 = result;
    a1[1] = v5;
    a1[2] = v6;
  }

  return result;
}

unint64_t sub_1000B8E0C()
{
  unint64_t result = qword_100133690;
  if (!qword_100133690)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___LNExamplePhraseDescription);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, &qword_100133690);
  }

  return result;
}

uint64_t sub_1000B8E48()
{
  uint64_t v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[13]);
  }

  uint64_t v2 = v0[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    uint64_t v3 = v0[16];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v0[17]);
    }
  }

  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184LL, 7LL);
}

ValueMetadata *type metadata accessor for LNExamplePhraseRecord()
{
  return &type metadata for LNExamplePhraseRecord;
}

void *sub_1000B8EE0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  return sub_10001DAF0(&a59);
}

uint64_t sub_1000B8EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return QueryType.namespace<A>(_:)(a1, a2, a3, v5, a5);
}

uint64_t sub_1000B8F00()
{
  return swift_bridgeObjectRelease(v0);
}

void *sub_1000B8F0C()
{
  return memcpy(&unk_1001359A0, __src, 0xA8uLL);
}

uint64_t sub_1000B8F60(uint64_t a1)
{
  return sub_100028168(a1, (uint64_t)&qword_100135A48, 0xD000000000000010LL, 0x80000001000F96E0LL);
}

uint64_t sub_1000B8F84(uint64_t a1)
{
  return sub_100028168(a1, (uint64_t)&qword_100135A60, 0x657669746167656ELL, 0xEF73657361726850LL);
}

ValueMetadata *type metadata accessor for LNAssistantIntentNegativePhraseRecord()
{
  return &type metadata for LNAssistantIntentNegativePhraseRecord;
}

uint64_t sub_1000B8FC0(uint64_t a1)
{
  v2[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_initClassMetadata2(a1, 0LL, 3LL, v2, a1 + 96);
}

void sub_1000B901C(void *a1)
{
}

void sub_1000B9038(void *a1)
{
  uint64_t v2 = v1;
  swift_getObjectType(v1);
  unsigned int v4 = [a1 processIdentifier];
  id v5 = sub_10002967C();
  [a1 setExportedInterface:v5];

  sub_100029A20(aBlock);
  uint64_t v6 = v20;
  if (v20)
  {
    uint64_t v7 = sub_100008D74(aBlock, (uint64_t)v20);
    uint64_t v8 = *(v6 - 1);
    double v9 = __chkstk_darwin(v7);
    uint64_t v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *, double))(v8 + 16))(v11, v9);
    uint64_t v12 = _bridgeAnythingToObjectiveC<A>(_:)(v11, v6);
    (*(void (**)(char *, void *))(v8 + 8))(v11, v6);
    sub_10000AC58(aBlock);
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  [a1 setExportedObject:v12];
  swift_unknownObjectRelease(v12);
  sub_1000299DC((uint64_t)a1);
  if (v13)
  {
    uint64_t v14 = v13;
    [a1 setRemoteObjectInterface:v13];
  }

  uint64_t v15 = swift_allocObject(&unk_100126628, 24LL, 7LL);
  swift_unknownObjectWeakInit(v15 + 16, v2);
  uint64_t v16 = swift_allocObject(&unk_100126650, 24LL, 7LL);
  swift_unknownObjectWeakInit(v16 + 16, a1);
  uint64_t v17 = swift_allocObject(&unk_100126678, 40LL, 7LL);
  *(_DWORD *)(v17 + 16) = v4;
  *(void *)(v17 + 24) = v15;
  *(void *)(v17 + 3sub_100096760(v0[56], v0 + 2) = v16;
  uint64_t v21 = sub_1000BAF04;
  uint64_t v22 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10000D934;
  uint64_t v20 = &unk_100126690;
  uint64_t v18 = _Block_copy(aBlock);
  swift_release();
  [a1 setInvalidationHandler:v18];
  _Block_release(v18);
}

void sub_1000B9278(void *a1)
{
  unsigned int v3 = [a1 processIdentifier];
  id v4 = (id)LNDaemonSuggestionsXPCInterface();
  [a1 setExportedInterface:v4];

  sub_100029A20(aBlock);
  id v5 = v17;
  if (v17)
  {
    uint64_t v6 = sub_100008D74(aBlock, (uint64_t)v17);
    uint64_t v7 = *(v5 - 1);
    double v8 = __chkstk_darwin(v6);
    uint64_t v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *, double))(v7 + 16))(v10, v8);
    uint64_t v11 = _bridgeAnythingToObjectiveC<A>(_:)(v10, v5);
    (*(void (**)(char *, void *))(v7 + 8))(v10, v5);
    sub_10000AC58(aBlock);
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  [a1 setExportedObject:v11];
  swift_unknownObjectRelease(v11);
  uint64_t v12 = swift_allocObject(&unk_1001266C8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v12 + 16, v1);
  uint64_t v13 = swift_allocObject(&unk_100126650, 24LL, 7LL);
  swift_unknownObjectWeakInit(v13 + 16, a1);
  uint64_t v14 = swift_allocObject(&unk_1001266F0, 40LL, 7LL);
  *(_DWORD *)(v14 + 16) = v3;
  *(void *)(v14 + 24) = v12;
  *(void *)(v14 + 3sub_100096760(v0[56], v0 + 2) = v13;
  uint64_t v18 = sub_1000BAF84;
  uint64_t v19 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10000D934;
  uint64_t v17 = &unk_100126708;
  uint64_t v15 = _Block_copy(aBlock);
  swift_release();
  [a1 setInvalidationHandler:v15];
  _Block_release(v15);
}

void sub_1000B946C(void *a1)
{
  unsigned int v3 = [a1 processIdentifier];
  id v4 = (id)LNDaemonRegistryXPCInterface();
  [a1 setExportedInterface:v4];

  sub_10009B3E0(aBlock);
  id v5 = v17;
  if (v17)
  {
    uint64_t v6 = sub_100008D74(aBlock, (uint64_t)v17);
    uint64_t v7 = *(v5 - 1);
    double v8 = __chkstk_darwin(v6);
    uint64_t v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *, double))(v7 + 16))(v10, v8);
    uint64_t v11 = _bridgeAnythingToObjectiveC<A>(_:)(v10, v5);
    (*(void (**)(char *, void *))(v7 + 8))(v10, v5);
    sub_10000AC58(aBlock);
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  [a1 setExportedObject:v11];
  swift_unknownObjectRelease(v11);
  uint64_t v12 = swift_allocObject(&unk_100126740, 24LL, 7LL);
  swift_unknownObjectWeakInit(v12 + 16, v1);
  uint64_t v13 = swift_allocObject(&unk_100126650, 24LL, 7LL);
  swift_unknownObjectWeakInit(v13 + 16, a1);
  uint64_t v14 = swift_allocObject(&unk_100126768, 40LL, 7LL);
  *(_DWORD *)(v14 + 16) = v3;
  *(void *)(v14 + 24) = v12;
  *(void *)(v14 + 3sub_100096760(v0[56], v0 + 2) = v13;
  uint64_t v18 = sub_1000BAF94;
  uint64_t v19 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10000D934;
  uint64_t v17 = &unk_100126780;
  uint64_t v15 = _Block_copy(aBlock);
  swift_release();
  [a1 setInvalidationHandler:v15];
  _Block_release(v15);
}

void sub_1000B9660(void *a1)
{
  unsigned int v3 = [a1 processIdentifier];
  id v4 = (id)LNDaemonExtensionXPCInterface();
  [a1 setExportedInterface:v4];

  sub_100029A20(aBlock);
  id v5 = v17;
  if (v17)
  {
    uint64_t v6 = sub_100008D74(aBlock, (uint64_t)v17);
    uint64_t v7 = *(v5 - 1);
    double v8 = __chkstk_darwin(v6);
    uint64_t v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *, double))(v7 + 16))(v10, v8);
    uint64_t v11 = _bridgeAnythingToObjectiveC<A>(_:)(v10, v5);
    (*(void (**)(char *, void *))(v7 + 8))(v10, v5);
    sub_10000AC58(aBlock);
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  [a1 setExportedObject:v11];
  swift_unknownObjectRelease(v11);
  uint64_t v12 = swift_allocObject(&unk_1001267B8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v12 + 16, v1);
  uint64_t v13 = swift_allocObject(&unk_100126650, 24LL, 7LL);
  swift_unknownObjectWeakInit(v13 + 16, a1);
  uint64_t v14 = swift_allocObject(&unk_1001267E0, 40LL, 7LL);
  *(_DWORD *)(v14 + 16) = v3;
  *(void *)(v14 + 24) = v12;
  *(void *)(v14 + 3sub_100096760(v0[56], v0 + 2) = v13;
  uint64_t v18 = sub_1000BAFD0;
  uint64_t v19 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10000D934;
  uint64_t v17 = &unk_1001267F8;
  uint64_t v15 = _Block_copy(aBlock);
  swift_release();
  [a1 setInvalidationHandler:v15];
  _Block_release(v15);
}

uint64_t sub_1000B9854(void *a1)
{
  return sub_10005A798(a1) & 1;
}

uint64_t sub_1000B9878()
{
  uint64_t v1 = (void *)sub_10000E9B0((uint64_t)&unk_100133CA8);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = (uint64_t (*)(void))sub_1000BB04C(v1, (uint64_t)sub_1000B98B4, v4);
  return sub_10000C914(v2);
}

uint64_t sub_1000B98B4()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return sub_10000C914(*(uint64_t (**)(void))(v2 + 8));
}

void sub_1000B98F4(void *a1)
{
}

uint64_t sub_1000B9910()
{
  uint64_t v1 = (void *)sub_10000E9B0((uint64_t)&unk_100133CC0);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = (uint64_t (*)(void))sub_1000BB04C(v1, (uint64_t)sub_1000BAFDC, v4);
  return sub_10000C914(v2);
}

void sub_1000B994C(void *a1)
{
}

uint64_t sub_1000B9968()
{
  uint64_t v1 = (void *)sub_10000E9B0((uint64_t)&unk_100133CD0);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = (uint64_t (*)(void))sub_1000BB04C(v1, (uint64_t)sub_1000BAFDC, v4);
  return sub_10000C914(v2);
}

uint64_t sub_1000B99A4()
{
  v1[2] = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = swift_isaMask;
  v1[3] = *v0;
  v1[4] = v3;
  uint64_t v4 = *(void *)((v3 & v2) + 0x50);
  v1[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v1[6] = v5;
  v1[7] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000B9A18, v0, 0LL);
}

uint64_t sub_1000B9A18()
{
  uint64_t v1 = v0[7];
  [*(id *)(v0[2] + 112) invalidate];
  sub_1000889F8(v1);
  uint64_t v2 = *(void *)((v0[3] & v0[4]) + 0x58LL);
  uint64_t v3 = *(int **)(v2 + 32);
  uint64_t v6 = (int *)((char *)v3 + *v3);
  uint64_t v4 = (void *)swift_task_alloc(v3[1]);
  v0[8] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000B9AD8;
  return ((uint64_t (*)(void, uint64_t))v6)(v0[5], v2);
}

uint64_t sub_1000B9AD8()
{
  uint64_t v3 = *(void *)(*v1 + 56);
  uint64_t v2 = *(void *)(*v1 + 64);
  uint64_t v4 = *(void *)(*v1 + 40);
  uint64_t v5 = *(void *)(*v1 + 48);
  uint64_t v6 = *v1;
  *(void *)(v6 + 7sub_100096760(v0[56], v0 + 2) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  if (v0) {
    return swift_task_switch(sub_1000B9B70, *(void *)(v6 + 16), 0LL);
  }
  swift_task_dealloc(*(void *)(v6 + 56));
  return sub_100068024(*(uint64_t (**)(void))(v6 + 8));
}

uint64_t sub_1000B9B70()
{
  return sub_10000C914(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000B9B9C(uint64_t a1, void *a2)
{
  uint64_t ObjectType = swift_getObjectType(v2);
  v46[0] = swift_isaMask & *v2;
  uint64_t v4 = *(void *)(v46[0] + 80LL);
  v46[1] = *(void *)(v4 - 8);
  __chkstk_darwin(ObjectType);
  uint64_t v6 = (char *)v46 - v5;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v48 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v50 = v4;
  uint64_t v54 = v4;
  uint64_t v10 = sub_100008DB0((uint64_t *)&unk_100132590);
  uint64_t v12 = String.init<A>(describing:)(&v54, v10);
  uint64_t result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    uint64_t v14 = v11;
    uint64_t v15 = String.init(cString:)(LNLogSubsystem);
    Logger.init(subsystem:category:)(v15, v16, v12, v14);
    id v17 = a2;
    uint64_t v51 = v9;
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    BOOL v20 = os_log_type_enabled(v18, v19);
    uint64_t v47 = v7;
    if (v20)
    {
      uint64_t v21 = (uint8_t *)sub_10000AE10(12LL);
      uint64_t v22 = sub_10000AE10(32LL);
      uint64_t v54 = v22;
      *(_DWORD *)uint64_t v21 = 136315138;
      unint64_t v23 = sub_1000BA12C(v17);
      uint64_t v52 = sub_1000BB040(v23, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v21 + 4, v21 + 12);

      sub_10000ADB0();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Incoming %s", v21, 0xCu);
      swift_arrayDestroy(v22, 1LL);
      sub_10000AD78(v22);
      sub_10000AD78((uint64_t)v21);
    }

    else
    {
    }

    uint64_t v25 = v50;
    sub_1000889F8((uint64_t)v6);
    uint64_t v26 = v51;
    uint64_t v27 = *(void *)(v46[0] + 88LL);
    (*(void (**)(id, uint64_t, uint64_t))(v27 + 16))(v17, v25, v27);
    char v29 = (*(uint64_t (**)(id, uint64_t, uint64_t))(v27 + 24))(v17, v25, v27);
    sub_1000BB074();
    id v30 = v17;
    uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v32 = static os_log_type_t.default.getter();
    BOOL v33 = os_log_type_enabled(v31, v32);
    if ((v29 & 1) != 0)
    {
      if (v33)
      {
        uint64_t v34 = sub_10000AE10(12LL);
        uint64_t v35 = sub_10000AE10(32LL);
        uint64_t v54 = v35;
        unint64_t v36 = sub_1000BB05C(4.8149e-34);
        uint64_t v38 = sub_1000BB040(v36, v37);
        sub_1000BB024(v38);

        sub_10000ADB0();
        sub_1000BB0A4((void *)&_mh_execute_header, v39, v32, "Accepting %s");
        uint64_t v28 = 1LL;
        sub_1000BB088();
        sub_10000AD78(v35);
        sub_10000AD78(v34);

        sub_1000BB094();
      }

      else
      {

        sub_1000BB094();
        return 1LL;
      }
    }

    else
    {
      if (v33)
      {
        uint64_t v40 = sub_10000AE10(12LL);
        uint64_t v41 = sub_10000AE10(32LL);
        uint64_t v54 = v41;
        unint64_t v42 = sub_1000BB05C(4.8149e-34);
        uint64_t v44 = sub_1000BB040(v42, v43);
        sub_1000BB024(v44);

        sub_10000ADB0();
        sub_1000BB0A4((void *)&_mh_execute_header, v45, v32, "Rejecting %s");
        sub_1000BB088();
        sub_10000AD78(v41);
        sub_10000AD78(v40);
      }

      else
      {
      }

      (*(void (**)(char *, uint64_t))(v48 + 8))(v26, v47);
      return 0LL;
    }

    return v28;
  }

  else
  {
    __break(1u);
  }

  return result;
}

unint64_t sub_1000BA12C(void *a1)
{
  v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._uint64_t countAndFlagsBits = 0x72657320726F6620LL;
  v5._object = (void *)0xEE00222065636976LL;
  String.append(_:)(v5);
  v6._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)(v1 + 88) + 8LL))();
  uint64_t v7 = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v7);
  v8._uint64_t countAndFlagsBits = 34LL;
  v8._object = (void *)0xE100000000000000LL;
  String.append(_:)(v8);
  return 0xD000000000000018LL;
}

uint64_t sub_1000BA234(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = a3;
  id v6 = a4;
  uint64_t v7 = swift_retain();
  char v8 = sub_1000B9B9C(v7, v6);

  swift_release();
  return v8 & 1;
}

void sub_1000BA294()
{
}

void sub_1000BA2C8()
{
}

uint64_t sub_1000BA2DC()
{
  swift_release(*(void *)(v0 + 120));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_1000BA308()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for XPCListenerEntryPoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000C8B4(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for XPCListenerEntryPoint);
}

uint64_t sub_1000BA32C(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 1LL, &v4, a1 + 88);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000BA39C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_100133C9C);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000BAFDC;
  return sub_1000B99A4();
}

void sub_1000BA3E4(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v33[0] = type metadata accessor for Transcript();
  uint64_t v10 = sub_100008DB0((uint64_t *)&unk_100132590);
  uint64_t v12 = String.init<A>(describing:)(v33, v10);
  if (LNLogSubsystem)
  {
    uint64_t v13 = v11;
    uint64_t v14 = a2 + 16;
    uint64_t v15 = String.init(cString:)(LNLogSubsystem);
    uint64_t v17 = Logger.init(subsystem:category:)(v15, v16, v12, v13);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v29 = v6;
      uint64_t v30 = a3;
      uint64_t v20 = swift_slowAlloc(18LL, -1LL);
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      v33[0] = v21;
      *(_DWORD *)uint64_t v20 = 67109378;
      LODWORD(v31) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, (char *)&v31 + 4, v20 + 4, v20 + 8);
      *(_WORD *)(v20 + 8) = 2080;
      if (qword_100130120 != -1) {
        swift_once(&qword_100130120, sub_1000294AC);
      }
      uint64_t v23 = qword_100135238;
      unint64_t v22 = qword_100135240;
      swift_bridgeObjectRetain();
      uint64_t v31 = sub_10000DE60(v23, v22, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v20 + 10, v20 + 18);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "Invalidated XPC connection from PID %d for service %s",  (uint8_t *)v20,  0x12u);
      swift_arrayDestroy(v21, 1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v29);
      a3 = v30;
    }

    else
    {

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }

    swift_beginAccess(v14, v33, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v14);
    if (Strong)
    {
      uint64_t v25 = (void *)Strong;
      uint64_t v26 = a3 + 16;
      swift_beginAccess(v26, &v31, 0LL, 0LL);
      uint64_t v27 = (void *)swift_unknownObjectWeakLoadStrong(v26);
      if (v27)
      {
        uint64_t v28 = v27;
        sub_100028E4C(v27);

        uint64_t v25 = v28;
      }
    }
  }

  else
  {
    __break(1u);
  }

void sub_1000BA694(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v32[0] = type metadata accessor for SuggestedActionsService();
  uint64_t v10 = sub_100008DB0((uint64_t *)&unk_100132590);
  uint64_t v12 = String.init<A>(describing:)(v32, v10);
  if (LNLogSubsystem)
  {
    uint64_t v13 = v11;
    uint64_t v14 = a2 + 16;
    uint64_t v15 = String.init(cString:)(LNLogSubsystem);
    uint64_t v17 = Logger.init(subsystem:category:)(v15, v16, v12, v13);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v28 = v6;
      uint64_t v29 = a3;
      uint64_t v20 = swift_slowAlloc(18LL, -1LL);
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      v32[0] = v21;
      *(_DWORD *)uint64_t v20 = 67109378;
      LODWORD(v30) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, (char *)&v30 + 4, v20 + 4, v20 + 8);
      *(_WORD *)(v20 + 8) = 2080;
      if (qword_1001301D8 != -1) {
        swift_once(&qword_1001301D8, sub_100048BD0);
      }
      uint64_t v23 = qword_100135390;
      unint64_t v22 = *(void *)algn_100135398;
      swift_bridgeObjectRetain();
      uint64_t v30 = sub_10000DE60(v23, v22, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v20 + 10, v20 + 18);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "Invalidated XPC connection from PID %d for service %s",  (uint8_t *)v20,  0x12u);
      swift_arrayDestroy(v21, 1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v28);
      a3 = v29;
    }

    else
    {

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }

    swift_beginAccess(v14, v32, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v14);
    if (Strong)
    {
      uint64_t v25 = (void *)Strong;
      uint64_t v26 = a3 + 16;
      swift_beginAccess(v26, &v30, 0LL, 0LL);
      uint64_t v27 = (void *)swift_unknownObjectWeakLoadStrong(v26);
    }
  }

  else
  {
    __break(1u);
  }

void sub_1000BA938(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v32[0] = type metadata accessor for Registry(0LL);
  uint64_t v10 = sub_100008DB0((uint64_t *)&unk_100132590);
  uint64_t v12 = String.init<A>(describing:)(v32, v10);
  if (LNLogSubsystem)
  {
    uint64_t v13 = v11;
    uint64_t v14 = a2 + 16;
    uint64_t v15 = String.init(cString:)(LNLogSubsystem);
    uint64_t v17 = Logger.init(subsystem:category:)(v15, v16, v12, v13);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v28 = v6;
      uint64_t v29 = a3;
      uint64_t v20 = swift_slowAlloc(18LL, -1LL);
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      v32[0] = v21;
      *(_DWORD *)uint64_t v20 = 67109378;
      LODWORD(v30) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, (char *)&v30 + 4, v20 + 4, v20 + 8);
      *(_WORD *)(v20 + 8) = 2080;
      if (qword_100130340 != -1) {
        swift_once(&qword_100130340, sub_10009B364);
      }
      uint64_t v23 = qword_100135888;
      unint64_t v22 = qword_100135890;
      swift_bridgeObjectRetain();
      uint64_t v30 = sub_10000DE60(v23, v22, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v20 + 10, v20 + 18);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "Invalidated XPC connection from PID %d for service %s",  (uint8_t *)v20,  0x12u);
      swift_arrayDestroy(v21, 1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v28);
      a3 = v29;
    }

    else
    {

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }

    swift_beginAccess(v14, v32, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v14);
    if (Strong)
    {
      uint64_t v25 = (void *)Strong;
      uint64_t v26 = a3 + 16;
      swift_beginAccess(v26, &v30, 0LL, 0LL);
      uint64_t v27 = (void *)swift_unknownObjectWeakLoadStrong(v26);
    }
  }

  else
  {
    __break(1u);
  }

void sub_1000BABDC(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v32[0] = type metadata accessor for ExtensionService();
  uint64_t v10 = sub_100008DB0((uint64_t *)&unk_100132590);
  uint64_t v12 = String.init<A>(describing:)(v32, v10);
  if (LNLogSubsystem)
  {
    uint64_t v13 = v11;
    uint64_t v14 = a2 + 16;
    uint64_t v15 = String.init(cString:)(LNLogSubsystem);
    uint64_t v17 = Logger.init(subsystem:category:)(v15, v16, v12, v13);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v28 = v6;
      uint64_t v29 = a3;
      uint64_t v20 = swift_slowAlloc(18LL, -1LL);
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      v32[0] = v21;
      *(_DWORD *)uint64_t v20 = 67109378;
      LODWORD(v30) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, (char *)&v30 + 4, v20 + 4, v20 + 8);
      *(_WORD *)(v20 + 8) = 2080;
      if (qword_100130388 != -1) {
        swift_once(&qword_100130388, sub_1000BC228);
      }
      uint64_t v23 = qword_100135A78;
      unint64_t v22 = qword_100135A80;
      swift_bridgeObjectRetain();
      uint64_t v30 = sub_10000DE60(v23, v22, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v20 + 10, v20 + 18);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "Invalidated XPC connection from PID %d for service %s",  (uint8_t *)v20,  0x12u);
      swift_arrayDestroy(v21, 1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v28);
      a3 = v29;
    }

    else
    {

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }

    swift_beginAccess(v14, v32, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v14);
    if (Strong)
    {
      uint64_t v25 = (void *)Strong;
      uint64_t v26 = a3 + 16;
      swift_beginAccess(v26, &v30, 0LL, 0LL);
      uint64_t v27 = (void *)swift_unknownObjectWeakLoadStrong(v26);
    }
  }

  else
  {
    __break(1u);
  }

uint64_t sub_1000BAE80()
{
  return v0;
}

uint64_t sub_1000BAEAC()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for UncheckedConcurrentValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000C8B4(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UncheckedConcurrentValue);
}

uint64_t sub_1000BAEDC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1000BAF04()
{
}

uint64_t sub_1000BAF10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100096760(v0[56], v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000BAF20(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_1000BAF28(void *a1)
{
}

uint64_t sub_1000BAF44()
{
  uint64_t v1 = (void *)sub_10000E9B0((uint64_t)&unk_100133CE0);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  uint64_t v2 = (uint64_t (*)(void))sub_1000BB04C(v1, (uint64_t)sub_1000BAFDC, v4);
  return sub_10000C914(v2);
}

void sub_1000BAF84()
{
}

void sub_1000BAF94()
{
}

uint64_t sub_1000BAFA4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1000BAFD0()
{
}

uint64_t sub_1000BB00C(void *a1)
{
  return sub_1000B9854(a1) & 1;
}

uint64_t sub_1000BB024(uint64_t a1)
{
  *(void *)(v3 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 104, v3 - 96, v2, v1);
}

uint64_t sub_1000BB040(uint64_t a1, unint64_t a2)
{
  return sub_10000DE60(a1, a2, (uint64_t *)(v2 - 88));
}

uint64_t sub_1000BB04C@<X0>(void *a1@<X0>, uint64_t a2@<X8>, uint64_t a3)
{
  *a1 = v3;
  a1[1] = a2;
  return a3;
}

unint64_t sub_1000BB05C(float a1)
{
  *uint64_t v1 = a1;
  return sub_1000BA12C(v2);
}

uint64_t sub_1000BB074()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 152) + 8LL))(v1, v0);
}

uint64_t sub_1000BB088()
{
  return swift_arrayDestroy(v0, 1LL);
}

uint64_t sub_1000BB094()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 136) + 8LL))(v0, *(void *)(v1 - 144));
}

void sub_1000BB0A4(void *a1, uint64_t a2, os_log_type_t a3, const char *a4)
{
}

void sub_1000BB0B4()
{
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  if (!(v1 >> 62))
  {
    uint64_t v5 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    sub_1000119E4();
    if (v5) {
      goto LABEL_3;
    }
LABEL_14:
    sub_10001BC70();
    uint64_t v10 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8LL) + 0x10);
    while (1)
    {
      BOOL v11 = __OFSUB__(v4, v10);
      v4 -= v10;
      if (v11) {
        break;
      }
      if (!v5)
      {
LABEL_26:
        sub_1000BC0AC();
        goto LABEL_29;
      }

      sub_1000119E4();
      uint64_t v12 = 4LL;
      while (1)
      {
        id v13 = (v2 & 0xC000000000000001LL) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 - 4, v2)
            : sub_1000BC0C0();
        uint64_t v14 = v13;
        uint64_t v15 = v12 - 3;
        if (__OFADD__(v12 - 4, 1LL)) {
          break;
        }
        sub_1000BBDE8(v4);
        if (v0)
        {
          sub_10001BC70();

          swift_bridgeObjectRelease();
          goto LABEL_28;
        }

        sub_1000BC0AC();
        ++v12;
        if (v15 == v5)
        {
          sub_10001BC70();
          goto LABEL_26;
        }
      }

      __break(1u);
LABEL_31:
      swift_bridgeObjectRetain();
      uint64_t v10 = sub_100028060();
      swift_bridgeObjectRelease();
    }

    __break(1u);
    return;
  }

void sub_1000BB2A4( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v34 = a4 >> 1;
  int64_t v9 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    goto LABEL_19;
  }
  if (v9)
  {
    specialized ContiguousArray.reserveCapacity(_:)((a4 >> 1) - a3);
    if (v9 < 0)
    {
LABEL_20:
      __break(1u);
      return;
    }

    int64_t v11 = 0LL;
    while (1)
    {
      int64_t v12 = v11 + 1;
      if (__OFADD__(v11, 1LL)) {
        break;
      }
      if (a3 + v11 >= v34 || v11 >= v9) {
        goto LABEL_18;
      }
      id v14 = sub_1000BC0C0();
      id v15 = sub_1000BB5D0(v14);

      if (v8)
      {
        sub_1000BC070(v16, v17, v18, v19, v20, v21, v22, v23, v34, a5);
        swift_release();
        goto LABEL_16;
      }

      sub_1000BC0A4(v16);
      uint64_t v24 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v24);
      uint64_t v25 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v15);
      uint64_t v26 = sub_1000BC0B8(v25);
      ++v11;
      if (v12 == v9)
      {
        sub_1000BC070(v26, v27, v28, v29, v30, v31, v32, v33, v34, a5);
        goto LABEL_16;
      }
    }

    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  sub_1000BC070(a1, a2, a3, a4, (uint64_t)a5, a6, a7, a8, v34, a5);
LABEL_16:
  sub_10006C994();
}

uint64_t sub_1000BB3CC(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  unint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_1000BBF80(0LL, result, v3);
  if ((v4 & 1) != 0) {
    unint64_t v5 = v3;
  }
  else {
    unint64_t v5 = result;
  }
  if ((v5 & 0x8000000000000000LL) != 0) {
    goto LABEL_9;
  }
  if (v3 >= v5) {
    return a2;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1000BB438(uint64_t a1, unint64_t a2)
{
  return sub_1000BB44C(a1, a2, &qword_1001345C0, &OBJC_CLASS___LNAutoShortcutMetadata_ptr);
}

uint64_t sub_1000BB44C(uint64_t a1, unint64_t a2, unint64_t *a3, void *a4)
{
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    unint64_t v5 = a4;
    uint64_t v6 = a3;
    uint64_t v4 = a2;
    uint64_t v7 = a1;
    unint64_t v8 = a2 >> 62;
    if (!(a2 >> 62))
    {
      uint64_t v9 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      goto LABEL_4;
    }
  }

  sub_1000BC014();
  uint64_t v9 = sub_10006CA28();
  sub_10001198C();
LABEL_4:
  uint64_t result = sub_1000BBF80(0LL, v7, v9);
  if ((v11 & 1) != 0) {
    uint64_t v12 = v9;
  }
  else {
    uint64_t v12 = result;
  }
  if (v12 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }

  if (v8)
  {
    sub_1000BC014();
    uint64_t v14 = sub_10006CA28();
    uint64_t result = sub_10001198C();
    if (v14 < 0)
    {
LABEL_28:
      __break(1u);
      return result;
    }

    swift_bridgeObjectRetain(v4);
    uint64_t v13 = sub_10006CA28();
    uint64_t result = sub_10001198C();
  }

  else
  {
    uint64_t v13 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (v13 < v12)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  if ((v4 & 0xC000000000000001LL) != 0 && v12)
  {
    sub_10000A1A0(0LL, v6, v5);
    Swift::Int v15 = 0LL;
    do
    {
      Swift::Int v16 = v15 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v15);
      Swift::Int v15 = v16;
    }

    while (v12 != v16);
  }

  if (!v8) {
    return v4 & 0xFFFFFFFFFFFFFF8LL;
  }
  if (v4 < 0) {
    uint64_t v18 = v4;
  }
  else {
    uint64_t v18 = v4 & 0xFFFFFFFFFFFFFF8LL;
  }
  __n128 v19 = swift_bridgeObjectRetain(v4);
  uint64_t v17 = _CocoaArrayWrapper.subscript.getter(0LL, v12, v18, v19);
  swift_bridgeObjectRelease_n(v4, 2LL);
  return v17;
}

id sub_1000BB5D0(void *a1)
{
  uint64_t v2 = sub_100008DB0((uint64_t *)&unk_100132900);
  __chkstk_darwin(v2);
  uint64_t v79 = (uint64_t)&v77 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v77 - v5;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v78 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v77 - v11;
  __chkstk_darwin(v13);
  Swift::Int v15 = (char *)&v77 - v14;
  id v83 = [objc_allocWithZone(KVItemBuilder) init];
  id v16 = [a1 localizedPhrase];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  unint64_t v19 = v18;

  uint64_t v85 = v17;
  unint64_t v86 = v19;
  unint64_t v20 = sub_1000118E0();
  uint64_t v21 = StringProtocol.hash.getter(&type metadata for String, v20);
  swift_bridgeObjectRelease();
  uint64_t v82 = a1;
  id v22 = [a1 parameterIdentifier];
  uint64_t v80 = v8;
  if (v22)
  {
    uint64_t v23 = v22;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v22);

    uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v24(v6, v12, v7);
    sub_100009E60((uint64_t)v6, 0LL, 1LL, v7);
    if (sub_100009E6C((uint64_t)v6, 1LL, v7) != 1)
    {
      v24(v15, v6, v7);
      uint64_t v85 = 0x726F68736F747561LL;
      unint64_t v86 = 0xEF2F2F3A74756374LL;
      id v25 = [v81 actionIdentifier];
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      uint64_t v28 = v27;

      v29._uint64_t countAndFlagsBits = v26;
      v29._object = v28;
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      v30._uint64_t countAndFlagsBits = 35LL;
      v30._object = (void *)0xE100000000000000LL;
      String.append(_:)(v30);
      uint64_t v84 = v21;
      v31._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      String.append(_:)(v31);
      swift_bridgeObjectRelease();
      v32._uint64_t countAndFlagsBits = 35LL;
      v32._object = (void *)0xE100000000000000LL;
      String.append(_:)(v32);
      unint64_t v33 = sub_1000BBF3C();
      v34._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v33);
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v15, v7);
      goto LABEL_6;
    }
  }

  else
  {
    sub_100009E60((uint64_t)v6, 1LL, 1LL, v7);
  }

  sub_100009E78((uint64_t)v6);
  uint64_t v85 = 0x726F68736F747561LL;
  unint64_t v86 = 0xEF2F2F3A74756374LL;
  id v35 = [v81 actionIdentifier];
  uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  uint64_t v38 = v37;

  v39._uint64_t countAndFlagsBits = v36;
  v39._object = v38;
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  v40._uint64_t countAndFlagsBits = 35LL;
  v40._object = (void *)0xE100000000000000LL;
  String.append(_:)(v40);
  uint64_t v84 = v21;
  v41._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
LABEL_6:
  NSString v42 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v85 = 0LL;
  id v43 = v83;
  id v44 = [v83 setItemType:8 itemId:v42 error:&v85];

  id v45 = (id)v85;
  uint64_t v46 = v82;
  if (!v44)
  {
LABEL_19:
    id v58 = v45;
    id v53 = v45;
    goto LABEL_20;
  }

  id v47 = (id)v85;

  id v48 = [v46 basePhraseTemplate];
  uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
  uint64_t v51 = v50;

  uint64_t v85 = 0LL;
  id v52 = sub_100009C80(301LL, v49, v51, (uint64_t)&v85, v43);
  id v53 = (id)v85;
  if (!v52)
  {
    id v58 = v53;
LABEL_20:
    _convertNSErrorToError(_:)(v53);

    goto LABEL_21;
  }

  id v54 = [v46 localizedPhrase];
  uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
  uint64_t v57 = v56;

  uint64_t v85 = 0LL;
  id v58 = sub_100009C80(300LL, v55, v57, (uint64_t)&v85, v43);
  id v59 = (id)v85;
  if (!v58)
  {
    uint64_t v71 = v59;
    _convertNSErrorToError(_:)(v59);

LABEL_21:
    swift_willThrow(v72);

    return v58;
  }

  id v60 = [v46 parameterIdentifier];
  if (!v60)
  {
    uint64_t v64 = v79;
    sub_100009E60(v79, 1LL, 1LL, v7);
    goto LABEL_16;
  }

  uint64_t v61 = v60;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v60);

  uint64_t v62 = v80;
  uint64_t v63 = *(void (**)(uint64_t, char *, uint64_t))(v80 + 32);
  uint64_t v64 = v79;
  v63(v79, v12, v7);
  sub_100009E60(v64, 0LL, 1LL, v7);
  if (sub_100009E6C(v64, 1LL, v7) == 1)
  {
LABEL_16:
    sub_100009E78(v64);
    goto LABEL_17;
  }

  uint64_t v65 = v78;
  uint64_t v66 = ((uint64_t (*)(char *, uint64_t, uint64_t))v63)(v78, v64, v7);
  uint64_t v67 = UUID.uuidString.getter(v66);
  uint64_t v85 = 0LL;
  id v69 = sub_100009C80(302LL, v67, v68, (uint64_t)&v85, v43);
  id v70 = (id)v85;
  if (!v69)
  {
    id v58 = v70;
    _convertNSErrorToError(_:)(v70);

    swift_willThrow(v76);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v65, v7);
    return v58;
  }

  (*(void (**)(char *, uint64_t))(v62 + 8))(v65, v7);
LABEL_17:
  uint64_t v85 = 0LL;
  id v73 = [v43 buildItemWithError:&v85];
  id v45 = (id)v85;
  if (!v73) {
    goto LABEL_19;
  }
  id v58 = v73;
  id v74 = (id)v85;

  return v58;
}

#error "1000BBD40: call analysis failed (funcsize=81)"
#error "1000BBE9C: call analysis failed (funcsize=81)"
unint64_t sub_1000BBF3C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t result = qword_1001332E8;
  if (!qword_1001332E8)
  {
    unint64_t v1 = type metadata accessor for UUID(255LL);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_1001332E8);
  }

  return result;
}

uint64_t sub_1000BBF80(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }

  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2) {
      return 0LL;
    }
  }

  else if ((v3 & 0x8000000000000000LL) == 0 && v3 < (unint64_t)a2)
  {
    return 0LL;
  }

  BOOL v5 = __OFADD__(result, a2);
  result += a2;
  if (v5) {
    goto LABEL_14;
  }
  return result;
}

void sub_1000BBFCC( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t sub_1000BBFEC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)(a12 + 16));
}

uint64_t sub_1000BC000()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000BC014()
{
  return swift_bridgeObjectRetain(v0);
}

id sub_1000BC028()
{
  return v0;
}

uint64_t sub_1000BC03C()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v1, v0);
}

uint64_t sub_1000BC04C()
{
  return swift_unknownObjectRelease(v0);
}

  ;
}

void sub_1000BC070( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

id sub_1000BC078(void *a1)
{
  return [a1 *(SEL *)(v1 + 1872)];
}

id sub_1000BC084()
{
  return *(id *)(v0 + 8 * v1 + 32);
}

  ;
}

uint64_t sub_1000BC0A4(uint64_t a1)
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(a1);
}

void sub_1000BC0AC()
{
}

uint64_t sub_1000BC0B8(uint64_t a1)
{
  return specialized ContiguousArray._endMutation()(a1);
}

id sub_1000BC0C0()
{
  return *(id *)(v0 + 8 * v1);
}

uint64_t sub_1000BC0C8()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

uint64_t sub_1000BC0D4(uint64_t a1)
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, a1);
}

uint64_t sub_1000BC0E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008DB0(&qword_100130620);
  uint64_t v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0LL, 0LL);
  *uint64_t v6 = a2;
  return swift_continuation_throwingResumeWithError(a1, v5);
}

uint64_t sub_1000BC134(uint64_t a1, uint64_t a2)
{
  **(void **)(*(void *)(a1 + 64) + 4_swift_stdlib_reportUnimplementedInitializer("LinkDaemon.XPCListenerEntryPoint", 32LL, "init()", 6LL, 0LL) = a2;
  return swift_continuation_throwingResume();
}

uint64_t sub_1000BC148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void **)(*(void *)(a1 + 64) + 40LL);
  *uint64_t v4 = a2;
  v4[1] = a3;
  v4[2] = a4;
  return swift_continuation_throwingResume();
}

uint64_t sub_1000BC15C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008DB0(&qword_100131780);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for TaskPriority(0LL);
  sub_100009E60((uint64_t)v6, 1LL, 1LL, v7);
  uint64_t v8 = (void *)sub_100011A44((uint64_t)&unk_1001268E8);
  _OWORD v8[2] = 0LL;
  v8[3] = 0LL;
  v8[4] = a1;
  void v8[5] = a2;
  uint64_t v9 = (void *)sub_100011A44((uint64_t)&unk_100126910);
  void v9[2] = 0LL;
  v9[3] = 0LL;
  void v9[4] = &unk_100133DA0;
  v9[5] = v8;
  uint64_t v10 = sub_1000BCB54((uint64_t)v6, (uint64_t)&unk_100133DB0, (uint64_t)v9);
  return swift_release(v10);
}

uint64_t sub_1000BC228()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(LNDaemonExtensionMachServiceName);
  qword_100135A78 = result;
  unk_100135A80 = v1;
  return result;
}

uint64_t sub_1000BC254()
{
  if (qword_100130388 != -1) {
    swift_once(&qword_100130388, sub_1000BC228);
  }
  uint64_t v0 = qword_100135A78;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_1000BC2B0(uint64_t a1, uint64_t a2)
{
  v3[27] = a2;
  v3[28] = v2;
  v3[26] = a1;
  return swift_task_switch(sub_1000BC2CC, 0LL, 0LL);
}

uint64_t sub_1000BC2CC()
{
  uint64_t v2 = v0 + 23;
  if (sub_1000BC548(v0[26], v0[27]))
  {
    uint64_t v3 = v0 + 2;
    objc_opt_self(&OBJC_CLASS___LNExtensionMediator);
    NSString v4 = sub_1000BCE00();
    v0[31] = v4;
    v0[7] = v2;
    v0[2] = v0;
    v0[3] = sub_1000BC46C;
    v0[22] = sub_1000BCE34();
    v0[18] = _NSConcreteStackBlock;
    v0[19] = 0x40000000LL;
    uint64_t v5 = &unk_100126950;
  }

  else
  {
    uint64_t v3 = v0 + 10;
    objc_opt_self(&OBJC_CLASS___LNDaemonMediator);
    NSString v4 = sub_1000BCE00();
    v0[29] = v4;
    v0[15] = v2;
    v0[10] = v0;
    v0[11] = sub_1000BC3F8;
    v0[22] = sub_1000BCE34();
    v0[18] = _NSConcreteStackBlock;
    v0[19] = 0x40000000LL;
    uint64_t v5 = &unk_100126968;
  }

  v0[20] = sub_1000BC5A4;
  v0[21] = v5;
  [v1 getConnectionHostInterfaceForBundleIdentifier:v4 completionHandler:v0 + 18];
  return swift_continuation_await(v3);
}

uint64_t sub_1000BC3F8()
{
  *(void *)(v0 + 240) = *(void *)(v0 + 112);
  return sub_10000E998();
}

uint64_t sub_1000BC440()
{
  uint64_t v1 = sub_1000BCDE8();
  return sub_1000BCDC8(v1, v2, v3, v4);
}

uint64_t sub_1000BC46C()
{
  *(void *)(v0 + 256) = *(void *)(v0 + 48);
  return sub_10000E998();
}

uint64_t sub_1000BC4B4()
{
  uint64_t v1 = sub_1000BCDE8();
  return sub_1000BCDC8(v1, v2, v3, v4);
}

uint64_t sub_1000BC4E0(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 232);
  swift_willThrow(a1);

  return sub_1000BCDD8(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1000BC514(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 248);
  swift_willThrow(a1);

  return sub_1000BCDD8(*(uint64_t (**)(void))(v1 + 8));
}

BOOL sub_1000BC548(uint64_t a1, uint64_t a2)
{
  id v4 = sub_1000BC824(a1, a2);

  return v4 == 0LL;
}

uint64_t sub_1000BC5A4(uint64_t result, void *a2, void *a3, void *a4)
{
  uint64_t v4 = *(void *)(result + 32);
  if (a4) {
    return sub_1000BC0E4(v4, (uint64_t)a4);
  }
  if (a2)
  {
    id v6 = a2;
    id v7 = a3;
    uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a3);
    uint64_t v10 = v9;

    return sub_1000BC148(v4, (uint64_t)v6, v8, v10);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000BC694(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v8 = v7;
  v3[4] = v7;
  uint64_t v9 = dword_100133DCC;
  a3;
  uint64_t v10 = (void *)swift_task_alloc(v9);
  v3[5] = v10;
  *uint64_t v10 = v3;
  v10[1] = sub_1000BC720;
  return sub_1000BC2B0(v6, v8);
}

uint64_t sub_1000BC720(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(*v4 + 40);
  uint64_t v10 = *(void **)(*v4 + 16);
  uint64_t v11 = *v4;
  swift_task_dealloc(v9);

  swift_bridgeObjectRelease();
  uint64_t v12 = *(void (***)(void, void, void, void))(v11 + 24);
  if (v5)
  {
    uint64_t v13 = (void *)_convertErrorToNSError(_:)(v5);
    swift_errorRelease();
    ((void (**)(void, void, void, void *))v12)[2](v12, 0LL, 0LL, v13);

    _Block_release(v12);
  }

  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    ((void (**)(void, void *, Class, void))v12)[2](v12, a1, isa, 0LL);

    _Block_release(v12);
    sub_10000A1D8(a2, a3);
  }

  return (*(uint64_t (**)(void))(v11 + 8))();
}

id sub_1000BC824(uint64_t a1, uint64_t a2)
{
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v5 = [(id)swift_getObjCClassFromMetadata(v2) daemonRecordWithBundleIdentifier:v4];

  return v5;
}

uint64_t type metadata accessor for ExtensionService()
{
  return objc_opt_self(&OBJC_CLASS____TtC10LinkDaemon16ExtensionService);
}

uint64_t sub_1000BC8C8()
{
  return sub_1000BC254();
}

uint64_t sub_1000BC8DC()
{
  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000BC910()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  NSString v4 = (void *)v0[4];
  id v5 = (void *)swift_task_alloc(dword_100133D84);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *id v5 = v1;
  v5[1] = sub_10004D53C;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_100133D80 + dword_100133D80))(v2, v3, v4);
}

uint64_t sub_1000BC97C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  NSString v4 = (void *)swift_task_alloc(a3[1]);
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *NSString v4 = v3;
  v4[1] = sub_10004D734;
  return v6();
}

uint64_t sub_1000BC9D4()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  NSString v4 = (int *)v0[4];
  id v5 = (void *)swift_task_alloc(dword_100133D9C);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *id v5 = v1;
  v5[1] = sub_10004D734;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_100133D98 + dword_100133D98))(v2, v3, v4);
}

uint64_t sub_1000BCA4C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  id v5 = (void *)swift_task_alloc(a4[1]);
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *id v5 = v4;
  v5[1] = sub_10004D734;
  return v7();
}

uint64_t sub_1000BCAA4()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000BCAD0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_100133DAC);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10004D734;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100133DA8 + dword_100133DA8))( a1,  v4,  v5,  v6);
}

uint64_t sub_1000BCB54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = sub_100009E6C(a1, 1LL, v6);
  if ((_DWORD)v7 == 1)
  {
    sub_10000E7E8(a1);
    uint64_t v8 = 7168LL;
  }

  else
  {
    unsigned __int8 v9 = TaskPriority.rawValue.getter(v7);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    uint64_t v8 = v9 | 0x1C00LL;
  }

  uint64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    uint64_t v11 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v10);
    uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
    uint64_t v15 = v14;
    swift_unknownObjectRelease(v10);
  }

  else
  {
    uint64_t v13 = 0LL;
    uint64_t v15 = 0LL;
  }

  uint64_t v16 = swift_allocObject(&unk_100126938, 32LL, 7LL);
  *(void *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  if (v15 | v13)
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    uint64_t v17 = v19;
    v19[2] = v13;
    v19[3] = v15;
  }

  else
  {
    uint64_t v17 = 0LL;
  }

  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_100133DC0, v16);
}

uint64_t sub_1000BCC90(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10000C724;
  return v6(a1);
}

uint64_t sub_1000BCCF4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000BCD18(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_100133DBC);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100012AB0;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100133DB8 + dword_100133DB8))(a1, v4);
}

unint64_t sub_1000BCD88()
{
  unint64_t result = qword_100133DD8;
  if (!qword_100133DD8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___LNDaemonRecord);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100133DD8);
  }

  return result;
}

uint64_t sub_1000BCDC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_1000BCDD8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000BCDE8()
{
  return v0;
}

NSString sub_1000BCE00()
{
  return String._bridgeToObjectiveC()();
}

void sub_1000BCE10()
{
  uint64_t v2 = (void *)(v1 - 8);
  *uint64_t v2 = *v0;
  *uint64_t v2 = *v0;
}

void sub_1000BCE28(void *a1@<X8>)
{
}

uint64_t sub_1000BCE34()
{
  return swift_continuation_init(v0, 1LL);
}

#error "1000BCE7C: call analysis failed (funcsize=79)"
#error "1000BCFEC: call analysis failed (funcsize=87)"
#error "1000BD174: call analysis failed (funcsize=84)"
void sub_1000BD2B4()
{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void v25[21];
  void v26[21];
  _BYTE v27[168];
  void v28[22];
  void *v29;
  sub_10001DF28();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  Swift::String v29 = v7;
  if (qword_100130390 != -1) {
    swift_once(&qword_100130390, sub_1000BDEE8);
  }
  sub_10001DEBC(v28, &unk_100135A88);
  sub_10001D9AC(v28);
  if (qword_100130398 != -1) {
    swift_once(&qword_100130398, sub_1000BDF38);
  }
  sub_10001DECC((uint64_t)&qword_100135B30);
  v26[0] = v6;
  v26[1] = v4;
  == infix<A>(_:_:)();
  unsigned __int8 v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  sub_10001DEBC(v26, v28);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.filter(_:)( v9,  v11,  v13,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table,  (uint64_t)v27);
  sub_10001191C(v13);
  sub_10001191C(v11);
  sub_10001DAF0(v28);
  if ((v2 & 1) != 0)
  {
    sub_10001DEBC(v26, v27);
    if (qword_1001303B0 != -1) {
      swift_once(&qword_1001303B0, sub_1000BE058);
    }
    sub_10001DECC((uint64_t)&qword_100133DF8);
    v25[0] = 0LL;
    == infix<A>(_:_:)();
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    unint64_t v19 = v18;
    sub_10001DEBC(&v24, v26);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000BEDE4(v15, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, (uint64_t)v25);
    sub_10001191C(v19);
    sub_10001191C(v17);
    sub_10001DAF0(v26);
    sub_10001DEBC(v27, v25);
  }

  v26[3] = &type metadata for Table;
  v26[4] = &protocol witness table for Table;
  v26[0] = sub_100038A2C((uint64_t)&unk_1001269A8);
  sub_10001DEBC((void *)(v26[0] + 16LL), v27);
  unint64_t v20 = Connection.pluck(_:)(v26);
  id v22 = v21;
  sub_10000AC58(v26);
  if (!v0)
  {
    if (v20)
    {
      sub_1000BE1B8(v20, v22, v29);
      sub_10000AEE8();
      sub_10001BE7C();
    }

    else
    {
      uint64_t v23 = sub_10001C1D4();
      sub_100009E60((uint64_t)v29, 1LL, 1LL, v23);
    }
  }

  sub_10001DEE8();
}

void sub_1000BD558()
{
  uint64_t v1 = v0;
  if (qword_100130390 != -1) {
    swift_once(&qword_100130390, sub_1000BDEE8);
  }
  sub_10001DEBC(v23, &unk_100135A88);
  sub_10001D9AC(v23);
  if (qword_100130398 != -1) {
    swift_once(&qword_100130398, sub_1000BDF38);
  }
  uint64_t v2 = v1[1];
  v22[0] = *v1;
  v22[1] = v2;
  sub_10001BCF8();
  == infix<A>(_:_:)();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  sub_10001DEBC(v21, v23);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000BEDE4(v4, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, (uint64_t)v22);
  sub_10001191C(v8);
  sub_10001191C(v6);
  sub_10001DAF0(v23);
  sub_10001DEBC(v24, v22);
  uint64_t v9 = sub_100008DB0(&qword_1001323E0);
  v10._rawValue = (void *)swift_allocObject(v9, 192LL, 7LL);
  *((_OWORD *)v10._rawValue + 1) = xmmword_1000F57D0;
  if (qword_1001303A8 != -1) {
    swift_once(&qword_1001303A8, sub_1000BDFE8);
  }
  uint64_t v11 = qword_100133DE0;
  uint64_t v12 = *(void *)algn_100133DE8;
  uint64_t v13 = qword_100133DF0;
  uint64_t v14 = sub_10001C1D4();
  v21[0] = *(_OWORD *)((char *)v1 + *(int *)(v14 + 24));
  <- infix<A>(_:_:)( v11,  v12,  v13,  (uint64_t)v21,  (uint64_t)&type metadata for Data,  (uint64_t)&protocol witness table for Data);
  if (qword_1001303B0 != -1) {
    swift_once(&qword_1001303B0, sub_1000BE058);
  }
  uint64_t v15 = sub_10001DECC((uint64_t)&qword_100133DF8);
  *(void *)&v21[0] = *(void *)((char *)v1 + *(int *)(v14 + 28));
  <- infix<A>(_:_:)( v15,  v16,  v17,  (uint64_t)v21,  (uint64_t)&type metadata for Int,  (uint64_t)&protocol witness table for Int);
  sub_10001DEBC(v21, v24);
  AppIntents_SQLite::Update v25 = QueryType.update(_:)(v10);
  uint64_t countAndFlagsBits = v25.template._countAndFlagsBits;
  object = v25.template._object;
  rawValue = v25.bindings._rawValue;
  sub_10000AEE8();
  sub_10001DAF0(v24);
  v26.template._uint64_t countAndFlagsBits = countAndFlagsBits;
  v26.template._object = object;
  v26.bindings._rawValue = rawValue;
  Connection.run(_:)(v26);
  swift_bridgeObjectRelease();
  sub_10001BE7C();
  sub_10001DEE8();
}

void sub_1000BD818()
{
  uint64_t v38 = v0;
  uint64_t v2 = v1;
  uint64_t v3 = sub_100008DB0(&qword_100130BC0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100130390 != -1) {
    swift_once(&qword_100130390, sub_1000BDEE8);
  }
  sub_10001DEBC(v44, &unk_100135A88);
  sub_10001DEBC(v43, &unk_100135A88);
  sub_10001D9AC(v44);
  if (qword_100130398 != -1) {
    swift_once(&qword_100130398, sub_1000BDF38);
  }
  uint64_t v6 = sub_10001DECC((uint64_t)&qword_100135B30);
  uint64_t v7 = v2[1];
  v40[0] = *v2;
  v40[1] = v7;
  <- infix<A>(_:_:)( v6,  v8,  v9,  (uint64_t)v40,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String);
  uint64_t v10 = sub_100008DB0(&qword_1001323E0);
  uint64_t inited = swift_initStackObject(v10, &v41);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5FF0;
  uint64_t v37 = inited + 32;
  if (qword_1001303A0 != -1) {
    swift_once(&qword_1001303A0, sub_1000BDF94);
  }
  uint64_t v12 = qword_100135B58;
  uint64_t v35 = qword_100135B50;
  uint64_t v36 = qword_100135B48;
  uint64_t v13 = (int *)sub_10001C1D4();
  sub_100058CD4((uint64_t)v2 + v13[5], (uint64_t)v5);
  uint64_t v14 = type metadata accessor for URL(0LL);
  if (sub_100009E6C((uint64_t)v5, 1LL, v14) == 1)
  {
    sub_10001B60C((uint64_t)v5, &qword_100130BC0);
    uint64_t countAndFlagsBits = 0LL;
    object = 0LL;
  }

  else
  {
    Swift::String v17 = URL.path(percentEncoded:)(0);
    uint64_t countAndFlagsBits = v17._countAndFlagsBits;
    object = v17._object;
    (*(void (**)(char *, uint64_t))(*(void *)(v14 - 8) + 8LL))(v5, v14);
  }

  *(void *)&__int128 v39 = countAndFlagsBits;
  *((void *)&v39 + 1) = object;
  <- infix<A>(_:_:)( v36,  v35,  v12,  (uint64_t)&v39,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String);
  swift_bridgeObjectRelease();
  if (qword_1001303A8 != -1) {
    swift_once(&qword_1001303A8, sub_1000BDFE8);
  }
  uint64_t v18 = sub_10001DECC((uint64_t)&qword_100133DE0);
  __int128 v39 = *(_OWORD *)((char *)v2 + v13[6]);
  sub_1000BEDB0(v18, v19, v20, v21, (uint64_t)&type metadata for Data, (uint64_t)&protocol witness table for Data);
  if (qword_1001303B0 != -1) {
    swift_once(&qword_1001303B0, sub_1000BE058);
  }
  uint64_t v22 = sub_10001DECC((uint64_t)&qword_100133DF8);
  *(void *)&__int128 v39 = *(void *)((char *)v2 + v13[7]);
  sub_1000BEDB0(v22, v23, v24, v25, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
  if (qword_1001303B8 != -1) {
    swift_once(&qword_1001303B8, sub_1000BE150);
  }
  uint64_t v26 = sub_10001DECC((uint64_t)&qword_100135B60);
  *(void *)&__int128 v39 = *(void *)((char *)v2 + v13[8]);
  sub_1000BEDB0(v26, v27, v28, v29, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
  uint64_t v30 = QueryType.insert(_:_:)((uint64_t)v42);
  Swift::String v32 = v31;
  Swift::String v34 = v33;
  swift_setDeallocating(inited);
  sub_100058874();
  sub_10001DC30(v42);
  sub_10001DEBC(v40, v43);
  sub_10001DAF0(v40);
  v45.template._uint64_t countAndFlagsBits = v30;
  v45.template._object = v32;
  v45.bindings._rawValue = v34;
  Connection.run(_:)(v45);
  sub_10001BE7C();
  swift_bridgeObjectRelease();
  sub_10001DEE8();
}

void sub_1000BDBCC()
{
  uint64_t v1 = v0;
  if (qword_100130390 != -1) {
    swift_once(&qword_100130390, sub_1000BDEE8);
  }
  sub_10001DEBC(v13, &unk_100135A88);
  v12[0] = v1;
  sub_10001D9AC(v13);
  if (qword_100130398 != -1) {
    swift_once(&qword_100130398, sub_1000BDF38);
  }
  uint64_t v2 = *(void *)algn_100135B38;
  uint64_t v3 = qword_100135B40;
  sub_100008DB0((uint64_t *)&unk_100132780);
  sub_100026D98(&qword_100133E18, (uint64_t *)&unk_100132780, (uint64_t)&protocol conformance descriptor for [A]);
  sub_1000BED9C(v4, v5, v6, v7, v4);
  sub_1000BED8C();
  sub_10001DEBC(&v11, v13);
  sub_10001BD0C();
  sub_10001BCF8();
  sub_1000BED1C((uint64_t)v12);
  sub_10001191C(v3);
  sub_10001191C(v2);
  sub_10001DAF0(v13);
  sub_10001DEBC(v14, v12);
  sub_10001DEBC(v12, v14);
  AppIntents_SQLite::Delete v15 = QueryType.delete()();
  uint64_t countAndFlagsBits = v15.template._countAndFlagsBits;
  object = v15.template._object;
  rawValue = v15.bindings._rawValue;
  sub_10001DAF0(v14);
  v16.template._uint64_t countAndFlagsBits = countAndFlagsBits;
  v16.template._object = object;
  v16.bindings._rawValue = rawValue;
  Connection.run(_:)(v16);
  sub_10000AEE8();
  sub_10001BE7C();
  sub_10001DEE8();
}

uint64_t sub_1000BDD68()
{
  id v0 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v5, v2);
    swift_unknownObjectRelease(v2);
  }

  else
  {
    memset(v5, 0, sizeof(v5));
  }

  sub_10000A30C((uint64_t)v5, (uint64_t)v6, &qword_100130EA0);
  if (v7)
  {
  }

  else
  {
    sub_10001B60C((uint64_t)v6, &qword_100130EA0);
  }

  return 3LL;
}

uint64_t sub_1000BDE80()
{
  return sub_10000AF9C();
}

uint64_t sub_1000BDEA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100058CD4(v2 + *(int *)(a1 + 20), a2);
}

uint64_t sub_1000BDEB8()
{
  uint64_t v0 = sub_10000AF9C();
  sub_10000A280(v0, v1);
  return sub_10000AF9C();
}

void *sub_1000BDEE8()
{
  return memcpy(&unk_100135A88, __src, 0xA8uLL);
}

void sub_1000BDF38()
{
}

void sub_1000BDF94()
{
}

uint64_t sub_1000BDFE8()
{
  uint64_t v0 = sub_100008DB0((uint64_t *)&unk_1001323D0);
  sub_100026D98( &qword_100131118,  (uint64_t *)&unk_1001323D0,  (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000011LL, 0x80000001000FC0F0LL, v0, v1);
}

uint64_t sub_1000BE058()
{
  uint64_t v0 = sub_100008DB0(&qword_100131988);
  sub_100026D98( (unint64_t *)&qword_100133E10,  &qword_100131988,  (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000013LL, 0x80000001000FC130LL, v0, v1);
}

uint64_t sub_1000BE0C8()
{
  uint64_t v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[13]);
  }

  uint64_t v2 = v0[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    uint64_t v3 = v0[16];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v0[17]);
    }
  }

  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184LL, 7LL);
}

void sub_1000BE150()
{
}

uint64_t sub_1000BE1B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = sub_100008DB0(&qword_100130BC0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100130398 != -1) {
    swift_once(&qword_100130398, sub_1000BDF38);
  }
  Row.get<A>(_:)();
  uint64_t v11 = v27;
  uint64_t v10 = v28;
  if (qword_1001303A0 != -1) {
    swift_once(&qword_1001303A0, sub_1000BDF94);
  }
  Row.get<A>(_:)( qword_100135B48,  qword_100135B50,  qword_100135B58,  a1,  a2,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String,  v9,  v23,  v24,  v25,  v26,  (uint64_t)v27,  v28,  v29,  v30,  v31,  v32,  v33,  v34);
  uint64_t v13 = v27;
  uint64_t v12 = v28;
  if (qword_1001303A8 != -1) {
    swift_once(&qword_1001303A8, sub_1000BDFE8);
  }
  Row.get<A>(_:)();
  uint64_t v14 = v27;
  uint64_t v25 = v28;
  if (qword_1001303B0 != -1) {
    swift_once(&qword_1001303B0, sub_1000BE058);
  }
  Row.get<A>(_:)();
  uint64_t v24 = v27;
  if (qword_1001303B8 != -1) {
    swift_once(&qword_1001303B8, sub_1000BE150);
  }
  Row.get<A>(_:)();
  AppIntents_SQLite::Update v16 = v27;
  if (v12)
  {
    URL.init(fileURLWithPath:)(v13, v12);
    uint64_t v17 = type metadata accessor for URL(0LL);
    sub_100009E60((uint64_t)v8, 0LL, 1LL, v17);
    swift_bridgeObjectRelease(v12);
  }

  else
  {
    uint64_t v18 = type metadata accessor for URL(0LL);
    sub_100009E60((uint64_t)v8, 1LL, 1LL, v18);
  }

  uint64_t v19 = v24;
  *a3 = v11;
  a3[1] = v10;
  uint64_t v20 = (int *)type metadata accessor for LNBundleRecord(0LL);
  sub_10000A30C((uint64_t)v8, (uint64_t)a3 + v20[5], &qword_100130BC0);
  uint64_t v21 = (void *)((char *)a3 + v20[6]);
  uint64_t v22 = v25;
  void *v21 = v14;
  v21[1] = v22;
  *(void *)((char *)a3 + v20[7]) = v19;
  *(void *)((char *)a3 + v20[8]) = v16;
  return sub_100009E60((uint64_t)a3, 0LL, 1LL, (uint64_t)v20);
}

uint64_t type metadata accessor for LNBundleRecord(uint64_t a1)
{
  uint64_t result = qword_100133E78;
  if (!qword_100133E78) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LNBundleRecord);
  }
  return result;
}

uint64_t sub_1000BE560@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_1000BE1B8(a1, a2, a3);
}

uint64_t *sub_1000BE568(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL(0LL);
    swift_bridgeObjectRetain();
    if (sub_100009E6C((uint64_t)v10, 1LL, v11))
    {
      uint64_t v12 = sub_100008DB0(&qword_100130BC0);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
      sub_100009E60((uint64_t)v9, 0LL, 1LL, v11);
    }

    uint64_t v14 = a3[6];
    AppIntents_SQLite::Delete v15 = (uint64_t *)((char *)v4 + v14);
    AppIntents_SQLite::Update v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = *v16;
    unint64_t v18 = v16[1];
    sub_10000A280(*v16, v18);
    *AppIntents_SQLite::Delete v15 = v17;
    v15[1] = v18;
    uint64_t v19 = a3[8];
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)v4 + v19) = *(uint64_t *)((char *)a2 + v19);
  }

  return v4;
}

uint64_t sub_1000BE694(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for URL(0LL);
  return sub_10000A1D8(*(void *)(a1 + *(int *)(a2 + 24)), *(void *)(a1 + *(int *)(a2 + 24) + 8));
}

void *sub_1000BE70C(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL(0LL);
  swift_bridgeObjectRetain();
  if (sub_100009E6C((uint64_t)v9, 1LL, v10))
  {
    uint64_t v11 = sub_100008DB0(&qword_100130BC0);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
    sub_100009E60((uint64_t)v8, 0LL, 1LL, v10);
  }

  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  sub_10000A280(*v14, v16);
  *uint64_t v13 = v15;
  v13[1] = v16;
  uint64_t v17 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + v17) = *(void *)((char *)a2 + v17);
  return a1;
}

void *sub_1000BE80C(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL(0LL);
  int v10 = sub_100009E6C((uint64_t)v7, 1LL, v9);
  int v11 = sub_100009E6C((uint64_t)v8, 1LL, v9);
  if (!v10)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }

  if (v11)
  {
LABEL_6:
    uint64_t v13 = sub_100008DB0(&qword_100130BC0);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v7, v8, v9);
  sub_100009E60((uint64_t)v7, 0LL, 1LL, v9);
LABEL_7:
  uint64_t v14 = a3[6];
  uint64_t v15 = (void *)((char *)a1 + v14);
  unint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = *v16;
  unint64_t v18 = v16[1];
  sub_10000A280(*v16, v18);
  uint64_t v19 = *v15;
  unint64_t v20 = v15[1];
  *uint64_t v15 = v17;
  v15[1] = v18;
  sub_10000A1D8(v19, v20);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  return a1;
}

_OWORD *sub_1000BE970(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL(0LL);
  if (sub_100009E6C((uint64_t)v8, 1LL, v9))
  {
    uint64_t v10 = sub_100008DB0(&qword_100130BC0);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
    sub_100009E60((uint64_t)v7, 0LL, 1LL, v9);
  }

  uint64_t v11 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  return a1;
}

void *sub_1000BEA4C(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL(0LL);
  int v11 = sub_100009E6C((uint64_t)v8, 1LL, v10);
  int v12 = sub_100009E6C((uint64_t)v9, 1LL, v10);
  if (!v11)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }

  if (v12)
  {
LABEL_6:
    uint64_t v14 = sub_100008DB0(&qword_100130BC0);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  sub_100009E60((uint64_t)v8, 0LL, 1LL, v10);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = *(void *)((char *)a1 + v15);
  unint64_t v17 = *(void *)((char *)a1 + v15 + 8);
  *(_OWORD *)((char *)a1 + v15) = *(_OWORD *)((char *)a2 + v15);
  sub_10000A1D8(v16, v17);
  uint64_t v18 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  return a1;
}

uint64_t sub_1000BEB8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BEB98);
}

uint64_t sub_1000BEB98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(sub_100075674(v3, v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_100008DB0(&qword_100130BC0);
    return sub_100009E6C(a1 + *(int *)(a3 + 20), a2, v8);
  }

uint64_t sub_1000BEC10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BEC1C);
}

uint64_t sub_1000BEC1C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_100008DB0(&qword_100130BC0);
    return sub_100009E60(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }

  return result;
}

void sub_1000BEC8C(uint64_t a1)
{
  v4[0] = &unk_1000F76B0;
  sub_100038798(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    v4[2] = &unk_1000F76C8;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    void v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
  }

uint64_t sub_1000BED1C@<X0>(uint64_t a1@<X8>)
{
  return QueryType.filter(_:)(v1, v2, v3, v4, v5, a1);
}

  ;
}

void sub_1000BED50()
{
}

uint64_t sub_1000BED68( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30)
{
  return sub_10000AC58(&a30);
}

uint64_t sub_1000BED7C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30)
{
  return Connection.prepareRowIterator(_:)(&a30);
}

  ;
}

void sub_1000BED9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_1000BEDB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

uint64_t sub_1000BEDBC()
{
  return swift_retain(v0);
}

  ;
}

uint64_t sub_1000BEDE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return QueryType.filter(_:)(a1, v4, v5, a2, a3, a4);
}

void *sub_1000BEDF0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35)
{
  return sub_10001DAF0(&a35);
}

void *sub_1000BEDF8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35)
{
  return sub_10001D9AC(&a35);
}

uint64_t sub_1000BEE00(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return ExpressionType.init(_:)(a1, a2, v4, a4);
}

void sub_1000BEE08(unint64_t *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1000BEE10()
{
  return sub_100008DB0(v0);
}

id sub_1000BEE18(void *a1, uint64_t a2)
{
  id v4 = [a1 action];
  id v5 = [v4 parameters];

  uint64_t v6 = sub_10000A1A0(0LL, &qword_1001309A8, &OBJC_CLASS___LNProperty_ptr);
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  unint64_t v107 = v7;
  id v8 = sub_1000C02B0();
  id v9 = [v8 identifier];

  uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v11 = v10;

  id v12 = sub_1000C02B0();
  char v91 = [v12 openAppWhenRun];

  id v13 = sub_1000C02B0();
  uint64_t v90 = sub_1000C0228(v13);
  uint64_t v15 = v14;
  uint64_t v17 = *(void *)(a2 + 72);
  unint64_t v16 = *(void *)(a2 + 80);
  uint64_t v98 = a2;
  sub_10001BCF8();
  id v18 = [a1 identifiersByTypeMap];
  id v19 = (id)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v18,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);

  uint64_t v103 = v17;
  unint64_t v104 = v16;
  uint64_t v20 = sub_1000BF974( (uint64_t)v19,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_1000C0294,  (uint64_t)v102);
  sub_10001BC70();
  unint64_t v21 = *(void *)(v20 + 16);
  if (v21 >= 2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000ADB0();
    swift_bridgeObjectRelease();
    if (qword_1001302D0 != -1) {
      goto LABEL_122;
    }
    goto LABEL_3;
  }

  uint64_t v97 = v15;
  uint64_t v95 = v11;
  if (!v21)
  {
    swift_release();
    swift_bridgeObjectRelease();
    sub_10000ADB0();
    swift_bridgeObjectRelease();
    if (qword_1001302D0 != -1) {
      swift_once(&qword_1001302D0, sub_100088800);
    }
    uint64_t v82 = type metadata accessor for Logger(0LL);
    sub_100008D98(v82, (uint64_t)qword_100135768);
    uint64_t v83 = sub_10001BCF8();
    uint64_t v84 = (os_log_s *)Logger.logObject.getter(v83);
    os_log_type_t v85 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v84, v85))
    {
      unint64_t v86 = (uint8_t *)sub_10000AE10(12LL);
      uint64_t v87 = sub_10000AE10(32LL);
      v106[0] = v87;
      *(_DWORD *)unint64_t v86 = 136315138;
      sub_10001BCF8();
      uint64_t v105 = sub_10000DE60(v17, v16, v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106, v86 + 4, v86 + 12);
      swift_bridgeObjectRelease_n(v16, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v84, v85, "Cannot find parameter of type %s to bind value", v86, 0xCu);
      swift_arrayDestroy(v87, 1LL);
      sub_10000AD78(v87);
      sub_10000AD78((uint64_t)v86);
    }

    else
    {

      swift_bridgeObjectRelease_n(v16, 2LL);
    }

    id v27 = sub_1000C02B0();
    return v27;
  }

  uint64_t v96 = v20;
  swift_bridgeObjectRelease();
  uint64_t v29 = v11;
  uint64_t v28 = v20;
  int64_t v30 = 0LL;
  uint64_t v93 = v20 + 64;
  uint64_t v31 = 1LL << *(_BYTE *)(v20 + 32);
  uint64_t v32 = -1LL;
  if (v31 < 64) {
    uint64_t v32 = ~(-1LL << v31);
  }
  unint64_t v33 = v32 & *(void *)(v20 + 64);
  int64_t v94 = (unint64_t)(v31 + 63) >> 6;
  uint64_t v34 = v15;
  if (!v33) {
    goto LABEL_11;
  }
LABEL_10:
  unint64_t v35 = __clz(__rbit64(v33));
  uint64_t v36 = (v33 - 1) & v33;
  for (unint64_t i = v35 | (v30 << 6); ; unint64_t i = __clz(__rbit64(v39)) + (v30 << 6))
  {
    unint64_t v99 = v36;
    int64_t v100 = v30;
    uint64_t v41 = (uint64_t *)(*(void *)(v28 + 48) + 16 * i);
    uint64_t v42 = v41[1];
    uint64_t v101 = *v41;
    unint64_t v43 = v107;
    if (v107 >> 62)
    {
      if ((v107 & 0x8000000000000000LL) != 0LL) {
        id v19 = (id)v107;
      }
      else {
        id v19 = (id)(v107 & 0xFFFFFFFFFFFFFF8LL);
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v44 = _CocoaArrayWrapper.endIndex.getter(v19);
      if (!v44)
      {
LABEL_86:
        sub_10000ADB0();
LABEL_87:
        if (v43 >> 62)
        {
          sub_1000C029C();
          uint64_t v45 = sub_100011A50();
          sub_10000ADB0();
        }

        else
        {
          uint64_t v45 = *(void *)((v43 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        }

        goto LABEL_89;
      }
    }

    else
    {
      uint64_t v44 = *(void *)((v107 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v44) {
        goto LABEL_86;
      }
    }

    uint64_t v45 = 0LL;
    uint64_t v46 = 5LL;
    while (1)
    {
      id v47 = (v43 & 0xC000000000000001LL) != 0 ? (id)sub_1000C02D0(v45) : sub_1000C02E4();
      id v48 = v47;
      static String._unconditionallyBridgeFromObjectiveC(_:)([v47 identifier]);
      sub_1000C02D8();
      if (v11 == v101 && v19 == (id)v42) {
        break;
      }
      char v52 = sub_1000C02BC(v49, v50, v101);

      sub_10001BC70();
      if ((v52 & 1) != 0) {
        goto LABEL_40;
      }
      uint64_t v53 = v45 + 1;
      if (__OFADD__(v45, 1LL))
      {
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
        goto LABEL_112;
      }

      ++v45;
      ++v46;
      if (v53 == v44)
      {
        sub_10000ADB0();
        unint64_t v43 = v107;
        uint64_t v29 = v95;
        goto LABEL_87;
      }
    }

    sub_10000ADB0();

LABEL_40:
    sub_10000ADB0();
    uint64_t v11 = v45 + 1;
    uint64_t v29 = v95;
    if (__OFADD__(v45, 1LL)) {
      goto LABEL_119;
    }
    unint64_t v43 = v107;
    if (v107 >> 62)
    {
      sub_1000C029C();
      uint64_t v54 = sub_100011A50();
      sub_10000ADB0();
    }

    else
    {
      uint64_t v54 = *(void *)((v107 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    while (v11 != v54)
    {
      unint64_t v55 = v46 - 4;
      if ((v43 & 0xC000000000000001LL) != 0)
      {
        id v56 = (id)sub_1000C02D0(v46 - 4);
      }

      else
      {
        if ((v55 & 0x8000000000000000LL) != 0) {
          goto LABEL_108;
        }
        if (v55 >= *(void *)((v43 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
          goto LABEL_109;
        }
        id v56 = *(id *)(v43 + 8 * v46);
      }

      uint64_t v57 = v56;
      static String._unconditionallyBridgeFromObjectiveC(_:)([v56 identifier]);
      sub_1000C02D8();
      if (v11 == v101 && v54 == v42)
      {

        swift_bridgeObjectRelease();
      }

      else
      {
        char v61 = sub_1000C02BC(v58, v59, v101);

        sub_10001BC70();
        if ((v61 & 1) == 0)
        {
          if (v55 != v45)
          {
            uint64_t v62 = v107;
            if ((v107 & 0xC000000000000001LL) != 0)
            {
              uint64_t v65 = sub_1000C02D0(v45);
              id v66 = (id)sub_1000C02D0(v46 - 4);
            }

            else
            {
              if (v45 < 0) {
                goto LABEL_113;
              }
              unint64_t v63 = *(void *)((v107 & 0xFFFFFFFFFFFFF8LL) + 0x10);
              if (v45 >= v63) {
                goto LABEL_114;
              }
              id v64 = sub_1000C02E4();
              if ((v55 & 0x8000000000000000LL) != 0) {
                goto LABEL_115;
              }
              if (v55 >= v63) {
                goto LABEL_116;
              }
              uint64_t v65 = (uint64_t)v64;
              id v66 = *(id *)(v62 + 8 * v46);
            }

            id v67 = v66;
            if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v62)
              || v62 < 0
              || (v62 & 0x4000000000000000LL) != 0)
            {
              uint64_t v62 = sub_1000B1240(v62);
              unint64_t v107 = v62;
            }

            uint64_t v68 = *(void **)((v62 & 0xFFFFFFFFFFFFFF8LL) + 8 * v45 + 0x20);
            *(void *)((v62 & 0xFFFFFFFFFFFFFF8LL) + 8 * v45 + 0x20) = v67;

            specialized Array._endMutation()(v69);
            uint64_t v70 = v107;
            if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v107)
              || v70 < 0
              || (v70 & 0x4000000000000000LL) != 0)
            {
              uint64_t v70 = sub_1000B1240(v70);
              unint64_t v107 = v70;
            }

            if ((v55 & 0x8000000000000000LL) != 0) {
              goto LABEL_117;
            }
            uint64_t v71 = v70 & 0xFFFFFFFFFFFFFF8LL;
            if (v55 >= *(void *)((v70 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
              goto LABEL_118;
            }
            uint64_t v72 = *(void **)(v71 + 8 * v46);
            *(void *)(v71 + 8 * v46) = v65;

            specialized Array._endMutation()(v73);
          }

          if (__OFADD__(v45++, 1LL)) {
            goto LABEL_111;
          }
        }
      }

      uint64_t v11 = v46 - 3;
      if (__OFADD__(v55, 1LL)) {
        goto LABEL_110;
      }
      unint64_t v43 = v107;
      if (v107 >> 62)
      {
        sub_1000C029C();
        uint64_t v54 = sub_100011A50();
        sub_10000ADB0();
      }

      else
      {
        uint64_t v54 = *(void *)((v107 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }

      ++v46;
    }

LABEL_89:
    if (v43 >> 62)
    {
      sub_1000C029C();
      uint64_t v75 = sub_100011A50();
      sub_10000ADB0();
    }

    else
    {
      uint64_t v75 = *(void *)((v43 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    if (v75 < v45)
    {
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
      goto LABEL_121;
    }

    sub_1000B0990();
    uint64_t v76 = *(void **)(v98 + 88);
    id v77 = objc_allocWithZone(&OBJC_CLASS___LNProperty);
    id v78 = v76;
    id v19 = sub_1000BF7D0(v101, v42, v76);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    unint64_t v80 = *(void *)((v107 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v79 = *(void *)((v107 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v80 >= v79 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1, v80 + 1, 1LL);
    }
    uint64_t v81 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v80, v19);
    specialized Array._endMutation()(v81);

    uint64_t v28 = v96;
    uint64_t v34 = v97;
    unint64_t v33 = v99;
    int64_t v30 = v100;
    if (v99) {
      goto LABEL_10;
    }
LABEL_11:
    int64_t v38 = v30 + 1;
    if (__OFADD__(v30, 1LL)) {
      goto LABEL_120;
    }
    if (v38 >= v94) {
      goto LABEL_103;
    }
    unint64_t v39 = *(void *)(v93 + 8 * v38);
    ++v30;
    if (!v39)
    {
      int64_t v30 = v38 + 1;
      if (v38 + 1 >= v94) {
        goto LABEL_103;
      }
      unint64_t v39 = *(void *)(v93 + 8 * v30);
      if (!v39)
      {
        int64_t v30 = v38 + 2;
        if (v38 + 2 >= v94) {
          goto LABEL_103;
        }
        unint64_t v39 = *(void *)(v93 + 8 * v30);
        if (!v39) {
          break;
        }
      }
    }

LABEL_121:
  __break(1u);
LABEL_122:
  swift_once(&qword_1001302D0, sub_100088800);
LABEL_3:
  uint64_t v22 = type metadata accessor for Logger(0LL);
  uint64_t v23 = sub_100008D98(v22, (uint64_t)qword_100135768);
  uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)sub_10000AE10(2LL);
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "Cannot support matching of the same parameter type more than once",  v26,  2u);
    sub_10000AD78((uint64_t)v26);
  }

  id v27 = sub_1000C02B0();
  return v27;
}

uint64_t sub_1000BF7A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a3 == a5 && a4 == a6) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(a3, a4, a5, a6, 0LL);
  }
}

id sub_1000BF7D0(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v7 = [v3 initWithIdentifier:v6 value:a3];

  return v7;
}

id sub_1000BF830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6, void *a7)
{
  id v8 = v7;
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a4)
  {
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v14 = 0LL;
  }

  sub_10000A1A0(0LL, (unint64_t *)&qword_100130BA0, &OBJC_CLASS___LNSystemProtocol_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10000A1A0(0LL, &qword_1001309A8, &OBJC_CLASS___LNProperty_ptr);
  Class v16 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v17 = [v8 initWithIdentifier:v13 mangledTypeName:v14 openAppWhenRun:a5 & 1 outputFlags:a6 outputType:a7 systemProtocols:isa parameters:v16];

  return v17;
}

uint64_t sub_1000BF974( uint64_t isStackAllocationSafe, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, __n128), uint64_t a3)
{
  uint64_t v6 = isStackAllocationSafe;
  char v7 = *(_BYTE *)(isStackAllocationSafe + 32);
  unsigned int v8 = v7 & 0x3F;
  unint64_t v9 = (1LL << v7) + 63;
  uint64_t v10 = v9 >> 6;
  uint64_t v11 = 8 * (v9 >> 6);
  if (v8 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v9 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    id v12 = (uint64_t *)((char *)&v16 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0LL));
    sub_100017CAC(0LL, v10, v12);
    uint64_t v13 = sub_1000BFAF0((uint64_t)v12, v10, v6, a2);
    if (v3) {
      swift_willThrow(v13);
    }
    else {
      return v13;
    }
  }

  else
  {
    NSString v14 = (void *)swift_slowAlloc(v11, -1LL);
    sub_100017CAC(0LL, v10, v14);
    a3 = sub_1000BFAF0((uint64_t)v14, v10, v6, a2);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  return a3;
}

uint64_t sub_1000BFAF0( uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))
{
  uint64_t v24 = (unint64_t *)result;
  uint64_t v25 = 0LL;
  int64_t v6 = 0LL;
  uint64_t v7 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v27 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v10 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v11 = v10 | (v6 << 6);
      goto LABEL_20;
    }

    int64_t v12 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v12 >= v27) {
      return sub_1000BFF7C(v24, a2, v25, a3);
    }
    unint64_t v13 = *(void *)(v26 + 8 * v12);
    ++v6;
    if (!v13)
    {
      int64_t v6 = v12 + 1;
      if (v12 + 1 >= v27) {
        return sub_1000BFF7C(v24, a2, v25, a3);
      }
      unint64_t v13 = *(void *)(v26 + 8 * v6);
      if (!v13)
      {
        int64_t v6 = v12 + 2;
        if (v12 + 2 >= v27) {
          return sub_1000BFF7C(v24, a2, v25, a3);
        }
        unint64_t v13 = *(void *)(v26 + 8 * v6);
        if (!v13) {
          break;
        }
      }
    }

Swift::Int sub_1000BFCF0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }

  sub_100008DB0(&qword_100133EC0);
  Swift::Int result = static _DictionaryStorage.allocate(capacity:)(v5);
  Swift::Int v9 = result;
  unint64_t v33 = a1;
  uint64_t v34 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0LL;
  Swift::Int v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }

    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1LL)) {
        goto LABEL_40;
      }
      if (v15 >= v34) {
        return v9;
      }
      unint64_t v16 = v33[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= v34) {
          return v9;
        }
        unint64_t v16 = v33[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= v34) {
            return v9;
          }
          unint64_t v16 = v33[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= v34) {
              return v9;
            }
            unint64_t v16 = v33[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1LL)) {
                  goto LABEL_41;
                }
                if (v11 >= v34) {
                  return v9;
                }
                unint64_t v16 = v33[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v11 = v17;
          }
        }
      }

Swift::Int sub_1000BFF7C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }

  sub_100008DB0(&qword_100132A48);
  Swift::Int result = static _DictionaryStorage.allocate(capacity:)(v5);
  Swift::Int v9 = result;
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0LL;
  Swift::Int v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v39 = v11;
      unint64_t v14 = v13 | (v11 << 6);
    }

    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1LL)) {
        goto LABEL_40;
      }
      if (v15 >= v38) {
        return v9;
      }
      unint64_t v16 = v37[v15];
      uint64_t v17 = v11 + 1;
      if (!v16)
      {
        uint64_t v17 = v11 + 2;
        if (v11 + 2 >= v38) {
          return v9;
        }
        unint64_t v16 = v37[v17];
        if (!v16)
        {
          uint64_t v17 = v11 + 3;
          if (v11 + 3 >= v38) {
            return v9;
          }
          unint64_t v16 = v37[v17];
          if (!v16)
          {
            uint64_t v18 = v11 + 4;
            if (v11 + 4 >= v38) {
              return v9;
            }
            unint64_t v16 = v37[v18];
            if (!v16)
            {
              while (1)
              {
                uint64_t v17 = v18 + 1;
                if (__OFADD__(v18, 1LL)) {
                  goto LABEL_41;
                }
                if (v17 >= v38) {
                  return v9;
                }
                unint64_t v16 = v37[v17];
                ++v18;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v17 = v11 + 4;
          }
        }
      }

uint64_t sub_1000C0228(void *a1)
{
  id v2 = [a1 mangledTypeName];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t sub_1000C0294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BF7A4(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24));
}

uint64_t sub_1000C029C()
{
  return swift_bridgeObjectRetain(v0);
}

id sub_1000C02B0()
{
  return [v0 *(SEL *)(v1 + 608)];
}

uint64_t sub_1000C02BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v3, a3, v5, 0LL);
}

uint64_t sub_1000C02D0(uint64_t a1)
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(a1, v1);
}

void sub_1000C02D8()
{
}

id sub_1000C02E4()
{
  return *(id *)(v0 + 8 * v1 + 32);
}

void sub_1000C02F0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (qword_1001303C0 != -1) {
    swift_once(&qword_1001303C0, sub_1000C0778);
  }
  sub_10001DEBC(v25, &unk_100135B78);
  sub_10001D9AC(v25);
  if (qword_1001303C8 != -1) {
    swift_once(&qword_1001303C8, sub_1000C07CC);
  }
  v22[0] = a1;
  v22[1] = a2;
  == infix<A>(_:_:)();
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  sub_10001DEBC(v21, v25);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.filter(_:)( v8,  v10,  v12,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table,  (uint64_t)v22);
  swift_bridgeObjectRelease_n(v12, 2LL);
  swift_bridgeObjectRelease_n(v10, 2LL);
  sub_10001DAF0(v25);
  sub_10001DEBC(v26, v22);
  v22[3] = &type metadata for Table;
  void v22[4] = &protocol witness table for Table;
  v22[0] = swift_allocObject(&unk_1001269D0, 184LL, 7LL);
  sub_10001DEBC((void *)(v22[0] + 16LL), v26);
  uint64_t v13 = Connection.pluck(_:)(v22);
  uint64_t v15 = v14;
  sub_10000AC58(v22);
  if (!v3)
  {
    if (v13)
    {
      sub_1000C0904(v13, v15, (uint64_t *)v23);
      __int128 v19 = v23[1];
      __int128 v20 = v23[0];
      uint64_t v16 = v24;
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v13);
      __int128 v18 = v19;
      __int128 v17 = v20;
    }

    else
    {
      uint64_t v16 = 0LL;
      __int128 v17 = 0uLL;
      __int128 v18 = 0uLL;
    }

    *(_OWORD *)a3 = v17;
    *(_OWORD *)(a3 + swift_unknownObjectWeakDestroy(v0 + 16) = v18;
    *(void *)(a3 + 3sub_100096760(v0[56], v0 + 2) = v16;
  }

  sub_10001DEE8();
}

void sub_1000C04FC(__int128 *a1)
{
  if (qword_1001303C0 != -1) {
    swift_once(&qword_1001303C0, sub_1000C0778);
  }
  sub_10001DEBC(v17, &unk_100135B78);
  sub_10001DEBC(v15, &unk_100135B78);
  sub_10001D9AC(v17);
  if (qword_1001303C8 != -1) {
    swift_once(&qword_1001303C8, sub_1000C07CC);
  }
  __int128 v13 = *a1;
  <- infix<A>(_:_:)( qword_100135C20,  *(uint64_t *)algn_100135C28,  qword_100135C30,  (uint64_t)&v13,  (uint64_t)type metadata for String,  (uint64_t)&protocol witness table for String);
  uint64_t v2 = sub_100008DB0(&qword_1001323E0);
  uint64_t inited = swift_initStackObject(v2, &v12);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
  if (qword_1001303D0 != -1) {
    swift_once(&qword_1001303D0, sub_1000C0834);
  }
  uint64_t v4 = qword_100135C38;
  uint64_t v5 = unk_100135C40;
  uint64_t v6 = qword_100135C48;
  sub_100088714((uint64_t)(a1 + 1), (uint64_t)v16);
  sub_100088714((uint64_t)v16, (uint64_t)&v13);
  sub_10001B4C8((uint64_t)v16);
  <- infix<A>(_:_:)( v4,  v5,  v6,  (uint64_t)&v13,  (uint64_t)type metadata for String,  (uint64_t)&protocol witness table for String);
  sub_100025F44((uint64_t)v16);
  if (qword_1001303D8 != -1) {
    swift_once(&qword_1001303D8, sub_1000C089C);
  }
  *(void *)&__int128 v13 = *((void *)a1 + 4);
  <- infix<A>(_:_:)( qword_100135C50,  *(uint64_t *)algn_100135C58,  qword_100135C60,  (uint64_t)&v13,  (uint64_t)&type metadata for Int,  (uint64_t)&protocol witness table for Int);
  uint64_t v7 = QueryType.insert(_:_:)((uint64_t)v14);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  swift_setDeallocating(inited);
  sub_100058874();
  sub_10001DC30(v14);
  sub_10001DEBC(v18, v15);
  sub_10001DAF0(v18);
  v19.template._uint64_t countAndFlagsBits = v7;
  v19.template._object = v9;
  v19.bindings._rawValue = v11;
  Connection.run(_:)(v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001DEE8();
}

void *sub_1000C0778()
{
  return memcpy(&unk_100135B78, __src, 0xA8uLL);
}

uint64_t sub_1000C07CC()
{
  uint64_t v0 = sub_100008DB0((uint64_t *)&unk_1001323C0);
  uint64_t v1 = sub_10008864C((unint64_t *)&qword_100131110, (uint64_t *)&unk_1001323C0);
  return ExpressionType.init(_:)(0xD000000000000010LL, 0x80000001000F96E0LL, v0, v1);
}

uint64_t sub_1000C0834()
{
  uint64_t v0 = sub_100008DB0(&qword_100131138);
  uint64_t v1 = sub_10008864C(&qword_100131140, &qword_100131138);
  return ExpressionType.init(_:)(0xD00000000000001ELL, 0x80000001000FC170LL, v0, v1);
}

uint64_t sub_1000C089C()
{
  uint64_t v0 = sub_100008DB0(&qword_100131988);
  uint64_t v1 = sub_10008864C((unint64_t *)&qword_100133E10, &qword_100131988);
  return ExpressionType.init(_:)(0xD000000000000011LL, 0x80000001000FC150LL, v0, v1);
}

void sub_1000C0904(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (qword_1001303C8 != -1) {
    swift_once(&qword_1001303C8, sub_1000C07CC);
  }
  Row.get<A>(_:)();
  uint64_t v8 = v11;
  uint64_t v7 = v13;
  if (qword_1001303D0 != -1) {
    swift_once(&qword_1001303D0, sub_1000C0834);
  }
  Row.get<A>(_:)( qword_100135C38,  unk_100135C40,  qword_100135C48,  a1,  a2,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String,  v6,  v9,  v10,  v11,  v13,  v15,  v16,  v17,  v18,  v19,  v20,  v21,  v22);
  if (qword_1001303D8 != -1) {
    swift_once(&qword_1001303D8, sub_1000C089C);
  }
  Row.get<A>(_:)();
  *a3 = v8;
  a3[1] = v7;
  a3[2] = v12;
  a3[3] = v14;
  a3[4] = v12;
}

uint64_t sub_1000C0AB0()
{
  uint64_t v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[13]);
  }

  uint64_t v2 = v0[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    uint64_t v3 = v0[16];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v0[17]);
    }
  }

  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184LL, 7LL);
}

void *initializeWithCopy for LNAppShortcutBundleMetadataRecord(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for LNAppShortcutBundleMetadataRecord(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  return a1;
}

void *assignWithTake for LNAppShortcutBundleMetadataRecord(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  return a1;
}

ValueMetadata *type metadata accessor for LNAppShortcutBundleMetadataRecord()
{
  return &type metadata for LNAppShortcutBundleMetadataRecord;
}

void sub_1000C0C4C()
{
  uint64_t v0 = (sqlite3 *)Connection.handle.getter();
  sqlite3_extended_result_codes(v0, 1);
  uint64_t v3 = 1LL;
  uint64_t v1 = (sqlite3 *)Connection.handle.getter();
  sqlite3_file_control(v1, 0LL, 10, &v3);
  sub_100059698();
  v2._uint64_t countAndFlagsBits = 0xD000000000000018LL;
  Connection.execute(_:)(v2);
}

void sub_1000C0CE0()
{
  sub_1000B73F8(0xD000000000000025LL, (uint64_t)"PRAGMA foreign_keys=0;\n\nCREATE TABLE ");
  v0._uint64_t countAndFlagsBits = 0x6769666E6F63LL;
  v0._object = (void *)0xE600000000000000LL;
  String.append(_:)(v0);
  sub_1000C1B28();
  v1._uint64_t countAndFlagsBits = 7955819LL;
  v1._object = (void *)0xE300000000000000LL;
  String.append(_:)(v1);
  sub_1000C1CCC(0xD000000000000020LL);
  sub_1000C1C3C();
  v2._uint64_t countAndFlagsBits = sub_1000C1CD4();
  String.append(_:)(v2);
  sub_1000C1B40();
  sub_1000C1B28();
  sub_1000C1B58();
  sub_1000C1CCC(0xD000000000000020LL);
  v3._uint64_t countAndFlagsBits = 7107189LL;
  v3._object = (void *)0xE300000000000000LL;
  String.append(_:)(v3);
  sub_1000C1BCC();
  v4._uint64_t countAndFlagsBits = sub_1000C1CD4();
  v92._object = (void *)0xD000000000000011LL;
  String.append(_:)(v4);
  sub_100059698();
  object = v5._object;
  v5._uint64_t countAndFlagsBits = 0xD000000000000014LL;
  String.append(_:)(v5);
  v6._object = (void *)0x80000001000FC130LL;
  v6._uint64_t countAndFlagsBits = 0xD000000000000013LL;
  String.append(_:)(v6);
  sub_100059698();
  uint64_t v81 = v7._object;
  v7._uint64_t countAndFlagsBits = 0xD000000000000013LL;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = 0x617461646174656DLL;
  v8._object = (void *)0xEF6E6F6973726556LL;
  String.append(_:)(v8);
  sub_1000B73F8(0xD00000000000001FLL, (uint64_t)" INT NOT NULL\n);\n\nCREATE TABLE ");
  sub_1000C1B88(0x736E6F69746361LL);
  sub_1000C1B28();
  sub_1000C1AF4();
  sub_1000C1B70();
  sub_1000C1BA8();
  sub_100059698();
  uint64_t v75 = v9._object;
  uint64_t countAndFlagsBits = v9._countAndFlagsBits;
  String.append(_:)(v9);
  sub_1000C1B90();
  v10._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v10._object = (void *)0x80000001000FC300LL;
  String.append(_:)(v10);
  sub_1000C1AF4();
  sub_100038A74(44LL);
  sub_1000C1BA8();
  sub_1000C1CAC(0xD000000000000013LL);
  sub_1000C1AF4();
  sub_1000C1B04();
  sub_1000C1B40();
  sub_1000C1B7C();
  sub_1000C1B58();
  sub_1000B73F8(0xD000000000000038LL, (uint64_t)") ON DELETE CASCADE\n);\nCREATE INDEX actionIdentifier ON ");
  sub_1000C1B88(0x736E6F69746361LL);
  sub_1000C1B7C();
  sub_1000C1AF4();
  sub_100038A74(44LL);
  sub_1000C1BA8();
  v11._uint64_t countAndFlagsBits = sub_1000C1CD4();
  uint64_t v12 = v11._object;
  String.append(_:)(v11);
  v92._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  sub_1000B73F8(0xD00000000000001ELL, (uint64_t)"defaultActionForSystemProtocol");
  sub_1000C1B28();
  sub_1000C1AF4();
  sub_1000C1B70();
  sub_1000C1C50();
  sub_1000C1B70();
  sub_100059698();
  uint64_t v78 = v13;
  sub_1000C1C98(v14, v13);
  sub_100059698();
  v15._uint64_t countAndFlagsBits = 0xD000000000000020LL;
  String.append(_:)(v15);
  sub_1000C1AF4();
  sub_100038A74(44LL);
  sub_1000C1C50();
  sub_1000C1CAC(0xD000000000000013LL);
  sub_1000C1AF4();
  sub_1000C1B04();
  sub_1000C1B40();
  sub_1000C1B7C();
  sub_1000C1B58();
  sub_100059698();
  os_log_type_t v85 = v16._object;
  v16._uint64_t countAndFlagsBits = 0xD000000000000025LL;
  String.append(_:)(v16);
  sub_1000C1BC4(0x7365697469746E65LL);
  sub_1000C1B28();
  sub_1000C1AF4();
  sub_1000C1B70();
  sub_1000C1BC4(0x656D614E65707974LL);
  sub_1000B73F8( 0xD000000000000057LL,  (uint64_t)" TEXT GENERATED ALWAYS AS (json_extract(metadata, '$.typeName')) VIRTUAL NOT NULL,\n    ");
  sub_1000C1B90();
  v17._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v17._object = (void *)0x80000001000FC300LL;
  String.append(_:)(v17);
  sub_1000C1AF4();
  sub_100038A74(44LL);
  sub_1000C1BC4(0x656D614E65707974LL);
  sub_1000C1CE4(0xD000000000000013LL);
  sub_1000C1AF4();
  sub_1000C1B04();
  sub_1000C1B40();
  sub_1000C1B7C();
  sub_1000C1B58();
  sub_1000B73F8(0xD000000000000032LL, (uint64_t)") ON DELETE CASCADE\n);\nCREATE INDEX entityType ON ");
  sub_1000C1BC4(0x7365697469746E65LL);
  sub_1000C1B7C();
  sub_1000C1AF4();
  sub_100038A74(44LL);
  sub_1000C1BC4(0x656D614E65707974LL);
  v18._uint64_t countAndFlagsBits = 0xD000000000000011LL;
  v18._object = v12;
  String.append(_:)(v18);
  sub_1000C1B88(0x73656972657571LL);
  sub_1000C1B28();
  sub_1000C1AF4();
  sub_1000C1B70();
  sub_1000C1B90();
  sub_1000C1B70();
  sub_1000C1C10();
  sub_1000B73F8( 0xD000000000000058LL,  (uint64_t)" TEXT GENERATED ALWAYS AS (json_extract(metadata, '$.queryType')) VIRTUAL NOT NULL,\n    ");
  v19._uint64_t countAndFlagsBits = 0x6564497972657571LL;
  v19._object = (void *)0xEF7265696669746ELL;
  String.append(_:)(v19);
  sub_1000B73F8( 0xD000000000000060LL,  (uint64_t)" TEXT GENERATED ALWAYS AS (json_extract(metadata, '$.identifier')) VIRTUAL NOT NULL,\n    UNIQUE(");
  sub_1000C1AF4();
  sub_100038A74(44LL);
  sub_1000C1C10();
  v20._uint64_t countAndFlagsBits = 0xD000000000000013LL;
  v20._object = (void *)0x80000001000FC320LL;
  String.append(_:)(v20);
  sub_1000C1AF4();
  sub_1000C1B04();
  sub_1000C1B40();
  sub_1000C1B7C();
  sub_1000C1B58();
  sub_1000B73F8(0xD000000000000031LL, (uint64_t)") ON DELETE CASCADE\n);\nCREATE INDEX queryType ON ");
  sub_1000C1B88(0x73656972657571LL);
  sub_1000C1B7C();
  sub_1000C1AF4();
  sub_100038A74(44LL);
  sub_1000C1C10();
  sub_1000C1CB4(0xD000000000000011LL);
  v21._uint64_t countAndFlagsBits = 0x736D756E65LL;
  v21._object = (void *)0xE500000000000000LL;
  String.append(_:)(v21);
  sub_1000C1B28();
  sub_1000C1AF4();
  sub_1000C1B70();
  sub_1000C1BA8();
  v22._object = v75;
  v22._uint64_t countAndFlagsBits = countAndFlagsBits;
  String.append(_:)(v22);
  sub_1000C1B90();
  v23._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v23._object = (void *)0x80000001000FC300LL;
  String.append(_:)(v23);
  sub_1000C1AF4();
  sub_100038A74(44LL);
  sub_1000C1BA8();
  sub_1000C1CE4(0xD000000000000013LL);
  sub_1000C1AF4();
  sub_1000C1B04();
  sub_1000C1B40();
  sub_1000C1B7C();
  sub_1000C1B58();
  uint64_t v24 = v85;
  sub_1000C1CE4(0xD000000000000025LL);
  sub_1000B73F8(0xD000000000000019LL, (uint64_t)"appShortcutBundleMetadata");
  sub_1000C1B28();
  sub_1000C1AF4();
  sub_1000C1B70();
  sub_1000C1CEC( (uint64_t)"appShortcutProviderMangledName",  v69,  v71,  0x80000001000FC300LL,  0x80000001000FC320LL,  (uint64_t)v75,  countAndFlagsBits,  v78,  (uint64_t)v12,  (uint64_t)v81,  (uint64_t)object,  (uint64_t)v85,  0xD00000000000001BLL,  0xD00000000000001FLL,  0xD000000000000013LL,  v92);
  sub_1000C1BCC();
  sub_1000C1CBC((uint64_t)"shortcutTileColor");
  sub_100059698();
  v25._uint64_t countAndFlagsBits = v89;
  String.append(_:)(v25);
  sub_1000C1AF4();
  sub_1000C1B04();
  sub_1000C1B40();
  sub_1000C1B7C();
  sub_1000C1B58();
  sub_1000C1CE4(0xD000000000000025LL);
  v26._uint64_t countAndFlagsBits = 0x74726F6853707061LL;
  v26._object = (void *)0xEC00000073747563LL;
  String.append(_:)(v26);
  sub_1000C1B28();
  sub_1000C1AF4();
  sub_1000C1B70();
  sub_1000C1B90();
  sub_100059698();
  id v77 = v27._object;
  v27._uint64_t countAndFlagsBits = 0xD000000000000020LL;
  String.append(_:)(v27);
  sub_1000C1AF4();
  sub_1000C1B04();
  sub_1000C1B40();
  sub_1000C1B7C();
  sub_1000C1B58();
  sub_1000C1CE4(0xD000000000000025LL);
  sub_1000B73F8(0xD000000000000015LL, (uint64_t)"appShortcutParameters");
  sub_1000C1B28();
  sub_1000C1CBC((uint64_t)"appShortcutParameterId");
  sub_1000C1B70();
  sub_1000C1AF4();
  sub_1000C1B70();
  sub_100059698();
  sub_1000C1D08(v28, v29);
  sub_1000C1B70();
  sub_1000C1C74();
  sub_1000C1B70();
  sub_100059698();
  uint64_t v73 = (void *)v30;
  sub_1000C1C98(v31, v30);
  sub_1000C1B70();
  sub_1000C1BC4(0x79747265706F7270LL);
  sub_1000C1B70();
  sub_1000C1CBC((uint64_t)"optionsCollectionTitle");
  sub_1000C1BCC();
  v32._uint64_t countAndFlagsBits = sub_1000C1CD4();
  String.append(_:)(v32);
  sub_1000B73F8(0xD000000000000017LL, (uint64_t)" TEXT,\n    FOREIGN KEY(");
  sub_1000C1AF4();
  sub_1000C1B04();
  sub_1000C1B40();
  sub_1000C1B7C();
  sub_1000C1B58();
  sub_1000C1CE4(0xD000000000000025LL);
  sub_1000C1C98(v33, 0x80000001000F9700LL);
  sub_1000C1B28();
  sub_1000C1AF4();
  sub_1000C1B70();
  sub_1000C1CCC(0xD000000000000010LL);
  sub_1000C1B70();
  v34._uint64_t countAndFlagsBits = 0x446465646F636E65LL;
  v34._object = (void *)0xEB00000000617461LL;
  String.append(_:)(v34);
  sub_100059698();
  v35._uint64_t countAndFlagsBits = v87;
  String.append(_:)(v35);
  sub_1000C1AF4();
  sub_100038A74(44LL);
  sub_1000C1CCC(0xD000000000000010LL);
  sub_100059698();
  id v88 = (void *)v36;
  sub_1000C1D08(v37, v36);
  sub_1000C1AF4();
  sub_1000C1B04();
  sub_1000C1B40();
  sub_1000C1B7C();
  sub_1000C1B58();
  v38._uint64_t countAndFlagsBits = 0xD000000000000025LL;
  v38._object = v24;
  String.append(_:)(v38);
  sub_1000C1C98(v39, 0x80000001000FA360LL);
  sub_1000C1B28();
  sub_1000C1AF4();
  sub_1000C1B70();
  sub_1000C1CB4(0xD000000000000010LL);
  sub_1000C1B70();
  sub_1000C1C3C();
  v40._uint64_t countAndFlagsBits = v90;
  v40._object = v82;
  String.append(_:)(v40);
  sub_1000C1CA4(0x746169636F737361LL, 0x617461446465LL);
  v41._object = (void *)0x80000001000FC660LL;
  v41._uint64_t countAndFlagsBits = 0xD000000000000012LL;
  String.append(_:)(v41);
  sub_1000C1AF4();
  sub_100038A74(44LL);
  sub_1000C1CB4(0xD000000000000010LL);
  v42._uint64_t countAndFlagsBits = v90;
  v42._object = v74;
  String.append(_:)(v42);
  sub_1000C1AF4();
  sub_1000C1B04();
  sub_1000C1B40();
  sub_1000C1B7C();
  sub_1000C1B58();
  sub_1000C1CAC(0xD000000000000025LL);
  v43._uint64_t countAndFlagsBits = 0x746E6176656C6572LL;
  v43._object = (void *)0xEF73746E65746E49LL;
  String.append(_:)(v43);
  sub_1000C1B28();
  sub_1000C1AF4();
  sub_1000C1B70();
  sub_1000C1CB4(0xD000000000000010LL);
  sub_1000C1B70();
  sub_100059698();
  v44._uint64_t countAndFlagsBits = (uint64_t)v93._object;
  String.append(_:)(v44);
  v45._uint64_t countAndFlagsBits = 0xD000000000000014LL;
  v45._object = v84;
  String.append(_:)(v45);
  v46._object = (void *)0xEA0000000000646ELL;
  v46._uint64_t countAndFlagsBits = 0x694B746567646977LL;
  String.append(_:)(v46);
  sub_1000C1BCC();
  sub_1000C1CA4(0x436465646F636E65LL, 0x747865746E6FLL);
  sub_100059698();
  v47._uint64_t countAndFlagsBits = 0xD000000000000020LL;
  String.append(_:)(v47);
  sub_1000C1AF4();
  sub_100038A74(44LL);
  sub_1000C1CB4(0xD000000000000010LL);
  sub_1000C1B04();
  sub_1000C1B88(0x736E6F69746361LL);
  sub_1000C1B7C();
  sub_1000C1AF4();
  sub_100038A74(44LL);
  sub_1000C1BA8();
  v48._uint64_t countAndFlagsBits = 0xD000000000000025LL;
  v48._object = v24;
  String.append(_:)(v48);
  sub_100059698();
  char v91 = (void *)v49;
  sub_1000C1C98(v50, v49);
  sub_1000C1B28();
  sub_1000C1BEC();
  sub_1000C1B70();
  sub_1000C1AF4();
  sub_1000C1B70();
  sub_1000C1C74();
  sub_1000C1B70();
  v51._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  v51._object = v73;
  String.append(_:)(v51);
  sub_1000C1B70();
  sub_100059698();
  v52._uint64_t countAndFlagsBits = (uint64_t)v93._object;
  String.append(_:)(v52);
  sub_1000C1B70();
  sub_100059698();
  sub_1000C1D08(v53, v54);
  sub_1000C1B70();
  sub_1000C1C3C();
  sub_1000B73F8(0xD000000000000021LL, (uint64_t)" TEXT NOT NULL,\n    PRIMARY KEY (");
  sub_1000C1BEC();
  sub_1000C1CFC();
  sub_1000C1AF4();
  v55._uint64_t countAndFlagsBits = 0xD000000000000012LL;
  v55._object = v88;
  String.append(_:)(v55);
  sub_1000C1AF4();
  sub_1000C1B04();
  sub_1000C1B40();
  sub_1000C1B7C();
  sub_1000C1B58();
  v56._uint64_t countAndFlagsBits = 0xD000000000000025LL;
  v56._object = v24;
  String.append(_:)(v56);
  sub_1000C1CB4(0xD000000000000017LL);
  sub_1000C1B28();
  sub_1000C1C2C();
  sub_1000C1B70();
  sub_1000C1B88(0x6D796E6F6E7973LL);
  sub_1000C1B70();
  sub_1000C1AF4();
  sub_1000C1CAC(0xD000000000000020LL);
  sub_1000C1C2C();
  sub_100038A74(44LL);
  sub_1000C1AF4();
  sub_1000C1CCC(0xD000000000000015LL);
  v57._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  v57._object = v91;
  String.append(_:)(v57);
  sub_1000C1B7C();
  sub_1000C1BEC();
  sub_100038A74(44LL);
  sub_1000C1AF4();
  sub_1000B73F8( 0xD000000000000046LL,  (uint64_t)")\n        ON DELETE CASCADE\n);\n\nCREATE INDEX idx_parentId_bundleId ON ");
  sub_1000C1CB4(0xD000000000000017LL);
  sub_1000C1B7C();
  sub_1000C1C2C();
  sub_1000C1CFC();
  sub_1000C1AF4();
  v58._uint64_t countAndFlagsBits = (uint64_t)v93._object;
  v58._object = v80;
  String.append(_:)(v58);
  sub_1000C1CA4(0x50656C706D617865LL, 0x736573617268LL);
  sub_1000C1B28();
  sub_1000C1AF4();
  sub_1000C1B70();
  sub_1000C1C2C();
  sub_1000B73F8( 0xD000000000000062LL,  (uint64_t)" TEXT GENERATED ALWAYS AS (json_extract(description, '$.parentIdentifier')) VIRTUAL NOT NULL,\n    ");
  v59._uint64_t countAndFlagsBits = 1684957547LL;
  v59._object = (void *)0xE400000000000000LL;
  String.append(_:)(v59);
  sub_1000B73F8( 0xD000000000000056LL,  (uint64_t)" TEXT GENERATED ALWAYS AS (json_extract(description, '$.kind')) VIRTUAL NOT NULL,\n    ");
  v60._uint64_t countAndFlagsBits = 0x7470697263736564LL;
  v60._object = (void *)0xEB000000006E6F69LL;
  String.append(_:)(v60);
  sub_1000C1CAC(0xD000000000000020LL);
  sub_1000C1AF4();
  sub_1000C1CCC(0xD000000000000015LL);
  sub_1000C1B40();
  sub_1000C1B7C();
  sub_1000C1B58();
  sub_1000B73F8(0xD00000000000002DLL, (uint64_t)")\n        ON DELETE CASCADE\n);\n\nCREATE TABLE ");
  v61._uint64_t countAndFlagsBits = 0x6E61747369737361LL;
  v61._object = (void *)0xEF746E65746E4974LL;
  String.append(_:)(v61);
  sub_1000C1B28();
  sub_1000C1AF4();
  sub_1000C1B70();
  sub_1000C1B90();
  sub_1000C1CAC(0xD000000000000020LL);
  sub_1000C1AF4();
  sub_1000C1B04();
  sub_1000C1B40();
  sub_1000C1B7C();
  sub_1000C1B58();
  v62._uint64_t countAndFlagsBits = 0xD000000000000025LL;
  unint64_t v63 = v86;
  v62._object = v86;
  String.append(_:)(v62);
  sub_1000C1CEC( (uint64_t)"assistantIntentNegativePhrases",  v70,  0xD000000000000012LL,  (uint64_t)v73,  (uint64_t)v74,  0xD000000000000015LL,  (uint64_t)v77,  v79,  (uint64_t)v80,  (uint64_t)v82,  (uint64_t)v84,  (uint64_t)v86,  (uint64_t)v88,  0xD000000000000017LL,  (uint64_t)v91,  v93);
  sub_1000C1B28();
  sub_1000C1AF4();
  sub_1000C1B70();
  v64._uint64_t countAndFlagsBits = 0x657669746167656ELL;
  v64._object = (void *)0xEF73657361726850LL;
  String.append(_:)(v64);
  sub_1000C1CAC(0xD000000000000020LL);
  sub_1000C1AF4();
  sub_1000C1B04();
  sub_1000C1B40();
  sub_1000C1B7C();
  sub_1000C1B58();
  v65._uint64_t countAndFlagsBits = 0xD000000000000025LL;
  v65._object = v63;
  String.append(_:)(v65);
  sub_100059698();
  v66._uint64_t countAndFlagsBits = v72;
  String.append(_:)(v66);
  sub_1000C1B28();
  sub_1000C1AF4();
  sub_1000C1B70();
  sub_1000C1B90();
  sub_1000C1CAC(0xD000000000000020LL);
  sub_1000C1AF4();
  sub_1000C1B04();
  sub_1000C1B40();
  sub_1000C1B7C();
  sub_1000C1B58();
  sub_1000B73F8( 0xD000000000000045LL,  (uint64_t)") ON DELETE CASCADE\n);\n\nPRAGMA foreign_keys=1;\nPRAGMA user_version = ");
  v67._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  uint64_t v68 = v67._object;
  String.append(_:)(v67);
  swift_bridgeObjectRelease(v68);
  sub_100038A74(59LL);
  qword_100135C68 = 0LL;
  unk_100135C70 = 0xE000000000000000LL;
}

void sub_1000C1AF4()
{
  v1._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  v1._object = v0;
  String.append(_:)(v1);
}

void sub_1000C1B04()
{
  v0._uint64_t countAndFlagsBits = 0x4552454645522029LL;
  v0._object = (void *)0xED0000205345434ELL;
  String.append(_:)(v0);
}

void sub_1000C1B28()
{
  v0._uint64_t countAndFlagsBits = 0x202020200A2820LL;
  v0._object = (void *)0xE700000000000000LL;
  String.append(_:)(v0);
}

void sub_1000C1B40()
{
  v0._uint64_t countAndFlagsBits = 0x73656C646E7562LL;
  v0._object = (void *)0xE700000000000000LL;
  String.append(_:)(v0);
}

void sub_1000C1B58()
{
  v0._uint64_t countAndFlagsBits = 0x4449656C646E7562LL;
  v0._object = (void *)0xE800000000000000LL;
  String.append(_:)(v0);
}

void sub_1000C1B70()
{
  v2._uint64_t countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

void sub_1000C1B7C()
{
  v0._uint64_t countAndFlagsBits = 40LL;
  v0._object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
}

void sub_1000C1B88(uint64_t a1)
{
  unint64_t v1 = 0xE700000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

void sub_1000C1B90()
{
  v0._uint64_t countAndFlagsBits = 0x617461646174656DLL;
  v0._object = (void *)0xE800000000000000LL;
  String.append(_:)(v0);
}

void sub_1000C1BA8()
{
  v0._uint64_t countAndFlagsBits = 0x696669746E656469LL;
  v0._object = (void *)0xEA00000000007265LL;
  String.append(_:)(v0);
}

void sub_1000C1BC4(uint64_t a1)
{
  unint64_t v1 = 0xE800000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

void sub_1000C1BCC()
{
  v0._uint64_t countAndFlagsBits = 0x200A2C5458455420LL;
  v0._object = (void *)0xEB00000000202020LL;
  String.append(_:)(v0);
}

void sub_1000C1BEC()
{
  v0._uint64_t countAndFlagsBits = 0x6E6564496E617073LL;
  v0._object = (void *)0xEE00726569666974LL;
  String.append(_:)(v0);
}

void sub_1000C1C10()
{
  v0._uint64_t countAndFlagsBits = 0x7079547972657571LL;
  v0._object = (void *)0xE900000000000065LL;
  String.append(_:)(v0);
}

void sub_1000C1C2C()
{
  v1._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  v1._object = v0;
  String.append(_:)(v1);
}

void sub_1000C1C3C()
{
  v0._uint64_t countAndFlagsBits = 0x65756C6176LL;
  v0._object = (void *)0xE500000000000000LL;
  String.append(_:)(v0);
}

void sub_1000C1C50()
{
  v0._uint64_t countAndFlagsBits = 0x72506D6574737973LL;
  v0._object = (void *)0xEE006C6F636F746FLL;
  String.append(_:)(v0);
}

void sub_1000C1C74()
{
  v0._uint64_t countAndFlagsBits = 0x79747265706F7270LL;
  v0._object = (void *)0xED0000656C746954LL;
  String.append(_:)(v0);
}

void sub_1000C1C98(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0xD000000000000010LL;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

void sub_1000C1CA4(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = a2 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

void sub_1000C1CAC(uint64_t a1)
{
  uint64_t v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

void sub_1000C1CB4(uint64_t a1)
{
  uint64_t v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

void sub_1000C1CBC(uint64_t a1@<X8>)
{
  v2._object = (void *)((a1 - 32) | 0x8000000000000000LL);
  v2._uint64_t countAndFlagsBits = v1;
  String.append(_:)(v2);
}

void sub_1000C1CCC(uint64_t a1)
{
  uint64_t v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_1000C1CD4()
{
  return v0;
}

void sub_1000C1CE4(uint64_t a1)
{
  uint64_t v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

void sub_1000C1CEC( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, Swift::String a16)
{
  v16._object = (void *)((a1 - 32) | 0x8000000000000000LL);
  v16._uint64_t countAndFlagsBits = a16._countAndFlagsBits;
  String.append(_:)(v16);
}

void sub_1000C1CFC()
{
  v0._uint64_t countAndFlagsBits = 8236LL;
  v0._object = (void *)0xE200000000000000LL;
  String.append(_:)(v0);
}

void sub_1000C1D08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

uint64_t sub_1000C1D10(uint64_t a1, uint64_t a2)
{
  if (qword_1001303E8 != -1) {
    swift_once(&qword_1001303E8, sub_1000C2244);
  }
  sub_10001DEBC(v16, &unk_100133EC8);
  sub_10001D9AC(v16);
  if (qword_1001303F0 != -1) {
    swift_once(&qword_1001303F0, sub_1000C2298);
  }
  sub_10001DECC((uint64_t)&qword_100133F70);
  v15[0] = a1;
  v15[1] = a2;
  == infix<A>(_:_:)();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  sub_10001DEBC(&v14, v16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.filter(_:)( v6,  v8,  v10,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table,  (uint64_t)v15);
  swift_bridgeObjectRelease_n(v10, 2LL);
  swift_bridgeObjectRelease_n(v8, 2LL);
  sub_10001DAF0(v16);
  sub_10001DEBC(v17, v15);
  void v15[3] = &type metadata for Table;
  v15[4] = &protocol witness table for Table;
  v15[0] = swift_allocObject(&unk_100126A80, 184LL, 7LL);
  sub_10001DEBC((void *)(v15[0] + 16LL), v17);
  Connection.prepareRowIterator(_:)(v15);
  uint64_t v11 = sub_10000AC58(v15);
  if (!v2)
  {
    __chkstk_darwin(v11);
    swift_retain();
    RowIterator.compactMap<A>(_:)();
    uint64_t v8 = v13;
    swift_release();
    sub_10000AEE8();
    swift_release();
  }

  return v8;
}

uint64_t sub_1000C1F74(uint64_t a1)
{
  if (qword_1001303E8 != -1) {
    swift_once(&qword_1001303E8, sub_1000C2244);
  }
  sub_10001DEBC(v35, &unk_100133EC8);
  uint64_t v2 = sub_100008DB0(&qword_1001323E0);
  v3._rawValue = (void *)swift_initStackObject(v2, v34);
  *((_OWORD *)v3._rawValue + 1) = xmmword_1000F5FF0;
  sub_10001D9AC(v35);
  if (qword_1001303F0 != -1) {
    swift_once(&qword_1001303F0, sub_1000C2298);
  }
  uint64_t v4 = sub_10001DECC((uint64_t)&qword_100133F70);
  *(_OWORD *)uint64_t v33 = *(_OWORD *)a1;
  sub_100088794( v4,  v5,  v6,  v7,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String,  v8,  v9,  v33[0]);
  if (qword_1001303F8 != -1) {
    swift_once(&qword_1001303F8, sub_1000C22B4);
  }
  uint64_t v10 = sub_10001DECC((uint64_t)&qword_100133F88);
  *(_OWORD *)uint64_t v33 = *(_OWORD *)(a1 + 16);
  sub_100088794( v10,  v11,  v12,  v13,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String,  v14,  v15,  v33[0]);
  if (qword_100130400 != -1) {
    swift_once(&qword_100130400, sub_1000C22D0);
  }
  uint64_t v16 = sub_10001DECC((uint64_t)&qword_100133FA0);
  sub_100088794( v16,  v17,  v18,  v19,  (uint64_t)&type metadata for Int,  (uint64_t)&protocol witness table for Int,  v20,  v21,  *(void *)(a1 + 32));
  if (qword_100130408 != -1) {
    swift_once(&qword_100130408, sub_1000C2330);
  }
  uint64_t v22 = qword_100133FB8;
  uint64_t v23 = unk_100133FC0;
  uint64_t v24 = qword_100133FC8;
  unint64_t v25 = *(void *)(a1 + 48);
  if (v25 >> 60 == 15)
  {
    uint64_t v26 = 0LL;
  }

  else
  {
    uint64_t v27 = *(void *)(a1 + 40);
    sub_10000A280(v27, *(void *)(a1 + 48));
    sub_1000C2648(v27, v25);
    uint64_t v26 = v28;
    sub_10000A21C(v27, v25);
  }

  v33[0] = v26;
  <- infix<A>(_:_:)( v22,  v23,  v24,  (uint64_t)v33,  (uint64_t)&type metadata for Blob,  (uint64_t)&protocol witness table for Blob);
  swift_bridgeObjectRelease();
  sub_10001DEBC(v33, v35);
  AppIntents_SQLite::Insert v36 = QueryType.insert(or:_:)(AppIntents_SQLite_OnConflict_replace, v3);
  uint64_t countAndFlagsBits = v36.template._countAndFlagsBits;
  object = v36.template._object;
  rawValue = v36.bindings._rawValue;
  swift_bridgeObjectRelease();
  sub_10001DAF0(v35);
  v37.template._uint64_t countAndFlagsBits = countAndFlagsBits;
  v37.template._object = object;
  v37.bindings._rawValue = rawValue;
  Connection.run(_:)(v37);
  swift_bridgeObjectRelease();
  return sub_10000AEE8();
}

void *sub_1000C2244()
{
  return memcpy(&unk_100133EC8, __src, 0xA8uLL);
}

uint64_t sub_1000C2298(uint64_t a1)
{
  return sub_100087300(a1, (uint64_t)&qword_100133F70, 0x80000001000F96E0LL);
}

uint64_t sub_1000C22B4(uint64_t a1)
{
  return sub_100087300(a1, (uint64_t)&qword_100133F88, 0x80000001000FACA0LL);
}

uint64_t sub_1000C22D0()
{
  uint64_t v0 = sub_100008DB0(&qword_100131988);
  uint64_t v1 = sub_10008864C((unint64_t *)&qword_100133E10, &qword_100131988);
  return ExpressionType.init(_:)(0x65756C6176LL, 0xE500000000000000LL, v0, v1);
}

uint64_t sub_1000C2330()
{
  uint64_t v0 = sub_100008DB0(&qword_100133FD0);
  uint64_t v1 = sub_10008864C(&qword_100133FD8, &qword_100133FD0);
  return ExpressionType.init(_:)(0x746169636F737361LL, 0xEE00617461446465LL, v0, v1);
}

uint64_t sub_1000C23A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (qword_1001303F0 != -1) {
    swift_once(&qword_1001303F0, sub_1000C2298);
  }
  Row.get<A>(_:)();
  uint64_t v7 = v16;
  uint64_t v6 = v18;
  if (qword_1001303F8 != -1) {
    swift_once(&qword_1001303F8, sub_1000C22B4);
  }
  Row.get<A>(_:)();
  uint64_t v9 = v16;
  uint64_t v8 = v18;
  if (qword_100130400 != -1) {
    swift_once(&qword_100130400, sub_1000C22D0);
  }
  Row.get<A>(_:)();
  uint64_t v11 = v16;
  if (qword_100130408 != -1) {
    swift_once(&qword_100130408, sub_1000C2330);
  }
  Row.get<A>(_:)( qword_100133FB8,  unk_100133FC0,  qword_100133FC8,  a1,  a2,  (uint64_t)&type metadata for Blob,  (uint64_t)&protocol witness table for Blob,  v10,  v14,  v15,  v16,  v18,  v19,  v20,  v21,  v22,  v23,  v24,  v25,  v26);
  uint64_t result = v17;
  if (v17) {
    uint64_t result = sub_1000B028C(v17);
  }
  else {
    unint64_t v13 = 0xF000000000000000LL;
  }
  *a3 = v7;
  a3[1] = v6;
  a3[2] = v9;
  a3[3] = v8;
  a3[4] = v11;
  a3[5] = result;
  a3[6] = v13;
  return result;
}

void *sub_1000C25C8@<X0>(void *(*a1)(void *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  uint64_t result = a1(v5);
  if (!v2) {
    return (void *)sub_1000C2858((uint64_t)v5, a2);
  }
  return result;
}

uint64_t sub_1000C2610@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1000C2858((uint64_t)v5, a3);
}

void sub_1000C2648(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void *sub_1000C26C4()
{
  if (BYTE6(v0))
  {
    uint64_t v6 = sub_100008DB0(&qword_100130B00);
    uint64_t v4 = (void *)swift_allocObject(v6, BYTE6(v0) + 32LL, 7LL);
    size_t v7 = j__malloc_size(v4);
    v4[2] = BYTE6(v0);
    v4[3] = 2 * v7 - 64;
    sub_10000A280(v2, v0);
    uint64_t v8 = ((uint64_t (*)(uint64_t, void *, void, uint64_t, unint64_t))Data._copyContents(initializing:))( v3,  v4 + 4,  BYTE6(v0),  v2,  v0);
    sub_10000A1D8(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
    if (v8 != BYTE6(v0))
    {
      __break(1u);
      JUMPOUT(0x1000C2798LL);
    }
  }

  return v4;
}

uint64_t sub_1000C27B0()
{
  uint64_t v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[13]);
  }

  uint64_t v2 = v0[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    uint64_t v3 = v0[16];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v0[17]);
    }
  }

  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184LL, 7LL);
}

uint64_t sub_1000C2838@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1000C2610(a1, a2, a3);
}

void *sub_1000C2840@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C25C8(*(void *(**)(void *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_1000C2858(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008DB0(qword_100133FE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t destroy for LNIntentEnablementRecord(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v3 = *(void *)(a1 + 48);
  if (v3 >> 60 != 15) {
    return sub_10000A1D8(*(void *)(a1 + 40), v3);
  }
  return result;
}

uint64_t initializeWithCopy for LNIntentEnablementRecord(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = a2[3];
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = a2[2];
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 3sub_100096760(v0[56], v0 + 2) = a2[4];
  uint64_t v5 = a2 + 5;
  unint64_t v6 = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v5;
  }

  else
  {
    uint64_t v7 = *v5;
    sub_10000A280(*v5, v6);
    *(void *)(a1 + 40) = v7;
    *(void *)(a1 + 48) = v6;
  }

  return a1;
}

void *assignWithCopy for LNIntentEnablementRecord(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  uint64_t v4 = a2 + 5;
  unint64_t v5 = a2[6];
  if (a1[6] >> 60 != 15LL)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      sub_10000A280(*v4, v5);
      uint64_t v8 = a1[5];
      unint64_t v9 = a1[6];
      a1[5] = v7;
      a1[6] = v5;
      sub_10000A1D8(v8, v9);
      return a1;
    }

    sub_1000B009C((uint64_t)(a1 + 5));
    goto LABEL_6;
  }

  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 5) = *(_OWORD *)v4;
    return a1;
  }

  uint64_t v6 = *v4;
  sub_10000A280(*v4, v5);
  a1[5] = v6;
  a1[6] = v5;
  return a1;
}

void *assignWithTake for LNIntentEnablementRecord(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  uint64_t v6 = a2 + 5;
  unint64_t v7 = a1[6];
  if (v7 >> 60 != 15)
  {
    unint64_t v8 = a2[6];
    if (v8 >> 60 != 15)
    {
      uint64_t v9 = a1[5];
      a1[5] = *v6;
      a1[6] = v8;
      sub_10000A1D8(v9, v7);
      return a1;
    }

    sub_1000B009C((uint64_t)(a1 + 5));
  }

  *(_OWORD *)(a1 + 5) = *(_OWORD *)v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for LNIntentEnablementRecord(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 56))
    {
      LODWORD(vsub_100096760(v0[56], v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(vsub_100096760(v0[56], v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(vsub_100096760(v0[56], v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LNIntentEnablementRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 56) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for LNIntentEnablementRecord()
{
  return &type metadata for LNIntentEnablementRecord;
}

uint64_t sub_1000C2B9C(uint64_t a1)
{
  return sub_1000C2D2C(a1, qword_100135C78, &qword_1001302D0, (uint64_t)qword_100135768, (uint64_t)sub_100088800);
}

id sub_1000C2BC0()
{
  id result = (id)getLNLogCategoryExecution();
  if (result) {
    qword_100135C90 = (uint64_t)result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000C2BEC(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_1000C2C18 + 4 * byte_1000F7730[a1]))( "connecting",  10LL);
}

void sub_1000C2C18()
{
}

uint64_t sub_1000C2C58(uint64_t a1)
{
  return sub_1000C2D2C(a1, qword_100135C98, &qword_1001302E0, (uint64_t)qword_100135798, (uint64_t)sub_100088828);
}

uint64_t sub_1000C2C7C(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_1000C2CA8 + 4 * byte_1000F7735[a1]))( "onInstall",  9LL);
}

void sub_1000C2CA8()
{
}

uint64_t sub_1000C2D08(uint64_t a1)
{
  return sub_1000C2D2C(a1, qword_100135CB0, &qword_1001302E8, (uint64_t)qword_1001357B0, (uint64_t)sub_10008883C);
}

uint64_t sub_1000C2D2C(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v20 - v14;
  uint64_t v16 = type metadata accessor for OSSignposter(0LL);
  sub_10000A07C(v16, a2);
  sub_100008D98(v16, (uint64_t)a2);
  if (*a3 != -1LL) {
    swift_once(a3, a5);
  }
  uint64_t v17 = sub_100008D98(v9, a4);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v18(v15, v17, v9);
  v18(v13, (uint64_t)v15, v9);
  OSSignposter.init(logger:)(v13);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
}

  ;
}

uint64_t sub_1000C2E60(uint64_t a1)
{
  v5[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v5[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    _OWORD v5[2] = *(void *)(result - 8) + 64LL;
    v5[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    uint64_t result = type metadata accessor for Optional(319LL, *(void *)(a1 + 80));
    if (v4 <= 0x3F)
    {
      _OWORD v5[4] = *(void *)(result - 8) + 64LL;
      void v5[5] = "\b";
      uint64_t result = swift_initClassMetadata2(a1, 0LL, 6LL, v5, a1 + 96);
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t *sub_1000C2F10()
{
  uint64_t v1 = *v0;

  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_100027ECC(v2);

  uint64_t v3 = type metadata accessor for Optional(0LL, *(void *)(v1 + 80));
  sub_100027ECC(v3);
  swift_release();
  return v0;
}

uint64_t sub_1000C2F94()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for NotificationDebouncer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000C8B4(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NotificationDebouncer);
}

uint64_t _s14ParameterValueVwxx(void *a1)
{
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t _s14ParameterValueVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100096760(v0[56], v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 48) = v6;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t _s14ParameterValueVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 3sub_100096760(v0[56], v0 + 2) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

__n128 _s14ParameterValueVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 4sub_100096760(v0[56], v0 + 2) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(_OWORD *)(a1 + 3sub_100096760(v0[56], v0 + 2) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s14ParameterValueVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 3sub_100096760(v0[56], v0 + 2) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(*(void *)(a1 + 40));
  uint64_t v8 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

uint64_t _s14ParameterValueVwet(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 58))
    {
      LODWORD(vsub_100096760(v0[56], v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(vsub_100096760(v0[56], v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(vsub_100096760(v0[56], v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t _s14ParameterValueVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 58) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 58) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *_s14ParameterValueVMa()
{
  return &_s14ParameterValueVN;
}

uint64_t sub_1000C324C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a2 + 8);
  BOOL v7 = v4 == *(void *)a2 && v5 == v6;
  if (v7 || (char v8 = sub_10001BB00(v4, v5, *(void *)a2, v6), v9 = 0, (v8 & 1) != 0))
  {
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(a2 + 16);
    uint64_t v13 = *(void *)(a2 + 24);
    BOOL v14 = v10 == v12 && v11 == v13;
    if (v14 || (v15 = sub_10001BB00(v10, v11, v12, v13), char v9 = 0, (v15 & 1) != 0))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = *(void *)(a1 + 40);
      uint64_t v18 = *(void *)(a2 + 32);
      uint64_t v19 = *(void *)(a2 + 40);
      BOOL v20 = v16 == v18 && v17 == v19;
      if (v20 || (v21 = sub_10001BB00(v16, v17, v18, v19), char v9 = 0, (v21 & 1) != 0))
      {
        sub_1000139F8(*(void **)(a1 + 48), *(void **)(a2 + 48));
        else {
          char v9 = 0;
        }
      }
    }
  }

  return v9 & 1;
}

uint64_t sub_1000C3314@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Schema.RuntimeError(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (void *)((char *)&v26[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v7);
  char v9 = (char *)&v26[-1] - v8;
  uint64_t v10 = type metadata accessor for MetadataError(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_100011A0C();
  uint64_t v14 = v13 - v12;
  v26[0] = a1;
  sub_10000ADF4();
  uint64_t v15 = sub_100008DB0(&qword_100130620);
  if (sub_1000843B0(v14, (uint64_t)v26, v15, v10))
  {
    sub_10000AD70();
    (*(void (**)(void *, uint64_t, uint64_t))(v11 + 32))(a2, v14, v10);
    swift_storeEnumTagMultiPayload(a2, v4, 1LL);
LABEL_5:
    uint64_t v16 = v26[0];
    return swift_errorRelease(v16);
  }

  swift_errorRelease(v26[0]);
  v26[0] = a1;
  sub_10000ADF4();
  if (sub_1000843B0((uint64_t)v9, (uint64_t)v26, v15, v4))
  {
    sub_10000AD70();
    sub_1000C3564((uint64_t)v9, (uint64_t)a2);
    goto LABEL_5;
  }

  swift_errorRelease(v26[0]);
  uint64_t v29 = a1;
  sub_10000ADF4();
  if (!sub_1000843B0((uint64_t)v26, (uint64_t)&v29, v15, (uint64_t)&type metadata for Result))
  {
    swift_errorRelease(v29);
    *a2 = a1;
    return swift_storeEnumTagMultiPayload(a2, v4, 3LL);
  }

  uint64_t v18 = v26[0];
  uint64_t v19 = v26[1];
  int v20 = v27;
  uint64_t v21 = v28;
  unint64_t v22 = sub_100037E20();
  uint64_t v23 = swift_allocError(&type metadata for Result, v22, 0LL, 0LL);
  *(void *)uint64_t v24 = v18;
  *(void *)(v24 + 8) = v19;
  *(_DWORD *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = v20;
  *(void *)(v24 + 24) = v21;
  sub_10000AD70();
  *uint64_t v6 = v23;
  swift_storeEnumTagMultiPayload(v6, v4, 2LL);
  sub_1000C3564((uint64_t)v6, (uint64_t)a2);
  uint64_t v16 = v29;
  return swift_errorRelease(v16);
}

uint64_t type metadata accessor for Schema.RuntimeError(uint64_t a1)
{
  uint64_t result = qword_1001340D8;
  if (!qword_1001340D8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Schema.RuntimeError);
  }
  return result;
}

uint64_t sub_1000C3564(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Schema.RuntimeError(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C35A8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) == 0)
  {
    uint64_t v5 = (char *)&loc_1000C35F8 + 4 * byte_1000F7820[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }

  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = v6 + ((v4 + 16LL) & ~(unint64_t)v4);
  swift_retain(v6);
  return v7;
}

uint64_t sub_1000C36D4(void *a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
    case 4:
      uint64_t result = swift_bridgeObjectRelease(a1[1]);
      break;
    case 1:
      uint64_t v4 = type metadata accessor for MetadataError(0LL);
      uint64_t result = (*(uint64_t (**)(void *, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
      break;
    case 2:
    case 3:
      uint64_t result = swift_errorRelease(*a1);
      break;
    default:
      return result;
  }

  return result;
}

void sub_1000C375C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3 = (char *)sub_1000C37A0 + 4 * byte_1000F782A[swift_getEnumCaseMultiPayload(a2, a3)];
  __asm { BR              X10 }

void *sub_1000C37A0()
{
  uint64_t v3 = v2[1];
  void *v0 = *v2;
  v0[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_storeEnumTagMultiPayload(v0, v1, 0LL);
  return v0;
}

uint64_t sub_1000C385C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    sub_1000C397C(result);
    uint64_t v5 = (char *)&loc_1000C38B0 + 4 * byte_1000F782F[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }

  return result;
}

uint64_t sub_1000C397C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Schema.RuntimeError(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *sub_1000C39B8(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    uint64_t v6 = type metadata accessor for MetadataError(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

void *sub_1000C3A44(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000C397C((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v6 = type metadata accessor for MetadataError(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t sub_1000C3AE0(uint64_t a1)
{
  v4[0] = &unk_1000F7848;
  uint64_t result = type metadata accessor for MetadataError(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    v4[2] = &unk_1000F7860;
    v4[3] = &unk_1000F7860;
    void v4[4] = &unk_1000F7848;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 5LL, v4);
    return 0LL;
  }

  return result;
}

void sub_1000C3B60()
{
  uint64_t v1 = type metadata accessor for MetadataError(0LL);
  __chkstk_darwin(v1);
  sub_100011A0C();
  uint64_t v2 = type metadata accessor for Schema.RuntimeError(0LL);
  __chkstk_darwin(v2);
  sub_100011A0C();
  uint64_t v5 = v4 - v3;
  sub_1000C3DA8(v0, v4 - v3);
  uint64_t v6 = (char *)sub_1000C3C10 + 4 * byte_1000F7834[swift_getEnumCaseMultiPayload(v5, v2)];
  __asm { BR              X10 }

uint64_t sub_1000C3C10()
{
  *(void *)(v0 - 64) = 0xD00000000000001DLL;
  *(void *)(v0 - 56) = 0x80000001000FCA30LL;
  sub_1000C3E04();
  sub_100011958();
  return *(void *)(v0 - 64);
}

uint64_t sub_1000C3DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Schema.RuntimeError(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_1000C3DEC()
{
  *(void *)(v0 - 64) = 0LL;
  *(void *)(v0 - 56) = 0xE000000000000000LL;
}

uint64_t sub_1000C3DFC()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 56));
}

void sub_1000C3E04()
{
  v2._uint64_t countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

void sub_1000C3E10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_100130430 != -1) {
    swift_once(&qword_100130430, sub_1000C4664);
  }
  sub_10001DEBC(v15, &unk_100134110);
  if (a2)
  {
    sub_10001D9AC(v15);
    if (qword_100130438 != -1) {
      swift_once(&qword_100130438, sub_1000C46B4);
    }
    v14[0] = a1;
    v14[1] = a2;
    sub_1000C4B50();
    uint64_t v7 = v6;
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    sub_10001DEBC(v14, v15);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    QueryType.filter(_:)( v7,  v9,  v11,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table,  (uint64_t)v13);
    sub_10001191C(v11);
    sub_10001191C(v9);
    sub_10001DAF0(v15);
    uint64_t v12 = v13;
  }

  else
  {
    sub_10001D9AC(v15);
    uint64_t v12 = v15;
  }

  sub_10001DEBC(v14, v12);
  v13[3] = &type metadata for Table;
  v13[4] = &protocol witness table for Table;
  v13[0] = sub_100038A2C((uint64_t)&unk_100126CF8);
  sub_10001DEBC((void *)(v13[0] + 16LL), v14);
  sub_1000C47A0(v13, a3);
  sub_10000AC58(v13);
  sub_10001DEE8();
}

uint64_t sub_1000C3FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_100130430 != -1) {
    swift_once(&qword_100130430, sub_1000C4664);
  }
  sub_10001DEBC(v33, &unk_100134110);
  sub_10001D9AC(v33);
  if (qword_100130438 != -1) {
    swift_once(&qword_100130438, sub_1000C46B4);
  }
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  sub_1000C4B50();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  if (qword_100130440 != -1) {
    swift_once(&qword_100130440, sub_1000C46D8);
  }
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  sub_1000C4B50();
  && infix(_:_:)(v12, v14, v16, v17, v18, v19);
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  swift_bridgeObjectRelease();
  sub_10000AEE8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001DEBC(v28, v33);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.filter(_:)( v21,  v23,  v25,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table,  (uint64_t)&v29);
  sub_10001191C(v25);
  sub_10001191C(v23);
  sub_10001DAF0(v33);
  sub_10001DEBC(v34, &v29);
  uint64_t v31 = &type metadata for Table;
  Swift::String v32 = &protocol witness table for Table;
  uint64_t v29 = sub_100038A2C((uint64_t)&unk_100126CF8);
  sub_10001DEBC((void *)(v29 + 16), v34);
  uint64_t v26 = Connection.pluck(_:)(&v29);
  sub_10000AC58(&v29);
  if (!v5)
  {
    if (v26)
    {
      a5 = sub_1000C4874();
      swift_bridgeObjectRelease();
      sub_10000AEE8();
    }

    else
    {
      return 0LL;
    }
  }

  return a5;
}

uint64_t sub_1000C4274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_1000361AC( a1,  a2,  a3,  a4,  1769238117,  0,  16,  0xF96E0,  0x656D614E65707974LL,  (void *)0xE800000000000000LL,  0x617461646174656DLL,  (void *)0xE800000000000000LL,  0xD000000000000021LL,  (void *)0x80000001000FCA50LL);
  if (!v5)
  {
    if (v10)
    {
      a5 = sub_1000C3FC8(a1, a2, v9, v10, a5);
      sub_10000AEE8();
    }

    else
    {
      return 0LL;
    }
  }

  return a5;
}

void sub_1000C4394(uint64_t a1, uint64_t a2)
{
  if (qword_100130430 != -1) {
    swift_once(&qword_100130430, sub_1000C4664);
  }
  sub_10001DEBC(v27, &unk_100134110);
  sub_10001DEBC(v25, &unk_100134110);
  if (qword_100130440 != -1) {
    swift_once(&qword_100130440, sub_1000C46D8);
  }
  uint64_t v4 = qword_1001341D0;
  uint64_t v5 = *(void *)algn_1001341D8;
  uint64_t v6 = qword_1001341E0;
  sub_10001DEBC(&v20, v27);
  sub_10001D9AC(v27);
  uint64_t v7 = QueryType.namespace<A>(_:)(v4, v5, v6, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  sub_10001DAF0(v27);
  uint64_t v23 = sub_100008DB0((uint64_t *)&unk_1001323C0);
  uint64_t v24 = &protocol witness table for Expression<A>;
  uint64_t v20 = v7;
  uint64_t v21 = v9;
  uint64_t v22 = v11;
  SchemaType.select(_:_:)( (uint64_t)&v20,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table);
  sub_10000AC58(&v20);
  if (a2)
  {
    sub_10001DEBC(v25, v26);
    if (qword_100130438 != -1) {
      swift_once(&qword_100130438, sub_1000C46B4);
    }
    uint64_t v20 = a1;
    uint64_t v21 = a2;
    == infix<A>(_:_:)();
    uint64_t v13 = v12;
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    sub_10001DEBC(&v19, v25);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    QueryType.filter(_:)( v13,  v15,  v17,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table,  (uint64_t)&v20);
    sub_10001191C(v17);
    sub_10001191C(v15);
    sub_10001DAF0(v25);
    sub_10001DEBC(v26, &v20);
  }

  v25[3] = &type metadata for Table;
  v25[4] = &protocol witness table for Table;
  v25[0] = sub_100038A2C((uint64_t)&unk_100126CF8);
  sub_10001DEBC((void *)(v25[0] + 16LL), v26);
  uint64_t v18 = v27[23];
  Connection.prepareRowIterator(_:)(v25);
  sub_10000AC58(v25);
  if (!v18)
  {
    sub_1000C4B40();
    sub_10001BC70();
    sub_1000389DC();
  }

  sub_10001DEE8();
}

void *sub_1000C4664()
{
  return memcpy(&unk_100134110, __src, 0xA8uLL);
}

uint64_t sub_1000C46B4(uint64_t a1)
{
  return sub_100028168(a1, (uint64_t)&qword_1001341B8, 0xD000000000000010LL, 0x80000001000F96E0LL);
}

uint64_t sub_1000C46D8(uint64_t a1)
{
  return sub_100028168(a1, (uint64_t)&qword_1001341D0, 0x656D614E65707974LL, 0xE800000000000000LL);
}

uint64_t sub_1000C46F8(uint64_t a1)
{
  return sub_100028168(a1, (uint64_t)&qword_1001341E8, 0x617461646174656DLL, 0xE800000000000000LL);
}

uint64_t sub_1000C4718()
{
  uint64_t v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[13]);
  }

  uint64_t v2 = v0[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    uint64_t v3 = v0[16];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v0[17]);
    }
  }

  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184LL, 7LL);
}

uint64_t sub_1000C47A0(void *a1, uint64_t a2)
{
  uint64_t v5 = Connection.prepareRowIterator(_:)(a1);
  if (!v2)
  {
    __chkstk_darwin(v5);
    _OWORD v8[2] = sub_1000C4B28;
    v8[3] = a2;
    swift_retain();
    sub_1000C4B40();
    if (!v8) {
      uint64_t v3 = v6;
    }
    swift_release();
    sub_10001BC70();
    sub_1000389DC();
  }

  return v3;
}

uint64_t sub_1000C4874()
{
  uint64_t v0 = sub_100008DB0(&qword_100130BC0);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100130438 != -1) {
    swift_once(&qword_100130438, sub_1000C46B4);
  }
  Row.get<A>(_:)();
  uint64_t v3 = v9;
  if (qword_100130448 != -1) {
    swift_once(&qword_100130448, sub_1000C46F8);
  }
  Row.get<A>(_:)();
  uint64_t v4 = v9;
  uint64_t v5 = v10;
  sub_1000C4AE8();
  uint64_t v6 = type metadata accessor for URL(0LL);
  sub_100009E60((uint64_t)v2, 1LL, 1LL, v6);
  static LNEntityMetadata.fromJSON(_:bundleURL:effectiveBundleIdentifier:)(v4, v5, v2, 0LL);
  sub_100028208((uint64_t)v2);
  swift_bridgeObjectRelease();
  return v3;
}

void sub_1000C4A30(void *a1@<X8>)
{
  if (qword_100130440 != -1) {
    swift_once(&qword_100130440, sub_1000C46D8);
  }
  Row.get<A>(_:)();
  if (v1)
  {
    swift_errorRelease(v1);
    uint64_t v3 = 0LL;
    uint64_t v4 = 0LL;
  }

  else
  {
    uint64_t v3 = v5;
    uint64_t v4 = v6;
  }

  *a1 = v3;
  a1[1] = v4;
}

unint64_t sub_1000C4AE8()
{
  unint64_t result = qword_100132440;
  if (!qword_100132440)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___LNEntityMetadata);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100132440);
  }

  return result;
}

uint64_t sub_1000C4B28(uint64_t a1, uint64_t a2)
{
  return sub_1000C4B24(a1, a2, v2);
}

ValueMetadata *type metadata accessor for LNEntityRecord()
{
  return &type metadata for LNEntityRecord;
}

void sub_1000C4B40()
{
}

void sub_1000C4B50()
{
  == infix<A>(_:_:)();
}

uint64_t sub_1000C4B58(uint64_t a1, uint64_t a2)
{
  if (qword_100130450 != -1) {
    swift_once(&qword_100130450, sub_1000C539C);
  }
  sub_10001DEBC(v18, &unk_100134200);
  if (a2)
  {
    sub_10001D9AC(v18);
    if (qword_100130458 != -1) {
      swift_once(&qword_100130458, sub_1000C53E8);
    }
    sub_10001DECC((uint64_t)&qword_1001342A8);
    v16[0] = a1;
    v16[1] = a2;
    == infix<A>(_:_:)();
    uint64_t v7 = v6;
    uint64_t v3 = v8;
    uint64_t v10 = v9;
    sub_10001DEBC(&v15, v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    QueryType.filter(_:)( v7,  v3,  v10,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table,  (uint64_t)v16);
    sub_10001191C(v10);
    sub_10001191C(v3);
    sub_10001DAF0(v18);
    uint64_t v11 = v16;
  }

  else
  {
    sub_10001D9AC(v18);
    uint64_t v11 = v18;
  }

  sub_10001DEBC(v17, v11);
  v16[3] = &type metadata for Table;
  v16[4] = &protocol witness table for Table;
  v16[0] = sub_100038A2C((uint64_t)&unk_100126DA0);
  sub_10001DEBC((void *)(v16[0] + 16LL), v17);
  Connection.prepareRowIterator(_:)(v16);
  uint64_t v12 = sub_10000AC58(v16);
  if (!v2)
  {
    __chkstk_darwin(v12);
    swift_retain();
    RowIterator.compactMap<A>(_:)();
    uint64_t v3 = v14;
    swift_release();
    sub_10000AEE8();
    swift_release();
  }

  return v3;
}

uint64_t sub_1000C4DC8(uint64_t a1, void *a2)
{
  Swift::String v5 = LNEnumMetadata.asJson(prettyPrinted:)(0);
  uint64_t result = v5._countAndFlagsBits;
  if (!v6)
  {
    if (qword_100130450 != -1) {
      swift_once(&qword_100130450, sub_1000C539C);
    }
    sub_10001DEBC(v24, &unk_100134200);
    sub_10001DEBC(v23, &unk_100134200);
    sub_10001D9AC(v24);
    if (qword_100130458 != -1) {
      swift_once(&qword_100130458, sub_1000C53E8);
    }
    uint64_t v7 = sub_10001DECC((uint64_t)&qword_1001342A8);
    v21._uint64_t countAndFlagsBits = a1;
    v21._object = a2;
    <- infix<A>(_:_:)( v7,  v8,  v9,  (uint64_t)&v21,  (uint64_t)type metadata for String,  (uint64_t)&protocol witness table for String);
    uint64_t v10 = sub_100008DB0(&qword_1001323E0);
    uint64_t inited = swift_initStackObject(v10, v20);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5520;
    if (qword_100130468 != -1) {
      swift_once(&qword_100130468, sub_1000C5430);
    }
    uint64_t v12 = sub_10001DECC((uint64_t)&qword_1001342D8);
    Swift::String v21 = v5;
    <- infix<A>(_:_:)( v12,  v13,  v14,  (uint64_t)&v21,  (uint64_t)type metadata for String,  (uint64_t)&protocol witness table for String);
    swift_bridgeObjectRelease();
    uint64_t v15 = QueryType.insert(_:_:)((uint64_t)v22);
    uint64_t v17 = v16;
    uint64_t v19 = v18;
    swift_setDeallocating(inited);
    sub_100058874();
    sub_10001DC30(v22);
    sub_10001DEBC(v25, v23);
    sub_10001DAF0(v25);
    v26.template._uint64_t countAndFlagsBits = v15;
    v26.template._object = v17;
    v26.bindings._rawValue = v19;
    Connection.run(_:)(v26);
    sub_10001BEC0();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_1000C4FD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_100130450 != -1) {
    swift_once(&qword_100130450, sub_1000C539C);
  }
  sub_10001DEBC(v33, &unk_100134200);
  sub_10001D9AC(v33);
  if (qword_100130458 != -1) {
    swift_once(&qword_100130458, sub_1000C53E8);
  }
  sub_10001DECC((uint64_t)&qword_1001342A8);
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  == infix<A>(_:_:)();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  if (qword_100130460 != -1) {
    swift_once(&qword_100130460, sub_1000C540C);
  }
  sub_10001DECC((uint64_t)&unk_1001342C0);
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  == infix<A>(_:_:)();
  && infix(_:_:)(v12, v14, v16, v17, v18, v19);
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  sub_10001BEC0();
  sub_10000AEE8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001DEBC(v28, v33);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.filter(_:)( v21,  v23,  v25,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table,  (uint64_t)&v29);
  sub_10001191C(v25);
  sub_10001191C(v23);
  sub_10001DAF0(v33);
  sub_10001DEBC(v34, &v29);
  uint64_t v31 = &type metadata for Table;
  Swift::String v32 = &protocol witness table for Table;
  uint64_t v29 = sub_100038A2C((uint64_t)&unk_100126DA0);
  sub_10001DEBC((void *)(v29 + 16), v34);
  uint64_t v26 = Connection.pluck(_:)(&v29);
  sub_10000AC58(&v29);
  if (!v5)
  {
    if (v26)
    {
      a5 = sub_1000C5454();
      sub_10001BEC0();
      sub_10000AEE8();
    }

    else
    {
      return 0LL;
    }
  }

  return a5;
}

uint64_t sub_1000C5278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_1000361AC( a1,  a2,  a3,  a4,  1836412517,  0,  16,  0xF96E0,  0x696669746E656469LL,  (void *)0xEA00000000007265LL,  0x617461646174656DLL,  (void *)0xE800000000000000LL,  0xD000000000000021LL,  (void *)0x80000001000FCA50LL);
  if (!v5)
  {
    if (v10)
    {
      a5 = sub_1000C4FD4(a1, a2, v9, v10, a5);
      sub_10000AEE8();
    }

    else
    {
      return 0LL;
    }
  }

  return a5;
}

void *sub_1000C539C()
{
  return memcpy(&unk_100134200, __src, 0xA8uLL);
}

uint64_t sub_1000C53E8(uint64_t a1)
{
  return sub_100028168(a1, (uint64_t)&qword_1001342A8, 0xD000000000000010LL, 0x80000001000F96E0LL);
}

uint64_t sub_1000C540C(uint64_t a1)
{
  return sub_100028168(a1, (uint64_t)&unk_1001342C0, 0x696669746E656469LL, 0xEA00000000007265LL);
}

uint64_t sub_1000C5430(uint64_t a1)
{
  return sub_100028168(a1, (uint64_t)&qword_1001342D8, 0x617461646174656DLL, 0xE800000000000000LL);
}

uint64_t sub_1000C5454()
{
  uint64_t v0 = sub_100008DB0(&qword_100130BC0);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100130458 != -1) {
    swift_once(&qword_100130458, sub_1000C53E8);
  }
  Row.get<A>(_:)();
  uint64_t v3 = v9;
  if (qword_100130468 != -1) {
    swift_once(&qword_100130468, sub_1000C5430);
  }
  Row.get<A>(_:)();
  uint64_t v4 = v9;
  uint64_t v5 = v10;
  sub_1000C56C8();
  uint64_t v6 = type metadata accessor for URL(0LL);
  sub_100009E60((uint64_t)v2, 1LL, 1LL, v6);
  static LNEnumMetadata.fromJSON(_:bundleURL:effectiveBundleIdentifier:)(v4, v5, v2, 0LL);
  sub_100028208((uint64_t)v2);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1000C5610@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }

  return result;
}

uint64_t sub_1000C5640()
{
  uint64_t v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[13]);
  }

  uint64_t v2 = v0[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    uint64_t v3 = v0[16];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v0[17]);
    }
  }

  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184LL, 7LL);
}

unint64_t sub_1000C56C8()
{
  unint64_t result = qword_100132450;
  if (!qword_100132450)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___LNEnumMetadata);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100132450);
  }

  return result;
}

ValueMetadata *type metadata accessor for LNEnumRecord()
{
  return &type metadata for LNEnumRecord;
}

uint64_t sub_1000C5714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_100130470 != -1) {
    swift_once(&qword_100130470, sub_1000C5E44);
  }
  sub_10001DEBC(v29, &unk_1001342F0);
  if (a2)
  {
    sub_10001D9AC(v29);
    if (qword_100130478 != -1) {
      swift_once(&qword_100130478, sub_1000C5E94);
    }
    sub_10001DECC((uint64_t)&qword_100134398);
    v27[0] = a1;
    v27[1] = a2;
    == infix<A>(_:_:)();
    uint64_t v10 = v9;
    uint64_t v12 = v11;
    uint64_t v14 = v13;
    sub_10001DEBC(v26, v29);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    QueryType.filter(_:)( v10,  v12,  v14,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table,  (uint64_t)v27);
    sub_10001191C(v14);
    sub_10001191C(v12);
    sub_10001DAF0(v29);
    uint64_t v15 = v27;
  }

  else
  {
    sub_10001D9AC(v29);
    uint64_t v15 = v29;
  }

  sub_10001DEBC(v28, v15);
  if (a4)
  {
    if (qword_100130490 != -1) {
      swift_once(&qword_100130490, sub_1000C5F8C);
    }
    sub_10001DECC((uint64_t)&unk_1001343E0);
    v26[0] = a3;
    v26[1] = a4;
    == infix<A>(_:_:)();
    uint64_t v17 = v16;
    a3 = v18;
    uint64_t v20 = v19;
    sub_10001DEBC(&v25, v28);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    QueryType.filter(_:)( v17,  a3,  v20,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table,  (uint64_t)v26);
    sub_10001191C(v20);
    sub_10001191C(a3);
    sub_10001DAF0(v28);
    uint64_t v21 = v26;
  }

  else
  {
    uint64_t v21 = v28;
  }

  sub_10001DEBC(v27, v21);
  v26[3] = &type metadata for Table;
  v26[4] = &protocol witness table for Table;
  v26[0] = sub_100038A2C((uint64_t)&unk_100126E48);
  sub_10001DEBC((void *)(v26[0] + 16LL), v27);
  Connection.prepareRowIterator(_:)(v26);
  uint64_t v22 = sub_10000AC58(v26);
  if (!v4)
  {
    __chkstk_darwin(v22);
    swift_retain();
    RowIterator.compactMap<A>(_:)();
    a3 = v24;
    swift_release();
    sub_10000AEE8();
    swift_release();
  }

  return a3;
}

uint64_t sub_1000C5A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_100130470 != -1) {
    swift_once(&qword_100130470, sub_1000C5E44);
  }
  sub_10001DEBC(v33, &unk_1001342F0);
  sub_10001D9AC(v33);
  if (qword_100130478 != -1) {
    swift_once(&qword_100130478, sub_1000C5E94);
  }
  sub_10001DECC((uint64_t)&qword_100134398);
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  == infix<A>(_:_:)();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  if (qword_100130480 != -1) {
    swift_once(&qword_100130480, sub_1000C5EB8);
  }
  sub_10001DECC((uint64_t)&unk_1001343B0);
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  == infix<A>(_:_:)();
  && infix(_:_:)(v12, v14, v16, v17, v18, v19);
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  swift_bridgeObjectRelease();
  sub_10000AEE8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001DEBC(v28, v33);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.filter(_:)( v21,  v23,  v25,  (uint64_t)&type metadata for Table,  (uint64_t)&protocol witness table for Table,  (uint64_t)&v29);
  sub_10001191C(v25);
  sub_10001191C(v23);
  sub_10001DAF0(v33);
  sub_10001DEBC(v34, &v29);
  uint64_t v31 = &type metadata for Table;
  Swift::String v32 = &protocol witness table for Table;
  uint64_t v29 = sub_100038A2C((uint64_t)&unk_100126E48);
  sub_10001DEBC((void *)(v29 + 16), v34);
  uint64_t v26 = Connection.pluck(_:)(&v29);
  sub_10000AC58(&v29);
  if (!v5)
  {
    if (v26)
    {
      a5 = sub_1000C5FB4();
      swift_bridgeObjectRelease();
      sub_10000AEE8();
    }

    else
    {
      return 0LL;
    }
  }

  return a5;
}

uint64_t sub_1000C5D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_1000361AC( a1,  a2,  a3,  a4,  1919251825,  0,  16,  0xF96E0,  0x6564497972657571LL,  (void *)0xEF7265696669746ELL,  0x617461646174656DLL,  (void *)0xE800000000000000LL,  0xD000000000000021LL,  (void *)0x80000001000FCA50LL);
  if (!v5)
  {
    if (v10)
    {
      a5 = sub_1000C5A68(a1, a2, v9, v10, a5);
      sub_10000AEE8();
    }

    else
    {
      return 0LL;
    }
  }

  return a5;
}

void *sub_1000C5E44()
{
  return memcpy(&unk_1001342F0, __src, 0xA8uLL);
}

uint64_t sub_1000C5E94(uint64_t a1)
{
  return sub_100028168(a1, (uint64_t)&qword_100134398, 0xD000000000000010LL, 0x80000001000F96E0LL);
}

uint64_t sub_1000C5EB8(uint64_t a1)
{
  return sub_100028168(a1, (uint64_t)&unk_1001343B0, 0x6564497972657571LL, 0xEF7265696669746ELL);
}

uint64_t sub_1000C5EE4(uint64_t a1)
{
  return sub_100028168(a1, (uint64_t)&qword_1001343C8, 0x617461646174656DLL, 0xE800000000000000LL);
}

uint64_t sub_1000C5F04()
{
  uint64_t v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[13]);
  }

  uint64_t v2 = v0[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    uint64_t v3 = v0[16];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v0[17]);
    }
  }

  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184LL, 7LL);
}

uint64_t sub_1000C5F8C(uint64_t a1)
{
  return sub_100028168(a1, (uint64_t)&unk_1001343E0, 0x7079547972657571LL, 0xE900000000000065LL);
}

uint64_t sub_1000C5FB4()
{
  uint64_t v0 = sub_100008DB0(&qword_100130BC0);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100130478 != -1) {
    swift_once(&qword_100130478, sub_1000C5E94);
  }
  Row.get<A>(_:)();
  uint64_t v3 = v9;
  if (qword_100130488 != -1) {
    swift_once(&qword_100130488, sub_1000C5EE4);
  }
  Row.get<A>(_:)();
  uint64_t v4 = v9;
  uint64_t v5 = v10;
  sub_1000C6170();
  uint64_t v6 = type metadata accessor for URL(0LL);
  sub_100009E60((uint64_t)v2, 1LL, 1LL, v6);
  static LNQueryMetadata.fromJSON(_:bundleURL:effectiveBundleIdentifier:)(v4, v5, v2, 0LL);
  sub_100028208((uint64_t)v2);
  swift_bridgeObjectRelease();
  return v3;
}

unint64_t sub_1000C6170()
{
  unint64_t result = qword_100132460;
  if (!qword_100132460)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___LNQueryMetadata);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100132460);
  }

  return result;
}

ValueMetadata *type metadata accessor for LNQueryRecord()
{
  return &type metadata for LNQueryRecord;
}

void sub_1000C61BC(uint64_t a1)
{
  uint64_t v4 = &unk_1000F7978;
  sub_100038798(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v5 = *(void *)(v2 - 8) + 64LL;
    uint64_t v6 = &unk_1000F7990;
    uint64_t v7 = v5;
    uint64_t v8 = (char *)&value witness table for Builtin.BridgeObject + 64;
    uint64_t v9 = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initClassMetadata2(a1, 0LL, 6LL, &v4, a1 + 88);
  }

void sub_1000C625C()
{
}

uint64_t sub_1000C62D8(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v6 = qword_100130118;
  sub_1000C6AEC(a1, a2);
  id v7 = a3;
  if (v6 != -1) {
    swift_once(&qword_100130118, sub_100028A34);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  sub_100008D98(v8, (uint64_t)qword_100135220);
  id v9 = v7;
  sub_10000AFB0();
  id v10 = v9;
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc(22LL, -1LL);
    uint64_t v14 = swift_slowAlloc(64LL, -1LL);
    uint64_t v20 = v14;
    *(_DWORD *)uint64_t v13 = 136315394;
    sub_10000AFB0();
    uint64_t v19 = sub_10000DE60(a1, a2, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    *(_WORD *)(v13 + 1sub_100096760(v0[56], v0 + 2) = 2080;
    uint64_t v15 = sub_1000C6930(v10);
    if (v16)
    {
      unint64_t v17 = v16;
    }

    else
    {
      uint64_t v15 = 0x6E776F6E6B6E753CLL;
      unint64_t v17 = 0xE90000000000003ELL;
    }

    uint64_t v19 = sub_10000DE60(v15, v17, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v13 + 14, v13 + 22);

    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Created StreamReference %s at %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 2LL);
    sub_10000AD78(v14);
    sub_10000AD78(v13);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  return a1;
}

uint64_t sub_1000C6508(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100008DB0((uint64_t *)&unk_100134508);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = URL.lastPathComponent.getter(v4);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10)
  {
    uint64_t v11 = v7;
    uint64_t v12 = sub_100008DB0((uint64_t *)&unk_100131830);
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = a2 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    uint64_t v15 = *(void *)(v13 + 72);
    uint64_t v20 = a2;
    __n128 v16 = swift_bridgeObjectRetain(a2);
    while (1)
    {
      Regex.wholeMatch(in:)(v11, v9, v12, v16);
      uint64_t v17 = sub_100008DB0((uint64_t *)&unk_100134518);
      sub_10001B60C((uint64_t)v6, (uint64_t *)&unk_100134508);
      v14 += v15;
      if (!--v10)
      {
        swift_bridgeObjectRelease(v9);
        uint64_t v18 = v20;
        goto LABEL_7;
      }
    }

    sub_10001B60C((uint64_t)v6, (uint64_t *)&unk_100134508);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v20);
    return 1LL;
  }

  else
  {
    uint64_t v18 = v8;
LABEL_7:
    swift_bridgeObjectRelease(v18);
    return 0LL;
  }

uint64_t sub_1000C66A4(uint64_t a1, uint64_t a2, void *a3)
{
  v4._uint64_t countAndFlagsBits = 544497952LL;
  v4._object = (void *)0xE400000000000000LL;
  String.append(_:)(v4);
  uint64_t v5 = sub_1000C6930(a3);
  if (v6)
  {
    unint64_t v7 = v6;
  }

  else
  {
    uint64_t v5 = 0x6E776F6E6B6E753CLL;
    unint64_t v7 = 0xE90000000000003ELL;
  }

  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t sub_1000C6728()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for StreamManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000C8B4(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StreamManager);
}

uint64_t Select.template.getter(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t sub_1000C6784(uint64_t a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000C67C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  BOOL v8 = a1 == a4 && a2 == a5;
  if (!v8 && (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 0LL) & 1) == 0) {
    return 0LL;
  }
  sub_10004E004();
  return static NSObject.== infix(_:_:)(a3, a6) & 1;
}

void sub_1000C682C(uint64_t a1)
{
}

uint64_t sub_1000C686C()
{
  return Select.template.getter(*v0, v0[1]);
}

void sub_1000C6874()
{
}

uint64_t sub_1000C687C(uint64_t a1)
{
  return sub_1000C6784(a1);
}

Swift::Int sub_1000C6884(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1000C68D8(uint64_t *a1, uint64_t *a2)
{
  return sub_1000C67C4(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

void sub_1000C68F4(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  sub_1000C6AF4(a1);
  Hasher._combine(_:)(v1);
  Hasher._finalize()();
  sub_10006E2C0();
}

void sub_1000C6928()
{
}

uint64_t sub_1000C6930(void *a1)
{
  id v1 = [a1 datastorePath];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

ValueMetadata *type metadata accessor for StreamReference()
{
  return &type metadata for StreamReference;
}

uint64_t storeEnumTagSinglePayload for StreamManagerError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(sub_100075674(v3, v4) = 1;
  }
  else {
    LODWORD(sub_100075674(v3, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1000C69EC + 4 * byte_1000F7945[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000C6A20 + 4 * asc_1000F7940[v4]))();
}

uint64_t sub_1000C6A20(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C6A28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000C6A30LL);
  }
  return result;
}

uint64_t sub_1000C6A3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000C6A44LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1000C6A48(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C6A50(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StreamManagerError()
{
  return &type metadata for StreamManagerError;
}

unint64_t sub_1000C6A70()
{
  unint64_t result = qword_100134528;
  if (!qword_100134528)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F7A44, &type metadata for StreamManagerError);
    atomic_store(result, (unint64_t *)&qword_100134528);
  }

  return result;
}

unint64_t sub_1000C6AB0()
{
  unint64_t result = qword_100134530;
  if (!qword_100134530)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F7A6C, &type metadata for StreamReference);
    atomic_store(result, (unint64_t *)&qword_100134530);
  }

  return result;
}

uint64_t sub_1000C6AEC(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

void *sub_1000C6AF4(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, 0LL);
}

uint64_t sub_1000C6B00(uint64_t a1)
{
  return String.hash(into:)(a1, v2, v1);
}

uint64_t sub_1000C6B0C(void *a1)
{
  return swift_bridgeObjectRelease(a1[16]);
}

void *sub_1000C6B8C(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v5 = a2[2];
  uint64_t v4 = a2[3];
  a1[2] = v5;
  a1[3] = v4;
  uint64_t v7 = a2[4];
  uint64_t v6 = a2[5];
  a1[4] = v7;
  a1[5] = v6;
  uint64_t v8 = a2[6];
  uint64_t v9 = a2[7];
  a1[6] = v8;
  a1[7] = v9;
  uint64_t v10 = a2[8];
  uint64_t v11 = a2[9];
  a1[8] = v10;
  a1[9] = v11;
  uint64_t v13 = a2[10];
  uint64_t v12 = a2[11];
  a1[10] = v13;
  a1[11] = v12;
  uint64_t v14 = a2[12];
  uint64_t v15 = a2[13];
  a1[12] = v14;
  a1[13] = v15;
  uint64_t v17 = a2[14];
  uint64_t v18 = a2[15];
  a1[14] = v17;
  a1[15] = v18;
  uint64_t v19 = a2[16];
  a1[16] = v19;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  return a1;
}

void *sub_1000C6C88(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[5] = a2[5];
  uint64_t v10 = a2[6];
  uint64_t v11 = a1[6];
  a1[6] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a2[7];
  uint64_t v13 = a1[7];
  a1[7] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = a2[8];
  uint64_t v15 = a1[8];
  a1[8] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = a2[9];
  uint64_t v17 = a1[9];
  a1[9] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = a2[10];
  uint64_t v19 = a1[10];
  a1[10] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  a1[11] = a2[11];
  uint64_t v20 = a2[12];
  uint64_t v21 = a1[12];
  a1[12] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  uint64_t v22 = a2[13];
  uint64_t v23 = a1[13];
  a1[13] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = a2[14];
  uint64_t v25 = a1[14];
  a1[14] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  uint64_t v26 = a2[15];
  uint64_t v27 = a1[15];
  a1[15] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  uint64_t v28 = a2[16];
  uint64_t v29 = a1[16];
  a1[16] = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  return a1;
}

void *sub_1000C6E0C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x88uLL);
}

void *sub_1000C6E14(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = a1[4];
  a1[3] = *(void *)(a2 + 24);
  a1[4] = v5;
  swift_bridgeObjectRelease(v6);
  a1[5] = *(void *)(a2 + 40);
  swift_bridgeObjectRelease(a1[6]);
  uint64_t v7 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(a1[8]);
  uint64_t v8 = a1[9];
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a1[10];
  a1[10] = *(void *)(a2 + 80);
  swift_bridgeObjectRelease(v9);
  a1[11] = *(void *)(a2 + 88);
  swift_bridgeObjectRelease(a1[12]);
  uint64_t v10 = a1[13];
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(a1[14]);
  uint64_t v11 = a1[15];
  *((_OWORD *)a1 + 7) = *(_OWORD *)(a2 + 112);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a1[16];
  a1[16] = *(void *)(a2 + 128);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_1000C6EF8(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 136))
    {
      LODWORD(vsub_100096760(v0[56], v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(vsub_100096760(v0[56], v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(vsub_100096760(v0[56], v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_1000C6F38(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 7sub_100096760(v0[56], v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for ApplicationMetadata()
{
}

void *sub_1000C6FA4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v3)
  {
    while (1)
    {
      uint64_t v23 = v3;
      unint64_t v4 = 0LL;
      while ((a1 & 0xC000000000000001LL) != 0)
      {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
LABEL_7:
        uint64_t v6 = v5;
        unint64_t v7 = v4 + 1;
        if (__OFADD__(v4, 1LL)) {
          goto LABEL_20;
        }
        id v8 = [v5 parentIdentifier];
        uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
        uint64_t v11 = v10;

        id v12 = [a2 identifier];
        uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
        uint64_t v15 = v14;

        if (v9 == v13 && v11 == v15)
        {
          uint64_t v18 = swift_bridgeObjectRelease_n(v11, 2LL);
LABEL_15:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v18);
          uint64_t v19 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v19);
          uint64_t v20 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v6);
          specialized ContiguousArray._endMutation()(v20);
          goto LABEL_16;
        }

        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v11, v13, v15, 0LL);
        swift_bridgeObjectRelease(v11);
        uint64_t v18 = swift_bridgeObjectRelease(v15);
        if ((v17 & 1) != 0) {
          goto LABEL_15;
        }

LABEL_16:
        ++v4;
        if (v7 == v23) {
          goto LABEL_25;
        }
      }

      if (v4 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      if (a1 < 0) {
        uint64_t v21 = a1;
      }
      else {
        uint64_t v21 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v21);
      if (!v3) {
        goto LABEL_25;
      }
    }

    id v5 = *(id *)(a1 + 8 * v4 + 32);
    goto LABEL_7;
  }

uint64_t sub_1000C719C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  if (v4)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v4);
    uint64_t result = a3(v3);
    if (result < 0 || (unint64_t v8 = result, result >= 1LL << *(_BYTE *)(v3 + 32)))
    {
LABEL_13:
      __break(1u);
      return (uint64_t)_swiftEmptyArrayStorage;
    }

    else
    {
      int v9 = v7;
      uint64_t v10 = v3 + 64;
      uint64_t v16 = v3;
      while ((*(void *)(v10 + 8 * (v8 >> 6)) & (1LL << v8)) != 0)
      {
        if (v9 != *(_DWORD *)(v3 + 36)) {
          goto LABEL_17;
        }
        id v11 = *(id *)(*(void *)(v3 + 56) + 8 * v8);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
        uint64_t v12 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
        id v13 = v11;
        uint64_t v3 = v16;
        uint64_t v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v13);
        uint64_t result = specialized ContiguousArray._endMutation()(v14);
        uint64_t v15 = -1LL << *(_BYTE *)(v16 + 32);
        if ((*(void *)(v10 + 8 * (v8 >> 6)) & (1LL << v8)) == 0) {
          goto LABEL_19;
        }
        if (v9 != *(_DWORD *)(v16 + 36)) {
          goto LABEL_20;
        }
        uint64_t result = _HashTable.occupiedBucket(after:)(v8, v10, ~v15);
        if (!--v4) {
          return (uint64_t)_swiftEmptyArrayStorage;
        }
        unint64_t v8 = result;
        if ((result & 0x8000000000000000LL) == 0)
        {
          int v9 = *(_DWORD *)(v16 + 36);
          if (result < 1LL << *(_BYTE *)(v16 + 32)) {
            continue;
          }
        }

        goto LABEL_13;
      }

      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_1000C7334(uint64_t a1, uint64_t a2)
{
  Swift::String v38 = _swiftEmptyArrayStorage;
  uint64_t result = sub_100033164(a1, v37);
  uint64_t v3 = v37[0];
  uint64_t v4 = v37[1];
  int64_t v36 = v37[3];
  unint64_t v5 = v37[4];
  int64_t v6 = (unint64_t)(v37[2] + 64LL) >> 6;
  Swift::String v35 = (void *)LNSystemEntityProtocolIdentifierUniqueEntity;
  while (1)
  {
    if (v5)
    {
      unint64_t v7 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v8 = v7 | (v36 << 6);
      goto LABEL_20;
    }

    int64_t v9 = v36 + 1;
    if (__OFADD__(v36, 1LL)) {
      break;
    }
    if (v9 >= v6) {
      goto LABEL_30;
    }
    unint64_t v10 = *(void *)(v4 + 8 * v9);
    int64_t v11 = v36 + 1;
    if (!v10)
    {
      int64_t v11 = v36 + 2;
      if (v36 + 2 >= v6) {
        goto LABEL_30;
      }
      unint64_t v10 = *(void *)(v4 + 8 * v11);
      if (!v10)
      {
        int64_t v11 = v36 + 3;
        if (v36 + 3 >= v6) {
          goto LABEL_30;
        }
        unint64_t v10 = *(void *)(v4 + 8 * v11);
        if (!v10)
        {
          int64_t v11 = v36 + 4;
          if (v36 + 4 >= v6) {
            goto LABEL_30;
          }
          unint64_t v10 = *(void *)(v4 + 8 * v11);
          if (!v10)
          {
            int64_t v11 = v36 + 5;
            if (v36 + 5 >= v6) {
              goto LABEL_30;
            }
            unint64_t v10 = *(void *)(v4 + 8 * v11);
            if (!v10)
            {
              int64_t v12 = v36 + 6;
              while (v12 < v6)
              {
                unint64_t v10 = *(void *)(v4 + 8 * v12++);
                if (v10)
                {
                  int64_t v11 = v12 - 1;
                  goto LABEL_19;
                }
              }

void sub_1000C760C(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = v3;
  if (qword_100130498 != -1) {
    swift_once(&qword_100130498, sub_1000C9500);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_100008D98(v6, (uint64_t)qword_100135CE0);
  sub_1000CAB20(v7, (uint64_t)v83);
  unint64_t v8 = (os_log_s *)sub_1000B716C();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  if (v10)
  {
    uint64_t v15 = (uint8_t *)sub_1000CA988();
    uint64_t v16 = sub_10000AE10(32LL);
    uint64_t v87 = v16;
    *(_DWORD *)uint64_t v15 = 136315138;
    uint64_t v17 = &v15[v2];
    uint64_t v19 = v84;
    uint64_t v18 = v85;
    sub_100008D74(v83, v84);
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)(v18 + 8) + 8LL))(v19);
    sub_1000CAA40(v20, v21);
    sub_1000CAAD0();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v22, v23, v24, v17);
    uint64_t v25 = sub_10000ADB0();
    sub_1000CA9A4(v25, v26, v27, v28, v29);
    sub_10000AF5C((void *)&_mh_execute_header, v8, v9, "Loading combined static metadata for bundle %s", v15);
    sub_10000AF48(v16);
    uint64_t v30 = v16;
    uint64_t v4 = v3;
    sub_10000AD78(v30);
    sub_10000AD78((uint64_t)v15);
  }

  else
  {
    sub_1000CA9A4(v10, v11, v12, v13, v14);
  }

  uint64_t v31 = sub_10000A1A0(0LL, &qword_100134570, &OBJC_CLASS___LNBundleMetadata_ptr);
  uint64_t v33 = a1[3];
  uint64_t v32 = a1[4];
  sub_100008D74(a1, v33);
  uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)(v32 + 8) + 8LL))(v33);
  uint64_t v35 = v31;
  int64_t v36 = (void *)LNBundleMetadata.init(bundleIdentifier:)(v34);
  if (!v4)
  {
    AppIntents_SQLite::Insert v37 = v36;
    id v38 = [v36 generator];

    if (v38)
    {
      sub_1000CAB20(v39, (uint64_t)v83);
      Swift::String v40 = (os_log_s *)sub_1000B716C();
      os_log_type_t v41 = static os_log_type_t.info.getter();
      BOOL v42 = os_log_type_enabled(v40, v41);
      if (v42)
      {
        Swift::String v47 = (uint8_t *)sub_1000CA988();
        uint64_t v80 = sub_10000AE10(32LL);
        uint64_t v87 = v80;
        *(_DWORD *)Swift::String v47 = 136315138;
        uint64_t v48 = sub_1000CA9D0(v83);
        sub_1000CAA40(v48, v49);
        sub_1000CAAD0();
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v50, v51, v52, &v47[v35]);
        uint64_t v53 = sub_10000ADB0();
        sub_1000CA9A4(v53, v54, v55, v56, v57);
        sub_10000AF5C((void *)&_mh_execute_header, v40, v41, "Ingesting static metadata for %s", v47);
        sub_10000AF48(v80);
        sub_10000AD78(v80);
        sub_10000AD78((uint64_t)v47);
      }

      else
      {
        sub_1000CA9A4(v42, v43, v44, v45, v46);
      }

      uint64_t v74 = sub_10000A1A0(0LL, (unint64_t *)&qword_100130BA0, &OBJC_CLASS___LNSystemProtocol_ptr);
      unint64_t v75 = sub_100038038();
      uint64_t v76 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v74, &type metadata for String, v75);
      id v77 = sub_100008D74(a1, a1[3]);
      sub_1000CA360((uint64_t)v77, v76, v37, __src);

      swift_bridgeObjectRelease(v76);
      memcpy(a2, __src, 0x88uLL);
    }

    else
    {
      sub_1000CAB20(v39, (uint64_t)v83);
      Swift::String v58 = (os_log_s *)sub_1000B716C();
      os_log_type_t v59 = static os_log_type_t.error.getter();
      BOOL v60 = os_log_type_enabled(v58, v59);
      if (v60)
      {
        Swift::String v65 = (uint8_t *)sub_1000CA988();
        uint64_t v66 = sub_10000AE10(32LL);
        uint64_t v87 = v66;
        *(_DWORD *)Swift::String v65 = 136315138;
        uint64_t v67 = sub_1000CA9D0(v83);
        uint64_t v82 = sub_1000CAA40(v67, v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v83, v65 + 4, &v65[v35]);
        uint64_t v69 = sub_10000ADB0();
        sub_1000CA9A4(v69, v70, v71, v72, v73);
        sub_10000AF5C((void *)&_mh_execute_header, v58, v59, "Undefined compile time metadata generator for %s", v65);
        sub_10000AF48(v66);
        sub_10000AD78(v66);
        sub_10000AD78((uint64_t)v65);
      }

      else
      {
        sub_1000CA9A4(v60, v61, v62, v63, v64);
      }

      unint64_t v78 = sub_1000CA820();
      swift_allocError(&unk_100127270, v78, 0LL, 0LL);
      *uint64_t v79 = 2;
      swift_willThrow();
    }
  }

uint64_t sub_1000C7A68(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v277 = a1;
  sub_100008DB0(&qword_100134540);
  sub_100027F2C();
  __chkstk_darwin(v3);
  sub_1000B71C0();
  uint64_t v5 = sub_1000CAAE8(v4);
  uint64_t v6 = type metadata accessor for AssistantPrebuiltEntity(v5);
  uint64_t v264 = *(void *)(v6 - 8);
  sub_100027F2C();
  __chkstk_darwin(v7);
  sub_1000B71C0();
  uint64_t v268 = v8;
  sub_100008DB0(&qword_100134548);
  sub_100027F2C();
  __chkstk_darwin(v9);
  sub_1000B71C0();
  uint64_t v11 = sub_1000CAAE8(v10);
  uint64_t v12 = type metadata accessor for AssistantPrebuiltEnum(v11);
  *(void *)&__int128 v265 = *(void *)(v12 - 8);
  sub_100027F2C();
  __chkstk_darwin(v13);
  sub_1000B71C0();
  uint64_t v269 = (void *)v14;
  sub_100008DB0((uint64_t *)&unk_100134550);
  sub_100027F2C();
  __chkstk_darwin(v15);
  sub_1000B71C0();
  uint64_t v17 = sub_1000CAAE8(v16);
  *(void *)&__int128 v258 = type metadata accessor for AssistantPrebuiltIntent(v17);
  uint64_t v266 = *(uint64_t **)(v258 - 8);
  sub_100027F2C();
  __chkstk_darwin(v18);
  sub_1000B71C0();
  uint64_t v270 = v19;
  unint64_t v20 = type metadata accessor for Logger(0LL);
  unint64_t v21 = *(char ***)(v20 - 8);
  __chkstk_darwin(v20);
  unint64_t v23 = (unint64_t)v248 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24);
  uint64_t v26 = (os_log_s *)((char *)v248 - v25);
  __chkstk_darwin(v27);
  unint64_t v29 = (unint64_t)v248 - v28;
  __chkstk_darwin(v30);
  uint64_t v32 = (char **)((char *)v248 - v31);
  if (qword_1001302E0 != -1) {
    goto LABEL_136;
  }
LABEL_2:
  uint64_t v33 = sub_100008D98(v20, (uint64_t)qword_100135798);
  ((void (*)(char **, uint64_t, unint64_t))v21[2])(v32, v33, v20);
  uint64_t v34 = v2[1];
  unint64_t v256 = *v2;
  uint64_t v35 = v2[2];
  *(void *)&__int128 v263 = v2 + 2;
  unint64_t v267 = v6;
  uint64_t v254 = (void *)v23;
  uint64_t v273 = v34;
  uint64_t v275 = v12;
  uint64_t v255 = v26;
  *(void *)&__int128 v257 = v29;
  uint64_t v271 = v21;
  unint64_t v272 = v20;
  uint64_t v274 = v32;
  if (!((unint64_t)v35 >> 62))
  {
    unint64_t v20 = *(void *)((v35 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain();
    sub_1000CAB98();
    goto LABEL_4;
  }

  if (v35 < 0) {
    unint64_t v23 = v35;
  }
  else {
    unint64_t v23 = v35 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  sub_10000AE38();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v23);
  sub_10000ADB0();
  if (v6 < 0)
  {
    __break(1u);
LABEL_142:
    if (v35 < 0) {
      unint64_t v23 = v35;
    }
    else {
      unint64_t v23 = v35 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_10000AE38();
    uint64_t v32 = (char **)_CocoaArrayWrapper.endIndex.getter(v23);
    sub_10000ADB0();
    if (((unint64_t)v32 & 0x8000000000000000LL) != 0)
    {
      __break(1u);
      goto LABEL_147;
    }

    unint64_t v23 = (unint64_t)v266;
    goto LABEL_45;
  }

  while (1)
  {
    sub_1000CAB98();
    unint64_t v20 = v6;
LABEL_4:
    uint64_t v276 = v2;
    unint64_t v21 = v259;
    uint64_t v12 = v263;
    if (v20)
    {
      unint64_t v29 = 0LL;
      uint64_t v32 = &selRef_assistantDefinedSchemas;
      uint64_t v253 = &v279;
      *(void *)&__int128 v36 = 136315394LL;
      __int128 v249 = v36;
      v248[1] = (char *)&type metadata for Any + 8;
      *(void *)&__int128 v36 = 136315650LL;
      __int128 v250 = v36;
      unint64_t v260 = v20;
      do
      {
        if (v20 == v29)
        {
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          swift_once(&qword_1001302E0, sub_100088828);
          goto LABEL_2;
        }

        unint64_t v37 = *(void *)v12;
        if ((*(void *)v12 & 0xC000000000000001LL) != 0)
        {
          id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v29, v37);
        }

        else
        {
          if (v29 >= *(void *)((v37 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
            goto LABEL_125;
          }
          id v38 = sub_10003F0A0(v37 + 8 * v29);
        }

        unint64_t v23 = (unint64_t)v38;
        if (sub_100026BAC( v38,  (SEL *)&selRef_assistantDefinedSchemas,  &qword_100134560,  &OBJC_CLASS___LNAssistantDefinedSchemaConformance_ptr))
        {
          sub_1000CAAF8();
          if (v39)
          {
            if (!sub_1000CAA4C())
            {
LABEL_39:

              sub_10000ADB0();
              goto LABEL_40;
            }
          }

          else if (!*(void *)(v6 + 16))
          {
            goto LABEL_39;
          }

          if ((v35 & 0xC000000000000001LL) != 0)
          {
            uint64_t v40 = sub_1000CA9AC();
          }

          else
          {
            if (!*(void *)(v6 + 16)) {
              goto LABEL_130;
            }
            uint64_t v40 = (uint64_t)sub_1000CAB18();
          }

          os_log_type_t v41 = (void *)v40;
          uint64_t v42 = sub_10000ADB0();
          uint64_t v43 = AssistantPrebuiltLibrary.intents.getter(v42);
          uint64_t v44 = sub_1000C932C();
          if (*(void *)(v43 + 16) && (sub_100015F98(v44, v45), (v46 & 1) != 0))
          {
            sub_1000CAB08();
            v47(v21);
            uint64_t v48 = 0LL;
          }

          else
          {
            uint64_t v48 = 1LL;
          }

          sub_100009E60((uint64_t)v21, v48, 1LL, (uint64_t)v26);
          sub_10001BEC0();
          sub_10000AEE8();
          if (sub_100009E6C((uint64_t)v21, 1LL, (uint64_t)v26) == 1)
          {
            sub_10000C218((uint64_t)v21, (uint64_t *)&unk_100134550);
            uint64_t v279 = &unk_100127290;
            uint64_t v49 = sub_100008DB0((uint64_t *)&unk_100132590);
            uint64_t v35 = sub_1000CA9B8(v49);
            if (!LNLogSubsystem) {
              goto LABEL_152;
            }
            uint64_t v51 = v50;
            uint64_t v52 = String.init(cString:)(LNLogSubsystem);
            uint64_t v53 = (void *)v257;
            Logger.init(subsystem:category:)(v52, v54, v35, v51);
            uint64_t v6 = v41;
            id v55 = (id)v23;
            sub_1000B6D00();
            unint64_t v23 = (unint64_t)sub_1000CAB84();
            uint64_t v35 = (uint64_t)v53;
            Logger.logObject.getter(v23);
            os_log_type_t v56 = sub_10000AF38();
            if (sub_100068360(v56))
            {
              uint64_t v57 = sub_10000AE10(22LL);
              uint64_t v58 = sub_10000AE10(64LL);
              sub_1000CAB8C(v58, (uint64_t)&v278);
              sub_1000CAA80((uint64_t)&v273);
              id v60 = sub_100011ADC(v59, "name");
              uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
              unint64_t v63 = v62;

              uint64_t v64 = sub_10000DE60(v61, v63, (uint64_t *)&v279);
              uint64_t v65 = sub_1000CAB64(v64);
              uint64_t v67 = *(void *)(v66 - 256);
              sub_1000B642C(v65, v67, v68, v69);

              sub_10001DF40();
              *(_WORD *)(v57 + 1sub_100096760(v0[56], v0 + 2) = 2080;
              id v70 = [(id)v23 identifier];
              uint64_t v26 = (os_log_s *)static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
              unint64_t v72 = v71;

              unint64_t v21 = v259;
              sub_1000CAB98();
              uint64_t v75 = sub_10000DE60(v73, v72, v74);
              uint64_t v76 = sub_1000CAB58(v75);
              sub_1000B642C(v76, v67, v77, v78);

              uint64_t v2 = v276;
              swift_bridgeObjectRelease();
              uint64_t v6 = v252;
              sub_1000CAB44(v252, 2LL);
              sub_10000AD78(v6);
              sub_10000AD78(v57);

              sub_1000CA9C4();
              uint64_t v80 = v257;
            }

            else
            {

              sub_1000CA9C4();
              uint64_t v80 = (uint64_t)v53;
            }

            sub_1000CABB8(v80, v79);
            uint64_t v12 = v263;
          }

          else
          {
            ((void (*)(void **, char **, os_log_s *))v266[4])(v270, v21, v26);
            uint64_t v81 = v273;
            sub_100011A3C(v273);
            id v82 = v41;
            id v83 = (id)v23;
            unint64_t v23 = (unint64_t)v82;
            uint64_t v32 = (char **)v83;
            uint64_t v26 = (os_log_s *)sub_1000CAB30();
            os_log_type_t v84 = static os_log_type_t.info.getter();
            if (sub_1000CAAB0(v84))
            {
              uint64_t v85 = sub_10000AE10(32LL);
              uint64_t v86 = sub_10000AE10(96LL);
              sub_1000CAB8C(v86, (uint64_t)&v278);
              sub_1000CAA80((uint64_t)&v275);
              uint64_t v87 = sub_1000C932C();
              uint64_t v89 = sub_1000B804C(v87, v88);
              uint64_t v90 = sub_1000CAB64(v89);
              sub_1000B642C(v90, *(void *)(v91 - 256), v92, v93);

              sub_10000ADB0();
              *(_WORD *)(v85 + 1sub_100096760(v0[56], v0 + 2) = 2080;
              sub_10001C064();
              uint64_t v94 = sub_1000CAA70();
              uint64_t v96 = sub_10000DE60(v94, v81, v95);
              sub_1000CA974(v96, v97, v98, v85 + 22);
              uint64_t v99 = sub_100027E5C(v81);
              *(_WORD *)(v85 + 2sub_100096760(v0[56], v0 + 2) = 2080;
              id v100 = sub_100011ADC(v99, "identifier");
              uint64_t v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
              unint64_t v103 = v102;

              uint64_t v104 = sub_10000DE60(v101, v103, (uint64_t *)&v279);
              sub_1000CA974(v104, v105, v106, v85 + 32);

              sub_10001BEC0();
              sub_1000CAB28((void *)&_mh_execute_header, v26, v251, "Applying %s to %s:%s", (uint8_t *)v85);
              uint64_t v107 = v252;
              sub_1000CAA34();
              sub_10000AD78(v107);
              sub_10000AD78(v85);
            }

            else
            {

              sub_10001191C(v81);
            }

            uint64_t v2 = v276;
            uint64_t v12 = v263;
            uint64_t v6 = AssistantPrebuiltIntent.metadata.getter();
            sub_1000C932C();
            NSString v108 = sub_1000CABA4();
            sub_10000ADB0();
            sub_1000CAB4C(v32, "copyWithDescriptiveMetadataFromAction:usingLibraryKey:");
            sub_100028040();

            unint64_t v20 = *(void *)v12;
            swift_isUniquelyReferenced_nonNull_bridgeObject(*(void *)v12);
            *(void *)uint64_t v12 = v20;
            unint64_t v21 = v259;
            sub_1000CAB98();
            if (!v109 || (v20 & 0x8000000000000000LL) != 0 || (v20 & 0x4000000000000000LL) != 0)
            {
              unint64_t v20 = sub_1000B1240(v20);
              *(void *)uint64_t v12 = v20;
            }

            if (v29 >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
              goto LABEL_133;
            }
            sub_1000CA998((v20 & 0xFFFFFFFFFFFFFF8LL) + 8 * v29);
            uint64_t v35 = v12;
            specialized Array._endMutation()(v110);

            ((void (*)(void **, os_log_s *))v266[1])(v270, v26);
          }

          unint64_t v20 = v260;
          uint64_t v32 = &selRef_assistantDefinedSchemas;
        }

        else
        {
        }

LABEL_80:
        ++v20;
      }

      while (v32 != (char **)v20);
    }

    unint64_t v181 = v2[8];
    v2 += 8;
    uint64_t v35 = v181;
    if (!(v181 >> 62)) {
      break;
    }
LABEL_147:
    if (v35 < 0) {
      uint64_t v6 = v35;
    }
    else {
      uint64_t v6 = v35 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_10000AE38();
    unint64_t v20 = sub_100011A50();
    sub_10000ADB0();
    if ((v20 & 0x8000000000000000LL) == 0) {
      goto LABEL_85;
    }
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
  }

  unint64_t v20 = *(void *)((v35 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_85:
  if (v20)
  {
    unint64_t v23 = 0LL;
    unint64_t v21 = &selRef_assistantDefinedSchemas;
    uint64_t v32 = (char **)&qword_100134560;
    uint64_t v12 = (uint64_t)&OBJC_CLASS___LNAssistantDefinedSchemaConformance_ptr;
    uint64_t v270 = &v279;
    *(void *)&__int128 v36 = 136315394LL;
    __int128 v263 = v36;
    uint64_t v262 = (char *)&type metadata for Any + 8;
    *(void *)&__int128 v36 = 136315650LL;
    __int128 v265 = v36;
    uint64_t v275 = v20;
    uint64_t v276 = v2;
    do
    {
      if (v20 == v23) {
        goto LABEL_128;
      }
      unint64_t v182 = *v2;
      if ((*v2 & 0xC000000000000001LL) != 0)
      {
        uint64_t v183 = (os_log_s *)specialized _ArrayBuffer._getElementSlowPath(_:)(v23, v182);
      }

      else
      {
        if (v23 >= *(void *)((v182 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
          goto LABEL_129;
        }
        uint64_t v183 = (os_log_s *)sub_10003F0A0(v182 + 8 * v23);
      }

      uint64_t v26 = v183;
      if (sub_100026BAC( v183,  (SEL *)&selRef_assistantDefinedSchemas,  &qword_100134560,  &OBJC_CLASS___LNAssistantDefinedSchemaConformance_ptr))
      {
        sub_1000CAAF8();
        if (v184)
        {
          if (!sub_1000CAA4C())
          {
LABEL_119:

            sub_10000ADB0();
            goto LABEL_120;
          }
        }

        else if (!*(void *)(v6 + 16))
        {
          goto LABEL_119;
        }

        if ((v35 & 0xC000000000000001LL) != 0)
        {
          uint64_t v185 = sub_1000CA9AC();
        }

        else
        {
          if (!*(void *)(v6 + 16)) {
            goto LABEL_132;
          }
          uint64_t v185 = (uint64_t)sub_1000CAB18();
        }

        uint64_t v186 = (void *)v185;
        uint64_t v187 = sub_10000ADB0();
        uint64_t v188 = AssistantPrebuiltLibrary.entities.getter(v187);
        uint64_t v189 = sub_1000C932C();
        if (*(void *)(v188 + 16) && (sub_100015F98(v189, v190), (v191 & 1) != 0))
        {
          sub_1000CAB08();
          uint64_t v6 = v261;
          v192(v261);
          uint64_t v193 = 0LL;
        }

        else
        {
          uint64_t v193 = 1LL;
          uint64_t v6 = v261;
        }

        sub_100009E60(v6, v193, 1LL, v29);
        sub_10000AEE8();
        sub_10001BE7C();
        if (sub_100009E6C(v6, 1LL, v29) == 1)
        {
          sub_10000C218(v6, &qword_100134540);
          uint64_t v279 = &unk_100127290;
          uint64_t v194 = sub_100008DB0((uint64_t *)&unk_100132590);
          uint64_t v35 = sub_1000CA9B8(v194);
          if (!LNLogSubsystem) {
            goto LABEL_154;
          }
          uint64_t v196 = v195;
          uint64_t v197 = String.init(cString:)(LNLogSubsystem);
          uint64_t v198 = v254;
          Logger.init(subsystem:category:)(v197, v199, v35, v196);
          uint64_t v6 = v186;
          uint64_t v200 = v26;
          uint64_t v26 = (os_log_s *)sub_1000B6D00();
          id v201 = (id)v35;
          uint64_t v35 = (uint64_t)v198;
          Logger.logObject.getter(v201);
          os_log_type_t v202 = sub_10000AF38();
          if (sub_100068360(v202))
          {
            uint64_t v203 = sub_10000AE10(22LL);
            uint64_t v269 = (void *)sub_10000AE10(64LL);
            uint64_t v279 = v269;
            *(_DWORD *)uint64_t v203 = v263;
            LODWORD(v266) = v6;
            id v204 = -[os_log_s name](v26, "name");
            uint64_t v205 = static String._unconditionallyBridgeFromObjectiveC(_:)(v204);
            unint64_t v207 = v206;

            uint64_t v208 = sub_10000DE60(v205, v207, (uint64_t *)&v279);
            uint64_t v209 = sub_1000CAA58(v208);
            sub_1000B642C(v209, v210, v211, v212);

            sub_10000AEE8();
            *(_WORD *)(v203 + 1sub_100096760(v0[56], v0 + 2) = 2080;
            id v213 = [v201 identifier];
            uint64_t v2 = (unint64_t *)static String._unconditionallyBridgeFromObjectiveC(_:)(v213);
            unint64_t v29 = v214;

            uint64_t v278 = sub_1000CAA20();
            sub_1000B642C((uint64_t)&v278, v196, v215, v203 + 22);

            sub_1000CAA00();
            uint64_t v6 = (uint64_t)v269;
            sub_1000CAB44((uint64_t)v269, 2LL);
            sub_10000AD78(v6);
            sub_10000AD78(v203);

            sub_1000CA9C4();
            uint64_t v217 = (uint64_t)v254;
          }

          else
          {

            sub_1000CA9C4();
            uint64_t v217 = (uint64_t)v198;
          }

          sub_1000CABB8(v217, v216);
          unint64_t v20 = v275;
          unint64_t v21 = &selRef_assistantDefinedSchemas;
          uint64_t v32 = (char **)&qword_100134560;
          uint64_t v12 = (uint64_t)&OBJC_CLASS___LNAssistantDefinedSchemaConformance_ptr;
        }

        else
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(v264 + 32))(v268, v6, v29);
          uint64_t v218 = v273;
          sub_100011A3C(v273);
          id v219 = v186;
          uint64_t v220 = v26;
          uint64_t v26 = (os_log_s *)v219;
          unint64_t v29 = v220;
          uint64_t v221 = (os_log_s *)sub_1000CAB30();
          os_log_type_t v222 = static os_log_type_t.info.getter();
          int v223 = v222;
          if (os_log_type_enabled(v221, v222))
          {
            uint64_t v224 = sub_10000AE10(32LL);
            uint64_t v269 = (void *)sub_10000AE10(96LL);
            uint64_t v279 = v269;
            *(_DWORD *)uint64_t v224 = v265;
            LODWORD(v266) = v223;
            uint64_t v225 = sub_1000C932C();
            uint64_t v227 = sub_1000B804C(v225, v226);
            uint64_t v228 = sub_1000CAA58(v227);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v228, v229, v224 + 4, v230);

            sub_10000ADB0();
            *(_WORD *)(v224 + 1sub_100096760(v0[56], v0 + 2) = 2080;
            sub_10000AFB0();
            uint64_t v231 = sub_1000CAA70();
            uint64_t v233 = sub_10000DE60(v231, v218, v232);
            sub_1000CAA0C(v233, v234, v235, v224 + 22);
            sub_100027E5C(v218);
            *(_WORD *)(v224 + 2sub_100096760(v0[56], v0 + 2) = 2080;
            id v236 = [(id)v29 identifier];
            uint64_t v237 = static String._unconditionallyBridgeFromObjectiveC(_:)(v236);
            unint64_t v239 = v238;

            uint64_t v2 = v276;
            uint64_t v240 = sub_10000DE60(v237, v239, (uint64_t *)&v279);
            sub_1000CAA0C(v240, v241, v242, v224 + 32);

            sub_10000AEE8();
            sub_1000CAB28( (void *)&_mh_execute_header,  v221,  (os_log_type_t)v266,  "Applying %s to %s:%s",  (uint8_t *)v224);
            uint64_t v243 = (uint64_t)v269;
            sub_1000CAA34();
            sub_10000AD78(v243);
            sub_10000AD78(v224);
          }

          else
          {

            sub_10001191C(v218);
          }

          unint64_t v21 = &selRef_assistantDefinedSchemas;
          uint64_t v32 = (char **)&qword_100134560;
          uint64_t v6 = AssistantPrebuiltEntity.metadata.getter();
          sub_1000C932C();
          NSString v244 = sub_1000CABA4();
          sub_10000ADB0();
          sub_1000CAB4C((id)v29, "copyWithDescriptiveMetadataFromEntity:usingLibraryKey:");
          sub_100028040();

          unint64_t v20 = *v2;
          int v245 = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
          *uint64_t v2 = v20;
          uint64_t v12 = (uint64_t)&OBJC_CLASS___LNAssistantDefinedSchemaConformance_ptr;
          if (!v245 || (v20 & 0x8000000000000000LL) != 0 || (v20 & 0x4000000000000000LL) != 0)
          {
            unint64_t v20 = sub_1000B1240(v20);
            *uint64_t v2 = v20;
          }

          if (v23 >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
            goto LABEL_135;
          }
          sub_1000CA998((v20 & 0xFFFFFFFFFFFFFF8LL) + 8 * v23);
          uint64_t v35 = (uint64_t)v2;
          specialized Array._endMutation()(v246);

          unint64_t v29 = v267;
          (*(void (**)(uint64_t, unint64_t))(v264 + 8))(v268, v267);
          unint64_t v20 = v275;
        }
      }

      else
      {
      }

LABEL_120:
      ++v23;
    }

    while (v20 != v23);
  }

  ((void (*)(char **, unint64_t))v271[1])(v274, v272);
  return swift_bridgeObjectRelease();
}

void sub_1000C9024()
{
  uint64_t v3 = (uint64_t *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 16);
  unint64_t v1 = *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (v1)
  {
    unint64_t v4 = 0LL;
    unint64_t v29 = (void *)LNSystemProtocolIdentifierAssistantIntent;
    uint64_t v30 = (void *)LNSystemProtocolIdentifierAssistantInvocableIntent;
    unint64_t v31 = v1;
    while (1)
    {
      uint64_t v5 = *v3;
      unint64_t v6 = *v3 & 0xC000000000000001LL;
      sub_1000460E4(v4, v6 == 0, *v3);
      id v7 = v6 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v5) : sub_10003F0A0(v5 + 8 * v4);
      id v8 = v7;
      uint64_t v9 = sub_10000AFB0();
      uint64_t v10 = (uint64_t)sub_1000C6FA4(v9, v8);
      id v11 = [v8 systemProtocolMetadata];
      type metadata accessor for LNSystemProtocolIdentifier(0LL);
      uint64_t v13 = v12;
      uint64_t v14 = sub_100008DB0((uint64_t *)&unk_100130600);
      uint64_t v15 = sub_1000118A0( &qword_100130BB0,  (uint64_t (*)(uint64_t))type metadata accessor for LNSystemProtocolIdentifier,  (uint64_t)&unk_1000F52F8);
      uint64_t v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v11, v13, v14, v15);

      if ((unint64_t)v10 >> 62)
      {
        uint64_t v17 = v10 < 0 ? v10 : v10 & 0xFFFFFFFFFFFFFF8LL;
        sub_10000AE38();
        sub_10000AFB0();
        _CocoaArrayWrapper.endIndex.getter(v17);
        sub_1000CA9F4();
      }

      else
      {
        uint64_t v17 = *(void *)((v10 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        sub_10000AE38();
      }

      swift_bridgeObjectRelease();
      if (v17)
      {
        sub_10000ADB0();
      }

      else
      {
        if (!*(void *)(v16 + 16))
        {
          sub_10000ADB0();
LABEL_22:

          sub_10000ADB0();
          goto LABEL_23;
        }

        id v25 = v29;
        sub_100015FAC(v25);
        char v27 = v26;
        sub_10000ADB0();

        if ((v27 & 1) == 0) {
          goto LABEL_22;
        }
      }

      id v18 = objc_allocWithZone(&OBJC_CLASS___LNEmptySystemProtocolMetadata);
      unint64_t v1 = v30;
      id v19 = [v18 init];
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
      uint64_t v32 = v16;
      sub_1000CA6D8((uint64_t)v19, (void *)v1, isUniquelyReferenced_nonNull_native, &v32);
      uint64_t v2 = v32;

      sub_10006C9B8();
      sub_10000AFB0();
      Dictionary._bridgeToObjectiveC()();
      sub_1000CA9F4();
      id v21 = [v8 actionMetadataWithSystemProtocolMetadata:v1];

      uint64_t v22 = *v3;
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
      uint64_t *v3 = v22;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v22 < 0 || (v22 & 0x4000000000000000LL) != 0)
      {
        uint64_t v22 = sub_1000B1240(v22);
        uint64_t *v3 = v22;
      }

      if ((v4 & 0x8000000000000000LL) != 0) {
        break;
      }
      if (v4 >= *(void *)((v22 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
        goto LABEL_32;
      }
      sub_1000CA998((v22 & 0xFFFFFFFFFFFFFF8LL) + 8 * v4);
      specialized Array._endMutation()(v24);
      swift_bridgeObjectRelease();

LABEL_23:
      if (v31 == ++v4) {
        return;
      }
    }

    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    if (v2 < 0) {
      uint64_t v28 = v2;
    }
    else {
      uint64_t v28 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_10000AFB0();
    _CocoaArrayWrapper.endIndex.getter(v28);
    sub_1000CA9F4();
    if ((v1 & 0x8000000000000000LL) != 0)
    {
      __break(1u);
      return;
    }
  }

uint64_t sub_1000C932C()
{
  unint64_t v1 = v0;
  id v2 = [v0 version];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  uint64_t v5 = v4;

  if (v3 == 0x302E302E31LL && v5 == 0xE500000000000000LL)
  {
    swift_bridgeObjectRelease(0xE500000000000000LL);
    goto LABEL_8;
  }

  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x302E302E31LL, 0xE500000000000000LL, v3, v5, 0LL);
  swift_bridgeObjectRelease(v5);
  if ((v7 & 1) != 0)
  {
LABEL_8:
    id v17 = [v1 name];
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);

    return v16;
  }

  id v8 = [v1 name];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

  uint64_t v19 = v9;
  v10._uint64_t countAndFlagsBits = 45LL;
  v10._object = (void *)0xE100000000000000LL;
  String.append(_:)(v10);
  id v11 = [v1 version];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  uint64_t v14 = v13;

  v15._uint64_t countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v14);
  return v19;
}

unint64_t sub_1000C949C(char a1)
{
  if (!a1) {
    return 0xD000000000000033LL;
  }
  if (a1 == 1) {
    return 0xD00000000000003CLL;
  }
  return 0xD000000000000028LL;
}

unint64_t sub_1000C94F8()
{
  return sub_1000C949C(*v0);
}

uint64_t sub_1000C9500()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A07C(v0, qword_100135CE0);
  sub_100008D98(v0, (uint64_t)qword_100135CE0);
  id v8 = &unk_100127290;
  uint64_t v1 = sub_100008DB0((uint64_t *)&unk_100132590);
  uint64_t v3 = String.init<A>(describing:)(&v8, v1);
  uint64_t result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    uint64_t v5 = v2;
    uint64_t v6 = String.init(cString:)(LNLogSubsystem);
    return Logger.init(subsystem:category:)(v6, v7, v3, v5);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000C95A8()
{
  id v2 = [v0 queries];
  uint64_t v76 = sub_10000A1A0(0LL, (unint64_t *)&qword_100132460, &OBJC_CLASS___LNQueryMetadata_ptr);
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v2,  &type metadata for String,  v76,  &protocol witness table for String);
  sub_100028040();
  sub_100033164((uint64_t)v0, v90);
  uint64_t v83 = v90[0];
  int64_t v85 = v90[3];
  unint64_t v3 = v90[4];
  uint64_t v80 = v90[1];
  int64_t v81 = (unint64_t)(v90[2] + 64LL) >> 6;
  uint64_t v78 = v0;
  sub_10000AE38();
  uint64_t v4 = &_swiftEmptyDictionarySingleton;
  if (!v3) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v5 = __clz(__rbit64(v3));
  v3 &= v3 - 1;
  unint64_t v6 = v5 | (v85 << 6);
  while (1)
  {
    id v14 = *(id *)(*(void *)(v83 + 56) + 8 * v6);
    id v15 = objc_msgSend(v14, "entityType", v76, v78);
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    uint64_t v18 = v17;

    uint64_t v19 = v4[2];
    swift_bridgeObjectRetain(v18);
    if (v19)
    {
      uint64_t v20 = sub_1000CAAC0();
      id v21 = _swiftEmptyArrayStorage;
      if ((v22 & 1) != 0)
      {
        id v21 = *(void **)(v4[7] + 8 * v20);
        sub_10000AFB0();
      }
    }

    else
    {
      id v21 = _swiftEmptyArrayStorage;
    }

    sub_10001DF40();
    unint64_t v89 = (unint64_t)v21;
    id v23 = v14;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    unint64_t v25 = *(void *)((v89 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v24 = *(void *)((v89 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v25 >= v24 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1LL);
    }
    uint64_t v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v23);
    uint64_t v0 = &v89;
    specialized Array._endMutation()(v26);
    unint64_t v27 = v89;

    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
    unint64_t v89 = (unint64_t)v4;
    uint64_t v28 = sub_1000CAAC0();
    uint64_t v30 = v4[2];
    BOOL v31 = (v29 & 1) == 0;
    Swift::Int v32 = v30 + v31;
    if (__OFADD__(v30, v31))
    {
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }

    unint64_t v33 = v28;
    char v34 = v29;
    sub_100008DB0(&qword_100134598);
    uint64_t v0 = &v89;
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v32))
    {
      uint64_t v0 = (unint64_t *)v89;
      uint64_t v35 = sub_100015F98(v16, v18);
      if ((v34 & 1) != (v36 & 1)) {
        goto LABEL_81;
      }
      unint64_t v33 = v35;
    }

    uint64_t v4 = (void *)v89;
    if ((v34 & 1) != 0)
    {
      uint64_t v37 = *(void *)(v89 + 56);
      swift_bridgeObjectRelease(*(void *)(v37 + 8 * v33));
      *(void *)(v37 + 8 * v33) = v27;
    }

    else
    {
      *(void *)(v89 + 8 * (v33 >> 6) + 64) |= 1LL << v33;
      id v38 = (uint64_t *)(v4[6] + 16 * v33);
      *id v38 = v16;
      v38[1] = v18;
      *(void *)(v4[7] + 8 * v33) = v27;
      uint64_t v39 = v4[2];
      BOOL v11 = __OFADD__(v39, 1LL);
      uint64_t v40 = v39 + 1;
      if (v11) {
        goto LABEL_53;
      }
      v4[2] = v40;
      swift_bridgeObjectRetain(v18);
    }

    sub_10001DF40();
    sub_10006C9B8();
    if (v3) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v7 = v85 + 1;
    if (__OFADD__(v85, 1LL)) {
      goto LABEL_54;
    }
    if (v7 >= v81) {
      break;
    }
    unint64_t v8 = *(void *)(v80 + 8 * v7);
    int64_t v9 = v85 + 1;
    if (!v8)
    {
      sub_10004C0B8();
      if (v10 == v11) {
        break;
      }
      sub_1000CAB78();
      if (!v8)
      {
        sub_10004C0B8();
        if (v10 == v11) {
          break;
        }
        sub_1000CAB78();
        if (!v8)
        {
          sub_10004C0B8();
          if (v10 == v11) {
            break;
          }
          sub_1000CAB78();
          if (!v8)
          {
            sub_10004C0B8();
            if (v10 == v11) {
              break;
            }
            sub_1000CAB78();
            if (!v8)
            {
              int64_t v9 = v12 + 5;
              if (v12 + 5 >= v81) {
                break;
              }
              unint64_t v8 = *(void *)(v80 + 8 * v9);
              if (!v8)
              {
                int64_t v13 = v85 + 7;
                do
                {
                  if (v13 >= v81) {
                    goto LABEL_41;
                  }
                  unint64_t v8 = *(void *)(v80 + 8 * v13++);
                }

                while (!v8);
                int64_t v9 = v13 - 1;
              }
            }
          }
        }
      }
    }

    unint64_t v3 = (v8 - 1) & v8;
    unint64_t v6 = __clz(__rbit64(v8)) + (v9 << 6);
    int64_t v85 = v9;
  }

LABEL_74:
    swift_bridgeObjectRelease(v51);
    return (uint64_t)v0;
  }

  return result;
}

id sub_1000C9CD0@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  id v2 = *a1;
  _StringGuts.grow(_:)(23LL);
  id v3 = [v2 identifier];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease(0xE000000000000000LL);

  v7._object = (void *)0x80000001000FCAD0LL;
  v7._uint64_t countAndFlagsBits = 0xD000000000000015LL;
  String.append(_:)(v7);
  uint64_t v8 = v4;
  uint64_t v9 = v6;
  id v10 = [v2 identifier];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  uint64_t v13 = v12;

  uint64_t v14 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  id v15 = [v2 effectiveBundleIdentifiers];
  uint64_t v16 = sub_1000CA150(v2);
  id v17 = [v2 visibilityMetadata];
  id v18 = objc_allocWithZone(&OBJC_CLASS___LNQueryMetadata);
  id result = sub_1000C9E80( v8,  v9,  v11,  v13,  0LL,  0xE000000000000000LL,  v14,  v15,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)_swiftEmptyArrayStorage,  v16,  1LL,  0LL,  v17,  0,  0LL,  0LL);
  *a2 = result;
  return result;
}

id sub_1000C9E80( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, char a15, uint64_t a16, uint64_t a17)
{
  NSString v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  NSString v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a6);
  v28.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a7);
  sub_10000A1A0(0LL, &qword_1001345A8, &OBJC_CLASS___LNQueryParameterMetadata_ptr);
  v27.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a9);
  sub_10000A1A0(0LL, (unint64_t *)&unk_1001345B0, &OBJC_CLASS___LNQuerySortingOptionMetadata_ptr);
  v21.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a10);
  if (a11)
  {
    type metadata accessor for LNPlatformName(0LL);
    sub_10000A1A0(0LL, &qword_100132BB0, &OBJC_CLASS___LNAvailabilityAnnotation_ptr);
    sub_1000118A0( &qword_1001308E0,  (uint64_t (*)(uint64_t))type metadata accessor for LNPlatformName,  (uint64_t)&unk_1000F51A8);
    v22.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a11);
  }

  else
  {
    v22.super.Class isa = 0LL;
  }

  if (a17)
  {
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a17);
  }

  else
  {
    NSString v23 = 0LL;
  }

  LOBYTE(v26) = a15 & 1;
  id v24 = [v32 initWithIdentifier:v31 entityType:v30 mangledTypeName:v29 mangledTypeNameByBundleIdentifier:v28.super.isa effectiveBundleIdentifiers:a8 par ameters:v27.super.isa sortingOptions:v21.super.isa availabilityAnnotations:v22.super.isa capabilities:a12 descriptionMetadata:a13 visibilityMetadata:a14 defaultQuer yForEntity:v26 fullyQualifiedIdentifier:v23];

  return v24;
}

uint64_t sub_1000CA0F0(void *a1)
{
  id v1 = [a1 autoShortcutProviderMangledName];
  if (!v1) {
    return 0LL;
  }
  id v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t sub_1000CA150(void *a1)
{
  id v1 = [a1 availabilityAnnotations];
  if (!v1) {
    return 0LL;
  }
  id v2 = v1;
  type metadata accessor for LNPlatformName(0LL);
  uint64_t v4 = v3;
  uint64_t v5 = sub_10000A1A0(0LL, &qword_100132BB0, &OBJC_CLASS___LNAvailabilityAnnotation_ptr);
  uint64_t v6 = sub_1000118A0( &qword_1001308E0,  (uint64_t (*)(uint64_t))type metadata accessor for LNPlatformName,  (uint64_t)&unk_1000F51A8);
  uint64_t v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, v4, v5, v6);

  return v7;
}

void *sub_1000CA1FC(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for LSLinkBundleRecord(0LL);
  v19[3] = v4;
  void v19[4] = &off_100126180;
  uint64_t v5 = sub_10001AFA8(v19);
  sub_10006704C(a1, (uint64_t)v5);
  LODWORD(a1) = [(id)objc_opt_self(LNFeatureFlags) isAppShortcutsOmittingAppNameEnabled];
  sub_100008F24((uint64_t)v19, (uint64_t)v18);
  if (!(_DWORD)a1)
  {
    sub_10000AC58(v18);
    goto LABEL_5;
  }

  char v6 = *((_BYTE *)sub_100008D74(v18, v18[3]) + *(int *)(v4 + 32));
  sub_10000AC58(v18);
  if ((v6 & 1) == 0)
  {
LABEL_5:
    id v10 = [a2 autoShortcuts];
    uint64_t v11 = sub_10000A1A0(0LL, &qword_1001345C0, &OBJC_CLASS___LNAutoShortcutMetadata_ptr);
    unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

    uint64_t v13 = sub_1000BB438(10LL, v12);
    uint64_t v9 = sub_10003F1A0(v13, v14, v15, v16);
    goto LABEL_6;
  }

  id v7 = [a2 autoShortcuts];
  uint64_t v8 = sub_10000A1A0(0LL, &qword_1001345C0, &OBJC_CLASS___LNAutoShortcutMetadata_ptr);
  uint64_t v9 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

LABEL_6:
  sub_10000AC58(v19);
  return v9;
}

uint64_t sub_1000CA360@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v49 = type metadata accessor for LSLinkBundleRecord(0LL);
  uint64_t v50 = &off_100126180;
  id v7 = sub_10001AFA8(v48);
  sub_10006704C(a1, (uint64_t)v7);
  uint64_t v42 = v7[1];
  uint64_t v43 = *v7;
  id v8 = objc_msgSend(a3, "actions", swift_bridgeObjectRetain(v42).n128_f64[0]);
  uint64_t v9 = sub_10000A1A0(0LL, (unint64_t *)&unk_100132490, &OBJC_CLASS___LNActionMetadata_ptr);
  uint64_t v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v8,  &type metadata for String,  v9,  &protocol witness table for String);

  uint64_t v41 = sub_1000C719C(v10, (uint64_t)v47, sub_100067090);
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = sub_1000CA0F0(a3);
  uint64_t v39 = v12;
  uint64_t v40 = v11;
  id v38 = [a3 shortcutTileColor];
  uint64_t v13 = sub_100008D74(v48, v49);
  uint64_t v37 = sub_1000CA1FC((uint64_t)v13, a3);
  id v14 = [a3 entities];
  uint64_t v15 = sub_10000A1A0(0LL, (unint64_t *)&qword_100132440, &OBJC_CLASS___LNEntityMetadata_ptr);
  uint64_t v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v14,  &type metadata for String,  v15,  &protocol witness table for String);

  uint64_t v36 = sub_1000C719C(v16, (uint64_t)v46, sub_100067090);
  swift_bridgeObjectRelease(v16);
  id v17 = [a3 enums];
  uint64_t v18 = sub_10000A1A0(0LL, (unint64_t *)&qword_100132450, &OBJC_CLASS___LNEnumMetadata_ptr);
  uint64_t v19 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v17,  &type metadata for String,  v18,  &protocol witness table for String);

  sub_1000394B8();
  uint64_t v21 = v20;
  swift_bridgeObjectRelease(v19);
  uint64_t v22 = sub_1000C95A8();
  uint64_t v23 = sub_1000C719C(v22, (uint64_t)v45, sub_100067090);
  swift_bridgeObjectRelease(v22);
  id v24 = [a3 version];
  uint64_t v25 = sub_100026BAC( a3,  (SEL *)&selRef_negativePhrases,  (unint64_t *)&unk_100134588,  &OBJC_CLASS___LNAppShortcutNegativePhrase_ptr);
  if (v25) {
    uint64_t v26 = (void *)v25;
  }
  else {
    uint64_t v26 = _swiftEmptyArrayStorage;
  }
  uint64_t v27 = sub_100026BAC(a3, (SEL *)&selRef_examplePhrases, &qword_100133690, &OBJC_CLASS___LNExamplePhraseDescription_ptr);
  if (v27) {
    NSDictionary v28 = (void *)v27;
  }
  else {
    NSDictionary v28 = _swiftEmptyArrayStorage;
  }
  uint64_t v29 = sub_100026BAC( a3,  (SEL *)&selRef_assistantIntents,  (unint64_t *)&unk_1001324B0,  &OBJC_CLASS___LNAssistantIntentMetadata_ptr);
  if (v29) {
    NSString v30 = (void *)v29;
  }
  else {
    NSString v30 = _swiftEmptyArrayStorage;
  }
  uint64_t v31 = sub_100026BAC( a3,  (SEL *)&selRef_assistantIntentNegativePhrases,  &qword_100134580,  &OBJC_CLASS___LNAssistantIntentNegativePhrases_ptr);
  if (v31) {
    Swift::Int v32 = (void *)v31;
  }
  else {
    Swift::Int v32 = _swiftEmptyArrayStorage;
  }
  uint64_t v33 = sub_100026BAC( a3,  (SEL *)&selRef_assistantEntities,  (unint64_t *)&unk_1001324A0,  &OBJC_CLASS___LNAssistantAppEntityMetadata_ptr);
  if (v33) {
    char v34 = (void *)v33;
  }
  else {
    char v34 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain(a2);
  uint64_t result = sub_10000AC58(v48);
  *a4 = v43;
  a4[1] = v42;
  a4[2] = v41;
  a4[3] = v40;
  a4[4] = v39;
  a4[5] = v38;
  a4[6] = v37;
  a4[7] = a2;
  a4[8] = v36;
  a4[9] = v21;
  a4[10] = v23;
  a4[11] = v24;
  a4[12] = v26;
  a4[13] = v28;
  a4[14] = v30;
  a4[15] = v32;
  a4[16] = v34;
  return result;
}

id sub_1000CA6D8(uint64_t a1, void *a2, char a3, void *a4)
{
  id v7 = (void *)*a4;
  uint64_t v8 = sub_100015FAC(a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v9 & 1) == 0;
  Swift::Int v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v13 = v8;
  char v14 = v9;
  sub_100008DB0(&qword_100134568);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v12)) {
    goto LABEL_5;
  }
  uint64_t v15 = sub_100015FAC(a2);
  if ((v14 & 1) != (v16 & 1))
  {
LABEL_9:
    type metadata accessor for LNSystemProtocolIdentifier(0LL);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
    __break(1u);
    return result;
  }

  unint64_t v13 = v15;
LABEL_5:
  id v17 = (void *)*a4;
  if ((v14 & 1) != 0)
  {
    uint64_t v18 = v17[7];
    id result = (id)swift_unknownObjectRelease(*(void *)(v18 + 8 * v13));
    *(void *)(v18 + 8 * v13) = a1;
  }

  else
  {
    sub_1000CA7DC(v13, (uint64_t)a2, a1, v17);
    return a2;
  }

  return result;
}

unint64_t sub_1000CA7DC(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1LL << result;
  *(void *)(a4[6] + 8 * result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1LL);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

unint64_t sub_1000CA820()
{
  unint64_t result = qword_100134578;
  if (!qword_100134578)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F7C60, &unk_100127270);
    atomic_store(result, (unint64_t *)&qword_100134578);
  }

  return result;
}

uint64_t sub_1000CA85C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(sub_100075674(v3, v4) = 1;
  }
  else {
    LODWORD(sub_100075674(v3, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1000CA8A8 + 4 * byte_1000F7B45[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000CA8DC + 4 * byte_1000F7B40[v4]))();
}

uint64_t sub_1000CA8DC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CA8E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000CA8ECLL);
  }
  return result;
}

uint64_t sub_1000CA8F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000CA900LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1000CA904(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CA90C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ApplicationMetadataExtractor.Errors()
{
}

void type metadata accessor for ApplicationMetadataExtractor()
{
}

unint64_t sub_1000CA938()
{
  unint64_t result = qword_1001345C8;
  if (!qword_1001345C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F7C38, &unk_100127270);
    atomic_store(result, (unint64_t *)&qword_1001345C8);
  }

  return result;
}

uint64_t sub_1000CA974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v6 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 104, v5, v4, a4);
}

uint64_t sub_1000CA988()
{
  return swift_slowAlloc(12LL, -1LL);
}

void sub_1000CA998(uint64_t a1@<X8>)
{
  id v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 3sub_100096760(v0[56], v0 + 2) = v1;
}

uint64_t sub_1000CA9A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  return sub_10000AC58((uint64_t *)va);
}

uint64_t sub_1000CA9AC()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v0);
}

uint64_t sub_1000CA9B8(uint64_t a1)
{
  return String.init<A>(describing:)(v1 - 96, a1);
}

  ;
}

uint64_t sub_1000CA9D0(void *a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(v1 + 8) + 8LL))(v2);
}

uint64_t sub_1000CA9F4()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000CAA00()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000CAA0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v6 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 104, v5, v4, a4);
}

uint64_t sub_1000CAA20()
{
  return sub_10000DE60(v0, v1, (uint64_t *)(v2 - 96));
}

uint64_t sub_1000CAA34()
{
  return swift_arrayDestroy(v0, 3LL);
}

uint64_t sub_1000CAA40(uint64_t a1, unint64_t a2)
{
  return sub_10000DE60(a1, a2, (uint64_t *)(v2 - 72));
}

uint64_t sub_1000CAA4C()
{
  if (v1 >= 0) {
    return _CocoaArrayWrapper.endIndex.getter(v0);
  }
  else {
    return _CocoaArrayWrapper.endIndex.getter(v1);
  }
}

uint64_t sub_1000CAA58(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t sub_1000CAA70()
{
  return *(void *)(v0 - 328);
}

__n128 sub_1000CAA80@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(a1 - 256);
  *uint64_t v2 = result.n128_u32[0];
  *(_DWORD *)(v3 - 364) = v1;
  return result;
}

__n128 sub_1000CAA98@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(a1 - 256);
  *uint64_t v2 = result.n128_u32[0];
  *(_DWORD *)(v3 - 288) = v1;
  return result;
}

BOOL sub_1000CAAB0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000CAAC0()
{
  return sub_100015F98(v1, v0);
}

  ;
}

uint64_t sub_1000CAAE8@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return 0LL;
}

  ;
}

  ;
}

id sub_1000CAB18()
{
  return *(id *)(v0 + 32);
}

uint64_t sub_1000CAB20(uint64_t a1, uint64_t a2)
{
  return sub_100008F24(v2, a2);
}

void sub_1000CAB28(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_1000CAB30()
{
  return Logger.logObject.getter();
}

void sub_1000CAB38(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t sub_1000CAB44(uint64_t a1, uint64_t a2)
{
  return swift_arrayDestroy(a1, a2);
}

id sub_1000CAB4C(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2, v3);
}

uint64_t sub_1000CAB58(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t sub_1000CAB64(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return v1 - 104;
}

  ;
}

id sub_1000CAB84()
{
  return v0;
}

uint64_t sub_1000CAB8C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 - 256) = result;
  *(void *)(v2 - 96) = result;
  return result;
}

  ;
}

NSString sub_1000CABA4()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_1000CABAC()
{
  return sub_100015F98(v1, v0);
}

uint64_t sub_1000CABB8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, void)@<X8>)
{
  return a2(a1, *(void *)(v2 - 152));
}

void sub_1000CABC0(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  BOOL v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(a3, a5);
  [v11 lock];

  a1();
  sub_1000CAC68(v6, a3, a4, a5);
}

void sub_1000CAC68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v4 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a2, a4);
  [v4 unlock];
}

const char *Double.declaredDatatype.unsafeMutableAddressor()
{
  return "REAL";
}

void static Double.declaredDatatype.getter()
{
}

uint64_t sub_1000CACC8()
{
  return 1279346002LL;
}

double sub_1000CACD8@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double sub_1000CACE4@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

const char *Int64.declaredDatatype.unsafeMutableAddressor()
{
  return "INTEGER";
}

uint64_t static Int64.declaredDatatype.getter()
{
  return 0x52454745544E49LL;
}

const char *String.declaredDatatype.unsafeMutableAddressor()
{
  return "TEXT";
}

void static String.declaredDatatype.getter()
{
}

void static String.fromDatatypeValue(_:)(uint64_t a1, uint64_t a2)
{
}

uint64_t _s10Foundation4UUIDV17AppIntents_SQLiteE16declaredDatatypeSSvgZ_0()
{
  return 1415071060LL;
}

void sub_1000CAD58(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = v3;
  a2[1] = v4;
}

void sub_1000CAD84(void *a1@<X8>)
{
  *a1 = v3;
  a1[1] = v4;
  sub_10000ADA8();
}

const char *Blob.declaredDatatype.unsafeMutableAddressor()
{
  return "BLOB";
}

void static Blob.declaredDatatype.getter()
{
}

uint64_t static Data.declaredDatatype.getter()
{
  return 1112493122LL;
}

uint64_t sub_1000CADD4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = Blob.bytes.getter(*a1);
  *a2 = result;
  return result;
}

void sub_1000CADFC(void *a1@<X8>)
{
  *a1 = Blob.bytes.getter(*v1);
  sub_10000ADA8();
}

char *Bool.declaredDatatype.unsafeMutableAddressor()
{
  return static Bool.declaredDatatype;
}

void static Bool.declaredDatatype.getter()
{
}

uint64_t static Bool.declaredDatatype.setter(uint64_t a1, uint64_t a2)
{
  return sub_1000CB36C(a1, a2, static Bool.declaredDatatype);
}

void static Bool.declaredDatatype.modify(uint64_t a1)
{
}

BOOL static Bool.fromDatatypeValue(_:)(uint64_t a1)
{
  return a1 != 0;
}

uint64_t Bool.datatypeValue.getter(char a1)
{
  return a1 & 1;
}

void sub_1000CAE94(uint64_t a1, uint64_t a2)
{
}

void sub_1000CAEA4(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = static Bool.fromDatatypeValue(_:)(*a1);
  sub_10000ADA8();
}

void sub_1000CAECC(uint64_t *a1@<X8>)
{
  *a1 = Bool.datatypeValue.getter(*v1);
  sub_10000ADA8();
}

char *Int.declaredDatatype.unsafeMutableAddressor()
{
  return static Int.declaredDatatype;
}

void static Int.declaredDatatype.getter()
{
}

void sub_1000CAF08(uint64_t a1)
{
}

uint64_t static Int.declaredDatatype.setter(uint64_t a1, uint64_t a2)
{
  return sub_1000CB36C(a1, a2, static Int.declaredDatatype);
}

uint64_t sub_1000CAF48(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  *a3 = a1;
  *a4 = a2;
  return swift_bridgeObjectRelease();
}

void static Int.declaredDatatype.modify(uint64_t a1)
{
}

void sub_1000CAFD8(uint64_t a1, uint64_t a2)
{
}

void sub_1000CAFE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void *sub_1000CB020@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1000CB02C(void *a1@<X8>)
{
  *a1 = *v1;
}

void *variable initialization expression of TableBuilder.definitions()
{
  return _swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of QueryClauses.select()
{
  uint64_t v0 = sub_100008DB0(&qword_100131160);
  uint64_t v1 = swift_allocObject(v0, 72LL, 7LL);
  *(_OWORD *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5520;
  uint64_t v2 = sub_100008DB0(&qword_100134618);
  *(void *)(v1 + 64) = &protocol witness table for Expression<A>;
  *(void *)(v1 + 3sub_100096760(v0[56], v0 + 2) = 42LL;
  *(void *)(v1 + 40) = 0xE100000000000000LL;
  *(void *)(v1 + 48) = _swiftEmptyArrayStorage;
  *(void *)(v1 + 56) = v2;
  return 0LL;
}

uint64_t variable initialization expression of QueryClauses.filters()
{
  return 0LL;
}

uint64_t variable initialization expression of QueryClauses.group()
{
  return 0LL;
}

uint64_t variable initialization expression of QueryClauses.limit()
{
  return 0LL;
}

double variable initialization expression of Connection.busyTimeout()
{
  return 0.0;
}

void *variable initialization expression of Connection.functions()
{
  return &_swiftEmptyDictionarySingleton;
}

uint64_t variable initialization expression of Connection.queue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_100011A0C();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v5);
  sub_100011A0C();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v9);
  sub_100011A0C();
  uint64_t v12 = v11 - v10;
  sub_1000CB28C();
  uint64_t v18 = _swiftEmptyArrayStorage;
  unint64_t v13 = sub_10003A28C();
  uint64_t v14 = sub_100008DB0(&qword_100130570);
  unint64_t v15 = sub_10001B540();
  uint64_t v16 = dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v14, v15, v9, v13);
  static DispatchQoS.unspecified.getter(v16);
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))( v4,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0x442E6574694C5153LL,  0xEF65736162617461LL,  v8,  v12,  v4,  0LL);
}

unint64_t sub_1000CB28C()
{
  unint64_t result = qword_100130560;
  if (!qword_100130560)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_queue);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100130560);
  }

  return result;
}

_UNKNOWN **sub_1000CB2CC()
{
  return &protocol witness table for Double;
}

_UNKNOWN **sub_1000CB2D8()
{
  return &protocol witness table for Int64;
}

_UNKNOWN **sub_1000CB2E4()
{
  return &protocol witness table for String;
}

_UNKNOWN **sub_1000CB2F0()
{
  return &protocol witness table for Blob;
}

void type metadata accessor for ComparisonResult()
{
  if (!qword_1001347A0)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, &unk_1001276C0);
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1001347A0);
    }
  }

uint64_t _s17AppIntents_SQLite9StatementC6handle33_E09230218008A0440B080F1AB3693645LLs13OpaquePointerVSgvpfi_0()
{
  return 0LL;
}

void sub_1000CB35C(uint64_t a1)
{
}

uint64_t sub_1000CB364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_beginAccess(a1, a2, a3, 0LL);
}

uint64_t sub_1000CB36C(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_1000CAF48(a1, a2, a3, a3 + 1);
}

uint64_t sub_1000CB374(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_1000CB384()
{
  return swift_bridgeObjectRetain(*v0);
}

uint64_t sub_1000CB394()
{
  return v0;
}

uint64_t _s17AppIntents_SQLite9StatementC29___lazy_storage___columnCount33_E09230218008A0440B080F1AB3693645LLSiSgvpfi_0()
{
  return 0LL;
}

uint64_t _s17AppIntents_SQLite9StatementC21___lazy_storage___row33_E09230218008A0440B080F1AB3693645LLAA6CursorVSgvpfi_0()
{
  return 0LL;
}

  ;
}

Swift::String __swiftcall SchemaType.drop(ifExists:)(Swift::Bool ifExists)
{
  uint64_t v2 = static Table.identifier.getter();
  sub_1000CB8DC(v2, v3, v4, ifExists);
  uint64_t v5 = sub_1000D2CC4(v8);
  result._object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

void sub_1000CB430()
{
  uint64_t v3 = v2;
  unint64_t v4 = v0[5];
  uint64_t v5 = v0[7];
  if (!v4)
  {
    sub_10001BEF8();
LABEL_6:
    sub_1000119E4();
    sub_10001BEF8();
    uint64_t v16 = sub_1000D33F0();
    uint64_t v18 = v17;
    sub_100011958();
    if (v5)
    {
      uint64_t v19 = sub_100008DB0(&qword_100131160);
      uint64_t inited = swift_initStackObject(v19, &v33);
      *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
      uint64_t v21 = sub_100008DB0(&qword_100134618);
      *(void *)(inited + 56) = v21;
      *(void *)(inited + 64) = &protocol witness table for Expression<A>;
      sub_10001BCF8();
      uint64_t v22 = sub_1000D33DC();
      uint64_t v24 = v23;
      sub_10001BEC0();
      *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = v22;
      *(void *)(inited + 40) = v24;
      *(void *)(inited + 48) = _swiftEmptyArrayStorage;
      *(void *)(inited + 96) = v21;
      *(void *)(inited + 104) = &protocol witness table for Expression<A>;
      *(void *)(inited + 7sub_100096760(v0[56], v0 + 2) = v16;
      *(void *)(inited + 80) = v18;
      *(void *)(inited + 88) = _swiftEmptyArrayStorage;
      sub_1000D2E44(inited, 46LL, v3);
      sub_1000D30C4();
      sub_1000D1CC8((uint64_t *)&unk_1001323B0);
      sub_100011958();
    }

    else
    {
      v3[3] = sub_100008DB0(&qword_100134618);
      v3[4] = (uint64_t)&protocol witness table for Expression<A>;
      sub_100011958();
      uint64_t *v3 = v16;
      v3[1] = v18;
      v3[2] = (uint64_t)_swiftEmptyArrayStorage;
    }

    goto LABEL_11;
  }

  uint64_t v6 = v0[4];
  if ((v1 & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t v7 = sub_100008DB0(&qword_100131160);
  uint64_t v8 = swift_initStackObject(v7, v32);
  *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57E0;
  sub_10001BEF8();
  sub_1000119E4();
  uint64_t v9 = sub_1000D33F0();
  uint64_t v30 = v10;
  if (v5)
  {
    uint64_t v11 = swift_initStackObject(v7, v31);
    *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
    uint64_t v29 = v6;
    uint64_t v12 = sub_100008DB0(&qword_100134618);
    *(void *)(v11 + 56) = v12;
    *(void *)(v11 + 64) = &protocol witness table for Expression<A>;
    sub_10001BCF8();
    uint64_t v13 = sub_1000D33DC();
    uint64_t v15 = v14;
    sub_10001BEC0();
    *(void *)(v11 + 3sub_100096760(v0[56], v0 + 2) = v13;
    *(void *)(v11 + 40) = v15;
    *(void *)(v11 + 48) = _swiftEmptyArrayStorage;
    *(void *)(v11 + 96) = v12;
    *(void *)(v11 + 104) = &protocol witness table for Expression<A>;
    *(void *)(v11 + 7sub_100096760(v0[56], v0 + 2) = v9;
    *(void *)(v11 + 80) = v30;
    *(void *)(v11 + 88) = _swiftEmptyArrayStorage;
    sub_1000D2E44(v11, 46LL, (uint64_t *)(v8 + 32));
    sub_1000D3698();
    sub_1000D3684((uint64_t *)&unk_1001323B0);
    uint64_t v6 = v29;
  }

  else
  {
    *(void *)(v8 + 56) = sub_100008DB0(&qword_100134618);
    *(void *)(v8 + 64) = &protocol witness table for Expression<A>;
    *(void *)(v8 + 3sub_100096760(v0[56], v0 + 2) = v9;
    *(void *)(v8 + 40) = v30;
    *(void *)(v8 + 48) = _swiftEmptyArrayStorage;
  }

  sub_100011958();
  uint64_t v25 = sub_100008DB0(&qword_100134618);
  *(void *)(v8 + 96) = v25;
  *(void *)(v8 + 104) = &protocol witness table for Expression<A>;
  *(void *)(v8 + 7sub_100096760(v0[56], v0 + 2) = 21313LL;
  *(void *)(v8 + 80) = 0xE200000000000000LL;
  *(void *)(v8 + 88) = _swiftEmptyArrayStorage;
  *(void *)(v8 + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = v25;
  *(void *)(v8 + 144) = &protocol witness table for Expression<A>;
  uint64_t v26 = sub_1000D4294(34LL, 0xE100000000000000LL, v6, v4);
  uint64_t v28 = v27;
  sub_10001BC70();
  *(void *)(v8 + 11sub_100096760(v0[56], v0 + 2) = v26;
  *(void *)(v8 + 120) = v28;
  *(void *)(v8 + 128) = _swiftEmptyArrayStorage;
  sub_1000D2E38(v8, v3);
  swift_setDeallocating(v8);
  sub_1000D1CC8((uint64_t *)&unk_1001323B0);
LABEL_11:
  sub_10000AD58();
}

uint64_t sub_1000CB6F4()
{
  uint64_t v56 = v0;
  uint64_t v57 = v1;
  char v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = sub_100008DB0(&qword_1001347A8);
  uint64_t inited = swift_initStackObject(v6, &v55);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57E0;
  v54[0] = 0x20504F5244LL;
  v54[1] = 0xE500000000000000LL;
  v8._uint64_t countAndFlagsBits = sub_1000D3658();
  String.append(_:)(v8);
  uint64_t v9 = sub_100008DB0(&qword_100134618);
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = 0x20504F5244LL;
  *(void *)(inited + 40) = 0xE500000000000000LL;
  *(void *)(inited + 48) = _swiftEmptyArrayStorage;
  *(void *)(inited + 56) = v9;
  if ((v3 & 1) != 0)
  {
    __int128 v10 = xmmword_1000F7ED0;
    uint64_t v11 = _swiftEmptyArrayStorage;
    uint64_t v12 = &protocol witness table for Expression<A>;
  }

  else
  {
    *(double *)&__int128 v10 = sub_1000D333C();
  }

  *(void *)(inited + 96) = v9;
  *(void *)(inited + 104) = v12;
  *(_OWORD *)(inited + 7sub_100096760(v0[56], v0 + 2) = v10;
  *(void *)(inited + 88) = v11;
  sub_10001AFE4(v5, inited + 112);
  uint64_t v20 = _swiftEmptyArrayStorage;
  for (uint64_t i = 32LL; i != 152; i += 40LL)
  {
    sub_1000D35CC(inited + i, v13, v14, v15, v16, v17, v18, v19, v46, *((uint64_t *)&v46 + 1), v47);
    sub_1000D358C( v22,  v23,  v24,  v25,  v26,  v27,  v28,  v29,  v46,  *((uint64_t *)&v46 + 1),  v47,  v48,  v49,  v50,  *((uint64_t *)&v50 + 1),  v51,  v52,  v53,  v54[0]);
    if (v48)
    {
      uint64_t v30 = sub_100009EEC(&v46, (uint64_t)&v50);
      sub_1000D3574(v30, v31, v32, v33, v34, v35, v36, v37, v46, *((uint64_t *)&v46 + 1), v47, v48, v49, v50);
      if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
      {
        char v40 = sub_100027F90();
        sub_1000D2F14(v40, v41, v42, v20);
        uint64_t v20 = v43;
      }

      unint64_t v39 = v20[2];
      unint64_t v38 = v20[3];
      if (v39 >= v38 >> 1)
      {
        sub_1000D2F14(v38 > 1, v39 + 1, 1, v20);
        uint64_t v20 = v44;
      }

      v20[2] = v39 + 1;
      sub_1000D3568((uint64_t)&v20[5 * v39], v46);
    }

    else
    {
      sub_1000D3300((uint64_t)&v46);
    }
  }

  sub_10001198C();
  sub_1000D2E38((uint64_t)v20, v54);
  sub_10000ADB0();
  sub_1000D2D0C(v54);
  return sub_1000D2CC4(v54);
}

uint64_t sub_1000CB8DC(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v8 = sub_100008DB0(&qword_1001347A8);
  uint64_t inited = swift_initStackObject(v8, v27);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57E0;
  v26[0] = 0x20504F5244LL;
  v26[1] = 0xE500000000000000LL;
  v10._uint64_t countAndFlagsBits = a1;
  v10._object = a2;
  String.append(_:)(v10);
  uint64_t v11 = sub_100008DB0(&qword_100134618);
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = 0x20504F5244LL;
  *(void *)(inited + 40) = 0xE500000000000000LL;
  *(void *)(inited + 48) = _swiftEmptyArrayStorage;
  *(void *)(inited + 56) = v11;
  if ((a4 & 1) != 0)
  {
    __int128 v12 = xmmword_1000F7ED0;
    uint64_t v13 = _swiftEmptyArrayStorage;
    uint64_t v14 = &protocol witness table for Expression<A>;
  }

  else
  {
    uint64_t v11 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v13 = 0LL;
    __int128 v12 = 0uLL;
  }

  *(void *)(inited + 96) = v11;
  *(void *)(inited + 104) = v14;
  *(_OWORD *)(inited + 7sub_100096760(v0[56], v0 + 2) = v12;
  *(void *)(inited + 88) = v13;
  sub_10001AFE4(a3, inited + 112);
  uint64_t v15 = _swiftEmptyArrayStorage;
  for (uint64_t i = 32LL; i != 152; i += 40LL)
  {
    sub_10001B644(inited + i, (uint64_t)v26, &qword_1001347B0);
    sub_1000D2378((uint64_t)v26, (uint64_t)&v23);
    if (v24)
    {
      sub_100009EEC(&v23, (uint64_t)v25);
      sub_100009EEC(v25, (uint64_t)&v23);
      if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
      {
        sub_1000D1F50(0, v15[2] + 1LL, 1, v15, &qword_100131160, (uint64_t *)&unk_1001323B0);
        uint64_t v15 = v19;
      }

      unint64_t v18 = v15[2];
      unint64_t v17 = v15[3];
      if (v18 >= v17 >> 1)
      {
        sub_1000D1F50(v17 > 1, v18 + 1, 1, v15, &qword_100131160, (uint64_t *)&unk_1001323B0);
        uint64_t v15 = v20;
      }

      void v15[2] = v18 + 1;
      sub_100009EEC(&v23, (uint64_t)&v15[5 * v18 + 4]);
    }

    else
    {
      sub_10001B60C((uint64_t)&v23, &qword_1001347B0);
    }
  }

  swift_bridgeObjectRelease(inited);
  sub_1000D3EA4((uint64_t)v15, 32LL, 0xE100000000000000LL, v26);
  swift_bridgeObjectRelease(v15);
  sub_100008D74(v26, v26[3]);
  uint64_t countAndFlagsBits = Expressible.asSQL()()._countAndFlagsBits;
  sub_10000AC58(v26);
  return countAndFlagsBits;
}

void Table.create(temporary:ifNotExists:withoutRowid:block:)()
{
  char v2 = v1;
  char v4 = v3;
  uint64_t v5 = type metadata accessor for TableBuilder();
  *(void *)(sub_10000C254(v5, 24LL) + swift_unknownObjectWeakDestroy(v0 + 16) = _swiftEmptyArrayStorage;
  v2();
  uint64_t v6 = sub_100008DB0(&qword_1001347A8);
  uint64_t v7 = sub_1000D3540(v6);
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57E0;
  uint64_t v8 = v0[6];
  unint64_t v9 = v0[7];
  if (v0[5])
  {
    uint64_t v10 = v0[4];
    unint64_t v11 = v0[5];
  }

  else
  {
    uint64_t v10 = v0[2];
    unint64_t v11 = v0[3];
    sub_1000280C8();
  }

  sub_1000280C8();
  sub_10001BD0C();
  uint64_t v12 = sub_1000D351C();
  uint64_t v54 = sub_1000D4294(v12, v13, v10, v11);
  uint64_t v15 = v14;
  sub_10001DEC4();
  if (v9)
  {
    uint64_t v16 = sub_100008DB0(&qword_100131160);
    uint64_t inited = swift_initStackObject(v16, v55);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
    char v53 = v4;
    uint64_t v18 = sub_100008DB0(&qword_100134618);
    *(void *)(inited + 56) = v18;
    *(void *)(inited + 64) = &protocol witness table for Expression<A>;
    sub_10001BCF8();
    uint64_t v19 = sub_1000D351C();
    uint64_t v21 = sub_1000D4294(v19, v20, v8, v9);
    uint64_t v23 = v22;
    sub_10001BEC0();
    *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = v21;
    *(void *)(inited + 40) = v23;
    *(void *)(inited + 48) = _swiftEmptyArrayStorage;
    *(void *)(inited + 96) = v18;
    *(void *)(inited + 104) = &protocol witness table for Expression<A>;
    *(void *)(inited + 7sub_100096760(v0[56], v0 + 2) = v54;
    *(void *)(inited + 80) = v15;
    char v4 = v53;
    *(void *)(inited + 88) = _swiftEmptyArrayStorage;
    sub_1000D2E44(inited, 46LL, v59);
    sub_1000D30C4();
    sub_1000D1CC8((uint64_t *)&unk_1001323B0);
    sub_10001DEC4();
  }

  else
  {
    uint64_t v60 = sub_100008DB0(&qword_100134618);
    id v61 = &protocol witness table for Expression<A>;
    sub_10001DEC4();
    v59[0] = v54;
    v59[1] = v15;
    v59[2] = (uint64_t)_swiftEmptyArrayStorage;
  }

  uint64_t v24 = static Table.identifier.getter();
  sub_1000CBEE0(v24, v25, v26, v27, v28, v29);
  sub_10000AC58(v59);
  uint64_t v30 = sub_10000AFB0();
  sub_1000D2EDC(v30, v59);
  uint64_t v31 = v60;
  uint64_t v32 = v61;
  uint64_t v33 = sub_100008D74(v59, v60);
  uint64_t v34 = sub_1000D4984(v33, 0LL, 0xE000000000000000LL, v31, v32);
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  sub_10000AC58(v59);
  sub_10001198C();
  uint64_t v39 = sub_100008DB0(&qword_100134618);
  *(void *)(v7 + 96) = v39;
  *(void *)(v7 + 104) = &protocol witness table for Expression<A>;
  *(void *)(v7 + 7sub_100096760(v0[56], v0 + 2) = v34;
  *(void *)(v7 + 80) = v36;
  *(void *)(v7 + 88) = v38;
  if ((v4 & 1) != 0)
  {
    __int128 v40 = xmmword_1000F7EE0;
    uint64_t v41 = _swiftEmptyArrayStorage;
    char v42 = &protocol witness table for Expression<A>;
  }

  else
  {
    *(double *)&__int128 v40 = sub_1000D333C();
  }

  *(void *)(v7 + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = v39;
  *(void *)(v7 + 144) = v42;
  *(_OWORD *)(v7 + 11sub_100096760(v0[56], v0 + 2) = v40;
  uint64_t v43 = 32LL;
  *(void *)(v7 + 128) = v41;
  uint64_t v44 = _swiftEmptyArrayStorage;
  do
  {
    sub_1000D3664(v7 + v43, (uint64_t)v59);
    sub_1000D2378((uint64_t)v59, (uint64_t)&v56);
    if (v57)
    {
      sub_100009EEC(&v56, (uint64_t)v58);
      sub_100009EEC(v58, (uint64_t)&v56);
      if ((swift_isUniquelyReferenced_nonNull_native(v44) & 1) == 0)
      {
        char v47 = sub_100027F90();
        sub_1000D2F90(v47, v48, v49, v44);
        uint64_t v44 = v50;
      }

      unint64_t v46 = v44[2];
      unint64_t v45 = v44[3];
      if (v46 >= v45 >> 1)
      {
        char v51 = sub_1000760D0(v45);
        sub_1000D2F90(v51, v46 + 1, 1, v44);
        uint64_t v44 = v52;
      }

      v44[2] = v46 + 1;
      sub_100009EEC(&v56, (uint64_t)&v44[5 * v46 + 4]);
    }

    else
    {
      sub_1000D3278((uint64_t)&v56);
    }

    v43 += 40LL;
  }

  while (v43 != 152);
  sub_100011958();
  sub_1000D2E38((uint64_t)v44, v59);
  sub_10001BC70();
  sub_1000D2D0C(v59);
  sub_10008443C();
  swift_release();
  sub_1000D2CC4(v59);
  sub_10000AD58();
}

uint64_t sub_1000CBEE0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  int v11 = a4;
  uint64_t v12 = sub_100008DB0(&qword_1001347A8);
  uint64_t inited = swift_initStackObject(v12, v34);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5B50;
  uint64_t v14 = sub_100008DB0(&qword_100134618);
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = 0x455441455243LL;
  *(void *)(inited + 40) = 0xE600000000000000LL;
  *(void *)(inited + 48) = _swiftEmptyArrayStorage;
  *(void *)(inited + 56) = v14;
  if (v11 == 2)
  {
    uint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    unint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
  }

  else
  {
    uint64_t v15 = 0x5241524F504D4554LL;
    if ((v11 & 1) == 0) {
      uint64_t v15 = 0x455551494E55LL;
    }
    unint64_t v16 = 0xE900000000000059LL;
    if ((v11 & 1) == 0) {
      unint64_t v16 = 0xE600000000000000LL;
    }
    uint64_t v19 = &protocol witness table for Expression<A>;
    unint64_t v17 = _swiftEmptyArrayStorage;
    uint64_t v18 = v14;
  }

  *(void *)(inited + 7sub_100096760(v0[56], v0 + 2) = v15;
  *(void *)(inited + 80) = v16;
  *(void *)(inited + 88) = v17;
  *(void *)(inited + 96) = v18;
  *(void *)(inited + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = v14;
  *(void *)(inited + 144) = &protocol witness table for Expression<A>;
  *(void *)(inited + 104) = v19;
  *(void *)(inited + 11sub_100096760(v0[56], v0 + 2) = a1;
  *(void *)(inited + 120) = a2;
  *(void *)(inited + 128) = _swiftEmptyArrayStorage;
  if ((a5 & 1) != 0)
  {
    __int128 v20 = xmmword_1000F7EF0;
    uint64_t v21 = _swiftEmptyArrayStorage;
    uint64_t v22 = &protocol witness table for Expression<A>;
  }

  else
  {
    *(double *)&__int128 v20 = sub_1000D333C();
  }

  *(void *)(inited + 176) = v14;
  *(void *)(inited + 184) = v22;
  *(_OWORD *)(inited + 15sub_100096760(v0[56], v0 + 2) = v20;
  *(void *)(inited + 168) = v21;
  sub_10001AFE4(a3, inited + 192);
  sub_10001BEF8();
  uint64_t v23 = _swiftEmptyArrayStorage;
  for (uint64_t i = 32LL; i != 232; i += 40LL)
  {
    sub_10001B644(inited + i, (uint64_t)v33, &qword_1001347B0);
    sub_1000D2378((uint64_t)v33, (uint64_t)&v30);
    if (v31)
    {
      sub_100009EEC(&v30, (uint64_t)v32);
      sub_100009EEC(v32, (uint64_t)&v30);
      if ((sub_1000D3528() & 1) == 0)
      {
        sub_1000D2F90(0, v23[2] + 1LL, 1, v23);
        uint64_t v23 = v27;
      }

      unint64_t v26 = v23[2];
      unint64_t v25 = v23[3];
      if (v26 >= v25 >> 1)
      {
        sub_1000D2F90(v25 > 1, v26 + 1, 1, v23);
        uint64_t v23 = v28;
      }

      _OWORD v23[2] = v26 + 1;
      sub_100009EEC(&v30, (uint64_t)&v23[5 * v26 + 4]);
    }

    else
    {
      sub_10001B60C((uint64_t)&v30, &qword_1001347B0);
    }
  }

  sub_1000D30C4();
  sub_1000D1CC8(&qword_1001347B0);
  sub_1000D2E38((uint64_t)v23, a6);
  return sub_100011958();
}

void Table.create(_:temporary:ifNotExists:)()
{
}

#error "1000CC204: call analysis failed (funcsize=64)"
uint64_t sub_1000CC280@<X0>( uint64_t a1@<X0>,  uint64_t a2@<X1>,  uint64_t a3@<X2>,  unsigned __int8 a4@<W3>,  char a5@<W4>,  char a6@<W5>,  uint64_t a7@<X6>,  uint64_t a8@<X7>,  uint64_t *a9@<X8>,  uint64_t a10,  uint64_t a11,  unint64_t a12)
{
  int v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  _UNKNOWN **v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  _UNKNOWN **v34;
  __int128 v35;
  void *v36;
  _UNKNOWN **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t i;
  unint64_t v43;
  unint64_t v44;
  void *v45;
  void *v46;
  _BYTE v48[112];
  __int128 v49;
  uint64_t v50;
  __int128 v51[2];
  __int128 v52;
  uint64_t v53;
  _BYTE v54[400];
  __int128 v20 = a4;
  uint64_t v21 = sub_100008DB0(&qword_1001347A8);
  uint64_t inited = swift_initStackObject(v21, v54);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F7F00;
  sub_10001AFE4(a1, inited + 32);
  uint64_t v23 = sub_100008DB0(&qword_100134618);
  uint64_t v24 = v23;
  *(void *)(inited + 104) = &protocol witness table for Expression<A>;
  *(void *)(inited + 7sub_100096760(v0[56], v0 + 2) = a2;
  *(void *)(inited + 80) = a3;
  *(void *)(inited + 88) = _swiftEmptyArrayStorage;
  *(void *)(inited + 96) = v23;
  if (v20 == 2)
  {
    unint64_t v25 = 0LL;
    unint64_t v26 = 0LL;
    unsigned __int8 v27 = 0LL;
    char v28 = 0LL;
    uint64_t v29 = 0LL;
  }

  else
  {
    unint64_t v25 = 0xD000000000000019LL;
    if ((v20 & 1) == 0) {
      unint64_t v25 = 0x205952414D495250LL;
    }
    unint64_t v26 = 0x80000001000FCC60LL;
    if ((v20 & 1) == 0) {
      unint64_t v26 = 0xEB0000000059454BLL;
    }
    uint64_t v29 = &protocol witness table for Expression<A>;
    unsigned __int8 v27 = _swiftEmptyArrayStorage;
    char v28 = v23;
  }

  *(void *)(inited + 11sub_100096760(v0[56], v0 + 2) = v25;
  *(void *)(inited + 120) = v26;
  *(void *)(inited + 128) = v27;
  *(void *)(inited + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = v28;
  *(void *)(inited + 144) = v29;
  if ((a5 & 1) != 0)
  {
    __int128 v30 = 0LL;
    uint64_t v31 = 0LL;
    uint64_t v32 = 0LL;
    uint64_t v33 = 0LL;
    uint64_t v34 = 0LL;
  }

  else
  {
    uint64_t v31 = 0xE800000000000000LL;
    __int128 v30 = 0x4C4C554E20544F4ELL;
    uint64_t v32 = _swiftEmptyArrayStorage;
    uint64_t v33 = v23;
    uint64_t v34 = &protocol witness table for Expression<A>;
  }

  *(void *)(inited + 15sub_100096760(v0[56], v0 + 2) = v30;
  *(void *)(inited + 160) = v31;
  *(void *)(inited + 168) = v32;
  *(void *)(inited + 176) = v33;
  *(void *)(inited + 184) = v34;
  if ((a6 & 1) != 0)
  {
    uint64_t v35 = xmmword_1000F7F10;
    uint64_t v36 = _swiftEmptyArrayStorage;
    uint64_t v37 = &protocol witness table for Expression<A>;
    uint64_t v38 = v23;
  }

  else
  {
    uint64_t v38 = 0LL;
    uint64_t v37 = 0LL;
    uint64_t v36 = 0LL;
    uint64_t v35 = 0uLL;
  }

  *(void *)(inited + 2swift_unknownObjectWeakDestroy(v0 + 16) = v38;
  *(void *)(inited + 224) = v37;
  *(_OWORD *)(inited + 19sub_100096760(v0[56], v0 + 2) = v35;
  *(void *)(inited + 208) = v36;
  sub_10001B644(a7, (uint64_t)&v52, &qword_1001347B0);
  if (v53)
  {
    sub_100009EEC(&v52, (uint64_t)v51);
    swift_bridgeObjectRetain();
    sub_1000D1BFC((uint64_t)v51, (uint64_t *)(inited + 232));
    sub_10000AC58(v51);
  }

  else
  {
    *(void *)(inited + 264) = 0LL;
    *(_OWORD *)(inited + 23sub_100096760(v0[56], v0 + 2) = 0u;
    *(_OWORD *)(inited + 248) = 0u;
    swift_bridgeObjectRetain();
  }

  sub_10001B644(a8, (uint64_t)&v52, &qword_1001347B0);
  if (v53)
  {
    sub_100009EEC(&v52, (uint64_t)v51);
    sub_1000D41F0(v51, 0x544C5541464544LL, 0xE700000000000000LL, (uint64_t *)(inited + 272));
    sub_10000AC58(v51);
  }

  else
  {
    *(void *)(inited + 304) = 0LL;
    *(_OWORD *)(inited + 27sub_100096760(v0[56], v0 + 2) = 0u;
    *(_OWORD *)(inited + 288) = 0u;
  }

  sub_1000D1A5C(a10, inited + 312);
  if (a12 == 3)
  {
    *(void *)(inited + 384) = 0LL;
    *(_OWORD *)(inited + 35sub_100096760(v0[56], v0 + 2) = 0u;
    *(_OWORD *)(inited + 368) = 0u;
  }

  else
  {
    uint64_t v39 = sub_100008DB0(&qword_100131160);
    __int128 v40 = swift_initStackObject(v39, v48);
    *(_OWORD *)(v40 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
    *(void *)(v40 + 3sub_100096760(v0[56], v0 + 2) = 0x4554414C4C4F43LL;
    *(void *)(v40 + 40) = 0xE700000000000000LL;
    *(void *)(v40 + 48) = _swiftEmptyArrayStorage;
    *(void *)(v40 + 56) = v24;
    *(void *)(v40 + 96) = &type metadata for Collation;
    *(void *)(v40 + 104) = &protocol witness table for Collation;
    *(void *)(v40 + 64) = &protocol witness table for Expression<A>;
    *(void *)(v40 + 7sub_100096760(v0[56], v0 + 2) = a11;
    *(void *)(v40 + 80) = a12;
    sub_1000D2C00(a11, a12);
    sub_1000D3EA4(v40, 32LL, 0xE100000000000000LL, (uint64_t *)(inited + 352));
    swift_setDeallocating(v40);
    sub_1000D1CC8((uint64_t *)&unk_1001323B0);
  }

  uint64_t v41 = _swiftEmptyArrayStorage;
  for (uint64_t i = 32LL; i != 392; i += 40LL)
  {
    sub_10001B644(inited + i, (uint64_t)&v52, &qword_1001347B0);
    sub_1000D2378((uint64_t)&v52, (uint64_t)&v49);
    if (v50)
    {
      sub_100009EEC(&v49, (uint64_t)v51);
      sub_100009EEC(v51, (uint64_t)&v49);
      if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0)
      {
        sub_1000D1F50(0, v41[2] + 1LL, 1, v41, &qword_100131160, (uint64_t *)&unk_1001323B0);
        uint64_t v41 = v45;
      }

      uint64_t v44 = v41[2];
      uint64_t v43 = v41[3];
      if (v44 >= v43 >> 1)
      {
        sub_1000D1F50(v43 > 1, v44 + 1, 1, v41, &qword_100131160, (uint64_t *)&unk_1001323B0);
        uint64_t v41 = v46;
      }

      v41[2] = v44 + 1;
      sub_100009EEC(&v49, (uint64_t)&v41[5 * v44 + 4]);
    }

    else
    {
      sub_10001B60C((uint64_t)&v49, &qword_1001347B0);
    }
  }

  swift_setDeallocating(inited);
  sub_1000D1CC8(&qword_1001347B0);
  sub_1000D3EA4((uint64_t)v41, 32LL, 0xE100000000000000LL, a9);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000CC728(uint64_t a1)
{
  uint64_t v3 = sub_100008DB0(&qword_100131160);
  uint64_t inited = swift_initStackObject(v3, v23);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5FF0;
  uint64_t v5 = sub_100008DB0(&qword_100134618);
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = 0x4154205245544C41LL;
  *(void *)(inited + 40) = 0xEB00000000454C42LL;
  *(void *)(inited + 48) = _swiftEmptyArrayStorage;
  *(void *)(inited + 56) = v5;
  unint64_t v7 = v1[5];
  uint64_t v6 = v1[6];
  unint64_t v8 = v1[7];
  if (v7)
  {
    uint64_t v9 = v1[4];
    unint64_t v10 = v7;
  }

  else
  {
    int v11 = v1 + 2;
    uint64_t v9 = v1[2];
    unint64_t v10 = v11[1];
    swift_bridgeObjectRetain();
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_1000D4294(34LL, 0xE100000000000000LL, v9, v10);
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  if (v8)
  {
    uint64_t v15 = swift_initStackObject(v3, v22);
    *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
    *(void *)(v15 + 56) = v5;
    *(void *)(v15 + 64) = &protocol witness table for Expression<A>;
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_1000D4294(34LL, 0xE100000000000000LL, v6, v8);
    uint64_t v17 = a1;
    uint64_t v19 = v18;
    swift_bridgeObjectRelease();
    *(void *)(v15 + 3sub_100096760(v0[56], v0 + 2) = v16;
    *(void *)(v15 + 40) = v19;
    a1 = v17;
    *(void *)(v15 + 48) = _swiftEmptyArrayStorage;
    *(void *)(v15 + 96) = v5;
    *(void *)(v15 + 104) = &protocol witness table for Expression<A>;
    *(void *)(v15 + 7sub_100096760(v0[56], v0 + 2) = v12;
    *(void *)(v15 + 80) = v14;
    *(void *)(v15 + 88) = _swiftEmptyArrayStorage;
    sub_1000D3EA4(v15, 46LL, 0xE100000000000000LL, (uint64_t *)(inited + 72));
    swift_setDeallocating(v15);
    sub_1000D1CC8((uint64_t *)&unk_1001323B0);
  }

  else
  {
    *(void *)(inited + 96) = v5;
    *(void *)(inited + 104) = &protocol witness table for Expression<A>;
    *(void *)(inited + 7sub_100096760(v0[56], v0 + 2) = v12;
    *(void *)(inited + 80) = v14;
    *(void *)(inited + 88) = _swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease();
  *(void *)(inited + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = v5;
  *(void *)(inited + 144) = &protocol witness table for Expression<A>;
  *(void *)(inited + 11sub_100096760(v0[56], v0 + 2) = 0x554C4F4320444441LL;
  *(void *)(inited + 120) = 0xEA00000000004E4DLL;
  *(void *)(inited + 128) = _swiftEmptyArrayStorage;
  sub_10001AFE4(a1, inited + 152);
  sub_1000D3EA4(inited, 32LL, 0xE100000000000000LL, v24);
  swift_setDeallocating(inited);
  sub_1000D1CC8((uint64_t *)&unk_1001323B0);
  sub_100008D74(v24, v24[3]);
  uint64_t countAndFlagsBits = Expressible.asSQL()()._countAndFlagsBits;
  sub_10000AC58(v24);
  return countAndFlagsBits;
}

#error "1000CCA44: call analysis failed (funcsize=61)"
void Table.addColumn<A>(_:check:defaultValue:)( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  void v57[2];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[80];
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  _UNKNOWN **v68;
  void v69[5];
  void v70[6];
  sub_10000AE58();
  uint64_t v58 = v21;
  uint64_t v59 = v22;
  uint64_t v24 = v23;
  uint64_t v60 = v25;
  id v61 = v26;
  char v28 = v27;
  __int128 v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v35 = sub_1000D360C(v33, v31, v29, v27, v22, v25, v26, v23);
  uint64_t v36 = *(void *)(v35 - 8);
  sub_1000D3708();
  __chkstk_darwin(v37);
  uint64_t v39 = (char *)v57 - v38;
  v69[3] = sub_1000D3624(v40, v41, v42, v43);
  v69[4] = &protocol witness table for Expression<A>;
  v69[0] = v34;
  v69[1] = v32;
  v69[2] = v30;
  uint64_t v44 = *(uint64_t (**)(uint64_t, uint64_t))(a21 + 40);
  sub_1000119E4();
  sub_10000AE38();
  unint64_t v45 = v44(v24, a21);
  unint64_t v46 = v59;
  v57[1] = v45;
  uint64_t v48 = v47;
  if (v59)
  {
    *((void *)&v67 + 1) = sub_100008DB0(&qword_1001347C0);
    char v68 = &protocol witness table for Expression<A>;
    char v49 = v28;
    *(void *)&BOOL v66 = v28;
    *((void *)&v66 + 1) = v46;
    *(void *)&unint64_t v67 = v60;
  }

  else
  {
    char v49 = v28;
    char v68 = 0LL;
    BOOL v66 = 0u;
    unint64_t v67 = 0u;
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v39, v61, v35);
  if (sub_100009E6C((uint64_t)v39, 1LL, v24) == 1)
  {
    __int128 v50 = sub_1000D2F88(v49, v46);
    (*(void (**)(char *, uint64_t, double))(v36 + 8))(v39, v35, v50);
    uint64_t v65 = 0LL;
    uint64_t v63 = 0u;
    char v64 = 0u;
  }

  else
  {
    char v51 = *(void *)(a21 + 8);
    *((void *)&v64 + 1) = v24;
    uint64_t v65 = v51;
    uint64_t v52 = sub_10001AFA8(&v63);
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v24 - 8) + 32LL))(v52, v39, v24);
    sub_1000D2F88(v49, v46);
  }

  memset(v62, 0, sizeof(v62));
  char v53 = sub_1000D3454();
  sub_1000D2FAC(v53, v54, v48, (uint64_t)&v66, (uint64_t)&v63, v55, v56, 0LL, 3uLL);
  sub_10001BC70();
  sub_10001B60C((uint64_t)v62, &qword_1001347B8);
  sub_1000D3300((uint64_t)&v63);
  sub_1000D3300((uint64_t)&v66);
  sub_10000AC58(v69);
  sub_1000CC728((uint64_t)v70);
  sub_10000AC58(v70);
  sub_10000AD58();
}

void Table.addColumn<A>(_:check:defaultValue:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  uint64_t v52 = v21;
  uint64_t v23 = v22;
  unint64_t v51 = v24;
  uint64_t v50 = v25;
  uint64_t v27 = v26;
  uint64_t v49 = v28;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v35 = sub_1000D360C(v33, v31, v29, v28, v26, v25, v24, v22);
  uint64_t v36 = *(void *)(v35 - 8);
  sub_1000D3708();
  __chkstk_darwin(v37);
  uint64_t v39 = (char *)&v49 - v38;
  v58[3] = sub_1000D3378(v40, v41, v42, v43);
  v58[4] = &protocol witness table for Expression<A>;
  v58[0] = v34;
  v58[1] = v32;
  __int128 v58[2] = v30;
  sub_1000119E4();
  sub_10000AE38();
  sub_1000D34A8();
  sub_1000D2DC8();
  v57[3] = sub_100008DB0(&qword_1001347C8);
  v57[4] = &protocol witness table for Expression<A>;
  v57[0] = v49;
  v57[1] = v27;
  v57[2] = v50;
  (*(void (**)(char *, unint64_t, uint64_t))(v36 + 16))(v39, v51, v35);
  if (sub_100009E6C((uint64_t)v39, 1LL, v23) == 1)
  {
    uint64_t v44 = *(void (**)(char *, uint64_t))(v36 + 8);
    sub_100027FA0();
    sub_10001C064();
    v44(v39, v35);
    uint64_t v56 = 0LL;
    __int128 v54 = 0u;
    __int128 v55 = 0u;
  }

  else
  {
    uint64_t v45 = *(void *)(a21 + 8);
    *((void *)&v55 + 1) = v23;
    uint64_t v56 = v45;
    unint64_t v46 = sub_10001AFA8(&v54);
    sub_1000B78B8( (uint64_t)v46,  (uint64_t)v39,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32LL));
    sub_100027FA0();
    sub_10001C064();
  }

  sub_1000D2F3C();
  uint64_t v50 = 0LL;
  unint64_t v51 = 3LL;
  uint64_t v47 = sub_1000D3454();
  sub_1000D2FAC(v47, v32, v30, (uint64_t)v57, (uint64_t)&v54, v48, v49, v50, v51);
  sub_10000ADB0();
  sub_10001B60C((uint64_t)&v53, &qword_1001347B8);
  sub_1000D2C38((uint64_t)&v54);
  sub_1000D2C38((uint64_t)v57);
  sub_10000AC58(v58);
  sub_1000D3444();
  sub_10000AC58(v59);
  sub_10000AD58();
}

#error "1000CCFA4: call analysis failed (funcsize=73)"
#error "1000CD0D4: call analysis failed (funcsize=71)"
#error "1000CD200: call analysis failed (funcsize=71)"
#error "1000CD328: call analysis failed (funcsize=70)"
void Table.addColumn<A>(_:check:defaultValue:collate:)( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11)
{
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void v41[5];
  __int128 v42;
  __int128 v43;
  _UNKNOWN **v44;
  void v45[11];
  v45[3] = sub_1000D2F7C(a1, a2, a3, a4);
  v45[4] = &protocol witness table for Expression<A>;
  v45[0] = a1;
  v45[1] = a2;
  v45[2] = a3;
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(a11 + 40);
  sub_10001C1BC();
  sub_10000AE38();
  uint64_t v19 = v18(a10, a11);
  uint64_t v21 = v20;
  if (a5)
  {
    *((void *)&v43 + 1) = sub_100008DB0(&qword_1001347C0);
    uint64_t v44 = &protocol witness table for Expression<A>;
    *(void *)&uint64_t v42 = a4;
    *((void *)&v42 + 1) = a5;
    *(void *)&uint64_t v43 = a6;
  }

  else
  {
    uint64_t v44 = 0LL;
    uint64_t v42 = 0u;
    uint64_t v43 = 0u;
  }

  uint64_t v22 = *(void *)(a11 + 8);
  v41[3] = a10;
  v41[4] = v22;
  uint64_t v23 = sub_10001AFA8(v41);
  sub_1000D3548((uint64_t)v23, a7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a10 - 8) + 16LL));
  sub_1000D32B8();
  uint64_t v24 = sub_1000D3658();
  sub_1000D24E4(v24, v25);
  uint64_t v26 = sub_1000D315C();
  sub_1000D2F9C(v26, v19, v21, v27, v28, v29, v38, v39, v40);
  uint64_t v30 = sub_10000ADB0();
  sub_1000D34B8(v30, &qword_1001347B8, v31, v32, v33, v34, v35, v36);
  sub_1000D2C38((uint64_t)v41);
  sub_1000D2C38((uint64_t)&v42);
  sub_10000AC58(v45);
  uint64_t v37 = sub_1000D355C();
  sub_1000D2C8C(v37);
  sub_1000D329C();
}

void Table.addColumn<A>(_:check:defaultValue:collate:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v41[3] = sub_1000D2E7C(a1, a2, a3, a4);
  v41[4] = &protocol witness table for Expression<A>;
  v41[0] = a1;
  v41[1] = a2;
  v41[2] = a3;
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(a11 + 40);
  sub_10001BCF8();
  sub_10000AFB0();
  uint64_t v19 = v18(a10, a11);
  uint64_t v21 = v20;
  id v40[3] = sub_100008DB0(&qword_1001347C8);
  v40[4] = &protocol witness table for Expression<A>;
  v40[0] = a4;
  v40[1] = a5;
  v40[2] = a6;
  uint64_t v22 = *(void *)(a11 + 8);
  v39[3] = a10;
  v39[4] = v22;
  uint64_t v23 = sub_10001AFA8(v39);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a10 - 8) + 16LL))(v23, a7, a10);
  sub_1000D32B8();
  sub_10001C064();
  sub_1000119E4();
  uint64_t v24 = sub_1000D315C();
  sub_1000D2F9C(v24, v19, v21, v25, v26, v27, v36, v37, v38);
  uint64_t v28 = sub_10001DEC4();
  sub_1000D34B8(v28, &qword_1001347B8, v29, v30, v31, v32, v33, v34);
  sub_1000D2C38((uint64_t)v39);
  sub_1000D2C38((uint64_t)v40);
  sub_10000AC58(v41);
  uint64_t v35 = sub_1000D355C();
  sub_1000D2C8C(v35);
  sub_1000D329C();
}

void Table.addColumn<A>(_:check:defaultValue:collate:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, unint64_t a21, uint64_t a22, uint64_t a23)
{
  uint64_t v61 = v24;
  uint64_t v62 = v23;
  uint64_t v64 = v25;
  uint64_t v65 = v26;
  uint64_t v63 = v27;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v36 = type metadata accessor for Optional(0LL, a22);
  uint64_t v37 = *(void *)(v36 - 8);
  sub_1000D3708();
  __chkstk_darwin(v38);
  uint64_t v40 = (char *)&v58 - v39;
  v73[3] = sub_1000D309C(v41, v42, v43, v44);
  v73[4] = &protocol witness table for Expression<A>;
  v73[0] = v35;
  v73[1] = v33;
  v73[2] = v31;
  uint64_t v45 = *(uint64_t (**)(uint64_t, uint64_t))(a23 + 40);
  sub_10001C064();
  sub_10000AE38();
  uint64_t v46 = v45(a22, a23);
  uint64_t v47 = v63;
  uint64_t v59 = v48;
  uint64_t v60 = v46;
  if (v63)
  {
    *((void *)&v71 + 1) = sub_100008DB0(&qword_1001347C0);
    unint64_t v72 = &protocol witness table for Expression<A>;
    *(void *)&__int128 v70 = v29;
    *((void *)&v70 + 1) = v47;
    *(void *)&__int128 v71 = v64;
  }

  else
  {
    unint64_t v72 = 0LL;
    __int128 v70 = 0u;
    __int128 v71 = 0u;
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v40, v65, v36);
  if (sub_100009E6C((uint64_t)v40, 1LL, a22) == 1)
  {
    double v49 = sub_1000D3464();
    (*(void (**)(char *, uint64_t, double))(v37 + 8))(v40, v36, v49);
    uint64_t v69 = 0LL;
    __int128 v67 = 0u;
    __int128 v68 = 0u;
  }

  else
  {
    uint64_t v50 = *(void *)(a23 + 8);
    *((void *)&v68 + 1) = a22;
    uint64_t v69 = v50;
    unint64_t v51 = sub_10001AFA8(&v67);
    sub_1000D3548( (uint64_t)v51,  (uint64_t)v40,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a22 - 8) + 32LL));
    sub_1000D3464();
  }

  uint64_t v52 = v59;
  memset(v66, 0, sizeof(v66));
  uint64_t v57 = v61;
  uint64_t v53 = sub_1000D3454();
  sub_1000D2FAC(v53, v54, v52, (uint64_t)&v70, (uint64_t)&v67, v55, v56, v57, a21);
  sub_100011958();
  sub_10001B60C((uint64_t)v66, &qword_1001347B8);
  sub_1000D3300((uint64_t)&v67);
  sub_1000D3300((uint64_t)&v70);
  sub_10000AC58(v73);
  sub_1000CC728((uint64_t)v74);
  sub_10000AC58(v74);
  sub_10000AD58();
}

{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[80];
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  void v62[5];
  void v63[5];
  uint64_t v64[6];
  sub_10000AE58();
  uint64_t v57 = v23;
  uint64_t v56 = v24;
  uint64_t v54 = v25;
  uint64_t v53 = v26;
  uint64_t v52 = v27;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  __int128 v55 = a21;
  uint64_t v36 = type metadata accessor for Optional(0LL, a22);
  uint64_t v37 = *(void *)(v36 - 8);
  sub_1000D3708();
  __chkstk_darwin(v38);
  uint64_t v40 = (char *)&v52 - v39;
  v63[3] = sub_1000D2F7C(v41, v42, v43, v44);
  v63[4] = &protocol witness table for Expression<A>;
  v63[0] = v35;
  v63[1] = v33;
  void v63[2] = v31;
  uint64_t v45 = *(uint64_t (**)(uint64_t, uint64_t))(a23 + 40);
  sub_10001BD0C();
  sub_10000AE38();
  uint64_t v46 = v45(a22, a23);
  uint64_t v48 = v47;
  void v62[3] = sub_100008DB0(&qword_1001347C8);
  v62[4] = &protocol witness table for Expression<A>;
  v62[0] = v29;
  v62[1] = v52;
  void v62[2] = v53;
  sub_1000D3548((uint64_t)v40, v54, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 16));
  if (sub_100009E6C((uint64_t)v40, 1LL, a22) == 1)
  {
    double v49 = *(void (**)(char *, uint64_t))(v37 + 8);
    sub_10001C064();
    sub_10001BEF8();
    v49(v40, v36);
    uint64_t v61 = 0LL;
    uint64_t v59 = 0u;
    uint64_t v60 = 0u;
  }

  else
  {
    uint64_t v50 = *(void *)(a23 + 8);
    *((void *)&v60 + 1) = a22;
    uint64_t v61 = v50;
    unint64_t v51 = sub_10001AFA8(&v59);
    (*(void (**)(void *, char *, uint64_t))(*(void *)(a22 - 8) + 32LL))(v51, v40, a22);
    sub_10001C064();
    sub_10001BEF8();
  }

  sub_1000D2F3C();
  sub_1000D2FAC((uint64_t)v63, v46, v48, (uint64_t)v62, (uint64_t)&v59, v64, (uint64_t)v58, v56, v55);
  sub_10000ADB0();
  sub_10001B60C((uint64_t)v58, &qword_1001347B8);
  sub_1000D2C38((uint64_t)&v59);
  sub_1000D2C38((uint64_t)v62);
  sub_10000AC58(v63);
  sub_1000D3444();
  sub_10000AC58(v64);
  sub_10000AD58();
}

uint64_t sub_1000CD9D8(uint64_t a1)
{
  uint64_t v3 = sub_100008DB0(&qword_100131160);
  uint64_t inited = swift_initStackObject(v3, v26);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5FF0;
  uint64_t v5 = sub_100008DB0(&qword_100134618);
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = 0x4154205245544C41LL;
  *(void *)(inited + 40) = 0xEB00000000454C42LL;
  *(void *)(inited + 48) = _swiftEmptyArrayStorage;
  *(void *)(inited + 56) = v5;
  uint64_t v6 = v1[6];
  unint64_t v7 = v1[7];
  if (!v1[5]) {
    sub_10001C064();
  }
  sub_10001C064();
  sub_10001C1BC();
  uint64_t v8 = sub_1000D33C8();
  uint64_t v10 = v9;
  sub_10001BE7C();
  if (v7)
  {
    uint64_t v11 = swift_initStackObject(v3, v25);
    *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
    *(void *)(v11 + 56) = v5;
    *(void *)(v11 + 64) = &protocol witness table for Expression<A>;
    sub_10001BD0C();
    uint64_t v12 = sub_1000D351C();
    uint64_t v14 = sub_1000D4294(v12, v13, v6, v7);
    uint64_t v15 = a1;
    uint64_t v17 = v16;
    swift_bridgeObjectRelease();
    *(void *)(v11 + 3sub_100096760(v0[56], v0 + 2) = v14;
    *(void *)(v11 + 40) = v17;
    a1 = v15;
    *(void *)(v11 + 48) = _swiftEmptyArrayStorage;
    *(void *)(v11 + 96) = v5;
    *(void *)(v11 + 104) = &protocol witness table for Expression<A>;
    *(void *)(v11 + 7sub_100096760(v0[56], v0 + 2) = v8;
    *(void *)(v11 + 80) = v10;
    *(void *)(v11 + 88) = _swiftEmptyArrayStorage;
    sub_1000D2E44(v11, 46LL, (uint64_t *)(inited + 72));
    sub_1000D3698();
    sub_1000D3684((uint64_t *)&unk_1001323B0);
  }

  else
  {
    *(void *)(inited + 96) = v5;
    *(void *)(inited + 104) = &protocol witness table for Expression<A>;
    *(void *)(inited + 7sub_100096760(v0[56], v0 + 2) = v8;
    *(void *)(inited + 80) = v10;
    *(void *)(inited + 88) = _swiftEmptyArrayStorage;
  }

  sub_10001BE7C();
  *(void *)(inited + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = v5;
  *(void *)(inited + 144) = &protocol witness table for Expression<A>;
  *(void *)(inited + 11sub_100096760(v0[56], v0 + 2) = 0x5420454D414E4552LL;
  *(void *)(inited + 120) = 0xE90000000000004FLL;
  *(void *)(inited + 128) = _swiftEmptyArrayStorage;
  uint64_t v18 = *(void *)(a1 + 16);
  unint64_t v19 = *(void *)(a1 + 24);
  *(void *)(inited + 176) = v5;
  *(void *)(inited + 184) = &protocol witness table for Expression<A>;
  sub_10001BEF8();
  uint64_t v20 = sub_1000D4294(34LL, 0xE100000000000000LL, v18, v19);
  uint64_t v22 = v21;
  sub_100011958();
  *(void *)(inited + 15sub_100096760(v0[56], v0 + 2) = v20;
  *(void *)(inited + 160) = v22;
  *(void *)(inited + 168) = _swiftEmptyArrayStorage;
  sub_1000D2E38(inited, v27);
  swift_setDeallocating(inited);
  sub_1000D1CC8((uint64_t *)&unk_1001323B0);
  uint64_t v23 = sub_1000D2D0C(v27);
  return sub_1000D2C8C(v23);
}

#error "1000CDD84: call analysis failed (funcsize=135)"
uint64_t sub_1000CDE54@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  Swift::String v21;
  uint64_t v22;
  Swift::String_optional v23;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;
  uint64_t result;
  uint64_t v34;
  unint64_t v35;
  Swift::String_optional v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t inited;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  char v50[112];
  Swift::String v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v5 = sub_100008DB0((uint64_t *)&unk_100132130);
  uint64_t v6 = swift_allocObject(v5, 80LL, 7LL);
  *(_OWORD *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57E0;
  *(void *)(v6 + 3sub_100096760(v0[56], v0 + 2) = 0x7865646E69LL;
  *(void *)(v6 + 40) = 0xE500000000000000LL;
  unint64_t v7 = v2[3];
  uint64_t v8 = v2[6];
  uint64_t v9 = v2[7];
  *(void *)(v6 + 48) = v2[2];
  *(void *)(v6 + 56) = v7;
  *(void *)(v6 + 64) = 28271LL;
  *(void *)(v6 + 7sub_100096760(v0[56], v0 + 2) = 0xE200000000000000LL;
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v46 = v8;
  uint64_t v47 = a2;
  if (v10)
  {
    swift_bridgeObjectRetain();
    sub_1000452D4();
    uint64_t v11 = a1 + 32;
    do
    {
      sub_10001AFE4(v11, (uint64_t)&v51);
      uint64_t v12 = v53;
      uint64_t v13 = v54;
      sub_100008D74(&v51, v53);
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
      uint64_t v16 = v15;
      swift_bridgeObjectRelease();
      sub_10000AC58(&v51);
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
        sub_1000452D4();
      }
      uint64_t v17 = _swiftEmptyArrayStorage[2];
      if (v17 >= _swiftEmptyArrayStorage[3] >> 1) {
        sub_1000452D4();
      }
      _swiftEmptyArrayStorage[2] = v17 + 1;
      uint64_t v18 = &_swiftEmptyArrayStorage[2 * v17];
      v18[4] = v14;
      void v18[5] = v16;
      v11 += 40LL;
      --v10;
    }

    while (v10);
  }

  else
  {
    swift_bridgeObjectRetain();
  }

  v51._uint64_t countAndFlagsBits = v6;
  sub_1000427B8();
  unint64_t v19 = sub_100008DB0((uint64_t *)&unk_100132780);
  uint64_t v20 = sub_1000D2BBC();
  BidirectionalCollection<>.joined(separator:)(32LL, 0xE100000000000000LL, v19, v20);
  swift_bridgeObjectRelease();
  uint64_t v21 = String.lowercased()();
  swift_bridgeObjectRelease();
  uint64_t v22 = ((unint64_t)v21._object >> 56) & 0xF;
  unint64_t v51 = v21;
  uint64_t v52 = 0LL;
  uint64_t v53 = v22;
  swift_bridgeObjectRetain();
  uint64_t v23 = String.Iterator.next()();
  if (!v23.value._object)
  {
    uint64_t v26 = 0LL;
    uint64_t v27 = 0xE000000000000000LL;
LABEL_48:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_1000D4294(34LL, 0xE100000000000000LL, v26, v27);
    uint64_t v39 = v38;
    swift_bridgeObjectRelease();
    if (v9)
    {
      uint64_t v40 = sub_100008DB0(&qword_100131160);
      uint64_t inited = swift_initStackObject(v40, v50);
      *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
      uint64_t v42 = sub_100008DB0(&qword_100134618);
      *(void *)(inited + 56) = v42;
      *(void *)(inited + 64) = &protocol witness table for Expression<A>;
      swift_bridgeObjectRetain();
      uint64_t v43 = sub_1000D4294(34LL, 0xE100000000000000LL, v46, v9);
      uint64_t v45 = v44;
      swift_bridgeObjectRelease();
      *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = v43;
      *(void *)(inited + 40) = v45;
      *(void *)(inited + 48) = _swiftEmptyArrayStorage;
      *(void *)(inited + 96) = v42;
      *(void *)(inited + 104) = &protocol witness table for Expression<A>;
      *(void *)(inited + 7sub_100096760(v0[56], v0 + 2) = v37;
      *(void *)(inited + 80) = v39;
      *(void *)(inited + 88) = _swiftEmptyArrayStorage;
      sub_1000D3EA4(inited, 46LL, 0xE100000000000000LL, v47);
      swift_setDeallocating(inited);
      sub_1000D1CC8((uint64_t *)&unk_1001323B0);
      return swift_bridgeObjectRelease();
    }

    else
    {
      v47[3] = sub_100008DB0(&qword_100134618);
      v47[4] = (uint64_t)&protocol witness table for Expression<A>;
      Swift::String result = swift_bridgeObjectRelease();
      uint8_t *v47 = v37;
      v47[1] = v39;
      v47[2] = (uint64_t)_swiftEmptyArrayStorage;
    }

    return result;
  }

  uint64_t countAndFlagsBits = v23.value._countAndFlagsBits;
  object = v23.value._object;
  uint64_t v26 = 0LL;
  uint64_t v27 = 0xE000000000000000LL;
  while (1)
  {
    uint64_t v28 = countAndFlagsBits == 34 && object == (void *)0xE100000000000000LL;
    if (!v28
      && (_stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, 34LL, 0xE100000000000000LL, 0LL) & 1) == 0)
    {
      break;
    }

    swift_bridgeObjectRelease();
LABEL_45:
    uint64_t v36 = String.Iterator.next()();
    uint64_t countAndFlagsBits = v36.value._countAndFlagsBits;
    object = v36.value._object;
    if (!v36.value._object) {
      goto LABEL_48;
    }
  }

  Swift::String result = _stringCompareWithSmolCheck(_:_:expecting:)(122LL, 0xE100000000000000LL, 97LL, 0xE100000000000000LL, 1LL);
  if ((result & 1) == 0)
  {
    if (countAndFlagsBits != 97 || object != (void *)0xE100000000000000LL)
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, 97LL, 0xE100000000000000LL, 1LL) & 1) != 0)
      {
LABEL_31:
        Swift::String result = _stringCompareWithSmolCheck(_:_:expecting:)( 57LL,  0xE100000000000000LL,  48LL,  0xE100000000000000LL,  1LL);
        if ((result & 1) != 0) {
          goto LABEL_52;
        }
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, 48LL, 0xE100000000000000LL, 1LL) & 1) != 0)
        {
LABEL_42:
          uint64_t v48 = v26;
          double v49 = v27;
          swift_bridgeObjectRetain();
          uint64_t v34 = 95LL;
          uint64_t v35 = 0xE100000000000000LL;
LABEL_44:
          String.append(_:)(*(Swift::String *)&v34);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v26 = v48;
          uint64_t v27 = v49;
          goto LABEL_45;
        }

        if (countAndFlagsBits != 57 || object != (void *)0xE100000000000000LL)
        {
LABEL_41:
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(57LL, 0xE100000000000000LL, countAndFlagsBits, object, 1LL) & 1) != 0) {
            goto LABEL_42;
          }
        }

uint64_t Table.dropIndex(_:ifExists:)(uint64_t a1)
{
  return sub_1000D2CC4(v2);
}

void View.create(_:temporary:ifNotExists:)()
{
}

void sub_1000CE3B0()
{
  uint64_t v36 = v1;
  uint64_t v37 = v2;
  char v33 = v3;
  char v5 = v4;
  unint64_t v7 = v6;
  uint64_t v8 = sub_100008DB0(&qword_1001347A8);
  uint64_t v9 = sub_1000D3540(v8);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57E0;
  uint64_t v32 = v0[6];
  unint64_t v10 = v0[7];
  if (v0[5])
  {
    uint64_t v11 = v0[4];
    unint64_t v38 = v0[5];
  }

  else
  {
    uint64_t v11 = v0[2];
    unint64_t v38 = v0[3];
    swift_bridgeObjectRetain();
  }

  sub_1000119E4();
  sub_10001C1BC();
  uint64_t v34 = sub_1000D4294(34LL, 0xE100000000000000LL, v11, v38);
  uint64_t v35 = v12;
  sub_10001BC70();
  uint64_t v13 = _swiftEmptyArrayStorage;
  if (v10)
  {
    uint64_t v14 = sub_100008DB0(&qword_100131160);
    uint64_t inited = swift_initStackObject(v14, v39);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
    uint64_t v16 = sub_100008DB0(&qword_100134618);
    *(void *)(inited + 56) = v16;
    *(void *)(inited + 64) = &protocol witness table for Expression<A>;
    sub_1000280C8();
    uint64_t v17 = sub_1000D351C();
    uint64_t v19 = sub_1000D4294(v17, v18, v32, v10);
    uint64_t v21 = v20;
    swift_bridgeObjectRelease();
    *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = v19;
    *(void *)(inited + 40) = v21;
    *(void *)(inited + 48) = _swiftEmptyArrayStorage;
    *(void *)(inited + 96) = v16;
    *(void *)(inited + 104) = &protocol witness table for Expression<A>;
    *(void *)(inited + 7sub_100096760(v0[56], v0 + 2) = v34;
    *(void *)(inited + 80) = v35;
    *(void *)(inited + 88) = _swiftEmptyArrayStorage;
    sub_1000D2E44(inited, 46LL, v43);
    sub_1000D30C4();
    sub_1000D1CC8((uint64_t *)&unk_1001323B0);
    swift_bridgeObjectRelease();
  }

  else
  {
    v43[3] = sub_100008DB0(&qword_100134618);
    v43[4] = (uint64_t)&protocol witness table for Expression<A>;
    swift_bridgeObjectRelease();
    v43[0] = v34;
    v43[1] = v35;
    v43[2] = (uint64_t)_swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0) {
    unsigned __int8 v22 = 1;
  }
  else {
    unsigned __int8 v22 = 2;
  }
  sub_1000CBEE0(v36, v37, (uint64_t)v43, v22, v33 & 1, (uint64_t *)(v9 + 32));
  sub_10000AC58(v43);
  *(void *)(v9 + 96) = sub_100008DB0(&qword_100134618);
  *(void *)(v9 + 104) = &protocol witness table for Expression<A>;
  *(void *)(v9 + 7sub_100096760(v0[56], v0 + 2) = 21313LL;
  *(void *)(v9 + 80) = 0xE200000000000000LL;
  *(void *)(v9 + 88) = _swiftEmptyArrayStorage;
  uint64_t v23 = v7[3];
  uint64_t v24 = v7[4];
  uint64_t v25 = sub_100008D74(v7, v23);
  *(void *)(v9 + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = v23;
  *(void *)(v9 + 144) = *(void *)(v24 + 8);
  uint64_t v26 = sub_10001AFA8((void *)(v9 + 112));
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v23 - 8) + 16LL))(v26, v25, v23);
  for (uint64_t i = 32LL; i != 152; i += 40LL)
  {
    sub_1000D3664(v9 + i, (uint64_t)v43);
    sub_1000D2378((uint64_t)v43, (uint64_t)&v40);
    if (v41)
    {
      sub_100009EEC(&v40, (uint64_t)v42);
      sub_100009EEC(v42, (uint64_t)&v40);
      if ((sub_1000D3528() & 1) == 0)
      {
        sub_1000D2E58(0, v13[2] + 1LL);
        uint64_t v13 = v30;
      }

      unint64_t v29 = v13[2];
      unint64_t v28 = v13[3];
      if (v29 >= v28 >> 1)
      {
        sub_1000D2E58(v28 > 1, v29 + 1);
        uint64_t v13 = v31;
      }

      v13[2] = v29 + 1;
      sub_100009EEC(&v40, (uint64_t)&v13[5 * v29 + 4]);
    }

    else
    {
      sub_1000D3278((uint64_t)&v40);
    }
  }

  sub_10001198C();
  sub_1000D2E38((uint64_t)v13, v43);
  sub_100011958();
  sub_1000D2D0C(v43);
  sub_10008443C();
  sub_1000D2CC4(v43);
  sub_10000AD58();
}

Swift::String __swiftcall View.drop(ifExists:)(Swift::Bool ifExists)
{
  uint64_t v3 = v1[5];
  uint64_t v2 = v1[6];
  unint64_t v4 = v1[7];
  if (!v3) {
    sub_1000119E4();
  }
  sub_1000119E4();
  sub_10001BCF8();
  uint64_t v5 = sub_1000D33B4();
  uint64_t v7 = v6;
  sub_10001BC70();
  if (v4)
  {
    uint64_t v8 = sub_100008DB0(&qword_100131160);
    uint64_t inited = swift_initStackObject(v8, &v17);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
    uint64_t v10 = sub_100008DB0(&qword_100134618);
    *(void *)(inited + 56) = v10;
    *(void *)(inited + 64) = &protocol witness table for Expression<A>;
    sub_10000AE38();
    uint64_t v11 = sub_1000D4294(34LL, 0xE100000000000000LL, v2, v4);
    uint64_t v13 = v12;
    sub_10000ADB0();
    *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = v11;
    *(void *)(inited + 40) = v13;
    *(void *)(inited + 48) = _swiftEmptyArrayStorage;
    *(void *)(inited + 96) = v10;
    *(void *)(inited + 104) = &protocol witness table for Expression<A>;
    *(void *)(inited + 7sub_100096760(v0[56], v0 + 2) = v5;
    *(void *)(inited + 80) = v7;
    *(void *)(inited + 88) = _swiftEmptyArrayStorage;
    sub_1000D2E44(inited, 46LL, v18);
    swift_setDeallocating(inited);
    sub_1000D1CC8((uint64_t *)&unk_1001323B0);
    sub_10001BC70();
  }

  else
  {
    void v18[3] = sub_100008DB0(&qword_100134618);
    v18[4] = (uint64_t)&protocol witness table for Expression<A>;
    sub_10001BC70();
    v18[0] = v5;
    v18[1] = v7;
    v18[2] = (uint64_t)_swiftEmptyArrayStorage;
  }

  sub_1000CB6F4();
  sub_10008443C();
  uint64_t v14 = sub_1000D2CC4(v18);
  result._object = v15;
  result._uint64_t countAndFlagsBits = v14;
  return result;
}

void VirtualTable.create(_:ifNotExists:)()
{
  uint64_t v1 = v0;
  char v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v34 = v8;
  uint64_t v9 = sub_100008DB0(&qword_1001347A8);
  uint64_t v10 = sub_1000D3540(v9);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57E0;
  uint64_t v11 = v1[7];
  if (v1[5])
  {
    uint64_t v12 = v1[4];
    unint64_t v13 = v1[5];
  }

  else
  {
    uint64_t v12 = v1[2];
    unint64_t v13 = v1[3];
    sub_100027FA0();
  }

  sub_100027FA0();
  sub_10001C1BC();
  uint64_t v32 = sub_1000D4294(34LL, 0xE100000000000000LL, v12, v13);
  uint64_t v33 = v14;
  sub_10001DED8();
  uint64_t v15 = _swiftEmptyArrayStorage;
  if (v11)
  {
    uint64_t v16 = sub_100008DB0(&qword_100131160);
    char v30 = v3;
    uint64_t inited = swift_initStackObject(v16, v35);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
    uint64_t v31 = v7;
    uint64_t v18 = v5;
    uint64_t v19 = sub_100008DB0(&qword_100134618);
    *(void *)(inited + 56) = v19;
    *(void *)(inited + 64) = &protocol witness table for Expression<A>;
    sub_1000119E4();
    uint64_t v20 = sub_1000D33B4();
    uint64_t v22 = v21;
    sub_10001BC70();
    *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = v20;
    *(void *)(inited + 40) = v22;
    *(void *)(inited + 48) = _swiftEmptyArrayStorage;
    *(void *)(inited + 96) = v19;
    *(void *)(inited + 104) = &protocol witness table for Expression<A>;
    *(void *)(inited + 7sub_100096760(v0[56], v0 + 2) = v32;
    *(void *)(inited + 80) = v33;
    uint64_t v5 = v18;
    uint64_t v7 = v31;
    *(void *)(inited + 88) = _swiftEmptyArrayStorage;
    sub_1000D2E44(inited, 46LL, v39);
    sub_1000D30C4();
    sub_1000D1CC8((uint64_t *)&unk_1001323B0);
    char v3 = v30;
    sub_10001DED8();
  }

  else
  {
    v39[3] = sub_100008DB0(&qword_100134618);
    v39[4] = (uint64_t)&protocol witness table for Expression<A>;
    sub_10001DED8();
    v39[0] = v32;
    v39[1] = v33;
    v39[2] = (uint64_t)_swiftEmptyArrayStorage;
  }

  sub_1000CBEE0(0x204C415554524956LL, 0xED0000454C424154LL, (uint64_t)v39, 2u, v3 & 1, (uint64_t *)(v10 + 32));
  sub_10000AC58(v39);
  uint64_t v23 = sub_100008DB0(&qword_100134618);
  *(void *)(v10 + 7sub_100096760(v0[56], v0 + 2) = 0x474E495355LL;
  *(void *)(v10 + 80) = 0xE500000000000000LL;
  *(void *)(v10 + 88) = _swiftEmptyArrayStorage;
  *(void *)(v10 + 96) = v23;
  *(void *)(v10 + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = &type metadata for Module;
  *(void *)(v10 + 144) = &protocol witness table for Module;
  *(void *)(v10 + 104) = &protocol witness table for Expression<A>;
  *(void *)(v10 + 11sub_100096760(v0[56], v0 + 2) = v34;
  *(void *)(v10 + 120) = v7;
  *(void *)(v10 + 128) = v5;
  sub_1000280C8();
  sub_10001C064();
  for (uint64_t i = 32LL; i != 152; i += 40LL)
  {
    sub_1000D3664(v10 + i, (uint64_t)v39);
    sub_1000D2378((uint64_t)v39, (uint64_t)&v36);
    if (v37)
    {
      sub_100009EEC(&v36, (uint64_t)v38);
      sub_100009EEC(v38, (uint64_t)&v36);
      if ((sub_1000D3528() & 1) == 0)
      {
        sub_1000D2E58(0, v15[2] + 1LL);
        uint64_t v15 = v27;
      }

      unint64_t v26 = v15[2];
      unint64_t v25 = v15[3];
      if (v26 >= v25 >> 1)
      {
        char v28 = sub_1000760D0(v25);
        sub_1000D2E58(v28, v26 + 1);
        uint64_t v15 = v29;
      }

      void v15[2] = v26 + 1;
      sub_100009EEC(&v36, (uint64_t)&v15[5 * v26 + 4]);
    }

    else
    {
      sub_1000D3278((uint64_t)&v36);
    }
  }

  sub_10001198C();
  sub_1000D2E38((uint64_t)v15, v39);
  sub_100011958();
  sub_1000D2D0C(v39);
  sub_10008443C();
  sub_1000D2CC4(v39);
  sub_10000AD58();
}

uint64_t VirtualTable.rename(_:)(uint64_t a1)
{
  return sub_1000CD9D8(a1);
}

#error "1000CEC50: call analysis failed (funcsize=59)"
#error "1000CED04: call analysis failed (funcsize=59)"
#error "1000CEE48: call analysis failed (funcsize=59)"
#error "1000CEEE8: call analysis failed (funcsize=45)"
#error "1000CF010: call analysis failed (funcsize=61)"
#error "1000CF138: call analysis failed (funcsize=70)"
#error "1000CF1EC: call analysis failed (funcsize=61)"
#error "1000CF340: call analysis failed (funcsize=61)"
#error "1000CF458: call analysis failed (funcsize=66)"
#error "1000CF4F8: call analysis failed (funcsize=46)"
#error "1000CF610: call analysis failed (funcsize=56)"
#error "1000CF700: call analysis failed (funcsize=56)"
void TableBuilder.column<A>(_:primaryKey:check:)( uint64_t a1,  uint64_t a2,  uint64_t a3,  char a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9)
{
  uint64_t v9;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  _UNKNOWN **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v40 = a1;
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(a9 + 40);
  sub_1000C6AEC(a1, a2);
  sub_10000AE38();
  v15(a8, a9);
  sub_1000D2DC8();
  if (a6)
  {
    *((void *)&v38 + 1) = sub_100008DB0(&qword_1001347C0);
    uint64_t v39 = &protocol witness table for Expression<A>;
    *(void *)&uint64_t v37 = a5;
    *((void *)&v37 + 1) = a6;
    *(void *)&unint64_t v38 = a7;
  }

  else
  {
    uint64_t v39 = 0LL;
    uint64_t v37 = 0u;
    unint64_t v38 = 0u;
  }

  __int128 v36 = 0LL;
  memset(v35, 0, sizeof(v35));
  sub_1000D32B8();
  sub_1000D2F88(a5, a6);
  uint64_t v34 = sub_1000D309C(v16, v17, v18, v19);
  uint64_t v20 = sub_1000D342C();
  sub_1000D2F08( v20,  a9,  a8,  a4 & 1,  v21,  v22,  v23,  v24,  v32,  v33,  3uLL,  v9,  v34,  (uint64_t)&protocol witness table for Expression<A>);
  unint64_t v25 = sub_10000ADB0();
  sub_1000D34B8(v25, &qword_1001347B8, v26, v27, v28, v29, v30, v31);
  sub_1000D2C38((uint64_t)v35);
  sub_1000D2C38((uint64_t)&v37);
  sub_1000D2CBC();
  swift_bridgeObjectRelease();
  sub_1000D3140();
}

void TableBuilder.column<A>(_:primaryKey:check:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = v9;
  unsigned __int8 v15 = a4 & 1;
  void v40[5] = a1;
  v40[6] = a2;
  v40[7] = a3;
  uint64_t v16 = *(void (**)(uint64_t))(a9 + 40);
  sub_1000C6AEC(a1, a2);
  sub_10000AE38();
  uint64_t v17 = a8;
  uint64_t v18 = sub_1000D3658();
  v16(v18);
  sub_1000D368C();
  id v40[3] = sub_100008DB0(&qword_1001347C8);
  v40[4] = &protocol witness table for Expression<A>;
  v40[0] = a5;
  v40[1] = a6;
  v40[2] = a7;
  uint64_t v39 = 0LL;
  memset(v38, 0, sizeof(v38));
  sub_1000D32B8();
  uint64_t v23 = sub_1000D2CDC(v19, v20, v21, v22);
  sub_10001BCF8();
  sub_1000119E4();
  uint64_t v24 = sub_1000D342C();
  sub_1000D2F08( v24,  a9,  v17,  v15,  v25,  v26,  v27,  v28,  v36,  v37,  3uLL,  v10,  v23,  (uint64_t)&protocol witness table for Expression<A>);
  uint64_t v29 = sub_10000ADB0();
  sub_1000D34B8(v29, &qword_1001347B8, v30, v31, v32, v33, v34, v35);
  sub_1000D2C38((uint64_t)v38);
  sub_1000D2C38((uint64_t)v40);
  sub_1000D2CBC();
  swift_bridgeObjectRelease();
  sub_1000D3140();
}

#error "1000CF9E0: call analysis failed (funcsize=59)"
#error "1000CFAA8: call analysis failed (funcsize=50)"
#error "1000CFBBC: call analysis failed (funcsize=66)"
#error "1000CFC9C: call analysis failed (funcsize=52)"
#error "1000CFDAC: call analysis failed (funcsize=62)"
#error "1000CFE80: call analysis failed (funcsize=47)"
#error "1000CFF88: call analysis failed (funcsize=69)"
#error "1000D0074: call analysis failed (funcsize=51)"
#error "1000D01E4: call analysis failed (funcsize=70)"
#error "1000D02A0: call analysis failed (funcsize=58)"
#error "1000D03E4: call analysis failed (funcsize=62)"
#error "1000D0494: call analysis failed (funcsize=49)"
#error "1000D05E0: call analysis failed (funcsize=70)"
#error "1000D0700: call analysis failed (funcsize=68)"
#error "1000D07BC: call analysis failed (funcsize=60)"
#error "1000D0908: call analysis failed (funcsize=62)"
#error "1000D0A18: call analysis failed (funcsize=64)"
#error "1000D0AC8: call analysis failed (funcsize=50)"
void TableBuilder.primaryKey<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[72];
  uint64_t v6 = sub_100008DB0(&qword_100131160);
  uint64_t inited = swift_initStackObject(v6, v11);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5520;
  *(void *)(inited + 56) = sub_1000D3210(inited, v8, v9, v10);
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = a1;
  *(void *)(inited + 40) = a2;
  *(void *)(inited + 48) = a3;
  sub_1000119E4();
  sub_10001BEF8();
  sub_1000D0BC0(inited);
  swift_setDeallocating(inited);
  sub_1000D1CC8((uint64_t *)&unk_1001323B0);
  sub_1000D33A0();
}

uint64_t sub_1000D0BC0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(v1 + 16) + 16LL);
  sub_1000D1E04(v2);
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v2 + 1;
  return sub_100009EEC(v5, v3 + 40 * v2 + 32);
}

uint64_t TableBuilder.primaryKey<A, B>(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_100008DB0(&qword_100131160);
  uint64_t inited = swift_initStackObject(v12, &v22);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
  uint64_t v17 = sub_1000D3618(inited, v14, v15, v16);
  *(void *)(inited + 56) = v17;
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = a1;
  *(void *)(inited + 40) = a2;
  *(void *)(inited + 48) = a3;
  *(void *)(inited + 96) = sub_1000D309C(v17, v18, v19, v20);
  *(void *)(inited + 104) = &protocol witness table for Expression<A>;
  *(void *)(inited + 7sub_100096760(v0[56], v0 + 2) = a4;
  *(void *)(inited + 80) = a5;
  *(void *)(inited + 88) = a6;
  sub_10001C1BC();
  sub_10001BCF8();
  sub_10001C064();
  sub_10000AFB0();
  sub_1000D0BC0(inited);
  sub_1000D3698();
  return sub_1000D3684((uint64_t *)&unk_1001323B0);
}

uint64_t TableBuilder.primaryKey<A, B, C>(_:_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v18 = sub_100008DB0(&qword_100131160);
  uint64_t inited = swift_initStackObject(v18, v32);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57E0;
  uint64_t v23 = sub_1000D2E7C(inited, v20, v21, v22);
  *(void *)(inited + 56) = v23;
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = a1;
  *(void *)(inited + 40) = a2;
  *(void *)(inited + 48) = a3;
  *(void *)(inited + 96) = sub_1000D3210(v23, v24, v25, v26);
  *(void *)(inited + 104) = &protocol witness table for Expression<A>;
  *(void *)(inited + 7sub_100096760(v0[56], v0 + 2) = a4;
  *(void *)(inited + 80) = a5;
  *(void *)(inited + 88) = a6;
  *(void *)(inited + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = type metadata accessor for Expression(0LL, a12, v27, v28);
  *(void *)(inited + 144) = &protocol witness table for Expression<A>;
  *(void *)(inited + 11sub_100096760(v0[56], v0 + 2) = a7;
  *(void *)(inited + 120) = a8;
  *(void *)(inited + 128) = a9;
  sub_100027FA0();
  sub_10001BCF8();
  sub_10001BD0C();
  sub_10001BEF8();
  sub_10000AFB0();
  sub_10001C064();
  sub_1000D0BC0(inited);
  swift_setDeallocating(inited);
  return sub_1000D1CC8((uint64_t *)&unk_1001323B0);
}

void TableBuilder.primaryKey<A, B, C, D>(_:_:_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  a53 = v62;
  a54 = v63;
  uint64_t v95 = v64;
  uint64_t v96 = v65;
  uint64_t v67 = v66;
  uint64_t v69 = v68;
  uint64_t v71 = v70;
  uint64_t v73 = v72;
  uint64_t v75 = v74;
  uint64_t v77 = v76;
  uint64_t v99 = a58;
  uint64_t v98 = a57;
  uint64_t v97 = a56;
  uint64_t v93 = a55;
  uint64_t v94 = a62;
  uint64_t v78 = sub_100008DB0(&qword_100131160);
  uint64_t inited = swift_initStackObject(v78, &a18);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5FF0;
  uint64_t v83 = sub_1000D2CDC(inited, v80, v81, v82);
  *(void *)(inited + 56) = v83;
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = v77;
  *(void *)(inited + 40) = v75;
  *(void *)(inited + 48) = v73;
  uint64_t v87 = sub_1000D3618(v83, v84, v85, v86);
  *(void *)(inited + 96) = v87;
  *(void *)(inited + 104) = &protocol witness table for Expression<A>;
  *(void *)(inited + 7sub_100096760(v0[56], v0 + 2) = v71;
  *(void *)(inited + 80) = v69;
  *(void *)(inited + 88) = v67;
  *(void *)(inited + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = sub_1000D309C(v87, v88, v89, v90);
  *(void *)(inited + 144) = &protocol witness table for Expression<A>;
  *(void *)(inited + 11sub_100096760(v0[56], v0 + 2) = v95;
  *(void *)(inited + 120) = v96;
  *(void *)(inited + 128) = v93;
  *(void *)(inited + 176) = type metadata accessor for Expression(0LL, v94, v91, v92);
  *(void *)(inited + 184) = &protocol witness table for Expression<A>;
  *(void *)(inited + 15sub_100096760(v0[56], v0 + 2) = v97;
  *(void *)(inited + 160) = v98;
  *(void *)(inited + 168) = v99;
  sub_100027FA0();
  sub_1000280C8();
  sub_10001C1BC();
  sub_10001BCF8();
  sub_10000AE38();
  sub_1000119E4();
  sub_10001BEF8();
  sub_10000AFB0();
  sub_1000D0BC0(inited);
  swift_setDeallocating(inited);
  sub_1000D1CC8((uint64_t *)&unk_1001323B0);
  sub_1000D2C1C();
}

Swift::Void __swiftcall TableBuilder.unique(_:)(Swift::OpaquePointer a1)
{
}

uint64_t TableBuilder.check(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_bridgeObjectRelease();
}

void TableBuilder.check(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v7[3] = sub_100008DB0(&qword_1001347C8);
  v7[4] = &protocol witness table for Expression<A>;
  v7[0] = a1;
  v7[1] = a2;
  v7[2] = a3;
  sub_10001BEF8();
  sub_10000AE38();
  sub_1000D41F0(v7, 0x4B43454843LL, 0xE500000000000000LL, (uint64_t *)v8);
  sub_10000AC58(v7);
  sub_1000D36A0();
  sub_1000D32C8();
  sub_1000D3350();
  sub_100009EEC(v8, v6);
  sub_1000D33A0();
}

AppIntents_SQLite::TableBuilder::Dependency_optional __swiftcall TableBuilder.Dependency.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001273F0, v2);
  sub_10001198C();
  if (v3 >= 5) {
    return (AppIntents_SQLite::TableBuilder::Dependency_optional)5;
  }
  else {
    return (AppIntents_SQLite::TableBuilder::Dependency_optional)v3;
  }
}

uint64_t TableBuilder.Dependency.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000D116C + 4 * byte_1000F7F20[a1]))( 0x4F49544341204F4ELL,  0xE90000000000004ELL);
}

uint64_t sub_1000D116C()
{
  return 0x5443495254534552LL;
}

uint64_t sub_1000D1184()
{
  return 0x4C4C554E20544553LL;
}

uint64_t sub_1000D119C()
{
  return 0x4146454420544553LL;
}

uint64_t sub_1000D11BC()
{
  return 0x45444143534143LL;
}

void sub_1000D11D4(char *a1)
{
}

void sub_1000D11E0()
{
}

void sub_1000D11E8(uint64_t a1)
{
}

void sub_1000D11F0(uint64_t a1)
{
}

AppIntents_SQLite::TableBuilder::Dependency_optional sub_1000D11F8@<W0>( Swift::String *a1@<X0>, AppIntents_SQLite::TableBuilder::Dependency_optional *a2@<X8>)
{
  result.value = TableBuilder.Dependency.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t sub_1000D1224@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = TableBuilder.Dependency.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void TableBuilder.foreignKey<A>(_:references:_:update:delete:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8, unsigned __int8 a9, uint64_t a10)
{
  v15[0] = a1;
  v15[1] = a2;
  void v15[2] = a3;
  v14[0] = a5;
  v14[1] = a6;
  v14[2] = a7;
  uint64_t v13 = type metadata accessor for Expression(0LL, a10, a3, a4);
  sub_10001BCF8();
  sub_10001BD0C();
  sub_10000AFB0();
  sub_10000AE38();
  sub_1000D2510( (uint64_t)v15,  a4,  (uint64_t)v14,  a8,  a9,  v10,  v13,  v13,  (uint64_t)&protocol witness table for Expression<A>,  (uint64_t)&protocol witness table for Expression<A>);
  swift_bridgeObjectRelease();
  sub_10001BEC0();
  sub_10000ADB0();
  sub_10001198C();
  sub_1000D325C();
}

{
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void v22[3];
  void v23[3];
  v23[0] = a1;
  v23[1] = a2;
  _OWORD v23[2] = a3;
  v22[0] = a5;
  v22[1] = a6;
  v22[2] = a7;
  uint64_t v13 = type metadata accessor for Optional(255LL, a10);
  uint64_t v17 = sub_1000D2CB0(v13, v14, v15, v16);
  uint64_t v21 = sub_1000D2F7C(v17, v18, v19, v20);
  sub_10001BEF8();
  sub_1000119E4();
  sub_10000AFB0();
  sub_10000AE38();
  sub_1000D2510( (uint64_t)v23,  a4,  (uint64_t)v22,  a8,  a9,  v10,  v17,  v21,  (uint64_t)&protocol witness table for Expression<A>,  (uint64_t)&protocol witness table for Expression<A>);
  sub_10001BC70();
  sub_100011958();
  sub_10000ADB0();
  sub_10001198C();
  sub_1000D325C();
}

void TableBuilder.foreignKey<A, B>(_:references:_:update:delete:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, unsigned __int8 a26, unsigned __int8 a27, uint64_t a28, uint64_t a29)
{
  uint64_t v62 = v29;
  uint64_t v61 = v30;
  uint64_t v60 = v31;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v59 = v36;
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  uint64_t v43 = sub_100008DB0(&qword_100131160);
  uint64_t v44 = sub_1000D3540(v43);
  *(_OWORD *)(v44 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
  uint64_t v48 = sub_1000D309C(v44, v45, v46, v47);
  *(void *)(v44 + 56) = v48;
  *(void *)(v44 + 64) = &protocol witness table for Expression<A>;
  *(void *)(v44 + 3sub_100096760(v0[56], v0 + 2) = v42;
  *(void *)(v44 + 40) = v40;
  *(void *)(v44 + 48) = v38;
  uint64_t v51 = type metadata accessor for Expression(0LL, a29, v49, v50);
  *(void *)(v44 + 96) = v51;
  *(void *)(v44 + 104) = &protocol witness table for Expression<A>;
  *(void *)(v44 + 7sub_100096760(v0[56], v0 + 2) = v59;
  *(void *)(v44 + 80) = v35;
  *(void *)(v44 + 88) = v33;
  sub_10001C1BC();
  sub_10001BD0C();
  sub_1000119E4();
  sub_100027FA0();
  sub_1000D2EDC(v44, v70);
  sub_1000D30C4();
  sub_1000D1CC8((uint64_t *)&unk_1001323B0);
  sub_10001AFE4(v60, (uint64_t)v68);
  uint64_t inited = swift_initStackObject(v43, v67);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
  *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = v61;
  *(void *)(inited + 56) = v48;
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 40) = a21;
  *(void *)(inited + 48) = a22;
  *(void *)(inited + 96) = v51;
  *(void *)(inited + 104) = &protocol witness table for Expression<A>;
  *(void *)(inited + 7sub_100096760(v0[56], v0 + 2) = a23;
  *(void *)(inited + 80) = a24;
  *(void *)(inited + 88) = a25;
  swift_bridgeObjectRetain();
  sub_10001C064();
  sub_10001BEF8();
  sub_10000AFB0();
  sub_1000D2EDC(inited, v69);
  sub_1000D30C4();
  sub_1000D1CC8((uint64_t *)&unk_1001323B0);
  sub_10001AFE4((uint64_t)v68, (uint64_t)v63);
  sub_10001AFE4((uint64_t)v69, (uint64_t)v64);
  uint64_t v53 = v71;
  uint64_t v54 = v72;
  __int128 v55 = sub_100008D74(v70, v71);
  uint64_t v56 = v65;
  uint64_t v57 = v66;
  uint64_t v58 = sub_100008D74(v64, v65);
  sub_1000D2510((uint64_t)v55, (uint64_t)v63, (uint64_t)v58, a26, a27, v62, v53, v56, v54, v57);
  sub_10001B60C((uint64_t)v68, &qword_1001347D0);
  sub_10000AC58(v70);
  sub_10000AC58(v64);
  sub_10000AC58(v63);
  sub_10000AD58();
}

void TableBuilder.foreignKey<A, B, C>(_:references:_:update:delete:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, unsigned __int8 a32, unsigned __int8 a33, uint64_t a34, uint64_t a35, uint64_t a36)
{
  uint64_t v73 = v36;
  uint64_t v69 = v37;
  uint64_t v71 = v38;
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  uint64_t v68 = v43;
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  uint64_t v49 = v48;
  uint64_t v72 = sub_100008DB0(&qword_100131160);
  uint64_t inited = swift_initStackObject(v72, v81);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57E0;
  sub_1000119E4();
  sub_10001BEF8();
  sub_10001C064();
  uint64_t v51 = swift_bridgeObjectRelease();
  uint64_t v70 = sub_1000D2F7C(v51, v52, v53, v54);
  *(void *)(inited + 56) = v70;
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = v49;
  *(void *)(inited + 40) = v47;
  *(void *)(inited + 48) = v45;
  sub_1000119E4();
  sub_10001BEF8();
  sub_10001C064();
  sub_10000AFB0();
  sub_100011958();
  sub_10001BC70();
  uint64_t v57 = type metadata accessor for Expression(0LL, a35, v55, v56);
  *(void *)(inited + 96) = v57;
  *(void *)(inited + 104) = &protocol witness table for Expression<A>;
  *(void *)(inited + 7sub_100096760(v0[56], v0 + 2) = v68;
  *(void *)(inited + 80) = v42;
  *(void *)(inited + 88) = v40;
  sub_1000119E4();
  sub_10001BEF8();
  sub_10000AFB0();
  sub_10001C064();
  sub_100011958();
  sub_10001BC70();
  uint64_t v60 = type metadata accessor for Expression(0LL, a36, v58, v59);
  *(void *)(inited + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = v60;
  *(void *)(inited + 144) = &protocol witness table for Expression<A>;
  *(void *)(inited + 11sub_100096760(v0[56], v0 + 2) = v71;
  *(void *)(inited + 120) = v69;
  *(void *)(inited + 128) = a21;
  sub_1000D2EDC(inited, v82);
  sub_1000D30C4();
  sub_1000D1CC8((uint64_t *)&unk_1001323B0);
  sub_10001AFE4(a22, (uint64_t)v79);
  uint64_t v61 = swift_initStackObject(v72, v78);
  *(_OWORD *)(v61 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57E0;
  sub_10001BCF8();
  sub_10001C1BC();
  sub_100027FA0();
  swift_bridgeObjectRelease();
  *(void *)(v61 + 3sub_100096760(v0[56], v0 + 2) = a23;
  *(void *)(v61 + 40) = a24;
  *(void *)(v61 + 56) = v70;
  *(void *)(v61 + 64) = &protocol witness table for Expression<A>;
  *(void *)(v61 + 48) = a25;
  sub_10001BCF8();
  sub_10001C1BC();
  sub_100027FA0();
  sub_10001C064();
  swift_bridgeObjectRelease();
  sub_10001BEC0();
  *(void *)(v61 + 96) = v57;
  *(void *)(v61 + 104) = &protocol witness table for Expression<A>;
  *(void *)(v61 + 7sub_100096760(v0[56], v0 + 2) = a26;
  *(void *)(v61 + 80) = a27;
  *(void *)(v61 + 88) = a28;
  sub_10001BCF8();
  sub_10001C1BC();
  sub_10001BD0C();
  sub_10001C064();
  swift_bridgeObjectRelease();
  sub_10001BEC0();
  *(void *)(v61 + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = v60;
  *(void *)(v61 + 144) = &protocol witness table for Expression<A>;
  *(void *)(v61 + 11sub_100096760(v0[56], v0 + 2) = a29;
  *(void *)(v61 + 120) = a30;
  *(void *)(v61 + 128) = a31;
  sub_1000D2EDC(v61, v80);
  sub_1000D30C4();
  sub_1000D1CC8((uint64_t *)&unk_1001323B0);
  sub_10001AFE4((uint64_t)v79, (uint64_t)v74);
  sub_10001AFE4((uint64_t)v80, (uint64_t)v75);
  uint64_t v62 = v83;
  uint64_t v63 = v84;
  uint64_t v64 = sub_100008D74(v82, v83);
  uint64_t v65 = v76;
  uint64_t v66 = v77;
  uint64_t v67 = sub_100008D74(v75, v76);
  sub_1000D2510((uint64_t)v64, (uint64_t)v74, (uint64_t)v67, a32, a33, v73, v62, v65, v63, v66);
  sub_10001B60C((uint64_t)v79, &qword_1001347D0);
  sub_10000AC58(v82);
  sub_10000AC58(v75);
  sub_10000AC58(v74);
  sub_10000AD58();
}

void sub_1000D18F4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = sub_100008DB0(&qword_100131160);
  uint64_t inited = swift_initStackObject(v5, v14);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57E0;
  uint64_t v7 = sub_100008DB0(&qword_100134618);
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = 0x434E455245464552LL;
  *(void *)(inited + 40) = 0xEA00000000005345LL;
  *(void *)(inited + 48) = _swiftEmptyArrayStorage;
  *(void *)(inited + 56) = v7;
  sub_100008D74(v15, v15[3]);
  sub_1000D9878();
  uint64_t v8 = v17;
  uint64_t v9 = v18;
  uint64_t v10 = sub_100008D74(v16, v17);
  uint64_t v11 = sub_1000D4984(v10, 0LL, 0xE000000000000000LL, v8, v9);
  *(void *)(inited + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = v7;
  *(void *)(inited + 144) = &protocol witness table for Expression<A>;
  *(void *)(inited + 11sub_100096760(v0[56], v0 + 2) = v11;
  *(void *)(inited + 120) = v12;
  *(void *)(inited + 128) = v13;
  sub_1000D3EA4(inited, 32LL, 0xE100000000000000LL, a3);
  swift_setDeallocating(inited);
  sub_1000D1CC8((uint64_t *)&unk_1001323B0);
  sub_10001B60C((uint64_t)v15, &qword_1001347D0);
}

double sub_1000D1A5C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (__src[3])
  {
    memcpy(v4, __src, sizeof(v4));
    sub_1000D18F4((uint64_t)v4, (uint64_t)&v4[40], (uint64_t *)a2);
    sub_10001B60C((uint64_t)v4, &qword_1001347D0);
  }

  else
  {
    *(void *)(a2 + 3sub_100096760(v0[56], v0 + 2) = 0LL;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
  }

  return result;
}

uint64_t TableBuilder.deinit()
{
  return v0;
}

uint64_t TableBuilder.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t Module.init(_:_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = sub_1000D351C();
  uint64_t v6 = sub_1000D4294(v3, v4, v5, a2);
  sub_10000ADB0();
  return v6;
}

uint64_t Module.expression.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v10;
  uint64_t v6 = v11;
  uint64_t v7 = sub_100008D74(v9, v10);
  sub_1000D4984(v7, a1, a2, v5, v6);
  sub_10008443C();
  return sub_1000D2CC4(v9);
}

uint64_t sub_1000D1BF0()
{
  return Module.expression.getter(*v0, v0[1], v0[2]);
}

uint64_t sub_1000D1BFC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_100008DB0(&qword_100131160);
  uint64_t inited = swift_initStackObject(v4, &v8);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
  uint64_t v6 = sub_100008DB0(&qword_100134618);
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = 0x4B43454843LL;
  *(void *)(inited + 40) = 0xE500000000000000LL;
  *(void *)(inited + 48) = _swiftEmptyArrayStorage;
  *(void *)(inited + 56) = v6;
  sub_10001AFE4(a1, inited + 72);
  sub_1000D3EA4(inited, 32LL, 0xE100000000000000LL, a2);
  swift_setDeallocating(inited);
  return sub_1000D1CC8((uint64_t *)&unk_1001323B0);
}

uint64_t sub_1000D1CC8(uint64_t *a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  sub_100008DB0(a1);
  swift_arrayDestroy(v1 + 32, v2);
  return swift_deallocClassInstance(v1, 32LL, 7LL);
}

void sub_1000D1D10()
{
}

void sub_1000D1D24(uint64_t *a1, uint64_t *a2)
{
  uint64_t v5 = (void *)*v2;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  *uint64_t v2 = v5;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000D1F50(0, v5[2] + 1LL, 1, v5, a1, a2);
    *uint64_t v2 = v7;
  }

  sub_10000AF74();
}

void sub_1000D1D7C()
{
}

void sub_1000D1D88(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t v4 = sub_1000D3528();
  *uint64_t v1 = v3;
  if (!(_DWORD)v4) {
    *uint64_t v1 = a1(v4, *(void *)(v3 + 16) + 1LL, 1LL, v3);
  }
  sub_10000AF74();
}

uint64_t type metadata accessor for TableBuilder()
{
  return objc_opt_self(&OBJC_CLASS____TtC17AppIntents_SQLite12TableBuilder);
}

void sub_1000D1DF0(uint64_t a1)
{
}

void sub_1000D1E04(uint64_t a1)
{
  unint64_t v2 = *(void *)(*(void *)v1 + 24LL);
  if (a1 + 1 > (uint64_t)(v2 >> 1))
  {
    char v3 = sub_1000760D0(v2);
    sub_1000D1F50(v3, v4, 1, v5, v6, v7);
    *(void *)uint64_t v1 = v8;
  }

uint64_t sub_1000D1E44(uint64_t a1)
{
  return sub_1000B06F8(a1, (uint64_t (*)(BOOL))sub_1000D205C);
}

void sub_1000D1E50(char a1, uint64_t a2, char a3, void *a4)
{
}

void sub_1000D1E64()
{
  if ((v4 & 1) != 0)
  {
    sub_10001BAE0();
    if (v5 != v6)
    {
      sub_10001BB10();
      if (v5)
      {
        __break(1u);
        return;
      }

      sub_10001BAD0();
    }
  }

  sub_10001BBC4();
  if (v3)
  {
    uint64_t v7 = sub_100008DB0(&qword_100131970);
    uint64_t v8 = (void *)sub_10000C254(v7, 40LL * (void)v3 + 32);
    sub_10001C11C(v8);
  }

  else
  {
    char v3 = _swiftEmptyArrayStorage;
  }

  if ((v1 & 1) != 0)
  {
    if (v3 != v0 || &v0[5 * v2 + 4] <= v3 + 4) {
      memmove(v3 + 4, v0 + 4, 40 * v2);
    }
    v0[2] = 0LL;
  }

  else
  {
    sub_100008DB0(&qword_100131978);
    sub_1000D3484((uint64_t)(v3 + 4));
  }

  sub_10001198C();
  sub_10001BAF0();
}

void sub_1000D1F3C(char a1, uint64_t a2, char a3, void *a4)
{
}

void sub_1000D1F50(char a1, uint64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if ((a3 & 1) != 0)
  {
    sub_10001BAE0();
    if (v10 != v11)
    {
      sub_10001BB10();
      if (v10)
      {
        __break(1u);
        return;
      }

      sub_10001BAD0();
    }
  }

  else
  {
    uint64_t v9 = a2;
  }

  uint64_t v12 = a4[2];
  if (v9 <= v12) {
    uint64_t v13 = a4[2];
  }
  else {
    uint64_t v13 = v9;
  }
  if (v13)
  {
    uint64_t v14 = sub_100008DB0(a5);
    uint64_t v15 = (void *)sub_10000C254(v14, 40 * v13 + 32);
    size_t v16 = j__malloc_size(v15);
    void v15[2] = v12;
    void v15[3] = 2 * ((uint64_t)(v16 - 32) / 40);
  }

  else
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
  }

  if ((a1 & 1) != 0)
  {
    if (v15 != a4 || &a4[5 * v12 + 4] <= v15 + 4) {
      memmove(v15 + 4, a4 + 4, 40 * v12);
    }
    a4[2] = 0LL;
  }

  else
  {
    sub_100008DB0(a6);
    swift_arrayInitWithCopy(v15 + 4);
  }

  sub_10001198C();
}

void *sub_1000D205C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008DB0(&qword_100134898);
    char v11 = (void *)swift_allocObject(v10, 88 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 88);
  }

  else
  {
    char v11 = _swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || &a4[11 * v8 + 4] <= v11 + 4) {
      memmove(v11 + 4, a4 + 4, 88 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    sub_100008DB0(&qword_1001348A0);
    swift_arrayInitWithCopy(v11 + 4);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

void sub_1000D2180()
{
  if ((v4 & 1) != 0)
  {
    sub_10001BAE0();
    if (v5 != v6)
    {
      sub_10001BB10();
      if (v5)
      {
        __break(1u);
        return;
      }

      sub_10001BAD0();
    }
  }

  sub_10001BBC4();
  if (v3)
  {
    uint64_t v7 = sub_100008DB0(&qword_1001323E0);
    uint64_t v8 = (void *)sub_10000C254(v7, 80LL * (void)v3 + 32);
    sub_10001C11C(v8);
  }

  else
  {
    char v3 = _swiftEmptyArrayStorage;
  }

  uint64_t v9 = (char *)(v3 + 4);
  uint64_t v10 = (char *)(v0 + 4);
  if ((v1 & 1) != 0)
  {
    if (v3 != v0 || &v10[80 * v2] <= v9) {
      memmove(v9, v10, 80 * v2);
    }
    v0[2] = 0LL;
  }

  else
  {
    sub_1000D3484((uint64_t)v9);
  }

  sub_10001198C();
  sub_10001BAF0();
}

void sub_1000D2240()
{
  if ((v4 & 1) != 0)
  {
    sub_10001BAE0();
    if (v5 != v6)
    {
      sub_10001BB10();
      if (v5)
      {
        __break(1u);
        return;
      }

      sub_10001BAD0();
    }
  }

  sub_10001BBC4();
  if (v3)
  {
    uint64_t v7 = sub_100008DB0(&qword_100131F18);
    uint64_t v8 = (char *)sub_10000C254(v7, 32 * v3 + 32);
    size_t v9 = j__malloc_size(v8);
    *((void *)v8 + sub_100096760(v0[56], v0 + 2) = v2;
    *((void *)v8 + 3) = 2 * ((uint64_t)(v9 - 32) / 32);
  }

  else
  {
    uint64_t v8 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v10 = v8 + 32;
  char v11 = v0 + 32;
  if ((v1 & 1) != 0)
  {
    if (v8 != v0 || &v11[32 * v2] <= v10) {
      memmove(v10, v11, 32 * v2);
    }
    *((void *)v0 + sub_100096760(v0[56], v0 + 2) = 0LL;
  }

  else
  {
    sub_1000D3484((uint64_t)v10);
  }

  sub_10001198C();
  sub_10000AF74();
}

char *sub_1000D2308(char *result, uint64_t a2, char *a3)
{
  if (a3 != result || &result[40 * a2] <= a3) {
    return (char *)sub_10001BA7C(a3, result);
  }
  return result;
}

char *sub_1000D2330(char *result, uint64_t a2, char *a3)
{
  if (a3 != result || &result[80 * a2] <= a3) {
    return (char *)sub_10001BA7C(a3, result);
  }
  return result;
}

char *sub_1000D2358(char *result, uint64_t a2, char *a3)
{
  if (a3 != result || &result[8 * a2] <= a3) {
    return (char *)sub_10001BA7C(a3, result);
  }
  return result;
}

uint64_t sub_1000D2378(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008DB0(&qword_1001347B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D23C0( uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, char a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v27[3] = a13;
  v27[4] = a14;
  uint64_t v21 = sub_10001AFA8(v27);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a13 - 8) + 16LL))(v21, a1, a13);
  sub_1000CC280((uint64_t)v27, a2, a3, a4, a5, a6, a7, a8, (uint64_t *)v26, a9, a10, a11);
  sub_1000D1D24(&qword_100131160, (uint64_t *)&unk_1001323B0);
  uint64_t v22 = *(void *)(*(void *)(a12 + 16) + 16LL);
  sub_1000D1E04(v22);
  uint64_t v23 = *(void *)(a12 + 16);
  *(void *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = v22 + 1;
  sub_100009EEC(v26, v23 + 40 * v22 + 32);
  return sub_10000AC58(v27);
}

double sub_1000D24E4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1000C6AEC(a1, a2);
    *(void *)&double result = swift_bridgeObjectRetain().n128_u64[0];
  }

  return result;
}

uint64_t sub_1000D2510( uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v18 = a4;
  void v53[3] = a7;
  v53[4] = a9;
  uint64_t v19 = sub_10001AFA8(v53);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 16LL))(v19, a1, a7);
  v52[3] = a8;
  v52[4] = a10;
  uint64_t v20 = sub_10001AFA8(v52);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a8 - 8) + 16LL))(v20, a3, a8);
  sub_10001AFE4(a2, (uint64_t)v50);
  sub_10001AFE4((uint64_t)v52, (uint64_t)v51);
  uint64_t v21 = sub_100008DB0(&qword_1001347A8);
  uint64_t inited = swift_initStackObject(v21, v49);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5FF0;
  sub_1000D41F0(v53, 0x204E474945524F46LL, 0xEB0000000059454BLL, (uint64_t *)(inited + 32));
  sub_10001AFE4((uint64_t)v50, (uint64_t)v47);
  sub_10001AFE4((uint64_t)v51, (uint64_t)v48);
  sub_1000D18F4((uint64_t)v47, (uint64_t)v48, (uint64_t *)(inited + 72));
  sub_10000AC58(v48);
  sub_10000AC58(v47);
  if (v18 == 5)
  {
    uint64_t v23 = 0LL;
    uint64_t v24 = 0LL;
    uint64_t v25 = 0LL;
    uint64_t v26 = 0LL;
    uint64_t v27 = 0LL;
  }

  else
  {
    *(void *)&v47[0] = 0x5441445055204E4FLL;
    *((void *)&v47[0] + 1) = 0xEA00000000002045LL;
    v28._uint64_t countAndFlagsBits = TableBuilder.Dependency.rawValue.getter(a4);
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    uint64_t v24 = *((void *)&v47[0] + 1);
    uint64_t v23 = *(void *)&v47[0];
    uint64_t v26 = sub_100008DB0(&qword_100134618);
    uint64_t v27 = &protocol witness table for Expression<A>;
    uint64_t v25 = _swiftEmptyArrayStorage;
  }

  *(void *)(inited + 11sub_100096760(v0[56], v0 + 2) = v23;
  *(void *)(inited + 120) = v24;
  *(void *)(inited + 128) = v25;
  *(void *)(inited + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = v26;
  *(void *)(inited + 144) = v27;
  if (a5 == 5)
  {
    uint64_t v29 = 0LL;
    uint64_t v30 = 0LL;
    uint64_t v31 = 0LL;
    uint64_t v32 = 0LL;
    uint64_t v33 = 0LL;
  }

  else
  {
    *(void *)&v47[0] = 0x54454C4544204E4FLL;
    *((void *)&v47[0] + 1) = 0xEA00000000002045LL;
    v34._uint64_t countAndFlagsBits = TableBuilder.Dependency.rawValue.getter(a5);
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    uint64_t v30 = *((void *)&v47[0] + 1);
    uint64_t v29 = *(void *)&v47[0];
    uint64_t v32 = sub_100008DB0(&qword_100134618);
    uint64_t v33 = &protocol witness table for Expression<A>;
    uint64_t v31 = _swiftEmptyArrayStorage;
  }

  *(void *)(inited + 15sub_100096760(v0[56], v0 + 2) = v29;
  *(void *)(inited + 160) = v30;
  uint64_t v35 = 32LL;
  *(void *)(inited + 168) = v31;
  *(void *)(inited + 176) = v32;
  *(void *)(inited + 184) = v33;
  uint64_t v36 = _swiftEmptyArrayStorage;
  do
  {
    sub_10001B644(inited + v35, (uint64_t)v47, &qword_1001347B0);
    sub_1000D2378((uint64_t)v47, (uint64_t)&v44);
    if (v45)
    {
      sub_100009EEC(&v44, (uint64_t)v46);
      sub_100009EEC(v46, (uint64_t)&v44);
      if ((swift_isUniquelyReferenced_nonNull_native(v36) & 1) == 0)
      {
        sub_1000D1F50(0, v36[2] + 1LL, 1, v36, &qword_100131160, (uint64_t *)&unk_1001323B0);
        uint64_t v36 = v39;
      }

      unint64_t v38 = v36[2];
      unint64_t v37 = v36[3];
      if (v38 >= v37 >> 1)
      {
        sub_1000D1F50(v37 > 1, v38 + 1, 1, v36, &qword_100131160, (uint64_t *)&unk_1001323B0);
        uint64_t v36 = v40;
      }

      void v36[2] = v38 + 1;
      sub_100009EEC(&v44, (uint64_t)&v36[5 * v38 + 4]);
    }

    else
    {
      sub_10001B60C((uint64_t)&v44, &qword_1001347B0);
    }

    v35 += 40LL;
  }

  while (v35 != 192);
  swift_bridgeObjectRelease();
  sub_1000D3EA4((uint64_t)v36, 32LL, 0xE100000000000000LL, (uint64_t *)v47);
  swift_bridgeObjectRelease();
  sub_1000D1D24(&qword_100131160, (uint64_t *)&unk_1001323B0);
  uint64_t v41 = *(void *)(*(void *)(a6 + 16) + 16LL);
  sub_1000D1E04(v41);
  uint64_t v42 = *(void *)(a6 + 16);
  *(void *)(v42 + swift_unknownObjectWeakDestroy(v0 + 16) = v41 + 1;
  sub_100009EEC(v47, v42 + 40 * v41 + 32);
  sub_10001B60C((uint64_t)v50, &qword_1001347D0);
  sub_10000AC58(v53);
  return sub_10000AC58(v52);
}

unint64_t sub_1000D291C()
{
  unint64_t result = qword_1001347D8;
  if (!qword_1001347D8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for TableBuilder.Dependency,  &type metadata for TableBuilder.Dependency);
    atomic_store(result, (unint64_t *)&qword_1001347D8);
  }

  return result;
}

unint64_t sub_1000D295C()
{
  unint64_t result = qword_1001347E0;
  if (!qword_1001347E0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PrimaryKey, &type metadata for PrimaryKey);
    atomic_store(result, (unint64_t *)&qword_1001347E0);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for TableBuilder.Dependency(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for TableBuilder.Dependency(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(sub_100075674(v3, v4) = 1;
  }
  else {
    LODWORD(sub_100075674(v3, v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1000D2A6C + 4 * byte_1000F7F2A[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000D2AA0 + 4 * byte_1000F7F25[v4]))();
}

uint64_t sub_1000D2AA0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D2AA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000D2AB0LL);
  }
  return result;
}

uint64_t sub_1000D2ABC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000D2AC4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1000D2AC8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D2AD0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for TableBuilder.Dependency()
{
}

uint64_t storeEnumTagSinglePayload for PrimaryKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(sub_100075674(v3, v4) = 1;
  }
  else {
    LODWORD(sub_100075674(v3, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000D2B34 + 4 * byte_1000F7F34[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000D2B68 + 4 * byte_1000F7F2F[v4]))();
}

uint64_t sub_1000D2B68(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D2B70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000D2B78LL);
  }
  return result;
}

uint64_t sub_1000D2B84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000D2B8CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000D2B90(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D2B98(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for PrimaryKey()
{
}

void type metadata accessor for Module()
{
}

unint64_t sub_1000D2BBC()
{
  unint64_t result = qword_100131990;
  if (!qword_100131990)
  {
    uint64_t v1 = sub_100008E58((uint64_t *)&unk_100132780);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100131990);
  }

  return result;
}

uint64_t sub_1000D2C00(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

  ;
}

void sub_1000D2C38(uint64_t a1)
{
}

uint64_t sub_1000D2C40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 - 11sub_100096760(v0[56], v0 + 2) = a1;
  *(void *)(v3 - 104) = a2;
  *(void *)(v3 - 96) = a3;
  return swift_bridgeObjectRetain(a2);
}

  ;
}

  ;
}

uint64_t sub_1000D2C8C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000D2CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for Expression(0LL, a1, a3, a4);
}

uint64_t sub_1000D2CBC()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 96));
}

uint64_t sub_1000D2CC4(void *a1)
{
  return v1;
}

uint64_t sub_1000D2CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for Expression(0LL, v4, a3, a4);
}

  ;
}

uint64_t sub_1000D2D04()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 104));
}

uint64_t sub_1000D2D0C(void *a1)
{
  return Expressible.asSQL()()._countAndFlagsBits;
}

  ;
}

double sub_1000D2D4C()
{
  *(void *)(v0 - 128) = 0LL;
  double result = 0.0;
  *(_OWORD *)(v0 - 160) = 0u;
  *(_OWORD *)(v0 - 144) = 0u;
  return result;
}

  ;
}

uint64_t sub_1000D2D78()
{
  return v0(v2, v1);
}

uint64_t sub_1000D2D88( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return sub_1000D23C0(a1, a2, v14, 2u, 1, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

void sub_1000D2D98( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
}

uint64_t sub_1000D2DA0(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_1000D2DA8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return sub_1000D23C0(a1, a2, a3, 2u, 1, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_1000D2DB4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return sub_1000D23C0(a1, v15, v14, 2u, 0, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

  ;
}

void sub_1000D2DD4( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

  ;
}

double sub_1000D2DF8()
{
  return sub_1000D24E4(v1, v0);
}

double sub_1000D2E18()
{
  return sub_1000D24E4(v1, v0);
}

void sub_1000D2E38(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1000D2E44(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

uint64_t sub_1000D2E4C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return sub_1000D23C0(a1, a2, a3, 2u, 0, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

void sub_1000D2E58(char a1, uint64_t a2)
{
}

double sub_1000D2E6C()
{
  return sub_1000D24E4(v0, v1);
}

uint64_t sub_1000D2E7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for Expression(0LL, v4, a3, a4);
}

  ;
}

uint64_t sub_1000D2EA4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL))(a1, v2, v1);
}

uint64_t sub_1000D2EB8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL))(a1, v2, v1);
}

double sub_1000D2ECC()
{
  return sub_1000D24E4(v1, v0);
}

void sub_1000D2EDC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
}

double sub_1000D2EE8()
{
  return sub_1000D24E4(v1, v0);
}

double sub_1000D2EF8()
{
  return 0.0;
}

uint64_t sub_1000D2F08( uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return sub_1000D23C0(a1, a2, a3, a4, 0, 0, a7, a8, a9, a10, a11, a12, a13, a14);
}

void sub_1000D2F14(char a1, uint64_t a2, char a3, void *a4)
{
}

uint64_t sub_1000D2F20()
{
  return sub_1000CC728(v0 - 128);
}

double sub_1000D2F3C()
{
  double result = 0.0;
  *(_OWORD *)(v0 - 27sub_100096760(v0[56], v0 + 2) = 0u;
  *(_OWORD *)(v0 - 288) = 0u;
  *(_OWORD *)(v0 - 304) = 0u;
  *(_OWORD *)(v0 - 320) = 0u;
  *(_OWORD *)(v0 - 336) = 0u;
  return result;
}

uint64_t sub_1000D2F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for Expression(0LL, v4, a3, a4);
}

uint64_t sub_1000D2F7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for Expression(0LL, v4, a3, a4);
}

double sub_1000D2F88(uint64_t a1, uint64_t a2)
{
  return sub_1000D24E4(a1, a2);
}

void sub_1000D2F90(char a1, uint64_t a2, char a3, void *a4)
{
}

uint64_t sub_1000D2F9C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t *a6@<X8>, uint64_t a7, uint64_t a8, unint64_t a9)
{
  return sub_1000CC280(a1, a2, a3, 2u, 0, 0, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1000D2FAC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t *a6@<X8>, uint64_t a7, uint64_t a8, unint64_t a9)
{
  return sub_1000CC280(a1, a2, a3, 2u, 1, 0, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1000D2FBC()
{
  return v0 - 112;
}

void sub_1000D2FEC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, __int128 a29, __int128 a30, uint64_t a31)
{
  *(void *)(v36 - 128) = a1;
  *(void *)(v36 - 120) = v31;
  *(void *)(v36 - 15sub_100096760(v0[56], v0 + 2) = v35;
  *(void *)(v36 - 144) = v33;
  *(void *)(v36 - sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = v32;
  a31 = 0LL;
  a29 = 0u;
  a30 = 0u;
  sub_10001AFE4(v34, (uint64_t)&a19);
}

uint64_t sub_1000D3014()
{
  return v0 - 112;
}

uint64_t sub_1000D3044()
{
  return v0(v1, v2);
}

  ;
}

uint64_t sub_1000D3070()
{
  return v0 - 168;
}

uint64_t sub_1000D309C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for Expression(0LL, v4, a3, a4);
}

double sub_1000D30A8(uint64_t a1, uint64_t a2)
{
  return sub_1000D24E4(a1, a2);
}

uint64_t sub_1000D30B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19)
{
  return sub_1000D23C0(a1, a2, v19, 2u, 1, a19, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_1000D30C4()
{
  return swift_setDeallocating(v0);
}

void sub_1000D30CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, __int128 a29, __int128 a30, uint64_t a31)
{
  *(void *)(v36 - 128) = a1;
  *(void *)(v36 - 120) = v32;
  *(void *)(v36 - 15sub_100096760(v0[56], v0 + 2) = v31;
  *(void *)(v36 - 144) = v34;
  *(void *)(v36 - sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = v33;
  a31 = 0LL;
  a29 = 0u;
  a30 = 0u;
  sub_10001AFE4(v35, (uint64_t)&a19);
}

double sub_1000D30F0()
{
  return 0.0;
}

double sub_1000D3100()
{
  return 0.0;
}

  ;
}

  ;
}

uint64_t sub_1000D315C()
{
  return v0 - 168;
}

uint64_t sub_1000D3180()
{
  return v0 - 168;
}

double sub_1000D31A4()
{
  return sub_1000D24E4(v0, v1);
}

uint64_t sub_1000D31B4()
{
  return type metadata accessor for Optional(255LL, v0);
}

uint64_t sub_1000D31C0()
{
  return type metadata accessor for Optional(255LL, v0);
}

void sub_1000D31CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, __int128 a29, __int128 a30, uint64_t a31)
{
  a31 = 0LL;
  a29 = 0u;
  a30 = 0u;
  sub_10001AFE4(a15, (uint64_t)&a19);
}

void sub_1000D31E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

void *sub_1000D31F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31)
{
  *(void *)(v37 - 128) = a1;
  *(void *)(v37 - 120) = v31;
  *(void *)(v37 - 15sub_100096760(v0[56], v0 + 2) = v35;
  *(void *)(v37 - 144) = v33;
  *(void *)(v37 - sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = v32;
  uint64_t v38 = *(void *)(v36 + 8);
  a30 = v34;
  a31 = v38;
  return sub_10001AFA8(&a27);
}

uint64_t sub_1000D3210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for Expression(0LL, v4, a3, a4);
}

void *sub_1000D321C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33)
{
  *(void *)(v39 - 128) = a1;
  *(void *)(v39 - 120) = v33;
  *(void *)(v39 - 15sub_100096760(v0[56], v0 + 2) = v37;
  *(void *)(v39 - 144) = v35;
  *(void *)(v39 - sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = v34;
  uint64_t v40 = *(void *)(v38 + 8);
  a32 = v36;
  a33 = v40;
  return sub_10001AFA8(&a29);
}

  ;
}

  ;
}

void sub_1000D3278(uint64_t a1)
{
}

uint64_t sub_1000D3280()
{
  return type metadata accessor for Optional(255LL, v0);
}

  ;
}

  ;
}

void sub_1000D32C8()
{
}

uint64_t sub_1000D32E0()
{
  return v0 - 168;
}

void sub_1000D3300(uint64_t a1)
{
}

uint64_t sub_1000D3308()
{
  return v0 - 112;
}

double sub_1000D3328()
{
  return 0.0;
}

double sub_1000D333C()
{
  return 0.0;
}

void sub_1000D3350()
{
  *(void *)(*(void *)(v0 + 16) + 16LL) = v1 + 1;
}

uint64_t sub_1000D336C()
{
  return type metadata accessor for Optional(255LL, v0);
}

uint64_t sub_1000D3378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for Expression(0LL, v4, a3, a4);
}

uint64_t sub_1000D3384()
{
  return v0 - 112;
}

  ;
}

uint64_t sub_1000D33B4()
{
  return sub_1000D4294(34LL, 0xE100000000000000LL, v1, v0);
}

uint64_t sub_1000D33C8()
{
  return sub_1000D4294(34LL, 0xE100000000000000LL, v0, v1);
}

uint64_t sub_1000D33DC()
{
  return sub_1000D4294(34LL, 0xE100000000000000LL, v0, v1);
}

uint64_t sub_1000D33F0()
{
  return sub_1000D4294(34LL, 0xE100000000000000LL, v1, v0);
}

uint64_t sub_1000D3404( uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19)
{
  return sub_1000D23C0(a1, a2, a3, a4, a5, a19, a7, a8, a9, a10, a11, a12, a13, a14);
}

void *sub_1000D340C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34)
{
  uint64_t v36 = *(void *)(v35 + 8);
  a33 = v34;
  a34 = v36;
  return sub_10001AFA8(&a30);
}

void *sub_1000D341C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32)
{
  uint64_t v34 = *(void *)(v33 + 8);
  a31 = v32;
  a32 = v34;
  return sub_10001AFA8(&a28);
}

uint64_t sub_1000D342C()
{
  return v0 - 104;
}

uint64_t sub_1000D3444()
{
  return sub_1000CC728(v0 - 128);
}

uint64_t sub_1000D3454()
{
  return v0 - 168;
}

double sub_1000D3464()
{
  return sub_1000D24E4(v1, v0);
}

double sub_1000D3474()
{
  return sub_1000D24E4(v0, v1);
}

uint64_t sub_1000D3484(uint64_t a1)
{
  return swift_arrayInitWithCopy(a1);
}

uint64_t sub_1000D348C(uint64_t result)
{
  *(void *)(v5 - 128) = result;
  *(void *)(v5 - 120) = v2;
  *(void *)(v5 - 15sub_100096760(v0[56], v0 + 2) = v1;
  *(void *)(v5 - 144) = v4;
  *(void *)(v5 - sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = v3;
  return result;
}

void sub_1000D349C()
{
  *(void *)(v3 - 160) = v2;
  *(void *)(v3 - 15sub_100096760(v0[56], v0 + 2) = v1;
  *(void *)(v3 - 144) = v0;
}

uint64_t sub_1000D34A8()
{
  return v2(v0, v1);
}

void sub_1000D34B8( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_1000D34C0( uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return sub_1000D23C0(a1, a2, v14, a4, 1, 0, a7, a8, a9, a10, a11, a12, a13, a14);
}

  ;
}

  ;
}

void sub_1000D34F0()
{
  *(void *)(v3 - 160) = v2;
  *(void *)(v3 - 15sub_100096760(v0[56], v0 + 2) = v1;
  *(void *)(v3 - 144) = v0;
}

uint64_t sub_1000D34FC()
{
  return v0(v1, v2);
}

uint64_t sub_1000D350C()
{
  return v0(v1, v2);
}

uint64_t sub_1000D351C()
{
  return 34LL;
}

uint64_t sub_1000D3528()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_1000D3530()
{
  return v0(v2, v1);
}

uint64_t sub_1000D3540(uint64_t a1)
{
  return swift_initStackObject(a1, v1 - 240);
}

uint64_t sub_1000D3548@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_1000D3550()
{
  return sub_1000CC728(v0 - 128);
}

uint64_t sub_1000D355C()
{
  return sub_1000CC728(v0 - 128);
}

uint64_t sub_1000D3568@<X0>(uint64_t a1@<X8>, __int128 a2)
{
  return sub_100009EEC(&a2, a1 + 32);
}

uint64_t sub_1000D3574( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, __int128 a14)
{
  return sub_100009EEC(&a14, (uint64_t)&a9);
}

void *sub_1000D3580@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  a20 = v21;
  a21 = a1;
  return sub_10001AFA8(&a17);
}

uint64_t sub_1000D358C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  return sub_1000D2378((uint64_t)&a19, (uint64_t)&a9);
}

  ;
}

uint64_t sub_1000D35AC()
{
  return type metadata accessor for Optional(255LL, v0);
}

uint64_t sub_1000D35B8()
{
  return type metadata accessor for Optional(255LL, v0);
}

uint64_t sub_1000D35C4( uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17)
{
  return sub_1000D23C0(a1, a2, a3, a4, a5, a17, a7, a8, a9, a10, a11, a12, a13, a14);
}

void sub_1000D35CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

double sub_1000D35D8()
{
  return 0.0;
}

double sub_1000D35EC()
{
  return 0.0;
}

uint64_t sub_1000D3600( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return type metadata accessor for Expression(0LL, a8, a3, a4);
}

uint64_t sub_1000D360C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return type metadata accessor for Optional(0LL, a8);
}

uint64_t sub_1000D3618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for Expression(0LL, v4, a3, a4);
}

uint64_t sub_1000D3624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for Expression(0LL, v4, a3, a4);
}

uint64_t sub_1000D3630()
{
  return 0x5845444E49LL;
}

  ;
}

uint64_t sub_1000D3658()
{
  return v0;
}

void sub_1000D3664(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000D366C()
{
  return v2(v0, v1);
}

uint64_t sub_1000D3678()
{
  return v1(v0, v2);
}

uint64_t sub_1000D3684(uint64_t *a1)
{
  return sub_1000D1CC8(a1);
}

  ;
}

uint64_t sub_1000D3698()
{
  return swift_setDeallocating(v0);
}

void sub_1000D36A0()
{
}

  ;
}

  ;
}

uint64_t static Table.identifier.getter()
{
  return 0x454C424154LL;
}

  ;
}

  ;
}

  ;
}

Swift::String __swiftcall Blob.toHex()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v3 = v0;
    uint64_t v27 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1000452D4();
    uint64_t v2 = _swiftEmptyArrayStorage;
    unint64_t v4 = sub_1000D3D50();
    uint64_t v5 = 0LL;
    do
    {
      unsigned int v6 = *(unsigned __int8 *)(v3 + v5 + 32);
      if (v6 >= 0x10) {
        uint64_t v7 = 0LL;
      }
      else {
        uint64_t v7 = 48LL;
      }
      if (v6 >= 0x10) {
        unint64_t v8 = 0xE000000000000000LL;
      }
      else {
        unint64_t v8 = 0xE100000000000000LL;
      }
      LOBYTE(v25) = *(_BYTE *)(v3 + v5 + 32);
      uint64_t v9 = String.init<A>(_:radix:uppercase:)(&v25, 16LL, 0LL, &type metadata for UInt8, v4);
      char v11 = v10;
      uint64_t v25 = (void *)v7;
      unint64_t v26 = v8;
      swift_bridgeObjectRetain();
      v12._uint64_t countAndFlagsBits = v9;
      v12._object = v11;
      String.append(_:)(v12);
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v11);
      uint64_t v13 = v25;
      unint64_t v14 = v26;
      uint64_t v27 = v2;
      unint64_t v15 = v2[2];
      if (v15 >= v2[3] >> 1)
      {
        sub_1000452D4();
        uint64_t v2 = v27;
      }

      ++v5;
      __int128 v2[2] = v15 + 1;
      size_t v16 = &v2[2 * v15];
      v16[4] = v13;
      v16[5] = v14;
    }

    while (v1 != v5);
    swift_bridgeObjectRelease(v3);
  }

  uint64_t v25 = v2;
  uint64_t v17 = sub_100008DB0((uint64_t *)&unk_100132780);
  unint64_t v18 = sub_1000D2BBC();
  uint64_t v19 = BidirectionalCollection<>.joined(separator:)(0LL, 0xE000000000000000LL, v17, v18);
  uint64_t v21 = v20;
  swift_bridgeObjectRelease(v2);
  uint64_t v22 = v19;
  uint64_t v23 = v21;
  result._object = v23;
  result._uint64_t countAndFlagsBits = v22;
  return result;
}

uint64_t Blob.description.getter()
{
  Swift::String v0 = Blob.toHex()();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 39LL;
  v1._object = (void *)0xE100000000000000LL;
  String.append(_:)(v1);
  return 10104LL;
}

uint64_t sub_1000D3908()
{
  return Blob.description.getter();
}

uint64_t sub_1000D3910(void *a1, void *a2)
{
  return == infix(_:_:)(*a1, *a2);
}

BOOL sub_1000D3920(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  if (v2 == 1) {
    return 1LL;
  }
  uint64_t v4 = v2 - 2;
  uint64_t v5 = (unsigned __int8 *)(a1 + 33);
  unsigned int v6 = (unsigned __int8 *)(a2 + 33);
  do
  {
    int v8 = *v5++;
    int v7 = v8;
    int v10 = *v6++;
    int v9 = v10;
    BOOL v12 = v4-- != 0;
    BOOL result = v7 == v9;
  }

  while (v7 == v9 && v12);
  return result;
}

void sub_1000D3994()
{
  void *v0 = v1;
}

void sub_1000D39C8()
{
  void *v0 = v1;
}

char *sub_1000D39FC(char *a1, int64_t a2, char a3)
{
  BOOL result = sub_1000D3A4C(a1, a2, a3, *v3);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

void sub_1000D3A18()
{
  void *v0 = v1;
}

char *sub_1000D3A4C(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008DB0(&qword_1001323E0);
    char v11 = (char *)swift_allocObject(v10, 80 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + sub_100096760(v0[56], v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 80);
  }

  else
  {
    char v11 = (char *)_swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0)
  {
    sub_1000D2330((char *)(a4 + 32), v8, v11 + 32);
    *(void *)(a4 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v11 + 32);
  }

  swift_release();
  return v11;
}

void sub_1000D3B48()
{
  if ((v5 & 1) != 0)
  {
    sub_10001BAE0();
    if (v7 != v8)
    {
      if (v6 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return;
      }

      sub_10001BAD0();
    }
  }

  else
  {
    uint64_t v6 = v3;
  }

  uint64_t v9 = *(void *)(v0 + 16);
  if (v6 <= v9) {
    uint64_t v10 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v10 = v6;
  }
  if (v10)
  {
    uint64_t v11 = sub_100008DB0(v4);
    size_t v12 = (void *)sub_10000C254(v11, 40 * v10 + 32);
    size_t v13 = j__malloc_size(v12);
    v12[2] = v9;
    v12[3] = 2 * ((uint64_t)(v13 - 32) / 40);
  }

  if ((v2 & 1) != 0)
  {
    sub_1000D3E80();
    *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_100008DB0(v1);
    sub_1000D3E6C();
  }

  sub_100047164();
  sub_10001BE4C();
}

void sub_1000D3C0C()
{
  if ((v5 & 1) != 0)
  {
    sub_10001BAE0();
    if (v7 != v8)
    {
      if (v6 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return;
      }

      sub_10001BAD0();
    }
  }

  else
  {
    uint64_t v6 = v3;
  }

  uint64_t v9 = *(void *)(v0 + 16);
  if (v6 <= v9) {
    uint64_t v10 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v10 = v6;
  }
  if (v10)
  {
    uint64_t v11 = sub_100008DB0(v4);
    size_t v12 = (void *)sub_10000C254(v11, 8 * v10 + 32);
    size_t v13 = j__malloc_size(v12);
    v12[2] = v9;
    v12[3] = 2 * ((uint64_t)(v13 - 32) / 8);
  }

  if ((v2 & 1) != 0)
  {
    sub_1000D3E80();
    *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_100008DB0(v1);
    sub_1000D3E6C();
  }

  sub_100047164();
  sub_10001BE4C();
}

void _s17AppIntents_SQLite4BlobV5bytes6lengthACSV_SitcfC_0(const void *a1, int64_t a2)
{
  if (a2)
  {
    if (a2 <= 0)
    {
      char v5 = _swiftEmptyArrayStorage;
    }

    else
    {
      uint64_t v4 = sub_100008DB0(&qword_100130B00);
      char v5 = (void *)sub_10000C254(v4, a2 + 32);
      size_t v6 = j__malloc_size(v5);
      __int128 v5[2] = a2;
      v5[3] = 2 * v6 - 64;
    }

    memcpy(v5 + 4, a1, a2);
  }

  sub_10000AF74();
}

unint64_t sub_1000D3D50()
{
  unint64_t result = qword_1001348A8;
  if (!qword_1001348A8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt8, &type metadata for UInt8);
    atomic_store(result, (unint64_t *)&qword_1001348A8);
  }

  return result;
}

ValueMetadata *type metadata accessor for Blob()
{
  return &type metadata for Blob;
}

void *sub_1000D3D9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100008DB0((uint64_t *)&unk_100132130);
  uint64_t v4 = (void *)sub_10000C254(v3, 16 * v1 + 32);
  j__malloc_size(v4);
  sub_1000D3E90();
  v4[2] = v1;
  v4[3] = v5;
  uint64_t v6 = sub_1000EBDF0((uint64_t)&v9, v4 + 4, v1, a1);
  uint64_t v7 = v9;
  swift_bridgeObjectRetain();
  sub_10001B100(v7);
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

uint64_t sub_1000D3E6C()
{
  return swift_arrayInitWithCopy(v0);
}

uint64_t sub_1000D3E80()
{
  return v0(v3, v1, v2);
}

  ;
}

void sub_1000D3EA4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4 = a3;
  uint64_t v5 = a2;
  uint64_t v6 = a4;
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    char v8 = (void *)(a1 + 32);
    swift_bridgeObjectRetain(a1);
    uint64_t v9 = _swiftEmptyArrayStorage;
    uint64_t v10 = _swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v11 = v8[3];
      uint64_t v12 = v8[4];
      sub_100008D74(v8, v11);
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
      uint64_t v15 = v14;
      uint64_t v17 = v16;
      swift_bridgeObjectRetain(v14);
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
      {
        sub_1000D4B70();
        uint64_t v9 = v28;
      }

      unint64_t v18 = v9[2];
      if (v18 >= v9[3] >> 1)
      {
        sub_1000D4B70();
        uint64_t v9 = v29;
      }

      void v9[2] = v18 + 1;
      uint64_t v19 = &v9[2 * v18];
      void v19[4] = v13;
      void v19[5] = v15;
      uint64_t v20 = *(void *)(v17 + 16);
      uint64_t v21 = v10[2];
      if (__OFADD__(v21, v20)) {
        break;
      }
      swift_bridgeObjectRetain(v17);
      if (!swift_isUniquelyReferenced_nonNull_native(v10) || v21 + v20 > v10[3] >> 1)
      {
        sub_1000D1E64();
        uint64_t v10 = v22;
      }

      if (*(void *)(v17 + 16))
      {
        uint64_t v23 = v10[2];
        if ((v10[3] >> 1) - v23 < v20) {
          goto LABEL_23;
        }
        uint64_t v24 = (uint64_t)&v10[5 * v23 + 4];
        sub_100008DB0(&qword_100131978);
        swift_arrayInitWithCopy(v24);
        if (v20)
        {
          uint64_t v25 = v10[2];
          BOOL v26 = __OFADD__(v25, v20);
          uint64_t v27 = v25 + v20;
          if (v26) {
            goto LABEL_24;
          }
          v10[2] = v27;
        }
      }

      else if (v20)
      {
        goto LABEL_22;
      }

      swift_bridgeObjectRelease_n(v17, 2LL);
      swift_bridgeObjectRelease(v15);
      v8 += 5;
      if (!--v7)
      {
        swift_bridgeObjectRelease(a1);
        uint64_t v4 = a3;
        uint64_t v6 = a4;
        uint64_t v5 = a2;
        goto LABEL_20;
      }
    }

    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }

  else
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    uint64_t v10 = _swiftEmptyArrayStorage;
LABEL_20:
    uint64_t v30 = sub_100008DB0((uint64_t *)&unk_100132780);
    uint64_t v31 = sub_100046FC4( (unint64_t *)&qword_100131990,  (uint64_t *)&unk_100132780,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v32 = BidirectionalCollection<>.joined(separator:)(v5, v4, v30, v31);
    uint64_t v34 = v33;
    swift_bridgeObjectRelease(v9);
    v6[3] = sub_100008DB0(&qword_100134618);
    v6[4] = (uint64_t)&protocol witness table for Expression<A>;
    *uint64_t v6 = v32;
    v6[1] = v34;
    v6[2] = (uint64_t)v10;
  }

uint64_t sub_1000D4128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  swift_bridgeObjectRetain();
  sub_100038A74(32LL);
  char v6 = v17;
  uint64_t v7 = v18;
  sub_1000D3EA4(a1, 8236LL, 0xE200000000000000LL, &v17);
  uint64_t v8 = v19;
  uint64_t v9 = v20;
  uint64_t v10 = sub_100008D74(&v17, v19);
  uint64_t v11 = sub_1000D4988((uint64_t)v10, v6, v7, v8, v9);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  sub_10000AC58(&v17);
  swift_bridgeObjectRelease();
  uint64_t result = sub_100008DB0(&qword_100134618);
  a4[3] = result;
  a4[4] = (uint64_t)&protocol witness table for Expression<A>;
  *a4 = v11;
  a4[1] = v13;
  a4[2] = v15;
  return result;
}

uint64_t sub_1000D41F0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = sub_100008D74(a1, v6);
  uint64_t v9 = sub_1000D4988((uint64_t)v8, v15, v16, v6, v7);
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  uint64_t result = sub_100008DB0(&qword_100134618);
  a4[3] = result;
  a4[4] = (uint64_t)&protocol witness table for Expression<A>;
  *a4 = v9;
  a4[1] = v11;
  a4[2] = v13;
  return result;
}

uint64_t sub_1000D4294(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = sub_1000D9BC0(0LL, 0xE000000000000000LL, a3, a4, a1, a2);
  int v9 = sub_1000D4B08(v8);
  sub_1000D4B2C(v9, v10, v11, v12, v13, v14, v15, v16, v19, 0);
  uint64_t v17 = sub_100011958();
  sub_1000D4B08(v17);
  return *(void *)v20;
}

uint64_t sub_1000D4338(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_1000D4B20();
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  sub_100038A74(41LL);
  uint64_t v8 = sub_1000D4B20();
  sub_1000D4B58(v8, v9);
  return Int64.datatypeValue.getter();
}

uint64_t * infix(_:_:)()
{
  return 42LL;
}

void sub_1000D4410()
{
  qword_100135CF8 = -1LL;
}

uint64_t sub_1000D4420(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v12 = sub_100008DB0(&qword_100131160);
  uint64_t inited = swift_initStackObject(v12, &v16);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
  sub_100008F24(a1, inited + 32);
  sub_100008F24(a2, inited + 72);
  uint64_t v14 = sub_1000D44EC(inited, a3, a4, a5, a6);
  swift_setDeallocating(inited);
  sub_100058868();
  return v14;
}

uint64_t sub_1000D44EC(uint64_t a1, char a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for Expression(0LL, a5, a3, (uint64_t)a4);
  uint64_t v21 = 32LL;
  unint64_t v22 = 0xE100000000000000LL;
  v10._uint64_t countAndFlagsBits = a3;
  v10._object = a4;
  String.append(_:)(v10);
  sub_100038A74(32LL);
  sub_1000D3EA4(a1, 32LL, 0xE100000000000000LL, &v21);
  swift_bridgeObjectRelease();
  uint64_t v11 = v24;
  uint64_t v12 = v25;
  sub_100008D74(&v21, v24);
  v20[0] = ((uint64_t (*)(uint64_t, _UNKNOWN **))v12[1])(v11, v12);
  v20[1] = v13;
  v20[2] = v14;
  uint64_t v15 = sub_100008DB0(&qword_100134618);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v9);
  uint64_t v17 = sub_100046FC4(&qword_1001348D0, &qword_100134618, (uint64_t)&protocol conformance descriptor for Expression<A>);
  ExpressionType.init<A>(_:)((uint64_t)v20, v9, v15, WitnessTable, v17);
  sub_10000AC58(&v21);
  uint64_t v18 = v26;
  if ((a2 & 1) != 0)
  {
    uint64_t v24 = v9;
    uint64_t v25 = &protocol witness table for Expression<A>;
    uint64_t v21 = v26;
    unint64_t v22 = v27;
    uint64_t v23 = v28;
    uint64_t v18 = sub_1000D4338(&v21, 0LL, 0xE000000000000000LL);
    sub_10000AC58(&v21);
  }

  return v18;
}

uint64_t sub_1000D4674(uint64_t a1)
{
  if (v26)
  {
    sub_100009EEC(&v25, (uint64_t)v27);
    sub_100008F24((uint64_t)v27, (uint64_t)&v25);
    uint64_t v1 = sub_100008DB0(&qword_100131980);
    if (sub_1000D4B3C( (uint64_t)&v21,  v2,  v3,  (uint64_t)&type metadata for Blob,  v4,  v5,  v6,  v7,  v19,  v21,  v22,  v23))
    {
      uint64_t v14 = v21;
      uint64_t v23 = 10104LL;
      unint64_t v24 = 0xE200000000000000LL;
      Swift::String v15 = Blob.toHex()();
      String.append(_:)(v15);
      sub_100011958();
      sub_100038A74(39LL);
      swift_bridgeObjectRelease(v14);
      uint64_t v16 = v23;
    }

    else
    {
      if (!sub_1000D4B3C( (uint64_t)&v23,  v8,  v9,  (uint64_t)&type metadata for String,  v10,  v11,  v12,  v13,  v20,  v21,  v22,  v23))
      {
        sub_100009EEC(&v25, (uint64_t)&v23);
        uint64_t v21 = 0LL;
        uint64_t v22 = 0xE000000000000000LL;
        _print_unlocked<A, B>(_:_:)( &v23,  &v21,  v1,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
        uint64_t v16 = v21;
        sub_10000AC58(&v23);
        uint64_t v17 = (__int128 *)v27;
        goto LABEL_9;
      }

      uint64_t v16 = sub_1000D4294(39LL, 0xE100000000000000LL, v23, v24);
      sub_100011958();
    }

    sub_10000AC58(v27);
    uint64_t v17 = &v25;
LABEL_9:
    sub_10000AC58(v17);
    return v16;
  }

  sub_1000D4AC8((uint64_t)&v25);
  return 1280070990LL;
}

uint64_t sub_1000D47D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_1000D4B64(0LL, a3);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v18[-v10 - 8];
  uint64_t v12 = sub_1000D4B64(0LL, a3);
  __chkstk_darwin(v12);
  uint64_t v14 = &v18[-v13 - 8];
  sub_100008F24(a1, (uint64_t)v18);
  uint64_t v15 = sub_100008DB0(&qword_100131980);
  swift_dynamicCast(v11, v18, v15, v8, 7LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(a3 + 48))(v11, a2, a3);
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  return swift_dynamicCast(a4, v14, v12, a2, 7LL);
}

uint64_t sub_1000D4920@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_1000D4A80(a1, (uint64_t)v8);
  if (v8[3])
  {
    sub_1000D47D8((uint64_t)v8, a2, a3, a4);
    return sub_10000AC58(v8);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000D4988(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  uint64_t v9 = sub_10001AFA8(v23);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16LL))(v9, a1, a4);
  swift_bridgeObjectRetain();
  sub_100038A74(40LL);
  sub_100008D74(v23, v24);
  (*(void (**)(uint64_t, uint64_t))(a5 + 8))(a4, a5);
  int v10 = swift_bridgeObjectRelease();
  sub_1000D4B2C(v10, v11, v12, v13, v14, v15, v16, v17, v21, a2);
  sub_100011958();
  sub_100038A74(41LL);
  uint64_t v18 = sub_1000D4B20();
  sub_1000D4B58(v18, v19);
  sub_10000AC58(v23);
  return *(void *)v22;
}

uint64_t sub_1000D4A80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008DB0(&qword_100131978);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D4AC8(uint64_t a1)
{
  uint64_t v2 = sub_100008DB0(&qword_100131978);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000D4B08(uint64_t a1, ...)
{
  return Character.write<A>(to:)(va, v2, v1, v3, v4);
}

uint64_t sub_1000D4B20()
{
  return v2(v0, v1);
}

void sub_1000D4B2C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  v12._uint64_t countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
}

uint64_t sub_1000D4B3C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  return swift_dynamicCast(a1, va, v12, a4, 0LL);
}

uint64_t sub_1000D4B4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_bridgeObjectRetain(a3);
}

uint64_t sub_1000D4B58(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a2);
}

uint64_t sub_1000D4B64(uint64_t a1, uint64_t a2)
{
  return swift_getAssociatedTypeWitness(a1, a2, v2, v3);
}

void sub_1000D4B70()
{
}

void sub_1000D4B7C()
{
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!sub_1000471D4() || v4 > *(void *)(v2 + 24) >> 1)
  {
    sub_1000472D0();
    sub_1000D1E64();
    uint64_t v2 = v6;
  }

  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }

  sub_100047178();
  if (v8 != v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v9 = v2 + 40 * v7 + 32;
  sub_100008DB0(&qword_100131978);
  sub_1000D9570(v9);
  if (!v3)
  {
LABEL_11:
    sub_10001198C();
    *uint64_t v1 = v2;
    sub_10001BAF0();
    return;
  }

  sub_1000472B0();
  if (!v5)
  {
    *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
    goto LABEL_11;
  }

void sub_1000D4C34(uint64_t a1)
{
}

void sub_1000D4C48()
{
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!sub_1000471D4() || v4 > *(void *)(v2 + 24) >> 1)
  {
    sub_1000472D0();
    sub_1000D2180();
    uint64_t v2 = v6;
  }

  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }

  sub_100047178();
  if (v8 != v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  sub_1000D9570(v2 + 80 * v7 + 32);
  if (!v3)
  {
LABEL_11:
    sub_10001198C();
    *uint64_t v1 = v2;
    sub_10001BAF0();
    return;
  }

  sub_1000472B0();
  if (!v5)
  {
    *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
    goto LABEL_11;
  }

void sub_1000D4CF0(uint64_t a1)
{
}

void sub_1000D4D04(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(*v4 + 16);
  if (__OFADD__(v7, v5))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!sub_1000471D4() || v7 + v5 > *(void *)(v6 + 24) >> 1)
  {
    sub_1000472D0();
    uint64_t v6 = a2();
  }

  if (!*(void *)(v3 + 16))
  {
    if (!v5) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }

  sub_100047178();
  if (v11 != v12)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v13 = v6 + 40 * v10 + 32;
  sub_100008DB0(a3);
  sub_1000D9570(v13);
  if (!v5)
  {
LABEL_11:
    sub_10001198C();
    *uint64_t v4 = v6;
    return;
  }

  sub_1000472B0();
  if (!v12)
  {
    *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = v14;
    goto LABEL_11;
  }

uint64_t sub_1000D4DE0(uint64_t a1, uint64_t a2, char a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t v9 = sub_1000D4E60(a4);
  uint64_t v11 = sub_1000D4420(a1, a2, a3, v9, v10, a5);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1000D4E60(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000D4E88 + 4 * byte_1000F813C[a1]))( 43LL,  0xE100000000000000LL);
}

uint64_t sub_1000D4E88()
{
  return 45LL;
}

uint64_t sub_1000D4E90()
{
  return 21071LL;
}

uint64_t sub_1000D4E9C()
{
  return 4476481LL;
}

uint64_t sub_1000D4EAC()
{
  return 542396238LL;
}

uint64_t sub_1000D4EBC()
{
  return 42LL;
}

uint64_t sub_1000D4EC4()
{
  return 47LL;
}

uint64_t sub_1000D4ECC()
{
  return 37LL;
}

uint64_t sub_1000D4ED4()
{
  return 15420LL;
}

uint64_t sub_1000D4EE0()
{
  return 15934LL;
}

uint64_t sub_1000D4EEC()
{
  return 38LL;
}

uint64_t sub_1000D4EF4()
{
  return 124LL;
}

uint64_t sub_1000D4EFC()
{
  return 126LL;
}

uint64_t sub_1000D4F04()
{
  return 61LL;
}

uint64_t sub_1000D4F0C()
{
  return 15649LL;
}

uint64_t sub_1000D4F18()
{
  return 62LL;
}

uint64_t sub_1000D4F20()
{
  return 60LL;
}

uint64_t sub_1000D4F28()
{
  return 15678LL;
}

uint64_t sub_1000D4F34()
{
  return 15676LL;
}

uint64_t sub_1000D4F40()
{
  return 31868LL;
}

uint64_t sub_1000D4F4C(void *a1, unsigned __int8 a2)
{
  uint64_t v3 = sub_1000D4E60(a2);
  uint64_t v5 = sub_1000D4338(a1, v3, v4);
  swift_bridgeObjectRelease();
  return v5;
}

void + infix(_:_:)()
{
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sub_1000D9684();
  sub_1000D9678(v0, v1, v2, v3, v4, v5, (uint64_t)&qword_100131138);
  sub_1000843C4();
}

#error "1000D5004: call analysis failed (funcsize=10)"
#error "1000D5038: call analysis failed (funcsize=10)"
void sub_1000D5044( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22,  uint64_t a23,  uint64_t a24,  uint64_t a25,  uint64_t a26,  uint64_t a27,  uint64_t a28,  uint64_t a29,  uint64_t a30,  uint64_t a31,  _UNKNOWN **a32,  uint64_t a33,  uint64_t a34,  uint64_t a35,  uint64_t a36,  _UNKNOWN **a37,  uint64_t a38,  uint64_t a39,  uint64_t a40,  uint64_t a41,  uint64_t a42,  uint64_t a43,  uint64_t a44,  uint64_t a45,  uint64_t a46,  uint64_t a47,  uint64_t a48,  uint64_t a49,
        uint64_t a50,
        uint64_t a51)
{
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __n128 *v75;
  sub_1000D8CA0();
  a49 = v51;
  a50 = v52;
  uint64_t v54 = v53;
  uint64_t v56 = v55;
  uint64_t v58 = v57;
  uint64_t v60 = v59;
  uint64_t v62 = v61;
  uint64_t v64 = v63;
  uint64_t v66 = v65;
  uint64_t v67 = a51;
  a36 = sub_1000D9630(v65, v63, v61, v59, v57, v55, v68);
  a37 = &protocol witness table for Expression<A>;
  a33 = v66;
  a34 = v64;
  a35 = v62;
  a31 = sub_100008DB0(v54);
  a32 = &protocol witness table for Expression<A>;
  a28 = v60;
  a29 = v58;
  a30 = v56;
  uint64_t v69 = sub_100008DB0(&qword_100131160);
  uint64_t v75 = (__n128 *)sub_1000D94FC(v69, v70, v71, v72, v73, v74);
  sub_1000D8C90(v75, (__n128)xmmword_1000F57D0);
  sub_100008F24((uint64_t)&a28, (uint64_t)&v75[4].n128_i64[1]);
  swift_bridgeObjectRetain();
  sub_10001BD0C();
  sub_10001C064();
  sub_1000119E4();
  sub_1000D3EA4((uint64_t)v75, v67, 0xE400000000000000LL, &a9);
  sub_1000D8C6C(&a9);
  sub_1000D95D4();
  sub_1000D8CD4(&a9);
  sub_1000D8DB8();
  sub_10001BC70();
  sub_1000D90D0();
  sub_1000D909C();
  sub_10000AC58(&a28);
  sub_10000AC58(&a33);
  sub_1000D8E14();
  sub_1000D3140();
}

#error "1000D51E4: call analysis failed (funcsize=60)"
void + infix(_:_:)( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22,  uint64_t a23,  uint64_t a24,  uint64_t a25,  uint64_t a26,  uint64_t a27,  uint64_t a28,  uint64_t a29,  uint64_t a30,  uint64_t a31,  _BYTE *a32,  _UNKNOWN **a33,  uint64_t a34,  uint64_t a35,  uint64_t a36,  uint64_t a37,  _UNKNOWN **a38,  uint64_t a39,  uint64_t a40,  uint64_t a41,  uint64_t a42,  uint64_t a43,  uint64_t a44,  uint64_t a45,  uint64_t a46,  uint64_t a47,  uint64_t a48)
{
  sub_1000D5278( a1,  a2,  a3,  a4,  a5,  (uint64_t)&unk_1001323C0,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  a41,  a42,  a43,  a44,  a45,  a46,  a47,  a48);
}

void + infix(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, _BYTE *a32, _UNKNOWN **a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, _UNKNOWN **a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48)
{
}

void sub_1000D5278( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, _BYTE *a32, _UNKNOWN **a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, _UNKNOWN **a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48)
{
  a47 = v53;
  a48 = v54;
  sub_1000D90E4();
  a37 = sub_1000D95B8(v55, v56, v57, v58, v59, v60);
  a38 = &protocol witness table for Expression<A>;
  a34 = v52;
  a35 = v51;
  a36 = v50;
  a32 = type metadata for String;
  a33 = &protocol witness table for String;
  a29 = v49;
  a30 = v48;
  uint64_t v61 = sub_100008DB0(&qword_100131160);
  uint64_t v68 = (__n128 *)sub_1000D8E28(v61, v62, v63, v64, v65, v66, v67);
  sub_1000D8E04(v68, (__n128)xmmword_1000F57D0);
  sub_1000D91C4();
  sub_10001C064();
  sub_1000119E4();
  uint64_t v69 = sub_10000AE38();
  sub_1000D93C4(v69);
  sub_1000D8C6C(&a10);
  sub_1000D8CD4(&a10);
  sub_1000D8DB8();
  sub_10001BC70();
  sub_1000D90D0();
  sub_1000D909C();
  sub_10000AC58(&a29);
  sub_10000AC58(&a34);
  sub_1000D8E14();
  sub_1000D8D3C();
}

void + infix(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, _UNKNOWN **a33, uint64_t a34, uint64_t a35, uint64_t a36, _BYTE *a37, _UNKNOWN **a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48)
{
}

{
  sub_1000D535C( a1,  a2,  a3,  a4,  a5,  (uint64_t)&qword_100131138,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  a41,  a42,  a43,  a44,  a45,  a46,  a47,  a48);
}

void sub_1000D535C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, _UNKNOWN **a33, uint64_t a34, uint64_t a35, uint64_t a36, _BYTE *a37, _UNKNOWN **a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48)
{
  a47 = v48;
  a48 = v49;
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  a37 = type metadata for String;
  a38 = &protocol witness table for String;
  a34 = v56;
  a35 = v57;
  a32 = sub_1000D95B8(v56, v57, v54, v52, v50, v58);
  a33 = &protocol witness table for Expression<A>;
  a29 = v55;
  a30 = v53;
  a31 = v51;
  uint64_t v59 = sub_100008DB0(&qword_100131160);
  uint64_t v66 = (__n128 *)sub_1000D8E28(v59, v60, v61, v62, v63, v64, v65);
  sub_1000D8E04(v66, (__n128)xmmword_1000F57D0);
  sub_1000D91C4();
  sub_10001C064();
  sub_1000119E4();
  uint64_t v67 = sub_10000AE38();
  sub_1000D93C4(v67);
  sub_1000D8C6C(&a10);
  sub_1000D8CD4(&a10);
  sub_1000D8DB8();
  sub_10001BC70();
  sub_1000D90D0();
  sub_1000D909C();
  sub_10000AC58(&a29);
  sub_10000AC58(&a34);
  sub_1000D8E14();
  sub_1000D8D3C();
}

void + infix<A>(_:_:)()
{
}

{
  sub_1000D9488();
  sub_1000D56B0();
  sub_1000843C4();
}

{
  sub_1000D9488();
  sub_1000D5768();
  sub_1000843C4();
}

{
  sub_1000D9488();
  sub_1000D5820();
  sub_1000843C4();
}

uint64_t + infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000D58A8(a1, a2, a3, a4, a5, a6, a7, 0LL);
}

{
  return sub_1000D590C(a1, a2, a3, a4, a5, a6, a7, 0LL);
}

void + infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

{
  sub_1000D59EC(a1, a2, a3, a4, a5, a6, a7, 0LL);
}

void - infix<A>(_:_:)()
{
}

{
  sub_1000D91D0();
  sub_1000D56B0();
  sub_1000843C4();
}

{
  sub_1000D91D0();
  sub_1000D5768();
  sub_1000843C4();
}

{
  sub_1000D91D0();
  sub_1000D5820();
  sub_1000843C4();
}

uint64_t - infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000D58A8(a1, a2, a3, a4, a5, a6, a7, 1LL);
}

{
  return sub_1000D590C(a1, a2, a3, a4, a5, a6, a7, 1LL);
}

void - infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

{
  sub_1000D59EC(a1, a2, a3, a4, a5, a6, a7, 1LL);
}

void * infix<A>(_:_:)()
{
}

{
  sub_1000D91F8();
  sub_1000D56B0();
  sub_1000843C4();
}

{
  sub_1000D91F8();
  sub_1000D5768();
  sub_1000843C4();
}

{
  sub_1000D91F8();
  sub_1000D5820();
  sub_1000843C4();
}

uint64_t * infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000D58A8(a1, a2, a3, a4, a5, a6, a7, 5LL);
}

{
  return sub_1000D590C(a1, a2, a3, a4, a5, a6, a7, 5LL);
}

void * infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

{
  sub_1000D59EC(a1, a2, a3, a4, a5, a6, a7, 5LL);
}

void / infix<A>(_:_:)()
{
}

#error "1000D566C: call analysis failed (funcsize=35)"
void / infix<A>(_:_:)()
{
  sub_1000D91E4();
  sub_1000D56B0();
  sub_1000843C4();
}

#error "1000D5724: call analysis failed (funcsize=38)"
void / infix<A>(_:_:)()
{
  sub_1000D91E4();
  sub_1000D5768();
  sub_1000843C4();
}

#error "1000D57DC: call analysis failed (funcsize=38)"
void / infix<A>(_:_:)()
{
  sub_1000D91E4();
  sub_1000D5820();
  sub_1000843C4();
}

#error "1000D5878: call analysis failed (funcsize=31)"
uint64_t / infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000D58A8(a1, a2, a3, a4, a5, a6, a7, 6LL);
}

#error "1000D58CC: call analysis failed (funcsize=22)"
uint64_t / infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000D590C(a1, a2, a3, a4, a5, a6, a7, 6LL);
}

#error "1000D5938: call analysis failed (funcsize=24)"
void / infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_1000D5978(a1, a2, a3, a4, a5, a6, a7, 6LL);
}

void sub_1000D5978( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = sub_1000D8D54( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v24[0],  v24[1],  v24[2],  v25,  v26,  v27[0],  v27[1],  v27[2],  v27[3],  v27[4]);
  uint64_t v12 = sub_1000D8FE8((uint64_t)v11);
  uint64_t v25 = sub_1000D2E7C(v12, v13, v14, v15);
  sub_1000119E4();
  uint64_t v16 = sub_10001BEF8();
  sub_1000D8E48( v16,  v17,  v18,  v19,  v20,  v21,  v22,  v23,  v10,  v9,  v8,  v25,  (uint64_t)&protocol witness table for Expression<A>,  v27[0]);
  sub_10000AC58(v24);
  sub_1000D8C28(v27);
  sub_1000D33A0();
}

void / infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void sub_1000D59EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = sub_1000D8D54( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v24[0],  v24[1],  v24[2],  v25,  v26,  v27[0],  v27[1],  v27[2],  v27[3],  v27[4]);
  sub_1000D8FE8((uint64_t)v11);
  uint64_t v12 = sub_1000D336C();
  uint64_t v25 = sub_1000D2E7C(v12, v13, v14, v15);
  sub_1000119E4();
  uint64_t v16 = sub_10001BEF8();
  sub_1000D8E48( v16,  v17,  v18,  v19,  v20,  v21,  v22,  v23,  v10,  v9,  v8,  v25,  (uint64_t)&protocol witness table for Expression<A>,  v27[0]);
  sub_10000AC58(v24);
  sub_1000D8C28(v27);
  sub_1000D33A0();
}

void - prefix<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = sub_1000D9384(a1, a2, a3, a4);
  uint64_t v11 = &protocol witness table for Expression<A>;
  uint64_t v7 = v6;
  uint64_t v8 = v5;
  uint64_t v9 = v4;
  sub_10001BEF8();
  sub_10000AE38();
  sub_1000D4F4C(&v7, 1u);
  sub_1000D8C28(&v7);
  sub_1000D9118();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _UNKNOWN **v15;
  uint64_t v7 = sub_1000D9448(a1, a2, a3, a4);
  uint64_t v14 = sub_1000D9588(v7, v8, v9, v10);
  uint64_t v15 = &protocol witness table for Expression<A>;
  uint64_t v11 = v6;
  uint64_t v12 = v5;
  uint64_t v13 = v4;
  sub_10000AE38();
  sub_10000AFB0();
  sub_1000D4F4C(&v11, 1u);
  sub_1000D8C28(&v11);
  sub_1000D9118();
}

void % infix<A>(_:_:)()
{
}

{
  sub_1000D94E4();
  sub_1000843C4();
}

{
  sub_1000D94EC();
  sub_1000843C4();
}

{
  sub_1000D94DC();
  sub_1000843C4();
}

uint64_t % infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000D6024(a1, a2, a3, a4, a5, a6, 7LL);
}

{
  return sub_1000D6088(a1, a2, a3, a4, a5, a6, 7LL);
}

void % infix<A>(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  sub_1000D6168(a1, a2, a3, a4, a5, a6, 7LL, a8);
}

void << infix<A>(_:_:)()
{
}

{
  sub_1000D94E4();
  sub_1000843C4();
}

{
  sub_1000D94EC();
  sub_1000843C4();
}

{
  sub_1000D94DC();
  sub_1000843C4();
}

uint64_t << infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000D6024(a1, a2, a3, a4, a5, a6, 8LL);
}

{
  return sub_1000D6088(a1, a2, a3, a4, a5, a6, 8LL);
}

void << infix<A>(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  sub_1000D6168(a1, a2, a3, a4, a5, a6, 8LL, a8);
}

void >> infix<A>(_:_:)()
{
}

{
  sub_1000D94E4();
  sub_1000843C4();
}

{
  sub_1000D94EC();
  sub_1000843C4();
}

{
  sub_1000D94DC();
  sub_1000843C4();
}

uint64_t >> infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000D6024(a1, a2, a3, a4, a5, a6, 9LL);
}

{
  return sub_1000D6088(a1, a2, a3, a4, a5, a6, 9LL);
}

void >> infix<A>(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  sub_1000D6168(a1, a2, a3, a4, a5, a6, 9LL, a8);
}

void & infix<A>(_:_:)()
{
}

{
  sub_1000D94E4();
  sub_1000843C4();
}

{
  sub_1000D94EC();
  sub_1000843C4();
}

{
  sub_1000D94DC();
  sub_1000843C4();
}

uint64_t & infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000D6024(a1, a2, a3, a4, a5, a6, 10LL);
}

{
  return sub_1000D6088(a1, a2, a3, a4, a5, a6, 10LL);
}

void & infix<A>(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  sub_1000D6168(a1, a2, a3, a4, a5, a6, 10LL, a8);
}

void | infix<A>(_:_:)()
{
}

#error "1000D5DE8: call analysis failed (funcsize=35)"
void | infix<A>(_:_:)()
{
  sub_1000D94E4();
  sub_1000843C4();
}

#error "1000D5EA0: call analysis failed (funcsize=38)"
void | infix<A>(_:_:)()
{
  sub_1000D94EC();
  sub_1000843C4();
}

#error "1000D5F58: call analysis failed (funcsize=38)"
void | infix<A>(_:_:)()
{
  sub_1000D94DC();
  sub_1000843C4();
}

#error "1000D5FF4: call analysis failed (funcsize=31)"
uint64_t | infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000D6024(a1, a2, a3, a4, a5, a6, 11LL);
}

#error "1000D6048: call analysis failed (funcsize=22)"
uint64_t | infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000D6088(a1, a2, a3, a4, a5, a6, 11LL);
}

#error "1000D60B4: call analysis failed (funcsize=24)"
void | infix<A>(_:_:)( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8)
{
  sub_1000D60F4(a1, a2, a3, a4, a5, a6, 11LL, a8);
}

void sub_1000D60F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = sub_1000D8D54( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v24[0],  v24[1],  v24[2],  v25,  v26,  v27[0],  v27[1],  v27[2],  v27[3],  v27[4]);
  uint64_t v12 = sub_1000D8FE8((uint64_t)v11);
  uint64_t v25 = sub_1000D2E7C(v12, v13, v14, v15);
  sub_1000119E4();
  uint64_t v16 = sub_10001BEF8();
  sub_1000D8E48( v16,  v17,  v18,  v19,  v20,  v21,  v22,  v23,  v10,  v9,  v8,  v25,  (uint64_t)&protocol witness table for Expression<A>,  v27[0]);
  sub_10000AC58(v24);
  sub_1000D8C28(v27);
  sub_1000D33A0();
}

void | infix<A>(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000D6168( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = sub_1000D8D54( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v24[0],  v24[1],  v24[2],  v25,  v26,  v27[0],  v27[1],  v27[2],  v27[3],  v27[4]);
  sub_1000D8FE8((uint64_t)v11);
  uint64_t v12 = sub_1000D336C();
  uint64_t v25 = sub_1000D2E7C(v12, v13, v14, v15);
  sub_1000119E4();
  uint64_t v16 = sub_10001BEF8();
  sub_1000D8E48( v16,  v17,  v18,  v19,  v20,  v21,  v22,  v23,  v10,  v9,  v8,  v25,  (uint64_t)&protocol witness table for Expression<A>,  v27[0]);
  sub_10000AC58(v24);
  sub_1000D8C28(v27);
  sub_1000D33A0();
}

#error "1000D6208: call analysis failed (funcsize=11)"
void ~ prefix<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v10 = sub_1000D9384(a1, a2, a3, a4);
  uint64_t v11 = &protocol witness table for Expression<A>;
  uint64_t v7 = v6;
  uint64_t v8 = v5;
  uint64_t v9 = v4;
  sub_10001BEF8();
  sub_10000AE38();
  sub_1000D4F4C(&v7, 0xCu);
  sub_1000D8C28(&v7);
  sub_1000D9118();
}

#error "1000D62A8: call analysis failed (funcsize=12)"
void sub_1000D62B4( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22,  uint64_t a23,  uint64_t a24,  uint64_t (*a25)(void),  uint64_t (*a26)(uint64_t),  uint64_t (*a27)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t),  void (*a28)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  sub_1000D9554();
  uint64_t v32 = v31;
  uint64_t v47 = v33;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  sub_1000D9544();
  uint64_t v38 = a25();
  uint64_t v46 = a26(v38);
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  sub_10001DEC4();
  sub_10001DF40();
  uint64_t v43 = a27(v30, v29, v28, v37, v35, v47, v32);
  a28(v46, v40, v42, v43, v44, v45, v32);
  sub_10000ADB0();
  sub_10001DED8();
  sub_10001BC70();
  sub_100011958();
  sub_1000D943C();
  sub_1000D8F9C();
}

void ~ prefix<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_1000D9448(a1, a2, a3, a4);
  uint64_t v14 = sub_1000D9588(v7, v8, v9, v10);
  uint64_t v15 = &protocol witness table for Expression<A>;
  uint64_t v11 = v6;
  uint64_t v12 = v5;
  uint64_t v13 = v4;
  sub_10000AE38();
  sub_10000AFB0();
  sub_1000D4F4C(&v11, 0xCu);
  sub_1000D8C28(&v11);
  sub_1000D9118();
}

#error "1000D6428: call analysis failed (funcsize=12)"
#error "1000D6460: call analysis failed (funcsize=11)"
void ^ infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_1000D64E4(a1, a2, a3, a4, a5, a6, & infix<A>(_:_:), ~ prefix<A>(_:), | infix<A>(_:_:), & infix<A>(_:_:));
  sub_1000843C4();
}

void ^ infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

{
  sub_1000D64E4(a1, a2, a3, a4, a5, a6, & infix<A>(_:_:), ~ prefix<A>(_:), | infix<A>(_:_:), & infix<A>(_:_:));
  sub_1000843C4();
}

#error "1000D6514: call analysis failed (funcsize=25)"
void ^ infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_1000D64E4(a1, a2, a3, a4, a5, a6, & infix<A>(_:_:), ~ prefix<A>(_:), | infix<A>(_:_:), & infix<A>(_:_:));
  sub_1000843C4();
}

void == infix<A>(_:_:)()
{
}

{
  sub_1000D8EE8();
  sub_1000D6878();
  sub_1000D8C64();
}

{
  sub_1000D8EE8();
  sub_1000D696C();
  sub_1000D8C64();
}

{
  sub_1000D8EE8();
  sub_1000D6A60();
  sub_1000D8C64();
}

{
  sub_1000D9644();
  sub_1000D6B40();
  sub_1000843C4();
}

#error "1000D665C: call analysis failed (funcsize=7)"
#error "1000D6678: call analysis failed (funcsize=7)"
#error "1000D6694: call analysis failed (funcsize=7)"
void === infix<A>(_:_:)()
{
  sub_1000D8F04();
  sub_1000D679C();
  sub_1000D8C64();
}

void === infix<A>(_:_:)()
{
}

{
  sub_1000D8F04();
  sub_1000D696C();
  sub_1000D8C64();
}

{
  sub_1000D8F04();
  sub_1000D6A60();
  sub_1000D8C64();
}

{
  sub_1000D9248();
  sub_1000D6B40();
  sub_1000843C4();
}

#error "1000D673C: call analysis failed (funcsize=7)"
#error "1000D6758: call analysis failed (funcsize=7)"
#error "1000D6774: call analysis failed (funcsize=7)"
void != infix<A>(_:_:)()
{
  sub_1000D8F20();
  sub_1000D679C();
  sub_1000D8C64();
}

#error "1000D67FC: call analysis failed (funcsize=45)"
void != infix<A>(_:_:)()
{
  sub_1000D8F20();
  sub_1000D6878();
  sub_1000D8C64();
}

#error "1000D68F0: call analysis failed (funcsize=51)"
void != infix<A>(_:_:)()
{
  sub_1000D8F20();
  sub_1000D696C();
  sub_1000D8C64();
}

#error "1000D69E4: call analysis failed (funcsize=51)"
void != infix<A>(_:_:)()
{
  sub_1000D8F20();
  sub_1000D6A60();
  sub_1000D8C64();
}

#error "1000D6AC4: call analysis failed (funcsize=46)"
void != infix<A>(_:_:)()
{
  sub_1000D9690();
  sub_1000D6B40();
  sub_1000843C4();
}

#error "1000D6B60: call analysis failed (funcsize=37)"
#error "1000D6BF0: call analysis failed (funcsize=7)"
void sub_1000D6BFC( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22,  uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t WitnessTable;
  uint64_t v54;
  uint64_t v55;
  __n128 *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _UNKNOWN **v69;
  void *v70;
  uint64_t v71;
  __n128 *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85[19];
  void v86[3];
  uint64_t v87;
  _UNKNOWN **v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _UNKNOWN **v93;
  sub_10000AE58();
  uint64_t v81 = v25;
  uint64_t v82 = v24;
  unint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v83 = v30;
  uint64_t v84 = v31;
  uint64_t v33 = v32;
  uint64_t v34 = sub_1000D92DC(0LL, v30, v31, v28, v26);
  uint64_t v35 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  sub_100027EA4();
  __chkstk_darwin(v36);
  uint64_t v38 = (char *)&v79 - v37;
  uint64_t v39 = *(void *)(v27 - 8);
  sub_100027F2C();
  __chkstk_darwin(v40);
  sub_100011A0C();
  uint64_t v43 = v42 - v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v38, v29, v34);
  if (sub_100009E6C((uint64_t)v38, 1LL, v27) == 1)
  {
    uint64_t v81 = a23;
    __int128 v44 = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v38, v34);
    uint64_t v48 = sub_1000D3378(v44, v45, v46, v47);
    uint64_t v92 = v48;
    uint64_t v93 = &protocol witness table for Expression<A>;
    uint64_t v89 = v33;
    uint64_t v90 = v83;
    uint64_t v91 = v84;
    sub_1000472D0();
    sub_100009E60(v49, v50, v51, v52);
    uint64_t v87 = v48;
    uint64_t v88 = &protocol witness table for Expression<A>;
    sub_1000119E4();
    sub_10001BCF8();
    uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v48);
    uint64_t v54 = swift_getWitnessTable("0k", v34);
    ExpressionType<>.init(value:)(v23, v48, WitnessTable, v54, v82, (uint64_t)v86);
    uint64_t v55 = sub_100008DB0(&qword_100131160);
    uint64_t v56 = (__n128 *)sub_1000D95B0(v55);
    uint64_t v57 = sub_1000D8C90(v56, (__n128)xmmword_1000F57D0);
    sub_1000D92D4(v57, (uint64_t)&v56[4].n128_i64[1]);
    sub_1000D3EA4((uint64_t)v56, a22, v81, v85);
    sub_1000D8C6C(v85);
    sub_1000D92CC();
    sub_1000D943C();
    sub_1000D8C58(v58, v59, v60, v61, v62, v63);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000D90D0();
    sub_1000D909C();
  }

  else
  {
    uint64_t v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 32);
    uint64_t v80 = v39;
    uint64_t v65 = sub_1000B69D0(v43, (uint64_t)v38, v64);
    uint64_t v92 = sub_1000D3378(v65, v66, v67, v68);
    uint64_t v93 = &protocol witness table for Expression<A>;
    uint64_t v89 = v33;
    uint64_t v90 = v83;
    uint64_t v91 = v84;
    uint64_t v69 = *(_UNKNOWN ***)(v82 + 8);
    uint64_t v87 = v27;
    uint64_t v88 = v69;
    uint64_t v70 = sub_10001AFA8(v86);
    sub_1000B69D0((uint64_t)v70, v43, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 16));
    uint64_t v71 = sub_100008DB0(&qword_100131160);
    uint64_t v72 = (__n128 *)sub_1000D9598(v71);
    uint64_t v73 = sub_1000D8C90(v72, (__n128)xmmword_1000F57D0);
    sub_1000D92D4(v73, (uint64_t)&v72[4].n128_i64[1]);
    sub_1000119E4();
    sub_10000AE38();
    sub_1000D9638((uint64_t)v72, v85);
    uint64_t v74 = v85[3];
    uint64_t v75 = v85[4];
    uint64_t v76 = sub_1000D9658();
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v74, v75);
    sub_1000D9168();
    sub_1000D8C58((uint64_t)v76, v33, a21, v77, v78, &qword_1001347C8);
    sub_10001DED8();
    sub_10001DEC4();
    swift_setDeallocating(v72);
    sub_100058868();
    (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v43, v27);
  }

  sub_10000AC58(v86);
  sub_10000AC58(&v89);
  sub_10000AD58();
}

#error "1000D6F28: call analysis failed (funcsize=7)"
void sub_1000D6F34( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22,  uint64_t a23,  uint64_t a24,  uint64_t a25,  uint64_t a26,  uint64_t a27,  uint64_t a28,  uint64_t a29,  uint64_t a30,  uint64_t a31,  uint64_t a32,  uint64_t a33,  uint64_t a34,  uint64_t a35,  uint64_t a36,  uint64_t a37,  uint64_t a38,  uint64_t a39,  uint64_t a40,  uint64_t a41,  uint64_t a42,  uint64_t a43,  uint64_t a44,  uint64_t a45,  uint64_t a46,  uint64_t a47,  uint64_t a48)
{
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __n128 *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  sub_1000D9100();
  a47 = v48;
  a48 = v49;
  uint64_t v56 = sub_1000D9070(v50, v51, v52, v53, v54, v55);
  uint64_t v57 = sub_1000D9504((uint64_t)v56);
  uint64_t v61 = sub_1000D3210(v57, v58, v59, v60);
  sub_1000D95A0(v61, (uint64_t)&protocol witness table for Expression<A>);
  uint64_t v62 = sub_100008DB0(&qword_100131160);
  uint64_t v69 = (__n128 *)sub_1000D8E28(v62, v63, v64, v65, v66, v67, v68);
  sub_1000D8E04(v69, (__n128)xmmword_1000F57D0);
  sub_1000D960C();
  sub_10001C064();
  sub_1000119E4();
  sub_1000D8D18(&a10);
  uint64_t v70 = sub_1000D8BEC(&a10);
  uint64_t v71 = sub_1000D8D28(v70);
  sub_1000D8C10(v71, v72, v73, v74, v75, &qword_1001347C0);
  sub_1000D8C44();
  sub_100011958();
  sub_1000D8FE0();
  sub_1000D8FCC();
  sub_10000AC58(&a29);
  sub_1000D8CFC(&a34);
  sub_1000D8D3C();
}

#error "1000D6FE8: call analysis failed (funcsize=7)"
void sub_1000D6FF4( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22,  uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t WitnessTable;
  uint64_t v50;
  uint64_t v51;
  __n128 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  void (*v60)(uint64_t, char *, uint64_t);
  _UNKNOWN **v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __n128 *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78[19];
  void v79[3];
  uint64_t v80;
  _UNKNOWN **v81;
  void v82[3];
  uint64_t v83;
  _UNKNOWN **v84;
  sub_10000AE58();
  uint64_t v74 = v25;
  uint64_t v75 = v24;
  unint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v76 = v30;
  uint64_t v77 = v31;
  uint64_t v33 = v32;
  uint64_t v34 = sub_1000D92DC(0LL, v24, v30, v31, v28);
  uint64_t v35 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  sub_100027EA4();
  __chkstk_darwin(v36);
  uint64_t v38 = (char *)&v72 - v37;
  uint64_t v39 = *(void *)(v29 - 8);
  sub_100027F2C();
  __chkstk_darwin(v40);
  sub_100011A0C();
  uint64_t v43 = v42 - v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v38, v33, v34);
  if (sub_100009E6C((uint64_t)v38, 1LL, v29) == 1)
  {
    __int128 v44 = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v38, v34);
    uint64_t v48 = sub_1000D2F7C(v44, v45, v46, v47);
    sub_100009E60(v23, 1LL, 1LL, v29);
    uint64_t v83 = v48;
    uint64_t v84 = &protocol witness table for Expression<A>;
    uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v48);
    uint64_t v50 = swift_getWitnessTable("0k", v34);
    ExpressionType<>.init(value:)(v23, v48, WitnessTable, v50, v27, (uint64_t)v82);
    uint64_t v80 = v48;
    uint64_t v81 = &protocol witness table for Expression<A>;
    sub_1000D95E0();
    uint64_t v51 = sub_100008DB0(&qword_100131160);
    uint64_t v52 = (__n128 *)sub_1000D95B0(v51);
    uint64_t v53 = sub_1000D8C90(v52, (__n128)xmmword_1000F57D0);
    sub_1000D92D4(v53, (uint64_t)&v52[4].n128_i64[1]);
    sub_10001BEF8();
    sub_10000AE38();
    sub_1000D3EA4((uint64_t)v52, a22, a23, v78);
    sub_1000D934C();
    sub_1000D92CC();
    sub_1000D8E14();
    sub_1000D8C58(v54, v55, v56, v57, v58, v59);
    sub_10001BEC0();
    swift_bridgeObjectRelease();
    swift_setDeallocating(v52);
    sub_100058868();
  }

  else
  {
    uint64_t v60 = *(void (**)(uint64_t, char *, uint64_t))(v39 + 32);
    uint64_t v73 = v39;
    v60(v43, v38, v29);
    uint64_t v61 = *(_UNKNOWN ***)(v27 + 8);
    uint64_t v83 = v29;
    uint64_t v84 = v61;
    uint64_t v62 = sub_10001AFA8(v82);
    uint64_t v63 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v39 + 16))(v62, v43, v29);
    uint64_t v80 = sub_1000D2F7C(v63, v64, v65, v66);
    uint64_t v81 = &protocol witness table for Expression<A>;
    sub_1000D95E0();
    uint64_t v67 = sub_100008DB0(&qword_100131160);
    uint64_t v68 = (__n128 *)sub_1000D9598(v67);
    uint64_t v69 = sub_1000D8C90(v68, (__n128)xmmword_1000F57D0);
    sub_1000D92D4(v69, (uint64_t)&v68[4].n128_i64[1]);
    sub_10001BEF8();
    sub_10000AE38();
    sub_1000D9638((uint64_t)v68, v78);
    sub_1000D934C();
    sub_1000D9168();
    sub_1000D8C58((uint64_t)v38, v34, a21, v70, v71, &qword_1001347C8);
    sub_10001DED8();
    sub_10001DEC4();
    swift_setDeallocating(v68);
    sub_100058868();
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v43, v29);
  }

  sub_10000AC58(v79);
  sub_10000AC58(v82);
  sub_10000AD58();
}

void !== infix<A>(_:_:)()
{
}

{
  sub_1000D8D94();
  sub_1000D6878();
  sub_1000D8C64();
}

{
  sub_1000D8D94();
  sub_1000D696C();
  sub_1000D8C64();
}

{
  sub_1000D8D94();
  sub_1000D6A60();
  sub_1000D8C64();
}

{
  sub_1000D8E88();
  sub_1000D6B40();
  sub_1000843C4();
}

#error "1000D7378: call analysis failed (funcsize=7)"
void sub_1000D7384( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t WitnessTable;
  uint64_t v48;
  uint64_t v49;
  __n128 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(void);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _UNKNOWN **v64;
  void *v65;
  uint64_t v66;
  __n128 *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80[19];
  void v81[3];
  uint64_t v82;
  _UNKNOWN **v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _UNKNOWN **v88;
  sub_10000AE58();
  id v79 = v22;
  uint64_t v75 = v24;
  uint64_t v76 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v77 = v29;
  uint64_t v31 = v30;
  uint64_t v78 = a21;
  uint64_t v32 = sub_1000D92DC(0LL, v23, v29, v27, v25);
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  sub_1000D94C0();
  __chkstk_darwin(v34);
  uint64_t v36 = (char *)&v74 - v35;
  uint64_t v37 = *(void *)(v26 - 8);
  sub_100027F2C();
  __chkstk_darwin(v38);
  sub_100011A0C();
  uint64_t v41 = v40 - v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v36, v28, v32);
  if (sub_100009E6C((uint64_t)v36, 1LL, v26) == 1)
  {
    uint64_t v42 = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v36, v32);
    uint64_t v46 = sub_1000D2F7C(v42, v43, v44, v45);
    uint64_t v87 = v46;
    uint64_t v88 = &protocol witness table for Expression<A>;
    uint64_t v84 = v31;
    uint64_t v85 = v76;
    uint64_t v86 = v77;
    sub_100009E60(v21, 1LL, 1LL, v26);
    uint64_t v82 = v46;
    uint64_t v83 = &protocol witness table for Expression<A>;
    sub_10001BD0C();
    sub_10001BCF8();
    uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v46);
    uint64_t v48 = swift_getWitnessTable("0k", v32);
    ExpressionType<>.init(value:)(v21, v46, WitnessTable, v48, v75, (uint64_t)v81);
    uint64_t v49 = sub_100008DB0(&qword_100131160);
    uint64_t v50 = (__n128 *)sub_1000D95B0(v49);
    uint64_t v51 = sub_1000D8C90(v50, (__n128)xmmword_1000F57D0);
    sub_1000D92D4(v51, (uint64_t)&v50[4].n128_i64[1]);
    sub_1000D952C((uint64_t)v50, v80);
    uint64_t v52 = sub_1000D8C6C(v80);
    uint64_t v54 = v53;
    uint64_t v56 = v55;
    sub_1000D92CC();
    sub_1000D8C58(v52, v54, v56, v57, v58, &qword_1001347C8);
    sub_10001BEC0();
    swift_bridgeObjectRelease();
    sub_1000D90D0();
    sub_1000D909C();
  }

  else
  {
    uint64_t v74 = v37;
    sub_1000D95F4();
    uint64_t v60 = v59();
    uint64_t v87 = sub_1000D2F7C(v60, v61, v62, v63);
    uint64_t v88 = &protocol witness table for Expression<A>;
    uint64_t v84 = v31;
    uint64_t v85 = v76;
    uint64_t v86 = v77;
    uint64_t v64 = *(_UNKNOWN ***)(v75 + 8);
    uint64_t v82 = v26;
    uint64_t v83 = v64;
    uint64_t v65 = sub_10001AFA8(v81);
    (*(void (**)(void *, uint64_t, uint64_t))(v37 + 16))(v65, v41, v26);
    uint64_t v66 = sub_100008DB0(&qword_100131160);
    uint64_t v67 = (__n128 *)sub_1000D9598(v66);
    uint64_t v68 = sub_1000D8C90(v67, (__n128)xmmword_1000F57D0);
    sub_1000D92D4(v68, (uint64_t)&v67[4].n128_i64[1]);
    sub_1000119E4();
    sub_10000AE38();
    sub_1000D952C((uint64_t)v67, v80);
    uint64_t v69 = v80[3];
    uint64_t v70 = v80[4];
    uint64_t v71 = sub_1000D9658();
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v69, v70);
    sub_1000D9168();
    sub_1000D8C58((uint64_t)v71, v32, v31, v72, v73, &qword_1001347C8);
    sub_10001DED8();
    sub_10001DEC4();
    sub_1000D90D0();
    sub_1000D909C();
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v41, v26);
  }

  sub_10000AC58(v81);
  sub_10000AC58(&v84);
  sub_10000AD58();
}

#error "1000D76A0: call analysis failed (funcsize=7)"
#error "1000D76BC: call analysis failed (funcsize=7)"
void sub_1000D76C8( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t WitnessTable;
  uint64_t v48;
  uint64_t v49;
  __n128 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, char *, uint64_t);
  _UNKNOWN **v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __n128 *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void v76[20];
  uint64_t v77[19];
  void v78[3];
  uint64_t v79;
  _UNKNOWN **v80;
  void v81[3];
  uint64_t v82;
  _UNKNOWN **v83;
  sub_10000AE58();
  v76[5] = v22;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  v76[2] = v27;
  v76[3] = v28;
  v76[1] = v29;
  uint64_t v31 = v30;
  v76[4] = a21;
  uint64_t v32 = sub_1000D92DC(0LL, v29, v27, v28, v25);
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  sub_1000D94C0();
  __chkstk_darwin(v34);
  uint64_t v36 = (char *)v76 - v35;
  uint64_t v37 = *(void *)(v26 - 8);
  sub_100027F2C();
  __chkstk_darwin(v38);
  sub_100011A0C();
  uint64_t v41 = v40 - v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v36, v31, v32);
  if (sub_100009E6C((uint64_t)v36, 1LL, v26) == 1)
  {
    uint64_t v42 = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v36, v32);
    uint64_t v46 = sub_1000D3624(v42, v43, v44, v45);
    sub_100009E60(v21, 1LL, 1LL, v26);
    uint64_t v82 = v46;
    uint64_t v83 = &protocol witness table for Expression<A>;
    uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v46);
    uint64_t v48 = swift_getWitnessTable("0k", v32);
    ExpressionType<>.init(value:)(v21, v46, WitnessTable, v48, v24, (uint64_t)v81);
    id v79 = v46;
    uint64_t v80 = &protocol witness table for Expression<A>;
    sub_1000D9664();
    uint64_t v49 = sub_100008DB0(&qword_100131160);
    uint64_t v50 = (__n128 *)sub_1000D95B0(v49);
    uint64_t v51 = sub_1000D8C90(v50, (__n128)xmmword_1000F57D0);
    sub_1000D92D4(v51, (uint64_t)&v50[4].n128_i64[1]);
    sub_10001BEF8();
    sub_10000AE38();
    sub_1000D952C((uint64_t)v50, v77);
    uint64_t v52 = sub_1000D8BEC(v77);
    uint64_t v54 = v53;
    uint64_t v56 = v55;
    sub_1000D92CC();
    sub_1000D8C58(v52, v54, v56, v57, v58, &qword_1001347C8);
    sub_1000D95D4();
    sub_10001DF40();
    sub_10001BEC0();
    swift_setDeallocating(v50);
    sub_100058868();
  }

  else
  {
    uint64_t v59 = *(void (**)(uint64_t, char *, uint64_t))(v37 + 32);
    v76[0] = v37;
    v59(v41, v36, v26);
    uint64_t v60 = *(_UNKNOWN ***)(v24 + 8);
    uint64_t v82 = v26;
    uint64_t v83 = v60;
    uint64_t v61 = sub_10001AFA8(v81);
    uint64_t v62 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v37 + 16))(v61, v41, v26);
    id v79 = sub_1000D3624(v62, v63, v64, v65);
    uint64_t v80 = &protocol witness table for Expression<A>;
    sub_1000D9664();
    uint64_t v66 = sub_100008DB0(&qword_100131160);
    uint64_t v67 = (__n128 *)sub_1000D9598(v66);
    uint64_t v68 = sub_1000D8C90(v67, (__n128)xmmword_1000F57D0);
    sub_1000D92D4(v68, (uint64_t)&v67[4].n128_i64[1]);
    sub_10001BEF8();
    sub_10000AE38();
    sub_1000D952C((uint64_t)v67, v77);
    uint64_t v69 = sub_1000D8BEC(v77);
    uint64_t v71 = v70;
    uint64_t v73 = v72;
    sub_1000D92CC();
    sub_1000D8C58(v69, v71, v73, v74, v75, &qword_1001347C8);
    sub_1000D95D4();
    sub_10001DED8();
    sub_10001BEC0();
    swift_setDeallocating(v67);
    sub_100058868();
    (*(void (**)(uint64_t, uint64_t))(v76[0] + 8LL))(v41, v26);
  }

  sub_10000AC58(v78);
  sub_10000AC58(v81);
  sub_1000D95F4();
  sub_10000AD58();
}

void > infix<A>(_:_:)()
{
}

{
  sub_1000D8ECC();
  sub_1000D6878();
  sub_1000D8C64();
}

{
  sub_1000D8ECC();
  sub_1000D696C();
  sub_1000D8C64();
}

{
  sub_1000D8ECC();
  sub_1000D6A60();
  sub_1000D8C64();
}

{
  sub_1000D920C();
  sub_1000D6B40();
  sub_1000843C4();
}

{
  sub_1000D920C();
  sub_1000D7B48();
  sub_1000843C4();
}

#error "1000D7A78: call analysis failed (funcsize=7)"
#error "1000D7A94: call analysis failed (funcsize=7)"
void >= infix<A>(_:_:)()
{
  sub_1000D8F58();
  sub_1000D679C();
  sub_1000D8C64();
}

void >= infix<A>(_:_:)()
{
}

{
  sub_1000D8F58();
  sub_1000D696C();
  sub_1000D8C64();
}

{
  sub_1000D8F58();
  sub_1000D6A60();
  sub_1000D8C64();
}

{
  sub_1000D9234();
  sub_1000D6B40();
  sub_1000843C4();
}

{
  sub_1000D9234();
  sub_1000D7B48();
  sub_1000843C4();
}

#error "1000D7BD0: call analysis failed (funcsize=67)"
#error "1000D7C70: call analysis failed (funcsize=7)"
#error "1000D7C8C: call analysis failed (funcsize=7)"
void sub_1000D7C98( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22,  uint64_t a23,  uint64_t a24,  uint64_t a25,  uint64_t a26,  uint64_t a27,  uint64_t a28,  uint64_t a29,  uint64_t a30,  uint64_t a31,  uint64_t a32,  uint64_t a33,  uint64_t a34,  uint64_t a35,  uint64_t a36,  uint64_t a37,  uint64_t a38,  uint64_t a39,  uint64_t a40,  uint64_t a41,  uint64_t a42,  uint64_t a43,  uint64_t a44,  uint64_t a45,  uint64_t a46,  uint64_t a47,  uint64_t a48)
{
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __n128 *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  sub_1000D9100();
  a47 = v49;
  a48 = v50;
  uint64_t v52 = v51;
  sub_1000D9544();
  uint64_t v54 = *(void *)(v53 + 8);
  a37 = v55;
  a38 = v54;
  uint64_t v56 = sub_10001AFA8(&a34);
  sub_1000B69D0((uint64_t)v56, v48, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 16LL));
  uint64_t v57 = type metadata accessor for Optional(255LL, v52);
  uint64_t v61 = sub_1000D2CB0(v57, v58, v59, v60);
  sub_1000D95A0(v61, (uint64_t)&protocol witness table for Expression<A>);
  uint64_t v62 = sub_100008DB0(&qword_100131160);
  uint64_t v69 = (__n128 *)sub_1000D8E28(v62, v63, v64, v65, v66, v67, v68);
  sub_1000D8E04(v69, (__n128)xmmword_1000F57D0);
  sub_1000D91C4();
  sub_10001C064();
  uint64_t v70 = sub_1000119E4();
  sub_1000D94AC(v70);
  uint64_t v71 = a13;
  uint64_t v72 = a14;
  sub_100008D74(&a10, a13);
  uint64_t v73 = sub_1000D8E20(v71, *(uint64_t (**)(uint64_t, uint64_t))(v72 + 8));
  uint64_t v75 = v74;
  sub_1000D8D88(v73);
  sub_1000D8C58(v73, v75, v72, v76, v77, &qword_1001347C8);
  sub_10001BC70();
  sub_10000ADB0();
  sub_1000D90D0();
  sub_1000D909C();
  sub_10000AC58(&a29);
  sub_10000AC58(&a34);
  sub_1000D943C();
  sub_1000D8D3C();
}

void < infix<A>(_:_:)()
{
}

{
  sub_1000D8EB0();
  sub_1000D6878();
  sub_1000D8C64();
}

{
  sub_1000D8EB0();
  sub_1000D696C();
  sub_1000D8C64();
}

{
  sub_1000D8EB0();
  sub_1000D6A60();
  sub_1000D8C64();
}

{
  sub_1000D9220();
  sub_1000D6B40();
  sub_1000843C4();
}

{
  sub_1000D9220();
  sub_1000D7B48();
  sub_1000843C4();
}

#error "1000D7E64: call analysis failed (funcsize=7)"
#error "1000D7E80: call analysis failed (funcsize=7)"
void <= infix<A>(_:_:)()
{
  sub_1000D8F3C();
  sub_1000D679C();
  sub_1000D8C64();
}

void <= infix<A>(_:_:)()
{
}

{
  sub_1000D8F3C();
  sub_1000D696C();
  sub_1000D8C64();
}

{
  sub_1000D8F3C();
  sub_1000D6A60();
  sub_1000D8C64();
}

{
  sub_1000D925C();
  sub_1000D6B40();
  sub_1000843C4();
}

{
  sub_1000D925C();
  sub_1000D7B48();
  sub_1000843C4();
}

#error "1000D7F44: call analysis failed (funcsize=7)"
#error "1000D7F60: call analysis failed (funcsize=7)"
uint64_t sub_1000D7F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  Swift::String v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t AssociatedConformanceWitness;
  _BYTE v23[112];
  uint64_t v24;
  uint64_t v25;
  sub_1000D9518();
  sub_10001BCF8();
  sub_10000ADB0();
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  v12._object = (void *)0x80000001000FCC80LL;
  v12._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  String.append(_:)(v12);
  uint64_t v13 = sub_100008DB0(&qword_100131970);
  uint64_t inited = swift_initStackObject(v13, v23);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, a6, a5, &protocol requirements base descriptor for Value);
  *(void *)(inited + 56) = AssociatedTypeWitness;
  sub_1000D95F4();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v16,  v17,  v18,  &protocol requirements base descriptor for Value,  v19);
  *(void *)(inited + 64) = AssociatedConformanceWitness;
  sub_1000D95CC();
  sub_1000D9600();
  type metadata accessor for ClosedRange(0LL, a5, a7);
  *(void *)(inited + 96) = AssociatedTypeWitness;
  *(void *)(inited + 104) = AssociatedConformanceWitness;
  sub_10001AFA8((void *)(inited + 72));
  sub_1000D9600();
  uint64_t v24 = a4;
  sub_10000AFB0();
  sub_1000D4B7C();
  return a2;
}

uint64_t sub_1000D80E4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  v12._uint64_t countAndFlagsBits = 0x4E41203F203D3E20LL;
  v12._object = (void *)0xEA00000000002044LL;
  String.append(_:)(v12);
  sub_10001BCF8();
  v13._uint64_t countAndFlagsBits = a2;
  v13._object = a3;
  String.append(_:)(v13);
  sub_10001BEC0();
  v14._uint64_t countAndFlagsBits = 1059077152LL;
  v14._object = (void *)0xE400000000000000LL;
  String.append(_:)(v14);
  uint64_t v24 = a2;
  uint64_t v15 = sub_100008DB0(&qword_100131970);
  uint64_t inited = swift_initStackObject(v15, v27);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5520;
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(a6 + 56);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, a6, a5, &protocol requirements base descriptor for Value);
  *(void *)(inited + 56) = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a6,  a5,  AssociatedTypeWitness,  &protocol requirements base descriptor for Value,  &associated conformance descriptor for Value.Value.Datatype: Binding);
  *(void *)(inited + 64) = AssociatedConformanceWitness;
  sub_1000D95CC();
  v17(a5, a6);
  uint64_t v20 = v17;
  uint64_t v28 = a4;
  sub_10001BD0C();
  sub_1000D9624();
  sub_10001BD0C();
  sub_1000D4B7C();
  uint64_t v21 = v28;
  uint64_t v22 = swift_initStackObject(v15, v26);
  *(_OWORD *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5520;
  type metadata accessor for Range(0LL, a5, a7);
  *(void *)(v22 + 56) = AssociatedTypeWitness;
  *(void *)(v22 + 64) = AssociatedConformanceWitness;
  sub_10001AFA8((void *)(v22 + 32));
  v20(a5, a6);
  uint64_t v28 = v21;
  sub_1000D9624();
  return v24;
}

void ~= infix<A>(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

{
  sub_1000D90D8(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  sub_1000D8C64();
}

{
  sub_1000D8F74(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  sub_1000D8C64();
}

uint64_t sub_1000D832C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  swift_bridgeObjectRetain();
  v14._uint64_t countAndFlagsBits = a10;
  v14._object = a11;
  String.append(_:)(v14);
  uint64_t v15 = v22;
  uint64_t v16 = sub_100008DB0(&qword_100131970);
  uint64_t inited = swift_initStackObject(v16, v21);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5520;
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(a6 + 56);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, a6, a5, &protocol requirements base descriptor for Value);
  *(void *)(inited + 56) = AssociatedTypeWitness;
  *(void *)(inited + 64) = swift_getAssociatedConformanceWitness( a6,  a5,  AssociatedTypeWitness,  &protocol requirements base descriptor for Value,  &associated conformance descriptor for Value.Value.Datatype: Binding);
  sub_1000D95CC();
  v18(a5, a6);
  uint64_t v22 = a4;
  sub_10000AFB0();
  sub_1000D4B7C();
  return v15;
}

void *sub_1000D8450(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    sub_1000D3994();
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = (uint64_t *)(a1 + 48);
    do
    {
      uint64_t v6 = *(v4 - 2);
      uint64_t v5 = *(v4 - 1);
      uint64_t v7 = *v4;
      uint64_t v15 = v2;
      unint64_t v8 = v2[2];
      unint64_t v9 = v2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v8 >= v9 >> 1)
      {
        sub_1000D3994();
        uint64_t v2 = v15;
      }

      uint64_t v13 = sub_100008DB0(&qword_1001347C0);
      Swift::String v14 = &protocol witness table for Expression<A>;
      *(void *)&__int128 v11 = v6;
      *((void *)&v11 + 1) = v5;
      uint64_t v12 = v7;
      __int128 v2[2] = v8 + 1;
      sub_100009EEC(&v11, (uint64_t)&v2[5 * v8 + 4]);
      v4 += 3;
      --v1;
    }

    while (v1);
  }

  return v2;
}

void sub_1000D8560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1000D8450(a1);
  sub_1000D3EA4((uint64_t)v5, a2, a3, v13);
  uint64_t v6 = v14;
  uint64_t v7 = v15;
  sub_100008D74(v13, v14);
  uint64_t v8 = sub_1000D8E20(v6, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  uint64_t v10 = v9;
  sub_1000D8D88(v8);
  sub_1000D8C58(v8, v10, v7, v11, v12, &qword_1001347C0);
  sub_100011958();
  sub_10001BC70();
  sub_10000ADB0();
  sub_1000D943C();
}

void && infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

uint64_t && infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000D8664(a1, a2, a3, a4, a5, a6, &unk_1001347C0, &qword_1001347C8);
}

{
  return sub_1000D8664(a1, a2, a3, a4, a5, a6, &qword_1001347C8, &qword_1001347C0);
}

#error "1000D86E0: call analysis failed (funcsize=55)"
void && infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_1000D9534(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_1001347C8);
  sub_1000843C4();
}

void && infix(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, void *a32, _UNKNOWN **a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, _UNKNOWN **a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48)
{
}

{
  sub_1000D9290( a1,  a2,  a3,  a4,  (uint64_t)&qword_1001347C8,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  a41,  a42,  a43,  a44,  a45,  a46,  a47,  a48);
}

void sub_1000D8794( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, void *a32, _UNKNOWN **a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, _UNKNOWN **a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48)
{
  a47 = v51;
  a48 = v52;
  char v54 = v53;
  sub_1000D9544();
  uint64_t v56 = sub_100008DB0(v55);
  a38 = &protocol witness table for Expression<A>;
  a34 = v50;
  a35 = v49;
  a36 = v48;
  a37 = v56;
  a32 = &type metadata for Bool;
  a33 = &protocol witness table for Bool;
  LOBYTE(a29) = v54;
  uint64_t v57 = sub_100008DB0(&qword_100131160);
  uint64_t v64 = (__n128 *)sub_1000D8E28(v57, v58, v59, v60, v61, v62, v63);
  sub_1000D8E04(v64, (__n128)xmmword_1000F57D0);
  sub_1000D91C4();
  sub_10001BD0C();
  uint64_t v65 = sub_10001C064();
  sub_1000D9498(v65);
  sub_1000D8C6C(&a10);
  sub_1000D8CD4(&a10);
  sub_1000D8DB8();
  sub_10001BC70();
  sub_1000D90D0();
  sub_1000D909C();
  sub_10000AC58(&a29);
  sub_10000AC58(&a34);
  sub_1000D8E14();
  sub_1000D8D3C();
}

void && infix(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, _UNKNOWN **a33, uint64_t a34, uint64_t a35, uint64_t a36, void *a37, _UNKNOWN **a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48)
{
}

{
  sub_1000D92A4( a1,  a2,  a3,  a4,  (uint64_t)&qword_1001347C8,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  a41,  a42,  a43,  a44,  a45,  a46,  a47,  a48);
}

void sub_1000D8888( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, _UNKNOWN **a33, uint64_t a34, uint64_t a35, uint64_t a36, void *a37, _UNKNOWN **a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48)
{
  a47 = v48;
  a48 = v49;
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  a37 = &type metadata for Bool;
  a38 = &protocol witness table for Bool;
  LOBYTE(a34) = v56;
  a32 = sub_100008DB0(v57);
  a33 = &protocol witness table for Expression<A>;
  a29 = v55;
  a30 = v53;
  a31 = v51;
  uint64_t v58 = sub_100008DB0(&qword_100131160);
  uint64_t v65 = (__n128 *)sub_1000D8E28(v58, v59, v60, v61, v62, v63, v64);
  sub_1000D8E04(v65, (__n128)xmmword_1000F57D0);
  sub_1000D91C4();
  sub_10001BD0C();
  uint64_t v66 = sub_10001C064();
  sub_1000D9498(v66);
  sub_1000D8C6C(&a10);
  sub_1000D8CD4(&a10);
  sub_1000D8DB8();
  sub_10001BC70();
  sub_1000D90D0();
  sub_1000D909C();
  sub_10000AC58(&a29);
  sub_10000AC58(&a34);
  sub_1000D8E14();
  sub_1000D8D3C();
}

void || infix(_:_:)()
{
}

#error "1000D89B8: call analysis failed (funcsize=10)"
#error "1000D89EC: call analysis failed (funcsize=10)"
void || infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sub_1000D9684();
  sub_1000D95C0(v0, v1, v2, v3, v4, v5, (uint64_t)&qword_1001347C8);
  sub_1000843C4();
}

void || infix(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, void *a32, _UNKNOWN **a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, _UNKNOWN **a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48)
{
}

{
  sub_1000D92E4( a1,  a2,  a3,  a4,  (uint64_t)&qword_1001347C8,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  a41,  a42,  a43,  a44,  a45,  a46,  a47,  a48);
}

void || infix(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, _UNKNOWN **a33, uint64_t a34, uint64_t a35, uint64_t a36, void *a37, _UNKNOWN **a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48)
{
}

{
  sub_1000D92F4( a1,  a2,  a3,  a4,  (uint64_t)&qword_1001347C8,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  a41,  a42,  a43,  a44,  a45,  a46,  a47,  a48);
}

void ! prefix(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

{
  sub_1000D8A64(a1, a2, a3, &qword_1001347C8);
}

void sub_1000D8A64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
}

uint64_t sub_1000D8AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000D8B10(a1, a2, a3, a4, a5, (uint64_t *)&unk_1001323C0);
}

uint64_t sub_1000D8AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000D8B10(a1, a2, a3, a4, a5, &qword_100131138);
}

uint64_t sub_1000D8AF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000D8B10(a1, a2, a3, a4, a5, &qword_1001347C0);
}

uint64_t sub_1000D8B04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000D8B10(a1, a2, a3, a4, a5, &qword_1001347C8);
}

uint64_t sub_1000D8B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v19 = sub_1000D95B8(a1, a2, a3, a4, a5, a6);
  uint64_t v20 = &protocol witness table for Expression<A>;
  uint64_t v16 = a1;
  uint64_t v17 = (void *)a2;
  uint64_t v18 = a3;
  sub_1000119E4();
  sub_10001BEF8();
  sub_10000AFB0();
  v10._uint64_t countAndFlagsBits = 40LL;
  v10._object = (void *)0xE100000000000000LL;
  String.append(_:)(v10);
  sub_100008D74(&v16, v19);
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  sub_1000119E4();
  v13._uint64_t countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  sub_10001BC70();
  v14._uint64_t countAndFlagsBits = 41LL;
  v14._object = (void *)0xE100000000000000LL;
  String.append(_:)(v14);
  sub_10000AFB0();
  sub_10000AC58(&v16);
  return a4;
}

uint64_t sub_1000D8BEC(void *a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t sub_1000D8C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  return sub_1000D8B10(v6, v7, v8, 0LL, 0xE000000000000000LL, a6);
}

uint64_t sub_1000D8C28(void *a1)
{
  return v1;
}

uint64_t sub_1000D8C44()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000D8C58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  return sub_1000D8B10(a1, a2, a3, 0LL, 0xE000000000000000LL, a6);
}

  ;
}

uint64_t sub_1000D8C6C(void *a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t sub_1000D8C90(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return sub_100008F24(v2 - 128, (uint64_t)&a1[2]);
}

  ;
}

  ;
}

uint64_t sub_1000D8CD4(void *a1)
{
  return sub_1000D8B10(v2, v3, v4, 0LL, 0xE000000000000000LL, v1);
}

uint64_t sub_1000D8CFC(void *a1)
{
  return v1;
}

void sub_1000D8D18(uint64_t *a1@<X8>)
{
}

uint64_t sub_1000D8D28(uint64_t a1, ...)
{
  return sub_10000AC58((uint64_t *)va);
}

  ;
}

void *sub_1000D8D54( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18 = *(void *)(a6 + 8);
  a17 = a5;
  a18 = v18;
  return sub_10001AFA8(&a14);
}

uint64_t sub_1000D8D78(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return sub_100008F24(v2 - 120, (uint64_t)&a1[2]);
}

uint64_t sub_1000D8D88(uint64_t a1, ...)
{
  return sub_10000AC58((uint64_t *)va);
}

  ;
}

uint64_t sub_1000D8DB8()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

void *sub_1000D8DE8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  a11 = a1;
  a12 = a2;
  a8 = v16;
  a9 = v15;
  a10 = v14;
  uint64_t v17 = *(void *)(v12 + 8);
  a6 = v13;
  a7 = v17;
  return sub_10001AFA8(&a3);
}

uint64_t sub_1000D8E04(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return sub_100008F24(v2 - 104, (uint64_t)&a1[2]);
}

  ;
}

uint64_t sub_1000D8E20@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_1000D8E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  return swift_initStackObject(a1, va);
}

uint64_t sub_1000D8E30( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  return sub_1000D4DE0((uint64_t)&a14, (uint64_t)&a9, 1, v15, v14);
}

uint64_t sub_1000D8E48( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  return sub_1000D4DE0((uint64_t)&a14, (uint64_t)&a9, 1, v14, v15);
}

uint64_t sub_1000D8E60@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v5 - 96) = result;
  *(void *)(v5 - 88) = a2;
  *(void *)(v5 - 120) = v4;
  *(void *)(v5 - 11sub_100096760(v0[56], v0 + 2) = v3;
  *(void *)(v5 - 104) = v2;
  return result;
}

uint64_t sub_1000D8E7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return type metadata accessor for Optional(255LL, a7);
}

  ;
}

uint64_t sub_1000D8EA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return type metadata accessor for Expression(0LL, a7, a3, a4);
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000D8F74@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return sub_1000D832C(a1, a2, a3, a4, a5, a6, a7, a8, a9, v9 & 0xFFFF00000000FFFFLL | 0x3F203D0000LL, v10);
}

uint64_t sub_1000D8F88(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL))(a1, v2, v1);
}

  ;
}

uint64_t sub_1000D8FB8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10000AC58(&a9);
}

uint64_t sub_1000D8FCC()
{
  return sub_100058868();
}

uint64_t sub_1000D8FD4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
  return sub_100008F24((uint64_t)&a29, v29 + 72);
}

uint64_t sub_1000D8FE0()
{
  return swift_setDeallocating(v0);
}

uint64_t sub_1000D8FE8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL))(a1, v2, v1);
}

uint64_t sub_1000D8FFC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  return a7(a1, a2, a3, a4);
}

  ;
}

uint64_t sub_1000D9044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return type metadata accessor for Expression(0LL, a5, a3, a4);
}

void *sub_1000D9070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(a6 + 8);
  *(void *)(v6 - 80) = a5;
  *(void *)(v6 - 7sub_100096760(v0[56], v0 + 2) = v7;
  return sub_10001AFA8((void *)(v6 - 104));
}

uint64_t sub_1000D909C()
{
  return sub_100058868();
}

uint64_t sub_1000D90A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (*a12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  return a12(a10, v14, v12, a1, a2, a3, v13);
}

uint64_t sub_1000D90D0()
{
  return swift_setDeallocating(v0);
}

uint64_t sub_1000D90D8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return sub_1000D832C(a1, a2, a3, a4, a5, a6, a7, a8, a9, v9, v10);
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000D9154(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL))(a1, v2, v1);
}

uint64_t sub_1000D9168()
{
  return sub_10000AC58((void *)(v0 + 160));
}

uint64_t sub_1000D917C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return type metadata accessor for Optional(255LL, a5);
}

uint64_t sub_1000D91A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return type metadata accessor for Expression(0LL, a5, a3, a4);
}

uint64_t sub_1000D91C4()
{
  return sub_100008F24(v1 - 144, v0 + 72);
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000D9270( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  return a11(v16, v15, v14, v13, v12, v11);
}

void sub_1000D9290( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, void *a32, _UNKNOWN **a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, _UNKNOWN **a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48)
{
}

void sub_1000D92A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, _UNKNOWN **a33, uint64_t a34, uint64_t a35, uint64_t a36, void *a37, _UNKNOWN **a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48)
{
}

void _s17AppIntents_SQLite3andyAA10ExpressionVySbGSayAEGF_0(uint64_t a1)
{
}

uint64_t sub_1000D92CC()
{
  return sub_10000AC58((void *)(v0 + 160));
}

uint64_t sub_1000D92D4(uint64_t a1, uint64_t a2)
{
  return sub_100008F24(v2 - 168, a2);
}

uint64_t sub_1000D92DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return type metadata accessor for Optional(a1, a5);
}

void sub_1000D92E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, void *a32, _UNKNOWN **a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, _UNKNOWN **a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48)
{
}

void sub_1000D92F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, _UNKNOWN **a33, uint64_t a34, uint64_t a35, uint64_t a36, void *a37, _UNKNOWN **a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48)
{
}

void _s17AppIntents_SQLite2oryAA10ExpressionVySbGSayAEGF_0(uint64_t a1)
{
}

void *sub_1000D9314@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
  *(void *)(v32 - 96) = a1;
  *(void *)(v32 - 88) = a2;
  *(void *)(v32 - 120) = v31;
  *(void *)(v32 - 11sub_100096760(v0[56], v0 + 2) = v29;
  *(void *)(v32 - 104) = v28;
  uint64_t v33 = *(void *)(v27 + 8);
  a26 = v30;
  a27 = v33;
  return sub_10001AFA8(&a23);
}

  ;
}

uint64_t sub_1000D934C()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[24];
  sub_100008D74(v0 + 20, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t sub_1000D9378( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28)
{
  return sub_100008F24((uint64_t)&a28, v28 + 72);
}

uint64_t sub_1000D9384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for Expression(0LL, a4, a3, a4);
}

  ;
}

void sub_1000D93C4(uint64_t a1, ...)
{
}

uint64_t sub_1000D93DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  return sub_1000D4DE0((uint64_t)&a14, (uint64_t)&a9, 1, v14, v15);
}

uint64_t sub_1000D93F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  return sub_1000D4DE0((uint64_t)&a14, (uint64_t)&a9, 1, v14, v15);
}

uint64_t sub_1000D940C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  return sub_1000D4DE0((uint64_t)&a14, (uint64_t)&a9, 1, v14, v15);
}

uint64_t sub_1000D9424( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  return sub_1000D4DE0((uint64_t)&a14, (uint64_t)&a9, 1, v14, v15);
}

  ;
}

uint64_t sub_1000D9448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for Optional(255LL, a4);
}

  ;
}

uint64_t _s17AppIntents_SQLite2teoiyAA10ExpressionVySbSgGSnyxG_ADyxSgGtAA5ValueRzSLRzAaJ8DatatypeAaJPRpzSLAMRQlF_0( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000D80E4(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t _s17AppIntents_SQLite2teoiyAA10ExpressionVySbSgGSNyxG_ADyxSgGtAA5ValueRzSLRzAaJ8DatatypeAaJPRpzSLAMRQlF_0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000D7F70(a1, a2, a3, a4, a5, a6, a7);
}

  ;
}

void sub_1000D9498(uint64_t a1, ...)
{
}

void sub_1000D94AC(uint64_t a1, ...)
{
}

  ;
}

uint64_t sub_1000D94DC()
{
  return sub_1000D5F9C();
}

uint64_t sub_1000D94E4()
{
  return sub_1000D5E2C();
}

uint64_t sub_1000D94EC()
{
  return sub_1000D5EE4();
}

uint64_t sub_1000D94F4()
{
  return sub_1000D5D80();
}

uint64_t sub_1000D94FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  return swift_initStackObject(a1, va);
}

uint64_t sub_1000D9504(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL))(a1, v2, v1);
}

void sub_1000D9518()
{
  *(void *)(v0 - 104) = 0LL;
  *(void *)(v0 - 96) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(18LL);
}

void sub_1000D952C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_1000D9534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000D5168(a1, a2, a3, a4, a5, a6, a7, 0x20444E4120LL);
}

  ;
}

  ;
}

uint64_t sub_1000D9570(uint64_t a1)
{
  return swift_arrayInitWithCopy(a1);
}

uint64_t sub_1000D9578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return v3(a1, a2, a3, v4);
}

uint64_t sub_1000D9588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for Expression(0LL, a1, a3, a4);
}

uint64_t sub_1000D9598(uint64_t a1)
{
  return swift_initStackObject(a1, v1 + 48);
}

uint64_t sub_1000D95A0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v5 - 120) = result;
  *(void *)(v5 - 11sub_100096760(v0[56], v0 + 2) = a2;
  *(void *)(v5 - 144) = v4;
  *(void *)(v5 - sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = v3;
  *(void *)(v5 - 128) = v2;
  return result;
}

uint64_t sub_1000D95B0(uint64_t a1)
{
  return swift_initStackObject(a1, v1 + 200);
}

uint64_t sub_1000D95B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  return sub_100008DB0(a6);
}

uint64_t sub_1000D95C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000D5168(a1, a2, a3, a4, a5, a6, a7, 542265120LL);
}

void *sub_1000D95CC()
{
  return sub_10001AFA8(v0);
}

  ;
}

void sub_1000D95E0()
{
  uint64_t v2 = v0[4];
  *(void *)(v1 - 168) = v0[3];
  *(void *)(v1 - 160) = v2;
  *(void *)(v1 - 15sub_100096760(v0[56], v0 + 2) = v0[5];
}

  ;
}

uint64_t sub_1000D9600()
{
  return v2(v1, v0);
}

uint64_t sub_1000D960C()
{
  return sub_100008F24(v1 - 144, v0 + 72);
}

uint64_t sub_1000D9618( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
  return sub_100008F24((uint64_t)&a29, v29 + 72);
}

void sub_1000D9624()
{
}

uint64_t sub_1000D9630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  return sub_100008DB0(a7);
}

void sub_1000D9638(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
}

  ;
}

void *sub_1000D9658()
{
  return sub_100008D74((void *)(v0 + 160), v1);
}

void sub_1000D9664()
{
  uint64_t v2 = v0[2];
  *(void *)(v1 - 168) = v0[1];
  *(void *)(v1 - 160) = v2;
  *(void *)(v1 - 15sub_100096760(v0[56], v0 + 2) = v0[3];
}

uint64_t sub_1000D9678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000D5168(a1, a2, a3, a4, a5, a6, a7, 545029152LL);
}

  ;
}

  ;
}

void sub_1000D96A4()
{
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  char v6 = v5;
  uint64_t v26 = v7;
  uint64_t v8 = *(void *)(v3 - 8);
  __chkstk_darwin(v5);
  sub_1000E364C();
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v9 + 16))(v28, v10, v9);
  uint64_t v11 = v28[4];
  uint64_t v12 = v28[5];
  sub_10001BCF8();
  sub_1000E25E4(v28);
  if (v12)
  {
    if ((v6 & 1) != 0)
    {
      uint64_t v13 = sub_100008DB0(&qword_100131160);
      uint64_t inited = swift_initStackObject(v13, &v27);
      *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57E0;
      uint64_t v15 = v11;
      sub_1000E38B8();
      uint64_t v16 = v31;
      uint64_t v17 = v32;
      sub_10001BEF8();
      sub_1000E25E4(v30);
      sub_1000E39B8(v16, v17, (uint64_t *)(inited + 32));
      sub_100011958();
      uint64_t v18 = sub_100008DB0(&qword_100134618);
      *(void *)(inited + 104) = &protocol witness table for Expression<A>;
      *(void *)(inited + 7sub_100096760(v0[56], v0 + 2) = 21313LL;
      *(void *)(inited + 80) = 0xE200000000000000LL;
      *(void *)(inited + 88) = _swiftEmptyArrayStorage;
      *(void *)(inited + 96) = v18;
      *(void *)(inited + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = v18;
      *(void *)(inited + 144) = &protocol witness table for Expression<A>;
      uint64_t v19 = sub_1000D351C();
      uint64_t v21 = sub_1000E3C2C(v19, v20, v15);
      uint64_t v23 = v22;
      sub_10001BEC0();
      *(void *)(inited + 11sub_100096760(v0[56], v0 + 2) = v21;
      *(void *)(inited + 120) = v23;
      *(void *)(inited + 128) = _swiftEmptyArrayStorage;
      sub_1000D2E38(inited, v26);
      swift_setDeallocating(inited);
      sub_100058868();
      goto LABEL_9;
    }

    sub_10001BEC0();
  }

  sub_1000E38B8();
  uint64_t v24 = v29[4];
  uint64_t v25 = v29[5];
  sub_10001BCF8();
  sub_1000E25E4(v29);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v1, v2, v4);
  if (v25)
  {
    sub_1000E398C();
  }

  else
  {
    sub_1000E38B8();
    sub_1000E398C();
    uint64_t v24 = v31;
    uint64_t v25 = v32;
    sub_10001BCF8();
    sub_1000E25E4(v30);
  }

  sub_1000E39B8(v24, v25, v26);
  sub_10001BEC0();
LABEL_9:
  sub_10000AD58();
}

const char *Table.identifier.unsafeMutableAddressor()
{
  return "TABLE";
}

void sub_1000D9878()
{
  uint64_t v20 = v2;
  uint64_t v21 = v3;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v4 - 8);
  __chkstk_darwin(v9);
  sub_1000B7888();
  if ((v10 & 1) != 0)
  {
    sub_100026F84();
    sub_1000D96A4();
  }

  else
  {
    sub_1000E3BAC();
    uint64_t v11 = v18[4];
    uint64_t v12 = v18[5];
    sub_10001BCF8();
    sub_1000E25E4(v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v1, v0, v5);
    if (v12)
    {
      sub_1000E394C();
    }

    else
    {
      sub_1000E3BAC();
      sub_1000E394C();
      uint64_t v11 = v19[2];
      sub_10001BCF8();
      sub_1000E25E4(v19);
    }

    void v7[3] = sub_100008DB0(&qword_100134618);
    v7[4] = (uint64_t)&protocol witness table for Expression<A>;
    uint64_t v13 = sub_1000D351C();
    uint64_t v15 = sub_1000E3C2C(v13, v14, v11);
    uint64_t v17 = v16;
    sub_10001BEC0();
    *uint64_t v7 = v15;
    v7[1] = v17;
    v7[2] = (uint64_t)_swiftEmptyArrayStorage;
    sub_10000AD58();
  }

void *sub_1000D99A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000452D4();
    uint64_t v3 = (uint64_t *)(a1 + 56);
    do
    {
      uint64_t v4 = *(v3 - 3);
      uint64_t v5 = *(v3 - 2);
      uint64_t v6 = *(v3 - 1);
      uint64_t v7 = *v3;
      swift_bridgeObjectRetain();
      uint64_t v8 = static String._fromSubstring(_:)(v4, v5, v6, v7);
      uint64_t v10 = v9;
      swift_bridgeObjectRelease(v7);
      unint64_t v11 = _swiftEmptyArrayStorage[2];
      if (v11 >= _swiftEmptyArrayStorage[3] >> 1) {
        sub_1000452D4();
      }
      _swiftEmptyArrayStorage[2] = v11 + 1;
      uint64_t v12 = &_swiftEmptyArrayStorage[2 * v11];
      v12[4] = v8;
      v12[5] = v10;
      v3 += 4;
      --v1;
    }

    while (v1);
  }

  return _swiftEmptyArrayStorage;
}

void *sub_1000D9AA0(void (*a1)(void *__return_ptr, void *, __n128), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
    sub_1000452D4();
    uint64_t v6 = _swiftEmptyArrayStorage;
    uint64_t v8 = (uint64_t *)(a3 + 40);
    while (1)
    {
      uint64_t v9 = *v8;
      v17[0] = *(v8 - 1);
      v17[1] = v9;
      __n128 v10 = swift_bridgeObjectRetain();
      a1(v18, v17, v10);
      if (v4) {
        break;
      }
      uint64_t v4 = 0LL;
      swift_bridgeObjectRelease(v9);
      uint64_t v12 = v18[0];
      uint64_t v11 = v18[1];
      uint64_t v19 = v6;
      unint64_t v13 = v6[2];
      if (v13 >= v6[3] >> 1)
      {
        sub_1000452D4();
        uint64_t v6 = v19;
      }

      v8 += 2;
      v6[2] = v13 + 1;
      uint64_t v14 = &v6[2 * v13];
      v14[4] = v12;
      v14[5] = v11;
      if (!--v5) {
        return v6;
      }
    }

    swift_release(v6);
    swift_bridgeObjectRelease(v9);
  }

  return v6;
}

uint64_t sub_1000D9BC0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v8 = a2;
  uint64_t v9 = a1;
  uint64_t v10 = HIBYTE(a4) & 0xF;
  uint64_t v24 = a3;
  unint64_t v25 = a4;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v26 = 0LL;
  uint64_t v27 = v10;
  sub_1000C6AEC(a1, a2);
  sub_10001BEF8();
  Swift::String_optional v11 = String.Iterator.next()();
  if (v11.value._object)
  {
    uint64_t countAndFlagsBits = v11.value._countAndFlagsBits;
    object = v11.value._object;
    do
    {
      BOOL v14 = countAndFlagsBits == a5 && object == (void *)a6;
      if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, a5, a6, 0LL) & 1) != 0)
      {
        uint64_t v22 = 0LL;
        unint64_t v23 = 0xE000000000000000LL;
        sub_1000E3AE0((uint64_t)&v22, a5, a6);
        uint64_t v15 = a5;
        uint64_t v16 = a6;
      }

      else
      {
        uint64_t v22 = 0LL;
        unint64_t v23 = 0xE000000000000000LL;
        uint64_t v15 = countAndFlagsBits;
        uint64_t v16 = (uint64_t)object;
      }

      sub_1000E3AE0((uint64_t)&v22, v15, v16);
      uint64_t v18 = v22;
      uint64_t v17 = (void *)v23;
      uint64_t v22 = v9;
      unint64_t v23 = v8;
      sub_10001C064();
      v19._uint64_t countAndFlagsBits = v18;
      v19._object = v17;
      String.append(_:)(v19);
      sub_10001BE7C();
      sub_10001DED8();
      sub_10001198C();
      uint64_t v9 = v22;
      unint64_t v8 = v23;
      Swift::String_optional v20 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v20.value._countAndFlagsBits;
      object = v20.value._object;
    }

    while (v20.value._object);
  }

  sub_10001BC70();
  sub_10001198C();
  return v9;
}

uint64_t sub_1000D9D14@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9 = sub_1000D351C();
  uint64_t v11 = sub_1000E3C2C(v9, v10, a1);
  uint64_t v13 = v12;
  sub_10001BEC0();
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a4 + 16))(v26, a3, a4);
  uint64_t v15 = v26[6];
  unint64_t v14 = v26[7];
  sub_10000AE38();
  sub_1000E25E4(v26);
  if (v14)
  {
    uint64_t v16 = sub_100008DB0(&qword_100131160);
    uint64_t inited = swift_initStackObject(v16, v25);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
    uint64_t v18 = sub_100008DB0(&qword_100134618);
    *(void *)(inited + 56) = v18;
    *(void *)(inited + 64) = &protocol witness table for Expression<A>;
    uint64_t v19 = sub_1000D351C();
    uint64_t v21 = sub_1000D4294(v19, v20, v15, v14);
    uint64_t v23 = v22;
    sub_10000ADB0();
    *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = v21;
    *(void *)(inited + 40) = v23;
    *(void *)(inited + 48) = _swiftEmptyArrayStorage;
    *(void *)(inited + 96) = v18;
    *(void *)(inited + 104) = &protocol witness table for Expression<A>;
    *(void *)(inited + 7sub_100096760(v0[56], v0 + 2) = v11;
    *(void *)(inited + 80) = v13;
    *(void *)(inited + 88) = _swiftEmptyArrayStorage;
    sub_1000D2E44(inited, 46LL, a5);
    sub_1000E3C3C();
    return sub_1000E3A34();
  }

  else
  {
    uint64_t result = sub_100008DB0(&qword_100134618);
    a5[4] = (uint64_t)&protocol witness table for Expression<A>;
    *a5 = v11;
    a5[1] = v13;
    a5[2] = (uint64_t)_swiftEmptyArrayStorage;
    a5[3] = result;
  }

  return result;
}

const char *View.identifier.unsafeMutableAddressor()
{
  return "VIEW";
}

const char *VirtualTable.identifier.unsafeMutableAddressor()
{
  return "VIRTUAL TABLE";
}

uint64_t sub_1000D9E80@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    && infix(_:_:)(a4, a5, a6, a1, a2, a3);
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    uint64_t v19 = v18;
    a7[3] = sub_100008DB0(&qword_1001347C8);
    a7[4] = &protocol witness table for Expression<A>;
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a2);
    *a7 = v15;
    a7[1] = v17;
    a7[2] = v19;
  }

  else
  {
    a7[4] = 0LL;
    *(_OWORD *)a7 = 0u;
    *((_OWORD *)a7 + 1) = 0u;
  }

  swift_bridgeObjectRelease(a6);
  return swift_bridgeObjectRelease(a5);
}

uint64_t sub_1000D9F68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    && infix(_:_:)(a1, a2, a3, a4, a5, a6);
    a1 = v12;
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a2);
  }

  swift_bridgeObjectRelease(a6);
  swift_bridgeObjectRelease(a5);
  return a1;
}

uint64_t SchemaType.select(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000DA184(a1, a2, a3, a4, 0);
}

uint64_t sub_1000DA034(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_BYTE *, uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t (*v16)(_BYTE *, void);
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _BYTE v23[32];
  void v24[21];
  void v25[21];
  void v26[22];
  uint64_t v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(a5 + 16);
  v10(v24, a3, a5);
  uint64_t v11 = v24[3];
  uint64_t v20 = v24[2];
  swift_bridgeObjectRetain();
  sub_1000E25E4(v24);
  v10(v25, a3, a5);
  uint64_t v13 = v25[6];
  uint64_t v12 = v25[7];
  swift_bridgeObjectRetain();
  sub_1000E25E4(v25);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 40))(v20, v11, v13, v12, a4, a6);
  v10(v26, a3, a5);
  (*(void (**)(void *, uint64_t, uint64_t))(a6 + 24))(v26, a4, a6);
  uint64_t v14 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t, __n128))(a6 + 32);
  uint64_t v15 = swift_bridgeObjectRetain();
  uint64_t v16 = (uint64_t (*)(_BYTE *, void))v14(v23, a4, a6, v15);
  *(_BYTE *)uint64_t v17 = a1;
  uint64_t v18 = *(void *)(v17 + 8);
  *(void *)(v17 + 8) = a2;
  swift_bridgeObjectRelease(v18);
  return v16(v23, 0LL);
}

uint64_t SchemaType.select(distinct:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000DA184(a1, a2, a3, a4, 1);
}

uint64_t sub_1000DA184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = sub_100008DB0(&qword_100131160);
  uint64_t v11 = sub_1000E3514(v10);
  *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5520;
  sub_10001AFE4(a1, v11 + 32);
  sub_10001BD0C();
  sub_1000D4C34(a2);
  sub_1000DA034(a5, v11, a3, a3, *(void *)(a4 + 8), *(void *)(a4 + 8));
  return swift_bridgeObjectRelease(v11);
}

uint64_t SchemaType.select(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E3824(0, a1, a3, a2, *(void *)(a3 + 8));
}

uint64_t SchemaType.select(distinct:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E3824(1, a1, a3, a2, *(void *)(a3 + 8));
}

uint64_t SchemaType.select(_:)()
{
  return sub_1000DA284();
}

uint64_t SchemaType.select(distinct:)()
{
  return sub_1000DA284();
}

uint64_t sub_1000DA284()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = sub_100008DB0(&qword_100131160);
  uint64_t v9 = sub_1000E3514(v8);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5520;
  uint64_t v10 = sub_1000E38C4();
  uint64_t v11 = v7(v10);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  *(void *)(v9 + 56) = sub_100008DB0(&qword_100134618);
  *(void *)(v9 + 64) = &protocol witness table for Expression<A>;
  *(void *)(v9 + 3sub_100096760(v0[56], v0 + 2) = v11;
  *(void *)(v9 + 40) = v13;
  *(void *)(v9 + 48) = v15;
  v1(v9, v5, v3);
  return sub_1000E34A0(v9);
}

void SchemaType.select<A>(_:)()
{
}

{
  sub_1000DA3D8();
}

uint64_t type metadata accessor for ScalarQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000C8B4(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScalarQuery);
}

void SchemaType.select<A>(distinct:)()
{
}

{
  sub_1000DA3D8();
}

void sub_1000DA350()
{
  uint64_t v1 = sub_100008DB0(&qword_100131160);
  uint64_t v2 = sub_1000E3514(v1);
  *(_OWORD *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5520;
  uint64_t v6 = sub_1000D2CDC(v2, v3, v4, v5);
  sub_1000E35FC(v6, v7, v8, (uint64_t)&protocol witness table for Expression<A>);
  uint64_t v9 = sub_10001BCF8();
  sub_1000E36EC(v9, v10, v11, v12, v13, (uint64_t)&protocol witness table for ScalarQuery<A>);
  swift_bridgeObjectRelease();
  sub_10001DEBC(v0, &v14);
  sub_1000E36D0();
}

void sub_1000DA3D8()
{
  uint64_t v2 = sub_100008DB0(&qword_100131160);
  *(_OWORD *)(sub_1000E3514(v2) + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5520;
  uint64_t v3 = type metadata accessor for Optional(255LL, v1);
  uint64_t v7 = sub_1000D2CDC(v3, v4, v5, v6);
  sub_1000E35FC(v7, v8, v9, (uint64_t)&protocol witness table for Expression<A>);
  uint64_t v10 = sub_10001BCF8();
  sub_1000E36EC(v10, v11, v12, v13, v14, (uint64_t)&protocol witness table for ScalarQuery<A>);
  swift_bridgeObjectRelease();
  sub_10001DEBC(v0, &v15);
  sub_1000E36D0();
}

void *SchemaType.count.getter@<X0>(void *a1@<X8>)
{
  return sub_10001DEBC(a1, v3);
}

void QueryType.union(_:)(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_1000E355C(a1, a2);
  uint64_t v11 = sub_1000E3AEC(v3, v4, v5, v6, v7, v8, v9, v10, v17[0]);
  v12(v11);
  uint64_t v14 = v13;
  sub_1000D1D10();
  uint64_t v15 = *(void *)(*(void *)(v14 + 160) + 16LL);
  sub_1000D1DF0(v15);
  uint64_t v16 = *(void *)(v14 + 160);
  *(void *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = v15 + 1;
  sub_10001AFE4(v2, v16 + 40 * v15 + 32);
  sub_1000E3944((uint64_t)v17);
  sub_1000E38A4();
}

uint64_t QueryType.join(_:on:)()
{
  uint64_t v4 = (void *)sub_1000E3788();
  QueryType.join(_:on:)(v4, v5, v6, v7, v8, v9, v10);
  sub_10001BC70();
  return sub_1000E34B8(v0);
}

void QueryType.join(_:on:)( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
}

void QueryType.join(_:_:on:)( char a1@<W0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v15 = a2[3];
  uint64_t v14 = a2[4];
  sub_100008D74(a2, v15);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v14 + 16))(v38, v15, v14);
  uint64_t v16 = sub_1000E39C8();
  sub_10001DA7C(v16, v17, v18);
  sub_1000E25E4(v38);
  sub_10001C1BC();
  sub_10001BCF8();
  uint64_t v19 = sub_1000E39C8();
  sub_1000D9E80(v19, v20, v21, a3, a4, a5, v22);
  uint64_t v23 = sub_1000E39C8();
  sub_10001DBBC(v23, v24, v25);
  if (*(void *)&__src[24])
  {
    sub_100009EEC((__int128 *)__src, (uint64_t)&v33);
  }

  else
  {
    uint64_t v35 = sub_100008DB0(&qword_1001347C8);
    uint64_t v36 = &protocol witness table for Expression<A>;
    *(void *)&__int128 v33 = a3;
    *((void *)&v33 + 1) = a4;
    uint64_t v34 = a5;
    sub_10001C1BC();
    sub_10001BCF8();
    sub_10001B60C((uint64_t)__src, &qword_1001347B0);
  }

  __src[0] = a1;
  sub_100009EEC(v37, (uint64_t)&__src[8]);
  sub_100009EEC(&v33, (uint64_t)&__src[48]);
  sub_1000E3BF0((uint64_t)v31, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a7 + 32));
  uint64_t v27 = v26;
  sub_1000D1D7C();
  uint64_t v28 = *(void *)(*(void *)(v27 + 64) + 16LL);
  sub_1000D1E44(v28);
  uint64_t v29 = *(void *)(v27 + 64);
  *(void *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = v28 + 1;
  memcpy((void *)(v29 + 88 * v28 + 32), __src, 0x58uLL);
  sub_1000E3944((uint64_t)v31);
  sub_1000E3664();
}

uint64_t QueryType.join(_:_:on:)()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  char v13 = v12;
  uint64_t v15 = v14;
  swift_bridgeObjectRetain();
  sub_1000119E4();
  QueryType.join(_:_:on:)(v13, v11, v9, v7, v5, v3, v1, v15);
  sub_10001BC70();
  return sub_1000E34A0(v7);
}

uint64_t QueryType.filter(_:)()
{
  return sub_1000E34B8(v0);
}

uint64_t QueryType.filter(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a5 + 16))(v34, a4, a5);
  uint64_t v12 = sub_1000E38F0();
  sub_10001DA7C(v12, v13, v14);
  sub_1000E25E4(v34);
  sub_10001BCF8();
  sub_10001BEF8();
  uint64_t v15 = sub_1000E38F0();
  uint64_t v31 = a1;
  uint64_t v32 = a3;
  uint64_t v18 = sub_1000D9F68(v15, v16, v17, a1, a2, a3);
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v23 = sub_1000E38F0();
  sub_10001DBBC(v23, v24, v25);
  if (!v20)
  {
    sub_10001BCF8();
    uint64_t v22 = v32;
    sub_10001C1BC();
    uint64_t v20 = a2;
    uint64_t v18 = v31;
  }

  sub_1000E3BF0((uint64_t)v33, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 32));
  uint64_t v27 = v26[9];
  uint64_t v28 = v26[10];
  uint64_t v29 = v26[11];
  v26[9] = v18;
  v26[10] = v20;
  v26[11] = v22;
  sub_10001DBBC(v27, v28, v29);
  return sub_1000E3944((uint64_t)v33);
}

uint64_t QueryType.group(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return _s17AppIntents_SQLite9QueryTypePAAE5group_6havingxSayAA11Expressible_pG_AA10ExpressionVySbSgGtF_0( a1,  0LL,  0LL,  0LL,  a2,  a3,  a4);
}

uint64_t _s17AppIntents_SQLite9QueryTypePAAE5group_6havingxSayAA11Expressible_pG_AA10ExpressionVySbSgGtF_0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(a6 + 32);
  swift_bridgeObjectRetain();
  sub_10001DA7C(a2, a3, a4);
  uint64_t v15 = (uint64_t (*)(_BYTE *, void))v14(v22, a5, a6);
  uint64_t v17 = v16[12];
  uint64_t v18 = v16[13];
  uint64_t v19 = v16[14];
  uint64_t v20 = v16[15];
  v16[12] = a1;
  v16[13] = a2;
  v16[14] = a3;
  v16[15] = a4;
  sub_10001DBEC(v17, v18, v19, v20);
  return v15(v22, 0LL);
}

uint64_t QueryType.group(_:having:)()
{
  uint64_t v0 = sub_100008DB0(&qword_100131160);
  uint64_t v1 = (__n128 *)sub_1000E3514(v0);
  sub_1000E39E8(v1, (__n128)xmmword_1000F5520);
  sub_1000E3768();
  QueryType.group(_:having:)();
  return sub_1000E34A0((uint64_t)v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  sub_10004730C();
  sub_1000E35B8(v1, v2, v3);
  sub_1000119E4();
  uint64_t v4 = sub_1000E3788();
  _s17AppIntents_SQLite9QueryTypePAAE5group_6havingxSayAA11Expressible_pG_AA10ExpressionVySbSgGtF_0( v4,  v5,  v6,  v7,  v8,  v9,  v10);
  sub_10001BC70();
  return sub_1000E34B8(v0);
}

{
  uint64_t v0;
  __n128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  sub_10000AE58();
  sub_1000E37A8();
  uint64_t v0 = sub_100008DB0(&qword_100131160);
  uint64_t v1 = (__n128 *)sub_1000E3514(v0);
  sub_1000E39E8(v1, (__n128)xmmword_1000F5520);
  uint64_t v2 = sub_1000E3768();
  _s17AppIntents_SQLite9QueryTypePAAE5group_6havingxSayAA11Expressible_pG_AA10ExpressionVySbSgGtF_0( v2,  v3,  v4,  v5,  v6,  v7,  v8);
  return sub_1000E34A0((uint64_t)v1);
}

void QueryType.order(_:)(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void (**)(uint64_t *))(v2 + 32);
  uint64_t v5 = sub_1000119E4();
  uint64_t v13 = sub_1000E3AEC(v5, v6, v7, v8, v9, v10, v11, v12, v15[0]);
  v4(v13);
  *(void *)(v14 + 128) = v3;
  swift_bridgeObjectRelease();
  sub_1000E3944((uint64_t)v15);
  sub_1000E38A4();
}

uint64_t QueryType.limit(_:)@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_1000DAB6C(a1, a2 & 1, 0LL, 1, a3, a4, a5);
}

uint64_t sub_1000DAB6C@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v14 = a4 & 1;
  char v16 = a2 & 1;
  BOOL v15 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v17 = 0LL;
  }
  else {
    uint64_t v17 = a1;
  }
  if (v15)
  {
    char v18 = v14;
  }

  else
  {
    a3 = 0LL;
    char v18 = 0;
  }

  uint64_t v19 = (uint64_t (*)(_BYTE *, void))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(a6 + 32))( v22,  a5,  a6);
  *(void *)(v20 + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = v17;
  *(void *)(v20 + 144) = a3;
  *(_BYTE *)(v20 + 15sub_100096760(v0[56], v0 + 2) = v18;
  *(_BYTE *)(v20 + 153) = v16;
  return v19(v22, 0LL);
}

uint64_t QueryType.limit(_:offset:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_1000DAB6C(a1, 0, a2, 0, a3, a4, a5);
}

uint64_t sub_1000DAC38()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = sub_100008DB0(&qword_100131160);
  uint64_t v13 = sub_1000E37E8(v5, v6, v7, v8, v9, v10, v11, v12, v19);
  *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5FF0;
  if ((*v0 & 1) != 0) {
    uint64_t v14 = 0x44205443454C4553LL;
  }
  else {
    uint64_t v14 = 0x5443454C4553LL;
  }
  if ((*v0 & 1) != 0) {
    unint64_t v15 = 0xEF54434E49545349LL;
  }
  else {
    unint64_t v15 = 0xE600000000000000LL;
  }
  uint64_t v16 = sub_100008DB0(&qword_100134618);
  *(void *)(v13 + 64) = &protocol witness table for Expression<A>;
  *(void *)(v13 + 3sub_100096760(v0[56], v0 + 2) = v14;
  *(void *)(v13 + 40) = v15;
  *(void *)(v13 + 48) = _swiftEmptyArrayStorage;
  *(void *)(v13 + 56) = v16;
  uint64_t v17 = sub_10001C064();
  sub_1000D2EDC(v17, (uint64_t *)(v13 + 72));
  sub_10001BE7C();
  *(void *)(v13 + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = v16;
  *(void *)(v13 + 144) = &protocol witness table for Expression<A>;
  *(void *)(v13 + 11sub_100096760(v0[56], v0 + 2) = 1297044038LL;
  *(void *)(v13 + 120) = 0xE400000000000000LL;
  *(void *)(v13 + 128) = _swiftEmptyArrayStorage;
  v2(1LL);
  sub_1000D2E38(v13, v4);
  sub_1000D90D0();
  return sub_1000D909C();
}

uint64_t sub_1000DAD50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void (*v8)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[192];
  void v15[21];
  void v16[22];
  uint64_t v6 = sub_100008DB0(&qword_100131160);
  uint64_t inited = swift_initStackObject(v6, v14);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5FF0;
  uint64_t v8 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(a2 + 16);
  v8(v15, a1, a2);
  sub_1000E25E4(v15);
  if (LOBYTE(v15[0])) {
    uint64_t v9 = 0x44205443454C4553LL;
  }
  else {
    uint64_t v9 = 0x5443454C4553LL;
  }
  if (LOBYTE(v15[0])) {
    uint64_t v10 = 0xEF54434E49545349LL;
  }
  else {
    uint64_t v10 = 0xE600000000000000LL;
  }
  uint64_t v11 = sub_100008DB0(&qword_100134618);
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = v9;
  *(void *)(inited + 40) = v10;
  *(void *)(inited + 48) = _swiftEmptyArrayStorage;
  *(void *)(inited + 56) = v11;
  v8(v16, a1, a2);
  uint64_t v12 = v16[1];
  swift_bridgeObjectRetain();
  sub_1000E25E4(v16);
  sub_1000D3EA4(v12, 8236LL, 0xE200000000000000LL, (uint64_t *)(inited + 72));
  swift_bridgeObjectRelease();
  *(void *)(inited + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = v11;
  *(void *)(inited + 144) = &protocol witness table for Expression<A>;
  *(void *)(inited + 11sub_100096760(v0[56], v0 + 2) = 1297044038LL;
  *(void *)(inited + 120) = 0xE400000000000000LL;
  *(void *)(inited + 128) = _swiftEmptyArrayStorage;
  sub_1000D96A4();
  sub_1000D3EA4(inited, 32LL, 0xE100000000000000LL, a3);
  swift_setDeallocating(inited);
  return sub_100058868();
}

void sub_1000DAEDC()
{
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v15 = v4;
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v14 = _swiftEmptyArrayStorage;
    sub_10001C064();
    sub_1000E3974();
    uint64_t v6 = _swiftEmptyArrayStorage;
    uint64_t v7 = (unsigned __int8 *)(v4 + 32);
    do
    {
      sub_1000DB244(v7, v13);
      uint64_t v14 = v6;
      unint64_t v9 = v6[2];
      unint64_t v8 = v6[3];
      if (v9 >= v8 >> 1)
      {
        sub_1000760D0(v8);
        sub_1000E3680();
      }

      sub_1000E3B88((uint64_t)v13);
      sub_1000E3964();
      __chkstk_darwin(v10);
      sub_1000B7888();
      sub_10003EE9C(v1, v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16));
      sub_1000E3A3C(v9, v1, (uint64_t *)&v14);
      sub_10000AC58(v13);
      uint64_t v6 = v14;
      v7 += 88;
      --v5;
    }

    while (v5);
    sub_10000A054(&v15);
    sub_1000D2E38((uint64_t)v6, v3);
    swift_release();
  }

  else
  {
    sub_1000E35DC();
  }

  sub_10000AD58();
}

void *sub_1000DAFF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (*v6)(void *__return_ptr);
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  void *v22;
  unsigned __int8 v24[88];
  uint64_t v25[3];
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void v29[8];
  uint64_t v30;
  void v31[8];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v6 = *(void (**)(void *__return_ptr))(a2 + 16);
  v6(v29);
  uint64_t v7 = v30;
  uint64_t v34 = v30;
  swift_bridgeObjectRetain();
  sub_1000E25E4(v29);
  unint64_t v8 = *(void *)(v7 + 16);
  uint64_t result = sub_10000A054(&v34);
  if (v8)
  {
    ((void (*)(void *__return_ptr, uint64_t, uint64_t))v6)(v31, a1, a2);
    uint64_t v10 = v32;
    __int128 v33 = v32;
    swift_bridgeObjectRetain();
    sub_1000E25E4(v31);
    uint64_t v11 = *(void *)(v10 + 16);
    if (v11)
    {
      uint64_t v28 = _swiftEmptyArrayStorage;
      sub_1000D3994();
      uint64_t v12 = v10 + 32;
      do
      {
        sub_100026CB8(v12, (uint64_t)v24, &qword_1001348A0);
        sub_1000DB244(v24, v25);
        sub_10001B60C((uint64_t)v24, &qword_1001348A0);
        uint64_t v13 = v28;
        if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
        {
          sub_1000D3994();
          uint64_t v13 = v28;
        }

        uint64_t v14 = v13[2];
        if (v14 >= v13[3] >> 1) {
          sub_1000D3994();
        }
        uint64_t v15 = v26;
        uint64_t v16 = v27;
        uint64_t v17 = sub_10004BB58((uint64_t)v25, v26);
        char v18 = __chkstk_darwin(v17);
        uint64_t v20 = &v24[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
        (*(void (**)(unsigned __int8 *, double))(v21 + 16))(v20, v18);
        sub_1000E24E0(v14, (uint64_t)v20, (uint64_t *)&v28, v15, v16);
        sub_10000AC58(v25);
        v12 += 88LL;
        --v11;
      }

      while (v11);
      uint64_t v22 = v28;
      sub_10000A054(&v33);
    }

    else
    {
      sub_10000A054(&v33);
      uint64_t v22 = _swiftEmptyArrayStorage;
    }

    sub_1000D3EA4((uint64_t)v22, 32LL, 0xE100000000000000LL, (uint64_t *)a3);
    return (void *)swift_bridgeObjectRelease();
  }

  else
  {
    *(void *)(a3 + 3sub_100096760(v0[56], v0 + 2) = 0LL;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
  }

  return result;
}

uint64_t sub_1000DB244@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X8>)
{
  int v4 = *a1;
  sub_10001AFE4((uint64_t)(a1 + 8), (uint64_t)v19);
  sub_10001AFE4((uint64_t)(a1 + 48), (uint64_t)v20);
  sub_100009EEC(v19, (uint64_t)v22);
  sub_100009EEC(v20, (uint64_t)v21);
  uint64_t v5 = sub_100008DB0(&qword_100131160);
  uint64_t inited = swift_initStackObject(v5, &v17);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5FF0;
  uint64_t v18 = 0LL;
  *(void *)&v19[0] = 0xE000000000000000LL;
  unint64_t v7 = 0xE500000000000000LL;
  uint64_t v8 = 0x52454E4E49LL;
  if (v4 != 1)
  {
    uint64_t v8 = 0x54554F205446454CLL;
    unint64_t v7 = 0xEA00000000005245LL;
  }

  if (v4) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0x53534F5243LL;
  }
  if (v4) {
    unint64_t v10 = v7;
  }
  else {
    unint64_t v10 = 0xE500000000000000LL;
  }
  unint64_t v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 0x4E494F4A20LL;
  v12._object = (void *)0xE500000000000000LL;
  String.append(_:)(v12);
  uint64_t v13 = v18;
  uint64_t v14 = *(void *)&v19[0];
  uint64_t v15 = sub_100008DB0(&qword_100134618);
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = v13;
  *(void *)(inited + 40) = v14;
  *(void *)(inited + 48) = _swiftEmptyArrayStorage;
  *(void *)(inited + 56) = v15;
  sub_100008D74(v22, v22[3]);
  sub_1000D96A4();
  *(void *)(inited + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = v15;
  *(void *)(inited + 144) = &protocol witness table for Expression<A>;
  *(void *)(inited + 11sub_100096760(v0[56], v0 + 2) = 20047LL;
  *(void *)(inited + 120) = 0xE200000000000000LL;
  *(void *)(inited + 128) = _swiftEmptyArrayStorage;
  sub_10001AFE4((uint64_t)v21, inited + 152);
  sub_1000D3EA4(inited, 32LL, 0xE100000000000000LL, a2);
  swift_setDeallocating(inited);
  sub_100058868();
  sub_10000AC58(v21);
  return sub_10000AC58(v22);
}

uint64_t JoinType.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x53534F5243LL;
  }
  if (a1 == 1) {
    return 0x52454E4E49LL;
  }
  return 0x54554F205446454CLL;
}

double sub_1000DB484@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = v1[10];
  if (!v3) {
    return sub_1000E35DC();
  }
  uint64_t v4 = v1[11];
  uint64_t v5 = v1[9];
  uint64_t v6 = sub_100008DB0(&qword_100131160);
  uint64_t v14 = sub_1000E37E8(v6, v7, v8, v9, v10, v11, v12, v13, v17);
  *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
  uint64_t v15 = sub_100008DB0(&qword_100134618);
  *(void *)(v14 + 64) = &protocol witness table for Expression<A>;
  *(void *)(v14 + 3sub_100096760(v0[56], v0 + 2) = 0x4552454857LL;
  *(void *)(v14 + 40) = 0xE500000000000000LL;
  *(void *)(v14 + 48) = _swiftEmptyArrayStorage;
  *(void *)(v14 + 56) = v15;
  *(void *)(v14 + 96) = sub_100008DB0(&qword_1001347C8);
  *(void *)(v14 + 104) = &protocol witness table for Expression<A>;
  *(void *)(v14 + 7sub_100096760(v0[56], v0 + 2) = v5;
  *(void *)(v14 + 80) = v3;
  *(void *)(v14 + 88) = v4;
  sub_10001BEF8();
  sub_1000119E4();
  sub_1000D2E38(v14, a1);
  sub_1000D30C4();
  sub_100058868();
  return result;
}

double sub_1000DB55C@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(a1 + 16))(v8);
  sub_100026C8C((uint64_t)&v9, (uint64_t)v10, &qword_100134AE8);
  sub_1000E3428(v10);
  sub_1000E25E4(v8);
  sub_100026C8C((uint64_t)v10, (uint64_t)&v11, &qword_100134AE8);
  if (*((void *)&v11 + 1))
  {
    __int128 v13 = v11;
    uint64_t v14 = v12;
    uint64_t v3 = sub_100008DB0(&qword_100131160);
    uint64_t inited = swift_initStackObject(v3, v7);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
    uint64_t v5 = sub_100008DB0(&qword_100134618);
    *(void *)(inited + 64) = &protocol witness table for Expression<A>;
    *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = 0x4552454857LL;
    *(void *)(inited + 40) = 0xE500000000000000LL;
    *(void *)(inited + 48) = _swiftEmptyArrayStorage;
    *(void *)(inited + 56) = v5;
    *(void *)(inited + 96) = sub_100008DB0(&qword_1001347C8);
    *(void *)(inited + 104) = &protocol witness table for Expression<A>;
    *(_OWORD *)(inited + 7sub_100096760(v0[56], v0 + 2) = v13;
    *(void *)(inited + 88) = v14;
    sub_1000D3EA4(inited, 32LL, 0xE100000000000000LL, (uint64_t *)a2);
    swift_setDeallocating(inited);
    sub_100058868();
  }

  else
  {
    *(void *)(a2 + 3sub_100096760(v0[56], v0 + 2) = 0LL;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
  }

  return result;
}

void sub_1000DB6A0(uint64_t *a1@<X8>)
{
  uint64_t v3 = v1[12];
  if (v3)
  {
    uint64_t v4 = v1[13];
    uint64_t v5 = v1[14];
    uint64_t v6 = v1[15];
    uint64_t v7 = sub_100008DB0(&qword_100131160);
    uint64_t inited = swift_initStackObject(v7, v16);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
    uint64_t v9 = sub_100008DB0(&qword_100134618);
    *(void *)(inited + 64) = &protocol witness table for Expression<A>;
    *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = 0x59422050554F5247LL;
    *(void *)(inited + 40) = 0xE800000000000000LL;
    *(void *)(inited + 48) = _swiftEmptyArrayStorage;
    *(void *)(inited + 56) = v9;
    sub_10001C1BC();
    sub_10001DA7C(v4, v5, v6);
    sub_1000D2EDC(v3, (uint64_t *)(inited + 72));
    sub_1000D2E38(inited, (uint64_t *)v17);
    sub_1000D30C4();
    sub_100058868();
    uint64_t v10 = sub_10001DF40();
    if (v5)
    {
      uint64_t v11 = sub_1000E3C34(v10, (uint64_t)v15);
      *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
      sub_10001AFE4((uint64_t)v17, v11 + 32);
      uint64_t v13 = sub_1000E3C34(v12, (uint64_t)v14);
      *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
      *(void *)(v13 + 56) = v9;
      *(void *)(v13 + 64) = &protocol witness table for Expression<A>;
      *(void *)(v13 + 3sub_100096760(v0[56], v0 + 2) = 0x474E49564148LL;
      *(void *)(v13 + 40) = 0xE600000000000000LL;
      *(void *)(v13 + 48) = _swiftEmptyArrayStorage;
      *(void *)(v13 + 96) = sub_100008DB0(&qword_1001347C8);
      *(void *)(v13 + 104) = &protocol witness table for Expression<A>;
      *(void *)(v13 + 7sub_100096760(v0[56], v0 + 2) = v4;
      *(void *)(v13 + 80) = v5;
      *(void *)(v13 + 88) = v6;
      sub_1000D2E38(v13, (uint64_t *)(v11 + 72));
      sub_1000E3C3C();
      sub_1000E3A34();
      sub_1000D2E38(v11, a1);
      sub_1000E3B90();
      sub_1000E3B74();
      sub_10000AC58(v17);
    }

    else
    {
      sub_100009EEC(v17, (uint64_t)a1);
    }
  }

  else
  {
    sub_1000E35DC();
  }

  sub_1000E3664();
}

void sub_1000DB844(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(a1 + 16))(v16);
  sub_100026C8C((uint64_t)&v17, (uint64_t)v18, &qword_100134AE0);
  sub_1000E33F8(v18);
  sub_1000E25E4(v16);
  sub_100026C8C((uint64_t)v18, (uint64_t)v19, &qword_100134AE0);
  uint64_t v3 = v19[0];
  if (v19[0])
  {
    uint64_t v5 = v19[1];
    uint64_t v4 = v19[2];
    uint64_t v6 = v19[3];
    uint64_t v7 = sub_100008DB0(&qword_100131160);
    uint64_t inited = swift_initStackObject(v7, v14);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
    uint64_t v9 = sub_100008DB0(&qword_100134618);
    *(void *)(inited + 64) = &protocol witness table for Expression<A>;
    *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = 0x59422050554F5247LL;
    *(void *)(inited + 40) = 0xE800000000000000LL;
    *(void *)(inited + 48) = _swiftEmptyArrayStorage;
    *(void *)(inited + 56) = v9;
    sub_1000D3EA4(v3, 8236LL, 0xE200000000000000LL, (uint64_t *)(inited + 72));
    sub_1000D3EA4(inited, 32LL, 0xE100000000000000LL, (uint64_t *)v15);
    swift_setDeallocating(inited);
    sub_100058868();
    swift_bridgeObjectRelease();
    if (v4)
    {
      uint64_t v10 = swift_initStackObject(v7, v13);
      *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
      sub_10001AFE4((uint64_t)v15, v10 + 32);
      uint64_t v11 = swift_initStackObject(v7, v12);
      *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
      *(void *)(v11 + 56) = v9;
      *(void *)(v11 + 64) = &protocol witness table for Expression<A>;
      *(void *)(v11 + 3sub_100096760(v0[56], v0 + 2) = 0x474E49564148LL;
      *(void *)(v11 + 40) = 0xE600000000000000LL;
      *(void *)(v11 + 48) = _swiftEmptyArrayStorage;
      *(void *)(v11 + 96) = sub_100008DB0(&qword_1001347C8);
      *(void *)(v11 + 104) = &protocol witness table for Expression<A>;
      *(void *)(v11 + 7sub_100096760(v0[56], v0 + 2) = v5;
      *(void *)(v11 + 80) = v4;
      *(void *)(v11 + 88) = v6;
      sub_1000D3EA4(v11, 32LL, 0xE100000000000000LL, (uint64_t *)(v10 + 72));
      swift_setDeallocating(v11);
      sub_100058868();
      sub_1000D3EA4(v10, 32LL, 0xE100000000000000LL, (uint64_t *)a2);
      swift_setDeallocating(v10);
      sub_100058868();
      sub_10000AC58(v15);
    }

    else
    {
      sub_100009EEC(v15, a2);
    }
  }

  else
  {
    *(void *)(a2 + 3sub_100096760(v0[56], v0 + 2) = 0LL;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
  }

double sub_1000DBA70@<D0>(uint64_t *a1@<X8>)
{
  if (!*(void *)(*(void *)(v1 + 128) + 16LL)) {
    return sub_1000E35DC();
  }
  uint64_t v3 = sub_100008DB0(&qword_100131160);
  uint64_t v11 = sub_1000E37E8(v3, v4, v5, v6, v7, v8, v9, v10, v15);
  *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
  uint64_t v12 = sub_100008DB0(&qword_100134618);
  *(void *)(v11 + 64) = &protocol witness table for Expression<A>;
  *(void *)(v11 + 3sub_100096760(v0[56], v0 + 2) = 0x594220524544524FLL;
  *(void *)(v11 + 40) = 0xE800000000000000LL;
  *(void *)(v11 + 48) = _swiftEmptyArrayStorage;
  *(void *)(v11 + 56) = v12;
  uint64_t v13 = sub_10000AE38();
  sub_1000D2EDC(v13, (uint64_t *)(v11 + 72));
  sub_10000ADB0();
  sub_1000D2E38(v11, a1);
  sub_1000D90D0();
  sub_1000D909C();
  return result;
}

double sub_1000DBB34@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (*v6)(void *__return_ptr);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  double result;
  _BYTE v14[112];
  void v15[16];
  uint64_t v16;
  void v17[21];
  uint64_t v18;
  uint64_t v6 = *(void (**)(void *__return_ptr))(a2 + 16);
  v6(v15);
  uint64_t v7 = v16;
  uint64_t v18 = v16;
  swift_bridgeObjectRetain();
  sub_1000E25E4(v15);
  uint64_t v8 = *(void *)(v7 + 16);
  sub_10000A054(&v18);
  if (v8)
  {
    uint64_t v9 = sub_100008DB0(&qword_100131160);
    uint64_t inited = swift_initStackObject(v9, v14);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
    uint64_t v11 = sub_100008DB0(&qword_100134618);
    *(void *)(inited + 64) = &protocol witness table for Expression<A>;
    *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = 0x594220524544524FLL;
    *(void *)(inited + 40) = 0xE800000000000000LL;
    *(void *)(inited + 48) = _swiftEmptyArrayStorage;
    *(void *)(inited + 56) = v11;
    ((void (*)(void *__return_ptr, uint64_t, uint64_t))v6)(v17, a1, a2);
    uint64_t v12 = v17[16];
    swift_bridgeObjectRetain();
    sub_1000E25E4(v17);
    sub_1000D3EA4(v12, 8236LL, 0xE200000000000000LL, (uint64_t *)(inited + 72));
    swift_bridgeObjectRelease();
    sub_1000D3EA4(inited, 32LL, 0xE100000000000000LL, (uint64_t *)a3);
    swift_setDeallocating(inited);
    sub_100058868();
  }

  else
  {
    *(void *)(a3 + 3sub_100096760(v0[56], v0 + 2) = 0LL;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
  }

  return result;
}

void sub_1000DBC84(uint64_t *a1@<X8>)
{
  if ((v23 & 1) != 0)
  {
    sub_1000E35DC();
  }

  else
  {
    char v3 = v22;
    v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    String.append(_:)(v4);
    sub_100011958();
    if ((v3 & 1) != 0)
    {
      uint64_t v5 = sub_100008DB0(&qword_100134618);
      a1[4] = (uint64_t)&protocol witness table for Expression<A>;
      *a1 = 0x2054494D494CLL;
      a1[1] = 0xE600000000000000LL;
      a1[2] = (uint64_t)_swiftEmptyArrayStorage;
      a1[3] = v5;
    }

    else
    {
      uint64_t v6 = sub_100008DB0(&qword_100131160);
      uint64_t v14 = sub_1000E37E8(v6, v7, v8, v9, v10, v11, v12, v13, v17);
      *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
      uint64_t v15 = sub_100008DB0(&qword_100134618);
      *(void *)(v14 + 64) = &protocol witness table for Expression<A>;
      *(void *)(v14 + 3sub_100096760(v0[56], v0 + 2) = 0x2054494D494CLL;
      *(void *)(v14 + 40) = 0xE600000000000000LL;
      *(void *)(v14 + 48) = _swiftEmptyArrayStorage;
      *(void *)(v14 + 56) = v15;
      v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      String.append(_:)(v16);
      sub_10001BE7C();
      *(void *)(v14 + 96) = v15;
      *(void *)(v14 + 104) = &protocol witness table for Expression<A>;
      *(void *)(v14 + 7sub_100096760(v0[56], v0 + 2) = 0x2054455346464FLL;
      *(void *)(v14 + 80) = 0xE700000000000000LL;
      *(void *)(v14 + 88) = _swiftEmptyArrayStorage;
      sub_1000D2E38(v14, a1);
      sub_1000D90D0();
      sub_1000D909C();
    }
  }

void sub_1000DBE30(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(a1 + 16))(v17);
  sub_1000E25E4(v17);
  sub_100026C8C((uint64_t)&v18, (uint64_t)v19, &qword_1001348E0);
  sub_100026C8C((uint64_t)v19, (uint64_t)v20, &qword_1001348E0);
  if ((v22 & 1) != 0)
  {
    *(void *)(a2 + 3sub_100096760(v0[56], v0 + 2) = 0LL;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
  }

  else
  {
    uint64_t v3 = v20[1];
    char v4 = v21;
    uint64_t v15 = 0x2054494D494CLL;
    unint64_t v16 = 0xE600000000000000LL;
    uint64_t v14 = v20[0];
    v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    if ((v4 & 1) != 0)
    {
      uint64_t v6 = sub_100008DB0(&qword_100134618);
      *(void *)(a2 + 3sub_100096760(v0[56], v0 + 2) = &protocol witness table for Expression<A>;
      *(void *)a2 = 0x2054494D494CLL;
      *(void *)(a2 + 8) = 0xE600000000000000LL;
      *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = _swiftEmptyArrayStorage;
      *(void *)(a2 + 24) = v6;
    }

    else
    {
      uint64_t v7 = sub_100008DB0(&qword_100131160);
      uint64_t inited = swift_initStackObject(v7, &v13);
      *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
      uint64_t v9 = sub_100008DB0(&qword_100134618);
      *(void *)(inited + 64) = &protocol witness table for Expression<A>;
      *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = 0x2054494D494CLL;
      *(void *)(inited + 40) = 0xE600000000000000LL;
      *(void *)(inited + 48) = _swiftEmptyArrayStorage;
      *(void *)(inited + 56) = v9;
      uint64_t v15 = 0x2054455346464FLL;
      unint64_t v16 = 0xE700000000000000LL;
      uint64_t v14 = v3;
      v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      uint64_t v11 = v15;
      unint64_t v12 = v16;
      *(void *)(inited + 96) = v9;
      *(void *)(inited + 104) = &protocol witness table for Expression<A>;
      *(void *)(inited + 7sub_100096760(v0[56], v0 + 2) = v11;
      *(void *)(inited + 80) = v12;
      *(void *)(inited + 88) = _swiftEmptyArrayStorage;
      sub_1000D3EA4(inited, 32LL, 0xE100000000000000LL, (uint64_t *)a2);
      swift_setDeallocating(inited);
      sub_100058868();
    }
  }

void sub_1000DC010()
{
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v23 = v2;
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    unint64_t v16 = (uint64_t *)v1;
    char v22 = _swiftEmptyArrayStorage;
    sub_1000119E4();
    sub_1000E3974();
    uint64_t v4 = v2 + 32;
    Swift::String v5 = _swiftEmptyArrayStorage;
    do
    {
      sub_10001AFE4(v4, (uint64_t)v18);
      uint64_t v6 = sub_100008DB0(&qword_100131160);
      uint64_t inited = swift_initStackObject(v6, &v17);
      *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
      *(void *)(inited + 56) = sub_100008DB0(&qword_100134618);
      *(void *)(inited + 64) = &protocol witness table for Expression<A>;
      *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = 0x4E4F494E55LL;
      *(void *)(inited + 40) = 0xE500000000000000LL;
      *(void *)(inited + 48) = _swiftEmptyArrayStorage;
      uint64_t v9 = v19;
      uint64_t v8 = v20;
      Swift::String v10 = sub_100008D74(v18, v19);
      *(void *)(inited + 96) = v9;
      *(void *)(inited + 104) = *(void *)(v8 + 8);
      uint64_t v11 = sub_10001AFA8((void *)(inited + 72));
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v11, v10, v9);
      sub_1000D2E38(inited, v21);
      sub_1000D30C4();
      sub_100058868();
      sub_10000AC58(v18);
      if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
      {
        sub_1000E3680();
        Swift::String v5 = v22;
      }

      unint64_t v12 = v5[2];
      if (v12 >= v5[3] >> 1) {
        sub_1000E3680();
      }
      sub_1000E3B88((uint64_t)v21);
      sub_1000E3964();
      __chkstk_darwin(v13);
      sub_1000E364C();
      sub_10003EE9C(v9, v15, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16));
      sub_1000E3A3C(v12, v9, (uint64_t *)&v22);
      sub_10000AC58(v21);
      Swift::String v5 = v22;
      v4 += 40LL;
      --v3;
    }

    while (v3);
    sub_10000A054(&v23);
    sub_1000D2E38((uint64_t)v5, v16);
    swift_release();
  }

  else
  {
    *(void *)(v1 + 3sub_100096760(v0[56], v0 + 2) = 0LL;
    *(_OWORD *)uint64_t v1 = 0u;
    *(_OWORD *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
  }

  sub_10000AD58();
}

void *sub_1000DC228@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (*v6)(void *__return_ptr);
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  void v32[3];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[3];
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void v39[20];
  uint64_t v40;
  void v41[20];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v6 = *(void (**)(void *__return_ptr))(a2 + 16);
  v6(v39);
  uint64_t v7 = v40;
  __int128 v44 = v40;
  swift_bridgeObjectRetain();
  sub_1000E25E4(v39);
  uint64_t v8 = *(void *)(v7 + 16);
  double result = sub_10000A054(&v44);
  if (v8)
  {
    ((void (*)(void *__return_ptr, uint64_t, uint64_t))v6)(v41, a1, a2);
    Swift::String v10 = v42;
    uint64_t v43 = v42;
    swift_bridgeObjectRetain();
    sub_1000E25E4(v41);
    uint64_t v11 = *(void *)(v10 + 16);
    if (v11)
    {
      uint64_t v29 = a3;
      uint64_t v38 = _swiftEmptyArrayStorage;
      sub_1000D3994();
      unint64_t v12 = v10 + 32;
      uint64_t v13 = _swiftEmptyArrayStorage;
      uint64_t v30 = xmmword_1000F57D0;
      do
      {
        sub_10001AFE4(v12, (uint64_t)v32);
        uint64_t v14 = sub_100008DB0(&qword_100131160);
        uint64_t inited = swift_initStackObject(v14, &v31);
        *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = v30;
        *(void *)(inited + 56) = sub_100008DB0(&qword_100134618);
        *(void *)(inited + 64) = &protocol witness table for Expression<A>;
        *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = 0x4E4F494E55LL;
        *(void *)(inited + 40) = 0xE500000000000000LL;
        *(void *)(inited + 48) = _swiftEmptyArrayStorage;
        uint64_t v17 = v33;
        unint64_t v16 = v34;
        uint64_t v18 = sub_100008D74(v32, v33);
        *(void *)(inited + 96) = v17;
        *(void *)(inited + 104) = *(void *)(v16 + 8);
        uint64_t v19 = sub_10001AFA8((void *)(inited + 72));
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v17 - 8) + 16LL))(v19, v18, v17);
        sub_1000D3EA4(inited, 32LL, 0xE100000000000000LL, v35);
        swift_setDeallocating(inited);
        sub_100058868();
        sub_10000AC58(v32);
        if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
        {
          sub_1000D3994();
          uint64_t v13 = v38;
        }

        uint64_t v20 = v13[2];
        if (v20 >= v13[3] >> 1) {
          sub_1000D3994();
        }
        char v21 = v36;
        char v22 = v37;
        uint64_t v23 = sub_10004BB58((uint64_t)v35, v36);
        uint64_t v24 = __chkstk_darwin(v23);
        uint64_t v26 = (char *)&v28 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *, double))(v27 + 16))(v26, v24);
        sub_1000E24E0(v20, (uint64_t)v26, (uint64_t *)&v38, v21, v22);
        sub_10000AC58(v35);
        uint64_t v13 = v38;
        v12 += 40LL;
        --v11;
      }

      while (v11);
      sub_10000A054(&v43);
      a3 = v29;
    }

    else
    {
      sub_10000A054(&v43);
      uint64_t v13 = _swiftEmptyArrayStorage;
    }

    sub_1000D3EA4((uint64_t)v13, 32LL, 0xE100000000000000LL, (uint64_t *)a3);
    return (void *)swift_bridgeObjectRelease();
  }

  else
  {
    *(void *)(a3 + 3sub_100096760(v0[56], v0 + 2) = 0LL;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
  }

  return result;
}

uint64_t QueryType.alias(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = v19[2];
  uint64_t v10 = v19[3];
  sub_10001BCF8();
  sub_1000E25E4(v19);
  sub_1000E3AC0();
  uint64_t v13 = v20[6];
  uint64_t v12 = v20[7];
  sub_10001C1BC();
  sub_1000E25E4(v20);
  uint64_t v14 = (uint64_t (*)(_BYTE *, void))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(a4 + 32))( v18,  a3,  a4);
  unint64_t v16 = v15;
  __int128 v15[2] = v11;
  void v15[3] = v10;
  swift_bridgeObjectRelease();
  v16[4] = a1;
  v16[5] = a2;
  sub_10000AFB0();
  sub_10001BE7C();
  v16[6] = v13;
  v16[7] = v12;
  swift_bridgeObjectRelease();
  return v14(v18, 0LL);
}

uint64_t QueryType.insert(_:_:)(uint64_t a1)
{
  uint64_t v2 = sub_100008DB0(&qword_1001323E0);
  uint64_t inited = swift_initStackObject(v2, v6);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5520;
  sub_1000E2558(a1, inited + 32);
  sub_10001C064();
  sub_1000D4C48();
  uint64_t v4 = sub_1000E3900();
  QueryType.insert(_:)((Swift::OpaquePointer)v4);
  sub_1000E35EC();
  sub_10001BE7C();
  return sub_1000E3520();
}

AppIntents_SQLite::Insert __swiftcall QueryType.insert(_:)(Swift::OpaquePointer a1)
{
  uint64_t v3 = sub_1000DCC90( (uint64_t)a1._rawValue,  v1,  v2,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000DC6B4);
  result.bindings._rawValue = v5;
  result.template._object = v4;
  result.template._uint64_t countAndFlagsBits = v3;
  return result;
}

void sub_1000DC6B4(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v4 = a1;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    uint64_t v7 = a2 + 32;
    swift_bridgeObjectRetain();
    uint64_t v8 = _swiftEmptyArrayStorage;
    while (1)
    {
      sub_1000E2558(v7, (uint64_t)&v68);
      uint64_t v9 = sub_100008DB0(&qword_100131160);
      uint64_t inited = swift_initStackObject(v9, v67);
      *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5520;
      sub_10001AFE4((uint64_t)&v68, inited + 32);
      unint64_t v11 = v8[2];
      swift_bridgeObjectRetain();
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v12);
      if (!isUniquelyReferenced_nonNull_native || (unint64_t v14 = v8[3] >> 1, v15 = v8, v14 <= v11))
      {
        sub_1000D1E50(isUniquelyReferenced_nonNull_native, v11 + 1, 1, v8);
        uint64_t v15 = v16;
        unint64_t v14 = v16[3] >> 1;
      }

      unint64_t v17 = v15[2];
      if (v14 <= v17) {
        break;
      }
      uint64_t v18 = (uint64_t)&v15[5 * v17 + 4];
      sub_100008DB0((uint64_t *)&unk_1001323B0);
      swift_arrayInitWithCopy(v18);
      ++v15[2];
      swift_bridgeObjectRelease();
      uint64_t v19 = swift_initStackObject(v9, v66);
      *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5520;
      sub_10001AFE4((uint64_t)&v72, v19 + 32);
      unint64_t v20 = v6[2];
      swift_bridgeObjectRetain();
      int v22 = swift_isUniquelyReferenced_nonNull_native(v21);
      if (!v22 || (unint64_t v23 = v6[3] >> 1, v24 = v6, v23 <= v20))
      {
        sub_1000D1E50(v22, v20 + 1, 1, v6);
        uint64_t v24 = v25;
        unint64_t v23 = v25[3] >> 1;
      }

      unint64_t v26 = v24[2];
      if (v23 <= v26) {
        goto LABEL_28;
      }
      swift_arrayInitWithCopy(&v24[5 * v26 + 4]);
      ++v24[2];
      swift_bridgeObjectRelease();
      sub_10001DC30(&v68);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v7 += 80LL;
      uint64_t v6 = v24;
      uint64_t v8 = v15;
      if (!--v5)
      {
        swift_bridgeObjectRelease();
        unsigned __int8 v4 = a1;
        goto LABEL_14;
      }
    }

    __break(1u);
LABEL_28:
    __break(1u);
  }

  else
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    uint64_t v24 = _swiftEmptyArrayStorage;
LABEL_14:
    uint64_t v27 = sub_100008DB0(&qword_1001347A8);
    uint64_t v28 = swift_initStackObject(v27, v65);
    *(_OWORD *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F6F60;
    uint64_t v29 = sub_100008DB0(&qword_100134618);
    *(void *)(v28 + 56) = v29;
    *(void *)(v28 + 64) = &protocol witness table for Expression<A>;
    *(void *)(v28 + 3sub_100096760(v0[56], v0 + 2) = 0x545245534E49LL;
    *(void *)(v28 + 40) = 0xE600000000000000LL;
    *(void *)(v28 + 48) = _swiftEmptyArrayStorage;
    if (v4 == 5)
    {
      uint64_t v30 = 0LL;
      unint64_t v31 = 0LL;
      uint64_t v32 = 0LL;
      uint64_t v33 = 0LL;
      uint64_t v34 = 0LL;
    }

    else
    {
      uint64_t v68 = 2118223LL;
      unint64_t v69 = 0xE300000000000000LL;
      v35._uint64_t countAndFlagsBits = OnConflict.rawValue.getter(v4);
      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      uint64_t v30 = v68;
      unint64_t v31 = v69;
      uint64_t v34 = &protocol witness table for Expression<A>;
      uint64_t v33 = v29;
      uint64_t v32 = _swiftEmptyArrayStorage;
    }

    *(void *)(v28 + 7sub_100096760(v0[56], v0 + 2) = v30;
    *(void *)(v28 + 80) = v31;
    *(void *)(v28 + 88) = v32;
    *(void *)(v28 + 96) = v33;
    *(void *)(v28 + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = v29;
    *(void *)(v28 + 144) = &protocol witness table for Expression<A>;
    *(void *)(v28 + 104) = v34;
    *(void *)(v28 + 11sub_100096760(v0[56], v0 + 2) = 1330925129LL;
    *(void *)(v28 + 120) = 0xE400000000000000LL;
    *(void *)(v28 + 128) = _swiftEmptyArrayStorage;
    sub_100026F84();
    sub_1000D96A4();
    sub_1000D3EA4((uint64_t)v15, 8236LL, 0xE200000000000000LL, &v68);
    uint64_t v36 = v70;
    uint64_t v37 = v71;
    uint64_t v38 = sub_100008D74(&v68, v70);
    uint64_t v39 = sub_1000D4984(v38, 0LL, 0xE000000000000000LL, v36, v37);
    uint64_t v41 = v40;
    uint64_t v43 = v42;
    sub_10000AC58(&v68);
    *(void *)(v28 + 19sub_100096760(v0[56], v0 + 2) = v39;
    *(void *)(v28 + 200) = v41;
    *(void *)(v28 + 208) = v43;
    *(void *)(v28 + 2swift_unknownObjectWeakDestroy(v0 + 16) = v29;
    *(void *)(v28 + 256) = v29;
    *(void *)(v28 + 264) = &protocol witness table for Expression<A>;
    *(void *)(v28 + 224) = &protocol witness table for Expression<A>;
    *(void *)(v28 + 23sub_100096760(v0[56], v0 + 2) = 0x5345554C4156LL;
    *(void *)(v28 + 240) = 0xE600000000000000LL;
    *(void *)(v28 + 248) = _swiftEmptyArrayStorage;
    sub_1000D3EA4((uint64_t)v24, 8236LL, 0xE200000000000000LL, &v68);
    uint64_t v44 = v70;
    uint64_t v45 = v71;
    uint64_t v46 = sub_100008D74(&v68, v70);
    uint64_t v47 = sub_1000D4984(v46, 0LL, 0xE000000000000000LL, v44, v45);
    uint64_t v49 = v48;
    uint64_t v51 = v50;
    sub_10000AC58(&v68);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v28 + 296) = v29;
    *(void *)(v28 + 304) = &protocol witness table for Expression<A>;
    *(void *)(v28 + 27sub_100096760(v0[56], v0 + 2) = v47;
    *(void *)(v28 + 280) = v49;
    *(void *)(v28 + 288) = v51;
    uint64_t v52 = _swiftEmptyArrayStorage;
    sub_1000DB55C(a4, v28 + 312);
    for (uint64_t i = 32LL; i != 352; i += 40LL)
    {
      sub_100026CB8(v28 + i, (uint64_t)&v68, &qword_1001347B0);
      sub_100026C8C((uint64_t)&v68, (uint64_t)&v62, &qword_1001347B0);
      if (v63)
      {
        sub_100009EEC(&v62, (uint64_t)v64);
        sub_100009EEC(v64, (uint64_t)&v62);
        if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0)
        {
          sub_1000D1E50(0, v52[2] + 1LL, 1, v52);
          uint64_t v52 = v56;
        }

        unint64_t v55 = v52[2];
        unint64_t v54 = v52[3];
        if (v55 >= v54 >> 1)
        {
          sub_1000D1E50(v54 > 1, v55 + 1, 1, v52);
          uint64_t v52 = v57;
        }

        _OWORD v52[2] = v55 + 1;
        sub_100009EEC(&v62, (uint64_t)&v52[5 * v55 + 4]);
      }

      else
      {
        sub_10001B60C((uint64_t)&v62, &qword_1001347B0);
      }
    }

    swift_bridgeObjectRelease();
    sub_1000D3EA4((uint64_t)v52, 32LL, 0xE100000000000000LL, &v68);
    swift_bridgeObjectRelease();
    uint64_t v58 = v70;
    uint64_t v59 = v71;
    sub_100008D74(&v68, v70);
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v58, v59);
    sub_10000AC58(&v68);
  }

uint64_t QueryType.insert(or:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1000DD4D0(a1, a2);
}

AppIntents_SQLite::Insert __swiftcall QueryType.insert(or:_:)(AppIntents_SQLite::OnConflict or, Swift::OpaquePointer _)
{
  uint64_t v2 = sub_1000DD4D0(or, _._rawValue);
  result.bindings._rawValue = v4;
  result.template._object = v3;
  result.template._uint64_t countAndFlagsBits = v2;
  return result;
}

AppIntents_SQLite::Insert __swiftcall QueryType.insertMany(_:)(Swift::OpaquePointer a1)
{
  uint64_t v3 = sub_1000DCC90( (uint64_t)a1._rawValue,  v1,  v2,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000DCCA8);
  result.bindings._rawValue = v5;
  result.template._object = v4;
  result.template._uint64_t countAndFlagsBits = v3;
  return result;
}

uint64_t sub_1000DCC90( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  return a4(5LL, a1, a2, a3);
}

void sub_1000DCCA8(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    int v74 = a1;
    uint64_t v76 = a3;
    uint64_t v77 = a4;
    uint64_t v5 = *(void *)(a2 + 32);
    uint64_t v78 = a2 + 32;
    uint64_t v79 = v4;
    uint64_t v6 = *(void *)(v5 + 16);
    if (v6)
    {
      *(void *)&__int128 v83 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_1000D3994();
      uint64_t v7 = v5 + 32;
      uint64_t v8 = _swiftEmptyArrayStorage;
      do
      {
        sub_1000E2558(v7, (uint64_t)&v87);
        sub_10001AFE4((uint64_t)&v87, (uint64_t)&v92);
        sub_10001DC30(&v87);
        if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        {
          sub_1000D3994();
          uint64_t v8 = (void *)v83;
        }

        unint64_t v9 = v8[2];
        if (v9 >= v8[3] >> 1) {
          sub_1000D3994();
        }
        uint64_t v10 = v93;
        uint64_t v11 = v94;
        uint64_t v12 = sub_10004BB58((uint64_t)&v92, v93);
        double v13 = __chkstk_darwin(v12);
        uint64_t v15 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *, double))(v16 + 16))(v15, v13);
        sub_1000E24E0(v9, (uint64_t)v15, (uint64_t *)&v83, v10, v11);
        sub_10000AC58(&v92);
        uint64_t v8 = (void *)v83;
        v7 += 80LL;
        --v6;
      }

      while (v6);
      uint64_t v75 = (void *)v83;
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v75 = _swiftEmptyArrayStorage;
    }

    *(void *)&__int128 v92 = _swiftEmptyArrayStorage;
    uint64_t v17 = v79;
    sub_1000D39C8();
    uint64_t v18 = 0LL;
    __int128 v82 = xmmword_1000F5520;
    do
    {
      if (v18 == v17) {
        goto LABEL_51;
      }
      uint64_t v19 = *(void *)(v78 + 8 * v18);
      uint64_t v20 = *(void *)(v19 + 16);
      if (v20)
      {
        uint64_t v80 = *(void *)(v78 + 8 * v18);
        uint64_t v81 = v18;
        uint64_t v21 = v19 + 32;
        swift_bridgeObjectRetain();
        int v22 = _swiftEmptyArrayStorage;
        while (1)
        {
          sub_1000E2558(v21, (uint64_t)&v87);
          uint64_t v23 = sub_100008DB0(&qword_100131160);
          uint64_t inited = swift_initStackObject(v23, &v86);
          *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = v82;
          sub_10001AFE4((uint64_t)&v91, inited + 32);
          unint64_t v25 = v22[2];
          swift_bridgeObjectRetain();
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
          if (!isUniquelyReferenced_nonNull_native || (v28 = v22[3] >> 1, uint64_t v29 = v22, v28 <= v25))
          {
            sub_1000D1E50(isUniquelyReferenced_nonNull_native, v25 + 1, 1, v22);
            uint64_t v29 = v30;
            unint64_t v28 = v30[3] >> 1;
          }

          unint64_t v31 = v29[2];
          if (v28 <= v31) {
            break;
          }
          uint64_t v32 = (uint64_t)&v29[5 * v31 + 4];
          sub_100008DB0((uint64_t *)&unk_1001323B0);
          swift_arrayInitWithCopy(v32);
          ++v29[2];
          swift_setDeallocating(inited);
          sub_100058868();
          sub_10001DC30(&v87);
          swift_bridgeObjectRelease();
          v21 += 80LL;
          int v22 = v29;
          if (!--v20)
          {
            swift_bridgeObjectRelease();
            uint64_t v18 = v81;
            goto LABEL_23;
          }
        }

        __break(1u);
LABEL_51:
        __break(1u);
        return;
      }

      uint64_t v29 = _swiftEmptyArrayStorage;
LABEL_23:
      uint64_t v33 = v92;
      if ((swift_isUniquelyReferenced_nonNull_native(v92) & 1) == 0)
      {
        sub_1000D39C8();
        uint64_t v33 = v92;
      }

      unint64_t v34 = *(void *)(v33 + 16);
      if (v34 >= *(void *)(v33 + 24) >> 1)
      {
        sub_1000D39C8();
        uint64_t v33 = v92;
      }

      ++v18;
      *(void *)(v33 + swift_unknownObjectWeakDestroy(v0 + 16) = v34 + 1;
      *(void *)(v33 + 8 * v34 + 3sub_100096760(v0[56], v0 + 2) = v29;
      uint64_t v17 = v79;
    }

    while (v18 != v79);
    uint64_t v35 = sub_100008DB0(&qword_1001347A8);
    uint64_t v36 = swift_initStackObject(v35, &v85);
    *(_OWORD *)(v36 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F6F60;
    uint64_t v37 = sub_100008DB0(&qword_100134618);
    *(void *)(v36 + 56) = v37;
    *(void *)(v36 + 64) = &protocol witness table for Expression<A>;
    *(void *)(v36 + 3sub_100096760(v0[56], v0 + 2) = 0x545245534E49LL;
    *(void *)(v36 + 40) = 0xE600000000000000LL;
    *(void *)(v36 + 48) = _swiftEmptyArrayStorage;
    if (v74 == 5)
    {
      uint64_t v38 = 0LL;
      uint64_t v39 = 0LL;
      uint64_t v40 = 0LL;
      uint64_t v41 = 0LL;
      uint64_t v42 = 0LL;
    }

    else
    {
      *(void *)&__int128 v87 = 2118223LL;
      *((void *)&v87 + 1) = 0xE300000000000000LL;
      v43._uint64_t countAndFlagsBits = OnConflict.rawValue.getter(v74);
      String.append(_:)(v43);
      swift_bridgeObjectRelease();
      uint64_t v39 = *((void *)&v87 + 1);
      uint64_t v38 = v87;
      uint64_t v42 = &protocol witness table for Expression<A>;
      uint64_t v41 = v37;
      uint64_t v40 = _swiftEmptyArrayStorage;
    }

    *(void *)(v36 + 7sub_100096760(v0[56], v0 + 2) = v38;
    *(void *)(v36 + 80) = v39;
    *(void *)(v36 + 88) = v40;
    *(void *)(v36 + 96) = v41;
    *(void *)(v36 + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = v37;
    *(void *)(v36 + 144) = &protocol witness table for Expression<A>;
    *(void *)(v36 + 104) = v42;
    *(void *)(v36 + 11sub_100096760(v0[56], v0 + 2) = 1330925129LL;
    *(void *)(v36 + 120) = 0xE400000000000000LL;
    *(void *)(v36 + 128) = _swiftEmptyArrayStorage;
    sub_100026F84();
    sub_1000D96A4();
    sub_1000D3EA4((uint64_t)v75, 8236LL, 0xE200000000000000LL, (uint64_t *)&v87);
    uint64_t v44 = v89;
    uint64_t v45 = v90;
    uint64_t v46 = sub_100008D74(&v87, v89);
    uint64_t v47 = sub_1000D4984(v46, 0LL, 0xE000000000000000LL, v44, v45);
    uint64_t v49 = v48;
    uint64_t v51 = v50;
    sub_10000AC58(&v87);
    swift_bridgeObjectRelease();
    *(void *)(v36 + 19sub_100096760(v0[56], v0 + 2) = v47;
    *(void *)(v36 + 200) = v49;
    *(void *)(v36 + 208) = v51;
    *(void *)(v36 + 2swift_unknownObjectWeakDestroy(v0 + 16) = v37;
    *(void *)(v36 + 256) = v37;
    *(void *)(v36 + 264) = &protocol witness table for Expression<A>;
    *(void *)(v36 + 224) = &protocol witness table for Expression<A>;
    *(void *)(v36 + 23sub_100096760(v0[56], v0 + 2) = 0x5345554C4156LL;
    *(void *)(v36 + 240) = 0xE600000000000000LL;
    *(void *)(v36 + 248) = _swiftEmptyArrayStorage;
    uint64_t v52 = *(void *)(v33 + 16);
    if (v52)
    {
      uint64_t v81 = v36;
      *(void *)&__int128 v82 = v37;
      *(void *)&__int128 v92 = _swiftEmptyArrayStorage;
      sub_1000D3994();
      uint64_t v53 = 0LL;
      unint64_t v54 = (void *)v92;
      do
      {
        swift_bridgeObjectRetain();
        sub_1000D3EA4(v55, 8236LL, 0xE200000000000000LL, (uint64_t *)&v87);
        uint64_t v56 = v89;
        uint64_t v57 = v90;
        uint64_t v58 = sub_100008D74(&v87, v89);
        uint64_t v59 = sub_1000D4984(v58, 0LL, 0xE000000000000000LL, v56, v57);
        uint64_t v61 = v60;
        uint64_t v63 = v62;
        sub_10000AC58(&v87);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native(v54) & 1) == 0)
        {
          sub_1000D3994();
          unint64_t v54 = (void *)v92;
        }

        unint64_t v64 = v54[2];
        if (v64 >= v54[3] >> 1)
        {
          sub_1000D3994();
          unint64_t v54 = (void *)v92;
        }

        ++v53;
        *(void *)&__int128 v87 = v59;
        *((void *)&v87 + 1) = v61;
        uint64_t v89 = v82;
        uint64_t v90 = &protocol witness table for Expression<A>;
        uint64_t v88 = v63;
        v54[2] = v64 + 1;
        sub_100009EEC(&v87, (uint64_t)&v54[5 * v64 + 4]);
      }

      while (v52 != v53);
      swift_release();
      uint64_t v36 = v81;
    }

    else
    {
      swift_release();
      unint64_t v54 = _swiftEmptyArrayStorage;
    }

    sub_1000D3EA4((uint64_t)v54, 8236LL, 0xE200000000000000LL, (uint64_t *)(v36 + 272));
    swift_bridgeObjectRelease();
    sub_1000DB55C(v77, v36 + 312);
    uint64_t v65 = _swiftEmptyArrayStorage;
    for (uint64_t i = 32LL; i != 352; i += 40LL)
    {
      sub_100026CB8(v36 + i, (uint64_t)&v87, &qword_1001347B0);
      sub_100026C8C((uint64_t)&v87, (uint64_t)&v83, &qword_1001347B0);
      if (v84)
      {
        sub_100009EEC(&v83, (uint64_t)&v92);
        sub_100009EEC(&v92, (uint64_t)&v83);
        if ((swift_isUniquelyReferenced_nonNull_native(v65) & 1) == 0)
        {
          sub_1000D1E50(0, v65[2] + 1LL, 1, v65);
          uint64_t v65 = v69;
        }

        unint64_t v68 = v65[2];
        unint64_t v67 = v65[3];
        if (v68 >= v67 >> 1)
        {
          sub_1000D1E50(v67 > 1, v68 + 1, 1, v65);
          uint64_t v65 = v70;
        }

        v65[2] = v68 + 1;
        sub_100009EEC(&v83, (uint64_t)&v65[5 * v68 + 4]);
      }

      else
      {
        sub_10001B60C((uint64_t)&v83, &qword_1001347B0);
      }
    }

    swift_bridgeObjectRelease();
    sub_1000D3EA4((uint64_t)v65, 32LL, 0xE100000000000000LL, (uint64_t *)&v87);
    swift_bridgeObjectRelease();
    uint64_t v71 = v89;
    uint64_t v72 = v90;
    sub_100008D74(&v87, v89);
    ((void (*)(uint64_t, _UNKNOWN **))v72[1])(v71, v72);
    sub_10000AC58(&v87);
  }

  else
  {
    QueryType.insert()();
  }

AppIntents_SQLite::Insert __swiftcall QueryType.insertMany(or:_:)( AppIntents_SQLite::OnConflict or, Swift::OpaquePointer _)
{
  uint64_t v2 = sub_1000DD4D0(or, _._rawValue);
  result.bindings._rawValue = v4;
  result.template._object = v3;
  result.template._uint64_t countAndFlagsBits = v2;
  return result;
}

uint64_t OnConflict.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000DD508 + 4 * byte_1000F8160[a1]))( 0x4543414C504552LL,  0xE700000000000000LL);
}

uint64_t sub_1000DD508()
{
  return 0x4B4341424C4C4F52LL;
}

uint64_t sub_1000DD520()
{
  return 0x54524F4241LL;
}

uint64_t sub_1000DD534()
{
  return 1279869254LL;
}

uint64_t sub_1000DD544()
{
  return 0x45524F4E4749LL;
}

#error "1000DD580: call analysis failed (funcsize=56)"
#error "1000DD688: call analysis failed (funcsize=60)"
void QueryType.upsert(_:onConflictOf:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void *);
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  _BYTE v23[16];
  uint64_t v24;
  _BYTE v25[112];
  uint64_t __src[10];
  void v27[3];
  uint64_t v28;
  uint64_t v29;
  void v30[10];
  void v31[10];
  void *v32;
  sub_10000AE58();
  uint64_t v1 = v0;
  uint64_t v24 = v2;
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_1000DDB08(sub_1000E2594, (uint64_t)v23, v1);
  uint64_t v4 = *((void *)v3 + 2);
  if (v4)
  {
    uint64_t v32 = _swiftEmptyArrayStorage;
    sub_1000D39FC(0LL, v4, 0);
    uint64_t v5 = (uint64_t)v3 + 32;
    do
    {
      sub_1000E2558(v5, (uint64_t)v30);
      sub_10001AFE4((uint64_t)v30, (uint64_t)v27);
      uint64_t v6 = sub_1000D9BC0( 0LL,  0xE000000000000000LL,  0x646564756C637865LL,  0xE800000000000000LL,  34LL,  0xE100000000000000LL);
      uint64_t v8 = v7;
      v31[0] = 0LL;
      v31[1] = 0xE000000000000000LL;
      sub_1000E3C6C((uint64_t)v31, 34LL, 0xE100000000000000LL);
      v9._uint64_t countAndFlagsBits = v6;
      v9._object = v8;
      String.append(_:)(v9);
      sub_10001DF40();
      sub_1000E3C6C((uint64_t)v31, 34LL, 0xE100000000000000LL);
      uint64_t v10 = v31[0];
      uint64_t v11 = v31[1];
      sub_10001AFE4((uint64_t)v27, (uint64_t)__src);
      uint64_t v12 = sub_100008DB0(&qword_100131160);
      uint64_t inited = swift_initStackObject(v12, v25);
      *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
      uint64_t v14 = sub_100008DB0(&qword_100134618);
      *(void *)(inited + 56) = v14;
      *(void *)(inited + 64) = &protocol witness table for Expression<A>;
      *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = v10;
      *(void *)(inited + 40) = v11;
      *(void *)(inited + 48) = _swiftEmptyArrayStorage;
      uint64_t v16 = v28;
      uint64_t v15 = v29;
      sub_100008D74(v27, v28);
      uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v16, v15);
      *(void *)(inited + 96) = v14;
      *(void *)(inited + 104) = &protocol witness table for Expression<A>;
      *(void *)(inited + 7sub_100096760(v0[56], v0 + 2) = v17;
      *(void *)(inited + 80) = v18;
      *(void *)(inited + 88) = v19;
      sub_1000D2E44(inited, 46LL, &__src[5]);
      sub_1000E3C3C();
      sub_1000E3A34();
      memcpy(v31, __src, sizeof(v31));
      sub_10000AC58(v27);
      sub_10001DC30(v30);
      uint64_t v20 = v32;
      if ((swift_isUniquelyReferenced_nonNull_native(v32) & 1) == 0)
      {
        sub_1000D39FC(0LL, v20[2] + 1LL, 1);
        uint64_t v20 = v32;
      }

      int v22 = v20[2];
      uint64_t v21 = v20[3];
      if (v22 >= v21 >> 1)
      {
        sub_1000D39FC((char *)(v21 > 1), v22 + 1, 1);
        uint64_t v20 = v32;
      }

      void v20[2] = v22 + 1;
      memcpy(&v20[10 * v22 + 4], v31, 0x50uLL);
      v5 += 80LL;
      --v4;
    }

    while (v4);
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10001BEC0();
  }

  QueryType.upsert(_:onConflictOf:set:)();
  sub_1000E35EC();
  sub_10001DF40();
  sub_1000E3520();
  sub_10000AD58();
}

uint64_t sub_1000DDA30(void *a1, void *a2)
{
  Swift::String v3 = Expressible.asSQL()();
  sub_100008D74(a2, a2[3]);
  Swift::String v4 = Expressible.asSQL()();
  if (v3._countAndFlagsBits == v4._countAndFlagsBits && v3._object == v4._object)
  {
    swift_bridgeObjectRelease_n(v3._object, 2LL);
    char v7 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)( v3._countAndFlagsBits,  v3._object,  v4._countAndFlagsBits,  v4._object,  0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v7 = v6 ^ 1;
  }

  return v7 & 1;
}

uint64_t (*sub_1000DDB08( uint64_t (*result)(void *), uint64_t a2, uint64_t a3))(void *)
{
  uint64_t v4 = a3;
  uint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v18 = _swiftEmptyArrayStorage;
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    char v7 = result;
    unint64_t v8 = 0LL;
    uint64_t v9 = a3 + 32;
    uint64_t v14 = *(void *)(a3 + 16);
    while (v8 < *(void *)(v4 + 16))
    {
      sub_1000E2558(v9, (uint64_t)__src);
      char v10 = v7(__src);
      if (v3)
      {
        sub_10001DC30(__src);
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t (*)(void *))v5;
      }

      if ((v10 & 1) != 0)
      {
        uint64_t v11 = v7;
        memcpy(__dst, __src, sizeof(__dst));
        if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0) {
          sub_1000D39FC(0LL, v5[2] + 1LL, 1);
        }
        uint64_t v5 = v18;
        unint64_t v13 = v18[2];
        unint64_t v12 = v18[3];
        if (v13 >= v12 >> 1)
        {
          sub_1000D39FC((char *)(v12 > 1), v13 + 1, 1);
          uint64_t v5 = v18;
        }

        __int128 v5[2] = v13 + 1;
        AppIntents_SQLite::Insert result = (uint64_t (*)(void *))memcpy(&v5[10 * v13 + 4], __dst, 0x50uLL);
        char v7 = v11;
        uint64_t v6 = v14;
        uint64_t v4 = a3;
      }

      else
      {
        AppIntents_SQLite::Insert result = (uint64_t (*)(void *))sub_10001DC30(__src);
      }

      ++v8;
      v9 += 80LL;
      if (v6 == v8) {
        goto LABEL_13;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return (uint64_t (*)(void *))v5;
  }

  return result;
}

void sub_1000DDC90(uint64_t (*a1)(void *, __n128), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v19 = *(void *)(a3 + 16);
  if (v19)
  {
    uint64_t v5 = a1;
    unint64_t v6 = 0LL;
    char v7 = (uint64_t *)(a3 + 40);
    unint64_t v8 = _swiftEmptyArrayStorage;
    while (v6 < *(void *)(v4 + 16))
    {
      uint64_t v10 = *(v7 - 1);
      uint64_t v9 = *v7;
      v20[0] = v10;
      v20[1] = v9;
      __n128 v11 = swift_bridgeObjectRetain();
      char v12 = v5(v20, v11);
      if (v3)
      {
        swift_release();
        swift_bridgeObjectRelease(v4);
        uint64_t v16 = v9;
        goto LABEL_15;
      }

      if ((v12 & 1) != 0)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
        uint64_t v21 = v8;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1000452D4();
          unint64_t v8 = v21;
        }

        unint64_t v14 = v8[2];
        if (v14 >= v8[3] >> 1)
        {
          sub_1000452D4();
          unint64_t v8 = v21;
        }

        __int128 v8[2] = v14 + 1;
        uint64_t v15 = &v8[2 * v14];
        uint64_t v15[4] = v10;
        v15[5] = v9;
        uint64_t v4 = a3;
        uint64_t v5 = a1;
      }

      else
      {
        swift_bridgeObjectRelease(v9);
      }

      ++v6;
      v7 += 2;
      if (v19 == v6) {
        goto LABEL_13;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_13:
    uint64_t v16 = v4;
LABEL_15:
    swift_bridgeObjectRelease(v16);
  }

void QueryType.upsert(_:onConflictOf:set:)()
{
  uint64_t v82 = v4;
  uint64_t v84 = v0;
  uint64_t v90 = v5;
  uint64_t v86 = v6;
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v88 = v8;
  if (v7)
  {
    uint64_t v9 = v3 + 32;
    __int128 v92 = v109;
    uint64_t v80 = v3;
    swift_bridgeObjectRetain();
    uint64_t v10 = _swiftEmptyArrayStorage;
    __n128 v11 = _swiftEmptyArrayStorage;
    while (1)
    {
      sub_1000E2558(v9, (uint64_t)&v105);
      uint64_t v12 = sub_100008DB0(&qword_100131160);
      uint64_t inited = (__n128 *)swift_initStackObject(v12, &v104);
      sub_1000E3A5C( inited,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v80,  v82,  v84,  (uint64_t)v86,  v88,  v90,  (uint64_t)v92,  v94,  v21);
      sub_10001AFE4((uint64_t)&v105, v1);
      unint64_t v22 = v11[2];
      swift_bridgeObjectRetain();
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v23);
      if (!isUniquelyReferenced_nonNull_native || (unint64_t v25 = v11[3] >> 1, v26 = v11, v25 <= v22))
      {
        sub_1000D1E50(isUniquelyReferenced_nonNull_native, v22 + 1, 1, v11);
        uint64_t v26 = v27;
        unint64_t v25 = v27[3] >> 1;
      }

      unint64_t v28 = v26[2];
      if (v25 <= v28) {
        break;
      }
      uint64_t v29 = (uint64_t)&v26[5 * v28 + 4];
      sub_100008DB0((uint64_t *)&unk_1001323B0);
      sub_1000E39D8(v29);
      ++v26[2];
      uint64_t v30 = sub_100011958();
      unint64_t v31 = (__n128 *)sub_1000E3C34(v30, (uint64_t)v103);
      sub_1000E3A5C(v31, v32, v33, v34, v35, v36, v37, v38, v81, v83, v85, v87, v89, v91, v93, v95, v39);
      sub_10001AFE4((uint64_t)v92, v1);
      unint64_t v40 = v10[2];
      uint64_t v41 = sub_10000AFB0();
      int v42 = swift_isUniquelyReferenced_nonNull_native(v41);
      if (!v42 || (unint64_t v43 = v10[3] >> 1, v44 = v10, v43 <= v40))
      {
        sub_1000E3870(v42, v40 + 1);
        uint64_t v44 = v45;
        unint64_t v43 = v45[3] >> 1;
      }

      unint64_t v46 = v44[2];
      if (v43 <= v46) {
        goto LABEL_32;
      }
      uint64_t v2 = 40LL;
      sub_1000E39D8((uint64_t)&v44[5 * v46 + 4]);
      ++v44[2];
      sub_100011958();
      sub_10001DC30(&v105);
      sub_10001198C();
      swift_bridgeObjectRelease();
      v9 += 80LL;
      uint64_t v10 = v44;
      __n128 v11 = v26;
      if (!--v7)
      {
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
    }

    __break(1u);
LABEL_32:
    __break(1u);
  }

  else
  {
    uint64_t v26 = _swiftEmptyArrayStorage;
    uint64_t v44 = _swiftEmptyArrayStorage;
LABEL_14:
    uint64_t v47 = sub_100008DB0(&qword_1001347A8);
    uint64_t v48 = swift_allocObject(v47, 472LL, 7LL);
    *(_OWORD *)(v48 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F8150;
    uint64_t v49 = sub_100008DB0(&qword_100134618);
    *(void *)(v48 + 3sub_100096760(v0[56], v0 + 2) = 0x545245534E49LL;
    *(void *)(v48 + 40) = 0xE600000000000000LL;
    *(void *)(v48 + 48) = _swiftEmptyArrayStorage;
    *(void *)(v48 + 56) = v49;
    *(void *)(v48 + 96) = v49;
    *(void *)(v48 + 104) = &protocol witness table for Expression<A>;
    *(void *)(v48 + 64) = &protocol witness table for Expression<A>;
    *(void *)(v48 + 7sub_100096760(v0[56], v0 + 2) = 1330925129LL;
    *(void *)(v48 + 80) = 0xE400000000000000LL;
    *(void *)(v48 + 88) = _swiftEmptyArrayStorage;
    sub_100026F84();
    sub_1000D96A4();
    sub_1000D2EDC((uint64_t)v26, (uint64_t *)&v105);
    sub_1000E3688();
    sub_1000E387C();
    *(void *)(v48 + 15sub_100096760(v0[56], v0 + 2) = v48 + 112;
    *(void *)(v48 + 160) = v2;
    *(void *)(v48 + 168) = v1;
    *(void *)(v48 + 176) = v49;
    *(void *)(v48 + 2swift_unknownObjectWeakDestroy(v0 + 16) = v49;
    *(void *)(v48 + 224) = &protocol witness table for Expression<A>;
    *(void *)(v48 + 184) = &protocol witness table for Expression<A>;
    *(void *)(v48 + 19sub_100096760(v0[56], v0 + 2) = 0x5345554C4156LL;
    *(void *)(v48 + 200) = 0xE600000000000000LL;
    *(void *)(v48 + 208) = _swiftEmptyArrayStorage;
    sub_1000D2EDC((uint64_t)v44, (uint64_t *)&v105);
    sub_1000E3688();
    sub_1000E387C();
    sub_10000AEE8();
    sub_10001BEC0();
    *(void *)(v48 + 256) = v49;
    *(void *)(v48 + 264) = &protocol witness table for Expression<A>;
    *(void *)(v48 + 23sub_100096760(v0[56], v0 + 2) = v48 + 112;
    *(void *)(v48 + 240) = v2;
    *(void *)(v48 + 248) = v1;
    sub_1000DB55C(v90, v48 + 272);
    *(void *)(v48 + 336) = v49;
    *(void *)(v48 + 344) = &protocol witness table for Expression<A>;
    *(void *)(v48 + 31sub_100096760(v0[56], v0 + 2) = 0x4C464E4F43204E4FLL;
    *(void *)(v48 + 320) = 0xEB00000000544349LL;
    *(void *)(v48 + 328) = _swiftEmptyArrayStorage;
    uint64_t v50 = v86[3];
    uint64_t v51 = v86[4];
    uint64_t v52 = sub_100008D74(v86, v50);
    uint64_t v53 = v51;
    unint64_t v54 = _swiftEmptyArrayStorage;
    *(void *)(v48 + 35sub_100096760(v0[56], v0 + 2) = sub_1000D4984(v52, 0LL, 0xE000000000000000LL, v50, v53);
    *(void *)(v48 + 360) = v55;
    *(void *)(v48 + 368) = v56;
    *(void *)(v48 + 376) = v49;
    uint64_t v96 = v49;
    *(void *)(v48 + 4swift_unknownObjectWeakDestroy(v0 + 16) = v49;
    *(void *)(v48 + 424) = &protocol witness table for Expression<A>;
    *(void *)(v48 + 384) = &protocol witness table for Expression<A>;
    strcpy((char *)(v48 + 392), "DO UPDATE SET");
    *(_WORD *)(v48 + 406) = -4864;
    *(void *)(v48 + 408) = _swiftEmptyArrayStorage;
    unint64_t v57 = v88;
    uint64_t v58 = *(void *)(v88 + 16);
    if (v58)
    {
      *(void *)&__int128 v97 = _swiftEmptyArrayStorage;
      sub_1000E3974();
      uint64_t v59 = v88 + 32;
      unint64_t v54 = _swiftEmptyArrayStorage;
      do
      {
        sub_1000E2558(v59, (uint64_t)&v105);
        uint64_t v60 = sub_100008DB0(&qword_100131160);
        uint64_t v61 = swift_initStackObject(v60, v102);
        *(_OWORD *)(v61 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
        sub_10001AFE4((uint64_t)&v105, v61 + 32);
        sub_10001AFE4((uint64_t)v109, v61 + 72);
        sub_1000E391C(v61, (uint64_t *)&v99);
        uint64_t v62 = v100;
        uint64_t v63 = v101;
        sub_100008D74(&v99, v100);
        uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 8))(v62, v63);
        uint64_t v66 = v65;
        uint64_t v68 = v67;
        sub_10000AC58(&v99);
        sub_1000E3B90();
        sub_1000E3B74();
        sub_10001DC30(&v105);
        if ((swift_isUniquelyReferenced_nonNull_native(v54) & 1) == 0)
        {
          sub_1000E3680();
          unint64_t v54 = (void *)v97;
        }

        unint64_t v57 = v54[2];
        unint64_t v69 = v54[3];
        if (v57 >= v69 >> 1)
        {
          sub_1000760D0(v69);
          sub_1000E3680();
          unint64_t v54 = (void *)v97;
        }

        *(void *)&__int128 v105 = v64;
        *((void *)&v105 + 1) = v66;
        uint64_t v107 = v96;
        NSString v108 = &protocol witness table for Expression<A>;
        uint64_t v106 = v68;
        v54[2] = v57 + 1;
        sub_100009EEC(&v105, (uint64_t)&v54[5 * v57 + 4]);
        v59 += 80LL;
        --v58;
      }

      while (v58);
    }

    sub_1000D2EDC((uint64_t)v54, (uint64_t *)(v48 + 432));
    sub_10000ADB0();
    uint64_t v70 = _swiftEmptyArrayStorage;
    for (uint64_t i = 32LL; i != 472; i += 40LL)
    {
      sub_1000E3B98(v48 + i, (uint64_t)&v105);
      sub_1000E395C((uint64_t)&v105, (uint64_t)&v97);
      if (v98)
      {
        sub_100009EEC(&v97, (uint64_t)&v99);
        sub_100009EEC(&v99, (uint64_t)&v97);
        if ((swift_isUniquelyReferenced_nonNull_native(v70) & 1) == 0)
        {
          sub_1000E3870(0, v70[2] + 1LL);
          uint64_t v70 = v75;
        }

        uint64_t v72 = v70[2];
        sub_1000E3AA0();
        if (v74)
        {
          char v76 = sub_1000E37C8(v73);
          sub_1000D1E50(v76, v77, v78, v70);
          uint64_t v70 = v79;
        }

        uint64_t v70[2] = v57;
        sub_100009EEC(&v97, (uint64_t)&v70[5 * v72 + 4]);
      }

      else
      {
        sub_1000D3278((uint64_t)&v97);
      }
    }

    sub_100011958();
    sub_1000D2E38((uint64_t)v70, (uint64_t *)&v105);
    sub_10001198C();
    sub_1000E347C(&v105);
    sub_1000E35EC();
    sub_10000AC58(&v105);
    sub_1000E3520();
    sub_10000AD58();
  }

AppIntents_SQLite::Update __swiftcall QueryType.update(_:)(Swift::OpaquePointer a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = sub_100008DB0(&qword_1001347A8);
  uint64_t inited = swift_initStackObject(v8, &v49);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F60E0;
  uint64_t v10 = sub_100008DB0(&qword_100134618);
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = 0x455441445055LL;
  *(void *)(inited + 40) = 0xE600000000000000LL;
  __n128 v11 = _swiftEmptyArrayStorage;
  *(void *)(inited + 48) = _swiftEmptyArrayStorage;
  *(void *)(inited + 56) = v10;
  sub_100026F84();
  uint64_t v39 = v5;
  sub_1000D96A4();
  *(void *)(inited + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = v10;
  *(void *)(inited + 144) = &protocol witness table for Expression<A>;
  *(void *)(inited + 11sub_100096760(v0[56], v0 + 2) = 5522771LL;
  *(void *)(inited + 120) = 0xE300000000000000LL;
  *(void *)(inited + 128) = _swiftEmptyArrayStorage;
  uint64_t v12 = *(void *)(v7 + 16);
  if (v12)
  {
    uint64_t v37 = v3;
    uint64_t v38 = v1;
    *(void *)&__int128 v41 = _swiftEmptyArrayStorage;
    sub_1000E3974();
    uint64_t v13 = v7 + 32;
    __n128 v11 = _swiftEmptyArrayStorage;
    __int128 v40 = xmmword_1000F57D0;
    do
    {
      sub_1000E2558(v13, (uint64_t)v44);
      uint64_t v14 = sub_100008DB0(&qword_100131160);
      uint64_t v15 = swift_initStackObject(v14, &v43);
      *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = v40;
      sub_10001AFE4((uint64_t)v44, v15 + 32);
      sub_10001AFE4((uint64_t)&v45, v15 + 72);
      sub_1000E391C(v15, (uint64_t *)&v46);
      sub_1000D30C4();
      sub_100058868();
      sub_10001DC30(v44);
      if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      {
        sub_1000E3680();
        __n128 v11 = (void *)v41;
      }

      unint64_t v17 = v11[2];
      unint64_t v16 = v11[3];
      if (v17 >= v16 >> 1)
      {
        sub_1000760D0(v16);
        sub_1000E3680();
      }

      uint64_t v18 = v47;
      uint64_t v19 = v48;
      sub_1000E3B88((uint64_t)&v46);
      sub_1000E3964();
      __chkstk_darwin(v20);
      unint64_t v22 = (char *)&v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      sub_10003EE9C((uint64_t)v22, v24, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 16));
      sub_1000E24E0(v17, (uint64_t)v22, (uint64_t *)&v41, v18, v19);
      sub_10000AC58(&v46);
      __n128 v11 = (void *)v41;
      v13 += 80LL;
      --v12;
    }

    while (v12);
    uint64_t v3 = v37;
  }

  sub_1000D2EDC((uint64_t)v11, (uint64_t *)(inited + 152));
  sub_10001BC70();
  uint64_t v25 = v39;
  sub_1000DB55C(v3, inited + 192);
  sub_1000DBB34(v25, v3, inited + 232);
  sub_1000DBE30(v3, inited + 272);
  uint64_t v26 = _swiftEmptyArrayStorage;
  for (uint64_t i = 32LL; i != 312; i += 40LL)
  {
    sub_100026CB8(inited + i, (uint64_t)v44, &qword_1001347B0);
    sub_100026C8C((uint64_t)v44, (uint64_t)&v41, &qword_1001347B0);
    if (v42)
    {
      sub_100009EEC(&v41, (uint64_t)&v46);
      if ((sub_1000E3A70(&v46, (uint64_t)&v41) & 1) == 0)
      {
        sub_1000E3538();
        uint64_t v26 = v30;
      }

      unint64_t v29 = v26[2];
      unint64_t v28 = v26[3];
      if (v29 >= v28 >> 1)
      {
        char v31 = sub_1000760D0(v28);
        sub_1000E3550(v31, v29 + 1);
        uint64_t v26 = v32;
      }

      __int128 v26[2] = v29 + 1;
      sub_100009EEC(&v41, (uint64_t)&v26[5 * v29 + 4]);
    }

    else
    {
      sub_10001B60C((uint64_t)&v41, &qword_1001347B0);
    }
  }

  sub_100011958();
  sub_1000D2E38((uint64_t)v26, v44);
  sub_10000ADB0();
  sub_1000D8BEC(v44);
  sub_10000AC58(v44);
  sub_10000AD58();
  result.bindings._rawValue = v35;
  result.template._object = v34;
  result.template._uint64_t countAndFlagsBits = v33;
  return result;
}

AppIntents_SQLite::Delete __swiftcall QueryType.delete()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100008DB0(&qword_1001347A8);
  uint64_t v10 = sub_1000E3C50( v2,  v3,  v4,  v5,  v6,  v7,  v8,  v9,  v32,  *((uint64_t *)&v32 + 1),  v33,  v34,  v35,  v36,  *((uint64_t *)&v36 + 1),  v37);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5B50;
  uint64_t v11 = sub_100008DB0(&qword_100134618);
  *(void *)(v10 + 64) = &protocol witness table for Expression<A>;
  *(void *)(v10 + 3sub_100096760(v0[56], v0 + 2) = 0x46204554454C4544LL;
  *(void *)(v10 + 40) = 0xEB000000004D4F52LL;
  uint64_t v12 = _swiftEmptyArrayStorage;
  *(void *)(v10 + 48) = _swiftEmptyArrayStorage;
  *(void *)(v10 + 56) = v11;
  sub_1000E3900();
  sub_100026F84();
  sub_1000D96A4();
  sub_1000E3900();
  sub_1000DB55C(v13, v14);
  uint64_t v15 = sub_1000E3900();
  sub_1000DBB34(v15, v16, v17);
  sub_1000E3900();
  sub_1000DBE30(v18, v19);
  for (uint64_t i = 32LL; i != 232; i += 40LL)
  {
    sub_1000E3B98(v10 + i, (uint64_t)v38);
    sub_1000E395C((uint64_t)v38, (uint64_t)&v32);
    if (v34)
    {
      sub_100009EEC(&v32, (uint64_t)&v36);
      sub_100009EEC(&v36, (uint64_t)&v32);
      if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
      {
        sub_1000D1E50(0, v12[2] + 1LL, 1, v12);
        uint64_t v12 = v24;
      }

      uint64_t v21 = v12[2];
      sub_1000E3AA0();
      if (v23)
      {
        char v25 = sub_1000E37C8(v22);
        sub_1000D1E50(v25, v26, v27, v12);
        uint64_t v12 = v28;
      }

      v12[2] = v1;
      sub_1000D3568((uint64_t)&v12[5 * v21], v32);
    }

    else
    {
      sub_1000D3278((uint64_t)&v32);
    }
  }

  sub_10001198C();
  sub_1000D2E38((uint64_t)v12, v38);
  sub_100011958();
  sub_1000E347C(v38);
  sub_10000AC58(v38);
  uint64_t v29 = sub_1000E3520();
  result.bindings._rawValue = v31;
  result.template._object = v30;
  result.template._uint64_t countAndFlagsBits = v29;
  return result;
}

uint64_t QueryType.exists.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008DB0(&qword_100131160);
  uint64_t inited = swift_initStackObject(v4, v16);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
  uint64_t v6 = sub_100008DB0(&qword_100134618);
  *(void *)(inited + 64) = &protocol witness table for Expression<A>;
  strcpy((char *)(inited + 32), "SELECT EXISTS");
  *(_WORD *)(inited + 46) = -4864;
  *(void *)(inited + 48) = _swiftEmptyArrayStorage;
  *(void *)(inited + 56) = v6;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(a2 + 8) + 8LL))(a1);
  uint64_t v10 = sub_1000E3280(v7, v8, v9, 0LL, 0xE000000000000000LL, &qword_100134618);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  sub_100011958();
  sub_10000ADB0();
  *(void *)(inited + 96) = v6;
  *(void *)(inited + 104) = &protocol witness table for Expression<A>;
  *(void *)(inited + 7sub_100096760(v0[56], v0 + 2) = v10;
  *(void *)(inited + 80) = v12;
  *(void *)(inited + 88) = v14;
  sub_1000D2E38(inited, v17);
  swift_setDeallocating(inited);
  sub_100058868();
  sub_1000E347C(v17);
  sub_1000E35EC();
  sub_10000AC58(v17);
  return sub_1000E3520();
}

uint64_t QueryType.namespace<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for Expression(0LL, a5, a3, a4);
  uint64_t v9 = sub_100008DB0(&qword_100131160);
  uint64_t inited = swift_initStackObject(v9, v18);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
  sub_1000E3BA0();
  sub_1000E3BFC();
  *(void *)(inited + 96) = v8;
  *(void *)(inited + 104) = &protocol witness table for Expression<A>;
  *(void *)(inited + 7sub_100096760(v0[56], v0 + 2) = a1;
  *(void *)(inited + 80) = a2;
  *(void *)(inited + 88) = a3;
  sub_10001BD0C();
  sub_10001C064();
  sub_1000D2E44(inited, 46LL, v19);
  sub_1000E3B90();
  sub_1000E3B74();
  v17[0] = sub_1000D8BEC(v19);
  v17[1] = v11;
  void v17[2] = v12;
  uint64_t v13 = sub_100008DB0(&qword_100134618);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v8);
  sub_100026D98(&qword_1001348D0, &qword_100134618, (uint64_t)&protocol conformance descriptor for Expression<A>);
  ExpressionType.init<A>(_:)((uint64_t)v17, v8, v13, WitnessTable, v15);
  sub_10000AC58(v19);
  return v19[5];
}

uint64_t QueryType.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for Optional(0LL, a5);
  return QueryType.namespace<A>(_:)(a1, a2, a3, a4, v9);
}

uint64_t QueryType.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_1000E38C4();
  uint64_t v6 = v5(v4);
  QueryType.namespace<A>(_:)(v6, v7, v8, a3, (uint64_t)&type metadata for () + 8);
  sub_1000E35EC();
  sub_10000AEE8();
  sub_10001BE7C();
  return sub_1000E3520();
}

void sub_1000DECD4()
{
  uint64_t v1 = sub_100008DB0(&qword_1001347A8);
  uint64_t v9 = sub_1000E3C50( v1,  v2,  v3,  v4,  v5,  v6,  v7,  v8,  v41,  *((uint64_t *)&v41 + 1),  v42,  v43,  v44,  v45,  *((uint64_t *)&v45 + 1),  v46);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F60E0;
  sub_1000DAC38();
  sub_1000DAEDC();
  sub_1000DB484((uint64_t *)(v9 + 112));
  sub_1000DB6A0((uint64_t *)(v9 + 152));
  sub_1000DC010();
  sub_1000DBA70((uint64_t *)(v9 + 232));
  sub_1000DBC84((uint64_t *)(v9 + 272));
  uint64_t v18 = _swiftEmptyArrayStorage;
  for (uint64_t i = 32LL; i != 312; i += 40LL)
  {
    sub_1000E3A08(v10, v11, v12, v13, v14, v15, v16, v17, v41, *((uint64_t *)&v41 + 1));
    sub_1000E39F8( v20,  v21,  v22,  v23,  v24,  v25,  v26,  v27,  v41,  *((uint64_t *)&v41 + 1),  v42,  v43,  v44,  v45,  *((uint64_t *)&v45 + 1),  v46,  v47,  v48,  v49[0]);
    if (v43)
    {
      sub_100009EEC(&v41, (uint64_t)&v45);
      if ((sub_1000E3A70(&v45, (uint64_t)&v41) & 1) == 0)
      {
        sub_1000E3538();
        uint64_t v18 = v39;
      }

      uint64_t v36 = v18[2];
      sub_1000E3AA0();
      if (v38)
      {
        sub_1000E3550(v37 > 1, v0);
        uint64_t v18 = v40;
      }

      void v18[2] = v0;
      uint64_t v10 = sub_1000D3568((uint64_t)&v18[5 * v36], v41);
    }

    else
    {
      sub_1000E3B00(v28, v29, v30, v31, v32, v33, v34, v35, v41);
    }
  }

  sub_10001198C();
  sub_1000D2E38((uint64_t)v18, v49);
  sub_10000ADB0();
  sub_1000E347C(v49);
  sub_10000AC58(v49);
  sub_1000E3AAC();
  sub_10001BE4C();
}

void QueryType.expression.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100008DB0(&qword_1001347A8);
  *(_OWORD *)(sub_1000E3C50( v2,  v3,  v4,  v5,  v6,  v7,  v8,  v9,  v59,  *((uint64_t *)&v59 + 1),  v60,  v61,  v62,  v63,  *((uint64_t *)&v63 + 1),  v64)
            + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F60E0;
  uint64_t v10 = sub_1000E37DC();
  sub_1000DAD50(v10, v11, v12);
  uint64_t v13 = sub_1000E37DC();
  sub_1000DAFF8(v13, v14, v15);
  sub_1000E37DC();
  sub_1000DB55C(v16, v17);
  sub_1000E37DC();
  sub_1000DB844(v18, v19);
  uint64_t v20 = sub_1000E37DC();
  sub_1000DC228(v20, v21, v22);
  uint64_t v23 = sub_1000E37DC();
  sub_1000DBB34(v23, v24, v25);
  sub_1000E37DC();
  sub_1000DBE30(v26, v27);
  uint64_t v36 = _swiftEmptyArrayStorage;
  for (uint64_t i = 32LL; i != 312; i += 40LL)
  {
    sub_1000E3A08(v28, v29, v30, v31, v32, v33, v34, v35, v59, *((uint64_t *)&v59 + 1));
    sub_1000E39F8( v38,  v39,  v40,  v41,  v42,  v43,  v44,  v45,  v59,  *((uint64_t *)&v59 + 1),  v60,  v61,  v62,  v63,  *((uint64_t *)&v63 + 1),  v64,  v65,  v66,  v67[0]);
    if (v61)
    {
      sub_100009EEC(&v59, (uint64_t)&v63);
      if ((sub_1000E3A70(&v63, (uint64_t)&v59) & 1) == 0)
      {
        sub_1000E3538();
        uint64_t v36 = v57;
      }

      uint64_t v54 = v36[2];
      sub_1000E3AA0();
      if (v56)
      {
        sub_1000E3550(v55 > 1, v1);
        uint64_t v36 = v58;
      }

      void v36[2] = v1;
      uint64_t v28 = sub_1000D3568((uint64_t)&v36[5 * v54], v59);
    }

    else
    {
      sub_1000E3B00(v46, v47, v48, v49, v50, v51, v52, v53, v59);
    }
  }

  sub_10001198C();
  sub_1000D2E38((uint64_t)v36, v67);
  sub_10000ADB0();
  sub_1000E347C(v67);
  sub_10000AC58(v67);
  sub_1000E3AAC();
  sub_10001BE4C();
}

uint64_t (*Update.template.modify())(void, void)
{
  return Int64.datatypeValue.getter;
}

void sub_1000DEFAC()
{
}

uint64_t static View.identifier.getter()
{
  return 1464158550LL;
}

void sub_1000DEFC8()
{
}

uint64_t static VirtualTable.identifier.getter()
{
  return 0x204C415554524956LL;
}

void VirtualTable.clauses.setter(const void *a1)
{
}

void ScalarQuery.init(_:database:)()
{
  uint64_t v0 = sub_100008DB0(&qword_100131160);
  *(_OWORD *)(sub_1000E3514(v0) + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5520;
  sub_100008DB0(&qword_100134618);
  sub_1000E3B2C((uint64_t)&protocol witness table for Expression<A>);
  sub_1000E34CC(v1, (uint64_t)_swiftEmptyArrayStorage);
  sub_1000E385C();
}

uint64_t _s17AppIntents_SQLite5TableV7clausesAA12QueryClausesVvg_0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E25B0(v1, a1);
}

void *sub_1000DF0D8(const void *a1)
{
  return memcpy(v1, a1, 0xA8uLL);
}

void sub_1000DF124()
{
}

void Select.template.setter()
{
  *uint64_t v1 = v2;
  v1[1] = v0;
  sub_10000AF74();
}

void Select.bindings.setter(uint64_t a1)
{
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  sub_10000ADA8();
}

uint64_t (*Update.bindings.modify())(void, void)
{
  return Int64.datatypeValue.getter;
}

uint64_t sub_1000DF184@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = Int64.datatypeValue.getter(a1, a2);
  *a3 = result;
  a3[1] = v5;
  a3[2] = v6;
  return result;
}

uint64_t sub_1000DF1B0(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t sub_1000DF1F0()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t sub_1000DF21C()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 16));
}

AppIntents_SQLite::Row_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> RowIterator.failableNext()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  unint64_t v4 = (unint64_t)Statement.failableNext()();
  if (!v5)
  {
    uint64_t v3 = (void *)v4;
    if (v4) {
      sub_10000AFB0();
    }
    else {
      uint64_t v2 = 0LL;
    }
  }

  uint64_t v6 = v2;
  uint64_t v7 = v3;
  result.value.values._rawValue = v7;
  result.value.columnNames._rawValue = v6;
  return result;
}

void RowIterator.map<A>(_:)()
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  __chkstk_darwin(v4);
  sub_1000E364C();
  Array.init()(v6, v7);
  unint64_t v8 = sub_1000E3A28();
  if (v0)
  {
    sub_10001BEC0();
  }

  else
  {
    for (unint64_t i = v8; i; unint64_t i = sub_1000E3A28())
    {
      uint64_t v10 = sub_1000119E4();
      v5(v10, i);
      sub_10001DED8();
      sub_10001BC70();
      uint64_t v11 = type metadata accessor for Array(0LL, v3);
      Array.append(_:)(v1, v11);
    }
  }

  sub_10001DEE8();
}

void RowIterator.compactMap<A>(_:)()
{
  uint64_t v1 = v0;
  uint64_t v28 = v2;
  uint64_t v29 = v3;
  uint64_t v4 = type metadata accessor for Optional(0LL, v0);
  uint64_t v26 = *(void *)(v4 - 8);
  uint64_t v27 = v4;
  sub_1000D3708();
  __chkstk_darwin(v5);
  double v7 = (char *)&v24 - v6;
  uint64_t v24 = *(void *)(v1 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  double v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - v13;
  Array.init()(v1, v12);
  unint64_t v15 = (unint64_t)Statement.failableNext()();
  uint64_t v17 = v16;
  if (v16)
  {
LABEL_2:
    sub_10001BE7C();
  }

  else
  {
    unint64_t v18 = v15;
    uint64_t v25 = v10;
    uint64_t v19 = v24;
    while (v18)
    {
      uint64_t v20 = sub_10000AFB0();
      v28(v20, v18);
      if (v17)
      {
        sub_10001BEC0();
        sub_10001198C();
        goto LABEL_2;
      }

      sub_10001BEC0();
      sub_10001198C();
      if (sub_100009E6C((uint64_t)v7, 1LL, v1) == 1)
      {
        (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v27);
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v14, v7, v1);
        uint64_t v21 = v25;
        (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v25, v14, v1);
        uint64_t v22 = type metadata accessor for Array(0LL, v1);
        Array.append(_:)(v21, v22);
        (*(void (**)(char *, uint64_t))(v19 + 8))(v14, v1);
      }

      unint64_t v18 = (unint64_t)Statement.failableNext()();
      uint64_t v17 = v23;
      if (v23) {
        goto LABEL_2;
      }
    }
  }

  sub_10001DEE8();
}

void *sub_1000DF53C@<X0>(AppIntents_SQLite::Row_optional *a1@<X8>)
{
  AppIntents_SQLite::Row_optional v3 = RowIterator.failableNext()();
  AppIntents_SQLite::Row_optional result = v3.value.columnNames._rawValue;
  if (!v4) {
    *a1 = v3;
  }
  return result;
}

uint64_t sub_1000DF568@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000E9670();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t Connection.prepare(_:)(void *a1)
{
  uint64_t v2 = sub_1000E3584(a1);
  sub_1000E3C44(v2, v3, (uint64_t)_swiftEmptyArrayStorage);
  if (v1)
  {
    sub_10001DF40();
    return sub_10001BEC0();
  }

  else
  {
    uint64_t v5 = sub_1000E3C20();
    sub_10001DF40();
    sub_10001BEC0();
    sub_1000389DC();
    uint64_t v6 = sub_1000E390C();
    uint64_t v7 = sub_1000E3C08((uint64_t)&unk_100127940);
    *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
    *(void *)(v7 + 24) = v6;
    uint64_t v8 = sub_100008DB0(&qword_1001348D8);
    uint64_t result = sub_1000E3C08(v8);
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1000E26A4;
    *(void *)(result + 24) = v7;
  }

  return result;
}

uint64_t sub_1000DF650(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = swift_allocObject(&unk_100128198, 24LL, 7LL);
  uint64_t v5 = swift_allocObject(&unk_1001281C0, 24LL, 7LL);
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = &_swiftEmptyDictionarySingleton;
  uint64_t v129 = (void *)(v4 + 16);
  uint64_t v134 = (void *)v5;
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  uint64_t v6 = (void *)(v5 + 16);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v139 = a1;
  sub_100008D74(a1, v7);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v8 + 16))(v160, v7, v8);
  uint64_t v9 = v160[1];
  swift_bridgeObjectRetain();
  sub_1000E25E4(v160);
  uint64_t v130 = *(void *)(v9 + 16);
  if (!v130)
  {
    swift_bridgeObjectRelease(v9);
LABEL_90:
    swift_beginAccess(v129, &v148, 0LL, 0LL);
    uint64_t v93 = *(void *)(v4 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    return v93;
  }

  uint64_t v133 = v9 + 32;
  uint64_t v127 = v6;
  swift_beginAccess(v6, v159, 1LL, 0LL);
  unint64_t v10 = 0LL;
  uint64_t v131 = v9;
  uint64_t v132 = (void *)v4;
  while (2)
  {
    if (v10 >= *(void *)(v9 + 16))
    {
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
      goto LABEL_102;
    }

    unint64_t v135 = v10;
    sub_10001AFE4(v133 + 40 * v10, (uint64_t)v156);
    uint64_t v11 = v157;
    uint64_t v12 = v158;
    sub_100008D74(v156, v157);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
    unint64_t v15 = v14;
    swift_bridgeObjectRelease(v16);
    uint64_t v17 = HIBYTE(v15) & 0xF;
    if ((v15 & 0x2000000000000000LL) == 0) {
      uint64_t v17 = v13 & 0xFFFFFFFFFFFFLL;
    }
    if (!v17)
    {
      swift_bridgeObjectRelease(v15);
      uint64_t v141 = _swiftEmptyArrayStorage;
      goto LABEL_36;
    }

    uint64_t v136 = v2;
    uint64_t v18 = 7LL;
    if (((v15 >> 60) & ((v13 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v18 = 11LL;
    }
    uint64_t v128 = v18 | (v17 << 16);
    unint64_t v19 = 4 * v17;
    unint64_t v20 = 15LL;
    unint64_t v21 = 15LL;
    unint64_t v22 = 15LL;
    uint64_t v141 = _swiftEmptyArrayStorage;
    uint64_t v140 = 4 * v17;
    do
    {
      uint64_t v23 = String.subscript.getter(v20, v13, v15);
      if (v23 == 46 && v24 == 0xE100000000000000LL)
      {
        swift_bridgeObjectRelease(0xE100000000000000LL);
      }

      else
      {
        uint64_t v26 = v24;
        char v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, 46LL, 0xE100000000000000LL, 0LL);
        swift_bridgeObjectRelease(v26);
        if ((v27 & 1) == 0)
        {
          unint64_t v20 = String.index(after:)(v20, v13, v15);
          continue;
        }
      }

      if (v21 >> 14 != v20 >> 14)
      {
        if (v20 >> 14 < v21 >> 14)
        {
          __break(1u);
          goto LABEL_97;
        }

        uint64_t v28 = String.subscript.getter(v21, v20);
        uint64_t v30 = v29;
        uint64_t v32 = v31;
        uint64_t v34 = v33;
        if ((swift_isUniquelyReferenced_nonNull_native(v141) & 1) == 0)
        {
          sub_1000D2240();
          uint64_t v141 = v37;
        }

        unint64_t v35 = v141[2];
        if (v35 >= v141[3] >> 1)
        {
          sub_1000D2240();
          uint64_t v141 = v38;
        }

        v141[2] = v35 + 1;
        uint64_t v36 = &v141[4 * v35];
        v36[4] = v28;
        v36[5] = v30;
        v36[6] = v32;
        v36[7] = v34;
        unint64_t v19 = v140;
      }

      unint64_t v20 = String.index(after:)(v20, v13, v15);
      unint64_t v21 = v20;
      unint64_t v22 = v20;
    }

    while (v19 != v20 >> 14);
    if (v19 == v21 >> 14)
    {
      swift_bridgeObjectRelease(v15);
    }

    else
    {
      if (v19 < v22 >> 14) {
        goto LABEL_100;
      }
      uint64_t v39 = String.subscript.getter(v22, v128);
      uint64_t v41 = v40;
      uint64_t v43 = v42;
      uint64_t v45 = v44;
      swift_bridgeObjectRelease(v15);
      if ((swift_isUniquelyReferenced_nonNull_native(v141) & 1) == 0)
      {
        sub_1000D2240();
        uint64_t v141 = v121;
      }

      unint64_t v46 = v141[2];
      if (v46 >= v141[3] >> 1)
      {
        sub_1000D2240();
        uint64_t v141 = v122;
      }

      v141[2] = v46 + 1;
      uint64_t v47 = &v141[4 * v46];
      v47[4] = v39;
      v47[5] = v41;
      v47[6] = v43;
      v47[7] = v45;
    }

    uint64_t v2 = v136;
LABEL_36:
    uint64_t v48 = sub_1000D99A4((uint64_t)v141);
    swift_bridgeObjectRelease(v141);
    if (!v48[2]) {
      goto LABEL_98;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v48) & 1) == 0)
    {
      sub_1000E33C8();
      uint64_t v48 = v120;
    }

    uint64_t v49 = v48[2];
    if (!v49) {
      goto LABEL_99;
    }
    uint64_t v137 = v2;
    uint64_t v50 = v49 - 1;
    uint64_t v51 = &v48[2 * v50];
    uint64_t v53 = v51[4];
    uint64_t v52 = v51[5];
    v48[2] = v50;
    uint64_t v148 = v48;
    swift_bridgeObjectRetain();
    uint64_t v54 = sub_100008DB0((uint64_t *)&unk_100132780);
    sub_100026D98( (unint64_t *)&qword_100131990,  (uint64_t *)&unk_100132780,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v56 = BidirectionalCollection<>.joined(separator:)(46LL, 0xE100000000000000LL, v54, v55);
    unint64_t v58 = v57;
    swift_bridgeObjectRelease(v48);
    if (v53 == 42 && v52 == 0xE100000000000000LL)
    {
      swift_bridgeObjectRelease(0xE100000000000000LL);
LABEL_52:
      sub_10001AFE4((uint64_t)v139, (uint64_t)v153);
      uint64_t v81 = sub_100008DB0(&qword_100131160);
      uint64_t v82 = swift_allocObject(v81, 72LL, 7LL);
      *(_OWORD *)(v82 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5520;
      *(void *)(v82 + 56) = sub_100008DB0(&qword_100134618);
      *(void *)(v82 + 64) = &protocol witness table for Expression<A>;
      *(void *)(v82 + 3sub_100096760(v0[56], v0 + 2) = 42LL;
      *(void *)(v82 + 40) = 0xE100000000000000LL;
      *(void *)(v82 + 48) = _swiftEmptyArrayStorage;
      uint64_t v83 = v154;
      uint64_t v84 = v155;
      sub_10004BB58((uint64_t)v153, v154);
      uint64_t v85 = (void (*)(void **, void))(*(uint64_t (**)(void **, uint64_t, uint64_t))(v84 + 32))( &v148,  v83,  v84);
      *(_BYTE *)uint64_t v86 = 0;
      uint64_t v87 = *(void *)(v86 + 8);
      *(void *)(v86 + 8) = v82;
      swift_bridgeObjectRelease(v87);
      v85(&v148, 0LL);
      uint64_t v88 = sub_100008DB0(&qword_100134888);
      uint64_t v89 = swift_allocObject(v88, 72LL, 7LL);
      *(_OWORD *)(v89 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5520;
      uint64_t v142 = v89;
      sub_10001AFE4((uint64_t)v153, v89 + 32);
      uint64_t v90 = v139[3];
      uint64_t v91 = v139[4];
      sub_100008D74(v139, v90);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v91 + 16))(v161, v90, v91);
      uint64_t v92 = v162;
      uint64_t v166 = v162;
      swift_bridgeObjectRetain();
      sub_1000E25E4(v161);
      uint64_t v93 = *(void *)(v92 + 16);
      if (v93)
      {
        uint64_t v152 = _swiftEmptyArrayStorage;
        sub_1000D3A18();
        uint64_t v94 = v92 + 32;
        uint64_t v95 = v152;
        do
        {
          sub_100026CB8(v94, (uint64_t)&v148, &qword_1001348A0);
          LOBYTE(v143) = (_BYTE)v148;
          sub_10001AFE4((uint64_t)v149, (uint64_t)&v144);
          sub_10001AFE4((uint64_t)&v150, (uint64_t)v147);
          sub_100009EEC(&v144, (uint64_t)v151);
          sub_10000AC58(v147);
          sub_10001B60C((uint64_t)&v148, &qword_1001348A0);
          if ((swift_isUniquelyReferenced_nonNull_native(v95) & 1) == 0)
          {
            sub_1000D3A18();
            uint64_t v95 = v152;
          }

          unint64_t v96 = v95[2];
          if (v96 >= v95[3] >> 1)
          {
            sub_1000D3A18();
            uint64_t v95 = v152;
          }

          v95[2] = v96 + 1;
          sub_100009EEC(v151, (uint64_t)&v95[5 * v96 + 4]);
          v94 += 88LL;
          --v93;
        }

        while (v93);
        sub_10000A054(&v166);
        swift_bridgeObjectRelease(v48);
      }

      else
      {
        sub_10000A054(&v166);
        swift_bridgeObjectRelease(v48);
        uint64_t v95 = _swiftEmptyArrayStorage;
      }

      uint64_t v148 = (void *)v142;
      sub_1000D4CF0((uint64_t)v95);
      __int128 v97 = v148;
      uint64_t v98 = HIBYTE(v58) & 0xF;
      if ((v58 & 0x2000000000000000LL) == 0) {
        uint64_t v98 = v56 & 0xFFFFFFFFFFFFLL;
      }
      if (v98)
      {
        uint64_t v99 = v148[2];
        if (v99)
        {
          uint64_t v93 = (uint64_t)(v148 + 4);
          while (1)
          {
            sub_10001AFE4(v93, (uint64_t)&v148);
            sub_100008D74(&v148, v149[2]);
            sub_100026F84();
            sub_1000D96A4();
            uint64_t v100 = v145;
            uint64_t v101 = v146;
            sub_100008D74(&v143, v145);
            uint64_t v102 = (*(uint64_t (**)(uint64_t, uint64_t))(v101 + 8))(v100, v101);
            uint64_t v104 = v103;
            swift_bridgeObjectRelease(v105);
            if (v102 == v56 && v104 == v58) {
              break;
            }
            char v107 = _stringCompareWithSmolCheck(_:_:expecting:)(v102, v104, v56, v58, 0LL);
            swift_bridgeObjectRelease(v104);
            sub_10000AC58(&v143);
            if ((v107 & 1) != 0) {
              goto LABEL_79;
            }
            sub_10000AC58(&v148);
            v93 += 40LL;
            if (!--v99) {
              goto LABEL_91;
            }
          }

          swift_bridgeObjectRelease(v58);
          sub_10000AC58(&v143);
LABEL_79:
          swift_bridgeObjectRelease(v58);
          swift_bridgeObjectRelease(v97);
          uint64_t v93 = (uint64_t)v138;
          swift_retain();
          uint64_t v4 = (uint64_t)v132;
          sub_1000E04D0(&v148, v138, 1, v132, v134);
          uint64_t v2 = v137;
          uint64_t v9 = v131;
          unint64_t v114 = v135;
          if (!v137)
          {
            swift_release();
            sub_10000AC58(&v148);
            sub_10000AC58(v153);
            goto LABEL_87;
          }

          swift_retain();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease(v131);
          sub_10000AC58(&v148);
        }

        else
        {
LABEL_91:
          swift_bridgeObjectRelease(v131);
          swift_bridgeObjectRelease(v97);
          unint64_t v123 = sub_1000E26B8();
          uint64_t v124 = swift_allocError(&type metadata for QueryError, v123, 0LL, 0LL);
          *(void *)uint64_t v125 = v56;
          *(void *)(v125 + 8) = v58;
          *(void *)(v125 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
          *(_BYTE *)(v125 + 24) = 0;
          swift_willThrow(v124);
        }

LABEL_93:
        sub_10000AC58(v153);
        sub_10000AC58(v156);
        swift_release();
        swift_release();
        return v93;
      }

      swift_bridgeObjectRelease(v58);
      uint64_t v108 = v97[2];
      uint64_t v2 = v137;
      if (v108)
      {
        uint64_t v93 = (uint64_t)(v97 + 4);
        uint64_t v4 = (uint64_t)v132;
        while (1)
        {
          sub_10001AFE4(v93, (uint64_t)&v148);
          uint64_t v109 = v2;
          uint64_t v110 = v139[3];
          uint64_t v111 = v139[4];
          sub_100008D74(v139, v110);
          (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v111 + 16))(v163, v110, v111);
          uint64_t v112 = v164;
          uint64_t v165 = v164;
          swift_bridgeObjectRetain();
          sub_1000E25E4(v163);
          uint64_t v113 = *(void *)(v112 + 16);
          sub_10000A054(&v165);
          swift_retain();
          sub_1000E04D0(&v148, v138, v113 != 0, v132, v134);
          uint64_t v2 = v109;
          if (v109) {
            break;
          }
          swift_retain();
          swift_retain();
          sub_10000AC58(&v148);
          swift_release();
          swift_release();
          swift_release();
          v93 += 40LL;
          if (!--v108)
          {
            swift_bridgeObjectRelease(v97);
            goto LABEL_86;
          }
        }

        swift_release();
        sub_10000AC58(&v148);
        swift_bridgeObjectRelease(v131);
        swift_bridgeObjectRelease(v97);
        goto LABEL_93;
      }

      swift_bridgeObjectRelease(v97);
      uint64_t v4 = (uint64_t)v132;
LABEL_86:
      sub_10000AC58(v153);
      unint64_t v114 = v135;
      uint64_t v9 = v131;
LABEL_87:
      unint64_t v10 = v114 + 1;
      sub_10000AC58(v156);
      if (v10 == v130)
      {
        swift_bridgeObjectRelease(v9);
        goto LABEL_90;
      }

      continue;
    }

    break;
  }

  char v60 = _stringCompareWithSmolCheck(_:_:expecting:)(v53, v52, 42LL, 0xE100000000000000LL, 0LL);
  swift_bridgeObjectRelease(v52);
  if ((v60 & 1) != 0) {
    goto LABEL_52;
  }
  swift_bridgeObjectRelease(v58);
  swift_bridgeObjectRelease(v48);
  uint64_t v61 = v157;
  uint64_t v62 = v158;
  sub_100008D74(v156, v157);
  uint64_t v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 8))(v61, v62);
  uint64_t v65 = v64;
  swift_bridgeObjectRelease(v66);
  uint64_t v67 = *v127;
  swift_beginAccess(v129, &v148, 33LL, 0LL);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v129);
  uint64_t v143 = (void *)*v129;
  unint64_t v69 = v143;
  *uint64_t v129 = 0x8000000000000000LL;
  uint64_t v70 = sub_100015F98(v63, v65);
  uint64_t v72 = v69[2];
  BOOL v73 = (v71 & 1) == 0;
  Swift::Int v74 = v72 + v73;
  if (__OFADD__(v72, v73)) {
    goto LABEL_101;
  }
  unint64_t v75 = v70;
  char v76 = v71;
  sub_100008DB0(&qword_100134AD8);
  Swift::Bool v77 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v74);
  uint64_t v4 = (uint64_t)v132;
  if (!v77) {
    goto LABEL_49;
  }
  uint64_t v78 = sub_100015F98(v63, v65);
  if ((v76 & 1) == (v79 & 1))
  {
    unint64_t v75 = v78;
LABEL_49:
    uint64_t v80 = v143;
    if ((v76 & 1) != 0)
    {
      *(void *)(v143[7] + 8 * v75) = v67;
      goto LABEL_83;
    }

    v143[(v75 >> 6) + 8] |= 1LL << v75;
    uint64_t v115 = (uint64_t *)(v80[6] + 16 * v75);
    *uint64_t v115 = v63;
    v115[1] = v65;
    *(void *)(v80[7] + 8 * v75) = v67;
    uint64_t v116 = v80[2];
    BOOL v117 = __OFADD__(v116, 1LL);
    uint64_t v118 = v116 + 1;
    if (!v117)
    {
      uint64_t v80[2] = v118;
      swift_bridgeObjectRetain();
LABEL_83:
      uint64_t v119 = *v129;
      *uint64_t v129 = v80;
      swift_bridgeObjectRelease(v65);
      swift_bridgeObjectRelease(v119);
      swift_endAccess(&v148);
      uint64_t v2 = v137;
      uint64_t v9 = v131;
      unint64_t v114 = v135;
      if (!__OFADD__(*v127, 1LL))
      {
        ++*v127;
        goto LABEL_87;
      }

double sub_1000E0344@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = swift_allocObject(&unk_100128170, 32LL, 7LL);
  *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v7 = sub_100008DB0(&qword_100134AD0);
  uint64_t v8 = swift_allocObject(v7, 32LL, 7LL);
  *(void *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1000E3390;
  *(void *)(v8 + 24) = v6;
  *a3 = v8;
  swift_retain();
  *(void *)&double result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

void sub_1000E03C0(uint64_t a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = (unint64_t)Statement.failableNext()();
  if (v5)
  {
    swift_unexpectedError(v5, "AppIntents_SQLite/Statement.swift", 33LL, 1LL, 211LL);
    __break(1u);
  }

  else
  {
    unint64_t v6 = v4;
    if (v4) {
      swift_bridgeObjectRetain();
    }
    else {
      a1 = 0LL;
    }
    *a2 = a1;
    a2[1] = v6;
  }

uint64_t Connection.prepareRowIterator(_:)(void *a1)
{
  uint64_t v3 = sub_1000E3584(a1);
  sub_1000E3C44(v3, v4, (uint64_t)_swiftEmptyArrayStorage);
  if (v1)
  {
    sub_10001DF40();
    sub_10001BEC0();
  }

  else
  {
    uint64_t v2 = sub_1000E3C20();
    sub_10001DF40();
    sub_10001BEC0();
    sub_1000389DC();
    sub_1000E390C();
  }

  return v2;
}

uint64_t sub_1000E04D0(void *a1, void *a2, int a3, void *a4, void *a5)
{
  uint64_t v93 = a2;
  uint64_t v90 = a4;
  uint64_t v91 = a5;
  LODWORD(v89) = a3;
  uint64_t v6 = a1[3];
  uint64_t v7 = sub_100008D74(a1, v6);
  uint64_t DynamicType = swift_getDynamicType(v7, v6, 1LL);
  uint64_t v10 = a1[3];
  uint64_t v9 = a1[4];
  sub_100008D74(a1, v10);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v9 + 16))(v102, v10, v9);
  uint64_t v11 = v102[3];
  uint64_t v92 = v102[2];
  swift_bridgeObjectRetain();
  sub_1000E25E4(v102);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100008D74(a1, v12);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v13 + 16))(v103, v12, v13);
  uint64_t v14 = v103[6];
  uint64_t v15 = v103[7];
  swift_bridgeObjectRetain();
  sub_1000E25E4(v103);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 40);
  uint64_t v100 = DynamicType;
  uint64_t v101 = v9;
  sub_10001AFA8(v99);
  v16(v92, v11, v14, v15, DynamicType, v9);
  uint64_t v17 = a1[3];
  uint64_t v18 = a1[4];
  sub_100008D74(a1, v17);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v18 + 16))(v104, v17, v18);
  LOBYTE(vswift_unknownObjectWeakDestroy(v0 + 16) = v104[0];
  uint64_t v19 = v104[1];
  swift_bridgeObjectRetain();
  sub_1000E25E4(v104);
  uint64_t v20 = v100;
  uint64_t v21 = v101;
  sub_10004BB58((uint64_t)v99, v100);
  unint64_t v22 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v21 + 32))( &v97,  v20,  v21);
  *(_BYTE *)uint64_t v23 = (_BYTE)v16;
  uint64_t v24 = *(void *)(v23 + 8);
  *(void *)(v23 + 8) = v19;
  swift_bridgeObjectRelease(v24);
  v22(&v97, 0LL);
  uint64_t v25 = v100;
  uint64_t v26 = v101;
  char v27 = sub_100008D74(v99, v100);
  uint64_t v28 = *(void *)(v25 - 8);
  double v29 = __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v89 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, double))(v28 + 16))(v31, v29);
  uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)(v26 + 8) + 8LL))(v25);
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v25);
  uint64_t v37 = v94;
  Connection.prepare(_:_:)(v32, v34, (uint64_t)_swiftEmptyArrayStorage);
  uint64_t v94 = v37;
  if (v37)
  {
    swift_bridgeObjectRelease(v36);
    uint64_t v39 = v34;
LABEL_25:
    swift_bridgeObjectRelease(v39);
    return sub_10000AC58(v99);
  }

  uint64_t v40 = v38;
  uint64_t v93 = a1;
  uint64_t v41 = Statement.bind(_:)(v36);
  swift_bridgeObjectRelease(v36);
  swift_bridgeObjectRelease(v34);
  swift_release(v40);
  Statement.columnNames.getter();
  uint64_t v43 = v42;
  swift_release(v41);
  uint64_t v44 = *(void *)(v43 + 16);
  if (v44)
  {
    unint64_t v96 = _swiftEmptyArrayStorage;
    sub_1000452D4();
    uint64_t v45 = v96;
    uint64_t v92 = v43;
    unint64_t v46 = (unint64_t *)(v43 + 40);
    do
    {
      uint64_t v47 = *(v46 - 1);
      unint64_t v48 = *v46;
      swift_bridgeObjectRetain();
      uint64_t v49 = v47;
      uint64_t v50 = v94;
      uint64_t v51 = sub_1000D9BC0(0LL, 0xE000000000000000LL, v49, v48, 34LL, 0xE100000000000000LL);
      uint64_t v53 = v52;
      uint64_t v94 = v50;
      uint64_t v97 = 0LL;
      unint64_t v98 = 0xE000000000000000LL;
      Character.write<A>(to:)( &v97,  34LL,  0xE100000000000000LL,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      v54._uint64_t countAndFlagsBits = v51;
      v54._object = v53;
      String.append(_:)(v54);
      swift_bridgeObjectRelease(v53);
      Character.write<A>(to:)( &v97,  34LL,  0xE100000000000000LL,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      swift_bridgeObjectRelease(v48);
      uint64_t v55 = v97;
      unint64_t v56 = v98;
      unint64_t v96 = v45;
      unint64_t v57 = v45[2];
      if (v57 >= v45[3] >> 1)
      {
        sub_1000452D4();
        uint64_t v45 = v96;
      }

      v46 += 2;
      v45[2] = v57 + 1;
      unint64_t v58 = &v45[2 * v57];
      v58[4] = v55;
      void v58[5] = v56;
      --v44;
    }

    while (v44);
    uint64_t v59 = swift_bridgeObjectRelease(v92);
  }

  else
  {
    uint64_t v59 = swift_bridgeObjectRelease(v43);
    uint64_t v45 = _swiftEmptyArrayStorage;
  }

  if ((v89 & 1) != 0)
  {
    __chkstk_darwin(v59);
    *(&v89 - sub_100096760(v0[56], v0 + 2) = v60;
    uint64_t v61 = v94;
    uint64_t v62 = sub_1000D9AA0( (void (*)(void *__return_ptr, void *, __n128))sub_1000E33DC,  (uint64_t)(&v89 - 4),  (uint64_t)v45);
    uint64_t v63 = v45;
    uint64_t v45 = v62;
    uint64_t v94 = v61;
    swift_bridgeObjectRelease(v63);
  }

  uint64_t v64 = v45[2];
  uint64_t v89 = v45;
  if (!v64)
  {
LABEL_24:
    uint64_t v39 = (uint64_t)v89;
    goto LABEL_25;
  }

  uint64_t v65 = v90 + 2;
  uint64_t v66 = v91 + 2;
  swift_beginAccess(v91 + 2, &v97, 0LL, 0LL);
  swift_beginAccess(v66, &v96, 1LL, 0LL);
  uint64_t v67 = v45 + 5;
  uint64_t v90 = v66;
  uint64_t v91 = v65;
  while (1)
  {
    uint64_t v69 = *(v67 - 1);
    uint64_t v68 = *v67;
    uint64_t v70 = (void *)*v66;
    uint64_t v92 = v64;
    uint64_t v93 = v70;
    swift_beginAccess(v65, v95, 33LL, 0LL);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v65);
    uint64_t v105 = (void *)*v65;
    uint64_t v72 = v105;
    *uint64_t v65 = 0x8000000000000000LL;
    uint64_t v73 = sub_100015F98(v69, v68);
    uint64_t v75 = v72[2];
    BOOL v76 = (v74 & 1) == 0;
    Swift::Int v77 = v75 + v76;
    if (__OFADD__(v75, v76)) {
      break;
    }
    unint64_t v78 = v73;
    char v79 = v74;
    sub_100008DB0(&qword_100134AD8);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v77))
    {
      uint64_t v80 = sub_100015F98(v69, v68);
      if ((v79 & 1) != (v81 & 1)) {
        goto LABEL_29;
      }
      unint64_t v78 = v80;
    }

    uint64_t v82 = v105;
    if ((v79 & 1) != 0)
    {
      *(void *)(v105[7] + 8 * v78) = v93;
    }

    else
    {
      v105[(v78 >> 6) + 8] |= 1LL << v78;
      uint64_t v83 = (uint64_t *)(v82[6] + 16 * v78);
      *uint64_t v83 = v69;
      v83[1] = v68;
      *(void *)(v82[7] + 8 * v78) = v93;
      uint64_t v84 = v82[2];
      BOOL v85 = __OFADD__(v84, 1LL);
      uint64_t v86 = v84 + 1;
      if (v85) {
        goto LABEL_28;
      }
      v82[2] = v86;
      swift_bridgeObjectRetain();
    }

    uint64_t v65 = v91;
    uint64_t v87 = *v91;
    *uint64_t v91 = v82;
    swift_bridgeObjectRelease(v68);
    swift_bridgeObjectRelease(v87);
    swift_endAccess(v95);
    uint64_t v66 = v90;
    if (__OFADD__(*v90, 1LL)) {
      goto LABEL_27;
    }
    v67 += 2;
    ++*v90;
    uint64_t v64 = v92 - 1;
    if (v92 == 1) {
      goto LABEL_24;
    }
  }

  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_1000E0AE8(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (void *)a1[1];
  uint64_t v18 = 0LL;
  unint64_t v19 = 0xE000000000000000LL;
  sub_100008D74(a2, a2[3]);
  sub_100026F84();
  sub_1000D96A4();
  uint64_t v6 = v16;
  uint64_t v7 = v17;
  sub_100008D74(v15, v16);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  unint64_t v10 = v9;
  swift_bridgeObjectRelease(v11);
  uint64_t v18 = v8;
  unint64_t v19 = v10;
  sub_10000AC58(v15);
  v12._uint64_t countAndFlagsBits = 46LL;
  v12._object = (void *)0xE100000000000000LL;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = v4;
  v13._object = v5;
  String.append(_:)(v13);
  unint64_t v14 = v19;
  *a3 = v18;
  a3[1] = v14;
}

void Connection.scalar<A>(_:)(void *__src, uint64_t a2)
{
  if (v2)
  {
    sub_10000AEE8();
  }

  else
  {
    uint64_t v10 = sub_10000AEE8();
    sub_1000E3848(v10);
    sub_10001B60C((uint64_t)__dst, &qword_100131978);
  }

void Connection.scalar<A>(_:)()
{
  uint64_t v32 = v0;
  uint64_t v4 = v3;
  v30[0] = v5;
  v30[1] = v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v6,  v7,  &protocol requirements base descriptor for Value);
  uint64_t v9 = sub_1000E38E0(AssociatedTypeWitness);
  uint64_t v10 = *(void *)(v9 - 8);
  sub_1000D3708();
  __chkstk_darwin(v11);
  uint64_t v31 = (uint64_t)v30 - v12;
  uint64_t v13 = *(void *)(v2 - 8);
  sub_1000D3708();
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v30 - v15;
  memcpy(v33, v4, 0xA8uLL);
  uint64_t v17 = sub_1000D35B8();
  type metadata accessor for ScalarQuery(0LL, v17, v18, v19);
  QueryType.expression.getter();
  Connection.scalar(_:_:)(v20, v21, v22, (uint64_t)v33);
  if (v1)
  {
    sub_10001DEC4();
    sub_10001BE7C();
  }

  else
  {
    sub_10001DEC4();
    sub_10001BE7C();
    uint64_t v23 = sub_100008DB0(&qword_100131978);
    if (sub_1000E3C14(v31, (uint64_t)v33, v23))
    {
      uint64_t v24 = v31;
      sub_100009E60(v31, 0LL, 1LL, v2);
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v16, v24, v2);
      sub_1000E3B7C((uint64_t)v16);
      uint64_t v25 = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v2);
    }

    else
    {
      uint64_t v28 = v31;
      sub_1000E3890();
      uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v28, v9);
    }

    uint64_t v29 = sub_1000E3A18(v25, v26, v27, (uint64_t)&protocol requirements base descriptor for Value);
    sub_1000E3BB8(v29);
  }

  sub_10001DEE8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void v35[3];
  uint64_t v36;
  uint64_t v37;
  void v38[5];
  sub_10001DF28();
  uint64_t v37 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  v35[1] = v9;
  v35[2] = v10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v10,  v11,  &protocol requirements base descriptor for Value);
  uint64_t v13 = sub_1000E38E0(AssociatedTypeWitness);
  uint64_t v14 = *(void *)(v13 - 8);
  sub_1000D3708();
  __chkstk_darwin(v15);
  uint64_t v36 = (uint64_t)v35 - v16;
  uint64_t v17 = *(void *)(v2 - 8);
  sub_1000D3708();
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)v35 - v19;
  v38[0] = v8;
  v38[1] = v6;
  _OWORD v38[2] = v4;
  uint64_t v21 = sub_1000D35B8();
  uint64_t v24 = type metadata accessor for Select(0LL, v21, v22, v23);
  ExpressionType.expression.getter(v24, (uint64_t)&protocol witness table for Select<A>);
  Connection.scalar(_:_:)(v25, v26, v27, (uint64_t)v38);
  if (v1)
  {
    sub_10001DEC4();
    sub_10001BE7C();
  }

  else
  {
    sub_10001DEC4();
    sub_10001BE7C();
    uint64_t v28 = sub_100008DB0(&qword_100131978);
    if (sub_1000E3C14(v36, (uint64_t)v38, v28))
    {
      uint64_t v29 = v36;
      sub_100009E60(v36, 0LL, 1LL, v2);
      (*(void (**)(char *, uint64_t, uint64_t))(v17 + 32))(v20, v29, v2);
      sub_1000E3B7C((uint64_t)v20);
      uint64_t v30 = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v20, v2);
    }

    else
    {
      uint64_t v33 = v36;
      sub_1000E3890();
      uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v33, v13);
    }

    uint64_t v34 = sub_1000E3A18(v30, v31, v32, (uint64_t)&protocol requirements base descriptor for Value);
    sub_1000E3BB8(v34);
  }

  sub_10001DEE8();
}

void Connection.scalar<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v11[0] = a1;
  v11[1] = a2;
  v11[2] = a3;
  uint64_t v5 = type metadata accessor for Select(0LL, a4, a3, a4);
  ExpressionType.expression.getter(v5, (uint64_t)&protocol witness table for Select<A>);
  sub_1000E3830(v6, v7, v8, v9);
  swift_bridgeObjectRelease();
  if (v4)
  {
    sub_10000AEE8();
  }

  else
  {
    uint64_t v10 = sub_10000AEE8();
    sub_1000E3848(v10);
    sub_10001B60C((uint64_t)v11, &qword_100131978);
  }

uint64_t Connection.pluck(_:)(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100008D74(a1, v3);
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100008D74(a1, v5);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 16))(v16, v5, v6);
  sub_1000E25E4(v16);
  sub_100026C8C((uint64_t)&v17, (uint64_t)v18, &qword_1001348E0);
  sub_100026C8C((uint64_t)v18, (uint64_t)v19, &qword_1001348E0);
  if (v22) {
    uint64_t v7 = 0LL;
  }
  else {
    uint64_t v7 = v20;
  }
  char v8 = v22 | v21;
  void v15[3] = v3;
  uint64_t v15[4] = v4;
  uint64_t v9 = sub_10001AFA8(v15);
  sub_1000DAB6C(1LL, 0, v7, v8 & 1, v3, v4, (uint64_t)v9);
  Connection.prepareRowIterator(_:)(v15);
  uint64_t v11 = v10;
  sub_10000AC58(v15);
  if (!v1)
  {
    unint64_t v12 = (unint64_t)Statement.failableNext()();
    if (v13)
    {
      sub_10001BC70();
      sub_1000389DC();
    }

    else
    {
      if (v12)
      {
        sub_1000119E4();
        uint64_t v4 = v11;
      }

      else
      {
        uint64_t v4 = 0LL;
      }

      sub_1000389DC();
      sub_10001BC70();
    }
  }

  return v4;
}

Swift::Int64 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Connection.run(_:)( AppIntents_SQLite::Insert a1)
{
  return sub_1000E12F4( a1.template._countAndFlagsBits,  (uint64_t)a1.template._object,  (uint64_t)a1.bindings._rawValue,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000E47E8);
}

void sub_1000E128C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!v5)
  {
    swift_release();
    uint64_t v6 = (sqlite3 *)Connection.handle.getter();
    *uint64_t v4 = sqlite3_last_insert_rowid(v6);
  }

  sub_10005931C();
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Connection.run(_:)( AppIntents_SQLite::Update a1)
{
  return sub_1000E12F4( a1.template._countAndFlagsBits,  (uint64_t)a1.template._object,  (uint64_t)a1.bindings._rawValue,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000E48C8);
}

void sub_1000E12E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1000E12F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = swift_retain();
  uint64_t v10 = a4(v9, v4, a1, a2, a3);
  sub_10001BE7C();
  sub_10000AEE8();
  return v10;
}

void sub_1000E1378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!v5)
  {
    swift_release();
    uint64_t v6 = (sqlite3 *)Connection.handle.getter();
    *uint64_t v4 = sqlite3_changes(v6);
  }

  sub_10005931C();
}

uint64_t sub_1000E13B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (uint64_t v4 = sub_100015F98(a1, a2), (v5 & 1) != 0)) {
    return *(void *)(*(void *)(a3 + 56) + 8 * v4);
  }
  else {
    return 0LL;
  }
}

void sub_1000E13F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    sub_100015F98(a1, a2);
    if ((v3 & 1) != 0) {
      swift_bridgeObjectRetain();
    }
  }

  sub_10000ADA8();
}

void Row.get<A>(_:)()
{
  uint64_t v37 = v1;
  uint64_t v38 = v2;
  uint64_t v4 = v3;
  uint64_t v36 = v5;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v34 = v12;
  uint64_t v13 = type metadata accessor for Optional(0LL, v3);
  uint64_t v14 = *(void *)(v13 - 8);
  sub_1000D3708();
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v33 - v16;
  uint64_t v20 = type metadata accessor for Expression(0LL, v13, v18, v19);
  uint64_t v35 = v11;
  uint64_t v39 = v11;
  uint64_t v40 = v9;
  uint64_t v41 = v7;
  uint64_t v23 = type metadata accessor for Expression(0LL, v4, v21, v22);
  sub_10000AFB0();
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v20);
  uint64_t v25 = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v23);
  ExpressionType.init<A>(_:)((uint64_t)&v39, v20, v23, WitnessTable, v25);
  Row.get<A>(_:)(v42, v43, v44, v36, v37, v4, v38, v26, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44);
  sub_10001DEC4();
  sub_10000AEE8();
  if (!v0)
  {
    uint64_t v27 = v14;
    uint64_t v29 = v34;
    uint64_t v28 = v35;
    if (sub_100009E6C((uint64_t)v17, 1LL, v4) == 1)
    {
      (*(void (**)(char *, uint64_t))(v27 + 8))(v17, v13);
      unint64_t v30 = sub_1000E26B8();
      sub_100038AC8((uint64_t)&type metadata for QueryError, v30);
      *(void *)uint64_t v31 = v28;
      *(void *)(v31 + 8) = v9;
      *(void *)(v31 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
      *(_BYTE *)(v31 + 24) = 3;
      uint64_t v32 = sub_10000AFB0();
      swift_willThrow(v32);
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v4 - 8) + 32LL))(v29, v17, v4);
    }
  }

  sub_10001DEE8();
}

void Row.get<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v21;
  a20 = v22;
  uint64_t v66 = v23;
  uint64_t v67 = v20;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  sub_1000C6AEC(v34, v32);
  unint64_t v38 = sub_1000E13B4(v35, v33, v31);
  char v40 = v39;
  sub_10001198C();
  if ((v40 & 1) == 0)
  {
    sub_1000E17E4(v38, v29, v27, v25, v37);
LABEL_11:
    sub_10001DEE8();
    return;
  }

  uint64_t v63 = v37;
  uint64_t v64 = v29;
  uint64_t v41 = sub_10000AE38();
  uint64_t v42 = sub_1000D3D9C(v41);
  uint64_t v43 = sub_10000ADB0();
  __chkstk_darwin(v43);
  void v62[2] = v27;
  void v62[3] = v25;
  uint64_t v65 = v35;
  v62[4] = v35;
  v62[5] = v33;
  uint64_t v44 = v67;
  v62[6] = v66;
  sub_1000DDC90((uint64_t (*)(void *, __n128))sub_1000E26F4, (uint64_t)v62, (uint64_t)v42);
  unint64_t v46 = v45;
  uint64_t v47 = v45[2];
  if (v47 == 1)
  {
    uint64_t v54 = v27;
    uint64_t v55 = v45[4];
    uint64_t v56 = v45[5];
    sub_1000119E4();
    sub_10001DED8();
    unint64_t v57 = sub_1000E13B4(v55, v56, v31);
    char v59 = v58;
    sub_10001BC70();
    if ((v59 & 1) == 0)
    {
      sub_1000E17E4(v57, v64, v54, v25, v63);
      goto LABEL_11;
    }

    __break(1u);
  }

  else
  {
    if (v47)
    {
      unint64_t v60 = sub_1000E26B8();
      sub_100038AC8((uint64_t)&type metadata for QueryError, v60);
      *(void *)uint64_t v61 = v65;
      *(void *)(v61 + 8) = v33;
      *(void *)(v61 + swift_unknownObjectWeakDestroy(v0 + 16) = v46;
      *(_BYTE *)(v61 + 24) = 2;
      uint64_t v52 = sub_10000AFB0();
      goto LABEL_10;
    }

    sub_10001DED8();
    sub_100011A3C(v31);
    sub_10000AFB0();
    unint64_t v48 = sub_1000D3D9C(v31);
    sub_10000ADB0();
    a10 = v48;
    sub_1000E1C20(&a10);
    uint64_t v49 = v65;
    if (!v44)
    {
      sub_10000ADB0();
      uint64_t v50 = a10;
      unint64_t v51 = sub_1000E26B8();
      uint64_t v52 = sub_100038AC8((uint64_t)&type metadata for QueryError, v51);
      *(void *)uint64_t v53 = v49;
      *(void *)(v53 + 8) = v33;
      *(void *)(v53 + swift_unknownObjectWeakDestroy(v0 + 16) = v50;
      *(_BYTE *)(v53 + 24) = 1;
LABEL_10:
      swift_willThrow(v52);
      goto LABEL_11;
    }
  }

  swift_release();
  __break(1u);
}

void sub_1000E17E4( unint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v25 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, a4, a3, &protocol requirements base descriptor for Value);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v23 = (char *)&v23 - v9;
  uint64_t v10 = swift_getAssociatedTypeWitness(255LL, a4, a3, &protocol requirements base descriptor for Value);
  uint64_t v11 = type metadata accessor for Optional(0LL, v10);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = *(void *)(v10 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v23 - v17;
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  if (*(void *)(a2 + 16) <= a1)
  {
LABEL_8:
    __break(1u);
    return;
  }

  sub_100026CB8(a2 + 40 * a1 + 32, (uint64_t)v26, &qword_100131978);
  uint64_t v19 = sub_100008DB0(&qword_100131978);
  if (swift_dynamicCast(v14, v26, v19, v10, 6LL))
  {
    sub_100009E60((uint64_t)v14, 0LL, 1LL, v10);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v14, v10);
    uint64_t v20 = v23;
    (*(void (**)(char *, uint64_t, uint64_t))(a4 + 48))(v18, a3, a4);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v10);
    uint64_t v21 = v25;
    uint64_t v22 = swift_dynamicCast(v25, v20, AssociatedTypeWitness, a3, 6LL) ^ 1;
  }

  else
  {
    uint64_t v22 = 1LL;
    sub_100009E60((uint64_t)v14, 1LL, 1LL, v10);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t v21 = v25;
  }

  sub_100009E60(v21, v22, 1LL, a3);
}

uint64_t sub_1000E1A1C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3;
  swift_bridgeObjectRetain(a3);
  v5._uint64_t countAndFlagsBits = a2;
  v5._object = v3;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v3);
  v6._uint64_t countAndFlagsBits = 46LL;
  v6._object = (void *)0xE100000000000000LL;
  LOBYTE(sub_1000E35B8(v1, v2, v3) = String.hasSuffix(_:)(v6);
  swift_bridgeObjectRelease(0xE100000000000000LL);
  return v3 & 1;
}

AppIntents_SQLite::JoinType_optional __swiftcall JoinType.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100127488, v2);
  sub_10001198C();
  if (v3 >= 3) {
    return (AppIntents_SQLite::JoinType_optional)3;
  }
  else {
    return (AppIntents_SQLite::JoinType_optional)v3;
  }
}

void sub_1000E1AF4(char *a1, unsigned __int8 *a2)
{
}

void sub_1000E1B00()
{
}

uint64_t sub_1000E1B08(uint64_t a1)
{
  return sub_1000E4188(a1, *v1);
}

void sub_1000E1B10(uint64_t a1)
{
}

AppIntents_SQLite::JoinType_optional sub_1000E1B18@<W0>( Swift::String *a1@<X0>, AppIntents_SQLite::JoinType_optional *a2@<X8>)
{
  result.value = JoinType.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void sub_1000E1B44(uint64_t *a1@<X8>)
{
  *a1 = JoinType.rawValue.getter(*v1);
  a1[1] = v3;
  sub_10000ADA8();
}

AppIntents_SQLite::OnConflict_optional __swiftcall OnConflict.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001274F0, v2);
  sub_10001198C();
  if (v3 >= 5) {
    return (AppIntents_SQLite::OnConflict_optional)5;
  }
  else {
    return (AppIntents_SQLite::OnConflict_optional)v3;
  }
}

void sub_1000E1BAC(char *a1)
{
}

void sub_1000E1BB8()
{
}

void sub_1000E1BC0(uint64_t a1)
{
}

void sub_1000E1BC8(uint64_t a1)
{
}

AppIntents_SQLite::OnConflict_optional sub_1000E1BD0@<W0>( Swift::String *a1@<X0>, AppIntents_SQLite::OnConflict_optional *a2@<X8>)
{
  result.value = OnConflict.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void sub_1000E1BFC(uint64_t *a1@<X8>)
{
  *a1 = OnConflict.rawValue.getter(*v1);
  a1[1] = v3;
  sub_10000ADA8();
}

uint64_t sub_1000E1C20(void *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_10008B980();
    uint64_t v2 = v3;
  }

  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  uint64_t result = sub_1000E1C88(v6);
  *a1 = v2;
  return result;
}

uint64_t sub_1000E1C88(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      if (v3) {
        return sub_100074DCC(0LL, v3, 1LL, a1);
      }
      return result;
    }

    goto LABEL_148;
  }

  if (v3 < -1) {
    goto LABEL_147;
  }
  uint64_t v104 = result;
  uint64_t v101 = a1;
  if (v3 <= 1)
  {
    Swift::String v5 = _swiftEmptyArrayStorage;
    char v107 = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v41 = _swiftEmptyArrayStorage[2];
      uint64_t v8 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_114;
    }

    uint64_t v103 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)(v3 / 2, &type metadata for String);
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = v3 / 2;
    uint64_t v103 = (void *)result;
    char v107 = (char *)(result + 32);
  }

  Swift::Int v6 = 0LL;
  uint64_t v7 = *a1;
  uint64_t v102 = v7 + 8;
  uint64_t v8 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v105 = v3;
  while (1)
  {
    Swift::Int v9 = v6++;
    if (v6 >= v3) {
      goto LABEL_39;
    }
    uint64_t v10 = (uint64_t *)(v7 + 16 * v6);
    uint64_t result = *v10;
    uint64_t v11 = v10[1];
    uint64_t v12 = (void *)(v7 + 16 * v9);
    uint64_t v13 = v12[1];
    if (result == *v12 && v11 == v13)
    {
      Swift::Int v16 = v9 + 2;
      if (v9 + 2 >= v3) {
        goto LABEL_38;
      }
      int v15 = 0;
    }

    else
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v11, *v12, v13, 1LL);
      int v15 = result;
      Swift::Int v16 = v9 + 2;
      if (v9 + 2 >= v3) {
        goto LABEL_30;
      }
    }

    uint64_t v17 = (uint64_t *)(v102 + 16 * v16);
    do
    {
      uint64_t result = *(v17 - 1);
      uint64_t v18 = *v17;
      uint64_t v19 = (void *)(v7 + 16 * v6);
      uint64_t v20 = v19[1];
      if (result == *v19 && v18 == v20)
      {
        if ((v15 & 1) != 0) {
          goto LABEL_31;
        }
      }

      else
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v18, *v19, v20, 1LL);
      }

      v17 += 2;
      Swift::Int v22 = v16 + 1;
      Swift::Int v6 = v16;
      Swift::Int v16 = v22;
    }

    while (v22 < v3);
    Swift::Int v16 = v22;
LABEL_30:
    Swift::Int v6 = v16;
    if ((v15 & 1) != 0)
    {
LABEL_31:
      if (v16 < v9) {
        goto LABEL_151;
      }
      if (v9 < v16)
      {
        uint64_t v23 = 16 * v16;
        uint64_t v24 = 16 * v9;
        Swift::Int v25 = v16;
        Swift::Int v26 = v9;
        do
        {
          if (v26 != --v25)
          {
            if (!v7) {
              goto LABEL_154;
            }
            uint64_t v27 = v7 + v23;
            uint64_t v28 = *(void *)(v7 + v24);
            uint64_t v29 = *(void *)(v7 + v24 + 8);
            *(_OWORD *)(v7 + v24) = *(_OWORD *)(v7 + v23 - 16);
            *(void *)(v27 - swift_unknownObjectWeakDestroy(v0 + 16) = v28;
            *(void *)(v27 - 8) = v29;
          }

          ++v26;
          v23 -= 16LL;
          v24 += 16LL;
        }

        while (v26 < v25);
      }

LABEL_91:
    if ((v67 & 1) != 0) {
      goto LABEL_136;
    }
    uint64_t v75 = &v42[2 * v44];
    uint64_t v77 = *v75;
    uint64_t v76 = v75[1];
    BOOL v55 = __OFSUB__(v76, v77);
    uint64_t v78 = v76 - v77;
    if (v55) {
      goto LABEL_138;
    }
    if (v78 < v66) {
      goto LABEL_108;
    }
LABEL_99:
    unint64_t v83 = v44 - 1;
    if (v44 - 1 >= v41)
    {
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
      goto LABEL_141;
    }

    uint64_t v84 = v7;
    if (!v7) {
      goto LABEL_153;
    }
    BOOL v85 = v8;
    uint64_t v86 = &v42[2 * v83];
    uint64_t v87 = *v86;
    uint64_t v88 = v42;
    unint64_t v89 = v44;
    uint64_t v90 = &v42[2 * v44];
    uint64_t v91 = v90[1];
    uint64_t v92 = v84;
    uint64_t result = sub_1000E2328((char *)(v84 + 16 * *v86), (char *)(v84 + 16LL * *v90), v84 + 16 * v91, v107);
    if (v1) {
      break;
    }
    if (v91 < v87) {
      goto LABEL_127;
    }
    if (v89 > *((void *)v85 + 2)) {
      goto LABEL_128;
    }
    *uint64_t v86 = v87;
    v88[2 * v83 + 1] = v91;
    unint64_t v93 = *((void *)v85 + 2);
    if (v89 >= v93) {
      goto LABEL_129;
    }
    uint64_t v8 = v85;
    unint64_t v41 = v93 - 1;
    uint64_t result = (uint64_t)memmove(v90, v90 + 2, 16 * (v93 - 1 - v89));
    uint64_t v42 = v88;
    *((void *)v85 + sub_100096760(v0[56], v0 + 2) = v93 - 1;
    uint64_t v7 = v92;
    Swift::Int v6 = v106;
    if (v93 <= 2) {
      goto LABEL_108;
    }
  }

  uint64_t v94 = (uint64_t)v85;
LABEL_111:
  swift_bridgeObjectRelease(v94);
  v103[2] = 0LL;
  return swift_bridgeObjectRelease(v103);
}

uint64_t sub_1000E2328(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  Swift::Int v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 16;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 16;
  if (v9 >= v11)
  {
    sub_100015BF8(a2, (uint64_t)(a3 - (void)a2) / 16, a4);
    uint64_t v12 = &v4[16 * v11];
    if (v7 >= v6 || v10 < 16) {
      goto LABEL_47;
    }
    uint64_t v20 = (char *)(a3 - 16);
    while (1)
    {
      uint64_t v21 = v20 + 16;
      uint64_t v22 = *((void *)v12 - 2);
      uint64_t v23 = *((void *)v12 - 1);
      uint64_t v24 = v12 - 16;
      uint64_t v25 = *((void *)v6 - 2);
      uint64_t v26 = *((void *)v6 - 1);
      BOOL v27 = v22 == v25 && v23 == v26;
      if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v25, v26, 1LL) & 1) == 0)
      {
        BOOL v29 = v21 != v12 || v20 >= v12;
        v12 -= 16;
        if (!v29) {
          goto LABEL_43;
        }
      }

      else
      {
        BOOL v28 = v21 != v6 || v20 >= v6;
        uint64_t v24 = v6 - 16;
        v6 -= 16;
        if (!v28) {
          goto LABEL_43;
        }
      }

      *(_OWORD *)uint64_t v20 = *(_OWORD *)v24;
LABEL_43:
      v20 -= 16;
      if (v6 <= v7 || v12 <= v4) {
        goto LABEL_47;
      }
    }
  }

  sub_100015BF8(a1, (a2 - a1) / 16, a4);
  uint64_t v12 = &v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      uint64_t v14 = *((void *)v6 + 1);
      uint64_t v15 = *((void *)v4 + 1);
      BOOL v16 = *(void *)v6 == *(void *)v4 && v14 == v15;
      if (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v6, v14, *(void *)v4, v15, 1LL) & 1) != 0) {
        break;
      }
      uint64_t v17 = v4;
      BOOL v16 = v7 == v4;
      v4 += 16;
      if (!v16) {
        goto LABEL_15;
      }
LABEL_16:
      v7 += 16;
    }

    uint64_t v17 = v6;
    BOOL v16 = v7 == v6;
    v6 += 16;
    if (v16) {
      goto LABEL_16;
    }
LABEL_15:
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v17;
    goto LABEL_16;
  }

uint64_t sub_1000E24E0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  uint64_t v9 = sub_10001AFA8(&v12);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32LL))(v9, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = a1 + 1;
  return sub_100009EEC(&v12, v10 + 40 * a1 + 32);
}

uint64_t sub_1000E2558(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000E2594(void *a1)
{
  return sub_1000DDA30(a1, *(void **)(v1 + 16)) & 1;
}

uint64_t sub_1000E25B0(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_1000E25E4(void *a1)
{
  uint64_t v2 = a1[9];
  uint64_t v3 = a1[10];
  uint64_t v4 = a1[11];
  uint64_t v5 = a1[12];
  uint64_t v6 = a1[13];
  uint64_t v8 = a1[15];
  uint64_t v9 = a1[14];
  uint64_t v10 = a1[20];
  uint64_t v11 = a1[16];
  swift_bridgeObjectRelease(a1[8]);
  sub_100011958();
  sub_10000ADB0();
  sub_10001BC70();
  sub_10001BE7C();
  sub_10001DBBC(v2, v3, v4);
  sub_10001DBEC(v5, v6, v9, v8);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

double sub_1000E26A4@<D0>(uint64_t *a1@<X8>)
{
  return sub_1000E0344(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t type metadata accessor for Select(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000C8B4(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Select);
}

unint64_t sub_1000E26B8()
{
  unint64_t result = qword_1001348E8;
  if (!qword_1001348E8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for QueryError, &type metadata for QueryError);
    atomic_store(result, (unint64_t *)&qword_1001348E8);
  }

  return result;
}

uint64_t sub_1000E26F4(uint64_t a1)
{
  return sub_1000E1A1C(a1, *(void *)(v1 + 32), *(void **)(v1 + 40)) & 1;
}

unint64_t sub_1000E2718(uint64_t a1)
{
  unint64_t result = sub_1000E273C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000E273C()
{
  unint64_t result = qword_1001349B0;
  if (!qword_1001349B0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for RowIterator, &type metadata for RowIterator);
    atomic_store(result, (unint64_t *)&qword_1001349B0);
  }

  return result;
}

unint64_t sub_1000E277C()
{
  unint64_t result = qword_1001349B8;
  if (!qword_1001349B8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for JoinType, &type metadata for JoinType);
    atomic_store(result, (unint64_t *)&qword_1001349B8);
  }

  return result;
}

unint64_t sub_1000E27BC()
{
  unint64_t result = qword_1001349C0;
  if (!qword_1001349C0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for OnConflict, &type metadata for OnConflict);
    atomic_store(result, (unint64_t *)&qword_1001349C0);
  }

  return result;
}

void *initializeWithTake for QueryClauses(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA8uLL);
}

void type metadata accessor for Table()
{
}

uint64_t _s17AppIntents_SQLite12QueryClausesVwca_0(_BYTE *a1, _BYTE *a2)
{
  *(void *)(v2 + 8) = *(void *)(v4 + 8);
  swift_bridgeObjectRetain();
  sub_100011958();
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v3 + 16);
  *(void *)(v2 + 24) = *(void *)(v3 + 24);
  swift_bridgeObjectRetain();
  sub_100011958();
  *(void *)(v2 + 3sub_100096760(v0[56], v0 + 2) = *(void *)(v3 + 32);
  *(void *)(v2 + 40) = *(void *)(v3 + 40);
  swift_bridgeObjectRetain();
  sub_100011958();
  *(void *)(v2 + 48) = *(void *)(v3 + 48);
  *(void *)(v2 + 56) = *(void *)(v3 + 56);
  swift_bridgeObjectRetain();
  sub_100011958();
  *(void *)(v2 + 64) = *(void *)(v3 + 64);
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_100011958();
  uint64_t v6 = *(void *)(v3 + 80);
  if (*(void *)(v2 + 80))
  {
    if (v6)
    {
      sub_1000E3B60();
      swift_bridgeObjectRetain();
      sub_10001BC70();
      *(void *)(v2 + 88) = *(void *)(v3 + 88);
      swift_bridgeObjectRetain();
      sub_100011958();
    }

    else
    {
      sub_1000E3808(v5, &qword_1001347C8);
      sub_1000E3B40();
    }
  }

  else if (v6)
  {
    sub_1000E3B60();
    *(void *)(v2 + 88) = *(void *)(v3 + 88);
    swift_bridgeObjectRetain();
    sub_10001BEF8();
  }

  else
  {
    __int128 v7 = *(_OWORD *)(v3 + 72);
    *(void *)(v2 + 88) = *(void *)(v3 + 88);
    *(_OWORD *)(v2 + 7sub_100096760(v0[56], v0 + 2) = v7;
  }

  uint64_t v8 = (__int128 *)(v2 + 96);
  uint64_t v10 = (__int128 *)(v3 + 96);
  uint64_t v9 = *(void *)(v3 + 96);
  if (!*(void *)(v2 + 96))
  {
    if (v9)
    {
      sub_1000E3B20(v9);
      if (v2 == -96)
      {
        __int128 v13 = *(_OWORD *)(v3 + 104);
        MEMORY[0x18] = *(void *)(v3 + 120);
        MEMORY[8] = v13;
        goto LABEL_23;
      }

void _s17AppIntents_SQLite12QueryClausesVwta_0(_BYTE *a1, _BYTE *a2)
{
  v2[1] = *(void *)(v4 + 8);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(v3 + 24);
  __int128 v2[2] = *(void *)(v3 + 16);
  void v2[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(v3 + 40);
  v2[4] = *(void *)(v3 + 32);
  uint64_t v2[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v3 + 56);
  v2[6] = *(void *)(v3 + 48);
  v2[7] = v7;
  swift_bridgeObjectRelease();
  v2[8] = *(void *)(v3 + 64);
  swift_bridgeObjectRelease();
  uint64_t v8 = v2[10];
  if (v8)
  {
    uint64_t v9 = *(void *)(v3 + 80);
    if (v9)
    {
      v2[9] = *(void *)(v3 + 72);
      v2[10] = v9;
      swift_bridgeObjectRelease();
      v2[11] = *(void *)(v3 + 88);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }

    sub_1000E3808(v8, &qword_1001347C8);
  }

  sub_1000E3A48();
LABEL_6:
  uint64_t v10 = v2[12];
  uint64_t v11 = *(void *)(v3 + 96);
  if (!v10)
  {
LABEL_12:
    __int128 v14 = *(_OWORD *)(v3 + 112);
    *((_OWORD *)v2 + 6) = *(_OWORD *)(v3 + 96);
    *((_OWORD *)v2 + 7) = v14;
    goto LABEL_15;
  }

  if (!v11)
  {
    sub_1000E3808(v10, qword_1001349C8);
    goto LABEL_12;
  }

  v2[12] = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = v2[14];
  if (!v12)
  {
LABEL_14:
    sub_1000E3A48();
    goto LABEL_15;
  }

  uint64_t v13 = *(void *)(v3 + 112);
  if (!v13)
  {
    sub_1000E3808(v12, &qword_1001347C8);
    goto LABEL_14;
  }

  v2[13] = *(void *)(v3 + 104);
  v2[14] = v13;
  swift_bridgeObjectRelease();
  v2[15] = *(void *)(v3 + 120);
  swift_bridgeObjectRelease();
LABEL_15:
  v2[16] = *(void *)(v3 + 128);
  swift_bridgeObjectRelease();
  sub_1000E3A8C();
  v2[20] = *(void *)(v3 + 160);
  swift_bridgeObjectRelease();
  sub_10000AF74();
}

void type metadata accessor for View()
{
}

void type metadata accessor for VirtualTable()
{
}

uint64_t sub_1000E2BE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16LL);
}

void type metadata accessor for Insert()
{
}

void type metadata accessor for Update()
{
}

uint64_t _s17AppIntents_SQLite6InsertVwxx_0(uint64_t a1)
{
  return sub_10000AE90(*(void *)(a1 + 16));
}

void _s17AppIntents_SQLite6InsertVwca_0(void *a1, void *a2)
{
  *(void *)(v3 + 8) = *(void *)(v4 + 8);
  swift_bridgeObjectRetain();
  sub_100011958();
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  swift_bridgeObjectRetain();
  sub_10001198C();
  sub_10000AF74();
}

void _s17AppIntents_SQLite6InsertVwta_0(void *a1, void *a2)
{
  uint64_t v4 = sub_1000E3BDC(a1, a2);
  sub_10001B8B4((uint64_t)v4);
  *(_OWORD *)(v3 + 8) = *(_OWORD *)(v2 + 8);
  swift_bridgeObjectRelease();
  sub_10000ADA8();
}

uint64_t _s17AppIntents_SQLite6InsertVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return sub_1000E3C64(-1);
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
  {
    LODWORD(vsub_100096760(v0[56], v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
  }

  else
  {
    unint64_t v2 = *(void *)(a1 + 8);
    if (v2 >= 0xFFFFFFFF) {
      LODWORD(vsub_100096760(v0[56], v0 + 2) = -1;
    }
  }

  return sub_1000E3C64(v2);
}

uint64_t sub_1000E2CEC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
      return sub_1000E3C58(result, a2);
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      return sub_1000E3C58(result, a2);
    }
  }

  return result;
}

void type metadata accessor for Delete()
{
}

uint64_t destroy for RowIterator(void *a1)
{
  return swift_bridgeObjectRelease(a1[1]);
}

void _s17AppIntents_SQLite11RowIteratorVwCP_0(void *a1, void *a2)
{
  uint64_t v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  swift_retain();
  sub_10000AE38();
  sub_10000ADA8();
}

uint64_t *assignWithCopy for RowIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

void assignWithTake for RowIterator(void *a1, _OWORD *a2, uint64_t a3)
{
}

void type metadata accessor for RowIterator()
{
}

void sub_1000E2E08(void *a1, void *a2)
{
  uint64_t v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  swift_bridgeObjectRetain();
  sub_10000AE38();
  sub_10000ADA8();
}

void assignWithTake for Row(void *a1, _OWORD *a2, uint64_t a3)
{
}

void sub_1000E2E40(void *a1, _OWORD *a2, uint64_t a3, void (*a4)(void))
{
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease();
  sub_10000ADA8();
}

uint64_t _s17AppIntents_SQLite11RowIteratorVwet_0(uint64_t *a1, int a2)
{
  if (!a2) {
    return sub_1000E3C64(-1);
  }
  if (a2 < 0 && *((_BYTE *)a1 + 16))
  {
    LODWORD(vsub_100096760(v0[56], v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
  }

  else
  {
    uint64_t v2 = *a1;
  }

  return sub_1000E3C64(v2);
}

void type metadata accessor for Row()
{
}

uint64_t storeEnumTagSinglePayload for JoinType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(sub_100075674(v3, v4) = 1;
  }
  else {
    LODWORD(sub_100075674(v3, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1000E2F0C + 4 * byte_1000F816A[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000E2F40 + 4 * byte_1000F8165[v4]))();
}

uint64_t sub_1000E2F40(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E2F48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000E2F50LL);
  }
  return result;
}

uint64_t sub_1000E2F5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000E2F64LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1000E2F68(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E2F70(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for JoinType()
{
}

uint64_t storeEnumTagSinglePayload for OnConflict(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(sub_100075674(v3, v4) = 1;
  }
  else {
    LODWORD(sub_100075674(v3, v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1000E2FD4 + 4 * byte_1000F8174[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000E3008 + 4 * byte_1000F816F[v4]))();
}

uint64_t sub_1000E3008(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E3010(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000E3018LL);
  }
  return result;
}

uint64_t sub_1000E3024(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000E302CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1000E3030(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E3038(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for OnConflict()
{
}

uint64_t _s17AppIntents_SQLite12QueryClausesVwxx_0(void *a1)
{
  if (a1[10])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (a1[12])
  {
    swift_bridgeObjectRelease();
    if (a1[14])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }

  swift_bridgeObjectRelease();
  return sub_10000AE90(a1[20]);
}

uint64_t _s17AppIntents_SQLite12QueryClausesVwcp_0()
{
  uint64_t v5 = v4[2];
  *(void *)(v0 + 8) = v4[1];
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  uint64_t v6 = v4[4];
  *(void *)(v0 + 24) = v4[3];
  *(void *)(v0 + 3sub_100096760(v0[56], v0 + 2) = v6;
  uint64_t v7 = v4[6];
  *(void *)(v0 + 40) = v4[5];
  *(void *)(v0 + 48) = v7;
  uint64_t v8 = v4[8];
  *(void *)(v0 + 56) = v4[7];
  *(void *)(v0 + 64) = v8;
  uint64_t v9 = v4[10];
  swift_bridgeObjectRetain();
  sub_1000119E4();
  sub_10001C064();
  sub_10001BD0C();
  sub_10001BCF8();
  if (v9)
  {
    *(void *)(v0 + 7sub_100096760(v0[56], v0 + 2) = *(void *)(v1 + 72);
    *(void *)(v0 + 80) = v9;
    *(void *)(v0 + 88) = *(void *)(v1 + 88);
    sub_10001BEF8();
    sub_1000119E4();
  }

  else
  {
    sub_1000E3ACC((__n128 *)(v0 + 72));
  }

  uint64_t v10 = *(void *)(v1 + 96);
  if (v10)
  {
    sub_1000E3B20(v10);
    if (v9)
    {
      *(void *)(v0 + 104) = *(void *)(v1 + 104);
      *(void *)(v0 + 11sub_100096760(v0[56], v0 + 2) = v9;
      *(void *)(v0 + 120) = *(void *)(v1 + 120);
      sub_10001BEF8();
      sub_1000119E4();
    }

    else
    {
      sub_1000E3ACC((__n128 *)(v0 + 104));
    }
  }

  else
  {
    __int128 v11 = *(_OWORD *)(v1 + 112);
    *(_OWORD *)(v0 + 96) = *(_OWORD *)(v1 + 96);
    *(_OWORD *)(v0 + 11sub_100096760(v0[56], v0 + 2) = v11;
  }

  *(void *)(v0 + 128) = *(void *)(v1 + 128);
  sub_1000E3A8C();
  *(void *)(v0 + 160) = *(void *)(v1 + 160);
  swift_bridgeObjectRetain();
  sub_10000AE38();
  return v0;
}

uint64_t _s17AppIntents_SQLite12QueryClausesVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return sub_1000E3C64(-1);
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 168))
  {
    LODWORD(vsub_100096760(v0[56], v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
  }

  else
  {
    unint64_t v2 = *(void *)(a1 + 8);
    if (v2 >= 0xFFFFFFFF) {
      LODWORD(vsub_100096760(v0[56], v0 + 2) = -1;
    }
  }

  return sub_1000E3C64(v2);
}

uint64_t sub_1000E3208(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = 0u;
    *(_OWORD *)(result + 15sub_100096760(v0[56], v0 + 2) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 7sub_100096760(v0[56], v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 168) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
      return sub_1000E3C58(result, a2);
    }

    *(_BYTE *)(result + 168) = 0;
    if (a2) {
      return sub_1000E3C58(result, a2);
    }
  }

  return result;
}

void type metadata accessor for QueryClauses()
{
}

uint64_t sub_1000E3274(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000E3280(a1, a2, a3, a4, a5, &qword_100131988);
}

uint64_t sub_1000E3280(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v19 = sub_100008DB0(a6);
  uint64_t v20 = &protocol witness table for Expression<A>;
  uint64_t v16 = a1;
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  sub_1000119E4();
  sub_10001BEF8();
  sub_10000AFB0();
  v10._uint64_t countAndFlagsBits = 40LL;
  v10._object = (void *)0xE100000000000000LL;
  String.append(_:)(v10);
  sub_100008D74(&v16, v19);
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  sub_1000119E4();
  v13._uint64_t countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  sub_10001BC70();
  v14._uint64_t countAndFlagsBits = 41LL;
  v14._object = (void *)0xE100000000000000LL;
  String.append(_:)(v14);
  sub_10000AFB0();
  sub_10000AC58(&v16);
  return a4;
}

uint64_t sub_1000E3364()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1000E3390(void *a1@<X8>)
{
}

uint64_t sub_1000E3398()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000E33B8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1000E33C8()
{
}

void sub_1000E33DC(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t *sub_1000E33F8(uint64_t *a1)
{
  return a1;
}

uint64_t *sub_1000E3428(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1000E347C(void *a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t sub_1000E34A0(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_1000E34B8(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

double sub_1000E34CC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v7 + 48) = a2;
  *(void *)(v7 + 56) = a1;
  *(_BYTE *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = v7;
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  *(void *)(v2 + 24) = v5;
  *(void *)(v2 + 3sub_100096760(v0[56], v0 + 2) = 0LL;
  *(void *)(v2 + 40) = 0LL;
  *(void *)(v2 + 48) = v4;
  *(void *)(v2 + 56) = v3;
  *(void *)(v2 + 64) = a2;
  double result = 0.0;
  *(_OWORD *)(v2 + 7sub_100096760(v0[56], v0 + 2) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(void *)(v2 + 120) = 0LL;
  *(void *)(v2 + 128) = a2;
  *(void *)(v2 + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = 0LL;
  *(void *)(v2 + 144) = 0LL;
  *(_WORD *)(v2 + 15sub_100096760(v0[56], v0 + 2) = 256;
  *(void *)(v2 + 160) = a2;
  return result;
}

uint64_t sub_1000E3514(uint64_t a1)
{
  return swift_allocObject(a1, 72LL, 7LL);
}

uint64_t sub_1000E3520()
{
  return v0;
}

uint64_t Expression.bindings.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_bridgeObjectRetain(a3);
}

void sub_1000E3538()
{
}

void sub_1000E3550(char a1, uint64_t a2)
{
}

uint64_t sub_1000E355C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(a2, v2, a1);
}

uint64_t sub_1000E3584(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v1 = a1[4];
  sub_100008D74(a1, v2);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v1 + 8) + 8LL))(v2);
}

uint64_t sub_1000E35B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_bridgeObjectRetain(a3);
}

double sub_1000E35DC()
{
  *(void *)(v0 + 3sub_100096760(v0[56], v0 + 2) = 0LL;
  double result = 0.0;
  *(_OWORD *)uint64_t v0 = 0u;
  *(_OWORD *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
  return result;
}

  ;
}

double sub_1000E35FC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  v8[7] = a1;
  v8[8] = a4;
  void v8[4] = v7;
  void v8[5] = v6;
  void v8[6] = v5;
  type metadata accessor for ScalarQuery(0LL, v4, a2, a3);
  *(void *)&double result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

uint64_t sub_1000E362C(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

  ;
}

  ;
}

void sub_1000E3680()
{
}

uint64_t sub_1000E3688()
{
  uint64_t v1 = *(void *)(v0 - 144);
  uint64_t v2 = *(void *)(v0 - 136);
  uint64_t v3 = sub_100008D74((void *)(v0 - 168), v1);
  return sub_1000D4984(v3, 0LL, 0xE000000000000000LL, v1, v2);
}

  ;
}

  ;
}

uint64_t sub_1000E36EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000DA034(v6, v10, v7, v9, v8, a6);
}

  ;
}

uint64_t sub_1000E372C()
{
  return QueryType.filter(_:)(v4, v3, v2, v1, v0, v5);
}

  ;
}

uint64_t sub_1000E3768()
{
  return v0;
}

uint64_t sub_1000E3788()
{
  return v0;
}

  ;
}

BOOL sub_1000E37C8@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_1000E37DC()
{
  return v0;
}

uint64_t sub_1000E37E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return swift_initStackObject(a1, &a9);
}

void sub_1000E37F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1000E3808(uint64_t a1, uint64_t *a2)
{
}

_BYTE *sub_1000E3810(_BYTE *result, _BYTE *a2)
{
  *double result = *a2;
  return result;
}

uint64_t sub_1000E3824(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000DA034(a1, a2, a4, a4, a5, a5);
}

void sub_1000E3830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_1000E3848(uint64_t a1, ...)
{
  return sub_1000D4920((uint64_t)va, v2, v1, v3);
}

  ;
}

void sub_1000E3870(char a1, uint64_t a2)
{
}

uint64_t sub_1000E387C()
{
  return sub_10000AC58((void *)(v0 - 168));
}

uint64_t sub_1000E3890()
{
  return sub_100009E60(v0, 1LL, 1LL, v1);
}

  ;
}

uint64_t sub_1000E38B8()
{
  return v0(v2, v1);
}

uint64_t sub_1000E38C4()
{
  return 0LL;
}

uint64_t sub_1000E38E0(uint64_t a1)
{
  return type metadata accessor for Optional(0LL, a1);
}

uint64_t sub_1000E38F0()
{
  return v0;
}

uint64_t sub_1000E3900()
{
  return v0;
}

uint64_t sub_1000E390C()
{
  return sub_1000DF650(v0);
}

void sub_1000E391C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
}

  ;
}

uint64_t sub_1000E3944(uint64_t a1)
{
  return v1(a1, 0LL);
}

uint64_t sub_1000E394C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void sub_1000E395C(uint64_t a1, uint64_t a2)
{
}

  ;
}

void sub_1000E3974()
{
}

uint64_t sub_1000E397C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 8));
}

uint64_t sub_1000E398C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

  ;
}

uint64_t sub_1000E39B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1000D9D14(a1, a2, v4, v3, a3);
}

uint64_t sub_1000E39C8()
{
  return v0;
}

uint64_t sub_1000E39D8(uint64_t a1)
{
  return swift_arrayInitWithCopy(a1);
}

void sub_1000E39E8(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  sub_10001AFE4(v2, (uint64_t)&a1[2]);
}

void sub_1000E39F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

void sub_1000E3A08( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

uint64_t sub_1000E3A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_getAssociatedTypeWitness(0LL, v5, v4, a4);
}

unint64_t sub_1000E3A28()
{
  return (unint64_t)Statement.failableNext()();
}

uint64_t sub_1000E3A34()
{
  return sub_100058868();
}

uint64_t sub_1000E3A3C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1000E24E0(a1, a2, a3, v3, v4);
}

__n128 sub_1000E3A48()
{
  __n128 result = *v1;
  __n128 *v0 = *v1;
  v0[1].n128_u64[0] = v1[1].n128_u64[0];
  return result;
}

__n128 sub_1000E3A5C( __n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __n128 a17)
{
  __n128 result = a17;
  a1[1] = a17;
  return result;
}

uint64_t sub_1000E3A70(__int128 *a1, uint64_t a2)
{
  return swift_isUniquelyReferenced_nonNull_native(v2);
}

uint64_t sub_1000E3A84()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 16));
}

__n128 sub_1000E3A8C()
{
  __n128 result = *(__n128 *)(v1 + 136);
  *(__n128 *)(v0 + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = result;
  *(_WORD *)(v0 + 15sub_100096760(v0[56], v0 + 2) = *(_WORD *)(v1 + 152);
  return result;
}

  ;
}

uint64_t sub_1000E3AAC()
{
  return v0;
}

uint64_t sub_1000E3AC0()
{
  return v2(v1, v0);
}

__n128 sub_1000E3ACC@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v1[1].n128_u64[0];
  return result;
}

uint64_t sub_1000E3AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Character.write<A>(to:)(a1, a2, a3, v3, v4);
}

uint64_t *sub_1000E3AEC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return &a9;
}

void sub_1000E3B00( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000E3B0C()
{
  *(void *)(v0 + 104) = *(void *)(v1 + 104);
  uint64_t result = *(void *)(v1 + 112);
  *(void *)(v0 + 11sub_100096760(v0[56], v0 + 2) = result;
  return result;
}

uint64_t sub_1000E3B20(uint64_t a1)
{
  *(void *)(v1 + 96) = a1;
  return swift_bridgeObjectRetain(a1);
}

void sub_1000E3B2C(uint64_t a1@<X8>)
{
  v1[8] = a1;
  v1[4] = 42LL;
  v1[5] = 0xE100000000000000LL;
}

__n128 sub_1000E3B40()
{
  unint64_t v2 = v1[1].n128_u64[0];
  __n128 result = *v1;
  __n128 *v0 = *v1;
  v0[1].n128_u64[0] = v2;
  return result;
}

  ;
}

uint64_t sub_1000E3B60()
{
  *(void *)(v0 + 7sub_100096760(v0[56], v0 + 2) = *(void *)(v1 + 72);
  uint64_t result = *(void *)(v1 + 80);
  *(void *)(v0 + 80) = result;
  return result;
}

uint64_t sub_1000E3B74()
{
  return sub_100058868();
}

uint64_t sub_1000E3B7C(uint64_t a1)
{
  return v1(a1, v2, v3);
}

uint64_t sub_1000E3B88(uint64_t a1)
{
  return sub_10004BB58(a1, v1);
}

uint64_t sub_1000E3B90()
{
  return swift_setDeallocating(v0);
}

void sub_1000E3B98(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000E3BA0()
{
  return sub_100026F84();
}

uint64_t sub_1000E3BAC()
{
  return v2(v0, v1);
}

uint64_t sub_1000E3BB8(uint64_t a1)
{
  return sub_100009E60(v2, v1, 1LL, a1);
}

void *sub_1000E3BDC(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t sub_1000E3BF0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v3, v2);
}

void sub_1000E3BFC()
{
}

uint64_t sub_1000E3C08(uint64_t a1)
{
  return swift_allocObject(a1, 32LL, 7LL);
}

uint64_t sub_1000E3C14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_dynamicCast(a1, a2, a3, v3, 6LL);
}

uint64_t sub_1000E3C20()
{
  return Statement.bind(_:)(v0);
}

uint64_t sub_1000E3C2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D4294(a1, a2, a3, v3);
}

uint64_t sub_1000E3C34(uint64_t a1, uint64_t a2)
{
  return swift_initStackObject(v2, a2);
}

uint64_t sub_1000E3C3C()
{
  return swift_setDeallocating(v0);
}

void sub_1000E3C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1000E3C50( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  return swift_initStackObject(a1, va);
}

uint64_t sub_1000E3C58(uint64_t result, int a2)
{
  *(void *)(result + 8) = (a2 - 1);
  return result;
}

uint64_t sub_1000E3C64@<X0>(int a1@<W8>)
{
  return (a1 + 1);
}

uint64_t sub_1000E3C6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Character.write<A>(to:)(a1, a2, a3, v3, v4);
}

void sub_1000E3C78(char a1, uint64_t a2)
{
  uint64_t v2 = 0x53534F5243LL;
  if (a1)
  {
    sub_1000E80F8();
    if (v3) {
      uint64_t v5 = 0x52454E4E49LL;
    }
    else {
      uint64_t v5 = 0x54554F205446454CLL;
    }
    if (v3) {
      unint64_t v6 = v4;
    }
    else {
      unint64_t v6 = 0xEA00000000005245LL;
    }
  }

  else
  {
    unint64_t v6 = 0xE500000000000000LL;
    uint64_t v5 = 0x53534F5243LL;
  }

  if ((_BYTE)a2)
  {
    sub_1000E80F8();
    if (v7) {
      uint64_t v2 = 0x52454E4E49LL;
    }
    else {
      uint64_t v2 = 0x54554F205446454CLL;
    }
    if (v7) {
      unint64_t v9 = v8;
    }
    else {
      unint64_t v9 = 0xEA00000000005245LL;
    }
  }

  else
  {
    unint64_t v9 = 0xE500000000000000LL;
  }

  if (v5 != v2 || v6 != v9) {
    sub_1000E8098(v5, a2, v2);
  }
  sub_10001198C();
  sub_10000ADB0();
  sub_10000AF74();
}

void sub_1000E3D54(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1000E3DB0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000E3E30 + 4 * byte_1000F8545[a2]))(0x5443495254534552LL);
}

void sub_1000E3E30(uint64_t a1)
{
  if (a1 != 0x5443495254534552LL || v1 != 0xE800000000000000LL) {
    _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x5443495254534552LL, 0xE800000000000000LL, 0LL);
  }
  sub_10000ADB0();
  sub_10001198C();
  sub_10000AF74();
}

void sub_1000E3ED4(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1000E3F24(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000E3F90 + 4 * byte_1000F854F[a2]))(0x4B4341424C4C4F52LL);
}

void sub_1000E3F90(uint64_t a1, uint64_t a2)
{
  if (a1 != 0x4B4341424C4C4F52LL || v2 != 0xE800000000000000LL) {
    sub_1000E8098(a1, a2, 0x4B4341424C4C4F52LL);
  }
  sub_10001198C();
  sub_10000ADB0();
  sub_10000AF74();
}

uint64_t sub_1000E4010(char a1, char a2)
{
  unint64_t v2 = 0xE900000000000045LL;
  uint64_t v3 = 0x4445525245464544LL;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v4 = 0x54414944454D4D49LL;
    }
    else {
      uint64_t v4 = 0x564953554C435845LL;
    }
    unint64_t v5 = 0xE900000000000045LL;
  }

  else
  {
    unint64_t v5 = 0xE800000000000000LL;
    uint64_t v4 = 0x4445525245464544LL;
  }

  if (a2)
  {
    if (a2 == 1) {
      uint64_t v3 = 0x54414944454D4D49LL;
    }
    else {
      uint64_t v3 = 0x564953554C435845LL;
    }
  }

  else
  {
    unint64_t v2 = 0xE800000000000000LL;
  }

  if (v4 == v3 && v5 == v2)
  {
    char v7 = 1;
    unint64_t v2 = v5;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v3, v2, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v2);
  return v7 & 1;
}

void sub_1000E4110(uint64_t a1)
{
}

void sub_1000E411C(char a1)
{
}

void sub_1000E4128(uint64_t a1)
{
}

void sub_1000E4134(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = a2(a1);
  sub_1000E802C((uint64_t)v5, v4);
  sub_10001198C();
  sub_10001BC48();
  sub_10006E2C0();
}

Swift::Int sub_1000E417C(char a1)
{
  return sub_1000E43B8(0LL, a1);
}

uint64_t sub_1000E4188(uint64_t a1, char a2)
{
  if (a2)
  {
    sub_1000E80F8();
    if (v3) {
      uint64_t v6 = 0x52454E4E49LL;
    }
    else {
      uint64_t v6 = 0x54554F205446454CLL;
    }
    if (v3) {
      uint64_t v2 = v5;
    }
    else {
      uint64_t v2 = 0xEA00000000005245LL;
    }
  }

  else
  {
    sub_1000E80E4();
  }

  sub_1000E802C(v4, v6);
  return sub_10000AE90(v2);
}

void sub_1000E41E4(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_1000E4228(uint64_t a1)
{
  return sub_10000AE90(0xE800000000000000LL);
}

void sub_1000E429C(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_1000E42DC(uint64_t a1)
{
  return sub_10000AE90(0xE800000000000000LL);
}

uint64_t sub_1000E4338(uint64_t a1, char a2)
{
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v2 = 0x54414944454D4D49LL;
    }
    else {
      uint64_t v2 = 0x564953554C435845LL;
    }
    unint64_t v3 = 0xE900000000000045LL;
  }

  else
  {
    unint64_t v3 = 0xE800000000000000LL;
    uint64_t v2 = 0x4445525245464544LL;
  }

  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1000E43B8(uint64_t a1, char a2)
{
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v3 = 0x54414944454D4D49LL;
    }
    else {
      uint64_t v3 = 0x564953554C435845LL;
    }
    unint64_t v4 = 0xE900000000000045LL;
  }

  else
  {
    unint64_t v4 = 0xE800000000000000LL;
    uint64_t v3 = 0x4445525245464544LL;
  }

  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_1000E445C(uint64_t a1, uint64_t a2)
{
}

void sub_1000E4468(uint64_t a1, uint64_t a2)
{
}

void sub_1000E4474(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = a3(a2);
  sub_1000E802C((uint64_t)v6, v5);
  sub_10001198C();
  sub_10001BC48();
  sub_10006E2C0();
}

void sub_1000E44C0(uint64_t a1, char a2)
{
  if (a2)
  {
    sub_1000E80F8();
    if (v3) {
      uint64_t v4 = 0x52454E4E49LL;
    }
    else {
      uint64_t v4 = 0x54554F205446454CLL;
    }
  }

  else
  {
    sub_1000E80E4();
  }

  sub_1000E802C((uint64_t)v5, v4);
  sub_10001198C();
  sub_10001BC48();
  sub_10006E2C0();
}

void Connection.prepare(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  if (*(void *)(a3 + 16))
  {
    Connection.prepare(_:_:)(a1, a2, _swiftEmptyArrayStorage);
    if (!v4)
    {
      Statement.bind(_:)(a3);
      sub_1000389DC();
    }
  }

  else
  {
    unint64_t v8 = type metadata accessor for Statement();
    sub_10000C254(v8, 72LL);
    sub_10000C7FC();
    swift_bridgeObjectRetain(a2);
    sub_1000E9D10(v3, a1, a2);
  }

  sub_100059578();
}

{
  sub_1000E58B8(a1, a2, a3, (void (*)(uint64_t))Statement.bind(_:));
}

uint64_t sub_1000E4550(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_10000AC78((_OWORD *)a1, v12);
    return sub_1000E767C(v12, a2);
  }

  else
  {
    sub_10000C218(a1, &qword_100130EA0);
    unint64_t v5 = sub_1000EB1F8(a2);
    if ((v6 & 1) != 0)
    {
      unint64_t v7 = v5;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
      uint64_t v11 = *v2;
      uint64_t v9 = *v2;
      *uint64_t v2 = 0x8000000000000000LL;
      Swift::Int v10 = *(void *)(v9 + 24);
      sub_100008DB0(&qword_100134C08);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v10);
      sub_10000AC78((_OWORD *)(*(void *)(v11 + 56) + 32 * v7), v12);
      _NativeDictionary._delete(at:)(v7, v11, &type metadata for Int, (char *)&type metadata for Any + 8);
      *uint64_t v2 = v11;
      swift_bridgeObjectRelease();
    }

    else
    {
      memset(v12, 0, sizeof(v12));
    }

    return sub_10000C218((uint64_t)v12, &qword_100130EA0);
  }

void Connection.scalar(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

{
  Connection.scalar(_:_:)(a1, a2, a3, a4);
}

{
  sub_1000E59F0(a1, a2, a3, (void (*)(uint64_t))Statement.bind(_:), a4);
}

void Connection.run(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

{
  Connection.run(_:_:)(a1, a2, a3);
}

{
  sub_1000E592C(a1, a2, a3, (void (*)(uint64_t))Statement.bind(_:));
}

sqlite3_int64 Connection.lastInsertRowid.getter()
{
  uint64_t v0 = (sqlite3 *)Connection.handle.getter();
  return sqlite3_last_insert_rowid(v0);
}

BOOL sub_1000E46BC(uint64_t a1, uint64_t a2)
{
  if (qword_1001345F8 != -1) {
    swift_once(&qword_1001345F8, sub_1000E7388);
  }
  static OS_dispatch_queue.getSpecific<A>(key:)(&v13);
  uint64_t v4 = v13;
  char v5 = v14;
  uint64_t v6 = sub_1000E52D0();
  if ((v5 & 1) != 0 || v4 != v6)
  {
    id v11 = *(id *)(a1 + 104);
    OS_dispatch_queue.sync<A>(execute:)(&v15, sub_1000E7ED8, a2);
    sub_1000E8104();

    if (!v11) {
      return v15;
    }
  }

  else
  {
    uint64_t v7 = *(void *)(a2 + 24);
    swift_beginAccess(a2 + 16, &v13, 0LL, 0LL);
    uint64_t v8 = sqlite3_step(*(sqlite3_stmt **)(a2 + 16));
    int v9 = v8;
    sub_1000E51EC(v8, 0LL);
    sub_1000E8104();
    if (!v7) {
      return v9 == 100;
    }
  }

  return v10;
}

#error "1000E485C: call analysis failed (funcsize=53)"
#error "1000E493C: call analysis failed (funcsize=54)"
uint64_t sub_1000E49AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  char v10;
  uint64_t v11;
  sqlite3 *v12;
  uint64_t v13;
  uint64_t v14;
  void v16[6];
  uint64_t v17;
  char v18;
  uint64_t v19;
  v16[2] = a2;
  void v16[3] = a3;
  v16[4] = a4;
  sub_1000CB28C();
  if (qword_1001345F8 != -1) {
    swift_once(&qword_1001345F8, sub_1000E7388);
  }
  static OS_dispatch_queue.getSpecific<A>(key:)(&v17);
  int v9 = v17;
  BOOL v10 = v18;
  id v11 = sub_1000E52D0();
  if ((v10 & 1) != 0 || v9 != v11)
  {
    char v14 = (uint64_t)*(id *)(a1 + 104);
    OS_dispatch_queue.sync<A>(execute:)(&v19, sub_1000E7E8C, v16);
    if (v4)
    {
      swift_bridgeObjectRelease(a4);
      swift_release(a2);

      return v14;
    }

    swift_release(a2);

    char v14 = v19;
LABEL_11:
    swift_bridgeObjectRelease(a4);
    return v14;
  }

  uint64_t v12 = (sqlite3 *)Connection.handle.getter();
  uint64_t v13 = String.utf8CString.getter(a3, a4);
  char v14 = sqlite3_exec(v12, (const char *)(v13 + 32), 0LL, 0LL, 0LL);
  swift_release(v13);
  sub_1000E51EC(v14, 0LL);
  if (!v4)
  {
    swift_release(a2);
    goto LABEL_11;
  }

  swift_bridgeObjectRelease(a4);
  swift_release(a2);
  return v14;
}

uint64_t sub_1000E4B4C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v33 = a2;
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  uint64_t v36 = a5;
  uint64_t v37 = a6;
  uint64_t v38 = a7;
  uint64_t v39 = a8;
  uint64_t v40 = a10;
  uint64_t v41 = a11;
  sub_1000CB28C();
  if (qword_1001345F8 != -1) {
    swift_once(&qword_1001345F8, sub_1000E7388);
  }
  static OS_dispatch_queue.getSpecific<A>(key:)(&v42);
  uint64_t v16 = v42;
  char v17 = v43;
  uint64_t v18 = sub_1000E52D0();
  if ((v17 & 1) != 0 || v16 != v18)
  {
    id v24 = *(id *)(a1 + 104);
    uint64_t v25 = v44;
    OS_dispatch_queue.sync<A>(execute:)(a9, sub_1000E7E5C, v32);
    if (v25)
    {
      swift_bridgeObjectRelease(a4);
      swift_release(a2);

      uint64_t v19 = a11;
      uint64_t v22 = a8;
      goto LABEL_9;
    }

    swift_release(a2);

    uint64_t v19 = a11;
    uint64_t v22 = a8;
    uint64_t v20 = a4;
LABEL_12:
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v22);
    uint64_t v26 = v20;
    return swift_bridgeObjectRelease(v26);
  }

  uint64_t v20 = a4;
  uint64_t v19 = a11;
  uint64_t v21 = a3;
  uint64_t v22 = a8;
  uint64_t v23 = v44;
  sub_1000E5EA0(a2, v21, a4, a5, a6, a7, a8);
  if (!v23)
  {
    swift_release(a2);
    goto LABEL_12;
  }

  swift_bridgeObjectRelease(a4);
  swift_release(a2);
LABEL_9:
  swift_bridgeObjectRelease(v19);
  uint64_t v26 = v22;
  return swift_bridgeObjectRelease(v26);
}

uint64_t Connection.changes.getter()
{
  uint64_t v0 = (sqlite3 *)Connection.handle.getter();
  return sqlite3_changes(v0);
}

uint64_t sub_1000E4D38(int a1)
{
  switch(a1)
  {
    case 9:
      return 2LL;
    case 18:
      return 0LL;
    case 23:
      return 1LL;
  }

  _StringGuts.grow(_:)(28LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  HIDWORD(v5) = a1;
  v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  LODWORD(v5) = 0;
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000001ALL,  0x80000001000FCED0LL,  "AppIntents_SQLite/Connection.swift",  34LL,  2LL,  82LL,  v5);
  __break(1u);
  return result;
}

void Connection.Operation.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

void Connection.Operation.hashValue.getter(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  sub_1000C6AF4(a1);
  Hasher._combine(_:)(v1);
  sub_10001BC48();
  sub_10006E2C0();
}

void sub_1000E4E6C()
{
}

void sub_1000E4E74(uint64_t a1)
{
}

uint64_t Connection.handle.getter()
{
  uint64_t result = *(void *)(v0 + 16);
  if (!result) {
    __break(1u);
  }
  return result;
}

void Connection.__allocating_init(_:readonly:)()
{
}

uint64_t Connection.init(_:readonly:)(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v36 = a2;
  int v38 = a3;
  uint64_t v37 = a1;
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v33 = *(void *)(v5 - 8);
  uint64_t v34 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v8);
  sub_1000B78A0();
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v9);
  id v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
  uint64_t v12 = (sqlite3 **)(v3 + 16);
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 3sub_100096760(v0[56], v0 + 2) = 0u;
  *(void *)(v3 + 80) = 0LL;
  *(void *)(v3 + 88) = &_swiftEmptyDictionarySingleton;
  *(void *)(v3 + 96) = &_swiftEmptyDictionarySingleton;
  sub_1000CB28C();
  uint64_t v39 = _swiftEmptyArrayStorage;
  unint64_t v13 = sub_10003A28C();
  uint64_t v14 = sub_100008DB0(&qword_100130570);
  unint64_t v15 = sub_10001B540();
  uint64_t v16 = dispatch thunk of SetAlgebra.init<A>(_:)(&v39, v14, v15, v9, v13);
  static DispatchQoS.unspecified.getter(v16);
  (*(void (**)(char *, void, uint64_t))(v33 + 104))( v7,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v34);
  *(void *)(v3 + 104) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0x442E6574694C5153LL,  0xEF65736162617461LL,  v4,  v11,  v7,  0LL);
  *(void *)(v3 + 11sub_100096760(v0[56], v0 + 2) = 0LL;
  *(_BYTE *)(v3 + 120) = 1;
  sub_1000E8064();
  uint64_t v19 = v37;
  unint64_t v20 = 0xE000000000000000LL;
  if (v36 == 1) {
    uint64_t v19 = 0LL;
  }
  else {
    unint64_t v20 = v36;
  }
  if (v36) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v18;
  }
  if (v36) {
    unint64_t v22 = v20;
  }
  else {
    unint64_t v22 = v17;
  }
  if ((v38 & 1) != 0) {
    int v23 = 65537;
  }
  else {
    int v23 = 65542;
  }
  uint64_t v24 = String.utf8CString.getter(v21, v22);
  sub_10001198C();
  sub_1000E80BC((uint64_t)v12, (uint64_t)&v39);
  uint64_t v25 = v35;
  uint64_t v26 = sqlite3_open_v2((const char *)(v24 + 32), v12, v23, 0LL);
  swift_endAccess(&v39);
  sub_100038920();
  uint64_t v27 = v41;
  sub_1000E51EC(v26, 0LL);
  if (v27)
  {
    swift_release(v25);
  }

  else
  {
    uint64_t v28 = qword_1001345F8;
    id v29 = *(id *)(v25 + 104);
    if (v28 != -1) {
      swift_once(&qword_1001345F8, sub_1000E7388);
    }
    uint64_t v30 = qword_100134AF0;
    uint64_t v39 = (void *)sub_1000E52D0();
    char v40 = 0;
    OS_dispatch_queue.setSpecific<A>(key:value:)(v30, &v39);
  }

  return v25;
}

void Connection.Location.description.getter()
{
}

const char *sub_1000E51EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = qword_100134610;
  sub_10000C7FC();
  swift_retain(a2);
  if (v4 != -1) {
    swift_once(&qword_100134610, sub_1000F1658);
  }
  sub_1000F167C(a1, qword_100134FF8);
  if ((v5 & 1) != 0)
  {
    sub_1000389DC();
    sub_100038920();
    return (const char *)a1;
  }

  uint64_t v6 = (sqlite3 *)Connection.handle.getter();
  uint64_t result = sqlite3_errmsg(v6);
  if (result)
  {
    uint64_t v8 = String.init(cString:)(result);
    uint64_t v10 = v9;
    sub_1000389DC();
    unint64_t v11 = sub_100037E20();
    swift_allocError(&type metadata for Result, v11, 0LL, 0LL);
    *(void *)uint64_t v12 = v8;
    *(void *)(v12 + 8) = v10;
    *(_DWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
    *(void *)(v12 + 24) = a2;
    swift_willThrow();
    return (const char *)a1;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000E52D0()
{
  uint64_t result = v0;
  if (*(_BYTE *)(v0 + 120) != 1) {
    return *(void *)(v0 + 112);
  }
  *(void *)(v0 + 11sub_100096760(v0[56], v0 + 2) = v0;
  *(_BYTE *)(v0 + 120) = 0;
  return result;
}

uint64_t Connection.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = (sqlite3 *)Connection.handle.getter();
  sqlite3_close(v2);
  sub_1000CB364(v0 + 24, (uint64_t)v8, 0LL);
  uint64_t v3 = *(void (**)(uint64_t))(v0 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(v0 + 32);
    uint64_t v5 = sub_10000C7FC();
    v3(v5);
    sub_100075674((uint64_t)v3, v4);
    uint64_t v6 = *(void *)(v1 + 24);
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  sub_100075674(v6, *(void *)(v1 + 32));
  _Block_release(*(const void **)(v1 + 48));
  _Block_release(*(const void **)(v1 + 56));
  _Block_release(*(const void **)(v1 + 64));
  _Block_release(*(const void **)(v1 + 72));
  _Block_release(*(const void **)(v1 + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v1;
}

uint64_t Connection.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 121LL, 7LL);
}

uint64_t Connection.onClose.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  sub_100047094(v1, *(void *)(v0 + 32));
  return v1;
}

void Connection.onClose.setter()
{
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 3sub_100096760(v0[56], v0 + 2) = v0;
  sub_100075674(v3, v4);
  sub_10001BF0C();
}

void Connection.onClose.modify(uint64_t a1)
{
}

BOOL Connection.readonly.getter()
{
  uint64_t v0 = (sqlite3 *)Connection.handle.getter();
  return sqlite3_db_readonly(v0, 0LL) == 1;
}

uint64_t Connection.totalChanges.getter()
{
  uint64_t v0 = (sqlite3 *)Connection.handle.getter();
  return sqlite3_total_changes(v0);
}

unint64_t Connection.userVersion.getter()
{
  if (!v6)
  {
    sub_10000C218((uint64_t)v5, &qword_100131978);
    goto LABEL_2;
  }

  uint64_t v3 = sub_100008DB0(&qword_100131980);
  unint64_t result = swift_dynamicCast(&v4, v5, v3, &type metadata for Int64, 6LL);
  if ((result & 1) == 0)
  {
LABEL_2:
    uint64_t v0 = 0LL;
    unsigned __int8 v1 = 1;
LABEL_3:
    v5[0] = v1;
    return v0 | ((unint64_t)v1 << 32);
  }

  if (v4 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
  }

  else if (v4 <= 0x7FFFFFFF)
  {
    unsigned __int8 v1 = 0;
    uint64_t v0 = v4;
    goto LABEL_3;
  }

  __break(1u);
  return result;
}

void Connection.userVersion.setter()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  Connection.run(_:_:)(0xD000000000000016LL, 0x80000001000FCCD0LL, (uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  swift_release();
  sub_10001BF0C();
}

void Connection.userVersion.modify(uint64_t a1)
{
  *(void *)a1 = v1;
  unint64_t v3 = Connection.userVersion.getter();
  *(_DWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 1sub_100096760(v0[56], v0 + 2) = BYTE4(v3) & 1;
  sub_10000ADA8();
}

void sub_1000E56E8()
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Connection.execute(_:)( Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  sub_10000C7FC();
  sub_10000AFB0();
  sub_1000E49AC(v1, v1, countAndFlagsBits, (uint64_t)object);
}

const char *sub_1000E5758@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _DWORD *a3@<X8>)
{
  uint64_t v7 = (sqlite3 *)Connection.handle.getter();
  uint64_t v8 = String.utf8CString.getter(a1, a2);
  uint64_t v9 = sqlite3_exec(v7, (const char *)(v8 + 32), 0LL, 0LL, 0LL);
  swift_release(v8);
  unint64_t result = sub_1000E51EC(v9, 0LL);
  if (!v3) {
    *a3 = v9;
  }
  return result;
}

void sub_1000E58B8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  if (!v4)
  {
    a4(a3);
    sub_1000389DC();
  }

void sub_1000E592C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  if (!v4)
  {
    a4(a3);
    Statement.run(_:)((uint64_t)_swiftEmptyArrayStorage);
    sub_100038920();
    sub_10003EF28();
  }

  sub_100059578();
}

void Connection.vacuum()()
{
}

void sub_1000E59F0( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X8>)
{
  if (!v5)
  {
    a4(a3);
    Statement.scalar(_:)((uint64_t)_swiftEmptyArrayStorage, a5);
    sub_10003EF28();
    sub_1000389DC();
  }

AppIntents_SQLite::Connection::TransactionMode_optional __swiftcall Connection.TransactionMode.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100127588, v2);
  sub_10001198C();
  if (v3 >= 3) {
    return (AppIntents_SQLite::Connection::TransactionMode_optional)3;
  }
  else {
    return (AppIntents_SQLite::Connection::TransactionMode_optional)v3;
  }
}

uint64_t Connection.TransactionMode.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x4445525245464544LL;
  }
  if (a1 == 1) {
    return 0x54414944454D4D49LL;
  }
  return 0x564953554C435845LL;
}

uint64_t sub_1000E5B14(char *a1, char *a2)
{
  return sub_1000E4010(*a1, *a2);
}

Swift::Int sub_1000E5B20()
{
  return sub_1000E417C(*v0);
}

uint64_t sub_1000E5B28(uint64_t a1)
{
  return sub_1000E4338(a1, *v1);
}

Swift::Int sub_1000E5B30(uint64_t a1)
{
  return sub_1000E43B8(a1, *v1);
}

AppIntents_SQLite::Connection::TransactionMode_optional sub_1000E5B38@<W0>( Swift::String *a1@<X0>, AppIntents_SQLite::Connection::TransactionMode_optional *a2@<X8>)
{
  result.value = Connection.TransactionMode.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t sub_1000E5B64@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Connection.TransactionMode.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t Connection.transaction(_:block:)(char a1, void (*a2)(uint64_t), uint64_t a3)
{
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v6 = 0x54414944454D4D49LL;
    }
    else {
      uint64_t v6 = 0x564953554C435845LL;
    }
    unint64_t v7 = 0xE900000000000045LL;
  }

  else
  {
    unint64_t v7 = 0xE800000000000000LL;
    uint64_t v6 = 0x4445525245464544LL;
  }

  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  sub_10001BEC0();
  v9._uint64_t countAndFlagsBits = 0x4341534E41525420LL;
  v9._object = (void *)0xEC0000004E4F4954LL;
  String.append(_:)(v9);
  sub_1000E5CEC( 0x204E49474542LL,  0xE600000000000000LL,  a2,  a3,  0xD000000000000012LL,  0x80000001000FA3C0LL,  0xD000000000000014LL,  0x80000001000FA3A0LL);
  return sub_10001BEC0();
}

uint64_t sub_1000E5CEC( uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1000E4B4C(v8, v8, a1, a2, a3, a4, a5, a6, v17, a7, a8);
}

uint64_t Connection.savepoint(_:block:)( uint64_t a1, unint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  v6._uint64_t countAndFlagsBits = sub_1000D4294(39LL, 0xE100000000000000LL, a1, a2);
  String.append(_:)(v6);
  int v7 = sub_10001BEC0();
  sub_1000E8048(v7, v8, v9, v10, v11, v12, v13, v14, 0x4E494F5045564153LL, 0xEA00000000002054LL);
  uint64_t v15 = v26;
  uint64_t v16 = v28;
  sub_1000E8048(v17, v18, v19, v20, v21, v22, v23, v24, v26, v28);
  sub_1000E5CEC(0x4E494F5045564153LL, 0xEA00000000002054LL, a3, a4, v15, v16, v27, v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_10001198C();
}

void sub_1000E5EA0( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!v7)
  {
    uint64_t v12 = swift_release(v11);
    a4(v12);
    Connection.run(_:_:)(a6, a7, (uint64_t)_swiftEmptyArrayStorage);
    swift_release(v13);
  }

Swift::Void __swiftcall Connection.interrupt()()
{
  Swift::String v0 = (sqlite3 *)Connection.handle.getter();
  sqlite3_interrupt(v0);
}

uint64_t sub_1000E5FA8()
{
  uint64_t v1 = (sqlite3 *)Connection.handle.getter();
  uint64_t result = swift_beginAccess(v0 + 40, v4, 0LL, 0LL);
  double v3 = *(double *)(v0 + 40) * 1000.0;
  if ((~*(void *)&v3 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (v3 <= -2147483650.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (v3 < 2147483650.0) {
    return sqlite3_busy_timeout(v1, (int)v3);
  }
LABEL_7:
  __break(1u);
  return result;
}

double Connection.busyTimeout.getter()
{
  return *(double *)(v0 + 40);
}

uint64_t Connection.busyTimeout.setter(double a1)
{
  *(double *)(v1 + 40) = a1;
  return sub_1000E5FA8();
}

void Connection.busyTimeout.modify(uint64_t a1)
{
  *(void *)(a1 + 24) = v1;
  sub_1000CB364(v1 + 40, a1, 33LL);
  sub_10000ADA8();
}

void sub_1000E60DC(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    sub_1000E5FA8();
  }
  sub_10000ADA8();
}

void Connection.busyHandler(_:)(uint64_t a1)
{
  if (a1)
  {
    sub_1000E80A8();
    uint64_t v4 = sub_1000E3C08((uint64_t)&unk_100128270);
    *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
    *(void *)(v4 + 24) = v1;
    sub_1000E7FE8((uint64_t)sub_1000346BC, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v11, v12);
    sub_1000E7FB8();
    sub_100038920();
    uint64_t v5 = (sqlite3 *)Connection.handle.getter();
    sqlite3_busy_handler(v5, (int (__cdecl *)(void *, int))sub_1000E61C0, v3);
    Swift::String v6 = *(const void **)(v2 + 48);
    *(void *)(v2 + 48) = v3;
    _Block_release(v6);
    sub_1000D9118();
  }

  else
  {
    Connection.handle.getter();
    sub_10000EA88();
    sqlite3_busy_handler(v7, v8, v9);
    int v10 = *(const void **)(v2 + 48);
    *(void *)(v2 + 48) = 0LL;
    sub_1000E7F60(v10);
  }

uint64_t sub_1000E61B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

void sub_1000E61C8(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v5 = swift_allocObject(&unk_100128600, 32LL, 7LL);
    *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
    *(void *)(v5 + 24) = a2;
    v11[4] = sub_1000E7E54;
    void v11[5] = v5;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256LL;
    v11[2] = sub_1000E62DC;
    v11[3] = &unk_100128618;
    Swift::String v6 = _Block_copy(v11);
    swift_retain_n(a2, 2LL);
    swift_release();
    uint64_t v7 = (sqlite3 *)Connection.handle.getter();
    sqlite3_trace_v2(v7, 1u, (int (__cdecl *)(unsigned int, void *, void *, void *))sub_1000E639C, v6);
    sub_100075674(a1, a2);
    int v8 = *(const void **)(v2 + 56);
    *(void *)(v2 + 56) = v6;
    _Block_release(v8);
  }

  else
  {
    int v9 = (sqlite3 *)Connection.handle.getter();
    sqlite3_trace_v2(v9, 0, 0LL, 0LL);
    int v10 = *(const void **)(v2 + 56);
    *(void *)(v2 + 56) = 0LL;
    _Block_release(v10);
  }

uint64_t sub_1000E62DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

uint64_t sub_1000E6318(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = String.init(cString:)();
  uint64_t v5 = v4;
  a2(v3);
  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_1000E6350(int a1, uint64_t a2, sqlite3_stmt *pStmt)
{
  if (pStmt)
  {
    uint64_t v4 = sqlite3_expanded_sql(pStmt);
    if (v4)
    {
      uint64_t v5 = v4;
      (*(void (**)(uint64_t, char *))(a2 + 16))(a2, v4);
      sqlite3_free(v5);
    }
  }

  return 0LL;
}

void Connection.updateHook(_:)(uint64_t a1)
{
  if (a1)
  {
    sub_1000E80A8();
    uint64_t v4 = sub_1000E3C08((uint64_t)&unk_1001282C0);
    *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
    *(void *)(v4 + 24) = v1;
    sub_1000E7FE8((uint64_t)sub_1000E64E0, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v11, v12);
    sub_1000E7FB8();
    sub_100038920();
    uint64_t v5 = (sqlite3 *)Connection.handle.getter();
    sqlite3_update_hook(v5, (void (__cdecl *)(void *, int, const char *, const char *, sqlite3_int64))sub_1000E6558, v3);
    Swift::String v6 = *(const void **)(v2 + 64);
    *(void *)(v2 + 64) = v3;
    _Block_release(v6);
    sub_1000D9118();
  }

  else
  {
    Connection.handle.getter();
    sub_10000EA88();
    sqlite3_update_hook(v7, v8, v9);
    int v10 = *(const void **)(v2 + 64);
    *(void *)(v2 + 64) = 0LL;
    sub_1000E7F60(v10);
  }

uint64_t sub_1000E6450( int a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = sub_1000E4D38(a1);
  uint64_t v10 = String.init(cString:)(a2);
  uint64_t v12 = v11;
  uint64_t v13 = String.init(cString:)(a3);
  a5(v9, v10, v12, v13, v14, a4);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000E64E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  swift_retain(v9);
  v10(a2, a3, a4, a5);
  return swift_release(v9);
}

uint64_t sub_1000E6540(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    if (a4) {
      return (*(uint64_t (**)(void))(result + 16))();
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void Connection.commitHook(_:)(uint64_t a1)
{
  if (a1)
  {
    sub_1000E80A8();
    uint64_t v4 = sub_1000E3C08((uint64_t)&unk_100128310);
    *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
    *(void *)(v4 + 24) = v1;
    sub_1000E7FE8((uint64_t)sub_1000E6658, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v11, v12);
    sub_1000E7FB8();
    sub_100038920();
    uint64_t v5 = (sqlite3 *)Connection.handle.getter();
    sqlite3_commit_hook(v5, (int (__cdecl *)(void *))sub_1000E6698, v3);
    Swift::String v6 = *(const void **)(v2 + 72);
    *(void *)(v2 + 7sub_100096760(v0[56], v0 + 2) = v3;
    _Block_release(v6);
    sub_1000D9118();
  }

  else
  {
    Connection.handle.getter();
    sub_10000EA88();
    sqlite3_commit_hook(v7, v8, v9);
    uint64_t v10 = *(const void **)(v2 + 72);
    *(void *)(v2 + 7sub_100096760(v0[56], v0 + 2) = 0LL;
    sub_1000E7F60(v10);
  }

uint64_t sub_1000E660C(void (*a1)(void))
{
  return 0LL;
}

uint64_t sub_1000E6658(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  uint64_t v4 = v1(v3);
  swift_release(v2);
  return v4;
}

uint64_t sub_1000E6690(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

void Connection.rollbackHook(_:)(uint64_t a1)
{
  if (a1)
  {
    sub_1000E80A8();
    uint64_t v4 = sub_1000E3C08((uint64_t)&unk_100128360);
    *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
    *(void *)(v4 + 24) = v1;
    sub_1000E7FE8((uint64_t)sub_10000D934, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v11, v12);
    sub_1000E7FB8();
    sub_100038920();
    uint64_t v5 = (sqlite3 *)Connection.handle.getter();
    sqlite3_rollback_hook(v5, (void (__cdecl *)(void *))sub_1000E674C, v3);
    Swift::String v6 = *(const void **)(v2 + 80);
    *(void *)(v2 + 80) = v3;
    _Block_release(v6);
    sub_1000D9118();
  }

  else
  {
    Connection.handle.getter();
    sub_10000EA88();
    sqlite3_rollback_hook(v7, v8, v9);
    uint64_t v10 = *(const void **)(v2 + 80);
    *(void *)(v2 + 80) = 0LL;
    sub_1000E7F60(v10);
  }

uint64_t Connection.createFunction(_:argumentCount:deterministic:_:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  if ((a4 & 1) == 0)
  {
    uint64_t v12 = a3;
    if ((a3 & 0x8000000000000000LL) == 0) {
      goto LABEL_5;
    }
    __break(1u);
  }

  uint64_t v12 = -1LL;
LABEL_5:
  uint64_t v13 = sub_1000E3C08((uint64_t)&unk_1001283B0);
  *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = a6;
  *(void *)(v13 + 24) = a7;
  int v38 = sub_1000E766C;
  uint64_t v39 = v13;
  aBlock = _NSConcreteStackBlock;
  uint64_t v35 = 1107296256LL;
  unint64_t v36 = sub_1000E6D90;
  uint64_t v37 = &unk_1001283C8;
  uint64_t v14 = (void **)_Block_copy(&aBlock);
  swift_retain();
  swift_release();
  uint64_t v15 = Connection.handle.getter();
  if (v12 > 0x7FFFFFFF)
  {
    __break(1u);
  }

  else
  {
    int v19 = (sqlite3 *)v15;
    if ((a5 & 1) != 0) {
      int v20 = 2049;
    }
    else {
      int v20 = 1;
    }
    uint64_t v21 = String.utf8CString.getter(a1, a2);
    function_uint64_t v2 = sqlite3_create_function_v2( v19,  (const char *)(v21 + 32),  v12,  v20,  v14,  (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_1000E6E28,  0LL,  0LL,  0LL);
    swift_release();
    sub_10000C7FC();
    uint64_t v15 = (uint64_t)sub_1000F1590(function_v2);
    if (!v16)
    {
      uint64_t v37 = (void *)sub_100008DB0(&qword_100134AF8);
      aBlock = v14;
      _Block_copy(v14);
      sub_1000E6E2C(a1, a2, v12, (uint64_t)&aBlock);
      _Block_release(v14);
      return sub_10000AC58(&aBlock);
    }
  }

  uint64_t v24 = v15;
  uint64_t v25 = v17;
  aBlock = 0LL;
  uint64_t v35 = 0xE000000000000000LL;
  uint64_t v26 = v18;
  uint64_t v27 = v16;
  _StringGuts.grow(_:)(27LL);
  swift_bridgeObjectRelease();
  aBlock = (void **)0xD000000000000019LL;
  uint64_t v35 = 0x80000001000FCD70LL;
  v28._uint64_t countAndFlagsBits = Result.description.getter(v24, v27, v25, v26);
  String.append(_:)(v28);
  sub_10001198C();
  LODWORD(v33) = 0;
  uint64_t result = sub_1000E8034( (uint64_t)"Fatal error",  v29,  v30,  (uint64_t)aBlock,  v35,  (uint64_t)"AppIntents_SQLite/Connection.swift",  v31,  v32,  625LL,  v33);
  __break(1u);
  return result;
}

uint64_t sub_1000E6970(sqlite3_context *a1, int a2, uint64_t a3, void (*a4)(void *__return_ptr))
{
  return sub_10000C218((uint64_t)v7, &qword_100131978);
}

void sub_1000E69E0(int a1, uint64_t a2)
{
  if (a1 < 0)
  {
LABEL_10:
    __break(1u);
    return;
  }

  if (a1)
  {
    uint64_t v3 = a1;
    uint64_t v9 = _swiftEmptyArrayStorage;
    sub_1000453A4();
    uint64_t v4 = 0LL;
    uint64_t v5 = _swiftEmptyArrayStorage;
    while (v3 != v4)
    {
      uint64_t v7 = v4;
      sub_1000E7410(&v7, a2, (uint64_t)v8);
      uint64_t v9 = v5;
      unint64_t v6 = v5[2];
      if (v6 >= v5[3] >> 1)
      {
        sub_1000453A4();
        uint64_t v5 = v9;
      }

      ++v4;
      __int128 v5[2] = v6 + 1;
      sub_100047004((uint64_t)v8, (uint64_t)&v5[5 * v6 + 4]);
      if (v3 == v4) {
        return;
      }
    }

    __break(1u);
    goto LABEL_10;
  }

uint64_t sub_1000E6AD8(uint64_t a1, sqlite3_context *a2)
{
  uint64_t v6 = type metadata accessor for String.Encoding(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_1000B78A0();
  sub_1000D4A80(a1, (uint64_t)v38);
  if (!v39)
  {
    sqlite3_result_null(a2);
    return sub_10000C218((uint64_t)v38, &qword_100131978);
  }

  sub_1000D4A80((uint64_t)v38, (uint64_t)v37);
  uint64_t v8 = sub_100008DB0(&qword_100131980);
  uint64_t v11 = sub_1000E7F8C(v8, v9, v10, (uint64_t)&type metadata for Blob);
  if ((_DWORD)v11)
  {
    LODWORD(v14) = v33;
    unint64_t v15 = *(void *)(v33 + 16);
    if (!(v15 >> 31))
    {
      sqlite3_result_blob(a2, (const void *)(v33 + 32), v15, 0LL);
      sub_10000ADB0();
LABEL_15:
      sub_10000AC58(v37);
      return sub_10000C218((uint64_t)v38, &qword_100131978);
    }

    __break(1u);
    goto LABEL_18;
  }

  uint64_t v16 = sub_1000E7F8C(v11, v12, v13, (uint64_t)&type metadata for Double);
  if ((_DWORD)v16)
  {
    sqlite3_result_double(a2, *(double *)&v33);
    goto LABEL_15;
  }

  uint64_t v19 = sub_1000E7F8C(v16, v17, v18, (uint64_t)&type metadata for Int64);
  if ((_DWORD)v19)
  {
    sqlite3_result_int64(a2, v33);
    goto LABEL_15;
  }

  if (sub_1000E7F8C(v19, v20, v21, (uint64_t)type metadata for String))
  {
    sqlite3_int64 v3 = v33;
    uint64_t v8 = v34;
    uint64_t v35 = v33;
    unint64_t v36 = v34;
    static String.Encoding.utf8.getter();
    unint64_t v22 = sub_1000118E0();
    uint64_t v14 = StringProtocol.lengthOfBytes(using:)(v2, type metadata for String, v22);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v6);
    if (v14 >= (uint64_t)0xFFFFFFFF80000000LL)
    {
      if (v14 <= 0x7FFFFFFF)
      {
        if (qword_1001345F0 == -1)
        {
LABEL_14:
          int v23 = (void (__cdecl *)(void *))qword_100135CF8;
          uint64_t v24 = String.utf8CString.getter(v3, v8);
          swift_bridgeObjectRelease();
          sqlite3_result_text(a2, (const char *)(v24 + 32), v14, v23);
          sub_100038920();
          goto LABEL_15;
        }

uint64_t sub_1000E6D90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  swift_retain(v7);
  v8(a2, a3, a4);
  return swift_release(v7);
}

uint64_t sub_1000E6DE8(sqlite3_context *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t (**)(void *, sqlite3_context *, uint64_t, uint64_t))sqlite3_user_data(a1);
  return v6[2](v6, a1, a2, a3);
}

uint64_t sub_1000E6E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = v4 + 88;
  sub_1000CB364(v4 + 88, (uint64_t)v18, 32LL);
  uint64_t v10 = *(void *)(v4 + 88);
  sub_10000AFB0();
  sub_1000E13F8(a1, a2, v10);
  uint64_t v12 = v11;
  swift_endAccess(v18);
  sub_10001198C();
  sub_10000ADB0();
  if (!v12)
  {
    sub_10000AFB0();
    uint64_t v13 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for Int,  (char *)&type metadata for Any + 8,  &protocol witness table for Int);
    sub_1000CB364(v9, (uint64_t)v18, 33LL);
    sub_1000E76E8(v13, a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000EB3EC);
    swift_endAccess(v18);
    sub_10001198C();
  }

  sub_1000CB364(v9, (uint64_t)v19, 33LL);
  sub_10000AFB0();
  uint64_t v14 = sub_1000E6F80(v18, a1, a2);
  if (*v15)
  {
    sub_10000C194(a4, (uint64_t)v17);
    sub_1000E4550((uint64_t)v17, a3);
  }

  ((void (*)(void *, void))v14)(v18, 0LL);
  swift_endAccess(v19);
  return sub_10001198C();
}

void (*sub_1000E6F80(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  v6[5] = sub_1000E7B3C(v6, a2, a3);
  return sub_1000E6FEC;
}

void sub_1000E6FEC(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 40LL))(*a1, 0LL);
  sub_10000ADB0();
  sub_1000E805C(v1);
}

void Connection.createCollation(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = sub_10000C254((uint64_t)&unk_100128400, 32LL);
  *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  *(void *)(v10 + 24) = a4;
  uint64_t v15[4] = sub_1000E7674;
  void v15[5] = v10;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256LL;
  __int128 v15[2] = sub_1000E7214;
  void v15[3] = &unk_100128418;
  uint64_t v11 = _Block_copy(v15);
  swift_retain();
  swift_release();
  uint64_t v12 = (sqlite3 *)Connection.handle.getter();
  uint64_t v13 = String.utf8CString.getter(a1, a2);
  collation_uint64_t v2 = sqlite3_create_collation_v2( v12,  (const char *)(v13 + 32),  1,  v11,  (int (__cdecl *)(void *, int, const void *, int, const void *))sub_1000E72E0,  0LL);
  swift_release();
  sub_1000E51EC(collation_v2, 0LL);
  if (!v5)
  {
    sub_1000E80BC(v4 + 96, (uint64_t)v15);
    sub_10000AFB0();
    _Block_copy(v11);
    sub_1000E76E8((uint64_t)v11, a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000EB48C);
    swift_endAccess(v15);
    sub_10001198C();
  }

  _Block_release(v11);
}

uint64_t sub_1000E717C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = ((uint64_t (*)(void))String.init(cString:))();
  uint64_t v7 = v6;
  uint64_t v8 = String.init(cString:)(a2);
  uint64_t v10 = v9;
  uint64_t v11 = a3(v5, v7, v8, v9);
  swift_bridgeObjectRelease(v10);
  uint64_t result = swift_bridgeObjectRelease(v7);
  if (v11 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
  }

  else if (v11 <= 0x7FFFFFFF)
  {
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000E7214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  uint64_t v7 = v6(a2, a3);
  swift_release(v5);
  return v7;
}

uint64_t sub_1000E7268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 && a5) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 16))(a1, a3, a5);
  }
  int v6 = 0;
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003DLL,  0x80000001000FCE90LL,  "AppIntents_SQLite/Connection.swift",  34LL,  2LL,  660LL,  v6);
  __break(1u);
  return result;
}

void *Connection.backup(databaseName:usingConnection:andDatabaseName:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v11 = type metadata accessor for Backup();
  sub_10000C254(v11, 40LL);
  sub_10000C7FC();
  sub_100058FE8(a1, a2);
  swift_retain();
  sub_100058FE8(a4, a5);
  return Backup.init(sourceConnection:sourceName:targetConnection:targetName:)(v5, a1, a2, a3, a4, a5);
}

void sub_1000E7388()
{
  uint64_t v0 = sub_100008DB0(&qword_100134C20);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  qword_100134AF0 = DispatchSpecificKey.init()();
  sub_10000ADA8();
}

const char *Connection.description.getter()
{
  uint64_t v0 = (sqlite3 *)Connection.handle.getter();
  uint64_t result = sqlite3_db_filename(v0, 0LL);
  if (result) {
    return (const char *)String.init(cString:)(result);
  }
  __break(1u);
  return result;
}

const char *sub_1000E73E8()
{
  return Connection.description.getter();
}

void sub_1000E7408()
{
}

void sub_1000E7410(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!a2)
  {
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    int v13 = (int)a1;
    _StringGuts.grow(_:)(26LL);
    swift_bridgeObjectRelease();
    HIDWORD(v15) = v13;
    v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    LODWORD(v15) = 0;
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000018LL,  0x80000001000FCE50LL,  "AppIntents_SQLite/Connection.swift",  34LL,  2LL,  778LL,  v15);
    __break(1u);
    JUMPOUT(0x1000E75E4LL);
  }

  uint64_t v4 = *(sqlite3_value **)(a2 + 8LL * *a1);
  LODWORD(a1) = sqlite3_value_type(v4);
  switch((int)a1)
  {
    case 1:
      sqlite3_int64 v5 = sqlite3_value_int64(v4);
      int v6 = (ValueMetadata *)&type metadata for Int64;
      uint64_t v7 = &protocol witness table for Int64;
      goto LABEL_10;
    case 2:
      double v10 = sqlite3_value_double(v4);
      *(void *)(a3 + 24) = &type metadata for Double;
      *(void *)(a3 + 3sub_100096760(v0[56], v0 + 2) = &protocol witness table for Double;
      *(double *)a3 = v10;
      return;
    case 3:
      a1 = sqlite3_value_text(v4);
      if (!a1) {
        goto LABEL_13;
      }
      uint64_t v8 = String.init(cString:)(a1);
      *(void *)(a3 + 24) = type metadata for String;
      *(void *)(a3 + 3sub_100096760(v0[56], v0 + 2) = &protocol witness table for String;
      *(void *)a3 = v8;
      *(void *)(a3 + 8) = v9;
      break;
    case 4:
      a1 = sqlite3_value_blob(v4);
      if (!a1) {
        goto LABEL_14;
      }
      uint64_t v11 = a1;
      int v12 = sqlite3_value_bytes(v4);
      _s17AppIntents_SQLite4BlobV5bytes6lengthACSV_SitcfC_0(v11, v12);
      int v6 = &type metadata for Blob;
      uint64_t v7 = &protocol witness table for Blob;
LABEL_10:
      *(void *)(a3 + 24) = v6;
      *(void *)(a3 + 3sub_100096760(v0[56], v0 + 2) = v7;
      *(void *)a3 = v5;
      break;
    case 5:
      *(void *)(a3 + 3sub_100096760(v0[56], v0 + 2) = 0LL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
      return;
    default:
      goto LABEL_15;
  }

uint64_t sub_1000E75F8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000E761C(int a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(a1) & 1;
}

uint64_t sub_1000E7644(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100096760(v0[56], v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000E7654(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000E765C(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E6450( a1,  a2,  a3,  a4,  *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 16));
}

uint64_t sub_1000E7664()
{
  return sub_1000E660C(*(void (**)(void))(v0 + 16));
}

uint64_t sub_1000E766C(sqlite3_context *a1, int a2, uint64_t a3)
{
  return sub_1000E6970(a1, a2, a3, *(void (**)(void *__return_ptr))(v3 + 16));
}

uint64_t sub_1000E7674(uint64_t a1, uint64_t a2)
{
  return sub_1000E717C(a1, a2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_1000E767C(_OWORD *a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v7 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  sub_1000EB2F8(a1, a2, isUniquelyReferenced_nonNull_native);
  *uint64_t v2 = v7;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000E76E8( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  uint64_t v12 = *v4;
  *uint64_t v4 = 0x8000000000000000LL;
  a4(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  uint64_t v10 = *v4;
  *uint64_t v4 = v12;
  return swift_bridgeObjectRelease(v10);
}

unint64_t sub_1000E776C()
{
  unint64_t result = qword_100134B00;
  if (!qword_100134B00)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Connection.Operation,  &type metadata for Connection.Operation);
    atomic_store(result, (unint64_t *)&qword_100134B00);
  }

  return result;
}

unint64_t sub_1000E77AC()
{
  unint64_t result = qword_100134B08;
  if (!qword_100134B08)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Connection.TransactionMode,  &type metadata for Connection.TransactionMode);
    atomic_store(result, (unint64_t *)&qword_100134B08);
  }

  return result;
}

uint64_t type metadata accessor for Connection()
{
  return objc_opt_self(&OBJC_CLASS____TtC17AppIntents_SQLite10Connection);
}

unint64_t destroy for Connection.Location(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t _s17AppIntents_SQLite10ConnectionC8LocationOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain(v3);
  }

  return a1;
}

void *assignWithCopy for Connection.Location(void *a1, void *a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      uint64_t v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      return a1;
    }

uint64_t assignWithTake for Connection.Location(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  unint64_t v5 = *(void *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for Connection.Location(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(sub_1000E3810(v2, v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for Connection.Location(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }

  return result;
}

uint64_t sub_1000E7A1C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(sub_100058FE8(v0, v1) = -1;
  }
  return (v1 + 1);
}

void *sub_1000E7A34(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0LL;
  }

  else if (a2)
  {
    result[1] = (a2 - 1);
  }

  return result;
}

void type metadata accessor for Connection.Location()
{
}

void type metadata accessor for Connection.Operation()
{
}

uint64_t _s17AppIntents_SQLite10ConnectionC9OperationOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(sub_100075674(v3, v4) = 1;
  }
  else {
    LODWORD(sub_100075674(v3, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1000E7AC0 + 4 * byte_1000F8563[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000E7AF4 + 4 * byte_1000F855E[v4]))();
}

uint64_t sub_1000E7AF4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E7AFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000E7B04LL);
  }
  return result;
}

uint64_t sub_1000E7B10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000E7B18LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1000E7B1C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E7B24(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for Connection.TransactionMode()
{
}

void (*sub_1000E7B3C(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  swift_bridgeObjectRetain();
  v7[9] = sub_1000E7D68(v7);
  v7[10] = sub_1000E7C18(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_1000E7BCC;
}

void sub_1000E7BCC(uint64_t a1)
{
  __int16 v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 72LL);
  (*(void (**)(uint64_t, void))(*(void *)a1 + 80LL))(*(void *)a1 + 32LL, 0LL);
  sub_10000ADB0();
  v2(v1, 0LL);
  free(v1);
}

void (*sub_1000E7C18(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  unsigned int v5 = v4;
  uint64_t v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  uint64_t v10[3] = v5;
  v10[1] = a2;
  uint64_t v11 = *v5;
  uint64_t v12 = sub_100015F98(a2, a3);
  *((_BYTE *)v10 + 40) = v13 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v13 & 1) == 0;
  Swift::Int v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v17 = v12;
  char v18 = v13;
  sub_100008DB0(&qword_100134C10);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v16))
  {
    uint64_t v19 = sub_100015F98(a2, a3);
    if ((v18 & 1) == (v20 & 1))
    {
      uint64_t v17 = v19;
      goto LABEL_5;
    }

void sub_1000E7D30(uint64_t **a1)
{
  __int16 v1 = *a1;
  sub_1000E7D94(*a1, *((_BYTE *)*a1 + 40), (uint64_t *)(*a1)[3], (*a1)[4], (*a1)[1], (*a1)[2]);
  swift_bridgeObjectRelease();
  sub_1000E805C(v1);
}

uint64_t (*sub_1000E7D68(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *__int16 v1 = 0x8000000000000000LL;
  return sub_1000E7D88;
}

uint64_t sub_1000E7D88(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

double sub_1000E7D94(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *a1;
  if (*a1)
  {
    if ((a2 & 1) != 0)
    {
      *(void *)(*(void *)(*a3 + 56) + 8 * a4) = v8;
    }

    else
    {
      sub_100009C64(a4, a5, a6, v8, *a3);
      swift_bridgeObjectRetain();
    }
  }

  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy(*(void *)(*a3 + 48) + 16 * a4, 1LL);
    uint64_t v9 = *a3;
    uint64_t v10 = sub_100008DB0(&qword_100134C18);
    _NativeDictionary._delete(at:)(a4, v9, type metadata for String, v10);
  }

  *(void *)&double result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

uint64_t sub_1000E7E54(uint64_t a1)
{
  return sub_1000E6318(a1, *(void (**)(uint64_t))(v1 + 16));
}

void sub_1000E7E5C()
{
  uint64_t v1 = sub_1000E80D8();
  sub_1000E5EA0(v1, v2, v3, v4, v0[6], v0[7], v0[8]);
}

const char *sub_1000E7E8C@<X0>(_DWORD *a1@<X8>)
{
  return sub_1000E5758(*(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

void sub_1000E7EA8()
{
  uint64_t v0 = sub_1000E80D8();
  sub_1000E12E0(v0, v1, v2, v3);
}

void sub_1000E7EC0()
{
  uint64_t v0 = sub_1000E80D8();
  sub_1000E128C(v0, v1, v2, v3);
}

const char *sub_1000E7ED8@<X0>(BOOL *a1@<X8>)
{
  return sub_1000EA9E4(v1, a1);
}

unint64_t sub_1000E7F38()
{
  return sub_1000CB28C();
}

void sub_1000E7F60(const void *aBlock)
{
}

  ;
}

uint64_t sub_1000E7F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v5 - 200, v5 - 144, v4, a4, 0LL);
}

void sub_1000E7FA0()
{
}

uint64_t sub_1000E7FB8()
{
  return swift_retain(v0);
}

uint64_t sub_1000E7FC8()
{
  return swift_allocObject(v0, 121LL, 7LL);
}

void *sub_1000E7FE8@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  a4 = a1;
  a5 = v5;
  return _Block_copy(&a2);
}

void *sub_1000E7FF4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return OS_dispatch_queue.sync<A>(execute:)(&a18, a1, &a9);
}

uint64_t sub_1000E8004()
{
  return sub_1000E52D0();
}

uint64_t sub_1000E8014()
{
  return Connection.init(_:readonly:)(v2, v1, v0);
}

uint64_t sub_1000E802C(uint64_t a1, uint64_t a2)
{
  return String.hash(into:)(a1, a2, v2);
}

uint64_t sub_1000E8034( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11LL, 2LL, a4, a5, a6, 34LL, 2LL, a9, a10);
}

void sub_1000E8048(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  v12._uint64_t countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
}

void sub_1000E805C(void *a1)
{
}

  ;
}

  ;
}

uint64_t sub_1000E8098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, a3, v4, 0LL);
}

  ;
}

uint64_t sub_1000E80B4()
{
  return Connection.handle.getter();
}

uint64_t sub_1000E80BC(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 33LL, 0LL);
}

id sub_1000E80C8()
{
  return *(id *)(v0 + 104);
}

void *sub_1000E80D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  return static OS_dispatch_queue.getSpecific<A>(key:)((uint64_t *)va);
}

uint64_t sub_1000E80D8()
{
  return *(void *)(v0 + 16);
}

  ;
}

  ;
}

uint64_t sub_1000E8104()
{
  return swift_release(v0);
}

uint64_t sub_1000E8110()
{
  return sub_1000E8118(*v0);
}

uint64_t sub_1000E8118(double a1)
{
  uint64_t v2 = sub_100008DB0(&qword_100131970);
  uint64_t v3 = swift_allocObject(v2, 72LL, 7LL);
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5520;
  *(void *)(v3 + 56) = &type metadata for Double;
  *(void *)(v3 + 64) = &protocol witness table for Double;
  *(double *)(v3 + 3sub_100096760(v0[56], v0 + 2) = a1;
  return 63LL;
}

uint64_t sub_1000E817C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008DB0(&qword_100131970);
  uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
  *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5520;
  *(void *)(v5 + 56) = type metadata for String;
  *(void *)(v5 + 64) = &protocol witness table for String;
  *(void *)(v5 + 3sub_100096760(v0[56], v0 + 2) = a1;
  *(void *)(v5 + 40) = a2;
  swift_bridgeObjectRetain();
  return 63LL;
}

uint64_t sub_1000E81F8(uint64_t a1)
{
  uint64_t v2 = sub_100008DB0(&qword_100131970);
  uint64_t v3 = swift_allocObject(v2, 72LL, 7LL);
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5520;
  *(void *)(v3 + 56) = &type metadata for Blob;
  *(void *)(v3 + 64) = &protocol witness table for Blob;
  *(void *)(v3 + 3sub_100096760(v0[56], v0 + 2) = a1;
  swift_bridgeObjectRetain();
  return 63LL;
}

uint64_t sub_1000E8268(char a1)
{
  uint64_t v2 = sub_100008DB0(&qword_100131970);
  uint64_t v3 = swift_allocObject(v2, 72LL, 7LL);
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5520;
  *(void *)(v3 + 56) = &type metadata for Int64;
  *(void *)(v3 + 64) = &protocol witness table for Int64;
  *(void *)(v3 + 3sub_100096760(v0[56], v0 + 2) = a1 & 1;
  return 63LL;
}

uint64_t sub_1000E82D0(uint64_t a1)
{
  uint64_t v2 = sub_100008DB0(&qword_100131970);
  uint64_t v3 = sub_1000E3514(v2);
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5520;
  *(void *)(v3 + 56) = &type metadata for Int64;
  *(void *)(v3 + 64) = &protocol witness table for Int64;
  *(void *)(v3 + 3sub_100096760(v0[56], v0 + 2) = a1;
  return 63LL;
}

void sub_1000E832C(uint64_t a1, unint64_t a2)
{
}

uint64_t sub_1000E8358()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = __chkstk_darwin(v2);
  uint64_t v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))(v6, v1, v2, v4);
  uint64_t v7 = sub_100008DB0(&qword_100131970);
  uint64_t v8 = swift_allocObject(v7, 72LL, 7LL);
  *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5520;
  *(void *)(v8 + 56) = type metadata for String;
  *(void *)(v8 + 64) = &protocol witness table for String;
  if (qword_100134608 != -1) {
    swift_once(&qword_100134608, sub_1000EE5F8);
  }
  swift_beginAccess(&dateFormatter, v17, 0LL, 0LL);
  uint64_t v9 = dateFormatter.super.super.isa;
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v11 = -[objc_class stringFromDate:](v9, "stringFromDate:", isa);

  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  uint64_t v14 = v13;

  *(void *)(v8 + 3sub_100096760(v0[56], v0 + 2) = v12;
  *(void *)(v8 + 40) = v14;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return 63LL;
}

uint64_t sub_1000E84D0()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  double v2 = __chkstk_darwin(v1);
  double v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, double))(v5 + 16))(v4, v0, v2);
  return sub_1000E8F44((uint64_t)v4);
}

void Value.expression.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 - 8);
  __chkstk_darwin(a1);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Expression(0LL, a1, v8, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, a1);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v10);
  ExpressionType<>.init(value:)((uint64_t)v7, v10, WitnessTable, a2);
  v12[0] = v12[3];
  v12[1] = v12[4];
  _OWORD v12[2] = v12[5];
  ExpressionType.expression.getter(v10, WitnessTable);
  sub_10001BC70();
  swift_bridgeObjectRelease();
  sub_10001BAF0();
}

uint64_t type metadata accessor for Expression(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000C8B4(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Expression);
}

uint64_t sub_1000E8638(uint64_t a1, uint64_t a2)
{
  return sub_1000E9380(a1, a2, sub_1000E817C);
}

uint64_t sub_1000E8644()
{
  return sub_1000E81F8(*v0);
}

uint64_t sub_1000E864C()
{
  return sub_1000E8268(*v0);
}

uint64_t sub_1000E8654()
{
  return sub_1000E82D0(*v0);
}

uint64_t ExpressionType.init(literal:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(a4 + 40))(a1, a2, _swiftEmptyArrayStorage, a3);
}

Swift::String __swiftcall Expressible.asSQL()()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v17 = v1;
  swift_bridgeObjectRetain_n(v1, 3LL);
  swift_bridgeObjectRetain();
  Swift::String_optional v7 = String.Iterator.next()();
  object = v7.value._object;
  uint64_t countAndFlagsBits = v7.value._countAndFlagsBits;
  if (!v7.value._object)
  {
LABEL_13:
    sub_100011958();
    swift_bridgeObjectRelease_n(v2, 2LL);
    swift_bridgeObjectRelease(v17);
    sub_100011958();
    swift_bridgeObjectRelease(v2);
    uint64_t countAndFlagsBits = 0LL;
    object = (void *)0xE000000000000000LL;
    goto LABEL_16;
  }

  uint64_t v8 = v7.value._countAndFlagsBits;
  uint64_t v9 = v7.value._object;
  unint64_t v10 = 0LL;
  while (1)
  {
    if (v8 != 63 || v9 != (void *)0xE100000000000000LL)
    {
      uint64_t countAndFlagsBits = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, 63LL, 0xE100000000000000LL, 0LL);
      if ((countAndFlagsBits & 1) == 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v13 = v9;
        goto LABEL_12;
      }
    }

    if ((v10 & 0x8000000000000000LL) != 0) {
      break;
    }
    if (v10 >= *(void *)(v4 + 16)) {
      goto LABEL_15;
    }
    uint64_t v8 = sub_1000D4674(v4 + 32 + 40 * v10);
    uint64_t v13 = v12;
    ++v10;
LABEL_12:
    swift_bridgeObjectRetain();
    v14._uint64_t countAndFlagsBits = v8;
    v14._object = v13;
    String.append(_:)(v14);
    sub_10001BC70();
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    Swift::String_optional v15 = String.Iterator.next()();
    object = v15.value._object;
    uint64_t countAndFlagsBits = v15.value._countAndFlagsBits;
    uint64_t v8 = v15.value._countAndFlagsBits;
    uint64_t v9 = v15.value._object;
    if (!v15.value._object) {
      goto LABEL_13;
    }
  }

  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  result._object = object;
  result._uint64_t countAndFlagsBits = countAndFlagsBits;
  return result;
}

uint64_t ExpressionType.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a3, a5);
  uint64_t v12 = v11;
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 40))(v10, v12, v13, a2, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a1, a3);
}

uint64_t ExpressionType.init(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_1000D4294(34LL, 0xE100000000000000LL, a1, a2);
  uint64_t v8 = v7;
  sub_10001BC70();
  return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t))(a4 + 40))( v6,  v8,  _swiftEmptyArrayStorage,  a3,  a4);
}

uint64_t ExpressionType<>.init(value:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v28 = a3;
  v26[1] = a6;
  uint64_t v27 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a3,  a2,  &protocol requirements base descriptor for ExpressionType);
  uint64_t v10 = swift_getAssociatedTypeWitness( 255LL,  a4,  AssociatedTypeWitness,  &protocol requirements base descriptor for _OptionalType);
  uint64_t v11 = type metadata accessor for Optional(0LL, v10);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  Swift::String v14 = (char *)v26 - v13;
  v26[0] = a5;
  uint64_t v15 = swift_getAssociatedTypeWitness(0LL, a5, v10, &protocol requirements base descriptor for Value);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  char v18 = (char *)v26 - v17;
  uint64_t v19 = sub_100008DB0(&qword_100131970);
  uint64_t v20 = sub_1000E3514(v19);
  *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5520;
  uint64_t v21 = (void *)(v20 + 32);
  unint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v29 = a1;
  v22(v14, a1, v11);
  if (sub_100009E6C((uint64_t)v14, 1LL, v10) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    *(void *)(v20 + 64) = 0LL;
    *(_OWORD *)uint64_t v21 = 0u;
    *(_OWORD *)(v20 + 48) = 0u;
  }

  else
  {
    uint64_t v23 = v26[0];
    (*(void (**)(uint64_t, void))(v26[0] + 56LL))(v10, v26[0]);
    (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8LL))(v14, v10);
    *(void *)(v20 + 56) = v15;
    *(void *)(v20 + 64) = swift_getAssociatedConformanceWitness( v23,  v10,  v15,  &protocol requirements base descriptor for Value,  &associated conformance descriptor for Value.Value.Datatype: Binding);
    uint64_t v24 = sub_10001AFA8(v21);
    (*(void (**)(void *, char *, uint64_t))(v16 + 32))(v24, v18, v15);
  }

  (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v28 + 40))(63LL, 0xE100000000000000LL, v20, v27);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v29, v11);
}

void sub_1000E8B80(uint64_t a1)
{
}

void ExpressionType.expression.getter(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000E8BDC(uint64_t a1, uint64_t a2)
{
  return sub_1000E8BE8(a1, a2, (uint64_t (*)(void, void, void))sub_1000DF1AC);
}

uint64_t sub_1000E8BE8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, void))
{
  return a3(*v3, v3[1], v3[2]);
}

uint64_t Expression.template.getter(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t Expression.template.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(v2[1]);
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t Expression.bindings.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 16));
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  return result;
}

void sub_1000E8C84(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, a1);
  ExpressionType.expression.getter(a1, WitnessTable);
}

uint64_t ExpressionType.asc.getter()
{
  return sub_1000E8CD8();
}

uint64_t ExpressionType.desc.getter()
{
  return sub_1000E8CD8();
}

uint64_t sub_1000E8CD8()
{
  uint64_t v6 = sub_100008DB0(&qword_100131160);
  uint64_t inited = swift_initStackObject(v6, &v11);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
  *(void *)(inited + 56) = v4;
  *(void *)(inited + 64) = *(void *)(v3 + 8);
  uint64_t v8 = sub_10001AFA8((void *)(inited + 32));
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(v8, v1, v4);
  uint64_t v9 = sub_100008DB0(&qword_100134618);
  *(void *)(inited + 104) = &protocol witness table for Expression<A>;
  *(void *)(inited + 7sub_100096760(v0[56], v0 + 2) = v2;
  *(void *)(inited + 80) = v0;
  *(void *)(inited + 88) = _swiftEmptyArrayStorage;
  *(void *)(inited + 96) = v9;
  sub_1000D3EA4(inited, 32LL, 0xE100000000000000LL, v5);
  swift_setDeallocating(inited);
  return sub_100058868();
}

void sub_1000E8DAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100008DB0(&qword_100131970);
  uint64_t v4 = swift_allocObject(v3, 72LL, 7LL);
  *(_OWORD *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5520;
  *(void *)(v4 + 56) = &type metadata for Blob;
  *(void *)(v4 + 64) = &protocol witness table for Blob;
  __asm { BR              X10 }

uint64_t sub_1000E8E24()
{
  *(void *)(v2 + 3sub_100096760(v0[56], v0 + 2) = v3;
  sub_10000A1D8(v1, v0);
  return 63LL;
}

uint64_t sub_1000E8F44(uint64_t a1)
{
  uint64_t v2 = sub_100008DB0(&qword_100131970);
  uint64_t v3 = swift_allocObject(v2, 72LL, 7LL);
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5520;
  *(void *)(v3 + 56) = type metadata for String;
  *(void *)(v3 + 64) = &protocol witness table for String;
  *(void *)(v3 + 3sub_100096760(v0[56], v0 + 2) = UUID.uuidString.getter(v3);
  *(void *)(v3 + 40) = v4;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(a1, v5);
  return 63LL;
}

uint64_t ExpressionType<>.init(value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100008DB0(&qword_100131970);
  uint64_t v9 = sub_1000E3514(v8);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5520;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(a4 + 56);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a3,  a2,  &protocol requirements base descriptor for ExpressionType);
  uint64_t v12 = swift_getAssociatedTypeWitness(0LL, a4, AssociatedTypeWitness, &protocol requirements base descriptor for Value);
  *(void *)(v9 + 56) = v12;
  *(void *)(v9 + 64) = swift_getAssociatedConformanceWitness( a4,  AssociatedTypeWitness,  v12,  &protocol requirements base descriptor for Value,  &associated conformance descriptor for Value.Value.Datatype: Binding);
  sub_10001AFA8((void *)(v9 + 32));
  uint64_t v13 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  v10(v13, a4);
  (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(a3 + 40))( 63LL,  0xE100000000000000LL,  v9,  a2,  a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(a1, v13);
}

uint64_t static ExpressionType<>.null.getter()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v5,  v3,  &protocol requirements base descriptor for ExpressionType);
  uint64_t v7 = swift_getAssociatedTypeWitness( 255LL,  v1,  AssociatedTypeWitness,  &protocol requirements base descriptor for _OptionalType);
  uint64_t v8 = type metadata accessor for Optional(0LL, v7);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v12 - v9;
  sub_100009E60((uint64_t)&v12 - v9, 1LL, 1LL, v7);
  return ExpressionType<>.init(value:)((uint64_t)v10, v3, v2, v1, v0, v4);
}

uint64_t sub_1000E91EC()
{
  uint64_t result = sub_1000D4294(34LL, 0xE100000000000000LL, 0x4449574F52LL, 0xE500000000000000LL);
  rowid = result;
  *(void *)algn_100135D08 = v1;
  qword_100135D10 = (uint64_t)_swiftEmptyArrayStorage;
  return result;
}

uint64_t *rowid.unsafeMutableAddressor()
{
  if (qword_100134600 != -1) {
    swift_once(&qword_100134600, sub_1000E91EC);
  }
  return &rowid;
}

void cast<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v9._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 40))(a5, a7);
  String.append(_:)(v9);
  sub_100011958();
  sub_1000E9420();
  swift_bridgeObjectRetain();
  sub_1000E385C();
}

{
  Swift::String v9;
  sub_1000E93D4(a1, a2);
  sub_1000E9410();
  swift_bridgeObjectRelease();
  sub_1000E93FC();
  v9._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 40))(a5, a7);
  String.append(_:)(v9);
  sub_10001BC70();
  sub_1000E9420();
  type metadata accessor for Optional(0LL, a5);
  swift_bridgeObjectRetain();
  sub_1000E385C();
}

uint64_t sub_1000E9374(uint64_t a1, uint64_t a2)
{
  return sub_1000E9380(a1, a2, (uint64_t (*)(void, void))sub_1000E832C);
}

uint64_t sub_1000E9380(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void))
{
  return a3(*v3, v3[1]);
}

void *sub_1000E9394(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t sub_1000E93D4(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

void sub_1000E93FC()
{
  v0._uint64_t countAndFlagsBits = 542327072LL;
  v0._object = (void *)0xE400000000000000LL;
  String.append(_:)(v0);
}

void sub_1000E9410()
{
  v2._uint64_t countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

void sub_1000E9420()
{
  v0._uint64_t countAndFlagsBits = 41LL;
  v0._object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
}

  ;
}

void sub_1000E9448(uint64_t a1, uint64_t a2)
{
  int v3 = a1;
  unint64_t v4 = HIDWORD(a1);
  if (a1 < 0 == (int)a1 < 0)
  {
    int v18 = HIDWORD(a1) - a1;
    if (__OFSUB__(HIDWORD(a1), (_DWORD)a1)) {
      goto LABEL_31;
    }
    uint64_t v9 = v18;
    if (v18) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }

  else {
    int v5 = -(int)a1;
  }
  if (a1 >= 0) {
    int v6 = HIDWORD(a1);
  }
  else {
    int v6 = -HIDWORD(a1);
  }
  BOOL v7 = __CFADD__(v5, v6);
  uint64_t v8 = (v5 + v6);
  if (!v7)
  {
    else {
      uint64_t v9 = -v8;
    }
    if (v9)
    {
LABEL_13:
      unint64_t v22 = _swiftEmptyArrayStorage;
      sub_1000452D4();
      if ((v9 & 0x8000000000000000LL) == 0)
      {
        uint64_t v19 = a2;
        uint64_t v10 = v22;
        uint64_t v20 = (sqlite3_stmt **)(a2 + 16);
        swift_beginAccess(a2 + 16, v21, 0LL, 0LL);
        int v11 = v3;
        while (v9)
        {
          uint64_t v12 = sqlite3_column_name(*v20, v11);
          if (!v12) {
            goto LABEL_32;
          }
          uint64_t v13 = String.init(cString:)(v12);
          uint64_t v15 = v14;
          unint64_t v22 = v10;
          unint64_t v16 = v10[2];
          if (v16 >= v10[3] >> 1)
          {
            sub_1000452D4();
            uint64_t v10 = v22;
          }

          v10[2] = v16 + 1;
          uint64_t v17 = &v10[2 * v16];
          uint64_t v17[4] = v13;
          v17[5] = v15;
          ++v11;
          if (!--v9)
          {
            swift_release(v19);
            return;
          }
        }

        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
      }

      __break(1u);
      goto LABEL_30;
    }

Swift::OpaquePointer_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Statement.failableNext()()
{
  BOOL v2 = sub_1000EC0C4();
  int v3 = 0LL;
  if (!v0 && v2)
  {
    unint64_t v4 = (sqlite3_stmt *)Statement.row.getter(0LL);
    int v3 = (void *)sub_1000EB7F8(v4, v5);
  }

  result.value._rawValue = v3;
  result.is_nil = v1;
  return result;
}

void sub_1000E9638()
{
  uint64_t v0 = (unint64_t)Statement.failableNext()();
  if (v1)
  {
    sub_1000EC030(v0, (uint64_t)"AppIntents_SQLite/Statement.swift");
    __break(1u);
  }

  else
  {
    sub_1000D8C64();
  }

uint64_t sub_1000E9670()
{
  uint64_t v0 = (unint64_t)Statement.failableNext()();
  if (v1)
  {
    uint64_t result = sub_1000EC030(v0, (uint64_t)"AppIntents_SQLite/Statement.swift");
    __break(1u);
  }

  else
  {
    if (v0) {
      sub_10000AFB0();
    }
    return sub_10000AF9C();
  }

  return result;
}

uint64_t FailableIterator.next()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

void Statement.columnNames.getter()
{
  if (*(void *)(v0 + 48)) {
    goto LABEL_6;
  }
  Statement.columnCount.getter(0LL);
  if (v1 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_8;
  }

  if (v1 > 0x7FFFFFFF)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if ((v1 & 0x80000000) == 0)
  {
    sub_10000C7FC();
    uint64_t v2 = sub_10000AF9C();
    sub_1000E9448(v2, v3);
    uint64_t v4 = *(void *)(v0 + 48);
    *(void *)(v0 + 48) = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease(v4);
LABEL_6:
    swift_bridgeObjectRetain();
    return;
  }

uint64_t Statement.bind(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return sub_10000C7FC();
  }
  sub_1000EA014(1);
  sub_100084A04(v1 + 16, (uint64_t)v20);
  if (v2 == sqlite3_bind_parameter_count(*(sqlite3_stmt **)(v1 + 16)))
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = a1 + 32;
    do
    {
      sub_1000EA06C(v5, ++v4);
      v5 += 40LL;
    }

    while (v2 != v4);
    return sub_10000C7FC();
  }

  _StringGuts.grow(_:)(29LL);
  sqlite3_bind_parameter_count(*(sqlite3_stmt **)(v1 + 16));
  uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
  uint64_t v9 = v8;
  swift_bridgeObjectRelease(0xE000000000000000LL);
  uint64_t v19 = v7;
  v10._object = (void *)0x80000001000FCF00LL;
  v10._uint64_t countAndFlagsBits = 0xD000000000000012LL;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(object);
  v13._uint64_t countAndFlagsBits = 0x64657373617020LL;
  v13._object = (void *)0xE700000000000000LL;
  String.append(_:)(v13);
  LODWORD(v18) = 0;
  uint64_t result = sub_1000EC044( (uint64_t)"Fatal error",  v14,  v15,  v19,  v9,  (uint64_t)"AppIntents_SQLite/Statement.swift",  v16,  v17,  78LL,  v18);
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  sqlite3_stmt *v17;
  uint64_t v18;
  int v19;
  uint64_t result;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  __int128 v29;
  _OWORD v30[2];
  uint64_t v31;
  char v32[24];
  uint64_t v33;
  void *v34;
  uint64_t v35;
  sub_1000EA014(1);
  uint64_t v27 = a1 + 64;
  uint64_t v5 = 1LL << *(_BYTE *)(a1 + 32);
  int v6 = -1LL;
  if (v5 < 64) {
    int v6 = ~(-1LL << v5);
  }
  uint64_t v7 = v6 & *(void *)(a1 + 64);
  sub_10000AFB0();
  sub_100084A04(v1 + 16, (uint64_t)v32);
  uint64_t v8 = 0LL;
  uint64_t v28 = (unint64_t)(v5 + 63) >> 6;
  if (!v7) {
    goto LABEL_6;
  }
LABEL_4:
  uint64_t v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  Swift::String v10 = v9 | (v8 << 6);
LABEL_5:
  Swift::String v11 = *(void *)(a1 + 56);
  uint64_t v12 = (void *)(*(void *)(a1 + 48) + 16 * v10);
  Swift::String v13 = v12[1];
  *(void *)&uint64_t v29 = *v12;
  *((void *)&v29 + 1) = v13;
  sub_1000D4A80(v11 + 40 * v10, (uint64_t)v30);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_1000EBA30((uint64_t)&v29, (uint64_t)&v33, &qword_100134CD8);
    uint64_t v2 = v34;
    if (!v34)
    {
      swift_release();
      return sub_10000C7FC();
    }

    uint64_t v3 = v33;
    sub_1000EBA30((uint64_t)&v35, (uint64_t)&v29, &qword_100131978);
    uint64_t v17 = *(sqlite3_stmt **)(v1 + 16);
    uint64_t v18 = String.utf8CString.getter(v3, v2);
    uint64_t v19 = sqlite3_bind_parameter_index(v17, (const char *)(v18 + 32));
    swift_release();
    if (v19 < 1) {
      goto LABEL_31;
    }
    swift_bridgeObjectRelease();
    sub_1000EA06C((uint64_t)&v29, v19);
    sub_10000C218((uint64_t)&v29, &qword_100131978);
    if (v7) {
      goto LABEL_4;
    }
LABEL_6:
    uint64_t v14 = v8 + 1;
    if (__OFADD__(v8, 1LL)) {
      break;
    }
    if (v14 < v28)
    {
      uint64_t v15 = *(void *)(v27 + 8 * v14);
      if (v15) {
        goto LABEL_9;
      }
      uint64_t v16 = v8 + 2;
      ++v8;
      if (v14 + 1 < v28)
      {
        uint64_t v15 = *(void *)(v27 + 8 * v16);
        if (v15) {
          goto LABEL_12;
        }
        uint64_t v8 = v14 + 1;
        if (v14 + 2 < v28)
        {
          uint64_t v15 = *(void *)(v27 + 8 * (v14 + 2));
          if (v15)
          {
            v14 += 2LL;
            goto LABEL_9;
          }

          uint64_t v16 = v14 + 3;
          uint64_t v8 = v14 + 2;
          if (v14 + 3 < v28)
          {
            uint64_t v15 = *(void *)(v27 + 8 * v16);
            if (!v15)
            {
              while (1)
              {
                uint64_t v14 = v16 + 1;
                if (__OFADD__(v16, 1LL)) {
                  goto LABEL_30;
                }
                if (v14 >= v28)
                {
                  uint64_t v8 = v28 - 1;
                  goto LABEL_23;
                }

                uint64_t v15 = *(void *)(v27 + 8 * v14);
                ++v16;
                if (v15) {
                  goto LABEL_9;
                }
              }
            }

uint64_t Statement.run(_:)(uint64_t a1)
{
  uint64_t v1 = sub_1000EC0B0();
  sub_1000389DC();
  return v1;
}

{
  uint64_t v1;
  Statement.bind(_:)(a1);
  uint64_t v1 = sub_1000EC0B0();
  sub_1000389DC();
  return v1;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  id v13;
  uint64_t v15;
  char v16;
  _BYTE v17[24];
  uint64_t v18;
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  if (*(void *)(a1 + 16))
  {
    Statement.bind(_:)(a1);
    uint64_t v5 = sub_1000EC0B0();
    sub_1000EC090();
    if (!v2) {
      return v5;
    }
  }

  else
  {
    sub_1000EA014(0);
    sub_1000CB28C();
    int v6 = *(void *)(v1 + 24);
    sub_1000CB364(v1 + 16, (uint64_t)v17, 0LL);
    do
    {
      while (1)
      {
        uint64_t v7 = qword_1001345F8;
        swift_retain(v4);
        if (v7 != -1) {
          swift_once(&qword_1001345F8, sub_1000E7388);
        }
        static OS_dispatch_queue.getSpecific<A>(key:)(&v15);
        uint64_t v8 = v15;
        uint64_t v9 = v16;
        Swift::String v10 = sub_1000E52D0();
        if ((v9 & 1) != 0 || v8 != v10) {
          break;
        }
        Swift::String v11 = sqlite3_step(*(sqlite3_stmt **)(v4 + 16));
        uint64_t v12 = sub_1000E51EC(v11, 0LL);
        sub_1000EC090();
        if (v3) {
          return v4;
        }
        if (v12 != 100) {
          goto LABEL_16;
        }
      }

      Swift::String v13 = *(id *)(v6 + 104);
      OS_dispatch_queue.sync<A>(execute:)(&v18, sub_1000E7ED8, v4);
      sub_1000EC090();

      if (v3) {
        return v4;
      }
    }

    while ((v18 & 1) != 0);
LABEL_16:
    swift_retain(v4);
  }

  return v4;
}

void Statement.scalar(_:)(uint64_t a1)
{
}

{
  Statement.bind(_:)(a1);
  sub_1000EC09C((uint64_t)_swiftEmptyArrayStorage);
  sub_1000389DC();
  sub_1000EC0A8();
}

uint64_t sub_1000E9D10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  *(_BYTE *)(v3 + 40) = 1;
  *(void *)(v3 + 56) = 0LL;
  *(void *)(v3 + 64) = 0LL;
  *(void *)(v3 + 48) = 0LL;
  *(void *)(v3 + 24) = a1;
  *(void *)(v3 + 3sub_100096760(v0[56], v0 + 2) = 0LL;
  uint64_t v7 = (sqlite3 *)Connection.handle.getter();
  uint64_t v8 = String.utf8CString.getter(a2, a3);
  sub_10000C7FC();
  swift_bridgeObjectRelease(a3);
  sub_1000CB364(v3 + 16, (uint64_t)v11, 33LL);
  uint64_t v9 = sqlite3_prepare_v2(v7, (const char *)(v8 + 32), -1, (sqlite3_stmt **)(v3 + 16), 0LL);
  swift_endAccess(v11);
  swift_release(v8);
  sub_1000EC0B8(v9);
  if (v4) {
    swift_release(v3);
  }
  sub_1000389DC();
  return v3;
}

void Statement.deinit(uint64_t a1)
{
}

uint64_t Statement.__deallocating_deinit(uint64_t a1)
{
  return swift_deallocClassInstance(v1, 72LL, 7LL);
}

void Statement.columnCount.getter(uint64_t a1)
{
  if (*(_BYTE *)(v1 + 40) == 1)
  {
    sub_1000EC01C(a1);
    *(void *)(v1 + 3sub_100096760(v0[56], v0 + 2) = sqlite3_column_count(*(sqlite3_stmt **)(v1 + 16));
    *(_BYTE *)(v1 + 40) = 0;
  }

  sub_1000D8C64();
}

uint64_t Statement.columnCount.setter(uint64_t result)
{
  *(void *)(v1 + 3sub_100096760(v0[56], v0 + 2) = result;
  *(_BYTE *)(v1 + 40) = 0;
  return result;
}

void Statement.columnCount.modify(void *a1)
{
  a1[1] = v1;
  Statement.columnCount.getter((uint64_t)a1);
  *a1 = v3;
  sub_10000ADA8();
}

void *sub_1000E9ED0(void *result)
{
  uint64_t v1 = result[1];
  *(void *)(v1 + 3sub_100096760(v0[56], v0 + 2) = *result;
  *(_BYTE *)(v1 + 40) = 0;
  return result;
}

uint64_t Statement.columnNames.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 48);
  *(void *)(v1 + 48) = a1;
  return swift_bridgeObjectRelease(v2);
}

void Statement.columnNames.modify(void *a1)
{
  a1[1] = v1;
  Statement.columnNames.getter();
  *a1 = v3;
  sub_10000ADA8();
}

uint64_t sub_1000E9F20(uint64_t *a1, char a2)
{
  if ((a2 & 1) == 0) {
    return Statement.columnNames.setter(*a1);
  }
  uint64_t v2 = sub_10000AFB0();
  Statement.columnNames.setter(v2);
  return swift_bridgeObjectRelease();
}

uint64_t Statement.row.getter(uint64_t a1)
{
  uint64_t v2 = v1[7];
  if (v2) {
    return v2;
  }
  uint64_t result = sub_1000EC01C(a1);
  uint64_t v2 = v1[2];
  if (v2)
  {
    uint64_t v4 = sub_10000C7FC();
    Statement.columnCount.getter(v4);
    uint64_t v6 = v5;
    swift_release(v1);
    v1[7] = v2;
    v1[8] = v6;
    return v2;
  }

  __break(1u);
  return result;
}

uint64_t Statement.row.setter(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + 56) = result;
  *(void *)(v2 + 64) = a2;
  return result;
}

void Statement.row.modify(uint64_t *a1)
{
  a1[2] = v1;
  *a1 = Statement.row.getter((uint64_t)a1);
  a1[1] = v3;
  sub_10000ADA8();
}

void *sub_1000EA000(void *result)
{
  uint64_t v2 = result[1];
  uint64_t v1 = result[2];
  *(void *)(v1 + 56) = *result;
  *(void *)(v1 + 64) = v2;
  return result;
}

uint64_t sub_1000EA014(char a1)
{
  uint64_t result = sqlite3_reset(*(sqlite3_stmt **)(v1 + 16));
  if ((a1 & 1) != 0) {
    return sqlite3_clear_bindings(*(sqlite3_stmt **)(v1 + 16));
  }
  return result;
}

uint64_t sub_1000EA06C(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 24))
  {
    swift_beginAccess(v2 + 2, v23, 0LL, 0LL);
    if (a2 < (uint64_t)0xFFFFFFFF80000000LL)
    {
      __break(1u);
    }

    else if (a2 <= 0x7FFFFFFF)
    {
      return sqlite3_bind_null(v2[2], a2);
    }

    __break(1u);
    goto LABEL_46;
  }

  uint64_t v6 = a1;
  sub_1000D4A80(a1, (uint64_t)v23);
  if (v24)
  {
    uint64_t v7 = sub_100008DB0(&qword_100131980);
    if ((swift_dynamicCast(&v21, v23, v7, &type metadata for Blob, 6LL) & 1) != 0)
    {
      uint64_t v3 = v21;
      swift_beginAccess(v2 + 2, v23, 0LL, 0LL);
      if (a2 >= (uint64_t)0xFFFFFFFF80000000LL)
      {
        if (a2 <= 0x7FFFFFFF)
        {
          unint64_t v4 = *(void *)(v3 + 16);
          if (!(v4 >> 31))
          {
            uint64_t v2 = (sqlite3_stmt **)v2[2];
            if (qword_1001345F0 == -1)
            {
LABEL_8:
              sqlite3_bind_blob( (sqlite3_stmt *)v2,  a2,  (const void *)(v3 + 32),  v4,  (void (__cdecl *)(void *))qword_100135CF8);
              return swift_bridgeObjectRelease(v3);
            }

LABEL_47:
        __break(1u);
        goto LABEL_48;
      }

LABEL_56:
          swift_once(&qword_1001345F0, sub_1000D4410);
          goto LABEL_30;
        }

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Statement.step()()
{
  return sub_1000EC0C4();
}

void Statement.scalar(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v3;
  if (*(void *)(a1 + 16))
  {
    Statement.bind(_:)(a1);
    Statement.scalar(_:)(_swiftEmptyArrayStorage);
    sub_1000389DC();
  }

  else
  {
    sub_1000EA014(0);
    uint64_t v6 = *(void *)(v2 + 24);
    sub_10000C7FC();
    BOOL v7 = sub_1000E46BC(v6, v2);
    if (!v4)
    {
      uint64_t v8 = (sqlite3_stmt *)Statement.row.getter(v7);
      Cursor.subscript.getter(0LL, v8, a2);
    }
  }

  sub_1000EC0A8();
}

void Cursor.subscript.getter(uint64_t iCol@<X0>, sqlite3_stmt *a2@<X1>, uint64_t a3@<X8>)
{
  if (iCol < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v4 = iCol;
  if (iCol > 0x7FFFFFFF) {
    goto LABEL_13;
  }
  LODWORD(iCol) = sqlite3_column_type(a2, iCol);
  switch((int)iCol)
  {
    case 1:
      sqlite3_int64 v6 = sqlite3_column_int64(a2, v4);
      BOOL v7 = (ValueMetadata *)&type metadata for Int64;
      uint64_t v8 = &protocol witness table for Int64;
      goto LABEL_9;
    case 2:
      double v11 = sqlite3_column_double(a2, v4);
      *(void *)(a3 + 24) = &type metadata for Double;
      *(void *)(a3 + 3sub_100096760(v0[56], v0 + 2) = &protocol witness table for Double;
      *(double *)a3 = v11;
      return;
    case 3:
      iCol = (uint64_t)sqlite3_column_text(a2, v4);
      if (!iCol) {
        goto LABEL_14;
      }
      uint64_t v9 = String.init(cString:)(iCol);
      *(void *)(a3 + 24) = &type metadata for String;
      *(void *)(a3 + 3sub_100096760(v0[56], v0 + 2) = &protocol witness table for String;
      *(void *)a3 = v9;
      *(void *)(a3 + 8) = v10;
      return;
    case 4:
      Cursor.subscript.getter(v4, a2);
      BOOL v7 = &type metadata for Blob;
      uint64_t v8 = &protocol witness table for Blob;
LABEL_9:
      *(void *)(a3 + 24) = v7;
      *(void *)(a3 + 3sub_100096760(v0[56], v0 + 2) = v8;
      *(void *)a3 = v6;
      return;
    case 5:
      *(void *)(a3 + 3sub_100096760(v0[56], v0 + 2) = 0LL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
      return;
    default:
      break;
  }

const char *sub_1000EA9E4@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v5 = sqlite3_step(*(sqlite3_stmt **)(a1 + 16));
  uint64_t result = sub_1000EC0B8(v5);
  if (!v2) {
    *a2 = (_DWORD)result == 100;
  }
  return result;
}

uint64_t Statement.makeIterator()()
{
  return swift_retain();
}

uint64_t sub_1000EAA64@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  Statement.makeIterator()();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1000EAA94()
{
  return _s17AppIntents_SQLite9StatementC6handle33_E09230218008A0440B080F1AB3693645LLs13OpaquePointerVSgvpfi_0();
}

uint64_t sub_1000EAAB4()
{
  return 2LL;
}

uint64_t sub_1000EAABC()
{
  return sub_1000EAADC();
}

uint64_t sub_1000EAADC()
{
  uint64_t v0 = sub_1000EB674();
  swift_release();
  return v0;
}

uint64_t sub_1000EAB10()
{
  return sub_1000EAB34();
}

uint64_t sub_1000EAB38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)(a1, a2, a4, a3);
}

uint64_t Array.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Optional(0LL, a2);
  uint64_t v24 = *(void *)(v8 - 8);
  uint64_t v25 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v23 - v9;
  uint64_t v11 = *(void *)(a2 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  double v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v23 - v17;
  uint64_t v26 = Array.init()(a2, v16);
  uint64_t v29 = v26;
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(a4 + 16);
  uint64_t v20 = v27;
  uint64_t v27 = a4;
  uint64_t v28 = a1;
  v19(a3, a4);
  if (v20)
  {
    sub_1000EC07C();
    return swift_bridgeObjectRelease();
  }

  else
  {
    while (sub_100009E6C((uint64_t)v10, 1LL, a2) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v10, a2);
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v18, a2);
      uint64_t v21 = type metadata accessor for Array(0LL, a2);
      Array.append(_:)(v14, v21);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v18, a2);
      v19(a3, v27);
    }

    sub_1000EC07C();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v25);
    return v29;
  }

unint64_t sub_1000EAD1C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = (unint64_t)Statement.failableNext()();
  if (!v3) {
    *a1 = result;
  }
  return result;
}

void sub_1000EAD48(void *a1@<X8>)
{
  *a1 = v2;
}

uint64_t Statement.prepareRowIterator()()
{
  return v0;
}

void *sub_1000EAD90()
{
  if (*(void *)(v0 + 16))
  {
    uint64_t v1 = 0LL;
    uint64_t v14 = *(void *)(v0 + 16);
    uint64_t v2 = (unint64_t *)(v0 + 40);
    do
    {
      uint64_t v3 = *(v2 - 1);
      unint64_t v4 = *v2;
      swift_bridgeObjectRetain();
      uint64_t v5 = sub_1000D9BC0(0LL, 0xE000000000000000LL, v3, v4, 34LL, 0xE100000000000000LL);
      BOOL v7 = (void *)v6;
      sub_1000EC058(v5, v6, v8);
      v9._uint64_t countAndFlagsBits = v5;
      v9._object = v7;
      String.append(_:)(v9);
      uint64_t v10 = swift_bridgeObjectRelease();
      sub_1000EC058(v10, v11, v12);
      swift_bridgeObjectRelease();
      swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      sub_1000EB228(v1, 0LL, 0xE000000000000000LL);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v2 += 2;
      ++v1;
    }

    while (v14 != v1);
  }

  swift_bridgeObjectRelease();
  return _swiftEmptyDictionarySingleton;
}

const char *Statement.description.getter(uint64_t a1)
{
  unint64_t result = sqlite3_sql(*(sqlite3_stmt **)(v1 + 16));
  if (result) {
    return (const char *)String.init(cString:)(result);
  }
  __break(1u);
  return result;
}

void sub_1000EAF08(uint64_t a1)
{
}

double Cursor.subscript.getter(uint64_t iCol, sqlite3_stmt *a2)
{
  if (iCol < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
  }

  else if (iCol <= 0x7FFFFFFF)
  {
    return sqlite3_column_double(a2, iCol);
  }

  __break(1u);
  return result;
}

sqlite3_int64 Cursor.subscript.getter(sqlite3_int64 result, sqlite3_stmt *a2)
{
  if (result < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
  }

  else if (result <= 0x7FFFFFFF)
  {
    return sub_1000EC070(a2, result);
  }

  __break(1u);
  return result;
}

uint64_t Cursor.subscript.getter(uint64_t iCol, sqlite3_stmt *a2)
{
  if (iCol < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (iCol > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  iCol = (uint64_t)sqlite3_column_text(a2, iCol);
  if (iCol) {
    return String.init(cString:)(iCol);
  }
LABEL_7:
  __break(1u);
  return iCol;
}

void Cursor.subscript.getter(uint64_t iCol, sqlite3_stmt *a2)
{
  if (iCol < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_7;
  }

  int v2 = iCol;
  if (iCol > 0x7FFFFFFF)
  {
LABEL_7:
    __break(1u);
    return;
  }

  unint64_t v4 = sqlite3_column_blob(a2, iCol);
  if (v4)
  {
    uint64_t v5 = v4;
    int64_t v6 = sqlite3_column_bytes(a2, v2);
    _s17AppIntents_SQLite4BlobV5bytes6lengthACSV_SitcfC_0(v5, v6);
  }

  else
  {
    sub_10000AF74();
  }

BOOL Cursor.subscript.getter(BOOL iCol, sqlite3_stmt *a2)
{
  if (iCol < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
  }

  else if (iCol <= 0x7FFFFFFF)
  {
    return sqlite3_column_int64(a2, iCol) != 0;
  }

  __break(1u);
  return iCol;
}

void Cursor.makeIterator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000C254((uint64_t)&unk_100128720, 24LL);
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  uint64_t v5 = (void *)sub_10000C254((uint64_t)&unk_100128748, 40LL);
  __int128 v5[2] = v4;
  v5[3] = a1;
  _OWORD v5[4] = a2;
  uint64_t v6 = sub_100008DB0(&qword_100134CE0);
  uint64_t v7 = sub_10000C254(v6, 32LL);
  *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1000EBA80;
  *(void *)(v7 + 24) = v5;
  sub_10000AF74();
}

void sub_1000EB100(uint64_t a1@<X0>, sqlite3_stmt *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (uint64_t *)(a1 + 16);
  swift_beginAccess(a1 + 16, v11, 0LL, 0LL);
  if (*(void *)(a1 + 16) >= a3)
  {
    *(void *)a4 = 0LL;
    *(void *)(a4 + 8) = 0LL;
    *(void *)(a4 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(_OWORD *)(a4 + 24) = xmmword_1000F8800;
  }

  else
  {
    swift_beginAccess(v8, &v10, 1LL, 0LL);
    uint64_t v9 = *v8 + 1;
    if (__OFADD__(*v8, 1LL))
    {
      __break(1u);
    }

    else
    {
      *uint64_t v8 = v9;
      Cursor.subscript.getter(v9 - 1, a2, a4);
    }
  }

void sub_1000EB1B8(void *a1@<X8>)
{
  *a1 = v3;
}

uint64_t sub_1000EB1E0()
{
  return _s17AppIntents_SQLite9StatementC6handle33_E09230218008A0440B080F1AB3693645LLs13OpaquePointerVSgvpfi_0();
}

uint64_t sub_1000EB1E8()
{
  return sub_1000EAB0C(*v0, v0[1]);
}

uint64_t sub_1000EB1F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EAB30(a1, a2, a3, *v3, v3[1]);
}

unint64_t sub_1000EB1F8(uint64_t a1)
{
  uint64_t v3 = static Hasher._hash(seed:_:)(*(void *)(v1 + 40), a1);
  return sub_1000EB5D8(a1, v3);
}

void sub_1000EB228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (v9)
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v10 = v7;
  char v11 = v8;
  sub_100008DB0(&qword_100134AD8);
  if (!sub_10000AD44()) {
    goto LABEL_5;
  }
  uint64_t v12 = sub_100015F98(a2, a3);
  if ((v11 & 1) != (v13 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(type metadata for String);
    __break(1u);
    return;
  }

  unint64_t v10 = v12;
LABEL_5:
  uint64_t v14 = *v3;
  if ((v11 & 1) != 0)
  {
    *(void *)(*(void *)(v14 + 56) + 8 * v10) = a1;
    sub_10001BE4C();
  }

  else
  {
    sub_100009C64(v10, a2, a3, a1, v14);
    sub_10000AD84(a3);
  }

_OWORD *sub_1000EB2F8(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  Swift::Int v8 = *v3;
  sub_1000EB1F8(a2);
  sub_10000ACF4();
  if (v11)
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v12 = v9;
  char v13 = v10;
  sub_100008DB0(&qword_100134C08);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v8)) {
    goto LABEL_5;
  }
  unint64_t v14 = sub_1000EB1F8(a2);
  if ((v13 & 1) != (v15 & 1))
  {
LABEL_9:
    double result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
    __break(1u);
    return result;
  }

  unint64_t v12 = v14;
LABEL_5:
  double v16 = (void *)*v4;
  if ((v13 & 1) == 0) {
    return sub_1000EB52C(v12, a2, a1, v16);
  }
  sub_10000AC58((void *)(v16[7] + 32 * v12));
  uint64_t v17 = (_OWORD *)sub_10000AF9C();
  return sub_10000AC78(v17, v18);
}

void sub_1000EB3EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (v8)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v9 = v6;
  char v10 = v7;
  sub_100008DB0(&qword_100134C10);
  if (!sub_10000AD44()) {
    goto LABEL_5;
  }
  uint64_t v11 = sub_10000AD98();
  if ((v10 & 1) != (v12 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(type metadata for String);
    __break(1u);
    return;
  }

  uint64_t v9 = v11;
LABEL_5:
  if ((v10 & 1) != 0)
  {
    uint64_t v13 = *(void *)(*(void *)v5 + 56LL);
    swift_bridgeObjectRelease();
    *(void *)(v13 + 8 * sub_10001B60C((uint64_t)&a9, v9) = v3;
    sub_10001BE4C();
  }

  else
  {
    unint64_t v14 = sub_10000ADFC();
    sub_100009C64(v14, v15, v16, v17, v18);
    sub_10000AD84(v4);
  }

void sub_1000EB48C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (v8)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v9 = v6;
  char v10 = v7;
  sub_100008DB0(&qword_100134DD0);
  if (!sub_10000AD44()) {
    goto LABEL_5;
  }
  uint64_t v11 = sub_10000AD98();
  if ((v10 & 1) != (v12 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(type metadata for String);
    __break(1u);
    return;
  }

  uint64_t v9 = v11;
LABEL_5:
  if ((v10 & 1) != 0)
  {
    uint64_t v13 = *(void *)(*(void *)v5 + 56LL);
    _Block_release(*(const void **)(v13 + 8 * v9));
    *(void *)(v13 + 8 * sub_10001B60C((uint64_t)&a9, v9) = v3;
    sub_10001BE4C();
  }

  else
  {
    unint64_t v14 = sub_10000ADFC();
    sub_1000EB590(v14, v15, v16, v17, v18);
    sub_10000AD84(v4);
  }

_OWORD *sub_1000EB52C(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  double result = sub_10000AC78(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

unint64_t sub_1000EB590(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1LL << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

unint64_t sub_1000EB5D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

uint64_t sub_1000EB674()
{
  uint64_t result = (unint64_t)Statement.failableNext()();
  if (v3)
  {
LABEL_20:
    swift_unexpectedError(v3, "AppIntents_SQLite/Statement.swift", 33LL, 1LL, 211LL);
    __break(1u);
  }

  else
  {
    uint64_t v4 = result;
    uint64_t v1 = 0LL;
    uint64_t v0 = _swiftEmptyArrayStorage;
    uint64_t v5 = &_swiftEmptyArrayStorage[4];
    while (v4)
    {
      if (!v1)
      {
        unint64_t v6 = v0[3];
        int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
        if (v7 <= 1) {
          uint64_t v8 = 1LL;
        }
        else {
          uint64_t v8 = v7;
        }
        uint64_t v9 = sub_100008DB0(&qword_100134DC8);
        char v10 = (void *)swift_allocObject(v9, 8 * v8 + 32, 7LL);
        uint64_t v11 = (uint64_t)(j__malloc_size(v10) - 32) / 8;
        v10[2] = v8;
        uint64_t v10[3] = 2 * v11;
        unint64_t v12 = (unint64_t)(v10 + 4);
        unint64_t v13 = v0[3];
        unint64_t v14 = v13 >> 1;
        if (v0[2])
        {
          v0[2] = 0LL;
        }

        uint64_t v5 = (uint64_t *)(v12 + 8 * v14);
        uint64_t v1 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - (v13 >> 1);
        uint64_t result = swift_release();
        uint64_t v0 = v10;
      }

      BOOL v16 = __OFSUB__(v1--, 1LL);
      if (v16)
      {
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }

      *v5++ = v4;
      uint64_t result = (unint64_t)Statement.failableNext()();
      uint64_t v4 = result;
      if (v3) {
        goto LABEL_20;
      }
    }
  }

  uint64_t result = swift_release();
  unint64_t v17 = v0[3];
  if (v17 < 2) {
    return (uint64_t)v0;
  }
  unint64_t v18 = v17 >> 1;
  BOOL v16 = __OFSUB__(v18, v1);
  unint64_t v19 = v18 - v1;
  if (!v16)
  {
    v0[2] = v19;
    return (uint64_t)v0;
  }

uint64_t sub_1000EB7F8(sqlite3_stmt *a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject(&unk_100128720, 24LL, 7LL);
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  uint64_t v5 = (uint64_t *)(v4 + 16);
  unint64_t v6 = (void *)swift_allocObject(&unk_100128830, 40LL, 7LL);
  uint64_t v6[2] = v4;
  v6[3] = a1;
  v6[4] = a2;
  uint64_t v7 = sub_100008DB0(&qword_100134CE0);
  uint64_t inited = swift_initStackObject(v7, v33);
  *(void *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1000EC010;
  *(void *)(inited + 24) = v6;
  uint64_t v28 = inited;
  uint64_t v29 = v4;
  swift_retain(v4);
  swift_beginAccess(v4 + 16, v32, 1LL, 0LL);
  uint64_t v9 = *(void *)(v4 + 16);
  char v10 = _swiftEmptyArrayStorage;
  if (v9 < a2)
  {
    uint64_t v11 = 0LL;
    unint64_t v12 = &_swiftEmptyArrayStorage[4];
    while (1)
    {
      *uint64_t v5 = v9 + 1;
      Cursor.subscript.getter(v9, a1, (uint64_t)v30);
      uint64_t result = sub_1000EBA30((uint64_t)v30, (uint64_t)v31, &qword_100131978);
      if (!v11)
      {
        unint64_t v14 = v10[3];
        int64_t v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
        if (v15 <= 1) {
          uint64_t v16 = 1LL;
        }
        else {
          uint64_t v16 = v15;
        }
        uint64_t v17 = sub_100008DB0(&qword_100131970);
        unint64_t v18 = (void *)swift_allocObject(v17, 40 * v16 + 32, 7LL);
        uint64_t v19 = (uint64_t)(j__malloc_size(v18) - 32) / 40;
        void v18[2] = v16;
        void v18[3] = 2 * v19;
        unint64_t v20 = (unint64_t)(v18 + 4);
        unint64_t v21 = v10[3];
        unint64_t v22 = v21 >> 1;
        if (v10[2])
        {
          v10[2] = 0LL;
        }

        unint64_t v12 = (void *)(v20 + 40 * v22);
        uint64_t v11 = (v19 & 0x7FFFFFFFFFFFFFFFLL) - (v21 >> 1);
        uint64_t result = swift_release(v10);
        char v10 = v18;
      }

      BOOL v24 = __OFSUB__(v11--, 1LL);
      if (v24) {
        break;
      }
      sub_1000EBA30((uint64_t)v31, (uint64_t)v12, &qword_100131978);
      v12 += 5;
      uint64_t v9 = *v5;
      if (*v5 >= a2) {
        goto LABEL_21;
      }
    }

    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  uint64_t v11 = 0LL;
LABEL_21:
  swift_release(v28);
  uint64_t result = swift_release(v29);
  unint64_t v25 = v10[3];
  if (v25 < 2) {
    return (uint64_t)v10;
  }
  unint64_t v26 = v25 >> 1;
  BOOL v24 = __OFSUB__(v26, v11);
  unint64_t v27 = v26 - v11;
  if (!v24)
  {
    v10[2] = v27;
    return (uint64_t)v10;
  }

uint64_t sub_1000EBA30(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = sub_10000AF9C();
  v5(v4);
  return a2;
}

uint64_t sub_1000EBA70()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1000EBA80(uint64_t a1@<X8>)
{
}

unint64_t sub_1000EBA90()
{
  unint64_t result = qword_100134CE8;
  if (!qword_100134CE8)
  {
    uint64_t v1 = type metadata accessor for Statement();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Statement, v1);
    atomic_store(result, (unint64_t *)&qword_100134CE8);
  }

  return result;
}

uint64_t type metadata accessor for Statement()
{
  return objc_opt_self(&OBJC_CLASS____TtC17AppIntents_SQLite9Statement);
}

unint64_t sub_1000EBAEC(uint64_t a1)
{
  unint64_t result = sub_1000EBA90();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000EBB14()
{
  unint64_t result = qword_100134CF0;
  if (!qword_100134CF0)
  {
    uint64_t v1 = sub_100008E58(&qword_100134CF8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AnyIterator<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100134CF0);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for Cursor(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 == 1 || !*(_BYTE *)(a1 + 16))
    {
      if (*(void *)a1) {
        int v2 = -1;
      }
      else {
        int v2 = 0;
      }
    }

    else
    {
      int v2 = *(_DWORD *)a1 + 1;
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Cursor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)unint64_t result = a2 - 2;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 2) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 2) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = 0LL;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Cursor()
{
  return &type metadata for Cursor;
}

uint64_t sub_1000EBBE0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject(&unk_100128720, 24LL, 7LL);
  *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  uint64_t v11 = (void *)swift_allocObject(&unk_100128808, 40LL, 7LL);
  v11[2] = v10;
  v11[3] = a4;
  v11[4] = a5;
  uint64_t v12 = sub_100008DB0(&qword_100134CE0);
  uint64_t result = swift_allocObject(v12, 32LL, 7LL);
  uint64_t v14 = result;
  uint64_t v15 = 0LL;
  *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1000EC010;
  *(void *)(result + 24) = v11;
  if (!a2 || !a3)
  {
LABEL_11:
    *a1 = v14;
    return v15;
  }

  if ((a3 & 0x8000000000000000LL) == 0)
  {
    sub_1000EBA80((uint64_t)v16);
    if (v17 == 1)
    {
      uint64_t v15 = 0LL;
LABEL_9:
      sub_10000C218((uint64_t)v16, &qword_100134DC0);
    }

    else
    {
      uint64_t v15 = 0LL;
      while (1)
      {
        sub_1000EBA30((uint64_t)v16, (uint64_t)v18, &qword_100131978);
        sub_1000EBA30((uint64_t)v18, a2, &qword_100131978);
        if (a3 - 1 == v15) {
          break;
        }
        a2 += 40LL;
        sub_1000EBA80((uint64_t)v16);
        ++v15;
        if (v17 == 1) {
          goto LABEL_9;
        }
      }

      uint64_t v15 = a3;
    }

    goto LABEL_11;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000EBD34(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1000EA014(0);
  uint64_t v8 = 0LL;
  if (!a2 || !a3)
  {
LABEL_11:
    *a1 = v3;
    return v8;
  }

  if ((a3 & 0x8000000000000000LL) == 0)
  {
    unint64_t v9 = (unint64_t)Statement.failableNext()();
    if (v10)
    {
LABEL_9:
      swift_unexpectedError(v10, "AppIntents_SQLite/Statement.swift", 33LL, 1LL, 211LL);
      __break(1u);
LABEL_10:
      uint64_t v8 = a3;
    }

    else
    {
      uint64_t v8 = 0LL;
      while (v9)
      {
        *(void *)(a2 + 8 * v8) = v9;
        if (a3 - 1 == v8) {
          goto LABEL_10;
        }
        unint64_t v9 = (unint64_t)Statement.failableNext()();
        ++v8;
        if (v10) {
          goto LABEL_9;
        }
      }
    }

    goto LABEL_11;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000EBDF0(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    __int128 v5[2] = ~v7;
    v5[3] = v12;
    _OWORD v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    unint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }

    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain(v21);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

uint64_t sub_1000EBFEC()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000EC01C(uint64_t a1, ...)
{
  return swift_beginAccess(v1 + 16, va, 0LL, 0LL);
}

uint64_t sub_1000EC030(uint64_t a1, uint64_t a2)
{
  return swift_unexpectedError(v2, a2, 33LL, 1LL, 211LL);
}

uint64_t sub_1000EC044( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11LL, 2LL, a4, a5, a6, 33LL, 2LL, a9, a10);
}

uint64_t sub_1000EC058(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return Character.write<A>(to:)(va, 34LL, 0xE100000000000000LL, v3, v4);
}

sqlite3_int64 sub_1000EC070@<X0>(sqlite3_stmt *a1@<X1>, int a2@<W8>)
{
  return sqlite3_column_int64(a1, a2);
}

uint64_t sub_1000EC07C()
{
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(v0 - 8) + 8LL))(*(void *)(v1 - 88), v0);
}

uint64_t sub_1000EC090()
{
  return swift_release(v0);
}

void sub_1000EC09C(uint64_t a1)
{
}

  ;
}

uint64_t sub_1000EC0B0()
{
  return Statement.run(_:)();
}

const char *sub_1000EC0B8(uint64_t a1)
{
  return sub_1000E51EC(a1, 0LL);
}

BOOL sub_1000EC0C4()
{
  return sub_1000E46BC(v0, v1);
}

uint64_t sub_1000EC0D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _OWORD v23[4] = &protocol witness table for Expression<A>;
  v23[0] = a1;
  v23[1] = a2;
  _OWORD v23[2] = a3;
  void v23[3] = sub_100008DB0(&qword_100131988);
  v22[3] = &type metadata for Int;
  void v22[4] = &protocol witness table for Int;
  v22[0] = a4;
  uint64_t v7 = sub_100008DB0(&qword_100131160);
  uint64_t inited = swift_initStackObject(v7, v21);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
  sub_100008F24((uint64_t)v23, inited + 32);
  sub_100008F24((uint64_t)v22, inited + 72);
  sub_1000119E4();
  sub_10001BEF8();
  sub_1000D3EA4(inited, a5, 0xE300000000000000LL, v18);
  uint64_t v9 = v19;
  uint64_t v10 = v20;
  sub_100008D74(v18, v19);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  sub_10000AC58(v18);
  uint64_t v16 = sub_1000E3274(v11, v13, v15, 0LL, 0xE000000000000000LL);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_setDeallocating(inited);
  sub_100058868();
  sub_10000AC58(v22);
  sub_10000AC58(v23);
  return v16;
}

uint64_t Setter.expression.getter()
{
  uint64_t v1 = sub_100008DB0(&qword_100131160);
  uint64_t inited = swift_initStackObject(v1, v10);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
  sub_100008F24(v0, inited + 32);
  sub_100008F24(v0 + 40, inited + 72);
  sub_1000D3EA4(inited, 2112800LL, 0xE300000000000000LL, v7);
  uint64_t v3 = v8;
  uint64_t v4 = v9;
  sub_100008D74(v7, v8);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  sub_10000AC58(v7);
  swift_setDeallocating(inited);
  sub_100058868();
  return v5;
}

uint64_t sub_1000EC320@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t result = type metadata accessor for Expression(0LL, a7, a3, a4);
  *a8 = a1;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = result;
  a8[8] = result;
  a8[9] = &protocol witness table for Expression<A>;
  a8[4] = &protocol witness table for Expression<A>;
  a8[5] = a4;
  a8[6] = a5;
  a8[7] = a6;
  return result;
}

uint64_t sub_1000EC394@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  a7[3] = type metadata accessor for Expression(0LL, a5, a3, a4);
  a7[4] = &protocol witness table for Expression<A>;
  *a7 = a1;
  a7[1] = a2;
  a7[2] = a3;
  uint64_t v14 = *(void *)(a6 + 8);
  a7[8] = a5;
  a7[9] = v14;
  uint64_t v15 = sub_10001AFA8(a7 + 5);
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32LL))(v15, a4, a5);
}

uint64_t sub_1000EC420@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v16 = type metadata accessor for Optional(255LL, a7);
  a8[3] = type metadata accessor for Expression(0LL, v16, v17, v18);
  a8[4] = &protocol witness table for Expression<A>;
  *a8 = a1;
  a8[1] = a2;
  a8[2] = a3;
  uint64_t result = type metadata accessor for Expression(0LL, a7, v19, v20);
  a8[8] = result;
  a8[9] = &protocol witness table for Expression<A>;
  a8[5] = a4;
  a8[6] = a5;
  a8[7] = a6;
  return result;
}

uint64_t sub_1000EC4BC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v15 = type metadata accessor for Optional(255LL, a7);
  uint64_t result = type metadata accessor for Expression(0LL, v15, v16, v17);
  *a8 = a1;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = result;
  a8[8] = result;
  a8[9] = &protocol witness table for Expression<A>;
  a8[4] = &protocol witness table for Expression<A>;
  a8[5] = a4;
  a8[6] = a5;
  a8[7] = a6;
  return result;
}

uint64_t sub_1000EC53C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v22 = a6;
  uint64_t v12 = type metadata accessor for Optional(0LL, a5);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t v18 = type metadata accessor for Expression(0LL, v12, v16, v17);
  a7[3] = v18;
  a7[4] = &protocol witness table for Expression<A>;
  *a7 = a1;
  a7[1] = a2;
  a7[2] = a3;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a4, v12);
  uint64_t v24 = v18;
  unint64_t v25 = &protocol witness table for Expression<A>;
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v18);
  uint64_t v20 = swift_getWitnessTable("0k", v12);
  ExpressionType<>.init(value:)((uint64_t)v15, v18, WitnessTable, v20, v22, (uint64_t)&v23);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a4, v12);
  return sub_100009EEC(&v23, (uint64_t)(a7 + 5));
}

void <- infix<A>(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  sub_1000ED644(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1000843C4();
}

{
  sub_1000ED644(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1000843C4();
}

void <- infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v15, v17, v18, v13);
  sub_1000EC394(v8, v7, v6, (uint64_t)v15, a5, a6, v9);
  sub_1000119E4();
  sub_10001BEF8();
  sub_10001BE4C();
}

{
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  sub_1000ED5FC();
  uint64_t v10 = type metadata accessor for Optional(0LL, v9);
  uint64_t v11 = __chkstk_darwin(v10);
  double v13 = (char *)&v19 - v12;
  (*(void (**)(char *, uint64_t, double))(v14 + 16))((char *)&v19 - v12, a4, v11);
  sub_10001C064();
  sub_1000119E4();
  uint64_t v15 = sub_1000ED630();
  sub_1000EC53C(v15, v16, v17, (uint64_t)v13, a5, a6, v18);
  sub_10001BE4C();
}

double sub_1000EC764( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(void))
{
  *(void *)&double result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

uint64_t += infix(_:_:)()
{
  return sub_1000EC898();
}

{
  return sub_1000EC8EC();
}

{
  return sub_1000EC898();
}

{
  return sub_1000EC898();
}

{
  return sub_1000EC8EC();
}

uint64_t sub_1000EC898()
{
  uint64_t v2 = sub_1000ED5D0();
  sub_1000ED570(v2, (uint64_t)&protocol witness table for Expression<A>);
  return sub_10000AD84(v0);
}

uint64_t sub_1000EC8EC()
{
  uint64_t v2 = sub_1000ED5D0();
  sub_1000ED570(v2, (uint64_t)&protocol witness table for Expression<A>);
  return sub_10000AD84(v0);
}

void += infix<A>(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  sub_1000ED4DC(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1000D8C64();
}

{
  sub_1000ED4DC(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1000D8C64();
}

void += infix<A>(_:_:)()
{
}

{
  sub_1000ECA70();
  sub_1000843C4();
}

uint64_t sub_1000EC9B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t))
{
  uint64_t v11 = a10(v10);
  sub_1000ED4E8(v11, v12, v13);
  sub_10001DF40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000ECA70()
{
  uint64_t v2 = v1();
  sub_1000ED4E8(v2, v3, v4);
  sub_10001DF40();
  return sub_1000E34A0(v0);
}

void -= infix<A>(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  sub_1000ED4DC(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1000D8C64();
}

{
  sub_1000ED4DC(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1000D8C64();
}

void -= infix<A>(_:_:)()
{
}

{
  sub_1000ECA70();
  sub_1000843C4();
}

void *= infix<A>(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  sub_1000ED4DC(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1000D8C64();
}

{
  sub_1000ED4DC(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1000D8C64();
}

void *= infix<A>(_:_:)()
{
}

{
  sub_1000ECA70();
  sub_1000843C4();
}

void /= infix<A>(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  sub_1000ED4DC(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1000D8C64();
}

{
  sub_1000ED4DC(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1000D8C64();
}

void /= infix<A>(_:_:)()
{
}

{
  sub_1000ECA70();
  sub_1000843C4();
}

void %= infix<A>(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  sub_1000ED518(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1000843C4();
}

{
  sub_1000ED518(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1000843C4();
}

uint64_t %= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000ECE2C( a1,  a2,  a3,  a4,  a5,  a6,  (uint64_t)% infix<A>(_:_:),  (void (*)(uint64_t))<- infix<A>(_:_:));
}

{
  return sub_1000ECE2C( a1,  a2,  a3,  a4,  a5,  a6,  (uint64_t)% infix<A>(_:_:),  (void (*)(uint64_t))<- infix<A>(_:_:));
}

uint64_t sub_1000ECDAC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(void))
{
  uint64_t v10 = a9();
  sub_1000ED4E8(v10, v11, v12);
  sub_10001DF40();
  return sub_1000E34A0(v9);
}

uint64_t sub_1000ECE2C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t))
{
  uint64_t v11 = v10;
  uint64_t v12 = sub_1000ED630();
  a8(v12);
  swift_bridgeObjectRelease();
  return sub_1000E34A0(v11);
}

void <<= infix<A>(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  sub_1000ED518(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1000843C4();
}

{
  sub_1000ED518(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1000843C4();
}

uint64_t <<= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000ECE2C( a1,  a2,  a3,  a4,  a5,  a6,  (uint64_t)<< infix<A>(_:_:),  (void (*)(uint64_t))<- infix<A>(_:_:));
}

{
  return sub_1000ECE2C( a1,  a2,  a3,  a4,  a5,  a6,  (uint64_t)<< infix<A>(_:_:),  (void (*)(uint64_t))<- infix<A>(_:_:));
}

void >>= infix<A>(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  sub_1000ED518(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1000843C4();
}

{
  sub_1000ED518(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1000843C4();
}

uint64_t >>= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000ECE2C( a1,  a2,  a3,  a4,  a5,  a6,  (uint64_t)>> infix<A>(_:_:),  (void (*)(uint64_t))<- infix<A>(_:_:));
}

{
  return sub_1000ECE2C( a1,  a2,  a3,  a4,  a5,  a6,  (uint64_t)>> infix<A>(_:_:),  (void (*)(uint64_t))<- infix<A>(_:_:));
}

void &= infix<A>(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  sub_1000ED518(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1000843C4();
}

{
  sub_1000ED518(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1000843C4();
}

uint64_t &= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000ECE2C( a1,  a2,  a3,  a4,  a5,  a6,  (uint64_t)& infix<A>(_:_:),  (void (*)(uint64_t))<- infix<A>(_:_:));
}

{
  return sub_1000ECE2C( a1,  a2,  a3,  a4,  a5,  a6,  (uint64_t)& infix<A>(_:_:),  (void (*)(uint64_t))<- infix<A>(_:_:));
}

void |= infix<A>(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  sub_1000ED518(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1000843C4();
}

{
  sub_1000ED518(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1000843C4();
}

uint64_t |= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000ECE2C( a1,  a2,  a3,  a4,  a5,  a6,  (uint64_t)| infix<A>(_:_:),  (void (*)(uint64_t))<- infix<A>(_:_:));
}

{
  return sub_1000ECE2C( a1,  a2,  a3,  a4,  a5,  a6,  (uint64_t)| infix<A>(_:_:),  (void (*)(uint64_t))<- infix<A>(_:_:));
}

void ^= infix<A>(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  sub_1000ED518(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1000843C4();
}

{
  sub_1000ED518(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1000843C4();
}

uint64_t ^= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000ECE2C( a1,  a2,  a3,  a4,  a5,  a6,  (uint64_t)^ infix<A>(_:_:),  (void (*)(uint64_t))<- infix<A>(_:_:));
}

{
  return sub_1000ECE2C( a1,  a2,  a3,  a4,  a5,  a6,  (uint64_t)^ infix<A>(_:_:),  (void (*)(uint64_t))<- infix<A>(_:_:));
}

void ++ postfix<A>(_:)()
{
}

{
  sub_1000ED5C8();
}

void -- postfix<A>(_:)()
{
}

{
  sub_1000ED5C8();
}

void sub_1000ED1CC()
{
  uint64_t v6 = type metadata accessor for Expression(0LL, v0, v4, v5);
  sub_1000ED2E0();
  sub_1000ED624();
  sub_10001C064();
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v6);
  uint64_t v15 = sub_1000ED554(WitnessTable, v8, v9, v10, v11, v12, v13, v14, v3);
  uint64_t v23 = sub_1000ED534(v15, v16, v17, v18, v19, v20, v21, v22, v26, v2, v1, v27, v28, v29);
  sub_1000ED5E4(v23, v24, v25, (uint64_t)&protocol witness table for Expression<A>);
  sub_1000ED58C();
}

void sub_1000ED254()
{
  uint64_t v4 = type metadata accessor for Optional(255LL, v0);
  uint64_t v7 = type metadata accessor for Expression(0LL, v4, v5, v6);
  sub_1000ED2E0();
  sub_1000ED624();
  sub_10001C064();
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v7);
  uint64_t v16 = sub_1000ED554(WitnessTable, v9, v10, v11, v12, v13, v14, v15, v3);
  uint64_t v24 = sub_1000ED534(v16, v17, v18, v19, v20, v21, v22, v23, v27, v2, v1, v28, v29, v30);
  sub_1000ED5E4(v24, v25, v26, (uint64_t)&protocol witness table for Expression<A>);
  sub_1000ED58C();
}

unint64_t sub_1000ED2E0()
{
  unint64_t result = qword_100133E10;
  if (!qword_100133E10)
  {
    uint64_t v1 = sub_100008E58(&qword_100131988);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100133E10);
  }

  return result;
}

uint64_t destroy for Setter(void *a1)
{
  return sub_10000AC58(a1 + 5);
}

uint64_t initializeWithCopy for Setter(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  return a1;
}

void *assignWithCopy for Setter(void *a1, void *a2)
{
  return a1;
}

void *initializeWithTake for Setter(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

uint64_t assignWithTake for Setter(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(void *)(a1 + 3sub_100096760(v0[56], v0 + 2) = *(void *)(a2 + 32);
  sub_10000AC58((void *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 7sub_100096760(v0[56], v0 + 2) = *(void *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for Setter(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 80))
    {
      LODWORD(vsub_100096760(v0[56], v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(vsub_100096760(v0[56], v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(vsub_100096760(v0[56], v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Setter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 7sub_100096760(v0[56], v0 + 2) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 80) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Setter()
{
  return &type metadata for Setter;
}

uint64_t sub_1000ED4DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1000EC9B0(a1, a2, a3, a4, a5, a6, a7, a8, v8, v9);
}

uint64_t sub_1000ED4E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return v8(v7, v6, v5, a1, a2, a3, v4, v3);
}

uint64_t sub_1000ED518( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1000ECDAC(a1, a2, a3, a4, a5, a6, a7, a8, v8);
}

  ;
}

uint64_t sub_1000ED534( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return sub_1000EC0D0(a12, a13, a14, 1LL, v14);
}

uint64_t sub_1000ED554( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return ExpressionType.init<A>(_:)((uint64_t)&a9, v9, v10, v11, a1);
}

uint64_t sub_1000ED570@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *uint64_t v5 = v4;
  v5[1] = v3;
  __int128 v5[2] = v2;
  v5[3] = a1;
  v5[8] = a1;
  void v5[9] = a2;
  _OWORD v5[4] = a2;
  void v5[5] = v6;
  void v5[6] = v7;
  uint64_t v5[7] = v8;
  return swift_bridgeObjectRetain(v3);
}

  ;
}

  ;
}

void sub_1000ED5C0()
{
}

void sub_1000ED5C8()
{
}

uint64_t sub_1000ED5D0()
{
  return sub_100008DB0(v0);
}

uint64_t sub_1000ED5E4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *uint64_t v4 = v6;
  v4[1] = v7;
  v4[2] = v8;
  v4[3] = v5;
  void v4[8] = v5;
  void v4[9] = a4;
  void v4[4] = a4;
  void v4[5] = result;
  v4[6] = a2;
  v4[7] = a3;
  return result;
}

  ;
}

  ;
}

uint64_t sub_1000ED624()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000ED630()
{
  return v0;
}

double sub_1000ED644( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1000EC764(a1, a2, a3, a4, a5, a6, a7, a8, v8);
}

uint64_t static DateFunctions.date(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EDD74(a1, a2, a3, 1702125924LL);
}

uint64_t sub_1000ED658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a5 + 16);
  if (v9)
  {
    sub_1000EDA70((void *)0x3F, 0xE100000000000000LL, v9);
    uint64_t v10 = sub_100008DB0((uint64_t *)&unk_100132780);
    unint64_t v11 = sub_1000D2BBC();
    uint64_t v12 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v10, v11);
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    uint64_t v26 = a1;
    uint64_t v27 = a2;
    swift_bridgeObjectRetain();
    v15._uint64_t countAndFlagsBits = 539770664LL;
    v15._object = (void *)0xE400000000000000LL;
    String.append(_:)(v15);
    v16._uint64_t countAndFlagsBits = v12;
    v16._object = v14;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._uint64_t countAndFlagsBits = 41LL;
    v17._object = (void *)0xE100000000000000LL;
    String.append(_:)(v17);
    uint64_t v18 = a1;
    uint64_t v19 = sub_100008DB0((uint64_t *)&unk_100132130);
    uint64_t inited = swift_initStackObject(v19, &v25);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5520;
    *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = a3;
    *(void *)(inited + 40) = a4;
    uint64_t v26 = inited;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000427B8();
    sub_1000423FC(v26);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v26 = a1;
    uint64_t v27 = a2;
    swift_bridgeObjectRetain();
    v21._uint64_t countAndFlagsBits = 2703144LL;
    v21._object = (void *)0xE300000000000000LL;
    String.append(_:)(v21);
    uint64_t v18 = v26;
    uint64_t v22 = sub_100008DB0(&qword_100131970);
    uint64_t v23 = swift_allocObject(v22, 72LL, 7LL);
    *(_OWORD *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5520;
    *(void *)(v23 + 56) = type metadata for String;
    *(void *)(v23 + 64) = &protocol witness table for String;
    *(void *)(v23 + 3sub_100096760(v0[56], v0 + 2) = a3;
    *(void *)(v23 + 40) = a4;
    swift_bridgeObjectRetain();
  }

  return v18;
}

uint64_t static DateFunctions.time(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EDD74(a1, a2, a3, 1701669236LL);
}

uint64_t static DateFunctions.datetime(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000ED864(a1, a2, a3, 0x656D697465746164LL, 0xE800000000000000LL);
}

uint64_t static DateFunctions.julianday(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000ED864(a1, a2, a3, 0x61646E61696C756ALL, 0xE900000000000079LL);
}

uint64_t sub_1000ED864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000ED658(a4, a5, a1, a2, a3);
}

uint64_t static DateFunctions.strftime(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a5 + 16);
  if (v9)
  {
    sub_1000EDA70((void *)0x3F, 0xE100000000000000LL, v9);
    uint64_t v10 = sub_100008DB0((uint64_t *)&unk_100132780);
    unint64_t v11 = sub_1000D2BBC();
    uint64_t v12 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v10, v11);
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(18LL);
    swift_bridgeObjectRelease();
    uint64_t v22 = 0x656D697466727473LL;
    unint64_t v23 = 0xEF202C3F202C3F28LL;
    v15._uint64_t countAndFlagsBits = v12;
    v15._object = v14;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    sub_1000EDD7C();
    uint64_t v16 = sub_100008DB0((uint64_t *)&unk_100132130);
    uint64_t inited = swift_initStackObject(v16, &v21);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
    *(void *)(inited + 3sub_100096760(v0[56], v0 + 2) = a1;
    *(void *)(inited + 40) = a2;
    *(void *)(inited + 48) = a3;
    *(void *)(inited + 56) = a4;
    uint64_t v22 = inited;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000427B8();
    sub_1000423FC(v22);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v18 = sub_100008DB0(&qword_100131970);
    uint64_t v19 = swift_allocObject(v18, 112LL, 7LL);
    *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
    *(void *)(v19 + 56) = type metadata for String;
    *(void *)(v19 + 64) = &protocol witness table for String;
    *(void *)(v19 + 3sub_100096760(v0[56], v0 + 2) = a1;
    *(void *)(v19 + 40) = a2;
    *(void *)(v19 + 96) = type metadata for String;
    *(void *)(v19 + 104) = &protocol witness table for String;
    *(void *)(v19 + 7sub_100096760(v0[56], v0 + 2) = a3;
    *(void *)(v19 + 80) = a4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  return 0x656D697466727473LL;
}

void *sub_1000EDA70(void *result, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
  {
    __break(1u);
  }

  else
  {
    if (a3)
    {
      uint64_t v5 = result;
      uint64_t v6 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(a3, &type metadata for String);
      uint64_t v7 = v6;
      uint64_t v6[2] = a3;
      v6[4] = v5;
      v6[5] = a2;
      if (a3 != 1)
      {
        void v6[6] = v5;
        v6[7] = a2;
        uint64_t v8 = a3 - 2;
        if (v8)
        {
          uint64_t v9 = v6 + 9;
          do
          {
            *(v9 - 1) = v5;
            *uint64_t v9 = a2;
            sub_10000AFB0();
            v9 += 2;
            --v8;
          }

          while (v8);
        }

        sub_10000AFB0();
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      return _swiftEmptyArrayStorage;
    }

    return v7;
  }

  return result;
}

uint64_t DateFunctions.deinit()
{
  return v0;
}

uint64_t Date.date.getter()
{
  return sub_1000EDD6C(1702125924LL);
}

uint64_t type metadata accessor for DateFunctions()
{
  return objc_opt_self(&OBJC_CLASS____TtC17AppIntents_SQLite13DateFunctions);
}

uint64_t Date.time.getter()
{
  return sub_1000EDD6C(1701669236LL);
}

uint64_t Date.datetime.getter()
{
  return sub_1000EDB88(0x656D697465746164LL, 0xE800000000000000LL);
}

uint64_t Date.julianday.getter()
{
  return sub_1000EDB88(0x61646E61696C756ALL, 0xE900000000000079LL);
}

uint64_t sub_1000EDB88(uint64_t a1, uint64_t a2)
{
  if (qword_100134608 != -1) {
    swift_once(&qword_100134608, sub_1000EE5F8);
  }
  swift_beginAccess(&dateFormatter, v12, 0LL, 0LL);
  uint64_t v4 = dateFormatter.super.super.isa;
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v6 = -[objc_class stringFromDate:](v4, "stringFromDate:", isa);

  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v9 = v8;

  uint64_t v10 = sub_1000ED658(a1, a2, v7, v9, (uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t Expression<A>.date.getter(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_1000EDD60(a1, a2, a3, 1702125924LL);
}

uint64_t Expression<A>.time.getter(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_1000EDD60(a1, a2, a3, 1701669236LL);
}

uint64_t Expression<A>.datetime.getter(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_1000EDCEC(a1, a2, a3, 0x656D697465746164LL);
}

uint64_t Expression<A>.julianday.getter(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_1000EDCEC(a1, a2, a3, 0x61646E61696C756ALL);
}

uint64_t sub_1000EDCEC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v6._uint64_t countAndFlagsBits = a1;
  v6._object = a2;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  sub_1000EDD7C();
  sub_10000AFB0();
  return a4;
}

uint64_t sub_1000EDD60(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000EDCEC(a1, a2, a3, a4 & 0xFFFF0000FFFFFFFFLL | 0x2800000000LL);
}

uint64_t sub_1000EDD6C(uint64_t a1)
{
  return sub_1000EDB88(a1, 0xE400000000000000LL);
}

uint64_t sub_1000EDD74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000ED864(a1, a2, a3, a4, 0xE400000000000000LL);
}

void sub_1000EDD7C()
{
  v0._uint64_t countAndFlagsBits = 41LL;
  v0._object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
}

uint64_t Backup.__allocating_init(sourceConnection:sourceName:targetConnection:targetName:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v13 = swift_allocObject(v6, 40LL, 7LL);
  Backup.init(sourceConnection:sourceName:targetConnection:targetName:)(a1, a2, a3, a4, a5, a6);
  return v13;
}

sqlite3_backup *Backup.pageCount.getter()
{
  unint64_t result = *(sqlite3_backup **)(v0 + 32);
  if (result) {
    return (sqlite3_backup *)sqlite3_backup_pagecount(result);
  }
  return result;
}

sqlite3_backup *Backup.remainingPages.getter()
{
  unint64_t result = *(sqlite3_backup **)(v0 + 32);
  if (result) {
    return (sqlite3_backup *)sqlite3_backup_remaining(result);
  }
  return result;
}

void *Backup.init(sourceConnection:sourceName:targetConnection:targetName:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v7 = v6;
  v6[3] = a1;
  v6[4] = 0LL;
  uint64_t v6[2] = a4;
  pDest = (sqlite3 *)Connection.handle.getter();
  unint64_t v12 = 0xE400000000000000LL;
  uint64_t v13 = 1886217588LL;
  if (a6 != 1)
  {
    uint64_t v13 = a5;
    unint64_t v12 = a6;
  }

  BOOL v14 = a6 == 0;
  if (a6) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = 1852399981LL;
  }
  if (v14) {
    unint64_t v16 = 0xE400000000000000LL;
  }
  else {
    unint64_t v16 = v12;
  }
  Swift::String v17 = (sqlite3 *)Connection.handle.getter();
  unint64_t v18 = 0xE400000000000000LL;
  uint64_t v19 = 1886217588LL;
  if (a3 != 1)
  {
    uint64_t v19 = a2;
    unint64_t v18 = a3;
  }

  if (a3) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 1852399981LL;
  }
  if (a3) {
    unint64_t v21 = v18;
  }
  else {
    unint64_t v21 = 0xE400000000000000LL;
  }
  uint64_t v22 = String.utf8CString.getter(v15, v16);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v23 = String.utf8CString.getter(v20, v21);
  swift_bridgeObjectRelease();
  uint64_t v24 = sqlite3_backup_init(pDest, (const char *)(v22 + 32), v17, (const char *)(v23 + 32));
  swift_release();
  swift_release();
  v7[4] = v24;
  if (v24
    || (uint64_t v25 = (sqlite3 *)Connection.handle.getter(),
        unsigned int v26 = sqlite3_errcode(v25),
        swift_retain(),
        uint64_t v27 = sub_1000F1590(v26),
        !v28))
  {
    swift_release();
    swift_release();
  }

  else
  {
    uint64_t v31 = (uint64_t)v27;
    uint64_t v32 = v28;
    uint64_t v33 = v29;
    uint64_t v34 = v30;
    swift_release();
    unint64_t v35 = sub_100037E20();
    sub_100038AC8((uint64_t)&type metadata for Result, v35);
    *(void *)uint64_t v36 = v31;
    *(void *)(v36 + 8) = v32;
    *(_DWORD *)(v36 + swift_unknownObjectWeakDestroy(v0 + 16) = v33;
    *(void *)(v36 + 24) = v34;
    swift_bridgeObjectRetain();
    uint64_t v37 = swift_retain();
    swift_willThrow(v37);
    swift_release();
    swift_release();
    sub_1000EE038(v31, v32, v33, v34);
  }

  return v7;
}

uint64_t sub_1000EE038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_release(a4);
  }

  return result;
}

void Backup.step(pagesToCopy:)(uint64_t a1)
{
  else {
    int v2 = a1;
  }
  int v3 = sqlite3_backup_step(*(sqlite3_backup **)(v1 + 32), v2);
  if (v3 == 101)
  {
    Backup.finish()();
  }

  else
  {
    unsigned int v4 = v3;
    swift_retain();
    uint64_t v5 = sub_1000F1590(v4);
    if (v6)
    {
      uint64_t v9 = v5;
      uint64_t v10 = v6;
      int v11 = v7;
      uint64_t v12 = v8;
      unint64_t v13 = sub_100037E20();
      uint64_t v14 = sub_100038AC8((uint64_t)&type metadata for Result, v13);
      *(void *)uint64_t v15 = v9;
      *(void *)(v15 + 8) = v10;
      *(_DWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
      *(void *)(v15 + 24) = v12;
      swift_willThrow(v14);
    }
  }

Swift::Void __swiftcall Backup.finish()()
{
  uint64_t v1 = *(sqlite3_backup **)(v0 + 32);
  if (v1)
  {
    sqlite3_backup_finish(v1);
    *(void *)(v0 + 3sub_100096760(v0[56], v0 + 2) = 0LL;
  }

uint64_t Backup.deinit()
{
  return v0;
}

uint64_t Backup.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t type metadata accessor for Backup()
{
  return objc_opt_self(&OBJC_CLASS____TtC17AppIntents_SQLite6Backup);
}

ValueMetadata *type metadata accessor for Backup.DatabaseName()
{
  return &type metadata for Backup.DatabaseName;
}

ValueMetadata *type metadata accessor for Backup.Pages()
{
  return &type metadata for Backup.Pages;
}

NSDateFormatter *dateFormatter.unsafeMutableAddressor()
{
  if (qword_100134608 != -1) {
    swift_once(&qword_100134608, sub_1000EE5F8);
  }
  return &dateFormatter;
}

uint64_t static Data.fromDatatypeValue(_:)()
{
  return sub_1000B028C(v0);
}

void Data.datatypeValue.getter(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_1000EE254()
{
}

void sub_1000EE334(uint64_t *a1@<X8>)
{
  *a1 = static Data.fromDatatypeValue(_:)();
  a1[1] = v2;
  sub_10000ADA8();
}

void sub_1000EE358(void *a1@<X8>)
{
  *a1 = v3;
  sub_10000ADA8();
}

uint64_t static Date.fromDatatypeValue(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_100011A0C();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = sub_100008DB0(&qword_1001332F8);
  __chkstk_darwin(v7);
  sub_100011A0C();
  uint64_t v10 = v9 - v8;
  if (qword_100134608 != -1) {
    swift_once(&qword_100134608, sub_1000EE5F8);
  }
  sub_100084A04((uint64_t)&dateFormatter, (uint64_t)v16);
  int v11 = dateFormatter.super.super.isa;
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = -[objc_class dateFromString:](v11, "dateFromString:", v12);

  if (v13)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v13);

    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
    v14(v10, v6, v2);
    sub_1000EEB44(v10, 0LL);
    uint64_t result = sub_100009E6C(v10, 1LL, v2);
    if ((_DWORD)result != 1) {
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v14)(a1, v10, v2);
    }
  }

  else
  {
    uint64_t result = sub_1000EEB44(v10, 1LL);
  }

  __break(1u);
  return result;
}

uint64_t Date.datatypeValue.getter()
{
  if (qword_100134608 != -1) {
    swift_once(&qword_100134608, sub_1000EE5F8);
  }
  sub_100084A04((uint64_t)&dateFormatter, (uint64_t)v5);
  uint64_t v0 = dateFormatter.super.super.isa;
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v2 = -[objc_class stringFromDate:](v0, "stringFromDate:", isa);

  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  return v3;
}

uint64_t sub_1000EE5CC@<X0>(uint64_t a1@<X8>)
{
  return static Date.fromDatatypeValue(_:)(a1);
}

void sub_1000EE5D8(uint64_t *a1@<X8>)
{
  *a1 = Date.datatypeValue.getter();
  a1[1] = v2;
  sub_10000ADA8();
}

objc_class *sub_1000EE5F8()
{
  uint64_t result = (objc_class *)sub_1000EE614();
  dateFormatter.super.super.Class isa = result;
  return result;
}

id sub_1000EE614()
{
  uint64_t v0 = sub_100008DB0(&qword_100134FE0);
  double v1 = __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Locale(0LL, v1);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v8 = [objc_allocWithZone(NSDateFormatter) init];
  sub_1000EEAE4(0xD000000000000019LL, 0x80000001000FD0A0LL, v8);
  Locale.init(identifier:)(0x4F505F53555F6E65LL, 0xEB00000000584953LL);
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  [v8 setLocale:isa];

  TimeZone.init(secondsFromGMT:)(0LL);
  uint64_t v10 = type metadata accessor for TimeZone(0LL);
  Class v11 = 0LL;
  if (sub_100009E6C((uint64_t)v3, 1LL, v10) != 1)
  {
    Class v11 = TimeZone._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8LL))(v3, v10);
  }

  [v8 setTimeZone:v11];

  return v8;
}

uint64_t static UUID.fromDatatypeValue(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100008DB0((uint64_t *)&unk_100132900);
  __chkstk_darwin(v6);
  sub_100011A0C();
  uint64_t v9 = v8 - v7;
  UUID.init(uuidString:)(a1, a2);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t result = sub_100009E6C(v9, 1LL, v10);
  if ((_DWORD)result != 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(a3, v9, v10);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000EE864@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return static UUID.fromDatatypeValue(_:)(*a1, a1[1], a2);
}

void sub_1000EE870(void *a1@<X8>)
{
  *a1 = UUID.datatypeValue.getter();
  a1[1] = v2;
  sub_10000ADA8();
}

void sub_1000EE890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = __DataStorage._bytes.getter();
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = __DataStorage._offset.getter();
    if (__OFSUB__(a1, v9))
    {
      __break(1u);
      JUMPOUT(0x1000EE964LL);
    }

    uint64_t v10 = v8 + a1 - v9;
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  __DataStorage._length.getter();
  if (v10) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000EE970LL);
}

void sub_1000EE980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __asm { BR              X10 }

uint64_t sub_1000EEA3C()
{
  uint64_t v3 = v2;
  sub_10000A1D8(v1, v0);
  return v3;
}

_UNKNOWN **sub_1000EEACC()
{
  return &protocol witness table for Blob;
}

_UNKNOWN **sub_1000EEAD8()
{
  return &protocol witness table for String;
}

void sub_1000EEAE4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  [a3 setDateFormat:v5];
}

void sub_1000EEB34(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1000EEB44(uint64_t a1, uint64_t a2)
{
  return sub_100009E60(a1, a2, 1LL, v2);
}

uint64_t sub_1000EEB50()
{
  return sub_10000A280(v0, v1);
}

void QueryError.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X10 }

uint64_t sub_1000EEB9C()
{
  v10._uint64_t countAndFlagsBits = v1;
  v10._object = v0;
  String.append(_:)(v10);
  return 0x2068637573206F4ELL;
}

void sub_1000EED10()
{
}

uint64_t sub_1000EED20(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result = a2;
  if (a4 - 1 < 2)
  {
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a3);
  }

  else if (!a4 || a4 == 3)
  {
    return swift_bridgeObjectRetain(a2);
  }

  return result;
}

uint64_t destroy for QueryError(uint64_t a1)
{
  return sub_1000EED80(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t sub_1000EED80(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result = a2;
  if (a4 - 1 < 2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a3);
  }

  else if (!a4 || a4 == 3)
  {
    return swift_bridgeObjectRelease(a2);
  }

  return result;
}

uint64_t initializeWithCopy for QueryError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(_BYTE *)(a2 + 24);
  sub_1000EED20(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for QueryError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(_BYTE *)(a2 + 24);
  sub_1000EED20(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  unsigned __int8 v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_1000EED80(v7, v8, v9, v10);
  return a1;
}

__n128 initializeWithTake for QueryError(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for QueryError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(_BYTE *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  unsigned __int8 v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_1000EED80(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for QueryError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFD && *(_BYTE *)(a1 + 25))
    {
      int v2 = *(_DWORD *)a1 + 252;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
      if (v3 <= 3) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QueryError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 25) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 24) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1000EEF7C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_1000EEF84(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for QueryError()
{
  return &type metadata for QueryError;
}

void sub_1000EEF9C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  v12._uint64_t countAndFlagsBits = v11;
  v12._object = v10;
  String.append(_:)(v12);
}

  ;
}

void sub_1000EEFC8(Swift::String a1)
{
}

uint64_t sub_1000EEFD0( void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v47 = a5;
  uint64_t v48 = a8;
  uint64_t v54 = a1;
  uint64_t v55 = a2;
  uint64_t v46 = *(void *)(a5 - 8);
  ((void (*)(void))__chkstk_darwin)();
  unint64_t v56 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v13 + 8),  v14,  &protocol requirements base descriptor for Sequence);
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v17 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v51 = (char *)&v42 - v18;
  uint64_t v19 = a4;
  __chkstk_darwin(v17);
  uint64_t v50 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = swift_getAssociatedTypeWitness(0LL, a6, a3, &protocol requirements base descriptor for Collection);
  uint64_t v49 = *(void *)(v21 - 8);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v45 = (char *)&v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v42 - v24;
  uint64_t v52 = v8;
  uint64_t v26 = a6;
  uint64_t v27 = dispatch thunk of Collection.count.getter(a3, a6);
  if (!v27) {
    return static Array._allocateUninitialized(_:)(0LL, v19);
  }
  Swift::Int v28 = v27;
  uint64_t v43 = v21;
  uint64_t v29 = v16;
  uint64_t v60 = ContiguousArray.init()(v19);
  uint64_t v53 = type metadata accessor for ContiguousArray(0LL, v19);
  ContiguousArray.reserveCapacity(_:)(v28);
  uint64_t v44 = v25;
  uint64_t v30 = a3;
  uint64_t v31 = v52;
  uint64_t v32 = v30;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v28 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v57 = v26;
    unint64_t v35 = v50;
    uint64_t v34 = v51;
    uint64_t v36 = v44;
    while (1)
    {
      uint64_t v37 = (void (*)(_BYTE *, void))dispatch thunk of Collection.subscript.read(v59, v36, v32, v57);
      (*(void (**)(char *))(v29 + 16))(v34);
      v37(v59, 0LL);
      uint64_t v38 = v58;
      v54(v34, v56);
      if (v38) {
        break;
      }
      uint64_t v58 = 0LL;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v34, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v35, v53);
      dispatch thunk of Collection.formIndex(after:)(v36, v32, v57);
      if (!--v28)
      {
        uint64_t v39 = v49;
        char v40 = v45;
        uint64_t v41 = v43;
        (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v45, v36, v43);
        _expectEnd<A>(of:is:)(v31, v40, v32, v57);
        (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
        return v60;
      }
    }

    (*(void (**)(char *, uint64_t))(v29 + 8))(v34, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v36, v43);
    swift_release(v60);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v46 + 32))(v48, v56, v47);
  }

  return result;
}

uint64_t sub_1000EF30C(void *a1, uint64_t a2)
{
  v3._uint64_t countAndFlagsBits = 40LL;
  v3._object = (void *)0xE100000000000000LL;
  String.append(_:)(v3);
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100008D74(a1, v4);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  uint64_t v7 = v6(v4, v5);
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 41LL;
  v11._object = (void *)0xE100000000000000LL;
  String.append(_:)(v11);
  v6(v4, v5);
  swift_bridgeObjectRelease();
  return a2;
}

uint64_t sub_1000EF3F0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000EF41C
                                                            + 4 * asc_1000F8B20[a1]))( 7561825LL,  0xE300000000000000LL);
}

uint64_t sub_1000EF41C()
{
  return 0x646E756F72LL;
}

uint64_t sub_1000EF430()
{
  return 0x6D6F646E6172LL;
}

uint64_t sub_1000EF444()
{
  return 0x6C626D6F646E6172LL;
}

uint64_t sub_1000EF460()
{
  return 0x626F6C626F72657ALL;
}

uint64_t sub_1000EF478()
{
  return 0x6874676E656CLL;
}

uint64_t sub_1000EF48C()
{
  return 0x7265776F6CLL;
}

uint64_t sub_1000EF4B0()
{
  return 0x6D6972746CLL;
}

uint64_t sub_1000EF4C4()
{
  return 0x6D69727472LL;
}

uint64_t sub_1000EF4DC()
{
  return 1835627124LL;
}

uint64_t sub_1000EF4EC()
{
  return 0x6563616C706572LL;
}

uint64_t sub_1000EF504()
{
  return 0x727473627573LL;
}

uint64_t sub_1000EF518()
{
  return 1162561868LL;
}

uint64_t sub_1000EF528()
{
  return 20041LL;
}

uint64_t sub_1000EF534()
{
  return 1112493127LL;
}

uint64_t sub_1000EF544()
{
  return 0x484354414DLL;
}

uint64_t sub_1000EF558()
{
  return 0x505845474552LL;
}

uint64_t sub_1000EF56C()
{
  return 0x4554414C4C4F43LL;
}

uint64_t sub_1000EF584()
{
  return 0x6C6C756E6669LL;
}

uint64_t sub_1000EF598(void *a1, unsigned __int8 a2)
{
  uint64_t v3 = sub_1000EF3F0(a2);
  uint64_t v5 = sub_1000D4338(a1, v3, v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1000EF604(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3 = sub_1000EF3F0(a2);
  uint64_t v5 = v4;
  sub_1000D3EA4(a1, 8236LL, 0xE200000000000000LL, v8);
  uint64_t v6 = sub_1000D4338(v8, v3, v5);
  swift_bridgeObjectRelease();
  sub_10000AC58(v8);
  return v6;
}

void ExpressionType<>.absoluteValue.getter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = sub_1000F1318(a1, a2, a3, a4, a5, a6, a7, a8, v13, v14[0], v14[1], v14[2], v14[3], v14[4]);
  uint64_t v9 = sub_1000F10A0((uint64_t)v8);
  uint64_t v12 = sub_1000F14D8(v9, v10, v11, (uint64_t)&protocol requirements base descriptor for ExpressionType);
  sub_1000F14B8(v12);
  sub_10000AC58(v14);
  sub_1000E3520();
  sub_1000D9118();
}

void ExpressionType<>.round(_:)(unint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100008DB0(&qword_100131160);
  if ((a2 & 1) != 0)
  {
    uint64_t inited = (__n128 *)swift_initStackObject(v6, v44);
    uint64_t v16 = sub_1000F1204(inited, (__n128)xmmword_1000F5520);
    sub_1000F10B4((uint64_t)v16);
  }

  else
  {
    uint64_t inited = (__n128 *)sub_1000E37E8(v6, v7, v8, v9, v10, v11, v12, v13, v29);
    uint64_t v15 = sub_1000F1204(inited, (__n128)xmmword_1000F57D0);
    sub_1000F10B4((uint64_t)v15);
    inited[6].n128_u64[0] = (unint64_t)&type metadata for Int;
    inited[6].n128_u64[1] = (unint64_t)&protocol witness table for Int;
    inited[4].n128_u64[1] = a1;
  }

  sub_1000D2EDC((uint64_t)inited, v43);
  sub_1000F1508( v17,  v18,  v19,  v20,  v21,  v22,  v23,  v24,  v29,  v30,  v31,  v32,  v33,  v34,  v35,  v36,  v37,  v38,  v39,  v40,  v41,  v42,  v43[0],  v43[1],  v43[2],  v43[3]);
  sub_1000F119C();
  sub_1000D4984(v25, v26, v27, v28, v3);
  sub_10000AC58(v43);
  sub_1000D30C4();
  sub_100058868();
  sub_1000887C8();
  sub_1000F13C4();
}

uint64_t ExpressionType<>.round(_:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  if ((a2 & 1) != 0)
  {
    sub_1000F119C();
    sub_1000D4984(v22, v23, v24, v25, v26);
    sub_1000F1470();
  }

  else
  {
    uint64_t v8 = sub_100008DB0(&qword_100131160);
    uint64_t v15 = sub_1000D8E28(v8, v9, v10, v11, v12, v13, v14);
    *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
    *(void *)(v15 + 56) = a3;
    *(void *)(v15 + 64) = *(void *)(a4 + 8);
    uint64_t v16 = sub_10001AFA8((void *)(v15 + 32));
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16LL))(v16, v4, a3);
    *(void *)(v15 + 96) = &type metadata for Int;
    *(void *)(v15 + 104) = &protocol witness table for Int;
    *(void *)(v15 + 7sub_100096760(v0[56], v0 + 2) = a1;
    sub_1000D2EDC(v15, v28);
    uint64_t v17 = v28[4];
    sub_100008D74(v28, v28[3]);
    sub_1000F119C();
    sub_1000D4984(v18, v19, v20, v21, v17);
    sub_1000F1470();
    sub_10000AC58(v28);
    sub_1000D90D0();
    sub_1000D909C();
  }

  return sub_1000F127C();
}

uint64_t static ExpressionType<>.random()(uint64_t a1, uint64_t a2)
{
  return sub_1000EF604((uint64_t)_swiftEmptyArrayStorage, 2u);
}

void static ExpressionType<>.random(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void static ExpressionType<>.allZeros(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000EF920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t ExpressionType<>.length.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000F1028(a1, a2, a3, a4, sub_1000D4984);
}

uint64_t ExpressionType<>.lowercaseString.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000F104C(a1, a2, 1702326124LL, a4, sub_1000D4984);
}

uint64_t ExpressionType<>.uppercaseString.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000F104C(a1, a2, 1701867637LL, a4, sub_1000D4984);
}

void ExpressionType<>.like(_:escape:)()
{
  if (v7)
  {
    sub_1000F1234(v4, v5, v6, v7);
    sub_1000F1540();
    swift_bridgeObjectRelease();
    v32._uint64_t countAndFlagsBits = sub_1000F1168();
    sub_1000F1584(v32);
    sub_10000AEE8();
    sub_1000F1404((uint64_t)" LIKE ? ESCAPE ?)");
    uint64_t v8 = sub_1000F1300();
    uint64_t v9 = sub_100008DB0(&qword_100131970);
    uint64_t v17 = sub_1000E37E8(v9, v10, v11, v12, v13, v14, v15, v16, v27);
    *(_OWORD *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
    *(void *)(v17 + 56) = type metadata for String;
    *(void *)(v17 + 64) = &protocol witness table for String;
    *(void *)(v17 + 3sub_100096760(v0[56], v0 + 2) = v1;
    *(void *)(v17 + 40) = v0;
    *(void *)(v17 + 96) = type metadata for String;
    *(void *)(v17 + 104) = &protocol witness table for String;
    *(void *)(v17 + 7sub_100096760(v0[56], v0 + 2) = v3;
    *(void *)(v17 + 80) = v2;
    uint64_t v31 = v8;
    sub_10000AFB0();
    sub_1000F1418();
  }

  else
  {
    uint64_t v18 = sub_1000F1480();
    sub_1000F13B0((uint64_t)v18);
    v30[3] = type metadata for String;
    v30[4] = &protocol witness table for String;
    v30[0] = v1;
    v30[1] = v0;
    uint64_t v19 = sub_100008DB0(&qword_100131160);
    uint64_t inited = (__n128 *)swift_initStackObject(v19, v29);
    uint64_t v21 = sub_1000D8C90(inited, (__n128)xmmword_1000F57D0);
    sub_1000D92D4(v21, (uint64_t)&inited[4].n128_i64[1]);
    sub_10000AFB0();
    sub_1000F1014((uint64_t)inited, v28);
    sub_100008D74(v28, v28[3]);
    uint64_t v22 = sub_1000F1390();
    uint64_t v24 = v23;
    uint64_t v26 = v25;
    sub_10000AC58(v28);
    sub_1000F11E0(v22, v24, v26);
    sub_10001BC70();
    swift_bridgeObjectRelease();
    sub_1000D90D0();
    sub_1000D909C();
    sub_10000AC58(v30);
    sub_10000AC58(&v31);
  }

  sub_1000F11C4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73[5];
  char v74;
  uint64_t v75;
  sub_1000F1518();
  if (v4)
  {
    uint64_t v7 = v4;
    uint64_t v8 = v3;
    uint64_t v9 = sub_1000F10F0(v0, v1, v2, v3, v4, v5, v6);
    sub_1000D9154((uint64_t)v9);
    uint64_t v10 = sub_100008DB0((uint64_t *)&unk_1001323C0);
    sub_1000F12F0(v10, (uint64_t)&protocol witness table for Expression<A>);
    uint64_t v11 = sub_100008DB0(&qword_100131160);
    uint64_t v19 = (__n128 *)sub_1000F1568(v11, v12, v13, v14, v15, v16, v17, v18, v49, v51);
    uint64_t v20 = sub_1000D8D78(v19, (__n128)xmmword_1000F57D0);
    sub_1000F12C8(v20, (uint64_t)&v19[4].n128_i64[1]);
    sub_10000AFB0();
    sub_1000119E4();
    sub_10000AE38();
    sub_1000F1014((uint64_t)v19, v73);
    sub_1000F1360(v73);
    uint64_t v22 = v21;
    sub_10000AC58(v73);
    swift_setDeallocating(v19);
    sub_100058868();
    sub_1000F1058();
    sub_1000F1460();
    sub_10001BC70();
    sub_1000F1084();
    uint64_t v23 = sub_100008DB0(&qword_100131970);
    uint64_t v31 = sub_1000E37E8(v23, v24, v25, v26, v27, v28, v29, v30, v50);
    *(_OWORD *)(v31 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5520;
    *(void *)(v31 + 56) = type metadata for String;
    *(void *)(v31 + 64) = &protocol witness table for String;
    *(void *)(v31 + 3sub_100096760(v0[56], v0 + 2) = v8;
    *(void *)(v31 + 40) = v7;
    uint64_t v75 = v22;
    sub_10001BD0C();
    sub_1000F1418();
    sub_10000AEE8();
    sub_10001BC70();
  }

  else
  {
    Swift::String v32 = sub_1000F10F0(v0, v1, v2, v3, 0LL, v5, v6);
    sub_1000D9154((uint64_t)v32);
    uint64_t v33 = sub_100008DB0((uint64_t *)&unk_1001323C0);
    sub_1000F12F0(v33, (uint64_t)&protocol witness table for Expression<A>);
    uint64_t v34 = sub_100008DB0(&qword_100131160);
    uint64_t v42 = (__n128 *)sub_1000F154C( v34,  v35,  v36,  v37,  v38,  v39,  v40,  v41,  v49,  v51,  v52,  v53,  v54,  v55,  v56,  v57,  v58,  v59,  v60,  v61,  v62,  v63,  v64,  v65,  v66,  v67,  v68,  v69,  v70,  v71,  v72,  v73[0],  v73[1],  v73[2],  v73[3],  v73[4],  v74);
    uint64_t v43 = sub_1000D8D78(v42, (__n128)xmmword_1000F57D0);
    sub_1000F12C8(v43, (uint64_t)&v42[4].n128_i64[1]);
    sub_1000119E4();
    sub_10000AE38();
    sub_1000F1014((uint64_t)v42, v73);
    uint64_t v44 = sub_1000D8BEC(v73);
    uint64_t v46 = v45;
    uint64_t v48 = v47;
    sub_10000AC58(v73);
    sub_1000F11E0(v44, v46, v48);
    sub_1000F1124();
    sub_10001BC70();
    sub_1000D8FE0();
    sub_1000D8FCC();
    sub_1000F13EC();
  }

  sub_1000F12B4();
  sub_10000AD58();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  __n128 *inited;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[4];
  _BYTE v29[112];
  void v30[5];
  uint64_t v31;
  Swift::String v32;
  sub_1000F1420();
  if (v7)
  {
    sub_1000F1234(v4, v5, v6, v7);
    sub_1000F1540();
    swift_bridgeObjectRelease();
    v32._uint64_t countAndFlagsBits = sub_1000F1168();
    sub_1000F1584(v32);
    sub_10000AEE8();
    sub_1000F1404((uint64_t)" LIKE ? ESCAPE ?)");
    uint64_t v8 = sub_1000F1300();
    uint64_t v9 = sub_100008DB0(&qword_100131970);
    uint64_t v17 = sub_1000E37E8(v9, v10, v11, v12, v13, v14, v15, v16, v27);
    *(_OWORD *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
    *(void *)(v17 + 56) = type metadata for String;
    *(void *)(v17 + 64) = &protocol witness table for String;
    *(void *)(v17 + 3sub_100096760(v0[56], v0 + 2) = v1;
    *(void *)(v17 + 40) = v0;
    *(void *)(v17 + 96) = type metadata for String;
    *(void *)(v17 + 104) = &protocol witness table for String;
    *(void *)(v17 + 7sub_100096760(v0[56], v0 + 2) = v3;
    *(void *)(v17 + 80) = v2;
    uint64_t v31 = v8;
    sub_10000AFB0();
    sub_1000F1418();
  }

  else
  {
    uint64_t v18 = sub_1000F1480();
    sub_1000F13B0((uint64_t)v18);
    v30[3] = type metadata for String;
    v30[4] = &protocol witness table for String;
    v30[0] = v1;
    v30[1] = v0;
    uint64_t v19 = sub_100008DB0(&qword_100131160);
    uint64_t inited = (__n128 *)swift_initStackObject(v19, v29);
    uint64_t v21 = sub_1000D8C90(inited, (__n128)xmmword_1000F57D0);
    sub_1000D92D4(v21, (uint64_t)&inited[4].n128_i64[1]);
    sub_10000AFB0();
    sub_1000F1014((uint64_t)inited, v28);
    sub_100008D74(v28, v28[3]);
    uint64_t v22 = sub_1000F1390();
    uint64_t v24 = v23;
    uint64_t v26 = v25;
    sub_10000AC58(v28);
    sub_1000F1384(v22, v24, v26);
    sub_10001BC70();
    swift_bridgeObjectRelease();
    sub_1000D90D0();
    sub_1000D909C();
    sub_10000AC58(v30);
    sub_10000AC58(&v31);
  }

  sub_1000F11C4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73[5];
  char v74;
  uint64_t v75;
  sub_1000F1518();
  if (v4)
  {
    uint64_t v7 = v4;
    uint64_t v8 = v3;
    uint64_t v9 = sub_1000F10F0(v0, v1, v2, v3, v4, v5, v6);
    sub_1000D9154((uint64_t)v9);
    uint64_t v10 = sub_100008DB0((uint64_t *)&unk_1001323C0);
    sub_1000F12F0(v10, (uint64_t)&protocol witness table for Expression<A>);
    uint64_t v11 = sub_100008DB0(&qword_100131160);
    uint64_t v19 = (__n128 *)sub_1000F1568(v11, v12, v13, v14, v15, v16, v17, v18, v49, v51);
    uint64_t v20 = sub_1000D8D78(v19, (__n128)xmmword_1000F57D0);
    sub_1000F12C8(v20, (uint64_t)&v19[4].n128_i64[1]);
    sub_10000AFB0();
    sub_1000119E4();
    sub_10000AE38();
    sub_1000F1014((uint64_t)v19, v73);
    sub_1000F1360(v73);
    uint64_t v22 = v21;
    sub_10000AC58(v73);
    swift_setDeallocating(v19);
    sub_100058868();
    sub_1000F1058();
    sub_1000F1460();
    sub_10001BC70();
    sub_1000F1084();
    uint64_t v23 = sub_100008DB0(&qword_100131970);
    uint64_t v31 = sub_1000E37E8(v23, v24, v25, v26, v27, v28, v29, v30, v50);
    *(_OWORD *)(v31 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5520;
    *(void *)(v31 + 56) = type metadata for String;
    *(void *)(v31 + 64) = &protocol witness table for String;
    *(void *)(v31 + 3sub_100096760(v0[56], v0 + 2) = v8;
    *(void *)(v31 + 40) = v7;
    uint64_t v75 = v22;
    sub_10001BD0C();
    sub_1000F1418();
    sub_10000AEE8();
    sub_10001BC70();
  }

  else
  {
    Swift::String v32 = sub_1000F10F0(v0, v1, v2, v3, 0LL, v5, v6);
    sub_1000D9154((uint64_t)v32);
    uint64_t v33 = sub_100008DB0((uint64_t *)&unk_1001323C0);
    sub_1000F12F0(v33, (uint64_t)&protocol witness table for Expression<A>);
    uint64_t v34 = sub_100008DB0(&qword_100131160);
    uint64_t v42 = (__n128 *)sub_1000F154C( v34,  v35,  v36,  v37,  v38,  v39,  v40,  v41,  v49,  v51,  v52,  v53,  v54,  v55,  v56,  v57,  v58,  v59,  v60,  v61,  v62,  v63,  v64,  v65,  v66,  v67,  v68,  v69,  v70,  v71,  v72,  v73[0],  v73[1],  v73[2],  v73[3],  v73[4],  v74);
    uint64_t v43 = sub_1000D8D78(v42, (__n128)xmmword_1000F57D0);
    sub_1000F12C8(v43, (uint64_t)&v42[4].n128_i64[1]);
    sub_1000119E4();
    sub_10000AE38();
    sub_1000F1014((uint64_t)v42, v73);
    uint64_t v44 = sub_1000D8BEC(v73);
    uint64_t v46 = v45;
    uint64_t v48 = v47;
    sub_10000AC58(v73);
    sub_1000F1384(v44, v46, v48);
    sub_1000F1124();
    sub_10001BC70();
    sub_1000D8FE0();
    sub_1000D8FCC();
    sub_1000F13EC();
  }

  sub_1000F12B4();
  sub_10000AD58();
}

void ExpressionType<>.glob(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

{
  sub_1000F1188(a1, a2, a3, a4);
}

void ExpressionType<>.match(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void ExpressionType<>.regexp(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

{
  sub_1000F1138(a1, a2, a3, a4);
}

void ExpressionType<>.collate(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

{
  sub_1000F0478(a1, a2, a3, a4);
}

uint64_t ExpressionType<>.ltrim(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000F103C( a1,  a2,  a3,  29804LL,  a5,  (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000D4984);
}

uint64_t ExpressionType<>.rtrim(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000F103C( a1,  a2,  a3,  29810LL,  a5,  (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000D4984);
}

uint64_t sub_1000EFD5C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (a1)
  {
    uint64_t v13 = sub_100008DB0(&qword_100131160);
    uint64_t v20 = sub_1000D8E28(v13, v14, v15, v16, v17, v18, v19);
    *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57D0;
    *(void *)(v20 + 56) = a2;
    *(void *)(v20 + 64) = *(void *)(a3 + 8);
    uint64_t v21 = sub_10001AFA8((void *)(v20 + 32));
    (*(void (**)(void *, void *, uint64_t))(*(void *)(a2 - 8) + 16LL))(v21, v6, a2);
    v31[0] = a1;
    sub_10001BCF8();
    uint64_t v22 = sub_10001C1C4();
    uint64_t v24 = sub_1000F1570(&qword_100134FF0, v23, (uint64_t)&protocol conformance descriptor for Set<A>);
    uint64_t v25 = String.init<A>(_:)(v31, v22, v24);
    *(void *)(v20 + 96) = type metadata for String;
    *(void *)(v20 + 104) = &protocol witness table for String;
    *(void *)(v20 + 7sub_100096760(v0[56], v0 + 2) = v25;
    *(void *)(v20 + 80) = v26;
    sub_1000D2EDC(v20, v31);
    uint64_t v27 = v32;
    uint64_t v28 = v33;
    uint64_t v29 = sub_100008D74(v31, v32);
    a6(v29, a4, a5, v27, v28);
    sub_1000F12A4();
    sub_10000AC58(v31);
    swift_setDeallocating(v20);
    sub_100058868();
  }

  else
  {
    a6(v6, a4, a5, a2, *(void *)(a3 + 8));
    sub_1000F12A4();
  }

  return sub_1000887C8();
}

void ExpressionType<>.trim(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  if (a1)
  {
    uint64_t v6 = sub_100008DB0(&qword_100131160);
    uint64_t inited = (__n128 *)sub_1000E37E8(v6, v7, v8, v9, v10, v11, v12, v13, v30);
    uint64_t v15 = sub_1000F11EC(inited, (__n128)xmmword_1000F57D0);
    sub_1000F10B4((uint64_t)v15);
    v44[0] = a1;
    sub_10001C064();
    a2 = &qword_100134FE8;
    uint64_t v3 = sub_100008DB0(&qword_100134FE8);
    uint64_t v16 = sub_100046FC4(&qword_100134FF0, &qword_100134FE8, (uint64_t)&protocol conformance descriptor for Set<A>);
    uint64_t v17 = String.init<A>(_:)(v44, v3, v16);
    inited[6].n128_u64[0] = (unint64_t)type metadata for String;
    inited[6].n128_u64[1] = (unint64_t)&protocol witness table for String;
    inited[4].n128_u64[1] = v17;
    inited[5].n128_u64[0] = v18;
  }

  else
  {
    uint64_t v19 = sub_100008DB0(&qword_100131160);
    uint64_t inited = (__n128 *)swift_initStackObject(v19, v45);
    uint64_t v20 = sub_1000F11EC(inited, (__n128)xmmword_1000F5520);
    sub_1000F10B4((uint64_t)v20);
  }

  sub_1000D2EDC((uint64_t)inited, v44);
  uint64_t v29 = sub_1000F1508( v21,  v22,  v23,  v24,  v25,  v26,  v27,  v28,  v30,  v31,  v32,  v33,  v34,  v35,  v36,  v37,  v38,  v39,  v40,  v41,  v42,  v43,  v44[0],  v44[1],  v44[2],  v44[3]);
  sub_1000D4984(v29, 1835627124LL, 0xE400000000000000LL, a2, v3);
  sub_10000AC58(v44);
  sub_1000D30C4();
  sub_100058868();
  sub_1000887C8();
  sub_1000F13C4();
}

uint64_t ExpressionType<>.replace(_:with:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000F0570( a1,  a2,  a3,  a4,  a5,  a6,  (void (*)(void *, uint64_t, unint64_t, uint64_t, uint64_t))sub_1000D4984);
}

uint64_t ExpressionType<>.substring(_:length:)( unint64_t a1, unint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  return sub_1000F069C( a1,  a2,  a3,  a4,  a5,  (void (*)(void *, uint64_t, unint64_t, uint64_t, uint64_t))sub_1000D4984);
}

uint64_t ExpressionType<>.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000F07C0( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))ExpressionType<>.substring(_:length:));
}

uint64_t sub_1000F0008( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, void))
{
  return a5(v5, a3, a4, a1, *(void *)(a2 + 8));
}

void sub_1000F039C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = sub_1000F14E8(a1, a2, a3, a4);
  sub_1000F10A0((uint64_t)v10);
  v19[22] = (uint64_t)type metadata for String;
  v19[23] = (uint64_t)&protocol witness table for String;
  v19[19] = a1;
  v19[20] = a2;
  uint64_t v11 = sub_100008DB0(&qword_100131160);
  unint64_t v18 = (__n128 *)sub_1000D8E28(v11, v12, v13, v14, v15, v16, v17);
  sub_1000D8E04(v18, (__n128)xmmword_1000F57D0);
  sub_1000D91C4();
  sub_10001BD0C();
  sub_1000D3EA4((uint64_t)v18, a5, a6, v19);
  sub_1000D8C6C(v19);
  sub_10000AC58(v19);
  sub_1000F1330();
  sub_1000D8DB8();
  sub_10001BC70();
  sub_1000D90D0();
  sub_1000D909C();
  sub_1000F1490();
  sub_1000D8D3C();
}

void sub_1000F0478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_1000F14E8(a1, a2, a3, a4);
  sub_1000F10A0((uint64_t)v6);
  v15[22] = (uint64_t)&type metadata for Collation;
  v15[23] = (uint64_t)&protocol witness table for Collation;
  v15[19] = a1;
  v15[20] = a2;
  uint64_t v7 = sub_100008DB0(&qword_100131160);
  uint64_t v14 = (__n128 *)sub_1000D8E28(v7, v8, v9, v10, v11, v12, v13);
  sub_1000D8E04(v14, (__n128)xmmword_1000F57D0);
  sub_1000D91C4();
  sub_1000D2C00(a1, a2);
  sub_1000D3EA4((uint64_t)v14, 0x4554414C4C4F4320LL, 0xE900000000000020LL, v15);
  sub_1000D8C6C(v15);
  sub_10000AC58(v15);
  sub_1000F1330();
  sub_1000D8DB8();
  sub_10001BC70();
  sub_1000D90D0();
  sub_1000D909C();
  sub_1000F1490();
  sub_1000D8D3C();
}

uint64_t ExpressionType<>.trim(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EFD5C( a1,  a2,  a3,  1835627124LL,  0xE400000000000000LL,  (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000D4984);
}

uint64_t sub_1000F0570( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = v7;
  uint64_t v16 = sub_100008DB0(&qword_100131160);
  uint64_t inited = swift_initStackObject(v16, v26);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F57E0;
  *(void *)(inited + 56) = a5;
  *(void *)(inited + 64) = *(void *)(a6 + 8);
  unint64_t v18 = sub_10001AFA8((void *)(inited + 32));
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16LL))(v18, v9, a5);
  *(void *)(inited + 96) = type metadata for String;
  *(void *)(inited + 104) = &protocol witness table for String;
  *(void *)(inited + 7sub_100096760(v0[56], v0 + 2) = a1;
  *(void *)(inited + 80) = a2;
  *(void *)(inited + sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = type metadata for String;
  *(void *)(inited + 144) = &protocol witness table for String;
  *(void *)(inited + 11sub_100096760(v0[56], v0 + 2) = a3;
  *(void *)(inited + 120) = a4;
  swift_bridgeObjectRetain();
  sub_10001BD0C();
  sub_1000D2EDC(inited, v23);
  uint64_t v19 = v24;
  uint64_t v20 = v25;
  uint64_t v21 = sub_100008D74(v23, v24);
  a7(v21, 0x6563616C706572LL, 0xE700000000000000LL, v19, v20);
  sub_1000F12A4();
  sub_10000AC58(v23);
  sub_1000D30C4();
  sub_100058868();
  return sub_1000887C8();
}

uint64_t sub_1000F069C( unint64_t a1, unint64_t a2, char a3, uint64_t a4, uint64_t a5, void (*a6)(void *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = sub_100008DB0(&qword_100131160);
  if ((a3 & 1) != 0)
  {
    uint64_t inited = (__n128 *)swift_initStackObject(v10, v29);
    uint64_t v20 = sub_1000F121C(inited, (__n128)xmmword_1000F57D0);
    sub_1000F13D8((uint64_t)v20);
    inited[6].n128_u64[0] = (unint64_t)&type metadata for Int;
    inited[6].n128_u64[1] = (unint64_t)&protocol witness table for Int;
    inited[4].n128_u64[1] = a1;
  }

  else
  {
    uint64_t inited = (__n128 *)sub_1000E37E8(v10, v11, v12, v13, v14, v15, v16, v17, v25);
    uint64_t v19 = sub_1000F121C(inited, (__n128)xmmword_1000F57E0);
    sub_1000F13D8((uint64_t)v19);
    inited[6].n128_u64[0] = (unint64_t)&type metadata for Int;
    inited[6].n128_u64[1] = (unint64_t)&protocol witness table for Int;
    inited[4].n128_u64[1] = a1;
    inited[8].n128_u64[1] = (unint64_t)&type metadata for Int;
    inited[9].n128_u64[0] = (unint64_t)&protocol witness table for Int;
    inited[7].n128_u64[0] = a2;
  }

  sub_1000D2EDC((uint64_t)inited, v26);
  uint64_t v21 = v27;
  uint64_t v22 = v28;
  uint64_t v23 = sub_100008D74(v26, v27);
  a6(v23, 0x727473627573LL, 0xE600000000000000LL, v21, v22);
  sub_1000F1470();
  sub_10000AC58(v26);
  sub_1000D90D0();
  sub_1000D909C();
  return sub_1000F127C();
}

uint64_t sub_1000F07C0( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, void, uint64_t, uint64_t))
{
  BOOL v5 = __OFSUB__(a2, result);
  uint64_t v6 = a2 - result;
  if (!v5) {
    return a5(result, v6, 0LL, a3, a4);
  }
  __break(1u);
  return result;
}

void Collection<>.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = sub_1000F10C8(a1, a2, a3, a4, a5);
  uint64_t v48 = sub_1000F14C8(v8);
  sub_10001C1C4();
  uint64_t v10 = sub_1000F1570((unint64_t *)&qword_100131990, v9, (uint64_t)&protocol conformance descriptor for [A]);
  sub_1000F1348(v10);
  uint64_t v11 = sub_1000F1530();
  uint64_t v13 = sub_1000F1578(v11, *(void *)(v5 + 8), v12, (uint64_t)&protocol requirements base descriptor for Sequence);
  uint64_t v17 = sub_1000D2CB0(v13, v14, v15, v16);
  sub_1000F1100(v17);
  sub_10001BD0C();
  sub_1000F14F8();
  swift_bridgeObjectRelease();
  sub_1000EDD7C();
  sub_1000F1554();
  uint64_t v18 = sub_100008DB0(&qword_100131978);
  uint64_t v23 = sub_1000F128C( (void (*)(char *, char *))sub_1000F0FE0,  v19,  v20,  v18,  (uint64_t)&type metadata for Never,  v21,  (uint64_t)&protocol witness table for Never,  v22,  v39,  v40);
  uint64_t v46 = sub_100008DB0(&qword_100134618);
  uint64_t v47 = &protocol witness table for Expression<A>;
  uint64_t v43 = v6;
  uint64_t v44 = v7;
  uint64_t v45 = v23;
  uint64_t v24 = sub_100008DB0(&qword_100131160);
  uint64_t inited = (__n128 *)swift_initStackObject(v24, v42);
  uint64_t v26 = sub_1000D8C90(inited, (__n128)xmmword_1000F57D0);
  uint64_t v27 = sub_1000D92D4(v26, (uint64_t)&inited[4].n128_i64[1]);
  sub_1000F1264(v27, v28, v29, v30, v31, v32, v33);
  uint64_t v34 = sub_1000D8BEC(v41);
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  sub_10000AC58(v41);
  sub_1000F11E0(v34, v36, v38);
  sub_10001BC70();
  swift_bridgeObjectRelease();
  sub_1000D8FE0();
  sub_1000D8FCC();
  sub_1000F1438();
  sub_1000D329C();
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 *inited;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void v42[3];
  _BYTE v43[120];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _UNKNOWN **v48;
  void *v49;
  uint64_t v8 = sub_1000F10C8(a1, a2, a3, a4, a5);
  uint64_t v49 = sub_1000F14C8(v8);
  sub_10001C1C4();
  uint64_t v10 = sub_1000F1570((unint64_t *)&qword_100131990, v9, (uint64_t)&protocol conformance descriptor for [A]);
  sub_1000F1348(v10);
  uint64_t v11 = sub_1000F1530();
  uint64_t v13 = sub_1000F1578(v11, *(void *)(v5 + 8), v12, (uint64_t)&protocol requirements base descriptor for Sequence);
  uint64_t v14 = type metadata accessor for Optional(255LL, v13);
  uint64_t v18 = sub_1000D2CB0(v14, v15, v16, v17);
  sub_1000F1100(v18);
  sub_10001BD0C();
  sub_1000F14F8();
  swift_bridgeObjectRelease();
  sub_1000EDD7C();
  sub_1000F1554();
  uint64_t v19 = sub_100008DB0(&qword_100131978);
  uint64_t v24 = sub_1000F128C( (void (*)(char *, char *))sub_1000F1000,  v20,  v21,  v19,  (uint64_t)&type metadata for Never,  v22,  (uint64_t)&protocol witness table for Never,  v23,  v40,  v41);
  uint64_t v47 = sub_100008DB0(&qword_100134618);
  uint64_t v48 = &protocol witness table for Expression<A>;
  uint64_t v44 = v6;
  uint64_t v45 = v7;
  uint64_t v46 = v24;
  uint64_t v25 = sub_100008DB0(&qword_100131160);
  uint64_t inited = (__n128 *)swift_initStackObject(v25, v43);
  uint64_t v27 = sub_1000D8C90(inited, (__n128)xmmword_1000F57D0);
  uint64_t v28 = sub_1000D92D4(v27, (uint64_t)&inited[4].n128_i64[1]);
  sub_1000F1264(v28, v29, v30, v31, v32, v33, v34);
  uint64_t v35 = sub_1000D8BEC(v42);
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  sub_10000AC58(v42);
  sub_1000F1384(v35, v37, v39);
  sub_10001BC70();
  swift_bridgeObjectRelease();
  sub_1000D8FE0();
  sub_1000D8FCC();
  sub_1000F1438();
  sub_1000D329C();
}

uint64_t sub_1000F0ACC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 56);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(a2 + 8),  a1,  &protocol requirements base descriptor for Sequence);
  uint64_t v8 = swift_getAssociatedTypeWitness(0LL, a3, AssociatedTypeWitness, &protocol requirements base descriptor for Value);
  a4[3] = v8;
  a4[4] = swift_getAssociatedConformanceWitness( a3,  AssociatedTypeWitness,  v8,  &protocol requirements base descriptor for Value,  &associated conformance descriptor for Value.Value.Datatype: Binding);
  sub_10001AFA8(a4);
  uint64_t v9 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  return v6(v9, a3);
}

void String.like(_:escape:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a5)
  {
    BOOL v85 = type metadata for String;
    uint64_t v86 = &protocol witness table for String;
    uint64_t v83 = a6;
    uint64_t v84 = a7;
    uint64_t v81 = sub_100008DB0((uint64_t *)&unk_1001323C0);
    uint64_t v82 = &protocol witness table for Expression<A>;
    uint64_t v78 = a1;
    uint64_t v79 = a2;
    uint64_t v80 = a3;
    uint64_t v12 = sub_100008DB0(&qword_100131160);
    uint64_t v20 = (__n128 *)sub_1000F1568(v12, v13, v14, v15, v16, v17, v18, v19, v52, v54);
    uint64_t v21 = sub_1000D8D78(v20, (__n128)xmmword_1000F57D0);
    sub_1000F12C8(v21, (uint64_t)&v20[4].n128_i64[1]);
    sub_10000AFB0();
    sub_10001C064();
    sub_1000119E4();
    sub_10000AE38();
    sub_1000F1014((uint64_t)v20, v76);
    uint64_t v22 = sub_1000D8C6C(v76);
    uint64_t v24 = v23;
    uint64_t v26 = v25;
    sub_10000AC58(v76);
    swift_setDeallocating(v20);
    sub_100058868();
    sub_1000F1058();
    v27._uint64_t countAndFlagsBits = v22;
    v27._object = v24;
    String.append(_:)(v27);
    sub_10001BC70();
    sub_1000F1084();
    uint64_t v28 = sub_100008DB0(&qword_100131970);
    uint64_t v36 = sub_1000E37E8(v28, v29, v30, v31, v32, v33, v34, v35, v53);
    *(_OWORD *)(v36 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000F5520;
    *(void *)(v36 + 56) = type metadata for String;
    *(void *)(v36 + 64) = &protocol witness table for String;
    *(void *)(v36 + 3sub_100096760(v0[56], v0 + 2) = a4;
    *(void *)(v36 + 40) = a5;
    uint64_t v83 = v26;
    sub_10001BD0C();
    sub_1000F1418();
    sub_10000AEE8();
    sub_10001BC70();
  }

  else
  {
    BOOL v85 = type metadata for String;
    uint64_t v86 = &protocol witness table for String;
    uint64_t v83 = a6;
    uint64_t v84 = a7;
    uint64_t v81 = sub_100008DB0((uint64_t *)&unk_1001323C0);
    uint64_t v82 = &protocol witness table for Expression<A>;
    uint64_t v78 = a1;
    uint64_t v79 = a2;
    uint64_t v80 = a3;
    uint64_t v37 = sub_100008DB0(&qword_100131160);
    uint64_t v45 = (__n128 *)sub_1000F154C( v37,  v38,  v39,  v40,  v41,  v42,  v43,  v44,  v52,  v54,  v55,  v56,  v57,  v58,  v59,  v60,  v61,  v62,  v63,  v64,  v65,  v66,  v67,  v68,  v69,  v70,  v71,  v72,  v73,  v74,  v75,  v76[0],  v76[1],  v76[2],  v76[3],  v76[4],  v77);
    uint64_t v46 = sub_1000D8D78(v45, (__n128)xmmword_1000F57D0);
    sub_1000F12C8(v46, (uint64_t)&v45[4].n128_i64[1]);
    sub_10001C064();
    sub_1000119E4();
    sub_10000AE38();
    sub_1000F1014((uint64_t)v45, v76);
    uint64_t v47 = sub_1000D8BEC(v76);
    uint64_t v49 = v48;
    uint64_t v51 = v50;
    sub_10000AC58(v76);
    sub_1000F11E0(v47, v49, v51);
    sub_1000F1124();
    sub_10001BC70();
    sub_1000D8FE0();
    sub_1000D8FCC();
    sub_1000F13EC();
  }

  sub_1000F12B4();
  sub_10000AD58();
}

void ?? infix<A>(_:_:)( unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_100008DB0(&qword_100131160);
  uint64_t v20 = (__n128 *)sub_1000E37E8(v12, v13, v14, v15, v16, v17, v18, v19, v26);
  uint64_t v21 = sub_1000F11B4(v20, (__n128)xmmword_1000F57D0);
  v20[3].n128_u64[1] = sub_1000D2CB0(v21, v22, v23, v24);
  v20[4].n128_u64[0] = (unint64_t)&protocol witness table for Expression<A>;
  v20[2].n128_u64[0] = a1;
  v20[2].n128_u64[1] = a2;
  v20[3].n128_u64[0] = a3;
  v20[6].n128_u64[0] = a5;
  v20[6].n128_u64[1] = *(void *)(a6 + 8);
  uint64_t v25 = sub_10001AFA8(&v20[4].n128_u64[1]);
  (*(void (**)(void *, uint64_t, unint64_t))(*(void *)(a5 - 8) + 16LL))(v25, a4, a5);
  sub_10001BD0C();
  swift_bridgeObjectRetain();
  sub_1000F13A4((uint64_t)v20);
  sub_1000F12A4();
  sub_1000D30C4();
  sub_100058868();
  sub_1000887C8();
  sub_1000F124C();
}

uint64_t ?? infix<A>(_:_:)()
{
  uint64_t v7 = sub_100008DB0(&qword_100131160);
  uint64_t v15 = (__n128 *)sub_1000E37E8(v7, v8, v9, v10, v11, v12, v13, v14, v23);
  uint64_t v16 = sub_1000F11B4(v15, (__n128)xmmword_1000F57D0);
  v15[3].n128_u64[1] = sub_1000D2CB0(v16, v17, v18, v19);
  v15[4].n128_u64[0] = (unint64_t)&protocol witness table for Expression<A>;
  v15[2].n128_u64[0] = v6;
  v15[2].n128_u64[1] = v5;
  v15[3].n128_u64[0] = v4;
  v15[6].n128_u64[0] = type metadata accessor for Expression(0LL, v0, v20, v21);
  v15[6].n128_u64[1] = (unint64_t)&protocol witness table for Expression<A>;
  v15[4].n128_u64[1] = v3;
  v15[5].n128_u64[0] = v2;
  v15[5].n128_u64[1] = v1;
  sub_10001BCF8();
  sub_10001BD0C();
  sub_1000119E4();
  sub_10000AE38();
  sub_1000F13A4((uint64_t)v15);
  sub_1000D90D0();
  sub_1000D909C();
  return sub_1000F127C();
}

void ?? infix<A>(_:_:)()
{
  uint64_t v6 = sub_100008DB0(&qword_100131160);
  uint64_t v14 = (__n128 *)sub_1000E37E8(v6, v7, v8, v9, v10, v11, v12, v13, v20);
  uint64_t v15 = sub_1000F11B4(v14, (__n128)xmmword_1000F57D0);
  uint64_t v19 = sub_1000D2CB0(v15, v16, v17, v18);
  v14[2].n128_u64[0] = v5;
  v14[2].n128_u64[1] = v4;
  v14[3].n128_u64[0] = v3;
  v14[3].n128_u64[1] = v19;
  v14[6].n128_u64[0] = v19;
  v14[6].n128_u64[1] = (unint64_t)&protocol witness table for Expression<A>;
  v14[4].n128_u64[0] = (unint64_t)&protocol witness table for Expression<A>;
  v14[4].n128_u64[1] = v2;
  v14[5].n128_u64[0] = v1;
  v14[5].n128_u64[1] = v0;
  sub_10001BCF8();
  sub_10001BD0C();
  sub_1000119E4();
  sub_10000AE38();
  sub_1000F13A4((uint64_t)v14);
  sub_1000D90D0();
  sub_1000D909C();
  sub_1000F127C();
  sub_1000F124C();
}

uint64_t sub_1000F0FE0@<X0>(void *a1@<X8>)
{
  return sub_1000F0ACC(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_1000F1000@<X0>(void *a1@<X8>)
{
  return sub_1000F0FE0(a1);
}

void sub_1000F1014(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_1000F1028( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, void))
{
  return sub_1000F0008(a1, a2, 0x6874676E656CLL, 0xE600000000000000LL, a5);
}

uint64_t sub_1000F103C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  return sub_1000EFD5C(a1, a2, a3, a4 & 0xFFFF00000000FFFFLL | 0x6D69720000LL, 0xE500000000000000LL, a6);
}

uint64_t sub_1000F104C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, void))
{
  return sub_1000F0008(a1, a2, a3 & 0xFFFF0000FFFFFFFFLL | 0x7200000000LL, 0xE500000000000000LL, a5);
}

double sub_1000F1058()
{
  *(void *)(v0 - 120) = 40LL;
  *(void *)(v0 - 11sub_100096760(v0[56], v0 + 2) = 0xE100000000000000LL;
  *(void *)&double result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

void sub_1000F1084()
{
  v0._uint64_t countAndFlagsBits = 0x2045504143534520LL;
  v0._object = (void *)0xEA0000000000293FLL;
  String.append(_:)(v0);
}

uint64_t sub_1000F10A0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(a1, v1, v2);
}

uint64_t sub_1000F10B4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL))(a1, v2, v1);
}

uint64_t sub_1000F10C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return dispatch thunk of Collection.count.getter(a4, a5);
}

void *sub_1000F10F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = *(void *)(a7 + 8);
  *(void *)(v8 - 96) = v7;
  *(void *)(v8 - 88) = v9;
  return sub_10001AFA8((void *)(v8 - 120));
}

uint64_t sub_1000F1100(uint64_t a1)
{
  *(void *)(v5 - 104) = a1;
  *(void *)(v5 - 96) = v4;
  *(void *)(v5 - 128) = v3;
  *(void *)(v5 - 120) = v2;
  *(void *)(v5 - 11sub_100096760(v0[56], v0 + 2) = v1;
  *(void *)(v5 - 168) = 40LL;
  *(void *)(v5 - 160) = 0xE100000000000000LL;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_1000F1124()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_1000F1138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1000F1150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1000F1168()
{
  *(void *)(v2 - 128) = 40LL;
  *(void *)(v2 - 120) = 0xE100000000000000LL;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 24))(v0, v1);
}

void sub_1000F1188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

  ;
}

uint64_t sub_1000F11B4(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return type metadata accessor for Optional(255LL, v2);
}

  ;
}

uint64_t sub_1000F11E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D8AF8(a1, a2, a3, 0LL, 0xE000000000000000LL);
}

void *sub_1000F11EC(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  *(void *)(v3 + 56) = v2;
  *(void *)(v3 + 64) = *(void *)(v4 + 8);
  return sub_10001AFA8((__n128 *)a1[2].n128_u64);
}

void *sub_1000F1204(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  *(void *)(v3 + 56) = v2;
  *(void *)(v3 + 64) = *(void *)(v4 + 8);
  return sub_10001AFA8((__n128 *)a1[2].n128_u64);
}

void *sub_1000F121C(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  *(void *)(v2 + 56) = v3;
  *(void *)(v2 + 64) = *(void *)(v4 + 8);
  return sub_10001AFA8((__n128 *)a1[2].n128_u64);
}

uint64_t sub_1000F1234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 - 128) = 0LL;
  *(void *)(v4 - 120) = 0xE000000000000000LL;
  return swift_bridgeObjectRetain(a4);
}

  ;
}

void sub_1000F1264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000F127C()
{
  return v0;
}

uint64_t sub_1000F128C( void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  return sub_1000EEFD0(a1, (uint64_t)va, v11, a4, a5, v10, a7, a8);
}

  ;
}

uint64_t sub_1000F12B4()
{
  return v0;
}

uint64_t sub_1000F12C8(uint64_t a1, uint64_t a2)
{
  return sub_100008F24(v2 - 160, a2);
}

  ;
}

uint64_t sub_1000F12F0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v5 - sub_100009EEC((__int128 *)(v0 - 176), v0 - 136) = result;
  *(void *)(v5 - 128) = a2;
  *(void *)(v5 - 160) = v4;
  *(void *)(v5 - 15sub_100096760(v0[56], v0 + 2) = v3;
  *(void *)(v5 - 144) = v2;
  return result;
}

uint64_t sub_1000F1300()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 32))(v0, v1);
}

void *sub_1000F1318( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14 = *(void *)(a2 + 8);
  a13 = a1;
  a14 = v14;
  return sub_10001AFA8(&a10);
}

uint64_t sub_1000F1330()
{
  return v0(v1, v2, v3, 0LL, 0xE000000000000000LL);
}

uint64_t sub_1000F1348(uint64_t a1)
{
  return BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v1, a1);
}

uint64_t sub_1000F1360(void *a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t sub_1000F1384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D8B04(a1, a2, a3, 0LL, 0xE000000000000000LL);
}

uint64_t sub_1000F1390()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v1);
}

uint64_t sub_1000F13A4(uint64_t a1)
{
  return sub_1000EF604(a1, 0x13u);
}

uint64_t sub_1000F13B0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL))(a1, v2, v1);
}

  ;
}

uint64_t sub_1000F13D8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL))(a1, v2, v1);
}

uint64_t sub_1000F13EC()
{
  return sub_10000AC58((void *)(v0 - 120));
}

void sub_1000F1404(uint64_t a1@<X8>)
{
  v1._object = (void *)((a1 - 32) | 0x8000000000000000LL);
  v1._uint64_t countAndFlagsBits = 0xD000000000000011LL;
  String.append(_:)(v1);
}

void sub_1000F1418()
{
}

  ;
}

uint64_t sub_1000F1438()
{
  return v0;
}

void sub_1000F1460()
{
  v2._uint64_t countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

  ;
}

void *sub_1000F1480()
{
  uint64_t v3 = *(void *)(v1 + 8);
  *(void *)(v2 - 104) = v0;
  *(void *)(v2 - 96) = v3;
  return sub_10001AFA8((void *)(v2 - 128));
}

uint64_t sub_1000F1490()
{
  return v0;
}

uint64_t sub_1000F14B8(uint64_t a1, ...)
{
  return sub_1000EF598((uint64_t *)va, 0);
}

void *sub_1000F14C8(uint64_t a1)
{
  return sub_1000EDA70((void *)0x3F, 0xE100000000000000LL, a1);
}

uint64_t sub_1000F14D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_getAssociatedTypeWitness(0LL, v4, v5, a4);
}

void *sub_1000F14E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + 8);
  *(void *)(v4 - 80) = a3;
  *(void *)(v4 - 7sub_100096760(v0[56], v0 + 2) = v5;
  return sub_10001AFA8((void *)(v4 - 104));
}

void sub_1000F14F8()
{
  v2._uint64_t countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

void *sub_1000F1508( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  return sub_100008D74(&a23, a26);
}

  ;
}

uint64_t sub_1000F1530()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_1000F1540()
{
}

uint64_t sub_1000F154C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37)
{
  return swift_initStackObject(a1, &a37);
}

  ;
}

uint64_t sub_1000F1568( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  return swift_initStackObject(a1, va);
}

uint64_t sub_1000F1570(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_100046FC4(a1, v3, a3);
}

uint64_t sub_1000F1578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_getAssociatedTypeWitness(255LL, a2, v4, a4);
}

void sub_1000F1584(Swift::String a1)
{
}

const char *sub_1000F1590(unsigned int a1)
{
  if (qword_100134610 != -1) {
    swift_once(&qword_100134610, sub_1000F1658);
  }
  sub_1000F167C(a1, qword_100134FF8);
  if ((v2 & 1) != 0)
  {
    swift_release();
    swift_release();
    return 0LL;
  }

  uint64_t v4 = (sqlite3 *)Connection.handle.getter();
  double result = sqlite3_errmsg(v4);
  if (result)
  {
    uint64_t v3 = String.init(cString:)(result);
    swift_release();
    return (const char *)v3;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000F1658()
{
  uint64_t result = sub_1000F19C4((uint64_t)&off_1001273C0);
  qword_100134FF8 = result;
  return result;
}

void sub_1000F167C(unsigned int a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    unint64_t v4 = static Hasher._hash(seed:bytes:count:)(*(void *)(a2 + 40), a1, 4LL) & ~(-1LL << *(_BYTE *)(a2 + 32));
    if (((*(void *)(a2 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0
      && *(_DWORD *)(*(void *)(a2 + 48) + 4 * v4) != a1)
    {
      sub_1000F1B00();
      if ((v7 & 1) != 0)
      {
        do
        {
          if (*(_DWORD *)(v5 + 4 * v6) == a1) {
            break;
          }
          sub_1000F1B00();
        }

        while ((v8 & 1) != 0);
      }
    }
  }

uint64_t Result.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_retain_n(a4, 2LL);
    _StringGuts.grow(_:)(18LL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v11 = a1;
    v6._uint64_t countAndFlagsBits = 10272LL;
    v6._object = (void *)0xE200000000000000LL;
    String.append(_:)(v6);
    v12._uint64_t countAndFlagsBits = (uint64_t)Statement.description.getter(v7);
    sub_100034194(v12);
    swift_bridgeObjectRelease();
    v8._uint64_t countAndFlagsBits = 0x3A65646F63282029LL;
    v8._object = (void *)0xE900000000000020LL;
    String.append(_:)(v8);
    v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
    sub_100034194(v13);
    swift_bridgeObjectRelease();
    sub_1000F1B1C();
    swift_release_n(a4, 2LL);
  }

  else
  {
    uint64_t v11 = a1;
    swift_bridgeObjectRetain();
    v9._uint64_t countAndFlagsBits = 0x203A65646F632820LL;
    v9._object = (void *)0xE800000000000000LL;
    String.append(_:)(v9);
    v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
    sub_100034194(v14);
    swift_bridgeObjectRelease();
    sub_1000F1B1C();
  }

  return v11;
}

uint64_t sub_1000F1880()
{
  return Result.description.getter(*(void *)v0, *(void *)(v0 + 8), *(unsigned int *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t destroy for Result(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 24));
}

uint64_t initializeWithCopy for Result(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t assignWithCopy for Result(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v7;
  swift_retain(v7);
  swift_release(v6);
  return a1;
}

uint64_t assignWithTake for Result(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release(v6);
  return a1;
}

ValueMetadata *type metadata accessor for Result()
{
  return &type metadata for Result;
}

uint64_t sub_1000F19C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptySetSingleton;
    goto LABEL_13;
  }

  sub_100008DB0(&qword_100135000);
  uint64_t result = static _SetStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)result;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_13:
    swift_bridgeObjectRelease(a1);
    return (uint64_t)v4;
  }

  unint64_t v6 = 0LL;
  uint64_t v7 = result + 56;
  uint64_t v8 = *(void *)(result + 40);
  uint64_t v9 = ~(-1LL << *(_BYTE *)(result + 32));
  while (v6 < *(void *)(a1 + 16))
  {
    unsigned int v10 = *(_DWORD *)(a1 + 32 + 4 * v6);
    uint64_t result = static Hasher._hash(seed:bytes:count:)(v8, v10, 4LL);
    unint64_t v11 = result & v9;
    unint64_t v12 = (result & (unint64_t)v9) >> 6;
    uint64_t v13 = *(void *)(v7 + 8 * v12);
    uint64_t v14 = 1LL << (result & v9);
    uint64_t v15 = v4[6];
    if ((v14 & v13) != 0)
    {
      while (*(_DWORD *)(v15 + 4 * v11) != v10)
      {
        unint64_t v11 = (v11 + 1) & v9;
        unint64_t v12 = v11 >> 6;
        uint64_t v13 = *(void *)(v7 + 8 * (v11 >> 6));
        uint64_t v14 = 1LL << v11;
        if ((v13 & (1LL << v11)) == 0) {
          goto LABEL_8;
        }
      }
    }

    else
    {
LABEL_8:
      *(void *)(v7 + 8 * v1sub_100096760(v0[56], v0 + 2) = v14 | v13;
      *(_DWORD *)(v15 + 4 * sub_100026CB8(v10 + v12, (uint64_t)va, v11) = v10;
      uint64_t v16 = v4[2];
      BOOL v17 = __OFADD__(v16, 1LL);
      uint64_t v18 = v16 + 1;
      if (v17) {
        goto LABEL_15;
      }
      v4[2] = v18;
    }

    if (++v6 == v5) {
      goto LABEL_13;
    }
  }

  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

  ;
}

void sub_1000F1B1C()
{
  v0._uint64_t countAndFlagsBits = 41LL;
  v0._object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
}

uint64_t Collation.expression.getter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  switch(a2)
  {
    case 0uLL:
      return 0x5952414E4942LL;
    case 1uLL:
      return 0x455341434F4ELL;
    case 2uLL:
      return 0x4D49525452LL;
  }

  return sub_1000F1CE8(a1, a2, a3, a2);
}

uint64_t Collation.description.getter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  switch(a2)
  {
    case 0uLL:
      return 0x5952414E4942LL;
    case 1uLL:
      return 0x455341434F4ELL;
    case 2uLL:
      return 0x4D49525452LL;
  }

  return sub_1000F1CE8(a1, a2, a3, a2);
}

uint64_t sub_1000F1C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Collation.expression.getter(*(void *)v3, *(void *)(v3 + 8), a3);
}

uint64_t sub_1000F1C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Collation.description.getter(*(void *)v3, *(void *)(v3 + 8), a3);
}

uint64_t getEnumTagSinglePayload for Collation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFD && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(sub_1000E3810(v2, v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for Collation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)uint64_t result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)uint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Collation()
{
  return &type metadata for Collation;
}

uint64_t sub_1000F1CE8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1000D4294(34LL, 0xE100000000000000LL, a1, a4);
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_BOOLForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLForKey:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_featureEnabledWithDomain_feature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "featureEnabledWithDomain:feature:");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_initWithSuiteName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSuiteName:");
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _[a1 lastObject];
}