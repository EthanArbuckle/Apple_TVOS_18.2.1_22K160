uint64_t *sub_100002C50()
{
  return &qword_1003691A8;
}

uint64_t sub_100002C5C()
{
  return swift_retain(qword_1003691A8);
}

uint64_t sub_100002CA0(uint64_t a1)
{
  uint64_t v2 = qword_1003691A8;
  qword_1003691A8 = a1;
  return swift_release(v2);
}

void *sub_100002CEC(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

uint64_t sub_100002D2C()
{
  uint64_t result = qword_1003691A8;
  if (qword_1003691A8) {
    return swift_retain(result);
  }
  uint64_t v1 = type metadata accessor for Daemon();
  uint64_t v2 = swift_allocObject(v1, 24LL, 7LL);
  sub_100002E88();
  uint64_t v3 = qword_1003691A8;
  qword_1003691A8 = v2;
  swift_release(v3);
  uint64_t result = qword_1003691A8;
  if (qword_1003691A8) {
    return swift_retain(result);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for Daemon()
{
  return objc_opt_self(&OBJC_CLASS____TtC9aonsensed6Daemon);
}

uint64_t sub_100002DC8()
{
  return 0LL;
}

uint64_t sub_100002DD0()
{
  return swift_retain(*(void *)(v0 + 16));
}

uint64_t sub_100002E04(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = a1;
  return swift_release(v3);
}

void *sub_100002E48(uint64_t a1)
{
  return &j__swift_endAccess;
}

uint64_t sub_100002E88()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  *(void *)(v0 + 16) = 0LL;
  v6 = (uint64_t *)(v0 + 16);
  type metadata accessor for PersistentConfig();
  uint64_t v7 = static PersistentConfig.instance.getter();
  dispatch thunk of PersistentConfig.subscript.getter();
  swift_release(v7);
  if (v16[0] == 2 || (v16[0] & 1) != 0)
  {
    uint64_t v8 = corelog.getter((uint64_t)v5);
    v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Enable DataVendorManager on AP", v11, 2u);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    type metadata accessor for DataVendorService();
    uint64_t v12 = DataVendorService.__allocating_init()();
    swift_beginAccess(v6, v16, 1LL, 0LL);
    uint64_t v13 = *v6;
    uint64_t *v6 = v12;
    swift_release(v13);
  }

  return v1;
}

uint64_t sub_100003018()
{
  return v0;
}

uint64_t sub_100003034()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

void sub_100003058()
{
}

uint64_t sub_10000306C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v4 = corelog.getter((uint64_t)v3);
  v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Starting in RELEASE", v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t result = swift_beginAccess(&qword_1003691A8, v13, 1LL, 0LL);
  if (!qword_1003691A8)
  {
    uint64_t v9 = type metadata accessor for Daemon();
    uint64_t v10 = swift_allocObject(v9, 24LL, 7LL);
    sub_100002E88();
    uint64_t v11 = qword_1003691A8;
    qword_1003691A8 = v10;
    uint64_t result = swift_release(v11);
    if (!qword_1003691A8) {
      __break(1u);
    }
  }

  return result;
}

int main(int argc, const char **argv, const char **envp)
{
  return 0;
}

void sub_1000031F0()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for PersistentConfig();
  uint64_t v5 = static PersistentConfig.instance.getter();
  dispatch thunk of PersistentConfig.subscript.getter();
  swift_release(v5);
  if (v14 == 2)
  {
    type metadata accessor for PlatformInfo();
    uint64_t v6 = static PlatformInfo.instance.getter();
    char v7 = dispatch thunk of PlatformInfo.isAvailable.getter();
    swift_release(v6);
    if ((v7 & 1) == 0)
    {
LABEL_3:
      uint64_t v8 = corelog.getter((uint64_t)v4);
      uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
      os_log_type_t v10 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Exiting", v11, 2u);
        swift_slowDealloc(v11, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      return;
    }
  }

  else if ((v14 & 1) == 0)
  {
    goto LABEL_3;
  }

  uint64_t v12 = objc_autoreleasePoolPush();
  sub_10000306C();
  if (!v0)
  {
    objc_autoreleasePoolPop(v12);
    dispatch_main();
  }

  objc_autoreleasePoolPop(v12);
  __break(1u);
}

ValueMetadata *type metadata accessor for aonsensed()
{
  return &type metadata for aonsensed;
}

void sub_1000033A0()
{
}

uint64_t sub_1000033B4()
{
  uint64_t v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL) + 20));
  if (v1[8]) {
    return 0LL;
  }
  else {
    return *(void *)v1;
  }
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_Request(uint64_t a1)
{
  return sub_10000E68C(a1, (uint64_t *)&unk_10036D6D0, (uint64_t)&nominal type descriptor for CLP_LogEntry_AONLoc_Request);
}

uint64_t sub_1000033F8(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  uint64_t v4 = v1 + *(int *)(result + 20);
  *(void *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_10000342C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8)) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_100003480;
}

BOOL sub_100003484()
{
  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL) + 20) + 8) & 1) == 0;
}

uint64_t sub_1000034B0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  uint64_t v2 = v0 + *(int *)(result + 20);
  *(void *)uint64_t v2 = 0LL;
  *(_BYTE *)(v2 + 8) = 1;
  return result;
}

uint64_t sub_1000034DC()
{
  uint64_t v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL) + 24));
  if (v1[4]) {
    return 0LL;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t sub_10000350C(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  uint64_t v4 = v1 + *(int *)(result + 24);
  *(_DWORD *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_100003540(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100003594()
{
  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL) + 24) + 4) & 1) == 0;
}

uint64_t sub_1000035C0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  uint64_t v2 = v0 + *(int *)(result + 24);
  *(_DWORD *)uint64_t v2 = 0;
  *(_BYTE *)(v2 + 4) = 1;
  return result;
}

uint64_t sub_1000035EC()
{
  uint64_t v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL) + 28));
  if (v1[4]) {
    return 0LL;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t sub_10000361C(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  uint64_t v4 = v1 + *(int *)(result + 28);
  *(_DWORD *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_100003650(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL) + 28);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000036A0()
{
  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL) + 28) + 4) & 1) == 0;
}

uint64_t sub_1000036CC()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  uint64_t v2 = v0 + *(int *)(result + 28);
  *(_DWORD *)uint64_t v2 = 0;
  *(_BYTE *)(v2 + 4) = 1;
  return result;
}

uint64_t sub_1000036F8()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL) + 32));
  if (v1 == 5) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_100003720(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_10000374C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL) + 32);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100003798;
}

uint64_t sub_100003798(uint64_t result)
{
  *(_BYTE *)(*(void *)result + *(int *)(result + 8)) = *(_BYTE *)(result + 12);
  return result;
}

BOOL sub_1000037AC()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL) + 32)) != 5;
}

uint64_t sub_1000037D4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 5;
  return result;
}

uint64_t sub_1000037F8@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100350F18);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 36), (uint64_t)v5, &qword_100350F18);
  char v7 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  *a1 = &_swiftEmptyArrayStorage;
  a1[1] = &_swiftEmptyArrayStorage;
  a1[2] = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  *((_BYTE *)a1 + v7[8]) = 2;
  uint64_t v8 = (char *)a1 + v7[9];
  *(_DWORD *)uint64_t v8 = 0;
  v8[4] = 1;
  uint64_t v9 = (char *)a1 + v7[10];
  *(_DWORD *)uint64_t v9 = 0;
  v9[4] = 1;
  os_log_type_t v10 = (char *)a1 + v7[11];
  *(_DWORD *)os_log_type_t v10 = 0;
  v10[4] = 1;
  uint64_t v11 = (char *)a1 + v7[12];
  *(_DWORD *)uint64_t v11 = 0;
  v11[4] = 1;
  uint64_t v12 = (char *)a1 + v7[13];
  *(void *)uint64_t v12 = 0LL;
  v12[8] = 1;
  uint64_t v13 = (char *)a1 + v7[14];
  *(void *)uint64_t v13 = 0LL;
  v13[8] = 1;
  return sub_100015764((uint64_t)v5, &qword_100350F18);
}

uint64_t sub_100003958@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  a1[1] = &_swiftEmptyArrayStorage;
  a1[2] = &_swiftEmptyArrayStorage;
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  uint64_t result = UnknownStorage.init()();
  *((_BYTE *)a1 + v2[8]) = 2;
  uint64_t v4 = (char *)a1 + v2[9];
  *(_DWORD *)uint64_t v4 = 0;
  v4[4] = 1;
  uint64_t v5 = (char *)a1 + v2[10];
  *(_DWORD *)uint64_t v5 = 0;
  v5[4] = 1;
  uint64_t v6 = (char *)a1 + v2[11];
  *(_DWORD *)uint64_t v6 = 0;
  v6[4] = 1;
  char v7 = (char *)a1 + v2[12];
  *(_DWORD *)char v7 = 0;
  v7[4] = 1;
  uint64_t v8 = (char *)a1 + v2[13];
  *(void *)uint64_t v8 = 0LL;
  v8[8] = 1;
  uint64_t v9 = (char *)a1 + v2[14];
  *(void *)uint64_t v9 = 0LL;
  v9[8] = 1;
  return result;
}

uint64_t sub_100003A0C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_10036D6E0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

uint64_t sub_100003A60(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL) + 36);
  sub_100015764(v3, &qword_100350F18);
  sub_100003E68(a1, v3, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 0LL, 1LL, v4);
}

void (*sub_100003AD0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100350F18);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL) + 36);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100350F18);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    void *v9 = &_swiftEmptyArrayStorage;
    v9[1] = &_swiftEmptyArrayStorage;
    v9[2] = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    *((_BYTE *)v9 + v6[8]) = 2;
    uint64_t v11 = (char *)v9 + v6[9];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = (char *)v9 + v6[10];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = (char *)v9 + v6[11];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    char v14 = (char *)v9 + v6[12];
    *(_DWORD *)char v14 = 0;
    v14[4] = 1;
    uint64_t v15 = (char *)v9 + v6[13];
    *(void *)uint64_t v15 = 0LL;
    v15[8] = 1;
    v16 = (char *)v9 + v6[14];
    *(void *)v16 = 0LL;
    v16[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100350F18);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  }

  return sub_100003C70;
}

void sub_100003C70(uint64_t a1, char a2)
{
}

BOOL sub_100003C84()
{
  uint64_t v1 = sub_100003A0C(&qword_100350F18);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  sub_10000E6C0(v0 + *(int *)(v4 + 36), (uint64_t)v3, &qword_100350F18);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v3, 1LL, v5) != 1;
  sub_100015764((uint64_t)v3, &qword_100350F18);
  return v6;
}

uint64_t sub_100003D38()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL) + 36);
  sub_100015764(v1, &qword_100350F18);
  uint64_t v2 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
}

uint64_t sub_100003D90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100350F20);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 40), (uint64_t)v5, &qword_100350F20);
  uint64_t v7 = type metadata accessor for Proto_Gpsd_Request(0LL);
  sub_10023A530(a1);
  return sub_100015764((uint64_t)v5, &qword_100350F20);
}

uint64_t sub_100003E68(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_100003EAC(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL) + 40);
  sub_100015764(v3, &qword_100350F20);
  sub_100003E68(a1, v3, type metadata accessor for Proto_Gpsd_Request);
  uint64_t v4 = type metadata accessor for Proto_Gpsd_Request(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 0LL, 1LL, v4);
}

void (*sub_100003F1C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100350F20);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gpsd_Request(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL) + 40);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100350F20);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    sub_10023A530((uint64_t)v9);
    sub_100015764((uint64_t)v5, &qword_100350F20);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gpsd_Request);
  }

  return sub_100004038;
}

void sub_100004038(uint64_t a1, char a2)
{
}

uint64_t sub_10000404C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_100004090(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

BOOL sub_1000040CC()
{
  uint64_t v1 = sub_100003A0C(&qword_100350F20);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  sub_10000E6C0(v0 + *(int *)(v4 + 40), (uint64_t)v3, &qword_100350F20);
  uint64_t v5 = type metadata accessor for Proto_Gpsd_Request(0LL);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v3, 1LL, v5) != 1;
  sub_100015764((uint64_t)v3, &qword_100350F20);
  return v6;
}

uint64_t sub_100004180()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL) + 40);
  sub_100015764(v1, &qword_100350F20);
  uint64_t v2 = type metadata accessor for Proto_Gpsd_Request(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
}

uint64_t (*sub_1000041E4())()
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000041F4()
{
  return 0LL;
}

uint64_t sub_100004200(char a1)
{
  return qword_1002B4250[a1];
}

BOOL sub_100004214(char *a1, char *a2)
{
  return qword_1002B4250[*a1] == qword_1002B4250[*a2];
}

uint64_t sub_10000423C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000155D0();
  return Enum.hash(into:)(a1, a2, v4);
}

void sub_100004278(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_100004280@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10000E4DC(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000042A4()
{
  return qword_1002B4250[*v0];
}

uint64_t sub_1000042B8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10000E4DC(*a1);
  *a2 = result;
  return result;
}

void sub_1000042E0(void *a1@<X8>)
{
  *a1 = qword_1002B4250[*v1];
}

uint64_t sub_1000042F8()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL) + 32)) & 1;
}

uint64_t sub_10000431C(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_100004348(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100004394()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL) + 32)) != 2;
}

uint64_t sub_1000043BC()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

uint64_t sub_1000043E0()
{
  uint64_t v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL) + 36));
  if (v1[4]) {
    return 0LL;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t sub_100004410(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  uint64_t v4 = v1 + *(int *)(result + 36);
  *(_DWORD *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_100004444(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL) + 36);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100004494()
{
  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL) + 36) + 4) & 1) == 0;
}

uint64_t sub_1000044C0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  uint64_t v2 = v0 + *(int *)(result + 36);
  *(_DWORD *)uint64_t v2 = 0;
  *(_BYTE *)(v2 + 4) = 1;
  return result;
}

float sub_1000044EC()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL) + 40);
  float result = *(float *)v1;
  if (*(_BYTE *)(v1 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100004520(float a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  uint64_t v4 = v1 + *(int *)(result + 40);
  *(float *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_100004554(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL) + 40);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000045AC()
{
  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL) + 40) + 4) & 1) == 0;
}

uint64_t sub_1000045D8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  uint64_t v2 = v0 + *(int *)(result + 40);
  *(_DWORD *)uint64_t v2 = 0;
  *(_BYTE *)(v2 + 4) = 1;
  return result;
}

float sub_100004604()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL) + 44);
  float result = *(float *)v1;
  if (*(_BYTE *)(v1 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100004638(float a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  uint64_t v4 = v1 + *(int *)(result + 44);
  *(float *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_10000466C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL) + 44);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

uint64_t sub_1000046C4(uint64_t result)
{
  uint64_t v1 = *(void *)result + *(int *)(result + 12);
  *(_DWORD *)uint64_t v1 = *(_DWORD *)(result + 8);
  *(_BYTE *)(v1 + 4) = 0;
  return result;
}

BOOL sub_1000046E0()
{
  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL) + 44) + 4) & 1) == 0;
}

uint64_t sub_10000470C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  uint64_t v2 = v0 + *(int *)(result + 44);
  *(_DWORD *)uint64_t v2 = 0;
  *(_BYTE *)(v2 + 4) = 1;
  return result;
}

uint64_t sub_100004738()
{
  uint64_t v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL) + 48));
  if (v1[4]) {
    return 0LL;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t sub_100004768(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  uint64_t v4 = v1 + *(int *)(result + 48);
  *(_DWORD *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_10000479C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL) + 48);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000047EC()
{
  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL) + 48) + 4) & 1) == 0;
}

uint64_t sub_100004818()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  uint64_t v2 = v0 + *(int *)(result + 48);
  *(_DWORD *)uint64_t v2 = 0;
  *(_BYTE *)(v2 + 4) = 1;
  return result;
}

void *sub_100004844()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_100004850()
{
  return swift_bridgeObjectRetain(*v0);
}

uint64_t sub_100004858(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*v1);
  *uint64_t v1 = a1;
  return result;
}

uint64_t sub_100004880()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 8));
}

uint64_t sub_100004888(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 8));
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*sub_1000048B0())()
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000048C0()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 16));
}

uint64_t sub_1000048C8(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 16));
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*sub_1000048F0())()
{
  return static ALProtobufUtil.debug<A>(_:);
}

double sub_100004900()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL) + 52);
  double result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100004934(double a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  uint64_t v4 = v1 + *(int *)(result + 52);
  *(double *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_100004968(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL) + 52);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000049C0()
{
  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL) + 52) + 8) & 1) == 0;
}

uint64_t sub_1000049EC()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  uint64_t v2 = v0 + *(int *)(result + 52);
  *(void *)uint64_t v2 = 0LL;
  *(_BYTE *)(v2 + 8) = 1;
  return result;
}

double sub_100004A18()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL) + 56);
  double result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100004A4C(double a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  uint64_t v4 = v1 + *(int *)(result + 56);
  *(double *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_100004A80(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL) + 56);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

uint64_t sub_100004AD8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8) + *(int *)(result + 16);
  *(void *)uint64_t v1 = *(void *)result;
  *(_BYTE *)(v1 + 8) = 0;
  return result;
}

BOOL sub_100004AF0()
{
  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL) + 56) + 8) & 1) == 0;
}

uint64_t sub_100004B1C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  uint64_t v2 = v0 + *(int *)(result + 56);
  *(void *)uint64_t v2 = 0LL;
  *(_BYTE *)(v2 + 8) = 1;
  return result;
}

uint64_t sub_100004B48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL) + 28);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t sub_100004B90(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL) + 28);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
}

uint64_t (*sub_100004BD8())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_100004C00()
{
  return 2LL;
}

uint64_t sub_100004C08()
{
  return 0LL;
}

uint64_t sub_100004C14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  uint64_t v3 = a1 + v2[5];
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  uint64_t v4 = a1 + v2[6];
  *(_DWORD *)uint64_t v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  uint64_t v5 = a1 + v2[7];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  *(_BYTE *)(a1 + v2[8]) = 5;
  uint64_t v6 = a1 + v2[9];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  uint64_t v8 = a1 + v2[10];
  uint64_t v9 = type metadata accessor for Proto_Gpsd_Request(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
}

uint64_t sub_100004CDC()
{
  return 0x100000000LL;
}

uint64_t sub_100004CF8()
{
  return 5LL;
}

uint64_t sub_100004D00@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions, a1);
}

uint64_t sub_100004D0C@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for Proto_Gpsd_Request, a1);
}

uint64_t sub_100004D18@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(a2, 1LL, 1LL, v3);
}

_UNKNOWN **sub_100004D58()
{
  return &off_10033DA00;
}

void sub_100004D64(void *a1@<X8>)
{
  *a1 = &off_10033DA28;
}

uint64_t sub_100004D74()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0LL) + 20));
  if (v1 == 5) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_100004D9C(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Response(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_100004DC8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0LL) + 20);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100004E14()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0LL) + 20)) != 5;
}

uint64_t sub_100004E3C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Response(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 5;
  return result;
}

uint64_t sub_100004E60()
{
  return sub_100005038(type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t sub_100004E6C(uint64_t a1)
{
  return sub_100005078(a1, type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t (*sub_100004E78(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  int v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8)) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_100003480;
}

BOOL sub_100004ECC()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t sub_100004ED8()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t sub_100004EE4()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0LL) + 28));
  if (v1 == 10) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_100004F0C(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Response(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_100004F38(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0LL) + 28);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 10) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100004F84()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0LL) + 28)) != 10;
}

uint64_t sub_100004FAC()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Response(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 10;
  return result;
}

int *sub_100004FD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Response(0LL);
  *(_BYTE *)(a1 + result[5]) = 5;
  uint64_t v3 = a1 + result[6];
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  *(_BYTE *)(a1 + result[7]) = 10;
  return result;
}

uint64_t sub_100005024()
{
  return 10LL;
}

uint64_t sub_10000502C()
{
  return sub_100005038(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t sub_100005038(uint64_t (*a1)(void))
{
  uint64_t v2 = (_BYTE *)(v1 + *(int *)(a1(0LL) + 24));
  if (v2[8]) {
    return 0LL;
  }
  else {
    return *(void *)v2;
  }
}

uint64_t sub_10000506C(uint64_t a1)
{
  return sub_100005078(a1, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t sub_100005078(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0LL);
  uint64_t v5 = v2 + *(int *)(result + 24);
  *(void *)uint64_t v5 = a1;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_1000050AC(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  int v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8)) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_100003480;
}

BOOL sub_100005100()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

BOOL sub_10000510C(uint64_t (*a1)(void))
{
  return (*(_BYTE *)(v1 + *(int *)(a1(0LL) + 24) + 8) & 1) == 0;
}

uint64_t sub_10000513C()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t sub_100005148(uint64_t (*a1)(void))
{
  uint64_t result = a1(0LL);
  uint64_t v3 = v1 + *(int *)(result + 24);
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  return result;
}

uint64_t sub_100005178()
{
  return sub_10000530C(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t sub_100005184(char a1)
{
  return sub_10000534C(a1, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t (*sub_100005190(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0LL) + 28);
  *(_BYTE *)(a1 + 12) = (*(_BYTE *)(v1 + v3) == 2) | *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000051E4()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0LL) + 28)) != 2;
}

uint64_t sub_10000520C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_100005230@<X0>(uint64_t a1@<X8>)
{
  return sub_100005424(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, a1);
}

uint64_t sub_10000523C(uint64_t a1)
{
  return sub_10000547C(a1, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t (*sub_100005248())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_100005270@<X0>(void *a1@<X8>)
{
  return sub_1000054F8(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, a1);
}

uint64_t sub_10000527C()
{
  return sub_100005038(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t sub_100005288(uint64_t a1)
{
  return sub_100005078(a1, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t (*sub_100005294(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  int v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8)) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000052E8()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t sub_1000052F4()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t sub_100005300()
{
  return sub_10000530C(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t sub_10000530C(uint64_t (*a1)(void))
{
  int v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0LL) + 28));
  return (v2 == 2) | v2 & 1u;
}

uint64_t sub_100005340(char a1)
{
  return sub_10000534C(a1, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t sub_10000534C(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0LL);
  *(_BYTE *)(v2 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_100005378(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0LL) + 28);
  *(_BYTE *)(a1 + 12) = (*(_BYTE *)(v1 + v3) == 2) | *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000053CC()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0LL) + 28)) != 2;
}

uint64_t sub_1000053F4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_100005418@<X0>(uint64_t a1@<X8>)
{
  return sub_100005424(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, a1);
}

uint64_t sub_100005424@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0LL) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_100005470(uint64_t a1)
{
  return sub_10000547C(a1, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t sub_10000547C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0LL) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*sub_1000054C4())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000054EC@<X0>(void *a1@<X8>)
{
  return sub_1000054F8(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, a1);
}

uint64_t sub_1000054F8@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  uint64_t v3 = a1(0LL);
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = (char *)a2 + *(int *)(v3 + 24);
  *(void *)uint64_t v5 = 0LL;
  v5[8] = 1;
  *((_BYTE *)a2 + *(int *)(v3 + 28)) = 2;
  return result;
}

uint64_t sub_10000555C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL) + 20));
  swift_beginAccess(v1 + 16, v3, 0LL, 0LL);
  if (*(_BYTE *)(v1 + 24)) {
    return 0LL;
  }
  else {
    return *(void *)(v1 + 16);
  }
}

uint64_t sub_1000055B0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_10000ADF0(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 16, v12, 1LL, 0LL);
  *(void *)(v10 + 16) = a1;
  *(_BYTE *)(v10 + 24) = 0;
  return result;
}

void (*sub_100005658(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0LL, 0LL);
  uint64_t v6 = *(void *)(v5 + 16);
  if (*(_BYTE *)(v5 + 24)) {
    uint64_t v6 = 0LL;
  }
  v3[9] = v6;
  return sub_1000056D8;
}

void sub_1000056D8(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 88);
    uint64_t v8 = *(void *)(v3 + 80);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_10000ADF0(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

LABEL_4:
  uint64_t v14 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 16, v6, 1LL, 0LL);
  *(void *)(v14 + 16) = v4;
  *(_BYTE *)(v14 + 24) = 0;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v14 + 28, v6, 1LL, 0LL);
  *(_DWORD *)(v14 + 28) = v4;
  *(_BYTE *)(v14 + 32) = 0;
  free((void *)v3);
}

  uint64_t v14 = (_BYTE *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 33LL);
  swift_beginAccess(v14, v6, 1LL, 0LL);
  *uint64_t v14 = v4;
  free((void *)v3);
}

  uint64_t v14 = (_BYTE *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 16LL);
  swift_beginAccess(v14, v6, 1LL, 0LL);
  *uint64_t v14 = v4;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v14 + 16, v6, 1LL, 0LL);
  *(_DWORD *)(v14 + 16) = v4;
  *(_BYTE *)(v14 + 20) = 0;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v14 + 24, v6, 1LL, 0LL);
  *(_DWORD *)(v14 + 24) = v4;
  *(_BYTE *)(v14 + 28) = 0;
  free((void *)v3);
}

  v16 = *(void *)(*(void *)(v5 + 72) + *(int *)(v5 + 84)) + *a3;
  swift_beginAccess(v16, v8, 1LL, 0LL);
  *(_DWORD *)v16 = v6;
  *(_BYTE *)(v16 + 4) = 0;
  free((void *)v5);
}

  v20 = (_BYTE *)(*(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 80)) + *a5);
  swift_beginAccess(v20, v12, 1LL, 0LL);
  *v20 = v10;
  free((void *)v9);
}

  v20 = *(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 84)) + *a5;
  swift_beginAccess(v20, v12, 1LL, 0LL);
  *(_DWORD *)v20 = v10;
  *(_BYTE *)(v20 + 4) = 0;
  free((void *)v9);
}

  v16 = *(void *)(*(void *)(v5 + 80) + *(int *)(v5 + 88)) + *a3;
  swift_beginAccess(v16, v8, 1LL, 0LL);
  *(void *)v16 = v6;
  *(_BYTE *)(v16 + 8) = 0;
  free((void *)v5);
}

  swift_beginAccess(v14, v6, 1LL, 0LL);
  *uint64_t v14 = v4;
  free((void *)v3);
}

  v16 = *(void *)(*(void *)(v5 + 80) + *(int *)(v5 + 88)) + *a3;
  swift_beginAccess(v16, v8, 1LL, 0LL);
  *(void *)v16 = v6;
  *(_BYTE *)(v16 + 8) = 0;
  free((void *)v5);
}

  v16 = *(void *)(*(void *)(v5 + 72) + *(int *)(v5 + 84)) + *a3;
  swift_beginAccess(v16, v8, 1LL, 0LL);
  *(_DWORD *)v16 = v6;
  *(_BYTE *)(v16 + 4) = 0;
  free((void *)v5);
}

  v16 = (_BYTE *)(*(void *)(*(void *)(v5 + 72) + *(int *)(v5 + 80)) + *a3);
  swift_beginAccess(v16, v8, 1LL, 0LL);
  char *v16 = v6;
  free((void *)v5);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v14 + 16, v6, 1LL, 0LL);
  *(_DWORD *)(v14 + 16) = v4;
  *(_BYTE *)(v14 + 20) = 0;
  free((void *)v3);
}

  v16 = *(void *)(*(void *)(v5 + 80) + *(int *)(v5 + 88)) + *a3;
  swift_beginAccess(v16, v8, 1LL, 0LL);
  *(void *)v16 = v6;
  *(_BYTE *)(v16 + 8) = 0;
  free((void *)v5);
}

  uint64_t v14 = (_BYTE *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 16LL);
  swift_beginAccess(v14, v6, 1LL, 0LL);
  *uint64_t v14 = v4;
  free((void *)v3);
}

  v20 = *(void *)(*(void *)(v9 + 80) + *(int *)(v9 + 88)) + *a5;
  swift_beginAccess(v20, v12, 1LL, 0LL);
  *(void *)v20 = v10;
  *(_BYTE *)(v20 + 8) = 0;
  free((void *)v9);
}

  v20 = *(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 84)) + *a5;
  swift_beginAccess(v20, v12, 1LL, 0LL);
  *(_DWORD *)v20 = v10;
  *(_BYTE *)(v20 + 4) = 0;
  free((void *)v9);
}

  v20 = (_BYTE *)(*(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 80)) + *a5);
  swift_beginAccess(v20, v12, 1LL, 0LL);
  *v20 = v10;
  free((void *)v9);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 16, v6, 1LL, 0LL);
  *(void *)(v14 + 16) = v4;
  *(_BYTE *)(v14 + 24) = 0;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 32, v6, 1LL, 0LL);
  *(void *)(v14 + 32) = v4;
  *(_BYTE *)(v14 + 40) = 0;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 48, v6, 1LL, 0LL);
  *(void *)(v14 + 48) = v4;
  *(_BYTE *)(v14 + 56) = 0;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 64, v6, 1LL, 0LL);
  *(void *)(v14 + 64) = v4;
  *(_BYTE *)(v14 + 72) = 0;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 80, v6, 1LL, 0LL);
  *(void *)(v14 + 80) = v4;
  *(_BYTE *)(v14 + 88) = 0;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v14 + 92, v6, 1LL, 0LL);
  *(_DWORD *)(v14 + 92) = v4;
  *(_BYTE *)(v14 + 96) = 0;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v14 + 100, v6, 1LL, 0LL);
  *(_DWORD *)(v14 + 100) = v4;
  *(_BYTE *)(v14 + 104) = 0;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v14 + 108, v6, 1LL, 0LL);
  *(_DWORD *)(v14 + 108) = v4;
  *(_BYTE *)(v14 + 112) = 0;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess(v14 + 113, v6, 1LL, 0LL);
  *(_BYTE *)(v14 + 113) = v4;
  free((void *)v3);
}

  uint64_t v14 = (_BYTE *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 114LL);
  swift_beginAccess(v14, v6, 1LL, 0LL);
  *uint64_t v14 = v4;
  free((void *)v3);
}

  v20 = (_BYTE *)(*(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 80)) + *a5);
  swift_beginAccess(v20, v12, 1LL, 0LL);
  *v20 = v10;
  free((void *)v9);
}

  uint64_t v14 = (_BYTE *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 16LL);
  swift_beginAccess(v14, v6, 1LL, 0LL);
  *uint64_t v14 = v4;
  free((void *)v3);
}

  uint64_t v14 = (_BYTE *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 17LL);
  swift_beginAccess(v14, v6, 1LL, 0LL);
  *uint64_t v14 = v4;
  free((void *)v3);
}

  uint64_t v14 = (_BYTE *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 18LL);
  swift_beginAccess(v14, v6, 1LL, 0LL);
  *uint64_t v14 = v4;
  free((void *)v3);
}

  uint64_t v14 = (_BYTE *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 19LL);
  swift_beginAccess(v14, v6, 1LL, 0LL);
  *uint64_t v14 = v4;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess(v14 + 20, v6, 1LL, 0LL);
  *(_BYTE *)(v14 + 20) = v4;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v14 + 24, v6, 1LL, 0LL);
  *(_DWORD *)(v14 + 24) = v4;
  *(_BYTE *)(v14 + 28) = 0;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 32, v6, 1LL, 0LL);
  *(void *)(v14 + 32) = v4;
  *(_BYTE *)(v14 + 40) = 0;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess(v14 + 41, v6, 1LL, 0LL);
  *(_BYTE *)(v14 + 41) = v4;
  free((void *)v3);
}

  uint64_t v14 = (_BYTE *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 42LL);
  swift_beginAccess(v14, v6, 1LL, 0LL);
  *uint64_t v14 = v4;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 48, v6, 1LL, 0LL);
  *(void *)(v14 + 48) = v4;
  *(_BYTE *)(v14 + 56) = 0;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 64, v6, 1LL, 0LL);
  *(void *)(v14 + 64) = v4;
  *(_BYTE *)(v14 + 72) = 0;
  free((void *)v3);
}

  uint64_t v14 = (_BYTE *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 73LL);
  swift_beginAccess(v14, v6, 1LL, 0LL);
  *uint64_t v14 = v4;
  free((void *)v3);
}

  uint64_t v14 = (_BYTE *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 74LL);
  swift_beginAccess(v14, v6, 1LL, 0LL);
  *uint64_t v14 = v4;
  free((void *)v3);
}

  v20 = *(void *)(*(void *)(v9 + 80) + *(int *)(v9 + 88)) + *a5;
  swift_beginAccess(v20, v12, 1LL, 0LL);
  *(void *)v20 = v10;
  *(_BYTE *)(v20 + 8) = 0;
  free((void *)v9);
}

  v20 = (_BYTE *)(*(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 80)) + *a5);
  swift_beginAccess(v20, v12, 1LL, 0LL);
  *v20 = v10;
  free((void *)v9);
}

  v16 = *(void *)(*(void *)(v5 + 72) + *(int *)(v5 + 84)) + *a3;
  swift_beginAccess(v16, v8, 1LL, 0LL);
  *(_DWORD *)v16 = v6;
  *(_BYTE *)(v16 + 4) = 0;
  free((void *)v5);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v13 + 16, v6, 1LL, 0LL);
  *(void *)(v13 + 16) = v4;
  *(_BYTE *)(v13 + 24) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v13 + 32, v6, 1LL, 0LL);
  *(void *)(v13 + 32) = v4;
  *(_BYTE *)(v13 + 40) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 44, v6, 1LL, 0LL);
  *(_DWORD *)(v13 + 44) = v4;
  *(_BYTE *)(v13 + 48) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 52, v6, 1LL, 0LL);
  *(_DWORD *)(v13 + 52) = v4;
  *(_BYTE *)(v13 + 56) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 60, v6, 1LL, 0LL);
  *(_DWORD *)(v13 + 60) = v4;
  *(_BYTE *)(v13 + 64) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 68, v6, 1LL, 0LL);
  *(_DWORD *)(v13 + 68) = v4;
  *(_BYTE *)(v13 + 72) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 76, v6, 1LL, 0LL);
  *(_DWORD *)(v13 + 76) = v4;
  *(_BYTE *)(v13 + 80) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 84, v6, 1LL, 0LL);
  *(_DWORD *)(v13 + 84) = v4;
  *(_BYTE *)(v13 + 88) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 92, v6, 1LL, 0LL);
  *(_DWORD *)(v13 + 92) = v4;
  *(_BYTE *)(v13 + 96) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 100, v6, 1LL, 0LL);
  *(_DWORD *)(v13 + 100) = v4;
  *(_BYTE *)(v13 + 104) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 108, v6, 1LL, 0LL);
  *(_DWORD *)(v13 + 108) = v4;
  *(_BYTE *)(v13 + 112) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 116, v6, 1LL, 0LL);
  *(_DWORD *)(v13 + 116) = v4;
  *(_BYTE *)(v13 + 120) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 124, v6, 1LL, 0LL);
  *(_DWORD *)(v13 + 124) = v4;
  *(_BYTE *)(v13 + 128) = 0;
  free((void *)v3);
}

  uint64_t v13 = (_BYTE *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 129LL);
  swift_beginAccess(v13, v6, 1LL, 0LL);
  *uint64_t v13 = v4;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess(v13 + 130, v6, 1LL, 0LL);
  *(_BYTE *)(v13 + 130) = v4;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess(v13 + 131, v6, 1LL, 0LL);
  *(_BYTE *)(v13 + 131) = v4;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess(v13 + 132, v6, 1LL, 0LL);
  *(_BYTE *)(v13 + 132) = v4;
  free((void *)v3);
}

    uint64_t v5 = 0LL;
    uint64_t v9 = a2;
  }

  return result;
}

    uint64_t v4 = 0LL;
    uint64_t v7 = a2;
  }

  return result;
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v13 + 16, v6, 1LL, 0LL);
  *(void *)(v13 + 16) = v4;
  *(_BYTE *)(v13 + 24) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v13 + 32, v6, 1LL, 0LL);
  *(void *)(v13 + 32) = v4;
  *(_BYTE *)(v13 + 40) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v13 + 48, v6, 1LL, 0LL);
  *(void *)(v13 + 48) = v4;
  *(_BYTE *)(v13 + 56) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v13 + 64, v6, 1LL, 0LL);
  *(void *)(v13 + 64) = v4;
  *(_BYTE *)(v13 + 72) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v13 + 80, v6, 1LL, 0LL);
  *(void *)(v13 + 80) = v4;
  *(_BYTE *)(v13 + 88) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v13 + 96, v6, 1LL, 0LL);
  *(void *)(v13 + 96) = v4;
  *(_BYTE *)(v13 + 104) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 108, v6, 1LL, 0LL);
  *(_DWORD *)(v13 + 108) = v4;
  *(_BYTE *)(v13 + 112) = 0;
  free((void *)v3);
}

  uint64_t v13 = (_BYTE *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 113LL);
  swift_beginAccess(v13, v6, 1LL, 0LL);
  *uint64_t v13 = v4;
  free((void *)v3);
}

  uint64_t v13 = (_BYTE *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 114LL);
  swift_beginAccess(v13, v6, 1LL, 0LL);
  *uint64_t v13 = v4;
  free((void *)v3);
}

  uint64_t v13 = (_BYTE *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 115LL);
  swift_beginAccess(v13, v6, 1LL, 0LL);
  *uint64_t v13 = v4;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v13 + 120, v6, 1LL, 0LL);
  *(void *)(v13 + 120) = v4;
  *(_BYTE *)(v13 + 128) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v13 + 136, v6, 1LL, 0LL);
  *(void *)(v13 + 136) = v4;
  *(_BYTE *)(v13 + 144) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v13 + 152, v6, 1LL, 0LL);
  *(void *)(v13 + 152) = v4;
  *(_BYTE *)(v13 + 160) = 0;
  free((void *)v3);
}

  uint64_t v13 = (_BYTE *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 161LL);
  swift_beginAccess(v13, v6, 1LL, 0LL);
  *uint64_t v13 = v4;
  free((void *)v3);
}

  uint64_t v13 = (_BYTE *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 162LL);
  swift_beginAccess(v13, v6, 1LL, 0LL);
  *uint64_t v13 = v4;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess(v13 + 163, v6, 1LL, 0LL);
  *(_BYTE *)(v13 + 163) = v4;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess(v13 + 164, v6, 1LL, 0LL);
  *(_BYTE *)(v13 + 164) = v4;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v13 + 168, v6, 1LL, 0LL);
  *(void *)(v13 + 168) = v4;
  *(_BYTE *)(v13 + 176) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 180, v6, 1LL, 0LL);
  *(_DWORD *)(v13 + 180) = v4;
  *(_BYTE *)(v13 + 184) = 0;
  free((void *)v3);
}

  uint64_t v14 = (_BYTE *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 21LL);
  swift_beginAccess(v14, v6, 1LL, 0LL);
  *uint64_t v14 = v4;
  free((void *)v3);
}

  uint64_t v14 = (_BYTE *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 22LL);
  swift_beginAccess(v14, v6, 1LL, 0LL);
  *uint64_t v14 = v4;
  free((void *)v3);
}

  uint64_t v14 = (_BYTE *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 23LL);
  swift_beginAccess(v14, v6, 1LL, 0LL);
  *uint64_t v14 = v4;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 24, v6, 1LL, 0LL);
  *(void *)(v14 + 24) = v4;
  *(_BYTE *)(v14 + 32) = 0;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 40, v6, 1LL, 0LL);
  *(void *)(v14 + 40) = v4;
  *(_BYTE *)(v14 + 48) = 0;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 56, v6, 1LL, 0LL);
  *(void *)(v14 + 56) = v4;
  *(_BYTE *)(v14 + 64) = 0;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 72, v6, 1LL, 0LL);
  *(void *)(v14 + 72) = v4;
  *(_BYTE *)(v14 + 80) = 0;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 88, v6, 1LL, 0LL);
  *(void *)(v14 + 88) = v4;
  *(_BYTE *)(v14 + 96) = 0;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 104, v6, 1LL, 0LL);
  *(void *)(v14 + 104) = v4;
  *(_BYTE *)(v14 + 112) = 0;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 120, v6, 1LL, 0LL);
  *(void *)(v14 + 120) = v4;
  *(_BYTE *)(v14 + 128) = 0;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess(v14 + 129, v6, 1LL, 0LL);
  *(_BYTE *)(v14 + 129) = v4;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess(v14 + 130, v6, 1LL, 0LL);
  *(_BYTE *)(v14 + 130) = v4;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess(v14 + 131, v6, 1LL, 0LL);
  *(_BYTE *)(v14 + 131) = v4;
  free((void *)v3);
}

  uint64_t v13 = (_BYTE *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 21LL);
  swift_beginAccess(v13, v6, 1LL, 0LL);
  *uint64_t v13 = v4;
  free((void *)v3);
}

  uint64_t v13 = (_BYTE *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 117LL);
  swift_beginAccess(v13, v6, 1LL, 0LL);
  *uint64_t v13 = v4;
  free((void *)v3);
}

  v18 = *(void *)(*(void *)(v7 + 72) + *(int *)(v7 + 84));
  swift_beginAccess(v18 + 16, v10, 1LL, 0LL);
  *(_DWORD *)(v18 + 16) = v8;
  *(_BYTE *)(v18 + 20) = 0;
  free((void *)v7);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v14 + 24, v6, 1LL, 0LL);
  *(_DWORD *)(v14 + 24) = v4;
  *(_BYTE *)(v14 + 28) = 0;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v14 + 32, v6, 1LL, 0LL);
  *(_DWORD *)(v14 + 32) = v4;
  *(_BYTE *)(v14 + 36) = 0;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v14 + 40, v6, 1LL, 0LL);
  *(_DWORD *)(v14 + 40) = v4;
  *(_BYTE *)(v14 + 44) = 0;
  free((void *)v3);
}

  v16 = *(void *)(*(void *)(v5 + 72) + *(int *)(v5 + 84)) + *a3;
  swift_beginAccess(v16, v8, 1LL, 0LL);
  *(_DWORD *)v16 = v6;
  *(_BYTE *)(v16 + 4) = 0;
  free((void *)v5);
}

  v18 = (_BYTE *)(*(void *)(*(void *)(v7 + 72) + *(int *)(v7 + 80)) + 16LL);
  swift_beginAccess(v18, v10, 1LL, 0LL);
  *v18 = v8;
  free((void *)v7);
}

  v18 = *(void *)(*(void *)(v7 + 72) + *(int *)(v7 + 84));
  swift_beginAccess(v18 + 20, v10, 1LL, 0LL);
  *(_DWORD *)(v18 + 20) = v8;
  *(_BYTE *)(v18 + 24) = 0;
  free((void *)v7);
}

  v18 = (_BYTE *)(*(void *)(*(void *)(v7 + 72) + *(int *)(v7 + 80)) + 16LL);
  swift_beginAccess(v18, v10, 1LL, 0LL);
  *v18 = v8;
  free((void *)v7);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v14 + 28, v6, 1LL, 0LL);
  *(_DWORD *)(v14 + 28) = v4;
  *(_BYTE *)(v14 + 32) = 0;
  free((void *)v3);
}

  v18 = *(void *)(*(void *)(v7 + 72) + *(int *)(v7 + 84));
  swift_beginAccess(v18 + 20, v10, 1LL, 0LL);
  *(_DWORD *)(v18 + 20) = v8;
  *(_BYTE *)(v18 + 24) = 0;
  free((void *)v7);
}

  v19 = *(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 84));
  swift_beginAccess(v19 + 16, v12, 1LL, 0LL);
  *(_DWORD *)(v19 + 16) = v10;
  *(_BYTE *)(v19 + 20) = 0;
  free((void *)v9);
}

  v19 = *(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 84));
  swift_beginAccess(v19 + 24, v12, 1LL, 0LL);
  *(_DWORD *)(v19 + 24) = v10;
  *(_BYTE *)(v19 + 28) = 0;
  free((void *)v9);
}

  v19 = *(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 84));
  swift_beginAccess(v19 + 32, v12, 1LL, 0LL);
  *(_DWORD *)(v19 + 32) = v10;
  *(_BYTE *)(v19 + 36) = 0;
  free((void *)v9);
}

  v19 = *(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 84));
  swift_beginAccess(v19 + 40, v12, 1LL, 0LL);
  *(_DWORD *)(v19 + 40) = v10;
  *(_BYTE *)(v19 + 44) = 0;
  free((void *)v9);
}

  v19 = *(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 84));
  swift_beginAccess(v19 + 48, v12, 1LL, 0LL);
  *(_DWORD *)(v19 + 48) = v10;
  *(_BYTE *)(v19 + 52) = 0;
  free((void *)v9);
}

  v19 = *(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 84));
  swift_beginAccess(v19 + 56, v12, 1LL, 0LL);
  *(_DWORD *)(v19 + 56) = v10;
  *(_BYTE *)(v19 + 60) = 0;
  free((void *)v9);
}

  v19 = *(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 84));
  swift_beginAccess(v19 + 64, v12, 1LL, 0LL);
  *(_DWORD *)(v19 + 64) = v10;
  *(_BYTE *)(v19 + 68) = 0;
  free((void *)v9);
}

  v19 = *(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 84));
  swift_beginAccess(v19 + 72, v12, 1LL, 0LL);
  *(_DWORD *)(v19 + 72) = v10;
  *(_BYTE *)(v19 + 76) = 0;
  free((void *)v9);
}

  v19 = *(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 84));
  swift_beginAccess(v19 + 80, v12, 1LL, 0LL);
  *(_DWORD *)(v19 + 80) = v10;
  *(_BYTE *)(v19 + 84) = 0;
  free((void *)v9);
}

  v19 = *(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 84));
  swift_beginAccess(v19 + 88, v12, 1LL, 0LL);
  *(_DWORD *)(v19 + 88) = v10;
  *(_BYTE *)(v19 + 92) = 0;
  free((void *)v9);
}

  v19 = *(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 84));
  swift_beginAccess(v19 + 96, v12, 1LL, 0LL);
  *(_DWORD *)(v19 + 96) = v10;
  *(_BYTE *)(v19 + 100) = 0;
  free((void *)v9);
}

  v19 = *(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 84));
  swift_beginAccess(v19 + 104, v12, 1LL, 0LL);
  *(_DWORD *)(v19 + 104) = v10;
  *(_BYTE *)(v19 + 108) = 0;
  free((void *)v9);
}

  v19 = *(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 84));
  swift_beginAccess(v19 + 112, v12, 1LL, 0LL);
  *(_DWORD *)(v19 + 112) = v10;
  *(_BYTE *)(v19 + 116) = 0;
  free((void *)v9);
}

  v19 = *(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 84));
  swift_beginAccess(v19 + 120, v12, 1LL, 0LL);
  *(_DWORD *)(v19 + 120) = v10;
  *(_BYTE *)(v19 + 124) = 0;
  free((void *)v9);
}

  v19 = *(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 84));
  swift_beginAccess(v19 + 128, v12, 1LL, 0LL);
  *(_DWORD *)(v19 + 128) = v10;
  *(_BYTE *)(v19 + 132) = 0;
  free((void *)v9);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 136, v6, 1LL, 0LL);
  *(_DWORD *)(v13 + 136) = v4;
  *(_BYTE *)(v13 + 140) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 144, v6, 1LL, 0LL);
  *(_DWORD *)(v13 + 144) = v4;
  *(_BYTE *)(v13 + 148) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 152, v6, 1LL, 0LL);
  *(_DWORD *)(v13 + 152) = v4;
  *(_BYTE *)(v13 + 156) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 160, v6, 1LL, 0LL);
  *(_DWORD *)(v13 + 160) = v4;
  *(_BYTE *)(v13 + 164) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 168, v6, 1LL, 0LL);
  *(_DWORD *)(v13 + 168) = v4;
  *(_BYTE *)(v13 + 172) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 176, v6, 1LL, 0LL);
  *(_DWORD *)(v13 + 176) = v4;
  *(_BYTE *)(v13 + 180) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 184, v6, 1LL, 0LL);
  *(_DWORD *)(v13 + 184) = v4;
  *(_BYTE *)(v13 + 188) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 192, v6, 1LL, 0LL);
  *(_DWORD *)(v13 + 192) = v4;
  *(_BYTE *)(v13 + 196) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 200, v6, 1LL, 0LL);
  *(_DWORD *)(v13 + 200) = v4;
  *(_BYTE *)(v13 + 204) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 208, v6, 1LL, 0LL);
  *(_DWORD *)(v13 + 208) = v4;
  *(_BYTE *)(v13 + 212) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 216, v6, 1LL, 0LL);
  *(_DWORD *)(v13 + 216) = v4;
  *(_BYTE *)(v13 + 220) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 224, v6, 1LL, 0LL);
  *(_DWORD *)(v13 + 224) = v4;
  *(_BYTE *)(v13 + 228) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 232, v6, 1LL, 0LL);
  *(_DWORD *)(v13 + 232) = v4;
  *(_BYTE *)(v13 + 236) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 240, v6, 1LL, 0LL);
  *(_DWORD *)(v13 + 240) = v4;
  *(_BYTE *)(v13 + 244) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 248, v6, 1LL, 0LL);
  *(_DWORD *)(v13 + 248) = v4;
  *(_BYTE *)(v13 + 252) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 256, v6, 1LL, 0LL);
  *(_DWORD *)(v13 + 256) = v4;
  *(_BYTE *)(v13 + 260) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 264, v6, 1LL, 0LL);
  *(_DWORD *)(v13 + 264) = v4;
  *(_BYTE *)(v13 + 268) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 272, v6, 1LL, 0LL);
  *(_DWORD *)(v13 + 272) = v4;
  *(_BYTE *)(v13 + 276) = 0;
  free((void *)v3);
}

  uint64_t v13 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 280, v6, 1LL, 0LL);
  *(_DWORD *)(v13 + 280) = v4;
  *(_BYTE *)(v13 + 284) = 0;
  free((void *)v3);
}

  swift_beginAccess(v14, v6, 1LL, 0LL);
  *uint64_t v14 = v4;
  free((void *)v3);
}

    uint64_t v4 = 0LL;
    uint64_t v7 = a2;
  }

  return result;
}

    uint64_t v6 = 0LL;
    uint64_t v11 = a2;
  }

  return result;
}

  swift_beginAccess(v14, v6, 1LL, 0LL);
  *uint64_t v14 = v4;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 16, v6, 1LL, 0LL);
  *(void *)(v14 + 16) = v4;
  *(_BYTE *)(v14 + 24) = 0;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 32, v6, 1LL, 0LL);
  *(void *)(v14 + 32) = v4;
  *(_BYTE *)(v14 + 40) = 0;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v14 + 44, v6, 1LL, 0LL);
  *(_DWORD *)(v14 + 44) = v4;
  *(_BYTE *)(v14 + 48) = 0;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v14 + 52, v6, 1LL, 0LL);
  *(_DWORD *)(v14 + 52) = v4;
  *(_BYTE *)(v14 + 56) = 0;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v14 + 60, v6, 1LL, 0LL);
  *(_DWORD *)(v14 + 60) = v4;
  *(_BYTE *)(v14 + 64) = 0;
  free((void *)v3);
}

  uint64_t v14 = (_BYTE *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 88LL);
  swift_beginAccess(v14, v6, 1LL, 0LL);
  *uint64_t v14 = v4;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 96, v6, 1LL, 0LL);
  *(void *)(v14 + 96) = v4;
  *(_BYTE *)(v14 + 104) = 0;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 112, v6, 1LL, 0LL);
  *(void *)(v14 + 112) = v4;
  *(_BYTE *)(v14 + 120) = 0;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v14 + 124, v6, 1LL, 0LL);
  *(_DWORD *)(v14 + 124) = v4;
  *(_BYTE *)(v14 + 128) = 0;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 16, v6, 1LL, 0LL);
  *(void *)(v14 + 16) = v4;
  *(_BYTE *)(v14 + 24) = 0;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v14 + 28, v6, 1LL, 0LL);
  *(_DWORD *)(v14 + 28) = v4;
  *(_BYTE *)(v14 + 32) = 0;
  free((void *)v3);
}

  uint64_t v14 = (_BYTE *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 33LL);
  swift_beginAccess(v14, v6, 1LL, 0LL);
  *uint64_t v14 = v4;
  free((void *)v3);
}

  swift_beginAccess(v14, v6, 1LL, 0LL);
  *uint64_t v14 = v4;
  free((void *)v3);
}

  uint64_t v14 = (_BYTE *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 16LL);
  swift_beginAccess(v14, v6, 1LL, 0LL);
  *uint64_t v14 = v4;
  free((void *)v3);
}

  uint64_t v14 = (_BYTE *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 17LL);
  swift_beginAccess(v14, v6, 1LL, 0LL);
  *uint64_t v14 = v4;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 24, v6, 1LL, 0LL);
  *(void *)(v14 + 24) = v4;
  *(_BYTE *)(v14 + 32) = 0;
  free((void *)v3);
}

  v16 = (_BYTE *)(*(void *)(*(void *)(v5 + 72) + *(int *)(v5 + 80)) + *a3);
  swift_beginAccess(v16, v8, 1LL, 0LL);
  char *v16 = v6;
  free((void *)v5);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess(v14 + 16, v6, 1LL, 0LL);
  *(_BYTE *)(v14 + 16) = v4;
  free((void *)v3);
}

  uint64_t v14 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v14 + 20, v6, 1LL, 0LL);
  *(_DWORD *)(v14 + 20) = v4;
  *(_BYTE *)(v14 + 24) = 0;
  free((void *)v3);
}

  uint64_t v14 = (_BYTE *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 25LL);
  swift_beginAccess(v14, v6, 1LL, 0LL);
  *uint64_t v14 = v4;
  free((void *)v3);
}

    uint64_t v4 = 0LL;
    uint64_t v7 = a2;
  }

  return result;
}

BOOL sub_1000057AC()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL) + 20));
  swift_beginAccess(v1 + 16, v3, 0LL, 0LL);
  return (*(_BYTE *)(v1 + 24) & 1) == 0;
}

uint64_t sub_1000057FC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10000ADF0(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 16, v10, 1LL, 0LL);
  *(void *)(v8 + 16) = 0LL;
  *(_BYTE *)(v8 + 24) = 1;
  return result;
}

uint64_t sub_10000589C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL) + 20));
  swift_beginAccess(v1 + 28, v3, 0LL, 0LL);
  if (*(_BYTE *)(v1 + 32)) {
    return 0LL;
  }
  else {
    return *(unsigned int *)(v1 + 28);
  }
}

uint64_t sub_1000058F0(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_10000ADF0(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 28, v12, 1LL, 0LL);
  *(_DWORD *)(v10 + 28) = a1;
  *(_BYTE *)(v10 + 32) = 0;
  return result;
}

void (*sub_100005998(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 28, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)(v5 + 28);
  if (*(_BYTE *)(v5 + 32)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_100005A18;
}

void sub_100005A18(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_10000ADF0(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_100005AEC()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL) + 20));
  swift_beginAccess(v1 + 28, v3, 0LL, 0LL);
  return (*(_BYTE *)(v1 + 32) & 1) == 0;
}

uint64_t sub_100005B3C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10000ADF0(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 28, v10, 1LL, 0LL);
  *(_DWORD *)(v8 + 28) = 0;
  *(_BYTE *)(v8 + 32) = 1;
  return result;
}

uint64_t sub_100005BDC()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL) + 20));
  swift_beginAccess(v1 + 33, v3, 0LL, 0LL);
  if (*(_BYTE *)(v1 + 33) == 7) {
    return 0LL;
  }
  else {
    return *(unsigned __int8 *)(v1 + 33);
  }
}

uint64_t sub_100005C2C(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_10000ADF0(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 33, v12, 1LL, 0LL);
  *(_BYTE *)(v10 + 33) = a1;
  return result;
}

void (*sub_100005CD0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 33, v3, 0LL, 0LL);
  int v6 = *(unsigned __int8 *)(v5 + 33);
  if (v6 == 7) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_100005D4C;
}

void sub_100005D4C(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_10000ADF0(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_100005E20()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL) + 20));
  swift_beginAccess(v1 + 33, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 33) != 7;
}

uint64_t sub_100005E70()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10000ADF0(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 33, v10, 1LL, 0LL);
  *(_BYTE *)(v8 + 33) = 7;
  return result;
}

uint64_t sub_100005F0C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000060F8( &qword_100350F28,  &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse,  type metadata accessor for Proto_Gpsd_Response,  (void (*)(void))sub_10023A7E8,  a1);
}

uint64_t sub_100005F30(uint64_t a1)
{
  return sub_100006EAC( a1,  &qword_100350F28,  type metadata accessor for Proto_Gpsd_Response,  &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse);
}

void (*sub_100005F4C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100350F28);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gpsd_Response(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100350F28);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    sub_10023A7E8((uint64_t)v9);
    sub_100015764((uint64_t)v5, &qword_100350F28);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gpsd_Response);
  }

  return sub_100006080;
}

void sub_100006080(uint64_t a1, char a2)
{
}

BOOL sub_10000609C()
{
  return sub_100006434( &qword_100350F28,  &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse,  type metadata accessor for Proto_Gpsd_Response);
}

uint64_t sub_1000060B8()
{
  return sub_100006530( &qword_100350F28,  type metadata accessor for Proto_Gpsd_Response,  &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse);
}

uint64_t sub_1000060D4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000060F8( &qword_100350F30,  &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication,  type metadata accessor for Proto_Gpsd_Indication,  (void (*)(void))sub_10024289C,  a1);
}

uint64_t sub_1000060F8@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t (*a3)(void)@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = sub_100003A0C(a1);
  __chkstk_darwin(v11);
  uint64_t v13 = &v18[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v14 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL) + 20)) + *a2;
  swift_beginAccess(v14, v18, 0LL, 0LL);
  sub_10000E6C0(v14, (uint64_t)v13, a1);
  uint64_t v15 = a3(0LL);
  a4();
  return sub_100015764((uint64_t)v13, a1);
}

uint64_t sub_100006200(uint64_t a1)
{
  return sub_100006EAC( a1,  &qword_100350F30,  type metadata accessor for Proto_Gpsd_Indication,  &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication);
}

void (*sub_10000621C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100350F30);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gpsd_Indication(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100350F30);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    sub_10024289C((uint64_t)v9);
    sub_100015764((uint64_t)v5, &qword_100350F30);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gpsd_Indication);
  }

  return sub_100006350;
}

void sub_100006350(uint64_t a1, char a2)
{
}

void sub_10000636C(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void), void *a5)
{
  size_t v8 = *(void **)a1;
  uint64_t v9 = *(void **)(*(void *)a1 + 40LL);
  uint64_t v10 = *(void **)(*(void *)a1 + 48LL);
  uint64_t v11 = *(void **)(*(void *)a1 + 32LL);
  if ((a2 & 1) != 0)
  {
    sub_10000404C((uint64_t)v10, (uint64_t)v9, a4);
    sub_100006EAC((uint64_t)v9, a3, a4, a5);
    sub_100004090((uint64_t)v10, a4);
  }

  else
  {
    sub_100006EAC((uint64_t)v10, a3, a4, a5);
  }

  free(v10);
  free(v9);
  free(v11);
  free(v8);
}

BOOL sub_100006418()
{
  return sub_100006434( &qword_100350F30,  &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication,  type metadata accessor for Proto_Gpsd_Indication);
}

BOOL sub_100006434(uint64_t *a1, void *a2, uint64_t (*a3)(void))
{
  uint64_t v7 = sub_100003A0C(a1);
  __chkstk_darwin(v7);
  uint64_t v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = *(void *)(v3 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL) + 20)) + *a2;
  swift_beginAccess(v10, v15, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v9, a1);
  uint64_t v11 = a3(0LL);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v9, 1LL, v11) != 1;
  sub_100015764((uint64_t)v9, a1);
  return v12;
}

uint64_t sub_100006514()
{
  return sub_100006530( &qword_100350F30,  type metadata accessor for Proto_Gpsd_Indication,  &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication);
}

uint64_t sub_100006530(uint64_t *a1, uint64_t (*a2)(void), void *a3)
{
  uint64_t v7 = v3;
  uint64_t v8 = sub_100003A0C(a1);
  __chkstk_darwin(v8);
  uint64_t v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v11)) & 1) == 0)
  {
    uint64_t v12 = *(void *)(v3 + v11);
    uint64_t v13 = type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0LL);
    uint64_t v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    uint64_t v15 = swift_retain(v12);
    sub_10000ADF0(v15);
    uint64_t v16 = *(void *)(v7 + v11);
    *(void *)(v7 + v11) = v14;
    swift_release(v16);
  }

  uint64_t v17 = *(void *)(v7 + v11);
  uint64_t v18 = a2(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v10, 1LL, 1LL, v18);
  uint64_t v19 = v17 + *a3;
  swift_beginAccess(v19, v22, 33LL, 0LL);
  swift_retain(v17);
  sub_10000E5D4((uint64_t)v10, v19, a1);
  swift_endAccess(v22);
  return swift_release(v17);
}

uint64_t sub_100006664@<X0>(uint64_t a1@<X8>)
{
  return sub_100006A3C( &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse,  a1);
}

uint64_t sub_100006670(uint64_t a1)
{
  return sub_100006EAC( a1,  &qword_100350F38,  type metadata accessor for CLP_LogEntry_AONLoc_Response,  &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse);
}

void (*sub_10000668C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100350F38);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Response(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100350F38);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 5;
    uint64_t v11 = &v9[v6[6]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    v9[v6[7]] = 10;
    sub_100015764((uint64_t)v5, &qword_100350F38);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  }

  return sub_1000067EC;
}

void sub_1000067EC(uint64_t a1, char a2)
{
}

BOOL sub_100006808()
{
  return sub_100006434( &qword_100350F38,  &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse,  type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t sub_100006824()
{
  return sub_100006530( &qword_100350F38,  type metadata accessor for CLP_LogEntry_AONLoc_Response,  &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse);
}

uint64_t sub_100006840@<X0>(void *a1@<X8>)
{
  return sub_100006D60( &qword_100350F40,  &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication,  type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication,  a1);
}

uint64_t sub_10000685C(uint64_t a1)
{
  return sub_100006EAC( a1,  &qword_100350F40,  type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication,  &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication);
}

void (*sub_100006878(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100350F40);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100350F40);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    void *v9 = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    uint64_t v11 = (char *)v9 + *(int *)(v6 + 24);
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    *((_BYTE *)v9 + *(int *)(v6 + 28)) = 2;
    sub_100015764((uint64_t)v5, &qword_100350F40);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  }

  return sub_1000069DC;
}

void sub_1000069DC(uint64_t a1, char a2)
{
}

BOOL sub_1000069F8()
{
  return sub_100006434( &qword_100350F40,  &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication,  type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t sub_100006A14()
{
  return sub_100006530( &qword_100350F40,  type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication,  &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication);
}

uint64_t sub_100006A30@<X0>(uint64_t a1@<X8>)
{
  return sub_100006A3C( &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse,  a1);
}

uint64_t sub_100006A3C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100003A0C(&qword_100350F38);
  __chkstk_darwin(v5);
  uint64_t v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v8 = *(void *)(v2 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL) + 20)) + *a1;
  swift_beginAccess(v8, v13, 0LL, 0LL);
  sub_10000E6C0(v8, (uint64_t)v7, &qword_100350F38);
  uint64_t v9 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Response(0LL);
  UnknownStorage.init()();
  *(_BYTE *)(a2 + v9[5]) = 5;
  uint64_t v10 = a2 + v9[6];
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  *(_BYTE *)(a2 + v9[7]) = 10;
  return sub_100015764((uint64_t)v7, &qword_100350F38);
}

uint64_t sub_100006B74(uint64_t a1)
{
  return sub_100006EAC( a1,  &qword_100350F38,  type metadata accessor for CLP_LogEntry_AONLoc_Response,  &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse);
}

void (*sub_100006B90(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100350F38);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Response(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100350F38);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 5;
    uint64_t v11 = &v9[v6[6]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    v9[v6[7]] = 10;
    sub_100015764((uint64_t)v5, &qword_100350F38);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  }

  return sub_100006CF0;
}

void sub_100006CF0(uint64_t a1, char a2)
{
}

BOOL sub_100006D0C()
{
  return sub_100006434( &qword_100350F38,  &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse,  type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t sub_100006D28()
{
  return sub_100006530( &qword_100350F38,  type metadata accessor for CLP_LogEntry_AONLoc_Response,  &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse);
}

uint64_t sub_100006D44@<X0>(void *a1@<X8>)
{
  return sub_100006D60( &qword_100350F48,  OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication,  type metadata accessor for CLP_LogEntry_AONLoc_BtIndication,  a1);
}

uint64_t sub_100006D60@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t (*a3)(void)@<X2>, void *a4@<X8>)
{
  uint64_t v9 = sub_100003A0C(a1);
  __chkstk_darwin(v9);
  uint64_t v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v12 = *(void *)(v4 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL) + 20)) + *a2;
  swift_beginAccess(v12, v17, 0LL, 0LL);
  sub_10000E6C0(v12, (uint64_t)v11, a1);
  uint64_t v13 = a3(0LL);
  *a4 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  uint64_t v14 = (char *)a4 + *(int *)(v13 + 24);
  *(void *)uint64_t v14 = 0LL;
  v14[8] = 1;
  *((_BYTE *)a4 + *(int *)(v13 + 28)) = 2;
  return sub_100015764((uint64_t)v11, a1);
}

uint64_t sub_100006E90(uint64_t a1)
{
  return sub_100006EAC( a1,  &qword_100350F48,  type metadata accessor for CLP_LogEntry_AONLoc_BtIndication,  OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication);
}

uint64_t sub_100006EAC(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), void *a4)
{
  uint64_t v8 = v4;
  uint64_t v10 = sub_100003A0C(a2);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = &v27[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v11);
  uint64_t v15 = &v27[-v14 - 8];
  uint64_t v16 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v4 + v16)) & 1) == 0)
  {
    uint64_t v17 = *(void *)(v4 + v16);
    uint64_t v18 = type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0LL);
    uint64_t v19 = swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
    uint64_t v20 = swift_retain(v17);
    sub_10000ADF0(v20);
    uint64_t v21 = *(void *)(v8 + v16);
    *(void *)(v8 + v16) = v19;
    swift_release(v21);
  }

  uint64_t v22 = *(void *)(v8 + v16);
  sub_100003E68(a1, (uint64_t)v15, a3);
  uint64_t v23 = a3(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v15, 0LL, 1LL, v23);
  sub_10000E590((uint64_t)v15, (uint64_t)v13, a2);
  uint64_t v24 = v22 + *a4;
  swift_beginAccess(v24, v27, 33LL, 0LL);
  swift_retain(v22);
  sub_10000E5D4((uint64_t)v13, v24, a2);
  swift_endAccess(v27);
  return swift_release(v22);
}

void (*sub_10000702C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100350F48);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100350F48);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    void *v9 = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    uint64_t v11 = (char *)v9 + *(int *)(v6 + 24);
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    *((_BYTE *)v9 + *(int *)(v6 + 28)) = 2;
    sub_100015764((uint64_t)v5, &qword_100350F48);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
  }

  return sub_100007190;
}

void sub_100007190(uint64_t a1, char a2)
{
}

BOOL sub_1000071AC()
{
  return sub_100006434( &qword_100350F48,  OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication,  type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t sub_1000071C8()
{
  return sub_100006530( &qword_100350F48,  type metadata accessor for CLP_LogEntry_AONLoc_BtIndication,  OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication);
}

uint64_t sub_1000071E8(char a1)
{
  return qword_1002B4218[a1];
}

BOOL sub_1000071FC(char *a1, char *a2)
{
  return qword_1002B4218[*a1] == qword_1002B4218[*a2];
}

Swift::Int sub_100007220(uint64_t a1, uint64_t a2)
{
  char v7 = *v2;
  Hasher.init(_seed:)(v6, 0LL);
  dispatch thunk of Hashable.hash(into:)(v6, a1, a2);
  return Hasher._finalize()();
}

uint64_t sub_100007280(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10001558C();
  return Enum.hash(into:)(a1, a2, v4);
}

Swift::Int sub_1000072B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v8 = *v3;
  Hasher.init(_seed:)(v7, a1);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

uint64_t sub_100007314@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10000E618(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100007338()
{
  return qword_1002B4218[*v0];
}

uint64_t sub_10000734C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10000E618(*a1);
  *a2 = result;
  return result;
}

void sub_100007374(void *a1@<X8>)
{
  *a1 = qword_1002B4218[*v1];
}

uint64_t sub_10000738C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL) + 20);
  if (qword_10036BB80 != -1) {
    swift_once(&qword_10036BB80, sub_10000AC88);
  }
  uint64_t v3 = qword_10036BB88;
  *(void *)(a1 + v2) = qword_10036BB88;
  return swift_retain(v3);
}

uint64_t sub_1000073EC()
{
  if (qword_10036BB80 != -1) {
    swift_once(&qword_10036BB80, sub_10000AC88);
  }
  return swift_retain(qword_10036BB88);
}

_UNKNOWN **sub_10000742C()
{
  return &off_10033DA50;
}

void sub_100007438(void *a1@<X8>)
{
  *a1 = &off_10033DA50;
}

uint64_t sub_100007448@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100350F50);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_100350F50);
  char v7 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v7[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  *(_BYTE *)(a1 + v7[8]) = 5;
  uint64_t v11 = a1 + v7[9];
  uint64_t v12 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
  uint64_t v13 = a1 + v7[10];
  uint64_t v14 = type metadata accessor for Proto_Gpsd_Request(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
  return sub_100015764((uint64_t)v5, &qword_100350F50);
}

uint64_t sub_1000075BC(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0LL) + 20);
  sub_100015764(v3, &qword_100350F50);
  sub_100003E68(a1, v3, type metadata accessor for CLP_LogEntry_AONLoc_Request);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 0LL, 1LL, v4);
}

void (*sub_10000762C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100350F50);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100350F50);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    v9[v6[8]] = 5;
    uint64_t v14 = &v9[v6[9]];
    uint64_t v15 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v14, 1LL, 1LL, v15);
    uint64_t v16 = &v9[v6[10]];
    uint64_t v17 = type metadata accessor for Proto_Gpsd_Request(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v16, 1LL, 1LL, v17);
    sub_100015764((uint64_t)v5, &qword_100350F50);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_Request);
  }

  return sub_1000077E0;
}

void sub_1000077E0(uint64_t a1, char a2)
{
}

BOOL sub_1000077F4()
{
  uint64_t v1 = sub_100003A0C(&qword_100350F50);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0LL);
  sub_10000E6C0(v0 + *(int *)(v4 + 20), (uint64_t)v3, &qword_100350F50);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v3, 1LL, v5) != 1;
  sub_100015764((uint64_t)v3, &qword_100350F50);
  return v6;
}

uint64_t sub_1000078A8()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0LL) + 20);
  sub_100015764(v1, &qword_100350F50);
  uint64_t v2 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
}

uint64_t sub_100007900@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100350F58);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_100350F58);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL);
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (qword_10036BB80 != -1) {
    swift_once(&qword_10036BB80, sub_10000AC88);
  }
  uint64_t v9 = qword_10036BB88;
  *(void *)(a1 + v8) = qword_10036BB88;
  swift_retain(v9);
  return sub_100015764((uint64_t)v5, &qword_100350F58);
}

uint64_t sub_100007A18(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0LL) + 24);
  sub_100015764(v3, &qword_100350F58);
  sub_100003E68(a1, v3, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 0LL, 1LL, v4);
}

void (*sub_100007A88(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100350F58);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100350F58);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = *(int *)(v6 + 20);
    if (qword_10036BB80 != -1) {
      swift_once(&qword_10036BB80, sub_10000AC88);
    }
    uint64_t v12 = qword_10036BB88;
    *(void *)&v9[v11] = qword_10036BB88;
    swift_retain(v12);
    sub_100015764((uint64_t)v5, &qword_100350F58);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  }

  return sub_100007BE0;
}

void sub_100007BE0(uint64_t a1, char a2)
{
}

void sub_100007BF4(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(int *)(*(void *)a1 + 48LL);
  size_t v8 = *(void **)(*(void *)a1 + 32LL);
  uint64_t v9 = *(void **)(*(void *)a1 + 40LL);
  uint64_t v10 = *(void *)(*(void *)a1 + 16LL);
  uint64_t v11 = *(void *)(*(void *)a1 + 24LL);
  uint64_t v12 = *(void **)(*(void *)a1 + 8LL);
  uint64_t v13 = **(void **)a1 + v7;
  if ((a2 & 1) != 0)
  {
    sub_10000404C(*(void *)(*(void *)a1 + 40LL), (uint64_t)v8, a4);
    sub_100015764(v13, a3);
    sub_100003E68((uint64_t)v8, v13, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v13, 0LL, 1LL, v10);
    sub_100004090((uint64_t)v9, a4);
  }

  else
  {
    sub_100015764(**(void **)a1 + v7, a3);
    sub_100003E68((uint64_t)v9, v13, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v13, 0LL, 1LL, v10);
  }

  free(v9);
  free(v8);
  free(v12);
  free(v6);
}

BOOL sub_100007CF4()
{
  uint64_t v1 = sub_100003A0C(&qword_100350F58);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0LL);
  sub_10000E6C0(v0 + *(int *)(v4 + 24), (uint64_t)v3, &qword_100350F58);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v3, 1LL, v5) != 1;
  sub_100015764((uint64_t)v3, &qword_100350F58);
  return v6;
}

uint64_t sub_100007DA8()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0LL) + 24);
  sub_100015764(v1, &qword_100350F58);
  uint64_t v2 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
}

uint64_t sub_100007E00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(a1, v1, v3);
}

uint64_t sub_100007E38(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40LL))(v1, a1, v3);
}

uint64_t sub_100007E70@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0LL);
  uint64_t v3 = a1 + *(int *)(v2 + 20);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  uint64_t v5 = a1 + *(int *)(v2 + 24);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
}

uint64_t sub_100007EF8@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_AONLoc_Request, a1);
}

uint64_t sub_100007F04@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_AONLoc_Indication, a1);
}

void *sub_100007F10()
{
  return &unk_10033D9A0;
}

unint64_t sub_100007F1C()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_100007F38()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003691B0);
  sub_10000E704(v0, (uint64_t)qword_1003691B0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 6 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32E0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "mach_continuous_time_ns";
  *(void *)(v9 + 8) = 23LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "process_id";
  *(void *)(v13 + 8) = 10LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "transaction_id";
  *((void *)v15 + 1) = 14LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 4LL;
  *(void *)uint64_t v17 = "type";
  *((void *)v17 + 1) = 4LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 6LL;
  *(void *)uint64_t v19 = "result_options";
  *((void *)v19 + 1) = 14LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  *uint64_t v20 = 11LL;
  *(void *)uint64_t v21 = "gpsd_request";
  *((void *)v21 + 1) = 12LL;
  v21[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100008174()
{
  return sub_100008C30(&qword_10036BB40, (uint64_t)qword_1003691B0, (uint64_t)sub_100007F38);
}

uint64_t sub_100008190@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036BB40, (uint64_t)qword_1003691B0, (uint64_t)sub_100007F38, a1);
}

uint64_t sub_1000081AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v16 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
          uint64_t v15 = v9;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v3 + *(int *)(v16 + 20), a2, a3);
          goto LABEL_6;
        case 2LL:
          uint64_t v17 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL) + 24);
          goto LABEL_13;
        case 3LL:
          uint64_t v17 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL) + 28);
LABEL_13:
          uint64_t v15 = v9;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + v17, a2, a3);
          goto LABEL_6;
        case 4LL:
          uint64_t v18 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL) + 32);
          unint64_t v19 = sub_1000155D0();
          uint64_t v15 = v9;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v18,  &type metadata for CLP_LogEntry_AONLoc_Request.TypeEnum,  v19,  a2,  a3);
          goto LABEL_6;
        case 6LL:
          uint64_t v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL) + 36);
          uint64_t v11 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
          uint64_t v12 = sub_10000FD98( &qword_100351028,  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions,  (uint64_t)&unk_1002B37AC);
          uint64_t v13 = v10;
          uint64_t v14 = v11;
          goto LABEL_5;
        case 11LL:
          uint64_t v20 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL) + 40);
          uint64_t v21 = type metadata accessor for Proto_Gpsd_Request(0LL);
          uint64_t v12 = sub_10000FD98(&qword_100351798, type metadata accessor for Proto_Gpsd_Request, (uint64_t)&unk_1002DA980);
          uint64_t v13 = v20;
          uint64_t v14 = v21;
LABEL_5:
          uint64_t v15 = v9;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v13, v14, v12, a2, a3);
LABEL_6:
          uint64_t v9 = v15;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_100008388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  uint64_t v10 = (int *)result;
  uint64_t v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(void *)v11, 1LL, a2, a3);
  }
  if (!v4)
  {
    uint64_t v12 = (unsigned int *)(v5 + v10[6]);
    if ((v12[1] & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v12, 2LL, a2, a3);
    }
    uint64_t v13 = (unsigned int *)(v5 + v10[7]);
    if ((v13[1] & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v13, 3LL, a2, a3);
    }
    if (*(_BYTE *)(v5 + v10[8]) != 5)
    {
      char v15 = *(_BYTE *)(v5 + v10[8]);
      unint64_t v14 = sub_1000155D0();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v15,  4LL,  &type metadata for CLP_LogEntry_AONLoc_Request.TypeEnum,  v14,  a2,  a3);
    }

    sub_100008510(v5, a1, a2, a3);
    sub_100008684(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_100008510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100350F18);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 36), (uint64_t)v8, &qword_100350F18);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  uint64_t v15 = sub_10000FD98( &qword_100351028,  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions,  (uint64_t)&unk_1002B37AC);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 6LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

uint64_t sub_100008684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100350F20);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Proto_Gpsd_Request(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 40), (uint64_t)v8, &qword_100350F20);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for Proto_Gpsd_Request);
  uint64_t v15 = sub_10000FD98(&qword_100351798, type metadata accessor for Proto_Gpsd_Request, (uint64_t)&unk_1002DA980);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 11LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for Proto_Gpsd_Request);
}

Swift::Int sub_1000087FC()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_AONLoc_Request,  &qword_100350F60,  (uint64_t)&unk_1002B371C);
}

uint64_t sub_100008818@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[6];
  uint64_t v5 = a2 + a1[5];
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + 8) = 1;
  uint64_t v6 = a2 + v4;
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  uint64_t v7 = a1[8];
  uint64_t v8 = a2 + a1[7];
  *(_BYTE *)(v8 + 4) = 1;
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(a2 + v7) = 5;
  uint64_t v9 = a2 + a1[9];
  uint64_t v10 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  uint64_t v11 = a2 + a1[10];
  uint64_t v12 = type metadata accessor for Proto_Gpsd_Request(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))( v11,  1LL,  1LL,  v12);
}

uint64_t sub_1000088D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000081AC(a1, a2, a3);
}

uint64_t sub_1000088E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100008388(a1, a2, a3);
}

uint64_t sub_100008900(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98(&qword_1003516C8, type metadata accessor for CLP_LogEntry_AONLoc_Request, (uint64_t)&unk_1002B3694);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100008954@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036BB40, (uint64_t)qword_1003691B0, (uint64_t)sub_100007F38, a1);
}

uint64_t sub_100008970(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( (unint64_t *)&qword_100351010,  type metadata accessor for CLP_LogEntry_AONLoc_Request,  (uint64_t)&unk_1002B361C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000089B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( (unint64_t *)&qword_100351010,  type metadata accessor for CLP_LogEntry_AONLoc_Request,  (uint64_t)&unk_1002B361C);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_100008A0C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003691C8);
  sub_10000E704(v0, (uint64_t)qword_1003691C8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32F0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "PROTOBUF_DEFAULT";
  *(void *)(v9 + 8) = 16LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "UPDATE_RESULT_OPTIONS";
  *(void *)(v13 + 8) = 21LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  unint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *unint64_t v14 = 11LL;
  *(void *)uint64_t v15 = "GNSS_REQUEST";
  *((void *)v15 + 1) = 12LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 21LL;
  *(void *)uint64_t v17 = "WIFI_RESULT";
  *((void *)v17 + 1) = 11LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 31LL;
  *(void *)uint64_t v18 = "BT_RESULT";
  *(void *)(v18 + 8) = 9LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100008C14()
{
  return sub_100008C30(&qword_10036BB48, (uint64_t)qword_1003691C8, (uint64_t)sub_100008A0C);
}

uint64_t sub_100008C30(void *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v4 = type metadata accessor for _NameMap(0LL);
  return sub_10000E704(v4, a2);
}

uint64_t sub_100008C70@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036BB48, (uint64_t)qword_1003691C8, (uint64_t)sub_100008A0C, a1);
}

uint64_t sub_100008C8C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v6 = type metadata accessor for _NameMap(0LL);
  uint64_t v7 = sub_10000E704(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a4, v7, v6);
}

uint64_t sub_100008CF4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036BB48, (uint64_t)qword_1003691C8, (uint64_t)sub_100008A0C, a1);
}

uint64_t sub_100008D10@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v6 = type metadata accessor for _NameMap(0LL);
  uint64_t v7 = sub_10000E704(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a4, v7, v6);
}

void sub_100008D7C()
{
  v0._countAndFlagsBits = 0x4F746C757365522ELL;
  v0._object = (void *)0xEE00736E6F697470LL;
  String.append(_:)(v0);
  qword_1003691E0 = 0xD00000000000001BLL;
  *(void *)algn_1003691E8 = 0x80000001002E02D0LL;
}

uint64_t *sub_100008DF0()
{
  if (qword_10036BB50 != -1) {
    swift_once(&qword_10036BB50, sub_100008D7C);
  }
  return &qword_1003691E0;
}

uint64_t sub_100008E30()
{
  if (qword_10036BB50 != -1) {
    swift_once(&qword_10036BB50, sub_100008D7C);
  }
  uint64_t v0 = qword_1003691E0;
  swift_bridgeObjectRetain(*(void *)algn_1003691E8);
  return v0;
}

uint64_t sub_100008E8C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003691F0);
  sub_10000E704(v0, (uint64_t)qword_1003691F0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v29 = swift_allocObject(v1, v6 + 10 * v4, v5 | 7);
  *(_OWORD *)(v29 + 16) = xmmword_1002B3300;
  uint64_t v7 = v29 + v6;
  uint64_t v8 = v29 + v6 + *(int *)(v2 + 48);
  *(void *)(v29 + v6) = 1LL;
  *(void *)uint64_t v8 = "repeat";
  *(void *)(v8 + 8) = 6LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v29 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "batch_size";
  *(void *)(v12 + 8) = 10LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v29 + v6 + 2 * v4);
  unint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 3LL;
  *(void *)unint64_t v14 = "repeat_interval_sec";
  *((void *)v14 + 1) = 19LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v29 + v6 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *uint64_t v15 = 4LL;
  *(void *)uint64_t v16 = "max_age_sec";
  *((void *)v16 + 1) = 11LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v29 + v6 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "minimal_rssi_db";
  *((void *)v18 + 1) = 15LL;
  v18[16] = 2;
  v11();
  unint64_t v19 = (void *)(v29 + v6 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *unint64_t v19 = 6LL;
  *(void *)uint64_t v20 = "bt_types";
  *((void *)v20 + 1) = 8LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v29 + v6 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  *uint64_t v21 = 7LL;
  *(void *)uint64_t v22 = "wifi_bands";
  *((void *)v22 + 1) = 10LL;
  v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v29 + v6 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  *uint64_t v23 = 8LL;
  *(void *)uint64_t v24 = "channels";
  *((void *)v24 + 1) = 8LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v29 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 11LL;
  *(void *)uint64_t v25 = "start_cfa_time_sec";
  *(void *)(v25 + 8) = 18LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  v26 = (void *)(v29 + v6 + 9 * v4);
  v27 = (char *)v26 + *(int *)(v2 + 48);
  void *v26 = 12LL;
  *(void *)v27 = "end_cfa_time_sec";
  *((void *)v27 + 1) = 16LL;
  v27[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v29);
}

uint64_t sub_1000091A4()
{
  return sub_100008C30(&qword_10036BB58, (uint64_t)qword_1003691F0, (uint64_t)sub_100008E8C);
}

uint64_t sub_1000091C0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036BB58, (uint64_t)qword_1003691F0, (uint64_t)sub_100008E8C, a1);
}

uint64_t sub_1000091DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v10 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + *(int *)(v10 + 32), a2, a3);
          goto LABEL_18;
        case 2LL:
          uint64_t v12 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + *(int *)(v12 + 36), a2, a3);
          goto LABEL_18;
        case 3LL:
          uint64_t v13 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL) + 40);
          goto LABEL_9;
        case 4LL:
          uint64_t v13 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL) + 44);
LABEL_9:
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + v13, a2, a3);
          goto LABEL_18;
        case 5LL:
          uint64_t v14 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularSInt32Field(value:)(v3 + *(int *)(v14 + 48), a2, a3);
          goto LABEL_18;
        case 6LL:
          unint64_t v15 = sub_10000FD10();
          uint64_t v16 = v3;
          uint64_t v17 = &type metadata for CLP_LogEntry_AONLoc_BtAdvertisement.BtType;
          goto LABEL_13;
        case 7LL:
          unint64_t v15 = sub_10000FD54();
          uint64_t v16 = v3 + 8;
          uint64_t v17 = &type metadata for CLP_LogEntry_PrivateData_WifiRfBand;
LABEL_13:
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)(v16, v17, v15, a2, a3);
          goto LABEL_18;
        case 8LL:
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeRepeatedInt32Field(value:)(v3 + 16, a2, a3);
          goto LABEL_18;
        case 11LL:
          uint64_t v18 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL) + 52);
          goto LABEL_17;
        case 12LL:
          uint64_t v18 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL) + 56);
LABEL_17:
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v18, a2, a3);
LABEL_18:
          uint64_t v9 = v11;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000093BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  uint64_t v9 = (int *)result;
  int v10 = *((unsigned __int8 *)v3 + *(int *)(result + 32));
  if (v10 != 2) {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v10 & 1, 1LL, a2, a3);
  }
  if (!v4)
  {
    uint64_t v11 = (unsigned int *)((char *)v3 + v9[9]);
    if ((v11[1] & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v11, 2LL, a2, a3);
    }
    uint64_t v12 = (float *)((char *)v3 + v9[10]);
    if (((_BYTE)v12[1] & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(3LL, a2, a3, *v12);
    }
    uint64_t v13 = (float *)((char *)v3 + v9[11]);
    if (((_BYTE)v13[1] & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(4LL, a2, a3, *v13);
    }
    sub_100009610((uint64_t)v3, a1, a2, a3);
    uint64_t v14 = *v3;
    if (*(void *)(*v3 + 16LL))
    {
      unint64_t v15 = sub_10000FD10();
      dispatch thunk of Visitor.visitRepeatedEnumField<A>(value:fieldNumber:)( v14,  6LL,  &type metadata for CLP_LogEntry_AONLoc_BtAdvertisement.BtType,  v15,  a2,  a3);
    }

    uint64_t v16 = v3[1];
    if (*(void *)(v16 + 16))
    {
      unint64_t v17 = sub_10000FD54();
      dispatch thunk of Visitor.visitRepeatedEnumField<A>(value:fieldNumber:)( v16,  7LL,  &type metadata for CLP_LogEntry_PrivateData_WifiRfBand,  v17,  a2,  a3);
    }

    if (*(void *)(v3[2] + 16LL)) {
      dispatch thunk of Visitor.visitRepeatedInt32Field(value:fieldNumber:)();
    }
    sub_100009684((uint64_t)v3, a1, a2, a3);
    sub_1000096F8((uint64_t)v3, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_100009610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  char v8 = (unsigned int *)(a1 + *(int *)(result + 48));
  if ((v8[1] & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularSInt32Field(value:fieldNumber:)(*v8, 5LL, a3, a4);
  }
  return result;
}

uint64_t sub_100009684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  uint64_t v8 = a1 + *(int *)(result + 52);
  if ((*(_BYTE *)(v8 + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(11LL, a3, a4, *(double *)v8);
  }
  return result;
}

uint64_t sub_1000096F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  uint64_t v8 = a1 + *(int *)(result + 56);
  if ((*(_BYTE *)(v8 + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(12LL, a3, a4, *(double *)v8);
  }
  return result;
}

Swift::Int sub_100009770()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions,  &qword_100350F78,  (uint64_t)&unk_1002B38AC);
}

uint64_t sub_10000978C@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  a2[1] = &_swiftEmptyArrayStorage;
  a2[2] = &_swiftEmptyArrayStorage;
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[9];
  *((_BYTE *)a2 + a1[8]) = 2;
  uint64_t v6 = (char *)a2 + v5;
  *(_DWORD *)uint64_t v6 = 0;
  v6[4] = 1;
  uint64_t v7 = a1[11];
  uint64_t v8 = (char *)a2 + a1[10];
  *(_DWORD *)uint64_t v8 = 0;
  v8[4] = 1;
  uint64_t v9 = (char *)a2 + v7;
  *(_DWORD *)uint64_t v9 = 0;
  v9[4] = 1;
  uint64_t v10 = a1[13];
  uint64_t v11 = (char *)a2 + a1[12];
  *(_DWORD *)uint64_t v11 = 0;
  v11[4] = 1;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)uint64_t v12 = 0LL;
  v12[8] = 1;
  uint64_t v13 = (char *)a2 + a1[14];
  *(void *)uint64_t v13 = 0LL;
  v13[8] = 1;
  return result;
}

uint64_t sub_10000982C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_10000986C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*sub_1000098AC())()
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000098C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000091DC(a1, a2, a3);
}

uint64_t sub_1000098D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000093BC(a1, a2, a3);
}

uint64_t sub_1000098E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003516C0,  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions,  (uint64_t)&unk_1002B3824);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100009938@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036BB58, (uint64_t)qword_1003691F0, (uint64_t)sub_100008E8C, a1);
}

uint64_t sub_100009954(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351028,  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions,  (uint64_t)&unk_1002B37AC);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100009994(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351028,  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions,  (uint64_t)&unk_1002B37AC);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000099E8()
{
  return &unk_10033D9B0;
}

unint64_t sub_1000099F4()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_100009A10()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369208);
  sub_10000E704(v0, (uint64_t)qword_100369208);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "request_type";
  *(void *)(v9 + 8) = 12LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "mach_continuous_time_ns";
  *((void *)v13 + 1) = 23LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "result_code";
  *(void *)(v14 + 8) = 11LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100009BA4()
{
  return sub_100008C30(&qword_10036BB60, (uint64_t)qword_100369208, (uint64_t)sub_100009A10);
}

uint64_t sub_100009BC0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036BB60, (uint64_t)qword_100369208, (uint64_t)sub_100009A10, a1);
}

uint64_t sub_100009BDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v14 = type metadata accessor for CLP_LogEntry_AONLoc_Response(0LL);
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v3 + *(int *)(v14 + 24), a2, a3);
      }

      else if (result == 1)
      {
        uint64_t v13 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0LL) + 20);
        unint64_t v10 = sub_1000155D0();
        uint64_t v11 = v13;
        uint64_t v12 = &type metadata for CLP_LogEntry_AONLoc_Request.TypeEnum;
        goto LABEL_5;
      }

LABEL_12:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    uint64_t v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0LL) + 28);
    unint64_t v10 = sub_100015698();
    uint64_t v11 = v9;
    uint64_t v12 = &type metadata for Proto_Gnss_Result;
LABEL_5:
    dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v11, v12, v10, a2, a3);
    goto LABEL_12;
  }

  return result;
}

    v51 = &qword_100354FF0;
    v52 = (uint64_t)v32;
LABEL_13:
    sub_100015764(v52, v51);
LABEL_14:
    v53 = v42;
LABEL_30:
    swift_release(v53);
    swift_release(v44);
    return 0LL;
  }

  v50 = v124;
  sub_10000E6C0((uint64_t)v32, v124, &qword_1003518B8);
  if (v47(v46, 1LL, v48) == 1)
  {
    swift_retain(v42);
    swift_retain(v40);
    sub_100015764((uint64_t)v37, &qword_1003518B8);
    sub_100004090(v50, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
    goto LABEL_12;
  }

  v54 = v120;
  sub_100003E68(v46, v120, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  swift_retain(v42);
  swift_retain(v40);
  v55 = sub_1000648A4(v50, v54);
  v56 = v50;
  v49 = v42;
  v57 = v55;
  sub_100004090(v54, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  sub_100015764((uint64_t)v37, &qword_1003518B8);
  v58 = v56;
  v44 = v40;
  sub_100004090(v58, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  sub_100015764((uint64_t)v32, &qword_1003518B8);
  if ((v57 & 1) == 0)
  {
    v53 = v49;
    goto LABEL_30;
  }

    v50 = &qword_100354FF0;
    v51 = (uint64_t)v30;
LABEL_27:
    sub_100015764(v51, v50);
    goto LABEL_28;
  }

  sub_10000E6C0((uint64_t)v30, (uint64_t)v34, &qword_1003518B8);
  if (v49(v48, 1LL, v24) == 1)
  {
    sub_100015764((uint64_t)v37, &qword_1003518B8);
    sub_100015764((uint64_t)v39, &qword_1003518B8);
    sub_100004090((uint64_t)v34, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
    goto LABEL_12;
  }

  sub_100003E68(v48, (uint64_t)v27, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  v52 = sub_1000648A4((uint64_t)v34, (uint64_t)v27);
  sub_100004090((uint64_t)v27, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  sub_100015764((uint64_t)v37, &qword_1003518B8);
  sub_100015764((uint64_t)v39, &qword_1003518B8);
  sub_100004090((uint64_t)v34, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  sub_100015764((uint64_t)v30, &qword_1003518B8);
  if ((v52 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_14:
  v54 = v83;
  v53 = v84;
  v55 = v95;
  sub_10000E6C0(v83 + *(int *)(v84 + 28), v95, &qword_1003518D0);
  v56 = v100;
  sub_10000E6C0(v101 + *(int *)(v53 + 28), v100, &qword_1003518D0);
  v57 = v97;
  v58 = v99;
  v59 = v99 + *(int *)(v97 + 48);
  sub_10000E6C0(v55, v99, &qword_1003518D0);
  sub_10000E6C0(v56, v59, &qword_1003518D0);
  v60 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v96 + 48);
  v61 = v98;
  if (v60(v58, 1LL, v98) == 1)
  {
    sub_100015764(v56, &qword_1003518D0);
    sub_100015764(v55, &qword_1003518D0);
    v62 = v60(v59, 1LL, v61);
    v64 = (uint64_t)v93;
    v63 = (uint64_t)v94;
    if (v62 != 1)
    {
LABEL_26:
      v50 = &qword_100354FE8;
      v51 = v58;
      goto LABEL_27;
    }

    sub_100015764(v58, &qword_1003518D0);
LABEL_20:
    v70 = v84;
    sub_10000E6C0(v54 + *(int *)(v84 + 32), v63, &qword_1003518D0);
    sub_10000E6C0(v101 + *(int *)(v70 + 32), v64, &qword_1003518D0);
    v58 = v91;
    v71 = v91 + *(int *)(v57 + 48);
    sub_10000E6C0(v63, v91, &qword_1003518D0);
    sub_10000E6C0(v64, v71, &qword_1003518D0);
    if (v60(v58, 1LL, v61) == 1)
    {
      sub_100015764(v64, &qword_1003518D0);
      sub_100015764(v63, &qword_1003518D0);
      if (v60(v71, 1LL, v61) == 1)
      {
        sub_100015764(v58, &qword_1003518D0);
LABEL_31:
        v76 = v87;
        v77 = v88;
        v78 = *(void (**)(char *, uint64_t, uint64_t))(v87 + 16);
        v79 = v85;
        v78(v85, v54, v88);
        v80 = v86;
        v78(v86, v101, v77);
        v81 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
        v72 = dispatch thunk of static Equatable.== infix(_:_:)(v79, v80, v77, v81);
        v82 = *(void (**)(char *, uint64_t))(v76 + 8);
        v82(v80, v77);
        v82(v79, v77);
        return v72 & 1;
      }

      goto LABEL_26;
    }

    v65 = v89;
    sub_10000E6C0(v58, v89, &qword_1003518D0);
    if (v60(v71, 1LL, v61) == 1)
    {
      sub_100015764(v64, &qword_1003518D0);
      v67 = v63;
      goto LABEL_25;
    }

    v74 = v90;
    sub_100003E68(v71, v90, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    v75 = sub_100064178(v65, v74);
    sub_100004090(v74, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    sub_100015764(v64, &qword_1003518D0);
    sub_100015764(v63, &qword_1003518D0);
    sub_100004090(v65, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    sub_100015764(v58, &qword_1003518D0);
    if ((v75 & 1) != 0) {
      goto LABEL_31;
    }
    goto LABEL_28;
  }

  v65 = v92;
  sub_10000E6C0(v58, v92, &qword_1003518D0);
  v66 = v60(v59, 1LL, v61);
  v64 = (uint64_t)v93;
  v63 = (uint64_t)v94;
  if (v66 == 1)
  {
    sub_100015764(v100, &qword_1003518D0);
    v67 = v55;
LABEL_25:
    sub_100015764(v67, &qword_1003518D0);
    sub_100004090(v65, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_26;
  }

  v68 = v90;
  sub_100003E68(v59, v90, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  v69 = sub_100064178(v65, v68);
  sub_100004090(v68, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  sub_100015764(v100, &qword_1003518D0);
  sub_100015764(v55, &qword_1003518D0);
  v54 = v83;
  sub_100004090(v65, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  sub_100015764(v99, &qword_1003518D0);
  if ((v69 & 1) != 0) {
    goto LABEL_20;
  }
LABEL_28:
  v72 = 0;
  return v72 & 1;
}

    v50 = &qword_100355058;
LABEL_13:
    v51 = (uint64_t)v31;
LABEL_21:
    sub_100015764(v51, v50);
    goto LABEL_22;
  }

  sub_10000E6C0((uint64_t)v31, (uint64_t)v35, &qword_100351880);
  if (v49(v48, 1LL, v25) == 1)
  {
    sub_100015764((uint64_t)v38, &qword_100351880);
    sub_100015764((uint64_t)v40, &qword_100351880);
    sub_100004090((uint64_t)v35, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
    goto LABEL_12;
  }

  sub_100003E68(v48, (uint64_t)v28, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  v52 = sub_100065C30((uint64_t)v35, (uint64_t)v28);
  sub_100004090((uint64_t)v28, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  sub_100015764((uint64_t)v38, &qword_100351880);
  sub_100015764((uint64_t)v40, &qword_100351880);
  sub_100004090((uint64_t)v35, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  sub_100015764((uint64_t)v31, &qword_100351880);
  if ((v52 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_15:
  v53 = v83;
  v54 = v103;
  sub_10000E6C0(v104 + *(int *)(v83 + 28), v103, &qword_100351888);
  v55 = v102;
  sub_10000E6C0(v105 + *(int *)(v53 + 28), v102, &qword_100351888);
  v56 = v101;
  v57 = v101 + *(int *)(v98 + 48);
  sub_10000E6C0(v54, v101, &qword_100351888);
  sub_10000E6C0(v55, v57, &qword_100351888);
  v58 = v100;
  v59 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v99 + 48);
  if (v59(v56, 1LL, v100) != 1)
  {
    v65 = v93;
    sub_10000E6C0(v56, v93, &qword_100351888);
    v66 = v59(v57, 1LL, v58);
    v62 = (uint64_t)v96;
    v61 = v97;
    v64 = (uint64_t)v94;
    v63 = (uint64_t)v95;
    if (v66 != 1)
    {
      v69 = v88;
      sub_100003E68(v57, v88, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
      v70 = sub_100060E08(v65, v69);
      sub_100004090(v69, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
      sub_100015764(v102, &qword_100351888);
      sub_100015764(v103, &qword_100351888);
      sub_100004090(v65, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
      sub_100015764(v56, &qword_100351888);
      if ((v70 & 1) == 0) {
        goto LABEL_22;
      }
      goto LABEL_25;
    }

    sub_100015764(v102, &qword_100351888);
    sub_100015764(v103, &qword_100351888);
    sub_100004090(v65, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
LABEL_20:
    v50 = &qword_100355050;
    v51 = v56;
    goto LABEL_21;
  }

  sub_100015764(v55, &qword_100351888);
  sub_100015764(v54, &qword_100351888);
  v60 = v59(v57, 1LL, v58);
  v62 = (uint64_t)v96;
  v61 = v97;
  v64 = (uint64_t)v94;
  v63 = (uint64_t)v95;
  if (v60 != 1) {
    goto LABEL_20;
  }
  sub_100015764(v56, &qword_100351888);
LABEL_25:
  v71 = v83;
  sub_10000E6C0(v104 + *(int *)(v83 + 32), v63, &qword_100351890);
  sub_10000E6C0(v105 + *(int *)(v71 + 32), v64, &qword_100351890);
  v31 = v92;
  v72 = (uint64_t)&v92[*(int *)(v89 + 48)];
  sub_10000E6C0(v63, (uint64_t)v92, &qword_100351890);
  sub_10000E6C0(v64, v72, &qword_100351890);
  v73 = v91;
  v74 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v90 + 48);
  if (v74((uint64_t)v31, 1LL, v91) == 1)
  {
    sub_100015764(v64, &qword_100351890);
    sub_100015764(v63, &qword_100351890);
    if (v74(v72, 1LL, v73) == 1)
    {
      sub_100015764((uint64_t)v31, &qword_100351890);
LABEL_32:
      v77 = v87;
      v78 = *(void (**)(char *, uint64_t, uint64_t))(v87 + 16);
      v79 = v85;
      v78(v85, v104, v61);
      v80 = v86;
      v78(v86, v105, v61);
      v81 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v67 = dispatch thunk of static Equatable.== infix(_:_:)(v79, v80, v61, v81);
      v82 = *(void (**)(char *, uint64_t))(v77 + 8);
      v82(v80, v61);
      v82(v79, v61);
      return v67 & 1;
    }

    goto LABEL_30;
  }

  sub_10000E6C0((uint64_t)v31, v62, &qword_100351890);
  if (v74(v72, 1LL, v73) == 1)
  {
    sub_100015764(v64, &qword_100351890);
    sub_100015764(v63, &qword_100351890);
    sub_100004090(v62, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
LABEL_30:
    v50 = &qword_100355048;
    goto LABEL_13;
  }

  v75 = v84;
  sub_100003E68(v72, v84, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  v76 = sub_100060510(v62, v75);
  sub_100004090(v75, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  sub_100015764(v64, &qword_100351890);
  sub_100015764(v63, &qword_100351890);
  sub_100004090(v62, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  sub_100015764((uint64_t)v31, &qword_100351890);
  if ((v76 & 1) != 0) {
    goto LABEL_32;
  }
LABEL_22:
  v67 = 0;
  return v67 & 1;
}

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    uint64_t v11 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0LL) + 28);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0LL);
    uint64_t v13 = (unint64_t *)&unk_100355278;
    uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture;
    unint64_t v15 = &unk_1002BAB20;
    goto LABEL_11;
  }

  return result;
}

    v42 = sub_100003A0C(&qword_100355660);
    memcpy(v35, v36, *(void *)(*(void *)(v42 - 8) + 64LL));
    goto LABEL_13;
  }

  if (v41)
  {
    sub_100004090((uint64_t)v35, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
    goto LABEL_12;
  }

  v43 = v118;
  v118((uint64_t)v35, (uint64_t)v36, v116);
  v35[*(int *)(v37 + 20)] = v36[*(int *)(v37 + 20)];
  v35[*(int *)(v37 + 24)] = v36[*(int *)(v37 + 24)];
LABEL_14:
  v44 = a3[8];
  v45 = (_BYTE *)(v117 + v44);
  v46 = (_BYTE *)(a2 + v44);
  v47 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL);
  v48 = *((void *)v47 - 1);
  v49 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v48 + 48);
  v50 = v49(v45, 1LL, v47);
  v51 = v49(v46, 1LL, v47);
  if (!v50)
  {
    if (v51)
    {
      sub_100004090((uint64_t)v45, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
      goto LABEL_20;
    }

    v43((uint64_t)v45, (uint64_t)v46, v116);
    v70 = v47[5];
    v71 = &v45[v70];
    v72 = &v46[v70];
    v73 = v114(&v45[v70], 1LL, v11);
    v74 = v114(v72, 1LL, v11);
    if (v73)
    {
      if (!v74)
      {
        (*(void (**)(char *, char *, uint64_t))(v115 + 16))(v71, v72, v116);
        v75 = v11[5];
        v76 = &v71[v75];
        v77 = &v72[v75];
        v78 = v77[8];
        *(void *)v76 = *(void *)v77;
        v76[8] = v78;
        v79 = v11[6];
        v80 = &v71[v79];
        v81 = &v72[v79];
        v82 = v81[8];
        *(void *)v80 = *(void *)v81;
        v80[8] = v82;
        v83 = v11[7];
        v84 = &v71[v83];
        v85 = &v72[v83];
        v86 = v85[8];
        *(void *)v84 = *(void *)v85;
        v84[8] = v86;
        (*(void (**)(char *, void, uint64_t, int *))(v113 + 56))(v71, 0LL, 1LL, v11);
LABEL_31:
        uint64_t v29 = v117;
        v45[v47[6]] = v46[v47[6]];
        v45[v47[7]] = v46[v47[7]];
        v45[v47[8]] = v46[v47[8]];
        v45[v47[9]] = v46[v47[9]];
        v45[v47[10]] = v46[v47[10]];
        v45[v47[11]] = v46[v47[11]];
        return v29;
      }
    }

    else
    {
      if (!v74)
      {
        v43((uint64_t)v71, (uint64_t)v72, v116);
        v101 = v11[5];
        v102 = &v71[v101];
        v103 = &v72[v101];
        v104 = v103[8];
        *(void *)v102 = *(void *)v103;
        v102[8] = v104;
        v105 = v11[6];
        v106 = &v71[v105];
        v107 = &v72[v105];
        v108 = v107[8];
        *(void *)v106 = *(void *)v107;
        v106[8] = v108;
        v109 = v11[7];
        v110 = &v71[v109];
        v111 = &v72[v109];
        v112 = v111[8];
        *(void *)v110 = *(void *)v111;
        v110[8] = v112;
        goto LABEL_31;
      }

      sub_100004090((uint64_t)v71, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    }

    v99 = sub_100003A0C(&qword_100355538);
    memcpy(v71, v72, *(void *)(*(void *)(v99 - 8) + 64LL));
    goto LABEL_31;
  }

  if (v51)
  {
LABEL_20:
    v57 = sub_100003A0C(&qword_100355668);
    memcpy(v45, v46, *(void *)(*(void *)(v57 - 8) + 64LL));
    return v29;
  }

  v52 = *(void (**)(char *, char *, uint64_t))(v115 + 16);
  v52(v45, v46, v116);
  v53 = v47[5];
  v54 = &v45[v53];
  v55 = &v46[v53];
  if (v114(&v46[v53], 1LL, v11))
  {
    v56 = sub_100003A0C(&qword_100355538);
    memcpy(v54, v55, *(void *)(*(void *)(v56 - 8) + 64LL));
  }

  else
  {
    v52(v54, v55, v116);
    v87 = v11[5];
    v88 = &v54[v87];
    v89 = &v55[v87];
    v90 = v89[8];
    *(void *)v88 = *(void *)v89;
    v88[8] = v90;
    v91 = v11[6];
    v92 = &v54[v91];
    v93 = &v55[v91];
    v94 = v93[8];
    *(void *)v92 = *(void *)v93;
    v92[8] = v94;
    v95 = v11[7];
    v96 = &v54[v95];
    v97 = &v55[v95];
    v98 = v97[8];
    *(void *)v96 = *(void *)v97;
    v96[8] = v98;
    (*(void (**)(char *, void, uint64_t, int *))(v113 + 56))(v54, 0LL, 1LL, v11);
  }

  v45[v47[6]] = v46[v47[6]];
  v45[v47[7]] = v46[v47[7]];
  v45[v47[8]] = v46[v47[8]];
  v45[v47[9]] = v46[v47[9]];
  v45[v47[10]] = v46[v47[10]];
  v45[v47[11]] = v46[v47[11]];
  (*(void (**)(_BYTE *, void, uint64_t, int *))(v48 + 56))(v45, 0LL, 1LL, v47);
  return v29;
}

    v38 = sub_100003A0C(&qword_100355660);
    memcpy(v31, v32, *(void *)(*(void *)(v38 - 8) + 64LL));
    goto LABEL_13;
  }

  if (v37)
  {
    sub_100004090((uint64_t)v31, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
    goto LABEL_12;
  }

  v39 = v102;
  v102((uint64_t)v31, (uint64_t)v32, v100);
  v31[*(int *)(v33 + 20)] = v32[*(int *)(v33 + 20)];
  v31[*(int *)(v33 + 24)] = v32[*(int *)(v33 + 24)];
LABEL_14:
  v40 = a3[8];
  v41 = (_BYTE *)(v101 + v40);
  v42 = (_BYTE *)(a2 + v40);
  v43 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL);
  v44 = *((void *)v43 - 1);
  v45 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v44 + 48);
  v46 = v45(v41, 1LL, v43);
  v47 = v45(v42, 1LL, v43);
  if (!v46)
  {
    if (v47)
    {
      sub_100004090((uint64_t)v41, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
      goto LABEL_20;
    }

    v39((uint64_t)v41, (uint64_t)v42, v100);
    v63 = v43[5];
    v64 = &v41[v63];
    v65 = &v42[v63];
    v66 = v98(&v41[v63], 1LL, v11);
    v67 = v98(v65, 1LL, v11);
    if (v66)
    {
      if (!v67)
      {
        (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v64, v65, v100);
        v68 = v11[5];
        v69 = &v64[v68];
        v70 = &v65[v68];
        *(void *)v69 = *(void *)v70;
        v69[8] = v70[8];
        v71 = v11[6];
        v72 = &v64[v71];
        v73 = &v65[v71];
        *(void *)v72 = *(void *)v73;
        v72[8] = v73[8];
        v74 = v11[7];
        v75 = &v64[v74];
        v76 = &v65[v74];
        *(void *)v75 = *(void *)v76;
        v75[8] = v76[8];
        (*(void (**)(char *, void, uint64_t, int *))(v97 + 56))(v64, 0LL, 1LL, v11);
LABEL_31:
        v26 = v101;
        v41[v43[6]] = v42[v43[6]];
        v41[v43[7]] = v42[v43[7]];
        v41[v43[8]] = v42[v43[8]];
        v41[v43[9]] = v42[v43[9]];
        v41[v43[10]] = v42[v43[10]];
        v41[v43[11]] = v42[v43[11]];
        return v26;
      }
    }

    else
    {
      if (!v67)
      {
        v39((uint64_t)v64, (uint64_t)v65, v100);
        v88 = v11[5];
        v89 = &v64[v88];
        v90 = &v65[v88];
        *(void *)v89 = *(void *)v90;
        v89[8] = v90[8];
        v91 = v11[6];
        v92 = &v64[v91];
        v93 = &v65[v91];
        *(void *)v92 = *(void *)v93;
        v92[8] = v93[8];
        v94 = v11[7];
        v95 = &v64[v94];
        v96 = &v65[v94];
        *(void *)v95 = *(void *)v96;
        v95[8] = v96[8];
        goto LABEL_31;
      }

      sub_100004090((uint64_t)v64, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    }

    v86 = sub_100003A0C(&qword_100355538);
    memcpy(v64, v65, *(void *)(*(void *)(v86 - 8) + 64LL));
    goto LABEL_31;
  }

  if (v47)
  {
LABEL_20:
    v53 = sub_100003A0C(&qword_100355668);
    memcpy(v41, v42, *(void *)(*(void *)(v53 - 8) + 64LL));
    return v26;
  }

  v48 = *(void (**)(char *, char *, uint64_t))(v99 + 32);
  v48(v41, v42, v100);
  v49 = v43[5];
  v50 = &v41[v49];
  v51 = &v42[v49];
  if (v98(&v42[v49], 1LL, v11))
  {
    v52 = sub_100003A0C(&qword_100355538);
    memcpy(v50, v51, *(void *)(*(void *)(v52 - 8) + 64LL));
  }

  else
  {
    v48(v50, v51, v100);
    v77 = v11[5];
    v78 = &v50[v77];
    v79 = &v51[v77];
    *(void *)v78 = *(void *)v79;
    v78[8] = v79[8];
    v80 = v11[6];
    v81 = &v50[v80];
    v82 = &v51[v80];
    *(void *)v81 = *(void *)v82;
    v81[8] = v82[8];
    v83 = v11[7];
    v84 = &v50[v83];
    v85 = &v51[v83];
    *(void *)v84 = *(void *)v85;
    v84[8] = v85[8];
    (*(void (**)(char *, void, uint64_t, int *))(v97 + 56))(v50, 0LL, 1LL, v11);
  }

  v41[v43[6]] = v42[v43[6]];
  v41[v43[7]] = v42[v43[7]];
  v41[v43[8]] = v42[v43[8]];
  v41[v43[9]] = v42[v43[9]];
  v41[v43[10]] = v42[v43[10]];
  v41[v43[11]] = v42[v43[11]];
  (*(void (**)(_BYTE *, void, uint64_t, int *))(v44 + 56))(v41, 0LL, 1LL, v43);
  return v26;
}

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    uint64_t v9 = v3 + *(int *)(type metadata accessor for Proto_Gpsd_Response(0LL) + 28);
    unint64_t v10 = sub_100015698();
    uint64_t v11 = v9;
    uint64_t v12 = &type metadata for Proto_Gnss_Result;
LABEL_5:
    dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v11, v12, v10, a2, a3);
    goto LABEL_12;
  }

  return result;
}

uint64_t sub_100009D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Response(0LL);
  uint64_t v10 = result;
  if (*(_BYTE *)(v5 + *(int *)(result + 20)) != 5)
  {
    char v14 = *(_BYTE *)(v5 + *(int *)(result + 20));
    unint64_t v11 = sub_1000155D0();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v14,  1LL,  &type metadata for CLP_LogEntry_AONLoc_Request.TypeEnum,  v11,  a2,  a3);
  }

  if (!v4)
  {
    uint64_t v12 = v5 + *(int *)(v10 + 24);
    if ((*(_BYTE *)(v12 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(void *)v12, 2LL, a2, a3);
    }
    if (*(_BYTE *)(v5 + *(int *)(v10 + 28)) != 10)
    {
      char v15 = *(_BYTE *)(v5 + *(int *)(v10 + 28));
      unint64_t v13 = sub_100015698();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v15,  3LL,  &type metadata for Proto_Gnss_Result,  v13,  a2,  a3);
    }

    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_100009E34()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_AONLoc_Response,  &qword_100350F80,  (uint64_t)&unk_1002B3A14);
}

uint64_t sub_100009E50@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 5;
  uint64_t v6 = a2 + v5;
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  *(_BYTE *)(a2 + a1[7]) = 10;
  return result;
}

uint64_t sub_100009E9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100009BDC(a1, a2, a3);
}

uint64_t sub_100009EB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100009D08(a1, a2, a3);
}

uint64_t sub_100009EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98(&qword_1003516B8, type metadata accessor for CLP_LogEntry_AONLoc_Response, (uint64_t)&unk_1002B398C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100009F14@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036BB60, (uint64_t)qword_100369208, (uint64_t)sub_100009A10, a1);
}

uint64_t sub_100009F30(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98(&qword_100351040, type metadata accessor for CLP_LogEntry_AONLoc_Response, (uint64_t)&unk_1002B3914);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100009F70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98(&qword_100351040, type metadata accessor for CLP_LogEntry_AONLoc_Response, (uint64_t)&unk_1002B3914);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100009FC0()
{
  return &unk_10033D9C0;
}

unint64_t sub_100009FCC()
{
  return 0xD000000000000022LL;
}

uint64_t sub_100009FE8(uint64_t a1)
{
  return sub_10000A000(a1, qword_100369220, (uint64_t)"wifi_notifications", 18LL);
}

uint64_t sub_10000A000(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v5, a2);
  sub_10000E704(v5, (uint64_t)a2);
  uint64_t v6 = sub_100003A0C(&qword_1003516F8);
  uint64_t v7 = sub_100003A0C(&qword_100351700);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (v10 + 32) & ~v10;
  uint64_t v12 = swift_allocObject(v6, v11 + 3 * v9, v10 | 7);
  *(_OWORD *)(v12 + 16) = xmmword_1002B3310;
  unint64_t v13 = (void *)(v12 + v11);
  uint64_t v14 = v12 + v11 + *(int *)(v7 + 48);
  *unint64_t v13 = 1LL;
  *(void *)uint64_t v14 = "mach_continuous_time_ns";
  *(void *)(v14 + 8) = 23LL;
  *(_BYTE *)(v14 + 16) = 2;
  uint64_t v15 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v16 = type metadata accessor for _NameMap.NameDescription(0LL);
  unint64_t v17 = *(void (**)(void))(*(void *)(v16 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v17)(v14, v15, v16);
  uint64_t v18 = (char *)v13 + v9 + *(int *)(v7 + 48);
  *(void *)((char *)v13 + v9) = 2LL;
  *(void *)uint64_t v18 = "is_last_batch";
  *((void *)v18 + 1) = 13LL;
  v18[16] = 2;
  v17();
  uint64_t v19 = (uint64_t)v13 + 2 * v9 + *(int *)(v7 + 48);
  *(void *)((char *)v13 + 2 * v9) = 11LL;
  *(void *)uint64_t v19 = a3;
  *(void *)(v19 + 8) = a4;
  *(_BYTE *)(v19 + 16) = 2;
  v17();
  return _NameMap.init(dictionaryLiteral:)(v12);
}

uint64_t sub_10000A190()
{
  return sub_100008C30(&qword_10036BB68, (uint64_t)qword_100369220, (uint64_t)sub_100009FE8);
}

uint64_t sub_10000A1AC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036BB68, (uint64_t)qword_100369220, (uint64_t)sub_100009FE8, a1);
}

uint64_t sub_10000A1C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000A44C( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  &qword_100350F88,  (uint64_t)&unk_1002C5CB0);
}

uint64_t sub_10000A1FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000A5D8( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  &qword_100350F88,  (uint64_t)&unk_1002C5CB0);
}

uint64_t sub_10000A230(uint64_t *a1, uint64_t *a2)
{
  return sub_10000E71C( a1,  a2,  type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  &qword_100351758,  (uint64_t)&unk_1002C5DF0) & 1;
}

Swift::Int sub_10000A268()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication,  &qword_100350F90,  (uint64_t)&unk_1002B3B7C);
}

uint64_t (*sub_10000A290())()
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_10000A2A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003516B0,  type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication,  (uint64_t)&unk_1002B3AF4);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10000A2F4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036BB68, (uint64_t)qword_100369220, (uint64_t)sub_100009FE8, a1);
}

uint64_t sub_10000A310(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351058,  type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication,  (uint64_t)&unk_1002B3A7C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10000A350(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351058,  type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication,  (uint64_t)&unk_1002B3A7C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10000A3A0()
{
  return &unk_10033D9D0;
}

unint64_t sub_10000A3AC()
{
  return 0xD000000000000020LL;
}

uint64_t sub_10000A3C8(uint64_t a1)
{
  return sub_10000A000(a1, qword_100369238, (uint64_t)"bt_notifications", 16LL);
}

uint64_t sub_10000A3E0()
{
  return sub_100008C30(&qword_10036BB70, (uint64_t)qword_100369238, (uint64_t)sub_10000A3C8);
}

uint64_t sub_10000A3FC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036BB70, (uint64_t)qword_100369238, (uint64_t)sub_10000A3C8, a1);
}

uint64_t sub_10000A418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000A44C( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_AONLoc_BtIndication,  type metadata accessor for CLP_LogEntry_AONLoc_BtNotification,  &qword_100350F98,  (uint64_t)&unk_1002D9B68);
}

uint64_t sub_10000A44C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v8)
  {
    while ((v16 & 1) == 0)
    {
      switch(result)
      {
        case 11LL:
          uint64_t v20 = a5(0LL);
          uint64_t v17 = sub_10000FD98(a6, a5, a7);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v7, v20, v17, a2, a3);
          break;
        case 2LL:
          uint64_t v19 = a4(0LL);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v7 + *(int *)(v19 + 28), a2, a3);
          break;
        case 1LL:
          uint64_t v18 = a4(0LL);
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v7 + *(int *)(v18 + 24), a2, a3);
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_10000A5A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000A5D8( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_AONLoc_BtIndication,  type metadata accessor for CLP_LogEntry_AONLoc_BtNotification,  &qword_100350F98,  (uint64_t)&unk_1002D9B68);
}

uint64_t sub_10000A5D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t v11 = v7;
  uint64_t result = a4(0LL);
  uint64_t v16 = result;
  uint64_t v17 = (uint64_t)v7 + *(int *)(result + 24);
  if ((*(_BYTE *)(v17 + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(void *)v17, 1LL, a2, a3);
  }
  if (!v8)
  {
    int v18 = *((unsigned __int8 *)v7 + *(int *)(v16 + 28));
    if (v18 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v18 & 1, 2LL, a2, a3);
    }
    uint64_t v19 = a7;
    uint64_t v20 = *v11;
    if (*(void *)(*v11 + 16))
    {
      uint64_t v22 = a5(0LL);
      uint64_t v21 = sub_10000FD98(a6, a5, v19);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v20, 11LL, v22, v21, a2, a3);
    }

    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_10000A724(uint64_t *a1, uint64_t *a2)
{
  return sub_10000E71C( a1,  a2,  type metadata accessor for CLP_LogEntry_AONLoc_BtIndication,  type metadata accessor for CLP_LogEntry_AONLoc_BtNotification,  &qword_100351750,  (uint64_t)&unk_1002D9CA8) & 1;
}

Swift::Int sub_10000A75C()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_AONLoc_BtIndication,  &qword_100350FA0,  (uint64_t)&unk_1002B3CE4);
}

uint64_t sub_10000A778@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = *(int *)(a1 + 28);
  uint64_t v6 = (char *)a2 + *(int *)(a1 + 24);
  *(void *)uint64_t v6 = 0LL;
  v6[8] = 1;
  *((_BYTE *)a2 + v5) = 2;
  return result;
}

uint64_t sub_10000A7CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_10000A80C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t sub_10000A84C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003516A8,  type metadata accessor for CLP_LogEntry_AONLoc_BtIndication,  (uint64_t)&unk_1002B3C5C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10000A89C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036BB70, (uint64_t)qword_100369238, (uint64_t)sub_10000A3C8, a1);
}

uint64_t sub_10000A8B8(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351070,  type metadata accessor for CLP_LogEntry_AONLoc_BtIndication,  (uint64_t)&unk_1002B3BE4);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10000A8F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351070,  type metadata accessor for CLP_LogEntry_AONLoc_BtIndication,  (uint64_t)&unk_1002B3BE4);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10000A948()
{
  return &unk_10033D9E0;
}

unint64_t sub_10000A954()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_10000A970()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369250);
  sub_10000E704(v0, (uint64_t)qword_100369250);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v27 = swift_allocObject(v1, v6 + 9 * v4, v5 | 7);
  *(_OWORD *)(v27 + 16) = xmmword_1002B3320;
  uint64_t v7 = v27 + v6;
  uint64_t v8 = v27 + v6 + *(int *)(v2 + 48);
  *(void *)(v27 + v6) = 1LL;
  *(void *)uint64_t v8 = "mach_continuous_time_ns";
  *(void *)(v8 + 8) = 23LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "transaction_id";
  *(void *)(v12 + 8) = 14LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  unint64_t v13 = (void *)(v7 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *unint64_t v13 = 3LL;
  *(void *)uint64_t v14 = "type";
  *((void *)v14 + 1) = 4LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v7 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *uint64_t v15 = 11LL;
  *(void *)uint64_t v16 = "gpsd_response";
  *((void *)v16 + 1) = 13LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v7 + 4 * v4);
  int v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 12LL;
  *(void *)int v18 = "gpsd_indication";
  *((void *)v18 + 1) = 15LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v7 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 21LL;
  *(void *)uint64_t v20 = "wifi_response";
  *((void *)v20 + 1) = 13LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v7 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  *uint64_t v21 = 22LL;
  *(void *)uint64_t v22 = "wifi_indication";
  *((void *)v22 + 1) = 15LL;
  v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v7 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  *uint64_t v23 = 31LL;
  *(void *)uint64_t v24 = "bt_response";
  *((void *)v24 + 1) = 11LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 32LL;
  *(void *)uint64_t v25 = "bt_indication";
  *(void *)(v25 + 8) = 13LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v27);
}

uint64_t sub_10000AC50()
{
  return sub_100008C30(&qword_10036BB78, (uint64_t)qword_100369250, (uint64_t)sub_10000A970);
}

uint64_t sub_10000AC6C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036BB78, (uint64_t)qword_100369250, (uint64_t)sub_10000A970, a1);
}

uint64_t sub_10000AC88()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0LL);
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  *(void *)(v1 + 16) = 0LL;
  *(_BYTE *)(v1 + 24) = 1;
  *(_DWORD *)(v1 + 28) = 0;
  *(_WORD *)(v1 + 32) = 1793;
  uint64_t v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  uint64_t v3 = type metadata accessor for Proto_Gpsd_Response(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 1LL, 1LL, v3);
  uint64_t v4 = v1
     + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  uint64_t v5 = type metadata accessor for Proto_Gpsd_Indication(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = v1
     + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_AONLoc_Response(0LL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL);
  v8(v6, 1LL, 1LL, v7);
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  uint64_t v10 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  v8( v1 + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse,  1LL,  1LL,  v7);
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication;
  uint64_t v12 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))( v11,  1LL,  1LL,  v12);
  qword_10036BB88 = v1;
  return result;
}

uint64_t sub_10000ADF0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100350F48);
  __chkstk_darwin(v4);
  uint64_t v54 = (uint64_t)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100003A0C(&qword_100350F40);
  __chkstk_darwin(v6);
  uint64_t v53 = (uint64_t)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100003A0C(&qword_100350F38);
  __chkstk_darwin(v8);
  uint64_t v52 = (uint64_t)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100003A0C(&qword_100350F30);
  __chkstk_darwin(v10);
  uint64_t v49 = (uint64_t)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100003A0C(&qword_100350F28);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v1 + 16) = 0LL;
  uint64_t v15 = (void *)(v1 + 16);
  *(_BYTE *)(v2 + 24) = 1;
  *(_DWORD *)(v2 + 28) = 0;
  *(_WORD *)(v2 + 32) = 1793;
  uint64_t v45 = v2 + 33;
  uint64_t v16 = v2
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  uint64_t v17 = type metadata accessor for Proto_Gpsd_Response(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v16, 1LL, 1LL, v17);
  uint64_t v18 = v2
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  uint64_t v46 = v2
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  uint64_t v19 = type metadata accessor for Proto_Gpsd_Indication(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v18, 1LL, 1LL, v19);
  uint64_t v20 = v2
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  uint64_t v47 = v2
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  uint64_t v21 = type metadata accessor for CLP_LogEntry_AONLoc_Response(0LL);
  uint64_t v22 = *(void (**)(void))(*(void *)(v21 - 8) + 56LL);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v22)(v20, 1LL, 1LL, v21);
  uint64_t v23 = v2
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  uint64_t v48 = v2
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  uint64_t v24 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56LL))(v23, 1LL, 1LL, v24);
  uint64_t v50 = v2
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse;
  v22();
  uint64_t v25 = v2
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication;
  uint64_t v51 = v2
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication;
  uint64_t v26 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))(v25, 1LL, 1LL, v26);
  swift_beginAccess(a1 + 16, v67, 0LL, 0LL);
  uint64_t v27 = *(void *)(a1 + 16);
  char v28 = *(_BYTE *)(a1 + 24);
  swift_beginAccess(v15, v66, 1LL, 0LL);
  *uint64_t v15 = v27;
  *(_BYTE *)(v2 + 24) = v28;
  swift_beginAccess(a1 + 28, v65, 0LL, 0LL);
  LODWORD(v15) = *(_DWORD *)(a1 + 28);
  LOBYTE(v27) = *(_BYTE *)(a1 + 32);
  swift_beginAccess(v2 + 28, v64, 1LL, 0LL);
  *(_DWORD *)(v2 + 28) = (_DWORD)v15;
  *(_BYTE *)(v2 + 32) = v27;
  swift_beginAccess(a1 + 33, v63, 0LL, 0LL);
  LOBYTE(v15) = *(_BYTE *)(a1 + 33);
  swift_beginAccess(v45, v62, 1LL, 0LL);
  *(_BYTE *)(v2 + 33) = (_BYTE)v15;
  uint64_t v29 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse,  &v61,  0LL,  0LL);
  sub_10000E6C0(v29, (uint64_t)v14, &qword_100350F28);
  swift_beginAccess(v16, v60, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v14, v16, &qword_100350F28);
  swift_endAccess(v60);
  uint64_t v30 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication,  v60,  0LL,  0LL);
  uint64_t v31 = v49;
  sub_10000E6C0(v30, v49, &qword_100350F30);
  uint64_t v32 = v46;
  swift_beginAccess(v46, v59, 33LL, 0LL);
  sub_10000E5D4(v31, v32, &qword_100350F30);
  swift_endAccess(v59);
  uint64_t v33 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse,  v59,  0LL,  0LL);
  uint64_t v34 = v52;
  sub_10000E6C0(v33, v52, &qword_100350F38);
  uint64_t v35 = v47;
  swift_beginAccess(v47, v58, 33LL, 0LL);
  sub_10000E5D4(v34, v35, &qword_100350F38);
  swift_endAccess(v58);
  uint64_t v36 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication,  v58,  0LL,  0LL);
  uint64_t v37 = v53;
  sub_10000E6C0(v36, v53, &qword_100350F40);
  uint64_t v38 = v48;
  swift_beginAccess(v48, v57, 33LL, 0LL);
  sub_10000E5D4(v37, v38, &qword_100350F40);
  swift_endAccess(v57);
  uint64_t v39 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse,  v57,  0LL,  0LL);
  sub_10000E6C0(v39, v34, &qword_100350F38);
  uint64_t v40 = v50;
  swift_beginAccess(v50, v56, 33LL, 0LL);
  sub_10000E5D4(v34, v40, &qword_100350F38);
  swift_endAccess(v56);
  uint64_t v41 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication,  v56,  0LL,  0LL);
  uint64_t v42 = v54;
  sub_10000E6C0(v41, v54, &qword_100350F48);
  swift_release(a1);
  uint64_t v43 = v51;
  swift_beginAccess(v51, v55, 33LL, 0LL);
  sub_10000E5D4(v42, v43, &qword_100350F48);
  swift_endAccess(v55);
  return v2;
}

uint64_t sub_10000B3C8()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_10000B480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v9)) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v3 + v9);
    uint64_t v11 = type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0LL);
    uint64_t v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v13 = swift_retain(v10);
    sub_10000ADF0(v13);
    uint64_t v14 = *(void *)(v6 + v9);
    *(void *)(v6 + v9) = v12;
    swift_release(v14);
  }

  uint64_t v15 = *(void *)(v6 + v9);
  swift_retain(v15);
  uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    uint64_t v31 = v15 + 33;
    uint64_t v29 = v15 + 28;
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1LL:
          swift_beginAccess(v15 + 16, v30, 33LL, 0LL);
          uint64_t v19 = v5;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v15 + 16, a2, a3);
          goto LABEL_19;
        case 2LL:
          swift_beginAccess(v29, v30, 33LL, 0LL);
          uint64_t v19 = v5;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v29, a2, a3);
          goto LABEL_19;
        case 3LL:
          uint64_t v20 = v31;
          swift_beginAccess(v31, v30, 33LL, 0LL);
          unint64_t v21 = sub_10001558C();
          uint64_t v19 = v5;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v20,  &type metadata for CLP_LogEntry_AONLoc_Indication.TypeEnum,  v21,  a2,  a3);
          goto LABEL_19;
        case 11LL:
          uint64_t v22 = v15
              + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse,  v30,  33LL,  0LL);
          uint64_t v23 = type metadata accessor for Proto_Gpsd_Response(0LL);
          uint64_t v24 = (unint64_t *)&unk_100351748;
          uint64_t v25 = type metadata accessor for Proto_Gpsd_Response;
          uint64_t v26 = &unk_1002DAB10;
          goto LABEL_18;
        case 12LL:
          uint64_t v22 = v15
              + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication,  v30,  33LL,  0LL);
          uint64_t v23 = type metadata accessor for Proto_Gpsd_Indication(0LL);
          uint64_t v24 = (unint64_t *)&unk_100351740;
          uint64_t v25 = type metadata accessor for Proto_Gpsd_Indication;
          uint64_t v26 = &unk_1002DAC78;
          goto LABEL_18;
        case 21LL:
          uint64_t v27 = OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
          goto LABEL_16;
        case 22LL:
          uint64_t v22 = v15
              + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication,  v30,  33LL,  0LL);
          uint64_t v23 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0LL);
          uint64_t v24 = &qword_100351058;
          uint64_t v25 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication;
          uint64_t v26 = &unk_1002B3A7C;
          goto LABEL_18;
        case 31LL:
          uint64_t v27 = OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse;
LABEL_16:
          uint64_t v22 = v15 + v27;
          swift_beginAccess(v15 + v27, v30, 33LL, 0LL);
          uint64_t v23 = type metadata accessor for CLP_LogEntry_AONLoc_Response(0LL);
          uint64_t v24 = &qword_100351040;
          uint64_t v25 = type metadata accessor for CLP_LogEntry_AONLoc_Response;
          uint64_t v26 = &unk_1002B3914;
          goto LABEL_18;
        case 32LL:
          uint64_t v22 = v15
              + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication[0];
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication[0],  v30,  33LL,  0LL);
          uint64_t v23 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0LL);
          uint64_t v24 = &qword_100351070;
          uint64_t v25 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication;
          uint64_t v26 = &unk_1002B3BE4;
LABEL_18:
          uint64_t v28 = sub_10000FD98(v24, v25, (uint64_t)v26);
          uint64_t v19 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v22, v23, v28, a2, a3);
LABEL_19:
          uint64_t v5 = v19;
          swift_endAccess(v30);
          break;
        default:
          break;
      }

      uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return swift_release(v15);
}

uint64_t sub_10000B800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL) + 20));
  swift_retain(v9);
  swift_beginAccess(v9 + 16, v12, 0LL, 0LL);
  if ((*(_BYTE *)(v9 + 24) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(void *)(v9 + 16), 1LL, a2, a3);
  }
  if (v4) {
    return swift_release(v9);
  }
  swift_beginAccess(v9 + 28, v13, 0LL, 0LL);
  if ((*(_BYTE *)(v9 + 32) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*(unsigned int *)(v9 + 28), 2LL, a2, a3);
  }
  swift_beginAccess(v9 + 33, v14, 0LL, 0LL);
  if (*(_BYTE *)(v9 + 33) != 7)
  {
    char v15 = *(_BYTE *)(v9 + 33);
    unint64_t v11 = sub_10001558C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v15,  3LL,  &type metadata for CLP_LogEntry_AONLoc_Indication.TypeEnum,  v11,  a2,  a3);
  }

  sub_10000BA2C(v9, a1, a2, a3);
  sub_10000BBB8(v9, a1, a2, a3);
  sub_10000BD44(v9, a1, a2, a3);
  sub_10000BED0(v9, a1, a2, a3);
  sub_10000C05C(v9, a1, a2, a3);
  sub_10000C1E8(v9, a1, a2, a3);
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10000BA2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100350F28);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for Proto_Gpsd_Response(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100350F28);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for Proto_Gpsd_Response);
  uint64_t v15 = sub_10000FD98(&qword_100351748, type metadata accessor for Proto_Gpsd_Response, (uint64_t)&unk_1002DAB10);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 11LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for Proto_Gpsd_Response);
}

uint64_t sub_10000BBB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100350F30);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for Proto_Gpsd_Indication(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100350F30);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for Proto_Gpsd_Indication);
  uint64_t v15 = sub_10000FD98(&qword_100351740, type metadata accessor for Proto_Gpsd_Indication, (uint64_t)&unk_1002DAC78);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 12LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for Proto_Gpsd_Indication);
}

uint64_t sub_10000BD44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100350F38);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_AONLoc_Response(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100350F38);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  uint64_t v15 = sub_10000FD98( &qword_100351040,  type metadata accessor for CLP_LogEntry_AONLoc_Response,  (uint64_t)&unk_1002B3914);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 21LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t sub_10000BED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100350F40);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100350F40);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  uint64_t v15 = sub_10000FD98( &qword_100351058,  type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication,  (uint64_t)&unk_1002B3A7C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 22LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t sub_10000C05C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100350F38);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_AONLoc_Response(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100350F38);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  uint64_t v15 = sub_10000FD98( &qword_100351040,  type metadata accessor for CLP_LogEntry_AONLoc_Response,  (uint64_t)&unk_1002B3914);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 31LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t sub_10000C1E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100350F48);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication[0];
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100350F48);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
  uint64_t v15 = sub_10000FD98( &qword_100351070,  type metadata accessor for CLP_LogEntry_AONLoc_BtIndication,  (uint64_t)&unk_1002B3BE4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 32LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

BOOL sub_10000C378(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0LL);
  uint64_t v131 = *(void *)(v4 - 8);
  uint64_t v132 = v4;
  __chkstk_darwin(v4);
  v128 = (uint64_t *)((char *)&v128 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v130 = sub_100003A0C(&qword_100351708);
  __chkstk_darwin(v130);
  uint64_t v133 = (uint64_t)&v128 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100003A0C(&qword_100350F48);
  uint64_t v8 = __chkstk_darwin(v7);
  v129 = (uint64_t *)((char *)&v128 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v8);
  v138 = (char *)&v128 - v10;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0LL);
  uint64_t v141 = *(void *)(v11 - 8);
  uint64_t v142 = v11;
  __chkstk_darwin(v11);
  v135 = (uint64_t *)((char *)&v128 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v140 = sub_100003A0C(&qword_100351710);
  __chkstk_darwin(v140);
  uint64_t v143 = (uint64_t)&v128 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100003A0C(&qword_100350F40);
  uint64_t v15 = __chkstk_darwin(v14);
  v137 = (uint64_t *)((char *)&v128 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v15);
  uint64_t v145 = (uint64_t)&v128 - v17;
  uint64_t v150 = type metadata accessor for CLP_LogEntry_AONLoc_Response(0LL);
  uint64_t v147 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  uint64_t v139 = (uint64_t)&v128 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v149 = sub_100003A0C(&qword_100351718);
  uint64_t v19 = __chkstk_darwin(v149);
  uint64_t v136 = (uint64_t)&v128 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v148 = (uint64_t)&v128 - v21;
  uint64_t v22 = sub_100003A0C(&qword_100350F38);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v134 = (uint64_t)&v128 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v23);
  v153 = (char *)&v128 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v144 = (uint64_t)&v128 - v28;
  __chkstk_darwin(v27);
  uint64_t v159 = (uint64_t)&v128 - v29;
  uint64_t v157 = type metadata accessor for Proto_Gpsd_Indication(0LL);
  uint64_t v155 = *(void *)(v157 - 8);
  __chkstk_darwin(v157);
  uint64_t v146 = (uint64_t)&v128 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v154 = sub_100003A0C(&qword_100351720);
  __chkstk_darwin(v154);
  uint64_t v158 = (uint64_t)&v128 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = sub_100003A0C(&qword_100350F30);
  uint64_t v33 = __chkstk_darwin(v32);
  uint64_t v151 = (uint64_t)&v128 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v33);
  uint64_t v156 = (uint64_t)&v128 - v35;
  uint64_t v160 = type metadata accessor for Proto_Gpsd_Response(0LL);
  uint64_t v36 = *(void *)(v160 - 8);
  __chkstk_darwin(v160);
  uint64_t v152 = (uint64_t)&v128 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = sub_100003A0C(&qword_100351728);
  __chkstk_darwin(v38);
  uint64_t v161 = (uint64_t)&v128 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = sub_100003A0C(&qword_100350F28);
  uint64_t v41 = __chkstk_darwin(v40);
  uint64_t v43 = (char *)&v128 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v41);
  uint64_t v45 = (char *)&v128 - v44;
  swift_beginAccess(a1 + 16, v180, 0LL, 0LL);
  uint64_t v46 = *(void *)(a1 + 16);
  uint64_t v162 = a1;
  LOBYTE(a1) = *(_BYTE *)(a1 + 24);
  swift_beginAccess(a2 + 16, v179, 0LL, 0LL);
  uint64_t v47 = a2;
  char v48 = *(_BYTE *)(a2 + 24);
  if ((a1 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 24)) {
      return 0LL;
    }
  }

  else
  {
    if (v46 != *(void *)(a2 + 16)) {
      char v48 = 1;
    }
    if ((v48 & 1) != 0) {
      return 0LL;
    }
  }

  uint64_t v49 = v162;
  swift_beginAccess(v162 + 28, v178, 0LL, 0LL);
  int v50 = *(_DWORD *)(v49 + 28);
  char v51 = *(_BYTE *)(v49 + 32);
  swift_beginAccess(v47 + 28, v177, 0LL, 0LL);
  char v52 = *(_BYTE *)(v47 + 32);
  if ((v51 & 1) != 0)
  {
    if (!*(_BYTE *)(v47 + 32)) {
      return 0LL;
    }
  }

  else
  {
    if (v50 != *(_DWORD *)(v47 + 28)) {
      char v52 = 1;
    }
    if ((v52 & 1) != 0) {
      return 0LL;
    }
  }

  uint64_t v53 = v162;
  swift_beginAccess(v162 + 33, v176, 0LL, 0LL);
  uint64_t v54 = *(char *)(v53 + 33);
  uint64_t v55 = v47;
  swift_beginAccess(v47 + 33, v175, 0LL, 0LL);
  uint64_t v56 = *(char *)(v47 + 33);
  if (v54 == 7)
  {
    if ((_DWORD)v56 != 7) {
      return 0LL;
    }
  }

  else if ((_DWORD)v56 == 7 || qword_1002B4218[v54] != qword_1002B4218[v56])
  {
    return 0LL;
  }

  uint64_t v57 = v53
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  swift_beginAccess( v53 + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse,  v174,  0LL,  0LL);
  sub_10000E6C0(v57, (uint64_t)v45, &qword_100350F28);
  uint64_t v58 = v47
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  swift_beginAccess( v47 + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse,  &v173,  0LL,  0LL);
  uint64_t v59 = v161;
  uint64_t v60 = v161 + *(int *)(v38 + 48);
  sub_10000E6C0((uint64_t)v45, v161, &qword_100350F28);
  sub_10000E6C0(v58, v60, &qword_100350F28);
  uint64_t v61 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
  uint64_t v62 = v160;
  if (v61(v59, 1LL, v160) == 1)
  {
    swift_retain(v53);
    swift_retain(v55);
    sub_100015764((uint64_t)v45, &qword_100350F28);
    if (v61(v60, 1LL, v62) == 1)
    {
      sub_100015764(v59, &qword_100350F28);
      uint64_t v63 = v53;
      goto LABEL_25;
    }

    goto LABEL_23;
  }

  sub_10000E6C0(v59, (uint64_t)v43, &qword_100350F28);
  if (v61(v60, 1LL, v62) == 1)
  {
    swift_retain(v53);
    swift_retain(v55);
    sub_100015764((uint64_t)v45, &qword_100350F28);
    sub_100004090((uint64_t)v43, type metadata accessor for Proto_Gpsd_Response);
LABEL_23:
    sub_100015764(v59, &qword_100351728);
    uint64_t v64 = v53;
LABEL_42:
    swift_release(v64);
    swift_release(v55);
    return 0LL;
  }

  uint64_t v65 = v152;
  sub_100003E68(v60, v152, type metadata accessor for Proto_Gpsd_Response);
  uint64_t v66 = sub_10000FD98(&qword_100351738, type metadata accessor for Proto_Gpsd_Response, (uint64_t)&unk_1002DAC50);
  swift_retain(v53);
  swift_retain(v55);
  uint64_t v67 = v59;
  uint64_t v63 = v53;
  char v68 = dispatch thunk of static Equatable.== infix(_:_:)(v43, v65, v62, v66);
  sub_100004090(v65, type metadata accessor for Proto_Gpsd_Response);
  sub_100015764((uint64_t)v45, &qword_100350F28);
  sub_100004090((uint64_t)v43, type metadata accessor for Proto_Gpsd_Response);
  sub_100015764(v67, &qword_100350F28);
  if ((v68 & 1) == 0)
  {
    uint64_t v64 = v63;
    goto LABEL_42;
  }

LABEL_25:
  uint64_t v69 = v63
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  swift_beginAccess( v63 + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication,  &v172,  0LL,  0LL);
  uint64_t v70 = v156;
  sub_10000E6C0(v69, v156, &qword_100350F30);
  uint64_t v71 = v55
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  swift_beginAccess( v55 + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication,  &v171,  0LL,  0LL);
  uint64_t v72 = v158;
  uint64_t v73 = v158 + *(int *)(v154 + 48);
  sub_10000E6C0(v70, v158, &qword_100350F30);
  sub_10000E6C0(v71, v73, &qword_100350F30);
  v74 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v155 + 48);
  uint64_t v75 = v157;
  if (v74(v72, 1LL, v157) == 1)
  {
    sub_100015764(v70, &qword_100350F30);
    int v76 = v74(v73, 1LL, v75);
    uint64_t v77 = (uint64_t)v153;
    uint64_t v78 = v159;
    if (v76 == 1)
    {
      sub_100015764(v72, &qword_100350F30);
      goto LABEL_34;
    }

    uint64_t v26 = 0;
    return v26 & 1;
  }

  if (!v24) {
    goto LABEL_25;
  }
  if (*v21 == *v23 && v22 == v24) {
    goto LABEL_23;
  }
  uint64_t v26 = 0;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22) & 1) != 0) {
    goto LABEL_23;
  }
  return v26 & 1;
}

    uint64_t v18 = 0;
  }

  return v18 & 1;
}

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    uint64_t result = v20;
  }

  uint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

LABEL_30:
    v81 = &qword_100351720;
LABEL_31:
    uint64_t v82 = v72;
LABEL_40:
    sub_100015764(v82, v81);
    goto LABEL_41;
  }

  uint64_t v79 = v151;
  sub_10000E6C0(v72, v151, &qword_100350F30);
  int v80 = v74(v73, 1LL, v75);
  uint64_t v78 = v159;
  if (v80 == 1)
  {
    sub_100015764(v70, &qword_100350F30);
    sub_100004090(v79, type metadata accessor for Proto_Gpsd_Indication);
    goto LABEL_30;
  }

  uint64_t v83 = v70;
  uint64_t v84 = v79;
  uint64_t v85 = v146;
  sub_100003E68(v73, v146, type metadata accessor for Proto_Gpsd_Indication);
  uint64_t v86 = sub_10000FD98(&qword_100351730, type metadata accessor for Proto_Gpsd_Indication, (uint64_t)&unk_1002DADB8);
  char v87 = dispatch thunk of static Equatable.== infix(_:_:)(v84, v85, v75, v86);
  sub_100004090(v85, type metadata accessor for Proto_Gpsd_Indication);
  sub_100015764(v83, &qword_100350F30);
  uint64_t v77 = (uint64_t)v153;
  sub_100004090(v84, type metadata accessor for Proto_Gpsd_Indication);
  sub_100015764(v72, &qword_100350F30);
  if ((v87 & 1) == 0)
  {
LABEL_41:
    uint64_t v64 = v162;
    goto LABEL_42;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t v101 = v164
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess( v164 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference,  &v171,  0LL,  0LL);
  uint64_t v102 = v152;
  sub_10000E6C0(v101, v152, &qword_100355670);
  uint64_t v103 = v52
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess( v52 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference,  &v170,  0LL,  0LL);
  v104 = v150;
  uint64_t v105 = v150 + *(int *)(v147 + 48);
  sub_10000E6C0(v102, v150, &qword_100355670);
  v106 = v103;
  unsigned int v107 = v104;
  sub_10000E6C0(v106, v105, &qword_100355670);
  v108 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v148 + 48);
  char v109 = v104;
  uint64_t v110 = v149;
  if (v108(v109, 1LL, v149) == 1)
  {
    sub_100015764(v102, &qword_100355670);
    if (v108(v105, 1LL, v110) == 1)
    {
      sub_100015764(v107, &qword_100355670);
      goto LABEL_41;
    }

    goto LABEL_35;
  }

  uint64_t v111 = v145;
  sub_10000E6C0(v107, v145, &qword_100355670);
  if (v108(v105, 1LL, v110) == 1)
  {
    sub_100015764(v152, &qword_100355670);
    sub_100004090(v111, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
LABEL_35:
    char v68 = &qword_10035C410;
    uint64_t v69 = v107;
    goto LABEL_36;
  }

  uint64_t v113 = v140;
  sub_100003E68(v105, v140, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  uint64_t v114 = sub_100117594(v111, v113);
  sub_100004090(v113, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  sub_100015764(v152, &qword_100355670);
  sub_100004090(v111, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  sub_100015764(v107, &qword_100355670);
  if ((v114 & 1) == 0) {
    goto LABEL_37;
  }
LABEL_41:
  uint64_t v115 = v164
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess( v164 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate,  &v169,  0LL,  0LL);
  uint64_t v116 = v146;
  sub_10000E6C0(v115, v146, &qword_100355540);
  char v117 = v52
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess( v52 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate,  &v168,  0LL,  0LL);
  uint64_t v118 = v144;
  uint64_t v119 = v144 + *(int *)(v141 + 48);
  sub_10000E6C0(v116, v144, &qword_100355540);
  uint64_t v120 = v117;
  uint64_t v121 = v118;
  sub_10000E6C0(v120, v119, &qword_100355540);
  uint64_t v122 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v142 + 48);
  uint64_t v123 = v118;
  v124 = v143;
  if (v122(v123, 1LL, v143) == 1)
  {
    sub_100015764(v116, &qword_100355540);
    v125 = v122(v119, 1LL, v124);
    v126 = v164;
    if (v125 == 1)
    {
      sub_100015764(v121, &qword_100355540);
      goto LABEL_48;
    }

    goto LABEL_46;
  }

  char v127 = v139;
  sub_10000E6C0(v121, v139, &qword_100355540);
  if (v122(v119, 1LL, v124) == 1)
  {
    sub_100015764(v146, &qword_100355540);
    sub_100004090(v127, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
    v126 = v164;
LABEL_46:
    sub_100015764(v121, &qword_10035C408);
    uint64_t v66 = v126;
    goto LABEL_38;
  }

  v128 = v138;
  sub_100003E68(v119, v138, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  v129 = sub_10011F4C0(v127, v128, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_100004090(v128, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_100015764(v146, &qword_100355540);
  sub_100004090(v127, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_100015764(v121, &qword_100355540);
  v126 = v164;
  if ((v129 & 1) == 0)
  {
    uint64_t v66 = v164;
    goto LABEL_38;
  }

    uint64_t v26 = v31;
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v10, *v23, v31);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v32, v10, v26);
    uint64_t v25 = 0LL;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v32, v25, 1LL, v31);
  }

  uint64_t v25 = 1LL;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v32, v25, 1LL, v31);
}

LABEL_34:
  uint64_t v88 = v162
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  swift_beginAccess( v162 + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse,  &v170,  0LL,  0LL);
  sub_10000E6C0(v88, v78, &qword_100350F38);
  uint64_t v89 = v55
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  swift_beginAccess( v55 + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse,  &v169,  0LL,  0LL);
  uint64_t v90 = v148;
  uint64_t v91 = v148 + *(int *)(v149 + 48);
  sub_10000E6C0(v78, v148, &qword_100350F38);
  sub_10000E6C0(v89, v91, &qword_100350F38);
  uint64_t v92 = v78;
  v93 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v147 + 48);
  uint64_t v94 = v150;
  if (v93(v90, 1LL, v150) == 1)
  {
    sub_100015764(v92, &qword_100350F38);
    if (v93(v91, 1LL, v94) == 1)
    {
      sub_100015764(v90, &qword_100350F38);
      goto LABEL_45;
    }

                    uint64_t v133 = &qword_100355098;
                    goto LABEL_42;
                  }

                  uint64_t v132 = v251;
                  sub_10000E6C0(v128, v251, &qword_100351808);
                  if (v131(v129, 1LL, v130) == 1)
                  {
                    sub_100015764(v271, &qword_100351808);
                    sub_100004090(v132, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
                    goto LABEL_34;
                  }

                  uint64_t v134 = v245;
                  sub_100003E68(v129, v245, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
                  v135 = sub_100062C2C( v132,  v134,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
                  sub_100004090(v134, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
                  sub_100015764(v271, &qword_100351808);
                  sub_100004090(v132, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
                  sub_100015764(v128, &qword_100351808);
                  if ((v135 & 1) != 0)
                  {
LABEL_36:
                    uint64_t v136 = v122
                         + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
                    swift_beginAccess( v122 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1,  &v286,  0LL,  0LL);
                    v137 = v252;
                    sub_10000E6C0(v136, v252, &qword_100351810);
                    v138 = v100
                         + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
                    swift_beginAccess( v100 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1,  &v285,  0LL,  0LL);
                    v128 = v249;
                    uint64_t v139 = v249 + *(int *)(v246 + 48);
                    sub_10000E6C0(v137, v249, &qword_100351810);
                    sub_10000E6C0(v138, v139, &qword_100351810);
                    uint64_t v140 = v248;
                    uint64_t v141 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v247 + 48);
                    if (v141(v128, 1LL, v248) == 1)
                    {
                      sub_100015764(v137, &qword_100351810);
                      uint64_t v142 = v141(v139, 1LL, v140);
                      uint64_t v143 = v250;
                      if (v142 == 1)
                      {
                        sub_100015764(v128, &qword_100351810);
                        goto LABEL_50;
                      }
                    }

                    else
                    {
                      uint64_t v144 = v243;
                      sub_10000E6C0(v128, v243, &qword_100351810);
                      uint64_t v145 = v141(v139, 1LL, v140);
                      uint64_t v143 = v250;
                      if (v145 != 1)
                      {
                        uint64_t v147 = v237;
                        sub_100003E68(v139, v237, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
                        uint64_t v148 = sub_100065554( v144,  v147,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
                        sub_100004090(v147, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
                        sub_100015764(v252, &qword_100351810);
                        sub_100004090(v144, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
                        sub_100015764(v128, &qword_100351810);
                        if ((v148 & 1) == 0) {
                          goto LABEL_44;
                        }
LABEL_50:
                        uint64_t v149 = v122
                             + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
                        swift_beginAccess( v122 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2,  &v284,  0LL,  0LL);
                        uint64_t v150 = v149;
                        uint64_t v151 = v244;
                        sub_10000E6C0(v150, v244, &qword_100351818);
                        uint64_t v152 = v100
                             + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
                        swift_beginAccess( v100 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2,  &v283,  0LL,  0LL);
                        v153 = v242;
                        uint64_t v154 = v242 + *(int *)(v239 + 48);
                        sub_10000E6C0(v151, v242, &qword_100351818);
                        sub_10000E6C0(v152, v154, &qword_100351818);
                        uint64_t v155 = v241;
                        uint64_t v156 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v240 + 48);
                        if (v156(v153, 1LL, v241) == 1)
                        {
                          sub_100015764(v151, &qword_100351818);
                          uint64_t v157 = v156(v154, 1LL, v155);
                          uint64_t v158 = (uint64_t)v238;
                          if (v157 == 1)
                          {
                            sub_100015764(v153, &qword_100351818);
                            goto LABEL_57;
                          }
                        }

                        else
                        {
                          uint64_t v159 = v236;
                          sub_10000E6C0(v153, v236, &qword_100351818);
                          uint64_t v160 = v156(v154, 1LL, v155);
                          uint64_t v158 = (uint64_t)v238;
                          if (v160 != 1)
                          {
                            uint64_t v161 = v154;
                            uint64_t v162 = v159;
                            uint64_t v163 = v231;
                            sub_100003E68( v161,  v231,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
                            LODWORD(v272) = sub_100065554( v162,  v163,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
                            sub_100004090(v163, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
                            sub_100015764(v244, &qword_100351818);
                            sub_100004090(v162, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
                            sub_100015764(v153, &qword_100351818);
                            if ((v272 & 1) == 0) {
                              goto LABEL_44;
                            }
LABEL_57:
                            uint64_t v164 = v122
                                 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
                            swift_beginAccess( v122 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1,  &v282,  0LL,  0LL);
                            sub_10000E6C0(v164, v143, &qword_100351820);
                            uint64_t v165 = v100
                                 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
                            swift_beginAccess( v100 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1,  &v281,  0LL,  0LL);
                            uint64_t v166 = v143;
                            uint64_t v167 = v235;
                            uint64_t v168 = v235 + *(int *)(v232 + 48);
                            sub_10000E6C0(v166, v235, &qword_100351820);
                            uint64_t v169 = v165;
                            v128 = v167;
                            sub_10000E6C0(v169, v168, &qword_100351820);
                            uint64_t v170 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v233 + 48);
                            uint64_t v171 = v167;
                            uint64_t v172 = v234;
                            if (v170(v171, 1LL, v234) == 1)
                            {
                              sub_100015764(v166, &qword_100351820);
                              if (v170(v168, 1LL, v172) == 1)
                              {
                                sub_100015764(v128, &qword_100351820);
LABEL_64:
                                v176 = v122
                                     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
                                swift_beginAccess( v122 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5,  &v280,  0LL,  0LL);
                                v177 = v230;
                                sub_10000E6C0(v176, v230, &qword_100351828);
                                v178 = v100
                                     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
                                swift_beginAccess( v100 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5,  &v279,  0LL,  0LL);
                                v179 = v228;
                                v180 = v228 + *(int *)(v225 + 48);
                                sub_10000E6C0(v177, v228, &qword_100351828);
                                v181 = v178;
                                v128 = v179;
                                sub_10000E6C0(v181, v180, &qword_100351828);
                                v182 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v226 + 48);
                                v183 = v179;
                                v184 = v227;
                                if (v182(v183, 1LL, v227) == 1)
                                {
                                  sub_100015764(v177, &qword_100351828);
                                  if (v182(v180, 1LL, v184) == 1)
                                  {
                                    sub_100015764(v128, &qword_100351828);
LABEL_71:
                                    v187 = v122
                                         + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
                                    swift_beginAccess( v122 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1,  &v278,  0LL,  0LL);
                                    v188 = v224;
                                    sub_10000E6C0(v187, v224, &qword_100351830);
                                    v189 = v100
                                         + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
                                    swift_beginAccess( v100 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1,  &v277,  0LL,  0LL);
                                    v190 = (uint64_t)v214;
                                    v191 = (uint64_t)&v214[*(int *)(v220 + 48)];
                                    sub_10000E6C0(v188, (uint64_t)v214, &qword_100351830);
                                    v192 = v189;
                                    v128 = v190;
                                    sub_10000E6C0(v192, v191, &qword_100351830);
                                    v193 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v221 + 48);
                                    v194 = v190;
                                    v195 = v222;
                                    if (v193(v194, 1LL, v222) == 1)
                                    {
                                      sub_100015764(v224, &qword_100351830);
                                      if (v193(v191, 1LL, v195) == 1)
                                      {
                                        sub_100015764(v128, &qword_100351830);
LABEL_78:
                                        v199 = v122
                                             + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
                                        swift_beginAccess( v122 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5,  &v276,  0LL,  0LL);
                                        v200 = v218;
                                        sub_10000E6C0(v199, v218, &qword_1003517F0);
                                        v201 = v100;
                                        v202 = v100
                                             + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
                                        swift_beginAccess( v100 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5,  &v275,  0LL,  0LL);
                                        v203 = v219;
                                        v204 = v219 + *(int *)(v273 + 48);
                                        sub_10000E6C0(v200, v219, &qword_1003517F0);
                                        sub_10000E6C0(v202, v204, &qword_1003517F0);
                                        v205 = v274;
                                        v206 = v211;
                                        if (v211(v203, 1LL, v274) == 1)
                                        {
                                          swift_release(v212);
                                          swift_release(v201);
                                          sub_100015764(v218, &qword_1003517F0);
                                          if (v206(v204, 1LL, v205) == 1)
                                          {
                                            sub_100015764(v219, &qword_1003517F0);
                                            return 1LL;
                                          }

                                          goto LABEL_83;
                                        }

                                        sub_10000E6C0(v219, v215, &qword_1003517F0);
                                        if (v206(v204, 1LL, v205) == 1)
                                        {
                                          swift_release(v212);
                                          swift_release(v201);
                                          sub_100015764(v218, &qword_1003517F0);
                                          sub_100004090( v215,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
LABEL_83:
                                          sub_100015764(v219, &qword_1003550B0);
                                          return 0LL;
                                        }

                                        v207 = v265;
                                        sub_100003E68( v204,  v265,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
                                        v208 = v215;
                                        v209 = sub_100065554( v215,  v207,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
                                        swift_release(v212);
                                        swift_release(v201);
                                        sub_100004090( v207,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
                                        sub_100015764(v218, &qword_1003517F0);
                                        sub_100004090( v208,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
                                        sub_100015764(v219, &qword_1003517F0);
                                        return (v209 & 1) != 0;
                                      }
                                    }

                                    else
                                    {
                                      v196 = v216;
                                      sub_10000E6C0(v128, v216, &qword_100351830);
                                      if (v193(v191, 1LL, v195) != 1)
                                      {
                                        v197 = (uint64_t)v213;
                                        sub_100003E68( v191,  (uint64_t)v213,  type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
                                        v198 = sub_1000628B0(v196, v197);
                                        sub_100004090( v197,  type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
                                        sub_100015764(v224, &qword_100351830);
                                        sub_100004090( v196,  type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
                                        sub_100015764((uint64_t)v214, &qword_100351830);
                                        if ((v198 & 1) != 0) {
                                          goto LABEL_78;
                                        }
                                        goto LABEL_44;
                                      }

                                      sub_100015764(v224, &qword_100351830);
                                      sub_100004090( v196,  type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
                                      v128 = (uint64_t)v214;
                                    }

                                    uint64_t v133 = &qword_100355070;
                                    goto LABEL_42;
                                  }
                                }

                                else
                                {
                                  sub_10000E6C0(v128, v158, &qword_100351828);
                                  if (v182(v180, 1LL, v184) != 1)
                                  {
                                    v185 = v217;
                                    sub_100003E68( v180,  v217,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
                                    v186 = sub_100061F38(v158, v185);
                                    sub_100004090( v185,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
                                    sub_100015764(v230, &qword_100351828);
                                    sub_100004090( v158,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
                                    sub_100015764(v128, &qword_100351828);
                                    if ((v186 & 1) == 0) {
                                      goto LABEL_44;
                                    }
                                    goto LABEL_71;
                                  }

                                  sub_100015764(v230, &qword_100351828);
                                  sub_100004090( v158,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
                                }

                                uint64_t v133 = &qword_100355078;
LABEL_42:
                                uint64_t v146 = v128;
LABEL_43:
                                sub_100015764(v146, v133);
                                goto LABEL_44;
                              }
                            }

                            else
                            {
                              uint64_t v173 = v229;
                              sub_10000E6C0(v128, v229, &qword_100351820);
                              if (v170(v168, 1LL, v172) != 1)
                              {
                                v174 = v223;
                                sub_100003E68( v168,  v223,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
                                v175 = sub_100065554( v173,  v174,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
                                sub_100004090( v174,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
                                sub_100015764(v250, &qword_100351820);
                                sub_100004090( v173,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
                                sub_100015764(v128, &qword_100351820);
                                if ((v175 & 1) == 0) {
                                  goto LABEL_44;
                                }
                                goto LABEL_64;
                              }

                              sub_100015764(v250, &qword_100351820);
                              sub_100004090( v173,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
                            }

                            uint64_t v133 = &qword_100355080;
                            goto LABEL_42;
                          }

                          sub_100015764(v244, &qword_100351818);
                          sub_100004090(v159, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
                        }

                        uint64_t v133 = &qword_100355088;
                        uint64_t v146 = v153;
                        goto LABEL_43;
                      }

                      sub_100015764(v252, &qword_100351810);
                      sub_100004090(v144, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
                    }

                    uint64_t v133 = &qword_100355090;
                    goto LABEL_42;
                  }

              uint64_t v57 = v83;
              goto LABEL_35;
            }
          }

          else
          {
            uint64_t v58 = v90;
            sub_10000E6C0(v51, v90, &qword_10035C770);
            uint64_t v59 = v53(v52, 1LL, v54);
            uint64_t v56 = (uint64_t)v92;
            if (v59 != 1)
            {
              uint64_t v62 = v86;
              sub_100003E68(v52, v86, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements);
              uint64_t v63 = sub_100065AC0( v58,  v62,  type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements,  (uint64_t (*)(uint64_t, uint64_t))sub_1001AA644);
              sub_100004090(v62, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements);
              sub_100015764(v49, &qword_10035C770);
              sub_100004090(v58, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements);
              sub_100015764(v51, &qword_10035C770);
              if ((v63 & 1) == 0) {
                goto LABEL_34;
              }
              goto LABEL_27;
            }

            sub_100015764(v49, &qword_10035C770);
            sub_100004090(v58, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements);
          }

          uint64_t v60 = &qword_100362F38;
          uint64_t v61 = v51;
LABEL_33:
          sub_100015764(v61, v60);
          goto LABEL_34;
        }

    swift_release(v50);
    return 0LL;
  }

  uint64_t result = 0LL;
  if (v30 != 7 && v29 == v30) {
    goto LABEL_6;
  }
  return result;
}

              uint64_t v57 = v84;
              goto LABEL_35;
            }
          }

          else
          {
            uint64_t v58 = v91;
            sub_10000E6C0(v51, v91, &qword_10035C770);
            uint64_t v59 = v53(v52, 1LL, v54);
            uint64_t v56 = (uint64_t)v93;
            if (v59 != 1)
            {
              uint64_t v62 = v87;
              sub_100003E68(v52, v87, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements);
              uint64_t v63 = sub_100065AC0( v58,  v62,  type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements,  (uint64_t (*)(uint64_t, uint64_t))sub_1001AA644);
              sub_100004090(v62, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements);
              sub_100015764(v49, &qword_10035C770);
              sub_100004090(v58, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements);
              sub_100015764(v51, &qword_10035C770);
              if ((v63 & 1) == 0) {
                goto LABEL_34;
              }
              goto LABEL_27;
            }

            sub_100015764(v49, &qword_10035C770);
            sub_100004090(v58, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements);
          }

          uint64_t v60 = &qword_100362F38;
          uint64_t v61 = v51;
LABEL_33:
          sub_100015764(v61, v60);
          goto LABEL_34;
        }

LABEL_39:
    v81 = &qword_100351718;
    uint64_t v82 = v90;
    goto LABEL_40;
  }

  uint64_t v95 = v144;
  sub_10000E6C0(v90, v144, &qword_100350F38);
  if (v93(v91, 1LL, v94) == 1)
  {
    sub_100015764(v159, &qword_100350F38);
    sub_100004090(v95, type metadata accessor for CLP_LogEntry_AONLoc_Response);
    goto LABEL_39;
  }

  uint64_t v97 = v139;
  sub_100003E68(v91, v139, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  char v98 = sub_10000E8E0(v95, v97);
  sub_100004090(v97, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  sub_100015764(v159, &qword_100350F38);
  sub_100004090(v95, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  sub_100015764(v90, &qword_100350F38);
  if ((v98 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_45:
  uint64_t v99 = v162
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  swift_beginAccess( v162 + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication,  &v168,  0LL,  0LL);
  uint64_t v100 = v145;
  sub_10000E6C0(v99, v145, &qword_100350F40);
  uint64_t v101 = v55
       + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  swift_beginAccess( v55 + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication,  &v167,  0LL,  0LL);
  uint64_t v72 = v143;
  uint64_t v102 = v143 + *(int *)(v140 + 48);
  sub_10000E6C0(v100, v143, &qword_100350F40);
  sub_10000E6C0(v101, v102, &qword_100350F40);
  uint64_t v103 = v142;
  v104 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v141 + 48);
  if (v104(v72, 1LL, v142) == 1)
  {
    sub_100015764(v100, &qword_100350F40);
    if (v104(v102, 1LL, v103) == 1)
    {
      sub_100015764(v72, &qword_100350F40);
      uint64_t v105 = (uint64_t)v138;
      goto LABEL_52;
    }

    goto LABEL_50;
  }

  v106 = v137;
  sub_10000E6C0(v72, (uint64_t)v137, &qword_100350F40);
  unsigned int v107 = v104(v102, 1LL, v103);
  uint64_t v105 = (uint64_t)v138;
  if (v107 == 1)
  {
    sub_100015764(v145, &qword_100350F40);
    sub_100004090((uint64_t)v106, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
LABEL_50:
    v81 = &qword_100351710;
    goto LABEL_31;
  }

  v108 = v135;
  sub_100003E68(v102, (uint64_t)v135, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  char v109 = sub_10000E71C( v106,  v108,  type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  &qword_100351758,  (uint64_t)&unk_1002C5DF0);
  sub_100004090((uint64_t)v108, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  sub_100015764(v145, &qword_100350F40);
  sub_100004090((uint64_t)v106, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  sub_100015764(v72, &qword_100350F40);
  if ((v109 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_52:
  uint64_t v110 = v162
       + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse;
  swift_beginAccess( v162 + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse,  &v166,  0LL,  0LL);
  sub_10000E6C0(v110, v77, &qword_100350F38);
  uint64_t v111 = v55
       + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse;
  swift_beginAccess( v55 + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse,  &v165,  0LL,  0LL);
  uint64_t v72 = v136;
  uint64_t v112 = v136 + *(int *)(v149 + 48);
  sub_10000E6C0(v77, v136, &qword_100350F38);
  sub_10000E6C0(v111, v112, &qword_100350F38);
  uint64_t v113 = v150;
  if (v93(v72, 1LL, v150) == 1)
  {
    sub_100015764(v77, &qword_100350F38);
    if (v93(v112, 1LL, v113) == 1)
    {
      sub_100015764(v72, &qword_100350F38);
      goto LABEL_59;
    }

    goto LABEL_57;
  }

  uint64_t v114 = v134;
  sub_10000E6C0(v72, v134, &qword_100350F38);
  if (v93(v112, 1LL, v113) == 1)
  {
    sub_100015764(v77, &qword_100350F38);
    sub_100004090(v114, type metadata accessor for CLP_LogEntry_AONLoc_Response);
LABEL_57:
    v81 = &qword_100351718;
    goto LABEL_31;
  }

  uint64_t v115 = v114;
  uint64_t v116 = v139;
  sub_100003E68(v112, v139, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  char v117 = sub_10000E8E0(v115, v116);
  sub_100004090(v116, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  sub_100015764(v77, &qword_100350F38);
  sub_100004090(v115, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  sub_100015764(v72, &qword_100350F38);
  if ((v117 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_59:
  uint64_t v118 = v162;
  uint64_t v119 = v162
       + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication[0];
  swift_beginAccess( v162 + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication[0],  &v164,  0LL,  0LL);
  sub_10000E6C0(v119, v105, &qword_100350F48);
  uint64_t v120 = v55
       + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication[0];
  swift_beginAccess( v55 + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication[0],  &v163,  0LL,  0LL);
  uint64_t v121 = v133;
  uint64_t v122 = v133 + *(int *)(v130 + 48);
  sub_10000E6C0(v105, v133, &qword_100350F48);
  sub_10000E6C0(v120, v122, &qword_100350F48);
  uint64_t v123 = v132;
  v124 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v131 + 48);
  if (v124(v121, 1LL, v132) != 1)
  {
    v125 = v129;
    sub_10000E6C0(v121, (uint64_t)v129, &qword_100350F48);
    if (v124(v122, 1LL, v123) == 1)
    {
      swift_release(v162);
      swift_release(v55);
      sub_100015764(v105, &qword_100350F48);
      sub_100004090((uint64_t)v125, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
      goto LABEL_64;
    }

    v126 = v128;
    sub_100003E68(v122, (uint64_t)v128, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
    char v127 = sub_10000E71C( v125,  v126,  type metadata accessor for CLP_LogEntry_AONLoc_BtIndication,  type metadata accessor for CLP_LogEntry_AONLoc_BtNotification,  &qword_100351750,  (uint64_t)&unk_1002D9CA8);
    swift_release(v162);
    swift_release(v55);
    sub_100004090((uint64_t)v126, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
    sub_100015764(v105, &qword_100350F48);
    sub_100004090((uint64_t)v125, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
    sub_100015764(v121, &qword_100350F48);
    return (v127 & 1) != 0;
  }

  swift_release(v118);
  swift_release(v55);
  sub_100015764(v105, &qword_100350F48);
  if (v124(v122, 1LL, v123) != 1)
  {
LABEL_64:
    sub_100015764(v121, &qword_100351708);
    return 0LL;
  }

  sub_100015764(v121, &qword_100350F48);
  return 1LL;
}

    uint64_t v36 = 0;
  }

  return v36 & 1;
}

Swift::Int sub_10000D4D0()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_AONLoc_Indication,  &qword_100350FA8,  (uint64_t)&unk_1002B3E4C);
}

uint64_t sub_10000D4EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(int *)(a1 + 20);
  if (qword_10036BB80 != -1) {
    swift_once(&qword_10036BB80, sub_10000AC88);
  }
  uint64_t v5 = qword_10036BB88;
  *(void *)(a2 + v4) = qword_10036BB88;
  return swift_retain(v5);
}

uint64_t sub_10000D548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000B480(a1, a2, a3);
}

uint64_t sub_10000D55C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000B800(a1, a2, a3);
}

uint64_t sub_10000D570(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003516A0,  type metadata accessor for CLP_LogEntry_AONLoc_Indication,  (uint64_t)&unk_1002B3DC4);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10000D5C0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036BB78, (uint64_t)qword_100369250, (uint64_t)sub_10000A970, a1);
}

uint64_t sub_10000D5DC(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351088,  type metadata accessor for CLP_LogEntry_AONLoc_Indication,  (uint64_t)&unk_1002B3D4C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10000D61C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351088,  type metadata accessor for CLP_LogEntry_AONLoc_Indication,  (uint64_t)&unk_1002B3D4C);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_10000D670()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369268);
  sub_10000E704(v0, (uint64_t)qword_100369268);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 - v4 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3330;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "ERROR_MESSAGE";
  *(void *)(v9 + 8) = 13LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 11LL;
  *(void *)uint64_t v13 = "GNSS_RESPONSE";
  *(void *)(v13 + 8) = 13LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 12LL;
  *(void *)uint64_t v15 = "GNSS_INDICATION";
  *((void *)v15 + 1) = 15LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 21LL;
  *(void *)uint64_t v17 = "WIFI_RESPONSE";
  *((void *)v17 + 1) = 13LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 22LL;
  *(void *)uint64_t v19 = "WIFI_INDICATION";
  *((void *)v19 + 1) = 15LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  *uint64_t v20 = 31LL;
  *(void *)uint64_t v21 = "BT_RESPONSE";
  *((void *)v21 + 1) = 11LL;
  v21[16] = 2;
  v12();
  uint64_t v22 = (void *)(v8 + 6 * v4);
  uint64_t v23 = (char *)v22 + *(int *)(v2 + 48);
  *uint64_t v22 = 32LL;
  *(void *)uint64_t v23 = "BT_INDICATION";
  *((void *)v23 + 1) = 13LL;
  v23[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10000D8E4()
{
  return sub_100008C30(&qword_10036BB90, (uint64_t)qword_100369268, (uint64_t)sub_10000D670);
}

uint64_t sub_10000D900@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036BB90, (uint64_t)qword_100369268, (uint64_t)sub_10000D670, a1);
}

uint64_t sub_10000D91C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036BB90, (uint64_t)qword_100369268, (uint64_t)sub_10000D670, a1);
}

void *sub_10000D938()
{
  return &unk_10033D9F0;
}

unint64_t sub_10000D944()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_10000D960()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369280);
  sub_10000E704(v0, (uint64_t)qword_100369280);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3340;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "request";
  *(void *)(v9 + 8) = 7LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 3LL;
  *(void *)uint64_t v13 = "indication";
  *((void *)v13 + 1) = 10LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10000DAB4()
{
  return sub_100008C30(&qword_10036BB98, (uint64_t)qword_100369280, (uint64_t)sub_10000D960);
}

uint64_t sub_10000DAD0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036BB98, (uint64_t)qword_100369280, (uint64_t)sub_10000D960, a1);
}

uint64_t sub_10000DAEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 1)
      {
        uint64_t v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0LL) + 20);
        uint64_t v10 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
        uint64_t v11 = (unint64_t *)&qword_100351010;
        uint64_t v12 = type metadata accessor for CLP_LogEntry_AONLoc_Request;
        uint64_t v13 = &unk_1002B361C;
        goto LABEL_5;
      }

LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    uint64_t v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0LL) + 24);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL);
    uint64_t v11 = &qword_100351088;
    uint64_t v12 = type metadata accessor for CLP_LogEntry_AONLoc_Indication;
    uint64_t v13 = &unk_1002B3D4C;
LABEL_5:
    uint64_t v14 = sub_10000FD98(v11, v12, (uint64_t)v13);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v14, a2, a3);
    goto LABEL_6;
  }

  return result;
}

    uint64_t v67 = &qword_100354FA8;
    char v68 = (uint64_t)v53;
LABEL_15:
    sub_100015764(v68, v67);
    goto LABEL_16;
  }

  uint64_t v65 = v59;
  uint64_t v66 = v229;
  sub_10000E6C0((uint64_t)v53, v229, &qword_100351858);
  if (v64(v63, 1LL, v48) == 1)
  {
    swift_retain(v59);
    swift_retain(v61);
    sub_100015764((uint64_t)v58, &qword_100351858);
    sub_100004090(v66, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
    goto LABEL_6;
  }

  uint64_t v69 = v222;
  sub_100003E68(v63, v222, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  swift_retain(v65);
  swift_retain(v61);
  uint64_t v70 = v66;
  uint64_t v71 = sub_100067128(v66, v69);
  sub_100004090(v69, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  sub_100015764((uint64_t)v58, &qword_100351858);
  sub_100004090(v70, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  sub_100015764((uint64_t)v53, &qword_100351858);
  if ((v71 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_8:
  uint64_t v72 = v65
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess( v65 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState,  v257,  0LL,  0LL);
  uint64_t v73 = v230;
  sub_10000E6C0(v72, v230, &qword_100351860);
  v74 = (uint64_t)&v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState];
  swift_beginAccess( &v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState],  v256,  0LL,  0LL);
  uint64_t v75 = v226;
  int v76 = v226 + *(int *)(v223 + 48);
  sub_10000E6C0(v73, v226, &qword_100351860);
  sub_10000E6C0(v74, v76, &qword_100351860);
  uint64_t v77 = v225;
  uint64_t v78 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v224 + 48);
  if (v78(v75, 1LL, v225) == 1)
  {
    sub_100015764(v73, &qword_100351860);
    uint64_t v79 = v78(v76, 1LL, v77);
    v81 = (uint64_t)v227;
    int v80 = v228;
    if (v79 == 1)
    {
      sub_100015764(v75, &qword_100351860);
      goto LABEL_20;
    }

    sub_100015764((uint64_t)v14, &qword_100354FA8);
    goto LABEL_7;
  }

  uint64_t v28 = v20;
  uint64_t v29 = v22;
  uint64_t v30 = v133;
  sub_10000E6C0((uint64_t)v14, v133, &qword_100351858);
  if (v25(v24, 1LL, v9) == 1)
  {
    swift_retain(v28);
    uint64_t v27 = v22;
    swift_retain(v22);
    sub_100015764((uint64_t)v19, &qword_100351858);
    sub_100004090(v30, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
    goto LABEL_6;
  }

  uint64_t v33 = v132;
  sub_100003E68(v24, v132, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  swift_retain(v28);
  uint64_t v27 = v29;
  swift_retain(v29);
  uint64_t v34 = sub_100067128(v30, v33);
  sub_100004090(v33, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  sub_100015764((uint64_t)v19, &qword_100351858);
  sub_100004090(v30, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  sub_100015764((uint64_t)v14, &qword_100351858);
  if ((v34 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_12:
  uint64_t v35 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds;
  swift_beginAccess( v28 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds,  v178,  0LL,  0LL);
  uint64_t v36 = *(double *)v35;
  LOBYTE(v35) = *(_BYTE *)(v35 + 8);
  uint64_t v37 = v27
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds;
  swift_beginAccess( v27 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds,  v177,  0LL,  0LL);
  if ((v35 & 1) != 0)
  {
    if ((*(_BYTE *)(v37 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }

  else if ((*(_BYTE *)(v37 + 8) & 1) != 0 || v36 != *(double *)v37)
  {
    goto LABEL_7;
  }

  uint64_t v38 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
  swift_beginAccess( v28 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource,  v176,  0LL,  0LL);
  uint64_t v39 = *v38;
  uint64_t v40 = (unsigned __int8 *)(v27
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
  swift_beginAccess( v27 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource,  v175,  0LL,  0LL);
  uint64_t v41 = *v40;
  if (v39 == 7)
  {
    if (v41 != 7) {
      goto LABEL_7;
    }
  }

  else if (v41 == 7 || v39 != v41)
  {
    goto LABEL_7;
  }

  uint64_t v42 = (uint64_t *)(v28
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
  swift_beginAccess( v28 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions,  &v174,  0LL,  0LL);
  uint64_t v43 = *v42;
  uint64_t v44 = (uint64_t *)(v27
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
  swift_beginAccess( v27 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions,  &v173,  0LL,  0LL);
  uint64_t v45 = *v44;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRetain(v45);
  uint64_t v46 = sub_10005E0B8(v43, v45);
  swift_bridgeObjectRelease(v43);
  swift_bridgeObjectRelease(v45);
  if ((v46 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v47 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds;
  swift_beginAccess( v28 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds,  &v172,  0LL,  0LL);
  char v48 = *(double *)v47;
  LOBYTE(v47) = *(_BYTE *)(v47 + 8);
  uint64_t v49 = v27
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds;
  swift_beginAccess( v27 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds,  &v171,  0LL,  0LL);
  if ((v47 & 1) != 0)
  {
    if ((*(_BYTE *)(v49 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }

  else if ((*(_BYTE *)(v49 + 8) & 1) != 0 || v48 != *(double *)v49)
  {
    goto LABEL_7;
  }

  int v50 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb;
  swift_beginAccess( v28 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb,  &v170,  0LL,  0LL);
  char v51 = *(double *)v50;
  LOBYTE(v50) = *(_BYTE *)(v50 + 8);
  char v52 = v27
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb;
  swift_beginAccess( v27 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb,  &v169,  0LL,  0LL);
  if ((v50 & 1) != 0)
  {
    if ((*(_BYTE *)(v52 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }

  else if ((*(_BYTE *)(v52 + 8) & 1) != 0 || v51 != *(double *)v52)
  {
    goto LABEL_7;
  }

  uint64_t v53 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  swift_beginAccess( v28 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec,  &v168,  0LL,  0LL);
  uint64_t v54 = *(double *)v53;
  LOBYTE(v53) = *(_BYTE *)(v53 + 8);
  uint64_t v55 = v27
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  swift_beginAccess( v27 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec,  &v167,  0LL,  0LL);
  if ((v53 & 1) != 0)
  {
    if ((*(_BYTE *)(v55 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }

  else if ((*(_BYTE *)(v55 + 8) & 1) != 0 || v54 != *(double *)v55)
  {
    goto LABEL_7;
  }

  uint64_t v56 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  swift_beginAccess( v28 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM,  &v166,  0LL,  0LL);
  uint64_t v57 = *(float *)v56;
  LOBYTE(v56) = *(_BYTE *)(v56 + 4);
  uint64_t v58 = v27
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  swift_beginAccess( v27 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM,  &v165,  0LL,  0LL);
  if ((v56 & 1) != 0)
  {
    if ((*(_BYTE *)(v58 + 4) & 1) == 0) {
      goto LABEL_7;
    }
  }

  else if ((*(_BYTE *)(v58 + 4) & 1) != 0 || v57 != *(float *)v58)
  {
    goto LABEL_7;
  }

  uint64_t v59 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  swift_beginAccess( v28 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds,  &v164,  0LL,  0LL);
  uint64_t v60 = *(float *)v59;
  LOBYTE(v59) = *(_BYTE *)(v59 + 4);
  uint64_t v61 = v27
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  swift_beginAccess( v27 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds,  &v163,  0LL,  0LL);
  if ((v59 & 1) != 0)
  {
    if ((*(_BYTE *)(v61 + 4) & 1) == 0) {
      goto LABEL_7;
    }
  }

  else if ((*(_BYTE *)(v61 + 4) & 1) != 0 || v60 != *(float *)v61)
  {
    goto LABEL_7;
  }

  uint64_t v62 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
  swift_beginAccess( v28 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1,  &v162,  0LL,  0LL);
  uint64_t v63 = *v62;
  uint64_t v64 = (unsigned __int8 *)(v27
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
  swift_beginAccess( v27 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1,  &v161,  0LL,  0LL);
  uint64_t v65 = *v64;
  if (v63 == 5)
  {
    if (v65 == 5) {
      goto LABEL_53;
    }
LABEL_7:
    swift_release(v28);
    uint64_t v31 = v27;
LABEL_8:
    swift_release(v31);
    return 0LL;
  }

  if (v65 == 5 || v63 != v65) {
    goto LABEL_7;
  }
LABEL_53:
  uint64_t v66 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
  swift_beginAccess( v28 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1,  &v160,  0LL,  0LL);
  uint64_t v67 = *v66;
  char v68 = v27;
  uint64_t v69 = (unsigned __int8 *)(v27
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
  swift_beginAccess( v27 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1,  &v159,  0LL,  0LL);
  uint64_t v70 = *v69;
  if (v67 == 5)
  {
    if (v70 != 5) {
      goto LABEL_80;
    }
  }

  else if (v70 == 5 || v67 != v70)
  {
    goto LABEL_80;
  }

  uint64_t v71 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
  swift_beginAccess( v28 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1,  &v158,  0LL,  0LL);
  uint64_t v72 = *v71;
  uint64_t v73 = (unsigned __int8 *)(v27
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
  swift_beginAccess( v27 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1,  &v157,  0LL,  0LL);
  v74 = *v73;
  if (v72 == 5)
  {
    if (v74 != 5) {
      goto LABEL_80;
    }
  }

  else if (v74 == 5 || v72 != v74)
  {
    goto LABEL_80;
  }

  uint64_t v75 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
  swift_beginAccess( v28 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1,  &v156,  0LL,  0LL);
  int v76 = *v75;
  uint64_t v77 = (unsigned __int8 *)(v27
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
  swift_beginAccess( v27 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1,  &v155,  0LL,  0LL);
  uint64_t v78 = *v77;
  if (v76 == 5)
  {
    if (v78 != 5) {
      goto LABEL_80;
    }
  }

  else if (v78 == 5 || v76 != v78)
  {
    goto LABEL_80;
  }

  uint64_t v79 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
  swift_beginAccess( v28 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1,  &v154,  0LL,  0LL);
  int v80 = *v79;
  v81 = (unsigned __int8 *)(v27
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
  swift_beginAccess( v27 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1,  &v153,  0LL,  0LL);
  uint64_t v82 = *v81;
  if (v80 == 5)
  {
    if (v82 != 5) {
      goto LABEL_80;
    }
  }

  else if (v82 == 5 || v80 != v82)
  {
    goto LABEL_80;
  }

  uint64_t v83 = (uint64_t *)(v28
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
  swift_beginAccess( v28 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections,  &v152,  0LL,  0LL);
  uint64_t v84 = *v83;
  uint64_t v85 = (uint64_t *)(v27
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
  swift_beginAccess( v27 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections,  &v151,  0LL,  0LL);
  uint64_t v86 = *v85;
  swift_bridgeObjectRetain(v84);
  swift_bridgeObjectRetain(v86);
  char v87 = sub_10005E5F8(v84, v86);
  swift_bridgeObjectRelease(v84);
  swift_bridgeObjectRelease(v86);
  if ((v87 & 1) == 0) {
    goto LABEL_80;
  }
  uint64_t v88 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  swift_beginAccess( v28 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit,  &v150,  0LL,  0LL);
  uint64_t v89 = v129;
  sub_10000E6C0(v88, v129, &qword_1003518A8);
  uint64_t v90 = v68
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  swift_beginAccess( v68 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit,  &v149,  0LL,  0LL);
  uint64_t v91 = v131;
  uint64_t v92 = v131 + *(int *)(v127 + 48);
  sub_10000E6C0(v89, v131, &qword_1003518A8);
  sub_10000E6C0(v90, v92, &qword_1003518A8);
  v93 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v128 + 48);
  if (v93(v91, 1LL, v130) == 1)
  {
    sub_100015764(v129, &qword_1003518A8);
    if (v93(v92, 1LL, v130) == 1)
    {
      sub_100015764(v131, &qword_1003518A8);
      goto LABEL_82;
    }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    uint64_t v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL) + 28);
    uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
    uint64_t v12 = sub_10000FD98( &qword_100351FD0,  type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange,  (uint64_t)&unk_1002B837C);
    uint64_t v13 = v9;
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v10, v11, v12, a2, a3);
LABEL_5:
    uint64_t v9 = v13;
    goto LABEL_6;
  }

  return result;
}

    uint64_t v45 = &qword_100354FE0;
    uint64_t v46 = (uint64_t)v32;
LABEL_29:
    sub_100015764(v46, v45);
    goto LABEL_30;
  }

  sub_10000E6C0((uint64_t)v32, (uint64_t)v36, &qword_1003518D8);
  if (v44(v43, 1LL, v27) == 1)
  {
    swift_retain(v39);
    swift_retain(v41);
    sub_100015764((uint64_t)v38, &qword_1003518D8);
    sub_100004090((uint64_t)v36, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
    goto LABEL_6;
  }

  uint64_t v47 = v117;
  sub_100003E68(v43, v117, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  swift_retain(v39);
  swift_retain(v41);
  char v48 = sub_100064CEC((uint64_t)v36, v47);
  sub_100004090(v47, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  sub_100015764((uint64_t)v38, &qword_1003518D8);
  sub_100004090((uint64_t)v36, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  sub_100015764((uint64_t)v32, &qword_1003518D8);
  if ((v48 & 1) == 0) {
    goto LABEL_30;
  }
LABEL_8:
  uint64_t v49 = v39
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess( v39 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass,  v131,  0LL,  0LL);
  int v50 = v120;
  sub_10000E6C0(v49, v120, &qword_1003518E0);
  char v51 = v41
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess( v41 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass,  v130,  0LL,  0LL);
  char v52 = v122;
  uint64_t v53 = v122 + *(int *)(v118 + 48);
  sub_10000E6C0(v50, v122, &qword_1003518E0);
  sub_10000E6C0(v51, v53, &qword_1003518E0);
  uint64_t v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v119 + 48);
  uint64_t v55 = v121;
  if (v54(v52, 1LL, v121) == 1)
  {
    sub_100015764(v50, &qword_1003518E0);
    if (v54(v53, 1LL, v55) == 1)
    {
      sub_100015764(v52, &qword_1003518E0);
      goto LABEL_15;
    }

    sub_100015764((uint64_t)v29, &qword_100354F98);
    goto LABEL_43;
  }

  uint64_t v43 = v35;
  uint64_t v44 = v135;
  sub_10000E6C0((uint64_t)v29, v135, &qword_100351908);
  if (v40(v39, 1LL, v24) == 1)
  {
    swift_retain(v35);
    uint64_t v42 = v37;
    swift_retain(v37);
    sub_100015764((uint64_t)v34, &qword_100351908);
    sub_100004090(v44, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
    goto LABEL_6;
  }

  uint64_t v45 = v128;
  sub_100003E68(v39, v128, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  swift_retain(v43);
  uint64_t v42 = v37;
  swift_retain(v37);
  uint64_t v46 = v44;
  uint64_t v47 = sub_100065750(v44, v45, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  sub_100004090(v45, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  sub_100015764((uint64_t)v34, &qword_100351908);
  sub_100004090(v46, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  sub_100015764((uint64_t)v29, &qword_100351908);
  if ((v47 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_8:
  char v48 = v43
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess( v43 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport,  v153,  0LL,  0LL);
  uint64_t v49 = v136;
  sub_10000E6C0(v48, v136, &qword_100351910);
  int v50 = v42
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess( v42 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport,  v152,  0LL,  0LL);
  char v51 = v133;
  char v52 = v133 + *(int *)(v130 + 48);
  sub_10000E6C0(v49, v133, &qword_100351910);
  uint64_t v53 = v50;
  uint64_t v54 = v51;
  sub_10000E6C0(v53, v52, &qword_100351910);
  uint64_t v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v131 + 48);
  uint64_t v56 = v51;
  uint64_t v57 = v132;
  if (v55(v56, 1LL, v132) == 1)
  {
    sub_100015764(v49, &qword_100351910);
    uint64_t v58 = v55(v52, 1LL, v57);
    uint64_t v59 = (uint64_t)v129;
    uint64_t v60 = v134;
    if (v58 == 1)
    {
      sub_100015764(v54, &qword_100351910);
      goto LABEL_16;
    }

    uint64_t v33 = &qword_100354FA8;
    uint64_t v34 = (uint64_t)v20;
LABEL_7:
    sub_100015764(v34, v33);
LABEL_8:
    uint64_t v35 = 0;
    return v35 & 1;
  }

  sub_10000E6C0((uint64_t)v20, (uint64_t)v24, &qword_100351858);
  if (v32(v31, 1LL, v14) == 1)
  {
    sub_100015764((uint64_t)v27, &qword_100351858);
    sub_100015764((uint64_t)v29, &qword_100351858);
    sub_100004090((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
    goto LABEL_6;
  }

  sub_100003E68(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  uint64_t v37 = sub_100067128((uint64_t)v24, (uint64_t)v17);
  sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  sub_100015764((uint64_t)v27, &qword_100351858);
  sub_100015764((uint64_t)v29, &qword_100351858);
  sub_100004090((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  sub_100015764((uint64_t)v20, &qword_100351858);
  if ((v37 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v38 = v30[6];
  uint64_t v39 = v75;
  uint64_t v40 = v76;
  uint64_t v41 = *(unsigned __int8 *)(v75 + v38);
  uint64_t v42 = *(unsigned __int8 *)(v76 + v38);
  if (v41 == 13)
  {
    uint64_t v44 = (uint64_t)v73;
    uint64_t v43 = v74;
    uint64_t v46 = (uint64_t)v71;
    uint64_t v45 = (uint64_t)v72;
    if (v42 != 13) {
      goto LABEL_8;
    }
  }

  else
  {
    uint64_t v35 = 0;
    uint64_t v44 = (uint64_t)v73;
    uint64_t v43 = v74;
    uint64_t v46 = (uint64_t)v71;
    uint64_t v45 = (uint64_t)v72;
    if (v42 == 13 || v41 != v42) {
      return v35 & 1;
    }
  }

  uint64_t v47 = v30[7];
  char v48 = *(unsigned __int8 *)(v75 + v47);
  uint64_t v49 = *(unsigned __int8 *)(v76 + v47);
  if (v48 == 4)
  {
    if (v49 != 4) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }

  uint64_t v35 = 0;
  if (v49 != 4 && v48 == v49)
  {
LABEL_21:
    sub_10000E6C0(v75 + v30[8], v45, &qword_100351900);
    sub_10000E6C0(v40 + v30[8], v46, &qword_100351900);
    int v50 = v70;
    char v51 = v70 + *(int *)(v68 + 48);
    sub_10000E6C0(v45, v70, &qword_100351900);
    char v52 = v50;
    sub_10000E6C0(v46, v51, &qword_100351900);
    uint64_t v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48);
    if (v53(v52, 1LL, v43) == 1)
    {
      sub_100015764(v46, &qword_100351900);
      sub_100015764(v45, &qword_100351900);
      if (v53(v51, 1LL, v43) == 1)
      {
        sub_100015764(v70, &qword_100351900);
LABEL_28:
        uint64_t v57 = v66;
        uint64_t v56 = v67;
        uint64_t v58 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
        uint64_t v59 = v64;
        v58(v64, v39, v67);
        uint64_t v60 = v65;
        v58(v65, v40, v56);
        uint64_t v61 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
        uint64_t v35 = dispatch thunk of static Equatable.== infix(_:_:)(v59, v60, v56, v61);
        uint64_t v62 = *(void (**)(char *, uint64_t))(v57 + 8);
        v62(v60, v56);
        v62(v59, v56);
        return v35 & 1;
      }
    }

    else
    {
      sub_10000E6C0(v52, v44, &qword_100351900);
      if (v53(v51, 1LL, v43) != 1)
      {
        uint64_t v54 = v63;
        sub_100003E68(v51, v63, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
        uint64_t v55 = sub_100065750(v44, v54, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
        sub_100004090(v54, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
        sub_100015764(v46, &qword_100351900);
        sub_100015764(v45, &qword_100351900);
        sub_100004090(v44, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
        sub_100015764(v52, &qword_100351900);
        if ((v55 & 1) != 0) {
          goto LABEL_28;
        }
        goto LABEL_8;
      }

      sub_100015764(v46, &qword_100351900);
      sub_100015764(v45, &qword_100351900);
      sub_100004090(v44, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
    }

    uint64_t v33 = &qword_100354FB8;
    uint64_t v34 = v70;
    goto LABEL_7;
  }

  return v35 & 1;
}

    uint64_t v33 = &qword_100355038;
    uint64_t v34 = (uint64_t)v20;
LABEL_14:
    sub_100015764(v34, v33);
    goto LABEL_15;
  }

  sub_10000E6C0((uint64_t)v20, (uint64_t)v24, &qword_100351838);
  if (v32(v31, 1LL, v14) == 1)
  {
    sub_100015764((uint64_t)v27, &qword_100351838);
    sub_100015764((uint64_t)v29, &qword_100351838);
    sub_100004090((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
    goto LABEL_6;
  }

  sub_100003E68(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  uint64_t v35 = sub_100065904((uint64_t)v24, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  sub_100015764((uint64_t)v27, &qword_100351838);
  sub_100015764((uint64_t)v29, &qword_100351838);
  sub_100004090((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  sub_100015764((uint64_t)v20, &qword_100351838);
  if ((v35 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v36 = v76;
  uint64_t v37 = v77;
  uint64_t v38 = v73;
  sub_10000E6C0(v77 + *(int *)(v76 + 24), v73, &qword_100351840);
  uint64_t v39 = v78;
  uint64_t v40 = v72;
  sub_10000E6C0(v78 + *(int *)(v36 + 24), v72, &qword_100351840);
  uint64_t v41 = v75;
  uint64_t v42 = v75 + *(int *)(v70 + 48);
  sub_10000E6C0(v38, v75, &qword_100351840);
  sub_10000E6C0(v40, v42, &qword_100351840);
  uint64_t v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48);
  uint64_t v44 = v74;
  if (v43(v41, 1LL, v74) != 1)
  {
    uint64_t v45 = v69;
    sub_10000E6C0(v41, v69, &qword_100351840);
    if (v43(v42, 1LL, v44) != 1)
    {
      char v48 = v68;
      sub_100003E68(v42, v68, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
      uint64_t v49 = sub_100065904(v45, v48, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
      sub_100004090(v48, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
      sub_100015764(v40, &qword_100351840);
      sub_100015764(v38, &qword_100351840);
      sub_100004090(v45, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
      sub_100015764(v41, &qword_100351840);
      if ((v49 & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_18;
    }

    sub_100015764(v40, &qword_100351840);
    sub_100015764(v38, &qword_100351840);
    sub_100004090(v45, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
    goto LABEL_13;
  }

  sub_100015764(v40, &qword_100351840);
  sub_100015764(v38, &qword_100351840);
  if (v43(v42, 1LL, v44) != 1)
  {
LABEL_13:
    uint64_t v33 = &qword_100355030;
    uint64_t v34 = v41;
    goto LABEL_14;
  }

  sub_100015764(v41, &qword_100351840);
LABEL_18:
  int v50 = *(int *)(v76 + 28);
  char v51 = (float *)(v37 + v50);
  char v52 = *(_BYTE *)(v37 + v50 + 4);
  uint64_t v53 = (float *)(v39 + v50);
  uint64_t v54 = *(unsigned __int8 *)(v39 + v50 + 4);
  if ((v52 & 1) != 0)
  {
    if (v54)
    {
LABEL_24:
      uint64_t v55 = v66;
      uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
      uint64_t v57 = v64;
      uint64_t v58 = v37;
      uint64_t v59 = v67;
      v56(v64, v58, v67);
      uint64_t v60 = v65;
      v56(v65, v39, v59);
      uint64_t v61 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      uint64_t v46 = dispatch thunk of static Equatable.== infix(_:_:)(v57, v60, v59, v61);
      uint64_t v62 = *(void (**)(char *, uint64_t))(v55 + 8);
      v62(v60, v59);
      v62(v57, v59);
      return v46 & 1;
    }
  }

  else
  {
    if (*v51 != *v53) {
      LOBYTE(v54) = 1;
    }
    if ((v54 & 1) == 0) {
      goto LABEL_24;
    }
  }

    uint64_t v37 = &qword_100355260;
    uint64_t v38 = (uint64_t)v24;
LABEL_14:
    sub_100015764(v38, v37);
    goto LABEL_15;
  }

  sub_10000E6C0((uint64_t)v24, (uint64_t)v28, &qword_1003550D0);
  if (v36(v35, 1LL, v18) == 1)
  {
    sub_100015764((uint64_t)v31, &qword_1003550D0);
    sub_100015764((uint64_t)v33, &qword_1003550D0);
    sub_100004090((uint64_t)v28, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
    goto LABEL_6;
  }

  sub_100003E68(v35, (uint64_t)v21, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  uint64_t v39 = sub_100081AD8((uint64_t)v28, (uint64_t)v21);
  sub_100004090((uint64_t)v21, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  sub_100015764((uint64_t)v31, &qword_1003550D0);
  sub_100015764((uint64_t)v33, &qword_1003550D0);
  sub_100004090((uint64_t)v28, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  sub_100015764((uint64_t)v24, &qword_1003550D0);
  if ((v39 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v41 = v82;
  uint64_t v40 = v83;
  uint64_t v42 = v87;
  sub_10000E6C0(v87 + *(int *)(v83 + 28), v82, &qword_1003550D8);
  uint64_t v43 = v88;
  uint64_t v44 = v86;
  sub_10000E6C0(v88 + *(int *)(v40 + 28), v86, &qword_1003550D8);
  uint64_t v45 = v85;
  uint64_t v46 = v85 + *(int *)(v80 + 48);
  sub_10000E6C0(v41, v85, &qword_1003550D8);
  sub_10000E6C0(v44, v46, &qword_1003550D8);
  uint64_t v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48);
  char v48 = v84;
  if (v47(v45, 1LL, v84) != 1)
  {
    uint64_t v49 = v79;
    sub_10000E6C0(v45, v79, &qword_1003550D8);
    if (v47(v46, 1LL, v48) != 1)
    {
      char v52 = v74;
      sub_100003E68(v46, v74, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
      uint64_t v53 = sub_10000FD98( &qword_100355270,  type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture,  (uint64_t)&unk_1002BAC60);
      uint64_t v54 = dispatch thunk of static Equatable.== infix(_:_:)(v49, v52, v48, v53);
      sub_100004090(v52, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
      sub_100015764(v86, &qword_1003550D8);
      sub_100015764(v41, &qword_1003550D8);
      sub_100004090(v49, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
      sub_100015764(v45, &qword_1003550D8);
      if ((v54 & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_18;
    }

    sub_100015764(v86, &qword_1003550D8);
    sub_100015764(v41, &qword_1003550D8);
    sub_100004090(v49, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
    goto LABEL_13;
  }

  sub_100015764(v44, &qword_1003550D8);
  sub_100015764(v41, &qword_1003550D8);
  if (v47(v46, 1LL, v48) != 1)
  {
LABEL_13:
    uint64_t v37 = &qword_100355258;
    uint64_t v38 = v45;
    goto LABEL_14;
  }

  sub_100015764(v45, &qword_1003550D8);
LABEL_18:
  uint64_t v55 = v77;
  uint64_t v56 = v78;
  uint64_t v57 = *(void (**)(char *, uint64_t, uint64_t))(v77 + 16);
  uint64_t v58 = v75;
  v57(v75, v42, v78);
  uint64_t v59 = v76;
  v57(v76, v43, v56);
  uint64_t v60 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  LOBYTE(v57) = dispatch thunk of static Equatable.== infix(_:_:)(v58, v59, v56, v60);
  uint64_t v61 = *(void (**)(char *, uint64_t))(v55 + 8);
  v61(v59, v56);
  v61(v58, v56);
  if ((v57 & 1) != 0)
  {
    uint64_t v63 = v72;
    uint64_t v62 = v73;
    uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 16);
    uint64_t v65 = v70;
    v64(v70, v42 + *(int *)(v40 + 20), v73);
    uint64_t v66 = v43 + *(int *)(v40 + 20);
    uint64_t v67 = v71;
    v64(v71, v66, v62);
    char v68 = sub_10000FD98( &qword_100355268,  (uint64_t (*)(uint64_t))&type metadata accessor for ExtensionFieldValueSet,  (uint64_t)&protocol conformance descriptor for ExtensionFieldValueSet);
    int v50 = dispatch thunk of static Equatable.== infix(_:_:)(v65, v67, v62, v68);
    uint64_t v69 = *(void (**)(char *, uint64_t))(v63 + 8);
    v69(v67, v62);
    v69(v65, v62);
    return v50 & 1;
  }

    uint64_t v69 = &qword_10035C418;
    uint64_t v70 = (uint64_t)v54;
LABEL_7:
    sub_100015764(v70, v69);
    goto LABEL_8;
  }

  char v68 = v60;
  sub_10000E6C0((uint64_t)v54, v228, &qword_100355538);
  if (v65(v64, 1LL, v49) == 1)
  {
    uint64_t v67 = v60;
    swift_retain(v60);
    swift_retain(v62);
    sub_100015764((uint64_t)v59, &qword_100355538);
    sub_100004090(v228, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  uint64_t v72 = v224;
  sub_100003E68(v64, v224, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v67 = v68;
  swift_retain(v68);
  swift_retain(v62);
  uint64_t v73 = v228;
  v74 = sub_100065750(v228, v72, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090(v72, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v59, &qword_100355538);
  sub_100004090(v73, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v54, &qword_100355538);
  if ((v74 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v75 = (int *)(v67
              + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess( v67 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client,  v253,  0LL,  0LL);
  int v76 = *v75;
  uint64_t v77 = *((_BYTE *)v75 + 4);
  uint64_t v78 = v62
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess( v62 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client,  v252,  0LL,  0LL);
  if ((v77 & 1) != 0)
  {
    uint64_t v79 = (uint64_t)v226;
    int v80 = (uint64_t)v227;
    v81 = (uint64_t)v225;
    if ((*(_BYTE *)(v78 + 4) & 1) == 0) {
      goto LABEL_8;
    }
  }

  else
  {
    uint64_t v79 = (uint64_t)v226;
    int v80 = (uint64_t)v227;
    v81 = (uint64_t)v225;
    if ((*(_BYTE *)(v78 + 4) & 1) != 0 || v76 != *(_DWORD *)v78) {
      goto LABEL_8;
    }
  }

  uint64_t v82 = v67
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess( v67 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location,  v251,  0LL,  0LL);
  sub_10000E6C0(v82, v81, &qword_100355560);
  uint64_t v83 = v62
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess( v62 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location,  v250,  0LL,  0LL);
  uint64_t v84 = v222;
  uint64_t v85 = v222 + *(int *)(v219 + 48);
  sub_10000E6C0(v81, v222, &qword_100355560);
  uint64_t v86 = v83;
  char v87 = v84;
  sub_10000E6C0(v86, v85, &qword_100355560);
  uint64_t v88 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v220 + 48);
  uint64_t v89 = v84;
  uint64_t v90 = v221;
  if (v88(v89, 1LL, v221) == 1)
  {
    sub_100015764(v81, &qword_100355560);
    uint64_t v91 = v88(v85, 1LL, v90);
    uint64_t v92 = v223;
    if (v91 == 1)
    {
      sub_100015764(v87, &qword_100355560);
      goto LABEL_23;
    }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL);
    uint64_t v10 = sub_10000FD98( &qword_100355738,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  (uint64_t)&unk_1002C08C8);
    uint64_t v11 = v3 + 8;
LABEL_5:
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v11, v9, v10, a2, a3);
    goto LABEL_6;
  }

  return result;
}

    sub_100015764((uint64_t)v15, &qword_10035C418);
    goto LABEL_7;
  }

  uint64_t v27 = v21;
  uint64_t v28 = v54;
  sub_10000E6C0((uint64_t)v15, v54, &qword_100355538);
  if (v26(v25, 1LL, v9) == 1)
  {
    swift_retain(v27);
    swift_retain(v23);
    sub_100015764((uint64_t)v20, &qword_100355538);
    sub_100004090(v28, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  sub_100003E68(v25, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  swift_retain(v27);
  swift_retain(v23);
  uint64_t v30 = sub_100065750(v28, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v20, &qword_100355538);
  sub_100004090(v28, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v15, &qword_100355538);
  if ((v30 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_11:
  uint64_t v31 = (int *)(v27
              + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess( v27 + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client,  v59,  0LL,  0LL);
  uint64_t v32 = *v31;
  uint64_t v33 = *((_BYTE *)v31 + 4);
  uint64_t v34 = v23
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess( v23 + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client,  v58,  0LL,  0LL);
  if ((v33 & 1) == 0)
  {
    uint64_t v35 = (uint64_t)v53;
    uint64_t v36 = (uint64_t)v52;
    if ((*(_BYTE *)(v34 + 4) & 1) == 0 && v32 == *(_DWORD *)v34) {
      goto LABEL_16;
    }
LABEL_7:
    swift_release(v27);
    swift_release(v23);
    return 0LL;
  }

  uint64_t v35 = (uint64_t)v53;
  uint64_t v36 = (uint64_t)v52;
  if ((*(_BYTE *)(v34 + 4) & 1) == 0) {
    goto LABEL_7;
  }
LABEL_16:
  uint64_t v37 = v27
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess( v27 + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent,  v57,  0LL,  0LL);
  sub_10000E6C0(v37, v36, &qword_1003555B0);
  uint64_t v38 = v23
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess( v23 + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent,  v56,  0LL,  0LL);
  uint64_t v39 = v51;
  uint64_t v40 = v51 + *(int *)(v48 + 48);
  sub_10000E6C0(v36, v51, &qword_1003555B0);
  uint64_t v41 = v38;
  uint64_t v42 = v39;
  sub_10000E6C0(v41, v40, &qword_1003555B0);
  uint64_t v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
  uint64_t v44 = v50;
  if (v43(v42, 1LL, v50) == 1)
  {
    swift_release(v27);
    swift_release(v23);
    sub_100015764(v36, &qword_1003555B0);
    if (v43(v40, 1LL, v44) == 1)
    {
      sub_100015764(v42, &qword_1003555B0);
      return 1LL;
    }

    goto LABEL_21;
  }

  sub_10000E6C0(v42, v35, &qword_1003555B0);
  if (v43(v40, 1LL, v44) == 1)
  {
    swift_release(v27);
    swift_release(v23);
    sub_100015764(v36, &qword_1003555B0);
    sub_100004090(v35, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
LABEL_21:
    sub_100015764(v42, &qword_10035C4D8);
    return 0LL;
  }

  uint64_t v45 = v47;
  sub_100003E68(v40, v47, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  uint64_t v46 = sub_100116A30(v35, v45);
  swift_release(v27);
  swift_release(v23);
  sub_100004090(v45, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  sub_100015764(v36, &qword_1003555B0);
  sub_100004090(v35, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  sub_100015764(v42, &qword_1003555B0);
  return (v46 & 1) != 0;
}

    sub_100015764((uint64_t)v15, &qword_10035C418);
    goto LABEL_7;
  }

  uint64_t v27 = v21;
  uint64_t v28 = v54;
  sub_10000E6C0((uint64_t)v15, v54, &qword_100355538);
  if (v26(v25, 1LL, v9) == 1)
  {
    swift_retain(v27);
    swift_retain(v23);
    sub_100015764((uint64_t)v20, &qword_100355538);
    sub_100004090(v28, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  sub_100003E68(v25, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  swift_retain(v27);
  swift_retain(v23);
  uint64_t v30 = sub_100065750(v28, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v20, &qword_100355538);
  sub_100004090(v28, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v15, &qword_100355538);
  if ((v30 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_11:
  uint64_t v31 = (int *)(v27
              + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess( v27 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client,  v59,  0LL,  0LL);
  uint64_t v32 = *v31;
  uint64_t v33 = *((_BYTE *)v31 + 4);
  uint64_t v34 = v23
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess( v23 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client,  v58,  0LL,  0LL);
  if ((v33 & 1) == 0)
  {
    uint64_t v35 = (uint64_t)v53;
    uint64_t v36 = (uint64_t)v52;
    if ((*(_BYTE *)(v34 + 4) & 1) == 0 && v32 == *(_DWORD *)v34) {
      goto LABEL_16;
    }
LABEL_7:
    swift_release(v27);
    swift_release(v23);
    return 0LL;
  }

  uint64_t v35 = (uint64_t)v53;
  uint64_t v36 = (uint64_t)v52;
  if ((*(_BYTE *)(v34 + 4) & 1) == 0) {
    goto LABEL_7;
  }
LABEL_16:
  uint64_t v37 = v27
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess( v27 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData,  v57,  0LL,  0LL);
  sub_10000E6C0(v37, v36, &qword_1003555C0);
  uint64_t v38 = v23
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess( v23 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData,  v56,  0LL,  0LL);
  uint64_t v39 = v51;
  uint64_t v40 = v51 + *(int *)(v48 + 48);
  sub_10000E6C0(v36, v51, &qword_1003555C0);
  uint64_t v41 = v38;
  uint64_t v42 = v39;
  sub_10000E6C0(v41, v40, &qword_1003555C0);
  uint64_t v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
  uint64_t v44 = v50;
  if (v43(v42, 1LL, v50) == 1)
  {
    swift_release(v27);
    swift_release(v23);
    sub_100015764(v36, &qword_1003555C0);
    if (v43(v40, 1LL, v44) == 1)
    {
      sub_100015764(v42, &qword_1003555C0);
      return 1LL;
    }

    goto LABEL_21;
  }

  sub_10000E6C0(v42, v35, &qword_1003555C0);
  if (v43(v40, 1LL, v44) == 1)
  {
    swift_release(v27);
    swift_release(v23);
    sub_100015764(v36, &qword_1003555C0);
    sub_100004090(v35, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
LABEL_21:
    sub_100015764(v42, &qword_10035C4C8);
    return 0LL;
  }

  uint64_t v45 = v47;
  sub_100003E68(v40, v47, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  uint64_t v46 = sub_10011B498(v35, v45);
  swift_release(v27);
  swift_release(v23);
  sub_100004090(v45, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  sub_100015764(v36, &qword_1003555C0);
  sub_100004090(v35, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  sub_100015764(v42, &qword_1003555C0);
  return (v46 & 1) != 0;
}

    sub_100015764((uint64_t)v8, &qword_10035C418);
    goto LABEL_7;
  }

  uint64_t v21 = v74;
  sub_10000E6C0((uint64_t)v8, v74, &qword_100355538);
  if (v18(v17, 1LL, v3) == 1)
  {
    uint64_t v20 = a1;
    swift_retain(a1);
    swift_retain(v15);
    sub_100015764((uint64_t)v13, &qword_100355538);
    sub_100004090(v21, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  uint64_t v23 = v73;
  sub_100003E68(v17, v73, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v20 = a1;
  swift_retain(a1);
  swift_retain(v15);
  uint64_t v24 = sub_100065750(v21, v23, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090(v23, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v13, &qword_100355538);
  sub_100004090(v21, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v8, &qword_100355538);
  if ((v24 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_10:
  uint64_t v25 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg;
  swift_beginAccess( v20 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg,  v103,  0LL,  0LL);
  uint64_t v26 = *(double *)v25;
  LOBYTE(v25) = *(_BYTE *)(v25 + 8);
  uint64_t v27 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg;
  swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg,  v102,  0LL,  0LL);
  if ((v25 & 1) != 0)
  {
    if ((*(_BYTE *)(v27 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }

  else if ((*(_BYTE *)(v27 + 8) & 1) != 0 || v26 != *(double *)v27)
  {
    goto LABEL_7;
  }

  uint64_t v28 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg;
  swift_beginAccess( v20 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg,  v101,  0LL,  0LL);
  uint64_t v29 = *(double *)v28;
  LOBYTE(v28) = *(_BYTE *)(v28 + 8);
  uint64_t v30 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg;
  swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg,  v100,  0LL,  0LL);
  if ((v28 & 1) != 0)
  {
    if ((*(_BYTE *)(v30 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }

  else if ((*(_BYTE *)(v30 + 8) & 1) != 0 || v29 != *(double *)v30)
  {
    goto LABEL_7;
  }

  uint64_t v31 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM;
  swift_beginAccess( v20 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM,  &v99,  0LL,  0LL);
  uint64_t v32 = *(double *)v31;
  LOBYTE(v31) = *(_BYTE *)(v31 + 8);
  uint64_t v33 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM;
  swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM,  &v98,  0LL,  0LL);
  if ((v31 & 1) != 0)
  {
    if ((*(_BYTE *)(v33 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }

  else if ((*(_BYTE *)(v33 + 8) & 1) != 0 || v32 != *(double *)v33)
  {
    goto LABEL_7;
  }

  uint64_t v34 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM;
  swift_beginAccess( v20 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM,  &v97,  0LL,  0LL);
  uint64_t v35 = *(double *)v34;
  LOBYTE(v34) = *(_BYTE *)(v34 + 8);
  uint64_t v36 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM;
  swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM,  &v96,  0LL,  0LL);
  if ((v34 & 1) != 0)
  {
    if ((*(_BYTE *)(v36 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }

  else if ((*(_BYTE *)(v36 + 8) & 1) != 0 || v35 != *(double *)v36)
  {
    goto LABEL_7;
  }

  uint64_t v37 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  swift_beginAccess( v20 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM,  &v95,  0LL,  0LL);
  uint64_t v38 = *(double *)v37;
  LOBYTE(v37) = *(_BYTE *)(v37 + 8);
  uint64_t v39 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM,  &v94,  0LL,  0LL);
  if ((v37 & 1) != 0)
  {
    if ((*(_BYTE *)(v39 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }

  else if ((*(_BYTE *)(v39 + 8) & 1) != 0 || v38 != *(double *)v39)
  {
    goto LABEL_7;
  }

  uint64_t v40 = (unsigned __int8 *)(v20
                          + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess( v20 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame,  &v93,  0LL,  0LL);
  uint64_t v41 = *v40;
  uint64_t v42 = (unsigned __int8 *)(v15
                          + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame,  &v92,  0LL,  0LL);
  uint64_t v43 = *v42;
  if (v41 == 3)
  {
    if (v43 != 3) {
      goto LABEL_7;
    }
  }

  else if (v43 == 3 || v41 != v43)
  {
    goto LABEL_7;
  }

  uint64_t v44 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg;
  swift_beginAccess( v20 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg,  &v91,  0LL,  0LL);
  uint64_t v45 = *(double *)v44;
  LOBYTE(v44) = *(_BYTE *)(v44 + 8);
  uint64_t v46 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg;
  swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg,  &v90,  0LL,  0LL);
  if ((v44 & 1) != 0)
  {
    if ((*(_BYTE *)(v46 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }

  else if ((*(_BYTE *)(v46 + 8) & 1) != 0 || v45 != *(double *)v46)
  {
    goto LABEL_7;
  }

  uint64_t v47 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  swift_beginAccess( v20 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg,  &v89,  0LL,  0LL);
  char v48 = *(double *)v47;
  LOBYTE(v47) = *(_BYTE *)(v47 + 8);
  uint64_t v49 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg,  &v88,  0LL,  0LL);
  if ((v47 & 1) != 0)
  {
    if ((*(_BYTE *)(v49 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }

  else if ((*(_BYTE *)(v49 + 8) & 1) != 0 || v48 != *(double *)v49)
  {
    goto LABEL_7;
  }

  int v50 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  swift_beginAccess( v20 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM,  &v87,  0LL,  0LL);
  char v51 = *(double *)v50;
  LOBYTE(v50) = *(_BYTE *)(v50 + 8);
  char v52 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM,  &v86,  0LL,  0LL);
  if ((v50 & 1) != 0)
  {
    if ((*(_BYTE *)(v52 + 8) & 1) != 0) {
      goto LABEL_55;
    }
LABEL_7:
    swift_release(v20);
    swift_release(v15);
    return 0LL;
  }

    uint64_t v38 = &qword_10035C418;
    uint64_t v39 = (uint64_t)v22;
LABEL_7:
    sub_100015764(v39, v38);
    goto LABEL_8;
  }

  uint64_t v36 = v28;
  uint64_t v37 = v123;
  sub_10000E6C0((uint64_t)v22, v123, &qword_100355538);
  if (v33(v32, 1LL, v17) == 1)
  {
    swift_retain(v28);
    uint64_t v35 = v30;
    swift_retain(v30);
    sub_100015764((uint64_t)v27, &qword_100355538);
    sub_100004090(v37, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  uint64_t v41 = v119;
  sub_100003E68(v32, v119, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  swift_retain(v36);
  uint64_t v35 = v30;
  swift_retain(v30);
  uint64_t v42 = sub_100065750(v37, v41, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090(v41, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v27, &qword_100355538);
  sub_100004090(v37, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v22, &qword_100355538);
  if ((v42 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v43 = (int *)(v36
              + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess( v36 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client,  v148,  0LL,  0LL);
  uint64_t v44 = *v43;
  uint64_t v45 = *((_BYTE *)v43 + 4);
  uint64_t v46 = v35
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess( v35 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client,  v147,  0LL,  0LL);
  if ((v45 & 1) != 0)
  {
    char v48 = (uint64_t)v120;
    uint64_t v47 = (uint64_t)v121;
    uint64_t v49 = v122;
    if ((*(_BYTE *)(v46 + 4) & 1) == 0) {
      goto LABEL_8;
    }
  }

  else
  {
    char v48 = (uint64_t)v120;
    uint64_t v47 = (uint64_t)v121;
    uint64_t v49 = v122;
    if ((*(_BYTE *)(v46 + 4) & 1) != 0 || v44 != *(_DWORD *)v46) {
      goto LABEL_8;
    }
  }

  int v50 = (unsigned __int8 *)(v36
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess( v36 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData,  v146,  0LL,  0LL);
  char v51 = *v50;
  char v52 = (unsigned __int8 *)(v35
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess( v35 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData,  v145,  0LL,  0LL);
  uint64_t v53 = *v52;
  if (v51 == 20)
  {
    if (v53 != 20) {
      goto LABEL_8;
    }
  }

  else if (v53 == 20 || v51 != v53)
  {
    goto LABEL_8;
  }

  uint64_t v54 = v36
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess( v36 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability,  v144,  0LL,  0LL);
  sub_10000E6C0(v54, v49, &qword_1003555D8);
  uint64_t v55 = v35
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess( v35 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability,  &v143,  0LL,  0LL);
  uint64_t v56 = v118;
  uint64_t v57 = v118 + *(int *)(v115 + 48);
  sub_10000E6C0(v49, v118, &qword_1003555D8);
  uint64_t v58 = v55;
  uint64_t v59 = v56;
  sub_10000E6C0(v58, v57, &qword_1003555D8);
  uint64_t v60 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116 + 48);
  uint64_t v61 = v56;
  uint64_t v62 = v117;
  if (v60(v61, 1LL, v117) == 1)
  {
    sub_100015764(v49, &qword_1003555D8);
    if (v60(v57, 1LL, v62) == 1)
    {
      sub_100015764(v59, &qword_1003555D8);
      goto LABEL_28;
    }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    uint64_t v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0LL) + 24);
    uint64_t v10 = sub_10014A730();
    uint64_t v11 = v9;
    uint64_t v12 = &type metadata for CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel;
LABEL_5:
    dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v11, v12, v10, a2, a3);
    goto LABEL_6;
  }

  return result;
}

    uint64_t v46 = (uint64_t)v24;
LABEL_21:
    sub_100015764(v46, &qword_10035C418);
    goto LABEL_22;
  }

  uint64_t v44 = v38;
  uint64_t v43 = a2;
  uint64_t v45 = v188;
  sub_10000E6C0((uint64_t)v24, v188, &qword_100355538);
  v191 = v16;
  if (v42(v41, 1LL, v16) == 1)
  {
    swift_retain(v38);
    swift_retain(v43);
    sub_100015764((uint64_t)v37, &qword_100355538);
    sub_100004090(v45, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  uint64_t v47 = v187;
  uint64_t v167 = v42;
  sub_100003E68(v41, v187, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  swift_retain(v44);
  swift_retain(v43);
  char v48 = sub_100065750(v45, v47, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090(v47, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v37, &qword_100355538);
  uint64_t v42 = v167;
  sub_100004090(v45, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v38 = v44;
  sub_100015764((uint64_t)v24, &qword_100355538);
  uint64_t v16 = v191;
  if ((v48 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_8:
  uint64_t v49 = v38
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess( v38 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime,  v237,  0LL,  0LL);
  int v50 = v190;
  sub_10000E6C0(v49, v190, &qword_100355538);
  char v51 = v43
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess( v43 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime,  v236,  0LL,  0LL);
  char v52 = v185;
  uint64_t v53 = v185 + *(int *)(v189 + 48);
  sub_10000E6C0(v50, v185, &qword_100355538);
  sub_10000E6C0(v51, v53, &qword_100355538);
  if (v42(v52, 1LL, v16) == 1)
  {
    sub_100015764(v50, &qword_100355538);
    uint64_t v54 = v42(v53, 1LL, v16);
    uint64_t v55 = (uint64_t)v186;
    if (v54 == 1)
    {
      sub_100015764(v52, &qword_100355538);
      goto LABEL_15;
    }

    goto LABEL_13;
  }

  uint64_t v56 = v184;
  sub_10000E6C0(v52, v184, &qword_100355538);
  uint64_t v57 = v42(v53, 1LL, v16);
  uint64_t v55 = (uint64_t)v186;
  if (v57 == 1)
  {
    sub_100015764(v190, &qword_100355538);
    sub_100004090(v56, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_13:
    uint64_t v46 = v52;
    goto LABEL_21;
  }

  v191 = v43;
  uint64_t v58 = v52;
  uint64_t v59 = v187;
  sub_100003E68(v53, v187, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v60 = sub_100065750(v56, v59, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090(v59, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764(v190, &qword_100355538);
  sub_100004090(v56, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v61 = v58;
  uint64_t v43 = v191;
  sub_100015764(v61, &qword_100355538);
  if ((v60 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_15:
  uint64_t v62 = v38
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  swift_beginAccess( v38 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime,  v235,  0LL,  0LL);
  sub_10000E6C0(v62, v55, &qword_100355538);
  uint64_t v63 = v43
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  swift_beginAccess( v43 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime,  v234,  0LL,  0LL);
  uint64_t v64 = v183;
  uint64_t v65 = v183 + *(int *)(v189 + 48);
  sub_10000E6C0(v55, v183, &qword_100355538);
  sub_10000E6C0(v63, v65, &qword_100355538);
  if (v42(v64, 1LL, v16) == 1)
  {
    sub_100015764(v55, &qword_100355538);
    if (v42(v65, 1LL, v16) == 1)
    {
      sub_100015764(v64, &qword_100355538);
      goto LABEL_26;
    }

    goto LABEL_20;
  }

  uint64_t v66 = v182;
  sub_10000E6C0(v64, v182, &qword_100355538);
  if (v42(v65, 1LL, v16) == 1)
  {
    sub_100015764(v55, &qword_100355538);
    sub_100004090(v66, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_20:
    uint64_t v46 = v64;
    goto LABEL_21;
  }

  uint64_t v69 = v187;
  sub_100003E68(v65, v187, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v70 = sub_100065750(v66, v69, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090(v69, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764(v55, &qword_100355538);
  sub_100004090(v66, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764(v64, &qword_100355538);
  if ((v70 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_26:
  uint64_t v71 = (int *)(v38
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count);
  swift_beginAccess( v38 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count,  &v233,  0LL,  0LL);
  uint64_t v72 = *v71;
  uint64_t v73 = *((_BYTE *)v71 + 4);
  v74 = v43
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count;
  swift_beginAccess( v43 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count,  &v232,  0LL,  0LL);
  if ((v73 & 1) != 0)
  {
    if ((*(_BYTE *)(v74 + 4) & 1) == 0) {
      goto LABEL_22;
    }
  }

  else if ((*(_BYTE *)(v74 + 4) & 1) != 0 || v72 != *(_DWORD *)v74)
  {
    goto LABEL_22;
  }

  uint64_t v75 = v38
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM;
  swift_beginAccess( v38 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM,  &v231,  0LL,  0LL);
  int v76 = *(double *)v75;
  uint64_t v77 = *(_BYTE *)(v75 + 8);
  uint64_t v78 = v43
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM;
  swift_beginAccess( v43 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM,  &v230,  0LL,  0LL);
  if ((v77 & 1) != 0)
  {
    if ((*(_BYTE *)(v78 + 8) & 1) == 0) {
      goto LABEL_22;
    }
  }

  else if ((*(_BYTE *)(v78 + 8) & 1) != 0 || v76 != *(double *)v78)
  {
    goto LABEL_22;
  }

  uint64_t v79 = v38
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM;
  swift_beginAccess( v38 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM,  &v229,  0LL,  0LL);
  int v80 = *(double *)v79;
  v81 = *(_BYTE *)(v79 + 8);
  uint64_t v82 = v43
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM;
  swift_beginAccess( v43 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM,  &v228,  0LL,  0LL);
  if ((v81 & 1) != 0)
  {
    if ((*(_BYTE *)(v82 + 8) & 1) == 0) {
      goto LABEL_22;
    }
  }

  else if ((*(_BYTE *)(v82 + 8) & 1) != 0 || v80 != *(double *)v82)
  {
    goto LABEL_22;
  }

  uint64_t v83 = (int *)(v38
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended);
  swift_beginAccess( v38 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended,  &v227,  0LL,  0LL);
  uint64_t v84 = *v83;
  uint64_t v85 = *((_BYTE *)v83 + 4);
  uint64_t v86 = v43
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended;
  swift_beginAccess( v43 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended,  &v226,  0LL,  0LL);
  if ((v85 & 1) != 0)
  {
    if ((*(_BYTE *)(v86 + 4) & 1) == 0) {
      goto LABEL_22;
    }
  }

  else if ((*(_BYTE *)(v86 + 4) & 1) != 0 || v84 != *(_DWORD *)v86)
  {
    goto LABEL_22;
  }

  char v87 = (int *)(v38
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended);
  swift_beginAccess( v38 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended,  &v225,  0LL,  0LL);
  uint64_t v88 = *v87;
  uint64_t v89 = *((_BYTE *)v87 + 4);
  uint64_t v90 = v43
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
  swift_beginAccess( v43 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended,  &v224,  0LL,  0LL);
  if ((v89 & 1) != 0)
  {
    if ((*(_BYTE *)(v90 + 4) & 1) == 0) {
      goto LABEL_22;
    }
  }

  else if ((*(_BYTE *)(v90 + 4) & 1) != 0 || v88 != *(_DWORD *)v90)
  {
    goto LABEL_22;
  }

  uint64_t v91 = v38
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  swift_beginAccess( v38 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm,  &v223,  0LL,  0LL);
  uint64_t v92 = *(double *)v91;
  v93 = *(_BYTE *)(v91 + 8);
  uint64_t v94 = v43
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  swift_beginAccess( v43 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm,  &v222,  0LL,  0LL);
  if ((v93 & 1) != 0)
  {
    if ((*(_BYTE *)(v94 + 8) & 1) == 0) {
      goto LABEL_22;
    }
  }

  else if ((*(_BYTE *)(v94 + 8) & 1) != 0 || v92 != *(double *)v94)
  {
    goto LABEL_22;
  }

  uint64_t v95 = v38
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  swift_beginAccess( v38 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence,  &v221,  0LL,  0LL);
  v96 = *(double *)v95;
  uint64_t v97 = *(_BYTE *)(v95 + 8);
  char v98 = v43
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  swift_beginAccess( v43 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence,  &v220,  0LL,  0LL);
  if ((v97 & 1) != 0)
  {
    if ((*(_BYTE *)(v98 + 8) & 1) != 0) {
      goto LABEL_61;
    }
LABEL_22:
    swift_release(v38);
    uint64_t v67 = v43;
LABEL_23:
    swift_release(v67);
    return 0LL;
  }

    sub_100015764((uint64_t)v17, &qword_10035C478);
    goto LABEL_58;
  }

  uint64_t v34 = v27;
  uint64_t v35 = v101;
  sub_10000E6C0((uint64_t)v17, v101, &qword_100355600);
  if (v33(v30, 1LL, v11) == 1)
  {
    swift_retain(v34);
    swift_retain(a2);
    sub_100015764((uint64_t)v26, &qword_100355600);
    sub_100004090(v35, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    goto LABEL_6;
  }

  uint64_t v36 = v98;
  sub_100003E68(v30, v98, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  swift_retain(v34);
  swift_retain(a2);
  uint64_t v37 = sub_10011BB28(v35, v36);
  sub_100004090(v36, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  sub_100015764((uint64_t)v26, &qword_100355600);
  sub_100004090(v35, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  sub_100015764((uint64_t)v17, &qword_100355600);
  if ((v37 & 1) == 0) {
    goto LABEL_58;
  }
LABEL_8:
  uint64_t v38 = v34
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  swift_beginAccess( v34 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField,  v123,  0LL,  0LL);
  uint64_t v39 = v102;
  sub_10000E6C0(v38, v102, &qword_100355600);
  uint64_t v40 = a2
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  swift_beginAccess( a2 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField,  v122,  0LL,  0LL);
  uint64_t v41 = v100;
  uint64_t v42 = v100 + *(int *)(v99 + 48);
  sub_10000E6C0(v39, v100, &qword_100355600);
  sub_10000E6C0(v40, v42, &qword_100355600);
  if (v33(v41, 1LL, v32) == 1)
  {
    sub_100015764(v39, &qword_100355600);
    if (v33(v42, 1LL, v32) == 1)
    {
      sub_100015764(v41, &qword_100355600);
      goto LABEL_15;
    }

    sub_100015764((uint64_t)v26, &qword_10035C480);
    goto LABEL_52;
  }

  uint64_t v38 = v32;
  uint64_t v41 = v119;
  sub_10000E6C0((uint64_t)v26, v119, &qword_100355608);
  if (v37(v36, 1LL, v21) == 1)
  {
    swift_retain(v38);
    uint64_t v40 = v34;
    swift_retain(v34);
    sub_100015764((uint64_t)v31, &qword_100355608);
    sub_100004090(v41, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
    goto LABEL_6;
  }

  uint64_t v42 = v114;
  sub_100003E68(v36, v114, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  swift_retain(v38);
  uint64_t v40 = v34;
  swift_retain(v34);
  uint64_t v43 = sub_10011E088(v41, v42, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  sub_100004090(v42, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  sub_100015764((uint64_t)v31, &qword_100355608);
  sub_100004090(v41, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  sub_100015764((uint64_t)v26, &qword_100355608);
  if ((v43 & 1) == 0) {
    goto LABEL_52;
  }
LABEL_8:
  uint64_t v44 = v38
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess( v38 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration,  v137,  0LL,  0LL);
  uint64_t v45 = v44;
  uint64_t v46 = v115;
  sub_10000E6C0(v45, v115, &qword_100355600);
  uint64_t v47 = v46;
  char v48 = v40
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess( v40 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration,  v136,  0LL,  0LL);
  uint64_t v49 = v117;
  int v50 = v117 + *(int *)(v120 + 48);
  sub_10000E6C0(v47, v117, &qword_100355600);
  sub_10000E6C0(v48, v50, &qword_100355600);
  char v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116 + 48);
  char v52 = v118;
  if (v51(v49, 1LL, v118) == 1)
  {
    sub_100015764(v47, &qword_100355600);
    if (v51(v50, 1LL, v52) == 1)
    {
      sub_100015764(v49, &qword_100355600);
      goto LABEL_15;
    }

    uint64_t v36 = &qword_10035C418;
    uint64_t v37 = (uint64_t)v22;
LABEL_7:
    sub_100015764(v37, v36);
    goto LABEL_8;
  }

  uint64_t v34 = v28;
  uint64_t v35 = v110;
  sub_10000E6C0((uint64_t)v22, v110, &qword_100355538);
  if (v33(v32, 1LL, v17) == 1)
  {
    swift_retain(v34);
    swift_retain(v30);
    sub_100015764((uint64_t)v27, &qword_100355538);
    sub_100004090(v35, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  uint64_t v39 = v106;
  sub_100003E68(v32, v106, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  swift_retain(v34);
  swift_retain(v30);
  uint64_t v40 = sub_100065750(v35, v39, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090(v39, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v27, &qword_100355538);
  sub_100004090(v35, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v22, &qword_100355538);
  if ((v40 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v41 = (int *)(v34
              + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess( v34 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client,  v131,  0LL,  0LL);
  uint64_t v42 = *v41;
  uint64_t v43 = *((_BYTE *)v41 + 4);
  uint64_t v44 = v30
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess( v30 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client,  v130,  0LL,  0LL);
  if ((v43 & 1) != 0)
  {
    uint64_t v46 = (uint64_t)v108;
    uint64_t v45 = v109;
    uint64_t v47 = (uint64_t)v107;
    if ((*(_BYTE *)(v44 + 4) & 1) == 0) {
      goto LABEL_8;
    }
  }

  else
  {
    uint64_t v46 = (uint64_t)v108;
    uint64_t v45 = v109;
    uint64_t v47 = (uint64_t)v107;
    if ((*(_BYTE *)(v44 + 4) & 1) != 0 || v42 != *(_DWORD *)v44) {
      goto LABEL_8;
    }
  }

  char v48 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess( v34 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type,  v129,  0LL,  0LL);
  uint64_t v49 = *v48;
  int v50 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess( v30 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type,  v128,  0LL,  0LL);
  char v51 = *v50;
  if (v49 == 15)
  {
    char v52 = v105;
    if (v51 != 15) {
      goto LABEL_8;
    }
  }

  else
  {
    char v52 = v105;
    if (v51 == 15 || v49 != v51) {
      goto LABEL_8;
    }
  }

  uint64_t v53 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
  swift_beginAccess( v34 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType,  v127,  0LL,  0LL);
  uint64_t v54 = *v53;
  uint64_t v55 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
  swift_beginAccess( v30 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType,  &v126,  0LL,  0LL);
  uint64_t v56 = *v55;
  if (v54 == 15)
  {
    if (v56 != 15) {
      goto LABEL_8;
    }
  }

  else if (v56 == 15 || v54 != v56)
  {
    goto LABEL_8;
  }

  uint64_t v57 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  swift_beginAccess( v34 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power,  &v125,  0LL,  0LL);
  uint64_t v58 = *v57;
  uint64_t v59 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  swift_beginAccess( v30 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power,  &v124,  0LL,  0LL);
  uint64_t v60 = *v59;
  if (v58 == 2)
  {
    if (v60 != 2) {
      goto LABEL_8;
    }
  }

  else if (v60 == 2 || ((((v60 & 1) == 0) ^ v58) & 1) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v61 = v34
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess( v34 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState,  &v123,  0LL,  0LL);
  sub_10000E6C0(v61, v52, &qword_100355638);
  uint64_t v62 = v52;
  uint64_t v63 = v30
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess( v30 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState,  &v122,  0LL,  0LL);
  uint64_t v64 = v104;
  uint64_t v65 = v104 + *(int *)(v101 + 48);
  sub_10000E6C0(v62, v104, &qword_100355638);
  sub_10000E6C0(v63, v65, &qword_100355638);
  uint64_t v66 = v103;
  uint64_t v67 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v102 + 48);
  if (v67(v64, 1LL, v103) == 1)
  {
    sub_100015764(v105, &qword_100355638);
    if (v67(v65, 1LL, v66) == 1)
    {
      sub_100015764(v64, &qword_100355638);
      goto LABEL_38;
    }

    goto LABEL_36;
  }

  sub_10000E6C0(v64, v47, &qword_100355638);
  if (v67(v65, 1LL, v66) == 1)
  {
    sub_100015764(v105, &qword_100355638);
    sub_100004090(v47, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
LABEL_36:
    uint64_t v36 = &qword_10035C450;
    uint64_t v37 = v64;
    goto LABEL_7;
  }

  char v68 = v96;
  sub_100003E68(v65, v96, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  uint64_t v69 = sub_100114FD8(v47, v68);
  sub_100004090(v68, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  sub_100015764(v105, &qword_100355638);
  sub_100004090(v47, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  sub_100015764(v64, &qword_100355638);
  if ((v69 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_38:
  uint64_t v70 = v34
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess( v34 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan,  &v121,  0LL,  0LL);
  sub_10000E6C0(v70, v46, &qword_100355640);
  uint64_t v71 = v30
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess( v30 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan,  &v120,  0LL,  0LL);
  uint64_t v72 = v100;
  uint64_t v73 = v100 + *(int *)(v97 + 48);
  sub_10000E6C0(v46, v100, &qword_100355640);
  v74 = v72;
  sub_10000E6C0(v71, v73, &qword_100355640);
  uint64_t v75 = v99;
  int v76 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v98 + 48);
  if (v76(v74, 1LL, v99) == 1)
  {
    sub_100015764(v46, &qword_100355640);
    if (v76(v73, 1LL, v75) == 1)
    {
      sub_100015764(v74, &qword_100355640);
      goto LABEL_45;
    }

    goto LABEL_43;
  }

  sub_10000E6C0(v74, (uint64_t)v45, &qword_100355640);
  if (v76(v73, 1LL, v75) == 1)
  {
    sub_100015764(v46, &qword_100355640);
    sub_100004090((uint64_t)v45, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
LABEL_43:
    uint64_t v36 = &qword_10035C448;
    uint64_t v37 = v74;
    goto LABEL_7;
  }

  uint64_t v77 = v95;
  sub_100003E68(v73, (uint64_t)v95, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  uint64_t v78 = sub_10011893C( v45,  v77,  (uint64_t *)type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint,  (uint64_t (*)(char *, char *))sub_1001156D8);
  sub_100004090((uint64_t)v77, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  sub_100015764(v46, &qword_100355640);
  sub_100004090((uint64_t)v45, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  sub_100015764(v74, &qword_100355640);
  if ((v78 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_45:
  uint64_t v79 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  swift_beginAccess( v34 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated,  &v119,  0LL,  0LL);
  int v80 = *v79;
  v81 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  swift_beginAccess( v30 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated,  &v118,  0LL,  0LL);
  uint64_t v82 = *v81;
  if (v80 == 2)
  {
    if (v82 != 2) {
      goto LABEL_8;
    }
  }

  else if (v82 == 2 || ((((v82 & 1) == 0) ^ v80) & 1) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v83 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  swift_beginAccess( v34 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available,  &v117,  0LL,  0LL);
  uint64_t v84 = *v83;
  uint64_t v85 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  swift_beginAccess( v30 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available,  &v116,  0LL,  0LL);
  uint64_t v86 = *v85;
  if (v84 == 2)
  {
    if (v86 != 2) {
      goto LABEL_8;
    }
  }

  else if (v86 == 2 || ((((v86 & 1) == 0) ^ v84) & 1) == 0)
  {
    goto LABEL_8;
  }

  char v87 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  swift_beginAccess( v34 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown,  &v115,  0LL,  0LL);
  uint64_t v88 = *v87;
  uint64_t v89 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  swift_beginAccess( v30 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown,  &v114,  0LL,  0LL);
  uint64_t v90 = *v89;
  if (v88 == 2)
  {
    if (v90 == 2) {
      goto LABEL_60;
    }
LABEL_8:
    swift_release(v34);
    swift_release(v30);
    return 0LL;
  }

  if (v90 == 2 || ((((v90 & 1) == 0) ^ v88) & 1) == 0) {
    goto LABEL_8;
  }
LABEL_60:
  uint64_t v91 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  swift_beginAccess( v34 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake,  &v113,  0LL,  0LL);
  uint64_t v92 = *v91;
  swift_release(v34);
  v93 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  swift_beginAccess( v30 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake,  &v112,  0LL,  0LL);
  uint64_t v94 = *v93;
  swift_release(v30);
  if (v92 != 2) {
    return v94 != 2 && ((((v94 & 1) == 0) ^ v92) & 1) != 0;
  }
  return v94 == 2;
}

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0LL);
    uint64_t v11 = v9;
    dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + *(int *)(v10 + 28), a2, a3);
LABEL_5:
    uint64_t v9 = v11;
    goto LABEL_6;
  }

  return result;
}

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0LL) + 24);
LABEL_5:
    uint64_t v10 = v3 + v9;
    uint64_t v11 = sub_100149C90();
    dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v10,  &type metadata for CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType,  v11,  a2,  a3);
    goto LABEL_6;
  }

  return result;
}

    uint64_t v38 = (uint64_t)v15;
LABEL_14:
    sub_100015764(v38, &qword_10035C418);
    goto LABEL_15;
  }

  sub_10000E6C0((uint64_t)v15, (uint64_t)v25, &qword_100355538);
  if (v37(v36, 1LL, v8) == 1)
  {
    sub_100015764((uint64_t)v28, &qword_100355538);
    sub_100015764((uint64_t)v30, &qword_100355538);
    sub_100004090((uint64_t)v25, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  uint64_t v39 = v36;
  uint64_t v40 = v87;
  sub_100003E68(v39, (uint64_t)v87, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v81 = sub_100065750((uint64_t)v25, (uint64_t)v40, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090((uint64_t)v40, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v28, &qword_100355538);
  sub_100015764((uint64_t)v30, &qword_100355538);
  sub_100004090((uint64_t)v25, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v15, &qword_100355538);
  if ((v81 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v41 = v90;
  uint64_t v42 = v88;
  sub_10000E6C0((uint64_t)v90 + v34[8], (uint64_t)v88, &qword_100355538);
  uint64_t v43 = v91;
  uint64_t v44 = v92;
  sub_10000E6C0((uint64_t)v91 + v34[8], (uint64_t)v92, &qword_100355538);
  uint64_t v45 = v89;
  uint64_t v46 = (uint64_t)&v89[*(int *)(v11 + 48)];
  sub_10000E6C0((uint64_t)v42, (uint64_t)v89, &qword_100355538);
  sub_10000E6C0((uint64_t)v44, v46, &qword_100355538);
  if (v37((uint64_t)v45, 1LL, v8) == 1)
  {
    sub_100015764((uint64_t)v44, &qword_100355538);
    sub_100015764((uint64_t)v42, &qword_100355538);
    if (v37(v46, 1LL, v8) == 1)
    {
      sub_100015764((uint64_t)v45, &qword_100355538);
      goto LABEL_18;
    }

    goto LABEL_13;
  }

  uint64_t v47 = v86;
  sub_10000E6C0((uint64_t)v45, (uint64_t)v86, &qword_100355538);
  if (v37(v46, 1LL, v8) == 1)
  {
    sub_100015764((uint64_t)v92, &qword_100355538);
    sub_100015764((uint64_t)v42, &qword_100355538);
    sub_100004090((uint64_t)v47, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_13:
    uint64_t v38 = (uint64_t)v45;
    goto LABEL_14;
  }

  int v50 = v87;
  sub_100003E68(v46, (uint64_t)v87, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v51 = sub_100065750((uint64_t)v47, (uint64_t)v50, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090((uint64_t)v50, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v92, &qword_100355538);
  sub_100015764((uint64_t)v42, &qword_100355538);
  sub_100004090((uint64_t)v47, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v45, &qword_100355538);
  if ((v51 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_18:
  char v52 = v34[9];
  uint64_t v53 = (_DWORD *)((char *)v41 + v52);
  uint64_t v54 = *((_BYTE *)v41 + v52 + 4);
  uint64_t v55 = (_DWORD *)((char *)v43 + v52);
  uint64_t v56 = *((unsigned __int8 *)v43 + v52 + 4);
  if ((v54 & 1) != 0)
  {
    if (!v56) {
      goto LABEL_15;
    }
  }

  else
  {
    if (*v53 != *v55) {
      LOBYTE(v56) = 1;
    }
    if ((v56 & 1) != 0) {
      goto LABEL_15;
    }
  }

  uint64_t v57 = v34;
  uint64_t v58 = v34[10];
  uint64_t v59 = *((unsigned __int8 *)v41 + v58);
  uint64_t v60 = *((unsigned __int8 *)v43 + v58);
  if (v59 == 5)
  {
    if (v60 != 5) {
      goto LABEL_15;
    }
  }

  else
  {
    char v48 = 0;
    if (v60 == 5 || v59 != v60) {
      return v48 & 1;
    }
  }

  uint64_t v61 = v57[11];
  uint64_t v62 = (_DWORD *)((char *)v41 + v61);
  uint64_t v63 = *((_BYTE *)v41 + v61 + 4);
  uint64_t v64 = (_DWORD *)((char *)v43 + v61);
  uint64_t v65 = *((unsigned __int8 *)v43 + v61 + 4);
  if ((v63 & 1) != 0)
  {
    if (!v65) {
      goto LABEL_15;
    }
  }

  else
  {
    if (*v62 != *v64) {
      LOBYTE(v65) = 1;
    }
    if ((v65 & 1) != 0) {
      goto LABEL_15;
    }
  }

  if (!sub_10005DF08(*v41, *v43) || !sub_10005DF08(v41[1], v43[1])) {
    goto LABEL_15;
  }
  uint64_t v66 = v57[12];
  uint64_t v67 = *((unsigned __int8 *)v41 + v66);
  char v68 = *((unsigned __int8 *)v43 + v66);
  if (v67 != 2)
  {
    if (v68 != 2 && ((((v68 & 1) == 0) ^ v67) & 1) != 0) {
      goto LABEL_42;
    }
LABEL_15:
    char v48 = 0;
    return v48 & 1;
  }

  if (v68 != 2) {
    goto LABEL_15;
  }
LABEL_42:
  uint64_t v69 = v57[13];
  uint64_t v70 = *((unsigned __int8 *)v41 + v69);
  uint64_t v71 = *((unsigned __int8 *)v43 + v69);
  if (v70 == 2)
  {
    if (v71 == 2)
    {
LABEL_47:
      uint64_t v72 = (char *)v41 + v57[6];
      v74 = v84;
      uint64_t v73 = v85;
      uint64_t v75 = *(void (**)(_BYTE *, char *, uint64_t))(v84 + 16);
      int v76 = v82;
      v75(v82, v72, v85);
      uint64_t v77 = v83;
      v75(v83, (char *)v43 + v57[6], v73);
      uint64_t v78 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v48 = dispatch thunk of static Equatable.== infix(_:_:)(v76, v77, v73, v78);
      uint64_t v79 = *(void (**)(_BYTE *, uint64_t))(v74 + 8);
      v79(v77, v73);
      v79(v76, v73);
      return v48 & 1;
    }

    goto LABEL_15;
  }

  char v48 = 0;
  if (v71 != 2 && ((v71 ^ v70) & 1) == 0) {
    goto LABEL_47;
  }
  return v48 & 1;
}

    uint64_t v33 = &qword_10035C418;
    uint64_t v34 = (uint64_t)v20;
LABEL_7:
    sub_100015764(v34, v33);
    goto LABEL_8;
  }

  sub_10000E6C0((uint64_t)v20, (uint64_t)v24, &qword_100355538);
  if (v32(v31, 1LL, v14) == 1)
  {
    sub_100015764((uint64_t)v27, &qword_100355538);
    sub_100015764((uint64_t)v29, &qword_100355538);
    sub_100004090((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  sub_100003E68(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v37 = sub_100065750((uint64_t)v24, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v27, &qword_100355538);
  sub_100015764((uint64_t)v29, &qword_100355538);
  sub_100004090((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v20, &qword_100355538);
  if ((v37 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v38 = v30[6];
  uint64_t v39 = v73;
  uint64_t v40 = v74;
  uint64_t v41 = (_DWORD *)(v73 + v38);
  uint64_t v42 = *(_BYTE *)(v73 + v38 + 4);
  uint64_t v43 = (_DWORD *)(v74 + v38);
  uint64_t v44 = *(unsigned __int8 *)(v74 + v38 + 4);
  if ((v42 & 1) != 0)
  {
    if (!v44) {
      goto LABEL_8;
    }
  }

  else
  {
    if (*v41 != *v43) {
      LOBYTE(v44) = 1;
    }
    if ((v44 & 1) != 0) {
      goto LABEL_8;
    }
  }

  uint64_t v45 = v70;
  sub_10000E6C0(v73 + v30[7], v70, &qword_1003555C8);
  uint64_t v46 = v69;
  sub_10000E6C0(v40 + v30[7], v69, &qword_1003555C8);
  uint64_t v47 = v72;
  char v48 = v72 + *(int *)(v67 + 48);
  sub_10000E6C0(v45, v72, &qword_1003555C8);
  sub_10000E6C0(v46, v48, &qword_1003555C8);
  uint64_t v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
  int v50 = v71;
  if (v49(v47, 1LL, v71) == 1)
  {
    sub_100015764(v46, &qword_1003555C8);
    sub_100015764(v45, &qword_1003555C8);
    if (v49(v48, 1LL, v50) == 1)
    {
      sub_100015764(v47, &qword_1003555C8);
LABEL_24:
      uint64_t v55 = v64;
      uint64_t v54 = v65;
      uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t))(v64 + 16);
      uint64_t v57 = v62;
      v56(v62, v39, v65);
      uint64_t v58 = v63;
      v56(v63, v40, v54);
      uint64_t v59 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      uint64_t v35 = dispatch thunk of static Equatable.== infix(_:_:)(v57, v58, v54, v59);
      uint64_t v60 = *(void (**)(char *, uint64_t))(v55 + 8);
      v60(v58, v54);
      v60(v57, v54);
      return v35 & 1;
    }

    goto LABEL_22;
  }

  char v51 = v66;
  sub_10000E6C0(v47, v66, &qword_1003555C8);
  if (v49(v48, 1LL, v50) == 1)
  {
    sub_100015764(v46, &qword_1003555C8);
    sub_100015764(v45, &qword_1003555C8);
    sub_100004090(v51, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
LABEL_22:
    uint64_t v33 = &qword_10035C4C0;
    uint64_t v34 = v47;
    goto LABEL_7;
  }

  char v52 = v61;
  sub_100003E68(v48, v61, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  uint64_t v53 = sub_100112298(v51, v52);
  sub_100004090(v52, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  sub_100015764(v46, &qword_1003555C8);
  sub_100015764(v45, &qword_1003555C8);
  sub_100004090(v51, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  sub_100015764(v47, &qword_1003555C8);
  if ((v53 & 1) != 0) {
    goto LABEL_24;
  }
LABEL_8:
  uint64_t v35 = 0;
  return v35 & 1;
}

    uint64_t v37 = (uint64_t)v14;
LABEL_14:
    sub_100015764(v37, &qword_10035C418);
    goto LABEL_15;
  }

  sub_10000E6C0((uint64_t)v14, (uint64_t)v24, &qword_100355538);
  if (v36(v35, 1LL, v34) == 1)
  {
    sub_100015764((uint64_t)v27, &qword_100355538);
    sub_100015764((uint64_t)v29, &qword_100355538);
    sub_100004090((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  uint64_t v38 = v35;
  uint64_t v39 = v73;
  sub_100003E68(v38, v73, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v40 = sub_100065750((uint64_t)v24, v39, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090(v39, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v27, &qword_100355538);
  sub_100015764((uint64_t)v29, &qword_100355538);
  sub_100004090((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v14, &qword_100355538);
  if ((v40 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v41 = v32;
  uint64_t v42 = v77;
  uint64_t v43 = v78;
  sub_10000E6C0((uint64_t)v77 + v32[7], v78, &qword_100355538);
  uint64_t v44 = v79;
  uint64_t v45 = v75;
  sub_10000E6C0((uint64_t)v79 + v32[7], v75, &qword_100355538);
  uint64_t v46 = v76;
  uint64_t v47 = v76 + *(int *)(v74 + 48);
  sub_10000E6C0(v43, v76, &qword_100355538);
  sub_10000E6C0(v45, v47, &qword_100355538);
  if (v36(v46, 1LL, v34) == 1)
  {
    sub_100015764(v45, &qword_100355538);
    sub_100015764(v43, &qword_100355538);
    if (v36(v47, 1LL, v34) == 1)
    {
      sub_100015764(v46, &qword_100355538);
      goto LABEL_18;
    }

    goto LABEL_13;
  }

  char v48 = v72;
  sub_10000E6C0(v46, v72, &qword_100355538);
  if (v36(v47, 1LL, v34) == 1)
  {
    sub_100015764(v45, &qword_100355538);
    sub_100015764(v78, &qword_100355538);
    sub_100004090(v48, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_13:
    uint64_t v37 = v46;
    goto LABEL_14;
  }

  char v51 = v73;
  sub_100003E68(v47, v73, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v52 = sub_100065750(v48, v51, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090(v51, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764(v45, &qword_100355538);
  sub_100015764(v78, &qword_100355538);
  sub_100004090(v48, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764(v46, &qword_100355538);
  if ((v52 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_18:
  uint64_t v53 = v41[8];
  uint64_t v54 = *((unsigned __int8 *)v42 + v53);
  uint64_t v55 = *((unsigned __int8 *)v44 + v53);
  if (v54 == 7)
  {
    if (v55 != 7) {
      goto LABEL_15;
    }
  }

  else
  {
    uint64_t v49 = 0;
    if (v55 == 7 || v54 != v55) {
      return v49 & 1;
    }
  }

  uint64_t v56 = v41[9];
  uint64_t v57 = *((unsigned __int8 *)v42 + v56);
  uint64_t v58 = *((unsigned __int8 *)v44 + v56);
  if (v57 == 7)
  {
    if (v58 == 7) {
      goto LABEL_28;
    }
LABEL_15:
    uint64_t v49 = 0;
    return v49 & 1;
  }

  uint64_t v49 = 0;
  if (v58 != 7 && v57 == v58)
  {
LABEL_28:
    if ((sub_10010B338( *v42,  *v44,  type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData,  (uint64_t (*)(char *, char *))sub_10011F81C) & 1) != 0)
    {
      uint64_t v59 = (char *)v42 + v41[5];
      uint64_t v61 = v70;
      uint64_t v60 = v71;
      uint64_t v62 = *(void (**)(char *, char *, uint64_t))(v70 + 16);
      uint64_t v63 = v68;
      v62(v68, v59, v71);
      uint64_t v64 = (char *)v44 + v41[5];
      uint64_t v65 = v69;
      v62(v69, v64, v60);
      uint64_t v66 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      uint64_t v49 = dispatch thunk of static Equatable.== infix(_:_:)(v63, v65, v60, v66);
      uint64_t v67 = *(void (**)(char *, uint64_t))(v61 + 8);
      v67(v65, v60);
      v67(v63, v60);
      return v49 & 1;
    }

    goto LABEL_15;
  }

  return v49 & 1;
}

    uint64_t v33 = &qword_10035C418;
    uint64_t v34 = (uint64_t)v20;
LABEL_7:
    sub_100015764(v34, v33);
    goto LABEL_8;
  }

  sub_10000E6C0((uint64_t)v20, (uint64_t)v24, &qword_100355538);
  if (v32(v31, 1LL, v14) == 1)
  {
    sub_100015764((uint64_t)v27, &qword_100355538);
    sub_100015764((uint64_t)v29, &qword_100355538);
    sub_100004090((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  sub_100003E68(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v37 = sub_100065750((uint64_t)v24, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v27, &qword_100355538);
  sub_100015764((uint64_t)v29, &qword_100355538);
  sub_100004090((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v20, &qword_100355538);
  if ((v37 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v38 = v30[6];
  uint64_t v39 = v73;
  uint64_t v40 = v74;
  uint64_t v41 = (_DWORD *)(v73 + v38);
  uint64_t v42 = *(_BYTE *)(v73 + v38 + 4);
  uint64_t v43 = (_DWORD *)(v74 + v38);
  uint64_t v44 = *(unsigned __int8 *)(v74 + v38 + 4);
  if ((v42 & 1) != 0)
  {
    if (!v44) {
      goto LABEL_8;
    }
  }

  else
  {
    if (*v41 != *v43) {
      LOBYTE(v44) = 1;
    }
    if ((v44 & 1) != 0) {
      goto LABEL_8;
    }
  }

  uint64_t v45 = v70;
  sub_10000E6C0(v73 + v30[7], v70, &qword_1003555A0);
  uint64_t v46 = v69;
  sub_10000E6C0(v40 + v30[7], v69, &qword_1003555A0);
  uint64_t v47 = v72;
  char v48 = v72 + *(int *)(v67 + 48);
  sub_10000E6C0(v45, v72, &qword_1003555A0);
  sub_10000E6C0(v46, v48, &qword_1003555A0);
  uint64_t v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
  int v50 = v71;
  if (v49(v47, 1LL, v71) == 1)
  {
    sub_100015764(v46, &qword_1003555A0);
    sub_100015764(v45, &qword_1003555A0);
    if (v49(v48, 1LL, v50) == 1)
    {
      sub_100015764(v47, &qword_1003555A0);
LABEL_24:
      uint64_t v55 = v64;
      uint64_t v54 = v65;
      uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t))(v64 + 16);
      uint64_t v57 = v62;
      v56(v62, v39, v65);
      uint64_t v58 = v63;
      v56(v63, v40, v54);
      uint64_t v59 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      uint64_t v35 = dispatch thunk of static Equatable.== infix(_:_:)(v57, v58, v54, v59);
      uint64_t v60 = *(void (**)(char *, uint64_t))(v55 + 8);
      v60(v58, v54);
      v60(v57, v54);
      return v35 & 1;
    }

    goto LABEL_22;
  }

  char v51 = v66;
  sub_10000E6C0(v47, v66, &qword_1003555A0);
  if (v49(v48, 1LL, v50) == 1)
  {
    sub_100015764(v46, &qword_1003555A0);
    sub_100015764(v45, &qword_1003555A0);
    sub_100004090(v51, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
LABEL_22:
    uint64_t v33 = &qword_10035C4E8;
    uint64_t v34 = v47;
    goto LABEL_7;
  }

  char v52 = v61;
  sub_100003E68(v48, v61, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  uint64_t v53 = sub_1001160BC(v51, v52);
  sub_100004090(v52, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  sub_100015764(v46, &qword_1003555A0);
  sub_100015764(v45, &qword_1003555A0);
  sub_100004090(v51, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  sub_100015764(v47, &qword_1003555A0);
  if ((v53 & 1) != 0) {
    goto LABEL_24;
  }
LABEL_8:
  uint64_t v35 = 0;
  return v35 & 1;
}

    sub_100015764((uint64_t)v13, &qword_10035C418);
    goto LABEL_7;
  }

  uint64_t v30 = (uint64_t)v60;
  sub_10000E6C0((uint64_t)v13, (uint64_t)v17, &qword_100355538);
  if (v29(v28, 1LL, v8) == 1)
  {
    sub_100015764((uint64_t)v20, &qword_100355538);
    sub_100015764((uint64_t)v22, &qword_100355538);
    sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  sub_100003E68(v28, v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v33 = sub_100065750((uint64_t)v17, v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090(v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v20, &qword_100355538);
  sub_100015764((uint64_t)v22, &qword_100355538);
  sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v13, &qword_100355538);
  if ((v33 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_10:
  uint64_t v34 = v26[6];
  uint64_t v35 = v59;
  uint64_t v36 = *(unsigned __int8 *)(v58 + v34);
  uint64_t v37 = *(unsigned __int8 *)(v59 + v34);
  if (v36 == 8)
  {
    if (v37 != 8) {
      goto LABEL_7;
    }
  }

  else
  {
    uint64_t v31 = 0;
    if (v37 == 8 || v36 != v37) {
      return v31 & 1;
    }
  }

  uint64_t v38 = v26[7];
  uint64_t v39 = *(unsigned __int8 *)(v58 + v38);
  uint64_t v40 = *(unsigned __int8 *)(v59 + v38);
  if (v39 == 8)
  {
    if (v40 == 8) {
      goto LABEL_20;
    }
LABEL_7:
    uint64_t v31 = 0;
    return v31 & 1;
  }

  uint64_t v31 = 0;
  if (v40 != 8 && v39 == v40)
  {
LABEL_20:
    uint64_t v41 = v26[8];
    uint64_t v42 = (_DWORD *)(v58 + v41);
    uint64_t v43 = *(_BYTE *)(v58 + v41 + 4);
    uint64_t v44 = (_DWORD *)(v59 + v41);
    uint64_t v45 = *(unsigned __int8 *)(v59 + v41 + 4);
    if ((v43 & 1) != 0)
    {
      if (v45)
      {
LABEL_26:
        uint64_t v47 = v56;
        uint64_t v46 = v57;
        char v48 = *(void (**)(char *))(v56 + 16);
        uint64_t v49 = v54;
        v48(v54);
        int v50 = v55;
        ((void (*)(char *, uint64_t, uint64_t))v48)(v55, v35, v46);
        char v51 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
        uint64_t v31 = dispatch thunk of static Equatable.== infix(_:_:)(v49, v50, v46, v51);
        char v52 = *(void (**)(char *, uint64_t))(v47 + 8);
        v52(v50, v46);
        v52(v49, v46);
        return v31 & 1;
      }
    }

    else
    {
      if (*v42 != *v44) {
        LOBYTE(v45) = 1;
      }
      if ((v45 & 1) == 0) {
        goto LABEL_26;
      }
    }

    goto LABEL_7;
  }

  return v31 & 1;
}

    uint64_t v33 = &qword_10035C418;
    uint64_t v34 = (uint64_t)v20;
LABEL_7:
    sub_100015764(v34, v33);
    goto LABEL_8;
  }

  sub_10000E6C0((uint64_t)v20, (uint64_t)v24, &qword_100355538);
  if (v32(v31, 1LL, v14) == 1)
  {
    sub_100015764((uint64_t)v27, &qword_100355538);
    sub_100015764((uint64_t)v29, &qword_100355538);
    sub_100004090((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  sub_100003E68(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v37 = sub_100065750((uint64_t)v24, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v27, &qword_100355538);
  sub_100015764((uint64_t)v29, &qword_100355538);
  sub_100004090((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v20, &qword_100355538);
  if ((v37 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v38 = v30[6];
  uint64_t v39 = v73;
  uint64_t v40 = v74;
  uint64_t v41 = (_DWORD *)(v73 + v38);
  uint64_t v42 = *(_BYTE *)(v73 + v38 + 4);
  uint64_t v43 = (_DWORD *)(v74 + v38);
  uint64_t v44 = *(unsigned __int8 *)(v74 + v38 + 4);
  if ((v42 & 1) != 0)
  {
    if (!v44) {
      goto LABEL_8;
    }
  }

  else
  {
    if (*v41 != *v43) {
      LOBYTE(v44) = 1;
    }
    if ((v44 & 1) != 0) {
      goto LABEL_8;
    }
  }

  uint64_t v45 = v70;
  sub_10000E6C0(v73 + v30[7], v70, &qword_1003555D0);
  uint64_t v46 = v69;
  sub_10000E6C0(v40 + v30[7], v69, &qword_1003555D0);
  uint64_t v47 = v72;
  char v48 = v72 + *(int *)(v67 + 48);
  sub_10000E6C0(v45, v72, &qword_1003555D0);
  sub_10000E6C0(v46, v48, &qword_1003555D0);
  uint64_t v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
  int v50 = v71;
  if (v49(v47, 1LL, v71) == 1)
  {
    sub_100015764(v46, &qword_1003555D0);
    sub_100015764(v45, &qword_1003555D0);
    if (v49(v48, 1LL, v50) == 1)
    {
      sub_100015764(v47, &qword_1003555D0);
LABEL_24:
      uint64_t v55 = v64;
      uint64_t v54 = v65;
      uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t))(v64 + 16);
      uint64_t v57 = v62;
      v56(v62, v39, v65);
      uint64_t v58 = v63;
      v56(v63, v40, v54);
      uint64_t v59 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      uint64_t v35 = dispatch thunk of static Equatable.== infix(_:_:)(v57, v58, v54, v59);
      uint64_t v60 = *(void (**)(char *, uint64_t))(v55 + 8);
      v60(v58, v54);
      v60(v57, v54);
      return v35 & 1;
    }

    goto LABEL_22;
  }

  char v51 = v66;
  sub_10000E6C0(v47, v66, &qword_1003555D0);
  if (v49(v48, 1LL, v50) == 1)
  {
    sub_100015764(v46, &qword_1003555D0);
    sub_100015764(v45, &qword_1003555D0);
    sub_100004090(v51, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
LABEL_22:
    uint64_t v33 = &qword_10035C4B8;
    uint64_t v34 = v47;
    goto LABEL_7;
  }

  char v52 = v61;
  sub_100003E68(v48, v61, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  uint64_t v53 = sub_100065AC0( v51,  v52,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  sub_1000E64C4);
  sub_100004090(v52, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  sub_100015764(v46, &qword_1003555D0);
  sub_100015764(v45, &qword_1003555D0);
  sub_100004090(v51, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  sub_100015764(v47, &qword_1003555D0);
  if ((v53 & 1) != 0) {
    goto LABEL_24;
  }
LABEL_8:
  uint64_t v35 = 0;
  return v35 & 1;
}

    uint64_t v53 = &qword_10035C418;
    uint64_t v54 = (uint64_t)v25;
LABEL_34:
    sub_100015764(v54, v53);
    goto LABEL_35;
  }

  sub_10000E6C0((uint64_t)v25, (uint64_t)v41, &qword_100355538);
  if (v51(v50, 1LL, v16) == 1)
  {
    sub_100015764((uint64_t)v44, &qword_100355538);
    sub_100015764((uint64_t)v46, &qword_100355538);
    sub_100004090((uint64_t)v41, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  uint64_t v55 = v116;
  sub_100003E68(v50, v116, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v56 = sub_100065750((uint64_t)v41, v55, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090(v55, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v44, &qword_100355538);
  sub_100015764((uint64_t)v46, &qword_100355538);
  sub_100004090((uint64_t)v41, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v25, &qword_100355538);
  if ((v56 & 1) == 0) {
    goto LABEL_35;
  }
LABEL_8:
  uint64_t v57 = v118;
  uint64_t v58 = v120;
  uint64_t v59 = v122;
  sub_10000E6C0(v120 + v118[6], v122, &qword_100355538);
  uint64_t v60 = v121;
  sub_10000E6C0(v123 + v57[6], v121, &qword_100355538);
  uint64_t v61 = v117;
  uint64_t v62 = v117 + *(int *)(v49 + 48);
  sub_10000E6C0(v59, v117, &qword_100355538);
  sub_10000E6C0(v60, v62, &qword_100355538);
  if (v51(v61, 1LL, v52) == 1)
  {
    sub_100015764(v60, &qword_100355538);
    sub_100015764(v59, &qword_100355538);
    uint64_t v63 = v51(v62, 1LL, v52);
    uint64_t v64 = v119;
    if (v63 == 1)
    {
      uint64_t v99 = v52;
      sub_100015764(v61, &qword_100355538);
      goto LABEL_15;
    }

    goto LABEL_13;
  }

  uint64_t v65 = v115;
  sub_10000E6C0(v61, v115, &qword_100355538);
  uint64_t v66 = v51(v62, 1LL, v52);
  uint64_t v64 = v119;
  if (v66 == 1)
  {
    sub_100015764(v121, &qword_100355538);
    sub_100015764(v122, &qword_100355538);
    sub_100004090(v65, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_13:
    uint64_t v53 = &qword_10035C418;
    uint64_t v54 = v61;
    goto LABEL_34;
  }

  uint64_t v99 = v52;
  uint64_t v67 = v116;
  sub_100003E68(v62, v116, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v68 = sub_100065750(v65, v67, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090(v67, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764(v121, &qword_100355538);
  sub_100015764(v122, &qword_100355538);
  sub_100004090(v65, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764(v61, &qword_100355538);
  if ((v68 & 1) == 0) {
    goto LABEL_35;
  }
LABEL_15:
  uint64_t v69 = v57[7];
  uint64_t v70 = *(unsigned __int8 *)(v58 + v69);
  uint64_t v71 = *(unsigned __int8 *)(v123 + v69);
  if (v70 == 19)
  {
    if (v71 != 19) {
      goto LABEL_35;
    }
LABEL_20:
    uint64_t v73 = v58 + v57[8];
    v74 = v114;
    sub_10000E6C0(v73, v114, &qword_100355538);
    sub_10000E6C0(v123 + v57[8], v64, &qword_100355538);
    uint64_t v75 = v113;
    int v76 = v113 + *(int *)(v49 + 48);
    sub_10000E6C0(v74, v113, &qword_100355538);
    sub_10000E6C0(v64, v76, &qword_100355538);
    uint64_t v77 = v99;
    if (v51(v75, 1LL, v99) == 1)
    {
      sub_100015764(v64, &qword_100355538);
      sub_100015764(v74, &qword_100355538);
      uint64_t v78 = v51(v76, 1LL, v77);
      int v80 = (uint64_t)v111;
      uint64_t v79 = (uint64_t)v112;
      if (v78 == 1)
      {
        sub_100015764(v75, &qword_100355538);
LABEL_27:
        sub_10000E6C0(v120 + v57[9], v79, &qword_1003555A8);
        sub_10000E6C0(v123 + v57[9], v80, &qword_1003555A8);
        uint64_t v75 = v109;
        uint64_t v85 = v109 + *(int *)(v106 + 48);
        sub_10000E6C0(v79, v109, &qword_1003555A8);
        sub_10000E6C0(v80, v85, &qword_1003555A8);
        uint64_t v86 = v108;
        char v87 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v107 + 48);
        if (v87(v75, 1LL, v108) == 1)
        {
          sub_100015764(v80, &qword_1003555A8);
          sub_100015764(v79, &qword_1003555A8);
          if (v87(v85, 1LL, v86) == 1)
          {
            sub_100015764(v75, &qword_1003555A8);
LABEL_38:
            v93 = v103;
            uint64_t v92 = v104;
            uint64_t v94 = *(void (**)(char *, uint64_t, uint64_t))(v103 + 16);
            uint64_t v95 = v101;
            v94(v101, v120, v104);
            v96 = v102;
            v94(v102, v123, v92);
            uint64_t v97 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
            uint64_t v72 = dispatch thunk of static Equatable.== infix(_:_:)(v95, v96, v92, v97);
            char v98 = *(void (**)(char *, uint64_t))(v93 + 8);
            v98(v96, v92);
            v98(v95, v92);
            return v72 & 1;
          }

          goto LABEL_32;
        }

        uint64_t v88 = v105;
        sub_10000E6C0(v75, v105, &qword_1003555A8);
        if (v87(v85, 1LL, v86) == 1)
        {
          sub_100015764(v80, &qword_1003555A8);
          sub_100015764(v79, &qword_1003555A8);
          sub_100004090(v88, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
LABEL_32:
          uint64_t v53 = &qword_10035C4E0;
          goto LABEL_33;
        }

        uint64_t v90 = v100;
        sub_100003E68(v85, v100, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
        uint64_t v91 = sub_1001167FC(v88, v90);
        sub_100004090(v90, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
        sub_100015764(v80, &qword_1003555A8);
        sub_100015764(v79, &qword_1003555A8);
        sub_100004090(v88, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
        sub_100015764(v75, &qword_1003555A8);
        if ((v91 & 1) != 0) {
          goto LABEL_38;
        }
LABEL_35:
        uint64_t v72 = 0;
        return v72 & 1;
      }
    }

    else
    {
      v81 = v110;
      sub_10000E6C0(v75, v110, &qword_100355538);
      uint64_t v82 = v51(v76, 1LL, v77);
      int v80 = (uint64_t)v111;
      uint64_t v79 = (uint64_t)v112;
      if (v82 != 1)
      {
        uint64_t v83 = v116;
        sub_100003E68(v76, v116, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        uint64_t v84 = sub_100065750(v81, v83, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        sub_100004090(v83, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        sub_100015764(v119, &qword_100355538);
        sub_100015764(v114, &qword_100355538);
        sub_100004090(v81, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        sub_100015764(v75, &qword_100355538);
        if ((v84 & 1) == 0) {
          goto LABEL_35;
        }
        goto LABEL_27;
      }

      sub_100015764(v119, &qword_100355538);
      sub_100015764(v114, &qword_100355538);
      sub_100004090(v81, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    }

    uint64_t v53 = &qword_10035C418;
LABEL_33:
    uint64_t v54 = v75;
    goto LABEL_34;
  }

  uint64_t v72 = 0;
  if (v71 != 19 && v70 == v71) {
    goto LABEL_20;
  }
  return v72 & 1;
}

    uint64_t v42 = &qword_10035C418;
    uint64_t v43 = (uint64_t)v29;
    goto LABEL_14;
  }

  sub_10000E6C0((uint64_t)v29, (uint64_t)v33, &qword_100355538);
  if (v41(v40, 1LL, v23) == 1)
  {
    sub_100015764((uint64_t)v36, &qword_100355538);
    sub_100015764((uint64_t)v38, &qword_100355538);
    sub_100004090((uint64_t)v33, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  sub_100003E68(v40, (uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v44 = sub_100065750((uint64_t)v33, (uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v36, &qword_100355538);
  sub_100015764((uint64_t)v38, &qword_100355538);
  sub_100004090((uint64_t)v33, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v29, &qword_100355538);
  if ((v44 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v45 = v117;
  uint64_t v47 = v119;
  uint64_t v46 = v120;
  sub_10000E6C0(v120 + v117[6], v119, &qword_100355618);
  char v48 = v121;
  uint64_t v49 = v118;
  sub_10000E6C0(v121 + v45[6], v118, &qword_100355618);
  int v50 = v116;
  char v51 = v116 + *(int *)(v113 + 48);
  sub_10000E6C0(v47, v116, &qword_100355618);
  sub_10000E6C0(v49, v51, &qword_100355618);
  char v52 = v115;
  uint64_t v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v114 + 48);
  if (v53(v50, 1LL, v115) == 1)
  {
    sub_100015764(v49, &qword_100355618);
    sub_100015764(v47, &qword_100355618);
    uint64_t v54 = v53(v51, 1LL, v52);
    uint64_t v56 = (uint64_t)v111;
    uint64_t v55 = v112;
    if (v54 == 1)
    {
      sub_100015764(v50, &qword_100355618);
      goto LABEL_18;
    }

    uint64_t v33 = &qword_10035C418;
    uint64_t v34 = (uint64_t)v20;
LABEL_7:
    sub_100015764(v34, v33);
    goto LABEL_8;
  }

  sub_10000E6C0((uint64_t)v20, (uint64_t)v24, &qword_100355538);
  if (v32(v31, 1LL, v14) == 1)
  {
    sub_100015764((uint64_t)v27, &qword_100355538);
    sub_100015764((uint64_t)v29, &qword_100355538);
    sub_100004090((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  sub_100003E68(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v37 = sub_100065750((uint64_t)v24, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v27, &qword_100355538);
  sub_100015764((uint64_t)v29, &qword_100355538);
  sub_100004090((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v20, &qword_100355538);
  if ((v37 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v38 = v30[6];
  uint64_t v39 = v73;
  uint64_t v40 = v74;
  uint64_t v41 = (_DWORD *)(v73 + v38);
  uint64_t v42 = *(_BYTE *)(v73 + v38 + 4);
  uint64_t v43 = (_DWORD *)(v74 + v38);
  uint64_t v44 = *(unsigned __int8 *)(v74 + v38 + 4);
  if ((v42 & 1) != 0)
  {
    if (!v44) {
      goto LABEL_8;
    }
  }

  else
  {
    if (*v41 != *v43) {
      LOBYTE(v44) = 1;
    }
    if ((v44 & 1) != 0) {
      goto LABEL_8;
    }
  }

  uint64_t v45 = v70;
  sub_10000E6C0(v73 + v30[7], v70, &qword_1003555B8);
  uint64_t v46 = v69;
  sub_10000E6C0(v40 + v30[7], v69, &qword_1003555B8);
  uint64_t v47 = v72;
  char v48 = v72 + *(int *)(v67 + 48);
  sub_10000E6C0(v45, v72, &qword_1003555B8);
  sub_10000E6C0(v46, v48, &qword_1003555B8);
  uint64_t v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
  int v50 = v71;
  if (v49(v47, 1LL, v71) == 1)
  {
    sub_100015764(v46, &qword_1003555B8);
    sub_100015764(v45, &qword_1003555B8);
    if (v49(v48, 1LL, v50) == 1)
    {
      sub_100015764(v47, &qword_1003555B8);
LABEL_24:
      uint64_t v55 = v64;
      uint64_t v54 = v65;
      uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t))(v64 + 16);
      uint64_t v57 = v62;
      v56(v62, v39, v65);
      uint64_t v58 = v63;
      v56(v63, v40, v54);
      uint64_t v59 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      uint64_t v35 = dispatch thunk of static Equatable.== infix(_:_:)(v57, v58, v54, v59);
      uint64_t v60 = *(void (**)(char *, uint64_t))(v55 + 8);
      v60(v58, v54);
      v60(v57, v54);
      return v35 & 1;
    }

    goto LABEL_22;
  }

  char v51 = v66;
  sub_10000E6C0(v47, v66, &qword_1003555B8);
  if (v49(v48, 1LL, v50) == 1)
  {
    sub_100015764(v46, &qword_1003555B8);
    sub_100015764(v45, &qword_1003555B8);
    sub_100004090(v51, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
LABEL_22:
    uint64_t v33 = &qword_10035C4D0;
    uint64_t v34 = v47;
    goto LABEL_7;
  }

  char v52 = v61;
  sub_100003E68(v48, v61, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
  uint64_t v53 = sub_100119A94(v51, v52);
  sub_100004090(v52, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
  sub_100015764(v46, &qword_1003555B8);
  sub_100015764(v45, &qword_1003555B8);
  sub_100004090(v51, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
  sub_100015764(v47, &qword_1003555B8);
  if ((v53 & 1) != 0) {
    goto LABEL_24;
  }
LABEL_8:
  uint64_t v35 = 0;
  return v35 & 1;
}

    uint64_t v33 = &qword_10035C418;
    uint64_t v34 = (uint64_t)v20;
LABEL_7:
    sub_100015764(v34, v33);
    goto LABEL_8;
  }

  sub_10000E6C0((uint64_t)v20, (uint64_t)v24, &qword_100355538);
  if (v32(v31, 1LL, v14) == 1)
  {
    sub_100015764((uint64_t)v27, &qword_100355538);
    sub_100015764((uint64_t)v29, &qword_100355538);
    sub_100004090((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  sub_100003E68(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v37 = sub_100065750((uint64_t)v24, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v27, &qword_100355538);
  sub_100015764((uint64_t)v29, &qword_100355538);
  sub_100004090((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v20, &qword_100355538);
  if ((v37 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v38 = v30[6];
  uint64_t v39 = v73;
  uint64_t v40 = v74;
  uint64_t v41 = (_DWORD *)(v73 + v38);
  uint64_t v42 = *(_BYTE *)(v73 + v38 + 4);
  uint64_t v43 = (_DWORD *)(v74 + v38);
  uint64_t v44 = *(unsigned __int8 *)(v74 + v38 + 4);
  if ((v42 & 1) != 0)
  {
    if (!v44) {
      goto LABEL_8;
    }
  }

  else
  {
    if (*v41 != *v43) {
      LOBYTE(v44) = 1;
    }
    if ((v44 & 1) != 0) {
      goto LABEL_8;
    }
  }

  uint64_t v45 = v70;
  sub_10000E6C0(v73 + v30[7], v70, &qword_100355598);
  uint64_t v46 = v69;
  sub_10000E6C0(v40 + v30[7], v69, &qword_100355598);
  uint64_t v47 = v72;
  char v48 = v72 + *(int *)(v67 + 48);
  sub_10000E6C0(v45, v72, &qword_100355598);
  sub_10000E6C0(v46, v48, &qword_100355598);
  uint64_t v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
  int v50 = v71;
  if (v49(v47, 1LL, v71) == 1)
  {
    sub_100015764(v46, &qword_100355598);
    sub_100015764(v45, &qword_100355598);
    if (v49(v48, 1LL, v50) == 1)
    {
      sub_100015764(v47, &qword_100355598);
LABEL_24:
      uint64_t v55 = v64;
      uint64_t v54 = v65;
      uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t))(v64 + 16);
      uint64_t v57 = v62;
      v56(v62, v39, v65);
      uint64_t v58 = v63;
      v56(v63, v40, v54);
      uint64_t v59 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      uint64_t v35 = dispatch thunk of static Equatable.== infix(_:_:)(v57, v58, v54, v59);
      uint64_t v60 = *(void (**)(char *, uint64_t))(v55 + 8);
      v60(v58, v54);
      v60(v57, v54);
      return v35 & 1;
    }

    goto LABEL_22;
  }

  char v51 = v66;
  sub_10000E6C0(v47, v66, &qword_100355598);
  if (v49(v48, 1LL, v50) == 1)
  {
    sub_100015764(v46, &qword_100355598);
    sub_100015764(v45, &qword_100355598);
    sub_100004090(v51, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
LABEL_22:
    uint64_t v33 = &qword_10035C4F0;
    uint64_t v34 = v47;
    goto LABEL_7;
  }

  char v52 = v61;
  sub_100003E68(v48, v61, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
  uint64_t v53 = sub_100065AC0( v51,  v52,  type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity,  (uint64_t (*)(uint64_t, uint64_t))sub_1000DACE8);
  sub_100004090(v52, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
  sub_100015764(v46, &qword_100355598);
  sub_100015764(v45, &qword_100355598);
  sub_100004090(v51, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
  sub_100015764(v47, &qword_100355598);
  if ((v53 & 1) != 0) {
    goto LABEL_24;
  }
LABEL_8:
  uint64_t v35 = 0;
  return v35 & 1;
}

    sub_100015764((uint64_t)v13, &qword_10035C418);
    goto LABEL_39;
  }

  uint64_t v30 = (uint64_t)v67;
  sub_10000E6C0((uint64_t)v13, (uint64_t)v17, &qword_100355538);
  if (v29(v28, 1LL, v8) == 1)
  {
    sub_100015764((uint64_t)v20, &qword_100355538);
    sub_100015764((uint64_t)v22, &qword_100355538);
    sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  sub_100003E68(v28, v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v31 = sub_100065750((uint64_t)v17, v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090(v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v20, &qword_100355538);
  sub_100015764((uint64_t)v22, &qword_100355538);
  sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v13, &qword_100355538);
  if ((v31 & 1) == 0) {
    goto LABEL_39;
  }
LABEL_8:
  uint64_t v32 = v26[6];
  uint64_t v33 = v66;
  uint64_t v34 = *(unsigned __int8 *)(v65 + v32);
  uint64_t v35 = *(unsigned __int8 *)(v66 + v32);
  if (v34 == 4)
  {
    if (v35 != 4) {
      goto LABEL_39;
    }
  }

  else
  {
    uint64_t v36 = 0;
    if (v35 == 4 || v34 != v35) {
      return v36 & 1;
    }
  }

  uint64_t v37 = v26[7];
  uint64_t v38 = *(unsigned __int8 *)(v65 + v37);
  uint64_t v39 = *(unsigned __int8 *)(v66 + v37);
  if (v38 == 4)
  {
    if (v39 != 4) {
      goto LABEL_39;
    }
  }

  else
  {
    uint64_t v36 = 0;
    if (v39 == 4 || v38 != v39) {
      return v36 & 1;
    }
  }

  uint64_t v40 = v26[8];
  uint64_t v41 = *(unsigned __int8 *)(v65 + v40);
  uint64_t v42 = *(unsigned __int8 *)(v66 + v40);
  if (v41 == 4)
  {
    if (v42 != 4) {
      goto LABEL_39;
    }
    goto LABEL_23;
  }

  uint64_t v36 = 0;
  if (v42 != 4 && v41 == v42)
  {
LABEL_23:
    uint64_t v43 = v26[9];
    uint64_t v44 = *(unsigned __int8 *)(v65 + v43);
    uint64_t v45 = *(unsigned __int8 *)(v66 + v43);
    if (v44 == 2)
    {
      if (v45 != 2) {
        goto LABEL_39;
      }
    }

    else if (v45 == 2 || ((((v45 & 1) == 0) ^ v44) & 1) == 0)
    {
      goto LABEL_39;
    }

    uint64_t v46 = v26[10];
    uint64_t v47 = *(unsigned __int8 *)(v65 + v46);
    char v48 = *(unsigned __int8 *)(v66 + v46);
    if (v47 == 2)
    {
      if (v48 != 2) {
        goto LABEL_39;
      }
    }

    else if (v48 == 2 || ((((v48 & 1) == 0) ^ v47) & 1) == 0)
    {
      goto LABEL_39;
    }

    uint64_t v49 = v26[11];
    int v50 = *(unsigned __int8 *)(v65 + v49);
    char v51 = *(unsigned __int8 *)(v66 + v49);
    if (v50 != 2)
    {
      if (v51 == 2 || ((((v51 & 1) == 0) ^ v50) & 1) == 0) {
        goto LABEL_39;
      }
      goto LABEL_38;
    }

    if (v51 == 2)
    {
LABEL_38:
      uint64_t v53 = v63;
      char v52 = v64;
      uint64_t v54 = *(void (**)(char *))(v63 + 16);
      uint64_t v55 = v61;
      v54(v61);
      uint64_t v56 = v62;
      ((void (*)(char *, uint64_t, uint64_t))v54)(v62, v33, v52);
      uint64_t v57 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      uint64_t v36 = dispatch thunk of static Equatable.== infix(_:_:)(v55, v56, v52, v57);
      uint64_t v58 = *(void (**)(char *, uint64_t))(v53 + 8);
      v58(v56, v52);
      v58(v55, v52);
      return v36 & 1;
    }

    uint64_t v42 = &qword_10035C418;
    uint64_t v43 = (uint64_t)v29;
LABEL_7:
    sub_100015764(v43, v42);
    goto LABEL_8;
  }

  sub_10000E6C0((uint64_t)v29, (uint64_t)v33, &qword_100355538);
  if (v41(v40, 1LL, v23) == 1)
  {
    sub_100015764((uint64_t)v36, &qword_100355538);
    sub_100015764((uint64_t)v38, &qword_100355538);
    sub_100004090((uint64_t)v33, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  sub_100003E68(v40, (uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v46 = sub_100065750((uint64_t)v33, (uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v36, &qword_100355538);
  sub_100015764((uint64_t)v38, &qword_100355538);
  sub_100004090((uint64_t)v33, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v29, &qword_100355538);
  if ((v46 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v47 = v103;
  char v48 = v102[6];
  uint64_t v49 = (_DWORD *)(v103 + v48);
  int v50 = *(_BYTE *)(v103 + v48 + 4);
  char v51 = v104;
  char v52 = (_DWORD *)(v104 + v48);
  uint64_t v53 = *(unsigned __int8 *)(v104 + v48 + 4);
  if ((v50 & 1) != 0)
  {
    if (!v53) {
      goto LABEL_8;
    }
  }

  else
  {
    if (*v49 != *v52) {
      LOBYTE(v53) = 1;
    }
    if ((v53 & 1) != 0) {
      goto LABEL_8;
    }
  }

  uint64_t v54 = v102;
  uint64_t v55 = v98;
  sub_10000E6C0(v103 + v102[7], v98, &qword_100355660);
  uint64_t v56 = v101;
  sub_10000E6C0(v51 + v54[7], v101, &qword_100355660);
  uint64_t v57 = v100;
  uint64_t v58 = v100 + *(int *)(v96 + 48);
  sub_10000E6C0(v55, v100, &qword_100355660);
  sub_10000E6C0(v56, v58, &qword_100355660);
  uint64_t v59 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v97 + 48);
  uint64_t v60 = v99;
  if (v59(v57, 1LL, v99) == 1)
  {
    sub_100015764(v56, &qword_100355660);
    sub_100015764(v55, &qword_100355660);
    uint64_t v61 = v59(v58, 1LL, v60);
    uint64_t v63 = (uint64_t)v94;
    uint64_t v62 = (uint64_t)v95;
    uint64_t v64 = (uint64_t)v92;
    uint64_t v65 = (uint64_t)v93;
    if (v61 == 1)
    {
      sub_100015764(v57, &qword_100355660);
      goto LABEL_24;
    }

    goto LABEL_22;
  }

  uint64_t v66 = v91;
  sub_10000E6C0(v57, v91, &qword_100355660);
  uint64_t v67 = v59(v58, 1LL, v60);
  uint64_t v63 = (uint64_t)v94;
  uint64_t v62 = (uint64_t)v95;
  uint64_t v65 = (uint64_t)v93;
  if (v67 == 1)
  {
    sub_100015764(v101, &qword_100355660);
    sub_100015764(v55, &qword_100355660);
    sub_100004090(v66, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
LABEL_22:
    uint64_t v42 = &qword_10035C428;
    uint64_t v43 = v57;
    goto LABEL_7;
  }

  char v68 = v87;
  sub_100003E68(v58, v87, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
  LODWORD(v99) = sub_10011A2F4(v66, v68);
  sub_100004090(v68, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
  sub_100015764(v101, &qword_100355660);
  sub_100015764(v55, &qword_100355660);
  sub_100004090(v66, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
  sub_100015764(v57, &qword_100355660);
  uint64_t v64 = (uint64_t)v92;
  if ((v99 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_24:
  uint64_t v69 = v102;
  sub_10000E6C0(v47 + v102[8], v63, &qword_100355668);
  sub_10000E6C0(v51 + v69[8], v65, &qword_100355668);
  uint64_t v70 = v62 + *(int *)(v88 + 48);
  sub_10000E6C0(v63, v62, &qword_100355668);
  sub_10000E6C0(v65, v70, &qword_100355668);
  uint64_t v71 = v90;
  uint64_t v72 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48);
  if (v72(v62, 1LL, v90) == 1)
  {
    sub_100015764(v65, &qword_100355668);
    sub_100015764(v63, &qword_100355668);
    if (v72(v70, 1LL, v71) == 1)
    {
      sub_100015764(v62, &qword_100355668);
LABEL_31:
      int v76 = v85;
      uint64_t v75 = v86;
      uint64_t v77 = *(void (**)(char *, uint64_t, uint64_t))(v85 + 16);
      uint64_t v78 = v83;
      v77(v83, v47, v86);
      uint64_t v79 = v84;
      v77(v84, v51, v75);
      int v80 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      uint64_t v44 = dispatch thunk of static Equatable.== infix(_:_:)(v78, v79, v75, v80);
      v81 = *(void (**)(char *, uint64_t))(v76 + 8);
      v81(v79, v75);
      v81(v78, v75);
      return v44 & 1;
    }

    goto LABEL_29;
  }

  sub_10000E6C0(v62, v64, &qword_100355668);
  if (v72(v70, 1LL, v71) == 1)
  {
    sub_100015764(v65, &qword_100355668);
    sub_100015764(v63, &qword_100355668);
    sub_100004090(v64, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
LABEL_29:
    uint64_t v42 = &qword_10035C420;
    uint64_t v43 = v62;
    goto LABEL_7;
  }

  uint64_t v73 = v82;
  sub_100003E68(v70, v82, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  v74 = sub_100119DDC(v64, v73);
  sub_100004090(v73, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  sub_100015764(v65, &qword_100355668);
  sub_100015764(v63, &qword_100355668);
  sub_100004090(v64, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  sub_100015764(v62, &qword_100355668);
  if ((v74 & 1) != 0) {
    goto LABEL_31;
  }
LABEL_8:
  uint64_t v44 = 0;
  return v44 & 1;
}

    uint64_t v33 = &qword_10035C418;
    uint64_t v34 = (uint64_t)v20;
LABEL_7:
    sub_100015764(v34, v33);
    goto LABEL_8;
  }

  sub_10000E6C0((uint64_t)v20, (uint64_t)v24, &qword_100355538);
  if (v32(v31, 1LL, v14) == 1)
  {
    sub_100015764((uint64_t)v27, &qword_100355538);
    sub_100015764((uint64_t)v29, &qword_100355538);
    sub_100004090((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  sub_100003E68(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v37 = sub_100065750((uint64_t)v24, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v27, &qword_100355538);
  sub_100015764((uint64_t)v29, &qword_100355538);
  sub_100004090((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v20, &qword_100355538);
  if ((v37 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v38 = v30[6];
  uint64_t v39 = v73;
  uint64_t v40 = v74;
  uint64_t v41 = (_DWORD *)(v73 + v38);
  uint64_t v42 = *(_BYTE *)(v73 + v38 + 4);
  uint64_t v43 = (_DWORD *)(v74 + v38);
  uint64_t v44 = *(unsigned __int8 *)(v74 + v38 + 4);
  if ((v42 & 1) != 0)
  {
    if (!v44) {
      goto LABEL_8;
    }
  }

  else
  {
    if (*v41 != *v43) {
      LOBYTE(v44) = 1;
    }
    if ((v44 & 1) != 0) {
      goto LABEL_8;
    }
  }

  uint64_t v45 = v70;
  sub_10000E6C0(v73 + v30[7], v70, &qword_1003555F8);
  uint64_t v46 = v69;
  sub_10000E6C0(v40 + v30[7], v69, &qword_1003555F8);
  uint64_t v47 = v72;
  char v48 = v72 + *(int *)(v67 + 48);
  sub_10000E6C0(v45, v72, &qword_1003555F8);
  sub_10000E6C0(v46, v48, &qword_1003555F8);
  uint64_t v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
  int v50 = v71;
  if (v49(v47, 1LL, v71) == 1)
  {
    sub_100015764(v46, &qword_1003555F8);
    sub_100015764(v45, &qword_1003555F8);
    if (v49(v48, 1LL, v50) == 1)
    {
      sub_100015764(v47, &qword_1003555F8);
LABEL_24:
      uint64_t v55 = v64;
      uint64_t v54 = v65;
      uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t))(v64 + 16);
      uint64_t v57 = v62;
      v56(v62, v39, v65);
      uint64_t v58 = v63;
      v56(v63, v40, v54);
      uint64_t v59 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      uint64_t v35 = dispatch thunk of static Equatable.== infix(_:_:)(v57, v58, v54, v59);
      uint64_t v60 = *(void (**)(char *, uint64_t))(v55 + 8);
      v60(v58, v54);
      v60(v57, v54);
      return v35 & 1;
    }

    goto LABEL_22;
  }

  char v51 = v66;
  sub_10000E6C0(v47, v66, &qword_1003555F8);
  if (v49(v48, 1LL, v50) == 1)
  {
    sub_100015764(v46, &qword_1003555F8);
    sub_100015764(v45, &qword_1003555F8);
    sub_100004090(v51, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
LABEL_22:
    uint64_t v33 = &qword_10035C490;
    uint64_t v34 = v47;
    goto LABEL_7;
  }

  char v52 = v61;
  sub_100003E68(v48, v61, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
  uint64_t v53 = sub_100065AC0( v51,  v52,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  (uint64_t (*)(uint64_t, uint64_t))sub_1000F191C);
  sub_100004090(v52, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
  sub_100015764(v46, &qword_1003555F8);
  sub_100015764(v45, &qword_1003555F8);
  sub_100004090(v51, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
  sub_100015764(v47, &qword_1003555F8);
  if ((v53 & 1) != 0) {
    goto LABEL_24;
  }
LABEL_8:
  uint64_t v35 = 0;
  return v35 & 1;
}

    sub_100015764((uint64_t)v13, &qword_10035C418);
    goto LABEL_83;
  }

  sub_10000E6C0((uint64_t)v13, (uint64_t)v17, &qword_100355538);
  if (v29(v28, 1LL, v8) == 1)
  {
    sub_100015764((uint64_t)v20, &qword_100355538);
    sub_100015764((uint64_t)v22, &qword_100355538);
    sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  uint64_t v30 = v103;
  sub_100003E68(v28, v103, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v31 = sub_100065750((uint64_t)v17, v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090(v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v20, &qword_100355538);
  sub_100015764((uint64_t)v22, &qword_100355538);
  sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v13, &qword_100355538);
  if ((v31 & 1) == 0) {
    goto LABEL_83;
  }
LABEL_8:
  uint64_t v32 = v26[6];
  uint64_t v33 = (double *)(v104 + v32);
  uint64_t v34 = *(_BYTE *)(v104 + v32 + 8);
  uint64_t v35 = (double *)(v105 + v32);
  uint64_t v36 = *(unsigned __int8 *)(v105 + v32 + 8);
  if ((v34 & 1) != 0)
  {
    if (!v36) {
      goto LABEL_83;
    }
  }

  else
  {
    if (*v33 != *v35) {
      LOBYTE(v36) = 1;
    }
    if ((v36 & 1) != 0) {
      goto LABEL_83;
    }
  }

  uint64_t v37 = v26[7];
  uint64_t v38 = (double *)(v104 + v37);
  uint64_t v39 = *(_BYTE *)(v104 + v37 + 8);
  uint64_t v40 = (double *)(v105 + v37);
  uint64_t v41 = *(unsigned __int8 *)(v105 + v37 + 8);
  if ((v39 & 1) != 0)
  {
    if (!v41) {
      goto LABEL_83;
    }
  }

  else
  {
    if (*v38 != *v40) {
      LOBYTE(v41) = 1;
    }
    if ((v41 & 1) != 0) {
      goto LABEL_83;
    }
  }

  uint64_t v42 = v26[8];
  uint64_t v43 = (double *)(v104 + v42);
  uint64_t v44 = *(_BYTE *)(v104 + v42 + 8);
  uint64_t v45 = (double *)(v105 + v42);
  uint64_t v46 = *(unsigned __int8 *)(v105 + v42 + 8);
  if ((v44 & 1) != 0)
  {
    if (!v46) {
      goto LABEL_83;
    }
  }

  else
  {
    if (*v43 != *v45) {
      LOBYTE(v46) = 1;
    }
    if ((v46 & 1) != 0) {
      goto LABEL_83;
    }
  }

  uint64_t v47 = v26[9];
  char v48 = (double *)(v104 + v47);
  uint64_t v49 = *(_BYTE *)(v104 + v47 + 8);
  int v50 = (double *)(v105 + v47);
  char v51 = *(unsigned __int8 *)(v105 + v47 + 8);
  if ((v49 & 1) != 0)
  {
    if (!v51) {
      goto LABEL_83;
    }
  }

  else
  {
    if (*v48 != *v50) {
      LOBYTE(v51) = 1;
    }
    if ((v51 & 1) != 0) {
      goto LABEL_83;
    }
  }

  char v52 = v26[10];
  uint64_t v53 = (double *)(v104 + v52);
  uint64_t v54 = *(_BYTE *)(v104 + v52 + 8);
  uint64_t v55 = (double *)(v105 + v52);
  uint64_t v56 = *(unsigned __int8 *)(v105 + v52 + 8);
  if ((v54 & 1) != 0)
  {
    if (!v56) {
      goto LABEL_83;
    }
  }

  else
  {
    if (*v53 != *v55) {
      LOBYTE(v56) = 1;
    }
    if ((v56 & 1) != 0) {
      goto LABEL_83;
    }
  }

  uint64_t v57 = v26[11];
  uint64_t v58 = (double *)(v104 + v57);
  uint64_t v59 = *(_BYTE *)(v104 + v57 + 8);
  uint64_t v60 = (double *)(v105 + v57);
  uint64_t v61 = *(unsigned __int8 *)(v105 + v57 + 8);
  if ((v59 & 1) != 0)
  {
    if (!v61) {
      goto LABEL_83;
    }
  }

  else
  {
    if (*v58 != *v60) {
      LOBYTE(v61) = 1;
    }
    if ((v61 & 1) != 0) {
      goto LABEL_83;
    }
  }

  uint64_t v62 = v26[12];
  uint64_t v63 = (double *)(v104 + v62);
  uint64_t v64 = *(_BYTE *)(v104 + v62 + 8);
  uint64_t v65 = (double *)(v105 + v62);
  uint64_t v66 = *(unsigned __int8 *)(v105 + v62 + 8);
  if ((v64 & 1) != 0)
  {
    if (!v66) {
      goto LABEL_83;
    }
  }

  else
  {
    if (*v63 != *v65) {
      LOBYTE(v66) = 1;
    }
    if ((v66 & 1) != 0) {
      goto LABEL_83;
    }
  }

  uint64_t v67 = v26[13];
  char v68 = (double *)(v104 + v67);
  uint64_t v69 = *(_BYTE *)(v104 + v67 + 8);
  uint64_t v70 = (double *)(v105 + v67);
  uint64_t v71 = *(unsigned __int8 *)(v105 + v67 + 8);
  if ((v69 & 1) != 0)
  {
    if (!v71) {
      goto LABEL_83;
    }
  }

  else
  {
    if (*v68 != *v70) {
      LOBYTE(v71) = 1;
    }
    if ((v71 & 1) != 0) {
      goto LABEL_83;
    }
  }

  uint64_t v72 = v26[14];
  uint64_t v73 = (double *)(v104 + v72);
  v74 = *(_BYTE *)(v104 + v72 + 8);
  uint64_t v75 = (double *)(v105 + v72);
  int v76 = *(unsigned __int8 *)(v105 + v72 + 8);
  if ((v74 & 1) != 0)
  {
    if (!v76) {
      goto LABEL_83;
    }
  }

  else
  {
    if (*v73 != *v75) {
      LOBYTE(v76) = 1;
    }
    if ((v76 & 1) != 0) {
      goto LABEL_83;
    }
  }

  uint64_t v77 = v26[15];
  uint64_t v78 = *(unsigned __int8 *)(v104 + v77);
  uint64_t v79 = *(unsigned __int8 *)(v105 + v77);
  if (v78 == 2)
  {
    if (v79 != 2) {
      goto LABEL_83;
    }
  }

  else if (v79 == 2 || ((((v79 & 1) == 0) ^ v78) & 1) == 0)
  {
    goto LABEL_83;
  }

  int v80 = v26[16];
  v81 = *(unsigned __int8 *)(v104 + v80);
  uint64_t v82 = *(unsigned __int8 *)(v105 + v80);
  if (v81 == 2)
  {
    if (v82 != 2) {
      goto LABEL_83;
    }
  }

  else if (v82 == 2 || ((((v82 & 1) == 0) ^ v81) & 1) == 0)
  {
    goto LABEL_83;
  }

  uint64_t v83 = v26[17];
  uint64_t v84 = *(unsigned __int8 *)(v104 + v83);
  uint64_t v85 = *(unsigned __int8 *)(v105 + v83);
  if (v84 == 2)
  {
    if (v85 != 2) {
      goto LABEL_83;
    }
  }

  else if (v85 == 2 || ((((v85 & 1) == 0) ^ v84) & 1) == 0)
  {
    goto LABEL_83;
  }

  uint64_t v86 = v26[18];
  char v87 = *(unsigned __int8 *)(v104 + v86);
  uint64_t v88 = *(unsigned __int8 *)(v105 + v86);
  if (v87 != 2)
  {
    if (v88 != 2 && ((((v88 & 1) == 0) ^ v87) & 1) != 0) {
      goto LABEL_82;
    }
LABEL_83:
    uint64_t v95 = 0;
    return v95 & 1;
  }

  if (v88 != 2) {
    goto LABEL_83;
  }
LABEL_82:
  uint64_t v90 = v101;
  uint64_t v89 = v102;
  uint64_t v91 = *(void (**)(char *, uint64_t, uint64_t))(v101 + 16);
  uint64_t v92 = v99;
  v91(v99, v104, v102);
  v93 = v100;
  v91(v100, v105, v89);
  uint64_t v94 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  uint64_t v95 = dispatch thunk of static Equatable.== infix(_:_:)(v92, v93, v89, v94);
  v96 = *(void (**)(char *, uint64_t))(v90 + 8);
  v96(v93, v89);
  v96(v92, v89);
  return v95 & 1;
}

    uint64_t v33 = &qword_10035C418;
    uint64_t v34 = (uint64_t)v20;
LABEL_14:
    sub_100015764(v34, v33);
    goto LABEL_15;
  }

  sub_10000E6C0((uint64_t)v20, (uint64_t)v24, &qword_100355538);
  if (v32(v31, 1LL, v14) == 1)
  {
    sub_100015764((uint64_t)v27, &qword_100355538);
    sub_100015764((uint64_t)v29, &qword_100355538);
    sub_100004090((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  sub_100003E68(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v35 = sub_100065750((uint64_t)v24, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v27, &qword_100355538);
  sub_100015764((uint64_t)v29, &qword_100355538);
  sub_100004090((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v20, &qword_100355538);
  if ((v35 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v37 = v79;
  uint64_t v36 = v80;
  uint64_t v38 = v84;
  sub_10000E6C0(v84 + v79[6], v80, &qword_100355610);
  uint64_t v39 = v85;
  uint64_t v40 = v83;
  sub_10000E6C0(v85 + v37[6], v83, &qword_100355610);
  uint64_t v41 = v82;
  uint64_t v42 = v82 + *(int *)(v77 + 48);
  sub_10000E6C0(v36, v82, &qword_100355610);
  sub_10000E6C0(v40, v42, &qword_100355610);
  uint64_t v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48);
  uint64_t v44 = v81;
  if (v43(v41, 1LL, v81) != 1)
  {
    uint64_t v45 = v76;
    sub_10000E6C0(v41, v76, &qword_100355610);
    if (v43(v42, 1LL, v44) != 1)
    {
      char v48 = v75;
      sub_100003E68(v42, v75, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
      uint64_t v49 = sub_100065AC0( v45,  v48,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  (uint64_t (*)(uint64_t, uint64_t))sub_1000F58AC);
      sub_100004090(v48, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
      sub_100015764(v83, &qword_100355610);
      sub_100015764(v36, &qword_100355610);
      sub_100004090(v45, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
      sub_100015764(v41, &qword_100355610);
      if ((v49 & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_18;
    }

    sub_100015764(v83, &qword_100355610);
    sub_100015764(v36, &qword_100355610);
    sub_100004090(v45, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
    goto LABEL_13;
  }

  sub_100015764(v40, &qword_100355610);
  sub_100015764(v36, &qword_100355610);
  if (v43(v42, 1LL, v44) != 1)
  {
LABEL_13:
    uint64_t v33 = &qword_10035C488;
    uint64_t v34 = v41;
    goto LABEL_14;
  }

  sub_100015764(v41, &qword_100355610);
LABEL_18:
  int v50 = v37[7];
  char v51 = (float *)(v38 + v50);
  char v52 = *(_BYTE *)(v38 + v50 + 4);
  uint64_t v53 = (float *)(v39 + v50);
  uint64_t v54 = *(unsigned __int8 *)(v39 + v50 + 4);
  if ((v52 & 1) != 0)
  {
    if (!v54) {
      goto LABEL_15;
    }
  }

  else
  {
    if (*v51 != *v53) {
      LOBYTE(v54) = 1;
    }
    if ((v54 & 1) != 0) {
      goto LABEL_15;
    }
  }

  uint64_t v55 = v37[8];
  uint64_t v56 = (float *)(v38 + v55);
  uint64_t v57 = *(_BYTE *)(v38 + v55 + 4);
  uint64_t v58 = (float *)(v39 + v55);
  uint64_t v59 = *(unsigned __int8 *)(v39 + v55 + 4);
  if ((v57 & 1) != 0)
  {
    if (!v59) {
      goto LABEL_15;
    }
  }

  else
  {
    if (*v56 != *v58) {
      LOBYTE(v59) = 1;
    }
    if ((v59 & 1) != 0) {
      goto LABEL_15;
    }
  }

  uint64_t v60 = v37[9];
  uint64_t v61 = *(unsigned __int8 *)(v38 + v60);
  uint64_t v62 = *(unsigned __int8 *)(v39 + v60);
  if (v61 == 2)
  {
    if (v62 == 2)
    {
LABEL_35:
      uint64_t v64 = v73;
      uint64_t v63 = v74;
      uint64_t v65 = *(void (**)(char *, uint64_t, uint64_t))(v73 + 16);
      uint64_t v66 = v71;
      v65(v71, v38, v74);
      uint64_t v67 = v72;
      v65(v72, v39, v63);
      char v68 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      uint64_t v46 = dispatch thunk of static Equatable.== infix(_:_:)(v66, v67, v63, v68);
      uint64_t v69 = *(void (**)(char *, uint64_t))(v64 + 8);
      v69(v67, v63);
      v69(v66, v63);
      return v46 & 1;
    }
  }

  else if (v62 != 2 && ((((v62 & 1) == 0) ^ v61) & 1) != 0)
  {
    goto LABEL_35;
  }

    uint64_t v33 = &qword_10035C438;
    uint64_t v34 = (uint64_t)v20;
    goto LABEL_7;
  }

  sub_10000E6C0((uint64_t)v20, (uint64_t)v24, &qword_100355650);
  if (v32(v31, 1LL, v14) == 1)
  {
    sub_100015764((uint64_t)v27, &qword_100355650);
    sub_100015764((uint64_t)v29, &qword_100355650);
    sub_100004090( (uint64_t)v24,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
    goto LABEL_6;
  }

  sub_100003E68( v31,  (uint64_t)v17,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  uint64_t v35 = sub_10011D2D8(v24, v17);
  sub_100004090( (uint64_t)v17,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  sub_100015764((uint64_t)v27, &qword_100355650);
  sub_100015764((uint64_t)v29, &qword_100355650);
  sub_100004090( (uint64_t)v24,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  sub_100015764((uint64_t)v20, &qword_100355650);
  if ((v35 & 1) == 0) {
    goto LABEL_27;
  }
LABEL_9:
  uint64_t v37 = v90;
  uint64_t v36 = v91;
  if ((sub_10010ABAC(*v90, *v91) & 1) == 0) {
    goto LABEL_27;
  }
  uint64_t v38 = v85;
  uint64_t v39 = v85[7];
  uint64_t v40 = (uint64_t *)((char *)v37 + v39);
  uint64_t v41 = *((_BYTE *)v37 + v39 + 8);
  uint64_t v42 = (uint64_t *)((char *)v36 + v39);
  uint64_t v43 = *((unsigned __int8 *)v36 + v39 + 8);
  if ((v41 & 1) != 0)
  {
    uint64_t v45 = (uint64_t)v88;
    uint64_t v44 = v89;
    uint64_t v47 = (uint64_t)v86;
    uint64_t v46 = (uint64_t)v87;
    if (!v43) {
      goto LABEL_27;
    }
  }

  else
  {
    if (*v40 != *v42) {
      LOBYTE(v43) = 1;
    }
    uint64_t v45 = (uint64_t)v88;
    uint64_t v44 = v89;
    uint64_t v47 = (uint64_t)v86;
    uint64_t v46 = (uint64_t)v87;
    if ((v43 & 1) != 0) {
      goto LABEL_27;
    }
  }

  char v48 = v85[8];
  uint64_t v49 = *((unsigned __int8 *)v37 + v48);
  int v50 = *((unsigned __int8 *)v36 + v48);
  if (v49 == 4)
  {
    if (v50 != 4) {
      goto LABEL_27;
    }
    goto LABEL_21;
  }

  char v51 = 0;
  if (v50 != 4 && v49 == v50)
  {
LABEL_21:
    char v52 = v85[9];
    uint64_t v53 = (_DWORD *)((char *)v37 + v52);
    uint64_t v54 = *((_BYTE *)v37 + v52 + 4);
    uint64_t v55 = (_DWORD *)((char *)v36 + v52);
    uint64_t v56 = *((unsigned __int8 *)v36 + v52 + 4);
    if ((v54 & 1) != 0)
    {
      if (!v56) {
        goto LABEL_27;
      }
    }

    else
    {
      if (*v53 != *v55) {
        LOBYTE(v56) = 1;
      }
      if ((v56 & 1) != 0) {
        goto LABEL_27;
      }
    }

    sub_10000E6C0((uint64_t)v37 + v85[10], v46, &qword_100355658);
    sub_10000E6C0((uint64_t)v36 + v38[10], v47, &qword_100355658);
    uint64_t v58 = v84;
    uint64_t v59 = v84 + *(int *)(v82 + 48);
    sub_10000E6C0(v46, v84, &qword_100355658);
    uint64_t v60 = v58;
    sub_10000E6C0(v47, v59, &qword_100355658);
    uint64_t v61 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48);
    if (v61(v60, 1LL, v44) == 1)
    {
      sub_100015764(v47, &qword_100355658);
      uint64_t v60 = v84;
      sub_100015764(v46, &qword_100355658);
      if (v61(v59, 1LL, v44) == 1)
      {
        sub_100015764(v60, &qword_100355658);
        goto LABEL_36;
      }
    }

    else
    {
      sub_10000E6C0(v60, v45, &qword_100355658);
      if (v61(v59, 1LL, v44) != 1)
      {
        uint64_t v62 = v81;
        sub_100003E68( v59,  v81,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
        uint64_t v63 = sub_100111298(v45, v62);
        sub_100004090( v62,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
        sub_100015764(v47, &qword_100355658);
        sub_100015764(v46, &qword_100355658);
        sub_100004090( v45,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
        sub_100015764(v60, &qword_100355658);
        if ((v63 & 1) != 0)
        {
LABEL_36:
          uint64_t v64 = v38[11];
          uint64_t v65 = (uint64_t *)((char *)v37 + v64);
          uint64_t v66 = *((_BYTE *)v37 + v64 + 8);
          uint64_t v67 = (uint64_t *)((char *)v36 + v64);
          char v68 = *((unsigned __int8 *)v36 + v64 + 8);
          if ((v66 & 1) != 0)
          {
            if (v68)
            {
LABEL_42:
              uint64_t v70 = v79;
              uint64_t v69 = v80;
              uint64_t v71 = *(void (**)(char *, char *, uint64_t))(v79 + 16);
              uint64_t v72 = v77;
              v71(v77, (char *)v37 + v38[5], v80);
              uint64_t v73 = v78;
              v71(v78, (char *)v36 + v38[5], v69);
              v74 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
              char v51 = dispatch thunk of static Equatable.== infix(_:_:)(v72, v73, v69, v74);
              uint64_t v75 = *(void (**)(char *, uint64_t))(v70 + 8);
              v75(v73, v69);
              v75(v72, v69);
              return v51 & 1;
            }
          }

          else
          {
            if (*v65 != *v67) {
              LOBYTE(v68) = 1;
            }
            if ((v68 & 1) == 0) {
              goto LABEL_42;
            }
          }
        }

    sub_100015764((uint64_t)v13, &qword_10035C418);
    goto LABEL_15;
  }

  uint64_t v30 = (uint64_t)v54;
  sub_10000E6C0((uint64_t)v13, (uint64_t)v17, &qword_100355538);
  if (v29(v28, 1LL, v8) == 1)
  {
    sub_100015764((uint64_t)v20, &qword_100355538);
    sub_100015764((uint64_t)v22, &qword_100355538);
    sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  sub_100003E68(v28, v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v31 = sub_100065750((uint64_t)v17, v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090(v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v20, &qword_100355538);
  sub_100015764((uint64_t)v22, &qword_100355538);
  sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v13, &qword_100355538);
  if ((v31 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v32 = v52;
  uint64_t v33 = v53;
  if ((sub_10010B338( *v52,  *v53,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna,  (uint64_t (*)(char *, char *))sub_10011D4DC) & 1) == 0) {
    goto LABEL_15;
  }
  uint64_t v34 = v26[7];
  uint64_t v35 = *((unsigned __int8 *)v32 + v34);
  uint64_t v36 = *((unsigned __int8 *)v33 + v34);
  if (v35 != 2)
  {
    if (v36 != 2 && ((((v36 & 1) == 0) ^ v35) & 1) != 0) {
      goto LABEL_14;
    }
LABEL_15:
    uint64_t v44 = 0;
    return v44 & 1;
  }

  if (v36 != 2) {
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v37 = (char *)v32 + v26[5];
  uint64_t v39 = v50;
  uint64_t v38 = v51;
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
  uint64_t v41 = v48;
  v40(v48, v37, v51);
  uint64_t v42 = v49;
  v40(v49, (char *)v33 + v26[5], v38);
  uint64_t v43 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  uint64_t v44 = dispatch thunk of static Equatable.== infix(_:_:)(v41, v42, v38, v43);
  uint64_t v45 = *(void (**)(char *, uint64_t))(v39 + 8);
  v45(v42, v38);
  v45(v41, v38);
  return v44 & 1;
}

    uint64_t v33 = &qword_10035C418;
    uint64_t v34 = (uint64_t)v20;
LABEL_7:
    sub_100015764(v34, v33);
    goto LABEL_19;
  }

  sub_10000E6C0((uint64_t)v20, (uint64_t)v24, &qword_100355538);
  if (v32(v31, 1LL, v14) == 1)
  {
    sub_100015764((uint64_t)v27, &qword_100355538);
    sub_100015764((uint64_t)v29, &qword_100355538);
    sub_100004090((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  sub_100003E68(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v35 = sub_100065750((uint64_t)v24, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v27, &qword_100355538);
  sub_100015764((uint64_t)v29, &qword_100355538);
  sub_100004090((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v20, &qword_100355538);
  if ((v35 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_9:
  uint64_t v37 = v74;
  uint64_t v36 = v75;
  if ((sub_10010B474(*v74, *v75) & 1) == 0 || !sub_10010BBC4((void *)v37[1], (void *)v36[1])) {
    goto LABEL_19;
  }
  uint64_t v38 = v73;
  uint64_t v39 = v70;
  sub_10000E6C0((uint64_t)v37 + *(int *)(v73 + 32), v70, &qword_100355648);
  uint64_t v40 = v69;
  sub_10000E6C0((uint64_t)v36 + *(int *)(v38 + 32), v69, &qword_100355648);
  uint64_t v41 = v72;
  uint64_t v42 = v72 + *(int *)(v67 + 48);
  sub_10000E6C0(v39, v72, &qword_100355648);
  sub_10000E6C0(v40, v42, &qword_100355648);
  uint64_t v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
  uint64_t v44 = v71;
  if (v43(v41, 1LL, v71) != 1)
  {
    uint64_t v45 = v66;
    sub_10000E6C0(v41, v66, &qword_100355648);
    if (v43(v42, 1LL, v44) != 1)
    {
      uint64_t v46 = v61;
      sub_100003E68(v42, v61, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
      uint64_t v47 = sub_10011F4C0(v45, v46, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
      sub_100004090(v46, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
      sub_100015764(v40, &qword_100355648);
      sub_100015764(v39, &qword_100355648);
      sub_100004090(v45, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
      sub_100015764(v41, &qword_100355648);
      if ((v47 & 1) != 0) {
        goto LABEL_18;
      }
LABEL_19:
      uint64_t v57 = 0;
      return v57 & 1;
    }

    sub_100015764(v40, &qword_100355648);
    sub_100015764(v39, &qword_100355648);
    sub_100004090(v45, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
    goto LABEL_16;
  }

  sub_100015764(v40, &qword_100355648);
  sub_100015764(v39, &qword_100355648);
  if (v43(v42, 1LL, v44) != 1)
  {
LABEL_16:
    uint64_t v33 = &qword_10035C440;
    uint64_t v34 = v41;
    goto LABEL_7;
  }

  sub_100015764(v41, &qword_100355648);
LABEL_18:
  char v48 = v73;
  uint64_t v49 = (char *)v37 + *(int *)(v73 + 24);
  char v51 = v64;
  int v50 = v65;
  char v52 = *(void (**)(char *, char *, uint64_t))(v64 + 16);
  uint64_t v53 = v62;
  v52(v62, v49, v65);
  uint64_t v54 = (char *)v36 + *(int *)(v48 + 24);
  uint64_t v55 = v63;
  v52(v63, v54, v50);
  uint64_t v56 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  uint64_t v57 = dispatch thunk of static Equatable.== infix(_:_:)(v53, v55, v50, v56);
  uint64_t v58 = *(void (**)(char *, uint64_t))(v51 + 8);
  v58(v55, v50);
  v58(v53, v50);
  return v57 & 1;
}

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    uint64_t v9 = v3 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured(0LL) + 24);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime(0LL);
    uint64_t v11 = &qword_10035D328;
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime;
    uint64_t v13 = &unk_1002CE488;
LABEL_5:
    uint64_t v14 = sub_10000FD98(v11, v12, (uint64_t)v13);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v14, a2, a3);
    goto LABEL_6;
  }

  return result;
}

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    uint64_t v9 = v3 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured(0LL) + 28);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted(0LL);
    uint64_t v11 = &qword_10035D3D0;
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted;
    uint64_t v13 = &unk_1002CEE60;
LABEL_5:
    uint64_t v14 = sub_10000FD98(v11, v12, (uint64_t)v13);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v14, a2, a3);
    goto LABEL_6;
  }

  return result;
}

    uint64_t v34 = &qword_1003630A0;
    uint64_t v35 = (uint64_t)v20;
LABEL_14:
    sub_100015764(v35, v34);
    goto LABEL_15;
  }

  uint64_t v33 = (uint64_t)v78;
  sub_10000E6C0((uint64_t)v20, (uint64_t)v24, &qword_10035C6A0);
  if (v32(v31, 1LL, v15) == 1)
  {
    swift_retain(v27);
    swift_retain(v29);
    sub_100015764((uint64_t)v26, &qword_10035C6A0);
    sub_100004090((uint64_t)v24, type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
    goto LABEL_6;
  }

  sub_100003E68(v31, v33, type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
  swift_retain(v27);
  swift_retain(v29);
  uint64_t v36 = sub_1001C8804((uint64_t)v24, v33);
  sub_100004090(v33, type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
  sub_100015764((uint64_t)v26, &qword_10035C6A0);
  sub_100004090((uint64_t)v24, type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
  sub_100015764((uint64_t)v20, &qword_10035C6A0);
  if ((v36 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v37 = v27
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__geranTime;
  swift_beginAccess( v27 + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__geranTime,  v83,  0LL,  0LL);
  uint64_t v38 = v73;
  sub_10000E6C0(v37, v73, &qword_10035C6A8);
  uint64_t v39 = v29
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__geranTime;
  swift_beginAccess( v29 + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__geranTime,  v82,  0LL,  0LL);
  uint64_t v40 = v75;
  uint64_t v41 = v75 + *(int *)(v71 + 48);
  sub_10000E6C0(v38, v75, &qword_10035C6A8);
  sub_10000E6C0(v39, v41, &qword_10035C6A8);
  uint64_t v42 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
  uint64_t v43 = v74;
  if (v42(v40, 1LL, v74) != 1)
  {
    uint64_t v47 = v70;
    sub_10000E6C0(v40, v70, &qword_10035C6A8);
    char v48 = v42(v41, 1LL, v43);
    uint64_t v45 = (uint64_t)v77;
    uint64_t v46 = (uint64_t)v76;
    if (v48 == 1)
    {
      sub_100015764(v38, &qword_10035C6A8);
      sub_100004090(v47, type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
      goto LABEL_13;
    }

    int v50 = v65;
    sub_100003E68(v41, v65, type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
    char v51 = sub_1001C6098(v47, v50);
    sub_100004090(v50, type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
    sub_100015764(v38, &qword_10035C6A8);
    sub_100004090(v47, type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
    sub_100015764(v40, &qword_10035C6A8);
    if ((v51 & 1) != 0) {
      goto LABEL_19;
    }
LABEL_15:
    swift_release(v27);
    swift_release(v29);
    return 0LL;
  }

  sub_100015764(v38, &qword_10035C6A8);
  uint64_t v44 = v42(v41, 1LL, v43);
  uint64_t v45 = (uint64_t)v77;
  uint64_t v46 = (uint64_t)v76;
  if (v44 != 1)
  {
LABEL_13:
    uint64_t v34 = &qword_100363098;
    uint64_t v35 = v40;
    goto LABEL_14;
  }

  sub_100015764(v40, &qword_10035C6A8);
LABEL_19:
  char v52 = v27
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__eutranTime;
  swift_beginAccess( v27 + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__eutranTime,  v81,  0LL,  0LL);
  sub_10000E6C0(v52, v46, &qword_10035C6B0);
  uint64_t v53 = v29
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__eutranTime;
  swift_beginAccess( v29 + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__eutranTime,  v80,  0LL,  0LL);
  uint64_t v54 = v69;
  uint64_t v55 = v69 + *(int *)(v66 + 48);
  sub_10000E6C0(v46, v69, &qword_10035C6B0);
  uint64_t v56 = v53;
  uint64_t v57 = v54;
  sub_10000E6C0(v56, v55, &qword_10035C6B0);
  uint64_t v58 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48);
  uint64_t v59 = v54;
  uint64_t v60 = v68;
  if (v58(v59, 1LL, v68) == 1)
  {
    swift_release(v27);
    swift_release(v29);
    sub_100015764(v46, &qword_10035C6B0);
    if (v58(v55, 1LL, v60) == 1)
    {
      sub_100015764(v57, &qword_10035C6B0);
      return 1LL;
    }

    goto LABEL_24;
  }

  sub_10000E6C0(v57, v45, &qword_10035C6B0);
  if (v58(v55, 1LL, v60) == 1)
  {
    swift_release(v27);
    swift_release(v29);
    sub_100015764(v46, &qword_10035C6B0);
    sub_100004090(v45, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
LABEL_24:
    sub_100015764(v57, &qword_100363090);
    return 0LL;
  }

  uint64_t v61 = v64;
  sub_100003E68(v55, v64, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
  uint64_t v62 = sub_1001CF820(v45, v61);
  swift_release(v27);
  swift_release(v29);
  sub_100004090(v61, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
  sub_100015764(v46, &qword_10035C6B0);
  sub_100004090(v45, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
  sub_100015764(v57, &qword_10035C6B0);
  return (v62 & 1) != 0;
}

    uint64_t v64 = &qword_100363080;
    uint64_t v65 = (uint64_t)v49;
LABEL_50:
    sub_100015764(v65, v64);
    goto LABEL_51;
  }

  uint64_t v62 = v55;
  uint64_t v63 = v204;
  sub_10000E6C0((uint64_t)v49, v204, &qword_10035C6C8);
  if (v59(v58, 1LL, v44) == 1)
  {
    uint64_t v61 = v62;
    swift_retain(v62);
    swift_retain(v205);
    sub_100015764((uint64_t)v54, &qword_10035C6C8);
    sub_100004090(v63, type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle);
    goto LABEL_6;
  }

  uint64_t v66 = v196;
  sub_100003E68(v58, v196, type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle);
  uint64_t v61 = v62;
  swift_retain(v62);
  swift_retain(v205);
  uint64_t v67 = sub_1001D3E2C(v63, v66, type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle);
  sub_100004090(v66, type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle);
  sub_100015764((uint64_t)v54, &qword_10035C6C8);
  sub_100004090(v63, type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle);
  sub_100015764((uint64_t)v49, &qword_10035C6C8);
  if ((v67 & 1) == 0) {
    goto LABEL_51;
  }
LABEL_8:
  char v68 = v61
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainEllipse;
  swift_beginAccess( v61 + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainEllipse,  v219,  0LL,  0LL);
  uint64_t v69 = v199;
  sub_10000E6C0(v68, v199, &qword_10035C6D0);
  uint64_t v70 = v205
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainEllipse;
  swift_beginAccess( v205 + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainEllipse,  v218,  0LL,  0LL);
  uint64_t v71 = v201;
  uint64_t v72 = v201 + *(int *)(v197 + 48);
  sub_10000E6C0(v69, v201, &qword_10035C6D0);
  uint64_t v73 = v70;
  v74 = v71;
  sub_10000E6C0(v73, v72, &qword_10035C6D0);
  uint64_t v75 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v198 + 48);
  int v76 = v71;
  uint64_t v77 = v200;
  if (v75(v76, 1LL, v200) == 1)
  {
    sub_100015764(v69, &qword_10035C6D0);
    uint64_t v78 = v75(v72, 1LL, v77);
    uint64_t v79 = v202;
    int v80 = v203;
    if (v78 == 1)
    {
      sub_100015764(v74, &qword_10035C6D0);
      goto LABEL_15;
    }

    goto LABEL_13;
  }

  v81 = v195;
  sub_10000E6C0(v74, v195, &qword_10035C6D0);
  uint64_t v82 = v75(v72, 1LL, v77);
  uint64_t v83 = v202;
  int v80 = v203;
  if (v82 == 1)
  {
    sub_100015764(v69, &qword_10035C6D0);
    sub_100004090(v81, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
LABEL_13:
    uint64_t v64 = &qword_100363078;
    uint64_t v65 = v74;
    goto LABEL_50;
  }

  uint64_t v84 = v61;
  uint64_t v85 = v69;
  uint64_t v86 = v81;
  char v87 = v189;
  sub_100003E68(v72, v189, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
  LODWORD(v204) = sub_1001C6B2C(v86, v87);
  sub_100004090(v87, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
  uint64_t v88 = v85;
  uint64_t v61 = v84;
  uint64_t v79 = v83;
  sub_100015764(v88, &qword_10035C6D0);
  sub_100004090(v86, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
  sub_100015764(v74, &qword_10035C6D0);
  if ((v204 & 1) == 0) {
    goto LABEL_51;
  }
LABEL_15:
  uint64_t v89 = v61
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitudeUncertainEllipsoid;
  swift_beginAccess( v61 + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitudeUncertainEllipsoid,  v217,  0LL,  0LL);
  sub_10000E6C0(v89, v80, &qword_10035C6D8);
  uint64_t v90 = v205
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitudeUncertainEllipsoid;
  swift_beginAccess( v205 + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitudeUncertainEllipsoid,  v216,  0LL,  0LL);
  uint64_t v91 = v193;
  uint64_t v92 = v193 + *(int *)(v190 + 48);
  sub_10000E6C0(v80, v193, &qword_10035C6D8);
  v93 = v90;
  uint64_t v94 = v91;
  sub_10000E6C0(v93, v92, &qword_10035C6D8);
  uint64_t v95 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v191 + 48);
  v96 = v91;
  uint64_t v97 = v192;
  if (v95(v96, 1LL, v192) == 1)
  {
    sub_100015764(v80, &qword_10035C6D8);
    char v98 = v95(v92, 1LL, v97);
    uint64_t v99 = v194;
    if (v98 == 1)
    {
      sub_100015764(v94, &qword_10035C6D8);
      goto LABEL_22;
    }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    uint64_t v9 = v3 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_CellTimeData(0LL) + 24);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_CtsCdmaCellTime(0LL);
    uint64_t v11 = &qword_10035D828;
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_CtsCdmaCellTime;
    uint64_t v13 = &unk_1002D31E0;
LABEL_5:
    uint64_t v14 = sub_10000FD98(v11, v12, (uint64_t)v13);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v14, a2, a3);
    goto LABEL_6;
  }

  return result;
}

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    uint64_t v9 = v3 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_CplaneContext(0LL) + 24);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_Cdma1xContext(0LL);
    uint64_t v11 = &qword_10035DA20;
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_Cdma1xContext;
    uint64_t v13 = &unk_1002D50D0;
LABEL_5:
    uint64_t v14 = sub_10000FD98(v11, v12, (uint64_t)v13);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v14, a2, a3);
    goto LABEL_6;
  }

  return result;
}

  uint64_t v17 = 0;
  return v17 & 1;
}

    sub_100015764((uint64_t)v13, &qword_1003630D8);
    goto LABEL_7;
  }

  uint64_t v30 = (uint64_t)v67;
  sub_10000E6C0((uint64_t)v13, (uint64_t)v17, &qword_10035C658);
  if (v29(v28, 1LL, v8) == 1)
  {
    sub_100015764((uint64_t)v20, &qword_10035C658);
    sub_100015764((uint64_t)v22, &qword_10035C658);
    sub_100004090((uint64_t)v17, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
    goto LABEL_6;
  }

  sub_100003E68(v28, v30, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
  uint64_t v33 = sub_1001D3CAC((uint64_t)v17, v30, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
  sub_100004090(v30, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
  sub_100015764((uint64_t)v20, &qword_10035C658);
  sub_100015764((uint64_t)v22, &qword_10035C658);
  sub_100004090((uint64_t)v17, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
  sub_100015764((uint64_t)v13, &qword_10035C658);
  if ((v33 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_10:
  uint64_t v34 = v26[6];
  uint64_t v35 = v66;
  uint64_t v36 = (_DWORD *)(v65 + v34);
  uint64_t v37 = *(_BYTE *)(v65 + v34 + 4);
  uint64_t v38 = (_DWORD *)(v66 + v34);
  uint64_t v39 = *(unsigned __int8 *)(v66 + v34 + 4);
  if ((v37 & 1) != 0)
  {
    if (!v39) {
      goto LABEL_7;
    }
  }

  else
  {
    if (*v36 != *v38) {
      LOBYTE(v39) = 1;
    }
    if ((v39 & 1) != 0) {
      goto LABEL_7;
    }
  }

  uint64_t v40 = v26[7];
  uint64_t v41 = (_DWORD *)(v65 + v40);
  uint64_t v42 = *(_BYTE *)(v65 + v40 + 4);
  uint64_t v43 = (_DWORD *)(v66 + v40);
  uint64_t v44 = *(unsigned __int8 *)(v66 + v40 + 4);
  if ((v42 & 1) != 0)
  {
    if (!v44) {
      goto LABEL_7;
    }
  }

  else
  {
    if (*v41 != *v43) {
      LOBYTE(v44) = 1;
    }
    if ((v44 & 1) != 0) {
      goto LABEL_7;
    }
  }

  uint64_t v45 = v26[8];
  uint64_t v46 = (_DWORD *)(v65 + v45);
  uint64_t v47 = *(_BYTE *)(v65 + v45 + 4);
  char v48 = (_DWORD *)(v66 + v45);
  uint64_t v49 = *(unsigned __int8 *)(v66 + v45 + 4);
  if ((v47 & 1) != 0)
  {
    if (v49) {
      goto LABEL_28;
    }
LABEL_7:
    uint64_t v31 = 0;
    return v31 & 1;
  }

  if (*v46 != *v48) {
    LOBYTE(v49) = 1;
  }
  if ((v49 & 1) != 0) {
    goto LABEL_7;
  }
LABEL_28:
  int v50 = v26[9];
  char v51 = *(unsigned __int8 *)(v65 + v50);
  char v52 = *(unsigned __int8 *)(v66 + v50);
  if (v51 == 5)
  {
    if (v52 == 5)
    {
LABEL_33:
      uint64_t v54 = v63;
      uint64_t v53 = v64;
      uint64_t v55 = *(void (**)(char *))(v63 + 16);
      uint64_t v56 = v61;
      v55(v61);
      uint64_t v57 = v62;
      ((void (*)(char *, uint64_t, uint64_t))v55)(v62, v35, v53);
      uint64_t v58 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      uint64_t v31 = dispatch thunk of static Equatable.== infix(_:_:)(v56, v57, v53, v58);
      uint64_t v59 = *(void (**)(char *, uint64_t))(v54 + 8);
      v59(v57, v53);
      v59(v56, v53);
      return v31 & 1;
    }

    goto LABEL_7;
  }

  uint64_t v31 = 0;
  if (v52 != 5 && v51 == v52) {
    goto LABEL_33;
  }
  return v31 & 1;
}

    uint64_t v43 = &qword_1003630D0;
    uint64_t v44 = (uint64_t)v30;
LABEL_22:
    sub_100015764(v44, v43);
    goto LABEL_23;
  }

  sub_10000E6C0((uint64_t)v30, (uint64_t)v34, &qword_10035C668);
  if (v42(v41, 1LL, v24) == 1)
  {
    sub_100015764((uint64_t)v37, &qword_10035C668);
    sub_100015764((uint64_t)v39, &qword_10035C668);
    sub_100004090((uint64_t)v34, type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured);
    goto LABEL_6;
  }

  sub_100003E68(v41, (uint64_t)v27, type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured);
  uint64_t v45 = sub_1001CC678((uint64_t)v34, (uint64_t)v27);
  sub_100004090((uint64_t)v27, type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured);
  sub_100015764((uint64_t)v37, &qword_10035C668);
  sub_100015764((uint64_t)v39, &qword_10035C668);
  sub_100004090((uint64_t)v34, type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured);
  sub_100015764((uint64_t)v30, &qword_10035C668);
  if ((v45 & 1) == 0) {
    goto LABEL_23;
  }
LABEL_8:
  uint64_t v47 = v96;
  uint64_t v46 = v97;
  sub_10000E6C0(v97 + v40[6], v96, &qword_10035C670);
  char v48 = v98;
  uint64_t v49 = v95;
  sub_10000E6C0(v98 + v40[6], v95, &qword_10035C670);
  int v50 = v92;
  char v51 = v92 + *(int *)(v89 + 48);
  sub_10000E6C0(v47, v92, &qword_10035C670);
  sub_10000E6C0(v49, v51, &qword_10035C670);
  char v52 = v91;
  uint64_t v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v90 + 48);
  if (v53(v50, 1LL, v91) != 1)
  {
    uint64_t v57 = v88;
    sub_10000E6C0(v50, v88, &qword_10035C670);
    uint64_t v58 = v53(v51, 1LL, v52);
    uint64_t v56 = (uint64_t)v93;
    uint64_t v55 = (uint64_t)v94;
    if (v58 != 1)
    {
      uint64_t v59 = v83;
      sub_100003E68(v51, v83, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
      uint64_t v60 = sub_1001D3CAC(v57, v59, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
      sub_100004090(v59, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
      sub_100015764(v95, &qword_10035C670);
      sub_100015764(v96, &qword_10035C670);
      sub_100004090(v57, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
      sub_100015764(v50, &qword_10035C670);
      if ((v60 & 1) == 0) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }

    sub_100015764(v95, &qword_10035C670);
    sub_100015764(v96, &qword_10035C670);
    sub_100004090(v57, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
LABEL_13:
    uint64_t v43 = &qword_1003630C8;
LABEL_21:
    uint64_t v44 = v50;
    goto LABEL_22;
  }

  sub_100015764(v49, &qword_10035C670);
  sub_100015764(v47, &qword_10035C670);
  uint64_t v54 = v53(v51, 1LL, v52);
  uint64_t v56 = (uint64_t)v93;
  uint64_t v55 = (uint64_t)v94;
  if (v54 != 1) {
    goto LABEL_13;
  }
  sub_100015764(v50, &qword_10035C670);
LABEL_15:
  sub_10000E6C0(v46 + v40[7], v55, &qword_10035C678);
  sub_10000E6C0(v48 + v40[7], v56, &qword_10035C678);
  int v50 = v87;
  uint64_t v61 = v87 + *(int *)(v84 + 48);
  sub_10000E6C0(v55, v87, &qword_10035C678);
  sub_10000E6C0(v56, v61, &qword_10035C678);
  uint64_t v62 = v86;
  uint64_t v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48);
  if (v63(v50, 1LL, v86) == 1)
  {
    sub_100015764(v56, &qword_10035C678);
    sub_100015764(v55, &qword_10035C678);
    if (v63(v61, 1LL, v62) == 1)
    {
      sub_100015764(v50, &qword_10035C678);
LABEL_26:
      uint64_t v70 = v80;
      uint64_t v69 = v81;
      uint64_t v71 = *(void (**)(char *, uint64_t, uint64_t))(v80 + 16);
      uint64_t v72 = v78;
      v71(v78, v46, v81);
      uint64_t v73 = v79;
      v71(v79, v48, v69);
      v74 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      uint64_t v65 = dispatch thunk of static Equatable.== infix(_:_:)(v72, v73, v69, v74);
      uint64_t v75 = *(void (**)(char *, uint64_t))(v70 + 8);
      v75(v73, v69);
      v75(v72, v69);
      return v65 & 1;
    }

    goto LABEL_20;
  }

  uint64_t v64 = v82;
  sub_10000E6C0(v50, v82, &qword_10035C678);
  if (v63(v61, 1LL, v62) == 1)
  {
    sub_100015764(v56, &qword_10035C678);
    sub_100015764(v55, &qword_10035C678);
    sub_100004090(v64, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
LABEL_20:
    uint64_t v43 = &qword_1003630C0;
    goto LABEL_21;
  }

  uint64_t v67 = v77;
  sub_100003E68(v61, v77, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
  char v68 = sub_1001D3CAC(v64, v67, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
  sub_100004090(v67, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
  sub_100015764(v56, &qword_10035C678);
  sub_100015764(v55, &qword_10035C678);
  sub_100004090(v64, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
  sub_100015764(v50, &qword_10035C678);
  if ((v68 & 1) != 0) {
    goto LABEL_26;
  }
LABEL_23:
  uint64_t v65 = 0;
  return v65 & 1;
}

    uint64_t v53 = &qword_100363040;
    uint64_t v54 = (uint64_t)v37;
LABEL_28:
    sub_100015764(v54, v53);
    goto LABEL_29;
  }

  sub_10000E6C0((uint64_t)v37, (uint64_t)v41, &qword_10035C700);
  if (v52(v51, 1LL, v31) == 1)
  {
    sub_100015764((uint64_t)v44, &qword_10035C700);
    sub_100015764((uint64_t)v46, &qword_10035C700);
    sub_100004090((uint64_t)v41, type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
    goto LABEL_6;
  }

  sub_100003E68(v51, (uint64_t)v34, type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
  uint64_t v55 = sub_1001D3CAC((uint64_t)v41, (uint64_t)v34, type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
  sub_100004090((uint64_t)v34, type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
  sub_100015764((uint64_t)v44, &qword_10035C700);
  sub_100015764((uint64_t)v46, &qword_10035C700);
  sub_100004090((uint64_t)v41, type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
  sub_100015764((uint64_t)v37, &qword_10035C700);
  if ((v55 & 1) == 0) {
    goto LABEL_29;
  }
LABEL_8:
  uint64_t v56 = v126;
  uint64_t v57 = v123;
  sub_10000E6C0(v126 + v50[6], v123, &qword_10035C708);
  uint64_t v59 = (uint64_t)v127;
  uint64_t v58 = v128;
  sub_10000E6C0(v128 + v50[6], (uint64_t)v127, &qword_10035C708);
  uint64_t v60 = v125;
  uint64_t v61 = v125 + *(int *)(v121 + 48);
  sub_10000E6C0(v57, v125, &qword_10035C708);
  sub_10000E6C0(v59, v61, &qword_10035C708);
  uint64_t v62 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v122 + 48);
  uint64_t v63 = v124;
  if (v62(v60, 1LL, v124) == 1)
  {
    sub_100015764(v59, &qword_10035C708);
    sub_100015764(v57, &qword_10035C708);
    if (v62(v61, 1LL, v63) == 1)
    {
      sub_100015764(v60, &qword_10035C708);
      goto LABEL_15;
    }

    goto LABEL_13;
  }

  uint64_t v64 = v119;
  sub_10000E6C0(v60, v119, &qword_10035C708);
  if (v62(v61, 1LL, v63) == 1)
  {
    sub_100015764((uint64_t)v127, &qword_10035C708);
    sub_100015764(v57, &qword_10035C708);
    sub_100004090(v64, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
LABEL_13:
    uint64_t v53 = &qword_100363038;
    uint64_t v54 = v60;
    goto LABEL_28;
  }

  uint64_t v65 = v110;
  sub_100003E68(v61, v110, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
  uint64_t v66 = sub_1001C6FC8(v64, v65, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
  sub_100004090(v65, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
  sub_100015764((uint64_t)v127, &qword_10035C708);
  sub_100015764(v57, &qword_10035C708);
  sub_100004090(v64, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
  sub_100015764(v60, &qword_10035C708);
  if ((v66 & 1) == 0) {
    goto LABEL_29;
  }
LABEL_15:
  uint64_t v67 = v118;
  sub_10000E6C0(v56 + v50[7], v118, &qword_10035C710);
  char v127 = v50;
  char v68 = v120;
  sub_10000E6C0(v58 + v50[7], v120, &qword_10035C710);
  uint64_t v69 = v115;
  uint64_t v70 = v115 + *(int *)(v112 + 48);
  sub_10000E6C0(v67, v115, &qword_10035C710);
  sub_10000E6C0(v68, v70, &qword_10035C710);
  uint64_t v71 = v114;
  uint64_t v72 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v113 + 48);
  if (v72(v69, 1LL, v114) != 1)
  {
    uint64_t v77 = v109;
    sub_10000E6C0(v69, v109, &qword_10035C710);
    uint64_t v78 = v72(v70, 1LL, v71);
    uint64_t v75 = (uint64_t)v116;
    uint64_t v79 = v117;
    if (v78 != 1)
    {
      int v80 = v104;
      sub_100003E68(v70, v104, type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
      v81 = sub_1001D4818(v77, v80, type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
      sub_100004090(v80, type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
      sub_100015764(v120, &qword_10035C710);
      sub_100015764(v118, &qword_10035C710);
      sub_100004090(v77, type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
      sub_100015764(v69, &qword_10035C710);
      v74 = (uint64_t)v79;
      int v76 = (uint64_t)v111;
      if ((v81 & 1) == 0) {
        goto LABEL_29;
      }
      goto LABEL_22;
    }

    sub_100015764(v120, &qword_10035C710);
    sub_100015764(v67, &qword_10035C710);
    sub_100004090(v77, type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
    goto LABEL_20;
  }

  sub_100015764(v68, &qword_10035C710);
  sub_100015764(v67, &qword_10035C710);
  uint64_t v73 = v72(v70, 1LL, v71);
  uint64_t v75 = (uint64_t)v116;
  v74 = (uint64_t)v117;
  int v76 = (uint64_t)v111;
  if (v73 != 1)
  {
LABEL_20:
    uint64_t v53 = &qword_100363030;
    uint64_t v54 = v69;
    goto LABEL_28;
  }

  sub_100015764(v69, &qword_10035C710);
LABEL_22:
  uint64_t v82 = (uint64_t)v127;
  sub_10000E6C0(v56 + v127[8], v76, &qword_10035C718);
  sub_10000E6C0(v58 + *(int *)(v82 + 32), v75, &qword_10035C718);
  uint64_t v83 = v108;
  uint64_t v84 = v108 + *(int *)(v105 + 48);
  sub_10000E6C0(v76, v108, &qword_10035C718);
  sub_10000E6C0(v75, v84, &qword_10035C718);
  uint64_t v85 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v106 + 48);
  uint64_t v86 = v107;
  if (v85(v83, 1LL, v107) == 1)
  {
    sub_100015764(v75, &qword_10035C718);
    sub_100015764(v76, &qword_10035C718);
    if (v85(v84, 1LL, v86) == 1)
    {
      sub_100015764(v83, &qword_10035C718);
LABEL_32:
      uint64_t v91 = v102;
      uint64_t v92 = *(void (**)(char *, uint64_t, uint64_t))(v102 + 16);
      v93 = v100;
      uint64_t v94 = v103;
      v92(v100, v56, v103);
      uint64_t v95 = v101;
      v92(v101, v58, v94);
      v96 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v87 = dispatch thunk of static Equatable.== infix(_:_:)(v93, v95, v94, v96);
      uint64_t v97 = *(void (**)(char *, uint64_t))(v91 + 8);
      v97(v95, v94);
      v97(v93, v94);
      return v87 & 1;
    }

    goto LABEL_27;
  }

  sub_10000E6C0(v83, v74, &qword_10035C718);
  if (v85(v84, 1LL, v86) == 1)
  {
    sub_100015764(v75, &qword_10035C718);
    sub_100015764(v76, &qword_10035C718);
    sub_100004090(v74, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
LABEL_27:
    uint64_t v53 = &qword_100363028;
    uint64_t v54 = v83;
    goto LABEL_28;
  }

  uint64_t v89 = v99;
  sub_100003E68(v84, v99, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
  uint64_t v90 = sub_1001C5684(v74, v89);
  sub_100004090(v89, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
  sub_100015764(v75, &qword_10035C718);
  sub_100015764(v76, &qword_10035C718);
  sub_100004090(v74, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
  sub_100015764(v83, &qword_10035C718);
  if ((v90 & 1) != 0) {
    goto LABEL_32;
  }
LABEL_29:
  char v87 = 0;
  return v87 & 1;
}

    uint64_t v27 = sub_100003A0C(&qword_10035C7B0);
    memcpy(v8, v9, *(void *)(*(void *)(v27 - 8) + 64LL));
    goto LABEL_7;
  }

  if (v14)
  {
    sub_100004090((uint64_t)v8, type metadata accessor for Proto_Gnss_Emergency_CtsEutranCellTime);
    goto LABEL_6;
  }

  uint64_t v28 = (void (*)(char *, char *, uint64_t))__dst;
  __dst((uint64_t)v8, (uint64_t)v9, v6);
  uint64_t v44 = v10[5];
  uint64_t v45 = &v8[v44];
  uint64_t v46 = &v9[v44];
  uint64_t v47 = v46[4];
  *(_DWORD *)uint64_t v45 = *(_DWORD *)v46;
  v45[4] = v47;
  char v48 = v10[6];
  uint64_t v49 = &v8[v48];
  int v50 = &v9[v48];
  char v51 = v50[4];
  *(_DWORD *)uint64_t v49 = *(_DWORD *)v50;
  v49[4] = v51;
  char v52 = v10[7];
  uint64_t v53 = &v8[v52];
  uint64_t v54 = &v9[v52];
  uint64_t v55 = v54[4];
  *(_DWORD *)uint64_t v53 = *(_DWORD *)v54;
  v53[4] = v55;
LABEL_8:
  uint64_t v29 = *(int *)(a3 + 24);
  uint64_t v30 = (char *)(a1 + v29);
  uint64_t v31 = (char *)(a2 + v29);
  uint64_t v32 = (int *)type metadata accessor for Proto_Gnss_Emergency_CtsCdmaCellTime(0LL);
  uint64_t v33 = *((void *)v32 - 1);
  uint64_t v34 = *(uint64_t (**)(char *, uint64_t, int *))(v33 + 48);
  uint64_t v35 = v34(v30, 1LL, v32);
  uint64_t v36 = v34(v31, 1LL, v32);
  if (!v35)
  {
    if (v36)
    {
      sub_100004090((uint64_t)v30, type metadata accessor for Proto_Gnss_Emergency_CtsCdmaCellTime);
      goto LABEL_14;
    }

    v28(v30, v31, v6);
    uint64_t v56 = v32[5];
    uint64_t v57 = &v30[v56];
    uint64_t v58 = &v31[v56];
    uint64_t v59 = type metadata accessor for Proto_Gnss_Emergency_GpsTowCdmaCellTime(0LL);
    uint64_t v105 = *(void *)(v59 - 8);
    uint64_t v60 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v105 + 48);
    uint64_t v61 = v60(v57, 1LL, v59);
    uint64_t v62 = v60(v58, 1LL, v59);
    if (v61)
    {
      if (!v62)
      {
        (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v57, v58, v6);
        uint64_t v63 = *(int *)(v59 + 20);
        uint64_t v64 = &v57[v63];
        uint64_t v65 = &v58[v63];
        uint64_t v66 = v65[4];
        *(_DWORD *)uint64_t v64 = *(_DWORD *)v65;
        v64[4] = v66;
        uint64_t v67 = *(int *)(v59 + 24);
        char v68 = &v57[v67];
        uint64_t v69 = &v58[v67];
        uint64_t v70 = v69[4];
        *(_DWORD *)char v68 = *(_DWORD *)v69;
        v68[4] = v70;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v105 + 56))(v57, 0LL, 1LL, v59);
LABEL_24:
        uint64_t v88 = v32[6];
        uint64_t v89 = &v30[v88];
        uint64_t v90 = &v31[v88];
        uint64_t v91 = *(_DWORD *)v90;
        v89[4] = v90[4];
        *(_DWORD *)uint64_t v89 = v91;
        uint64_t v92 = v32[7];
        v93 = &v30[v92];
        uint64_t v94 = &v31[v92];
        uint64_t v95 = *(_DWORD *)v94;
        v93[4] = v94[4];
        *(_DWORD *)v93 = v95;
        return a1;
      }
    }

    else
    {
      if (!v62)
      {
        __dst((uint64_t)v57, (uint64_t)v58, v6);
        uint64_t v97 = *(int *)(v59 + 20);
        char v98 = &v57[v97];
        uint64_t v99 = &v58[v97];
        uint64_t v100 = v99[4];
        *(_DWORD *)char v98 = *(_DWORD *)v99;
        v98[4] = v100;
        uint64_t v101 = *(int *)(v59 + 24);
        uint64_t v102 = &v57[v101];
        uint64_t v103 = &v58[v101];
        v104 = v103[4];
        *(_DWORD *)uint64_t v102 = *(_DWORD *)v103;
        v102[4] = v104;
        goto LABEL_24;
      }

      sub_100004090((uint64_t)v57, type metadata accessor for Proto_Gnss_Emergency_GpsTowCdmaCellTime);
    }

    char v87 = sub_100003A0C(&qword_10035C7A8);
    memcpy(v57, v58, *(void *)(*(void *)(v87 - 8) + 64LL));
    goto LABEL_24;
  }

  if (v36)
  {
LABEL_14:
    uint64_t v43 = sub_100003A0C(&qword_10035C7B8);
    memcpy(v30, v31, *(void *)(*(void *)(v43 - 8) + 64LL));
    return a1;
  }

  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v106 + 16);
  v37(v30, v31, v6);
  uint64_t v38 = v32[5];
  __dsta = &v30[v38];
  uint64_t v39 = &v31[v38];
  uint64_t v40 = type metadata accessor for Proto_Gnss_Emergency_GpsTowCdmaCellTime(0LL);
  uint64_t v41 = *(void *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1LL, v40))
  {
    uint64_t v42 = sub_100003A0C(&qword_10035C7A8);
    memcpy(__dsta, v39, *(void *)(*(void *)(v42 - 8) + 64LL));
  }

  else
  {
    v37(__dsta, v39, v6);
    uint64_t v71 = *(int *)(v40 + 20);
    uint64_t v72 = &__dsta[v71];
    uint64_t v73 = &v39[v71];
    v74 = v73[4];
    *(_DWORD *)uint64_t v72 = *(_DWORD *)v73;
    v72[4] = v74;
    uint64_t v75 = *(int *)(v40 + 24);
    int v76 = &__dsta[v75];
    uint64_t v77 = &v39[v75];
    uint64_t v78 = v77[4];
    *(_DWORD *)int v76 = *(_DWORD *)v77;
    v76[4] = v78;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(__dsta, 0LL, 1LL, v40);
  }

  uint64_t v79 = v32[6];
  int v80 = &v30[v79];
  v81 = &v31[v79];
  uint64_t v82 = *(_DWORD *)v81;
  v80[4] = v81[4];
  *(_DWORD *)int v80 = v82;
  uint64_t v83 = v32[7];
  uint64_t v84 = &v30[v83];
  uint64_t v85 = &v31[v83];
  uint64_t v86 = *(_DWORD *)v85;
  v84[4] = v85[4];
  *(_DWORD *)uint64_t v84 = v86;
  (*(void (**)(char *, void, uint64_t, int *))(v33 + 56))(v30, 0LL, 1LL, v32);
  return a1;
}

    uint64_t v24 = sub_100003A0C(&qword_10035C7B0);
    memcpy(v8, v9, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_7;
  }

  if (v14)
  {
    sub_100004090((uint64_t)v8, type metadata accessor for Proto_Gnss_Emergency_CtsEutranCellTime);
    goto LABEL_6;
  }

  uint64_t v25 = (void (*)(char *, char *, uint64_t))__dst;
  __dst((uint64_t)v8, (uint64_t)v9, v6);
  uint64_t v41 = v10[5];
  uint64_t v42 = &v8[v41];
  uint64_t v43 = &v9[v41];
  *(_DWORD *)uint64_t v42 = *(_DWORD *)v43;
  v42[4] = v43[4];
  uint64_t v44 = v10[6];
  uint64_t v45 = &v8[v44];
  uint64_t v46 = &v9[v44];
  *(_DWORD *)uint64_t v45 = *(_DWORD *)v46;
  v45[4] = v46[4];
  uint64_t v47 = v10[7];
  char v48 = &v8[v47];
  uint64_t v49 = &v9[v47];
  *(_DWORD *)char v48 = *(_DWORD *)v49;
  v48[4] = v49[4];
LABEL_8:
  uint64_t v26 = *(int *)(a3 + 24);
  uint64_t v27 = (char *)(a1 + v26);
  uint64_t v28 = (char *)(a2 + v26);
  uint64_t v29 = (int *)type metadata accessor for Proto_Gnss_Emergency_CtsCdmaCellTime(0LL);
  uint64_t v30 = *((void *)v29 - 1);
  uint64_t v31 = *(uint64_t (**)(char *, uint64_t, int *))(v30 + 48);
  uint64_t v32 = v31(v27, 1LL, v29);
  uint64_t v33 = v31(v28, 1LL, v29);
  if (!v32)
  {
    if (v33)
    {
      sub_100004090((uint64_t)v27, type metadata accessor for Proto_Gnss_Emergency_CtsCdmaCellTime);
      goto LABEL_14;
    }

    v25(v27, v28, v6);
    int v50 = v29[5];
    char v51 = &v27[v50];
    char v52 = &v28[v50];
    uint64_t v53 = type metadata accessor for Proto_Gnss_Emergency_GpsTowCdmaCellTime(0LL);
    uint64_t v89 = *(void *)(v53 - 8);
    uint64_t v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v89 + 48);
    uint64_t v55 = v54(v51, 1LL, v53);
    uint64_t v56 = v54(v52, 1LL, v53);
    if (v55)
    {
      if (!v56)
      {
        (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v51, v52, v6);
        uint64_t v57 = *(int *)(v53 + 20);
        uint64_t v58 = &v51[v57];
        uint64_t v59 = &v52[v57];
        *(_DWORD *)uint64_t v58 = *(_DWORD *)v59;
        v58[4] = v59[4];
        uint64_t v60 = *(int *)(v53 + 24);
        uint64_t v61 = &v51[v60];
        uint64_t v62 = &v52[v60];
        *(_DWORD *)uint64_t v61 = *(_DWORD *)v62;
        v61[4] = v62[4];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56))(v51, 0LL, 1LL, v53);
LABEL_24:
        int v76 = v29[6];
        uint64_t v77 = &v27[v76];
        uint64_t v78 = &v28[v76];
        *(_DWORD *)uint64_t v77 = *(_DWORD *)v78;
        v77[4] = v78[4];
        uint64_t v79 = v29[7];
        int v80 = &v27[v79];
        v81 = &v28[v79];
        v80[4] = v81[4];
        *(_DWORD *)int v80 = *(_DWORD *)v81;
        return a1;
      }
    }

    else
    {
      if (!v56)
      {
        __dst((uint64_t)v51, (uint64_t)v52, v6);
        uint64_t v83 = *(int *)(v53 + 20);
        uint64_t v84 = &v51[v83];
        uint64_t v85 = &v52[v83];
        *(_DWORD *)uint64_t v84 = *(_DWORD *)v85;
        v84[4] = v85[4];
        uint64_t v86 = *(int *)(v53 + 24);
        char v87 = &v51[v86];
        uint64_t v88 = &v52[v86];
        *(_DWORD *)char v87 = *(_DWORD *)v88;
        v87[4] = v88[4];
        goto LABEL_24;
      }

      sub_100004090((uint64_t)v51, type metadata accessor for Proto_Gnss_Emergency_GpsTowCdmaCellTime);
    }

    uint64_t v75 = sub_100003A0C(&qword_10035C7A8);
    memcpy(v51, v52, *(void *)(*(void *)(v75 - 8) + 64LL));
    goto LABEL_24;
  }

  if (v33)
  {
LABEL_14:
    uint64_t v40 = sub_100003A0C(&qword_10035C7B8);
    memcpy(v27, v28, *(void *)(*(void *)(v40 - 8) + 64LL));
    return a1;
  }

  uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v90 + 32);
  v34(v27, v28, v6);
  uint64_t v35 = v29[5];
  __dsta = &v27[v35];
  uint64_t v36 = &v28[v35];
  uint64_t v37 = type metadata accessor for Proto_Gnss_Emergency_GpsTowCdmaCellTime(0LL);
  uint64_t v38 = *(void *)(v37 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1LL, v37))
  {
    uint64_t v39 = sub_100003A0C(&qword_10035C7A8);
    memcpy(__dsta, v36, *(void *)(*(void *)(v39 - 8) + 64LL));
  }

  else
  {
    v34(__dsta, v36, v6);
    uint64_t v63 = *(int *)(v37 + 20);
    uint64_t v64 = &__dsta[v63];
    uint64_t v65 = &v36[v63];
    *(_DWORD *)uint64_t v64 = *(_DWORD *)v65;
    v64[4] = v65[4];
    uint64_t v66 = *(int *)(v37 + 24);
    uint64_t v67 = &__dsta[v66];
    char v68 = &v36[v66];
    *(_DWORD *)uint64_t v67 = *(_DWORD *)v68;
    v67[4] = v68[4];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(__dsta, 0LL, 1LL, v37);
  }

  uint64_t v69 = v29[6];
  uint64_t v70 = &v27[v69];
  uint64_t v71 = &v28[v69];
  *(_DWORD *)uint64_t v70 = *(_DWORD *)v71;
  v70[4] = v71[4];
  uint64_t v72 = v29[7];
  uint64_t v73 = &v27[v72];
  v74 = &v28[v72];
  v73[4] = v74[4];
  *(_DWORD *)uint64_t v73 = *(_DWORD *)v74;
  (*(void (**)(char *, void, uint64_t, int *))(v30 + 56))(v27, 0LL, 1LL, v29);
  return a1;
}

    uint64_t v34 = &qword_100363EC0;
    uint64_t v35 = (uint64_t)v20;
LABEL_22:
    sub_100015764(v35, v34);
    goto LABEL_23;
  }

  sub_10000E6C0((uint64_t)v20, (uint64_t)v24, &qword_100363118);
  if (v32(v31, 1LL, v15) == 1)
  {
    uint64_t v33 = v27;
    swift_retain(v27);
    swift_retain(v29);
    sub_100015764((uint64_t)v26, &qword_100363118);
    sub_100004090((uint64_t)v24, type metadata accessor for Proto_Gnss_Time);
    goto LABEL_6;
  }

  uint64_t v36 = v31;
  uint64_t v37 = v77;
  sub_100003E68(v36, v77, type metadata accessor for Proto_Gnss_Time);
  uint64_t v33 = v27;
  swift_retain(v27);
  swift_retain(v29);
  uint64_t v38 = sub_10021C844((uint64_t)v24, v37);
  sub_100004090(v37, type metadata accessor for Proto_Gnss_Time);
  sub_100015764((uint64_t)v26, &qword_100363118);
  sub_100004090((uint64_t)v24, type metadata accessor for Proto_Gnss_Time);
  sub_100015764((uint64_t)v20, &qword_100363118);
  if ((v38 & 1) == 0) {
    goto LABEL_23;
  }
LABEL_8:
  uint64_t v39 = v33 + OBJC_IVAR____TtCV10ALProtobuf14Proto_Gnss_FixP33_CE77F83568258924918786B79242136A13_StorageClass__position;
  swift_beginAccess( v33 + OBJC_IVAR____TtCV10ALProtobuf14Proto_Gnss_FixP33_CE77F83568258924918786B79242136A13_StorageClass__position,  v91,  0LL,  0LL);
  uint64_t v40 = v80;
  sub_10000E6C0(v39, v80, &qword_100363120);
  uint64_t v41 = v29 + OBJC_IVAR____TtCV10ALProtobuf14Proto_Gnss_FixP33_CE77F83568258924918786B79242136A13_StorageClass__position;
  swift_beginAccess( v29 + OBJC_IVAR____TtCV10ALProtobuf14Proto_Gnss_FixP33_CE77F83568258924918786B79242136A13_StorageClass__position,  v90,  0LL,  0LL);
  uint64_t v42 = v82;
  uint64_t v43 = v82 + *(int *)(v78 + 48);
  sub_10000E6C0(v40, v82, &qword_100363120);
  sub_10000E6C0(v41, v43, &qword_100363120);
  uint64_t v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48);
  uint64_t v45 = v81;
  if (v44(v42, 1LL, v81) == 1)
  {
    sub_100015764(v40, &qword_100363120);
    if (v44(v43, 1LL, v45) == 1)
    {
      sub_100015764(v42, &qword_100363120);
      goto LABEL_15;
    }

    sub_100015764((uint64_t)v9, &qword_100363EB8);
    goto LABEL_26;
  }

  uint64_t v20 = v45;
  sub_10000E6C0((uint64_t)v9, v45, &qword_100363130);
  if (v18(v17, 1LL, v4) == 1)
  {
    swift_retain(a1);
    uint64_t v19 = a2;
    swift_retain(a2);
    sub_100015764((uint64_t)v14, &qword_100363130);
    sub_100004090(v20, type metadata accessor for Proto_Gnss_TimeTransferData);
    goto LABEL_6;
  }

  uint64_t v21 = v44;
  sub_100003E68(v17, v44, type metadata accessor for Proto_Gnss_TimeTransferData);
  swift_retain(a1);
  uint64_t v19 = a2;
  swift_retain(a2);
  uint64_t v22 = sub_10021BB40(v20, v21);
  sub_100004090(v21, type metadata accessor for Proto_Gnss_TimeTransferData);
  sub_100015764((uint64_t)v14, &qword_100363130);
  sub_100004090(v20, type metadata accessor for Proto_Gnss_TimeTransferData);
  sub_100015764((uint64_t)v9, &qword_100363130);
  if ((v22 & 1) == 0) {
    goto LABEL_26;
  }
LABEL_8:
  uint64_t v23 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf33Proto_Gnss_TimeTransferDataExtendP33_CE77F83568258924918786B79242136A13_StorageClass__timeMarkBeforeMachAbsTick);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf33Proto_Gnss_TimeTransferDataExtendP33_CE77F83568258924918786B79242136A13_StorageClass__timeMarkBeforeMachAbsTick,  v53,  0LL,  0LL);
  uint64_t v24 = *v23;
  uint64_t v25 = *((_BYTE *)v23 + 8);
  uint64_t v26 = v19
      + OBJC_IVAR____TtCV10ALProtobuf33Proto_Gnss_TimeTransferDataExtendP33_CE77F83568258924918786B79242136A13_StorageClass__timeMarkBeforeMachAbsTick;
  swift_beginAccess( v19 + OBJC_IVAR____TtCV10ALProtobuf33Proto_Gnss_TimeTransferDataExtendP33_CE77F83568258924918786B79242136A13_StorageClass__timeMarkBeforeMachAbsTick,  v52,  0LL,  0LL);
  if ((v25 & 1) != 0)
  {
    if ((*(_BYTE *)(v26 + 8) & 1) == 0) {
      goto LABEL_26;
    }
  }

  else if ((*(_BYTE *)(v26 + 8) & 1) != 0 || v24 != *(void *)v26)
  {
    goto LABEL_26;
  }

  uint64_t v27 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf33Proto_Gnss_TimeTransferDataExtendP33_CE77F83568258924918786B79242136A13_StorageClass__timeMarkAfterMachAbsTick);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf33Proto_Gnss_TimeTransferDataExtendP33_CE77F83568258924918786B79242136A13_StorageClass__timeMarkAfterMachAbsTick,  v51,  0LL,  0LL);
  uint64_t v28 = *v27;
  uint64_t v29 = *((_BYTE *)v27 + 8);
  uint64_t v30 = v19
      + OBJC_IVAR____TtCV10ALProtobuf33Proto_Gnss_TimeTransferDataExtendP33_CE77F83568258924918786B79242136A13_StorageClass__timeMarkAfterMachAbsTick;
  swift_beginAccess( v19 + OBJC_IVAR____TtCV10ALProtobuf33Proto_Gnss_TimeTransferDataExtendP33_CE77F83568258924918786B79242136A13_StorageClass__timeMarkAfterMachAbsTick,  v50,  0LL,  0LL);
  if ((v29 & 1) != 0)
  {
    if ((*(_BYTE *)(v30 + 8) & 1) == 0) {
      goto LABEL_26;
    }
  }

  else if ((*(_BYTE *)(v30 + 8) & 1) != 0 || v28 != *(void *)v30)
  {
    goto LABEL_26;
  }

  uint64_t v31 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf33Proto_Gnss_TimeTransferDataExtendP33_CE77F83568258924918786B79242136A13_StorageClass__currentMachContMinusMachAbsNs);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf33Proto_Gnss_TimeTransferDataExtendP33_CE77F83568258924918786B79242136A13_StorageClass__currentMachContMinusMachAbsNs,  v49,  0LL,  0LL);
  uint64_t v32 = *v31;
  uint64_t v33 = *((_BYTE *)v31 + 8);
  uint64_t v34 = v19
      + OBJC_IVAR____TtCV10ALProtobuf33Proto_Gnss_TimeTransferDataExtendP33_CE77F83568258924918786B79242136A13_StorageClass__currentMachContMinusMachAbsNs;
  swift_beginAccess( v19 + OBJC_IVAR____TtCV10ALProtobuf33Proto_Gnss_TimeTransferDataExtendP33_CE77F83568258924918786B79242136A13_StorageClass__currentMachContMinusMachAbsNs,  v48,  0LL,  0LL);
  if ((v33 & 1) != 0)
  {
    if ((*(_BYTE *)(v34 + 8) & 1) != 0) {
      goto LABEL_23;
    }
LABEL_26:
    swift_release(a1);
    swift_release(v19);
    return 0LL;
  }

  if ((*(_BYTE *)(v34 + 8) & 1) != 0 || v32 != *(void *)v34) {
    goto LABEL_26;
  }
LABEL_23:
  uint64_t v35 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf33Proto_Gnss_TimeTransferDataExtendP33_CE77F83568258924918786B79242136A13_StorageClass__timeMarkCenterMachAbsTimeNs[0]);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf33Proto_Gnss_TimeTransferDataExtendP33_CE77F83568258924918786B79242136A13_StorageClass__timeMarkCenterMachAbsTimeNs[0],  v47,  0LL,  0LL);
  uint64_t v36 = *v35;
  uint64_t v37 = *((_BYTE *)v35 + 8);
  swift_release(a1);
  uint64_t v38 = (uint64_t *)(v19
                  + OBJC_IVAR____TtCV10ALProtobuf33Proto_Gnss_TimeTransferDataExtendP33_CE77F83568258924918786B79242136A13_StorageClass__timeMarkCenterMachAbsTimeNs[0]);
  swift_beginAccess( v19 + OBJC_IVAR____TtCV10ALProtobuf33Proto_Gnss_TimeTransferDataExtendP33_CE77F83568258924918786B79242136A13_StorageClass__timeMarkCenterMachAbsTimeNs[0],  v46,  0LL,  0LL);
  uint64_t v39 = *v38;
  uint64_t v40 = *((unsigned __int8 *)v38 + 8);
  swift_release(v19);
  if ((v37 & 1) != 0)
  {
    if (!v40) {
      return 0LL;
    }
  }

  else
  {
    if (v36 == v39) {
      uint64_t v42 = v40;
    }
    else {
      uint64_t v42 = 1;
    }
    if ((v42 & 1) != 0) {
      return 0LL;
    }
  }

  return 1LL;
}

    sub_100015764((uint64_t)v14, &qword_10035C418);
    goto LABEL_25;
  }

  uint64_t v30 = v61;
  sub_10000E6C0((uint64_t)v14, v61, &qword_100355538);
  if (v29(v28, 1LL, v8) == 1)
  {
    sub_100015764((uint64_t)v20, &qword_100355538);
    sub_100015764((uint64_t)v22, &qword_100355538);
    sub_100004090(v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  sub_100003E68(v28, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v31 = sub_10000FD98( &qword_1003562D8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF8D8);
  uint64_t v32 = dispatch thunk of static Equatable.== infix(_:_:)(v30, v11, v8, v31);
  sub_100004090((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v20, &qword_100355538);
  sub_100015764((uint64_t)v22, &qword_100355538);
  sub_100004090(v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v14, &qword_100355538);
  if ((v32 & 1) == 0) {
    goto LABEL_25;
  }
LABEL_8:
  uint64_t v33 = v59;
  uint64_t v34 = v60;
  if ((sub_100229988(*v59, *v60) & 1) == 0) {
    goto LABEL_25;
  }
  uint64_t v35 = v26[7];
  uint64_t v36 = *((unsigned __int8 *)v33 + v35);
  uint64_t v37 = *((unsigned __int8 *)v34 + v35);
  if (v36 == 2)
  {
    if (v37 != 2) {
      goto LABEL_25;
    }
  }

  else if (v37 == 2 || ((((v37 & 1) == 0) ^ v36) & 1) == 0)
  {
    goto LABEL_25;
  }

  uint64_t v38 = v26[8];
  uint64_t v39 = *((unsigned __int8 *)v33 + v38);
  uint64_t v40 = *((unsigned __int8 *)v34 + v38);
  if (v39 == 2)
  {
    if (v40 != 2) {
      goto LABEL_25;
    }
  }

  else if (v40 == 2 || ((((v40 & 1) == 0) ^ v39) & 1) == 0)
  {
    goto LABEL_25;
  }

  uint64_t v41 = v26[9];
  uint64_t v42 = *((unsigned __int8 *)v33 + v41);
  uint64_t v43 = *((unsigned __int8 *)v34 + v41);
  if (v42 != 2)
  {
    if (v43 != 2 && ((((v43 & 1) == 0) ^ v42) & 1) != 0) {
      goto LABEL_24;
    }
LABEL_25:
    char v51 = 0;
    return v51 & 1;
  }

  if (v43 != 2) {
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v44 = (char *)v33 + v26[5];
  uint64_t v46 = v57;
  uint64_t v45 = v58;
  uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
  char v48 = v55;
  v47(v55, v44, v58);
  uint64_t v49 = v56;
  v47(v56, (char *)v34 + v26[5], v45);
  int v50 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v51 = dispatch thunk of static Equatable.== infix(_:_:)(v48, v49, v45, v50);
  char v52 = *(void (**)(char *, uint64_t))(v46 + 8);
  v52(v49, v45);
  v52(v48, v45);
  return v51 & 1;
}

  uint64_t v17 = 0;
  return v17 & 1;
}

  if ((a3 & 0xC) == v13)
  {
    uint64_t result = sub_10028C0FC(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000LL) == 0) {
      goto LABEL_8;
    }
  }

  else if ((a5 & 0x1000000000000000LL) == 0)
  {
LABEL_8:
    uint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }

  uint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000LL) == 0) {
    uint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_92;
  }
  if (v17 < a3 >> 16)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }

  uint64_t result = String.UTF8View._foreignDistance(from:to:)(v10, a3, a4, a5);
LABEL_21:
  uint64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_91;
  }

  if (v18 < v15)
  {
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }

  uint64_t v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    uint64_t v19 = 0LL;
  }
  uint64_t v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        uint64_t v33 = a6 + 48;
        uint64_t v34 = a6 + 55;
        uint64_t v35 = a6 + 87;
        if (a6 > 10)
        {
          uint64_t v33 = 58;
        }

        else
        {
          uint64_t v35 = 97;
          uint64_t v34 = 65;
        }

        if (v19)
        {
          uint64_t v24 = 0LL;
          uint64_t v36 = v19 + 1;
          uint64_t v37 = result - 1;
          do
          {
            uint64_t v38 = *v36;
            if (v38 < 0x30 || v38 >= v33)
            {
              if (v38 < 0x41 || v38 >= v34)
              {
                uint64_t v29 = 0LL;
                if (v38 < 0x61 || v38 >= v35) {
                  return v29;
                }
                uint64_t v39 = -87;
              }

              else
              {
                uint64_t v39 = -55;
              }
            }

            else
            {
              uint64_t v39 = -48;
            }

            if (!is_mul_ok(v24, a6)) {
              return 0LL;
            }
            uint64_t v40 = v24 * a6;
            uint64_t v41 = v38 + v39;
            uint64_t v32 = __CFADD__(v40, v41);
            uint64_t v24 = v40 + v41;
            if (v32) {
              return 0LL;
            }
            ++v36;
            --v37;
          }

          while (v37);
          return v24;
        }

        return 0LL;
      }

      return 0LL;
    }

    goto LABEL_95;
  }

  if (v20 != 45)
  {
    if (v18 != v15)
    {
      uint64_t v42 = a6 + 48;
      uint64_t v43 = a6 + 55;
      uint64_t v44 = a6 + 87;
      if (a6 > 10)
      {
        uint64_t v42 = 58;
      }

      else
      {
        uint64_t v44 = 97;
        uint64_t v43 = 65;
      }

      if (v19)
      {
        uint64_t v24 = 0LL;
        while (1)
        {
          uint64_t v45 = *v19;
          if (v45 < 0x30 || v45 >= v42)
          {
            if (v45 < 0x41 || v45 >= v43)
            {
              uint64_t v29 = 0LL;
              if (v45 < 0x61 || v45 >= v44) {
                return v29;
              }
              uint64_t v46 = -87;
            }

            else
            {
              uint64_t v46 = -55;
            }
          }

          else
          {
            uint64_t v46 = -48;
          }

          if (!is_mul_ok(v24, a6)) {
            return 0LL;
          }
          uint64_t v47 = v24 * a6;
          char v48 = v45 + v46;
          uint64_t v32 = __CFADD__(v47, v48);
          uint64_t v24 = v47 + v48;
          if (v32) {
            return 0LL;
          }
          ++v19;
          if (!--result) {
            return v24;
          }
        }
      }

      return 0LL;
    }

    return 0LL;
  }

  if (result >= 1)
  {
    if (result != 1)
    {
      uint64_t v21 = a6 + 48;
      uint64_t v22 = a6 + 55;
      uint64_t v23 = a6 + 87;
      if (a6 > 10)
      {
        uint64_t v21 = 58;
      }

      else
      {
        uint64_t v23 = 97;
        uint64_t v22 = 65;
      }

      if (v19)
      {
        uint64_t v24 = 0LL;
        uint64_t v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          uint64_t v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              uint64_t v29 = 0LL;
              if (v27 < 0x61 || v27 >= v23) {
                return v29;
              }
              uint64_t v28 = -87;
            }

            else
            {
              uint64_t v28 = -55;
            }
          }

          else
          {
            uint64_t v28 = -48;
          }

          if (!is_mul_ok(v24, a6)) {
            return 0LL;
          }
          uint64_t v30 = v24 * a6;
          uint64_t v31 = v27 + v28;
          uint64_t v32 = v30 >= v31;
          uint64_t v24 = v30 - v31;
          if (!v32) {
            return 0LL;
          }
          ++v25;
          if (!--v26) {
            return v24;
          }
        }
      }

      return 0LL;
    }

    return 0LL;
  }

  if ((a3 & 0xC) == v13)
  {
    uint64_t result = sub_10028C0FC(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000LL) == 0) {
      goto LABEL_8;
    }
  }

  else if ((a5 & 0x1000000000000000LL) == 0)
  {
LABEL_8:
    uint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }

  uint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000LL) == 0) {
    uint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_100;
  }
  if (v17 < a3 >> 16)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }

  uint64_t result = String.UTF8View._foreignDistance(from:to:)(v10, a3, a4, a5);
LABEL_21:
  uint64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_99;
  }

  if (v18 < v15)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }

  uint64_t v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    uint64_t v19 = 0LL;
  }
  uint64_t v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        uint64_t v33 = a6 + 87;
        if (a6 > 10)
        {
          uint64_t v34 = a6 + 55;
        }

        else
        {
          uint64_t v33 = 97;
          uint64_t v34 = 65;
        }

        if (a6 <= 10) {
          uint64_t v35 = a6 + 48;
        }
        else {
          uint64_t v35 = 58;
        }
        if (v19)
        {
          uint64_t v24 = 0;
          uint64_t v36 = v19 + 1;
          uint64_t v37 = result - 1;
          do
          {
            uint64_t v38 = *v36;
            if (v38 < 0x30 || v38 >= v35)
            {
              if (v38 < 0x41 || v38 >= v34)
              {
                uint64_t v29 = 0;
                uint64_t v30 = 1;
                if (v38 < 0x61 || v38 >= v33) {
                  return v29 | ((unint64_t)v30 << 32);
                }
                uint64_t v39 = -87;
              }

              else
              {
                uint64_t v39 = -55;
              }
            }

            else
            {
              uint64_t v39 = -48;
            }

            uint64_t v40 = (int)v24 * (uint64_t)(int)a6;
            uint64_t v41 = v38 + v39;
            uint64_t v24 = v40 + v41;
            if (__OFADD__((_DWORD)v40, v41)) {
              goto LABEL_96;
            }
            ++v36;
            --v37;
          }

          while (v37);
LABEL_94:
          uint64_t v30 = 0;
          uint64_t v29 = v24;
          return v29 | ((unint64_t)v30 << 32);
        }

        goto LABEL_95;
      }

      goto LABEL_96;
    }

    goto LABEL_103;
  }

  if (v20 != 45)
  {
    if (v18 != v15)
    {
      uint64_t v42 = a6 + 87;
      if (a6 > 10)
      {
        uint64_t v43 = a6 + 55;
      }

      else
      {
        uint64_t v42 = 97;
        uint64_t v43 = 65;
      }

      if (a6 <= 10) {
        uint64_t v44 = a6 + 48;
      }
      else {
        uint64_t v44 = 58;
      }
      if (v19)
      {
        uint64_t v24 = 0;
        while (1)
        {
          uint64_t v45 = *v19;
          if (v45 < 0x30 || v45 >= v44)
          {
            if (v45 < 0x41 || v45 >= v43)
            {
              uint64_t v29 = 0;
              uint64_t v30 = 1;
              if (v45 < 0x61 || v45 >= v42) {
                return v29 | ((unint64_t)v30 << 32);
              }
              uint64_t v46 = -87;
            }

            else
            {
              uint64_t v46 = -55;
            }
          }

          else
          {
            uint64_t v46 = -48;
          }

          uint64_t v47 = (int)v24 * (uint64_t)(int)a6;
          char v48 = v45 + v46;
          uint64_t v24 = v47 + v48;
          if (__OFADD__((_DWORD)v47, v48)) {
            goto LABEL_96;
          }
          ++v19;
          if (!--result) {
            goto LABEL_94;
          }
        }
      }

      goto LABEL_95;
    }

  if ((a3 & 0xC) == v13)
  {
    uint64_t result = sub_10028C0FC(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000LL) == 0) {
      goto LABEL_8;
    }
  }

  else if ((a5 & 0x1000000000000000LL) == 0)
  {
LABEL_8:
    uint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }

  uint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000LL) == 0) {
    uint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_100;
  }
  if (v17 < a3 >> 16)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }

  uint64_t result = String.UTF8View._foreignDistance(from:to:)(v10, a3, a4, a5);
LABEL_21:
  uint64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_99;
  }

  if (v18 < v15)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }

  uint64_t v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    uint64_t v19 = 0LL;
  }
  uint64_t v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        uint64_t v33 = a6 + 87;
        if (a6 > 10)
        {
          uint64_t v34 = a6 + 55;
        }

        else
        {
          uint64_t v33 = 97;
          uint64_t v34 = 65;
        }

        if (a6 <= 10) {
          uint64_t v35 = a6 + 48;
        }
        else {
          uint64_t v35 = 58;
        }
        if (v19)
        {
          uint64_t v24 = 0;
          uint64_t v36 = v19 + 1;
          uint64_t v37 = result - 1;
          do
          {
            uint64_t v38 = *v36;
            if (v38 < 0x30 || v38 >= v35)
            {
              if (v38 < 0x41 || v38 >= v34)
              {
                uint64_t v29 = 0;
                uint64_t v30 = 1;
                if (v38 < 0x61 || v38 >= v33) {
                  return v29 | ((unint64_t)v30 << 32);
                }
                uint64_t v39 = -87;
              }

              else
              {
                uint64_t v39 = -55;
              }
            }

            else
            {
              uint64_t v39 = -48;
            }

            uint64_t v40 = v24 * (unint64_t)a6;
            if ((v40 & 0xFFFFFFFF00000000LL) != 0) {
              goto LABEL_96;
            }
            uint64_t v41 = v38 + v39;
            uint64_t v24 = v40 + v41;
            if (__CFADD__((_DWORD)v40, v41)) {
              goto LABEL_96;
            }
            ++v36;
            --v37;
          }

          while (v37);
LABEL_94:
          uint64_t v30 = 0;
          uint64_t v29 = v24;
          return v29 | ((unint64_t)v30 << 32);
        }

        goto LABEL_95;
      }

      goto LABEL_96;
    }

    goto LABEL_103;
  }

  if (v20 != 45)
  {
    if (v18 != v15)
    {
      uint64_t v42 = a6 + 87;
      if (a6 > 10)
      {
        uint64_t v43 = a6 + 55;
      }

      else
      {
        uint64_t v42 = 97;
        uint64_t v43 = 65;
      }

      if (a6 <= 10) {
        uint64_t v44 = a6 + 48;
      }
      else {
        uint64_t v44 = 58;
      }
      if (v19)
      {
        uint64_t v24 = 0;
        while (1)
        {
          uint64_t v45 = *v19;
          if (v45 < 0x30 || v45 >= v44)
          {
            if (v45 < 0x41 || v45 >= v43)
            {
              uint64_t v29 = 0;
              uint64_t v30 = 1;
              if (v45 < 0x61 || v45 >= v42) {
                return v29 | ((unint64_t)v30 << 32);
              }
              uint64_t v46 = -87;
            }

            else
            {
              uint64_t v46 = -55;
            }
          }

          else
          {
            uint64_t v46 = -48;
          }

          uint64_t v47 = v24 * (unint64_t)a6;
          if ((v47 & 0xFFFFFFFF00000000LL) != 0) {
            goto LABEL_96;
          }
          char v48 = v45 + v46;
          uint64_t v24 = v47 + v48;
          if (__CFADD__((_DWORD)v47, v48)) {
            goto LABEL_96;
          }
          ++v19;
          if (!--result) {
            goto LABEL_94;
          }
        }
      }

      goto LABEL_95;
    }

uint64_t sub_10000DC18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_10000DC84(v3, a1, a2, a3);
  if (!v4)
  {
    sub_10000DDF8(v3, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_10000DC84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100350F50);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 20), (uint64_t)v8, &qword_100350F50);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_Request);
  uint64_t v15 = sub_10000FD98( (unint64_t *)&qword_100351010,  type metadata accessor for CLP_LogEntry_AONLoc_Request,  (uint64_t)&unk_1002B361C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_Request);
}

uint64_t sub_10000DDF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100350F58);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_100350F58);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  uint64_t v15 = sub_10000FD98( &qword_100351088,  type metadata accessor for CLP_LogEntry_AONLoc_Indication,  (uint64_t)&unk_1002B3D4C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
}

Swift::Int sub_10000DF70()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_AONLoc_LogEntry,  &qword_100350FB0,  (uint64_t)&unk_1002B3FDC);
}

Swift::Int sub_10000DF8C(uint64_t (*a1)(uint64_t), unint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a1(0LL);
  uint64_t v7 = sub_10000FD98(a2, a1, a3);
  dispatch thunk of Hashable.hash(into:)(v9, v6, v7);
  return Hasher._finalize()();
}

uint64_t sub_10000E008@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = a2 + *(int *)(a1 + 24);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t sub_10000E088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000DAEC(a1, a2, a3);
}

uint64_t sub_10000E09C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000DC18(a1, a2, a3);
}

uint64_t sub_10000E0B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98(&qword_100351698, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, (uint64_t)&unk_1002B3F54);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10000E100@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036BB98, (uint64_t)qword_100369280, (uint64_t)sub_10000D960, a1);
}

uint64_t sub_10000E11C(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98(&qword_1003510A0, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, (uint64_t)&unk_1002B3EDC);
  return Message.debugDescription.getter(a1, v2);
}

Swift::Int sub_10000E15C(uint64_t a1, uint64_t a2)
{
  return Hasher._finalize()();
}

uint64_t sub_10000E1B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98(&qword_1003510A0, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, (uint64_t)&unk_1002B3EDC);
  return Message.hash(into:)(a1, a2, v4);
}

Swift::Int sub_10000E200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Hasher._finalize()();
}

uint64_t sub_10000E250( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v10 = a3(0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v27 - v15;
  uint64_t v17 = *(void *)(a1 + 16);
  if (v17 == *(void *)(a2 + 16))
  {
    if (!v17 || a1 == a2)
    {
      char v23 = 1;
    }

    else
    {
      uint64_t v27 = a1;
      uint64_t v28 = a4;
      uint64_t v18 = a2;
      unint64_t v19 = (*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
      uint64_t v20 = *(void *)(v14 + 72);
      uint64_t v21 = v17 - 1;
      do
      {
        sub_10000404C(v27 + v19, (uint64_t)v16, a3);
        sub_10000404C(v18 + v19, (uint64_t)v13, a3);
        uint64_t v22 = sub_10000FD98(v28, a3, a5);
        char v23 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v13, v10, v22);
        sub_100004090((uint64_t)v13, a3);
        sub_100004090((uint64_t)v16, a3);
        BOOL v25 = v21-- != 0;
        if ((v23 & 1) == 0) {
          break;
        }
        v19 += v20;
      }

      while (v25);
    }
  }

  else
  {
    char v23 = 0;
  }

  return v23 & 1;
}

uint64_t sub_10000E3BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 == *(void *)(a2 + 16))
  {
    if (!v4 || a1 == a2)
    {
      char v12 = 1;
    }

    else
    {
      uint64_t v6 = (char *)(a1 + 32);
      uint64_t v7 = (char *)(a2 + 32);
      uint64_t v8 = a3();
      uint64_t v9 = v4 - 1;
      do
      {
        char v10 = *v6++;
        char v17 = v10;
        char v11 = *v7++;
        char v16 = v11;
        char v12 = dispatch thunk of static Equatable.== infix(_:_:)(&v17, &v16, a4, v8);
        BOOL v14 = v9-- != 0;
      }

      while ((v12 & 1) != 0 && v14);
    }
  }

  else
  {
    char v12 = 0;
  }

  return v12 & 1;
}

BOOL sub_10000E468(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
    return 0LL;
  }
  if (v2 == 1) {
    return 1LL;
  }
  uint64_t v4 = v2 - 2;
  uint64_t v5 = (int *)(a1 + 36);
  uint64_t v6 = (int *)(a2 + 36);
  do
  {
    int v8 = *v5++;
    int v7 = v8;
    int v10 = *v6++;
    int v9 = v10;
    BOOL v12 = v4-- != 0;
    BOOL result = v7 == v9;
  }

  while (v7 == v9 && v12);
  return result;
}

uint64_t sub_10000E4DC(uint64_t a1)
{
  uint64_t result = 0LL;
  switch(a1)
  {
    case 0LL:
      return result;
    case 1LL:
      uint64_t result = 1LL;
      break;
    case 11LL:
      uint64_t result = 2LL;
      break;
    case 21LL:
      uint64_t result = 3LL;
      break;
    case 31LL:
      uint64_t result = 4LL;
      break;
    default:
      uint64_t result = 5LL;
      break;
  }

  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_Response(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_10036D6F0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_AONLoc_Response);
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_10036D700,  (uint64_t)&nominal type descriptor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_10036D710,  (uint64_t)&nominal type descriptor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_Indication(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_10036D720,  (uint64_t)&nominal type descriptor for CLP_LogEntry_AONLoc_Indication);
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_10036D740,  (uint64_t)&nominal type descriptor for CLP_LogEntry_AONLoc_Indication._StorageClass);
}

uint64_t sub_10000E590(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100003A0C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000E5D4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100003A0C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000E618(uint64_t a1)
{
  uint64_t v1 = a1 - 1;
  uint64_t result = 0LL;
  switch(v1)
  {
    case 0LL:
      return result;
    case 10LL:
      uint64_t result = 1LL;
      break;
    case 11LL:
      uint64_t result = 2LL;
      break;
    case 20LL:
      uint64_t result = 3LL;
      break;
    case 21LL:
      uint64_t result = 4LL;
      break;
    case 30LL:
      uint64_t result = 5LL;
      break;
    case 31LL:
      uint64_t result = 6LL;
      break;
    default:
      uint64_t result = 7LL;
      break;
  }

  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_10036D730,  (uint64_t)&nominal type descriptor for CLP_LogEntry_AONLoc_LogEntry);
}

uint64_t sub_10000E68C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t sub_10000E6C0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100003A0C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000E704(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_10000E71C( uint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  char v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v35 - v17;
  uint64_t v19 = a3(0LL);
  uint64_t v20 = v19;
  uint64_t v21 = *(int *)(v19 + 24);
  uint64_t v22 = (uint64_t *)((char *)a1 + v21);
  char v23 = *((_BYTE *)a1 + v21 + 8);
  uint64_t v24 = (uint64_t *)((char *)a2 + v21);
  int v25 = *((unsigned __int8 *)a2 + v21 + 8);
  if ((v23 & 1) != 0)
  {
    if (!v25) {
      goto LABEL_14;
    }
  }

  else
  {
    if (*v22 != *v24) {
      LOBYTE(v25) = 1;
    }
    if ((v25 & 1) != 0) {
      goto LABEL_14;
    }
  }

  uint64_t v26 = *(int *)(v19 + 28);
  int v27 = *((unsigned __int8 *)a1 + v26);
  int v28 = *((unsigned __int8 *)a2 + v26);
  if (v27 == 2)
  {
    if (v28 != 2)
    {
LABEL_14:
      char v32 = 0;
      return v32 & 1;
    }
  }

  else if (v28 == 2 || ((((v28 & 1) == 0) ^ v27) & 1) == 0)
  {
    goto LABEL_14;
  }

  if ((sub_10000E250(*a1, *a2, a4, a5, a6) & 1) == 0) {
    goto LABEL_14;
  }
  uint64_t v29 = (char *)a1 + *(int *)(v20 + 20);
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v30(v18, v29, v12);
  v30(v16, (char *)a2 + *(int *)(v20 + 20), v12);
  uint64_t v31 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v32 = dispatch thunk of static Equatable.== infix(_:_:)(v18, v16, v12, v31);
  uint64_t v33 = *(void (**)(char *, uint64_t))(v13 + 8);
  v33(v16, v12);
  v33(v18, v12);
  return v32 & 1;
}

uint64_t sub_10000E8E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  int v8 = &v29[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v6);
  int v10 = &v29[-v9];
  char v11 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Response(0LL);
  uint64_t v12 = v11[5];
  uint64_t v13 = *(char *)(a1 + v12);
  uint64_t v14 = *(char *)(a2 + v12);
  if (v13 == 5)
  {
    if ((_DWORD)v14 != 5) {
      goto LABEL_18;
    }
  }

  else if ((_DWORD)v14 == 5 || qword_1002B4250[v13] != qword_1002B4250[v14])
  {
    goto LABEL_18;
  }

  uint64_t v15 = v11[6];
  char v16 = (void *)(a1 + v15);
  char v17 = *(_BYTE *)(a1 + v15 + 8);
  uint64_t v18 = (void *)(a2 + v15);
  int v19 = *(unsigned __int8 *)(a2 + v15 + 8);
  if ((v17 & 1) != 0)
  {
    if (!v19) {
      goto LABEL_18;
    }
  }

  else
  {
    if (*v16 != *v18) {
      LOBYTE(v19) = 1;
    }
    if ((v19 & 1) != 0) {
      goto LABEL_18;
    }
  }

  uint64_t v20 = v11[7];
  int v21 = *(unsigned __int8 *)(a1 + v20);
  int v22 = *(unsigned __int8 *)(a2 + v20);
  if (v21 == 10)
  {
    if (v22 == 10) {
      goto LABEL_17;
    }
LABEL_18:
    char v26 = 0;
    return v26 & 1;
  }

  char v31 = v21;
  if (v22 == 10) {
    goto LABEL_18;
  }
  char v30 = v22;
  unint64_t v23 = sub_100015654();
  if ((dispatch thunk of static Equatable.== infix(_:_:)(&v31, &v30, &type metadata for Proto_Gnss_Result, v23) & 1) == 0) {
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v24 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  v24(v10, a1, v4);
  v24(v8, a2, v4);
  uint64_t v25 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v26 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v25);
  int v27 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v27(v8, v4);
  v27(v10, v4);
  return v26 & 1;
}

uint64_t sub_10000EAC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  int v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  int v10 = (char *)&v20 - v9;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL) + 20);
  uint64_t v12 = *(void *)(a1 + v11);
  uint64_t v13 = *(void *)(a2 + v11);
  if (v12 == v13
    || (swift_retain(*(void *)(a1 + v11)),
        swift_retain(v13),
        BOOL v14 = sub_10000C378(v12, v13),
        swift_release(v13),
        swift_release(v12),
        v14))
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1, v4);
    v15(v8, a2, v4);
    uint64_t v16 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v17 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v16);
    uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v10, v4);
  }

  else
  {
    char v17 = 0;
  }

  return v17 & 1;
}

uint64_t sub_10000EC30(uint64_t a1, uint64_t a2)
{
  uint64_t v68 = a1;
  uint64_t v69 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v59 = *(void *)(v2 - 8);
  uint64_t v60 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v58 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v57 = (char *)&v56 - v5;
  uint64_t v66 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL);
  uint64_t v63 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v56 = (uint64_t)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v62 = sub_100003A0C(&qword_1003516E0);
  __chkstk_darwin(v62);
  uint64_t v67 = (uint64_t)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100003A0C(&qword_100350F58);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v61 = (uint64_t)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v64 = (uint64_t)&v56 - v12;
  __chkstk_darwin(v11);
  uint64_t v65 = (uint64_t)&v56 - v13;
  uint64_t v14 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  char v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100003A0C(&qword_1003516E8);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100003A0C(&qword_100350F50);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v56 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v22);
  int v27 = (char *)&v56 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v56 - v28;
  uint64_t v30 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0LL);
  sub_10000E6C0(v68 + *(int *)(v30 + 20), (uint64_t)v29, &qword_100350F50);
  sub_10000E6C0(v69 + *(int *)(v30 + 20), (uint64_t)v27, &qword_100350F50);
  uint64_t v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  sub_10000E6C0((uint64_t)v29, (uint64_t)v20, &qword_100350F50);
  sub_10000E6C0((uint64_t)v27, v31, &qword_100350F50);
  char v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1LL, v14) != 1)
  {
    sub_10000E6C0((uint64_t)v20, (uint64_t)v24, &qword_100350F50);
    if (v32(v31, 1LL, v14) != 1)
    {
      sub_100003E68(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_AONLoc_Request);
      char v35 = sub_10000F588((uint64_t)v24, (uint64_t)v17);
      sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_AONLoc_Request);
      sub_100015764((uint64_t)v27, &qword_100350F50);
      sub_100015764((uint64_t)v29, &qword_100350F50);
      sub_100004090((uint64_t)v24, type metadata accessor for CLP_LogEntry_AONLoc_Request);
      sub_100015764((uint64_t)v20, &qword_100350F50);
      if ((v35 & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_8;
    }

    sub_100015764((uint64_t)v27, &qword_100350F50);
    sub_100015764((uint64_t)v29, &qword_100350F50);
    sub_100004090((uint64_t)v24, type metadata accessor for CLP_LogEntry_AONLoc_Request);
LABEL_6:
    uint64_t v33 = &qword_1003516E8;
    uint64_t v34 = (uint64_t)v20;
LABEL_14:
    sub_100015764(v34, v33);
    goto LABEL_15;
  }

  sub_100015764((uint64_t)v27, &qword_100350F50);
  sub_100015764((uint64_t)v29, &qword_100350F50);
  if (v32(v31, 1LL, v14) != 1) {
    goto LABEL_6;
  }
  sub_100015764((uint64_t)v20, &qword_100350F50);
LABEL_8:
  uint64_t v36 = v68;
  uint64_t v37 = v65;
  sub_10000E6C0(v68 + *(int *)(v30 + 24), v65, &qword_100350F58);
  uint64_t v38 = v69;
  uint64_t v39 = v64;
  sub_10000E6C0(v69 + *(int *)(v30 + 24), v64, &qword_100350F58);
  uint64_t v40 = v67;
  uint64_t v41 = v67 + *(int *)(v62 + 48);
  sub_10000E6C0(v37, v67, &qword_100350F58);
  sub_10000E6C0(v39, v41, &qword_100350F58);
  uint64_t v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48);
  uint64_t v43 = v66;
  if (v42(v40, 1LL, v66) == 1)
  {
    sub_100015764(v39, &qword_100350F58);
    sub_100015764(v37, &qword_100350F58);
    if (v42(v41, 1LL, v43) == 1)
    {
      sub_100015764(v40, &qword_100350F58);
LABEL_18:
      uint64_t v50 = v59;
      uint64_t v49 = v60;
      char v51 = *(void (**)(char *, uint64_t, uint64_t))(v59 + 16);
      char v52 = v57;
      v51(v57, v36, v60);
      uint64_t v53 = v58;
      v51(v58, v38, v49);
      uint64_t v54 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v45 = dispatch thunk of static Equatable.== infix(_:_:)(v52, v53, v49, v54);
      uint64_t v55 = *(void (**)(char *, uint64_t))(v50 + 8);
      v55(v53, v49);
      v55(v52, v49);
      return v45 & 1;
    }

    goto LABEL_13;
  }

  uint64_t v44 = v61;
  sub_10000E6C0(v40, v61, &qword_100350F58);
  if (v42(v41, 1LL, v43) == 1)
  {
    sub_100015764(v39, &qword_100350F58);
    sub_100015764(v37, &qword_100350F58);
    sub_100004090(v44, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
LABEL_13:
    uint64_t v33 = &qword_1003516E0;
    uint64_t v34 = v40;
    goto LABEL_14;
  }

  uint64_t v47 = v56;
  sub_100003E68(v41, v56, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  char v48 = sub_10000EAC8(v44, v47);
  sub_100004090(v47, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  sub_100015764(v39, &qword_100350F58);
  sub_100015764(v37, &qword_100350F58);
  sub_100004090(v44, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  sub_100015764(v40, &qword_100350F58);
  if ((v48 & 1) != 0) {
    goto LABEL_18;
  }
LABEL_15:
  char v45 = 0;
  return v45 & 1;
}

uint64_t sub_10000F2A8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v52 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  uint64_t v12 = v11;
  uint64_t v13 = v11[8];
  int v14 = *((unsigned __int8 *)a1 + v13);
  int v15 = *((unsigned __int8 *)a2 + v13);
  if (v14 == 2)
  {
    if (v15 != 2) {
      goto LABEL_41;
    }
  }

  else if (v15 == 2 || ((((v15 & 1) == 0) ^ v14) & 1) == 0)
  {
    goto LABEL_41;
  }

  uint64_t v16 = v11[9];
  char v17 = (_DWORD *)((char *)a1 + v16);
  char v18 = *((_BYTE *)a1 + v16 + 4);
  uint64_t v19 = (_DWORD *)((char *)a2 + v16);
  int v20 = *((unsigned __int8 *)a2 + v16 + 4);
  if ((v18 & 1) != 0)
  {
    if (!v20) {
      goto LABEL_41;
    }
  }

  else
  {
    if (*v17 != *v19) {
      LOBYTE(v20) = 1;
    }
    if ((v20 & 1) != 0) {
      goto LABEL_41;
    }
  }

  uint64_t v21 = v11[10];
  uint64_t v22 = (float *)((char *)a1 + v21);
  char v23 = *((_BYTE *)a1 + v21 + 4);
  uint64_t v24 = (float *)((char *)a2 + v21);
  int v25 = *((unsigned __int8 *)a2 + v21 + 4);
  if ((v23 & 1) != 0)
  {
    if (!v25) {
      goto LABEL_41;
    }
  }

  else
  {
    if (*v22 != *v24) {
      LOBYTE(v25) = 1;
    }
    if ((v25 & 1) != 0) {
      goto LABEL_41;
    }
  }

  uint64_t v26 = v11[11];
  int v27 = (float *)((char *)a1 + v26);
  char v28 = *((_BYTE *)a1 + v26 + 4);
  uint64_t v29 = (float *)((char *)a2 + v26);
  int v30 = *((unsigned __int8 *)a2 + v26 + 4);
  if ((v28 & 1) != 0)
  {
    if (!v30) {
      goto LABEL_41;
    }
  }

  else
  {
    if (*v27 != *v29) {
      LOBYTE(v30) = 1;
    }
    if ((v30 & 1) != 0) {
      goto LABEL_41;
    }
  }

  uint64_t v31 = v11[12];
  char v32 = (_DWORD *)((char *)a1 + v31);
  char v33 = *((_BYTE *)a1 + v31 + 4);
  uint64_t v34 = (_DWORD *)((char *)a2 + v31);
  int v35 = *((unsigned __int8 *)a2 + v31 + 4);
  if ((v33 & 1) != 0)
  {
    if (!v35) {
      goto LABEL_41;
    }
  }

  else
  {
    if (*v32 != *v34) {
      LOBYTE(v35) = 1;
    }
    if ((v35 & 1) != 0) {
      goto LABEL_41;
    }
  }

  if ((sub_10000E3BC( *a1,  *a2,  (uint64_t (*)(void))sub_100015720,  (uint64_t)&type metadata for CLP_LogEntry_AONLoc_BtAdvertisement.BtType) & 1) == 0 || (sub_10000E3BC( a1[1],  a2[1],  (uint64_t (*)(void))sub_1000156DC,  (uint64_t)&type metadata for CLP_LogEntry_PrivateData_WifiRfBand) & 1) == 0 || !sub_10000E468(a1[2], a2[2]))
  {
    goto LABEL_41;
  }

  uint64_t v36 = v12[13];
  uint64_t v37 = (double *)((char *)a1 + v36);
  char v38 = *((_BYTE *)a1 + v36 + 8);
  uint64_t v39 = (double *)((char *)a2 + v36);
  int v40 = *((unsigned __int8 *)a2 + v36 + 8);
  if ((v38 & 1) != 0)
  {
    if (!v40) {
      goto LABEL_41;
    }
  }

  else
  {
    if (*v37 != *v39) {
      LOBYTE(v40) = 1;
    }
    if ((v40 & 1) != 0) {
      goto LABEL_41;
    }
  }

  uint64_t v41 = v12[14];
  uint64_t v42 = (double *)((char *)a1 + v41);
  char v43 = *((_BYTE *)a1 + v41 + 8);
  uint64_t v44 = (double *)((char *)a2 + v41);
  int v45 = *((unsigned __int8 *)a2 + v41 + 8);
  if ((v43 & 1) == 0)
  {
    if (*v42 != *v44) {
      LOBYTE(v45) = 1;
    }
    if ((v45 & 1) != 0) {
      goto LABEL_41;
    }
LABEL_46:
    char v48 = (char *)a1 + v12[7];
    uint64_t v49 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v49(v10, v48, v4);
    v49(v8, (char *)a2 + v12[7], v4);
    uint64_t v50 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v46 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v50);
    char v51 = *(void (**)(char *, uint64_t))(v5 + 8);
    v51(v8, v4);
    v51(v10, v4);
    return v46 & 1;
  }

  if (v45) {
    goto LABEL_46;
  }
LABEL_41:
  char v46 = 0;
  return v46 & 1;
}

uint64_t sub_10000F588(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v84 = *(void *)(v4 - 8);
  uint64_t v85 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v83 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v82 = (char *)&v79 - v7;
  uint64_t v91 = type metadata accessor for Proto_Gpsd_Request(0LL);
  uint64_t v88 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  uint64_t v81 = (uint64_t)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v87 = sub_100003A0C(&qword_100351780);
  __chkstk_darwin(v87);
  uint64_t v92 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100003A0C(&qword_100350F20);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v86 = (uint64_t)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v89 = (uint64_t)&v79 - v14;
  __chkstk_darwin(v13);
  uint64_t v90 = (uint64_t)&v79 - v15;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (uint64_t *)((char *)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v20 = sub_100003A0C(&qword_100351788);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v79 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = sub_100003A0C(&qword_100350F18);
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v26 = (uint64_t *)((char *)&v79 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (char *)&v79 - v28;
  __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v79 - v30;
  char v32 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  uint64_t v33 = a2;
  uint64_t v34 = v32;
  uint64_t v35 = v32[5];
  uint64_t v36 = (void *)(a1 + v35);
  char v37 = *(_BYTE *)(a1 + v35 + 8);
  char v38 = (void *)(v33 + v35);
  int v39 = *(unsigned __int8 *)(v33 + v35 + 8);
  if ((v37 & 1) != 0)
  {
    if (!v39) {
      goto LABEL_38;
    }
  }

  else
  {
    if (*v36 != *v38) {
      LOBYTE(v39) = 1;
    }
    if ((v39 & 1) != 0) {
      goto LABEL_38;
    }
  }

  uint64_t v40 = v32[6];
  uint64_t v41 = (_DWORD *)(a1 + v40);
  char v42 = *(_BYTE *)(a1 + v40 + 4);
  char v43 = (_DWORD *)(v33 + v40);
  int v44 = *(unsigned __int8 *)(v33 + v40 + 4);
  if ((v42 & 1) != 0)
  {
    if (!v44) {
      goto LABEL_38;
    }
  }

  else
  {
    if (*v41 != *v43) {
      LOBYTE(v44) = 1;
    }
    if ((v44 & 1) != 0) {
      goto LABEL_38;
    }
  }

  uint64_t v45 = v32[7];
  char v46 = (_DWORD *)(a1 + v45);
  char v47 = *(_BYTE *)(a1 + v45 + 4);
  char v48 = (_DWORD *)(v33 + v45);
  int v49 = *(unsigned __int8 *)(v33 + v45 + 4);
  if ((v47 & 1) != 0)
  {
    if (!v49) {
      goto LABEL_38;
    }
  }

  else
  {
    if (*v46 != *v48) {
      LOBYTE(v49) = 1;
    }
    if ((v49 & 1) != 0) {
      goto LABEL_38;
    }
  }

  uint64_t v50 = v32[8];
  uint64_t v51 = *(char *)(a1 + v50);
  uint64_t v52 = *(char *)(v33 + v50);
  if (v51 == 5)
  {
    if ((_DWORD)v52 != 5) {
      goto LABEL_38;
    }
  }

  else if ((_DWORD)v52 == 5 || qword_1002B4250[v51] != qword_1002B4250[v52])
  {
    goto LABEL_38;
  }

  uint64_t v53 = v32[9];
  uint64_t v79 = a1;
  uint64_t v54 = a1 + v53;
  uint64_t v55 = v33;
  sub_10000E6C0(v54, (uint64_t)v31, &qword_100350F18);
  uint64_t v56 = v34[9];
  uint64_t v80 = v55;
  sub_10000E6C0(v55 + v56, (uint64_t)v29, &qword_100350F18);
  uint64_t v57 = (uint64_t)&v22[*(int *)(v20 + 48)];
  sub_10000E6C0((uint64_t)v31, (uint64_t)v22, &qword_100350F18);
  sub_10000E6C0((uint64_t)v29, v57, &qword_100350F18);
  uint64_t v58 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v58((uint64_t)v22, 1LL, v16) != 1)
  {
    sub_10000E6C0((uint64_t)v22, (uint64_t)v26, &qword_100350F18);
    if (v58(v57, 1LL, v16) != 1)
    {
      sub_100003E68(v57, (uint64_t)v19, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
      char v60 = sub_10000F2A8(v26, v19);
      sub_100004090((uint64_t)v19, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
      sub_100015764((uint64_t)v29, &qword_100350F18);
      sub_100015764((uint64_t)v31, &qword_100350F18);
      sub_100004090((uint64_t)v26, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
      sub_100015764((uint64_t)v22, &qword_100350F18);
      if ((v60 & 1) == 0) {
        goto LABEL_38;
      }
      goto LABEL_31;
    }

    sub_100015764((uint64_t)v29, &qword_100350F18);
    sub_100015764((uint64_t)v31, &qword_100350F18);
    sub_100004090((uint64_t)v26, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
LABEL_29:
    uint64_t v59 = &qword_100351788;
LABEL_37:
    sub_100015764((uint64_t)v22, v59);
    goto LABEL_38;
  }

  sub_100015764((uint64_t)v29, &qword_100350F18);
  sub_100015764((uint64_t)v31, &qword_100350F18);
  if (v58(v57, 1LL, v16) != 1) {
    goto LABEL_29;
  }
  sub_100015764((uint64_t)v22, &qword_100350F18);
LABEL_31:
  uint64_t v61 = v90;
  sub_10000E6C0(v79 + v34[10], v90, &qword_100350F20);
  uint64_t v62 = v89;
  sub_10000E6C0(v80 + v34[10], v89, &qword_100350F20);
  uint64_t v22 = v92;
  uint64_t v63 = (uint64_t)&v92[*(int *)(v87 + 48)];
  sub_10000E6C0(v61, (uint64_t)v92, &qword_100350F20);
  sub_10000E6C0(v62, v63, &qword_100350F20);
  uint64_t v64 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48);
  uint64_t v65 = v91;
  if (v64((uint64_t)v22, 1LL, v91) == 1)
  {
    sub_100015764(v62, &qword_100350F20);
    sub_100015764(v61, &qword_100350F20);
    if (v64(v63, 1LL, v65) == 1)
    {
      sub_100015764((uint64_t)v22, &qword_100350F20);
LABEL_41:
      uint64_t v73 = v84;
      uint64_t v72 = v85;
      v74 = *(void (**)(char *, uint64_t, uint64_t))(v84 + 16);
      uint64_t v75 = v82;
      v74(v82, v79, v85);
      int v76 = v83;
      v74(v83, v80, v72);
      uint64_t v77 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v67 = dispatch thunk of static Equatable.== infix(_:_:)(v75, v76, v72, v77);
      uint64_t v78 = *(void (**)(char *, uint64_t))(v73 + 8);
      v78(v76, v72);
      v78(v75, v72);
      return v67 & 1;
    }

    goto LABEL_36;
  }

  uint64_t v66 = v86;
  sub_10000E6C0((uint64_t)v22, v86, &qword_100350F20);
  if (v64(v63, 1LL, v65) == 1)
  {
    sub_100015764(v62, &qword_100350F20);
    sub_100015764(v61, &qword_100350F20);
    sub_100004090(v66, type metadata accessor for Proto_Gpsd_Request);
LABEL_36:
    uint64_t v59 = &qword_100351780;
    goto LABEL_37;
  }

  uint64_t v69 = v81;
  sub_100003E68(v63, v81, type metadata accessor for Proto_Gpsd_Request);
  uint64_t v70 = sub_10000FD98(&qword_100351790, type metadata accessor for Proto_Gpsd_Request, (uint64_t)&unk_1002DAAC0);
  char v71 = dispatch thunk of static Equatable.== infix(_:_:)(v66, v69, v65, v70);
  sub_100004090(v69, type metadata accessor for Proto_Gpsd_Request);
  sub_100015764(v62, &qword_100350F20);
  sub_100015764(v61, &qword_100350F20);
  sub_100004090(v66, type metadata accessor for Proto_Gpsd_Request);
  sub_100015764((uint64_t)v22, &qword_100350F20);
  if ((v71 & 1) != 0) {
    goto LABEL_41;
  }
LABEL_38:
  char v67 = 0;
  return v67 & 1;
}

unint64_t sub_10000FD10()
{
  unint64_t result = qword_100350F68;
  if (!qword_100350F68)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002D9698, &type metadata for CLP_LogEntry_AONLoc_BtAdvertisement.BtType);
    atomic_store(result, (unint64_t *)&qword_100350F68);
  }

  return result;
}

unint64_t sub_10000FD54()
{
  unint64_t result = qword_100350F70;
  if (!qword_100350F70)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BC408, &type metadata for CLP_LogEntry_PrivateData_WifiRfBand);
    atomic_store(result, (unint64_t *)&qword_100350F70);
  }

  return result;
}

uint64_t sub_10000FD98(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_10000FDDC()
{
  unint64_t result = qword_100350FB8;
  if (!qword_100350FB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B33DC, &type metadata for CLP_LogEntry_AONLoc_Request.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_100350FB8);
  }

  return result;
}

unint64_t sub_10000FE24()
{
  unint64_t result = qword_100350FC0;
  if (!qword_100350FC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B3404, &type metadata for CLP_LogEntry_AONLoc_Request.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_100350FC0);
  }

  return result;
}

unint64_t sub_10000FE6C()
{
  unint64_t result = qword_100350FC8;
  if (!qword_100350FC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B348C, &type metadata for CLP_LogEntry_AONLoc_Request.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_100350FC8);
  }

  return result;
}

uint64_t sub_10000FEB0()
{
  return sub_100010014(&qword_100350FD0, &qword_100350FD8);
}

uint64_t sub_10000FED4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

unint64_t sub_10000FF1C()
{
  unint64_t result = qword_100350FE0;
  if (!qword_100350FE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B34FC, &type metadata for CLP_LogEntry_AONLoc_Indication.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_100350FE0);
  }

  return result;
}

unint64_t sub_10000FF64()
{
  unint64_t result = qword_100350FE8;
  if (!qword_100350FE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B3524, &type metadata for CLP_LogEntry_AONLoc_Indication.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_100350FE8);
  }

  return result;
}

unint64_t sub_10000FFAC()
{
  unint64_t result = qword_100350FF0;
  if (!qword_100350FF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B35AC, &type metadata for CLP_LogEntry_AONLoc_Indication.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_100350FF0);
  }

  return result;
}

uint64_t sub_10000FFF0()
{
  return sub_100010014(&qword_100350FF8, &qword_100351000);
}

uint64_t sub_100010014(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_10000FED4(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100010054()
{
  return sub_10000FD98( &qword_100351008,  type metadata accessor for CLP_LogEntry_AONLoc_Request,  (uint64_t)&unk_1002B36F4);
}

uint64_t sub_100010080()
{
  return sub_10000FD98( (unint64_t *)&qword_100351010,  type metadata accessor for CLP_LogEntry_AONLoc_Request,  (uint64_t)&unk_1002B361C);
}

uint64_t sub_1000100AC()
{
  return sub_10000FD98( &qword_100350F60,  type metadata accessor for CLP_LogEntry_AONLoc_Request,  (uint64_t)&unk_1002B371C);
}

uint64_t sub_1000100D8()
{
  return sub_10000FD98( &qword_100351018,  type metadata accessor for CLP_LogEntry_AONLoc_Request,  (uint64_t)&unk_1002B375C);
}

uint64_t sub_100010104()
{
  return sub_10000FD98( &qword_100351020,  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions,  (uint64_t)&unk_1002B3884);
}

uint64_t sub_100010130()
{
  return sub_10000FD98( &qword_100351028,  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions,  (uint64_t)&unk_1002B37AC);
}

uint64_t sub_10001015C()
{
  return sub_10000FD98( &qword_100350F78,  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions,  (uint64_t)&unk_1002B38AC);
}

uint64_t sub_100010188()
{
  return sub_10000FD98( &qword_100351030,  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions,  (uint64_t)&unk_1002B38EC);
}

uint64_t sub_1000101B4()
{
  return sub_10000FD98( &qword_100351038,  type metadata accessor for CLP_LogEntry_AONLoc_Response,  (uint64_t)&unk_1002B39EC);
}

uint64_t sub_1000101E0()
{
  return sub_10000FD98( &qword_100351040,  type metadata accessor for CLP_LogEntry_AONLoc_Response,  (uint64_t)&unk_1002B3914);
}

uint64_t sub_10001020C()
{
  return sub_10000FD98( &qword_100350F80,  type metadata accessor for CLP_LogEntry_AONLoc_Response,  (uint64_t)&unk_1002B3A14);
}

uint64_t sub_100010238()
{
  return sub_10000FD98( &qword_100351048,  type metadata accessor for CLP_LogEntry_AONLoc_Response,  (uint64_t)&unk_1002B3A54);
}

uint64_t sub_100010264()
{
  return sub_10000FD98( &qword_100351050,  type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication,  (uint64_t)&unk_1002B3B54);
}

uint64_t sub_100010290()
{
  return sub_10000FD98( &qword_100351058,  type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication,  (uint64_t)&unk_1002B3A7C);
}

uint64_t sub_1000102BC()
{
  return sub_10000FD98( &qword_100350F90,  type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication,  (uint64_t)&unk_1002B3B7C);
}

uint64_t sub_1000102E8()
{
  return sub_10000FD98( &qword_100351060,  type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication,  (uint64_t)&unk_1002B3BBC);
}

uint64_t sub_100010314()
{
  return sub_10000FD98( &qword_100351068,  type metadata accessor for CLP_LogEntry_AONLoc_BtIndication,  (uint64_t)&unk_1002B3CBC);
}

uint64_t sub_100010340()
{
  return sub_10000FD98( &qword_100351070,  type metadata accessor for CLP_LogEntry_AONLoc_BtIndication,  (uint64_t)&unk_1002B3BE4);
}

uint64_t sub_10001036C()
{
  return sub_10000FD98( &qword_100350FA0,  type metadata accessor for CLP_LogEntry_AONLoc_BtIndication,  (uint64_t)&unk_1002B3CE4);
}

uint64_t sub_100010398()
{
  return sub_10000FD98( &qword_100351078,  type metadata accessor for CLP_LogEntry_AONLoc_BtIndication,  (uint64_t)&unk_1002B3D24);
}

uint64_t sub_1000103C4()
{
  return sub_10000FD98( &qword_100351080,  type metadata accessor for CLP_LogEntry_AONLoc_Indication,  (uint64_t)&unk_1002B3E24);
}

uint64_t sub_1000103F0()
{
  return sub_10000FD98( &qword_100351088,  type metadata accessor for CLP_LogEntry_AONLoc_Indication,  (uint64_t)&unk_1002B3D4C);
}

uint64_t sub_10001041C()
{
  return sub_10000FD98( &qword_100350FA8,  type metadata accessor for CLP_LogEntry_AONLoc_Indication,  (uint64_t)&unk_1002B3E4C);
}

uint64_t sub_100010448()
{
  return sub_10000FD98( &qword_100351090,  type metadata accessor for CLP_LogEntry_AONLoc_Indication,  (uint64_t)&unk_1002B3E8C);
}

uint64_t sub_100010474()
{
  return sub_10000FD98( &qword_100351098,  type metadata accessor for CLP_LogEntry_AONLoc_LogEntry,  (uint64_t)&unk_1002B3FB4);
}

uint64_t sub_1000104A0()
{
  return sub_10000FD98( &qword_1003510A0,  type metadata accessor for CLP_LogEntry_AONLoc_LogEntry,  (uint64_t)&unk_1002B3EDC);
}

uint64_t sub_1000104CC()
{
  return sub_10000FD98( &qword_100350FB0,  type metadata accessor for CLP_LogEntry_AONLoc_LogEntry,  (uint64_t)&unk_1002B3FDC);
}

uint64_t sub_1000104F8()
{
  return sub_10000FD98( &qword_1003510A8,  type metadata accessor for CLP_LogEntry_AONLoc_LogEntry,  (uint64_t)&unk_1002B401C);
}

void *sub_100010524(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *a2;
    *a1 = *a2;
    a1 = (void *)(v26 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v26);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    *(void *)uint64_t v11 = *(void *)v12;
    v11[8] = v12[8];
    uint64_t v13 = (char *)a1 + v10;
    uint64_t v14 = (char *)a2 + v10;
    *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
    v13[4] = v14[4];
    uint64_t v15 = a3[7];
    uint64_t v16 = a3[8];
    uint64_t v17 = (char *)a1 + v15;
    uint64_t v18 = (char *)a2 + v15;
    *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
    char v19 = *((_BYTE *)a2 + v16);
    v17[4] = v18[4];
    *((_BYTE *)a1 + v16) = v19;
    uint64_t v20 = a3[9];
    uint64_t v21 = (void *)((char *)a1 + v20);
    uint64_t v22 = (void *)((char *)a2 + v20);
    uint64_t v23 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
    uint64_t v24 = *((void *)v23 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v24 + 48))(v22, 1LL, v23))
    {
      uint64_t v25 = sub_100003A0C(&qword_100350F18);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64LL));
    }

    else
    {
      uint64_t v27 = *v22;
      uint64_t v28 = v22[1];
      *uint64_t v21 = *v22;
      v21[1] = v28;
      uint64_t v62 = v8;
      uint64_t v29 = v22[2];
      v21[2] = v29;
      uint64_t v30 = v23[7];
      char v60 = (char *)v22 + v30;
      uint64_t v61 = (char *)v21 + v30;
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRetain(v28);
      uint64_t v31 = v29;
      uint64_t v8 = v62;
      swift_bridgeObjectRetain(v31);
      v62(v61, v60, v7);
      *((_BYTE *)v21 + v23[8]) = *((_BYTE *)v22 + v23[8]);
      uint64_t v32 = v23[9];
      uint64_t v33 = (char *)v21 + v32;
      uint64_t v34 = (char *)v22 + v32;
      v33[4] = v34[4];
      *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
      uint64_t v35 = v23[10];
      uint64_t v36 = (char *)v21 + v35;
      char v37 = (char *)v22 + v35;
      v36[4] = v37[4];
      *(_DWORD *)uint64_t v36 = *(_DWORD *)v37;
      uint64_t v38 = v23[11];
      int v39 = (char *)v21 + v38;
      uint64_t v40 = (char *)v22 + v38;
      v39[4] = v40[4];
      *(_DWORD *)int v39 = *(_DWORD *)v40;
      uint64_t v41 = v23[12];
      char v42 = (char *)v21 + v41;
      char v43 = (char *)v22 + v41;
      v42[4] = v43[4];
      *(_DWORD *)char v42 = *(_DWORD *)v43;
      uint64_t v44 = v23[13];
      uint64_t v45 = (char *)v21 + v44;
      char v46 = (char *)v22 + v44;
      v45[8] = v46[8];
      *(void *)uint64_t v45 = *(void *)v46;
      uint64_t v47 = v23[14];
      char v48 = (char *)v21 + v47;
      int v49 = (char *)v22 + v47;
      *(void *)char v48 = *(void *)v49;
      v48[8] = v49[8];
      (*(void (**)(uint64_t *, void, uint64_t, int *))(v24 + 56))(v21, 0LL, 1LL, v23);
    }

    uint64_t v50 = a3[10];
    uint64_t v51 = (char *)a1 + v50;
    uint64_t v52 = (char *)a2 + v50;
    uint64_t v53 = type metadata accessor for Proto_Gpsd_Request(0LL);
    uint64_t v54 = *(void *)(v53 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1LL, v53))
    {
      uint64_t v55 = sub_100003A0C(&qword_100350F20);
      memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64LL));
    }

    else
    {
      v8(v51, v52, v7);
      uint64_t v56 = *(int *)(v53 + 20);
      uint64_t v57 = *(void *)&v52[v56];
      *(void *)&v51[v56] = v57;
      uint64_t v58 = *(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56);
      swift_retain(v57);
      v58(v51, 0LL, 1LL, v53);
    }
  }

  return a1;
}

uint64_t sub_100010818(char *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  int v5 = *(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v5(a1, v4);
  uint64_t v6 = &a1[*(int *)(a2 + 36)];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7))
  {
    swift_bridgeObjectRelease(*(void *)v6);
    swift_bridgeObjectRelease(*((void *)v6 + 1));
    swift_bridgeObjectRelease(*((void *)v6 + 2));
    v5(&v6[*(int *)(v7 + 28)], v4);
  }

  uint64_t v8 = &a1[*(int *)(a2 + 40)];
  uint64_t v9 = type metadata accessor for Proto_Gpsd_Request(0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9);
  if (!(_DWORD)result)
  {
    v5(v8, v4);
    return swift_release(*(void *)&v8[*(int *)(v9 + 20)]);
  }

  return result;
}

uint64_t sub_100010918(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  uint64_t v12 = a1 + v9;
  uint64_t v13 = a2 + v9;
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  char v18 = *(_BYTE *)(a2 + v15);
  *(_BYTE *)(v16 + 4) = *(_BYTE *)(v17 + 4);
  *(_BYTE *)(a1 + v15) = v18;
  uint64_t v19 = a3[9];
  uint64_t v20 = (uint64_t *)(a1 + v19);
  uint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v22 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  uint64_t v23 = *((void *)v22 - 1);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v23 + 48))(v21, 1LL, v22))
  {
    uint64_t v24 = sub_100003A0C(&qword_100350F18);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
  }

  else
  {
    uint64_t v25 = *v21;
    uint64_t v26 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v26;
    char v60 = v7;
    uint64_t v27 = v21[2];
    v20[2] = v27;
    uint64_t v28 = v22[7];
    uint64_t v58 = (char *)v21 + v28;
    uint64_t v59 = (char *)v20 + v28;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
    uint64_t v29 = v27;
    uint64_t v7 = v60;
    swift_bridgeObjectRetain(v29);
    v60((uint64_t)v59, (uint64_t)v58, v6);
    *((_BYTE *)v20 + v22[8]) = *((_BYTE *)v21 + v22[8]);
    uint64_t v30 = v22[9];
    uint64_t v31 = (char *)v20 + v30;
    uint64_t v32 = (char *)v21 + v30;
    v31[4] = v32[4];
    *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
    uint64_t v33 = v22[10];
    uint64_t v34 = (char *)v20 + v33;
    uint64_t v35 = (char *)v21 + v33;
    v34[4] = v35[4];
    *(_DWORD *)uint64_t v34 = *(_DWORD *)v35;
    uint64_t v36 = v22[11];
    char v37 = (char *)v20 + v36;
    uint64_t v38 = (char *)v21 + v36;
    v37[4] = v38[4];
    *(_DWORD *)char v37 = *(_DWORD *)v38;
    uint64_t v39 = v22[12];
    uint64_t v40 = (char *)v20 + v39;
    uint64_t v41 = (char *)v21 + v39;
    v40[4] = v41[4];
    *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
    uint64_t v42 = v22[13];
    char v43 = (char *)v20 + v42;
    uint64_t v44 = (char *)v21 + v42;
    v43[8] = v44[8];
    *(void *)char v43 = *(void *)v44;
    uint64_t v45 = v22[14];
    char v46 = (char *)v20 + v45;
    uint64_t v47 = (char *)v21 + v45;
    *(void *)char v46 = *(void *)v47;
    v46[8] = v47[8];
    (*(void (**)(uint64_t *, void, uint64_t, int *))(v23 + 56))(v20, 0LL, 1LL, v22);
  }

  uint64_t v48 = a3[10];
  int v49 = (char *)(a1 + v48);
  uint64_t v50 = (char *)(a2 + v48);
  uint64_t v51 = type metadata accessor for Proto_Gpsd_Request(0LL);
  uint64_t v52 = *(void *)(v51 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1LL, v51))
  {
    uint64_t v53 = sub_100003A0C(&qword_100350F20);
    memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v49, (uint64_t)v50, v6);
    uint64_t v54 = *(int *)(v51 + 20);
    uint64_t v55 = *(void *)&v50[v54];
    *(void *)&v49[v54] = v55;
    uint64_t v56 = *(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56);
    swift_retain(v55);
    v56(v49, 0LL, 1LL, v51);
  }

  return a1;
}

uint64_t sub_100010BE0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v106 = *(void *)(v6 - 8);
  uint64_t v105 = *(void (**)(uint64_t, uint64_t, uint64_t))(v106 + 24);
  v105(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
  *(void *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v10;
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  LOBYTE(v10) = *(_BYTE *)(v16 + 4);
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = v10;
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  uint64_t v17 = a3[9];
  char v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  uint64_t v20 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  uint64_t v21 = *((void *)v20 - 1);
  uint64_t v22 = *(uint64_t (**)(void *, uint64_t, int *))(v21 + 48);
  int v23 = v22(v18, 1LL, v20);
  int v24 = v22(v19, 1LL, v20);
  if (v23)
  {
    if (!v24)
    {
      uint64_t v25 = *v19;
      *char v18 = *v19;
      uint64_t v26 = v19[1];
      v18[1] = v26;
      uint64_t v27 = v19[2];
      v18[2] = v27;
      uint64_t v28 = v20[7];
      uint64_t v104 = v6;
      uint64_t v29 = (char *)v18 + v28;
      uint64_t v102 = (char *)v19 + v28;
      uint64_t v103 = *(void (**)(char *, char *, uint64_t))(v106 + 16);
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRetain(v27);
      uint64_t v30 = v29;
      uint64_t v6 = v104;
      v103(v30, v102, v104);
      *((_BYTE *)v18 + v20[8]) = *((_BYTE *)v19 + v20[8]);
      uint64_t v31 = v20[9];
      uint64_t v32 = (char *)v18 + v31;
      uint64_t v33 = (char *)v19 + v31;
      char v34 = v33[4];
      *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
      v32[4] = v34;
      uint64_t v35 = v20[10];
      uint64_t v36 = (char *)v18 + v35;
      char v37 = (char *)v19 + v35;
      char v38 = v37[4];
      *(_DWORD *)uint64_t v36 = *(_DWORD *)v37;
      v36[4] = v38;
      uint64_t v39 = v20[11];
      uint64_t v40 = (char *)v18 + v39;
      uint64_t v41 = (char *)v19 + v39;
      char v42 = v41[4];
      *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
      v40[4] = v42;
      uint64_t v43 = v20[12];
      uint64_t v44 = (char *)v18 + v43;
      uint64_t v45 = (char *)v19 + v43;
      char v46 = v45[4];
      *(_DWORD *)uint64_t v44 = *(_DWORD *)v45;
      v44[4] = v46;
      uint64_t v47 = v20[13];
      uint64_t v48 = (char *)v18 + v47;
      int v49 = (char *)v19 + v47;
      char v50 = v49[8];
      *(void *)uint64_t v48 = *(void *)v49;
      v48[8] = v50;
      uint64_t v51 = v20[14];
      uint64_t v52 = (char *)v18 + v51;
      uint64_t v53 = (char *)v19 + v51;
      uint64_t v54 = *(void *)v53;
      v52[8] = v53[8];
      *(void *)uint64_t v52 = v54;
      (*(void (**)(void *, void, uint64_t, int *))(v21 + 56))(v18, 0LL, 1LL, v20);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v24)
  {
    sub_100004090((uint64_t)v18, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
LABEL_6:
    uint64_t v55 = sub_100003A0C(&qword_100350F18);
    memcpy(v18, v19, *(void *)(*(void *)(v55 - 8) + 64LL));
    goto LABEL_7;
  }

  uint64_t v69 = *v19;
  uint64_t v70 = *v18;
  *char v18 = *v19;
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRelease(v70);
  uint64_t v71 = v19[1];
  uint64_t v72 = v18[1];
  v18[1] = v71;
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRelease(v72);
  uint64_t v73 = v19[2];
  uint64_t v74 = v18[2];
  v18[2] = v73;
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRelease(v74);
  v105((uint64_t)v18 + v20[7], (uint64_t)v19 + v20[7], v6);
  *((_BYTE *)v18 + v20[8]) = *((_BYTE *)v19 + v20[8]);
  uint64_t v75 = v20[9];
  int v76 = (char *)v18 + v75;
  uint64_t v77 = (char *)v19 + v75;
  char v78 = v77[4];
  *(_DWORD *)int v76 = *(_DWORD *)v77;
  v76[4] = v78;
  uint64_t v79 = v20[10];
  uint64_t v80 = (char *)v18 + v79;
  uint64_t v81 = (char *)v19 + v79;
  char v82 = v81[4];
  *(_DWORD *)uint64_t v80 = *(_DWORD *)v81;
  v80[4] = v82;
  uint64_t v83 = v20[11];
  uint64_t v84 = (char *)v18 + v83;
  uint64_t v85 = (char *)v19 + v83;
  char v86 = v85[4];
  *(_DWORD *)uint64_t v84 = *(_DWORD *)v85;
  v84[4] = v86;
  uint64_t v87 = v20[12];
  uint64_t v88 = (char *)v18 + v87;
  uint64_t v89 = (char *)v19 + v87;
  char v90 = v89[4];
  *(_DWORD *)uint64_t v88 = *(_DWORD *)v89;
  v88[4] = v90;
  uint64_t v91 = v20[13];
  uint64_t v92 = (char *)v18 + v91;
  v93 = (char *)v19 + v91;
  char v94 = v93[8];
  *(void *)uint64_t v92 = *(void *)v93;
  v92[8] = v94;
  uint64_t v95 = v20[14];
  v96 = (char *)v18 + v95;
  uint64_t v97 = (char *)v19 + v95;
  uint64_t v98 = *(void *)v97;
  v96[8] = v97[8];
  *(void *)v96 = v98;
LABEL_7:
  uint64_t v56 = a3[10];
  uint64_t v57 = (char *)(a1 + v56);
  uint64_t v58 = (char *)(a2 + v56);
  uint64_t v59 = type metadata accessor for Proto_Gpsd_Request(0LL);
  uint64_t v60 = *(void *)(v59 - 8);
  uint64_t v61 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v60 + 48);
  int v62 = v61(v57, 1LL, v59);
  int v63 = v61(v58, 1LL, v59);
  if (!v62)
  {
    if (!v63)
    {
      v105((uint64_t)v57, (uint64_t)v58, v6);
      uint64_t v99 = *(int *)(v59 + 20);
      uint64_t v100 = *(void *)&v58[v99];
      uint64_t v101 = *(void *)&v57[v99];
      *(void *)&v57[v99] = v100;
      swift_retain(v100);
      swift_release(v101);
      return a1;
    }

    sub_100004090((uint64_t)v57, type metadata accessor for Proto_Gpsd_Request);
    goto LABEL_12;
  }

  if (v63)
  {
LABEL_12:
    uint64_t v67 = sub_100003A0C(&qword_100350F20);
    memcpy(v57, v58, *(void *)(*(void *)(v67 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v57, v58, v6);
  uint64_t v64 = *(int *)(v59 + 20);
  uint64_t v65 = *(void *)&v58[v64];
  *(void *)&v57[v64] = v65;
  uint64_t v66 = *(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56);
  swift_retain(v65);
  v66(v57, 0LL, 1LL, v59);
  return a1;
}

uint64_t sub_10001107C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  uint64_t v12 = a1 + v9;
  uint64_t v13 = a2 + v9;
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  char v18 = *(_BYTE *)(a2 + v15);
  *(_BYTE *)(v16 + 4) = *(_BYTE *)(v17 + 4);
  *(_BYTE *)(a1 + v15) = v18;
  uint64_t v19 = a3[9];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  uint64_t v22 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  uint64_t v23 = *((void *)v22 - 1);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v23 + 48))(v21, 1LL, v22))
  {
    uint64_t v24 = sub_100003A0C(&qword_100350F18);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
  }

  else
  {
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    v20[2] = v21[2];
    v7((uint64_t)v20 + v22[7], (uint64_t)v21 + v22[7], v6);
    *((_BYTE *)v20 + v22[8]) = *((_BYTE *)v21 + v22[8]);
    uint64_t v25 = v22[9];
    uint64_t v26 = (char *)v20 + v25;
    uint64_t v27 = (char *)v21 + v25;
    v26[4] = v27[4];
    *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
    uint64_t v28 = v22[10];
    uint64_t v29 = (char *)v20 + v28;
    uint64_t v30 = (char *)v21 + v28;
    v29[4] = v30[4];
    *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
    uint64_t v31 = v22[11];
    uint64_t v32 = (char *)v20 + v31;
    uint64_t v33 = (char *)v21 + v31;
    v32[4] = v33[4];
    *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
    uint64_t v34 = v22[12];
    uint64_t v35 = (char *)v20 + v34;
    uint64_t v36 = (char *)v21 + v34;
    v35[4] = v36[4];
    *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
    uint64_t v37 = v22[13];
    char v38 = (char *)v20 + v37;
    uint64_t v39 = (char *)v21 + v37;
    v38[8] = v39[8];
    *(void *)char v38 = *(void *)v39;
    uint64_t v40 = v22[14];
    uint64_t v41 = (char *)v20 + v40;
    char v42 = (char *)v21 + v40;
    *(void *)uint64_t v41 = *(void *)v42;
    v41[8] = v42[8];
    (*(void (**)(void *, void, uint64_t, int *))(v23 + 56))(v20, 0LL, 1LL, v22);
  }

  uint64_t v43 = a3[10];
  uint64_t v44 = (char *)(a1 + v43);
  uint64_t v45 = (char *)(a2 + v43);
  uint64_t v46 = type metadata accessor for Proto_Gpsd_Request(0LL);
  uint64_t v47 = *(void *)(v46 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1LL, v46))
  {
    uint64_t v48 = sub_100003A0C(&qword_100350F20);
    memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v44, (uint64_t)v45, v6);
    *(void *)&v44[*(int *)(v46 + 20)] = *(void *)&v45[*(int *)(v46 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0LL, 1LL, v46);
  }

  return a1;
}

uint64_t sub_100011314(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v79 = *(void *)(v6 - 8);
  char v78 = *(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 40);
  v78(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  char v17 = *(_BYTE *)(a2 + v14);
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  *(_BYTE *)(a1 + v14) = v17;
  uint64_t v18 = a3[9];
  uint64_t v19 = (char *)(a1 + v18);
  uint64_t v20 = (char *)(a2 + v18);
  uint64_t v21 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  uint64_t v22 = *((void *)v21 - 1);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, int *))(v22 + 48);
  int v24 = v23(v19, 1LL, v21);
  int v25 = v23(v20, 1LL, v21);
  if (v24)
  {
    if (!v25)
    {
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
      *((void *)v19 + 2) = *((void *)v20 + 2);
      (*(void (**)(char *, char *, uint64_t))(v79 + 32))(&v19[v21[7]], &v20[v21[7]], v6);
      v19[v21[8]] = v20[v21[8]];
      uint64_t v26 = v21[9];
      uint64_t v27 = &v19[v26];
      uint64_t v28 = &v20[v26];
      v27[4] = v28[4];
      *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
      uint64_t v29 = v21[10];
      uint64_t v30 = &v19[v29];
      uint64_t v31 = &v20[v29];
      v30[4] = v31[4];
      *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
      uint64_t v32 = v21[11];
      uint64_t v33 = &v19[v32];
      uint64_t v34 = &v20[v32];
      v33[4] = v34[4];
      *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
      uint64_t v35 = v21[12];
      uint64_t v36 = &v19[v35];
      uint64_t v37 = &v20[v35];
      v36[4] = v37[4];
      *(_DWORD *)uint64_t v36 = *(_DWORD *)v37;
      uint64_t v38 = v21[13];
      uint64_t v39 = &v19[v38];
      uint64_t v40 = &v20[v38];
      v39[8] = v40[8];
      *(void *)uint64_t v39 = *(void *)v40;
      uint64_t v41 = v21[14];
      char v42 = &v19[v41];
      uint64_t v43 = &v20[v41];
      *(void *)char v42 = *(void *)v43;
      v42[8] = v43[8];
      (*(void (**)(char *, void, uint64_t, int *))(v22 + 56))(v19, 0LL, 1LL, v21);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v25)
  {
    sub_100004090((uint64_t)v19, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
LABEL_6:
    uint64_t v44 = sub_100003A0C(&qword_100350F18);
    memcpy(v19, v20, *(void *)(*(void *)(v44 - 8) + 64LL));
    goto LABEL_7;
  }

  uint64_t v55 = *(void *)v19;
  *(void *)uint64_t v19 = *(void *)v20;
  swift_bridgeObjectRelease(v55);
  uint64_t v56 = *((void *)v19 + 1);
  *((void *)v19 + 1) = *((void *)v20 + 1);
  swift_bridgeObjectRelease(v56);
  uint64_t v57 = *((void *)v19 + 2);
  *((void *)v19 + 2) = *((void *)v20 + 2);
  swift_bridgeObjectRelease(v57);
  v78((uint64_t)&v19[v21[7]], (uint64_t)&v20[v21[7]], v6);
  v19[v21[8]] = v20[v21[8]];
  uint64_t v58 = v21[9];
  uint64_t v59 = &v19[v58];
  uint64_t v60 = &v20[v58];
  v59[4] = v60[4];
  *(_DWORD *)uint64_t v59 = *(_DWORD *)v60;
  uint64_t v61 = v21[10];
  int v62 = &v19[v61];
  int v63 = &v20[v61];
  v62[4] = v63[4];
  *(_DWORD *)int v62 = *(_DWORD *)v63;
  uint64_t v64 = v21[11];
  uint64_t v65 = &v19[v64];
  uint64_t v66 = &v20[v64];
  v65[4] = v66[4];
  *(_DWORD *)uint64_t v65 = *(_DWORD *)v66;
  uint64_t v67 = v21[12];
  uint64_t v68 = &v19[v67];
  uint64_t v69 = &v20[v67];
  v68[4] = v69[4];
  *(_DWORD *)uint64_t v68 = *(_DWORD *)v69;
  uint64_t v70 = v21[13];
  uint64_t v71 = &v19[v70];
  uint64_t v72 = &v20[v70];
  v71[8] = v72[8];
  *(void *)uint64_t v71 = *(void *)v72;
  uint64_t v73 = v21[14];
  uint64_t v74 = &v19[v73];
  uint64_t v75 = &v20[v73];
  *(void *)uint64_t v74 = *(void *)v75;
  v74[8] = v75[8];
LABEL_7:
  uint64_t v45 = a3[10];
  uint64_t v46 = (char *)(a1 + v45);
  uint64_t v47 = (char *)(a2 + v45);
  uint64_t v48 = type metadata accessor for Proto_Gpsd_Request(0LL);
  uint64_t v49 = *(void *)(v48 - 8);
  char v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48);
  int v51 = v50(v46, 1LL, v48);
  int v52 = v50(v47, 1LL, v48);
  if (!v51)
  {
    if (!v52)
    {
      v78((uint64_t)v46, (uint64_t)v47, v6);
      uint64_t v76 = *(int *)(v48 + 20);
      uint64_t v77 = *(void *)&v46[v76];
      *(void *)&v46[v76] = *(void *)&v47[v76];
      swift_release(v77);
      return a1;
    }

    sub_100004090((uint64_t)v46, type metadata accessor for Proto_Gpsd_Request);
    goto LABEL_12;
  }

  if (v52)
  {
LABEL_12:
    uint64_t v53 = sub_100003A0C(&qword_100350F20);
    memcpy(v46, v47, *(void *)(*(void *)(v53 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v46, v47, v6);
  *(void *)&v46[*(int *)(v48 + 20)] = *(void *)&v47[*(int *)(v48 + 20)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0LL, 1LL, v48);
  return a1;
}

uint64_t sub_100011750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001175C);
}

uint64_t sub_10001175C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  if ((_DWORD)a2 == 250)
  {
    else {
      int v9 = *(unsigned __int8 *)(a1 + a3[8]);
    }
    unsigned int v10 = v9 - 5;
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v11 = sub_100003A0C(&qword_100350F18);
    uint64_t v12 = *(void *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      uint64_t v13 = v11;
      uint64_t v14 = a3[9];
    }

    else
    {
      uint64_t v13 = sub_100003A0C(&qword_100350F20);
      uint64_t v12 = *(void *)(v13 - 8);
      uint64_t v14 = a3[10];
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(a1 + v14, a2, v13);
  }
}

uint64_t sub_100011834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100011840);
}

uint64_t sub_100011840(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    if (a3 == 250)
    {
      *(_BYTE *)(a1 + a4[8]) = a2 + 5;
      return result;
    }

    uint64_t v13 = sub_100003A0C(&qword_100350F18);
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v15 = a4[9];
    }

    else
    {
      uint64_t v10 = sub_100003A0C(&qword_100350F20);
      uint64_t v14 = *(void *)(v10 - 8);
      uint64_t v15 = a4[10];
    }

    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_10001190C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v8[0] = *(void *)(v2 - 8) + 64LL;
    v8[1] = "\t";
    v8[2] = &unk_1002B4088;
    v8[3] = &unk_1002B4088;
    v8[4] = &unk_1002B40A0;
    sub_1000119EC(319LL, &qword_100351108, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
    if (v5 <= 0x3F)
    {
      v8[5] = *(void *)(v4 - 8) + 64LL;
      sub_1000119EC(319LL, (unint64_t *)&unk_100351110, type metadata accessor for Proto_Gpsd_Request);
      if (v7 <= 0x3F)
      {
        v8[6] = *(void *)(v6 - 8) + 64LL;
        swift_initStructMetadata(a1, 256LL, 7LL, v8, a1 + 16);
      }
    }
  }

void sub_1000119EC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  if (!*a2)
  {
    uint64_t v5 = a3(255LL);
    unint64_t v6 = type metadata accessor for Optional(a1, v5);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

_BYTE *initializeBufferWithCopyOfBuffer for CLP_LogEntry_AONLoc_Request.TypeEnum(_BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_AONLoc_Request.TypeEnum( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xD;
  int v8 = v6 - 13;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v8 = v6 - 14;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x48;
  int v8 = v6 - 72;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xF;
  int v8 = v6 - 15;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x43;
  int v8 = v6 - 67;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x13;
  int v8 = v6 - 19;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x14;
  int v8 = v6 - 20;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x12;
  int v8 = v6 - 18;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x11;
  int v8 = v6 - 17;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x21;
  int v8 = v6 - 33;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x18;
  int v8 = v6 - 24;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x3D;
  int v8 = v6 - 61;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

      swift_unknownObjectRelease(v12);
      uint64_t v1 = v43;
      uint64_t v5 = v45;
      if (v9 == v45) {
        return;
      }
    }
  }

  uint64_t v26 = 0LL;
  char v42 = v1 + 32;
  uint64_t v44 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (v26 != v44)
  {
    uint64_t v27 = v4[5];
    uint64_t v28 = *(id *)(v42 + 8 * v26);
    uint64_t v29 = NSObject._rawHashValue(seed:)(v27);
    uint64_t v30 = -1LL << *((_BYTE *)v4 + 32);
    uint64_t v31 = v29 & ~v30;
    uint64_t v32 = v31 >> 6;
    uint64_t v33 = *(void *)&v8[8 * (v31 >> 6)];
    uint64_t v34 = 1LL << v31;
    if (((1LL << v31) & v33) != 0)
    {
      sub_100290064(0LL, (unint64_t *)&qword_100367D40, &OBJC_CLASS___NSNumber_ptr);
      uint64_t v35 = *(id *)(v4[6] + 8 * v31);
      uint64_t v36 = static NSObject.== infix(_:_:)();

      if ((v36 & 1) != 0)
      {
LABEL_30:

        goto LABEL_31;
      }

      uint64_t v37 = ~v30;
      while (1)
      {
        uint64_t v31 = (v31 + 1) & v37;
        uint64_t v32 = v31 >> 6;
        uint64_t v33 = *(void *)&v8[8 * (v31 >> 6)];
        uint64_t v34 = 1LL << v31;
        if ((v33 & (1LL << v31)) == 0) {
          break;
        }
        uint64_t v38 = *(id *)(v4[6] + 8 * v31);
        uint64_t v39 = static NSObject.== infix(_:_:)();

        if ((v39 & 1) != 0) {
          goto LABEL_30;
        }
      }
    }

    *(void *)&v8[8 * v32] = v34 | v33;
    *(void *)(v4[6] + 8 * v31) = v28;
    uint64_t v40 = v4[2];
    uint64_t v11 = __OFADD__(v40, 1LL);
    uint64_t v41 = v40 + 1;
    if (v11) {
      goto LABEL_44;
    }
    v4[2] = v41;
LABEL_31:
    if (++v26 == v45) {
      return;
    }
  }

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_AONLoc_Request.TypeEnum( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_100011B24 + 4 * byte_1002B33CC[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100011B58 + 4 * byte_1002B33C7[v4]))();
}

uint64_t sub_100011B58(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100011B60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100011B68LL);
  }
  return result;
}

uint64_t sub_100011B74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100011B7CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_100011B80(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100011B88(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100011B94(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100011B9C(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_AONLoc_Request.TypeEnum()
{
  return &type metadata for CLP_LogEntry_AONLoc_Request.TypeEnum;
}

void *sub_100011BB4(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    BOOL v7 = (void *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain(v4);
  }

  else
  {
    BOOL v7 = a1;
    uint64_t v8 = a2[1];
    uint64_t v9 = a2[2];
    a1[1] = v8;
    a1[2] = v9;
    uint64_t v10 = a3[7];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v14(v11, v12, v13);
    uint64_t v15 = a3[9];
    *((_BYTE *)v7 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    uint64_t v16 = (char *)v7 + v15;
    char v17 = (char *)a2 + v15;
    v16[4] = v17[4];
    *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
    uint64_t v18 = a3[10];
    uint64_t v19 = a3[11];
    uint64_t v20 = (char *)v7 + v18;
    uint64_t v21 = (char *)a2 + v18;
    v20[4] = v21[4];
    *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
    uint64_t v22 = (char *)v7 + v19;
    uint64_t v23 = (char *)a2 + v19;
    *(_DWORD *)uint64_t v22 = *(_DWORD *)v23;
    v22[4] = v23[4];
    uint64_t v24 = a3[12];
    uint64_t v25 = a3[13];
    uint64_t v26 = (char *)v7 + v24;
    uint64_t v27 = (char *)a2 + v24;
    *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
    v26[4] = v27[4];
    uint64_t v28 = (char *)v7 + v25;
    uint64_t v29 = (char *)a2 + v25;
    uint64_t v30 = *(void *)v29;
    v28[8] = v29[8];
    *(void *)uint64_t v28 = v30;
    uint64_t v31 = a3[14];
    uint64_t v32 = (char *)v7 + v31;
    uint64_t v33 = (char *)a2 + v31;
    *(void *)uint64_t v32 = *(void *)v33;
    v32[8] = v33[8];
  }

  return v7;
}

uint64_t sub_100011D24(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

void *sub_100011D7C(void *a1, void *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  a1[2] = v8;
  uint64_t v9 = a3[7];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  v13(v10, v11, v12);
  uint64_t v14 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  v15[4] = v16[4];
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  uint64_t v17 = a3[10];
  uint64_t v18 = a3[11];
  uint64_t v19 = (char *)a1 + v17;
  uint64_t v20 = (char *)a2 + v17;
  v19[4] = v20[4];
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  uint64_t v21 = (char *)a1 + v18;
  uint64_t v22 = (char *)a2 + v18;
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  v21[4] = v22[4];
  uint64_t v23 = a3[12];
  uint64_t v24 = a3[13];
  uint64_t v25 = (char *)a1 + v23;
  uint64_t v26 = (char *)a2 + v23;
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  v25[4] = v26[4];
  uint64_t v27 = (char *)a1 + v24;
  uint64_t v28 = (char *)a2 + v24;
  uint64_t v29 = *(void *)v28;
  v27[8] = v28[8];
  *(void *)uint64_t v27 = v29;
  uint64_t v30 = a3[14];
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = (char *)a2 + v30;
  *(void *)uint64_t v31 = *(void *)v32;
  v31[8] = v32[8];
  return a1;
}

void *sub_100011EC4(void *a1, void *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[1];
  uint64_t v9 = a1[1];
  a1[1] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[2];
  uint64_t v11 = a1[2];
  a1[2] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 24LL))(v13, v14, v15);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  uint64_t v16 = a3[9];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  char v19 = v18[4];
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  v17[4] = v19;
  uint64_t v20 = a3[10];
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  char v23 = v22[4];
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  v21[4] = v23;
  uint64_t v24 = a3[11];
  uint64_t v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  char v27 = v26[4];
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  v25[4] = v27;
  uint64_t v28 = a3[12];
  uint64_t v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  char v31 = v30[4];
  *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
  v29[4] = v31;
  uint64_t v32 = a3[13];
  uint64_t v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  char v35 = v34[8];
  *(void *)uint64_t v33 = *(void *)v34;
  v33[8] = v35;
  uint64_t v36 = a3[14];
  uint64_t v37 = (char *)a1 + v36;
  uint64_t v38 = (char *)a2 + v36;
  uint64_t v39 = *(void *)v38;
  v37[8] = v38[8];
  *(void *)uint64_t v37 = v39;
  return a1;
}

uint64_t sub_100012024(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[7];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  uint64_t v13 = a3[10];
  uint64_t v14 = a3[11];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  uint64_t v19 = a3[12];
  uint64_t v20 = a3[13];
  uint64_t v21 = a1 + v19;
  uint64_t v22 = a2 + v19;
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  *(_BYTE *)(v21 + 4) = *(_BYTE *)(v22 + 4);
  uint64_t v23 = a1 + v20;
  uint64_t v24 = (uint64_t *)(a2 + v20);
  uint64_t v25 = *v24;
  *(_BYTE *)(v23 + 8) = *((_BYTE *)v24 + 8);
  *(void *)uint64_t v23 = v25;
  uint64_t v26 = a3[14];
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  *(void *)uint64_t v27 = *(void *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  return a1;
}

void *sub_100012140(void *a1, void *a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a3[7];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 40LL))(v10, v11, v12);
  uint64_t v13 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  v14[4] = v15[4];
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  uint64_t v16 = a3[10];
  uint64_t v17 = a3[11];
  uint64_t v18 = (char *)a1 + v16;
  uint64_t v19 = (char *)a2 + v16;
  v18[4] = v19[4];
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  uint64_t v20 = (char *)a1 + v17;
  uint64_t v21 = (char *)a2 + v17;
  *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  v20[4] = v21[4];
  uint64_t v22 = a3[12];
  uint64_t v23 = a3[13];
  uint64_t v24 = (char *)a1 + v22;
  uint64_t v25 = (char *)a2 + v22;
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  v24[4] = v25[4];
  uint64_t v26 = (char *)a1 + v23;
  uint64_t v27 = (char *)a2 + v23;
  uint64_t v28 = *(void *)v27;
  v26[8] = v27[8];
  *(void *)uint64_t v26 = v28;
  uint64_t v29 = a3[14];
  uint64_t v30 = (char *)a1 + v29;
  char v31 = (char *)a2 + v29;
  *(void *)uint64_t v30 = *(void *)v31;
  v30[8] = v31[8];
  return a1;
}

uint64_t sub_10001227C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100012288);
}

uint64_t sub_100012288(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 28)],  a2,  v8);
  }

uint64_t sub_100012304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100012310);
}

char *sub_100012310(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 28)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_100012384(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[3] = *(void *)(result - 8) + 64LL;
    v4[4] = &unk_1002B40D0;
    v4[5] = &unk_1002B4088;
    v4[6] = &unk_1002B4088;
    v4[7] = &unk_1002B4088;
    v4[8] = &unk_1002B4088;
    v4[9] = "\t";
    v4[10] = "\t";
    swift_initStructMetadata(a1, 256LL, 11LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void *sub_100012424(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (void *)(v11 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v11);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    *(void *)uint64_t v9 = *(void *)v10;
    v9[8] = v10[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  }

  return a1;
}

uint64_t sub_1000124D0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

uint64_t sub_100012504(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100012584(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(_BYTE *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100012608(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100012688(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100012708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100012714);
}

uint64_t sub_100012714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  else {
    int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  }
  unsigned int v10 = v9 - 5;
  else {
    return 0LL;
  }
}

uint64_t sub_100012798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000127A4);
}

uint64_t sub_1000127A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 5;
  return result;
}

uint64_t sub_10001281C(uint64_t a1)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_1002B40A0;
    v4[2] = "\t";
    v4[3] = &unk_1002B4110;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1000128B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000128C4);
}

uint64_t sub_1000128C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000128D4);
}

void *sub_1000128DC(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain(v4);
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    unsigned int v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = (char *)v7 + v13;
    uint64_t v16 = (char *)a2 + v13;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    *((_BYTE *)v7 + v14) = *((_BYTE *)a2 + v14);
  }

  return v7;
}

uint64_t sub_1000129A8(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

void *sub_1000129F0(void *a1, void *a2, int *a3)
{
  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v12;
  uint64_t v15 = (char *)a2 + v12;
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  *((_BYTE *)a1 + v13) = *((_BYTE *)a2 + v13);
  return a1;
}

void *sub_100012A94(void *a1, void *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = *(void *)v14;
  v13[8] = v14[8];
  *(void *)uint64_t v13 = v15;
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  return a1;
}

void *sub_100012B38(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v10;
  uint64_t v13 = (char *)a2 + v10;
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
  return a1;
}

void *sub_100012BC8(void *a1, void *a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v11;
  uint64_t v14 = (char *)a2 + v11;
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
  return a1;
}

uint64_t sub_100012C60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100012C6C);
}

uint64_t sub_100012C70(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 20)],  a2,  v8);
  }

uint64_t sub_100012CEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100012CF8);
}

char *sub_100012CFC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 20)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_100012D70(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    v4[2] = "\t";
    v4[3] = &unk_1002B40D0;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *sub_100012DFC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v9;
  }

  swift_retain(v9);
  return a1;
}

uint64_t sub_100012E84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  return swift_release(*(void *)(a1 + *(int *)(a2 + 20)));
}

uint64_t sub_100012EC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a2 + v7);
  *(void *)(a1 + v7) = v8;
  swift_retain(v8);
  return a1;
}

uint64_t sub_100012F28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a2 + v7);
  uint64_t v9 = *(void *)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

uint64_t sub_100012F94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100012FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_release(v8);
  return a1;
}

uint64_t sub_100013054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100013060);
}

uint64_t sub_100013060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_1000130DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000130E8);
}

uint64_t sub_1000130E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_100013160(uint64_t a1)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for Proto_Gpsd_CntinStatus(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_AONLoc_Indication.TypeEnum( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_1000132B0 + 4 * byte_1002B33D6[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1000132E4 + 4 * byte_1002B33D1[v4]))();
}

uint64_t sub_1000132E4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000132EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000132F4LL);
  }
  return result;
}

uint64_t sub_100013300(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100013308LL);
  }
  *(_BYTE *)uint64_t result = a2 + 6;
  return result;
}

uint64_t sub_10001330C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100013314(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_AONLoc_Indication.TypeEnum()
{
  return &type metadata for CLP_LogEntry_AONLoc_Indication.TypeEnum;
}

uint64_t *sub_100013330(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    int v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8((char *)a1, (char *)a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1LL, v12))
    {
      uint64_t v14 = sub_100003A0C(&qword_100350F50);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      uint64_t v74 = v13;
      v8(v10, v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
      v23[4] = v24[4];
      v10[v12[8]] = v11[v12[8]];
      uint64_t v25 = v12[9];
      uint64_t v75 = v8;
      uint64_t v26 = &v10[v25];
      uint64_t v27 = &v11[v25];
      uint64_t v28 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
      uint64_t v73 = *((void *)v28 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v73 + 48))(v27, 1LL, v28))
      {
        uint64_t v29 = sub_100003A0C(&qword_100350F18);
        memcpy(v26, v27, *(void *)(*(void *)(v29 - 8) + 64LL));
      }

      else
      {
        uint64_t v30 = *(void *)v27;
        uint64_t v69 = *((void *)v27 + 1);
        *(void *)uint64_t v26 = *(void *)v27;
        *((void *)v26 + 1) = v69;
        uint64_t v70 = *((void *)v27 + 2);
        *((void *)v26 + 2) = v70;
        uint64_t v31 = v28[7];
        uint64_t v71 = &v27[v31];
        uint64_t v72 = &v26[v31];
        swift_bridgeObjectRetain(v30);
        swift_bridgeObjectRetain(v69);
        swift_bridgeObjectRetain(v70);
        v75(v72, v71, v7);
        v26[v28[8]] = v27[v28[8]];
        uint64_t v32 = v28[9];
        uint64_t v33 = &v26[v32];
        uint64_t v34 = &v27[v32];
        v33[4] = v34[4];
        *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
        uint64_t v35 = v28[10];
        uint64_t v36 = &v26[v35];
        uint64_t v37 = &v27[v35];
        v36[4] = v37[4];
        *(_DWORD *)uint64_t v36 = *(_DWORD *)v37;
        uint64_t v38 = v28[11];
        uint64_t v39 = &v26[v38];
        uint64_t v40 = &v27[v38];
        v39[4] = v40[4];
        *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
        uint64_t v41 = v28[12];
        char v42 = &v26[v41];
        uint64_t v43 = &v27[v41];
        v42[4] = v43[4];
        *(_DWORD *)char v42 = *(_DWORD *)v43;
        uint64_t v44 = v28[13];
        uint64_t v45 = &v26[v44];
        uint64_t v46 = &v27[v44];
        v45[8] = v46[8];
        *(void *)uint64_t v45 = *(void *)v46;
        uint64_t v47 = v28[14];
        uint64_t v48 = &v26[v47];
        uint64_t v49 = &v27[v47];
        *(void *)uint64_t v48 = *(void *)v49;
        v48[8] = v49[8];
        (*(void (**)(char *, void, uint64_t, int *))(v73 + 56))(v26, 0LL, 1LL, v28);
      }

      uint64_t v50 = v12[10];
      int v51 = &v10[v50];
      int v52 = &v11[v50];
      uint64_t v53 = type metadata accessor for Proto_Gpsd_Request(0LL);
      uint64_t v54 = *(void *)(v53 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1LL, v53))
      {
        uint64_t v55 = sub_100003A0C(&qword_100350F20);
        memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64LL));
      }

      else
      {
        v75(v51, v52, v7);
        uint64_t v56 = *(int *)(v53 + 20);
        uint64_t v57 = *(void *)&v52[v56];
        *(void *)&v51[v56] = v57;
        uint64_t v58 = *(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56);
        swift_retain(v57);
        v58(v51, 0LL, 1LL, v53);
      }

      (*(void (**)(char *, void, uint64_t, int *))(v74 + 56))(v10, 0LL, 1LL, v12);
      int v8 = v75;
    }

    uint64_t v59 = *(int *)(a3 + 24);
    uint64_t v60 = (char *)a1 + v59;
    uint64_t v61 = (char *)a2 + v59;
    uint64_t v62 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL);
    uint64_t v63 = *(void *)(v62 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v61, 1LL, v62))
    {
      uint64_t v64 = sub_100003A0C(&qword_100350F58);
      memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64LL));
    }

    else
    {
      v8(v60, v61, v7);
      uint64_t v65 = *(int *)(v62 + 20);
      uint64_t v66 = *(void *)&v61[v65];
      *(void *)&v60[v65] = v66;
      uint64_t v67 = *(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56);
      swift_retain(v66);
      v67(v60, 0LL, 1LL, v62);
    }
  }

  return a1;
}

uint64_t sub_10001375C(char *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  int v5 = *(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v5(a1, v4);
  unsigned int v6 = &a1[*(int *)(a2 + 20)];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7))
  {
    v5(v6, v4);
    int v8 = &v6[*(int *)(v7 + 36)];
    uint64_t v9 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9))
    {
      swift_bridgeObjectRelease(*(void *)v8);
      swift_bridgeObjectRelease(*((void *)v8 + 1));
      swift_bridgeObjectRelease(*((void *)v8 + 2));
      v5(&v8[*(int *)(v9 + 28)], v4);
    }

    uint64_t v10 = &v6[*(int *)(v7 + 40)];
    uint64_t v11 = type metadata accessor for Proto_Gpsd_Request(0LL);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v10, 1LL, v11))
    {
      v5(v10, v4);
      swift_release(*(void *)&v10[*(int *)(v11 + 20)]);
    }
  }

  uint64_t v12 = &a1[*(int *)(a2 + 24)];
  uint64_t v13 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48LL))(v12, 1LL, v13);
  if (!(_DWORD)result)
  {
    v5(v12, v4);
    return swift_release(*(void *)&v12[*(int *)(v13 + 20)]);
  }

  return result;
}

uint64_t sub_1000138EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100350F50);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    uint64_t v73 = v12;
    uint64_t v74 = a3;
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
    v21[4] = v22[4];
    v9[v11[8]] = v10[v11[8]];
    uint64_t v23 = v11[9];
    uint64_t v24 = &v9[v23];
    uint64_t v25 = &v10[v23];
    uint64_t v26 = v7;
    uint64_t v27 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
    uint64_t v72 = *((void *)v27 - 1);
    uint64_t v75 = v26;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v72 + 48))(v25, 1LL, v27))
    {
      uint64_t v28 = sub_100003A0C(&qword_100350F18);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
    }

    else
    {
      uint64_t v29 = *(void *)v25;
      uint64_t v68 = *((void *)v25 + 1);
      *(void *)uint64_t v24 = *(void *)v25;
      *((void *)v24 + 1) = v68;
      uint64_t v69 = *((void *)v25 + 2);
      *((void *)v24 + 2) = v69;
      uint64_t v30 = v27[7];
      uint64_t v70 = &v25[v30];
      uint64_t v71 = &v24[v30];
      swift_bridgeObjectRetain(v29);
      swift_bridgeObjectRetain(v68);
      swift_bridgeObjectRetain(v69);
      v26((uint64_t)v71, (uint64_t)v70, v6);
      v24[v27[8]] = v25[v27[8]];
      uint64_t v31 = v27[9];
      uint64_t v32 = &v24[v31];
      uint64_t v33 = &v25[v31];
      v32[4] = v33[4];
      *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
      uint64_t v34 = v27[10];
      uint64_t v35 = &v24[v34];
      uint64_t v36 = &v25[v34];
      v35[4] = v36[4];
      *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
      uint64_t v37 = v27[11];
      uint64_t v38 = &v24[v37];
      uint64_t v39 = &v25[v37];
      v38[4] = v39[4];
      *(_DWORD *)uint64_t v38 = *(_DWORD *)v39;
      uint64_t v40 = v27[12];
      uint64_t v41 = &v24[v40];
      char v42 = &v25[v40];
      v41[4] = v42[4];
      *(_DWORD *)uint64_t v41 = *(_DWORD *)v42;
      uint64_t v43 = v27[13];
      uint64_t v44 = &v24[v43];
      uint64_t v45 = &v25[v43];
      v44[8] = v45[8];
      *(void *)uint64_t v44 = *(void *)v45;
      uint64_t v46 = v27[14];
      uint64_t v47 = &v24[v46];
      uint64_t v48 = &v25[v46];
      *(void *)uint64_t v47 = *(void *)v48;
      v47[8] = v48[8];
      (*(void (**)(char *, void, uint64_t, int *))(v72 + 56))(v24, 0LL, 1LL, v27);
    }

    uint64_t v49 = v11[10];
    uint64_t v50 = &v9[v49];
    int v51 = &v10[v49];
    uint64_t v52 = type metadata accessor for Proto_Gpsd_Request(0LL);
    uint64_t v53 = *(void *)(v52 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v51, 1LL, v52))
    {
      uint64_t v54 = sub_100003A0C(&qword_100350F20);
      memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64LL));
      uint64_t v7 = v75;
    }

    else
    {
      uint64_t v7 = v75;
      v75((uint64_t)v50, (uint64_t)v51, v6);
      uint64_t v55 = *(int *)(v52 + 20);
      uint64_t v56 = *(void *)&v51[v55];
      *(void *)&v50[v55] = v56;
      uint64_t v57 = *(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56);
      swift_retain(v56);
      v57(v50, 0LL, 1LL, v52);
    }

    a3 = v74;
    (*(void (**)(char *, void, uint64_t, int *))(v73 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v58 = *(int *)(a3 + 24);
  uint64_t v59 = (char *)(a1 + v58);
  uint64_t v60 = (char *)(a2 + v58);
  uint64_t v61 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL);
  uint64_t v62 = *(void *)(v61 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1LL, v61))
  {
    uint64_t v63 = sub_100003A0C(&qword_100350F58);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v59, (uint64_t)v60, v6);
    uint64_t v64 = *(int *)(v61 + 20);
    uint64_t v65 = *(void *)&v60[v64];
    *(void *)&v59[v64] = v65;
    uint64_t v66 = *(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56);
    swift_retain(v65);
    v66(v59, 0LL, 1LL, v61);
  }

  return a1;
}

uint64_t sub_100013CEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v196 = a3;
  uint64_t v197 = a2;
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  uint64_t v13 = *((void *)v12 - 1);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14((uint64_t)v11, 1LL, v12);
  uint64_t v195 = v7;
  if (!v15)
  {
    if (v16)
    {
      sub_100004090(v10, type metadata accessor for CLP_LogEntry_AONLoc_Request);
      goto LABEL_7;
    }

    uint64_t v192 = v6;
    v194 = v8;
    v8(v10, (uint64_t)v11, v6);
    uint64_t v39 = v12[5];
    uint64_t v40 = v10 + v39;
    uint64_t v41 = &v11[v39];
    uint64_t v42 = *(void *)v41;
    *(_BYTE *)(v40 + 8) = v41[8];
    *(void *)uint64_t v40 = v42;
    uint64_t v43 = v12[6];
    uint64_t v44 = v10 + v43;
    uint64_t v45 = &v11[v43];
    LOBYTE(v42) = v45[4];
    *(_DWORD *)uint64_t v44 = *(_DWORD *)v45;
    *(_BYTE *)(v44 + 4) = v42;
    uint64_t v46 = v12[7];
    uint64_t v47 = v10 + v46;
    uint64_t v48 = &v11[v46];
    LOBYTE(v42) = v48[4];
    *(_DWORD *)uint64_t v47 = *(_DWORD *)v48;
    *(_BYTE *)(v47 + 4) = v42;
    *(_BYTE *)(v10 + v12[8]) = v11[v12[8]];
    uint64_t v49 = v12[9];
    uint64_t v50 = (void *)(v10 + v49);
    int v51 = &v11[v49];
    uint64_t v52 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
    uint64_t v190 = *((void *)v52 - 1);
    uint64_t v53 = *(uint64_t (**)(void *, uint64_t, int *))(v190 + 48);
    int v54 = v53(v50, 1LL, v52);
    uint64_t v55 = v51;
    int v56 = v53(v51, 1LL, v52);
    if (v54)
    {
      if (!v56)
      {
        uint64_t v57 = *(void *)v51;
        *uint64_t v50 = *(void *)v51;
        uint64_t v58 = *((void *)v51 + 1);
        v50[1] = v58;
        uint64_t v59 = *((void *)v51 + 2);
        v50[2] = v59;
        uint64_t v60 = v52[7];
        uint64_t v61 = (char *)v50 + v60;
        v187 = (char *)v55 + v60;
        v185 = *(void (**)(char *, char *, uint64_t))(v195 + 16);
        swift_bridgeObjectRetain(v57);
        swift_bridgeObjectRetain(v58);
        swift_bridgeObjectRetain(v59);
        v185(v61, v187, v192);
        *((_BYTE *)v50 + v52[8]) = *((_BYTE *)v55 + v52[8]);
        uint64_t v62 = v52[9];
        uint64_t v63 = (char *)v50 + v62;
        uint64_t v64 = (char *)v55 + v62;
        char v65 = v64[4];
        *(_DWORD *)uint64_t v63 = *(_DWORD *)v64;
        v63[4] = v65;
        uint64_t v66 = v52[10];
        uint64_t v67 = (char *)v50 + v66;
        uint64_t v68 = (char *)v55 + v66;
        char v69 = v68[4];
        *(_DWORD *)uint64_t v67 = *(_DWORD *)v68;
        v67[4] = v69;
        uint64_t v70 = v52[11];
        uint64_t v71 = (char *)v50 + v70;
        uint64_t v72 = (char *)v55 + v70;
        char v73 = v72[4];
        *(_DWORD *)uint64_t v71 = *(_DWORD *)v72;
        v71[4] = v73;
        uint64_t v74 = v52[12];
        uint64_t v75 = (char *)v50 + v74;
        uint64_t v76 = (char *)v55 + v74;
        char v77 = v76[4];
        *(_DWORD *)uint64_t v75 = *(_DWORD *)v76;
        v75[4] = v77;
        uint64_t v78 = v52[13];
        uint64_t v79 = (char *)v50 + v78;
        uint64_t v80 = (char *)v55 + v78;
        char v81 = v80[8];
        *(void *)uint64_t v79 = *(void *)v80;
        v79[8] = v81;
        uint64_t v82 = v52[14];
        uint64_t v83 = (char *)v50 + v82;
        uint64_t v84 = (char *)v55 + v82;
        uint64_t v85 = *(void *)v84;
        v83[8] = v84[8];
        *(void *)uint64_t v83 = v85;
        (*(void (**)(void *, void, uint64_t, int *))(v190 + 56))(v50, 0LL, 1LL, v52);
LABEL_28:
        uint64_t v8 = v194;
LABEL_29:
        uint64_t v140 = v12[10];
        uint64_t v141 = v10 + v140;
        uint64_t v142 = &v11[v140];
        uint64_t v143 = type metadata accessor for Proto_Gpsd_Request(0LL);
        uint64_t v144 = *(void *)(v143 - 8);
        uint64_t v145 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v144 + 48);
        int v146 = v145(v141, 1LL, v143);
        int v147 = v145((uint64_t)v142, 1LL, v143);
        if (v146)
        {
          uint64_t v6 = v192;
          if (!v147)
          {
            (*(void (**)(uint64_t, char *, uint64_t))(v195 + 16))(v141, v142, v192);
            uint64_t v148 = *(int *)(v143 + 20);
            uint64_t v149 = *(void *)&v142[v148];
            *(void *)(v141 + v148) = v149;
            uint64_t v150 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v144 + 56);
            swift_retain(v149);
            v150(v141, 0LL, 1LL, v143);
            goto LABEL_17;
          }
        }

        else
        {
          uint64_t v6 = v192;
          if (!v147)
          {
            v8(v141, (uint64_t)v142, v192);
            uint64_t v181 = *(int *)(v143 + 20);
            uint64_t v182 = *(void *)&v142[v181];
            uint64_t v183 = *(void *)(v141 + v181);
            *(void *)(v141 + v181) = v182;
            swift_retain(v182);
            swift_release(v183);
            goto LABEL_17;
          }

          sub_100004090(v141, type metadata accessor for Proto_Gpsd_Request);
        }

        size_t v36 = *(void *)(*(void *)(sub_100003A0C(&qword_100350F20) - 8) + 64LL);
        uint64_t v37 = (void *)v141;
        uint64_t v38 = v142;
LABEL_8:
        memcpy(v37, v38, v36);
        goto LABEL_17;
      }
    }

    else
    {
      if (!v56)
      {
        uint64_t v151 = *(void *)v51;
        uint64_t v152 = *v50;
        *uint64_t v50 = *(void *)v51;
        swift_bridgeObjectRetain(v151);
        swift_bridgeObjectRelease(v152);
        uint64_t v153 = *((void *)v51 + 1);
        uint64_t v154 = v50[1];
        v50[1] = v153;
        swift_bridgeObjectRetain(v153);
        swift_bridgeObjectRelease(v154);
        uint64_t v155 = *((void *)v51 + 2);
        uint64_t v156 = v50[2];
        v50[2] = v155;
        swift_bridgeObjectRetain(v155);
        swift_bridgeObjectRelease(v156);
        uint64_t v8 = v194;
        v194((uint64_t)v50 + v52[7], (uint64_t)&v51[v52[7]], v192);
        *((_BYTE *)v50 + v52[8]) = v51[v52[8]];
        uint64_t v157 = v52[9];
        uint64_t v158 = (char *)v50 + v157;
        uint64_t v159 = &v51[v157];
        char v160 = v159[4];
        *(_DWORD *)uint64_t v158 = *(_DWORD *)v159;
        v158[4] = v160;
        uint64_t v161 = v52[10];
        uint64_t v162 = (char *)v50 + v161;
        uint64_t v163 = &v51[v161];
        char v164 = v163[4];
        *(_DWORD *)uint64_t v162 = *(_DWORD *)v163;
        v162[4] = v164;
        uint64_t v165 = v52[11];
        uint64_t v166 = (char *)v50 + v165;
        uint64_t v167 = &v51[v165];
        char v168 = v167[4];
        *(_DWORD *)uint64_t v166 = *(_DWORD *)v167;
        v166[4] = v168;
        uint64_t v169 = v52[12];
        uint64_t v170 = (char *)v50 + v169;
        uint64_t v171 = &v51[v169];
        char v172 = v171[4];
        *(_DWORD *)uint64_t v170 = *(_DWORD *)v171;
        v170[4] = v172;
        uint64_t v173 = v52[13];
        v174 = (char *)v50 + v173;
        v175 = &v51[v173];
        char v176 = v175[8];
        *(void *)v174 = *(void *)v175;
        v174[8] = v176;
        uint64_t v177 = v52[14];
        v178 = (char *)v50 + v177;
        v179 = &v51[v177];
        uint64_t v180 = *(void *)v179;
        v178[8] = v179[8];
        *(void *)v178 = v180;
        goto LABEL_29;
      }

      sub_100004090((uint64_t)v50, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
    }

    uint64_t v139 = sub_100003A0C(&qword_100350F18);
    memcpy(v50, v51, *(void *)(*(void *)(v139 - 8) + 64LL));
    goto LABEL_28;
  }

  if (v16)
  {
LABEL_7:
    size_t v36 = *(void *)(*(void *)(sub_100003A0C(&qword_100350F50) - 8) + 64LL);
    uint64_t v37 = (void *)v10;
    uint64_t v38 = v11;
    goto LABEL_8;
  }

  uint64_t v191 = a1;
  v193 = v8;
  uint64_t v17 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 16);
  v17(v10, v11, v6);
  uint64_t v18 = v12[5];
  uint64_t v19 = v10 + v18;
  uint64_t v20 = &v11[v18];
  uint64_t v21 = *(void *)v20;
  *(_BYTE *)(v19 + 8) = v20[8];
  *(void *)uint64_t v19 = v21;
  uint64_t v22 = v12[6];
  uint64_t v23 = v10 + v22;
  uint64_t v24 = &v11[v22];
  LOBYTE(v21) = v24[4];
  *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
  *(_BYTE *)(v23 + 4) = v21;
  uint64_t v25 = v12[7];
  uint64_t v26 = v10 + v25;
  uint64_t v27 = &v11[v25];
  LOBYTE(v21) = v27[4];
  *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
  *(_BYTE *)(v26 + 4) = v21;
  *(_BYTE *)(v10 + v12[8]) = v11[v12[8]];
  uint64_t v28 = v12[9];
  uint64_t v29 = (uint64_t *)(v10 + v28);
  uint64_t v30 = (uint64_t *)&v11[v28];
  uint64_t v31 = v6;
  uint64_t v32 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  uint64_t v33 = *((void *)v32 - 1);
  v189 = (void (*)(char *, char *, uint64_t))v17;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v33 + 48))(v30, 1LL, v32))
  {
    uint64_t v34 = v31;
    uint64_t v35 = sub_100003A0C(&qword_100350F18);
    memcpy(v29, v30, *(void *)(*(void *)(v35 - 8) + 64LL));
  }

  else
  {
    uint64_t v86 = *v30;
    *uint64_t v29 = *v30;
    uint64_t v188 = v33;
    uint64_t v87 = v30[1];
    v29[1] = v87;
    uint64_t v88 = v30[2];
    v29[2] = v88;
    uint64_t v89 = v32[7];
    v184 = (char *)v30 + v89;
    v186 = (char *)v29 + v89;
    swift_bridgeObjectRetain(v86);
    swift_bridgeObjectRetain(v87);
    swift_bridgeObjectRetain(v88);
    uint64_t v34 = v31;
    v189(v186, v184, v31);
    *((_BYTE *)v29 + v32[8]) = *((_BYTE *)v30 + v32[8]);
    uint64_t v90 = v32[9];
    uint64_t v91 = (char *)v29 + v90;
    uint64_t v92 = (char *)v30 + v90;
    char v93 = v92[4];
    *(_DWORD *)uint64_t v91 = *(_DWORD *)v92;
    v91[4] = v93;
    uint64_t v94 = v32[10];
    uint64_t v95 = (char *)v29 + v94;
    v96 = (char *)v30 + v94;
    char v97 = v96[4];
    *(_DWORD *)uint64_t v95 = *(_DWORD *)v96;
    v95[4] = v97;
    uint64_t v98 = v32[11];
    uint64_t v99 = (char *)v29 + v98;
    uint64_t v100 = (char *)v30 + v98;
    char v101 = v100[4];
    *(_DWORD *)uint64_t v99 = *(_DWORD *)v100;
    v99[4] = v101;
    uint64_t v102 = v32[12];
    uint64_t v103 = (char *)v29 + v102;
    uint64_t v104 = (char *)v30 + v102;
    char v105 = v104[4];
    *(_DWORD *)uint64_t v103 = *(_DWORD *)v104;
    v103[4] = v105;
    uint64_t v106 = v32[13];
    unsigned int v107 = (char *)v29 + v106;
    v108 = (char *)v30 + v106;
    char v109 = v108[8];
    *(void *)unsigned int v107 = *(void *)v108;
    v107[8] = v109;
    uint64_t v110 = v32[14];
    uint64_t v111 = (char *)v29 + v110;
    uint64_t v112 = (char *)v30 + v110;
    uint64_t v113 = *(void *)v112;
    v111[8] = v112[8];
    *(void *)uint64_t v111 = v113;
    (*(void (**)(uint64_t *, void, uint64_t, int *))(v188 + 56))(v29, 0LL, 1LL, v32);
  }

  uint64_t v114 = v12[10];
  uint64_t v115 = (char *)(v10 + v114);
  uint64_t v116 = &v11[v114];
  uint64_t v117 = type metadata accessor for Proto_Gpsd_Request(0LL);
  uint64_t v118 = *(void *)(v117 - 8);
  a1 = v191;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v118 + 48))(v116, 1LL, v117))
  {
    uint64_t v119 = sub_100003A0C(&qword_100350F20);
    memcpy(v115, v116, *(void *)(*(void *)(v119 - 8) + 64LL));
    uint64_t v6 = v34;
  }

  else
  {
    uint64_t v6 = v34;
    v189(v115, v116, v34);
    uint64_t v120 = *(int *)(v117 + 20);
    uint64_t v121 = *(void *)&v116[v120];
    *(void *)&v115[v120] = v121;
    uint64_t v122 = *(void (**)(char *, void, uint64_t, uint64_t))(v118 + 56);
    swift_retain(v121);
    v122(v115, 0LL, 1LL, v117);
  }

  uint64_t v8 = v193;
  (*(void (**)(uint64_t, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
LABEL_17:
  uint64_t v123 = *(int *)(v196 + 24);
  v124 = (char *)(a1 + v123);
  v125 = (char *)(v197 + v123);
  uint64_t v126 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL);
  uint64_t v127 = *(void *)(v126 - 8);
  v128 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v127 + 48);
  int v129 = v128(v124, 1LL, v126);
  int v130 = v128(v125, 1LL, v126);
  if (!v129)
  {
    if (!v130)
    {
      v8((uint64_t)v124, (uint64_t)v125, v6);
      uint64_t v136 = *(int *)(v126 + 20);
      uint64_t v137 = *(void *)&v125[v136];
      uint64_t v138 = *(void *)&v124[v136];
      *(void *)&v124[v136] = v137;
      swift_retain(v137);
      swift_release(v138);
      return a1;
    }

    sub_100004090((uint64_t)v124, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    goto LABEL_22;
  }

  if (v130)
  {
LABEL_22:
    uint64_t v134 = sub_100003A0C(&qword_100350F58);
    memcpy(v124, v125, *(void *)(*(void *)(v134 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v195 + 16))(v124, v125, v6);
  uint64_t v131 = *(int *)(v126 + 20);
  uint64_t v132 = *(void *)&v125[v131];
  *(void *)&v124[v131] = v132;
  uint64_t v133 = *(void (**)(char *, void, uint64_t, uint64_t))(v127 + 56);
  swift_retain(v132);
  v133(v124, 0LL, 1LL, v126);
  return a1;
}

uint64_t sub_1000145DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100350F50);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    uint64_t v61 = v12;
    uint64_t v62 = a3;
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    int v15 = &v9[v14];
    int v16 = &v10[v14];
    *(void *)int v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
    v21[4] = v22[4];
    v9[v11[8]] = v10[v11[8]];
    uint64_t v23 = v11[9];
    uint64_t v24 = v7;
    uint64_t v25 = &v9[v23];
    uint64_t v26 = &v10[v23];
    uint64_t v27 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
    uint64_t v60 = *((void *)v27 - 1);
    uint64_t v63 = (void (*)(char *, char *, uint64_t))v24;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v60 + 48))(v26, 1LL, v27))
    {
      uint64_t v28 = sub_100003A0C(&qword_100350F18);
      memcpy(v25, v26, *(void *)(*(void *)(v28 - 8) + 64LL));
    }

    else
    {
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
      *((void *)v25 + 2) = *((void *)v26 + 2);
      v24((uint64_t)&v25[v27[7]], (uint64_t)&v26[v27[7]], v6);
      v25[v27[8]] = v26[v27[8]];
      uint64_t v29 = v27[9];
      uint64_t v30 = &v25[v29];
      uint64_t v31 = &v26[v29];
      v30[4] = v31[4];
      *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
      uint64_t v32 = v27[10];
      uint64_t v33 = &v25[v32];
      uint64_t v34 = &v26[v32];
      v33[4] = v34[4];
      *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
      uint64_t v35 = v27[11];
      size_t v36 = &v25[v35];
      uint64_t v37 = &v26[v35];
      v36[4] = v37[4];
      *(_DWORD *)size_t v36 = *(_DWORD *)v37;
      uint64_t v38 = v27[12];
      uint64_t v39 = &v25[v38];
      uint64_t v40 = &v26[v38];
      v39[4] = v40[4];
      *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
      uint64_t v41 = v27[13];
      uint64_t v42 = &v25[v41];
      uint64_t v43 = &v26[v41];
      v42[8] = v43[8];
      *(void *)uint64_t v42 = *(void *)v43;
      uint64_t v44 = v27[14];
      uint64_t v45 = &v25[v44];
      uint64_t v46 = &v26[v44];
      *(void *)uint64_t v45 = *(void *)v46;
      v45[8] = v46[8];
      (*(void (**)(char *, void, uint64_t, int *))(v60 + 56))(v25, 0LL, 1LL, v27);
    }

    uint64_t v47 = v11[10];
    uint64_t v48 = &v9[v47];
    uint64_t v49 = &v10[v47];
    uint64_t v50 = type metadata accessor for Proto_Gpsd_Request(0LL);
    uint64_t v51 = *(void *)(v50 - 8);
    a3 = v62;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1LL, v50))
    {
      uint64_t v52 = sub_100003A0C(&qword_100350F20);
      memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64LL));
    }

    else
    {
      v63(v48, v49, v6);
      *(void *)&v48[*(int *)(v50 + 20)] = *(void *)&v49[*(int *)(v50 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v48, 0LL, 1LL, v50);
    }

    (*(void (**)(char *, void, uint64_t, int *))(v61 + 56))(v9, 0LL, 1LL, v11);
    uint64_t v7 = (void (*)(uint64_t, uint64_t, uint64_t))v63;
  }

  uint64_t v53 = *(int *)(a3 + 24);
  int v54 = (char *)(a1 + v53);
  uint64_t v55 = (char *)(a2 + v53);
  uint64_t v56 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL);
  uint64_t v57 = *(void *)(v56 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1LL, v56))
  {
    uint64_t v58 = sub_100003A0C(&qword_100350F58);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v54, (uint64_t)v55, v6);
    *(void *)&v54[*(int *)(v56 + 20)] = *(void *)&v55[*(int *)(v56 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0LL, 1LL, v56);
  }

  return a1;
}

uint64_t sub_1000149B4(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v145 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, char *, uint64_t))(v145 + 40);
  v7(a1, a2, v6);
  uint64_t v146 = a3;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = &a2[v8];
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v12 + 48);
  int v14 = v13(v9, 1LL, v11);
  int v15 = v13((uint64_t)v10, 1LL, v11);
  if (!v14)
  {
    if (v15)
    {
      sub_100004090(v9, type metadata accessor for CLP_LogEntry_AONLoc_Request);
      goto LABEL_7;
    }

    uint64_t v142 = v7;
    uint64_t v144 = v6;
    v7(v9, v10, v6);
    uint64_t v35 = v11[5];
    uint64_t v36 = v9 + v35;
    uint64_t v37 = &v10[v35];
    *(void *)uint64_t v36 = *(void *)v37;
    *(_BYTE *)(v36 + 8) = v37[8];
    uint64_t v38 = v11[6];
    uint64_t v39 = v9 + v38;
    uint64_t v40 = &v10[v38];
    *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
    *(_BYTE *)(v39 + 4) = v40[4];
    uint64_t v41 = v11[7];
    uint64_t v42 = v9 + v41;
    uint64_t v43 = &v10[v41];
    *(_DWORD *)uint64_t v42 = *(_DWORD *)v43;
    *(_BYTE *)(v42 + 4) = v43[4];
    *(_BYTE *)(v9 + v11[8]) = v10[v11[8]];
    uint64_t v44 = v11[9];
    uint64_t v45 = (char *)(v9 + v44);
    uint64_t v46 = &v10[v44];
    uint64_t v47 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
    uint64_t v139 = *((void *)v47 - 1);
    uint64_t v48 = *(uint64_t (**)(char *, uint64_t, int *))(v139 + 48);
    int v49 = v48(v45, 1LL, v47);
    int v50 = v48(v46, 1LL, v47);
    if (v49)
    {
      if (!v50)
      {
        *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
        *((void *)v45 + 2) = *((void *)v46 + 2);
        (*(void (**)(char *, char *, uint64_t))(v145 + 32))(&v45[v47[7]], &v46[v47[7]], v144);
        v45[v47[8]] = v46[v47[8]];
        uint64_t v51 = v47[9];
        uint64_t v52 = &v45[v51];
        uint64_t v53 = &v46[v51];
        v52[4] = v53[4];
        *(_DWORD *)uint64_t v52 = *(_DWORD *)v53;
        uint64_t v54 = v47[10];
        uint64_t v55 = &v45[v54];
        uint64_t v56 = &v46[v54];
        v55[4] = v56[4];
        *(_DWORD *)uint64_t v55 = *(_DWORD *)v56;
        uint64_t v57 = v47[11];
        uint64_t v58 = &v45[v57];
        uint64_t v59 = &v46[v57];
        v58[4] = v59[4];
        *(_DWORD *)uint64_t v58 = *(_DWORD *)v59;
        uint64_t v60 = v47[12];
        uint64_t v61 = &v45[v60];
        uint64_t v62 = &v46[v60];
        v61[4] = v62[4];
        *(_DWORD *)uint64_t v61 = *(_DWORD *)v62;
        uint64_t v63 = v47[13];
        uint64_t v64 = &v45[v63];
        char v65 = &v46[v63];
        v64[8] = v65[8];
        *(void *)uint64_t v64 = *(void *)v65;
        uint64_t v66 = v47[14];
        uint64_t v67 = &v45[v66];
        uint64_t v68 = &v46[v66];
        *(void *)uint64_t v67 = *(void *)v68;
        v67[8] = v68[8];
        (*(void (**)(char *, void, uint64_t, int *))(v139 + 56))(v45, 0LL, 1LL, v47);
LABEL_28:
        uint64_t v7 = v142;
LABEL_29:
        uint64_t v106 = v11[10];
        uint64_t v107 = v9 + v106;
        v108 = &v10[v106];
        uint64_t v109 = type metadata accessor for Proto_Gpsd_Request(0LL);
        uint64_t v110 = *(void *)(v109 - 8);
        uint64_t v111 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v110 + 48);
        int v112 = v111(v107, 1LL, v109);
        int v113 = v111((uint64_t)v108, 1LL, v109);
        if (v112)
        {
          uint64_t v6 = v144;
          if (!v113)
          {
            (*(void (**)(uint64_t, char *, uint64_t))(v145 + 32))(v107, v108, v144);
            *(void *)(v107 + *(int *)(v109 + 20)) = *(void *)&v108[*(int *)(v109 + 20)];
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v110 + 56))(v107, 0LL, 1LL, v109);
            goto LABEL_17;
          }
        }

        else
        {
          uint64_t v6 = v144;
          if (!v113)
          {
            v7(v107, v108, v144);
            uint64_t v135 = *(int *)(v109 + 20);
            uint64_t v136 = *(void *)(v107 + v135);
            *(void *)(v107 + v135) = *(void *)&v108[v135];
            swift_release(v136);
            goto LABEL_17;
          }

          sub_100004090(v107, type metadata accessor for Proto_Gpsd_Request);
        }

        size_t v32 = *(void *)(*(void *)(sub_100003A0C(&qword_100350F20) - 8) + 64LL);
        uint64_t v33 = (void *)v107;
        uint64_t v34 = v108;
LABEL_8:
        memcpy(v33, v34, v32);
        goto LABEL_17;
      }
    }

    else
    {
      if (!v50)
      {
        uint64_t v114 = *(void *)v45;
        *(void *)uint64_t v45 = *(void *)v46;
        swift_bridgeObjectRelease(v114);
        uint64_t v115 = *((void *)v45 + 1);
        *((void *)v45 + 1) = *((void *)v46 + 1);
        swift_bridgeObjectRelease(v115);
        uint64_t v116 = *((void *)v45 + 2);
        *((void *)v45 + 2) = *((void *)v46 + 2);
        swift_bridgeObjectRelease(v116);
        uint64_t v7 = v142;
        v142((uint64_t)&v45[v47[7]], &v46[v47[7]], v144);
        v45[v47[8]] = v46[v47[8]];
        uint64_t v117 = v47[9];
        uint64_t v118 = &v45[v117];
        uint64_t v119 = &v46[v117];
        v118[4] = v119[4];
        *(_DWORD *)uint64_t v118 = *(_DWORD *)v119;
        uint64_t v120 = v47[10];
        uint64_t v121 = &v45[v120];
        uint64_t v122 = &v46[v120];
        v121[4] = v122[4];
        *(_DWORD *)uint64_t v121 = *(_DWORD *)v122;
        uint64_t v123 = v47[11];
        v124 = &v45[v123];
        v125 = &v46[v123];
        v124[4] = v125[4];
        *(_DWORD *)v124 = *(_DWORD *)v125;
        uint64_t v126 = v47[12];
        uint64_t v127 = &v45[v126];
        v128 = &v46[v126];
        v127[4] = v128[4];
        *(_DWORD *)uint64_t v127 = *(_DWORD *)v128;
        uint64_t v129 = v47[13];
        int v130 = &v45[v129];
        uint64_t v131 = &v46[v129];
        v130[8] = v131[8];
        *(void *)int v130 = *(void *)v131;
        uint64_t v132 = v47[14];
        uint64_t v133 = &v45[v132];
        uint64_t v134 = &v46[v132];
        *(void *)uint64_t v133 = *(void *)v134;
        v133[8] = v134[8];
        goto LABEL_29;
      }

      sub_100004090((uint64_t)v45, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
    }

    uint64_t v105 = sub_100003A0C(&qword_100350F18);
    memcpy(v45, v46, *(void *)(*(void *)(v105 - 8) + 64LL));
    goto LABEL_28;
  }

  if (v15)
  {
LABEL_7:
    size_t v32 = *(void *)(*(void *)(sub_100003A0C(&qword_100350F50) - 8) + 64LL);
    uint64_t v33 = (void *)v9;
    uint64_t v34 = v10;
    goto LABEL_8;
  }

  __src = a2;
  uint64_t v141 = v7;
  int v16 = *(void (**)(uint64_t, char *, uint64_t))(v145 + 32);
  v16(v9, v10, v6);
  uint64_t v17 = v11[5];
  uint64_t v18 = v9 + v17;
  uint64_t v19 = &v10[v17];
  *(void *)uint64_t v18 = *(void *)v19;
  *(_BYTE *)(v18 + 8) = v19[8];
  uint64_t v20 = v11[6];
  uint64_t v21 = v9 + v20;
  uint64_t v22 = &v10[v20];
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  *(_BYTE *)(v21 + 4) = v22[4];
  uint64_t v23 = v11[7];
  uint64_t v24 = v9 + v23;
  uint64_t v25 = &v10[v23];
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = v25[4];
  *(_BYTE *)(v9 + v11[8]) = v10[v11[8]];
  uint64_t v26 = v11[9];
  uint64_t v27 = (void *)(v9 + v26);
  uint64_t v28 = &v10[v26];
  uint64_t v29 = v6;
  uint64_t v30 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  uint64_t v137 = *((void *)v30 - 1);
  uint64_t v143 = v29;
  uint64_t v138 = (void (*)(char *, char *, uint64_t))v16;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v137 + 48))(v28, 1LL, v30))
  {
    uint64_t v31 = sub_100003A0C(&qword_100350F18);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64LL));
  }

  else
  {
    *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
    v27[2] = *((void *)v28 + 2);
    v16((uint64_t)v27 + v30[7], &v28[v30[7]], v29);
    *((_BYTE *)v27 + v30[8]) = v28[v30[8]];
    uint64_t v69 = v30[9];
    uint64_t v70 = (char *)v27 + v69;
    uint64_t v71 = &v28[v69];
    v70[4] = v71[4];
    *(_DWORD *)uint64_t v70 = *(_DWORD *)v71;
    uint64_t v72 = v30[10];
    char v73 = (char *)v27 + v72;
    uint64_t v74 = &v28[v72];
    v73[4] = v74[4];
    *(_DWORD *)char v73 = *(_DWORD *)v74;
    uint64_t v75 = v30[11];
    uint64_t v76 = (char *)v27 + v75;
    char v77 = &v28[v75];
    v76[4] = v77[4];
    *(_DWORD *)uint64_t v76 = *(_DWORD *)v77;
    uint64_t v78 = v30[12];
    uint64_t v79 = (char *)v27 + v78;
    uint64_t v80 = &v28[v78];
    v79[4] = v80[4];
    *(_DWORD *)uint64_t v79 = *(_DWORD *)v80;
    uint64_t v81 = v30[13];
    uint64_t v82 = (char *)v27 + v81;
    uint64_t v83 = &v28[v81];
    v82[8] = v83[8];
    *(void *)uint64_t v82 = *(void *)v83;
    uint64_t v84 = v30[14];
    uint64_t v85 = (char *)v27 + v84;
    uint64_t v86 = &v28[v84];
    *(void *)uint64_t v85 = *(void *)v86;
    v85[8] = v86[8];
    (*(void (**)(void *, void, uint64_t, int *))(v137 + 56))(v27, 0LL, 1LL, v30);
  }

  uint64_t v87 = v11[10];
  uint64_t v88 = (char *)(v9 + v87);
  uint64_t v89 = &v10[v87];
  uint64_t v90 = type metadata accessor for Proto_Gpsd_Request(0LL);
  uint64_t v91 = *(void *)(v90 - 8);
  a2 = __src;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48))(v89, 1LL, v90))
  {
    uint64_t v92 = sub_100003A0C(&qword_100350F20);
    memcpy(v88, v89, *(void *)(*(void *)(v92 - 8) + 64LL));
    uint64_t v6 = v143;
  }

  else
  {
    uint64_t v6 = v143;
    v138(v88, v89, v143);
    *(void *)&v88[*(int *)(v90 + 20)] = *(void *)&v89[*(int *)(v90 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v91 + 56))(v88, 0LL, 1LL, v90);
  }

  uint64_t v7 = v141;
  (*(void (**)(uint64_t, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
LABEL_17:
  uint64_t v93 = *(int *)(v146 + 24);
  uint64_t v94 = (char *)(a1 + v93);
  uint64_t v95 = &a2[v93];
  uint64_t v96 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL);
  uint64_t v97 = *(void *)(v96 - 8);
  uint64_t v98 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v97 + 48);
  int v99 = v98(v94, 1LL, v96);
  int v100 = v98(v95, 1LL, v96);
  if (!v99)
  {
    if (!v100)
    {
      v7((uint64_t)v94, v95, v6);
      uint64_t v103 = *(int *)(v96 + 20);
      uint64_t v104 = *(void *)&v94[v103];
      *(void *)&v94[v103] = *(void *)&v95[v103];
      swift_release(v104);
      return a1;
    }

    sub_100004090((uint64_t)v94, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    goto LABEL_22;
  }

  if (v100)
  {
LABEL_22:
    uint64_t v101 = sub_100003A0C(&qword_100350F58);
    memcpy(v94, v95, *(void *)(*(void *)(v101 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v145 + 32))(v94, v95, v6);
  *(void *)&v94[*(int *)(v96 + 20)] = *(void *)&v95[*(int *)(v96 + 20)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v97 + 56))(v94, 0LL, 1LL, v96);
  return a1;
}

uint64_t sub_10001521C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100015228);
}

uint64_t sub_100015228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }

  else
  {
    uint64_t v11 = sub_100003A0C(&qword_100350F50);
    uint64_t v12 = *(void *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      uint64_t v8 = v11;
      uint64_t v13 = *(int *)(a3 + 20);
    }

    else
    {
      uint64_t v8 = sub_100003A0C(&qword_100350F58);
      uint64_t v12 = *(void *)(v8 - 8);
      uint64_t v13 = *(int *)(a3 + 24);
    }

    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_1000152C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000152D4);
}

uint64_t sub_1000152D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v13 = sub_100003A0C(&qword_100350F50);
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v15 = *(int *)(a4 + 20);
    }

    else
    {
      uint64_t v10 = sub_100003A0C(&qword_100350F58);
      uint64_t v14 = *(void *)(v10 - 8);
      uint64_t v15 = *(int *)(a4 + 24);
    }

    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_10001537C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v8[0] = *(void *)(v2 - 8) + 64LL;
    sub_1000119EC(319LL, &qword_100351470, type metadata accessor for CLP_LogEntry_AONLoc_Request);
    if (v5 <= 0x3F)
    {
      v8[1] = *(void *)(v4 - 8) + 64LL;
      sub_1000119EC( 319LL,  (unint64_t *)&unk_100351478,  type metadata accessor for CLP_LogEntry_AONLoc_Indication);
      if (v7 <= 0x3F)
      {
        v8[2] = *(void *)(v6 - 8) + 64LL;
        swift_initStructMetadata(a1, 256LL, 3LL, v8, a1 + 16);
      }
    }
  }

uint64_t sub_10001543C()
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0LL);
}

void sub_100015444(uint64_t a1)
{
  v13[0] = "\t";
  v13[1] = &unk_1002B4088;
  v13[2] = &unk_1002B41F8;
  sub_1000119EC(319LL, &qword_1003514D8, type metadata accessor for Proto_Gpsd_Response);
  if (v3 <= 0x3F)
  {
    v13[3] = *(void *)(v2 - 8) + 64LL;
    sub_1000119EC(319LL, &qword_1003514E0, type metadata accessor for Proto_Gpsd_Indication);
    if (v5 <= 0x3F)
    {
      v13[4] = *(void *)(v4 - 8) + 64LL;
      sub_1000119EC(319LL, &qword_1003514E8, type metadata accessor for CLP_LogEntry_AONLoc_Response);
      if (v7 <= 0x3F)
      {
        uint64_t v8 = *(void *)(v6 - 8) + 64LL;
        v13[5] = v8;
        sub_1000119EC(319LL, &qword_1003514F0, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
        if (v10 <= 0x3F)
        {
          v13[6] = *(void *)(v9 - 8) + 64LL;
          v13[7] = v8;
          sub_1000119EC( 319LL,  (unint64_t *)&unk_1003514F8,  type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
          if (v12 <= 0x3F)
          {
            v13[8] = *(void *)(v11 - 8) + 64LL;
            swift_updateClassMetadata2(a1, 256LL, 9LL, v13, a1 + 80);
          }
        }
      }
    }
  }

unint64_t sub_10001558C()
{
  unint64_t result = qword_1003516D0;
  if (!qword_1003516D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B3564, &type metadata for CLP_LogEntry_AONLoc_Indication.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_1003516D0);
  }

  return result;
}

unint64_t sub_1000155D0()
{
  unint64_t result = qword_1003516D8;
  if (!qword_1003516D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B3444, &type metadata for CLP_LogEntry_AONLoc_Request.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_1003516D8);
  }

  return result;
}

uint64_t *sub_100015614(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

unint64_t sub_100015654()
{
  unint64_t result = qword_100351760;
  if (!qword_100351760)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002D70D0, &type metadata for Proto_Gnss_Result);
    atomic_store(result, (unint64_t *)&qword_100351760);
  }

  return result;
}

unint64_t sub_100015698()
{
  unint64_t result = qword_100351768;
  if (!qword_100351768)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002D7138, &type metadata for Proto_Gnss_Result);
    atomic_store(result, (unint64_t *)&qword_100351768);
  }

  return result;
}

unint64_t sub_1000156DC()
{
  unint64_t result = qword_100351770;
  if (!qword_100351770)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BC3A0, &type metadata for CLP_LogEntry_PrivateData_WifiRfBand);
    atomic_store(result, (unint64_t *)&qword_100351770);
  }

  return result;
}

unint64_t sub_100015720()
{
  unint64_t result = qword_100351778;
  if (!qword_100351778)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002D9630, &type metadata for CLP_LogEntry_AONLoc_BtAdvertisement.BtType);
    atomic_store(result, (unint64_t *)&qword_100351778);
  }

  return result;
}

uint64_t sub_100015764(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100003A0C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_1000157B4@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = (unsigned int *)&enum case for ALBtAdvertisement.BtType.type7(_:);
    }
    else {
      uint64_t v3 = (unsigned int *)&enum case for ALBtAdvertisement.BtType.type18(_:);
    }
  }

  else
  {
    uint64_t v3 = (unsigned int *)&enum case for ALBtAdvertisement.BtType.unknown(_:);
  }

  uint64_t v4 = *v3;
  uint64_t v5 = type metadata accessor for ALBtAdvertisement.BtType(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104LL))(a2, v4, v5);
}

uint64_t sub_100015820(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ALBtAdvertisement.BtType(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(a1, v2);
  if (v4 != enum case for ALBtAdvertisement.BtType.unknown(_:))
  {
    if (v4 == enum case for ALBtAdvertisement.BtType.type7(_:)) {
      return 1LL;
    }
    if (v4 == enum case for ALBtAdvertisement.BtType.type18(_:)) {
      return 2LL;
    }
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  }

  return 0LL;
}

uint64_t sub_1000158C4()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_AONLoc_Type7Info(0LL);
  __chkstk_darwin(v0);
  uint64_t v45 = (uint64_t)&v43 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v2 = sub_100003A0C((uint64_t *)&unk_100368500);
  __chkstk_darwin(v2);
  int v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for ALBtAdvInfoType7(0LL);
  uint64_t v46 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v44 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100003A0C(&qword_1003517A0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for ALBtAdvertisement.BtType(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v43 - v16;
  uint64_t v18 = ALBtAdvertisement._machContTimeNs.getter(v15);
  if ((v19 & 1) == 0) {
    uint64_t v18 = sub_1002221B8(v18);
  }
  uint64_t v20 = ALBtAdvertisement._mac.getter(v18);
  if ((v21 & 1) == 0) {
    uint64_t v20 = sub_10022250C(v20);
  }
  uint64_t v22 = ALBtAdvertisement._rssidB.getter(v20);
  if ((v22 & 0x100000000LL) == 0) {
    uint64_t v22 = sub_10022284C(v22);
  }
  uint64_t v23 = ALBtAdvertisement._antennaIndex.getter(v22);
  if ((v23 & 0x100000000LL) == 0) {
    uint64_t v23 = sub_100222ECC(v23);
  }
  uint64_t v24 = ALBtAdvertisement._payload.getter(v23);
  if (v25 >> 60 != 15) {
    uint64_t v24 = sub_100223220(v24, v25);
  }
  uint64_t v26 = ALBtAdvertisement._channel.getter(v24);
  if ((v26 & 0x100000000LL) == 0) {
    uint64_t v26 = sub_100222B8C(v26);
  }
  uint64_t v27 = ALBtAdvertisement._productID.getter(v26);
  if ((v27 & 0x100000000LL) == 0) {
    uint64_t v27 = sub_100223FB8(v27);
  }
  uint64_t v28 = ALBtAdvertisement._identifier.getter(v27);
  if (v29) {
    uint64_t v28 = sub_100224314(v28, v29);
  }
  uint64_t v30 = ALBtAdvertisement._idsDeviceID.getter(v28);
  if (v31) {
    uint64_t v30 = sub_100224714(v30, v31);
  }
  uint64_t v32 = ALBtAdvertisement._deviceFlags.getter(v30);
  if ((v33 & 1) == 0) {
    uint64_t v32 = sub_100223938(v32);
  }
  uint64_t v34 = ALBtAdvertisement._discoveryFlags.getter(v32);
  if ((v35 & 1) == 0) {
    uint64_t v34 = sub_100223C78(v34);
  }
  ALBtAdvertisement._type.getter(v34);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10) == 1)
  {
    uint64_t v36 = sub_100015764((uint64_t)v9, &qword_1003517A0);
    goto LABEL_33;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v17, v9, v10);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v17, v10);
  int v37 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v14, v10);
  if (v37 == enum case for ALBtAdvertisement.BtType.unknown(_:)) {
    goto LABEL_31;
  }
  if (v37 != enum case for ALBtAdvertisement.BtType.type7(_:))
  {
    if (v37 == enum case for ALBtAdvertisement.BtType.type18(_:))
    {
      char v38 = 2;
      goto LABEL_32;
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
LABEL_31:
    char v38 = 0;
    goto LABEL_32;
  }

  char v38 = 1;
LABEL_32:
  sub_100223604(v38);
  uint64_t v36 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v17, v10);
LABEL_33:
  ALBtAdvertisement._type7Info.getter(v36);
  uint64_t v39 = v46;
  uint64_t v41 = v44;
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v44, v4, v5);
  uint64_t v42 = v45;
  sub_100015C98(v45);
  sub_100224C40(v42);
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v41, v5);
}

uint64_t sub_100015C98@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100003A0C(&qword_1003517A8);
  __chkstk_darwin(v2);
  int v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for ALBtAdvInfoType7.Placement(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = sub_100224BE0(a1);
  uint64_t isSame = ALBtAdvInfoType7._isSameAccount.getter(v12);
  uint64_t v14 = ALBtAdvInfoType7._isFamily.getter(isSame);
  uint64_t isShared = ALBtAdvInfoType7._isSharedHome.getter(v14);
  uint64_t isLeft = ALBtAdvInfoType7._isLeftBud.getter(isShared);
  uint64_t v17 = ALBtAdvInfoType7._isCase.getter(isLeft);
  ALBtAdvInfoType7._placement.getter(v17);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
  int v19 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v9, v5);
  if (v19 != enum case for ALBtAdvInfoType7.Placement.unknown(_:))
  {
    if (v19 == enum case for ALBtAdvInfoType7.Placement.inEar(_:))
    {
      char v20 = 1;
      goto LABEL_29;
    }

    if (v19 == enum case for ALBtAdvInfoType7.Placement.outOfEar(_:))
    {
      char v20 = 2;
      goto LABEL_29;
    }

    if (v19 == enum case for ALBtAdvInfoType7.Placement.inCase(_:))
    {
      char v20 = 3;
      goto LABEL_29;
    }

    if (v19 == enum case for ALBtAdvInfoType7.Placement.onEar(_:))
    {
      char v20 = 4;
      goto LABEL_29;
    }

    if (v19 == enum case for ALBtAdvInfoType7.Placement.offEar(_:))
    {
      char v20 = 5;
      goto LABEL_29;
    }

    if (v19 == enum case for ALBtAdvInfoType7.Placement.onNeck(_:))
    {
      char v20 = 6;
      goto LABEL_29;
    }

    if (v19 == enum case for ALBtAdvInfoType7.Placement.disabled(_:))
    {
      char v20 = 7;
      goto LABEL_29;
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }

  char v20 = 0;
LABEL_29:
  sub_10022610C(v20);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
}

uint64_t sub_100015F80@<X0>(uint64_t a1@<X8>)
{
  return sub_1000158C4();
}

uint64_t sub_100015FA4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CLP_LogEntry_AONLoc_Type7Info(0LL);
  __chkstk_darwin(v2);
  int v4 = &v30[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = sub_100003A0C((uint64_t *)&unk_100368500);
  __chkstk_darwin(v5);
  uint64_t v7 = &v30[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = type metadata accessor for ALBtAdvertisement.BtType(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v30[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = sub_100003A0C(&qword_1003517A0);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = &v30[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  ALBtAdvertisement.init()(v13);
  if (sub_1002223C8())
  {
    uint64_t v16 = sub_100222150();
    ALBtAdvertisement._machContTimeNs.setter(v16, 0LL);
  }

  if (sub_100222708())
  {
    uint64_t v17 = sub_1002224B8();
    ALBtAdvertisement._mac.setter(v17);
  }

  if (sub_100222A48())
  {
    unsigned int v18 = sub_1002227F8();
    v30[0] = 0;
    ALBtAdvertisement._rssidB.setter(v18);
  }

  if (sub_1002230C8())
  {
    unsigned int v19 = sub_100222E78();
    v30[4] = 0;
    ALBtAdvertisement._antennaIndex.setter(v19);
  }

  if (sub_1002234B8())
  {
    uint64_t v20 = sub_1002231B8();
    ALBtAdvertisement._payload.setter(v20);
  }

  if (sub_100222D88())
  {
    unsigned int v21 = sub_100222B38();
    v30[8] = 0;
    ALBtAdvertisement._channel.setter(v21);
  }

  if (sub_1002241B4())
  {
    unsigned int v22 = sub_100223F64();
    v30[12] = 0;
    ALBtAdvertisement._productID.setter(v22);
  }

  if (sub_1002245B4())
  {
    uint64_t v23 = sub_1002242A4();
    ALBtAdvertisement._identifier.setter(v23);
  }

  if (sub_1002249B4())
  {
    uint64_t v24 = sub_1002246A4();
    ALBtAdvertisement._idsDeviceID.setter(v24);
  }

  if (sub_100223B34())
  {
    uint64_t v25 = sub_1002238E4();
    ALBtAdvertisement._deviceFlags.setter(v25, 0LL);
  }

  if (sub_100223E74())
  {
    uint64_t v26 = sub_100223C24();
    ALBtAdvertisement._discoveryFlags.setter(v26, 0LL);
  }

  if (sub_1002237F8())
  {
    char v27 = sub_1002235B4();
    (*(void (**)(_BYTE *, void, uint64_t))(v9 + 104))(v11, *(unsigned int *)*(&off_10033DD58 + v27), v8);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v15, v11, v8);
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v9 + 56))(v15, 0LL, 1LL, v8);
    ALBtAdvertisement._type.setter(v15);
  }

  if (sub_100224FA8())
  {
    sub_100224AA4((uint64_t)v4);
    sub_100016328((uint64_t)v4);
    uint64_t v28 = type metadata accessor for ALBtAdvInfoType7(0LL);
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(v7, 0LL, 1LL, v28);
    ALBtAdvertisement._type7Info.setter(v7);
  }

  return sub_100004090(a1, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
}

uint64_t sub_100016328(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ALBtAdvInfoType7.Placement(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100003A0C(&qword_1003517A8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  ALBtAdvInfoType7.init()(v7);
  if (sub_100225DB0())
  {
    char v10 = sub_100225D18();
    ALBtAdvInfoType7._isSameAccount.setter(v10 & 1);
  }

  if (sub_100225E94())
  {
    char v11 = sub_100225DFC();
    ALBtAdvInfoType7._isFamily.setter(v11 & 1);
  }

  if (sub_100225F40())
  {
    char v12 = sub_100225EE0();
    ALBtAdvInfoType7._isSharedHome.setter(v12 & 1);
  }

  if (sub_100225FEC())
  {
    char v13 = sub_100225F8C();
    ALBtAdvInfoType7._isLeftBud.setter(v13 & 1);
  }

  if (sub_100226098())
  {
    char v14 = sub_100226038();
    ALBtAdvInfoType7._isCase.setter(v14 & 1);
  }

  if (sub_100226184())
  {
    char v15 = sub_1002260E4();
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *(unsigned int *)*(&off_10033DD70 + v15), v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v9, v5, v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v9, 0LL, 1LL, v2);
    ALBtAdvInfoType7._placement.setter(v9);
  }

  return sub_100004090(a1, type metadata accessor for CLP_LogEntry_AONLoc_Type7Info);
}

uint64_t sub_1000164FC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100017774( a1,  a2,  type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement,  &qword_1003517B0,  (uint64_t)&unk_1002D9870,  (void (*)(char *))sub_100015FA4,  a3);
}

uint64_t sub_100016530@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement(0LL);
  uint64_t v44 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v45 = (uint64_t)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for ALBtAdvertisement(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v46 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  char v11 = (char *)&v42 - v10;
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  __chkstk_darwin(v12);
  char v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100003A0C(&qword_1003517B8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for ALBtNotification(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  unsigned int v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  ALBtNotification.init()(v20);
  uint64_t v23 = *(void (**)(uint64_t, char *, uint64_t))(v19 + 32);
  uint64_t v47 = a2;
  v23(a2, v22, v18);
  if (sub_100225884())
  {
    sub_10022551C((uint64_t)v14);
    sub_1000869C4((uint64_t)v14);
    uint64_t v24 = type metadata accessor for ALTimeStamp(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56LL))(v17, 0LL, 1LL, v24);
    ALBtNotification._timestamp.setter(v17);
  }

  uint64_t v43 = a1;
  uint64_t v25 = *(void *)a1;
  uint64_t v26 = *(void *)(*(void *)a1 + 16LL);
  if (v26)
  {
    uint64_t v27 = v25 + ((*(unsigned __int8 *)(v44 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80));
    uint64_t v44 = *(void *)(v44 + 72);
    uint64_t v42 = v25;
    swift_bridgeObjectRetain(v25);
    uint64_t v28 = v46;
    do
    {
      uint64_t v29 = v45;
      sub_10000404C(v27, v45, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
      sub_100015FA4(v29);
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v28, v11, v6);
      uint64_t v30 = (void (*)(_BYTE *, void))ALBtNotification._advertisements.modify(v48);
      uint64_t v32 = v31;
      unint64_t v33 = *v31;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v31);
      *uint64_t v32 = v33;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v33 = sub_100017FE0( 0,  *(void *)(v33 + 16) + 1LL,  1,  v33,  (uint64_t *)&unk_100368670,  (uint64_t (*)(void))&type metadata accessor for ALBtAdvertisement);
        *uint64_t v32 = v33;
      }

      unint64_t v36 = *(void *)(v33 + 16);
      unint64_t v35 = *(void *)(v33 + 24);
      if (v36 >= v35 >> 1)
      {
        unint64_t v33 = sub_100017FE0( v35 > 1,  v36 + 1,  1,  v33,  (uint64_t *)&unk_100368670,  (uint64_t (*)(void))&type metadata accessor for ALBtAdvertisement);
        *uint64_t v32 = v33;
      }

      *(void *)(v33 + 16) = v36 + 1;
      uint64_t v28 = v46;
      (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))( v33 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
      + *(void *)(v7 + 72) * v36,
        v46,
        v6);
      v30(v48, 0LL);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
      v27 += v44;
      --v26;
    }

    while (v26);
    swift_bridgeObjectRelease(v42);
  }

  uint64_t v37 = v43;
  if (sub_1002259F0())
  {
    char v38 = sub_100225990();
    ALBtNotification._simulated.setter(v38 & 1);
  }

  if (sub_100225A9C())
  {
    char v39 = sub_100225A3C();
    ALBtNotification._isApOn.setter(v39 & 1);
  }

  if (sub_100225B48())
  {
    char v40 = sub_100225AE8();
    ALBtNotification._isScreenOn.setter(v40 & 1);
  }

  return sub_100004090(v37, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
}

uint64_t sub_100016910@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement(0LL);
  uint64_t v41 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for ALBtAdvertisement(0LL);
  uint64_t v42 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  __chkstk_darwin(v9);
  uint64_t v40 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100003A0C(&qword_1003517B8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for ALTimeStamp(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100225C4C(a1);
  ALBtNotification._timestamp.getter(v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14) == 1)
  {
    uint64_t v19 = sub_100015764((uint64_t)v13, &qword_1003517B8);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
    uint64_t v20 = v40;
    sub_100086A9C(v40);
    sub_1002255F4(v20);
    uint64_t v19 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }

  uint64_t v21 = ALBtNotification._advertisements.getter(v19);
  uint64_t v22 = *(void *)(v21 + 16);
  if (v22)
  {
    uint64_t v38 = v21;
    uint64_t v39 = v1;
    unint64_t v23 = v21 + ((*(unsigned __int8 *)(v42 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
    uint64_t v40 = *(void *)(v42 + 72);
    uint64_t v24 = *(void (**)(char *, unint64_t, uint64_t))(v42 + 16);
    uint64_t v25 = a1;
    do
    {
      v24(v8, v23, v6);
      sub_1002252CC((uint64_t)v5);
      sub_1000158C4();
      unint64_t v26 = *a1;
      if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
        unint64_t v26 = sub_100017FE0( 0,  *(void *)(v26 + 16) + 1LL,  1,  v26,  &qword_1003517D0,  type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
      }
      unint64_t v28 = *(void *)(v26 + 16);
      unint64_t v27 = *(void *)(v26 + 24);
      if (v28 >= v27 >> 1) {
        unint64_t v26 = sub_100017FE0( v27 > 1,  v28 + 1,  1,  v26,  &qword_1003517D0,  type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
      }
      *(void *)(v26 + 16) = v28 + 1;
      sub_100003E68( (uint64_t)v5,  v26 + ((*(unsigned __int8 *)(v41 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))
      + *(void *)(v41 + 72) * v28,
        type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
      a1 = v25;
      *uint64_t v25 = v26;
      (*(void (**)(char *, uint64_t))(v42 + 8))(v8, v6);
      v23 += v40;
      --v22;
    }

    while (v22);
    uint64_t v29 = swift_bridgeObjectRelease(v38);
  }

  else
  {
    uint64_t v29 = swift_bridgeObjectRelease(v21);
  }

  uint64_t v30 = ALBtNotification._simulated.getter(v29);
  uint64_t isAp = ALBtNotification._isApOn.getter(v30);
  char isScreen = ALBtNotification._isScreenOn.getter(isAp);
  if (isScreen != 2) {
    sub_100225AF4(isScreen & 1);
  }
  type metadata accessor for ALProtobufUtil();
  unint64_t v33 = a1;
  uint64_t v34 = type metadata accessor for CLP_LogEntry_AONLoc_BtNotification(0LL);
  uint64_t v35 = sub_10000FD98( &qword_100350F98,  type metadata accessor for CLP_LogEntry_AONLoc_BtNotification,  (uint64_t)&unk_1002D9B68);
  return static ALProtobufUtil.debug<A>(_:)(v33, v34, v35);
}

uint64_t sub_100016CEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v43 = a1;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_AONLoc_BtNotification(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for ALBtNotification(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (uint64_t *)((char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v14 = type metadata accessor for ALBtNotifications(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  ALBtNotifications.init()(v16);
  uint64_t v19 = v14;
  uint64_t v20 = v43;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a2, v18, v19);
  if (sub_100005E20()
    && (uint64_t v46 = v10,
        v47[0] = sub_100005BDC(),
        char v48 = 6,
        unint64_t v21 = sub_10000FF1C(),
        (dispatch thunk of static Equatable.== infix(_:_:)( v47,  &v48,  &type metadata for CLP_LogEntry_AONLoc_Indication.TypeEnum,  v21) & 1) != 0))
  {
    sub_100006D44(v13);
    uint64_t v22 = *v13;
    uint64_t v23 = *(void *)(*v13 + 16LL);
    if (v23)
    {
      uint64_t v41 = *v13;
      uint64_t v42 = v13;
      uint64_t v24 = v4;
      uint64_t v25 = v22 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
      uint64_t v44 = *(void *)(v24 + 72);
      uint64_t v45 = v7;
      swift_bridgeObjectRetain(v22);
      uint64_t v26 = (uint64_t)v46;
      do
      {
        sub_10000404C(v25, (uint64_t)v6, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
        unint64_t v27 = v6;
        sub_100016530((uint64_t)v6, v26);
        uint64_t v28 = a2;
        uint64_t v29 = (void (*)(_BYTE *, void))ALBtNotifications._results.modify(v47);
        uint64_t v31 = v30;
        unint64_t v32 = *v30;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v30);
        *uint64_t v31 = v32;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          unint64_t v32 = sub_100017FE0( 0,  *(void *)(v32 + 16) + 1LL,  1,  v32,  &qword_1003517C8,  (uint64_t (*)(void))&type metadata accessor for ALBtNotification);
          *uint64_t v31 = v32;
        }

        unint64_t v35 = *(void *)(v32 + 16);
        unint64_t v34 = *(void *)(v32 + 24);
        if (v35 >= v34 >> 1)
        {
          unint64_t v32 = sub_100017FE0( v34 > 1,  v35 + 1,  1,  v32,  &qword_1003517C8,  (uint64_t (*)(void))&type metadata accessor for ALBtNotification);
          *uint64_t v31 = v32;
        }

        *(void *)(v32 + 16) = v35 + 1;
        uint64_t v26 = (uint64_t)v46;
        (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))( v32 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
        + *(void *)(v8 + 72) * v35,
          v46,
          v45);
        v29(v47, 0LL);
        v25 += v44;
        --v23;
        a2 = v28;
        uint64_t v6 = v27;
      }

      while (v23);
      swift_bridgeObjectRelease(v41);
      uint64_t v13 = v42;
      uint64_t v20 = v43;
    }

    char v38 = sub_100005300();
    ALBtNotifications._isLastBatch.setter(v38 & 1);
    sub_100004090(v20, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    unint64_t v36 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication;
    uint64_t v37 = (uint64_t)v13;
  }

  else
  {
    unint64_t v36 = type metadata accessor for CLP_LogEntry_AONLoc_Indication;
    uint64_t v37 = v20;
  }

  return sub_100004090(v37, v36);
}

uint64_t sub_100017020@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement(0LL);
  uint64_t v98 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for ALBtAdvertisement(0LL);
  uint64_t v99 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  __chkstk_darwin(v10);
  uint64_t v80 = (uint64_t)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100003A0C(&qword_1003517B8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for ALTimeStamp(0LL);
  uint64_t v90 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v79 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_AONLoc_BtNotification(0LL);
  uint64_t v88 = *(void *)(v17 - 8);
  uint64_t v89 = v17;
  __chkstk_darwin(v17);
  int v100 = (unint64_t *)((char *)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v19 = type metadata accessor for ALBtNotification(0LL);
  uint64_t v91 = *(void *)(v19 - 8);
  uint64_t v92 = v19;
  __chkstk_darwin(v19);
  uint64_t v96 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0LL);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v74 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  uint64_t v26 = (unint64_t *)((char *)&v74 - v25);
  sub_10000738C(a1);
  uint64_t v78 = a1;
  sub_100005C2C(6);
  uint64_t v27 = sub_1000054EC(v26);
  uint64_t v77 = v2;
  uint64_t v28 = ALBtNotifications.results.getter(v27);
  uint64_t v87 = *(void *)(v28 + 16);
  uint64_t v95 = v26;
  if (v87)
  {
    uint64_t v86 = v15;
    uint64_t v76 = v24;
    uint64_t v29 = v91;
    unint64_t v30 = (*(unsigned __int8 *)(v29 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
    uint64_t v75 = v28;
    unint64_t v85 = v28 + v30;
    uint64_t v31 = type metadata accessor for ALProtobufUtil();
    uint64_t v32 = 0LL;
    uint64_t v83 = *(void *)(v29 + 72);
    uint64_t v84 = v31;
    unint64_t v33 = *(void (**)(char *, unint64_t, uint64_t))(v29 + 16);
    uint64_t v81 = v14;
    uint64_t v82 = v33;
    uint64_t v97 = v7;
    unint64_t v34 = v100;
    uint64_t v35 = v92;
    unint64_t v36 = v96;
    do
    {
      uint64_t v94 = v32;
      v82(v36, v85 + v83 * v32, v35);
      uint64_t v37 = sub_100225C4C(v34);
      ALBtNotification._timestamp.getter(v37);
      uint64_t v38 = v90;
      uint64_t v39 = v86;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v14, 1LL, v86) == 1)
      {
        uint64_t v40 = sub_100015764((uint64_t)v14, &qword_1003517B8);
      }

      else
      {
        uint64_t v41 = v79;
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v79, v14, v39);
        uint64_t v42 = v80;
        sub_100086A9C(v80);
        uint64_t v43 = v42;
        unint64_t v34 = v100;
        sub_1002255F4(v43);
        uint64_t v40 = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v41, v39);
      }

      uint64_t v44 = ALBtNotification._advertisements.getter(v40);
      uint64_t v45 = *(void *)(v44 + 16);
      if (v45)
      {
        unint64_t v46 = (*(unsigned __int8 *)(v99 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80);
        uint64_t v93 = v44;
        unint64_t v47 = v44 + v46;
        uint64_t v48 = *(void *)(v99 + 72);
        int v49 = *(void (**)(char *, unint64_t, uint64_t))(v99 + 16);
        do
        {
          v49(v9, v47, v7);
          sub_1002252CC((uint64_t)v6);
          sub_1000158C4();
          unint64_t v50 = *v34;
          if ((swift_isUniquelyReferenced_nonNull_native(*v34) & 1) == 0) {
            unint64_t v50 = sub_100017FE0( 0,  *(void *)(v50 + 16) + 1LL,  1,  v50,  &qword_1003517D0,  type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
          }
          unint64_t v52 = *(void *)(v50 + 16);
          unint64_t v51 = *(void *)(v50 + 24);
          if (v52 >= v51 >> 1) {
            unint64_t v50 = sub_100017FE0( v51 > 1,  v52 + 1,  1,  v50,  &qword_1003517D0,  type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
          }
          *(void *)(v50 + 16) = v52 + 1;
          sub_100003E68( (uint64_t)v6,  v50 + ((*(unsigned __int8 *)(v98 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80))
          + *(void *)(v98 + 72) * v52,
            type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
          unint64_t v34 = v100;
          *int v100 = v50;
          uint64_t v7 = v97;
          (*(void (**)(char *, uint64_t))(v99 + 8))(v9, v97);
          v47 += v48;
          --v45;
        }

        while (v45);
        uint64_t v53 = swift_bridgeObjectRelease(v93);
        uint64_t v14 = v81;
      }

      else
      {
        uint64_t v53 = swift_bridgeObjectRelease(v44);
      }

      uint64_t v54 = ALBtNotification._simulated.getter(v53);
      uint64_t v55 = v95;
      uint64_t isAp = ALBtNotification._isApOn.getter(v54);
      char isScreen = ALBtNotification._isScreenOn.getter(isAp);
      if (isScreen != 2) {
        sub_100225AF4(isScreen & 1);
      }
      uint64_t v58 = sub_10000FD98( &qword_100350F98,  type metadata accessor for CLP_LogEntry_AONLoc_BtNotification,  (uint64_t)&unk_1002D9B68);
      static ALProtobufUtil.debug<A>(_:)(v34, v89, v58);
      unint64_t v59 = *v55;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v55);
      uint64_t v61 = v14;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        unint64_t v59 = sub_100017FE0( 0,  *(void *)(v59 + 16) + 1LL,  1,  v59,  &qword_1003517C0,  type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
      }
      unint64_t v63 = *(void *)(v59 + 16);
      unint64_t v62 = *(void *)(v59 + 24);
      uint64_t v64 = v94;
      if (v63 >= v62 >> 1)
      {
        uint64_t v66 = sub_100017FE0( v62 > 1,  v63 + 1,  1,  v59,  &qword_1003517C0,  type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
        uint64_t v64 = v94;
        unint64_t v59 = v66;
      }

      *(void *)(v59 + 16) = v63 + 1;
      unint64_t v34 = v100;
      sub_100003E68( (uint64_t)v100,  v59 + ((*(unsigned __int8 *)(v88 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80))
      + *(void *)(v88 + 72) * v63,
        type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
      unint64_t v36 = v96;
      *uint64_t v95 = v59;
      uint64_t v35 = v92;
      (*(void (**)(char *, uint64_t))(v91 + 8))(v36, v92);
      uint64_t v32 = v64 + 1;
      BOOL v65 = v64 + 1 == v87;
      uint64_t v14 = v61;
    }

    while (!v65);
    uint64_t v67 = swift_bridgeObjectRelease(v75);
    uint64_t v24 = v76;
  }

  else
  {
    uint64_t v67 = swift_bridgeObjectRelease(v28);
  }

  char v68 = ALBtNotifications.isLastBatch.getter(v67);
  uint64_t v69 = (uint64_t)v95;
  sub_100005340(v68 & 1);
  sub_10000404C(v69, (uint64_t)v24, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
  uint64_t v70 = v78;
  sub_100006E90((uint64_t)v24);
  type metadata accessor for ALProtobufUtil();
  uint64_t v71 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL);
  uint64_t v72 = sub_10000FD98( &qword_100351088,  type metadata accessor for CLP_LogEntry_AONLoc_Indication,  (uint64_t)&unk_1002B3D4C);
  static ALProtobufUtil.debug<A>(_:)(v70, v71, v72);
  return sub_100004090(v69, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t ALBtNotifications.init(data:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100017774( a1,  a2,  type metadata accessor for CLP_LogEntry_AONLoc_Indication,  &qword_100351088,  (uint64_t)&unk_1002B3D4C,  (void (*)(char *))sub_100016CEC,  a3);
}

uint64_t sub_100017774@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X4>, void (*a6)(char *)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v25 = a7;
  uint64_t v26 = a6;
  uint64_t v12 = type metadata accessor for BinaryDecodingOptions(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = a3(0LL);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v25 - v19;
  uint64_t v28 = 0LL;
  memset(v27, 0, sizeof(v27));
  uint64_t v21 = sub_100017F58(a1, a2);
  BinaryDecodingOptions.init()(v21);
  uint64_t v22 = sub_10000FD98(a4, a3, a5);
  uint64_t v23 = v29;
  Message.init(serializedData:extensions:partial:options:)(a1, a2, v27, 0LL, v14, v15, v22);
  if (v23) {
    return sub_100017F9C(a1, a2);
  }
  sub_10000404C((uint64_t)v20, (uint64_t)v18, a3);
  v26(v18);
  sub_100017F9C(a1, a2);
  return sub_100004090((uint64_t)v20, a3);
}

uint64_t ALBtNotifications.serializedData()()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for ALBtNotifications(0LL);
  uint64_t v44 = *(char **)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v43 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100017020((uint64_t)v11);
  if (!v1)
  {
    uint64_t v12 = sub_10000FD98( &qword_100351088,  type metadata accessor for CLP_LogEntry_AONLoc_Indication,  (uint64_t)&unk_1002B3D4C);
    uint64_t v13 = Message.serializedData(partial:)(0LL, v9, v12);
    unint64_t v15 = v14;
    uint64_t v16 = (uint64_t)v11;
    uint64_t v17 = v6;
    uint64_t v18 = v5;
    sub_100004090(v16, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    uint64_t v41 = v17;
    corelog.getter((uint64_t)v8);
    uint64_t v21 = v43;
    uint64_t v20 = v44;
    (*((void (**)(char *, uint64_t, uint64_t))v44 + 2))(v43, v2, v3);
    sub_100017F58(v13, v15);
    uint64_t v22 = v3;
    uint64_t v42 = v13;
    uint64_t v23 = sub_100017F58(v13, v15);
    uint64_t v24 = v21;
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    int v27 = v26;
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v28 = swift_slowAlloc(22LL, -1LL);
      uint64_t v36 = v22;
      uint64_t v29 = v28;
      uint64_t v39 = swift_slowAlloc(64LL, -1LL);
      uint64_t v47 = v39;
      *(_DWORD *)uint64_t v29 = 136446466;
      int v38 = v27;
      Swift::String v30 = ALBtNotifications.description()();
      uint64_t v45 = sub_1000181EC(v30._countAndFlagsBits, (unint64_t)v30._object, &v47);
      uint64_t v40 = v18;
      os_log_t v37 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease(v30._object);
      (*((void (**)(char *, uint64_t))v44 + 1))(v24, v36);
      *(_WORD *)(v29 + 12) = 2082;
      uint64_t v0 = v42;
      sub_100017F58(v42, v15);
      uint64_t v31 = Data.description.getter(v0, v15);
      uint64_t v44 = v8;
      unint64_t v33 = v32;
      sub_100017F9C(v0, v15);
      uint64_t v45 = sub_1000181EC(v31, v33, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v29 + 14, v29 + 22);
      swift_bridgeObjectRelease(v33);
      sub_100017F9C(v0, v15);
      sub_100017F9C(v0, v15);
      os_log_t v34 = v37;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  (os_log_type_t)v38,  "#BT,serializedData,notif,%{public}s,data,%{public}s",  (uint8_t *)v29,  0x16u);
      uint64_t v35 = v39;
      swift_arrayDestroy(v39, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v41 + 8))(v44, v40);
    }

    else
    {
      (*((void (**)(char *, uint64_t))v20 + 1))(v24, v22);
      uint64_t v0 = v42;
      sub_100017F9C(v42, v15);
      sub_100017F9C(v0, v15);

      (*(void (**)(char *, uint64_t))(v41 + 8))(v8, v18);
    }
  }

  return v0;
}

uint64_t static ALBtNotifications.serializedIndications(results:isLastBatch:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ALBtNotifications(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = swift_bridgeObjectRetain(a1);
  ALBtNotifications.init(results:isLastBatch:)(v8, a2);
  uint64_t v9 = ALBtNotifications.serializedData()();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v9;
}

void sub_100017D70(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100017D9C()
{
  uint64_t v1 = enum case for ALBtAdvInfoType7.Placement.unknown(_:);
  uint64_t v2 = ((uint64_t (*)(void))type metadata accessor for ALBtAdvInfoType7.Placement)(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 104LL))(v0, v1, v2);
}

uint64_t sub_100017E24(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ALBtAdvInfoType7.Placement(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(a1, v2);
  if (v4 == enum case for ALBtAdvInfoType7.Placement.unknown(_:)) {
    return 0LL;
  }
  if (v4 == enum case for ALBtAdvInfoType7.Placement.inEar(_:)) {
    return 1LL;
  }
  if (v4 == enum case for ALBtAdvInfoType7.Placement.outOfEar(_:)) {
    return 2LL;
  }
  if (v4 == enum case for ALBtAdvInfoType7.Placement.inCase(_:)) {
    return 3LL;
  }
  if (v4 == enum case for ALBtAdvInfoType7.Placement.onEar(_:)) {
    return 4LL;
  }
  if (v4 == enum case for ALBtAdvInfoType7.Placement.offEar(_:)) {
    return 5LL;
  }
  if (v4 == enum case for ALBtAdvInfoType7.Placement.onNeck(_:)) {
    return 6LL;
  }
  if (v4 != enum case for ALBtAdvInfoType7.Placement.disabled(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return 0LL;
  }

  return 7LL;
}

uint64_t sub_100017F58(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100017F9C(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100017FE0( char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division by zero",  16LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14377LL,  0);
LABEL_31:
        __break(1u);
        return result;
      }

      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v10 = a2;
  }

  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v13 = sub_100003A0C(a5);
  uint64_t v14 = *(void *)(a6(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v18 = (void *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  size_t v19 = j__malloc_size(v18);
  if (!v15) {
    goto LABEL_29;
  }
  if (v19 - v17 == 0x8000000000000000LL && v15 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division results in an overflow",  31LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14384LL,  0);
    goto LABEL_31;
  }

  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  uint64_t v21 = a6(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    unint64_t v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(void *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }

    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }

    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_10001888C(0LL, v11, v24, a4, a6);
  }

  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

uint64_t sub_1000181EC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1000182BC(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10001884C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10001884C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  sub_10001882C(v12);
  return v7;
}

uint64_t sub_1000182BC(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
            uint64_t result = 0LL;
            *a1 = (uint64_t)__dst;
            return result;
          }

          goto LABEL_17;
        }
      }
    }

LABEL_13:
    uint64_t result = sub_100018474(a5, a6);
    *a1 = v13;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  v14,  1173LL,  0);
    __break(1u);
    return result;
  }

    uint64_t v67 = &qword_100355040;
LABEL_14:
    char v68 = v75;
    goto LABEL_15;
  }

  uint64_t v82 = v221;
  sub_10000E6C0(v75, v221, &qword_100351860);
  uint64_t v83 = v78(v76, 1LL, v77);
  uint64_t v81 = (uint64_t)v227;
  uint64_t v80 = v228;
  if (v83 == 1)
  {
    sub_100015764(v230, &qword_100351860);
    sub_100004090(v82, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
    goto LABEL_13;
  }

  uint64_t v86 = v220;
  sub_100003E68(v76, v220, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  uint64_t v87 = sub_100065AC0( v82,  v86,  type metadata accessor for CLP_LogEntry_PrivateData_SyncState,  (uint64_t (*)(uint64_t, uint64_t))sub_10003F0FC);
  sub_100004090(v86, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  sub_100015764(v230, &qword_100351860);
  sub_100004090(v82, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  sub_100015764(v75, &qword_100351860);
  if ((v87 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_20:
  uint64_t v88 = (uint64_t *)(v65
                  + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds);
  swift_beginAccess( v65 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds,  v255,  0LL,  0LL);
  uint64_t v89 = *v88;
  uint64_t v90 = *((_BYTE *)v88 + 8);
  uint64_t v91 = &v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds];
  swift_beginAccess( &v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds],  v254,  0LL,  0LL);
  if ((v90 & 1) != 0)
  {
    if ((v91[8] & 1) == 0) {
      goto LABEL_16;
    }
  }

  else if ((v91[8] & 1) != 0 || v89 != *(void *)v91)
  {
    goto LABEL_16;
  }

  uint64_t v92 = (uint64_t *)(v65
                  + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds);
  swift_beginAccess( v65 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds,  &v253,  0LL,  0LL);
  uint64_t v93 = *v92;
  uint64_t v94 = *((_BYTE *)v92 + 8);
  uint64_t v95 = &v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds];
  swift_beginAccess( &v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds],  &v252,  0LL,  0LL);
  if ((v94 & 1) != 0)
  {
    if ((v95[8] & 1) == 0) {
      goto LABEL_16;
    }
  }

  else if ((v95[8] & 1) != 0 || v93 != *(void *)v95)
  {
    goto LABEL_16;
  }

  uint64_t v96 = (uint64_t *)(v65
                  + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds);
  swift_beginAccess( v65 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds,  &v251,  0LL,  0LL);
  uint64_t v97 = *v96;
  uint64_t v98 = *((_BYTE *)v96 + 8);
  uint64_t v99 = &v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds];
  swift_beginAccess( &v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds],  &v250,  0LL,  0LL);
  if ((v98 & 1) != 0)
  {
    if ((v99[8] & 1) == 0) {
      goto LABEL_16;
    }
  }

  else if ((v99[8] & 1) != 0 || v97 != *(void *)v99)
  {
    goto LABEL_16;
  }

  int v100 = v65
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  swift_beginAccess( v65 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime,  &v249,  0LL,  0LL);
  uint64_t v101 = v100;
  uint64_t v102 = v219;
  sub_10000E6C0(v101, v219, &qword_100351838);
  uint64_t v103 = (uint64_t)&v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime];
  swift_beginAccess( &v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime],  &v248,  0LL,  0LL);
  uint64_t v104 = v217;
  uint64_t v105 = v217 + *(int *)(v213 + 48);
  sub_10000E6C0(v102, v217, &qword_100351838);
  sub_10000E6C0(v103, v105, &qword_100351838);
  uint64_t v106 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v214 + 48);
  uint64_t v107 = v216;
  if (v106(v104, 1LL, v216) == 1)
  {
    sub_100015764(v102, &qword_100351838);
    v108 = v106(v105, 1LL, v107);
    uint64_t v109 = v218;
    if (v108 == 1)
    {
      sub_100015764(v104, &qword_100351838);
      goto LABEL_42;
    }

    uint64_t v45 = &qword_100354FD8;
LABEL_28:
    uint64_t v46 = v52;
    goto LABEL_29;
  }

  uint64_t v56 = v116;
  sub_10000E6C0(v52, v116, &qword_1003518E0);
  if (v54(v53, 1LL, v55) == 1)
  {
    sub_100015764(v50, &qword_1003518E0);
    sub_100004090(v56, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
    goto LABEL_13;
  }

  uint64_t v57 = v110;
  sub_100003E68(v53, v110, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  uint64_t v58 = sub_100062FDC(v56, v57);
  sub_100004090(v57, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  sub_100015764(v50, &qword_1003518E0);
  sub_100004090(v56, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  sub_100015764(v52, &qword_1003518E0);
  if ((v58 & 1) == 0) {
    goto LABEL_30;
  }
LABEL_15:
  unint64_t v59 = v39
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess( v39 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou,  v129,  0LL,  0LL);
  uint64_t v60 = v113;
  sub_10000E6C0(v59, v113, &qword_1003518E8);
  uint64_t v61 = v41
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess( v41 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou,  v128,  0LL,  0LL);
  unint64_t v52 = v115;
  unint64_t v62 = v115 + *(int *)(v111 + 48);
  sub_10000E6C0(v60, v115, &qword_1003518E8);
  sub_10000E6C0(v61, v62, &qword_1003518E8);
  unint64_t v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v112 + 48);
  uint64_t v64 = v114;
  if (v63(v52, 1LL, v114) == 1)
  {
    sub_100015764(v60, &qword_1003518E8);
    if (v63(v62, 1LL, v64) == 1)
    {
      sub_100015764(v52, &qword_1003518E8);
      goto LABEL_22;
    }

    goto LABEL_20;
  }

  BOOL v65 = v109;
  sub_10000E6C0(v52, v109, &qword_1003518E8);
  if (v63(v62, 1LL, v64) == 1)
  {
    sub_100015764(v60, &qword_1003518E8);
    sub_100004090(v65, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
LABEL_20:
    uint64_t v45 = &qword_100354FD0;
    goto LABEL_28;
  }

  uint64_t v66 = v101;
  sub_100003E68(v62, v101, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  uint64_t v67 = sub_100065AC0( v65,  v66,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo,  (uint64_t (*)(uint64_t, uint64_t))sub_1000557A8);
  sub_100004090(v66, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  sub_100015764(v60, &qword_1003518E8);
  sub_100004090(v65, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  sub_100015764(v52, &qword_1003518E8);
  if ((v67 & 1) == 0) {
    goto LABEL_30;
  }
LABEL_22:
  char v68 = v39
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess( v39 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo,  v127,  0LL,  0LL);
  uint64_t v69 = v104;
  sub_10000E6C0(v68, v104, &qword_1003518F0);
  uint64_t v70 = v41
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess( v41 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo,  v126,  0LL,  0LL);
  unint64_t v52 = v106;
  uint64_t v71 = v106 + *(int *)(v102 + 48);
  sub_10000E6C0(v69, v106, &qword_1003518F0);
  sub_10000E6C0(v70, v71, &qword_1003518F0);
  uint64_t v72 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v103 + 48);
  char v73 = v105;
  if (v72(v52, 1LL, v105) != 1)
  {
    uint64_t v77 = v100;
    sub_10000E6C0(v52, v100, &qword_1003518F0);
    uint64_t v78 = v72(v71, 1LL, v73);
    uint64_t v75 = (uint64_t)v108;
    uint64_t v76 = (uint64_t)v107;
    if (v78 == 1)
    {
      sub_100015764(v69, &qword_1003518F0);
      sub_100004090(v77, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
      goto LABEL_27;
    }

    uint64_t v80 = v95;
    sub_100003E68(v71, v95, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
    uint64_t v81 = sub_100063688(v77, v80);
    sub_100004090(v80, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
    sub_100015764(v69, &qword_1003518F0);
    sub_100004090(v77, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
    sub_100015764(v52, &qword_1003518F0);
    if ((v81 & 1) != 0) {
      goto LABEL_34;
    }
LABEL_30:
    swift_release(v39);
    swift_release(v41);
    return 0LL;
  }

  sub_100015764(v69, &qword_1003518F0);
  uint64_t v74 = v72(v71, 1LL, v73);
  uint64_t v75 = (uint64_t)v108;
  uint64_t v76 = (uint64_t)v107;
  if (v74 != 1)
  {
LABEL_27:
    uint64_t v45 = &qword_100354FC8;
    goto LABEL_28;
  }

  sub_100015764(v52, &qword_1003518F0);
LABEL_34:
  uint64_t v82 = v39
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess( v39 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic,  v125,  0LL,  0LL);
  sub_10000E6C0(v82, v76, &qword_1003518F8);
  uint64_t v83 = v41
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess( v41 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic,  v124,  0LL,  0LL);
  uint64_t v84 = v99;
  unint64_t v85 = v99 + *(int *)(v96 + 48);
  sub_10000E6C0(v76, v99, &qword_1003518F8);
  uint64_t v86 = v83;
  uint64_t v87 = v84;
  sub_10000E6C0(v86, v85, &qword_1003518F8);
  uint64_t v88 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v97 + 48);
  uint64_t v89 = v84;
  uint64_t v90 = v98;
  if (v88(v89, 1LL, v98) == 1)
  {
    swift_release(v39);
    swift_release(v41);
    sub_100015764(v76, &qword_1003518F8);
    if (v88(v85, 1LL, v90) == 1)
    {
      sub_100015764(v87, &qword_1003518F8);
      return 1LL;
    }

    goto LABEL_39;
  }

  sub_10000E6C0(v87, v75, &qword_1003518F8);
  if (v88(v85, 1LL, v90) == 1)
  {
    swift_release(v39);
    swift_release(v41);
    sub_100015764(v76, &qword_1003518F8);
    sub_100004090(v75, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
LABEL_39:
    sub_100015764(v87, &qword_100354FC0);
    return 0LL;
  }

  uint64_t v91 = v94;
  sub_100003E68(v85, v94, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  uint64_t v92 = sub_100064328(v75, v91);
  swift_release(v39);
  swift_release(v41);
  sub_100004090(v91, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  sub_100015764(v76, &qword_1003518F8);
  sub_100004090(v75, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  sub_100015764(v87, &qword_1003518F8);
  return (v92 & 1) != 0;
}

    unint64_t v63 = &qword_100354F90;
LABEL_14:
    sub_100015764(v54, v63);
    goto LABEL_43;
  }

  uint64_t v61 = v127;
  sub_10000E6C0(v54, v127, &qword_100351910);
  unint64_t v62 = v55(v52, 1LL, v57);
  unint64_t v59 = (uint64_t)v129;
  uint64_t v60 = v134;
  if (v62 == 1)
  {
    sub_100015764(v136, &qword_100351910);
    sub_100004090(v61, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
    goto LABEL_13;
  }

  uint64_t v64 = v61;
  BOOL v65 = v126;
  sub_100003E68(v52, v126, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  uint64_t v66 = sub_100065AC0(v64, v65, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, sub_10004C9A4);
  sub_100004090(v65, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  sub_100015764(v136, &qword_100351910);
  sub_100004090(v64, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  sub_100015764(v54, &qword_100351910);
  if ((v66 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_16:
  uint64_t v67 = (uint64_t *)(v43
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
  swift_beginAccess( v43 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo,  v151,  0LL,  0LL);
  char v68 = *v67;
  uint64_t v69 = (uint64_t *)(v42
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
  swift_beginAccess( v42 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo,  v150,  0LL,  0LL);
  uint64_t v70 = *v69;
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRetain(v70);
  uint64_t v71 = sub_10005E880( v68,  v70,  type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  (uint64_t (*)(uint64_t, uint64_t))sub_10004FEB8);
  swift_bridgeObjectRelease(v68);
  swift_bridgeObjectRelease(v70);
  if ((v71 & 1) == 0) {
    goto LABEL_43;
  }
  uint64_t v72 = (uint64_t *)(v43
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
  swift_beginAccess( v43 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections,  &v149,  0LL,  0LL);
  char v73 = *v72;
  uint64_t v74 = (uint64_t *)(v42
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
  swift_beginAccess( v42 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections,  &v148,  0LL,  0LL);
  uint64_t v75 = *v74;
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v75);
  uint64_t v76 = sub_10005EA64(v73, v75);
  swift_bridgeObjectRelease(v73);
  swift_bridgeObjectRelease(v75);
  if ((v76 & 1) == 0) {
    goto LABEL_43;
  }
  uint64_t v77 = v43
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess( v43 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion,  &v147,  0LL,  0LL);
  sub_10000E6C0(v77, v60, &qword_100351918);
  uint64_t v78 = v42
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess( v42 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion,  &v146,  0LL,  0LL);
  uint64_t v79 = v125;
  uint64_t v80 = v125 + *(int *)(v122 + 48);
  sub_10000E6C0(v60, v125, &qword_100351918);
  uint64_t v81 = v78;
  uint64_t v54 = v79;
  sub_10000E6C0(v81, v80, &qword_100351918);
  uint64_t v82 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v123 + 48);
  uint64_t v83 = v79;
  uint64_t v84 = v124;
  if (v82(v83, 1LL, v124) == 1)
  {
    sub_100015764(v60, &qword_100351918);
    if (v82(v80, 1LL, v84) == 1)
    {
      sub_100015764(v54, &qword_100351918);
      goto LABEL_25;
    }

    goto LABEL_23;
  }

  unint64_t v85 = v121;
  sub_10000E6C0(v54, v121, &qword_100351918);
  if (v82(v80, 1LL, v84) == 1)
  {
    sub_100015764(v134, &qword_100351918);
    sub_100004090(v85, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
LABEL_23:
    unint64_t v63 = &qword_100354F88;
    goto LABEL_14;
  }

  uint64_t v86 = v119;
  sub_100003E68(v80, v119, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  uint64_t v87 = sub_100065AC0( v85,  v86,  type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo,  (uint64_t (*)(uint64_t, uint64_t))sub_100058B88);
  sub_100004090(v86, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  sub_100015764(v134, &qword_100351918);
  sub_100004090(v85, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  sub_100015764(v54, &qword_100351918);
  if ((v87 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_25:
  uint64_t v88 = v43
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec;
  swift_beginAccess( v43 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec,  &v145,  0LL,  0LL);
  uint64_t v89 = *(double *)v88;
  uint64_t v90 = *(_BYTE *)(v88 + 8);
  uint64_t v91 = v42
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec;
  swift_beginAccess( v42 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec,  &v144,  0LL,  0LL);
  if ((v90 & 1) != 0)
  {
    uint64_t v92 = (uint64_t)v120;
    if ((*(_BYTE *)(v91 + 8) & 1) == 0) {
      goto LABEL_43;
    }
  }

  else
  {
    uint64_t v92 = (uint64_t)v120;
  }

  uint64_t v93 = v43
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  swift_beginAccess( v43 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec,  &v143,  0LL,  0LL);
  uint64_t v94 = *(double *)v93;
  uint64_t v95 = *(_BYTE *)(v93 + 8);
  uint64_t v96 = v42
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  swift_beginAccess( v42 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec,  &v142,  0LL,  0LL);
  if ((v95 & 1) != 0)
  {
    if ((*(_BYTE *)(v96 + 8) & 1) == 0) {
      goto LABEL_43;
    }
  }

  else if ((*(_BYTE *)(v96 + 8) & 1) != 0 || v94 != *(double *)v96)
  {
    goto LABEL_43;
  }

  uint64_t v97 = v43
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess( v43 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel,  &v141,  0LL,  0LL);
  sub_10000E6C0(v97, v59, &qword_100351920);
  uint64_t v98 = v42
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess( v42 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel,  &v140,  0LL,  0LL);
  uint64_t v99 = v118;
  int v100 = v118 + *(int *)(v115 + 48);
  sub_10000E6C0(v59, v118, &qword_100351920);
  uint64_t v101 = v98;
  uint64_t v54 = v99;
  sub_10000E6C0(v101, v100, &qword_100351920);
  uint64_t v102 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116 + 48);
  uint64_t v103 = v99;
  uint64_t v104 = v117;
  if (v102(v103, 1LL, v117) != 1)
  {
    sub_10000E6C0(v54, v92, &qword_100351920);
    if (v102(v100, 1LL, v104) == 1)
    {
      sub_100015764(v59, &qword_100351920);
      sub_100004090(v92, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
      goto LABEL_40;
    }

    uint64_t v105 = v114;
    sub_100003E68(v100, v114, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
    uint64_t v106 = sub_100061020(v92, v105);
    sub_100004090(v105, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
    sub_100015764(v59, &qword_100351920);
    sub_100004090(v92, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
    sub_100015764(v54, &qword_100351920);
    if ((v106 & 1) != 0) {
      goto LABEL_42;
    }
LABEL_43:
    swift_release(v43);
    swift_release(v42);
    uint64_t v111 = 0;
    return v111 & 1;
  }

  sub_100015764(v59, &qword_100351920);
  if (v102(v100, 1LL, v104) != 1)
  {
LABEL_40:
    unint64_t v63 = &qword_100354F80;
    goto LABEL_14;
  }

  sub_100015764(v54, &qword_100351920);
LABEL_42:
  uint64_t v107 = (uint64_t *)(v43
                   + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset[0]);
  swift_beginAccess( v43 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset[0],  &v139,  0LL,  0LL);
  v108 = *v107;
  uint64_t v109 = (uint64_t *)(v42
                   + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset[0]);
  swift_beginAccess( v42 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset[0],  &v138,  0LL,  0LL);
  uint64_t v110 = *v109;
  swift_bridgeObjectRetain(v108);
  swift_bridgeObjectRetain(v110);
  uint64_t v111 = sub_10005ECBC(v108, v110);
  swift_bridgeObjectRelease(v108);
  swift_bridgeObjectRelease(v110);
  swift_release(v43);
  swift_release(v42);
  return v111 & 1;
}

    sub_100015764(v41, &qword_10035C478);
    goto LABEL_58;
  }

  uint64_t v43 = v97;
  sub_10000E6C0(v41, v97, &qword_100355600);
  if (v33(v42, 1LL, v32) == 1)
  {
    sub_100015764(v102, &qword_100355600);
    sub_100004090(v43, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    goto LABEL_13;
  }

  uint64_t v44 = v98;
  sub_100003E68(v42, v98, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  uint64_t v45 = sub_10011BB28(v43, v44);
  sub_100004090(v44, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  sub_100015764(v102, &qword_100355600);
  sub_100004090(v43, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  sub_100015764(v41, &qword_100355600);
  if ((v45 & 1) == 0) {
    goto LABEL_58;
  }
LABEL_15:
  uint64_t v46 = v34
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  swift_beginAccess( v34 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading,  v121,  0LL,  0LL);
  uint64_t v47 = *(float *)v46;
  uint64_t v48 = *(_BYTE *)(v46 + 4);
  int v49 = a2
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  swift_beginAccess( a2 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading,  v120,  0LL,  0LL);
  if ((v48 & 1) != 0)
  {
    if ((*(_BYTE *)(v49 + 4) & 1) == 0) {
      goto LABEL_58;
    }
  }

  else if ((*(_BYTE *)(v49 + 4) & 1) != 0 || v47 != *(float *)v49)
  {
    goto LABEL_58;
  }

  unint64_t v50 = v34
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  swift_beginAccess( v34 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading,  &v119,  0LL,  0LL);
  unint64_t v51 = *(float *)v50;
  unint64_t v52 = *(_BYTE *)(v50 + 4);
  uint64_t v53 = a2
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  swift_beginAccess( a2 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading,  &v118,  0LL,  0LL);
  if ((v52 & 1) != 0)
  {
    if ((*(_BYTE *)(v53 + 4) & 1) == 0) {
      goto LABEL_58;
    }
  }

  else if ((*(_BYTE *)(v53 + 4) & 1) != 0 || v51 != *(float *)v53)
  {
    goto LABEL_58;
  }

  uint64_t v54 = v34
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  swift_beginAccess( v34 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy,  &v117,  0LL,  0LL);
  uint64_t v55 = *(float *)v54;
  uint64_t v56 = *(_BYTE *)(v54 + 4);
  uint64_t v57 = a2
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  swift_beginAccess( a2 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy,  &v116,  0LL,  0LL);
  if ((v56 & 1) != 0)
  {
    if ((*(_BYTE *)(v57 + 4) & 1) == 0) {
      goto LABEL_58;
    }
  }

  else if ((*(_BYTE *)(v57 + 4) & 1) != 0 || v55 != *(float *)v57)
  {
    goto LABEL_58;
  }

  uint64_t v58 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
  swift_beginAccess( v34 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel,  &v115,  0LL,  0LL);
  unint64_t v59 = *v58;
  uint64_t v60 = (unsigned __int8 *)(a2
                          + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
  swift_beginAccess( a2 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel,  &v114,  0LL,  0LL);
  uint64_t v61 = *v60;
  if (v59 == 8)
  {
    if (v61 != 8) {
      goto LABEL_58;
    }
  }

  else if (v61 == 8 || v59 != v61)
  {
    goto LABEL_58;
  }

  unint64_t v62 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  swift_beginAccess( v34 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias,  &v113,  0LL,  0LL);
  unint64_t v63 = *v62;
  uint64_t v64 = (unsigned __int8 *)(a2
                          + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  swift_beginAccess( a2 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias,  &v112,  0LL,  0LL);
  BOOL v65 = *v64;
  if (v63 == 2)
  {
    if (v65 != 2) {
      goto LABEL_58;
    }
  }

  else if (v65 == 2 || ((((v65 & 1) == 0) ^ v63) & 1) == 0)
  {
    goto LABEL_58;
  }

  uint64_t v66 = v34
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  swift_beginAccess( v34 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude,  &v111,  0LL,  0LL);
  uint64_t v67 = *(float *)v66;
  char v68 = *(_BYTE *)(v66 + 4);
  uint64_t v69 = a2
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  swift_beginAccess( a2 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude,  &v110,  0LL,  0LL);
  if ((v68 & 1) != 0)
  {
    if ((*(_BYTE *)(v69 + 4) & 1) == 0) {
      goto LABEL_58;
    }
  }

  else if ((*(_BYTE *)(v69 + 4) & 1) != 0 || v67 != *(float *)v69)
  {
    goto LABEL_58;
  }

  uint64_t v70 = v34
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  swift_beginAccess( v34 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination,  &v109,  0LL,  0LL);
  uint64_t v71 = *(float *)v70;
  uint64_t v72 = *(_BYTE *)(v70 + 4);
  char v73 = a2
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  swift_beginAccess( a2 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination,  &v108,  0LL,  0LL);
  if ((v72 & 1) != 0)
  {
    if ((*(_BYTE *)(v73 + 4) & 1) == 0) {
      goto LABEL_58;
    }
  }

  else if ((*(_BYTE *)(v73 + 4) & 1) != 0 || v71 != *(float *)v73)
  {
    goto LABEL_58;
  }

  uint64_t v74 = v34
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  swift_beginAccess( v34 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal,  &v107,  0LL,  0LL);
  uint64_t v75 = *(float *)v74;
  uint64_t v76 = *(_BYTE *)(v74 + 4);
  uint64_t v77 = a2
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  swift_beginAccess( a2 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal,  &v106,  0LL,  0LL);
  if ((v76 & 1) != 0)
  {
    if ((*(_BYTE *)(v77 + 4) & 1) != 0) {
      goto LABEL_55;
    }
LABEL_58:
    swift_release(v34);
    swift_release(a2);
    return 0LL;
  }

    sub_100015764(v49, &qword_10035C478);
    goto LABEL_52;
  }

  uint64_t v53 = v112;
  sub_10000E6C0(v49, v112, &qword_100355600);
  if (v51(v50, 1LL, v52) == 1)
  {
    sub_100015764(v47, &qword_100355600);
    sub_100004090(v53, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    goto LABEL_13;
  }

  uint64_t v54 = v40;
  uint64_t v55 = v47;
  uint64_t v56 = v109;
  sub_100003E68(v50, v109, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  uint64_t v57 = sub_10011BB28(v53, v56);
  sub_100004090(v56, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  uint64_t v58 = v55;
  uint64_t v40 = v54;
  sub_100015764(v58, &qword_100355600);
  sub_100004090(v53, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  sub_100015764(v49, &qword_100355600);
  if ((v57 & 1) == 0) {
    goto LABEL_52;
  }
LABEL_15:
  unint64_t v59 = v38
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess( v38 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate,  v135,  0LL,  0LL);
  uint64_t v60 = v113;
  sub_10000E6C0(v59, v113, &qword_100355600);
  uint64_t v61 = v40
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess( v40 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate,  v134,  0LL,  0LL);
  unint64_t v62 = v111;
  unint64_t v63 = v111 + *(int *)(v120 + 48);
  sub_10000E6C0(v60, v111, &qword_100355600);
  uint64_t v64 = v62;
  sub_10000E6C0(v61, v63, &qword_100355600);
  if (v51(v62, 1LL, v52) == 1)
  {
    sub_100015764(v60, &qword_100355600);
    BOOL v65 = v51(v63, 1LL, v52);
    uint64_t v66 = v110;
    if (v65 == 1)
    {
      sub_100015764(v64, &qword_100355600);
      goto LABEL_22;
    }

    uint64_t v42 = &qword_10035C470;
    uint64_t v43 = v50;
    goto LABEL_14;
  }

  uint64_t v57 = v110;
  sub_10000E6C0(v50, v110, &qword_100355618);
  uint64_t v58 = v53(v51, 1LL, v52);
  uint64_t v56 = (uint64_t)v111;
  uint64_t v55 = v112;
  if (v58 == 1)
  {
    sub_100015764(v118, &qword_100355618);
    sub_100015764(v119, &qword_100355618);
    sub_100004090(v57, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
    goto LABEL_13;
  }

  uint64_t v61 = v108;
  sub_100003E68(v51, v108, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  unint64_t v62 = sub_100065AC0( v57,  v61,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  sub_1000F8458);
  sub_100004090(v61, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  sub_100015764(v118, &qword_100355618);
  sub_100015764(v119, &qword_100355618);
  sub_100004090(v57, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  sub_100015764(v50, &qword_100355618);
  if ((v62 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_18:
  unint64_t v63 = v45[7];
  uint64_t v64 = *(unsigned __int8 *)(v46 + v63);
  BOOL v65 = *(unsigned __int8 *)(v48 + v63);
  if (v64 == 2)
  {
    uint64_t v66 = v109;
    if (v65 != 2) {
      goto LABEL_15;
    }
  }

  else
  {
    uint64_t v66 = v109;
    if (v65 == 2 || ((((v65 & 1) == 0) ^ v64) & 1) == 0) {
      goto LABEL_15;
    }
  }

  uint64_t v67 = v45[8];
  char v68 = (_DWORD *)(v46 + v67);
  uint64_t v69 = *(_BYTE *)(v46 + v67 + 4);
  uint64_t v70 = (_DWORD *)(v48 + v67);
  uint64_t v71 = *(unsigned __int8 *)(v48 + v67 + 4);
  if ((v69 & 1) != 0)
  {
    if (!v71) {
      goto LABEL_15;
    }
  }

  else
  {
    if (*v68 != *v70) {
      LOBYTE(v71) = 1;
    }
    if ((v71 & 1) != 0) {
      goto LABEL_15;
    }
  }

  uint64_t v72 = v45[9];
  char v73 = *(unsigned __int8 *)(v46 + v72);
  uint64_t v74 = *(unsigned __int8 *)(v48 + v72);
  if (v73 == 5)
  {
    uint64_t v75 = v107;
    if (v74 != 5) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }

  unint64_t v59 = 0;
  uint64_t v75 = v107;
  if (v74 != 5 && v73 == v74)
  {
LABEL_34:
    sub_10000E6C0(v46 + v45[10], v75, &qword_100355620);
    sub_10000E6C0(v48 + v45[10], v66, &qword_100355620);
    uint64_t v76 = v106;
    uint64_t v77 = v106 + *(int *)(v104 + 48);
    sub_10000E6C0(v75, v106, &qword_100355620);
    uint64_t v78 = v76;
    sub_10000E6C0(v66, v77, &qword_100355620);
    uint64_t v79 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v105 + 48);
    if (v79(v78, 1LL, v55) == 1)
    {
      sub_100015764(v66, &qword_100355620);
      uint64_t v78 = v106;
      sub_100015764(v75, &qword_100355620);
      if (v79(v77, 1LL, v55) == 1)
      {
        sub_100015764(v78, &qword_100355620);
LABEL_41:
        uint64_t v82 = v45[11];
        uint64_t v83 = (float *)(v46 + v82);
        uint64_t v84 = *(_BYTE *)(v46 + v82 + 4);
        unint64_t v85 = (float *)(v48 + v82);
        uint64_t v86 = *(unsigned __int8 *)(v48 + v82 + 4);
        if ((v84 & 1) != 0)
        {
          if (v86) {
            goto LABEL_47;
          }
        }

        else
        {
          if (*v83 != *v85) {
            LOBYTE(v86) = 1;
          }
          if ((v86 & 1) == 0)
          {
LABEL_47:
            uint64_t v87 = v45[12];
            uint64_t v88 = (float *)(v46 + v87);
            uint64_t v89 = *(_BYTE *)(v46 + v87 + 4);
            uint64_t v90 = (float *)(v48 + v87);
            uint64_t v91 = *(unsigned __int8 *)(v48 + v87 + 4);
            if ((v89 & 1) != 0)
            {
              if (v91)
              {
LABEL_53:
                uint64_t v93 = v101;
                uint64_t v92 = v102;
                uint64_t v94 = *(void (**)(char *, uint64_t, uint64_t))(v101 + 16);
                uint64_t v95 = v99;
                v94(v99, v46, v102);
                uint64_t v96 = v100;
                v94(v100, v48, v92);
                uint64_t v97 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
                unint64_t v59 = dispatch thunk of static Equatable.== infix(_:_:)(v95, v96, v92, v97);
                uint64_t v98 = *(void (**)(char *, uint64_t))(v93 + 8);
                v98(v96, v92);
                v98(v95, v92);
                return v59 & 1;
              }
            }

            else
            {
              if (*v88 != *v90) {
                LOBYTE(v91) = 1;
              }
              if ((v91 & 1) == 0) {
                goto LABEL_53;
              }
            }
          }
        }

    os_log_t v34 = &qword_100363ED0;
LABEL_21:
    uint64_t v35 = v42;
    goto LABEL_22;
  }

  uint64_t v46 = v76;
  sub_10000E6C0(v42, v76, &qword_100363120);
  if (v44(v43, 1LL, v45) == 1)
  {
    sub_100015764(v40, &qword_100363120);
    sub_100004090(v46, type metadata accessor for Proto_Gnss_Position);
    goto LABEL_13;
  }

  uint64_t v47 = v70;
  sub_100003E68(v43, v70, type metadata accessor for Proto_Gnss_Position);
  uint64_t v48 = sub_10021CB30(v46, v47);
  sub_100004090(v47, type metadata accessor for Proto_Gnss_Position);
  sub_100015764(v40, &qword_100363120);
  sub_100004090(v46, type metadata accessor for Proto_Gnss_Position);
  sub_100015764(v42, &qword_100363120);
  if ((v48 & 1) == 0) {
    goto LABEL_23;
  }
LABEL_15:
  int v49 = v33 + OBJC_IVAR____TtCV10ALProtobuf14Proto_Gnss_FixP33_CE77F83568258924918786B79242136A13_StorageClass__velocity;
  swift_beginAccess( v33 + OBJC_IVAR____TtCV10ALProtobuf14Proto_Gnss_FixP33_CE77F83568258924918786B79242136A13_StorageClass__velocity,  v89,  0LL,  0LL);
  unint64_t v50 = v73;
  sub_10000E6C0(v49, v73, &qword_100363128);
  unint64_t v51 = v29 + OBJC_IVAR____TtCV10ALProtobuf14Proto_Gnss_FixP33_CE77F83568258924918786B79242136A13_StorageClass__velocity;
  swift_beginAccess( v29 + OBJC_IVAR____TtCV10ALProtobuf14Proto_Gnss_FixP33_CE77F83568258924918786B79242136A13_StorageClass__velocity,  v88,  0LL,  0LL);
  uint64_t v42 = v75;
  unint64_t v52 = v75 + *(int *)(v71 + 48);
  sub_10000E6C0(v50, v75, &qword_100363128);
  sub_10000E6C0(v51, v52, &qword_100363128);
  uint64_t v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
  uint64_t v54 = v74;
  if (v53(v42, 1LL, v74) == 1)
  {
    sub_100015764(v50, &qword_100363128);
    if (v53(v52, 1LL, v54) == 1)
    {
      sub_100015764(v42, &qword_100363128);
      goto LABEL_27;
    }

    goto LABEL_20;
  }

  uint64_t v55 = v69;
  sub_10000E6C0(v42, v69, &qword_100363128);
  if (v53(v52, 1LL, v54) == 1)
  {
    sub_100015764(v50, &qword_100363128);
    sub_100004090(v55, type metadata accessor for Proto_Gnss_Velocity);
LABEL_20:
    os_log_t v34 = &qword_100363EC8;
    goto LABEL_21;
  }

  uint64_t v57 = v68;
  sub_100003E68(v52, v68, type metadata accessor for Proto_Gnss_Velocity);
  uint64_t v58 = sub_10021C3E0(v55, v57);
  sub_100004090(v57, type metadata accessor for Proto_Gnss_Velocity);
  sub_100015764(v50, &qword_100363128);
  sub_100004090(v55, type metadata accessor for Proto_Gnss_Velocity);
  sub_100015764(v42, &qword_100363128);
  if ((v58 & 1) == 0) {
    goto LABEL_23;
  }
LABEL_27:
  unint64_t v59 = (uint64_t *)(v33
                  + OBJC_IVAR____TtCV10ALProtobuf14Proto_Gnss_FixP33_CE77F83568258924918786B79242136A13_StorageClass__spoofingFlags);
  swift_beginAccess( v33 + OBJC_IVAR____TtCV10ALProtobuf14Proto_Gnss_FixP33_CE77F83568258924918786B79242136A13_StorageClass__spoofingFlags,  v87,  0LL,  0LL);
  uint64_t v60 = *v59;
  uint64_t v61 = *((_BYTE *)v59 + 8);
  unint64_t v62 = v29
      + OBJC_IVAR____TtCV10ALProtobuf14Proto_Gnss_FixP33_CE77F83568258924918786B79242136A13_StorageClass__spoofingFlags;
  swift_beginAccess( v29 + OBJC_IVAR____TtCV10ALProtobuf14Proto_Gnss_FixP33_CE77F83568258924918786B79242136A13_StorageClass__spoofingFlags,  v86,  0LL,  0LL);
  if ((v61 & 1) != 0)
  {
    if ((*(_BYTE *)(v62 + 8) & 1) != 0) {
      goto LABEL_32;
    }
LABEL_23:
    swift_release(v33);
    swift_release(v29);
    return 0LL;
  }

  if ((*(_BYTE *)(v62 + 8) & 1) != 0 || v60 != *(void *)v62) {
    goto LABEL_23;
  }
LABEL_32:
  unint64_t v63 = (unsigned __int8 *)(v33
                          + OBJC_IVAR____TtCV10ALProtobuf14Proto_Gnss_FixP33_CE77F83568258924918786B79242136A13_StorageClass__estimationTechnology);
  swift_beginAccess( v33 + OBJC_IVAR____TtCV10ALProtobuf14Proto_Gnss_FixP33_CE77F83568258924918786B79242136A13_StorageClass__estimationTechnology,  v85,  0LL,  0LL);
  uint64_t v64 = *v63;
  swift_release(v33);
  BOOL v65 = (unsigned __int8 *)(v29
                          + OBJC_IVAR____TtCV10ALProtobuf14Proto_Gnss_FixP33_CE77F83568258924918786B79242136A13_StorageClass__estimationTechnology);
  swift_beginAccess( v29 + OBJC_IVAR____TtCV10ALProtobuf14Proto_Gnss_FixP33_CE77F83568258924918786B79242136A13_StorageClass__estimationTechnology,  v84,  0LL,  0LL);
  uint64_t v66 = *v65;
  swift_release(v29);
  if (v64 == 5) {
    return v66 == 5;
  }
  uint64_t result = 0LL;
  if (v66 != 5 && v64 == v66) {
    return 1LL;
  }
  return result;
}

LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

    sub_10005F2F8(v12, v13);
    sub_10005F2F8(v15, v16);
    sub_10005F30C(v12, v13);
    sub_10005F30C(v15, v16);
    goto LABEL_6;
  }

  if (v16 >> 60 != 15) {
    goto LABEL_5;
  }
LABEL_9:
  uint64_t v21 = v10[6];
  uint64_t v22 = *(unsigned __int8 *)(a1 + v21);
  unint64_t v23 = *(unsigned __int8 *)(a2 + v21);
  if (v22 == 2)
  {
    if (v23 != 2) {
      goto LABEL_6;
    }
  }

  else if (v23 == 2 || ((((v23 & 1) == 0) ^ v22) & 1) == 0)
  {
    goto LABEL_6;
  }

  unint64_t v24 = v10[7];
  unint64_t v25 = *(unsigned __int8 *)(a1 + v24);
  os_log_type_t v26 = *(unsigned __int8 *)(a2 + v24);
  if (v25 == 2)
  {
    if (v26 != 2) {
      goto LABEL_6;
    }
  }

  else if (v26 == 2 || ((((v26 & 1) == 0) ^ v25) & 1) == 0)
  {
    goto LABEL_6;
  }

  int v27 = v10[8];
  uint64_t v28 = (_DWORD *)(a1 + v27);
  uint64_t v29 = *(_BYTE *)(a1 + v27 + 4);
  Swift::String v30 = (_DWORD *)(a2 + v27);
  uint64_t v31 = *(unsigned __int8 *)(a2 + v27 + 4);
  if ((v29 & 1) != 0)
  {
    if (!v31) {
      goto LABEL_6;
    }
  }

  else
  {
    if (*v28 != *v30) {
      LOBYTE(v31) = 1;
    }
    if ((v31 & 1) != 0) {
      goto LABEL_6;
    }
  }

  unint64_t v32 = v10[9];
  unint64_t v33 = (_DWORD *)(a1 + v32);
  os_log_t v34 = *(_BYTE *)(a1 + v32 + 4);
  uint64_t v35 = (_DWORD *)(a2 + v32);
  uint64_t v36 = *(unsigned __int8 *)(a2 + v32 + 4);
  if ((v34 & 1) != 0)
  {
    if (v36)
    {
LABEL_31:
      os_log_t v37 = v43;
      int v38 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
      uint64_t v39 = a1;
      uint64_t v40 = v44;
      v38(v9, v39, v44);
      v38(v7, a2, v40);
      uint64_t v41 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      uint64_t v17 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v7, v40, v41);
      uint64_t v42 = *(void (**)(char *, uint64_t))(v37 + 8);
      v42(v7, v40);
      v42(v9, v40);
      return v17 & 1;
    }
  }

  else
  {
    if (*v33 != *v35) {
      LOBYTE(v36) = 1;
    }
    if ((v36 & 1) == 0) {
      goto LABEL_31;
    }
  }

    sub_10005F2F8(v12, v13);
    sub_10005F2F8(v15, v16);
    sub_10005F30C(v12, v13);
    sub_10005F30C(v15, v16);
    goto LABEL_6;
  }

  if (v16 >> 60 != 15) {
    goto LABEL_5;
  }
LABEL_9:
  uint64_t v20 = *(int *)(v10 + 24);
  uint64_t v21 = *(unsigned __int8 *)(a1 + v20);
  uint64_t v22 = *(unsigned __int8 *)(a2 + v20);
  if (v21 == 3)
  {
    if (v22 == 3)
    {
LABEL_17:
      unint64_t v24 = v30;
      unint64_t v25 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v30 + 16);
      v25(v9, a1, v4);
      v25(v7, a2, v4);
      os_log_type_t v26 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      uint64_t v17 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v7, v4, v26);
      int v27 = *(void (**)(_BYTE *, uint64_t))(v24 + 8);
      v27(v7, v4);
      v27(v9, v4);
      return v17 & 1;
    }
  }

  else if (v22 != 3 && v21 == v22)
  {
    goto LABEL_17;
  }

  uint64_t v89 = v19;
  v104[0] = 0LL;
  uint64_t v21 = v18 & 0xC000000000000001LL;
  swift_bridgeObjectRetain(v18);
  swift_beginAccess(v104, v103, 1LL, 0LL);
  unint64_t v23 = 0LL;
  unint64_t v24 = 0LL;
  unint64_t v25 = 0LL;
  uint64_t v94 = v18 + 32;
  if (v18 < 0) {
    os_log_type_t v26 = v18;
  }
  else {
    os_log_type_t v26 = v18 & 0xFFFFFFFFFFFFFF8LL;
  }
  uint64_t v88 = v26;
  uint64_t v92 = v18 & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v86 = (v18 & 0xFFFFFFFFFFFFFF8LL) + 32;
  *(void *)&uint64_t v22 = 134349312LL;
  unint64_t v85 = v22;
  *(void *)&uint64_t v22 = 138477827LL;
  uint64_t v87 = v22;
  uint64_t v98 = v18 & 0xC000000000000001LL;
  uint64_t v93 = v20;
  do
  {
    if (v21) {
      int v27 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v23, v18);
    }
    else {
      int v27 = (char *)*(id *)(v94 + 8 * v23);
    }
    uint64_t v12 = v27;
    if (__OFADD__(v23, 1LL))
    {
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      if (v18 < 0) {
        uint64_t v80 = v18;
      }
      else {
        uint64_t v80 = v18 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v18);
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter(v80);
      swift_bridgeObjectRelease(v18);
      if (!v20) {
        goto LABEL_90;
      }
      goto LABEL_5;
    }

    if (v23)
    {
      uint64_t v28 = (unint64_t)[v27 timestamp];
      if ((v28 & 0x8000000000000000LL) != 0) {
        goto LABEL_79;
      }
      uint64_t v29 = v28;
      size_t v19 = v23 - 1;
      if (v21)
      {
        Swift::String v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23 - 1, v18);
      }

      else
      {
        Swift::String v30 = *(id *)(v94 + 8 * v19);
      }

      uint64_t v31 = v30;
      unint64_t v32 = (unint64_t)objc_msgSend(v30, "timestamp", (void)v85, *((void *)&v85 + 1));

      if ((v32 & 0x8000000000000000LL) != 0) {
        goto LABEL_80;
      }
      unint64_t v33 = v29 - v32;
      if (v33 > 0x773593FF)
      {
        os_log_t v34 = corelog.getter(v95);
        uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
        uint64_t v36 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v35, v36))
        {
          os_log_t v37 = swift_slowAlloc(22LL, -1LL);
          *(_DWORD *)os_log_t v37 = v85;
          *(void *)(v37 + 4) = v23;
          *(_WORD *)(v37 + 12) = 2050;
          *(void *)(v37 + 14) = v104[0];
          _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "processBackgroundScanCache,newGroup,idx,%{public}ld,start,%{public}ld",  (uint8_t *)v37,  0x16u);
          swift_slowDealloc(v37, -1LL, -1LL);
        }

        int v38 = *(void (**)(uint64_t, uint64_t))(v91 + 8);
        v38(v95, v99);
        corelog.getter(v96);
        uint64_t v39 = swift_bridgeObjectRetain_n(v18, 2LL);
        uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
        uint64_t v41 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v40, v41))
        {
          uint64_t v42 = swift_slowAlloc(12LL, -1LL);
          uint64_t v43 = (void *)swift_slowAlloc(8LL, -1LL);
          *(_DWORD *)uint64_t v42 = v87;
          if (v98) {
            uint64_t v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23 - 1, v18);
          }
          else {
            uint64_t v44 = *(id *)(v94 + 8 * v19);
          }
          *(void *)(v42 + 4) = v44;
          *uint64_t v43 = v44;
          swift_bridgeObjectRelease_n(v18, 2LL);
          _os_log_impl( (void *)&_mh_execute_header,  v40,  v41,  "processBackgroundScanCache,newGroup,pre,%{private}@",  (uint8_t *)v42,  0xCu);
          uint64_t v45 = sub_100003A0C((uint64_t *)&unk_100367680);
          swift_arrayDestroy(v43, 1LL, v45);
          swift_slowDealloc(v43, -1LL, -1LL);
          swift_slowDealloc(v42, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v18, 2LL);
        }

        v38(v96, v99);
        corelog.getter(v97);
        uint64_t v12 = v12;
        uint64_t v46 = (os_log_s *)Logger.logObject.getter(v12);
        uint64_t v47 = static os_log_type_t.info.getter();
        size_t v19 = v47;
        uint64_t v48 = os_log_type_enabled(v46, v47);
        uint64_t v21 = v98;
        if (v48)
        {
          int v49 = swift_slowAlloc(12LL, -1LL);
          unint64_t v50 = (char **)swift_slowAlloc(8LL, -1LL);
          *(_DWORD *)int v49 = v87;
          *(void *)(v49 + 4) = v12;
          *unint64_t v50 = v12;
          _os_log_impl( (void *)&_mh_execute_header,  v46,  (os_log_type_t)v19,  "processBackgroundScanCache,newGroup,new,%{private}@",  (uint8_t *)v49,  0xCu);
          unint64_t v51 = sub_100003A0C((uint64_t *)&unk_100367680);
          swift_arrayDestroy(v50, 1LL, v51);
          swift_slowDealloc(v50, -1LL, -1LL);
          swift_slowDealloc(v49, -1LL, -1LL);
        }

        else
        {

          uint64_t v46 = (os_log_s *)v12;
        }

        v38(v97, v99);
        unint64_t v52 = v104[0];
        if (v23 < v104[0]) {
          goto LABEL_81;
        }
        uint64_t v53 = v89;
        if (v89)
        {
          swift_bridgeObjectRetain(v18);
          size_t v19 = _CocoaArrayWrapper.endIndex.getter(v88);
          swift_bridgeObjectRelease(v18);
        }

        else
        {
          size_t v19 = *(void *)(v92 + 16);
        }

        if (v19 < v52) {
          goto LABEL_82;
        }
        if (v52 < 0) {
          goto LABEL_83;
        }
        if (v21 && v52 != v23)
        {
          if (v52 >= v23) {
            goto LABEL_85;
          }
          uint64_t v54 = v52;
          do
          {
            uint64_t v55 = v54 + 1;
            _ArrayBuffer._typeCheckSlowPath(_:)(v54);
            uint64_t v54 = v55;
          }

          while (v23 != v55);
        }

        if (v53)
        {
          swift_bridgeObjectRetain(v18);
          uint64_t v56 = _CocoaArrayWrapper.subscript.getter(v52, v23, v88);
          uint64_t v57 = v58;
          unint64_t v52 = v59;
          size_t v19 = v60;
          swift_bridgeObjectRelease(v18);
        }

        else
        {
          size_t v19 = (2 * v23) | 1;
          swift_bridgeObjectRetain(v18);
          uint64_t v56 = v92;
          uint64_t v57 = v86;
        }

        uint64_t v101 = sub_100003A0C(&qword_1003680F8);
        uint64_t v102 = sub_100298804( &qword_100368100,  &qword_1003680F8,  (uint64_t)&protocol conformance descriptor for ArraySlice<A>);
        uint64_t v61 = (void *)swift_allocObject(&unk_100346D70, 48LL, 7LL);
        v100[0] = v61;
        v61[2] = v56;
        v61[3] = v57;
        v61[4] = v52;
        v61[5] = v19;
        (*(void (**)(void *, uint64_t))(*(void *)v90 + 304LL))(v100, 1LL);

        sub_10001882C(v100);
        v104[0] = v23;
        unint64_t v24 = v23;
        unint64_t v25 = v23;
        uint64_t v20 = v93;
      }

      else
      {

        uint64_t v21 = v98;
        uint64_t v20 = v93;
      }
    }

    else
    {
    }

    ++v23;
  }

  while (v23 != v20);
  uint64_t result = swift_bridgeObjectRelease(v18);
  if (v89)
  {
    swift_bridgeObjectRetain(v18);
    char v68 = _CocoaArrayWrapper.endIndex.getter(v88);
    uint64_t result = swift_bridgeObjectRelease(v18);
    uint64_t v67 = v92;
    if (v25 >= v68) {
      return swift_bridgeObjectRelease(v18);
    }
  }

  else
  {
    uint64_t v67 = v92;
    char v68 = *(void *)(v92 + 16);
    if (v25 >= v68) {
      return swift_bridgeObjectRelease(v18);
    }
  }

  if (v68 < v24)
  {
    __break(1u);
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }

  uint64_t v69 = v89;
  if (v89)
  {
    swift_bridgeObjectRetain(v18);
    uint64_t v70 = _CocoaArrayWrapper.endIndex.getter(v88);
    uint64_t result = swift_bridgeObjectRelease(v18);
  }

  else
  {
    uint64_t v70 = *(void *)(v67 + 16);
  }

  if (v70 < v24) {
    goto LABEL_94;
  }
  if (v24 < 0)
  {
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
    goto LABEL_97;
  }

  if (v69)
  {
    swift_bridgeObjectRetain(v18);
    uint64_t v71 = _CocoaArrayWrapper.endIndex.getter(v88);
    uint64_t result = swift_bridgeObjectRelease(v18);
  }

  else
  {
    uint64_t v71 = *(void *)(v67 + 16);
  }

  if (v71 < v68) {
    goto LABEL_96;
  }
  if (!v21 || v24 == v68) {
    goto LABEL_74;
  }
  if (v24 >= (unint64_t)v68)
  {
LABEL_97:
    __break(1u);
    return result;
  }

  uint64_t v72 = v24;
  do
  {
    char v73 = v72 + 1;
    _ArrayBuffer._typeCheckSlowPath(_:)(v72);
    uint64_t v72 = v73;
  }

  while (v68 != v73);
LABEL_74:
  if (v69)
  {
    swift_bridgeObjectRetain(v18);
    uint64_t v67 = _CocoaArrayWrapper.subscript.getter(v24, v68, v88);
    uint64_t v75 = v76;
    unint64_t v24 = v77;
    uint64_t v74 = v78;
    swift_bridgeObjectRelease_n(v18, 2LL);
  }

  else
  {
    uint64_t v74 = (2 * v68) | 1;
    uint64_t v75 = v86;
  }

  uint64_t v101 = sub_100003A0C(&qword_1003680F8);
  uint64_t v102 = sub_100298804(&qword_100368100, &qword_1003680F8, (uint64_t)&protocol conformance descriptor for ArraySlice<A>);
  uint64_t v79 = (void *)swift_allocObject(&unk_100346D70, 48LL, 7LL);
  v100[0] = v79;
  v79[2] = v67;
  v79[3] = v75;
  v79[4] = v24;
  v79[5] = v74;
  (*(void (**)(void *, uint64_t))(*(void *)v90 + 304LL))(v100, 1LL);
  return sub_10001882C(v100);
}

uint64_t sub_100018474(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_100018508(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_1000186E0(0, *(void *)(v2 + 16) + 1LL, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1000186E0(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_100018508(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    while (1)
    {
      uint64_t v5 = sub_10001867C(v4, 0LL);
      if (v4 < 0) {
        break;
      }
      uint64_t v6 = v5;
      uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0) {
        goto LABEL_14;
      }
      if (v7 == v4) {
        return v6;
      }
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "invalid Collection: less than 'count' elements in collection",  60LL,  2LL,  "Swift/ContiguousArrayBuffer.swift",  33LL,  v10,  1122LL,  0);
      __break(1u);
LABEL_10:
      uint64_t v4 = String.UTF8View._foreignCount()();
      if (!v4) {
        return &_swiftEmptyArrayStorage;
      }
    }

    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  v10,  71LL,  0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Insufficient space allocated to copy string contents",  52LL,  2LL,  "Swift/StringUTF8View.swift",  26LL,  v10,  430LL,  0);
    __break(1u);
  }

  else
  {
    return &_swiftEmptyArrayStorage;
  }

  return result;
}

void *sub_10001867C(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_100003A0C(&qword_100367D30);
  uint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_1000186E0(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100003A0C(&qword_100367D30);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  int v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10001882C(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10001884C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10001888C( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v9 = *(void *)(a5(0LL) - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 72);
  unint64_t v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  uint64_t v13 = v11 * v5;
  unint64_t v14 = a3 + v13;
  unint64_t v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000189A8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10007FC68();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_1000189E0@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10005F060(a1);
  *a2 = result;
  return result;
}

unint64_t sub_100018A04@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10005F060(*a1);
  *a2 = result;
  return result;
}

_UNKNOWN **sub_100018A2C()
{
  return &off_10033E0D0;
}

void sub_100018A38(void *a1@<X8>)
{
  *a1 = &off_10033E0F8;
}

uint64_t sub_100018A4C(char a1)
{
  return qword_1002BA738[a1];
}

BOOL sub_100018A60(char *a1, char *a2)
{
  return qword_1002BA738[*a1] == qword_1002BA738[*a2];
}

uint64_t sub_100018A84(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10007FC24();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_100018ABC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10005F070(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100018AE0()
{
  return qword_1002BA738[*v0];
}

uint64_t sub_100018AF4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10005F070(*a1);
  *a2 = result;
  return result;
}

void sub_100018B1C(void *a1@<X8>)
{
  *a1 = qword_1002BA738[*v1];
}

_UNKNOWN **sub_100018B34()
{
  return &off_10033E120;
}

void sub_100018B40(void *a1@<X8>)
{
  *a1 = &off_10033E120;
}

uint64_t sub_100018B54(uint64_t result)
{
  return result;
}

BOOL sub_100018B5C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100018B70(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10007FBE0();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_100018BA8@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10005F0D8(a1);
  *a2 = result;
  return result;
}

uint64_t ALWiFiScanRow.Band.rawValue.getter()
{
  return *v0;
}

unint64_t sub_100018BD4@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10005F0D8(*a1);
  *a2 = result;
  return result;
}

void sub_100018BFC(void *a1@<X8>)
{
  *a1 = *v1;
}

_UNKNOWN **sub_100018C08()
{
  return &off_10033E148;
}

void sub_100018C14(void *a1@<X8>)
{
  *a1 = &off_10033E148;
}

uint64_t sub_100018C28(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10007FB9C();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_100018C60@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10005F0E8(a1);
  *a2 = result;
  return result;
}

unint64_t sub_100018C84@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10005F0E8(*a1);
  *a2 = result;
  return result;
}

_UNKNOWN **sub_100018CAC()
{
  return &off_10033E178;
}

void sub_100018CB8(void *a1@<X8>)
{
  *a1 = &off_10033E178;
}

uint64_t sub_100018CCC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10007FB58();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100018D04()
{
  return &off_10033E1A0;
}

void sub_100018D10(void *a1@<X8>)
{
  *a1 = &off_10033E1A0;
}

uint64_t sub_100018D20(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10007FB14();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100018D58()
{
  return &off_10033E1C8;
}

void sub_100018D64(void *a1@<X8>)
{
  *a1 = &off_10033E1F0;
}

uint64_t sub_100018D74(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10007FAD0();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_100018DAC@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10005F0F8(a1);
  *a2 = result;
  return result;
}

unint64_t sub_100018DD0@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10005F0F8(*a1);
  *a2 = result;
  return result;
}

_UNKNOWN **sub_100018DF8()
{
  return &off_10033E218;
}

void sub_100018E04(void *a1@<X8>)
{
  *a1 = &off_10033E218;
}

uint64_t sub_100018E14(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10007FA8C();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100018E4C()
{
  return &off_10033E240;
}

void sub_100018E58(void *a1@<X8>)
{
  *a1 = &off_10033E268;
}

unint64_t sub_100018E68(unint64_t result)
{
  if (result >= 3) {
    return 3LL;
  }
  return result;
}

uint64_t sub_100018E78(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10007FA48();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_100018EB0@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 3;
  if (result < 3) {
    char v2 = result;
  }
  *a2 = v2;
  return result;
}

uint64_t *sub_100018EC4@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2 = *result;
  *a2 = v2;
  return result;
}

_UNKNOWN **sub_100018EDC()
{
  return &off_10033E290;
}

void sub_100018EE8(void *a1@<X8>)
{
  *a1 = &off_10033E2B8;
}

uint64_t sub_100018EF8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10007FA04();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100018F30()
{
  return &off_10033E2E0;
}

void sub_100018F3C(void *a1@<X8>)
{
  *a1 = &off_10033E308;
}

uint64_t sub_100018F4C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10007F9C0();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100018F84()
{
  return &off_10033E330;
}

void sub_100018F90(void *a1@<X8>)
{
  *a1 = &off_10033E330;
}

uint64_t sub_100018FA4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10007F97C();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_100018FDC@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10005F108(a1);
  *a2 = result;
  return result;
}

unint64_t sub_100019000@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10005F108(*a1);
  *a2 = result;
  return result;
}

_UNKNOWN **sub_100019028()
{
  return &off_10033E358;
}

void sub_100019034(void *a1@<X8>)
{
  *a1 = &off_10033E380;
}

uint64_t sub_100019044()
{
  return sub_1000191E8(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t sub_100019050(int a1)
{
  return sub_100019228(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t (*sub_10001905C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL) + 20);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000190AC()
{
  return sub_1000192B8(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t sub_1000190B8()
{
  return sub_1000192F4(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t sub_1000190C4()
{
  return sub_10002D000(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t sub_1000190D0(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_1000190FC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL) + 24);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100019148()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL) + 24)) != 5;
}

uint64_t sub_100019170()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 5;
  return result;
}

uint64_t sub_100019194@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
  uint64_t v3 = a1 + *(int *)(result + 20);
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  *(_BYTE *)(a1 + *(int *)(result + 24)) = 5;
  return result;
}

uint64_t sub_1000191DC()
{
  return sub_1000191E8(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t sub_1000191E8(uint64_t (*a1)(void))
{
  uint64_t v2 = (_BYTE *)(v1 + *(int *)(a1(0LL) + 20));
  if (v2[4]) {
    return 0LL;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t sub_10001921C(int a1)
{
  return sub_100019228(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t sub_100019228(int a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0LL);
  uint64_t v5 = v2 + *(int *)(result + 20);
  *(_DWORD *)uint64_t v5 = a1;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_10001925C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL) + 20);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000192AC()
{
  return sub_1000192B8(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

BOOL sub_1000192B8(uint64_t (*a1)(void))
{
  return (*(_BYTE *)(v1 + *(int *)(a1(0LL) + 20) + 4) & 1) == 0;
}

uint64_t sub_1000192E8()
{
  return sub_1000192F4(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t sub_1000192F4(uint64_t (*a1)(void))
{
  uint64_t result = a1(0LL);
  uint64_t v3 = v1 + *(int *)(result + 20);
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

uint64_t sub_100019324@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_1003517D8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_1003517D8);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = 5;
  return sub_100015764((uint64_t)v5, &qword_1003517D8);
}

uint64_t sub_100019420(uint64_t a1)
{
  return sub_1000308E8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassId,  &qword_1003517D8,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

void (*sub_10001943C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003517D8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_1003517D8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    v9[*(int *)(v6 + 24)] = 5;
    sub_100015764((uint64_t)v5, &qword_1003517D8);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  }

  return sub_100019578;
}

void sub_100019578(uint64_t a1, char a2)
{
}

BOOL sub_10001958C()
{
  return sub_100019928( &qword_1003517D8,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassId,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t sub_1000195A8()
{
  return sub_100019A00( type metadata accessor for CLP_LogEntry_PrivateData_GlonassId,  &qword_1003517D8,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t sub_1000195C4@<X0>(uint64_t a1@<X8>)
{
  return sub_10001A350( type metadata accessor for CLP_LogEntry_PrivateData_GlonassId,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo,  a1);
}

uint64_t sub_1000195D8@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, a1);
}

uint64_t sub_1000195E4()
{
  return sub_1000191E8(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_1000195F0(int a1)
{
  return sub_100019228(a1, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t (*sub_1000195FC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL) + 20);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10001964C()
{
  return sub_1000192B8(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100019658()
{
  return sub_1000192F4(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100019664@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_1003517E0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_1003517E0);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + *(int *)(v7 + 24);
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  return sub_100015764((uint64_t)v5, &qword_1003517E0);
}

uint64_t sub_100019780(uint64_t a1)
{
  return sub_1000308E8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId,  &qword_1003517E0,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

void (*sub_10001979C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003517E0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_1003517E0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
    sub_100015764((uint64_t)v5, &qword_1003517E0);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
  }

  return sub_1000198F8;
}

void sub_1000198F8(uint64_t a1, char a2)
{
}

BOOL sub_10001990C()
{
  return sub_100019928( &qword_1003517E0,  type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

BOOL sub_100019928(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = sub_100003A0C(a1);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a2(0LL);
  sub_10000E6C0(v3 + *(int *)(v10 + 24), (uint64_t)v9, a1);
  uint64_t v11 = a3(0LL);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v9, 1LL, v11) != 1;
  sub_100015764((uint64_t)v9, a1);
  return v12;
}

uint64_t sub_1000199E4()
{
  return sub_100019A00( type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId,  &qword_1003517E0,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t sub_100019A00(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0LL) + 24);
  sub_100015764(v6, a2);
  uint64_t v7 = a3(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t sub_100019A68()
{
  uint64_t v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL) + 28));
  if (v1[4]) {
    return 0LL;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t sub_100019A98(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
  uint64_t v4 = v1 + *(int *)(result + 28);
  *(_DWORD *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_100019ACC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL) + 28);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100019B1C()
{
  return sub_100020BD0(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100019B28()
{
  return sub_100020C0C(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100019B34()
{
  uint64_t v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL) + 32));
  if (v1[4]) {
    return 0LL;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t sub_100019B64(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
  uint64_t v4 = v1 + *(int *)(result + 32);
  *(_DWORD *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_100019B98(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL) + 32);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100019BE8()
{
  return sub_100027938(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100019BF4()
{
  return sub_100027974(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100019C00()
{
  uint64_t v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL) + 36));
  if (v1[4]) {
    return 0LL;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t sub_100019C30(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
  uint64_t v4 = v1 + *(int *)(result + 36);
  *(_DWORD *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_100019C64(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL) + 36);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100019CB4()
{
  return sub_10002828C(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100019CC0()
{
  return sub_1000282C8(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100019CCC()
{
  uint64_t v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL) + 40));
  if (v1[4]) {
    return 0LL;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t sub_100019CFC(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
  uint64_t v4 = v1 + *(int *)(result + 40);
  *(_DWORD *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_100019D30(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL) + 40);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100019D80()
{
  return sub_10003374C(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100019D8C()
{
  return sub_100033788(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100019D98()
{
  uint64_t v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL) + 44));
  if (v1[4]) {
    return 0LL;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t sub_100019DC8(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
  uint64_t v4 = v1 + *(int *)(result + 44);
  *(_DWORD *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_100019DFC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL) + 44);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100019E4C()
{
  return sub_100033884(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100019E58()
{
  return sub_1000338C0(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100019E64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
  uint64_t v3 = a1 + v2[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  uint64_t v4 = a1 + v2[6];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))( v4,  1LL,  1LL,  v5);
  uint64_t v7 = a1 + v2[7];
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  uint64_t v8 = a1 + v2[8];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v2[9];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v2[10];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  uint64_t v11 = a1 + v2[11];
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  return result;
}

uint64_t sub_100019F28@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, a1);
}

uint64_t sub_100019F34()
{
  return sub_1000191E8(type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_100019F40(int a1)
{
  return sub_100019228(a1, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t (*sub_100019F4C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL) + 20);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100019F9C()
{
  return sub_1000192B8(type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_100019FA8()
{
  return sub_1000192F4(type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_100019FB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_1003517E8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_1003517E8);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v7[6];
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  uint64_t v11 = a1 + v7[7];
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  uint64_t v12 = a1 + v7[8];
  *(_DWORD *)uint64_t v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  uint64_t v13 = a1 + v7[9];
  *(_DWORD *)uint64_t v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  uint64_t v14 = a1 + v7[10];
  *(_DWORD *)uint64_t v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  uint64_t v15 = a1 + v7[11];
  *(_DWORD *)uint64_t v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  return sub_100015764((uint64_t)v5, &qword_1003517E8);
}

uint64_t sub_10001A128(uint64_t a1)
{
  return sub_1000308E8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_SvId,  &qword_1003517E8,  type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

void (*sub_10001A144(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003517E8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_1003517E8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
    uint64_t v14 = &v9[v6[7]];
    *(_DWORD *)uint64_t v14 = 0;
    v14[4] = 1;
    uint64_t v15 = &v9[v6[8]];
    *(_DWORD *)uint64_t v15 = 0;
    v15[4] = 1;
    uint64_t v16 = &v9[v6[9]];
    *(_DWORD *)uint64_t v16 = 0;
    v16[4] = 1;
    uint64_t v17 = &v9[v6[10]];
    *(_DWORD *)uint64_t v17 = 0;
    v17[4] = 1;
    uint64_t v18 = &v9[v6[11]];
    *(_DWORD *)uint64_t v18 = 0;
    v18[4] = 1;
    sub_100015764((uint64_t)v5, &qword_1003517E8);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  }

  return sub_10001A2F0;
}

void sub_10001A2F0(uint64_t a1, char a2)
{
}

BOOL sub_10001A304()
{
  return sub_100019928( &qword_1003517E8,  type metadata accessor for CLP_LogEntry_PrivateData_SvId,  type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_10001A320()
{
  return sub_100019A00( type metadata accessor for CLP_LogEntry_PrivateData_SvId,  &qword_1003517E8,  type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_10001A33C@<X0>(uint64_t a1@<X8>)
{
  return sub_10001A350( type metadata accessor for CLP_LogEntry_PrivateData_SvId,  type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId,  a1);
}

uint64_t sub_10001A350@<X0>( uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1(0LL);
  uint64_t v7 = a3 + *(int *)(v6 + 20);
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  uint64_t v8 = a3 + *(int *)(v6 + 24);
  uint64_t v9 = a2(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
}

uint64_t sub_10001A3C4@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, a1);
}

uint64_t sub_10001A3D0()
{
  return sub_10001A698(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_10001A3DC(char a1)
{
  return sub_10001A6CC(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t (*sub_10001A3E8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0LL) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001A430()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0LL) + 20)) != 2;
}

uint64_t sub_10001A458()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_10001A47C()
{
  return sub_10001A798(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_10001A488(char a1)
{
  return sub_10001A7CC(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t (*sub_10001A494(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0LL) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001A4DC()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0LL) + 24)) != 2;
}

uint64_t sub_10001A504()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_10001A528()
{
  return sub_10001A898(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_10001A534(char a1)
{
  return sub_10000534C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t (*sub_10001A540(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0LL) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001A588()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0LL) + 28)) != 2;
}

uint64_t sub_10001A5B0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_10001A5D4()
{
  return sub_10001A96C(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_10001A5E0(char a1)
{
  return sub_10001A9A0(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t (*sub_10001A5EC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0LL) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001A634()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0LL) + 32)) != 2;
}

uint64_t sub_10001A65C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

int *sub_10001A680@<X0>(uint64_t a1@<X8>)
{
  return sub_10001ADD4(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, a1);
}

uint64_t sub_10001A68C()
{
  return sub_10001A698(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_10001A698(uint64_t (*a1)(void))
{
  return *(_BYTE *)(v1 + *(int *)(a1(0LL) + 20)) & 1;
}

uint64_t sub_10001A6C0(char a1)
{
  return sub_10001A6CC(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_10001A6CC(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0LL);
  *(_BYTE *)(v2 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_10001A6F8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0LL) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001A740()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0LL) + 20)) != 2;
}

uint64_t sub_10001A768()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_10001A78C()
{
  return sub_10001A798(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_10001A798(uint64_t (*a1)(void))
{
  return *(_BYTE *)(v1 + *(int *)(a1(0LL) + 24)) & 1;
}

uint64_t sub_10001A7C0(char a1)
{
  return sub_10001A7CC(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_10001A7CC(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0LL);
  *(_BYTE *)(v2 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_10001A7F8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0LL) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001A840()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0LL) + 24)) != 2;
}

uint64_t sub_10001A868()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_10001A88C()
{
  return sub_10001A898(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_10001A898(uint64_t (*a1)(void))
{
  return *(_BYTE *)(v1 + *(int *)(a1(0LL) + 28)) & 1;
}

uint64_t sub_10001A8C0(char a1)
{
  return sub_10000534C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t (*sub_10001A8CC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0LL) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001A914()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0LL) + 28)) != 2;
}

uint64_t sub_10001A93C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_10001A960()
{
  return sub_10001A96C(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_10001A96C(uint64_t (*a1)(void))
{
  return *(_BYTE *)(v1 + *(int *)(a1(0LL) + 32)) & 1;
}

uint64_t sub_10001A994(char a1)
{
  return sub_10001A9A0(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_10001A9A0(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0LL);
  *(_BYTE *)(v2 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_10001A9CC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0LL) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001AA14()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0LL) + 32)) != 2;
}

uint64_t sub_10001AA3C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

uint64_t sub_10001AA60()
{
  return sub_10001B0E0(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_10001AA6C(char a1)
{
  return sub_10001B114(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t (*sub_10001AA78(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0LL) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001AAC0()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0LL) + 36)) != 2;
}

uint64_t sub_10001AAE8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

int *sub_10001AB0C@<X0>(uint64_t a1@<X8>)
{
  return sub_10001B1E0(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState, a1);
}

uint64_t sub_10001AB18()
{
  return sub_10001A698(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t sub_10001AB24(char a1)
{
  return sub_10001A6CC(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t (*sub_10001AB30(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0LL) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001AB78()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0LL) + 20)) != 2;
}

uint64_t sub_10001ABA0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_10001ABC4()
{
  return sub_10001A798(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t sub_10001ABD0(char a1)
{
  return sub_10001A7CC(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t (*sub_10001ABDC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0LL) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001AC24()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0LL) + 24)) != 2;
}

uint64_t sub_10001AC4C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_10001AC70()
{
  return sub_10001A898(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t sub_10001AC7C(char a1)
{
  return sub_10000534C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t (*sub_10001AC88(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0LL) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001ACD0()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0LL) + 28)) != 2;
}

uint64_t sub_10001ACF8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_10001AD1C()
{
  return sub_10001A96C(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t sub_10001AD28(char a1)
{
  return sub_10001A9A0(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t (*sub_10001AD34(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0LL) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001AD7C()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0LL) + 32)) != 2;
}

uint64_t sub_10001ADA4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

int *sub_10001ADC8@<X0>(uint64_t a1@<X8>)
{
  return sub_10001ADD4(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState, a1);
}

int *sub_10001ADD4@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (int *)a1(0LL);
  *(_BYTE *)(a2 + result[5]) = 2;
  *(_BYTE *)(a2 + result[6]) = 2;
  *(_BYTE *)(a2 + result[7]) = 2;
  *(_BYTE *)(a2 + result[8]) = 2;
  return result;
}

uint64_t sub_10001AE24()
{
  return sub_10001A698(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_10001AE30(char a1)
{
  return sub_10001A6CC(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t (*sub_10001AE3C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0LL) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001AE84()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0LL) + 20)) != 2;
}

uint64_t sub_10001AEAC()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_10001AED0()
{
  return sub_10001A798(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_10001AEDC(char a1)
{
  return sub_10001A7CC(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t (*sub_10001AEE8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0LL) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001AF30()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0LL) + 24)) != 2;
}

uint64_t sub_10001AF58()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_10001AF7C()
{
  return sub_10001A898(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_10001AF88(char a1)
{
  return sub_10000534C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t (*sub_10001AF94(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0LL) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001AFDC()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0LL) + 28)) != 2;
}

uint64_t sub_10001B004()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_10001B028()
{
  return sub_10001A96C(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_10001B034(char a1)
{
  return sub_10001A9A0(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t (*sub_10001B040(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0LL) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001B088()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0LL) + 32)) != 2;
}

uint64_t sub_10001B0B0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

uint64_t sub_10001B0D4()
{
  return sub_10001B0E0(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_10001B0E0(uint64_t (*a1)(void))
{
  return *(_BYTE *)(v1 + *(int *)(a1(0LL) + 36)) & 1;
}

uint64_t sub_10001B108(char a1)
{
  return sub_10001B114(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_10001B114(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0LL);
  *(_BYTE *)(v2 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_10001B140(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0LL) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001B188()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0LL) + 36)) != 2;
}

uint64_t sub_10001B1B0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

int *sub_10001B1D4@<X0>(uint64_t a1@<X8>)
{
  return sub_10001B1E0(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState, a1);
}

int *sub_10001B1E0@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (int *)a1(0LL);
  *(_BYTE *)(a2 + result[5]) = 2;
  *(_BYTE *)(a2 + result[6]) = 2;
  *(_BYTE *)(a2 + result[7]) = 2;
  *(_BYTE *)(a2 + result[8]) = 2;
  *(_BYTE *)(a2 + result[9]) = 2;
  return result;
}

uint64_t sub_10001B238()
{
  return sub_10001A698(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t sub_10001B244(char a1)
{
  return sub_10001A6CC(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t (*sub_10001B250(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0LL) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001B298()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0LL) + 20)) != 2;
}

uint64_t sub_10001B2C0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_10001B2E4()
{
  return sub_10001A798(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t sub_10001B2F0(char a1)
{
  return sub_10001A7CC(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t (*sub_10001B2FC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0LL) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001B344()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0LL) + 24)) != 2;
}

uint64_t sub_10001B36C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_10001B390()
{
  return sub_10001A898(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t sub_10001B39C(char a1)
{
  return sub_10000534C(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t (*sub_10001B3A8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0LL) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001B3F0()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0LL) + 28)) != 2;
}

uint64_t sub_10001B418()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_10001B43C()
{
  return sub_10001A96C(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t sub_10001B448(char a1)
{
  return sub_10001A9A0(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t (*sub_10001B454(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0LL) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001B49C()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0LL) + 32)) != 2;
}

uint64_t sub_10001B4C4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

int *sub_10001B4E8@<X0>(uint64_t a1@<X8>)
{
  return sub_10001ADD4(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState, a1);
}

uint64_t sub_10001B4F4()
{
  return sub_10001A698(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t sub_10001B500(char a1)
{
  return sub_10001A6CC(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t (*sub_10001B50C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0LL) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001B554()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0LL) + 20)) != 2;
}

uint64_t sub_10001B57C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_10001B5A0()
{
  return sub_10001A798(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t sub_10001B5AC(char a1)
{
  return sub_10001A7CC(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t (*sub_10001B5B8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0LL) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001B600()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0LL) + 24)) != 2;
}

uint64_t sub_10001B628()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_10001B64C()
{
  return sub_10001A898(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t sub_10001B658(char a1)
{
  return sub_10000534C(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t (*sub_10001B664(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0LL) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001B6AC()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0LL) + 28)) != 2;
}

uint64_t sub_10001B6D4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_10001B6F8()
{
  return sub_10001A96C(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t sub_10001B704(char a1)
{
  return sub_10001A9A0(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t (*sub_10001B710(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0LL) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001B758()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0LL) + 32)) != 2;
}

uint64_t sub_10001B780()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

int *sub_10001B7A4@<X0>(uint64_t a1@<X8>)
{
  return sub_10001ADD4(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState, a1);
}

uint64_t sub_10001B7B0()
{
  return sub_10001A698(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t sub_10001B7BC(char a1)
{
  return sub_10001A6CC(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t (*sub_10001B7C8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0LL) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001B810()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0LL) + 20)) != 2;
}

uint64_t sub_10001B838()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_10001B85C()
{
  return sub_10001A798(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t sub_10001B868(char a1)
{
  return sub_10001A7CC(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t (*sub_10001B874(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0LL) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001B8BC()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0LL) + 24)) != 2;
}

uint64_t sub_10001B8E4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_10001B908()
{
  return sub_10001A898(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t sub_10001B914(char a1)
{
  return sub_10000534C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t (*sub_10001B920(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0LL) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001B968()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0LL) + 28)) != 2;
}

uint64_t sub_10001B990()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_10001B9B4()
{
  return sub_10001A96C(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t sub_10001B9C0(char a1)
{
  return sub_10001A9A0(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t (*sub_10001B9CC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0LL) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001BA14()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0LL) + 32)) != 2;
}

uint64_t sub_10001BA3C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

int *sub_10001BA60@<X0>(uint64_t a1@<X8>)
{
  return sub_10001ADD4(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState, a1);
}

uint64_t sub_10001BA6C()
{
  return sub_10001A698(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t sub_10001BA78(char a1)
{
  return sub_10001A6CC(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t (*sub_10001BA84(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001BACC()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 20)) != 2;
}

uint64_t sub_10001BAF4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_10001BB18()
{
  return sub_10001A798(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t sub_10001BB24(char a1)
{
  return sub_10001A7CC(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t (*sub_10001BB30(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001BB78()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 24)) != 2;
}

uint64_t sub_10001BBA0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_10001BBC4()
{
  return sub_10001A898(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t sub_10001BBD0(char a1)
{
  return sub_10000534C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t (*sub_10001BBDC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001BC24()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 28)) != 2;
}

uint64_t sub_10001BC4C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_10001BC70()
{
  return sub_10001A96C(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t sub_10001BC7C(char a1)
{
  return sub_10001A9A0(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t (*sub_10001BC88(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001BCD0()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 32)) != 2;
}

uint64_t sub_10001BCF8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

uint64_t sub_10001BD1C()
{
  return sub_10001B0E0(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t sub_10001BD28(char a1)
{
  return sub_10001B114(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t (*sub_10001BD34(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001BD7C()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 36)) != 2;
}

uint64_t sub_10001BDA4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

uint64_t sub_10001BDC8()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 40)) & 1;
}

uint64_t sub_10001BDEC(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*sub_10001BE18(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 40);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001BE60()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 40)) != 2;
}

uint64_t sub_10001BE88()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 40)) = 2;
  return result;
}

uint64_t sub_10001BEAC()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 44)) & 1;
}

uint64_t sub_10001BED0(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*sub_10001BEFC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 44);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001BF44()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 44)) != 2;
}

uint64_t sub_10001BF6C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 44)) = 2;
  return result;
}

uint64_t sub_10001BF90()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 48)) & 1;
}

uint64_t sub_10001BFB4(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*sub_10001BFE0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 48);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001C028()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 48)) != 2;
}

uint64_t sub_10001C050()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 48)) = 2;
  return result;
}

uint64_t sub_10001C074()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 52)) & 1;
}

uint64_t sub_10001C098(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*sub_10001C0C4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 52);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001C10C()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 52)) != 2;
}

uint64_t sub_10001C134()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 52)) = 2;
  return result;
}

uint64_t sub_10001C158()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 56)) & 1;
}

uint64_t sub_10001C17C(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

uint64_t (*sub_10001C1A8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 56);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001C1F0()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 56)) != 2;
}

uint64_t sub_10001C218()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 56)) = 2;
  return result;
}

int *sub_10001C23C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
  *(_BYTE *)(a1 + result[5]) = 2;
  *(_BYTE *)(a1 + result[6]) = 2;
  *(_BYTE *)(a1 + result[7]) = 2;
  *(_BYTE *)(a1 + result[8]) = 2;
  *(_BYTE *)(a1 + result[9]) = 2;
  *(_BYTE *)(a1 + result[10]) = 2;
  *(_BYTE *)(a1 + result[11]) = 2;
  *(_BYTE *)(a1 + result[12]) = 2;
  *(_BYTE *)(a1 + result[13]) = 2;
  *(_BYTE *)(a1 + result[14]) = 2;
  return result;
}

uint64_t sub_10001C2B8()
{
  return sub_10001A698(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t sub_10001C2C4(char a1)
{
  return sub_10001A6CC(a1, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t (*sub_10001C2D0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0LL) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001C318()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0LL) + 20)) != 2;
}

uint64_t sub_10001C340()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_10001C364()
{
  return sub_10001A798(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t sub_10001C370(char a1)
{
  return sub_10001A7CC(a1, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t (*sub_10001C37C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0LL) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001C3C4()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0LL) + 24)) != 2;
}

uint64_t sub_10001C3EC()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_10001C410()
{
  return sub_10001A898(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t sub_10001C41C(char a1)
{
  return sub_10000534C(a1, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t (*sub_10001C428(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0LL) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001C470()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0LL) + 28)) != 2;
}

uint64_t sub_10001C498()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

int *sub_10001C4BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0LL);
  *(_BYTE *)(a1 + result[5]) = 2;
  *(_BYTE *)(a1 + result[6]) = 2;
  *(_BYTE *)(a1 + result[7]) = 2;
  return result;
}

uint64_t sub_10001C500()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL) + 20));
  swift_beginAccess(v1 + 16, v3, 0LL, 0LL);
  if (*(_BYTE *)(v1 + 16) == 13) {
    return 0LL;
  }
  else {
    return *(unsigned __int8 *)(v1 + 16);
  }
}

uint64_t sub_10001C550(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_10003D144(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 16, v12, 1LL, 0LL);
  *(_BYTE *)(v10 + 16) = a1;
  return result;
}

void (*sub_10001C5F4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0LL, 0LL);
  int v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 13) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10001C670;
}

void sub_10001C670(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_10003D144(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_10001C744()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL) + 20));
  swift_beginAccess(v1 + 16, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 16) != 13;
}

uint64_t sub_10001C794()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10003D144(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 16, v10, 1LL, 0LL);
  *(_BYTE *)(v8 + 16) = 13;
  return result;
}

uint64_t sub_10001C830@<X0>(uint64_t a1@<X8>)
{
  return sub_10001F4A4( &qword_1003517F0,  &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState,  a1);
}

uint64_t sub_10001C84C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003517F0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10003D144(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_1003517F0);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_1003517F0);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10001C9CC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003517F0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_1003517F0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    sub_100015764((uint64_t)v5, &qword_1003517F0);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  }

  return sub_10001CB24;
}

void sub_10001CB24(uint64_t a1, char a2)
{
}

BOOL sub_10001CB38()
{
  return sub_10001D054( &qword_1003517F0,  type metadata accessor for CLP_LogEntry_PrivateData_SyncState,  &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_10001CB5C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_1003517F0);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10003D144(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_1003517F0);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10001CC8C@<X0>(uint64_t a1@<X8>)
{
  return sub_10001D6E0( &qword_1003517F8,  &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState,  a1);
}

uint64_t sub_10001CCA8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003517F8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10003D144(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_1003517F8);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_1003517F8);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10001CE28(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003517F8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_1003517F8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    v9[v6[9]] = 2;
    sub_100015764((uint64_t)v5, &qword_1003517F8);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
  }

  return sub_10001CF88;
}

void sub_10001CF88(uint64_t a1, char a2)
{
}

void sub_10001CF9C(uint64_t a1, char a2, void (*a3)(void *), uint64_t (*a4)(void))
{
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void **)(*(void *)a1 + 40LL);
  uint64_t v7 = *(void **)(*(void *)a1 + 48LL);
  size_t v8 = *(void **)(*(void *)a1 + 32LL);
  if ((a2 & 1) != 0)
  {
    sub_10000404C(*(void *)(*(void *)a1 + 48LL), (uint64_t)v6, a4);
    a3(v6);
    sub_100004090((uint64_t)v7, a4);
  }

  else
  {
    a3(*(void **)(*(void *)a1 + 48LL));
  }

  free(v7);
  free(v6);
  free(v8);
  free(v5);
}

BOOL sub_10001D030()
{
  return sub_10001D054( &qword_1003517F8,  type metadata accessor for CLP_LogEntry_PrivateData_SyncState,  &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

BOOL sub_10001D054( uint64_t *a1, uint64_t (*a2)(void), void *a3, uint64_t (*a4)(void))
{
  uint64_t v9 = sub_100003A0C(a1);
  __chkstk_darwin(v9);
  uint64_t v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v12 = *(void *)(v4 + *(int *)(a2(0LL) + 20)) + *a3;
  swift_beginAccess(v12, v17, 0LL, 0LL);
  sub_10000E6C0(v12, (uint64_t)v11, a1);
  uint64_t v13 = a4(0LL);
  BOOL v14 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48LL))(v11, 1LL, v13) != 1;
  sub_100015764((uint64_t)v11, a1);
  return v14;
}

uint64_t sub_10001D138()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_1003517F8);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10003D144(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_1003517F8);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10001D268@<X0>(uint64_t a1@<X8>)
{
  return sub_10001F4A4( &qword_100351800,  &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState,  a1);
}

uint64_t sub_10001D284(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351800);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10003D144(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100351800);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100351800);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10001D404(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351800);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100351800);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    sub_100015764((uint64_t)v5, &qword_100351800);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
  }

  return sub_10001D55C;
}

void sub_10001D55C(uint64_t a1, char a2)
{
}

BOOL sub_10001D570()
{
  return sub_10001D054( &qword_100351800,  type metadata accessor for CLP_LogEntry_PrivateData_SyncState,  &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t sub_10001D594()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100351800);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10003D144(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100351800);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10001D6C4@<X0>(uint64_t a1@<X8>)
{
  return sub_10001D6E0( &qword_100351808,  &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState,  a1);
}

uint64_t sub_10001D6E0@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = sub_100003A0C(a1);
  __chkstk_darwin(v9);
  uint64_t v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v12 = *(void *)(v4 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL) + 20)) + *a2;
  swift_beginAccess(v12, v16, 0LL, 0LL);
  sub_10000E6C0(v12, (uint64_t)v11, a1);
  uint64_t v13 = (int *)a3(0LL);
  UnknownStorage.init()();
  *(_BYTE *)(a4 + v13[5]) = 2;
  *(_BYTE *)(a4 + v13[6]) = 2;
  *(_BYTE *)(a4 + v13[7]) = 2;
  *(_BYTE *)(a4 + v13[8]) = 2;
  *(_BYTE *)(a4 + v13[9]) = 2;
  return sub_100015764((uint64_t)v11, a1);
}

uint64_t sub_10001D80C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351808);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10003D144(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100351808);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100351808);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10001D98C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351808);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100351808);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    v9[v6[9]] = 2;
    sub_100015764((uint64_t)v5, &qword_100351808);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
  }

  return sub_10001DAEC;
}

void sub_10001DAEC(uint64_t a1, char a2)
{
}

BOOL sub_10001DB00()
{
  return sub_10001D054( &qword_100351808,  type metadata accessor for CLP_LogEntry_PrivateData_SyncState,  &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_10001DB24()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100351808);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10003D144(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100351808);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10001DC54@<X0>(uint64_t a1@<X8>)
{
  return sub_10001F4A4( &qword_100351810,  &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState,  a1);
}

uint64_t sub_10001DC70(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351810);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10003D144(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100351810);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100351810);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10001DDF0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351810);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100351810);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    sub_100015764((uint64_t)v5, &qword_100351810);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
  }

  return sub_10001DF48;
}

void sub_10001DF48(uint64_t a1, char a2)
{
}

BOOL sub_10001DF5C()
{
  return sub_10001D054( &qword_100351810,  type metadata accessor for CLP_LogEntry_PrivateData_SyncState,  &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t sub_10001DF80()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100351810);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10003D144(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100351810);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10001E0B0@<X0>(uint64_t a1@<X8>)
{
  return sub_10001F4A4( &qword_100351818,  &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState,  a1);
}

uint64_t sub_10001E0CC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351818);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10003D144(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100351818);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100351818);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10001E24C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351818);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100351818);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    sub_100015764((uint64_t)v5, &qword_100351818);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
  }

  return sub_10001E3A4;
}

void sub_10001E3A4(uint64_t a1, char a2)
{
}

BOOL sub_10001E3B8()
{
  return sub_10001D054( &qword_100351818,  type metadata accessor for CLP_LogEntry_PrivateData_SyncState,  &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t sub_10001E3DC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100351818);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10003D144(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100351818);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10001E50C@<X0>(uint64_t a1@<X8>)
{
  return sub_10001F4A4( &qword_100351820,  &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState,  a1);
}

uint64_t sub_10001E528(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351820);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10003D144(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100351820);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100351820);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10001E6A8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351820);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100351820);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    sub_100015764((uint64_t)v5, &qword_100351820);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
  }

  return sub_10001E800;
}

void sub_10001E800(uint64_t a1, char a2)
{
}

BOOL sub_10001E814()
{
  return sub_10001D054( &qword_100351820,  type metadata accessor for CLP_LogEntry_PrivateData_SyncState,  &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t sub_10001E838()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100351820);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10003D144(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100351820);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10001E968@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100351828);
  __chkstk_darwin(v3);
  uint64_t v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v10, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_100351828);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v7[5]) = 2;
  *(_BYTE *)(a1 + v7[6]) = 2;
  *(_BYTE *)(a1 + v7[7]) = 2;
  *(_BYTE *)(a1 + v7[8]) = 2;
  *(_BYTE *)(a1 + v7[9]) = 2;
  *(_BYTE *)(a1 + v7[10]) = 2;
  *(_BYTE *)(a1 + v7[11]) = 2;
  *(_BYTE *)(a1 + v7[12]) = 2;
  *(_BYTE *)(a1 + v7[13]) = 2;
  *(_BYTE *)(a1 + v7[14]) = 2;
  return sub_100015764((uint64_t)v5, &qword_100351828);
}

uint64_t sub_10001EAC0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351828);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10003D144(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100351828);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100351828);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10001EC40(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351828);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100351828);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    v9[v6[9]] = 2;
    v9[v6[10]] = 2;
    v9[v6[11]] = 2;
    v9[v6[12]] = 2;
    v9[v6[13]] = 2;
    v9[v6[14]] = 2;
    sub_100015764((uint64_t)v5, &qword_100351828);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
  }

  return sub_10001EDC8;
}

void sub_10001EDC8(uint64_t a1, char a2)
{
}

BOOL sub_10001EDDC()
{
  return sub_10001D054( &qword_100351828,  type metadata accessor for CLP_LogEntry_PrivateData_SyncState,  &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t sub_10001EE00()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100351828);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10003D144(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100351828);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10001EF30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100351830);
  __chkstk_darwin(v3);
  uint64_t v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v10, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_100351830);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0LL);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v7[5]) = 2;
  *(_BYTE *)(a1 + v7[6]) = 2;
  *(_BYTE *)(a1 + v7[7]) = 2;
  return sub_100015764((uint64_t)v5, &qword_100351830);
}

uint64_t sub_10001F050(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351830);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10003D144(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100351830);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100351830);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10001F1D0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351830);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100351830);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    sub_100015764((uint64_t)v5, &qword_100351830);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
  }

  return sub_10001F320;
}

void sub_10001F320(uint64_t a1, char a2)
{
}

BOOL sub_10001F334()
{
  return sub_10001D054( &qword_100351830,  type metadata accessor for CLP_LogEntry_PrivateData_SyncState,  &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1,  type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t sub_10001F358()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100351830);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10003D144(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100351830);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10001F488@<X0>(uint64_t a1@<X8>)
{
  return sub_10001F4A4( &qword_1003517F0,  &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState,  a1);
}

uint64_t sub_10001F4A4@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = sub_100003A0C(a1);
  __chkstk_darwin(v9);
  uint64_t v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v12 = *(void *)(v4 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL) + 20)) + *a2;
  swift_beginAccess(v12, v16, 0LL, 0LL);
  sub_10000E6C0(v12, (uint64_t)v11, a1);
  uint64_t v13 = (int *)a3(0LL);
  UnknownStorage.init()();
  *(_BYTE *)(a4 + v13[5]) = 2;
  *(_BYTE *)(a4 + v13[6]) = 2;
  *(_BYTE *)(a4 + v13[7]) = 2;
  *(_BYTE *)(a4 + v13[8]) = 2;
  return sub_100015764((uint64_t)v11, a1);
}

uint64_t sub_10001F5C8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003517F0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10003D144(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_1003517F0);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_1003517F0);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10001F748(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003517F0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_1003517F0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    sub_100015764((uint64_t)v5, &qword_1003517F0);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  }

  return sub_10001F8A0;
}

void sub_10001F8A0(uint64_t a1, char a2)
{
}

BOOL sub_10001F8B4()
{
  return sub_10001D054( &qword_1003517F0,  type metadata accessor for CLP_LogEntry_PrivateData_SyncState,  &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_10001F8D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_1003517F0);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10003D144(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_1003517F0);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10001FA08@<X0>(uint64_t a1@<X8>)
{
  return sub_100024054( type metadata accessor for CLP_LogEntry_PrivateData_SyncState,  &qword_10036D820,  &qword_10036D828,  (uint64_t)sub_10003CF2C,  a1);
}

uint64_t sub_10001FA2C()
{
  return sub_1000365F4(&qword_10036D820, &qword_10036D828, (uint64_t)sub_10003CF2C);
}

double sub_10001FA48()
{
  return sub_10001FC20(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_10001FA54(double a1)
{
  return sub_10001FC64(type metadata accessor for CLP_LogEntry_PrivateData_SvTime, a1);
}

uint64_t (*sub_10001FA60(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10001FAB8()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_10001FAC4()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

double sub_10001FAD0()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_10001FADC(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_SvTime, a1);
}

uint64_t (*sub_10001FAE8(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10001FB40()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_10001FB4C()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_10001FB58()
{
  return sub_10001A898(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_10001FB64(char a1)
{
  return sub_10000534C(a1, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t (*sub_10001FB70(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0LL) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001FBB8()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0LL) + 28)) != 2;
}

uint64_t sub_10001FBE0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

int *sub_10001FC04@<X0>(uint64_t a1@<X8>)
{
  return sub_10001FF20(type metadata accessor for CLP_LogEntry_PrivateData_SvTime, 2, a1);
}

double sub_10001FC14()
{
  return sub_10001FC20(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

double sub_10001FC20(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0LL) + 20);
  double result = *(double *)v2;
  if (*(_BYTE *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_10001FC58(double a1)
{
  return sub_10001FC64(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, a1);
}

uint64_t sub_10001FC64(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0LL);
  uint64_t v5 = v2 + *(int *)(result + 20);
  *(double *)uint64_t v5 = a2;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_10001FC9C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10001FCF4()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

BOOL sub_10001FD00(uint64_t (*a1)(void))
{
  return (*(_BYTE *)(v1 + *(int *)(a1(0LL) + 20) + 8) & 1) == 0;
}

uint64_t sub_10001FD30()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_10001FD3C(uint64_t (*a1)(void))
{
  uint64_t result = a1(0LL);
  uint64_t v3 = v1 + *(int *)(result + 20);
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  return result;
}

double sub_10001FD6C()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

double sub_10001FD78(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0LL) + 24);
  double result = *(double *)v2;
  if (*(_BYTE *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_10001FDB0(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, a1);
}

uint64_t sub_10001FDBC(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0LL);
  uint64_t v5 = v2 + *(int *)(result + 24);
  *(double *)uint64_t v5 = a2;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_10001FDF4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10001FE4C()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_10001FE58()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_10001FE64()
{
  return sub_10001A898(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_10001FE70(char a1)
{
  return sub_10000534C(a1, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t (*sub_10001FE7C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0LL) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10001FEC4()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0LL) + 28)) != 2;
}

uint64_t sub_10001FEEC()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

int *sub_10001FF10@<X0>(uint64_t a1@<X8>)
{
  return sub_10001FF20(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, 2, a1);
}

int *sub_10001FF20@<X0>(uint64_t (*a1)(void)@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result = (int *)a1(0LL);
  uint64_t v7 = a3 + result[5];
  *(void *)uint64_t v7 = 0LL;
  *(_BYTE *)(v7 + 8) = 1;
  uint64_t v8 = a3 + result[6];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  *(_BYTE *)(a3 + result[7]) = a2;
  return result;
}

double sub_10001FF84()
{
  return sub_10001FC20(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t sub_10001FF90(double a1)
{
  return sub_10001FC64(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, a1);
}

uint64_t (*sub_10001FF9C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10001FFF4()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t sub_100020000()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

double sub_10002000C()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t sub_100020018(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, a1);
}

uint64_t (*sub_100020024(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10002007C()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t sub_100020088()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t sub_100020094()
{
  return sub_10001A898(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t sub_1000200A0(char a1)
{
  return sub_10000534C(a1, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t (*sub_1000200AC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0LL) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000200F4()
{
  return *(_BYTE *)(v0
}

uint64_t sub_10002011C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_100020140()
{
  return sub_10001A96C(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t sub_10002014C(char a1)
{
  return sub_10001A9A0(a1, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t (*sub_100020158(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0LL) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000201A0()
{
  return *(_BYTE *)(v0
}

uint64_t sub_1000201C8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

int *sub_1000201EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0LL);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(void *)uint64_t v4 = 0LL;
  *(_BYTE *)(v4 + 8) = 1;
  *(_BYTE *)(a1 + result[7]) = 2;
  *(_BYTE *)(a1 + result[8]) = 2;
  return result;
}

uint64_t sub_10002024C()
{
  return sub_100027F98(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_100020258(uint64_t a1)
{
  return sub_100027FD8(a1, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t (*sub_100020264(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8)) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000202B8()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_1000202C4()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_1000202D0()
{
  uint64_t v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0LL) + 24));
  if (v1[8]) {
    return 0LL;
  }
  else {
    return *(void *)v1;
  }
}

uint64_t sub_100020300(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0LL);
  uint64_t v4 = v1 + *(int *)(result + 24);
  *(void *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_100020334(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8)) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_100003480;
}

BOOL sub_100020388()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_100020394()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

double sub_1000203A0()
{
  return sub_100027BE4(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_1000203AC(double a1)
{
  return sub_100027C28(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking, a1);
}

uint64_t (*sub_1000203B8(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0LL) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_100020410()
{
  return sub_100027CC4(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_10002041C()
{
  return sub_100027D00(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

double sub_100020428()
{
  return sub_100027D3C(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_100020434(double a1)
{
  return sub_100027D80(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking, a1);
}

uint64_t (*sub_100020440(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0LL) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_100020498()
{
  return sub_100027E1C(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_1000204A4()
{
  return sub_100027E58(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_1000204B0()
{
  return sub_10001B0E0(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_1000204BC(char a1)
{
  return sub_10001B114(a1, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t (*sub_1000204C8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0LL) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100020510()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0LL) + 36)) != 2;
}

uint64_t sub_100020538()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

int *sub_10002055C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0LL);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(void *)uint64_t v4 = 0LL;
  *(_BYTE *)(v4 + 8) = 1;
  uint64_t v5 = a1 + result[7];
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + 8) = 1;
  uint64_t v6 = a1 + result[8];
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  *(_BYTE *)(a1 + result[9]) = 2;
  return result;
}

uint64_t sub_1000205D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100351838);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_100351838);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  *(_BYTE *)(a1 + v7[7]) = 2;
  return sub_100015764((uint64_t)v5, &qword_100351838);
}

uint64_t sub_1000206E0(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak,  &qword_100351838,  type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

void (*sub_1000206FC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351838);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100351838);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    v9[v6[7]] = 2;
    sub_100015764((uint64_t)v5, &qword_100351838);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  }

  return sub_100020848;
}

void sub_100020848(uint64_t a1, char a2)
{
}

BOOL sub_10002085C()
{
  return sub_100031370( &qword_100351838,  type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak,  type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_100020878()
{
  return sub_100031448( type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak,  &qword_100351838,  type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_100020894@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100351840);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_100351840);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  *(_BYTE *)(a1 + v7[7]) = 2;
  return sub_100015764((uint64_t)v5, &qword_100351840);
}

uint64_t sub_1000209A0(uint64_t a1)
{
  return sub_1000308E8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak,  &qword_100351840,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

void (*sub_1000209BC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351840);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100351840);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    v9[v6[7]] = 2;
    sub_100015764((uint64_t)v5, &qword_100351840);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  }

  return sub_100020B08;
}

void sub_100020B08(uint64_t a1, char a2)
{
}

BOOL sub_100020B1C()
{
  return sub_100019928( &qword_100351840,  type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_100020B38()
{
  return sub_100019A00( type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak,  &qword_100351840,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

float sub_100020B54()
{
  return sub_100021008(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

uint64_t sub_100020B60(float a1)
{
  return sub_10002104C(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, a1);
}

uint64_t (*sub_100020B6C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0LL) + 28);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100020BC4()
{
  return sub_100020BD0(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

BOOL sub_100020BD0(uint64_t (*a1)(void))
{
  return (*(_BYTE *)(v1 + *(int *)(a1(0LL) + 28) + 4) & 1) == 0;
}

uint64_t sub_100020C00()
{
  return sub_100020C0C(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

uint64_t sub_100020C0C(uint64_t (*a1)(void))
{
  uint64_t result = a1(0LL);
  uint64_t v3 = v1 + *(int *)(result + 28);
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

uint64_t sub_100020C3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0LL);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  uint64_t v5 = a1 + v2[6];
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))( v5,  1LL,  1LL,  v6);
  uint64_t v8 = a1 + v2[7];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  return result;
}

uint64_t sub_100020CDC@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_SvTime, a1);
}

uint64_t sub_100020CE8@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, a1);
}

double sub_100020CF4()
{
  return sub_10001FC20(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t sub_100020D00(double a1)
{
  return sub_10001FC64(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, a1);
}

uint64_t (*sub_100020D0C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_100020D64()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t sub_100020D70()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

double sub_100020D7C()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t sub_100020D88(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, a1);
}

uint64_t (*sub_100020D94(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_100020DEC()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t sub_100020DF8()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t sub_100020E04()
{
  return sub_10002E084(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t sub_100020E10(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_100020E3C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0LL) + 28);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100003798;
}

BOOL sub_100020E88()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0LL) + 28)) != 6;
}

uint64_t sub_100020EB0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 6;
  return result;
}

int *sub_100020ED4@<X0>(uint64_t a1@<X8>)
{
  return sub_10001FF20(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, 6, a1);
}

uint64_t sub_100020EE4()
{
  return 6LL;
}

float sub_100020EEC()
{
  return sub_1000275F0(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_100020EF8(float a1)
{
  return sub_100027634(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, a1);
}

uint64_t (*sub_100020F04(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0LL) + 20);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100020F5C()
{
  return sub_1000192B8(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_100020F68()
{
  return sub_1000192F4(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

float sub_100020F74()
{
  return sub_1000276E8(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_100020F80(float a1)
{
  return sub_10002772C(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, a1);
}

uint64_t (*sub_100020F8C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0LL) + 24);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100020FE4()
{
  return sub_1000277C8(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_100020FF0()
{
  return sub_100027804(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

float sub_100020FFC()
{
  return sub_100021008(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

float sub_100021008(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0LL) + 28);
  float result = *(float *)v2;
  if (*(_BYTE *)(v2 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100021040(float a1)
{
  return sub_10002104C(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, a1);
}

uint64_t sub_10002104C(uint64_t (*a1)(void), float a2)
{
  uint64_t result = a1(0LL);
  uint64_t v5 = v2 + *(int *)(result + 28);
  *(float *)uint64_t v5 = a2;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_100021084(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0LL) + 28);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000210DC()
{
  return sub_100020BD0(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_1000210E8()
{
  return sub_100020C0C(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

int *sub_1000210F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0LL);
  uint64_t v3 = a1 + result[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  uint64_t v4 = a1 + result[6];
  *(_DWORD *)uint64_t v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  uint64_t v5 = a1 + result[7];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  return result;
}

float sub_100021150()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL) + 20));
  swift_beginAccess(v1 + 16, v3, 0LL, 0LL);
  float result = *(float *)(v1 + 16);
  if (*(_BYTE *)(v1 + 20)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000211A8(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_100043C8C(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 16, v12, 1LL, 0LL);
  *(float *)(v10 + 16) = a1;
  *(_BYTE *)(v10 + 20) = 0;
  return result;
}

void (*sub_100021250(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0LL, 0LL);
  float v6 = *(float *)(v5 + 16);
  if (*(_BYTE *)(v5 + 20)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000212D4;
}

void sub_1000212D4(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_100043C8C(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_1000213A8()
{
  return sub_10002EE20(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t sub_1000213B4()
{
  return sub_10002EE90( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass,  (void (*)(uint64_t))sub_100043C8C);
}

float sub_1000213D0()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL) + 20));
  swift_beginAccess(v1 + 24, v3, 0LL, 0LL);
  float result = *(float *)(v1 + 24);
  if (*(_BYTE *)(v1 + 28)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100021428(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_100043C8C(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 24, v12, 1LL, 0LL);
  *(float *)(v10 + 24) = a1;
  *(_BYTE *)(v10 + 28) = 0;
  return result;
}

void (*sub_1000214D0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 24, v3, 0LL, 0LL);
  float v6 = *(float *)(v5 + 24);
  if (*(_BYTE *)(v5 + 28)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_100021554;
}

void sub_100021554(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_100043C8C(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_100021628()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL) + 20));
  swift_beginAccess(v1 + 24, v3, 0LL, 0LL);
  return (*(_BYTE *)(v1 + 28) & 1) == 0;
}

uint64_t sub_100021678()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_100043C8C(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 24, v10, 1LL, 0LL);
  *(_DWORD *)(v8 + 24) = 0;
  *(_BYTE *)(v8 + 28) = 1;
  return result;
}

uint64_t sub_100021718@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100351848);
  __chkstk_darwin(v3);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v12, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_100351848);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  *(_BYTE *)(a1 + v7[7]) = 6;
  return sub_100015764((uint64_t)v5, &qword_100351848);
}

uint64_t sub_10002184C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351848);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_100043C8C(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100351848);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100351848);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000219CC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351848);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100351848);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    v9[v6[7]] = 6;
    sub_100015764((uint64_t)v5, &qword_100351848);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
  }

  return sub_100021B30;
}

void sub_100021B30(uint64_t a1, char a2)
{
}

BOOL sub_100021B44()
{
  return sub_10001D054( &qword_100351848,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime,  type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t sub_100021B68()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100351848);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_100043C8C(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100351848);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100021C98@<X0>(uint64_t a1@<X8>)
{
  return sub_10002255C( &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds,  a1);
}

uint64_t sub_100021CA4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351850);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_100043C8C(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100351850);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100351850);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100021E24(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351850);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100351850);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    sub_100015764((uint64_t)v5, &qword_100351850);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  }

  return sub_100021F8C;
}

void sub_100021F8C(uint64_t a1, char a2)
{
}

BOOL sub_100021FA0()
{
  return sub_10001D054( &qword_100351850,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds,  type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_100021FC4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100351850);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_100043C8C(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100351850);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000220F4@<X0>(uint64_t a1@<X8>)
{
  return sub_10002255C( &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb,  a1);
}

uint64_t sub_100022100(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351850);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_100043C8C(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100351850);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100351850);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100022280(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351850);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100351850);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    sub_100015764((uint64_t)v5, &qword_100351850);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  }

  return sub_1000223E8;
}

void sub_1000223E8(uint64_t a1, char a2)
{
}

BOOL sub_1000223FC()
{
  return sub_10001D054( &qword_100351850,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb,  type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_100022420()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100351850);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_100043C8C(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100351850);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100022550@<X0>(uint64_t a1@<X8>)
{
  return sub_10002255C( &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds,  a1);
}

uint64_t sub_10002255C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100003A0C(&qword_100351850);
  __chkstk_darwin(v5);
  uint64_t v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v8, v15, 0LL, 0LL);
  sub_10000E6C0(v8, (uint64_t)v7, &qword_100351850);
  uint64_t v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0LL);
  UnknownStorage.init()();
  uint64_t v10 = a2 + v9[5];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  uint64_t v11 = a2 + v9[6];
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  uint64_t v12 = a2 + v9[7];
  *(_DWORD *)uint64_t v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  return sub_100015764((uint64_t)v7, &qword_100351850);
}

uint64_t sub_10002269C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351850);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_100043C8C(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100351850);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100351850);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10002281C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351850);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100351850);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    sub_100015764((uint64_t)v5, &qword_100351850);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  }

  return sub_100022984;
}

void sub_100022984(uint64_t a1, char a2)
{
}

BOOL sub_100022998()
{
  return sub_10001D054( &qword_100351850,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds,  type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_1000229BC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100351850);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_100043C8C(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100351850);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100022AEC()
{
  return sub_100022BE0(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount);
}

uint64_t sub_100022AF8(int a1)
{
  return sub_100022C4C( a1,  &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount);
}

void (*sub_100022B04(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_100022B90;
}

void sub_100022B90(uint64_t *a1, char a2)
{
}

BOOL sub_100022B9C()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount);
}

uint64_t sub_100022BB0()
{
  return sub_100022F10( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass,  (void (*)(uint64_t))sub_100043C8C,  &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount);
}

uint64_t sub_100022BD4()
{
  return sub_100022BE0(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs);
}

uint64_t sub_100022BE0(void *a1)
{
  uint64_t v2 = (_BYTE *)(*(void *)(v1
  swift_beginAccess(v2, v4, 0LL, 0LL);
  if (v2[4]) {
    return 0LL;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t sub_100022C40(int a1)
{
  return sub_100022C4C( a1,  &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs);
}

uint64_t sub_100022C4C(int a1, void *a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v2 + v6);
    uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0LL);
    uint64_t v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v10 = swift_retain(v7);
    sub_100043C8C(v10);
    uint64_t v11 = *(void *)(v4 + v6);
    *(void *)(v4 + v6) = v9;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v4 + v6) + *a2;
  uint64_t result = swift_beginAccess(v12, v14, 1LL, 0LL);
  *(_DWORD *)uint64_t v12 = a1;
  *(_BYTE *)(v12 + 4) = 0;
  return result;
}

void (*sub_100022D00(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_100022D8C;
}

void sub_100022D8C(uint64_t *a1, char a2)
{
}

void sub_100022D98(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = *a1;
  int v6 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v8 = v5 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v8 = v5 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v9 = *(int *)(v5 + 84);
    uint64_t v10 = *(void *)(v5 + 72);
    uint64_t v11 = *(void *)(v10 + v9);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_100043C8C(v14);
    uint64_t v15 = *(void *)(v10 + v9);
    *(void *)(v10 + v9) = v13;
    swift_release(v15);
  }

BOOL sub_100022E78()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs);
}

BOOL sub_100022E8C(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = *(void *)(v2 + *(int *)(a1(0LL) + 20)) + *a2;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return (*(_BYTE *)(v3 + 4) & 1) == 0;
}

uint64_t sub_100022EEC()
{
  return sub_100022F10( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass,  (void (*)(uint64_t))sub_100043C8C,  &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs);
}

uint64_t sub_100022F10( uint64_t (*a1)(void), uint64_t (*a2)(void), void (*a3)(uint64_t), void *a4)
{
  uint64_t v8 = v4;
  uint64_t v9 = *(int *)(a1(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v4 + v9)) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v4 + v9);
    uint64_t v11 = a2(0LL);
    uint64_t v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v13 = swift_retain(v10);
    a3(v13);
    uint64_t v14 = *(void *)(v8 + v9);
    *(void *)(v8 + v9) = v12;
    swift_release(v14);
  }

  uint64_t v15 = *(void *)(v8 + v9) + *a4;
  uint64_t result = swift_beginAccess(v15, v17, 1LL, 0LL);
  *(_DWORD *)uint64_t v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  return result;
}

uint64_t sub_100022FD0()
{
  return sub_1000230E0( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
}

uint64_t sub_100022FE4(char a1)
{
  return sub_100023164( a1,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass,  (void (*)(uint64_t))sub_100043C8C,  &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
}

void (*sub_100023008(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 7) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_100023090;
}

void sub_100023090(uint64_t *a1, char a2)
{
}

BOOL sub_1000230AC()
{
  return sub_1000233C4( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
}

uint64_t sub_1000230C0()
{
  return sub_100023430(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
}

uint64_t sub_1000230CC()
{
  return sub_1000230E0( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
}

uint64_t sub_1000230E0(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)(v2 + *(int *)(a1(0LL) + 20)) + *a2);
  swift_beginAccess(v3, v5, 0LL, 0LL);
  if (*v3 == 7) {
    return 0LL;
  }
  else {
    return *v3;
  }
}

uint64_t sub_100023140(char a1)
{
  return sub_100023164( a1,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass,  (void (*)(uint64_t))sub_100043C8C,  &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
}

uint64_t sub_100023164( char a1, uint64_t (*a2)(void), uint64_t (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = v5;
  uint64_t v11 = *(int *)(a2(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v5 + v11)) & 1) == 0)
  {
    uint64_t v12 = *(void *)(v5 + v11);
    uint64_t v13 = a3(0LL);
    uint64_t v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    uint64_t v15 = swift_retain(v12);
    a4(v15);
    uint64_t v16 = *(void *)(v9 + v11);
    *(void *)(v9 + v11) = v14;
    swift_release(v16);
  }

  uint64_t v17 = (_BYTE *)(*(void *)(v9 + v11) + *a5);
  uint64_t result = swift_beginAccess(v17, v19, 1LL, 0LL);
  *uint64_t v17 = a1;
  return result;
}

void (*sub_100023224(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 7) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_1000232AC;
}

void sub_1000232AC(uint64_t *a1, char a2)
{
}

void sub_1000232C8( uint64_t *a1, char a2, uint64_t (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = *a1;
  char v10 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v12 = v9 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v12 = v9 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v13 = *(int *)(v9 + 80);
    uint64_t v14 = *(void *)(v9 + 72);
    uint64_t v15 = *(void *)(v14 + v13);
    uint64_t v16 = a3(0LL);
    uint64_t v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    uint64_t v18 = swift_retain(v15);
    a4(v18);
    uint64_t v19 = *(void *)(v14 + v13);
    *(void *)(v14 + v13) = v17;
    swift_release(v19);
  }

BOOL sub_1000233B0()
{
  return sub_1000233C4( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
}

BOOL sub_1000233C4(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)(v2 + *(int *)(a1(0LL) + 20)) + *a2);
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return *v3 != 7;
}

uint64_t sub_100023424()
{
  return sub_100023430(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
}

uint64_t sub_100023430(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_100043C8C(v8);
    uint64_t v9 = *(void *)(v3 + v4);
    *(void *)(v3 + v4) = v7;
    swift_release(v9);
  }

  char v10 = (_BYTE *)(*(void *)(v3 + v4) + *a1);
  uint64_t result = swift_beginAccess(v10, v12, 1LL, 0LL);
  *char v10 = 7;
  return result;
}

uint64_t sub_1000234E0()
{
  return sub_100022BE0(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID);
}

uint64_t sub_1000234EC(int a1)
{
  return sub_100022C4C( a1,  &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID);
}

void (*sub_1000234F8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_100023584;
}

void sub_100023584(uint64_t *a1, char a2)
{
}

BOOL sub_100023590()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID);
}

uint64_t sub_1000235A4()
{
  return sub_100022F10( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass,  (void (*)(uint64_t))sub_100043C8C,  &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID);
}

float sub_1000235C8()
{
  return sub_1000236F8( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds);
}

uint64_t sub_1000235DC(float a1)
{
  return sub_100023784( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass,  (void (*)(uint64_t))sub_100043C8C,  &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds,  a1);
}

void (*sub_100023600(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  float v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_100023690;
}

void sub_100023690(uint64_t *a1, char a2)
{
}

BOOL sub_1000236AC()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds);
}

uint64_t sub_1000236C0()
{
  return sub_100022F10( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass,  (void (*)(uint64_t))sub_100043C8C,  &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds);
}

float sub_1000236E4()
{
  return sub_1000236F8( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds);
}

float sub_1000236F8(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = *(void *)(v2 + *(int *)(a1(0LL) + 20)) + *a2;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  float result = *(float *)v3;
  if (*(_BYTE *)(v3 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100023760(float a1)
{
  return sub_100023784( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass,  (void (*)(uint64_t))sub_100043C8C,  &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds,  a1);
}

uint64_t sub_100023784( uint64_t (*a1)(void), uint64_t (*a2)(void), void (*a3)(uint64_t), void *a4, float a5)
{
  uint64_t v9 = v5;
  uint64_t v11 = *(int *)(a1(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v5 + v11)) & 1) == 0)
  {
    uint64_t v12 = *(void *)(v5 + v11);
    uint64_t v13 = a2(0LL);
    uint64_t v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    uint64_t v15 = swift_retain(v12);
    a3(v15);
    uint64_t v16 = *(void *)(v9 + v11);
    *(void *)(v9 + v11) = v14;
    swift_release(v16);
  }

  uint64_t v17 = *(void *)(v9 + v11) + *a4;
  uint64_t result = swift_beginAccess(v17, v19, 1LL, 0LL);
  *(float *)uint64_t v17 = a5;
  *(_BYTE *)(v17 + 4) = 0;
  return result;
}

void (*sub_10002384C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  float v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000238DC;
}

void sub_1000238DC(uint64_t *a1, char a2)
{
}

void sub_1000238F8( uint64_t *a1, char a2, uint64_t (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = *a1;
  int v10 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v12 = v9 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v12 = v9 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v13 = *(int *)(v9 + 84);
    uint64_t v14 = *(void *)(v9 + 72);
    uint64_t v15 = *(void *)(v14 + v13);
    uint64_t v16 = a3(0LL);
    uint64_t v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    uint64_t v18 = swift_retain(v15);
    a4(v18);
    uint64_t v19 = *(void *)(v14 + v13);
    *(void *)(v14 + v13) = v17;
    swift_release(v19);
  }

BOOL sub_1000239E4()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds);
}

uint64_t sub_1000239F8()
{
  return sub_100022F10( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass,  (void (*)(uint64_t))sub_100043C8C,  &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds);
}

uint64_t sub_100023A1C()
{
  uint64_t v1 = (uint64_t *)(*(void *)(v0
                             + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL)
                                      + 20))
                 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
  swift_beginAccess(v1, v6, 0LL, 0LL);
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  if (v3 >> 60 == 15) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = *v1;
  }
  sub_10005F2F8(v2, v3);
  return v4;
}

uint64_t sub_100023A90(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v2 + v6);
    uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0LL);
    uint64_t v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v10 = swift_retain(v7);
    sub_100043C8C(v10);
    uint64_t v11 = *(void *)(v3 + v6);
    *(void *)(v3 + v6) = v9;
    swift_release(v11);
  }

  swift_beginAccess(v12, v16, 1LL, 0LL);
  uint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  *uint64_t v12 = a1;
  v12[1] = a2;
  return sub_10005F30C(v13, v14);
}

void (*sub_100023B4C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL) + 20);
  *((_DWORD *)v3 + 24) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  if (v7 >> 60 == 15) {
    uint64_t v8 = 0LL;
  }
  else {
    uint64_t v8 = *v5;
  }
  unint64_t v9 = 0xC000000000000000LL;
  if (v7 >> 60 != 15) {
    unint64_t v9 = v5[1];
  }
  v3[9] = v8;
  v3[10] = v9;
  sub_10005F2F8(v6, v7);
  return sub_100023BE4;
}

void sub_100023BE4(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(int *)(*a1 + 96);
  unint64_t v5 = *(void *)(*a1 + 80);
  uint64_t v6 = *(void *)(*a1 + 88);
  if ((a2 & 1) != 0)
  {
    sub_100017F58(*(void *)(*a1 + 72), v5);
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v6 + v4)) & 1) == 0)
    {
      uint64_t v7 = *(int *)(v2 + 96);
      uint64_t v8 = *(void *)(v2 + 88);
      uint64_t v9 = *(void *)(v8 + v7);
      uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0LL);
      uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
      uint64_t v12 = swift_retain(v9);
      sub_100043C8C(v12);
      uint64_t v13 = *(void *)(v8 + v7);
      *(void *)(v8 + v7) = v11;
      swift_release(v13);
    }

    swift_beginAccess(v14, v2 + 24, 1LL, 0LL);
    uint64_t v15 = *v14;
    unint64_t v16 = v14[1];
    *unint64_t v14 = v3;
    v14[1] = v5;
    sub_10005F30C(v15, v16);
    sub_100017F9C(*(void *)(v2 + 72), *(void *)(v2 + 80));
  }

  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v6 + v4)) & 1) == 0)
    {
      uint64_t v17 = *(int *)(v2 + 96);
      uint64_t v18 = *(void *)(v2 + 88);
      uint64_t v19 = *(void *)(v18 + v17);
      uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0LL);
      uint64_t v21 = swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
      uint64_t v22 = swift_retain(v19);
      sub_100043C8C(v22);
      uint64_t v23 = *(void *)(v18 + v17);
      *(void *)(v18 + v17) = v21;
      swift_release(v23);
    }

    swift_beginAccess(v24, v2 + 48, 1LL, 0LL);
    uint64_t v25 = *v24;
    unint64_t v26 = v24[1];
    *unint64_t v24 = v3;
    v24[1] = v5;
    sub_10005F30C(v25, v26);
  }

  free((void *)v2);
}

BOOL sub_100023D58()
{
  return *(void *)(v1 + 8) >> 60 != 15LL;
}

uint64_t sub_100023DB8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_100043C8C(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  swift_beginAccess(v8, v12, 1LL, 0LL);
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  *(_OWORD *)uint64_t v8 = xmmword_1002B4290;
  return sub_10005F30C(v9, v10);
}

uint64_t sub_100023E6C()
{
  return sub_100022BE0(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat);
}

uint64_t sub_100023E78(int a1)
{
  return sub_100022C4C( a1,  &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat);
}

void (*sub_100023E84(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_100023F10;
}

void sub_100023F10(uint64_t *a1, char a2)
{
}

BOOL sub_100023F1C()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat);
}

uint64_t sub_100023F30()
{
  return sub_100022F10( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass,  (void (*)(uint64_t))sub_100043C8C,  &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat);
}

uint64_t sub_100023F54()
{
  return sub_100029458( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
}

uint64_t sub_100023F68(uint64_t a1)
{
  return sub_1000294D8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass,  (void (*)(uint64_t))sub_100043C8C,  &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
}

void (*sub_100023F8C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  uint64_t v6 = *v5;
  v3[9] = *v5;
  swift_bridgeObjectRetain(v6);
  return sub_100024014;
}

void sub_100024014(uint64_t *a1, char a2)
{
}

uint64_t sub_100024030@<X0>(uint64_t a1@<X8>)
{
  return sub_100024054( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  &qword_10036D870,  &qword_10036D878,  (uint64_t)sub_100043AD8,  a1);
}

uint64_t sub_100024054@<X0>( uint64_t (*a1)(void)@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *(int *)(a1(0LL) + 20);
  if (*a2 != -1LL) {
    swift_once(a2, a4);
  }
  uint64_t v11 = *a3;
  *(void *)(a5 + v10) = *a3;
  return swift_retain(v11);
}

uint64_t sub_1000240C4()
{
  return sub_1000365F4(&qword_10036D870, &qword_10036D878, (uint64_t)sub_100043AD8);
}

uint64_t sub_1000240E0@<X0>(uint64_t a1@<X8>)
{
  return sub_10002A444( type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id,  a1);
}

uint64_t sub_1000240F4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351858);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_100046B1C(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100351858);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100351858);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100024274(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351858);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100351858);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
    sub_100015764((uint64_t)v5, &qword_100351858);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  }

  return sub_1000243E8;
}

void sub_1000243E8(uint64_t a1, char a2)
{
}

BOOL sub_1000243FC()
{
  return sub_10001D054( &qword_100351858,  type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id,  type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_100024420()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100351858);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_100046B1C(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100351858);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100024550@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100351860);
  __chkstk_darwin(v3);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v12, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_100351860);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL);
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (qword_10036D820 != -1) {
    swift_once(&qword_10036D820, sub_10003CF2C);
  }
  uint64_t v9 = qword_10036D828;
  *(void *)(a1 + v8) = qword_10036D828;
  swift_retain(v9);
  return sub_100015764((uint64_t)v5, &qword_100351860);
}

uint64_t sub_100024690(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351860);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_100046B1C(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100351860);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100351860);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100024810(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351860);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100351860);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = *(int *)(v6 + 20);
    if (qword_10036D820 != -1) {
      swift_once(&qword_10036D820, sub_10003CF2C);
    }
    uint64_t v12 = qword_10036D828;
    *(void *)&v9[v11] = qword_10036D828;
    swift_retain(v12);
    sub_100015764((uint64_t)v5, &qword_100351860);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  }

  return sub_100024980;
}

void sub_100024980(uint64_t a1, char a2)
{
}

BOOL sub_100024994()
{
  return sub_10001D054( &qword_100351860,  type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState,  type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
}

uint64_t sub_1000249B8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100351860);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_100046B1C(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100351860);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100024AE8()
{
  return sub_100024BDC(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds);
}

uint64_t sub_100024AF4(uint64_t a1)
{
  return sub_100024C48( a1,  &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds);
}

void (*sub_100024B00(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  uint64_t v6 = *(void *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    uint64_t v6 = 0LL;
  }
  v3[9] = v6;
  return sub_100024B8C;
}

void sub_100024B8C(uint64_t *a1, char a2)
{
}

BOOL sub_100024B98()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds);
}

uint64_t sub_100024BAC()
{
  return sub_100024F0C( type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass,  (void (*)(uint64_t))sub_100046B1C,  &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds);
}

uint64_t sub_100024BD0()
{
  return sub_100024BDC(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds);
}

uint64_t sub_100024BDC(void *a1)
{
  if (v2[8]) {
    return 0LL;
  }
  else {
    return *(void *)v2;
  }
}

uint64_t sub_100024C3C(uint64_t a1)
{
  return sub_100024C48( a1,  &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds);
}

uint64_t sub_100024C48(uint64_t a1, void *a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v2 + v6);
    uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0LL);
    uint64_t v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v10 = swift_retain(v7);
    sub_100046B1C(v10);
    uint64_t v11 = *(void *)(v4 + v6);
    *(void *)(v4 + v6) = v9;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v4 + v6) + *a2;
  uint64_t result = swift_beginAccess(v12, v14, 1LL, 0LL);
  *(void *)uint64_t v12 = a1;
  *(_BYTE *)(v12 + 8) = 0;
  return result;
}

void (*sub_100024CFC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  uint64_t v6 = *(void *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    uint64_t v6 = 0LL;
  }
  v3[9] = v6;
  return sub_100024D88;
}

void sub_100024D88(uint64_t *a1, char a2)
{
}

void sub_100024D94(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v8 = v5 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v8 = v5 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v9 = *(int *)(v5 + 88);
    uint64_t v10 = *(void *)(v5 + 80);
    uint64_t v11 = *(void *)(v10 + v9);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_100046B1C(v14);
    uint64_t v15 = *(void *)(v10 + v9);
    *(void *)(v10 + v9) = v13;
    swift_release(v15);
  }

BOOL sub_100024E74()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds);
}

BOOL sub_100024E88(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = *(void *)(v2 + *(int *)(a1(0LL) + 20)) + *a2;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return (*(_BYTE *)(v3 + 8) & 1) == 0;
}

uint64_t sub_100024EE8()
{
  return sub_100024F0C( type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass,  (void (*)(uint64_t))sub_100046B1C,  &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds);
}

uint64_t sub_100024F0C( uint64_t (*a1)(void), uint64_t (*a2)(void), void (*a3)(uint64_t), void *a4)
{
  uint64_t v8 = v4;
  uint64_t v9 = *(int *)(a1(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v4 + v9)) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v4 + v9);
    uint64_t v11 = a2(0LL);
    uint64_t v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v13 = swift_retain(v10);
    a3(v13);
    uint64_t v14 = *(void *)(v8 + v9);
    *(void *)(v8 + v9) = v12;
    swift_release(v14);
  }

  uint64_t v15 = *(void *)(v8 + v9) + *a4;
  uint64_t result = swift_beginAccess(v15, v17, 1LL, 0LL);
  *(void *)uint64_t v15 = 0LL;
  *(_BYTE *)(v15 + 8) = 1;
  return result;
}

uint64_t sub_100024FCC()
{
  return sub_100024BDC(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds);
}

uint64_t sub_100024FD8(uint64_t a1)
{
  return sub_100024C48( a1,  &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds);
}

void (*sub_100024FE4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  uint64_t v6 = *(void *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    uint64_t v6 = 0LL;
  }
  v3[9] = v6;
  return sub_100025070;
}

void sub_100025070(uint64_t *a1, char a2)
{
}

BOOL sub_10002507C()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds);
}

uint64_t sub_100025090()
{
  return sub_100024F0C( type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass,  (void (*)(uint64_t))sub_100046B1C,  &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds);
}

uint64_t sub_1000250B4@<X0>(uint64_t a1@<X8>)
{
  return sub_100025538( &qword_100351838,  &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime,  type metadata accessor for CLP_LogEntry_PrivateData_SvTime,  a1);
}

uint64_t sub_1000250D0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351838);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_100046B1C(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100351838);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100351838);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100025250(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351838);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100351838);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    v9[v6[7]] = 2;
    sub_100015764((uint64_t)v5, &qword_100351838);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  }

  return sub_1000253B4;
}

void sub_1000253B4(uint64_t a1, char a2)
{
}

BOOL sub_1000253C8()
{
  return sub_10001D054( &qword_100351838,  type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime,  type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_1000253EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100351838);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_100046B1C(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100351838);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10002551C@<X0>(uint64_t a1@<X8>)
{
  return sub_100025538( &qword_100351840,  &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset,  a1);
}

uint64_t sub_100025538@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = sub_100003A0C(a1);
  __chkstk_darwin(v9);
  uint64_t v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v12 = *(void *)(v4 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0LL) + 20)) + *a2;
  swift_beginAccess(v12, v18, 0LL, 0LL);
  sub_10000E6C0(v12, (uint64_t)v11, a1);
  uint64_t v13 = (int *)a3(0LL);
  UnknownStorage.init()();
  uint64_t v14 = a4 + v13[5];
  *(void *)uint64_t v14 = 0LL;
  *(_BYTE *)(v14 + 8) = 1;
  uint64_t v15 = a4 + v13[6];
  *(void *)uint64_t v15 = 0LL;
  *(_BYTE *)(v15 + 8) = 1;
  *(_BYTE *)(a4 + v13[7]) = 2;
  return sub_100015764((uint64_t)v11, a1);
}

uint64_t sub_100025668(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351840);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_100046B1C(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100351840);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100351840);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000257E8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351840);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100351840);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    v9[v6[7]] = 2;
    sub_100015764((uint64_t)v5, &qword_100351840);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  }

  return sub_10002594C;
}

void sub_10002594C(uint64_t a1, char a2)
{
}

BOOL sub_100025960()
{
  return sub_10001D054( &qword_100351840,  type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_100025984()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100351840);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_100046B1C(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100351840);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100025AB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100351868);
  __chkstk_darwin(v3);
  uint64_t v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v14, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_100351868);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  uint64_t v11 = a1 + v7[8];
  *(void *)uint64_t v11 = 0LL;
  *(_BYTE *)(v11 + 8) = 1;
  *(_BYTE *)(a1 + v7[9]) = 2;
  return sub_100015764((uint64_t)v5, &qword_100351868);
}

uint64_t sub_100025C08(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351868);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_100046B1C(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100351868);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100351868);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100025D88(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351868);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100351868);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    uint64_t v14 = &v9[v6[8]];
    *(void *)uint64_t v14 = 0LL;
    v14[8] = 1;
    v9[v6[9]] = 2;
    sub_100015764((uint64_t)v5, &qword_100351868);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  }

  return sub_100025F0C;
}

void sub_100025F0C(uint64_t a1, char a2)
{
}

BOOL sub_100025F20()
{
  return sub_10001D054( &qword_100351868,  type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking,  type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_100025F44()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100351868);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_100046B1C(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100351868);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100026074@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100351870);
  __chkstk_darwin(v3);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v12, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_100351870);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL);
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (qword_10036D870 != -1) {
    swift_once(&qword_10036D870, sub_100043AD8);
  }
  uint64_t v9 = qword_10036D878;
  *(void *)(a1 + v8) = qword_10036D878;
  swift_retain(v9);
  return sub_100015764((uint64_t)v5, &qword_100351870);
}

uint64_t sub_1000261B4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351870);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_100046B1C(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100351870);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100351870);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100026334(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351870);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100351870);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = *(int *)(v6 + 20);
    if (qword_10036D870 != -1) {
      swift_once(&qword_10036D870, sub_100043AD8);
    }
    uint64_t v12 = qword_10036D878;
    *(void *)&v9[v11] = qword_10036D878;
    swift_retain(v12);
    sub_100015764((uint64_t)v5, &qword_100351870);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  }

  return sub_1000264A4;
}

void sub_1000264A4(uint64_t a1, char a2)
{
}

BOOL sub_1000264B8()
{
  return sub_10001D054( &qword_100351870,  type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t sub_1000264DC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100351870);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_100046B1C(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100351870);
  swift_endAccess(v16);
  return swift_release(v11);
}

float sub_10002660C()
{
  return sub_1000236F8( type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz);
}

uint64_t sub_100026620(float a1)
{
  return sub_100023784( type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass,  (void (*)(uint64_t))sub_100046B1C,  &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz,  a1);
}

void (*sub_100026644(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  float v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000266D4;
}

void sub_1000266D4(uint64_t *a1, char a2)
{
}

BOOL sub_1000266F0()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz);
}

uint64_t sub_100026704()
{
  return sub_100022F10( type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass,  (void (*)(uint64_t))sub_100046B1C,  &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz);
}

uint64_t sub_100026728()
{
  return sub_10002B414( type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
}

uint64_t sub_10002673C(char a1)
{
  return sub_100023164( a1,  type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass,  (void (*)(uint64_t))sub_100046B1C,  &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
}

void (*sub_100026760(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_1000267E8;
}

void sub_1000267E8(uint64_t *a1, char a2)
{
}

BOOL sub_100026804()
{
  return sub_10002B6BC( type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
}

uint64_t sub_100026818()
{
  return sub_100026F64( &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator,  5);
}

uint64_t sub_100026828@<X0>(uint64_t a1@<X8>)
{
  return sub_100025538( &qword_100351840,  &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset,  a1);
}

uint64_t sub_100026844(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351840);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_100046B1C(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100351840);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100351840);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000269C4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351840);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100351840);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    v9[v6[7]] = 2;
    sub_100015764((uint64_t)v5, &qword_100351840);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  }

  return sub_100026B28;
}

void sub_100026B28(uint64_t a1, char a2)
{
}

BOOL sub_100026B3C()
{
  return sub_10001D054( &qword_100351840,  type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_100026B60()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100351840);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_100046B1C(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100351840);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100026C90()
{
  return *v1 & 1;
}

uint64_t sub_100026CE8(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_100046B1C(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  char v10 = a1 & 1;
  uint64_t v11 = (_BYTE *)(*(void *)(v2 + v4)
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  uint64_t result = swift_beginAccess(v11, v13, 1LL, 0LL);
  _BYTE *v11 = v10;
  return result;
}

void (*sub_100026D9C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_100026E20;
}

void sub_100026E20(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_100046B1C(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_100026EF8()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)(v0
  swift_beginAccess(v1, v3, 0LL, 0LL);
  return *v1 != 2;
}

uint64_t sub_100026F54()
{
  return sub_100026F64( &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable,  2);
}

uint64_t sub_100026F64(void *a1, char a2)
{
  uint64_t v5 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v2 + v6);
    uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0LL);
    uint64_t v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v10 = swift_retain(v7);
    sub_100046B1C(v10);
    uint64_t v11 = *(void *)(v5 + v6);
    *(void *)(v5 + v6) = v9;
    swift_release(v11);
  }

  uint64_t v12 = (_BYTE *)(*(void *)(v5 + v6) + *a1);
  uint64_t result = swift_beginAccess(v12, v14, 1LL, 0LL);
  *uint64_t v12 = a2;
  return result;
}

uint64_t sub_100027014@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100351878);
  __chkstk_darwin(v3);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v12, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_100351878);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48LL))(v5, 1LL, v7) != 1) {
    return sub_100003E68( (uint64_t)v5,  a1,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  *(_BYTE *)(a1 + v7[7]) = 2;
  *(_BYTE *)(a1 + v7[8]) = 2;
  return sub_100015764((uint64_t)v5, &qword_100351878);
}

uint64_t sub_100027150(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351878);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_100046B1C(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100351878);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100351878);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000272D0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351878);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100351878);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    sub_100015764((uint64_t)v5, &qword_100351878);
  }

  else
  {
    sub_100003E68( (uint64_t)v5,  (uint64_t)v9,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  }

  return sub_10002743C;
}

void sub_10002743C(uint64_t a1, char a2)
{
}

BOOL sub_100027450()
{
  return sub_10001D054( &qword_100351878,  type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t sub_100027474()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100351878);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_100046B1C(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100351878);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000275A4@<X0>(uint64_t a1@<X8>)
{
  return sub_100024054( type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  &qword_10036D888,  &qword_10036D890,  (uint64_t)sub_1000468F0,  a1);
}

uint64_t sub_1000275C8()
{
  return sub_1000365F4(&qword_10036D888, &qword_10036D890, (uint64_t)sub_1000468F0);
}

float sub_1000275E4()
{
  return sub_1000275F0(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

float sub_1000275F0(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0LL) + 20);
  float result = *(float *)v2;
  if (*(_BYTE *)(v2 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100027628(float a1)
{
  return sub_100027634(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, a1);
}

uint64_t sub_100027634(uint64_t (*a1)(void), float a2)
{
  uint64_t result = a1(0LL);
  uint64_t v5 = v2 + *(int *)(result + 20);
  *(float *)uint64_t v5 = a2;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_10002766C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0LL) + 20);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000276C4()
{
  return sub_1000192B8(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_1000276D0()
{
  return sub_1000192F4(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

float sub_1000276DC()
{
  return sub_1000276E8(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

float sub_1000276E8(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0LL) + 24);
  float result = *(float *)v2;
  if (*(_BYTE *)(v2 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100027720(float a1)
{
  return sub_10002772C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, a1);
}

uint64_t sub_10002772C(uint64_t (*a1)(void), float a2)
{
  uint64_t result = a1(0LL);
  uint64_t v5 = v2 + *(int *)(result + 24);
  *(float *)uint64_t v5 = a2;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_100027764(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0LL) + 24);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000277BC()
{
  return sub_1000277C8(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

BOOL sub_1000277C8(uint64_t (*a1)(void))
{
  return (*(_BYTE *)(v1 + *(int *)(a1(0LL) + 24) + 4) & 1) == 0;
}

uint64_t sub_1000277F8()
{
  return sub_100027804(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_100027804(uint64_t (*a1)(void))
{
  uint64_t result = a1(0LL);
  uint64_t v3 = v1 + *(int *)(result + 24);
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

float sub_100027834()
{
  return sub_100021008(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_100027840(float a1)
{
  return sub_10002104C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, a1);
}

uint64_t (*sub_10002784C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0LL) + 28);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000278A4()
{
  return sub_100020BD0(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_1000278B0()
{
  return sub_100020C0C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

float sub_1000278BC()
{
  return sub_10002CCD0(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_1000278C8(float a1)
{
  return sub_10002CD14(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, a1);
}

uint64_t (*sub_1000278D4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0LL) + 32);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10002792C()
{
  return sub_100027938(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

BOOL sub_100027938(uint64_t (*a1)(void))
{
  return (*(_BYTE *)(v1 + *(int *)(a1(0LL) + 32) + 4) & 1) == 0;
}

uint64_t sub_100027968()
{
  return sub_100027974(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_100027974(uint64_t (*a1)(void))
{
  uint64_t result = a1(0LL);
  uint64_t v3 = v1 + *(int *)(result + 32);
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

uint64_t sub_1000279A4()
{
  return sub_10001B0E0(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_1000279B0(char a1)
{
  return sub_10001B114(a1, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t (*sub_1000279BC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0LL) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100027A04()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0LL) + 36)) != 2;
}

uint64_t sub_100027A2C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

int *sub_100027A50@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0LL);
  uint64_t v3 = a1 + result[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  uint64_t v4 = a1 + result[6];
  *(_DWORD *)uint64_t v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  uint64_t v5 = a1 + result[7];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  uint64_t v6 = a1 + result[8];
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  *(_BYTE *)(a1 + result[9]) = 2;
  return result;
}

double sub_100027AC8()
{
  return sub_10001FC20(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_100027AD4(double a1)
{
  return sub_10001FC64(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, a1);
}

uint64_t (*sub_100027AE0(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_100027B38()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_100027B44()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

double sub_100027B50()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_100027B5C(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, a1);
}

uint64_t (*sub_100027B68(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_100027BC0()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_100027BCC()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

double sub_100027BD8()
{
  return sub_100027BE4(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

double sub_100027BE4(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0LL) + 28);
  double result = *(double *)v2;
  if (*(_BYTE *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100027C1C(double a1)
{
  return sub_100027C28(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, a1);
}

uint64_t sub_100027C28(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0LL);
  uint64_t v5 = v2 + *(int *)(result + 28);
  *(double *)uint64_t v5 = a2;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_100027C60(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0LL) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_100027CB8()
{
  return sub_100027CC4(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

BOOL sub_100027CC4(uint64_t (*a1)(void))
{
  return (*(_BYTE *)(v1 + *(int *)(a1(0LL) + 28) + 8) & 1) == 0;
}

uint64_t sub_100027CF4()
{
  return sub_100027D00(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_100027D00(uint64_t (*a1)(void))
{
  uint64_t result = a1(0LL);
  uint64_t v3 = v1 + *(int *)(result + 28);
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  return result;
}

double sub_100027D30()
{
  return sub_100027D3C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

double sub_100027D3C(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0LL) + 32);
  double result = *(double *)v2;
  if (*(_BYTE *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100027D74(double a1)
{
  return sub_100027D80(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, a1);
}

uint64_t sub_100027D80(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0LL);
  uint64_t v5 = v2 + *(int *)(result + 32);
  *(double *)uint64_t v5 = a2;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_100027DB8(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0LL) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_100027E10()
{
  return sub_100027E1C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

BOOL sub_100027E1C(uint64_t (*a1)(void))
{
  return (*(_BYTE *)(v1 + *(int *)(a1(0LL) + 32) + 8) & 1) == 0;
}

uint64_t sub_100027E4C()
{
  return sub_100027E58(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_100027E58(uint64_t (*a1)(void))
{
  uint64_t result = a1(0LL);
  uint64_t v3 = v1 + *(int *)(result + 32);
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  return result;
}

double sub_100027E88()
{
  return sub_10002A1C4(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_100027E94(double a1)
{
  return sub_10002A208(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, a1);
}

uint64_t (*sub_100027EA0(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0LL) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_100027EF8()
{
  return sub_10002A2A4(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_100027F04()
{
  return sub_10002A2E0(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

int *sub_100027F10@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0LL);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(void *)uint64_t v4 = 0LL;
  *(_BYTE *)(v4 + 8) = 1;
  uint64_t v5 = a1 + result[7];
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + 8) = 1;
  uint64_t v6 = a1 + result[8];
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  uint64_t v7 = a1 + result[9];
  *(void *)uint64_t v7 = 0LL;
  *(_BYTE *)(v7 + 8) = 1;
  return result;
}

uint64_t sub_100027F8C()
{
  return sub_100027F98(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_100027F98(uint64_t (*a1)(void))
{
  uint64_t v2 = (_BYTE *)(v1 + *(int *)(a1(0LL) + 20));
  if (v2[8]) {
    return 0LL;
  }
  else {
    return *(void *)v2;
  }
}

uint64_t sub_100027FCC(uint64_t a1)
{
  return sub_100027FD8(a1, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_100027FD8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0LL);
  uint64_t v5 = v2 + *(int *)(result + 20);
  *(void *)uint64_t v5 = a1;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_10002800C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8)) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_100003480;
}

BOOL sub_100028060()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_10002806C()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

float sub_100028078()
{
  return sub_1000276E8(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_100028084(float a1)
{
  return sub_10002772C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, a1);
}

uint64_t (*sub_100028090(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0LL) + 24);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000280E8()
{
  return sub_1000277C8(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_1000280F4()
{
  return sub_100027804(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

float sub_100028100()
{
  return sub_100021008(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_10002810C(float a1)
{
  return sub_10002104C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, a1);
}

uint64_t (*sub_100028118(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0LL) + 28);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100028170()
{
  return sub_100020BD0(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_10002817C()
{
  return sub_100020C0C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

double sub_100028188()
{
  return sub_100027D3C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_100028194(double a1)
{
  return sub_100027D80(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, a1);
}

uint64_t (*sub_1000281A0(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0LL) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000281F8()
{
  return sub_100027E1C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_100028204()
{
  return sub_100027E58(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

float sub_100028210()
{
  return sub_100033594(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_10002821C(float a1)
{
  return sub_1000335D8(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, a1);
}

uint64_t (*sub_100028228(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0LL) + 36);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100028280()
{
  return sub_10002828C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

BOOL sub_10002828C(uint64_t (*a1)(void))
{
  return (*(_BYTE *)(v1 + *(int *)(a1(0LL) + 36) + 4) & 1) == 0;
}

uint64_t sub_1000282BC()
{
  return sub_1000282C8(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_1000282C8(uint64_t (*a1)(void))
{
  uint64_t result = a1(0LL);
  uint64_t v3 = v1 + *(int *)(result + 36);
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

int *sub_1000282F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0LL);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(_DWORD *)uint64_t v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  uint64_t v5 = a1 + result[7];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  uint64_t v6 = a1 + result[8];
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  uint64_t v7 = a1 + result[9];
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  return result;
}

uint64_t sub_100028374()
{
  return sub_100027F98(type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t sub_100028380(uint64_t a1)
{
  return sub_100027FD8(a1, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t (*sub_10002838C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Clock(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8)) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000283E0()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t sub_1000283EC()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t sub_1000283F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100351880);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_100351880);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v7[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v7[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  uint64_t v11 = a1 + v7[8];
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  *(_BYTE *)(a1 + v7[9]) = 2;
  return sub_100015764((uint64_t)v5, &qword_100351880);
}

uint64_t sub_100028524(uint64_t a1)
{
  return sub_1000308E8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_Clock,  &qword_100351880,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

void (*sub_100028540(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351880);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Clock(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100351880);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    uint64_t v14 = &v9[v6[8]];
    *(_DWORD *)uint64_t v14 = 0;
    v14[4] = 1;
    v9[v6[9]] = 2;
    sub_100015764((uint64_t)v5, &qword_100351880);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  }

  return sub_1000286AC;
}

void sub_1000286AC(uint64_t a1, char a2)
{
}

BOOL sub_1000286C0()
{
  return sub_100019928( &qword_100351880,  type metadata accessor for CLP_LogEntry_PrivateData_Clock,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_1000286DC()
{
  return sub_100019A00( type metadata accessor for CLP_LogEntry_PrivateData_Clock,  &qword_100351880,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_1000286F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100351888);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_100351888);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  uint64_t v11 = a1 + v7[8];
  *(void *)uint64_t v11 = 0LL;
  *(_BYTE *)(v11 + 8) = 1;
  uint64_t v12 = a1 + v7[9];
  *(void *)uint64_t v12 = 0LL;
  *(_BYTE *)(v12 + 8) = 1;
  return sub_100015764((uint64_t)v5, &qword_100351888);
}

uint64_t sub_100028828(uint64_t a1)
{
  return sub_100030C2C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_Clock,  &qword_100351888,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

void (*sub_100028844(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351888);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Clock(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100351888);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    uint64_t v14 = &v9[v6[8]];
    *(void *)uint64_t v14 = 0LL;
    v14[8] = 1;
    uint64_t v15 = &v9[v6[9]];
    *(void *)uint64_t v15 = 0LL;
    v15[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100351888);
  }

  else
  {
    sub_100003E68( (uint64_t)v5,  (uint64_t)v9,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
  }

  return sub_1000289B4;
}

void sub_1000289B4(uint64_t a1, char a2)
{
}

BOOL sub_1000289C8()
{
  return sub_10002D37C( &qword_100351888,  type metadata accessor for CLP_LogEntry_PrivateData_Clock,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_1000289E4()
{
  return sub_10002D454( type metadata accessor for CLP_LogEntry_PrivateData_Clock,  &qword_100351888,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_100028A00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100351890);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 32), (uint64_t)v5, &qword_100351890);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48LL))(v5, 1LL, v7) != 1) {
    return sub_100003E68( (uint64_t)v5,  a1,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v7[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  uint64_t v11 = a1 + v7[8];
  *(void *)uint64_t v11 = 0LL;
  *(_BYTE *)(v11 + 8) = 1;
  uint64_t v12 = a1 + v7[9];
  *(_DWORD *)uint64_t v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  return sub_100015764((uint64_t)v5, &qword_100351890);
}

uint64_t sub_100028B30(uint64_t a1)
{
  return sub_1000343F8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_Clock,  &qword_100351890,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

void (*sub_100028B4C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351890);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Clock(0LL) + 32);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100351890);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    uint64_t v14 = &v9[v6[8]];
    *(void *)uint64_t v14 = 0LL;
    v14[8] = 1;
    uint64_t v15 = &v9[v6[9]];
    *(_DWORD *)uint64_t v15 = 0;
    v15[4] = 1;
    sub_100015764((uint64_t)v5, &qword_100351890);
  }

  else
  {
    sub_100003E68( (uint64_t)v5,  (uint64_t)v9,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  }

  return sub_100028CBC;
}

void sub_100028CBC(uint64_t a1, char a2)
{
}

BOOL sub_100028CD0()
{
  return sub_10002E400( &qword_100351890,  type metadata accessor for CLP_LogEntry_PrivateData_Clock,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_100028CEC()
{
  return sub_10002E4D8( type metadata accessor for CLP_LogEntry_PrivateData_Clock,  &qword_100351890,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_100028D08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Clock(0LL);
  uint64_t v3 = a1 + v2[5];
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  uint64_t v4 = a1 + v2[6];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = a1 + v2[7];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  uint64_t v8 = a1 + v2[8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
}

uint64_t sub_100028DD0@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, a1);
}

uint64_t sub_100028DDC@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, a1);
}

uint64_t sub_100028DE8@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, a1);
}

uint64_t sub_100028DF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100351898);
  __chkstk_darwin(v3);
  uint64_t v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v17, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_100351898);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Clock(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  uint64_t v11 = a1 + v7[7];
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
  uint64_t v13 = a1 + v7[8];
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
  return sub_100015764((uint64_t)v5, &qword_100351898);
}

uint64_t sub_100028F90(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351898);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10004C304(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100351898);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100351898);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100029110(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351898);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Clock(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100351898);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
    uint64_t v14 = &v9[v6[7]];
    uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v14, 1LL, 1LL, v15);
    uint64_t v16 = &v9[v6[8]];
    uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v16, 1LL, 1LL, v17);
    sub_100015764((uint64_t)v5, &qword_100351898);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
  }

  return sub_1000292DC;
}

void sub_1000292DC(uint64_t a1, char a2)
{
}

BOOL sub_1000292F0()
{
  return sub_10001D054( &qword_100351898,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock,  type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t sub_100029314()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100351898);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10004C304(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100351898);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100029444()
{
  return sub_100029458( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
}

uint64_t sub_100029458(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (void *)(*(void *)(v2 + *(int *)(a1(0LL) + 20)) + *a2);
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return swift_bridgeObjectRetain(*v3);
}

uint64_t sub_1000294B4(uint64_t a1)
{
  return sub_1000294D8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass,  (void (*)(uint64_t))sub_10004C304,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
}

uint64_t sub_1000294D8( uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = v5;
  uint64_t v11 = *(int *)(a2(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v5 + v11)) & 1) == 0)
  {
    uint64_t v12 = *(void *)(v5 + v11);
    uint64_t v13 = a3(0LL);
    uint64_t v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    uint64_t v15 = swift_retain(v12);
    a4(v15);
    uint64_t v16 = *(void *)(v9 + v11);
    *(void *)(v9 + v11) = v14;
    swift_release(v16);
  }

  uint64_t v17 = (uint64_t *)(*(void *)(v9 + v11) + *a5);
  swift_beginAccess(v17, v20, 1LL, 0LL);
  uint64_t v18 = *v17;
  *uint64_t v17 = a1;
  return swift_bridgeObjectRelease(v18);
}

void (*sub_1000295A0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  uint64_t v6 = *v5;
  v3[9] = *v5;
  swift_bridgeObjectRetain(v6);
  return sub_100029628;
}

void sub_100029628(uint64_t *a1, char a2)
{
}

void sub_100029644( uint64_t *a1, char a2, uint64_t (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v8 = *a1;
  uint64_t v9 = *(void *)(*a1 + 72);
  uint64_t v10 = *(int *)(*a1 + 88);
  uint64_t v11 = *(void *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(*(void *)(*a1 + 72));
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v11 + v10)) & 1) == 0)
    {
      uint64_t v12 = *(int *)(v8 + 88);
      uint64_t v13 = *(void *)(v8 + 80);
      uint64_t v14 = *(void *)(v13 + v12);
      uint64_t v15 = a3(0LL);
      uint64_t v16 = swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
      uint64_t v17 = swift_retain(v14);
      a4(v17);
      uint64_t v18 = *(void *)(v13 + v12);
      *(void *)(v13 + v12) = v16;
      swift_release(v18);
    }

    uint64_t v19 = (uint64_t *)(*(void *)(*(void *)(v8 + 80) + *(int *)(v8 + 88)) + *a5);
    swift_beginAccess(v19, v8 + 24, 1LL, 0LL);
    uint64_t v20 = *v19;
    *uint64_t v19 = v9;
    swift_bridgeObjectRelease(v20);
    uint64_t v21 = *(void *)(v8 + 72);
  }

  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v11 + v10)) & 1) == 0)
    {
      uint64_t v22 = *(int *)(v8 + 88);
      uint64_t v23 = *(void *)(v8 + 80);
      uint64_t v24 = *(void *)(v23 + v22);
      uint64_t v25 = a3(0LL);
      uint64_t v26 = swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
      uint64_t v27 = swift_retain(v24);
      a4(v27);
      uint64_t v28 = *(void *)(v23 + v22);
      *(void *)(v23 + v22) = v26;
      swift_release(v28);
    }

    uint64_t v29 = (uint64_t *)(*(void *)(*(void *)(v8 + 80) + *(int *)(v8 + 88)) + *a5);
    swift_beginAccess(v29, v8 + 48, 1LL, 0LL);
    uint64_t v21 = *v29;
    *uint64_t v29 = v9;
  }

  swift_bridgeObjectRelease(v21);
  free((void *)v8);
}

uint64_t sub_1000297B4@<X0>(uint64_t a1@<X8>)
{
  return sub_100024054( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport,  &qword_10036D8C0,  &qword_10036D8C8,  (uint64_t)sub_10004C288,  a1);
}

uint64_t sub_1000297D8()
{
  return sub_1000365F4(&qword_10036D8C0, &qword_10036D8C8, (uint64_t)sub_10004C288);
}

double sub_1000297F4()
{
  return sub_10001FC20(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_100029800(double a1)
{
  return sub_10001FC64(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, a1);
}

uint64_t (*sub_10002980C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_100029864()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_100029870()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

double sub_10002987C()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_100029888(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, a1);
}

uint64_t (*sub_100029894(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000298EC()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_1000298F8()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

double sub_100029904()
{
  return sub_100027BE4(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_100029910(double a1)
{
  return sub_100027C28(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, a1);
}

uint64_t (*sub_10002991C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0LL) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_100029974()
{
  return sub_100027CC4(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_100029980()
{
  return sub_100027D00(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

int *sub_10002998C@<X0>(uint64_t a1@<X8>)
{
  return sub_10002EB64(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, a1);
}

uint64_t sub_100029998()
{
  return sub_10002CAC4(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t sub_1000299A4(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_1000299D0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0LL) + 20);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 13) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100029A1C()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0LL) + 20)) != 13;
}

uint64_t sub_100029A44()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 13;
  return result;
}

double sub_100029A68()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t sub_100029A74(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, a1);
}

uint64_t (*sub_100029A80(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_100029AD8()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t sub_100029AE4()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

double sub_100029AF0()
{
  return sub_100027BE4(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t sub_100029AFC(double a1)
{
  return sub_100027C28(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, a1);
}

uint64_t (*sub_100029B08(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0LL) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_100029B60()
{
  return sub_100027CC4(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t sub_100029B6C()
{
  return sub_100027D00(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

double sub_100029B78()
{
  return sub_100027D3C(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t sub_100029B84(double a1)
{
  return sub_100027D80(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, a1);
}

uint64_t (*sub_100029B90(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0LL) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_100029BE8()
{
  return sub_100027E1C(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t sub_100029BF4()
{
  return sub_100027E58(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t sub_100029C00()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0LL) + 36));
  if (v1 == 3) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_100029C28(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_100029C54(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0LL) + 36);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 3) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100029CA0()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0LL) + 36)) != 3;
}

uint64_t sub_100029CC8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 3;
  return result;
}

int *sub_100029CEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0LL);
  *(_BYTE *)(a1 + result[5]) = 13;
  uint64_t v3 = a1 + result[6];
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[7];
  *(void *)uint64_t v4 = 0LL;
  *(_BYTE *)(v4 + 8) = 1;
  uint64_t v5 = a1 + result[8];
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + 8) = 1;
  *(_BYTE *)(a1 + result[9]) = 3;
  return result;
}

uint64_t sub_100029D60()
{
  return 13LL;
}

uint64_t sub_100029D68()
{
  return 3LL;
}

double sub_100029D70()
{
  return sub_10001FC20(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

uint64_t sub_100029D7C(double a1)
{
  return sub_10001FC64(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, a1);
}

uint64_t (*sub_100029D88(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_100029DE0()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

uint64_t sub_100029DEC()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

uint64_t sub_100029DF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_1003518A0);
  __chkstk_darwin(v3);
  double v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_1003518A0);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  return sub_100015764((uint64_t)v5, &qword_1003518A0);
}

uint64_t sub_100029F08(uint64_t a1)
{
  return sub_1000308E8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime,  &qword_1003518A0,  type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

void (*sub_100029F24(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003518A0);
  double v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_1003518A0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_1003518A0);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  }

  return sub_10002A074;
}

void sub_10002A074(uint64_t a1, char a2)
{
}

BOOL sub_10002A088()
{
  return sub_100019928( &qword_1003518A0,  type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime,  type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_10002A0A4()
{
  return sub_100019A00( type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime,  &qword_1003518A0,  type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_10002A0C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0LL);
  uint64_t v3 = a1 + *(int *)(v2 + 20);
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  uint64_t v4 = a1 + *(int *)(v2 + 24);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
}

uint64_t sub_10002A124@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, a1);
}

double sub_10002A130()
{
  return sub_100027D3C(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t sub_10002A13C(double a1)
{
  return sub_100027D80(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, a1);
}

uint64_t (*sub_10002A148(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0LL) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10002A1A0()
{
  return sub_100027E1C(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t sub_10002A1AC()
{
  return sub_100027E58(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

double sub_10002A1B8()
{
  return sub_10002A1C4(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

double sub_10002A1C4(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0LL) + 36);
  double result = *(double *)v2;
  if (*(_BYTE *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_10002A1FC(double a1)
{
  return sub_10002A208(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, a1);
}

uint64_t sub_10002A208(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0LL);
  uint64_t v5 = v2 + *(int *)(result + 36);
  *(double *)uint64_t v5 = a2;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_10002A240(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0LL) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10002A298()
{
  return sub_10002A2A4(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

BOOL sub_10002A2A4(uint64_t (*a1)(void))
{
  return (*(_BYTE *)(v1 + *(int *)(a1(0LL) + 36) + 8) & 1) == 0;
}

uint64_t sub_10002A2D4()
{
  return sub_10002A2E0(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t sub_10002A2E0(uint64_t (*a1)(void))
{
  uint64_t result = a1(0LL);
  uint64_t v3 = v1 + *(int *)(result + 36);
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  return result;
}

uint64_t sub_10002A310@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0LL) + 28);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t sub_10002A358(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0LL) + 28);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
}

uint64_t (*sub_10002A3A0())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_10002A3C8@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  a1[1] = &_swiftEmptyArrayStorage;
  a1[2] = &_swiftEmptyArrayStorage;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0LL);
  uint64_t result = UnknownStorage.init()();
  uint64_t v4 = (char *)a1 + *(int *)(v2 + 32);
  *(void *)uint64_t v4 = 0LL;
  v4[8] = 1;
  double v5 = (char *)a1 + *(int *)(v2 + 36);
  *(void *)double v5 = 0LL;
  v5[8] = 1;
  return result;
}

uint64_t sub_10002A430@<X0>(uint64_t a1@<X8>)
{
  return sub_10002A444( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id,  a1);
}

uint64_t sub_10002A444@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_100003A0C(&qword_100351858);
  __chkstk_darwin(v7);
  uint64_t v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = *(void *)(v3 + *(int *)(a1(0LL) + 20)) + *a2;
  swift_beginAccess(v10, v17, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v9, &qword_100351858);
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL);
  UnknownStorage.init()();
  uint64_t v12 = a3 + *(int *)(v11 + 20);
  *(_DWORD *)uint64_t v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  uint64_t v13 = a3 + *(int *)(v11 + 24);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
  return sub_100015764((uint64_t)v9, &qword_100351858);
}

uint64_t sub_10002A594(uint64_t a1)
{
  return sub_10002BF78( a1,  &qword_100351858,  type metadata accessor for CLP_LogEntry_PrivateData_SvId,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id);
}

void (*sub_10002A5B0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351858);
  double v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100351858);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
    sub_100015764((uint64_t)v5, &qword_100351858);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  }

  return sub_10002A724;
}

void sub_10002A724(uint64_t a1, char a2)
{
}

void sub_10002A740(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void), void *a5)
{
  size_t v8 = *(void **)a1;
  uint64_t v9 = *(void **)(*(void *)a1 + 40LL);
  uint64_t v10 = *(void **)(*(void *)a1 + 48LL);
  uint64_t v11 = *(void **)(*(void *)a1 + 32LL);
  if ((a2 & 1) != 0)
  {
    sub_10000404C((uint64_t)v10, (uint64_t)v9, a4);
    sub_10002BF78((uint64_t)v9, a3, a4, a5);
    sub_100004090((uint64_t)v10, a4);
  }

  else
  {
    sub_10002BF78((uint64_t)v10, a3, a4, a5);
  }

  free(v10);
  free(v9);
  free(v11);
  free(v8);
}

BOOL sub_10002A7EC()
{
  return sub_10001D054( &qword_100351858,  type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id,  type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_10002A810()
{
  return sub_10002C2C4( &qword_100351858,  type metadata accessor for CLP_LogEntry_PrivateData_SvId,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id);
}

double sub_10002A82C()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds);
}

uint64_t sub_10002A840(double a1)
{
  return sub_10002AB1C( &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds,  a1);
}

void (*sub_10002A84C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10002A8DC;
}

void sub_10002A8DC(uint64_t *a1, char a2)
{
}

BOOL sub_10002A8E8()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds);
}

uint64_t sub_10002A8FC()
{
  return sub_10002AD7C(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds);
}

uint64_t sub_10002A908()
{
  return sub_1000230E0( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
}

uint64_t sub_10002A91C(char a1)
{
  return sub_10002B480( a1,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
}

void (*sub_10002A928(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 7) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10002A9B0;
}

void sub_10002A9B0(uint64_t *a1, char a2)
{
}

BOOL sub_10002A9BC()
{
  return sub_1000233C4( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
}

uint64_t sub_10002A9D0()
{
  return sub_10002B72C( &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource,  7);
}

uint64_t sub_10002A9E0()
{
  return sub_100029458( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
}

uint64_t sub_10002A9F4(uint64_t a1)
{
  return sub_10002BB60( a1,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
}

void (*sub_10002AA00(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  uint64_t v6 = *v5;
  v3[9] = *v5;
  swift_bridgeObjectRetain(v6);
  return sub_10002AA88;
}

void sub_10002AA88(uint64_t *a1, char a2)
{
}

double sub_10002AA94()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds);
}

double sub_10002AAA8(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = *(void *)(v2 + *(int *)(a1(0LL) + 20)) + *a2;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  double result = *(double *)v3;
  if (*(_BYTE *)(v3 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_10002AB10(double a1)
{
  return sub_10002AB1C( &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds,  a1);
}

uint64_t sub_10002AB1C(void *a1, double a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v2 + v6);
    uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0LL);
    uint64_t v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v10 = swift_retain(v7);
    sub_10005F438(v10);
    swift_release(v7);
    uint64_t v11 = *(void *)(v4 + v6);
    *(void *)(v4 + v6) = v9;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v4 + v6) + *a1;
  uint64_t result = swift_beginAccess(v12, v14, 1LL, 0LL);
  *(double *)uint64_t v12 = a2;
  *(_BYTE *)(v12 + 8) = 0;
  return result;
}

void (*sub_10002ABDC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10002AC6C;
}

void sub_10002AC6C(uint64_t *a1, char a2)
{
}

void sub_10002AC78(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v8 = v5 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v8 = v5 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v9 = *(int *)(v5 + 88);
    uint64_t v10 = *(void *)(v5 + 80);
    uint64_t v11 = *(void *)(v10 + v9);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10005F438(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v10 + v9);
    *(void *)(v10 + v9) = v13;
    swift_release(v15);
  }

BOOL sub_10002AD5C()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds);
}

uint64_t sub_10002AD70()
{
  return sub_10002AD7C(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds);
}

uint64_t sub_10002AD7C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_10005F438(v8);
    swift_release(v5);
    uint64_t v9 = *(void *)(v3 + v4);
    *(void *)(v3 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v3 + v4) + *a1;
  uint64_t result = swift_beginAccess(v10, v12, 1LL, 0LL);
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  return result;
}

double sub_10002AE34()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb);
}

uint64_t sub_10002AE48(double a1)
{
  return sub_10002AB1C( &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb,  a1);
}

void (*sub_10002AE54(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10002AEE4;
}

void sub_10002AEE4(uint64_t *a1, char a2)
{
}

BOOL sub_10002AEF0()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb);
}

uint64_t sub_10002AF04()
{
  return sub_10002AD7C(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb);
}

double sub_10002AF10()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec);
}

uint64_t sub_10002AF24(double a1)
{
  return sub_10002AB1C( &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec,  a1);
}

void (*sub_10002AF30(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10002AFC0;
}

void sub_10002AFC0(uint64_t *a1, char a2)
{
}

BOOL sub_10002AFCC()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec);
}

uint64_t sub_10002AFE0()
{
  return sub_10002AD7C(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec);
}

float sub_10002AFEC()
{
  return sub_1000236F8( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM);
}

uint64_t sub_10002B000(float a1)
{
  return sub_10002B0E8( &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM,  a1);
}

void (*sub_10002B00C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  float v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_10002B09C;
}

void sub_10002B09C(uint64_t *a1, char a2)
{
}

BOOL sub_10002B0A8()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM);
}

uint64_t sub_10002B0BC()
{
  return sub_10002B348(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM);
}

float sub_10002B0C8()
{
  return sub_1000236F8( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds);
}

uint64_t sub_10002B0DC(float a1)
{
  return sub_10002B0E8( &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds,  a1);
}

uint64_t sub_10002B0E8(void *a1, float a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v2 + v6);
    uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0LL);
    uint64_t v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v10 = swift_retain(v7);
    sub_10005F438(v10);
    swift_release(v7);
    uint64_t v11 = *(void *)(v4 + v6);
    *(void *)(v4 + v6) = v9;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v4 + v6) + *a1;
  uint64_t result = swift_beginAccess(v12, v14, 1LL, 0LL);
  *(float *)uint64_t v12 = a2;
  *(_BYTE *)(v12 + 4) = 0;
  return result;
}

void (*sub_10002B1A8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  float v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_10002B238;
}

void sub_10002B238(uint64_t *a1, char a2)
{
}

void sub_10002B244(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = *a1;
  int v6 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v8 = v5 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v8 = v5 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v9 = *(int *)(v5 + 84);
    uint64_t v10 = *(void *)(v5 + 72);
    uint64_t v11 = *(void *)(v10 + v9);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10005F438(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v10 + v9);
    *(void *)(v10 + v9) = v13;
    swift_release(v15);
  }

BOOL sub_10002B328()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds);
}

uint64_t sub_10002B33C()
{
  return sub_10002B348(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds);
}

uint64_t sub_10002B348(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_10005F438(v8);
    swift_release(v5);
    uint64_t v9 = *(void *)(v3 + v4);
    *(void *)(v3 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v3 + v4) + *a1;
  uint64_t result = swift_beginAccess(v10, v12, 1LL, 0LL);
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return result;
}

uint64_t sub_10002B400()
{
  return sub_10002B414( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
}

uint64_t sub_10002B414(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)(v2 + *(int *)(a1(0LL) + 20)) + *a2);
  swift_beginAccess(v3, v5, 0LL, 0LL);
  if (*v3 == 5) {
    return 0LL;
  }
  else {
    return *v3;
  }
}

uint64_t sub_10002B474(char a1)
{
  return sub_10002B480( a1,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
}

uint64_t sub_10002B480(char a1, void *a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v2 + v6);
    uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0LL);
    uint64_t v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v10 = swift_retain(v7);
    sub_10005F438(v10);
    swift_release(v7);
    uint64_t v11 = *(void *)(v4 + v6);
    *(void *)(v4 + v6) = v9;
    swift_release(v11);
  }

  uint64_t v12 = (_BYTE *)(*(void *)(v4 + v6) + *a2);
  uint64_t result = swift_beginAccess(v12, v14, 1LL, 0LL);
  *uint64_t v12 = a1;
  return result;
}

void (*sub_10002B534(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10002B5BC;
}

void sub_10002B5BC(uint64_t *a1, char a2)
{
}

void sub_10002B5C8(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = *a1;
  char v6 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v8 = v5 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v8 = v5 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v9 = *(int *)(v5 + 80);
    uint64_t v10 = *(void *)(v5 + 72);
    uint64_t v11 = *(void *)(v10 + v9);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10005F438(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v10 + v9);
    *(void *)(v10 + v9) = v13;
    swift_release(v15);
  }

BOOL sub_10002B6A8()
{
  return sub_10002B6BC( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
}

BOOL sub_10002B6BC(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)(v2 + *(int *)(a1(0LL) + 20)) + *a2);
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return *v3 != 5;
}

uint64_t sub_10002B71C()
{
  return sub_10002B72C( &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1,  5);
}

uint64_t sub_10002B72C(void *a1, char a2)
{
  uint64_t v5 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v2 + v6);
    uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0LL);
    uint64_t v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v10 = swift_retain(v7);
    sub_10005F438(v10);
    swift_release(v7);
    uint64_t v11 = *(void *)(v5 + v6);
    *(void *)(v5 + v6) = v9;
    swift_release(v11);
  }

  uint64_t v12 = (_BYTE *)(*(void *)(v5 + v6) + *a1);
  uint64_t result = swift_beginAccess(v12, v14, 1LL, 0LL);
  *uint64_t v12 = a2;
  return result;
}

uint64_t sub_10002B7E0()
{
  return sub_10002B414( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
}

uint64_t sub_10002B7F4(char a1)
{
  return sub_10002B480( a1,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
}

void (*sub_10002B800(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10002B888;
}

void sub_10002B888(uint64_t *a1, char a2)
{
}

BOOL sub_10002B894()
{
  return sub_10002B6BC( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
}

uint64_t sub_10002B8A8()
{
  return sub_10002B72C( &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1,  5);
}

uint64_t sub_10002B8B8()
{
  return sub_10002B414( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
}

uint64_t sub_10002B8CC(char a1)
{
  return sub_10002B480( a1,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
}

void (*sub_10002B8D8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10002B960;
}

void sub_10002B960(uint64_t *a1, char a2)
{
}

BOOL sub_10002B96C()
{
  return sub_10002B6BC( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
}

uint64_t sub_10002B980()
{
  return sub_10002B72C( &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1,  5);
}

uint64_t sub_10002B990()
{
  return sub_10002B414( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
}

uint64_t sub_10002B9A4(char a1)
{
  return sub_10002B480( a1,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
}

void (*sub_10002B9B0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10002BA38;
}

void sub_10002BA38(uint64_t *a1, char a2)
{
}

BOOL sub_10002BA44()
{
  return sub_10002B6BC( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
}

uint64_t sub_10002BA58()
{
  return sub_10002B72C( &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1,  5);
}

uint64_t sub_10002BA68()
{
  return sub_10002B414( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
}

uint64_t sub_10002BA7C(char a1)
{
  return sub_10002B480( a1,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
}

void (*sub_10002BA88(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10002BB10;
}

void sub_10002BB10(uint64_t *a1, char a2)
{
}

BOOL sub_10002BB1C()
{
  return sub_10002B6BC( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
}

uint64_t sub_10002BB30()
{
  return sub_10002B72C( &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1,  5);
}

uint64_t sub_10002BB40()
{
  return sub_100029458( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
}

uint64_t sub_10002BB54(uint64_t a1)
{
  return sub_10002BB60( a1,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
}

uint64_t sub_10002BB60(uint64_t a1, void *a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v2 + v6);
    uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0LL);
    uint64_t v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v10 = swift_retain(v7);
    sub_10005F438(v10);
    swift_release(v7);
    uint64_t v11 = *(void *)(v4 + v6);
    *(void *)(v4 + v6) = v9;
    swift_release(v11);
  }

  uint64_t v12 = (uint64_t *)(*(void *)(v4 + v6) + *a2);
  swift_beginAccess(v12, v15, 1LL, 0LL);
  uint64_t v13 = *v12;
  *uint64_t v12 = a1;
  return swift_bridgeObjectRelease(v13);
}

void (*sub_10002BC1C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  uint64_t v6 = *v5;
  v3[9] = *v5;
  swift_bridgeObjectRetain(v6);
  return sub_10002BCA4;
}

void sub_10002BCA4(uint64_t *a1, char a2)
{
}

void sub_10002BCB0(uint64_t *a1, char a2, void *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*a1 + 72);
  uint64_t v6 = *(int *)(*a1 + 88);
  uint64_t v7 = *(void *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(*(void *)(*a1 + 72));
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v7 + v6)) & 1) == 0)
    {
      uint64_t v8 = *(int *)(v4 + 88);
      uint64_t v9 = *(void *)(v4 + 80);
      uint64_t v10 = *(void *)(v9 + v8);
      uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0LL);
      uint64_t v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
      uint64_t v13 = swift_retain(v10);
      sub_10005F438(v13);
      swift_release(v10);
      uint64_t v14 = *(void *)(v9 + v8);
      *(void *)(v9 + v8) = v12;
      swift_release(v14);
    }

    uint64_t v15 = (uint64_t *)(*(void *)(*(void *)(v4 + 80) + *(int *)(v4 + 88)) + *a3);
    swift_beginAccess(v15, v4 + 24, 1LL, 0LL);
    uint64_t v16 = *v15;
    *uint64_t v15 = v5;
    swift_bridgeObjectRelease(v16);
    uint64_t v17 = *(void *)(v4 + 72);
  }

  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v7 + v6)) & 1) == 0)
    {
      uint64_t v18 = *(int *)(v4 + 88);
      uint64_t v19 = *(void *)(v4 + 80);
      uint64_t v20 = *(void *)(v19 + v18);
      uint64_t v21 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0LL);
      uint64_t v22 = swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
      uint64_t v23 = swift_retain(v20);
      sub_10005F438(v23);
      swift_release(v20);
      uint64_t v24 = *(void *)(v19 + v18);
      *(void *)(v19 + v18) = v22;
      swift_release(v24);
    }

    uint64_t v25 = (uint64_t *)(*(void *)(*(void *)(v4 + 80) + *(int *)(v4 + 88)) + *a3);
    swift_beginAccess(v25, v4 + 48, 1LL, 0LL);
    uint64_t v17 = *v25;
    *uint64_t v25 = v5;
  }

  swift_bridgeObjectRelease(v17);
  free((void *)v4);
}

uint64_t sub_10002BE20@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_1003518A8);
  __chkstk_darwin(v3);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v12, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_1003518A8);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0LL);
  *a1 = &_swiftEmptyArrayStorage;
  a1[1] = &_swiftEmptyArrayStorage;
  a1[2] = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  uint64_t v8 = (char *)a1 + *(int *)(v7 + 32);
  *(void *)uint64_t v8 = 0LL;
  v8[8] = 1;
  uint64_t v9 = (char *)a1 + *(int *)(v7 + 36);
  *(void *)uint64_t v9 = 0LL;
  v9[8] = 1;
  return sub_100015764((uint64_t)v5, &qword_1003518A8);
}

uint64_t sub_10002BF5C(uint64_t a1)
{
  return sub_10002BF78( a1,  &qword_1003518A8,  type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit);
}

uint64_t sub_10002BF78(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), void *a4)
{
  uint64_t v8 = v4;
  uint64_t v10 = sub_100003A0C(a2);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = &v27[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v11);
  uint64_t v15 = &v27[-v14 - 8];
  uint64_t v16 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v4 + v16)) & 1) == 0)
  {
    uint64_t v17 = *(void *)(v4 + v16);
    uint64_t v18 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0LL);
    uint64_t v19 = swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
    uint64_t v20 = swift_retain(v17);
    sub_10005F438(v20);
    swift_release(v17);
    uint64_t v21 = *(void *)(v8 + v16);
    *(void *)(v8 + v16) = v19;
    swift_release(v21);
  }

  uint64_t v22 = *(void *)(v8 + v16);
  sub_100003E68(a1, (uint64_t)v15, a3);
  uint64_t v23 = a3(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v15, 0LL, 1LL, v23);
  sub_10000E590((uint64_t)v15, (uint64_t)v13, a2);
  uint64_t v24 = v22 + *a4;
  swift_beginAccess(v24, v27, 33LL, 0LL);
  swift_retain(v22);
  sub_10000E5D4((uint64_t)v13, v24, a2);
  swift_endAccess(v27);
  return swift_release(v22);
}

void (*sub_10002C0FC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003518A8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_1003518A8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    void *v9 = &_swiftEmptyArrayStorage;
    v9[1] = &_swiftEmptyArrayStorage;
    v9[2] = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    uint64_t v11 = (char *)v9 + *(int *)(v6 + 32);
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = (char *)v9 + *(int *)(v6 + 36);
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    sub_100015764((uint64_t)v5, &qword_1003518A8);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  }

  return sub_10002C268;
}

void sub_10002C268(uint64_t a1, char a2)
{
}

BOOL sub_10002C284()
{
  return sub_10001D054( &qword_1003518A8,  type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit,  type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t sub_10002C2A8()
{
  return sub_10002C2C4( &qword_1003518A8,  type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit);
}

uint64_t sub_10002C2C4(uint64_t *a1, uint64_t (*a2)(void), void *a3)
{
  uint64_t v7 = v3;
  uint64_t v8 = sub_100003A0C(a1);
  __chkstk_darwin(v8);
  uint64_t v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v11)) & 1) == 0)
  {
    uint64_t v12 = *(void *)(v3 + v11);
    uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0LL);
    uint64_t v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    uint64_t v15 = swift_retain(v12);
    sub_10005F438(v15);
    swift_release(v12);
    uint64_t v16 = *(void *)(v7 + v11);
    *(void *)(v7 + v11) = v14;
    swift_release(v16);
  }

  uint64_t v17 = *(void *)(v7 + v11);
  uint64_t v18 = a2(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v10, 1LL, 1LL, v18);
  uint64_t v19 = v17 + *a3;
  swift_beginAccess(v19, v22, 33LL, 0LL);
  swift_retain(v17);
  sub_10000E5D4((uint64_t)v10, v19, a1);
  swift_endAccess(v22);
  return swift_release(v17);
}

uint64_t sub_10002C3FC()
{
  return sub_10002B414( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
}

uint64_t sub_10002C410(char a1)
{
  return sub_10002B480( a1,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
}

void (*sub_10002C41C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10002C4A4;
}

void sub_10002C4A4(uint64_t *a1, char a2)
{
}

BOOL sub_10002C4B0()
{
  return sub_10002B6BC( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
}

uint64_t sub_10002C4C4()
{
  return sub_10002B72C( &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5,  5);
}

uint64_t sub_10002C4D4()
{
  return sub_10002B414( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
}

uint64_t sub_10002C4E8(char a1)
{
  return sub_10002B480( a1,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
}

void (*sub_10002C4F4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10002C57C;
}

void sub_10002C57C(uint64_t *a1, char a2)
{
}

BOOL sub_10002C588()
{
  return sub_10002B6BC( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
}

uint64_t sub_10002C59C()
{
  return sub_10002B72C( &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5,  5);
}

uint64_t sub_10002C5AC()
{
  return sub_10002B414( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
}

uint64_t sub_10002C5C0(char a1)
{
  return sub_10002B480( a1,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
}

void (*sub_10002C5CC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10002C654;
}

void sub_10002C654(uint64_t *a1, char a2)
{
}

BOOL sub_10002C660()
{
  return sub_10002B6BC( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
}

uint64_t sub_10002C674()
{
  return sub_10002B72C( &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5,  5);
}

uint64_t sub_10002C684()
{
  return sub_10002B414( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
}

uint64_t sub_10002C698(char a1)
{
  return sub_10002B480( a1,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
}

void (*sub_10002C6A4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10002C72C;
}

void sub_10002C72C(uint64_t *a1, char a2)
{
}

BOOL sub_10002C738()
{
  return sub_10002B6BC( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
}

uint64_t sub_10002C74C()
{
  return sub_10002B72C( &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5,  5);
}

uint64_t sub_10002C75C()
{
  return sub_10002B414( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
}

uint64_t sub_10002C770(char a1)
{
  return sub_10002B480( a1,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
}

void (*sub_10002C77C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10002C804;
}

void sub_10002C804(uint64_t *a1, char a2)
{
}

BOOL sub_10002C810()
{
  return sub_10002B6BC( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
}

uint64_t sub_10002C824()
{
  return sub_10002B72C( &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5,  5);
}

double sub_10002C834()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec);
}

uint64_t sub_10002C848(double a1)
{
  return sub_10002AB1C( &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec,  a1);
}

void (*sub_10002C854(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10002C8E4;
}

void sub_10002C8E4(uint64_t *a1, char a2)
{
}

BOOL sub_10002C8F0()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec);
}

uint64_t sub_10002C904()
{
  return sub_10002AD7C(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec);
}

uint64_t sub_10002C910()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)(v0
  swift_beginAccess(v1, v3, 0LL, 0LL);
  if (*v1 == 4) {
    return 0LL;
  }
  else {
    return *v1;
  }
}

uint64_t sub_10002C96C(char a1)
{
  return sub_10002B480( a1,  &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
}

void (*sub_10002C978(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 4) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10002CA00;
}

void sub_10002CA00(uint64_t *a1, char a2)
{
}

BOOL sub_10002CA0C()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)(v0
  swift_beginAccess(v1, v3, 0LL, 0LL);
  return *v1 != 4;
}

uint64_t sub_10002CA68()
{
  return sub_10002B72C( &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint,  4);
}

uint64_t sub_10002CA78@<X0>(uint64_t a1@<X8>)
{
  return sub_100024054( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &qword_10036D8F8,  &qword_10036D900,  (uint64_t)sub_10004EC30,  a1);
}

uint64_t sub_10002CA9C()
{
  return sub_1000365F4(&qword_10036D8F8, &qword_10036D900, (uint64_t)sub_10004EC30);
}

uint64_t sub_10002CAB8()
{
  return sub_10002CAC4(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t sub_10002CAC4(uint64_t (*a1)(void))
{
  unsigned int v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0LL) + 20));
  if (v2 == 13) {
    return 0LL;
  }
  else {
    return v2;
  }
}

uint64_t sub_10002CAF0(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_10002CB1C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0LL) + 20);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 13) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10002CB68()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0LL) + 20)) != 13;
}

uint64_t sub_10002CB90()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 13;
  return result;
}

double sub_10002CBB4()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t sub_10002CBC0(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, a1);
}

uint64_t (*sub_10002CBCC(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10002CC24()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t sub_10002CC30()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

float sub_10002CC3C()
{
  return sub_100021008(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t sub_10002CC48(float a1)
{
  return sub_10002104C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, a1);
}

uint64_t (*sub_10002CC54(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0LL) + 28);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10002CCAC()
{
  return sub_100020BD0(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t sub_10002CCB8()
{
  return sub_100020C0C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

float sub_10002CCC4()
{
  return sub_10002CCD0(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

float sub_10002CCD0(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0LL) + 32);
  float result = *(float *)v2;
  if (*(_BYTE *)(v2 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_10002CD08(float a1)
{
  return sub_10002CD14(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, a1);
}

uint64_t sub_10002CD14(uint64_t (*a1)(void), float a2)
{
  uint64_t result = a1(0LL);
  uint64_t v5 = v2 + *(int *)(result + 32);
  *(float *)uint64_t v5 = a2;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_10002CD4C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0LL) + 32);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10002CDA4()
{
  return sub_100027938(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t sub_10002CDB0()
{
  return sub_100027974(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

int *sub_10002CDBC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0LL);
  *(_BYTE *)(a1 + result[5]) = 13;
  uint64_t v3 = a1 + result[6];
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[7];
  *(_DWORD *)uint64_t v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  uint64_t v5 = a1 + result[8];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  return result;
}

uint64_t sub_10002CE24()
{
  return sub_100027F98(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t sub_10002CE30(uint64_t a1)
{
  return sub_100027FD8(a1, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t (*sub_10002CE3C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8)) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10002CE90()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t sub_10002CE9C()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t sub_10002CEA8()
{
  return sub_10002DF9C(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t sub_10002CEB4(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t (*sub_10002CEC0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10002CF10()
{
  return sub_1000277C8(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t sub_10002CF1C()
{
  return sub_100027804(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t sub_10002CF28@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
  uint64_t v3 = a1 + *(int *)(result + 20);
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  uint64_t v4 = a1 + *(int *)(result + 24);
  *(_DWORD *)uint64_t v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  return result;
}

uint64_t sub_10002CF74()
{
  return sub_1000191E8(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_10002CF80(int a1)
{
  return sub_100019228(a1, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t (*sub_10002CF8C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL) + 20);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10002CFDC()
{
  return sub_1000192B8(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_10002CFE8()
{
  return sub_1000192F4(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_10002CFF4()
{
  return sub_10002D000(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_10002D000(uint64_t (*a1)(void))
{
  unsigned int v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0LL) + 24));
  if (v2 == 5) {
    return 0LL;
  }
  else {
    return v2;
  }
}

uint64_t sub_10002D02C(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_10002D058(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL) + 24);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10002D0A4()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL) + 24)) != 5;
}

uint64_t sub_10002D0CC()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 5;
  return result;
}

uint64_t sub_10002D0F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_1003518B0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_1003518B0);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a1 + *(int *)(v7 + 24);
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  return sub_100015764((uint64_t)v5, &qword_1003518B0);
}

uint64_t sub_10002D1F0(uint64_t a1)
{
  return sub_100030C2C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo,  &qword_1003518B0,  type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

void (*sub_10002D20C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003518B0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_1003518B0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    sub_100015764((uint64_t)v5, &qword_1003518B0);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
  }

  return sub_10002D34C;
}

void sub_10002D34C(uint64_t a1, char a2)
{
}

BOOL sub_10002D360()
{
  return sub_10002D37C( &qword_1003518B0,  type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo,  type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

BOOL sub_10002D37C(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = sub_100003A0C(a1);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a2(0LL);
  sub_10000E6C0(v3 + *(int *)(v10 + 28), (uint64_t)v9, a1);
  uint64_t v11 = a3(0LL);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v9, 1LL, v11) != 1;
  sub_100015764((uint64_t)v9, a1);
  return v12;
}

uint64_t sub_10002D438()
{
  return sub_10002D454( type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo,  &qword_1003518B0,  type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t sub_10002D454(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0LL) + 28);
  sub_100015764(v6, a2);
  uint64_t v7 = a3(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t sub_10002D4BC@<X0>(uint64_t a1@<X8>)
{
  unsigned int v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  uint64_t v3 = a1 + v2[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  *(_BYTE *)(a1 + v2[6]) = 5;
  uint64_t v4 = a1 + v2[7];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
}

uint64_t sub_10002D52C@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange, a1);
}

uint64_t sub_10002D538()
{
  return sub_100027F98(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_10002D544(uint64_t a1)
{
  return sub_100027FD8(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t (*sub_10002D550(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8)) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10002D5A4()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_10002D5B0()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

double sub_10002D5BC()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_10002D5C8(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, a1);
}

uint64_t (*sub_10002D5D4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10002D62C()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_10002D638()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

double sub_10002D644()
{
  return sub_100027BE4(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_10002D650(double a1)
{
  return sub_100027C28(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, a1);
}

uint64_t (*sub_10002D65C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0LL) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10002D6B4()
{
  return sub_100027CC4(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_10002D6C0()
{
  return sub_100027D00(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

double sub_10002D6CC()
{
  return sub_100027D3C(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_10002D6D8(double a1)
{
  return sub_100027D80(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, a1);
}

uint64_t (*sub_10002D6E4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0LL) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10002D73C()
{
  return sub_100027E1C(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_10002D748()
{
  return sub_100027E58(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

int *sub_10002D754@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0LL);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(void *)uint64_t v4 = 0LL;
  *(_BYTE *)(v4 + 8) = 1;
  uint64_t v5 = a1 + result[7];
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + 8) = 1;
  uint64_t v6 = a1 + result[8];
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  return result;
}

uint64_t sub_10002D7C0()
{
  return sub_1000191E8(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t sub_10002D7CC(int a1)
{
  return sub_100019228(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t (*sub_10002D7D8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0LL) + 20);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10002D828()
{
  return sub_1000192B8(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t sub_10002D834()
{
  return sub_1000192F4(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t sub_10002D840@<X0>(uint64_t a1@<X8>)
{
  return sub_100030798(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, a1);
}

uint64_t sub_10002D84C(uint64_t a1)
{
  return sub_1000308E8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo,  &qword_1003518B8,  type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

void (*sub_10002D868(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003518B8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_1003518B8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    v9[v6[6]] = 5;
    BOOL v12 = &v9[v6[7]];
    uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
    sub_100015764((uint64_t)v5, &qword_1003518B8);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  }

  return sub_10002D9D0;
}

void sub_10002D9D0(uint64_t a1, char a2)
{
}

BOOL sub_10002D9E4()
{
  return sub_100019928( &qword_1003518B8,  type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo,  type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_10002DA00()
{
  return sub_100019A00( type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo,  &qword_1003518B8,  type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_10002DA1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_1003518C0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_1003518C0);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  uint64_t v11 = a1 + v7[8];
  *(void *)uint64_t v11 = 0LL;
  *(_BYTE *)(v11 + 8) = 1;
  return sub_100015764((uint64_t)v5, &qword_1003518C0);
}

uint64_t sub_10002DB3C(uint64_t a1)
{
  return sub_100030C2C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo,  &qword_1003518C0,  type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

void (*sub_10002DB58(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003518C0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_1003518C0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    BOOL v12 = &v9[v6[6]];
    *(void *)BOOL v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    uint64_t v14 = &v9[v6[8]];
    *(void *)uint64_t v14 = 0LL;
    v14[8] = 1;
    sub_100015764((uint64_t)v5, &qword_1003518C0);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  }

  return sub_10002DCB8;
}

void sub_10002DCB8(uint64_t a1, char a2)
{
}

BOOL sub_10002DCCC()
{
  return sub_10002D37C( &qword_1003518C0,  type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo,  type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_10002DCE8()
{
  return sub_10002D454( type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo,  &qword_1003518C0,  type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_10002DD04@<X0>(uint64_t a1@<X8>)
{
  unsigned int v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0LL);
  uint64_t v3 = a1 + v2[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  uint64_t v4 = a1 + v2[6];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = a1 + v2[7];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t sub_10002DDA0@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, a1);
}

uint64_t sub_10002DDAC@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, a1);
}

uint64_t sub_10002DDB8()
{
  return sub_100027F98(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t sub_10002DDC4(uint64_t a1)
{
  return sub_100027FD8(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t (*sub_10002DDD0(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8)) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10002DE24()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t sub_10002DE30()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

double sub_10002DE3C()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t sub_10002DE48(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, a1);
}

uint64_t (*sub_10002DE54(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10002DEAC()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t sub_10002DEB8()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t sub_10002DEC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0LL);
  uint64_t v3 = a1 + *(int *)(result + 20);
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  uint64_t v4 = a1 + *(int *)(result + 24);
  *(void *)uint64_t v4 = 0LL;
  *(_BYTE *)(v4 + 8) = 1;
  return result;
}

uint64_t sub_10002DF10()
{
  return sub_1000191E8(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_10002DF1C(int a1)
{
  return sub_100019228(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t (*sub_10002DF28(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0LL) + 20);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10002DF78()
{
  return sub_1000192B8(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_10002DF84()
{
  return sub_1000192F4(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_10002DF90()
{
  return sub_10002DF9C(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_10002DF9C(uint64_t (*a1)(void))
{
  unsigned int v2 = (_BYTE *)(v1 + *(int *)(a1(0LL) + 24));
  if (v2[4]) {
    return 0LL;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t sub_10002DFD0(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_10002DFDC(int a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0LL);
  uint64_t v5 = v2 + *(int *)(result + 24);
  *(_DWORD *)uint64_t v5 = a1;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_10002E010(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10002E060()
{
  return sub_1000277C8(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_10002E06C()
{
  return sub_100027804(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_10002E078()
{
  return sub_10002E084(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_10002E084(uint64_t (*a1)(void))
{
  unsigned int v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0LL) + 28));
  if (v2 == 6) {
    return 0LL;
  }
  else {
    return v2;
  }
}

uint64_t sub_10002E0B0(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_10002E0DC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0LL) + 28);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10002E128()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0LL) + 28)) != 6;
}

uint64_t sub_10002E150()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 6;
  return result;
}

uint64_t sub_10002E174@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_1003518C8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 32), (uint64_t)v5, &qword_1003518C8);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v5, 1LL, v7) != 1) {
    return sub_100003E68( (uint64_t)v5,  a1,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a1 + *(int *)(v7 + 24);
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  return sub_100015764((uint64_t)v5, &qword_1003518C8);
}

uint64_t sub_10002E274(uint64_t a1)
{
  return sub_1000343F8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo,  &qword_1003518C8,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

void (*sub_10002E290(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003518C8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0LL) + 32);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_1003518C8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    BOOL v12 = &v9[*(int *)(v6 + 24)];
    *(void *)BOOL v12 = 0LL;
    v12[8] = 1;
    sub_100015764((uint64_t)v5, &qword_1003518C8);
  }

  else
  {
    sub_100003E68( (uint64_t)v5,  (uint64_t)v9,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  }

  return sub_10002E3D0;
}

void sub_10002E3D0(uint64_t a1, char a2)
{
}

BOOL sub_10002E3E4()
{
  return sub_10002E400( &qword_1003518C8,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

BOOL sub_10002E400(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = sub_100003A0C(a1);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a2(0LL);
  sub_10000E6C0(v3 + *(int *)(v10 + 32), (uint64_t)v9, a1);
  uint64_t v11 = a3(0LL);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v9, 1LL, v11) != 1;
  sub_100015764((uint64_t)v9, a1);
  return v12;
}

uint64_t sub_10002E4BC()
{
  return sub_10002E4D8( type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo,  &qword_1003518C8,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t sub_10002E4D8(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0LL) + 32);
  sub_100015764(v6, a2);
  uint64_t v7 = a3(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t sub_10002E540@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_1003518C8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 36), (uint64_t)v5, &qword_1003518C8);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v5, 1LL, v7) != 1) {
    return sub_100003E68( (uint64_t)v5,  a1,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a1 + *(int *)(v7 + 24);
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  return sub_100015764((uint64_t)v5, &qword_1003518C8);
}

uint64_t sub_10002E640(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0LL) + 36);
  sub_100015764(v3, &qword_1003518C8);
  sub_100003E68(a1, v3, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 0LL, 1LL, v4);
}

void (*sub_10002E6B0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003518C8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0LL) + 36);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_1003518C8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    BOOL v12 = &v9[*(int *)(v6 + 24)];
    *(void *)BOOL v12 = 0LL;
    v12[8] = 1;
    sub_100015764((uint64_t)v5, &qword_1003518C8);
  }

  else
  {
    sub_100003E68( (uint64_t)v5,  (uint64_t)v9,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  }

  return sub_10002E3D0;
}

BOOL sub_10002E7F0()
{
  uint64_t v1 = sub_100003A0C(&qword_1003518C8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0LL);
  sub_10000E6C0(v0 + *(int *)(v4 + 36), (uint64_t)v3, &qword_1003518C8);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0LL);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v3, 1LL, v5) != 1;
  sub_100015764((uint64_t)v3, &qword_1003518C8);
  return v6;
}

uint64_t sub_10002E8A4()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0LL) + 36);
  sub_100015764(v1, &qword_1003518C8);
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
}

uint64_t sub_10002E8FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0LL);
  uint64_t v3 = a1 + v2[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  uint64_t v4 = a1 + v2[6];
  *(_DWORD *)uint64_t v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  *(_BYTE *)(a1 + v2[7]) = 6;
  uint64_t v5 = a1 + v2[8];
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0LL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL);
  v8(v5, 1LL, 1LL, v6);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a1 + v2[9], 1LL, 1LL, v6);
}

uint64_t sub_10002E9B8@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, a1);
}

uint64_t sub_10002E9C4()
{
  return sub_100027F98(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10002E9D0(uint64_t a1)
{
  return sub_100027FD8(a1, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t (*sub_10002E9DC(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8)) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10002EA30()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10002EA3C()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

double sub_10002EA48()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10002EA54(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, a1);
}

uint64_t (*sub_10002EA60(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10002EAB8()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10002EAC4()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

double sub_10002EAD0()
{
  return sub_100027BE4(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10002EADC(double a1)
{
  return sub_100027C28(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, a1);
}

uint64_t (*sub_10002EAE8(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10002EB40()
{
  return sub_100027CC4(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10002EB4C()
{
  return sub_100027D00(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

int *sub_10002EB58@<X0>(uint64_t a1@<X8>)
{
  return sub_10002EB64(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, a1);
}

int *sub_10002EB64@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (int *)a1(0LL);
  uint64_t v5 = a2 + result[5];
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + 8) = 1;
  uint64_t v6 = a2 + result[6];
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  uint64_t v7 = a2 + result[7];
  *(void *)uint64_t v7 = 0LL;
  *(_BYTE *)(v7 + 8) = 1;
  return result;
}

uint64_t sub_10002EBC4()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0LL) + 20));
  swift_beginAccess(v1 + 16, v3, 0LL, 0LL);
  if (*(_BYTE *)(v1 + 20)) {
    return 0LL;
  }
  else {
    return *(unsigned int *)(v1 + 16);
  }
}

uint64_t sub_10002EC18(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_1000547BC(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 16, v12, 1LL, 0LL);
  *(_DWORD *)(v10 + 16) = a1;
  *(_BYTE *)(v10 + 20) = 0;
  return result;
}

void (*sub_10002ECC0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)(v5 + 16);
  if (*(_BYTE *)(v5 + 20)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_10002ED40;
}

void sub_10002ED40(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_1000547BC(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_10002EE14()
{
  return sub_10002EE20(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

BOOL sub_10002EE20(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0LL) + 20));
  swift_beginAccess(v2 + 16, v4, 0LL, 0LL);
  return (*(_BYTE *)(v2 + 20) & 1) == 0;
}

uint64_t sub_10002EE74()
{
  return sub_10002EE90( type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass,  (void (*)(uint64_t))sub_1000547BC);
}

uint64_t sub_10002EE90( uint64_t (*a1)(void), uint64_t (*a2)(void), void (*a3)(uint64_t))
{
  uint64_t v6 = v3;
  uint64_t v7 = *(int *)(a1(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v7)) & 1) == 0)
  {
    uint64_t v8 = *(void *)(v3 + v7);
    uint64_t v9 = a2(0LL);
    uint64_t v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    uint64_t v11 = swift_retain(v8);
    a3(v11);
    uint64_t v12 = *(void *)(v6 + v7);
    *(void *)(v6 + v7) = v10;
    swift_release(v12);
  }

  uint64_t v13 = *(void *)(v6 + v7);
  uint64_t result = swift_beginAccess(v13 + 16, v15, 1LL, 0LL);
  *(_DWORD *)(v13 + 16) = 0;
  *(_BYTE *)(v13 + 20) = 1;
  return result;
}

uint64_t sub_10002EF44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_1003518B8);
  __chkstk_darwin(v3);
  uint64_t v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v13, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_1003518B8);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  *(_BYTE *)(a1 + v7[6]) = 5;
  uint64_t v9 = a1 + v7[7];
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  return sub_100015764((uint64_t)v5, &qword_1003518B8);
}

uint64_t sub_10002F094(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003518B8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1000547BC(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_1003518B8);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_1003518B8);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10002F214(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003518B8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_1003518B8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    v9[v6[6]] = 5;
    uint64_t v12 = &v9[v6[7]];
    uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
    sub_100015764((uint64_t)v5, &qword_1003518B8);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  }

  return sub_10002F394;
}

void sub_10002F394(uint64_t a1, char a2)
{
}

BOOL sub_10002F3A8()
{
  return sub_10001D054( &qword_1003518B8,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated,  type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_10002F3CC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_1003518B8);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1000547BC(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_1003518B8);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10002F4FC@<X0>(uint64_t a1@<X8>)
{
  return sub_100034894( &qword_1003518D0,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion,  a1);
}

uint64_t sub_10002F520(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003518D0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1000547BC(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_1003518D0);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_1003518D0);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10002F6A0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003518D0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_1003518D0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_1003518D0);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }

  return sub_10002F808;
}

void sub_10002F808(uint64_t a1, char a2)
{
}

BOOL sub_10002F81C()
{
  return sub_10001D054( &qword_1003518D0,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10002F840()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_1003518D0);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1000547BC(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_1003518D0);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10002F970@<X0>(uint64_t a1@<X8>)
{
  return sub_100034894( &qword_1003518D0,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion,  a1);
}

uint64_t sub_10002F994(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003518D0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1000547BC(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_1003518D0);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_1003518D0);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10002FB14(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003518D0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_1003518D0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_1003518D0);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }

  return sub_10002FC7C;
}

void sub_10002FC7C(uint64_t a1, char a2)
{
}

BOOL sub_10002FC90()
{
  return sub_10001D054( &qword_1003518D0,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10002FCB4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_1003518D0);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1000547BC(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_1003518D0);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10002FDE4@<X0>(uint64_t a1@<X8>)
{
  return sub_100034894( &qword_1003518D0,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion,  a1);
}

uint64_t sub_10002FE08(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003518D0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1000547BC(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_1003518D0);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_1003518D0);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10002FF88(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003518D0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_1003518D0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_1003518D0);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }

  return sub_1000300F0;
}

void sub_1000300F0(uint64_t a1, char a2)
{
}

BOOL sub_100030104()
{
  return sub_10001D054( &qword_1003518D0,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_100030128()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_1003518D0);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1000547BC(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_1003518D0);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100030258@<X0>(uint64_t a1@<X8>)
{
  return sub_100034894( &qword_1003518D0,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion,  a1);
}

uint64_t sub_10003027C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003518D0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1000547BC(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_1003518D0);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_1003518D0);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000303FC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003518D0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_1003518D0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_1003518D0);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }

  return sub_100030564;
}

void sub_100030564(uint64_t a1, char a2)
{
}

BOOL sub_100030578()
{
  return sub_10001D054( &qword_1003518D0,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10003059C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_1003518D0);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1000547BC(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_1003518D0);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000306CC@<X0>(uint64_t a1@<X8>)
{
  return sub_100024054( type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo,  &qword_10036D950,  &qword_10036D958,  (uint64_t)sub_1000546B8,  a1);
}

uint64_t sub_1000306F0()
{
  return sub_1000365F4(&qword_10036D950, &qword_10036D958, (uint64_t)sub_1000546B8);
}

uint64_t sub_10003070C()
{
  return sub_1000191E8(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t sub_100030718(int a1)
{
  return sub_100019228(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t (*sub_100030724(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0LL) + 20);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100030774()
{
  return sub_1000192B8(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t sub_100030780()
{
  return sub_1000192F4(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t sub_10003078C@<X0>(uint64_t a1@<X8>)
{
  return sub_100030798(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, a1);
}

uint64_t sub_100030798@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100003A0C(&qword_1003518B8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1(0LL);
  sub_10000E6C0(v2 + *(int *)(v8 + 24), (uint64_t)v7, &qword_1003518B8);
  uint64_t v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  UnknownStorage.init()();
  uint64_t v10 = a2 + v9[5];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  *(_BYTE *)(a2 + v9[6]) = 5;
  uint64_t v11 = a2 + v9[7];
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
  return sub_100015764((uint64_t)v7, &qword_1003518B8);
}

uint64_t sub_1000308CC(uint64_t a1)
{
  return sub_1000308E8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo,  &qword_1003518B8,  type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_1000308E8( uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v8 = v4 + *(int *)(a2(0LL) + 24);
  sub_100015764(v8, a3);
  sub_100003E68(a1, v8, a4);
  uint64_t v9 = a4(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 0LL, 1LL, v9);
}

void (*sub_100030960(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003518B8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_1003518B8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    v9[v6[6]] = 5;
    uint64_t v12 = &v9[v6[7]];
    uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
    sub_100015764((uint64_t)v5, &qword_1003518B8);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  }

  return sub_10002D9D0;
}

BOOL sub_100030AC8()
{
  return sub_100019928( &qword_1003518B8,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo,  type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_100030AE4()
{
  return sub_100019A00( type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo,  &qword_1003518B8,  type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_100030B00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_1003518D0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_1003518D0);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  return sub_100015764((uint64_t)v5, &qword_1003518D0);
}

uint64_t sub_100030C10(uint64_t a1)
{
  return sub_100030C2C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo,  &qword_1003518D0,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_100030C2C( uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v8 = v4 + *(int *)(a2(0LL) + 28);
  sub_100015764(v8, a3);
  sub_100003E68(a1, v8, a4);
  uint64_t v9 = a4(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 0LL, 1LL, v9);
}

void (*sub_100030CA4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003518D0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_1003518D0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_1003518D0);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }

  return sub_100030DF4;
}

void sub_100030DF4(uint64_t a1, char a2)
{
}

BOOL sub_100030E08()
{
  return sub_10002D37C( &qword_1003518D0,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_100030E24()
{
  return sub_10002D454( type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo,  &qword_1003518D0,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_100030E40@<X0>(uint64_t a1@<X8>)
{
  return sub_1000342CC( &qword_1003518D0,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion,  a1);
}

uint64_t sub_100030E5C(uint64_t a1)
{
  return sub_1000343F8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo,  &qword_1003518D0,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

void (*sub_100030E78(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003518D0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0LL) + 32);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_1003518D0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_1003518D0);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }

  return sub_100030DF4;
}

BOOL sub_100030FC8()
{
  return sub_10002E400( &qword_1003518D0,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_100030FE4()
{
  return sub_10002E4D8( type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo,  &qword_1003518D0,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_100031000@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0LL);
  uint64_t v3 = a1 + v2[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  uint64_t v4 = a1 + v2[6];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = a1 + v2[7];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL);
  v9(v6, 1LL, 1LL, v7);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v9)(a1 + v2[8], 1LL, 1LL, v7);
}

uint64_t sub_1000310CC@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, a1);
}

uint64_t sub_1000310D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_1003518D0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_1003518D0);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  return sub_100015764((uint64_t)v5, &qword_1003518D0);
}

uint64_t sub_1000311E8(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo,  &qword_1003518D0,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

void (*sub_100031204(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003518D0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_1003518D0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_1003518D0);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }

  return sub_100030DF4;
}

BOOL sub_100031354()
{
  return sub_100031370( &qword_1003518D0,  type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

BOOL sub_100031370(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = sub_100003A0C(a1);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a2(0LL);
  sub_10000E6C0(v3 + *(int *)(v10 + 20), (uint64_t)v9, a1);
  uint64_t v11 = a3(0LL);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v9, 1LL, v11) != 1;
  sub_100015764((uint64_t)v9, a1);
  return v12;
}

uint64_t sub_10003142C()
{
  return sub_100031448( type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo,  &qword_1003518D0,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_100031448(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0LL) + 20);
  sub_100015764(v6, a2);
  uint64_t v7 = a3(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t sub_1000314B0()
{
  return sub_10002DF9C(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t sub_1000314BC(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t (*sub_1000314C8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100031518()
{
  return sub_1000277C8(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t sub_100031524()
{
  return sub_100027804(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t sub_100031530@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0LL);
  uint64_t v3 = a1 + *(int *)(v2 + 20);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))( v3,  1LL,  1LL,  v4);
  uint64_t v6 = a1 + *(int *)(v2 + 24);
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  return result;
}

uint64_t sub_1000315A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_1003518D8);
  __chkstk_darwin(v3);
  uint64_t v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v15, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_1003518D8);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v7[6];
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  uint64_t v11 = a1 + v7[7];
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
  return sub_100015764((uint64_t)v5, &qword_1003518D8);
}

uint64_t sub_100031714(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003518D8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_100057AD4(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_1003518D8);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_1003518D8);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100031894(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003518D8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_1003518D8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
    uint64_t v14 = &v9[v6[7]];
    uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v14, 1LL, 1LL, v15);
    sub_100015764((uint64_t)v5, &qword_1003518D8);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  }

  return sub_100031A34;
}

void sub_100031A34(uint64_t a1, char a2)
{
}

BOOL sub_100031A48()
{
  return sub_10001D054( &qword_1003518D8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo,  &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps,  type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t sub_100031A6C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_1003518D8);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_100057AD4(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_1003518D8);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100031B9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_1003518E0);
  __chkstk_darwin(v3);
  uint64_t v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v15, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_1003518E0);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v7[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  *(_BYTE *)(a1 + v7[7]) = 6;
  uint64_t v10 = a1 + v7[8];
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0LL);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL);
  v12(v10, 1LL, 1LL, v11);
  v12(a1 + v7[9], 1LL, 1LL, v11);
  return sub_100015764((uint64_t)v5, &qword_1003518E0);
}

uint64_t sub_100031D20(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003518E0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_100057AD4(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_1003518E0);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_1003518E0);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100031EA0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003518E0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_1003518E0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    v9[v6[7]] = 6;
    uint64_t v13 = &v9[v6[8]];
    uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0LL);
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL);
    v15(v13, 1LL, 1LL, v14);
    v15(&v9[v6[9]], 1LL, 1LL, v14);
    sub_100015764((uint64_t)v5, &qword_1003518E0);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  }

  return sub_10003204C;
}

void sub_10003204C(uint64_t a1, char a2)
{
}

BOOL sub_100032060()
{
  return sub_10001D054( &qword_1003518E0,  type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo,  &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_100032084()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_1003518E0);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_100057AD4(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_1003518E0);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000321B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_1003518E8);
  __chkstk_darwin(v3);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v12, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_1003518E8);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0LL);
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (qword_10036D950 != -1) {
    swift_once(&qword_10036D950, sub_1000546B8);
  }
  uint64_t v9 = qword_10036D958;
  *(void *)(a1 + v8) = qword_10036D958;
  swift_retain(v9);
  return sub_100015764((uint64_t)v5, &qword_1003518E8);
}

uint64_t sub_1000322F4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003518E8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_100057AD4(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_1003518E8);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_1003518E8);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100032474(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003518E8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_1003518E8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = *(int *)(v6 + 20);
    if (qword_10036D950 != -1) {
      swift_once(&qword_10036D950, sub_1000546B8);
    }
    uint64_t v12 = qword_10036D958;
    *(void *)&v9[v11] = qword_10036D958;
    swift_retain(v12);
    sub_100015764((uint64_t)v5, &qword_1003518E8);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  }

  return sub_1000325E4;
}

void sub_1000325E4(uint64_t a1, char a2)
{
}

BOOL sub_1000325F8()
{
  return sub_10001D054( &qword_1003518E8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo,  &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

uint64_t sub_10003261C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_1003518E8);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_100057AD4(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_1003518E8);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10003274C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_1003518F0);
  __chkstk_darwin(v3);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v16, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_1003518F0);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v7[6];
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  uint64_t v11 = a1 + v7[7];
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL);
  v13(v11, 1LL, 1LL, v12);
  v13(a1 + v7[8], 1LL, 1LL, v12);
  return sub_100015764((uint64_t)v5, &qword_1003518F0);
}

uint64_t sub_1000328E0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003518F0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_100057AD4(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_1003518F0);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_1003518F0);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100032A60(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003518F0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_1003518F0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
    uint64_t v14 = &v9[v6[7]];
    uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
    uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL);
    v16(v14, 1LL, 1LL, v15);
    v16(&v9[v6[8]], 1LL, 1LL, v15);
    sub_100015764((uint64_t)v5, &qword_1003518F0);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
  }

  return sub_100032C1C;
}

void sub_100032C1C(uint64_t a1, char a2)
{
}

BOOL sub_100032C30()
{
  return sub_10001D054( &qword_1003518F0,  type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo,  &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t sub_100032C54()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_1003518F0);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_100057AD4(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_1003518F0);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100032D84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_1003518F8);
  __chkstk_darwin(v3);
  uint64_t v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v13, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_1003518F8);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  uint64_t v10 = a1 + *(int *)(v7 + 24);
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return sub_100015764((uint64_t)v5, &qword_1003518F8);
}

uint64_t sub_100032ED0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003518F8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_100057AD4(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_1003518F8);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_1003518F8);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100033050(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003518F8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_1003518F8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
    uint64_t v13 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    sub_100015764((uint64_t)v5, &qword_1003518F8);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  }

  return sub_1000331C4;
}

void sub_1000331C4(uint64_t a1, char a2)
{
}

BOOL sub_1000331D8()
{
  return sub_10001D054( &qword_1003518F8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo,  &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic,  type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t sub_1000331FC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_1003518F8);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_100057AD4(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_1003518F8);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10003332C@<X0>(uint64_t a1@<X8>)
{
  return sub_100024054( type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo,  &qword_10036D978,  &qword_10036D980,  (uint64_t)sub_1000579AC,  a1);
}

uint64_t sub_100033350()
{
  return sub_1000365F4(&qword_10036D978, &qword_10036D980, (uint64_t)sub_1000579AC);
}

uint64_t sub_10003336C()
{
  return sub_100027F98(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_100033378(uint64_t a1)
{
  return sub_100027FD8(a1, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t (*sub_100033384(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8)) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000333D8()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_1000333E4()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

float sub_1000333F0()
{
  return sub_1000276E8(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_1000333FC(float a1)
{
  return sub_10002772C(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, a1);
}

uint64_t (*sub_100033408(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL) + 24);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100033460()
{
  return sub_1000277C8(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_10003346C()
{
  return sub_100027804(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

float sub_100033478()
{
  return sub_100021008(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_100033484(float a1)
{
  return sub_10002104C(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, a1);
}

uint64_t (*sub_100033490(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL) + 28);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000334E8()
{
  return sub_100020BD0(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_1000334F4()
{
  return sub_100020C0C(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

float sub_100033500()
{
  return sub_10002CCD0(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_10003350C(float a1)
{
  return sub_10002CD14(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, a1);
}

uint64_t (*sub_100033518(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL) + 32);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100033570()
{
  return sub_100027938(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_10003357C()
{
  return sub_100027974(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

float sub_100033588()
{
  return sub_100033594(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

float sub_100033594(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0LL) + 36);
  float result = *(float *)v2;
  if (*(_BYTE *)(v2 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000335CC(float a1)
{
  return sub_1000335D8(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, a1);
}

uint64_t sub_1000335D8(uint64_t (*a1)(void), float a2)
{
  uint64_t result = a1(0LL);
  uint64_t v5 = v2 + *(int *)(result + 36);
  *(float *)uint64_t v5 = a2;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_100033610(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL) + 36);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100033668()
{
  return sub_10002828C(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_100033674()
{
  return sub_1000282C8(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

float sub_100033680()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL) + 40);
  float result = *(float *)v1;
  if (*(_BYTE *)(v1 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000336B4(float a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL);
  uint64_t v4 = v1 + *(int *)(result + 40);
  *(float *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_1000336E8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL) + 40);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100033740()
{
  return sub_10003374C(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

BOOL sub_10003374C(uint64_t (*a1)(void))
{
  return (*(_BYTE *)(v1 + *(int *)(a1(0LL) + 40) + 4) & 1) == 0;
}

uint64_t sub_10003377C()
{
  return sub_100033788(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_100033788(uint64_t (*a1)(void))
{
  uint64_t result = a1(0LL);
  uint64_t v3 = v1 + *(int *)(result + 40);
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

float sub_1000337B8()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL) + 44);
  float result = *(float *)v1;
  if (*(_BYTE *)(v1 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000337EC(float a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL);
  uint64_t v4 = v1 + *(int *)(result + 44);
  *(float *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_100033820(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL) + 44);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100033878()
{
  return sub_100033884(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

BOOL sub_100033884(uint64_t (*a1)(void))
{
  return (*(_BYTE *)(v1 + *(int *)(a1(0LL) + 44) + 4) & 1) == 0;
}

uint64_t sub_1000338B4()
{
  return sub_1000338C0(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_1000338C0(uint64_t (*a1)(void))
{
  uint64_t result = a1(0LL);
  uint64_t v3 = v1 + *(int *)(result + 44);
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

float sub_1000338F0()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL) + 48);
  float result = *(float *)v1;
  if (*(_BYTE *)(v1 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100033924(float a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL);
  uint64_t v4 = v1 + *(int *)(result + 48);
  *(float *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_100033958(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL) + 48);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000339B0()
{
  return (*(_BYTE *)(v0
}

uint64_t sub_1000339DC()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL);
  uint64_t v2 = v0 + *(int *)(result + 48);
  *(_DWORD *)uint64_t v2 = 0;
  *(_BYTE *)(v2 + 4) = 1;
  return result;
}

float sub_100033A08()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL) + 52);
  float result = *(float *)v1;
  if (*(_BYTE *)(v1 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100033A3C(float a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL);
  uint64_t v4 = v1 + *(int *)(result + 52);
  *(float *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_100033A70(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL) + 52);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100033AC8()
{
  return (*(_BYTE *)(v0
}

uint64_t sub_100033AF4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL);
  uint64_t v2 = v0 + *(int *)(result + 52);
  *(_DWORD *)uint64_t v2 = 0;
  *(_BYTE *)(v2 + 4) = 1;
  return result;
}

int *sub_100033B20@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(_DWORD *)uint64_t v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  uint64_t v5 = a1 + result[7];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  uint64_t v6 = a1 + result[8];
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  uint64_t v7 = a1 + result[9];
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  uint64_t v8 = a1 + result[10];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + result[11];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1 + result[12];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  uint64_t v11 = a1 + result[13];
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  return result;
}

double sub_100033BDC()
{
  return sub_10001FC20(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_100033BE8(double a1)
{
  return sub_10001FC64(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, a1);
}

uint64_t (*sub_100033BF4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_100033C4C()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_100033C58()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

double sub_100033C64()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_100033C70(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, a1);
}

uint64_t (*sub_100033C7C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_100033CD4()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_100033CE0()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

double sub_100033CEC()
{
  return sub_100027BE4(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_100033CF8(double a1)
{
  return sub_100027C28(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, a1);
}

uint64_t (*sub_100033D04(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0LL) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_100033D5C()
{
  return sub_100027CC4(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_100033D68()
{
  return sub_100027D00(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

int *sub_100033D74@<X0>(uint64_t a1@<X8>)
{
  return sub_10002EB64(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, a1);
}

uint64_t sub_100033D80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100351858);
  __chkstk_darwin(v3);
  double v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_100351858);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + *(int *)(v7 + 24);
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  return sub_100015764((uint64_t)v5, &qword_100351858);
}

uint64_t sub_100033E9C(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset,  &qword_100351858,  type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_100033EB8( uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v8 = v4 + *(int *)(a2(0LL) + 20);
  sub_100015764(v8, a3);
  sub_100003E68(a1, v8, a4);
  uint64_t v9 = a4(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 0LL, 1LL, v9);
}

void (*sub_100033F30(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351858);
  double v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100351858);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
    sub_100015764((uint64_t)v5, &qword_100351858);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  }

  return sub_10003408C;
}

void sub_10003408C(uint64_t a1, char a2)
{
}

BOOL sub_1000340A0()
{
  return sub_100031370( &qword_100351858,  type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset,  type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_1000340BC()
{
  return sub_100031448( type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset,  &qword_100351858,  type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_1000340D8()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
  if (v1 == 13) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_100034100(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_10003412C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0LL) + 24);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 13) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100034178()
{
  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0LL) + 24)) != 13;
}

uint64_t sub_1000341A0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 13;
  return result;
}

uint64_t sub_1000341C4()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
  if (v1 == 4) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000341EC(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_100034218(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0LL) + 28);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100034264()
{
  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0LL) + 28)) != 4;
}

uint64_t sub_10003428C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 4;
  return result;
}

uint64_t sub_1000342B0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000342CC( &qword_100351900,  type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset,  type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz,  a1);
}

uint64_t sub_1000342CC@<X0>( uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = sub_100003A0C(a1);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a2(0LL);
  sub_10000E6C0(v4 + *(int *)(v12 + 32), (uint64_t)v11, a1);
  uint64_t v13 = (int *)a3(0LL);
  UnknownStorage.init()();
  uint64_t v14 = a4 + v13[5];
  *(void *)uint64_t v14 = 0LL;
  *(_BYTE *)(v14 + 8) = 1;
  uint64_t v15 = a4 + v13[6];
  *(void *)uint64_t v15 = 0LL;
  *(_BYTE *)(v15 + 8) = 1;
  uint64_t v16 = a4 + v13[7];
  *(void *)uint64_t v16 = 0LL;
  *(_BYTE *)(v16 + 8) = 1;
  return sub_100015764((uint64_t)v11, a1);
}

uint64_t sub_1000343DC(uint64_t a1)
{
  return sub_1000343F8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset,  &qword_100351900,  type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_1000343F8( uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v8 = v4 + *(int *)(a2(0LL) + 32);
  sub_100015764(v8, a3);
  sub_100003E68(a1, v8, a4);
  uint64_t v9 = a4(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 0LL, 1LL, v9);
}

void (*sub_100034470(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351900);
  double v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0LL) + 32);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100351900);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100351900);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
  }

  return sub_1000345C0;
}

void sub_1000345C0(uint64_t a1, char a2)
{
}

BOOL sub_1000345D4()
{
  return sub_10002E400( &qword_100351900,  type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset,  type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_1000345F0()
{
  return sub_10002E4D8( type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset,  &qword_100351900,  type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_10003460C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0LL);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  *(_BYTE *)(a1 + v2[6]) = 13;
  *(_BYTE *)(a1 + v2[7]) = 4;
  uint64_t v5 = a1 + v2[8];
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
}

uint64_t sub_1000346AC@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_SvId, a1);
}

uint64_t sub_1000346B8()
{
  return 4LL;
}

uint64_t sub_1000346C0@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, a1);
}

double sub_1000346CC()
{
  return sub_10001FC20(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t sub_1000346D8(double a1)
{
  return sub_10001FC64(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, a1);
}

uint64_t (*sub_1000346E4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10003473C()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t sub_100034748()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

double sub_100034754()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t sub_100034760(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, a1);
}

uint64_t (*sub_10003476C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000347C4()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t sub_1000347D0()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

double sub_1000347DC()
{
  return sub_100027BE4(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t sub_1000347E8(double a1)
{
  return sub_100027C28(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, a1);
}

uint64_t (*sub_1000347F4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0LL) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10003484C()
{
  return sub_100027CC4(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t sub_100034858()
{
  return sub_100027D00(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

int *sub_100034864@<X0>(uint64_t a1@<X8>)
{
  return sub_10002EB64(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, a1);
}

uint64_t sub_100034870@<X0>(uint64_t a1@<X8>)
{
  return sub_100034894( &qword_100351908,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents,  &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp,  type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp,  a1);
}

uint64_t sub_100034894@<X0>( uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X1>, void *a3@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = sub_100003A0C(a1);
  __chkstk_darwin(v11);
  uint64_t v13 = &v21[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v14 = *(void *)(v5 + *(int *)(a2(0LL) + 20)) + *a3;
  swift_beginAccess(v14, v21, 0LL, 0LL);
  sub_10000E6C0(v14, (uint64_t)v13, a1);
  uint64_t v15 = (int *)a4(0LL);
  UnknownStorage.init()();
  uint64_t v16 = a5 + v15[5];
  *(void *)uint64_t v16 = 0LL;
  *(_BYTE *)(v16 + 8) = 1;
  uint64_t v17 = a5 + v15[6];
  *(void *)uint64_t v17 = 0LL;
  *(_BYTE *)(v17 + 8) = 1;
  uint64_t v18 = a5 + v15[7];
  *(void *)uint64_t v18 = 0LL;
  *(_BYTE *)(v18 + 8) = 1;
  return sub_100015764((uint64_t)v13, a1);
}

uint64_t sub_1000349D4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351908);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10005BC50(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100351908);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100351908);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100034B54(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351908);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0LL)
                           + 20))
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100351908);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100351908);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  }

  return sub_100034CBC;
}

void sub_100034CBC(uint64_t a1, char a2)
{
}

BOOL sub_100034CD0()
{
  return sub_10001D054( &qword_100351908,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents,  &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp,  type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t sub_100034CF4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100351908);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10005BC50(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100351908);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100034E24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100351910);
  __chkstk_darwin(v3);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = *(void *)(v1
                 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0LL)
                          + 20))
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess(v6, v12, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_100351910);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0LL);
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (qword_10036D8C0 != -1) {
    swift_once(&qword_10036D8C0, sub_10004C288);
  }
  uint64_t v9 = qword_10036D8C8;
  *(void *)(a1 + v8) = qword_10036D8C8;
  swift_retain(v9);
  return sub_100015764((uint64_t)v5, &qword_100351910);
}

uint64_t sub_100034F64(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351910);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10005BC50(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100351910);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100351910);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000350E4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351910);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0LL)
                           + 20))
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100351910);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = *(int *)(v6 + 20);
    if (qword_10036D8C0 != -1) {
      swift_once(&qword_10036D8C0, sub_10004C288);
    }
    uint64_t v12 = qword_10036D8C8;
    *(void *)&v9[v11] = qword_10036D8C8;
    swift_retain(v12);
    sub_100015764((uint64_t)v5, &qword_100351910);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  }

  return sub_100035254;
}

void sub_100035254(uint64_t a1, char a2)
{
}

BOOL sub_100035268()
{
  return sub_10001D054( &qword_100351910,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents,  &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
}

uint64_t sub_10003528C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100351910);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10005BC50(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100351910);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000353BC()
{
  return sub_100029458( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents,  &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
}

uint64_t sub_1000353D0(uint64_t a1)
{
  return sub_1000294D8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass,  (void (*)(uint64_t))sub_10005BC50,  &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
}

void (*sub_1000353F4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  uint64_t v6 = *v5;
  v3[9] = *v5;
  swift_bridgeObjectRetain(v6);
  return sub_10003547C;
}

void sub_10003547C(uint64_t *a1, char a2)
{
}

uint64_t sub_100035498()
{
  return sub_100029458( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents,  &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
}

uint64_t sub_1000354AC(uint64_t a1)
{
  return sub_1000294D8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass,  (void (*)(uint64_t))sub_10005BC50,  &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
}

void (*sub_1000354D0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  uint64_t v6 = *v5;
  v3[9] = *v5;
  swift_bridgeObjectRetain(v6);
  return sub_100035558;
}

void sub_100035558(uint64_t *a1, char a2)
{
}

uint64_t sub_100035574@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100351918);
  __chkstk_darwin(v3);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = *(void *)(v1
                 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0LL)
                          + 20))
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess(v6, v12, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_100351918);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0LL);
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (qword_10036D978 != -1) {
    swift_once(&qword_10036D978, sub_1000579AC);
  }
  uint64_t v9 = qword_10036D980;
  *(void *)(a1 + v8) = qword_10036D980;
  swift_retain(v9);
  return sub_100015764((uint64_t)v5, &qword_100351918);
}

uint64_t sub_1000356B4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351918);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10005BC50(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100351918);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100351918);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100035834(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351918);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0LL)
                           + 20))
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100351918);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = *(int *)(v6 + 20);
    if (qword_10036D978 != -1) {
      swift_once(&qword_10036D978, sub_1000579AC);
    }
    uint64_t v12 = qword_10036D980;
    *(void *)&v9[v11] = qword_10036D980;
    swift_retain(v12);
    sub_100015764((uint64_t)v5, &qword_100351918);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  }

  return sub_1000359A4;
}

void sub_1000359A4(uint64_t a1, char a2)
{
}

BOOL sub_1000359B8()
{
  return sub_10001D054( &qword_100351918,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents,  &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion,  type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
}

uint64_t sub_1000359DC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100351918);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10005BC50(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100351918);
  swift_endAccess(v16);
  return swift_release(v11);
}

double sub_100035B0C()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents,  &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec);
}

uint64_t sub_100035B20(double a1)
{
  return sub_100035C20( &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec,  a1);
}

void (*sub_100035B2C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_100035BBC;
}

void sub_100035BBC(uint64_t *a1, char a2)
{
}

BOOL sub_100035BC8()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents,  &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec);
}

uint64_t sub_100035BDC()
{
  return sub_100024F0C( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass,  (void (*)(uint64_t))sub_10005BC50,  &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec);
}

double sub_100035C00()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents,  &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec);
}

uint64_t sub_100035C14(double a1)
{
  return sub_100035C20( &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec,  a1);
}

uint64_t sub_100035C20(void *a1, double a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v2 + v6);
    uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0LL);
    uint64_t v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v10 = swift_retain(v7);
    sub_10005BC50(v10);
    uint64_t v11 = *(void *)(v4 + v6);
    *(void *)(v4 + v6) = v9;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v4 + v6) + *a1;
  uint64_t result = swift_beginAccess(v12, v14, 1LL, 0LL);
  *(double *)uint64_t v12 = a2;
  *(_BYTE *)(v12 + 8) = 0;
  return result;
}

void (*sub_100035CDC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_100035D6C;
}

void sub_100035D6C(uint64_t *a1, char a2)
{
}

void sub_100035D78(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v8 = v5 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v8 = v5 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v9 = *(int *)(v5 + 88);
    uint64_t v10 = *(void *)(v5 + 80);
    uint64_t v11 = *(void *)(v10 + v9);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10005BC50(v14);
    uint64_t v15 = *(void *)(v10 + v9);
    *(void *)(v10 + v9) = v13;
    swift_release(v15);
  }

BOOL sub_100035E58()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents,  &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec);
}

uint64_t sub_100035E6C()
{
  return sub_100024F0C( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass,  (void (*)(uint64_t))sub_10005BC50,  &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec);
}

uint64_t sub_100035E90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100351920);
  __chkstk_darwin(v3);
  uint64_t v5 = &v19[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = *(void *)(v1
                 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0LL)
                          + 20))
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess(v6, v19, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_100351920);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v7[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  uint64_t v11 = a1 + v7[8];
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  uint64_t v12 = a1 + v7[9];
  *(_DWORD *)uint64_t v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  uint64_t v13 = a1 + v7[10];
  *(_DWORD *)uint64_t v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  uint64_t v14 = a1 + v7[11];
  *(_DWORD *)uint64_t v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  uint64_t v15 = a1 + v7[12];
  *(_DWORD *)uint64_t v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  uint64_t v16 = a1 + v7[13];
  *(_DWORD *)uint64_t v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  return sub_100015764((uint64_t)v5, &qword_100351920);
}

uint64_t sub_100036028(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351920);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10005BC50(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100351920);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100351920);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000361A8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351920);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0LL)
                           + 20))
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100351920);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    uint64_t v14 = &v9[v6[8]];
    *(_DWORD *)uint64_t v14 = 0;
    v14[4] = 1;
    uint64_t v15 = &v9[v6[9]];
    *(_DWORD *)uint64_t v15 = 0;
    v15[4] = 1;
    uint64_t v16 = &v9[v6[10]];
    *(_DWORD *)uint64_t v16 = 0;
    v16[4] = 1;
    uint64_t v17 = &v9[v6[11]];
    *(_DWORD *)uint64_t v17 = 0;
    v17[4] = 1;
    uint64_t v18 = &v9[v6[12]];
    *(_DWORD *)uint64_t v18 = 0;
    v18[4] = 1;
    uint64_t v19 = &v9[v6[13]];
    *(_DWORD *)uint64_t v19 = 0;
    v19[4] = 1;
    sub_100015764((uint64_t)v5, &qword_100351920);
  }

  else
  {
    sub_100003E68( (uint64_t)v5,  (uint64_t)v9,  type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
  }

  return sub_100036370;
}

void sub_100036370(uint64_t a1, char a2)
{
}

BOOL sub_100036384()
{
  return sub_10001D054( &qword_100351920,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents,  &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel,  type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_1000363A8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100351920);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10005BC50(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100351920);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000364D8()
{
  return sub_100029458( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents,  OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset);
}

uint64_t sub_1000364EC(uint64_t a1)
{
  return sub_1000294D8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass,  (void (*)(uint64_t))sub_10005BC50,  OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset);
}

void (*sub_100036510(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  uint64_t v6 = *v5;
  v3[9] = *v5;
  swift_bridgeObjectRetain(v6);
  return sub_100036598;
}

void sub_100036598(uint64_t *a1, char a2)
{
}

uint64_t sub_1000365B4@<X0>(uint64_t a1@<X8>)
{
  return sub_100024054( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents,  &qword_10036D9B0,  &qword_10036D9B8,  (uint64_t)sub_10005BAF8,  a1);
}

uint64_t sub_1000365D8()
{
  return sub_1000365F4(&qword_10036D9B0, &qword_10036D9B8, (uint64_t)sub_10005BAF8);
}

uint64_t sub_1000365F4(void *a1, void *a2, uint64_t a3)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  return swift_retain(*a2);
}

uint64_t sub_10003662C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369298);
  sub_10000E704(v0, (uint64_t)qword_100369298);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32F0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "GLONASS_SLOT_SOURCE_PROTOBUF_DEFAULT";
  *(void *)(v9 + 8) = 36LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "GLONASS_SLOT_SOURCE_UNSET";
  *(void *)(v13 + 8) = 25LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "GLONASS_SLOT_SOURCE_UNCLEAR";
  *((void *)v15 + 1) = 27LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 3LL;
  *(void *)uint64_t v17 = "GLONASS_SLOT_SOURCE_DECODED_OVER_THE_AIR";
  *((void *)v17 + 1) = 40LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 4LL;
  *(void *)uint64_t v18 = "GLONASS_SLOT_SOURCE_POSITION_KNOWLEDGE";
  *(void *)(v18 + 8) = 38LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10003682C()
{
  return sub_100008C30(&qword_10036D750, (uint64_t)qword_100369298, (uint64_t)sub_10003662C);
}

uint64_t sub_100036848@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D750, (uint64_t)qword_100369298, (uint64_t)sub_10003662C, a1);
}

uint64_t sub_100036864@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D750, (uint64_t)qword_100369298, (uint64_t)sub_10003662C, a1);
}

uint64_t sub_100036880()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003692B0);
  sub_10000E704(v0, (uint64_t)qword_1003692B0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42A0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "SATELLITE_SYSTEM_UNKNOWN";
  *(void *)(v9 + 8) = 24LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "SATELLITE_SYSTEM_GPS";
  *(void *)(v13 + 8) = 20LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "SATELLITE_SYSTEM_GLONASS";
  *((void *)v15 + 1) = 24LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 4LL;
  *(void *)uint64_t v17 = "SATELLITE_SYSTEM_BEIDOU";
  *((void *)v17 + 1) = 23LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 8LL;
  *(void *)uint64_t v19 = "SATELLITE_SYSTEM_GALILEO";
  *((void *)v19 + 1) = 24LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  *uint64_t v20 = 16LL;
  *(void *)uint64_t v21 = "SATELLITE_SYSTEM_QZSS";
  *((void *)v21 + 1) = 21LL;
  v21[16] = 2;
  v12();
  uint64_t v22 = (void *)(v8 + 6 * v4);
  uint64_t v23 = (char *)v22 + *(int *)(v2 + 48);
  *uint64_t v22 = 32LL;
  *(void *)uint64_t v23 = "SATELLITE_SYSTEM_SBAS";
  *((void *)v23 + 1) = 21LL;
  v23[16] = 2;
  v12();
  uint64_t v24 = (void *)(v8 + 7 * v4);
  uint64_t v25 = (char *)v24 + *(int *)(v2 + 48);
  *uint64_t v24 = 64LL;
  *(void *)uint64_t v25 = "SATELLITE_SYSTEM_NAVIC";
  *((void *)v25 + 1) = 22LL;
  v25[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100036B24()
{
  return sub_100008C30(&qword_10036D758, (uint64_t)qword_1003692B0, (uint64_t)sub_100036880);
}

uint64_t sub_100036B40@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D758, (uint64_t)qword_1003692B0, (uint64_t)sub_100036880, a1);
}

uint64_t sub_100036B5C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D758, (uint64_t)qword_1003692B0, (uint64_t)sub_100036880, a1);
}

uint64_t sub_100036B78()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003692C8);
  sub_10000E704(v0, (uint64_t)qword_1003692C8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v35 = swift_allocObject(v1, v6 + 13 * v4, v5 | 7);
  *(_OWORD *)(v35 + 16) = xmmword_1002B42B0;
  uint64_t v7 = v35 + v6;
  uint64_t v8 = v35 + v6 + *(int *)(v2 + 48);
  *(void *)(v35 + v6) = 0LL;
  *(void *)uint64_t v8 = "BAND_PROTOBUF_DEFAULT";
  *(void *)(v8 + 8) = 21LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v35 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 1LL;
  *(void *)uint64_t v12 = "BAND_UNSET";
  *(void *)(v12 + 8) = 10LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v35 + v6 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 2LL;
  *(void *)uint64_t v14 = "BAND_GPS_QZSS_L1CA";
  *((void *)v14 + 1) = 18LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v35 + v6 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *uint64_t v15 = 3LL;
  *(void *)uint64_t v16 = "BAND_GPS_QZSS_L2C";
  *((void *)v16 + 1) = 17LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v35 + v6 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 4LL;
  *(void *)uint64_t v18 = "BAND_GPS_QZSS_L5";
  *((void *)v18 + 1) = 16LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v35 + v6 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 5LL;
  *(void *)uint64_t v20 = "BAND_GLONASS_L1F";
  *((void *)v20 + 1) = 16LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v35 + v6 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  *uint64_t v21 = 6LL;
  *(void *)uint64_t v22 = "BAND_BEIDOU_B1i";
  *((void *)v22 + 1) = 15LL;
  v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v35 + v6 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  *uint64_t v23 = 7LL;
  *(void *)uint64_t v24 = "BAND_BEIDOU_B2a";
  *((void *)v24 + 1) = 15LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v35 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 8LL;
  *(void *)uint64_t v25 = "BAND_GALILEO_E1";
  *(void *)(v25 + 8) = 15LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  uint64_t v26 = (void *)(v35 + v6 + 9 * v4);
  uint64_t v27 = (char *)v26 + *(int *)(v2 + 48);
  void *v26 = 9LL;
  *(void *)uint64_t v27 = "BAND_GALILEO_E5a";
  *((void *)v27 + 1) = 16LL;
  v27[16] = 2;
  v11();
  uint64_t v28 = (void *)(v35 + v6 + 10 * v4);
  uint64_t v29 = (char *)v28 + *(int *)(v2 + 48);
  *uint64_t v28 = 10LL;
  *(void *)uint64_t v29 = "BAND_SBAS_L1";
  *((void *)v29 + 1) = 12LL;
  v29[16] = 2;
  v11();
  Swift::String v30 = (void *)(v35 + v6 + 11 * v4);
  uint64_t v31 = (char *)v30 + *(int *)(v2 + 48);
  *Swift::String v30 = 11LL;
  *(void *)uint64_t v31 = "BAND_BEIDOU_B1c";
  *((void *)v31 + 1) = 15LL;
  v31[16] = 2;
  v11();
  unint64_t v32 = (void *)(v35 + v6 + 12 * v4);
  unint64_t v33 = (char *)v32 + *(int *)(v2 + 48);
  *unint64_t v32 = 12LL;
  *(void *)unint64_t v33 = "BAND_NAVIC_L5";
  *((void *)v33 + 1) = 13LL;
  v33[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v35);
}

uint64_t sub_100036F0C()
{
  return sub_100008C30(&qword_10036D760, (uint64_t)qword_1003692C8, (uint64_t)sub_100036B78);
}

uint64_t sub_100036F28@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D760, (uint64_t)qword_1003692C8, (uint64_t)sub_100036B78, a1);
}

uint64_t sub_100036F44@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D760, (uint64_t)qword_1003692C8, (uint64_t)sub_100036B78, a1);
}

uint64_t sub_100036F60()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003692E0);
  sub_10000E704(v0, (uint64_t)qword_1003692E0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 6 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32E0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "FULL_SV_TIME_SOURCE_PROTOBUF_DEFAULT";
  *(void *)(v9 + 8) = 36LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "FULL_SV_TIME_SOURCE_UNSET";
  *(void *)(v13 + 8) = 25LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "FULL_SV_TIME_SOURCE_NEWLY_DECODED_FROM_SV";
  *((void *)v15 + 1) = 41LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 3LL;
  *(void *)uint64_t v17 = "FULL_SV_TIME_SOURCE_PREV_DECODED_FROM_SV";
  *((void *)v17 + 1) = 40LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 4LL;
  *(void *)uint64_t v19 = "FULL_SV_TIME_SOURCE_POSITION_AND_OTHER_SV_TIME";
  *((void *)v19 + 1) = 46LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  *uint64_t v20 = 5LL;
  *(void *)uint64_t v21 = "FULL_SV_TIME_SOURCE_POSITION_ONLY";
  *((void *)v21 + 1) = 33LL;
  v21[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100037190()
{
  return sub_100008C30(&qword_10036D768, (uint64_t)qword_1003692E0, (uint64_t)sub_100036F60);
}

uint64_t sub_1000371AC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D768, (uint64_t)qword_1003692E0, (uint64_t)sub_100036F60, a1);
}

uint64_t sub_1000371C8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D768, (uint64_t)qword_1003692E0, (uint64_t)sub_100036F60, a1);
}

uint64_t sub_1000371E4()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003692F8);
  sub_10000E704(v0, (uint64_t)qword_1003692F8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 - v4 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3330;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "MEASUREMENT_DETECTION_METHOD_PROTOBUF_DEFAULT";
  *(void *)(v9 + 8) = 45LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "MEASUREMENT_DETECTION_METHOD_UNSET";
  *(void *)(v13 + 8) = 34LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "MEASUREMENT_DETECTION_METHOD_NOT_DETECTED";
  *((void *)v15 + 1) = 41LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 3LL;
  *(void *)uint64_t v17 = "MEASUREMENT_DETECTION_METHOD_ENERGY_BINS";
  *((void *)v17 + 1) = 40LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 4LL;
  *(void *)uint64_t v19 = "MEASUREMENT_DETECTION_METHOD_CODE_TRACKING";
  *((void *)v19 + 1) = 42LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  *uint64_t v20 = 5LL;
  *(void *)uint64_t v21 = "MEASUREMENT_DETECTION_METHOD_FREQUENCY_TRACKING";
  *((void *)v21 + 1) = 47LL;
  v21[16] = 2;
  v12();
  uint64_t v22 = (void *)(v8 + 6 * v4);
  uint64_t v23 = (char *)v22 + *(int *)(v2 + 48);
  *uint64_t v22 = 6LL;
  *(void *)uint64_t v23 = "MEASUREMENT_DETECTION_METHOD_PHASE_TRACKING";
  *((void *)v23 + 1) = 43LL;
  v23[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100037448()
{
  return sub_100008C30(&qword_10036D770, (uint64_t)qword_1003692F8, (uint64_t)sub_1000371E4);
}

uint64_t sub_100037464@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D770, (uint64_t)qword_1003692F8, (uint64_t)sub_1000371E4, a1);
}

uint64_t sub_100037480@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D770, (uint64_t)qword_1003692F8, (uint64_t)sub_1000371E4, a1);
}

uint64_t sub_10003749C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369310);
  sub_10000E704(v0, (uint64_t)qword_100369310);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32F0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "MULTIPATH_INDICATOR_PROTOBUF_DEFAULT";
  *(void *)(v9 + 8) = 36LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "MULTIPATH_INDICATOR_UNSET";
  *(void *)(v13 + 8) = 25LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "MULTIPATH_INDICATOR_UNKNOWN";
  *((void *)v15 + 1) = 27LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 3LL;
  *(void *)uint64_t v17 = "MULTIPATH_INDICATOR_PRESENT";
  *((void *)v17 + 1) = 27LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 4LL;
  *(void *)uint64_t v18 = "MULTIPATH_INDICATOR_NOT_PRESENT";
  *(void *)(v18 + 8) = 31LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000376A0()
{
  return sub_100008C30(&qword_10036D778, (uint64_t)qword_100369310, (uint64_t)sub_10003749C);
}

uint64_t sub_1000376BC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D778, (uint64_t)qword_100369310, (uint64_t)sub_10003749C, a1);
}

uint64_t sub_1000376D8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D778, (uint64_t)qword_100369310, (uint64_t)sub_10003749C, a1);
}

uint64_t sub_1000376F4()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369328);
  sub_10000E704(v0, (uint64_t)qword_100369328);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 - v4 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3330;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "SV_POSITION_SOURCE_PROTOBUF_DEFAULT";
  *(void *)(v9 + 8) = 35LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "SV_POSITION_SOURCE_UNSET";
  *(void *)(v13 + 8) = 24LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "SV_POSITION_SOURCE_EPHEMERIS_OVER_THE_AIR";
  *((void *)v15 + 1) = 41LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 3LL;
  *(void *)uint64_t v17 = "SV_POSITION_SOURCE_BROADCAST_EPHEMERIS_FILE";
  *((void *)v17 + 1) = 43LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 4LL;
  *(void *)uint64_t v19 = "SV_POSITION_SOURCE_LONG_TERM_ORBIT_MOBILE_CALC_deprecated";
  *((void *)v19 + 1) = 57LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  *uint64_t v20 = 5LL;
  *(void *)uint64_t v21 = "SV_POSITION_SOURCE_LONG_TERM_PREDICTIONS_FILE";
  *((void *)v21 + 1) = 45LL;
  v21[16] = 2;
  v12();
  uint64_t v22 = (void *)(v8 + 6 * v4);
  uint64_t v23 = (char *)v22 + *(int *)(v2 + 48);
  *uint64_t v22 = 6LL;
  *(void *)uint64_t v23 = "SV_POSITION_SOURCE_SHORT_TERM_PREDICTIONS_FILE";
  *((void *)v23 + 1) = 46LL;
  v23[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100037958()
{
  return sub_100008C30(&qword_10036D780, (uint64_t)qword_100369328, (uint64_t)sub_1000376F4);
}

uint64_t sub_100037974@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D780, (uint64_t)qword_100369328, (uint64_t)sub_1000376F4, a1);
}

uint64_t sub_100037990@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D780, (uint64_t)qword_100369328, (uint64_t)sub_1000376F4, a1);
}

uint64_t sub_1000379AC()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369340);
  sub_10000E704(v0, (uint64_t)qword_100369340);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32F0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "SV_HEALTH_INDICATION_PROTOBUF_DEFAULT";
  *(void *)(v9 + 8) = 37LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "SV_HEALTH_INDICATION_UNSET";
  *(void *)(v13 + 8) = 26LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "SV_HEALTH_INDICATION_UNKNOWN";
  *((void *)v15 + 1) = 28LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 3LL;
  *(void *)uint64_t v17 = "SV_HEALTH_INDICATION_HEALTHY";
  *((void *)v17 + 1) = 28LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 4LL;
  *(void *)uint64_t v18 = "SV_HEALTH_INDICATION_UNHEALTHY";
  *(void *)(v18 + 8) = 30LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100037BB0()
{
  return sub_100008C30(&qword_10036D788, (uint64_t)qword_100369340, (uint64_t)sub_1000379AC);
}

uint64_t sub_100037BCC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D788, (uint64_t)qword_100369340, (uint64_t)sub_1000379AC, a1);
}

uint64_t sub_100037BE8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D788, (uint64_t)qword_100369340, (uint64_t)sub_1000379AC, a1);
}

uint64_t sub_100037C04()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369358);
  sub_10000E704(v0, (uint64_t)qword_100369358);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 0LL;
  *(void *)uint64_t v9 = "IONO_CORR_SOURCE_UNKNOWN";
  *(void *)(v9 + 8) = 24LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "IONO_CORR_SOURCE_KLOBUCHAR_MODEL";
  *((void *)v13 + 1) = 32LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 2LL;
  *(void *)uint64_t v14 = "IONO_CORR_SOURCE_GLOBAL_PREDICTIONS";
  *(void *)(v14 + 8) = 35LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100037D94()
{
  return sub_100008C30(&qword_10036D790, (uint64_t)qword_100369358, (uint64_t)sub_100037C04);
}

uint64_t sub_100037DB0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D790, (uint64_t)qword_100369358, (uint64_t)sub_100037C04, a1);
}

uint64_t sub_100037DCC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D790, (uint64_t)qword_100369358, (uint64_t)sub_100037C04, a1);
}

uint64_t sub_100037DE8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369370);
  sub_10000E704(v0, (uint64_t)qword_100369370);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32F0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "LEAP_SECOND_CHANGE_KNOWLEDGE_PROTOBUF_DEFAULT";
  *(void *)(v9 + 8) = 45LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "LEAP_SECOND_CHANGE_KNOWLEDGE_PROTOBUF_UNSET";
  *(void *)(v13 + 8) = 43LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "LEAP_SECOND_CHANGE_KNOWLEDGE_PROTOBUF_UNKNOWN";
  *((void *)v15 + 1) = 45LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 3LL;
  *(void *)uint64_t v17 = "LEAP_SECOND_CHANGE_KNOWLEDGE_PROTOBUF_NOT_CHANGING";
  *((void *)v17 + 1) = 50LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 4LL;
  *(void *)uint64_t v18 = "LEAP_SECOND_CHANGE_KNOWLEDGE_PROTOBUF_CHANGING";
  *(void *)(v18 + 8) = 46LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100037FE8()
{
  return sub_100008C30(&qword_10036D798, (uint64_t)qword_100369370, (uint64_t)sub_100037DE8);
}

uint64_t sub_100038004@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D798, (uint64_t)qword_100369370, (uint64_t)sub_100037DE8, a1);
}

uint64_t sub_100038020@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D798, (uint64_t)qword_100369370, (uint64_t)sub_100037DE8, a1);
}

uint64_t sub_10003803C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369388);
  sub_10000E704(v0, (uint64_t)qword_100369388);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 6 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32E0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "GLONASS_LEAP_SECOND_PROTOBUF_DEFAULT";
  *(void *)(v9 + 8) = 36LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "GLONASS_LEAP_SECOND_UNSET";
  *(void *)(v13 + 8) = 25LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "GLONASS_LEAP_SECOND_NONE";
  *((void *)v15 + 1) = 24LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 3LL;
  *(void *)uint64_t v17 = "GLONASS_LEAP_SECOND_POSITIVE";
  *((void *)v17 + 1) = 28LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 4LL;
  *(void *)uint64_t v19 = "GLONASS_LEAP_SECOND_NEGATIVE";
  *((void *)v19 + 1) = 28LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  *uint64_t v20 = 5LL;
  *(void *)uint64_t v21 = "GLONASS_LEAP_SECOND_NOT_YET_DEFINED";
  *((void *)v21 + 1) = 35LL;
  v21[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100038270()
{
  return sub_100008C30(&qword_10036D7A0, (uint64_t)qword_100369388, (uint64_t)sub_10003803C);
}

uint64_t sub_10003828C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D7A0, (uint64_t)qword_100369388, (uint64_t)sub_10003803C, a1);
}

uint64_t sub_1000382A8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D7A0, (uint64_t)qword_100369388, (uint64_t)sub_10003803C, a1);
}

uint64_t sub_1000382C4()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003693A0);
  sub_10000E704(v0, (uint64_t)qword_1003693A0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "SV_REFERENCE_POINT_UNKNOWN";
  *(void *)(v9 + 8) = 26LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "SV_REFERENCE_POINT_CENTER_OF_MASS";
  *(void *)(v13 + 8) = 33LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "SV_REFERENCE_POINT_L1_ANTENNA";
  *((void *)v15 + 1) = 29LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 3LL;
  *(void *)uint64_t v17 = "SV_REFERENCE_POINT_L5_ANTENNA";
  *((void *)v17 + 1) = 29LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100038484()
{
  return sub_100008C30(&qword_10036D7A8, (uint64_t)qword_1003693A0, (uint64_t)sub_1000382C4);
}

uint64_t sub_1000384A0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D7A8, (uint64_t)qword_1003693A0, (uint64_t)sub_1000382C4, a1);
}

uint64_t sub_1000384BC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D7A8, (uint64_t)qword_1003693A0, (uint64_t)sub_1000382C4, a1);
}

void *sub_1000384D8()
{
  return &unk_10033DDB0;
}

unint64_t sub_1000384E4()
{
  return 0xD000000000000028LL;
}

uint64_t sub_100038500(uint64_t a1)
{
  return sub_100038904(a1, qword_1003693B8, (uint64_t)"slot_num", (uint64_t)"slot_source", 11LL);
}

uint64_t sub_100038520()
{
  return sub_100008C30(&qword_10036D7B0, (uint64_t)qword_1003693B8, (uint64_t)sub_100038500);
}

uint64_t sub_10003853C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D7B0, (uint64_t)qword_1003693B8, (uint64_t)sub_100038500, a1);
}

uint64_t sub_100038558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      if (result == 2)
      {
        uint64_t v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL) + 24);
        unint64_t v10 = sub_10007FC68();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v9,  &type metadata for CLP_LogEntry_PrivateData_GlonassSlotSource,  v10,  a2,  a3);
      }

      else if (result == 1)
      {
        uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + *(int *)(v11 + 20), a2, a3);
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_100038650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
  uint64_t v10 = result;
  uint64_t v11 = (unsigned int *)(v5 + *(int *)(result + 20));
  if ((v11[1] & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v11, 1LL, a2, a3);
  }
  if (!v4)
  {
    if (*(_BYTE *)(v5 + *(int *)(v10 + 24)) != 5)
    {
      char v13 = *(_BYTE *)(v5 + *(int *)(v10 + 24));
      unint64_t v12 = sub_10007FC68();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v13,  2LL,  &type metadata for CLP_LogEntry_PrivateData_GlonassSlotSource,  v12,  a2,  a3);
    }

    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_100038738()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo,  &qword_100351928,  (uint64_t)&unk_1002B54AC);
}

uint64_t sub_100038754@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = *(int *)(a1 + 24);
  uint64_t v6 = a2 + *(int *)(a1 + 20);
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  *(_BYTE *)(a2 + v5) = 5;
  return result;
}

uint64_t sub_100038794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100038558(a1, a2, a3);
}

uint64_t sub_1000387A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100038650(a1, a2, a3);
}

uint64_t sub_1000387BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354F18,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo,  (uint64_t)&unk_1002B5424);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10003880C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D7B0, (uint64_t)qword_1003693B8, (uint64_t)sub_100038500, a1);
}

uint64_t sub_100038828(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351CA0,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo,  (uint64_t)&unk_1002B53AC);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100038868(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351CA0,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo,  (uint64_t)&unk_1002B53AC);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000388BC()
{
  return &unk_10033DDC0;
}

unint64_t sub_1000388C8()
{
  return 0xD000000000000022LL;
}

uint64_t sub_1000388E4(uint64_t a1)
{
  return sub_100038904(a1, qword_1003693D0, (uint64_t)"freq_num", (uint64_t)"slot_info", 9LL);
}

uint64_t sub_100038904(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v7, a2);
  sub_10000E704(v7, (uint64_t)a2);
  uint64_t v8 = sub_100003A0C(&qword_1003516F8);
  uint64_t v9 = sub_100003A0C(&qword_100351700);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 32) & ~v12;
  uint64_t v14 = swift_allocObject(v8, v13 + 2 * v11, v12 | 7);
  *(_OWORD *)(v14 + 16) = xmmword_1002B3340;
  uint64_t v15 = (void *)(v14 + v13);
  uint64_t v16 = v14 + v13 + *(int *)(v9 + 48);
  *uint64_t v15 = 1LL;
  *(void *)uint64_t v16 = a3;
  *(void *)(v16 + 8) = 8LL;
  *(_BYTE *)(v16 + 16) = 2;
  uint64_t v17 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v18 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v19 = *(void (**)(void))(*(void *)(v18 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v19)(v16, v17, v18);
  uint64_t v20 = (char *)v15 + v11 + *(int *)(v9 + 48);
  *(void *)((char *)v15 + v11) = 2LL;
  *(void *)uint64_t v20 = a4;
  *((void *)v20 + 1) = a5;
  v20[16] = 2;
  v19();
  return _NameMap.init(dictionaryLiteral:)(v14);
}

uint64_t sub_100038A54()
{
  return sub_100008C30(&qword_10036D7B8, (uint64_t)qword_1003693D0, (uint64_t)sub_1000388E4);
}

uint64_t sub_100038A70@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D7B8, (uint64_t)qword_1003693D0, (uint64_t)sub_1000388E4, a1);
}

uint64_t sub_100038A8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      if (result == 2)
      {
        uint64_t v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL) + 24);
        uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
        uint64_t v11 = sub_10000FD98( &qword_100351CA0,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo,  (uint64_t)&unk_1002B53AC);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v11, a2, a3);
      }

      else if (result == 1)
      {
        uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v3 + *(int *)(v12 + 20), a2, a3);
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_100038BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100039C28( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassId,  (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))&dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:),  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100038BDC);
}

uint64_t sub_100038BDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003517D8);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_1003517D8);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  uint64_t v15 = sub_10000FD98( &qword_100351CA0,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo,  (uint64_t)&unk_1002B53AC);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

Swift::Int sub_100038D54()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_GlonassId,  &qword_100351930,  (uint64_t)&unk_1002B5614);
}

uint64_t sub_100038D70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100039E8C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, a2);
}

uint64_t sub_100038D7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100038A8C(a1, a2, a3);
}

uint64_t sub_100038D90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354F10,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassId,  (uint64_t)&unk_1002B558C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100038DE0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D7B8, (uint64_t)qword_1003693D0, (uint64_t)sub_1000388E4, a1);
}

uint64_t sub_100038DFC(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351CB8,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassId,  (uint64_t)&unk_1002B5514);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100038E3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351CB8,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassId,  (uint64_t)&unk_1002B5514);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100038E90()
{
  return &unk_10033DDD0;
}

unint64_t sub_100038E9C()
{
  return 0xD000000000000028LL;
}

uint64_t sub_100038EB8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003693E8);
  sub_10000E704(v0, (uint64_t)qword_1003693E8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 - v4 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3330;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "gps_prn";
  *(void *)(v9 + 8) = 7LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "glonass_id";
  *(void *)(v13 + 8) = 10LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "beidou_ranging_code";
  *((void *)v15 + 1) = 19LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 4LL;
  *(void *)uint64_t v17 = "galileo_spreading_code";
  *((void *)v17 + 1) = 22LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 5LL;
  *(void *)uint64_t v19 = "qzss_prn";
  *((void *)v19 + 1) = 8LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  *uint64_t v20 = 6LL;
  *(void *)uint64_t v21 = "sbas_prn";
  *((void *)v21 + 1) = 8LL;
  v21[16] = 2;
  v12();
  uint64_t v22 = (void *)(v8 + 6 * v4);
  uint64_t v23 = (char *)v22 + *(int *)(v2 + 48);
  *uint64_t v22 = 7LL;
  *(void *)uint64_t v23 = "navic_prn";
  *((void *)v23 + 1) = 9LL;
  v23[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100039124()
{
  return sub_100008C30(&qword_10036D7C0, (uint64_t)qword_1003693E8, (uint64_t)sub_100038EB8);
}

uint64_t sub_100039140@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D7C0, (uint64_t)qword_1003693E8, (uint64_t)sub_100038EB8, a1);
}

uint64_t sub_10003915C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL) + 20);
          goto LABEL_12;
        case 2LL:
          uint64_t v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL) + 24);
          uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
          uint64_t v12 = sub_10000FD98( &qword_100351CB8,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassId,  (uint64_t)&unk_1002B5514);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v10, v11, v12, a2, a3);
          break;
        case 3LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL) + 28);
          goto LABEL_12;
        case 4LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL) + 32);
          goto LABEL_12;
        case 5LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL) + 36);
          goto LABEL_12;
        case 6LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL) + 40);
          goto LABEL_12;
        case 7LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL) + 44);
LABEL_12:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + v9, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000392DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
  uint64_t v10 = result;
  uint64_t v11 = (unsigned int *)(v5 + *(int *)(result + 20));
  if ((v11[1] & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v11, 1LL, a2, a3);
  }
  if (!v4)
  {
    sub_100039458(v5, a1, a2, a3);
    uint64_t v12 = (unsigned int *)(v5 + *(int *)(v10 + 28));
    if ((v12[1] & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v12, 3LL, a2, a3);
    }
    uint64_t v13 = (unsigned int *)(v5 + *(int *)(v10 + 32));
    if ((v13[1] & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v13, 4LL, a2, a3);
    }
    sub_1000395CC(v5, a1, a2, a3);
    sub_100039640(v5, a1, a2, a3);
    sub_1000396B4(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_100039458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003517E0);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_1003517E0);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
  uint64_t v15 = sub_10000FD98( &qword_100351CB8,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassId,  (uint64_t)&unk_1002B5514);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t sub_1000395CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
  char v8 = (unsigned int *)(a1 + *(int *)(result + 36));
  if ((v8[1] & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v8, 5LL, a3, a4);
  }
  return result;
}

uint64_t sub_100039640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
  char v8 = (unsigned int *)(a1 + *(int *)(result + 40));
  if ((v8[1] & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v8, 6LL, a3, a4);
  }
  return result;
}

uint64_t sub_1000396B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
  char v8 = (unsigned int *)(a1 + *(int *)(result + 44));
  if ((v8[1] & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v8, 7LL, a3, a4);
  }
  return result;
}

Swift::Int sub_10003972C()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId,  &qword_100351938,  (uint64_t)&unk_1002B577C);
}

uint64_t sub_100039748@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[6];
  uint64_t v5 = a2 + a1[5];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v6,  1LL,  1LL,  v7);
  uint64_t v9 = a1[8];
  uint64_t v10 = a2 + a1[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  uint64_t v11 = a2 + v9;
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  uint64_t v12 = a1[10];
  uint64_t v13 = a2 + a1[9];
  *(_DWORD *)uint64_t v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  uint64_t v14 = a2 + v12;
  *(_DWORD *)uint64_t v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  uint64_t v15 = a2 + a1[11];
  *(_DWORD *)uint64_t v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  return result;
}

uint64_t sub_1000397F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003915C(a1, a2, a3);
}

uint64_t sub_10003980C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000392DC(a1, a2, a3);
}

uint64_t sub_100039820(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354F08,  type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId,  (uint64_t)&unk_1002B56F4);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100039870@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D7C0, (uint64_t)qword_1003693E8, (uint64_t)sub_100038EB8, a1);
}

uint64_t sub_10003988C(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351CD0,  type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId,  (uint64_t)&unk_1002B567C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000398CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351CD0,  type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId,  (uint64_t)&unk_1002B567C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100039920()
{
  return &unk_10033DDE0;
}

unint64_t sub_10003992C()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_100039948()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369400);
  sub_10000E704(v0, (uint64_t)qword_100369400);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3340;
  char v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *char v8 = 1LL;
  *(void *)uint64_t v9 = "system";
  *(void *)(v9 + 8) = 6LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "constel_id";
  *((void *)v13 + 1) = 10LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100039AA0()
{
  return sub_100008C30(&qword_10036D7C8, (uint64_t)qword_100369400, (uint64_t)sub_100039948);
}

uint64_t sub_100039ABC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D7C8, (uint64_t)qword_100369400, (uint64_t)sub_100039948, a1);
}

uint64_t sub_100039AD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      if (result == 2)
      {
        uint64_t v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL) + 24);
        uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
        uint64_t v11 = sub_10000FD98( &qword_100351CD0,  type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId,  (uint64_t)&unk_1002B567C);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v11, a2, a3);
      }

      else if (result == 1)
      {
        uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL);
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + *(int *)(v12 + 20), a2, a3);
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_100039BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100039C28( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_SvId,  (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))&dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:),  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100039CEC);
}

uint64_t sub_100039C28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void, uint64_t, uint64_t, uint64_t), void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = v6;
  uint64_t result = a4(0LL);
  uint64_t v15 = (unsigned int *)(v10 + *(int *)(result + 20));
  if ((v15[1] & 1) == 0) {
    uint64_t result = a5(*v15, 1LL, a2, a3);
  }
  if (!v7)
  {
    a6(v10, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_100039CEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003517E8);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_1003517E8);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  uint64_t v15 = sub_10000FD98( &qword_100351CD0,  type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId,  (uint64_t)&unk_1002B567C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

Swift::Int sub_100039E64()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_SvId,  &qword_100351940,  (uint64_t)&unk_1002B58E4);
}

uint64_t sub_100039E80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100039E8C(a1, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, a2);
}

uint64_t sub_100039E8C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(int *)(a1 + 24);
  uint64_t v7 = a3 + *(int *)(a1 + 20);
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  uint64_t v8 = a3 + v6;
  uint64_t v9 = a2(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
}

uint64_t sub_100039EF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100039AD8(a1, a2, a3);
}

uint64_t sub_100039F08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354F00,  type metadata accessor for CLP_LogEntry_PrivateData_SvId,  (uint64_t)&unk_1002B585C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100039F58@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D7C8, (uint64_t)qword_100369400, (uint64_t)sub_100039948, a1);
}

uint64_t sub_100039F74(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351CE8,  type metadata accessor for CLP_LogEntry_PrivateData_SvId,  (uint64_t)&unk_1002B57E4);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100039FB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351CE8,  type metadata accessor for CLP_LogEntry_PrivateData_SvId,  (uint64_t)&unk_1002B57E4);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10003A004()
{
  return &unk_10033DDF0;
}

unint64_t sub_10003A010()
{
  return 0xD000000000000027LL;
}

uint64_t sub_10003A02C(uint64_t a1)
{
  return sub_10003B418(a1, qword_100369418);
}

uint64_t sub_10003A038()
{
  return sub_100008C30(&qword_10036D7D0, (uint64_t)qword_100369418, (uint64_t)sub_10003A02C);
}

uint64_t sub_10003A054@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D7D0, (uint64_t)qword_100369418, (uint64_t)sub_10003A02C, a1);
}

uint64_t sub_10003A070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003A7FC(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_10003A08C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003A910(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_10003A0A8(uint64_t a1, uint64_t a2)
{
  return sub_100065554(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState) & 1;
}

Swift::Int sub_10003A0C8()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState,  &qword_100351948,  (uint64_t)&unk_1002B5A4C);
}

uint64_t sub_10003A0E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354EF8,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState,  (uint64_t)&unk_1002B59C4);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10003A138@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D7D0, (uint64_t)qword_100369418, (uint64_t)sub_10003A02C, a1);
}

uint64_t sub_10003A154(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351D00,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState,  (uint64_t)&unk_1002B594C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10003A194(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351D00,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState,  (uint64_t)&unk_1002B594C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10003A1E8()
{
  return &unk_10033DE00;
}

unint64_t sub_10003A1F4()
{
  return 0xD000000000000028LL;
}

uint64_t sub_10003A210()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369430);
  sub_10000E704(v0, (uint64_t)qword_100369430);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32F0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "cm_code_lock";
  *(void *)(v9 + 8) = 12LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "cl_code_lock";
  *(void *)(v13 + 8) = 12LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "c_nav_bit";
  *((void *)v15 + 1) = 9LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 4LL;
  *(void *)uint64_t v17 = "c_nav_frame";
  *((void *)v17 + 1) = 11LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 5LL;
  *(void *)uint64_t v18 = "tow_decoded";
  *(void *)(v18 + 8) = 11LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10003A414()
{
  return sub_100008C30(&qword_10036D7D8, (uint64_t)qword_100369430, (uint64_t)sub_10003A210);
}

uint64_t sub_10003A430@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D7D8, (uint64_t)qword_100369430, (uint64_t)sub_10003A210, a1);
}

uint64_t sub_10003A44C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003AE08(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_10003A468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003AF2C(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_10003A484(uint64_t a1, uint64_t a2)
{
  return sub_100062C2C(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState) & 1;
}

Swift::Int sub_10003A4A4()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState,  &qword_100351950,  (uint64_t)&unk_1002B5BB4);
}

uint64_t sub_10003A4C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354EF0,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState,  (uint64_t)&unk_1002B5B2C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10003A514@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D7D8, (uint64_t)qword_100369430, (uint64_t)sub_10003A210, a1);
}

uint64_t sub_10003A530(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351D18,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState,  (uint64_t)&unk_1002B5AB4);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10003A570(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351D18,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState,  (uint64_t)&unk_1002B5AB4);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10003A5C0()
{
  return &unk_10033DE10;
}

unint64_t sub_10003A5CC()
{
  return 0xD000000000000027LL;
}

uint64_t sub_10003A5E8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369448);
  sub_10000E704(v0, (uint64_t)qword_100369448);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "code_lock";
  *(void *)(v9 + 8) = 9LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "c_nav_bit";
  *(void *)(v13 + 8) = 9LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "c_nav_frame";
  *((void *)v15 + 1) = 11LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 4LL;
  *(void *)uint64_t v17 = "tow_decoded";
  *((void *)v17 + 1) = 11LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10003A7A8()
{
  return sub_100008C30(&qword_10036D7E0, (uint64_t)qword_100369448, (uint64_t)sub_10003A5E8);
}

uint64_t sub_10003A7C4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D7E0, (uint64_t)qword_100369448, (uint64_t)sub_10003A5E8, a1);
}

uint64_t sub_10003A7E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003A7FC(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t sub_10003A7FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v5)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v11 = *(int *)(a4(0LL) + 20);
          goto LABEL_5;
        case 2LL:
          uint64_t v11 = *(int *)(a4(0LL) + 24);
          goto LABEL_5;
        case 3LL:
          uint64_t v11 = *(int *)(a4(0LL) + 28);
          goto LABEL_5;
        case 4LL:
          uint64_t v11 = *(int *)(a4(0LL) + 32);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v4 + v11, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_10003A8F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003A910(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t sub_10003A910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = v4;
  uint64_t result = a4(0LL);
  uint64_t v11 = (int *)result;
  int v12 = *(unsigned __int8 *)(v6 + *(int *)(result + 20));
  if (v12 != 2) {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v12 & 1, 1LL, a2, a3);
  }
  if (!v5)
  {
    int v13 = *(unsigned __int8 *)(v6 + v11[6]);
    if (v13 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v13 & 1, 2LL, a2, a3);
    }
    int v14 = *(unsigned __int8 *)(v6 + v11[7]);
    if (v14 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v14 & 1, 3LL, a2, a3);
    }
    int v15 = *(unsigned __int8 *)(v6 + v11[8]);
    if (v15 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v15 & 1, 4LL, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_10003AA3C(uint64_t a1, uint64_t a2)
{
  return sub_100065554(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState) & 1;
}

Swift::Int sub_10003AA5C()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState,  &qword_100351958,  (uint64_t)&unk_1002B5D1C);
}

uint64_t sub_10003AA78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354EE8,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState,  (uint64_t)&unk_1002B5C94);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10003AAC8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D7E0, (uint64_t)qword_100369448, (uint64_t)sub_10003A5E8, a1);
}

uint64_t sub_10003AAE4(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351D30,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState,  (uint64_t)&unk_1002B5C1C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10003AB24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351D30,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState,  (uint64_t)&unk_1002B5C1C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10003AB74()
{
  return &unk_10033DE20;
}

unint64_t sub_10003AB80()
{
  return 0xD00000000000002CLL;
}

uint64_t sub_10003AB9C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369460);
  sub_10000E704(v0, (uint64_t)qword_100369460);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32F0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "code_lock";
  *(void *)(v9 + 8) = 9LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  int v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "symbol";
  *(void *)(v13 + 8) = 6LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  int v14 = (void *)(v8 + 2 * v4);
  int v15 = (char *)v14 + *(int *)(v2 + 48);
  *int v14 = 3LL;
  *(void *)int v15 = "nav_bit";
  *((void *)v15 + 1) = 7LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 4LL;
  *(void *)uint64_t v17 = "string";
  *((void *)v17 + 1) = 6LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 5LL;
  *(void *)uint64_t v18 = "tod_decoded";
  *(void *)(v18 + 8) = 11LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10003ADB4()
{
  return sub_100008C30(&qword_10036D7E8, (uint64_t)qword_100369460, (uint64_t)sub_10003AB9C);
}

uint64_t sub_10003ADD0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D7E8, (uint64_t)qword_100369460, (uint64_t)sub_10003AB9C, a1);
}

uint64_t sub_10003ADEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003AE08(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_10003AE08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v5)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v11 = *(int *)(a4(0LL) + 20);
          goto LABEL_5;
        case 2LL:
          uint64_t v11 = *(int *)(a4(0LL) + 24);
          goto LABEL_5;
        case 3LL:
          uint64_t v11 = *(int *)(a4(0LL) + 28);
          goto LABEL_5;
        case 4LL:
          uint64_t v11 = *(int *)(a4(0LL) + 32);
          goto LABEL_5;
        case 5LL:
          uint64_t v11 = *(int *)(a4(0LL) + 36);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v4 + v11, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_10003AF10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003AF2C(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_10003AF2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = v4;
  uint64_t result = a4(0LL);
  uint64_t v11 = (int *)result;
  int v12 = *(unsigned __int8 *)(v6 + *(int *)(result + 20));
  if (v12 != 2) {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v12 & 1, 1LL, a2, a3);
  }
  if (!v5)
  {
    int v13 = *(unsigned __int8 *)(v6 + v11[6]);
    if (v13 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v13 & 1, 2LL, a2, a3);
    }
    int v14 = *(unsigned __int8 *)(v6 + v11[7]);
    if (v14 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v14 & 1, 3LL, a2, a3);
    }
    int v15 = *(unsigned __int8 *)(v6 + v11[8]);
    if (v15 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v15 & 1, 4LL, a2, a3);
    }
    int v16 = *(unsigned __int8 *)(v6 + v11[9]);
    if (v16 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v16 & 1, 5LL, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_10003B088(uint64_t a1, uint64_t a2)
{
  return sub_100062C2C(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState) & 1;
}

Swift::Int sub_10003B0A8()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState,  &qword_100351960,  (uint64_t)&unk_1002B5E84);
}

uint64_t sub_10003B0C4@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 2;
  *(_BYTE *)(a2 + v5) = 2;
  uint64_t v6 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 2;
  *(_BYTE *)(a2 + v6) = 2;
  *(_BYTE *)(a2 + a1[9]) = 2;
  return result;
}

uint64_t sub_10003B10C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354EE0,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState,  (uint64_t)&unk_1002B5DFC);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10003B15C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D7E8, (uint64_t)qword_100369460, (uint64_t)sub_10003AB9C, a1);
}

uint64_t sub_10003B178(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351D48,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState,  (uint64_t)&unk_1002B5D84);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10003B1B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351D48,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState,  (uint64_t)&unk_1002B5D84);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10003B208()
{
  return &unk_10033DE30;
}

unint64_t sub_10003B214()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_10003B230(uint64_t a1)
{
  return sub_10003B418(a1, qword_100369478);
}

uint64_t sub_10003B23C()
{
  return sub_100008C30(&qword_10036D7F0, (uint64_t)qword_100369478, (uint64_t)sub_10003B230);
}

uint64_t sub_10003B258@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D7F0, (uint64_t)qword_100369478, (uint64_t)sub_10003B230, a1);
}

uint64_t sub_10003B274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003A7FC(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t sub_10003B290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003A910(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t sub_10003B2AC(uint64_t a1, uint64_t a2)
{
  return sub_100065554(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState) & 1;
}

Swift::Int sub_10003B2CC()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState,  &qword_100351968,  (uint64_t)&unk_1002B5FEC);
}

uint64_t sub_10003B2E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354ED8,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState,  (uint64_t)&unk_1002B5F64);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10003B338@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D7F0, (uint64_t)qword_100369478, (uint64_t)sub_10003B230, a1);
}

uint64_t sub_10003B354(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351D60,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState,  (uint64_t)&unk_1002B5EEC);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10003B394(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351D60,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState,  (uint64_t)&unk_1002B5EEC);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10003B3E4()
{
  return &unk_10033DE40;
}

unint64_t sub_10003B3F0()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_10003B40C(uint64_t a1)
{
  return sub_10003B418(a1, qword_100369490);
}

uint64_t sub_10003B418(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v3, a2);
  sub_10000E704(v3, (uint64_t)a2);
  uint64_t v4 = sub_100003A0C(&qword_1003516F8);
  uint64_t v5 = sub_100003A0C(&qword_100351700);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 72);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 + 32) & ~v8;
  uint64_t v10 = swift_allocObject(v4, v9 + 4 * v7, v8 | 7);
  *(_OWORD *)(v10 + 16) = xmmword_1002B42C0;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = v10 + v9 + *(int *)(v5 + 48);
  *(void *)(v10 + v9) = 1LL;
  *(void *)uint64_t v12 = "code_lock";
  *(void *)(v12 + 8) = 9LL;
  *(_BYTE *)(v12 + 16) = 2;
  uint64_t v13 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v14 = type metadata accessor for _NameMap.NameDescription(0LL);
  int v15 = *(void (**)(void))(*(void *)(v14 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v15)(v12, v13, v14);
  uint64_t v16 = v11 + v7 + *(int *)(v5 + 48);
  *(void *)(v11 + v7) = 2LL;
  *(void *)uint64_t v16 = "nav_bit";
  *(void *)(v16 + 8) = 7LL;
  *(_BYTE *)(v16 + 16) = 2;
  v15();
  uint64_t v17 = (void *)(v11 + 2 * v7);
  uint64_t v18 = (char *)v17 + *(int *)(v5 + 48);
  *uint64_t v17 = 3LL;
  *(void *)uint64_t v18 = "subframe";
  *((void *)v18 + 1) = 8LL;
  v18[16] = 2;
  v15();
  uint64_t v19 = (void *)(v11 + 3 * v7);
  uint64_t v20 = (char *)v19 + *(int *)(v5 + 48);
  *uint64_t v19 = 4LL;
  *(void *)uint64_t v20 = "tow_decoded";
  *((void *)v20 + 1) = 11LL;
  v20[16] = 2;
  v15();
  return _NameMap.init(dictionaryLiteral:)(v10);
}

uint64_t sub_10003B5DC()
{
  return sub_100008C30(&qword_10036D7F8, (uint64_t)qword_100369490, (uint64_t)sub_10003B40C);
}

uint64_t sub_10003B5F8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D7F8, (uint64_t)qword_100369490, (uint64_t)sub_10003B40C, a1);
}

uint64_t sub_10003B614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003A7FC(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t sub_10003B630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003A910(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t sub_10003B64C(uint64_t a1, uint64_t a2)
{
  return sub_100065554(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState) & 1;
}

Swift::Int sub_10003B66C()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState,  &qword_100351970,  (uint64_t)&unk_1002B6154);
}

uint64_t sub_10003B688(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354ED0,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState,  (uint64_t)&unk_1002B60CC);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10003B6D8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D7F8, (uint64_t)qword_100369490, (uint64_t)sub_10003B40C, a1);
}

uint64_t sub_10003B6F4(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351D78,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState,  (uint64_t)&unk_1002B6054);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10003B734(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351D78,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState,  (uint64_t)&unk_1002B6054);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10003B784()
{
  return &unk_10033DE50;
}

unint64_t sub_10003B790()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_10003B7AC()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003694A8);
  sub_10000E704(v0, (uint64_t)qword_1003694A8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "e1bc_code_lock";
  *(void *)(v9 + 8) = 14LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "e1c_code_lock";
  *(void *)(v13 + 8) = 13LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  int v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)int v15 = "e1b_page";
  *((void *)v15 + 1) = 8LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 4LL;
  *(void *)uint64_t v17 = "tow_decoded";
  *((void *)v17 + 1) = 11LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10003B96C()
{
  return sub_100008C30(&qword_10036D800, (uint64_t)qword_1003694A8, (uint64_t)sub_10003B7AC);
}

uint64_t sub_10003B988@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D800, (uint64_t)qword_1003694A8, (uint64_t)sub_10003B7AC, a1);
}

uint64_t sub_10003B9A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003A7FC(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t sub_10003B9C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003A910(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t sub_10003B9DC(uint64_t a1, uint64_t a2)
{
  return sub_100065554(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState) & 1;
}

Swift::Int sub_10003B9FC()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState,  &qword_100351978,  (uint64_t)&unk_1002B62BC);
}

uint64_t sub_10003BA18@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 2;
  *(_BYTE *)(a2 + v5) = 2;
  uint64_t v6 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 2;
  *(_BYTE *)(a2 + v6) = 2;
  return result;
}

uint64_t sub_10003BA58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354EC8,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState,  (uint64_t)&unk_1002B6234);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10003BAA8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D800, (uint64_t)qword_1003694A8, (uint64_t)sub_10003B7AC, a1);
}

uint64_t sub_10003BAC4(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351D90,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState,  (uint64_t)&unk_1002B61BC);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10003BB04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351D90,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState,  (uint64_t)&unk_1002B61BC);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10003BB54()
{
  return &unk_10033DE60;
}

unint64_t sub_10003BB60()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_10003BB7C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003694C0);
  sub_10000E704(v0, (uint64_t)qword_1003694C0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 10 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3300;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "e5b_prim_code_lock";
  *(void *)(v9 + 8) = 18LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "e5a_prim_code_lock";
  *(void *)(v13 + 8) = 18LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  int v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)int v15 = "e5_alt_boc_prim_code_lock";
  *((void *)v15 + 1) = 25LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 4LL;
  *(void *)uint64_t v17 = "e5b_data_bit";
  *((void *)v17 + 1) = 12LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 5LL;
  *(void *)uint64_t v19 = "e5a_data_bit";
  *((void *)v19 + 1) = 12LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  *uint64_t v20 = 6LL;
  *(void *)uint64_t v21 = "e5b_sec_code_lock";
  *((void *)v21 + 1) = 17LL;
  v21[16] = 2;
  v12();
  uint64_t v22 = (void *)(v8 + 6 * v4);
  uint64_t v23 = (char *)v22 + *(int *)(v2 + 48);
  *uint64_t v22 = 7LL;
  *(void *)uint64_t v23 = "e5a_sec_code_lock";
  *((void *)v23 + 1) = 17LL;
  v23[16] = 2;
  v12();
  uint64_t v24 = (void *)(v8 + 7 * v4);
  uint64_t v25 = (char *)v24 + *(int *)(v2 + 48);
  *uint64_t v24 = 8LL;
  *(void *)uint64_t v25 = "e5b_page_sync";
  *((void *)v25 + 1) = 13LL;
  v25[16] = 2;
  v12();
  uint64_t v26 = v8 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 8 * v4) = 9LL;
  *(void *)uint64_t v26 = "e5a_page_sync";
  *(void *)(v26 + 8) = 13LL;
  *(_BYTE *)(v26 + 16) = 2;
  v12();
  uint64_t v27 = (void *)(v8 + 9 * v4);
  uint64_t v28 = (char *)v27 + *(int *)(v2 + 48);
  void *v27 = 10LL;
  *(void *)uint64_t v28 = "tow_decoded";
  *((void *)v28 + 1) = 11LL;
  v28[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10003BE84()
{
  return sub_100008C30(&qword_10036D808, (uint64_t)qword_1003694C0, (uint64_t)sub_10003BB7C);
}

uint64_t sub_10003BEA0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D808, (uint64_t)qword_1003694C0, (uint64_t)sub_10003BB7C, a1);
}

uint64_t sub_10003BEBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 20);
          goto LABEL_15;
        case 2LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 24);
          goto LABEL_15;
        case 3LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 28);
          goto LABEL_15;
        case 4LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 32);
          goto LABEL_15;
        case 5LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 36);
          goto LABEL_15;
        case 6LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 40);
          goto LABEL_15;
        case 7LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 44);
          goto LABEL_15;
        case 8LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 48);
          goto LABEL_15;
        case 9LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 52);
          goto LABEL_15;
        case 10LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL) + 56);
LABEL_15:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + v9, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_10003C008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
  uint64_t v10 = (int *)result;
  int v11 = *(unsigned __int8 *)(v5 + *(int *)(result + 20));
  if (v11 != 2) {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v11 & 1, 1LL, a2, a3);
  }
  if (!v4)
  {
    int v12 = *(unsigned __int8 *)(v5 + v10[6]);
    if (v12 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v12 & 1, 2LL, a2, a3);
    }
    int v13 = *(unsigned __int8 *)(v5 + v10[7]);
    if (v13 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v13 & 1, 3LL, a2, a3);
    }
    int v14 = *(unsigned __int8 *)(v5 + v10[8]);
    if (v14 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v14 & 1, 4LL, a2, a3);
    }
    sub_10003C1F4(v5, a1, a2, a3);
    sub_10003C268(v5, a1, a2, a3);
    sub_10003C2DC(v5, a1, a2, a3);
    sub_10003C350(v5, a1, a2, a3);
    sub_10003C3C4(v5, a1, a2, a3);
    sub_10003C438(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_10003C1F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
  int v8 = *(unsigned __int8 *)(a1 + *(int *)(result + 36));
  if (v8 != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v8 & 1, 5LL, a3, a4);
  }
  return result;
}

uint64_t sub_10003C268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
  int v8 = *(unsigned __int8 *)(a1 + *(int *)(result + 40));
  if (v8 != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v8 & 1, 6LL, a3, a4);
  }
  return result;
}

uint64_t sub_10003C2DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
  int v8 = *(unsigned __int8 *)(a1 + *(int *)(result + 44));
  if (v8 != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v8 & 1, 7LL, a3, a4);
  }
  return result;
}

uint64_t sub_10003C350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
  int v8 = *(unsigned __int8 *)(a1 + *(int *)(result + 48));
  if (v8 != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v8 & 1, 8LL, a3, a4);
  }
  return result;
}

uint64_t sub_10003C3C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
  int v8 = *(unsigned __int8 *)(a1 + *(int *)(result + 52));
  if (v8 != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v8 & 1, 9LL, a3, a4);
  }
  return result;
}

uint64_t sub_10003C438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
  int v8 = *(unsigned __int8 *)(a1 + *(int *)(result + 56));
  if (v8 != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v8 & 1, 10LL, a3, a4);
  }
  return result;
}

Swift::Int sub_10003C4B0()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState,  &qword_100351980,  (uint64_t)&unk_1002B6424);
}

uint64_t sub_10003C4CC@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 2;
  *(_BYTE *)(a2 + v5) = 2;
  uint64_t v6 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 2;
  *(_BYTE *)(a2 + v6) = 2;
  uint64_t v7 = a1[10];
  *(_BYTE *)(a2 + a1[9]) = 2;
  *(_BYTE *)(a2 + v7) = 2;
  uint64_t v8 = a1[12];
  *(_BYTE *)(a2 + a1[11]) = 2;
  *(_BYTE *)(a2 + v8) = 2;
  uint64_t v9 = a1[14];
  *(_BYTE *)(a2 + a1[13]) = 2;
  *(_BYTE *)(a2 + v9) = 2;
  return result;
}

uint64_t sub_10003C530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003BEBC(a1, a2, a3);
}

uint64_t sub_10003C544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003C008(a1, a2, a3);
}

uint64_t sub_10003C558(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354EC0,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState,  (uint64_t)&unk_1002B639C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10003C5A8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D808, (uint64_t)qword_1003694C0, (uint64_t)sub_10003BB7C, a1);
}

uint64_t sub_10003C5C4(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351DA8,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState,  (uint64_t)&unk_1002B6324);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10003C604(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351DA8,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState,  (uint64_t)&unk_1002B6324);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10003C654()
{
  return &unk_10033DE70;
}

unint64_t sub_10003C660()
{
  return 0xD000000000000028LL;
}

uint64_t sub_10003C67C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003694D8);
  sub_10000E704(v0, (uint64_t)qword_1003694D8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "code_lock";
  *(void *)(v9 + 8) = 9LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  int v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  int v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)int v13 = "symbol";
  *((void *)v13 + 1) = 6LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "message";
  *(void *)(v14 + 8) = 7LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10003C81C()
{
  return sub_100008C30(&qword_10036D810, (uint64_t)qword_1003694D8, (uint64_t)sub_10003C67C);
}

uint64_t sub_10003C838@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D810, (uint64_t)qword_1003694D8, (uint64_t)sub_10003C67C, a1);
}

uint64_t sub_10003C854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v11 & 1) != 0) {
      break;
    }
    switch(result)
    {
      case 3LL:
        uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0LL) + 28);
LABEL_3:
        dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + v9, a2, a3);
        break;
      case 2LL:
        uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0LL) + 24);
        goto LABEL_3;
      case 1LL:
        uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0LL) + 20);
        goto LABEL_3;
    }

    uint64_t v4 = 0LL;
    uint64_t v7 = a2;
  }

  return result;
}

uint64_t sub_10003C918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0LL);
  uint64_t v10 = result;
  int v11 = *(unsigned __int8 *)(v5 + *(int *)(result + 20));
  if (v11 != 2) {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v11 & 1, 1LL, a2, a3);
  }
  if (!v4)
  {
    int v12 = *(unsigned __int8 *)(v5 + *(int *)(v10 + 24));
    if (v12 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v12 & 1, 2LL, a2, a3);
    }
    int v13 = *(unsigned __int8 *)(v5 + *(int *)(v10 + 28));
    if (v13 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v13 & 1, 3LL, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_10003CA14()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState,  &qword_100351988,  (uint64_t)&unk_1002B658C);
}

uint64_t sub_10003CA30@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 2;
  *(_BYTE *)(a2 + v5) = 2;
  *(_BYTE *)(a2 + a1[7]) = 2;
  return result;
}

uint64_t sub_10003CA6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003C854(a1, a2, a3);
}

uint64_t sub_10003CA80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003C918(a1, a2, a3);
}

uint64_t sub_10003CA94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354EB8,  type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState,  (uint64_t)&unk_1002B6504);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10003CAE4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D810, (uint64_t)qword_1003694D8, (uint64_t)sub_10003C67C, a1);
}

uint64_t sub_10003CB00(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351DC0,  type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState,  (uint64_t)&unk_1002B648C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10003CB40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351DC0,  type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState,  (uint64_t)&unk_1002B648C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10003CB90()
{
  return &unk_10033DE80;
}

unint64_t sub_10003CB9C()
{
  return 0xD000000000000022LL;
}

uint64_t sub_10003CBB8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003694F0);
  sub_10000E704(v0, (uint64_t)qword_1003694F0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v31 = swift_allocObject(v1, v6 + 11 * v4, v5 | 7);
  *(_OWORD *)(v31 + 16) = xmmword_1002B42D0;
  uint64_t v7 = v31 + v6;
  uint64_t v8 = v31 + v6 + *(int *)(v2 + 48);
  *(void *)(v31 + v6) = 1LL;
  *(void *)uint64_t v8 = "band";
  *(void *)(v8 + 8) = 4LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  int v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "gps_l1";
  *(void *)(v12 + 8) = 6LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  int v13 = (void *)(v7 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *int v13 = 3LL;
  *(void *)uint64_t v14 = "gps_l2c";
  *((void *)v14 + 1) = 7LL;
  v14[16] = 2;
  v11();
  int v15 = (void *)(v7 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *int v15 = 4LL;
  *(void *)uint64_t v16 = "gps_l5";
  *((void *)v16 + 1) = 6LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v7 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "glonass_l1f";
  *((void *)v18 + 1) = 11LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v7 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 6LL;
  *(void *)uint64_t v20 = "beidou_b1";
  *((void *)v20 + 1) = 9LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v7 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  *uint64_t v21 = 7LL;
  *(void *)uint64_t v22 = "beidou_b2";
  *((void *)v22 + 1) = 9LL;
  v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v7 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  *uint64_t v23 = 8LL;
  *(void *)uint64_t v24 = "galileo_e1";
  *((void *)v24 + 1) = 10LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 9LL;
  *(void *)uint64_t v25 = "galileo_e5";
  *(void *)(v25 + 8) = 10LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  uint64_t v26 = (void *)(v7 + 9 * v4);
  uint64_t v27 = (char *)v26 + *(int *)(v2 + 48);
  void *v26 = 10LL;
  *(void *)uint64_t v27 = "sbas_l1";
  *((void *)v27 + 1) = 7LL;
  v27[16] = 2;
  v11();
  uint64_t v28 = (void *)(v7 + 10 * v4);
  uint64_t v29 = (char *)v28 + *(int *)(v2 + 48);
  *uint64_t v28 = 11LL;
  *(void *)uint64_t v29 = "navic_l5";
  *((void *)v29 + 1) = 8LL;
  v29[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v31);
}

uint64_t sub_10003CEF4()
{
  return sub_100008C30(&qword_10036D818, (uint64_t)qword_1003694F0, (uint64_t)sub_10003CBB8);
}

uint64_t sub_10003CF10@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D818, (uint64_t)qword_1003694F0, (uint64_t)sub_10003CBB8, a1);
}

uint64_t sub_10003CF2C()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0LL);
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  *(_BYTE *)(v1 + 16) = 13;
  uint64_t v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0LL);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL);
  v4(v2, 1LL, 1LL, v3);
  uint64_t v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
  uint64_t v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 1LL, 1LL, v8);
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
  uint64_t v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
  uint64_t v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v15, 1LL, 1LL, v16);
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  uint64_t v18 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v17, 1LL, 1LL, v18);
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v19, 1LL, 1LL, v20);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v4)( v1 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5,  1LL,  1LL,  v3);
  qword_10036D828 = v1;
  return result;
}

uint64_t sub_10003D144(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100351830);
  __chkstk_darwin(v4);
  uint64_t v84 = (uint64_t)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100003A0C(&qword_100351828);
  __chkstk_darwin(v6);
  uint64_t v83 = (uint64_t)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100003A0C(&qword_100351820);
  __chkstk_darwin(v8);
  uint64_t v82 = (uint64_t)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100003A0C(&qword_100351818);
  __chkstk_darwin(v10);
  uint64_t v81 = (uint64_t)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100003A0C(&qword_100351810);
  __chkstk_darwin(v12);
  uint64_t v80 = (uint64_t)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100003A0C(&qword_100351808);
  __chkstk_darwin(v14);
  uint64_t v78 = (uint64_t)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100003A0C(&qword_100351800);
  __chkstk_darwin(v16);
  uint64_t v75 = (uint64_t)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100003A0C(&qword_1003517F8);
  __chkstk_darwin(v18);
  uint64_t v71 = (uint64_t)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_100003A0C(&qword_1003517F0);
  __chkstk_darwin(v20);
  uint64_t v69 = (uint64_t)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(_BYTE *)(v1 + 16) = 13;
  uint64_t v22 = (_BYTE *)(v1 + 16);
  uint64_t v23 = v2
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0LL);
  uint64_t v25 = *(void (**)(void))(*(void *)(v24 - 8) + 56LL);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v25)(v23, 1LL, 1LL, v24);
  uint64_t v26 = v2
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  uint64_t v27 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))(v26, 1LL, 1LL, v27);
  uint64_t v28 = v2
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  uint64_t v29 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56LL))(v28, 1LL, 1LL, v29);
  uint64_t v30 = v2
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  uint64_t v70 = v2
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  uint64_t v31 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))(v30, 1LL, 1LL, v31);
  uint64_t v32 = v2
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  uint64_t v72 = v2
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  uint64_t v33 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56LL))(v32, 1LL, 1LL, v33);
  uint64_t v34 = v2
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  uint64_t v73 = v2
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  uint64_t v35 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56LL))(v34, 1LL, 1LL, v35);
  uint64_t v36 = v2
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  uint64_t v74 = v2
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  uint64_t v37 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56LL))(v36, 1LL, 1LL, v37);
  uint64_t v38 = v2
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  uint64_t v76 = v2
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  uint64_t v39 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56LL))(v38, 1LL, 1LL, v39);
  uint64_t v40 = v2
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  uint64_t v77 = v2
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  uint64_t v41 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56LL))(v40, 1LL, 1LL, v41);
  uint64_t v79 = v2
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
  v25();
  swift_beginAccess(a1 + 16, v97, 0LL, 0LL);
  LOBYTE(v24) = *(_BYTE *)(a1 + 16);
  swift_beginAccess(v22, v96, 1LL, 0LL);
  *uint64_t v22 = v24;
  uint64_t v42 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1,  v95,  0LL,  0LL);
  uint64_t v43 = v69;
  sub_10000E6C0(v42, v69, &qword_1003517F0);
  swift_beginAccess(v23, v94, 33LL, 0LL);
  sub_10000E5D4(v43, v23, &qword_1003517F0);
  swift_endAccess(v94);
  uint64_t v44 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C,  v94,  0LL,  0LL);
  uint64_t v45 = v71;
  sub_10000E6C0(v44, v71, &qword_1003517F8);
  swift_beginAccess(v26, v93, 33LL, 0LL);
  sub_10000E5D4(v45, v26, &qword_1003517F8);
  swift_endAccess(v93);
  uint64_t v46 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5,  v93,  0LL,  0LL);
  uint64_t v47 = v75;
  sub_10000E6C0(v46, v75, &qword_100351800);
  swift_beginAccess(v28, v92, 33LL, 0LL);
  sub_10000E5D4(v47, v28, &qword_100351800);
  swift_endAccess(v92);
  uint64_t v48 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F,  v92,  0LL,  0LL);
  uint64_t v49 = v78;
  sub_10000E6C0(v48, v78, &qword_100351808);
  uint64_t v50 = v70;
  swift_beginAccess(v70, v91, 33LL, 0LL);
  sub_10000E5D4(v49, v50, &qword_100351808);
  swift_endAccess(v91);
  uint64_t v51 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1,  v91,  0LL,  0LL);
  uint64_t v52 = v80;
  sub_10000E6C0(v51, v80, &qword_100351810);
  uint64_t v53 = v72;
  swift_beginAccess(v72, v90, 33LL, 0LL);
  sub_10000E5D4(v52, v53, &qword_100351810);
  swift_endAccess(v90);
  uint64_t v54 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2,  v90,  0LL,  0LL);
  uint64_t v55 = v81;
  sub_10000E6C0(v54, v81, &qword_100351818);
  uint64_t v56 = v73;
  swift_beginAccess(v73, v89, 33LL, 0LL);
  sub_10000E5D4(v55, v56, &qword_100351818);
  swift_endAccess(v89);
  uint64_t v57 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1,  v89,  0LL,  0LL);
  uint64_t v58 = v82;
  sub_10000E6C0(v57, v82, &qword_100351820);
  uint64_t v59 = v74;
  swift_beginAccess(v74, v88, 33LL, 0LL);
  sub_10000E5D4(v58, v59, &qword_100351820);
  swift_endAccess(v88);
  uint64_t v60 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5,  v88,  0LL,  0LL);
  uint64_t v61 = v83;
  sub_10000E6C0(v60, v83, &qword_100351828);
  uint64_t v62 = v76;
  swift_beginAccess(v76, v87, 33LL, 0LL);
  sub_10000E5D4(v61, v62, &qword_100351828);
  swift_endAccess(v87);
  uint64_t v63 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1,  v87,  0LL,  0LL);
  uint64_t v64 = v84;
  sub_10000E6C0(v63, v84, &qword_100351830);
  uint64_t v65 = v77;
  swift_beginAccess(v77, v86, 33LL, 0LL);
  sub_10000E5D4(v64, v65, &qword_100351830);
  swift_endAccess(v86);
  uint64_t v66 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5,  v86,  0LL,  0LL);
  sub_10000E6C0(v66, v43, &qword_1003517F0);
  swift_release(a1);
  uint64_t v67 = v79;
  swift_beginAccess(v79, v85, 33LL, 0LL);
  sub_10000E5D4(v43, v67, &qword_1003517F0);
  swift_endAccess(v85);
  return v2;
}

uint64_t sub_10003D9F8()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_10003DB10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v9)) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v3 + v9);
    uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0LL);
    uint64_t v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v13 = swift_retain(v10);
    sub_10003D144(v13);
    uint64_t v14 = *(void *)(v6 + v9);
    *(void *)(v6 + v9) = v12;
    swift_release(v14);
  }

  uint64_t v15 = *(void *)(v6 + v9);
  swift_retain(v15);
  uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1LL:
          swift_beginAccess(v15 + 16, v28, 33LL, 0LL);
          unint64_t v19 = sub_10007FBE0();
          uint64_t v20 = v5;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v15 + 16,  &type metadata for CLP_LogEntry_PrivateData_Band,  v19,  a2,  a3);
          goto LABEL_20;
        case 2LL:
          uint64_t v21 = OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
          goto LABEL_18;
        case 3LL:
          uint64_t v22 = v15
              + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C,  v28,  33LL,  0LL);
          uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0LL);
          uint64_t v24 = &qword_100351D18;
          uint64_t v25 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState;
          uint64_t v26 = &unk_1002B5AB4;
          goto LABEL_19;
        case 4LL:
          uint64_t v22 = v15
              + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5,  v28,  33LL,  0LL);
          uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0LL);
          uint64_t v24 = &qword_100351D30;
          uint64_t v25 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState;
          uint64_t v26 = &unk_1002B5C1C;
          goto LABEL_19;
        case 5LL:
          uint64_t v22 = v15
              + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F,  v28,  33LL,  0LL);
          uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0LL);
          uint64_t v24 = &qword_100351D48;
          uint64_t v25 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState;
          uint64_t v26 = &unk_1002B5D84;
          goto LABEL_19;
        case 6LL:
          uint64_t v22 = v15
              + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1,  v28,  33LL,  0LL);
          uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0LL);
          uint64_t v24 = &qword_100351D60;
          uint64_t v25 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState;
          uint64_t v26 = &unk_1002B5EEC;
          goto LABEL_19;
        case 7LL:
          uint64_t v22 = v15
              + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2,  v28,  33LL,  0LL);
          uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0LL);
          uint64_t v24 = &qword_100351D78;
          uint64_t v25 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState;
          uint64_t v26 = &unk_1002B6054;
          goto LABEL_19;
        case 8LL:
          uint64_t v22 = v15
              + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1,  v28,  33LL,  0LL);
          uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0LL);
          uint64_t v24 = &qword_100351D90;
          uint64_t v25 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState;
          uint64_t v26 = &unk_1002B61BC;
          goto LABEL_19;
        case 9LL:
          uint64_t v22 = v15
              + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5,  v28,  33LL,  0LL);
          uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
          uint64_t v24 = &qword_100351DA8;
          uint64_t v25 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState;
          uint64_t v26 = &unk_1002B6324;
          goto LABEL_19;
        case 10LL:
          uint64_t v22 = v15
              + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1,  v28,  33LL,  0LL);
          uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0LL);
          uint64_t v24 = &qword_100351DC0;
          uint64_t v25 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState;
          uint64_t v26 = &unk_1002B648C;
          goto LABEL_19;
        case 11LL:
          uint64_t v21 = OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
LABEL_18:
          uint64_t v22 = v15 + v21;
          swift_beginAccess(v15 + v21, v28, 33LL, 0LL);
          uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0LL);
          uint64_t v24 = &qword_100351D00;
          uint64_t v25 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState;
          uint64_t v26 = &unk_1002B594C;
LABEL_19:
          uint64_t v27 = sub_10000FD98(v24, v25, (uint64_t)v26);
          uint64_t v20 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v22, v23, v27, a2, a3);
LABEL_20:
          uint64_t v5 = v20;
          swift_endAccess(v28);
          break;
        default:
          break;
      }

      uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return swift_release(v15);
}

uint64_t sub_10003DF38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL) + 20));
  swift_retain(v9);
  swift_beginAccess(v9 + 16, v13, 0LL, 0LL);
  if (*(_BYTE *)(v9 + 16) != 13)
  {
    char v12 = *(_BYTE *)(v9 + 16);
    unint64_t v10 = sub_10007FBE0();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v12,  1LL,  &type metadata for CLP_LogEntry_PrivateData_Band,  v10,  a2,  a3);
  }

  if (v4) {
    return swift_release(v9);
  }
  sub_10003E15C(v9, a1, a2, a3);
  sub_10003E2E8(v9, a1, a2, a3);
  sub_10003E474(v9, a1, a2, a3);
  sub_10003E600(v9, a1, a2, a3);
  sub_10003E78C(v9, a1, a2, a3);
  sub_10003E918(v9, a1, a2, a3);
  sub_10003EAA4(v9, a1, a2, a3);
  sub_10003EC30(v9, a1, a2, a3);
  sub_10003EDBC(v9, a1, a2, a3);
  sub_10003EF48(v9, a1, a2, a3);
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10003E15C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003517F0);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_1003517F0);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  uint64_t v15 = sub_10000FD98( &qword_100351D00,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState,  (uint64_t)&unk_1002B594C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_10003E2E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003517F8);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_1003517F8);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
  uint64_t v15 = sub_10000FD98( &qword_100351D18,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState,  (uint64_t)&unk_1002B5AB4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_10003E474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100351800);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100351800);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
  uint64_t v15 = sub_10000FD98( &qword_100351D30,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState,  (uint64_t)&unk_1002B5C1C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t sub_10003E600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100351808);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100351808);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
  uint64_t v15 = sub_10000FD98( &qword_100351D48,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState,  (uint64_t)&unk_1002B5D84);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 5LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_10003E78C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100351810);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100351810);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
  uint64_t v15 = sub_10000FD98( &qword_100351D60,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState,  (uint64_t)&unk_1002B5EEC);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 6LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t sub_10003E918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100351818);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100351818);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
  uint64_t v15 = sub_10000FD98( &qword_100351D78,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState,  (uint64_t)&unk_1002B6054);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 7LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t sub_10003EAA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100351820);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100351820);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
  uint64_t v15 = sub_10000FD98( &qword_100351D90,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState,  (uint64_t)&unk_1002B61BC);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 8LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t sub_10003EC30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100351828);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100351828);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
  uint64_t v15 = sub_10000FD98( &qword_100351DA8,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState,  (uint64_t)&unk_1002B6324);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 9LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t sub_10003EDBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100351830);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100351830);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
  uint64_t v15 = sub_10000FD98( &qword_100351DC0,  type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState,  (uint64_t)&unk_1002B648C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 10LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t sub_10003EF48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003517F0);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_1003517F0);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  uint64_t v15 = sub_10000FD98( &qword_100351D00,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState,  (uint64_t)&unk_1002B594C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 11LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_10003F0D4(uint64_t a1, uint64_t a2)
{
  return sub_100065AC0( a1,  a2,  type metadata accessor for CLP_LogEntry_PrivateData_SyncState,  (uint64_t (*)(uint64_t, uint64_t))sub_10003F0FC) & 1;
}

BOOL sub_10003F0FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0LL);
  uint64_t v221 = *(void *)(v4 - 8);
  uint64_t v222 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v210 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v220 = sub_100003A0C(&qword_100355070);
  __chkstk_darwin(v220);
  uint64_t v8 = (char *)&v210 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100003A0C(&qword_100351830);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v216 = (uint64_t)&v210 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v224 = (uint64_t)&v210 - v12;
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
  uint64_t v226 = *(void *)(v13 - 8);
  uint64_t v227 = v13;
  __chkstk_darwin(v13);
  uint64_t v217 = (uint64_t)&v210 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v225 = sub_100003A0C(&qword_100355078);
  __chkstk_darwin(v225);
  uint64_t v228 = (uint64_t)&v210 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100003A0C(&qword_100351828);
  uint64_t v17 = __chkstk_darwin(v16);
  v238 = (char *)&v210 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v230 = (uint64_t)&v210 - v19;
  uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0LL);
  uint64_t v233 = *(void *)(v20 - 8);
  uint64_t v234 = v20;
  __chkstk_darwin(v20);
  uint64_t v223 = (uint64_t)&v210 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v232 = sub_100003A0C(&qword_100355080);
  __chkstk_darwin(v232);
  uint64_t v235 = (uint64_t)&v210 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = sub_100003A0C(&qword_100351820);
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v229 = (uint64_t)&v210 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24);
  uint64_t v250 = (uint64_t)&v210 - v26;
  uint64_t v27 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0LL);
  uint64_t v240 = *(void *)(v27 - 8);
  uint64_t v241 = v27;
  __chkstk_darwin(v27);
  uint64_t v231 = (uint64_t)&v210 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v239 = sub_100003A0C(&qword_100355088);
  __chkstk_darwin(v239);
  uint64_t v242 = (uint64_t)&v210 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = sub_100003A0C(&qword_100351818);
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v236 = (uint64_t)&v210 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v31);
  uint64_t v244 = (uint64_t)&v210 - v33;
  uint64_t v34 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0LL);
  uint64_t v247 = *(void *)(v34 - 8);
  uint64_t v248 = v34;
  __chkstk_darwin(v34);
  uint64_t v237 = (uint64_t)&v210 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v246 = sub_100003A0C(&qword_100355090);
  __chkstk_darwin(v246);
  uint64_t v249 = (uint64_t)&v210 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = sub_100003A0C(&qword_100351810);
  uint64_t v38 = __chkstk_darwin(v37);
  uint64_t v243 = (uint64_t)&v210 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v38);
  uint64_t v252 = (uint64_t)&v210 - v40;
  uint64_t v41 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0LL);
  uint64_t v255 = *(void *)(v41 - 8);
  uint64_t v256 = v41;
  __chkstk_darwin(v41);
  uint64_t v245 = (uint64_t)&v210 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v254 = sub_100003A0C(&qword_100355098);
  __chkstk_darwin(v254);
  uint64_t v257 = (uint64_t)&v210 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = sub_100003A0C(&qword_100351808);
  uint64_t v45 = __chkstk_darwin(v44);
  uint64_t v251 = (uint64_t)&v210 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v45);
  uint64_t v271 = (uint64_t)&v210 - v47;
  uint64_t v48 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0LL);
  uint64_t v261 = *(void *)(v48 - 8);
  uint64_t v262 = v48;
  __chkstk_darwin(v48);
  uint64_t v253 = (uint64_t)&v210 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v260 = sub_100003A0C(&qword_1003550A0);
  __chkstk_darwin(v260);
  uint64_t v263 = (uint64_t)&v210 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v51 = sub_100003A0C(&qword_100351800);
  uint64_t v52 = __chkstk_darwin(v51);
  uint64_t v258 = (uint64_t)&v210 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v52);
  uint64_t v272 = (uint64_t)&v210 - v54;
  uint64_t v269 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0LL);
  uint64_t v267 = *(void *)(v269 - 8);
  __chkstk_darwin(v269);
  uint64_t v259 = (uint64_t)&v210 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v266 = sub_100003A0C(&qword_1003550A8);
  __chkstk_darwin(v266);
  uint64_t v270 = (uint64_t)&v210 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v57 = sub_100003A0C(&qword_1003517F8);
  uint64_t v58 = __chkstk_darwin(v57);
  uint64_t v264 = (uint64_t)&v210 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v58);
  uint64_t v268 = (uint64_t)&v210 - v60;
  uint64_t v274 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0LL);
  uint64_t v61 = *(void *)(v274 - 8);
  __chkstk_darwin(v274);
  uint64_t v265 = (uint64_t)&v210 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v273 = sub_100003A0C(&qword_1003550B0);
  uint64_t v63 = __chkstk_darwin(v273);
  uint64_t v219 = (uint64_t)&v210 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v63);
  uint64_t v66 = (char *)&v210 - v65;
  uint64_t v67 = sub_100003A0C(&qword_1003517F0);
  uint64_t v68 = __chkstk_darwin(v67);
  uint64_t v215 = (uint64_t)&v210 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v70 = __chkstk_darwin(v68);
  uint64_t v218 = (uint64_t)&v210 - v71;
  uint64_t v72 = __chkstk_darwin(v70);
  uint64_t v74 = (char *)&v210 - v73;
  __chkstk_darwin(v72);
  uint64_t v76 = (char *)&v210 - v75;
  swift_beginAccess(a1 + 16, v296, 0LL, 0LL);
  int v77 = *(unsigned __int8 *)(a1 + 16);
  swift_beginAccess(a2 + 16, v295, 0LL, 0LL);
  int v78 = *(unsigned __int8 *)(a2 + 16);
  if (v77 == 13)
  {
    if (v78 != 13) {
      return 0LL;
    }
LABEL_6:
    v213 = v6;
    v214 = v8;
    uint64_t v80 = a2;
    uint64_t v81 = a1;
    uint64_t v82 = a1
        + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
    swift_beginAccess(v82, v294, 0LL, 0LL);
    sub_10000E6C0(v82, (uint64_t)v76, &qword_1003517F0);
    uint64_t v83 = a2
        + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
    swift_beginAccess(v83, v293, 0LL, 0LL);
    uint64_t v84 = (uint64_t)&v66[*(int *)(v273 + 48)];
    sub_10000E6C0((uint64_t)v76, (uint64_t)v66, &qword_1003517F0);
    sub_10000E6C0(v83, v84, &qword_1003517F0);
    unint64_t v85 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48);
    uint64_t v86 = v274;
    if (v85((uint64_t)v66, 1LL, v274) == 1)
    {
      swift_retain(v81);
      swift_retain(v80);
      sub_100015764((uint64_t)v76, &qword_1003517F0);
      if (v85(v84, 1LL, v86) == 1)
      {
        v211 = v85;
        sub_100015764((uint64_t)v66, &qword_1003517F0);
        uint64_t v87 = v80;
        goto LABEL_13;
      }
    }

    else
    {
      sub_10000E6C0((uint64_t)v66, (uint64_t)v74, &qword_1003517F0);
      if (v85(v84, 1LL, v86) != 1)
      {
        v211 = v85;
        uint64_t v89 = v265;
        sub_100003E68(v84, v265, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
        swift_retain(v81);
        uint64_t v87 = v80;
        swift_retain(v80);
        char v90 = sub_100065554((uint64_t)v74, v89, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
        sub_100004090(v89, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
        sub_100015764((uint64_t)v76, &qword_1003517F0);
        sub_100004090((uint64_t)v74, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
        sub_100015764((uint64_t)v66, &qword_1003517F0);
        if ((v90 & 1) != 0)
        {
LABEL_13:
          uint64_t v212 = v81;
          uint64_t v91 = v81
              + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
          swift_beginAccess( v81 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C,  v292,  0LL,  0LL);
          uint64_t v92 = v268;
          sub_10000E6C0(v91, v268, &qword_1003517F8);
          uint64_t v93 = v87
              + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
          swift_beginAccess( v87 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C,  v291,  0LL,  0LL);
          uint64_t v94 = v270;
          uint64_t v95 = v270 + *(int *)(v266 + 48);
          sub_10000E6C0(v92, v270, &qword_1003517F8);
          uint64_t v96 = v94;
          sub_10000E6C0(v93, v95, &qword_1003517F8);
          uint64_t v97 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v267 + 48);
          uint64_t v98 = v94;
          uint64_t v99 = v269;
          uint64_t v100 = v87;
          if (v97(v98, 1LL, v269) == 1)
          {
            sub_100015764(v92, &qword_1003517F8);
            int v101 = v97(v95, 1LL, v99);
            uint64_t v102 = v212;
            uint64_t v103 = v271;
            uint64_t v104 = v272;
            if (v101 == 1)
            {
              sub_100015764(v96, &qword_1003517F8);
LABEL_22:
              uint64_t v113 = v102;
              uint64_t v114 = v102
                   + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
              swift_beginAccess(v114, v290, 0LL, 0LL);
              sub_10000E6C0(v114, v104, &qword_100351800);
              uint64_t v115 = v100;
              uint64_t v116 = v100
                   + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
              swift_beginAccess(v116, &v289, 0LL, 0LL);
              uint64_t v117 = v263;
              uint64_t v118 = v263 + *(int *)(v260 + 48);
              sub_10000E6C0(v104, v263, &qword_100351800);
              sub_10000E6C0(v116, v118, &qword_100351800);
              uint64_t v119 = v262;
              uint64_t v120 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v261 + 48);
              if (v120(v117, 1LL, v262) == 1)
              {
                sub_100015764(v104, &qword_100351800);
                int v121 = v120(v118, 1LL, v119);
                uint64_t v100 = v115;
                if (v121 == 1)
                {
                  sub_100015764(v117, &qword_100351800);
                  uint64_t v122 = v113;
LABEL_29:
                  uint64_t v126 = v122
                       + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
                  swift_beginAccess( v122 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F,  &v288,  0LL,  0LL);
                  sub_10000E6C0(v126, v103, &qword_100351808);
                  uint64_t v127 = v100
                       + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
                  swift_beginAccess( v100 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F,  &v287,  0LL,  0LL);
                  uint64_t v128 = v257;
                  uint64_t v129 = v257 + *(int *)(v254 + 48);
                  sub_10000E6C0(v103, v257, &qword_100351808);
                  sub_10000E6C0(v127, v129, &qword_100351808);
                  uint64_t v130 = v256;
                  uint64_t v131 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v255 + 48);
                  if (v131(v128, 1LL, v256) == 1)
                  {
                    sub_100015764(v103, &qword_100351808);
                    if (v131(v129, 1LL, v130) == 1)
                    {
                      sub_100015764(v128, &qword_100351808);
                      goto LABEL_36;
                    }

LABEL_44:
                  uint64_t v108 = v122;
                  goto LABEL_45;
                }
              }

              else
              {
                uint64_t v123 = v258;
                sub_10000E6C0(v117, v258, &qword_100351800);
                if (v120(v118, 1LL, v119) != 1)
                {
                  uint64_t v124 = v253;
                  sub_100003E68(v118, v253, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
                  char v125 = sub_100065554(v123, v124, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
                  sub_100004090(v124, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
                  sub_100015764(v272, &qword_100351800);
                  sub_100004090(v123, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
                  sub_100015764(v117, &qword_100351800);
                  uint64_t v100 = v115;
                  uint64_t v122 = v113;
                  if ((v125 & 1) == 0) {
                    goto LABEL_44;
                  }
                  goto LABEL_29;
                }

                sub_100015764(v272, &qword_100351800);
                sub_100004090(v123, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
                uint64_t v100 = v115;
              }

              sub_100015764(v117, &qword_1003550A0);
              uint64_t v108 = v113;
LABEL_45:
              swift_release(v108);
              uint64_t v88 = v100;
              goto LABEL_46;
            }
          }

          else
          {
            uint64_t v105 = v264;
            sub_10000E6C0(v96, v264, &qword_1003517F8);
            int v106 = v97(v95, 1LL, v99);
            uint64_t v107 = v271;
            uint64_t v104 = v272;
            if (v106 != 1)
            {
              uint64_t v109 = v95;
              uint64_t v110 = v92;
              uint64_t v111 = v105;
              uint64_t v112 = v259;
              sub_100003E68(v109, v259, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
              LODWORD(v269) = sub_100062C2C( v111,  v112,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
              sub_100004090(v112, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
              sub_100015764(v110, &qword_1003517F8);
              sub_100004090(v111, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
              sub_100015764(v96, &qword_1003517F8);
              uint64_t v102 = v212;
              uint64_t v103 = v107;
              if ((v269 & 1) != 0) {
                goto LABEL_22;
              }
LABEL_19:
              uint64_t v108 = v102;
              goto LABEL_45;
            }

            sub_100015764(v92, &qword_1003517F8);
            sub_100004090(v105, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
            uint64_t v102 = v212;
          }

          sub_100015764(v96, &qword_1003550A8);
          goto LABEL_19;
        }

        swift_release(v81);
        uint64_t v88 = v80;
LABEL_46:
        swift_release(v88);
        return 0LL;
      }

      swift_retain(v81);
      swift_retain(v80);
      sub_100015764((uint64_t)v76, &qword_1003517F0);
      sub_100004090((uint64_t)v74, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
    }

    sub_100015764((uint64_t)v66, &qword_1003550B0);
    swift_release(v81);
    uint64_t v88 = v80;
    goto LABEL_46;
  }

  BOOL result = 0LL;
  if (v78 != 13 && v77 == v78) {
    goto LABEL_6;
  }
  return result;
}

      __break(1u);
      goto LABEL_45;
    }
  }

Swift::Int sub_100040BA4()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_SyncState,  &qword_100351990,  (uint64_t)&unk_1002B66F4);
}

uint64_t sub_100040BC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD7C(a1, &qword_10036D820, &qword_10036D828, (uint64_t)sub_10003CF2C, a2);
}

uint64_t sub_100040BDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003DB10(a1, a2, a3);
}

uint64_t sub_100040BF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003DF38(a1, a2, a3);
}

uint64_t sub_100040C04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354EB0,  type metadata accessor for CLP_LogEntry_PrivateData_SyncState,  (uint64_t)&unk_1002B666C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100040C54@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D818, (uint64_t)qword_1003694F0, (uint64_t)sub_10003CBB8, a1);
}

uint64_t sub_100040C70(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351DD8,  type metadata accessor for CLP_LogEntry_PrivateData_SyncState,  (uint64_t)&unk_1002B65F4);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100040CB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351DD8,  type metadata accessor for CLP_LogEntry_PrivateData_SyncState,  (uint64_t)&unk_1002B65F4);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100040D00()
{
  return &unk_10033DE90;
}

unint64_t sub_100040D0C()
{
  return 0xD00000000000001FLL;
}

uint64_t sub_100040D28()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369508);
  sub_10000E704(v0, (uint64_t)qword_100369508);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "time_nanoseconds";
  *(void *)(v9 + 8) = 16LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "time_unc_nanoseconds";
  *((void *)v13 + 1) = 20LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "uncertainty_adjusted_by_external_tool";
  *(void *)(v14 + 8) = 37LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100040EBC()
{
  return sub_100008C30(&qword_10036D830, (uint64_t)qword_100369508, (uint64_t)sub_100040D28);
}

uint64_t sub_100040ED8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D830, (uint64_t)qword_100369508, (uint64_t)sub_100040D28, a1);
}

uint64_t sub_100040EF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004127C(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_100040F10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100041380(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_100040F2C(uint64_t a1, uint64_t a2)
{
  return sub_100065904(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_SvTime) & 1;
}

Swift::Int sub_100040F4C()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_SvTime,  &qword_100351998,  (uint64_t)&unk_1002B685C);
}

uint64_t sub_100040F68@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100042F64(a1, 2, a2);
}

uint64_t sub_100040F70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354EA8,  type metadata accessor for CLP_LogEntry_PrivateData_SvTime,  (uint64_t)&unk_1002B67D4);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100040FC0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D830, (uint64_t)qword_100369508, (uint64_t)sub_100040D28, a1);
}

uint64_t sub_100040FDC(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351DF0,  type metadata accessor for CLP_LogEntry_PrivateData_SvTime,  (uint64_t)&unk_1002B675C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004101C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351DF0,  type metadata accessor for CLP_LogEntry_PrivateData_SvTime,  (uint64_t)&unk_1002B675C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10004106C()
{
  return &unk_10033DEA0;
}

unint64_t sub_100041078()
{
  return 0xD000000000000028LL;
}

uint64_t sub_100041094()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369520);
  sub_10000E704(v0, (uint64_t)qword_100369520);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "frequency_offset_ppb";
  *(void *)(v9 + 8) = 20LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "frequency_offset_unc_ppb";
  *((void *)v13 + 1) = 24LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "uncertainty_adjusted_by_external_tool";
  *(void *)(v14 + 8) = 37LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100041228()
{
  return sub_100008C30(&qword_10036D838, (uint64_t)qword_100369520, (uint64_t)sub_100041094);
}

uint64_t sub_100041244@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D838, (uint64_t)qword_100369520, (uint64_t)sub_100041094, a1);
}

uint64_t sub_100041260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004127C(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_10004127C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v9 = a2;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v9, i);
    if (v5 || (v13 & 1) != 0) {
      break;
    }
    switch(result)
    {
      case 3LL:
        uint64_t v14 = a4(0LL);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)(v4 + *(int *)(v14 + 28), a2, a3);
        break;
      case 2LL:
        uint64_t v11 = *(int *)(a4(0LL) + 24);
LABEL_3:
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v4 + v11, a2, a3);
        break;
      case 1LL:
        uint64_t v11 = *(int *)(a4(0LL) + 20);
        goto LABEL_3;
    }

    uint64_t v5 = 0LL;
    uint64_t v9 = a2;
  }

  return result;
}

uint64_t sub_100041364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100041380(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_100041380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = v4;
  uint64_t result = a4(0LL);
  uint64_t v11 = result;
  uint64_t v12 = v6 + *(int *)(result + 20);
  if ((*(_BYTE *)(v12 + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1LL, a2, a3, *(double *)v12);
  }
  if (!v5)
  {
    uint64_t v13 = v6 + *(int *)(v11 + 24);
    if ((*(_BYTE *)(v13 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2LL, a2, a3, *(double *)v13);
    }
    int v14 = *(unsigned __int8 *)(v6 + *(int *)(v11 + 28));
    if (v14 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v14 & 1, 3LL, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_100041478(uint64_t a1, uint64_t a2)
{
  return sub_100065904(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset) & 1;
}

Swift::Int sub_100041498()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset,  &qword_1003519A0,  (uint64_t)&unk_1002B69C4);
}

uint64_t sub_1000414B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354EA0,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset,  (uint64_t)&unk_1002B693C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100041504@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D838, (uint64_t)qword_100369520, (uint64_t)sub_100041094, a1);
}

uint64_t sub_100041520(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351E08,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset,  (uint64_t)&unk_1002B68C4);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100041560(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351E08,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset,  (uint64_t)&unk_1002B68C4);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000415B4()
{
  return &unk_10033DEB0;
}

unint64_t sub_1000415C0()
{
  return 0xD000000000000039LL;
}

uint64_t sub_1000415DC()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369538);
  sub_10000E704(v0, (uint64_t)qword_100369538);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "frequency_offset_ppb";
  *(void *)(v9 + 8) = 20LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "frequency_offset_unc_ppb";
  *(void *)(v13 + 8) = 24LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  int v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *int v14 = 3LL;
  *(void *)uint64_t v15 = "cycle_slip_detected";
  *((void *)v15 + 1) = 19LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 4LL;
  *(void *)uint64_t v17 = "uncertainty_adjusted_by_external_tool";
  *((void *)v17 + 1) = 37LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10004179C()
{
  return sub_100008C30(&qword_10036D840, (uint64_t)qword_100369538, (uint64_t)sub_1000415DC);
}

uint64_t sub_1000417B8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D840, (uint64_t)qword_100369538, (uint64_t)sub_1000415DC, a1);
}

uint64_t sub_1000417D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0LL) + 20);
          goto LABEL_5;
        case 2LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0LL) + 24);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v9, a2, a3);
          break;
        case 3LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0LL) + 28);
          goto LABEL_11;
        case 4LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0LL) + 32);
LABEL_11:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + v10, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000418E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0LL);
  uint64_t v10 = (int *)result;
  uint64_t v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1LL, a2, a3, *(double *)v11);
  }
  if (!v4)
  {
    uint64_t v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2LL, a2, a3, *(double *)v12);
    }
    int v13 = *(unsigned __int8 *)(v5 + v10[7]);
    if (v13 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v13 & 1, 3LL, a2, a3);
    }
    int v14 = *(unsigned __int8 *)(v5 + v10[8]);
    if (v14 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v14 & 1, 4LL, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_100041A10()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking,  &qword_1003519A8,  (uint64_t)&unk_1002B6B2C);
}

uint64_t sub_100041A2C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  uint64_t v7 = a2 + v5;
  *(void *)uint64_t v7 = 0LL;
  *(_BYTE *)(v7 + 8) = 1;
  uint64_t v8 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 2;
  *(_BYTE *)(a2 + v8) = 2;
  return result;
}

uint64_t sub_100041A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000417D4(a1, a2, a3);
}

uint64_t sub_100041A94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000418E0(a1, a2, a3);
}

uint64_t sub_100041AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354E98,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking,  (uint64_t)&unk_1002B6AA4);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100041AF8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D840, (uint64_t)qword_100369538, (uint64_t)sub_1000415DC, a1);
}

uint64_t sub_100041B14(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351E20,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking,  (uint64_t)&unk_1002B6A2C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100041B54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351E20,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking,  (uint64_t)&unk_1002B6A2C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100041BA4()
{
  return &unk_10033DEC0;
}

unint64_t sub_100041BB0()
{
  return 0xD000000000000026LL;
}

uint64_t sub_100041BCC()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369550);
  sub_10000E704(v0, (uint64_t)qword_100369550);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32F0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "phase_start_time_nanoseconds";
  *(void *)(v9 + 8) = 28LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "phase_end_time_nanoseconds";
  *(void *)(v13 + 8) = 26LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  int v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *int v14 = 3LL;
  *(void *)uint64_t v15 = "accumulated_phase_nanoseconds";
  *((void *)v15 + 1) = 29LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 4LL;
  *(void *)uint64_t v17 = "accumulated_phase_unc_nanoseconds";
  *((void *)v17 + 1) = 33LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 5LL;
  *(void *)uint64_t v18 = "cycle_slips_detected";
  *(void *)(v18 + 8) = 20LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100041DD0()
{
  return sub_100008C30(&qword_10036D848, (uint64_t)qword_100369550, (uint64_t)sub_100041BCC);
}

uint64_t sub_100041DEC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D848, (uint64_t)qword_100369550, (uint64_t)sub_100041BCC, a1);
}

uint64_t sub_100041E08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0LL) + 20);
          goto LABEL_12;
        case 2LL:
          uint64_t v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0LL) + 24);
LABEL_12:
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v3 + v12, a2, a3);
          goto LABEL_6;
        case 3LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0LL) + 28);
          goto LABEL_5;
        case 4LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0LL) + 32);
LABEL_5:
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v10, a2, a3);
          goto LABEL_6;
        case 5LL:
          uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0LL);
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + *(int *)(v13 + 36), a2, a3);
LABEL_6:
          uint64_t v9 = v11;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_100041F2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0LL);
  uint64_t v10 = (int *)result;
  uint64_t v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(void *)v11, 1LL, a2, a3);
  }
  if (!v4)
  {
    uint64_t v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(void *)v12, 2LL, a2, a3);
    }
    uint64_t v13 = v5 + v10[7];
    if ((*(_BYTE *)(v13 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3LL, a2, a3, *(double *)v13);
    }
    uint64_t v14 = v5 + v10[8];
    if ((*(_BYTE *)(v14 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(4LL, a2, a3, *(double *)v14);
    }
    int v15 = *(unsigned __int8 *)(v5 + v10[9]);
    if (v15 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v15 & 1, 5LL, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_10004208C()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking,  &qword_1003519B0,  (uint64_t)&unk_1002B6C94);
}

uint64_t sub_1000420A8@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  uint64_t v7 = a2 + v5;
  *(void *)uint64_t v7 = 0LL;
  *(_BYTE *)(v7 + 8) = 1;
  uint64_t v8 = a1[8];
  uint64_t v9 = a2 + a1[7];
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  uint64_t v10 = a2 + v8;
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  *(_BYTE *)(a2 + a1[9]) = 2;
  return result;
}

uint64_t sub_100042114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100041E08(a1, a2, a3);
}

uint64_t sub_100042128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100041F2C(a1, a2, a3);
}

uint64_t sub_10004213C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354E90,  type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking,  (uint64_t)&unk_1002B6C0C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004218C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D848, (uint64_t)qword_100369550, (uint64_t)sub_100041BCC, a1);
}

uint64_t sub_1000421A8(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351E38,  type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking,  (uint64_t)&unk_1002B6B94);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000421E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351E38,  type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking,  (uint64_t)&unk_1002B6B94);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100042238()
{
  return &unk_10033DED0;
}

unint64_t sub_100042244()
{
  return 0xD00000000000002ELL;
}

uint64_t sub_100042260()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369568);
  sub_10000E704(v0, (uint64_t)qword_100369568);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "sv_time";
  *(void *)(v9 + 8) = 7LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "frequency_offset";
  *((void *)v13 + 1) = 16LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "cn0_dbhz";
  *(void *)(v14 + 8) = 8LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000423F4()
{
  return sub_100008C30(&qword_10036D850, (uint64_t)qword_100369568, (uint64_t)sub_100042260);
}

uint64_t sub_100042410@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D850, (uint64_t)qword_100369568, (uint64_t)sub_100042260, a1);
}

uint64_t sub_10004242C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0) {
        return result;
      }
      switch(result)
      {
        case 3LL:
          uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0LL);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + *(int *)(v9 + 28), a2, a3);
          goto LABEL_12;
        case 2LL:
          uint64_t v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0LL) + 24);
          uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0LL);
          uint64_t v12 = &qword_100351E08;
          uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset;
          uint64_t v14 = &unk_1002B68C4;
          break;
        case 1LL:
          uint64_t v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0LL) + 20);
          uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0LL);
          uint64_t v12 = &qword_100351DF0;
          uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime;
          uint64_t v14 = &unk_1002B675C;
          break;
        default:
          goto LABEL_12;
      }

      uint64_t v15 = sub_10000FD98(v12, v13, (uint64_t)v14);
      dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v10, v11, v15, a2, a3);
LABEL_12:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_100042590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = sub_10004265C(v5, a1, a2, a3);
  if (!v4)
  {
    sub_1000427D0(v5, a1, a2, a3);
    uint64_t v10 = v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0LL) + 28);
    if ((*(_BYTE *)(v10 + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(3LL, a2, a3, *(float *)v10);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_10004265C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100351838);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 20), (uint64_t)v8, &qword_100351838);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  uint64_t v15 = sub_10000FD98( &qword_100351DF0,  type metadata accessor for CLP_LogEntry_PrivateData_SvTime,  (uint64_t)&unk_1002B675C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_1000427D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100351840);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_100351840);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  uint64_t v15 = sub_10000FD98( &qword_100351E08,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset,  (uint64_t)&unk_1002B68C4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

Swift::Int sub_100042948()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak,  &qword_1003519B8,  (uint64_t)&unk_1002B6DFC);
}

uint64_t sub_100042964@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = a2 + a1[6];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v6,  1LL,  1LL,  v7);
  uint64_t v9 = a2 + a1[7];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  return result;
}

uint64_t sub_1000429FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004242C(a1, a2, a3);
}

uint64_t sub_100042A10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100042590(a1, a2, a3);
}

uint64_t sub_100042A24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354E88,  type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak,  (uint64_t)&unk_1002B6D74);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100042A74@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D850, (uint64_t)qword_100369568, (uint64_t)sub_100042260, a1);
}

uint64_t sub_100042A90(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351E50,  type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak,  (uint64_t)&unk_1002B6CFC);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100042AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351E50,  type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak,  (uint64_t)&unk_1002B6CFC);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100042B24()
{
  return &unk_10033DEE0;
}

unint64_t sub_100042B30()
{
  return 0xD000000000000023LL;
}

uint64_t sub_100042B4C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369580);
  sub_10000E704(v0, (uint64_t)qword_100369580);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  char v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *char v8 = 1LL;
  *(void *)uint64_t v9 = "derived_full_sv_time_nanoseconds";
  *(void *)(v9 + 8) = 32LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "derived_full_sv_time_unc_nanoseconds";
  *((void *)v13 + 1) = 36LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "full_sv_time_source";
  *(void *)(v14 + 8) = 19LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100042CE0()
{
  return sub_100008C30(&qword_10036D858, (uint64_t)qword_100369580, (uint64_t)sub_100042B4C);
}

uint64_t sub_100042CFC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D858, (uint64_t)qword_100369580, (uint64_t)sub_100042B4C, a1);
}

uint64_t sub_100042D18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0) {
        return result;
      }
      switch(result)
      {
        case 3LL:
          uint64_t v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0LL) + 28);
          unint64_t v10 = sub_10007FB9C();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v9,  &type metadata for CLP_LogEntry_PrivateData_FullSvTimeSource,  v10,  a2,  a3);
          goto LABEL_12;
        case 2LL:
          uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0LL) + 24);
          break;
        case 1LL:
          uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0LL) + 20);
          break;
        default:
          goto LABEL_12;
      }

      dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v11, a2, a3);
LABEL_12:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_100042E28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0LL);
  uint64_t v10 = result;
  uint64_t v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1LL, a2, a3, *(double *)v11);
  }
  if (!v4)
  {
    uint64_t v12 = v5 + *(int *)(v10 + 24);
    if ((*(_BYTE *)(v12 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2LL, a2, a3, *(double *)v12);
    }
    if (*(_BYTE *)(v5 + *(int *)(v10 + 28)) != 6)
    {
      char v14 = *(_BYTE *)(v5 + *(int *)(v10 + 28));
      unint64_t v13 = sub_10007FB9C();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v14,  3LL,  &type metadata for CLP_LogEntry_PrivateData_FullSvTimeSource,  v13,  a2,  a3);
    }

    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_100042F40()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime,  &qword_1003519C0,  (uint64_t)&unk_1002B6F64);
}

uint64_t sub_100042F5C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100042F64(a1, 6, a2);
}

uint64_t sub_100042F64@<X0>(int *a1@<X0>, char a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v7 = a1[6];
  uint64_t v8 = a3 + a1[5];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a3 + v7;
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  *(_BYTE *)(a3 + a1[7]) = a2;
  return result;
}

uint64_t sub_100042FBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100042D18(a1, a2, a3);
}

uint64_t sub_100042FD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100042E28(a1, a2, a3);
}

uint64_t sub_100042FE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354E80,  type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime,  (uint64_t)&unk_1002B6EDC);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100043034@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D858, (uint64_t)qword_100369580, (uint64_t)sub_100042B4C, a1);
}

uint64_t sub_100043050(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351E68,  type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime,  (uint64_t)&unk_1002B6E64);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100043090(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351E68,  type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime,  (uint64_t)&unk_1002B6E64);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000430E0()
{
  return &unk_10033DEF0;
}

unint64_t sub_1000430EC()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_100043108()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369598);
  sub_10000E704(v0, (uint64_t)qword_100369598);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "innovation";
  *(void *)(v9 + 8) = 10LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  unint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)unint64_t v13 = "residual";
  *((void *)v13 + 1) = 8LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "final_uncertainty";
  *(void *)(v14 + 8) = 17LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000432A4()
{
  return sub_100008C30(&qword_10036D860, (uint64_t)qword_100369598, (uint64_t)sub_100043108);
}

uint64_t sub_1000432C0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D860, (uint64_t)qword_100369598, (uint64_t)sub_100043108, a1);
}

uint64_t sub_1000432DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v11 & 1) != 0) {
      break;
    }
    switch(result)
    {
      case 3LL:
        uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0LL) + 28);
LABEL_3:
        dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + v9, a2, a3);
        break;
      case 2LL:
        uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0LL) + 24);
        goto LABEL_3;
      case 1LL:
        uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0LL) + 20);
        goto LABEL_3;
    }

    uint64_t v4 = 0LL;
    uint64_t v7 = a2;
  }

  return result;
}

uint64_t sub_1000433A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0LL);
  uint64_t v10 = result;
  uint64_t v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 4) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(1LL, a2, a3, *(float *)v11);
  }
  if (!v4)
  {
    uint64_t v12 = v5 + *(int *)(v10 + 24);
    if ((*(_BYTE *)(v12 + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(2LL, a2, a3, *(float *)v12);
    }
    uint64_t v13 = v5 + *(int *)(v10 + 28);
    if ((*(_BYTE *)(v13 + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(3LL, a2, a3, *(float *)v13);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_10004349C()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage,  &qword_1003519C8,  (uint64_t)&unk_1002B70CC);
}

uint64_t sub_1000434B8@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  uint64_t v7 = a2 + v5;
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  uint64_t v8 = a2 + a1[7];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  return result;
}

uint64_t sub_10004350C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000432DC(a1, a2, a3);
}

uint64_t sub_100043520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000433A0(a1, a2, a3);
}

uint64_t sub_100043534(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354E78,  type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage,  (uint64_t)&unk_1002B7044);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100043584@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D860, (uint64_t)qword_100369598, (uint64_t)sub_100043108, a1);
}

uint64_t sub_1000435A0(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351E80,  type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage,  (uint64_t)&unk_1002B6FCC);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000435E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351E80,  type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage,  (uint64_t)&unk_1002B6FCC);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100043630()
{
  return &unk_10033DF00;
}

unint64_t sub_10004363C()
{
  return 0xD00000000000002DLL;
}

uint64_t sub_100043658()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003695B0);
  sub_10000E704(v0, (uint64_t)qword_1003695B0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v41 = swift_allocObject(v1, v6 + 16 * v4, v5 | 7);
  *(_OWORD *)(v41 + 16) = xmmword_1002B42E0;
  uint64_t v7 = v41 + v6;
  uint64_t v8 = v41 + v6 + *(int *)(v2 + 48);
  *(void *)(v41 + v6) = 1LL;
  *(void *)uint64_t v8 = "jammer_cn0_dbHz";
  *(void *)(v8 + 8) = 15LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "snr_at_correlator_output";
  *(void *)(v12 + 8) = 24LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 3LL;
  *(void *)uint64_t v14 = "full_sv_time";
  *((void *)v14 + 1) = 12LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v7 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *uint64_t v15 = 4LL;
  *(void *)uint64_t v16 = "sv_time_usage_nanoseconds";
  *((void *)v16 + 1) = 25LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v7 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "frequency_offset_usage_ppb";
  *((void *)v18 + 1) = 26LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v7 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 6LL;
  *(void *)uint64_t v20 = "carrier_phase_usage_nanoseconds";
  *((void *)v20 + 1) = 31LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v7 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  *uint64_t v21 = 7LL;
  *(void *)uint64_t v22 = "noncoherent_interval_count";
  *((void *)v22 + 1) = 26LL;
  v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v7 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  *uint64_t v23 = 8LL;
  *(void *)uint64_t v24 = "coherent_integration_ms";
  *((void *)v24 + 1) = 23LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 9LL;
  *(void *)uint64_t v25 = "sv_time_detection_method";
  *(void *)(v25 + 8) = 24LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  uint64_t v26 = (void *)(v7 + 9 * v4);
  uint64_t v27 = (char *)v26 + *(int *)(v2 + 48);
  void *v26 = 10LL;
  *(void *)uint64_t v27 = "frequency_detection_method";
  *((void *)v27 + 1) = 26LL;
  v27[16] = 2;
  v11();
  uint64_t v28 = (void *)(v7 + 10 * v4);
  uint64_t v29 = (char *)v28 + *(int *)(v2 + 48);
  *uint64_t v28 = 11LL;
  *(void *)uint64_t v29 = "channel_id";
  *((void *)v29 + 1) = 10LL;
  v29[16] = 2;
  v11();
  uint64_t v30 = (void *)(v7 + 11 * v4);
  uint64_t v31 = (char *)v30 + *(int *)(v2 + 48);
  *uint64_t v30 = 12LL;
  *(void *)uint64_t v31 = "code_lock_duration_seconds";
  *((void *)v31 + 1) = 26LL;
  v31[16] = 2;
  v11();
  uint64_t v32 = (void *)(v7 + 12 * v4);
  uint64_t v33 = (char *)v32 + *(int *)(v2 + 48);
  *uint64_t v32 = 13LL;
  *(void *)uint64_t v33 = "frequency_lock_duration_seconds";
  *((void *)v33 + 1) = 31LL;
  v33[16] = 2;
  v11();
  uint64_t v34 = (void *)(v7 + 13 * v4);
  uint64_t v35 = (char *)v34 + *(int *)(v2 + 48);
  *uint64_t v34 = 14LL;
  *(void *)uint64_t v35 = "metadata";
  *((void *)v35 + 1) = 8LL;
  v35[16] = 2;
  v11();
  uint64_t v36 = (void *)(v7 + 14 * v4);
  uint64_t v37 = (char *)v36 + *(int *)(v2 + 48);
  *uint64_t v36 = 15LL;
  *(void *)uint64_t v37 = "metadata_format";
  *((void *)v37 + 1) = 15LL;
  v37[16] = 2;
  v11();
  uint64_t v38 = (void *)(v7 + 15 * v4);
  uint64_t v39 = (char *)v38 + *(int *)(v2 + 48);
  *uint64_t v38 = 16LL;
  *(void *)uint64_t v39 = "top_correlation_peaks";
  *((void *)v39 + 1) = 21LL;
  v39[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v41);
}

uint64_t sub_100043AA0()
{
  return sub_100008C30(&qword_10036D868, (uint64_t)qword_1003695B0, (uint64_t)sub_100043658);
}

uint64_t sub_100043ABC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D868, (uint64_t)qword_1003695B0, (uint64_t)sub_100043658, a1);
}

double sub_100043AD8()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0LL);
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  *(_DWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 20) = 1;
  *(_DWORD *)(v1 + 24) = 0;
  *(_BYTE *)(v1 + 28) = 1;
  uint64_t v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 1LL, 1LL, v3);
  uint64_t v4 = v1
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0LL);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL);
  v6(v4, 1LL, 1LL, v5);
  v6( v1 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb,  1LL,  1LL,  v5);
  v6( v1 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds,  1LL,  1LL,  v5);
  uint64_t v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount;
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  uint64_t v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs;
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod) = 7;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod) = 7;
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID;
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  double result = 0.0;
  *(_OWORD *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata) = xmmword_1002B4290;
  uint64_t v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
  *(_DWORD *)uint64_t v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  *(void *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks) = &_swiftEmptyArrayStorage;
  qword_10036D878 = v1;
  return result;
}

uint64_t sub_100043C8C(uint64_t a1)
{
  uint64_t v3 = sub_100003A0C(&qword_100351850);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100003A0C(&qword_100351848);
  __chkstk_darwin(v6);
  uint64_t v58 = (uint64_t)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(_DWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 20) = 1;
  *(_DWORD *)(v1 + 24) = 0;
  *(_BYTE *)(v1 + 28) = 1;
  uint64_t v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  uint64_t v57 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  uint64_t v59 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 56LL);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v12)(v10, 1LL, 1LL, v11);
  uint64_t v60 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
  v12();
  uint64_t v61 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
  v12();
  uint64_t v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount;
  *(_DWORD *)uint64_t v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  uint64_t v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs;
  *(_DWORD *)uint64_t v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  uint64_t v62 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod) = 7;
  uint64_t v15 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
  *uint64_t v15 = 7;
  uint64_t v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID;
  uint64_t v63 = v15;
  uint64_t v64 = v16;
  *(_DWORD *)uint64_t v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
  uint64_t v65 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
  *(_DWORD *)uint64_t v17 = 0;
  *(_BYTE *)(v17 + 4) = 1;
  uint64_t v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
  uint64_t v66 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
  *(_DWORD *)uint64_t v18 = 0;
  *(_BYTE *)(v18 + 4) = 1;
  uint64_t v67 = (uint64_t *)(v1
                  + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
  *(_OWORD *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata) = xmmword_1002B4290;
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
  uint64_t v68 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
  *(_DWORD *)uint64_t v19 = 0;
  *(_BYTE *)(v19 + 4) = 1;
  uint64_t v69 = (uint64_t *)(v1
                  + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
  *(void *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks) = &_swiftEmptyArrayStorage;
  swift_beginAccess(a1 + 16, v97, 0LL, 0LL);
  int v20 = *(_DWORD *)(a1 + 16);
  LOBYTE(v10) = *(_BYTE *)(a1 + 20);
  swift_beginAccess(v1 + 16, v96, 1LL, 0LL);
  *(_DWORD *)(v1 + 16) = v20;
  *(_BYTE *)(v1 + 20) = v10;
  swift_beginAccess(a1 + 24, v95, 0LL, 0LL);
  int v21 = *(_DWORD *)(a1 + 24);
  char v22 = *(_BYTE *)(a1 + 28);
  swift_beginAccess(v1 + 24, v94, 1LL, 0LL);
  *(_DWORD *)(v1 + 24) = v21;
  *(_BYTE *)(v1 + 28) = v22;
  uint64_t v23 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime,  v93,  0LL,  0LL);
  uint64_t v24 = v58;
  sub_10000E6C0(v23, v58, &qword_100351848);
  uint64_t v25 = v57;
  swift_beginAccess(v57, v92, 33LL, 0LL);
  sub_10000E5D4(v24, v25, &qword_100351848);
  swift_endAccess(v92);
  uint64_t v26 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds,  v92,  0LL,  0LL);
  sub_10000E6C0(v26, (uint64_t)v5, &qword_100351850);
  uint64_t v27 = v59;
  swift_beginAccess(v59, v91, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v5, v27, &qword_100351850);
  swift_endAccess(v91);
  uint64_t v28 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb,  v91,  0LL,  0LL);
  sub_10000E6C0(v28, (uint64_t)v5, &qword_100351850);
  uint64_t v29 = v60;
  swift_beginAccess(v60, v90, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v5, v29, &qword_100351850);
  swift_endAccess(v90);
  uint64_t v30 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds,  v90,  0LL,  0LL);
  sub_10000E6C0(v30, (uint64_t)v5, &qword_100351850);
  uint64_t v31 = v61;
  swift_beginAccess(v61, v89, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v5, v31, &qword_100351850);
  swift_endAccess(v89);
  uint64_t v32 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount,  v89,  0LL,  0LL);
  LODWORD(v31) = *(_DWORD *)v32;
  LOBYTE(v32) = *(_BYTE *)(v32 + 4);
  swift_beginAccess(v13, &v88, 1LL, 0LL);
  *(_DWORD *)uint64_t v13 = v31;
  *(_BYTE *)(v13 + 4) = v32;
  uint64_t v33 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs,  &v87,  0LL,  0LL);
  LODWORD(v13) = *(_DWORD *)v33;
  LOBYTE(v33) = *(_BYTE *)(v33 + 4);
  swift_beginAccess(v14, &v86, 1LL, 0LL);
  *(_DWORD *)uint64_t v14 = v13;
  *(_BYTE *)(v14 + 4) = v33;
  uint64_t v34 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod,  &v85,  0LL,  0LL);
  LOBYTE(v34) = *v34;
  uint64_t v35 = v62;
  swift_beginAccess(v62, &v84, 1LL, 0LL);
  *uint64_t v35 = (_BYTE)v34;
  uint64_t v36 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod,  &v83,  0LL,  0LL);
  LOBYTE(v36) = *v36;
  uint64_t v37 = v63;
  swift_beginAccess(v63, &v82, 1LL, 0LL);
  *uint64_t v37 = (_BYTE)v36;
  uint64_t v38 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID,  &v81,  0LL,  0LL);
  LODWORD(v37) = *(_DWORD *)v38;
  LOBYTE(v38) = *(_BYTE *)(v38 + 4);
  uint64_t v39 = v64;
  swift_beginAccess(v64, &v80, 1LL, 0LL);
  *(_DWORD *)uint64_t v39 = (_DWORD)v37;
  *(_BYTE *)(v39 + 4) = v38;
  uint64_t v40 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds,  &v79,  0LL,  0LL);
  LODWORD(v37) = *(_DWORD *)v40;
  LOBYTE(v40) = *(_BYTE *)(v40 + 4);
  uint64_t v41 = v65;
  swift_beginAccess(v65, &v78, 1LL, 0LL);
  *(_DWORD *)uint64_t v41 = (_DWORD)v37;
  *(_BYTE *)(v41 + 4) = v40;
  uint64_t v42 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds,  &v77,  0LL,  0LL);
  LODWORD(v37) = *(_DWORD *)v42;
  LOBYTE(v42) = *(_BYTE *)(v42 + 4);
  uint64_t v43 = v66;
  swift_beginAccess(v66, &v76, 1LL, 0LL);
  *(_DWORD *)uint64_t v43 = (_DWORD)v37;
  *(_BYTE *)(v43 + 4) = v42;
  uint64_t v44 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata,  &v75,  0LL,  0LL);
  uint64_t v46 = *v44;
  unint64_t v45 = v44[1];
  uint64_t v47 = v67;
  swift_beginAccess(v67, &v74, 1LL, 0LL);
  uint64_t v48 = *v47;
  unint64_t v49 = v47[1];
  *uint64_t v47 = v46;
  v47[1] = v45;
  sub_10005F2F8(v46, v45);
  sub_10005F30C(v48, v49);
  uint64_t v50 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat,  &v73,  0LL,  0LL);
  LODWORD(v46) = *(_DWORD *)v50;
  LOBYTE(v50) = *(_BYTE *)(v50 + 4);
  uint64_t v51 = v68;
  swift_beginAccess(v68, &v72, 1LL, 0LL);
  *(_DWORD *)uint64_t v51 = v46;
  *(_BYTE *)(v51 + 4) = v50;
  uint64_t v52 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks,  &v71,  0LL,  0LL);
  uint64_t v53 = *v52;
  swift_bridgeObjectRetain(v53);
  swift_release(a1);
  uint64_t v54 = v69;
  swift_beginAccess(v69, &v70, 1LL, 0LL);
  uint64_t v55 = *v54;
  *uint64_t v54 = v53;
  swift_bridgeObjectRelease(v55);
  return v1;
}

uint64_t sub_1000443DC()
{
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks));
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100044484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v9)) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v3 + v9);
    uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0LL);
    uint64_t v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v13 = swift_retain(v10);
    sub_100043C8C(v13);
    uint64_t v14 = *(void *)(v6 + v9);
    *(void *)(v6 + v9) = v12;
    swift_release(v14);
  }

  uint64_t v15 = *(void *)(v6 + v9);
  swift_retain(v15);
  uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    uint64_t v41 = v15 + 24;
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1LL:
          swift_beginAccess(v15 + 16, v40, 33LL, 0LL);
          uint64_t v19 = v15 + 16;
          goto LABEL_26;
        case 2LL:
          uint64_t v20 = v41;
          goto LABEL_25;
        case 3LL:
          uint64_t v21 = v15
              + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime,  v40,  33LL,  0LL);
          uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0LL);
          uint64_t v23 = &qword_100351E68;
          uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime;
          uint64_t v25 = &unk_1002B6E64;
          goto LABEL_15;
        case 4LL:
          uint64_t v26 = OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
          goto LABEL_14;
        case 5LL:
          uint64_t v26 = OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
          goto LABEL_14;
        case 6LL:
          uint64_t v26 = OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
LABEL_14:
          uint64_t v21 = v15 + v26;
          swift_beginAccess(v15 + v26, v40, 33LL, 0LL);
          uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0LL);
          uint64_t v23 = &qword_100351E80;
          uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage;
          uint64_t v25 = &unk_1002B6FCC;
LABEL_15:
          uint64_t v27 = sub_10000FD98(v23, v24, (uint64_t)v25);
          uint64_t v28 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v21, v22, v27, a2, a3);
          goto LABEL_31;
        case 7LL:
          uint64_t v29 = OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount;
          goto LABEL_29;
        case 8LL:
          uint64_t v29 = OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs;
          goto LABEL_29;
        case 9LL:
          uint64_t v30 = OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod;
          goto LABEL_20;
        case 10LL:
          uint64_t v30 = OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod;
LABEL_20:
          uint64_t v31 = v15 + v30;
          swift_beginAccess(v15 + v30, v40, 33LL, 0LL);
          unint64_t v32 = sub_10007FB58();
          uint64_t v28 = v5;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v31,  &type metadata for CLP_LogEntry_PrivateData_MeasurementDetectionMethod,  v32,  a2,  a3);
          goto LABEL_31;
        case 11LL:
          uint64_t v33 = v15
              + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID,  v40,  33LL,  0LL);
          uint64_t v28 = v5;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v33, a2, a3);
          goto LABEL_31;
        case 12LL:
          uint64_t v34 = OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
          goto LABEL_24;
        case 13LL:
          uint64_t v34 = OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
LABEL_24:
          uint64_t v20 = v15 + v34;
LABEL_25:
          swift_beginAccess(v20, v40, 33LL, 0LL);
          uint64_t v19 = v20;
LABEL_26:
          uint64_t v28 = v5;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v19, a2, a3);
          goto LABEL_31;
        case 14LL:
          uint64_t v35 = v15
              + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata,  v40,  33LL,  0LL);
          uint64_t v28 = v5;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)(v35, a2, a3);
          goto LABEL_31;
        case 15LL:
          uint64_t v29 = OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
LABEL_29:
          uint64_t v36 = v15 + v29;
          swift_beginAccess(v15 + v29, v40, 33LL, 0LL);
          uint64_t v28 = v5;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v36, a2, a3);
          goto LABEL_31;
        case 16LL:
          uint64_t v37 = v15
              + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks,  v40,  33LL,  0LL);
          uint64_t v38 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0LL);
          uint64_t v39 = sub_10000FD98( &qword_100351E50,  type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak,  (uint64_t)&unk_1002B6CFC);
          uint64_t v28 = v5;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v37, v38, v39, a2, a3);
LABEL_31:
          uint64_t v5 = v28;
          swift_endAccess(v40);
          break;
        default:
          break;
      }

      uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return swift_release(v15);
}

uint64_t sub_100044888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL) + 20));
  swift_retain(v9);
  swift_beginAccess(v9 + 16, v30, 0LL, 0LL);
  if ((*(_BYTE *)(v9 + 20) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(1LL, a2, a3, *(float *)(v9 + 16));
  }
  if (v4) {
    return swift_release(v9);
  }
  swift_beginAccess(v9 + 24, v31, 0LL, 0LL);
  if ((*(_BYTE *)(v9 + 28) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(2LL, a2, a3, *(float *)(v9 + 24));
  }
  sub_100044D94(v9, a1, a2, a3);
  sub_100044F20(v9, a1, a2, a3);
  sub_1000450AC(v9, a1, a2, a3);
  sub_100045238(v9, a1, a2, a3);
  uint64_t v11 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount,  v40,  0LL,  0LL);
  if ((v11[1] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v11, 7LL, a2, a3);
  }
  uint64_t v12 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs,  v39,  0LL,  0LL);
  if ((v12[1] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v12, 8LL, a2, a3);
  }
  uint64_t v13 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod,  v38,  0LL,  0LL);
  if (*v13 != 7)
  {
    v37[0] = *v13;
    unint64_t v14 = sub_10007FB58();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v37,  9LL,  &type metadata for CLP_LogEntry_PrivateData_MeasurementDetectionMethod,  v14,  a2,  a3);
  }

  uint64_t v15 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod,  v37,  0LL,  0LL);
  if (*v15 != 7)
  {
    v36[0] = *v15;
    unint64_t v16 = sub_10007FB58();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v36,  10LL,  &type metadata for CLP_LogEntry_PrivateData_MeasurementDetectionMethod,  v16,  a2,  a3);
  }

  char v17 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID,  v36,  0LL,  0LL);
  if ((v17[1] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v17, 11LL, a2, a3);
  }
  uint64_t v18 = v9
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds,  v35,  0LL,  0LL);
  if ((*(_BYTE *)(v18 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(12LL, a2, a3, *(float *)v18);
  }
  uint64_t v19 = v9
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds,  v34,  0LL,  0LL);
  if ((*(_BYTE *)(v19 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(13LL, a2, a3, *(float *)v19);
  }
  uint64_t v20 = (uint64_t *)(v9
                  + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata,  v33,  0LL,  0LL);
  unint64_t v21 = v20[1];
  if (v21 >> 60 != 15)
  {
    uint64_t v22 = *v20;
    sub_100017F58(v22, v21);
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(v22, v21, 14LL, a2, a3);
    sub_10005F30C(v22, v21);
  }

  uint64_t v23 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat,  v32,  0LL,  0LL);
  if ((v23[1] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v23, 15LL, a2, a3);
  }
  uint64_t v24 = (uint64_t *)(v9
                  + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks,  &v29,  0LL,  0LL);
  uint64_t v25 = *v24;
  if (*(void *)(v25 + 16))
  {
    uint64_t v26 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0LL);
    uint64_t v27 = sub_10000FD98( &qword_100351E50,  type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak,  (uint64_t)&unk_1002B6CFC);
    uint64_t v28 = swift_bridgeObjectRetain(v25);
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v28, 16LL, v26, v27, a2, a3);
    swift_bridgeObjectRelease(v25);
  }

  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100044D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100351848);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100351848);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
  uint64_t v15 = sub_10000FD98( &qword_100351E68,  type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime,  (uint64_t)&unk_1002B6E64);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t sub_100044F20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100351850);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100351850);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  uint64_t v15 = sub_10000FD98( &qword_100351E80,  type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage,  (uint64_t)&unk_1002B6FCC);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_1000450AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100351850);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100351850);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  uint64_t v15 = sub_10000FD98( &qword_100351E80,  type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage,  (uint64_t)&unk_1002B6FCC);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 5LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_100045238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100351850);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100351850);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  uint64_t v15 = sub_10000FD98( &qword_100351E80,  type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage,  (uint64_t)&unk_1002B6FCC);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 6LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_1000453C4(uint64_t a1, uint64_t a2)
{
  return sub_100065AC0(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, sub_1000453EC) & 1;
}

uint64_t sub_1000453EC(uint64_t a1, uint64_t a2)
{
  uint64_t v149 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0LL);
  uint64_t v147 = *(void *)(v149 - 8);
  __chkstk_darwin(v149);
  uint64_t v144 = (uint64_t)&v139 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v152 = sub_100003A0C(&qword_100355060);
  uint64_t v5 = __chkstk_darwin(v152);
  uint64_t v141 = (uint64_t)&v139 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v143 = (uint64_t)&v139 - v8;
  __chkstk_darwin(v7);
  uint64_t v148 = (uint64_t)&v139 - v9;
  uint64_t v10 = sub_100003A0C(&qword_100351850);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v140 = (uint64_t)&v139 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v150 = (uint64_t)&v139 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v142 = (uint64_t)&v139 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v153 = (uint64_t)&v139 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v145 = (uint64_t)&v139 - v20;
  __chkstk_darwin(v19);
  uint64_t v151 = (uint64_t)&v139 - v21;
  uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v146 = (uint64_t)&v139 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = sub_100003A0C(&qword_100355068);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v139 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = sub_100003A0C(&qword_100351848);
  uint64_t v29 = __chkstk_darwin(v28);
  uint64_t v31 = (char *)&v139 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v139 - v32;
  swift_beginAccess(a1 + 16, v187, 0LL, 0LL);
  float v34 = *(float *)(a1 + 16);
  uint64_t v155 = a1;
  char v35 = *(_BYTE *)(a1 + 20);
  swift_beginAccess(a2 + 16, v186, 0LL, 0LL);
  uint64_t v154 = a2;
  char v36 = *(_BYTE *)(a2 + 20);
  if ((v35 & 1) == 0)
  {
    if ((v36 & 1) != 0) {
      goto LABEL_9;
    }
LABEL_7:
    uint64_t v37 = v155;
    swift_beginAccess(v155 + 24, v185, 0LL, 0LL);
    float v38 = *(float *)(v37 + 24);
    char v39 = *(_BYTE *)(v37 + 28);
    uint64_t v40 = v154;
    uint64_t v41 = (float *)(v154 + 24);
    swift_beginAccess(v154 + 24, v184, 0LL, 0LL);
    char v42 = *(_BYTE *)(v40 + 28);
    if ((v39 & 1) != 0)
    {
      if (!*(_BYTE *)(v40 + 28)) {
        goto LABEL_9;
      }
    }

    else
    {
      if (v38 != *v41) {
        char v42 = 1;
      }
      if ((v42 & 1) != 0) {
        goto LABEL_9;
      }
    }

    uint64_t v44 = v155
        + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
    swift_beginAccess( v155 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime,  v183,  0LL,  0LL);
    sub_10000E6C0(v44, (uint64_t)v33, &qword_100351848);
    uint64_t v45 = v154;
    uint64_t v46 = v154
        + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
    swift_beginAccess( v154 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime,  v182,  0LL,  0LL);
    uint64_t v47 = (uint64_t)&v27[*(int *)(v25 + 48)];
    sub_10000E6C0((uint64_t)v33, (uint64_t)v27, &qword_100351848);
    sub_10000E6C0(v46, v47, &qword_100351848);
    uint64_t v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
    if (v48((uint64_t)v27, 1LL, v22) == 1)
    {
      swift_retain(v155);
      swift_retain(v45);
      sub_100015764((uint64_t)v33, &qword_100351848);
      uint64_t v49 = v45;
      if (v48(v47, 1LL, v22) == 1)
      {
        sub_100015764((uint64_t)v27, &qword_100351848);
        uint64_t v50 = v153;
        goto LABEL_20;
      }
    }

    else
    {
      sub_10000E6C0((uint64_t)v27, (uint64_t)v31, &qword_100351848);
      unsigned int v51 = v48(v47, 1LL, v22);
      uint64_t v50 = v153;
      if (v51 != 1)
      {
        uint64_t v54 = v146;
        sub_100003E68(v47, v146, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
        swift_retain(v155);
        uint64_t v49 = v154;
        swift_retain(v154);
        char v55 = sub_1000653AC((uint64_t)v31, v54);
        sub_100004090(v54, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
        sub_100015764((uint64_t)v33, &qword_100351848);
        sub_100004090((uint64_t)v31, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
        sub_100015764((uint64_t)v27, &qword_100351848);
        if ((v55 & 1) == 0) {
          goto LABEL_41;
        }
LABEL_20:
        uint64_t v56 = v155
            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
        swift_beginAccess( v155 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds,  &v181,  0LL,  0LL);
        uint64_t v57 = v151;
        sub_10000E6C0(v56, v151, &qword_100351850);
        uint64_t v58 = v49
            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
        swift_beginAccess( v49 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds,  &v180,  0LL,  0LL);
        uint64_t v59 = v148;
        uint64_t v60 = v148 + *(int *)(v152 + 48);
        sub_10000E6C0(v57, v148, &qword_100351850);
        sub_10000E6C0(v58, v60, &qword_100351850);
        uint64_t v61 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v147 + 48);
        uint64_t v62 = v149;
        if (v61(v59, 1LL, v149) == 1)
        {
          sub_100015764(v57, &qword_100351850);
          int v63 = v61(v60, 1LL, v62);
          uint64_t v64 = v150;
          if (v63 == 1)
          {
            sub_100015764(v59, &qword_100351850);
            goto LABEL_27;
          }
        }

        else
        {
          uint64_t v65 = v145;
          sub_10000E6C0(v59, v145, &qword_100351850);
          if (v61(v60, 1LL, v62) != 1)
          {
            uint64_t v66 = v150;
            uint64_t v67 = v144;
            sub_100003E68(v60, v144, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
            char v68 = sub_100061BA4(v65, v67);
            sub_100004090(v67, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
            sub_100015764(v151, &qword_100351850);
            uint64_t v64 = v66;
            uint64_t v49 = v154;
            sub_100004090(v65, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
            sub_100015764(v59, &qword_100351850);
            if ((v68 & 1) == 0) {
              goto LABEL_41;
            }
LABEL_27:
            uint64_t v69 = v155
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
            swift_beginAccess( v155 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb,  &v179,  0LL,  0LL);
            sub_10000E6C0(v69, v50, &qword_100351850);
            uint64_t v70 = v49
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
            swift_beginAccess( v49 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb,  &v178,  0LL,  0LL);
            uint64_t v71 = v50;
            uint64_t v72 = v143;
            uint64_t v73 = v143 + *(int *)(v152 + 48);
            sub_10000E6C0(v71, v143, &qword_100351850);
            sub_10000E6C0(v70, v73, &qword_100351850);
            if (v61(v72, 1LL, v62) == 1)
            {
              sub_100015764(v71, &qword_100351850);
              if (v61(v73, 1LL, v62) == 1)
              {
                sub_100015764(v72, &qword_100351850);
LABEL_34:
                uint64_t v79 = v155
                    + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
                swift_beginAccess( v155 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds,  &v177,  0LL,  0LL);
                sub_10000E6C0(v79, v64, &qword_100351850);
                uint64_t v80 = v49
                    + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
                swift_beginAccess( v49 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds,  &v176,  0LL,  0LL);
                uint64_t v81 = v141;
                uint64_t v82 = v141 + *(int *)(v152 + 48);
                sub_10000E6C0(v64, v141, &qword_100351850);
                uint64_t v83 = v81;
                sub_10000E6C0(v80, v82, &qword_100351850);
                if (v61(v81, 1LL, v62) == 1)
                {
                  sub_100015764(v64, &qword_100351850);
                  if (v61(v82, 1LL, v62) == 1)
                  {
                    sub_100015764(v81, &qword_100351850);
LABEL_45:
                    uint64_t v89 = (int *)(v155
                                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount);
                    swift_beginAccess( v155 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount,  &v175,  0LL,  0LL);
                    int v90 = *v89;
                    char v91 = *((_BYTE *)v89 + 4);
                    uint64_t v92 = v49
                        + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount;
                    swift_beginAccess( v49 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount,  &v174,  0LL,  0LL);
                    char v93 = *(_BYTE *)(v92 + 4);
                    if ((v91 & 1) != 0)
                    {
                      if (!*(_BYTE *)(v92 + 4)) {
                        goto LABEL_41;
                      }
                    }

                    else
                    {
                      if (v90 != *(_DWORD *)v92) {
                        char v93 = 1;
                      }
                      if ((v93 & 1) != 0) {
                        goto LABEL_41;
                      }
                    }

                    uint64_t v94 = (int *)(v155
                                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs);
                    swift_beginAccess( v155 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs,  &v173,  0LL,  0LL);
                    int v95 = *v94;
                    char v96 = *((_BYTE *)v94 + 4);
                    uint64_t v97 = v49
                        + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs;
                    swift_beginAccess( v49 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs,  &v172,  0LL,  0LL);
                    char v98 = *(_BYTE *)(v97 + 4);
                    if ((v96 & 1) != 0)
                    {
                      if (!*(_BYTE *)(v97 + 4)) {
                        goto LABEL_41;
                      }
                    }

                    else
                    {
                      if (v95 != *(_DWORD *)v97) {
                        char v98 = 1;
                      }
                      if ((v98 & 1) != 0) {
                        goto LABEL_41;
                      }
                    }

                    uint64_t v99 = (unsigned __int8 *)(v155
                                            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
                    swift_beginAccess( v155 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod,  &v171,  0LL,  0LL);
                    int v100 = *v99;
                    int v101 = (unsigned __int8 *)(v49
                                             + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
                    swift_beginAccess( v49 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod,  &v170,  0LL,  0LL);
                    int v102 = *v101;
                    if (v100 == 7)
                    {
                      if (v102 != 7) {
                        goto LABEL_41;
                      }
                    }

                    else
                    {
                      char v43 = 0;
                      if (v102 == 7 || v100 != v102) {
                        goto LABEL_42;
                      }
                    }

                    uint64_t v103 = (unsigned __int8 *)(v155
                                             + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
                    swift_beginAccess( v155 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod,  &v169,  0LL,  0LL);
                    int v104 = *v103;
                    uint64_t v105 = (unsigned __int8 *)(v49
                                             + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
                    swift_beginAccess( v49 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod,  &v168,  0LL,  0LL);
                    int v106 = *v105;
                    if (v104 == 7)
                    {
                      if (v106 != 7) {
                        goto LABEL_41;
                      }
                    }

                    else
                    {
                      char v43 = 0;
                      if (v106 == 7 || v104 != v106) {
                        goto LABEL_42;
                      }
                    }

                    uint64_t v107 = (int *)(v155
                                 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID);
                    swift_beginAccess( v155 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID,  &v167,  0LL,  0LL);
                    int v108 = *v107;
                    char v109 = *((_BYTE *)v107 + 4);
                    uint64_t v110 = v49
                         + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID;
                    swift_beginAccess( v49 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID,  &v166,  0LL,  0LL);
                    char v111 = *(_BYTE *)(v110 + 4);
                    if ((v109 & 1) != 0)
                    {
                      if (!*(_BYTE *)(v110 + 4)) {
                        goto LABEL_41;
                      }
                    }

                    else
                    {
                      if (v108 != *(_DWORD *)v110) {
                        char v111 = 1;
                      }
                      if ((v111 & 1) != 0) {
                        goto LABEL_41;
                      }
                    }

                    uint64_t v112 = v155
                         + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
                    swift_beginAccess( v155 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds,  &v165,  0LL,  0LL);
                    float v113 = *(float *)v112;
                    char v114 = *(_BYTE *)(v112 + 4);
                    uint64_t v115 = v49
                         + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
                    swift_beginAccess( v49 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds,  &v164,  0LL,  0LL);
                    char v116 = *(_BYTE *)(v115 + 4);
                    if ((v114 & 1) != 0)
                    {
                      if (*(_BYTE *)(v115 + 4)) {
                        goto LABEL_79;
                      }
                    }

                    else
                    {
                      if ((v116 & 1) == 0)
                      {
LABEL_79:
                        uint64_t v117 = v155
                             + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
                        swift_beginAccess( v155 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds,  &v163,  0LL,  0LL);
                        float v118 = *(float *)v117;
                        char v119 = *(_BYTE *)(v117 + 4);
                        uint64_t v120 = v49
                             + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
                        swift_beginAccess( v49 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds,  &v162,  0LL,  0LL);
                        char v121 = *(_BYTE *)(v120 + 4);
                        if ((v119 & 1) != 0)
                        {
                          if (!*(_BYTE *)(v120 + 4)) {
                            goto LABEL_90;
                          }
                        }

                        else
                        {
                          if ((v121 & 1) != 0) {
                            goto LABEL_90;
                          }
                        }

                        uint64_t v122 = (uint64_t *)(v155
                                         + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
                        swift_beginAccess( v155 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata,  &v161,  0LL,  0LL);
                        uint64_t v123 = *v122;
                        unint64_t v124 = v122[1];
                        char v125 = (uint64_t *)(v154
                                         + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
                        swift_beginAccess( v154 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata,  &v160,  0LL,  0LL);
                        uint64_t v126 = *v125;
                        unint64_t v127 = v125[1];
                        if (v124 >> 60 == 15)
                        {
                          if (v127 >> 60 == 15)
                          {
LABEL_92:
                            uint64_t v130 = (int *)(v155
                                         + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat);
                            swift_beginAccess( v155 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat,  &v159,  0LL,  0LL);
                            int v131 = *v130;
                            char v132 = *((_BYTE *)v130 + 4);
                            uint64_t v133 = v154
                                 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
                            swift_beginAccess( v154 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat,  &v158,  0LL,  0LL);
                            char v134 = *(_BYTE *)(v133 + 4);
                            if ((v132 & 1) == 0)
                            {
                              if (v131 != *(_DWORD *)v133) {
                                char v134 = 1;
                              }
                              if ((v134 & 1) != 0) {
                                goto LABEL_90;
                              }
LABEL_98:
                              char v135 = (uint64_t *)(v155
                                               + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
                              swift_beginAccess( v155 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks,  &v157,  0LL,  0LL);
                              uint64_t v136 = *v135;
                              uint64_t v49 = v154;
                              uint64_t v137 = (uint64_t *)(v154
                                               + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
                              swift_beginAccess( v154 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks,  &v156,  0LL,  0LL);
                              uint64_t v138 = *v137;
                              swift_bridgeObjectRetain(v136);
                              swift_bridgeObjectRetain(v138);
                              char v43 = sub_10005DF7C(v136, v138);
                              swift_bridgeObjectRelease(v136);
                              swift_bridgeObjectRelease(v138);
                              goto LABEL_42;
                            }

                            if (*(_BYTE *)(v133 + 4)) {
                              goto LABEL_98;
                            }
LABEL_90:
                            char v43 = 0;
                            uint64_t v49 = v154;
                            goto LABEL_42;
                          }
                        }

                        else if (v127 >> 60 != 15)
                        {
                          sub_10005F2F8(v123, v124);
                          sub_10005F2F8(v126, v127);
                          sub_1000600A8(v123, v124);
                          char v129 = v128;
                          sub_10005F30C(v126, v127);
                          sub_10005F30C(v123, v124);
                          if ((v129 & 1) == 0) {
                            goto LABEL_90;
                          }
                          goto LABEL_92;
                        }

                        sub_10005F2F8(v123, v124);
                        sub_10005F2F8(v126, v127);
                        sub_10005F30C(v123, v124);
                        sub_10005F30C(v126, v127);
                        goto LABEL_90;
                      }
                    }

LABEL_41:
                    char v43 = 0;
LABEL_42:
                    swift_release(v155);
                    swift_release(v49);
                    return v43 & 1;
                  }
                }

                else
                {
                  uint64_t v84 = v81;
                  uint64_t v85 = v140;
                  sub_10000E6C0(v84, v140, &qword_100351850);
                  if (v61(v82, 1LL, v62) != 1)
                  {
                    uint64_t v87 = v144;
                    sub_100003E68(v82, v144, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                    char v88 = sub_100061BA4(v85, v87);
                    sub_100004090(v87, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                    sub_100015764(v150, &qword_100351850);
                    sub_100004090(v85, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                    sub_100015764(v83, &qword_100351850);
                    if ((v88 & 1) == 0) {
                      goto LABEL_41;
                    }
                    goto LABEL_45;
                  }

                  sub_100015764(v150, &qword_100351850);
                  sub_100004090(v85, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                }

                uint64_t v52 = &qword_100355060;
                uint64_t v53 = v83;
LABEL_40:
                sub_100015764(v53, v52);
                goto LABEL_41;
              }
            }

            else
            {
              uint64_t v74 = v142;
              sub_10000E6C0(v72, v142, &qword_100351850);
              if (v61(v73, 1LL, v62) != 1)
              {
                uint64_t v75 = v72;
                uint64_t v76 = v74;
                uint64_t v77 = v144;
                sub_100003E68(v73, v144, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                char v78 = sub_100061BA4(v76, v77);
                sub_100004090(v77, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                sub_100015764(v153, &qword_100351850);
                sub_100004090(v76, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                sub_100015764(v75, &qword_100351850);
                if ((v78 & 1) == 0) {
                  goto LABEL_41;
                }
                goto LABEL_34;
              }

              sub_100015764(v153, &qword_100351850);
              sub_100004090(v74, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
            }

            uint64_t v52 = &qword_100355060;
            uint64_t v53 = v72;
            goto LABEL_40;
          }

          sub_100015764(v151, &qword_100351850);
          sub_100004090(v65, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
        }

        uint64_t v52 = &qword_100355060;
        uint64_t v53 = v59;
        goto LABEL_40;
      }

      swift_retain(v155);
      uint64_t v49 = v154;
      swift_retain(v154);
      sub_100015764((uint64_t)v33, &qword_100351848);
      sub_100004090((uint64_t)v31, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
    }

    uint64_t v52 = &qword_100355068;
    uint64_t v53 = (uint64_t)v27;
    goto LABEL_40;
  }

  if (*(_BYTE *)(a2 + 20)) {
    goto LABEL_7;
  }
LABEL_9:
  char v43 = 0;
  return v43 & 1;
}

Swift::Int sub_100046354()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  &qword_1003519D0,  (uint64_t)&unk_1002B7234);
}

uint64_t sub_100046370@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD7C(a1, &qword_10036D870, &qword_10036D878, (uint64_t)sub_100043AD8, a2);
}

uint64_t sub_10004638C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100044484(a1, a2, a3);
}

uint64_t sub_1000463A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100044888(a1, a2, a3);
}

uint64_t sub_1000463B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354E70,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  (uint64_t)&unk_1002B71AC);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100046404@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D868, (uint64_t)qword_1003695B0, (uint64_t)sub_100043658, a1);
}

uint64_t sub_100046420(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351E98,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  (uint64_t)&unk_1002B7134);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100046460(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351E98,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  (uint64_t)&unk_1002B7134);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000464B0()
{
  return &unk_10033DF10;
}

unint64_t sub_1000464BC()
{
  return 0xD000000000000024LL;
}

uint64_t sub_1000464D8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003695C8);
  sub_10000E704(v0, (uint64_t)qword_1003695C8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v37 = swift_allocObject(v1, v6 + 14 * v4, v5 | 7);
  *(_OWORD *)(v37 + 16) = xmmword_1002B42F0;
  uint64_t v7 = v37 + v6;
  uint64_t v8 = v37 + v6 + *(int *)(v2 + 48);
  *(void *)(v37 + v6) = 1LL;
  *(void *)uint64_t v8 = "id";
  *(void *)(v8 + 8) = 2LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "sync_state";
  *(void *)(v12 + 8) = 10LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 3LL;
  *(void *)uint64_t v14 = "start_time_nanoseconds";
  *((void *)v14 + 1) = 22LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v7 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *uint64_t v15 = 4LL;
  *(void *)uint64_t v16 = "end_time_nanoseconds";
  *((void *)v16 + 1) = 20LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v7 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "applicability_time_nanoseconds";
  *((void *)v18 + 1) = 30LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v7 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 6LL;
  *(void *)uint64_t v20 = "sv_time";
  *((void *)v20 + 1) = 7LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v7 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  *uint64_t v21 = 7LL;
  *(void *)uint64_t v22 = "frequency_offset";
  *((void *)v22 + 1) = 16LL;
  v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v7 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  *uint64_t v23 = 8LL;
  *(void *)uint64_t v24 = "phase_tracking";
  *((void *)v24 + 1) = 14LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 9LL;
  *(void *)uint64_t v25 = "extension";
  *(void *)(v25 + 8) = 9LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  uint64_t v26 = (void *)(v7 + 9 * v4);
  uint64_t v27 = (char *)v26 + *(int *)(v2 + 48);
  void *v26 = 10LL;
  *(void *)uint64_t v27 = "cn0_dbHz";
  *((void *)v27 + 1) = 8LL;
  v27[16] = 2;
  v11();
  uint64_t v28 = (void *)(v7 + 10 * v4);
  uint64_t v29 = (char *)v28 + *(int *)(v2 + 48);
  *uint64_t v28 = 11LL;
  *(void *)uint64_t v29 = "multipath_indicator";
  *((void *)v29 + 1) = 19LL;
  v29[16] = 2;
  v11();
  uint64_t v30 = (void *)(v7 + 11 * v4);
  uint64_t v31 = (char *)v30 + *(int *)(v2 + 48);
  *uint64_t v30 = 12LL;
  *(void *)uint64_t v31 = "averaged_frequency_offset";
  *((void *)v31 + 1) = 25LL;
  v31[16] = 2;
  v11();
  uint64_t v32 = (void *)(v7 + 12 * v4);
  uint64_t v33 = (char *)v32 + *(int *)(v2 + 48);
  *uint64_t v32 = 13LL;
  *(void *)uint64_t v33 = "is_usable";
  *((void *)v33 + 1) = 9LL;
  v33[16] = 2;
  v11();
  float v34 = (void *)(v7 + 13 * v4);
  char v35 = (char *)v34 + *(int *)(v2 + 48);
  *float v34 = 14LL;
  *(void *)char v35 = "averaged_frequency_offset_from_phase_tracking";
  *((void *)v35 + 1) = 45LL;
  v35[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v37);
}

uint64_t sub_1000468B8()
{
  return sub_100008C30(&qword_10036D880, (uint64_t)qword_1003695C8, (uint64_t)sub_1000464D8);
}

uint64_t sub_1000468D4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D880, (uint64_t)qword_1003695C8, (uint64_t)sub_1000464D8, a1);
}

uint64_t sub_1000468F0()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0LL);
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 1LL, 1LL, v3);
  uint64_t v4 = v1
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = v1
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds;
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  uint64_t v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds;
  *(void *)uint64_t v7 = 0LL;
  *(_BYTE *)(v7 + 8) = 1;
  uint64_t v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds;
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0LL);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL);
  v13(v11, 1LL, 1LL, v12);
  uint64_t v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v14, 1LL, 1LL, v15);
  uint64_t v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v16, 1LL, 1LL, v17);
  uint64_t v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  *(_DWORD *)uint64_t v18 = 0;
  *(_BYTE *)(v18 + 4) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator) = 5;
  v13( v1 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset,  1LL,  1LL,  v12);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable) = 2;
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))( v19,  1LL,  1LL,  v20);
  qword_10036D890 = v1;
  return result;
}

uint64_t sub_100046B1C(uint64_t a1)
{
  uint64_t v3 = sub_100003A0C(&qword_100351878);
  __chkstk_darwin(v3);
  uint64_t v88 = (uint64_t)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100003A0C(&qword_100351870);
  __chkstk_darwin(v5);
  uint64_t v87 = (uint64_t)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100003A0C(&qword_100351868);
  __chkstk_darwin(v7);
  uint64_t v86 = (uint64_t)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100003A0C(&qword_100351840);
  __chkstk_darwin(v9);
  uint64_t v84 = (uint64_t)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100003A0C(&qword_100351838);
  __chkstk_darwin(v11);
  uint64_t v81 = (uint64_t)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100003A0C(&qword_100351860);
  __chkstk_darwin(v13);
  uint64_t v74 = (uint64_t)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100003A0C(&qword_100351858);
  __chkstk_darwin(v15);
  uint64_t v72 = (uint64_t)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  uint64_t v18 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v17, 1LL, 1LL, v18);
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  uint64_t v73 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v19, 1LL, 1LL, v20);
  uint64_t v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds;
  *(void *)uint64_t v21 = 0LL;
  *(_BYTE *)(v21 + 8) = 1;
  uint64_t v22 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds;
  *(void *)uint64_t v22 = 0LL;
  *(_BYTE *)(v22 + 8) = 1;
  uint64_t v23 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds;
  *(void *)uint64_t v23 = 0LL;
  *(_BYTE *)(v23 + 8) = 1;
  uint64_t v24 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  uint64_t v75 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  uint64_t v25 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56LL))(v24, 1LL, 1LL, v25);
  uint64_t v26 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  uint64_t v76 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  uint64_t v27 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0LL);
  uint64_t v28 = *(void (**)(void))(*(void *)(v27 - 8) + 56LL);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v28)(v26, 1LL, 1LL, v27);
  uint64_t v29 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  uint64_t v77 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  uint64_t v30 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(v29, 1LL, 1LL, v30);
  uint64_t v31 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  uint64_t v78 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  uint64_t v32 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56LL))(v31, 1LL, 1LL, v32);
  uint64_t v33 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  uint64_t v79 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  *(_DWORD *)uint64_t v33 = 0;
  *(_BYTE *)(v33 + 4) = 1;
  uint64_t v80 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator) = 5;
  uint64_t v82 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  v28();
  uint64_t v83 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable) = 2;
  uint64_t v34 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  uint64_t v85 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  uint64_t v35 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56LL))(v34, 1LL, 1LL, v35);
  uint64_t v36 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id,  v109,  0LL,  0LL);
  uint64_t v37 = v72;
  sub_10000E6C0(v36, v72, &qword_100351858);
  swift_beginAccess(v17, v108, 33LL, 0LL);
  sub_10000E5D4(v37, v17, &qword_100351858);
  swift_endAccess(v108);
  uint64_t v38 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState,  v108,  0LL,  0LL);
  uint64_t v39 = v74;
  sub_10000E6C0(v38, v74, &qword_100351860);
  uint64_t v40 = v73;
  swift_beginAccess(v73, v107, 33LL, 0LL);
  sub_10000E5D4(v39, v40, &qword_100351860);
  swift_endAccess(v107);
  uint64_t v41 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds,  v107,  0LL,  0LL);
  uint64_t v42 = *v41;
  LOBYTE(v41) = *((_BYTE *)v41 + 8);
  swift_beginAccess(v21, v106, 1LL, 0LL);
  *(void *)uint64_t v21 = v42;
  *(_BYTE *)(v21 + 8) = (_BYTE)v41;
  char v43 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds,  v105,  0LL,  0LL);
  uint64_t v44 = *v43;
  LOBYTE(v43) = *((_BYTE *)v43 + 8);
  swift_beginAccess(v22, v104, 1LL, 0LL);
  *(void *)uint64_t v22 = v44;
  *(_BYTE *)(v22 + 8) = (_BYTE)v43;
  uint64_t v45 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds,  v103,  0LL,  0LL);
  uint64_t v46 = *v45;
  LOBYTE(v45) = *((_BYTE *)v45 + 8);
  swift_beginAccess(v23, &v102, 1LL, 0LL);
  *(void *)uint64_t v23 = v46;
  *(_BYTE *)(v23 + 8) = (_BYTE)v45;
  uint64_t v47 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime,  &v101,  0LL,  0LL);
  uint64_t v48 = v81;
  sub_10000E6C0(v47, v81, &qword_100351838);
  uint64_t v49 = v75;
  swift_beginAccess(v75, v100, 33LL, 0LL);
  sub_10000E5D4(v48, v49, &qword_100351838);
  swift_endAccess(v100);
  uint64_t v50 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset,  v100,  0LL,  0LL);
  uint64_t v51 = v84;
  sub_10000E6C0(v50, v84, &qword_100351840);
  uint64_t v52 = v76;
  swift_beginAccess(v76, v99, 33LL, 0LL);
  sub_10000E5D4(v51, v52, &qword_100351840);
  swift_endAccess(v99);
  uint64_t v53 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking,  v99,  0LL,  0LL);
  uint64_t v54 = v86;
  sub_10000E6C0(v53, v86, &qword_100351868);
  uint64_t v55 = v77;
  swift_beginAccess(v77, v98, 33LL, 0LL);
  sub_10000E5D4(v54, v55, &qword_100351868);
  swift_endAccess(v98);
  uint64_t v56 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension,  v98,  0LL,  0LL);
  uint64_t v57 = v87;
  sub_10000E6C0(v56, v87, &qword_100351870);
  uint64_t v58 = v78;
  swift_beginAccess(v78, v97, 33LL, 0LL);
  sub_10000E5D4(v57, v58, &qword_100351870);
  swift_endAccess(v97);
  uint64_t v59 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz,  v97,  0LL,  0LL);
  LODWORD(v57) = *(_DWORD *)v59;
  LOBYTE(v59) = *(_BYTE *)(v59 + 4);
  uint64_t v60 = v79;
  swift_beginAccess(v79, &v96, 1LL, 0LL);
  *(_DWORD *)uint64_t v60 = v57;
  *(_BYTE *)(v60 + 4) = v59;
  uint64_t v61 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator,  &v95,  0LL,  0LL);
  LOBYTE(v61) = *v61;
  uint64_t v62 = v80;
  swift_beginAccess(v80, &v94, 1LL, 0LL);
  *uint64_t v62 = (_BYTE)v61;
  uint64_t v63 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset,  &v93,  0LL,  0LL);
  sub_10000E6C0(v63, v51, &qword_100351840);
  uint64_t v64 = v82;
  swift_beginAccess(v82, v92, 33LL, 0LL);
  sub_10000E5D4(v51, v64, &qword_100351840);
  swift_endAccess(v92);
  uint64_t v65 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable,  v92,  0LL,  0LL);
  LOBYTE(v65) = *v65;
  uint64_t v66 = v83;
  swift_beginAccess(v83, &v91, 1LL, 0LL);
  *uint64_t v66 = (_BYTE)v65;
  uint64_t v67 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking,  &v90,  0LL,  0LL);
  uint64_t v68 = v88;
  sub_10000E6C0(v67, v88, &qword_100351878);
  swift_release(a1);
  uint64_t v69 = v85;
  swift_beginAccess(v85, v89, 33LL, 0LL);
  sub_10000E5D4(v68, v69, &qword_100351878);
  swift_endAccess(v89);
  return v1;
}

uint64_t sub_100047410()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_1000474F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v9)) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v3 + v9);
    uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0LL);
    uint64_t v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v13 = swift_retain(v10);
    sub_100046B1C(v13);
    uint64_t v14 = *(void *)(v6 + v9);
    *(void *)(v6 + v9) = v12;
    swift_release(v14);
  }

  uint64_t v15 = *(void *)(v6 + v9);
  swift_retain(v15);
  uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1LL:
          uint64_t v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id,  v33,  33LL,  0LL);
          uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL);
          uint64_t v21 = &qword_100351CE8;
          uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_SvId;
          uint64_t v23 = &unk_1002B57E4;
          goto LABEL_23;
        case 2LL:
          uint64_t v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState,  v33,  33LL,  0LL);
          uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL);
          uint64_t v21 = &qword_100351DD8;
          uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState;
          uint64_t v23 = &unk_1002B65F4;
          goto LABEL_23;
        case 3LL:
          uint64_t v24 = OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds;
          goto LABEL_12;
        case 4LL:
          uint64_t v24 = OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds;
          goto LABEL_12;
        case 5LL:
          uint64_t v24 = OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds;
LABEL_12:
          uint64_t v25 = v15 + v24;
          swift_beginAccess(v15 + v24, v33, 33LL, 0LL);
          uint64_t v26 = v5;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v25, a2, a3);
          goto LABEL_24;
        case 6LL:
          uint64_t v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime,  v33,  33LL,  0LL);
          uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0LL);
          uint64_t v21 = &qword_100351DF0;
          uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime;
          uint64_t v23 = &unk_1002B675C;
          goto LABEL_23;
        case 7LL:
          uint64_t v27 = OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
          goto LABEL_20;
        case 8LL:
          uint64_t v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking,  v33,  33LL,  0LL);
          uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0LL);
          uint64_t v21 = &qword_100351E38;
          uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking;
          uint64_t v23 = &unk_1002B6B94;
          goto LABEL_23;
        case 9LL:
          uint64_t v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension,  v33,  33LL,  0LL);
          uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL);
          uint64_t v21 = &qword_100351E98;
          uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension;
          uint64_t v23 = &unk_1002B7134;
          goto LABEL_23;
        case 10LL:
          uint64_t v28 = v15
              + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz,  v33,  33LL,  0LL);
          uint64_t v26 = v5;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v28, a2, a3);
          goto LABEL_24;
        case 11LL:
          uint64_t v29 = v15
              + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator,  v33,  33LL,  0LL);
          unint64_t v30 = sub_10007FB14();
          uint64_t v26 = v5;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v29,  &type metadata for CLP_LogEntry_PrivateData_MultipathIndicator,  v30,  a2,  a3);
          goto LABEL_24;
        case 12LL:
          uint64_t v27 = OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
LABEL_20:
          uint64_t v19 = v15 + v27;
          swift_beginAccess(v15 + v27, v33, 33LL, 0LL);
          uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0LL);
          uint64_t v21 = &qword_100351E08;
          uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset;
          uint64_t v23 = &unk_1002B68C4;
          goto LABEL_23;
        case 13LL:
          uint64_t v31 = v15
              + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable,  v33,  33LL,  0LL);
          uint64_t v26 = v5;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v31, a2, a3);
          goto LABEL_24;
        case 14LL:
          uint64_t v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking,  v33,  33LL,  0LL);
          uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0LL);
          uint64_t v21 = &qword_100351E20;
          uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking;
          uint64_t v23 = &unk_1002B6A2C;
LABEL_23:
          uint64_t v32 = sub_10000FD98(v21, v22, (uint64_t)v23);
          uint64_t v26 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v19, v20, v32, a2, a3);
LABEL_24:
          uint64_t v5 = v26;
          swift_endAccess(v33);
          break;
        default:
          break;
      }

      uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return swift_release(v15);
}

uint64_t sub_100047968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0LL) + 20));
  uint64_t v10 = swift_retain(v9);
  sub_100047CC8(v10, a1, a2, a3);
  if (v4) {
    return swift_release(v9);
  }
  sub_100047E54(v9, a1, a2, a3);
  uint64_t v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds,  &v20,  0LL,  0LL);
  if ((*(_BYTE *)(v12 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(void *)v12, 3LL, a2, a3);
  }
  uint64_t v13 = v9
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds,  v21,  0LL,  0LL);
  if ((*(_BYTE *)(v13 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(void *)v13, 4LL, a2, a3);
  }
  uint64_t v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds,  v25,  0LL,  0LL);
  if ((*(_BYTE *)(v14 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(void *)v14, 5LL, a2, a3);
  }
  sub_100047FE0(v9, a1, a2, a3);
  sub_10004816C(v9, a1, a2, a3);
  sub_1000482F8(v9, a1, a2, a3);
  sub_100048484(v9, a1, a2, a3);
  uint64_t v15 = v9
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz,  v24,  0LL,  0LL);
  if ((*(_BYTE *)(v15 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(10LL, a2, a3, *(float *)v15);
  }
  uint64_t v16 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator,  v23,  0LL,  0LL);
  if (*v16 != 5)
  {
    v22[0] = *v16;
    unint64_t v17 = sub_10007FB14();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v22,  11LL,  &type metadata for CLP_LogEntry_PrivateData_MultipathIndicator,  v17,  a2,  a3);
  }

  sub_100048610(v9, a1, a2, a3);
  uint64_t v18 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable,  v22,  0LL,  0LL);
  int v19 = *v18;
  if (v19 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v19 & 1, 13LL, a2, a3);
  }
  sub_10004879C(v9, a1, a2, a3);
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100047CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100351858);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100351858);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  uint64_t v15 = sub_10000FD98( &qword_100351CE8,  type metadata accessor for CLP_LogEntry_PrivateData_SvId,  (uint64_t)&unk_1002B57E4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_100047E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100351860);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100351860);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  uint64_t v15 = sub_10000FD98( &qword_100351DD8,  type metadata accessor for CLP_LogEntry_PrivateData_SyncState,  (uint64_t)&unk_1002B65F4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
}

uint64_t sub_100047FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100351838);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100351838);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  uint64_t v15 = sub_10000FD98( &qword_100351DF0,  type metadata accessor for CLP_LogEntry_PrivateData_SvTime,  (uint64_t)&unk_1002B675C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 6LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_10004816C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100351840);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100351840);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  uint64_t v15 = sub_10000FD98( &qword_100351E08,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset,  (uint64_t)&unk_1002B68C4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 7LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_1000482F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100351868);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100351868);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  uint64_t v15 = sub_10000FD98( &qword_100351E38,  type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking,  (uint64_t)&unk_1002B6B94);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 8LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_100048484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100351870);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100351870);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  uint64_t v15 = sub_10000FD98( &qword_100351E98,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  (uint64_t)&unk_1002B7134);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 9LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t sub_100048610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100351840);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100351840);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  uint64_t v15 = sub_10000FD98( &qword_100351E08,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset,  (uint64_t)&unk_1002B68C4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 12LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_10004879C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100351878);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100351878);
  sub_100003E68( (uint64_t)v8,  (uint64_t)v12,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  uint64_t v15 = sub_10000FD98( &qword_100351E20,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking,  (uint64_t)&unk_1002B6A2C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 14LL, v9, v15, a3, v18);
  return sub_100004090( (uint64_t)v12,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t sub_100048928(uint64_t a1, uint64_t a2)
{
  return sub_100065AC0( a1,  a2,  type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  (uint64_t (*)(uint64_t, uint64_t))sub_100048950) & 1;
}

BOOL sub_100048950(uint64_t a1, char *a2)
{
  uint64_t v231 = a2;
  uint64_t v189 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0LL);
  uint64_t v187 = *(void *)(v189 - 8);
  __chkstk_darwin(v189);
  uint64_t v184 = (uint64_t)&v183 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v186 = sub_100003A0C(&qword_100355018);
  __chkstk_darwin(v186);
  uint64_t v190 = (uint64_t)&v183 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100003A0C(&qword_100351878);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v185 = (uint64_t)&v183 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v188 = (uint64_t)&v183 - v8;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0LL);
  uint64_t v198 = *(void *)(v9 - 8);
  uint64_t v199 = v9;
  __chkstk_darwin(v9);
  uint64_t v194 = (uint64_t)&v183 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v197 = sub_100003A0C(&qword_100355020);
  __chkstk_darwin(v197);
  uint64_t v200 = (uint64_t)&v183 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100003A0C(&qword_100351870);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v195 = (uint64_t)&v183 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v227 = (char *)&v183 - v15;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0LL);
  uint64_t v204 = *(void *)(v16 - 8);
  uint64_t v205 = v16;
  __chkstk_darwin(v16);
  uint64_t v196 = (uint64_t)&v183 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v203 = sub_100003A0C(&qword_100355028);
  __chkstk_darwin(v203);
  uint64_t v206 = (uint64_t)&v183 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_100003A0C(&qword_100351868);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v201 = (uint64_t)&v183 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  uint64_t v218 = (uint64_t)&v183 - v22;
  uint64_t v212 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0LL);
  uint64_t v209 = *(void *)(v212 - 8);
  __chkstk_darwin(v212);
  uint64_t v202 = (uint64_t)&v183 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v211 = sub_100003A0C(&qword_100355030);
  uint64_t v24 = __chkstk_darwin(v211);
  uint64_t v193 = (uint64_t)&v183 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24);
  uint64_t v210 = (uint64_t)&v183 - v26;
  uint64_t v27 = sub_100003A0C(&qword_100351840);
  uint64_t v28 = __chkstk_darwin(v27);
  uint64_t v191 = (uint64_t)&v183 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v192 = (uint64_t)&v183 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v207 = (uint64_t)&v183 - v33;
  __chkstk_darwin(v32);
  uint64_t v228 = (uint64_t)&v183 - v34;
  uint64_t v216 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0LL);
  uint64_t v214 = *(void *)(v216 - 8);
  __chkstk_darwin(v216);
  uint64_t v208 = (uint64_t)&v183 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v213 = sub_100003A0C(&qword_100355038);
  __chkstk_darwin(v213);
  uint64_t v217 = (uint64_t)&v183 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = sub_100003A0C(&qword_100351838);
  uint64_t v38 = __chkstk_darwin(v37);
  uint64_t v215 = (uint64_t)&v183 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v38);
  uint64_t v219 = (uint64_t)&v183 - v40;
  uint64_t v41 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0LL);
  uint64_t v224 = *(void *)(v41 - 8);
  uint64_t v225 = v41;
  __chkstk_darwin(v41);
  uint64_t v220 = (uint64_t)&v183 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v223 = sub_100003A0C(&qword_100355040);
  __chkstk_darwin(v223);
  uint64_t v226 = (uint64_t)&v183 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = sub_100003A0C(&qword_100351860);
  uint64_t v45 = __chkstk_darwin(v44);
  uint64_t v221 = (uint64_t)&v183 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v45);
  uint64_t v230 = (uint64_t)&v183 - v47;
  uint64_t v48 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL);
  uint64_t v49 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v222 = (uint64_t)&v183 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v51 = sub_100003A0C(&qword_100354FA8);
  __chkstk_darwin(v51);
  uint64_t v53 = (char *)&v183 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = sub_100003A0C(&qword_100351858);
  uint64_t v55 = __chkstk_darwin(v54);
  uint64_t v229 = (uint64_t)&v183 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v55);
  uint64_t v58 = (char *)&v183 - v57;
  uint64_t v59 = a1;
  uint64_t v60 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess(v60, v259, 0LL, 0LL);
  sub_10000E6C0(v60, (uint64_t)v58, &qword_100351858);
  uint64_t v61 = v231;
  uint64_t v62 = (uint64_t)&v231[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id];
  swift_beginAccess( &v231[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id],  v258,  0LL,  0LL);
  uint64_t v63 = (uint64_t)&v53[*(int *)(v51 + 48)];
  sub_10000E6C0((uint64_t)v58, (uint64_t)v53, &qword_100351858);
  sub_10000E6C0(v62, v63, &qword_100351858);
  uint64_t v64 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
  if (v64((uint64_t)v53, 1LL, v48) == 1)
  {
    swift_retain(v59);
    swift_retain(v61);
    sub_100015764((uint64_t)v58, &qword_100351858);
    uint64_t v65 = v59;
    if (v64(v63, 1LL, v48) == 1)
    {
      sub_100015764((uint64_t)v53, &qword_100351858);
      goto LABEL_8;
    }

LABEL_40:
    uint64_t v67 = &qword_100355038;
    uint64_t v68 = v104;
    goto LABEL_15;
  }

  sub_10000E6C0(v104, v215, &qword_100351838);
  uint64_t v110 = v105;
  int v111 = v106(v105, 1LL, v107);
  uint64_t v112 = v218;
  if (v111 == 1)
  {
    sub_100015764(v219, &qword_100351838);
    sub_100004090(v215, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
    goto LABEL_40;
  }

  uint64_t v113 = v208;
  sub_100003E68(v110, v208, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  uint64_t v114 = v112;
  uint64_t v115 = v215;
  LODWORD(v231) = sub_100065904(v215, v113, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  sub_100004090(v113, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  sub_100015764(v219, &qword_100351838);
  uint64_t v116 = v115;
  uint64_t v109 = v114;
  sub_100004090(v116, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  sub_100015764(v104, &qword_100351838);
LABEL_42:
  uint64_t v117 = v65
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  swift_beginAccess( v65 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset,  &v247,  0LL,  0LL);
  sub_10000E6C0(v117, v80, &qword_100351840);
  uint64_t v118 = (uint64_t)&v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset];
  swift_beginAccess( &v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset],  &v246,  0LL,  0LL);
  uint64_t v119 = v80;
  uint64_t v120 = v210;
  uint64_t v121 = v210 + *(int *)(v211 + 48);
  sub_10000E6C0(v119, v210, &qword_100351840);
  uint64_t v122 = v118;
  uint64_t v75 = v120;
  sub_10000E6C0(v122, v121, &qword_100351840);
  uint64_t v123 = *(char **)(v209 + 48);
  uint64_t v124 = v212;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v123)(v75, 1LL, v212) == 1)
  {
    sub_100015764(v119, &qword_100351840);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v123)(v121, 1LL, v124) == 1)
    {
      uint64_t v231 = v123;
      sub_100015764(v75, &qword_100351840);
      goto LABEL_49;
    }

    goto LABEL_47;
  }

  char v125 = v123;
  uint64_t v126 = v207;
  sub_10000E6C0(v75, v207, &qword_100351840);
  uint64_t v231 = v125;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v125)(v121, 1LL, v124) == 1)
  {
    sub_100015764(v228, &qword_100351840);
    sub_100004090(v126, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
LABEL_47:
    uint64_t v67 = &qword_100355030;
    goto LABEL_14;
  }

  uint64_t v127 = v75;
  uint64_t v128 = v202;
  sub_100003E68(v121, v202, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  char v129 = sub_100065904(v126, v128, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  sub_100004090(v128, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  sub_100015764(v228, &qword_100351840);
  sub_100004090(v126, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  sub_100015764(v127, &qword_100351840);
  if ((v129 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_49:
  uint64_t v130 = v65
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess( v65 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking,  &v245,  0LL,  0LL);
  sub_10000E6C0(v130, v109, &qword_100351868);
  uint64_t v131 = (uint64_t)&v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking];
  swift_beginAccess( &v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking],  &v244,  0LL,  0LL);
  uint64_t v132 = v206;
  uint64_t v133 = v206 + *(int *)(v203 + 48);
  sub_10000E6C0(v109, v206, &qword_100351868);
  uint64_t v134 = v131;
  uint64_t v75 = v132;
  sub_10000E6C0(v134, v133, &qword_100351868);
  char v135 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v204 + 48);
  uint64_t v136 = v132;
  uint64_t v137 = v205;
  if (v135(v136, 1LL, v205) == 1)
  {
    sub_100015764(v109, &qword_100351868);
    if (v135(v133, 1LL, v137) == 1)
    {
      sub_100015764(v75, &qword_100351868);
      goto LABEL_56;
    }

    goto LABEL_54;
  }

  uint64_t v138 = v201;
  sub_10000E6C0(v75, v201, &qword_100351868);
  if (v135(v133, 1LL, v137) == 1)
  {
    sub_100015764(v218, &qword_100351868);
    sub_100004090(v138, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
LABEL_54:
    uint64_t v67 = &qword_100355028;
    goto LABEL_14;
  }

  uint64_t v139 = v196;
  sub_100003E68(v133, v196, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  char v140 = sub_100063F58(v138, v139);
  sub_100004090(v139, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  sub_100015764(v218, &qword_100351868);
  sub_100004090(v138, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  sub_100015764(v75, &qword_100351868);
  if ((v140 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_56:
  uint64_t v141 = v65
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess( v65 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension,  &v243,  0LL,  0LL);
  sub_10000E6C0(v141, v81, &qword_100351870);
  uint64_t v142 = (uint64_t)&v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension];
  swift_beginAccess( &v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension],  &v242,  0LL,  0LL);
  uint64_t v143 = v200;
  uint64_t v144 = v200 + *(int *)(v197 + 48);
  sub_10000E6C0(v81, v200, &qword_100351870);
  uint64_t v145 = v142;
  uint64_t v75 = v143;
  sub_10000E6C0(v145, v144, &qword_100351870);
  uint64_t v146 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v198 + 48);
  uint64_t v147 = v143;
  uint64_t v148 = v199;
  if (v146(v147, 1LL, v199) == 1)
  {
    sub_100015764(v81, &qword_100351870);
    if (v146(v144, 1LL, v148) == 1)
    {
      sub_100015764(v75, &qword_100351870);
      goto LABEL_63;
    }

    goto LABEL_61;
  }

  uint64_t v149 = v195;
  sub_10000E6C0(v75, v195, &qword_100351870);
  if (v146(v144, 1LL, v148) == 1)
  {
    sub_100015764(v81, &qword_100351870);
    sub_100004090(v149, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
LABEL_61:
    uint64_t v67 = &qword_100355020;
    goto LABEL_14;
  }

  uint64_t v150 = v194;
  sub_100003E68(v144, v194, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  char v151 = sub_100065AC0( v149,  v150,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  sub_1000453EC);
  sub_100004090(v150, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  sub_100015764(v81, &qword_100351870);
  sub_100004090(v149, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  sub_100015764(v75, &qword_100351870);
  if ((v151 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_63:
  uint64_t v152 = v65
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  swift_beginAccess( v65 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz,  &v241,  0LL,  0LL);
  float v153 = *(float *)v152;
  char v154 = *(_BYTE *)(v152 + 4);
  uint64_t v155 = &v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz];
  swift_beginAccess( &v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz],  &v240,  0LL,  0LL);
  if ((v154 & 1) != 0)
  {
    if ((v155[4] & 1) != 0) {
      goto LABEL_68;
    }
LABEL_16:
    swift_release(v65);
    uint64_t v84 = v61;
LABEL_17:
    swift_release(v84);
    return 0LL;
  }

LABEL_68:
  uint64_t v156 = v65;
  uint64_t v157 = (unsigned __int8 *)(v65
                           + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
  swift_beginAccess( v65 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator,  &v239,  0LL,  0LL);
  int v158 = *v157;
  uint64_t v159 = v61;
  uint64_t v160 = &v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator];
  swift_beginAccess( &v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator],  &v238,  0LL,  0LL);
  int v161 = *v160;
  if (v158 == 5)
  {
    if (v161 != 5) {
      goto LABEL_79;
    }
  }

  else if (v161 == 5 || v158 != v161)
  {
    goto LABEL_79;
  }

  uint64_t v162 = v65
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  swift_beginAccess( v65 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset,  &v237,  0LL,  0LL);
  uint64_t v163 = v192;
  sub_10000E6C0(v162, v192, &qword_100351840);
  uint64_t v164 = (uint64_t)&v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset];
  swift_beginAccess( &v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset],  &v236,  0LL,  0LL);
  uint64_t v165 = v193;
  uint64_t v166 = v193 + *(int *)(v211 + 48);
  sub_10000E6C0(v163, v193, &qword_100351840);
  sub_10000E6C0(v164, v166, &qword_100351840);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v231)(v165, 1LL, v212) == 1)
  {
    sub_100015764(v192, &qword_100351840);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v231)(v166, 1LL, v212) == 1)
    {
      sub_100015764(v193, &qword_100351840);
      goto LABEL_81;
    }

LABEL_78:
    sub_100015764(v193, &qword_100355030);
    goto LABEL_79;
  }

  sub_10000E6C0(v193, v191, &qword_100351840);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v231)(v166, 1LL, v212) == 1)
  {
    sub_100015764(v192, &qword_100351840);
    sub_100004090(v191, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
    goto LABEL_78;
  }

  uint64_t v167 = v202;
  sub_100003E68(v166, v202, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  uint64_t v168 = v191;
  char v169 = sub_100065904(v191, v167, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  sub_100004090(v167, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  sub_100015764(v192, &qword_100351840);
  sub_100004090(v168, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  sub_100015764(v193, &qword_100351840);
  if ((v169 & 1) == 0) {
    goto LABEL_79;
  }
LABEL_81:
  uint64_t v170 = (unsigned __int8 *)(v156
                           + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  swift_beginAccess( v156 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable,  &v235,  0LL,  0LL);
  int v171 = *v170;
  uint64_t v172 = &v159[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable];
  swift_beginAccess( &v159[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable],  &v234,  0LL,  0LL);
  int v173 = *v172;
  if (v171 == 2)
  {
    if (v173 == 2) {
      goto LABEL_86;
    }
LABEL_79:
    swift_release(v156);
    uint64_t v84 = v159;
    goto LABEL_17;
  }

  if (v173 == 2 || ((((v173 & 1) == 0) ^ v171) & 1) == 0) {
    goto LABEL_79;
  }
LABEL_86:
  uint64_t v174 = v156
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess( v156 + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking,  &v233,  0LL,  0LL);
  uint64_t v175 = v188;
  sub_10000E6C0(v174, v188, &qword_100351878);
  uint64_t v176 = (uint64_t)&v159[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking];
  swift_beginAccess( &v159[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking],  &v232,  0LL,  0LL);
  uint64_t v177 = v190;
  uint64_t v178 = v190 + *(int *)(v186 + 48);
  sub_10000E6C0(v175, v190, &qword_100351878);
  sub_10000E6C0(v176, v178, &qword_100351878);
  uint64_t v179 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v187 + 48);
  if (v179(v177, 1LL, v189) == 1)
  {
    swift_release(v156);
    swift_release(v159);
    sub_100015764(v188, &qword_100351878);
    if (v179(v178, 1LL, v189) == 1)
    {
      sub_100015764(v190, &qword_100351878);
      return 1LL;
    }

    v335 = &qword_100367590;
    v336 = v879;
LABEL_233:
    sub_100015764(v336, v335);
    v324 = v652;
    goto LABEL_69;
  }

  sub_10000E6C0(v879, v874, &qword_100364468);
  if (v333(v332, 1LL, v334) == 1)
  {
    sub_100015764(v878, &qword_100364468);
    sub_100004090(v874, type metadata accessor for Proto_Gpsd_SetAssistanceMotionActivityContext);
    goto LABEL_78;
  }

  v337 = v861;
  sub_100003E68(v332, v861, type metadata accessor for Proto_Gpsd_SetAssistanceMotionActivityContext);
  v338 = v874;
  v339 = sub_100274DB4(v874, v337);
  sub_100004090(v337, type metadata accessor for Proto_Gpsd_SetAssistanceMotionActivityContext);
  sub_100015764(v878, &qword_100364468);
  sub_100004090(v338, type metadata accessor for Proto_Gpsd_SetAssistanceMotionActivityContext);
  sub_100015764(v879, &qword_100364468);
  if ((v339 & 1) == 0) {
    goto LABEL_316;
  }
LABEL_80:
  v340 = v652
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceMountState;
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceMountState,  &v996,  0LL,  0LL);
  v341 = v869;
  sub_10000E6C0(v340, v869, &qword_100364470);
  v342 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceMountState;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceMountState,  &v995,  0LL,  0LL);
  v343 = v871;
  v344 = v871 + *(int *)(v865 + 48);
  sub_10000E6C0(v341, v871, &qword_100364470);
  sub_10000E6C0(v342, v344, &qword_100364470);
  v345 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v866 + 48);
  if (v345(v343, 1LL, v870) == 1)
  {
    sub_100015764(v869, &qword_100364470);
    if (v345(v344, 1LL, v870) == 1)
    {
      sub_100015764(v871, &qword_100364470);
      goto LABEL_87;
    }

    goto LABEL_85;
  }

  sub_10000E6C0(v871, v867, &qword_100364470);
  if (v345(v344, 1LL, v870) == 1)
  {
    sub_100015764(v869, &qword_100364470);
    sub_100004090(v867, type metadata accessor for Proto_Gpsd_SetAssistanceMountState);
LABEL_85:
    v335 = &qword_100367588;
    v336 = v871;
    goto LABEL_233;
  }

  v346 = v854;
  sub_100003E68(v344, v854, type metadata accessor for Proto_Gpsd_SetAssistanceMountState);
  v347 = v867;
  v348 = sub_100275360(v867, v346);
  sub_100004090(v346, type metadata accessor for Proto_Gpsd_SetAssistanceMountState);
  sub_100015764(v869, &qword_100364470);
  sub_100004090(v347, type metadata accessor for Proto_Gpsd_SetAssistanceMountState);
  sub_100015764(v871, &qword_100364470);
  if ((v348 & 1) == 0) {
    goto LABEL_316;
  }
LABEL_87:
  v349 = v652
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceSignalEnvironment;
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceSignalEnvironment,  &v994,  0LL,  0LL);
  v350 = v862;
  sub_10000E6C0(v349, v862, &qword_100364478);
  v351 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceSignalEnvironment;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceSignalEnvironment,  &v993,  0LL,  0LL);
  v352 = v864;
  v353 = v864 + *(int *)(v858 + 48);
  sub_10000E6C0(v350, v864, &qword_100364478);
  sub_10000E6C0(v351, v353, &qword_100364478);
  v354 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v859 + 48);
  if (v354(v352, 1LL, v863) == 1)
  {
    sub_100015764(v862, &qword_100364478);
    if (v354(v353, 1LL, v863) == 1)
    {
      sub_100015764(v864, &qword_100364478);
      goto LABEL_94;
    }

    goto LABEL_92;
  }

  sub_10000E6C0(v864, v860, &qword_100364478);
  if (v354(v353, 1LL, v863) == 1)
  {
    sub_100015764(v862, &qword_100364478);
    sub_100004090(v860, type metadata accessor for Proto_Gpsd_SetAssistanceSignalEnvironment);
LABEL_92:
    v335 = &qword_100367580;
    v336 = v864;
    goto LABEL_233;
  }

  v355 = v847;
  sub_100003E68(v353, v847, type metadata accessor for Proto_Gpsd_SetAssistanceSignalEnvironment);
  v356 = v860;
  v357 = sub_100275008(v860, v355);
  sub_100004090(v355, type metadata accessor for Proto_Gpsd_SetAssistanceSignalEnvironment);
  sub_100015764(v862, &qword_100364478);
  sub_100004090(v356, type metadata accessor for Proto_Gpsd_SetAssistanceSignalEnvironment);
  sub_100015764(v864, &qword_100364478);
  if ((v357 & 1) == 0) {
    goto LABEL_316;
  }
LABEL_94:
  v358 = v652
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceSpeedConstraint;
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceSpeedConstraint,  &v992,  0LL,  0LL);
  v359 = v855;
  sub_10000E6C0(v358, v855, &qword_100364480);
  v360 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceSpeedConstraint;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceSpeedConstraint,  &v991,  0LL,  0LL);
  v361 = v857;
  v362 = v857 + *(int *)(v851 + 48);
  sub_10000E6C0(v359, v857, &qword_100364480);
  sub_10000E6C0(v360, v362, &qword_100364480);
  v363 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v852 + 48);
  if (v363(v361, 1LL, v856) == 1)
  {
    sub_100015764(v855, &qword_100364480);
    if (v363(v362, 1LL, v856) == 1)
    {
      sub_100015764(v857, &qword_100364480);
      goto LABEL_101;
    }

    goto LABEL_99;
  }

  sub_10000E6C0(v857, v853, &qword_100364480);
  if (v363(v362, 1LL, v856) == 1)
  {
    sub_100015764(v855, &qword_100364480);
    sub_100004090(v853, type metadata accessor for Proto_Gpsd_SetAssistanceSpeedConstraint);
LABEL_99:
    v335 = &qword_100367578;
    v336 = v857;
    goto LABEL_233;
  }

  v364 = v840;
  sub_100003E68(v362, v840, type metadata accessor for Proto_Gpsd_SetAssistanceSpeedConstraint);
  v365 = v853;
  v366 = sub_10027517C(v853, v364);
  sub_100004090(v364, type metadata accessor for Proto_Gpsd_SetAssistanceSpeedConstraint);
  sub_100015764(v855, &qword_100364480);
  sub_100004090(v365, type metadata accessor for Proto_Gpsd_SetAssistanceSpeedConstraint);
  sub_100015764(v857, &qword_100364480);
  if ((v366 & 1) == 0) {
    goto LABEL_316;
  }
LABEL_101:
  v367 = v652
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceAlongTrackVelocity;
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceAlongTrackVelocity,  &v990,  0LL,  0LL);
  v368 = v848;
  sub_10000E6C0(v367, v848, &qword_100364488);
  v369 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceAlongTrackVelocity;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceAlongTrackVelocity,  &v989,  0LL,  0LL);
  v370 = v850;
  v371 = v850 + *(int *)(v843 + 48);
  sub_10000E6C0(v368, v850, &qword_100364488);
  sub_10000E6C0(v369, v371, &qword_100364488);
  v372 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v844 + 48);
  if (v372(v370, 1LL, v849) == 1)
  {
    sub_100015764(v848, &qword_100364488);
    if (v372(v371, 1LL, v849) == 1)
    {
      sub_100015764(v850, &qword_100364488);
      goto LABEL_108;
    }

    goto LABEL_106;
  }

  sub_10000E6C0(v850, v845, &qword_100364488);
  if (v372(v371, 1LL, v849) == 1)
  {
    sub_100015764(v848, &qword_100364488);
    sub_100004090(v845, type metadata accessor for Proto_Gpsd_SetAssistanceAlongTrackVelocity);
LABEL_106:
    v335 = &qword_100367570;
    v336 = v850;
    goto LABEL_233;
  }

  v373 = v833;
  sub_100003E68(v371, v833, type metadata accessor for Proto_Gpsd_SetAssistanceAlongTrackVelocity);
  v374 = v845;
  v375 = sub_100276CD4(v845, v373, type metadata accessor for Proto_Gpsd_SetAssistanceAlongTrackVelocity);
  sub_100004090(v373, type metadata accessor for Proto_Gpsd_SetAssistanceAlongTrackVelocity);
  sub_100015764(v848, &qword_100364488);
  sub_100004090(v374, type metadata accessor for Proto_Gpsd_SetAssistanceAlongTrackVelocity);
  sub_100015764(v850, &qword_100364488);
  if ((v375 & 1) == 0) {
    goto LABEL_316;
  }
LABEL_108:
  v376 = v652
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__injectAssistanceFile;
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__injectAssistanceFile,  &v988,  0LL,  0LL);
  v377 = v842;
  sub_10000E6C0(v376, v842, &qword_100364490);
  v378 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__injectAssistanceFile;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__injectAssistanceFile,  &v987,  0LL,  0LL);
  v379 = v846;
  v380 = v846 + *(int *)(v836 + 48);
  sub_10000E6C0(v377, v846, &qword_100364490);
  sub_10000E6C0(v378, v380, &qword_100364490);
  v381 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v837 + 48);
  if (v381(v379, 1LL, v841) == 1)
  {
    sub_100015764(v842, &qword_100364490);
    if (v381(v380, 1LL, v841) == 1)
    {
      sub_100015764(v846, &qword_100364490);
      goto LABEL_115;
    }

    goto LABEL_113;
  }

  sub_10000E6C0(v846, v839, &qword_100364490);
  if (v381(v380, 1LL, v841) == 1)
  {
    sub_100015764(v842, &qword_100364490);
    sub_100004090(v839, type metadata accessor for Proto_Gpsd_InjectAssistanceFile);
LABEL_113:
    v335 = &qword_100367568;
    v336 = v846;
    goto LABEL_233;
  }

  v382 = v829;
  sub_100003E68(v380, v829, type metadata accessor for Proto_Gpsd_InjectAssistanceFile);
  v383 = v839;
  v384 = sub_100275D94(v839, v382);
  sub_100004090(v382, type metadata accessor for Proto_Gpsd_InjectAssistanceFile);
  sub_100015764(v842, &qword_100364490);
  sub_100004090(v383, type metadata accessor for Proto_Gpsd_InjectAssistanceFile);
  sub_100015764(v846, &qword_100364490);
  if ((v384 & 1) == 0) {
    goto LABEL_316;
  }
LABEL_115:
  v385 = v652
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__injectRtiFile;
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__injectRtiFile,  &v986,  0LL,  0LL);
  v386 = v835;
  sub_10000E6C0(v385, v835, &qword_100364498);
  v387 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__injectRtiFile;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__injectRtiFile,  &v985,  0LL,  0LL);
  v388 = v838;
  v389 = v838 + *(int *)(v830 + 48);
  sub_10000E6C0(v386, v838, &qword_100364498);
  sub_10000E6C0(v387, v389, &qword_100364498);
  v390 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v831 + 48);
  if (v390(v388, 1LL, v834) == 1)
  {
    sub_100015764(v835, &qword_100364498);
    if (v390(v389, 1LL, v834) == 1)
    {
      sub_100015764(v838, &qword_100364498);
      goto LABEL_122;
    }

    goto LABEL_120;
  }

  sub_10000E6C0(v838, v832, &qword_100364498);
  if (v390(v389, 1LL, v834) == 1)
  {
    sub_100015764(v835, &qword_100364498);
    sub_100004090(v832, type metadata accessor for Proto_Gpsd_InjectRtiFile);
LABEL_120:
    v335 = &qword_100367560;
    v336 = v838;
    goto LABEL_233;
  }

  v391 = v823;
  sub_100003E68(v389, v823, type metadata accessor for Proto_Gpsd_InjectRtiFile);
  v392 = v832;
  v393 = sub_100277544(v832, v391);
  sub_100004090(v391, type metadata accessor for Proto_Gpsd_InjectRtiFile);
  sub_100015764(v835, &qword_100364498);
  sub_100004090(v392, type metadata accessor for Proto_Gpsd_InjectRtiFile);
  sub_100015764(v838, &qword_100364498);
  if ((v393 & 1) == 0) {
    goto LABEL_316;
  }
LABEL_122:
  v394 = v652
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__injectSvidBlocklist;
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__injectSvidBlocklist,  &v984,  0LL,  0LL);
  v395 = v826;
  sub_10000E6C0(v394, v826, &qword_1003644A0);
  v396 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__injectSvidBlocklist;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__injectSvidBlocklist,  &v983,  0LL,  0LL);
  v397 = v828;
  v398 = v828 + *(int *)(v824 + 48);
  sub_10000E6C0(v395, v828, &qword_1003644A0);
  sub_10000E6C0(v396, v398, &qword_1003644A0);
  v399 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v825 + 48);
  if (v399(v397, 1LL, v827) == 1)
  {
    sub_100015764(v826, &qword_1003644A0);
    if (v399(v398, 1LL, v827) == 1)
    {
      sub_100015764(v828, &qword_1003644A0);
      goto LABEL_129;
    }

    goto LABEL_127;
  }

  sub_10000E6C0(v828, (uint64_t)v653, &qword_1003644A0);
  if (v399(v398, 1LL, v827) == 1)
  {
    sub_100015764(v826, &qword_1003644A0);
    sub_100004090((uint64_t)v653, type metadata accessor for Proto_Gpsd_InjectSvidBlocklist);
LABEL_127:
    v335 = &qword_100367558;
    v336 = v828;
    goto LABEL_233;
  }

  v400 = v654;
  sub_100003E68(v398, (uint64_t)v654, type metadata accessor for Proto_Gpsd_InjectSvidBlocklist);
  v401 = v653;
  v402 = sub_100276128( v653,  v400,  type metadata accessor for Proto_Gnss_SvId,  &qword_100363440,  (uint64_t)&unk_1002D8C88,  type metadata accessor for Proto_Gpsd_InjectSvidBlocklist);
  sub_100004090((uint64_t)v400, type metadata accessor for Proto_Gpsd_InjectSvidBlocklist);
  sub_100015764(v826, &qword_1003644A0);
  sub_100004090((uint64_t)v401, type metadata accessor for Proto_Gpsd_InjectSvidBlocklist);
  sub_100015764(v828, &qword_1003644A0);
  if ((v402 & 1) == 0) {
    goto LABEL_316;
  }
LABEL_129:
  v403 = v652
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__deleteGnssData;
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__deleteGnssData,  &v982,  0LL,  0LL);
  v404 = v657;
  sub_10000E6C0(v403, v657, &qword_1003644A8);
  v405 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__deleteGnssData;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__deleteGnssData,  &v981,  0LL,  0LL);
  v406 = v661;
  v407 = v661 + *(int *)(v655 + 48);
  sub_10000E6C0(v404, v661, &qword_1003644A8);
  sub_10000E6C0(v405, v407, &qword_1003644A8);
  v408 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v656 + 48);
  if (v408(v406, 1LL, v659) == 1)
  {
    sub_100015764(v657, &qword_1003644A8);
    if (v408(v407, 1LL, v659) == 1)
    {
      sub_100015764(v661, &qword_1003644A8);
      goto LABEL_136;
    }

    goto LABEL_134;
  }

  sub_10000E6C0(v661, v658, &qword_1003644A8);
  if (v408(v407, 1LL, v659) == 1)
  {
    sub_100015764(v657, &qword_1003644A8);
    sub_100004090(v658, type metadata accessor for Proto_Gpsd_DeleteGnssData);
LABEL_134:
    v335 = &qword_100367550;
    v336 = v661;
    goto LABEL_233;
  }

  v409 = v660;
  sub_100003E68(v407, v660, type metadata accessor for Proto_Gpsd_DeleteGnssData);
  v410 = v658;
  v411 = sub_100277190(v658, v409, type metadata accessor for Proto_Gpsd_DeleteGnssData);
  sub_100004090(v409, type metadata accessor for Proto_Gpsd_DeleteGnssData);
  sub_100015764(v657, &qword_1003644A8);
  sub_100004090(v410, type metadata accessor for Proto_Gpsd_DeleteGnssData);
  sub_100015764(v661, &qword_1003644A8);
  if ((v411 & 1) == 0) {
    goto LABEL_316;
  }
LABEL_136:
  v412 = v652
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setPvtmReport;
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setPvtmReport,  &v980,  0LL,  0LL);
  v413 = v664;
  sub_10000E6C0(v412, v664, &qword_1003644B0);
  v414 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setPvtmReport;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setPvtmReport,  &v979,  0LL,  0LL);
  v415 = v668;
  v416 = v668 + *(int *)(v662 + 48);
  sub_10000E6C0(v413, v668, &qword_1003644B0);
  sub_10000E6C0(v414, v416, &qword_1003644B0);
  v417 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v663 + 48);
  if (v417(v415, 1LL, v666) == 1)
  {
    sub_100015764(v664, &qword_1003644B0);
    if (v417(v416, 1LL, v666) == 1)
    {
      sub_100015764(v668, &qword_1003644B0);
      goto LABEL_143;
    }

    goto LABEL_141;
  }

  sub_10000E6C0(v668, v665, &qword_1003644B0);
  if (v417(v416, 1LL, v666) == 1)
  {
    sub_100015764(v664, &qword_1003644B0);
    sub_100004090(v665, type metadata accessor for Proto_Gpsd_SetPvtmReport);
LABEL_141:
    v335 = &qword_100367548;
    v336 = v668;
    goto LABEL_233;
  }

  v418 = v667;
  sub_100003E68(v416, v667, type metadata accessor for Proto_Gpsd_SetPvtmReport);
  v419 = v665;
  v420 = sub_1002772DC(v665, v418);
  sub_100004090(v418, type metadata accessor for Proto_Gpsd_SetPvtmReport);
  sub_100015764(v664, &qword_1003644B0);
  sub_100004090(v419, type metadata accessor for Proto_Gpsd_SetPvtmReport);
  sub_100015764(v668, &qword_1003644B0);
  if ((v420 & 1) == 0) {
    goto LABEL_316;
  }
LABEL_143:
  v421 = v652
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setNmeaHandler;
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setNmeaHandler,  &v978,  0LL,  0LL);
  v422 = v671;
  sub_10000E6C0(v421, v671, &qword_1003644B8);
  v423 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setNmeaHandler;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setNmeaHandler,  &v977,  0LL,  0LL);
  v424 = v675;
  v425 = v675 + *(int *)(v669 + 48);
  sub_10000E6C0(v422, v675, &qword_1003644B8);
  sub_10000E6C0(v423, v425, &qword_1003644B8);
  v426 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v670 + 48);
  if (v426(v424, 1LL, v673) == 1)
  {
    sub_100015764(v671, &qword_1003644B8);
    if (v426(v425, 1LL, v673) == 1)
    {
      sub_100015764(v675, &qword_1003644B8);
      goto LABEL_150;
    }

    goto LABEL_148;
  }

  sub_10000E6C0(v675, v672, &qword_1003644B8);
  if (v426(v425, 1LL, v673) == 1)
  {
    sub_100015764(v671, &qword_1003644B8);
    sub_100004090(v672, type metadata accessor for Proto_Gpsd_SetNmeaHandler);
LABEL_148:
    v335 = &qword_100367540;
    v336 = v675;
    goto LABEL_233;
  }

  v427 = v674;
  sub_100003E68(v425, v674, type metadata accessor for Proto_Gpsd_SetNmeaHandler);
  v428 = v672;
  v429 = sub_100277190(v672, v427, type metadata accessor for Proto_Gpsd_SetNmeaHandler);
  sub_100004090(v427, type metadata accessor for Proto_Gpsd_SetNmeaHandler);
  sub_100015764(v671, &qword_1003644B8);
  sub_100004090(v428, type metadata accessor for Proto_Gpsd_SetNmeaHandler);
  sub_100015764(v675, &qword_1003644B8);
  if ((v429 & 1) == 0) {
    goto LABEL_316;
  }
LABEL_150:
  v430 = v652
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setConfigSimulatorMode;
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setConfigSimulatorMode,  &v976,  0LL,  0LL);
  v431 = v678;
  sub_10000E6C0(v430, v678, &qword_1003644C0);
  v432 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setConfigSimulatorMode;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setConfigSimulatorMode,  &v975,  0LL,  0LL);
  v433 = v682;
  v434 = v682 + *(int *)(v676 + 48);
  sub_10000E6C0(v431, v682, &qword_1003644C0);
  sub_10000E6C0(v432, v434, &qword_1003644C0);
  v435 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v677 + 48);
  if (v435(v433, 1LL, v680) == 1)
  {
    sub_100015764(v678, &qword_1003644C0);
    if (v435(v434, 1LL, v680) == 1)
    {
      sub_100015764(v682, &qword_1003644C0);
      goto LABEL_157;
    }

    goto LABEL_155;
  }

  sub_10000E6C0(v682, v679, &qword_1003644C0);
  if (v435(v434, 1LL, v680) == 1)
  {
    sub_100015764(v678, &qword_1003644C0);
    sub_100004090(v679, type metadata accessor for Proto_Gpsd_SetConfigSimulatorMode);
LABEL_155:
    v335 = &qword_100367538;
    v336 = v682;
    goto LABEL_233;
  }

  v436 = v681;
  sub_100003E68(v434, v681, type metadata accessor for Proto_Gpsd_SetConfigSimulatorMode);
  v437 = v679;
  v438 = sub_100275508(v679, v436);
  sub_100004090(v436, type metadata accessor for Proto_Gpsd_SetConfigSimulatorMode);
  sub_100015764(v678, &qword_1003644C0);
  sub_100004090(v437, type metadata accessor for Proto_Gpsd_SetConfigSimulatorMode);
  sub_100015764(v682, &qword_1003644C0);
  if ((v438 & 1) == 0) {
    goto LABEL_316;
  }
LABEL_157:
  v439 = v652
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setConfigEnableGnssConstellations;
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setConfigEnableGnssConstellations,  &v974,  0LL,  0LL);
  v440 = v685;
  sub_10000E6C0(v439, v685, &qword_1003644C8);
  v441 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setConfigEnableGnssConstellations;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setConfigEnableGnssConstellations,  &v973,  0LL,  0LL);
  v442 = v689;
  v443 = v689 + *(int *)(v683 + 48);
  sub_10000E6C0(v440, v689, &qword_1003644C8);
  sub_10000E6C0(v441, v443, &qword_1003644C8);
  v444 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v684 + 48);
  if (v444(v442, 1LL, v687) == 1)
  {
    sub_100015764(v685, &qword_1003644C8);
    if (v444(v443, 1LL, v687) == 1)
    {
      sub_100015764(v689, &qword_1003644C8);
      goto LABEL_164;
    }

    goto LABEL_162;
  }

  sub_10000E6C0(v689, v686, &qword_1003644C8);
  if (v444(v443, 1LL, v687) == 1)
  {
    sub_100015764(v685, &qword_1003644C8);
    sub_100004090(v686, type metadata accessor for Proto_Gpsd_SetConfigEnableGnssConstellations);
LABEL_162:
    v335 = &qword_100367530;
    v336 = v689;
    goto LABEL_233;
  }

  v445 = v688;
  sub_100003E68(v443, v688, type metadata accessor for Proto_Gpsd_SetConfigEnableGnssConstellations);
  v446 = v686;
  v447 = sub_1001D3CAC(v686, v445, type metadata accessor for Proto_Gpsd_SetConfigEnableGnssConstellations);
  sub_100004090(v445, type metadata accessor for Proto_Gpsd_SetConfigEnableGnssConstellations);
  sub_100015764(v685, &qword_1003644C8);
  sub_100004090(v446, type metadata accessor for Proto_Gpsd_SetConfigEnableGnssConstellations);
  sub_100015764(v689, &qword_1003644C8);
  if ((v447 & 1) == 0) {
    goto LABEL_316;
  }
LABEL_164:
  v448 = v652
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setConfigDutyCycling;
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setConfigDutyCycling,  &v972,  0LL,  0LL);
  v449 = v692;
  sub_10000E6C0(v448, v692, &qword_1003644D0);
  v450 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setConfigDutyCycling;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setConfigDutyCycling,  &v971,  0LL,  0LL);
  v451 = v696;
  v452 = v696 + *(int *)(v690 + 48);
  sub_10000E6C0(v449, v696, &qword_1003644D0);
  sub_10000E6C0(v450, v452, &qword_1003644D0);
  v453 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v691 + 48);
  if (v453(v451, 1LL, v694) == 1)
  {
    sub_100015764(v692, &qword_1003644D0);
    if (v453(v452, 1LL, v694) == 1)
    {
      sub_100015764(v696, &qword_1003644D0);
      goto LABEL_171;
    }

    goto LABEL_169;
  }

  sub_10000E6C0(v696, v693, &qword_1003644D0);
  if (v453(v452, 1LL, v694) == 1)
  {
    sub_100015764(v692, &qword_1003644D0);
    sub_100004090(v693, type metadata accessor for Proto_Gpsd_SetConfigDutyCycling);
LABEL_169:
    v335 = &qword_100367528;
    v336 = v696;
    goto LABEL_233;
  }

  v454 = v695;
  sub_100003E68(v452, v695, type metadata accessor for Proto_Gpsd_SetConfigDutyCycling);
  v455 = v693;
  v456 = sub_100276B80(v693, v454, type metadata accessor for Proto_Gpsd_SetConfigDutyCycling);
  sub_100004090(v454, type metadata accessor for Proto_Gpsd_SetConfigDutyCycling);
  sub_100015764(v692, &qword_1003644D0);
  sub_100004090(v455, type metadata accessor for Proto_Gpsd_SetConfigDutyCycling);
  sub_100015764(v696, &qword_1003644D0);
  if ((v456 & 1) == 0) {
    goto LABEL_316;
  }
LABEL_171:
  v457 = v652
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__terminationImminent;
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__terminationImminent,  &v970,  0LL,  0LL);
  v458 = v699;
  sub_10000E6C0(v457, v699, &qword_1003644D8);
  v459 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__terminationImminent;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__terminationImminent,  &v969,  0LL,  0LL);
  v460 = v703;
  v461 = v703 + *(int *)(v697 + 48);
  sub_10000E6C0(v458, v703, &qword_1003644D8);
  sub_10000E6C0(v459, v461, &qword_1003644D8);
  v462 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v698 + 48);
  if (v462(v460, 1LL, v701) == 1)
  {
    sub_100015764(v699, &qword_1003644D8);
    if (v462(v461, 1LL, v701) == 1)
    {
      sub_100015764(v703, &qword_1003644D8);
      goto LABEL_178;
    }

    goto LABEL_176;
  }

  sub_10000E6C0(v703, v700, &qword_1003644D8);
  if (v462(v461, 1LL, v701) == 1)
  {
    sub_100015764(v699, &qword_1003644D8);
    sub_100004090(v700, type metadata accessor for Proto_Gpsd_TerminationImminent);
LABEL_176:
    v335 = &qword_100367520;
    v336 = v703;
    goto LABEL_233;
  }

  v463 = v702;
  sub_100003E68(v461, v702, type metadata accessor for Proto_Gpsd_TerminationImminent);
  v464 = v700;
  v465 = sub_1002778E8(v700, v463, type metadata accessor for Proto_Gpsd_TerminationImminent);
  sub_100004090(v463, type metadata accessor for Proto_Gpsd_TerminationImminent);
  sub_100015764(v699, &qword_1003644D8);
  sub_100004090(v464, type metadata accessor for Proto_Gpsd_TerminationImminent);
  sub_100015764(v703, &qword_1003644D8);
  if ((v465 & 1) == 0) {
    goto LABEL_316;
  }
LABEL_178:
  v466 = v652
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__exitMessage;
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__exitMessage,  &v968,  0LL,  0LL);
  v467 = v706;
  sub_10000E6C0(v466, v706, &qword_1003644E0);
  v468 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__exitMessage;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__exitMessage,  &v967,  0LL,  0LL);
  v469 = v710;
  v470 = v710 + *(int *)(v704 + 48);
  sub_10000E6C0(v467, v710, &qword_1003644E0);
  sub_10000E6C0(v468, v470, &qword_1003644E0);
  v471 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v705 + 48);
  if (v471(v469, 1LL, v708) == 1)
  {
    sub_100015764(v706, &qword_1003644E0);
    if (v471(v470, 1LL, v708) == 1)
    {
      sub_100015764(v710, &qword_1003644E0);
      goto LABEL_185;
    }

    goto LABEL_183;
  }

  sub_10000E6C0(v710, v707, &qword_1003644E0);
  if (v471(v470, 1LL, v708) == 1)
  {
    sub_100015764(v706, &qword_1003644E0);
    sub_100004090(v707, type metadata accessor for Proto_Gpsd_ExitMessage);
LABEL_183:
    v335 = &qword_100367518;
    v336 = v710;
    goto LABEL_233;
  }

  v472 = v709;
  sub_100003E68(v470, v709, type metadata accessor for Proto_Gpsd_ExitMessage);
  v473 = v707;
  v474 = sub_1002778E8(v707, v472, type metadata accessor for Proto_Gpsd_ExitMessage);
  sub_100004090(v472, type metadata accessor for Proto_Gpsd_ExitMessage);
  sub_100015764(v706, &qword_1003644E0);
  sub_100004090(v473, type metadata accessor for Proto_Gpsd_ExitMessage);
  sub_100015764(v710, &qword_1003644E0);
  if ((v474 & 1) == 0) {
    goto LABEL_316;
  }
LABEL_185:
  v475 = v652
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__injectLtlInfo;
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__injectLtlInfo,  &v966,  0LL,  0LL);
  v476 = v713;
  sub_10000E6C0(v475, v713, &qword_1003644E8);
  v477 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__injectLtlInfo;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__injectLtlInfo,  &v965,  0LL,  0LL);
  v478 = v717;
  v479 = v717 + *(int *)(v711 + 48);
  sub_10000E6C0(v476, v717, &qword_1003644E8);
  sub_10000E6C0(v477, v479, &qword_1003644E8);
  v480 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v712 + 48);
  if (v480(v478, 1LL, v715) == 1)
  {
    sub_100015764(v713, &qword_1003644E8);
    if (v480(v479, 1LL, v715) == 1)
    {
      sub_100015764(v717, &qword_1003644E8);
      goto LABEL_192;
    }

    goto LABEL_190;
  }

  sub_10000E6C0(v717, v714, &qword_1003644E8);
  if (v480(v479, 1LL, v715) == 1)
  {
    sub_100015764(v713, &qword_1003644E8);
    sub_100004090(v714, type metadata accessor for Proto_Gpsd_LtlInfo);
LABEL_190:
    v335 = &qword_100367510;
    v336 = v717;
    goto LABEL_233;
  }

  v481 = v716;
  sub_100003E68(v479, v716, type metadata accessor for Proto_Gpsd_LtlInfo);
  v482 = v714;
  v483 = sub_100065AC0( v714,  v481,  type metadata accessor for Proto_Gpsd_LtlInfo,  (uint64_t (*)(uint64_t, uint64_t))sub_10026F930);
  sub_100004090(v481, type metadata accessor for Proto_Gpsd_LtlInfo);
  sub_100015764(v713, &qword_1003644E8);
  sub_100004090(v482, type metadata accessor for Proto_Gpsd_LtlInfo);
  sub_100015764(v717, &qword_1003644E8);
  if ((v483 & 1) == 0) {
    goto LABEL_316;
  }
LABEL_192:
  v484 = v652
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__startContext;
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__startContext,  &v964,  0LL,  0LL);
  v485 = v720;
  sub_10000E6C0(v484, v720, &qword_1003644F0);
  v486 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__startContext;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__startContext,  &v963,  0LL,  0LL);
  v487 = v724;
  v488 = v724 + *(int *)(v718 + 48);
  sub_10000E6C0(v485, v724, &qword_1003644F0);
  sub_10000E6C0(v486, v488, &qword_1003644F0);
  v489 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v719 + 48);
  if (v489(v487, 1LL, started) == 1)
  {
    sub_100015764(v720, &qword_1003644F0);
    if (v489(v488, 1LL, started) == 1)
    {
      sub_100015764(v724, &qword_1003644F0);
      goto LABEL_199;
    }

    goto LABEL_197;
  }

  sub_10000E6C0(v724, v721, &qword_1003644F0);
  if (v489(v488, 1LL, started) == 1)
  {
    sub_100015764(v720, &qword_1003644F0);
    sub_100004090(v721, type metadata accessor for Proto_Gpsd_StartContext);
LABEL_197:
    v335 = &qword_100367508;
    v336 = v724;
    goto LABEL_233;
  }

  v490 = v723;
  sub_100003E68(v488, v723, type metadata accessor for Proto_Gpsd_StartContext);
  v491 = v721;
  v492 = sub_100277728(v721, v490);
  sub_100004090(v490, type metadata accessor for Proto_Gpsd_StartContext);
  sub_100015764(v720, &qword_1003644F0);
  sub_100004090(v491, type metadata accessor for Proto_Gpsd_StartContext);
  sub_100015764(v724, &qword_1003644F0);
  if ((v492 & 1) == 0) {
    goto LABEL_316;
  }
LABEL_199:
  v493 = v652
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__cntinStatusUpdate;
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__cntinStatusUpdate,  &v962,  0LL,  0LL);
  v494 = v727;
  sub_10000E6C0(v493, v727, &qword_1003644F8);
  v495 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__cntinStatusUpdate;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__cntinStatusUpdate,  &v961,  0LL,  0LL);
  v496 = v731;
  v497 = v731 + *(int *)(v725 + 48);
  sub_10000E6C0(v494, v731, &qword_1003644F8);
  sub_10000E6C0(v495, v497, &qword_1003644F8);
  v498 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v726 + 48);
  if (v498(v496, 1LL, v729) == 1)
  {
    sub_100015764(v727, &qword_1003644F8);
    if (v498(v497, 1LL, v729) == 1)
    {
      sub_100015764(v731, &qword_1003644F8);
      goto LABEL_206;
    }

    goto LABEL_204;
  }

  sub_10000E6C0(v731, v728, &qword_1003644F8);
  if (v498(v497, 1LL, v729) == 1)
  {
    sub_100015764(v727, &qword_1003644F8);
    sub_100004090(v728, type metadata accessor for Proto_Gpsd_CntinStatusMessage);
LABEL_204:
    v335 = &qword_100367500;
    v336 = v731;
    goto LABEL_233;
  }

  v499 = v730;
  sub_100003E68(v497, v730, type metadata accessor for Proto_Gpsd_CntinStatusMessage);
  v500 = v728;
  v501 = sub_100276A40(v728, v499);
  sub_100004090(v499, type metadata accessor for Proto_Gpsd_CntinStatusMessage);
  sub_100015764(v727, &qword_1003644F8);
  sub_100004090(v500, type metadata accessor for Proto_Gpsd_CntinStatusMessage);
  sub_100015764(v731, &qword_1003644F8);
  if ((v501 & 1) == 0) {
    goto LABEL_316;
  }
LABEL_206:
  v502 = v652
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setThermalRiskState;
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setThermalRiskState,  &v960,  0LL,  0LL);
  v503 = v734;
  sub_10000E6C0(v502, v734, &qword_100364500);
  v504 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setThermalRiskState;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setThermalRiskState,  &v959,  0LL,  0LL);
  v505 = v738;
  v506 = v738 + *(int *)(v732 + 48);
  sub_10000E6C0(v503, v738, &qword_100364500);
  sub_10000E6C0(v504, v506, &qword_100364500);
  v507 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v733 + 48);
  if (v507(v505, 1LL, v736) == 1)
  {
    sub_100015764(v734, &qword_100364500);
    if (v507(v506, 1LL, v736) == 1)
    {
      sub_100015764(v738, &qword_100364500);
      goto LABEL_213;
    }

    goto LABEL_211;
  }

  sub_10000E6C0(v738, v735, &qword_100364500);
  if (v507(v506, 1LL, v736) == 1)
  {
    sub_100015764(v734, &qword_100364500);
    sub_100004090(v735, type metadata accessor for Proto_Gpsd_SetThermalRiskState);
LABEL_211:
    v335 = &qword_1003674F8;
    v336 = v738;
    goto LABEL_233;
  }

  v508 = v737;
  sub_100003E68(v506, v737, type metadata accessor for Proto_Gpsd_SetThermalRiskState);
  v509 = v735;
  v510 = sub_100275FAC(v735, v508);
  sub_100004090(v508, type metadata accessor for Proto_Gpsd_SetThermalRiskState);
  sub_100015764(v734, &qword_100364500);
  sub_100004090(v509, type metadata accessor for Proto_Gpsd_SetThermalRiskState);
  sub_100015764(v738, &qword_100364500);
  if ((v510 & 1) == 0) {
    goto LABEL_316;
  }
LABEL_213:
  v511 = v652
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setConfigRfBandEnable;
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setConfigRfBandEnable,  &v958,  0LL,  0LL);
  v512 = v741;
  sub_10000E6C0(v511, v741, &qword_100364508);
  v513 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setConfigRfBandEnable;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setConfigRfBandEnable,  &v957,  0LL,  0LL);
  v514 = v745;
  v515 = v745 + *(int *)(v739 + 48);
  sub_10000E6C0(v512, v745, &qword_100364508);
  sub_10000E6C0(v513, v515, &qword_100364508);
  v516 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v740 + 48);
  if (v516(v514, 1LL, v743) == 1)
  {
    sub_100015764(v741, &qword_100364508);
    if (v516(v515, 1LL, v743) == 1)
    {
      sub_100015764(v745, &qword_100364508);
      goto LABEL_220;
    }

    goto LABEL_218;
  }

  sub_10000E6C0(v745, v742, &qword_100364508);
  if (v516(v515, 1LL, v743) == 1)
  {
    sub_100015764(v741, &qword_100364508);
    sub_100004090(v742, type metadata accessor for Proto_Gpsd_SetConfigRfBandEnable);
LABEL_218:
    v335 = &qword_1003674F0;
    v336 = v745;
    goto LABEL_233;
  }

  v517 = v744;
  sub_100003E68(v515, v744, type metadata accessor for Proto_Gpsd_SetConfigRfBandEnable);
  v518 = v742;
  v519 = sub_100275A5C(v742, v517);
  sub_100004090(v517, type metadata accessor for Proto_Gpsd_SetConfigRfBandEnable);
  sub_100015764(v741, &qword_100364508);
  sub_100004090(v518, type metadata accessor for Proto_Gpsd_SetConfigRfBandEnable);
  sub_100015764(v745, &qword_100364508);
  if ((v519 & 1) == 0) {
    goto LABEL_316;
  }
LABEL_220:
  v520 = v652
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__emergConfig;
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__emergConfig,  &v956,  0LL,  0LL);
  v521 = v748;
  sub_10000E6C0(v520, v748, &qword_100364510);
  v522 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__emergConfig;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__emergConfig,  &v955,  0LL,  0LL);
  v523 = v752;
  v524 = v752 + *(int *)(v746 + 48);
  sub_10000E6C0(v521, v752, &qword_100364510);
  sub_10000E6C0(v522, v524, &qword_100364510);
  v525 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v747 + 48);
  if (v525(v523, 1LL, v751) == 1)
  {
    sub_100015764(v748, &qword_100364510);
    if (v525(v524, 1LL, v751) == 1)
    {
      sub_100015764(v752, &qword_100364510);
      goto LABEL_227;
    }

    goto LABEL_225;
  }

  sub_10000E6C0(v752, v749, &qword_100364510);
  if (v525(v524, 1LL, v751) == 1)
  {
    sub_100015764(v748, &qword_100364510);
    sub_100004090(v749, type metadata accessor for Proto_Gnss_Emergency_EmergConfig);
LABEL_225:
    v335 = &qword_1003674E8;
    v336 = v752;
    goto LABEL_233;
  }

  v526 = v750;
  sub_100003E68(v524, v750, type metadata accessor for Proto_Gnss_Emergency_EmergConfig);
  v527 = sub_10000FD98( &qword_10035D910,  type metadata accessor for Proto_Gnss_Emergency_EmergConfig,  (uint64_t)&unk_1002D4130);
  v528 = v749;
  v529 = dispatch thunk of static Equatable.== infix(_:_:)(v749, v526, v751, v527);
  sub_100004090(v526, type metadata accessor for Proto_Gnss_Emergency_EmergConfig);
  sub_100015764(v748, &qword_100364510);
  sub_100004090(v528, type metadata accessor for Proto_Gnss_Emergency_EmergConfig);
  sub_100015764(v752, &qword_100364510);
  if ((v529 & 1) == 0) {
    goto LABEL_316;
  }
LABEL_227:
  v530 = v652
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__positionRequest;
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__positionRequest,  &v954,  0LL,  0LL);
  v531 = v755;
  sub_10000E6C0(v530, v755, &qword_100364518);
  v532 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__positionRequest;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__positionRequest,  &v953,  0LL,  0LL);
  v533 = v759;
  v534 = v759 + *(int *)(v753 + 48);
  sub_10000E6C0(v531, v759, &qword_100364518);
  sub_10000E6C0(v532, v534, &qword_100364518);
  v535 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v754 + 48);
  if (v535(v533, 1LL, v758) == 1)
  {
    sub_100015764(v755, &qword_100364518);
    if (v535(v534, 1LL, v758) == 1)
    {
      sub_100015764(v759, &qword_100364518);
      goto LABEL_235;
    }

    goto LABEL_232;
  }

  sub_10000E6C0(v759, v756, &qword_100364518);
  if (v535(v534, 1LL, v758) == 1)
  {
    sub_100015764(v755, &qword_100364518);
    sub_100004090(v756, type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
LABEL_232:
    v335 = &qword_1003674E0;
    v336 = v759;
    goto LABEL_233;
  }

  v536 = v757;
  sub_100003E68(v534, v757, type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
  v537 = sub_10000FD98( &qword_10035D390,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest,  (uint64_t)&unk_1002CEB68);
  v538 = v756;
  v539 = dispatch thunk of static Equatable.== infix(_:_:)(v756, v536, v758, v537);
  sub_100004090(v536, type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
  sub_100015764(v755, &qword_100364518);
  sub_100004090(v538, type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
  sub_100015764(v759, &qword_100364518);
  if ((v539 & 1) == 0) {
    goto LABEL_316;
  }
LABEL_235:
  v540 = (int *)(v652
               + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__sessionID);
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__sessionID,  &v952,  0LL,  0LL);
  v541 = *v540;
  v542 = *((_BYTE *)v540 + 4);
  v543 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__sessionID;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__sessionID,  &v951,  0LL,  0LL);
  if ((v542 & 1) != 0)
  {
    if ((*(_BYTE *)(v543 + 4) & 1) == 0) {
      goto LABEL_316;
    }
  }

  else if ((*(_BYTE *)(v543 + 4) & 1) != 0 || v541 != *(_DWORD *)v543)
  {
    goto LABEL_316;
  }

  v544 = v652
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__gpsReferenceTime;
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__gpsReferenceTime,  &v950,  0LL,  0LL);
  v545 = v762;
  sub_10000E6C0(v544, v762, &qword_100364520);
  v546 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__gpsReferenceTime;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__gpsReferenceTime,  &v949,  0LL,  0LL);
  v547 = v766;
  v548 = v766 + *(int *)(v760 + 48);
  sub_10000E6C0(v545, v766, &qword_100364520);
  sub_10000E6C0(v546, v548, &qword_100364520);
  v549 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v761 + 48);
  if (v549(v547, 1LL, v765) == 1)
  {
    sub_100015764(v762, &qword_100364520);
    if (v549(v548, 1LL, v765) == 1)
    {
      sub_100015764(v766, &qword_100364520);
      goto LABEL_247;
    }

    goto LABEL_245;
  }

  sub_10000E6C0(v766, v763, &qword_100364520);
  if (v549(v548, 1LL, v765) == 1)
  {
    sub_100015764(v762, &qword_100364520);
    sub_100004090(v763, type metadata accessor for Proto_Gnss_Emergency_GpsReferenceTime);
LABEL_245:
    v335 = &qword_1003674D8;
    v336 = v766;
    goto LABEL_233;
  }

  v550 = v764;
  sub_100003E68(v548, v764, type metadata accessor for Proto_Gnss_Emergency_GpsReferenceTime);
  v551 = sub_10000FD98( &qword_10035D888,  type metadata accessor for Proto_Gnss_Emergency_GpsReferenceTime,  (uint64_t)&unk_1002D38C0);
  v552 = v763;
  v553 = dispatch thunk of static Equatable.== infix(_:_:)(v763, v550, v765, v551);
  sub_100004090(v550, type metadata accessor for Proto_Gnss_Emergency_GpsReferenceTime);
  sub_100015764(v762, &qword_100364520);
  sub_100004090(v552, type metadata accessor for Proto_Gnss_Emergency_GpsReferenceTime);
  sub_100015764(v766, &qword_100364520);
  if ((v553 & 1) == 0) {
    goto LABEL_316;
  }
LABEL_247:
  v554 = v652
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__referenceLocation;
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__referenceLocation,  &v948,  0LL,  0LL);
  v555 = v769;
  sub_10000E6C0(v554, v769, &qword_100364528);
  v556 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__referenceLocation;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__referenceLocation,  &v947,  0LL,  0LL);
  v557 = v773;
  v558 = v773 + *(int *)(v767 + 48);
  sub_10000E6C0(v555, v773, &qword_100364528);
  sub_10000E6C0(v556, v558, &qword_100364528);
  v559 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v768 + 48);
  if (v559(v557, 1LL, v772) == 1)
  {
    sub_100015764(v769, &qword_100364528);
    if (v559(v558, 1LL, v772) == 1)
    {
      sub_100015764(v773, &qword_100364528);
      goto LABEL_254;
    }

    goto LABEL_252;
  }

  sub_10000E6C0(v773, v770, &qword_100364528);
  if (v559(v558, 1LL, v772) == 1)
  {
    sub_100015764(v769, &qword_100364528);
    sub_100004090(v770, type metadata accessor for Proto_Gnss_Emergency_ReferenceLocation);
LABEL_252:
    v335 = &qword_1003674D0;
    v336 = v773;
    goto LABEL_233;
  }

  v560 = v771;
  sub_100003E68(v558, v771, type metadata accessor for Proto_Gnss_Emergency_ReferenceLocation);
  v561 = sub_10000FD98( &qword_10035D8A0,  type metadata accessor for Proto_Gnss_Emergency_ReferenceLocation,  (uint64_t)&unk_1002D3A28);
  v562 = v770;
  v563 = dispatch thunk of static Equatable.== infix(_:_:)(v770, v560, v772, v561);
  sub_100004090(v560, type metadata accessor for Proto_Gnss_Emergency_ReferenceLocation);
  sub_100015764(v769, &qword_100364528);
  sub_100004090(v562, type metadata accessor for Proto_Gnss_Emergency_ReferenceLocation);
  sub_100015764(v773, &qword_100364528);
  if ((v563 & 1) == 0) {
    goto LABEL_316;
  }
LABEL_254:
  v564 = v652
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__gpsNavigationModel;
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__gpsNavigationModel,  &v946,  0LL,  0LL);
  v565 = v776;
  sub_10000E6C0(v564, v776, &qword_100364530);
  v566 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__gpsNavigationModel;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__gpsNavigationModel,  &v945,  0LL,  0LL);
  v567 = v780;
  v568 = v780 + *(int *)(v774 + 48);
  sub_10000E6C0(v565, v780, &qword_100364530);
  sub_10000E6C0(v566, v568, &qword_100364530);
  v569 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v775 + 48);
  if (v569(v567, 1LL, v779) == 1)
  {
    sub_100015764(v776, &qword_100364530);
    if (v569(v568, 1LL, v779) == 1)
    {
      sub_100015764(v780, &qword_100364530);
      goto LABEL_261;
    }

    goto LABEL_259;
  }

  sub_10000E6C0(v780, v777, &qword_100364530);
  if (v569(v568, 1LL, v779) == 1)
  {
    sub_100015764(v776, &qword_100364530);
    sub_100004090(v777, type metadata accessor for Proto_Gnss_Emergency_GpsNavigationModel);
LABEL_259:
    v335 = &qword_1003674C8;
    v336 = v780;
    goto LABEL_233;
  }

  v570 = v778;
  sub_100003E68(v568, v778, type metadata accessor for Proto_Gnss_Emergency_GpsNavigationModel);
  v571 = sub_10000FD98( &qword_10035D8C8,  type metadata accessor for Proto_Gnss_Emergency_GpsNavigationModel,  (uint64_t)&unk_1002D3CF8);
  v572 = v777;
  v573 = dispatch thunk of static Equatable.== infix(_:_:)(v777, v570, v779, v571);
  sub_100004090(v570, type metadata accessor for Proto_Gnss_Emergency_GpsNavigationModel);
  sub_100015764(v776, &qword_100364530);
  sub_100004090(v572, type metadata accessor for Proto_Gnss_Emergency_GpsNavigationModel);
  sub_100015764(v780, &qword_100364530);
  if ((v573 & 1) == 0) {
    goto LABEL_316;
  }
LABEL_261:
  v574 = v652
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__gpsAcqAssistance;
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__gpsAcqAssistance,  &v944,  0LL,  0LL);
  v575 = v783;
  sub_10000E6C0(v574, v783, &qword_100364538);
  v576 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__gpsAcqAssistance;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__gpsAcqAssistance,  &v943,  0LL,  0LL);
  v577 = v787;
  v578 = v787 + *(int *)(v781 + 48);
  sub_10000E6C0(v575, v787, &qword_100364538);
  sub_10000E6C0(v576, v578, &qword_100364538);
  v579 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v782 + 48);
  if (v579(v577, 1LL, v786) == 1)
  {
    sub_100015764(v783, &qword_100364538);
    if (v579(v578, 1LL, v786) == 1)
    {
      sub_100015764(v787, &qword_100364538);
      goto LABEL_268;
    }

    goto LABEL_266;
  }

  sub_10000E6C0(v787, v784, &qword_100364538);
  if (v579(v578, 1LL, v786) == 1)
  {
    sub_100015764(v783, &qword_100364538);
    sub_100004090(v784, type metadata accessor for Proto_Gnss_Emergency_GpsAcqAssistance);
LABEL_266:
    v335 = &qword_1003674C0;
    v336 = v787;
    goto LABEL_233;
  }

  v580 = v785;
  sub_100003E68(v578, v785, type metadata accessor for Proto_Gnss_Emergency_GpsAcqAssistance);
  v581 = sub_10000FD98( &qword_10035D938,  type metadata accessor for Proto_Gnss_Emergency_GpsAcqAssistance,  (uint64_t)&unk_1002D4400);
  v582 = v784;
  v583 = dispatch thunk of static Equatable.== infix(_:_:)(v784, v580, v786, v581);
  sub_100004090(v580, type metadata accessor for Proto_Gnss_Emergency_GpsAcqAssistance);
  sub_100015764(v783, &qword_100364538);
  sub_100004090(v582, type metadata accessor for Proto_Gnss_Emergency_GpsAcqAssistance);
  sub_100015764(v787, &qword_100364538);
  if ((v583 & 1) == 0) {
    goto LABEL_316;
  }
LABEL_268:
  v584 = v652
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__cellFtAssistance;
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__cellFtAssistance,  &v942,  0LL,  0LL);
  v585 = v790;
  sub_10000E6C0(v584, v790, &qword_100364540);
  v586 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__cellFtAssistance;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__cellFtAssistance,  &v941,  0LL,  0LL);
  v587 = v794;
  v588 = v794 + *(int *)(v788 + 48);
  sub_10000E6C0(v585, v794, &qword_100364540);
  sub_10000E6C0(v586, v588, &qword_100364540);
  v589 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v789 + 48);
  if (v589(v587, 1LL, v793) == 1)
  {
    sub_100015764(v790, &qword_100364540);
    if (v589(v588, 1LL, v793) == 1)
    {
      sub_100015764(v794, &qword_100364540);
      goto LABEL_275;
    }

    goto LABEL_273;
  }

  sub_10000E6C0(v794, v791, &qword_100364540);
  if (v589(v588, 1LL, v793) == 1)
  {
    sub_100015764(v790, &qword_100364540);
    sub_100004090(v791, type metadata accessor for Proto_Gnss_Emergency_CellFTAssistance);
LABEL_273:
    v335 = &qword_1003674B8;
    v336 = v794;
    goto LABEL_233;
  }

  v590 = v792;
  sub_100003E68(v588, v792, type metadata accessor for Proto_Gnss_Emergency_CellFTAssistance);
  v591 = sub_10000FD98( &qword_10035D968,  type metadata accessor for Proto_Gnss_Emergency_CellFTAssistance,  (uint64_t)&unk_1002D46D0);
  v592 = v791;
  v593 = dispatch thunk of static Equatable.== infix(_:_:)(v791, v590, v793, v591);
  sub_100004090(v590, type metadata accessor for Proto_Gnss_Emergency_CellFTAssistance);
  sub_100015764(v790, &qword_100364540);
  sub_100004090(v592, type metadata accessor for Proto_Gnss_Emergency_CellFTAssistance);
  sub_100015764(v794, &qword_100364540);
  if ((v593 & 1) == 0) {
    goto LABEL_316;
  }
LABEL_275:
  v594 = v652
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__cplaneContext;
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__cplaneContext,  &v940,  0LL,  0LL);
  v595 = v797;
  sub_10000E6C0(v594, v797, &qword_100364548);
  v596 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__cplaneContext;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__cplaneContext,  &v939,  0LL,  0LL);
  v597 = v801;
  v598 = v801 + *(int *)(v795 + 48);
  sub_10000E6C0(v595, v801, &qword_100364548);
  sub_10000E6C0(v596, v598, &qword_100364548);
  v599 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v796 + 48);
  if (v599(v597, 1LL, v800) == 1)
  {
    sub_100015764(v797, &qword_100364548);
    if (v599(v598, 1LL, v800) == 1)
    {
      sub_100015764(v801, &qword_100364548);
      goto LABEL_282;
    }

    goto LABEL_280;
  }

  sub_10000E6C0(v801, v798, &qword_100364548);
  if (v599(v598, 1LL, v800) == 1)
  {
    sub_100015764(v797, &qword_100364548);
    sub_100004090(v798, type metadata accessor for Proto_Gnss_Emergency_CplaneContext);
LABEL_280:
    v335 = &qword_1003674B0;
    v336 = v801;
    goto LABEL_233;
  }

  v600 = v799;
  sub_100003E68(v598, v799, type metadata accessor for Proto_Gnss_Emergency_CplaneContext);
  v601 = sub_10000FD98( &qword_10035D8F8,  type metadata accessor for Proto_Gnss_Emergency_CplaneContext,  (uint64_t)&unk_1002D3FC8);
  v602 = v798;
  v603 = dispatch thunk of static Equatable.== infix(_:_:)(v798, v600, v800, v601);
  sub_100004090(v600, type metadata accessor for Proto_Gnss_Emergency_CplaneContext);
  sub_100015764(v797, &qword_100364548);
  sub_100004090(v602, type metadata accessor for Proto_Gnss_Emergency_CplaneContext);
  sub_100015764(v801, &qword_100364548);
  if ((v603 & 1) == 0) {
    goto LABEL_316;
  }
LABEL_282:
  v604 = (uint64_t *)(v652
                   + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__suplInitVec);
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__suplInitVec,  &v938,  0LL,  0LL);
  v605 = *v604;
  v606 = (uint64_t *)(v922
                   + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__suplInitVec);
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__suplInitVec,  &v937,  0LL,  0LL);
  if (!sub_1001C1E44(v605, *v606)) {
    goto LABEL_316;
  }
  v607 = v652
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__locationID;
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__locationID,  &v936,  0LL,  0LL);
  v608 = v804;
  sub_10000E6C0(v607, v804, &qword_100364550);
  v609 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__locationID;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__locationID,  &v935,  0LL,  0LL);
  v610 = v808;
  v611 = v808 + *(int *)(v802 + 48);
  sub_10000E6C0(v608, v808, &qword_100364550);
  sub_10000E6C0(v609, v611, &qword_100364550);
  v612 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v803 + 48);
  if (v612(v610, 1LL, v807) == 1)
  {
    sub_100015764(v804, &qword_100364550);
    if (v612(v611, 1LL, v807) == 1)
    {
      sub_100015764(v808, &qword_100364550);
      goto LABEL_290;
    }

    goto LABEL_288;
  }

  sub_10000E6C0(v808, v805, &qword_100364550);
  if (v612(v611, 1LL, v807) == 1)
  {
    sub_100015764(v804, &qword_100364550);
    sub_100004090(v805, type metadata accessor for Proto_Gnss_Emergency_LocationId);
LABEL_288:
    v335 = &qword_1003674A8;
    v336 = v808;
    goto LABEL_233;
  }

  v613 = v806;
  sub_100003E68(v611, v806, type metadata accessor for Proto_Gnss_Emergency_LocationId);
  v614 = sub_10000FD98( &qword_10035D230,  type metadata accessor for Proto_Gnss_Emergency_LocationId,  (uint64_t)&unk_1002CD650);
  v615 = v805;
  v616 = dispatch thunk of static Equatable.== infix(_:_:)(v805, v613, v807, v614);
  sub_100004090(v613, type metadata accessor for Proto_Gnss_Emergency_LocationId);
  sub_100015764(v804, &qword_100364550);
  sub_100004090(v615, type metadata accessor for Proto_Gnss_Emergency_LocationId);
  sub_100015764(v808, &qword_100364550);
  if ((v616 & 1) == 0) {
    goto LABEL_316;
  }
LABEL_290:
  v617 = (int *)(v652
               + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__suplInitIndex);
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__suplInitIndex,  &v934,  0LL,  0LL);
  v618 = *v617;
  v619 = *((_BYTE *)v617 + 4);
  v620 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__suplInitIndex;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__suplInitIndex,  &v933,  0LL,  0LL);
  if ((v619 & 1) != 0)
  {
    if ((*(_BYTE *)(v620 + 4) & 1) == 0) {
      goto LABEL_316;
    }
  }

  else if ((*(_BYTE *)(v620 + 4) & 1) != 0 || v618 != *(_DWORD *)v620)
  {
    goto LABEL_316;
  }

  v621 = (uint64_t *)(v652
                   + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__suplCert);
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__suplCert,  &v932,  0LL,  0LL);
  v622 = *v621;
  v623 = (uint64_t *)(v922
                   + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__suplCert);
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__suplCert,  &v931,  0LL,  0LL);
  if (!sub_1001C1E44(v622, *v623)) {
    goto LABEL_316;
  }
  v624 = (unsigned __int8 *)(v652
                           + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__servingCellLte);
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__servingCellLte,  &v930,  0LL,  0LL);
  v625 = *v624;
  v626 = (unsigned __int8 *)(v922
                           + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__servingCellLte);
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__servingCellLte,  &v929,  0LL,  0LL);
  v627 = *v626;
  if (v625 == 2)
  {
    if (v627 != 2) {
      goto LABEL_316;
    }
  }

  else if (v627 == 2 || ((((v627 & 1) == 0) ^ v625) & 1) == 0)
  {
    goto LABEL_316;
  }

  v628 = (int *)(v652
               + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__simInstance);
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__simInstance,  &v928,  0LL,  0LL);
  v629 = *v628;
  v630 = *((_BYTE *)v628 + 4);
  v631 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__simInstance;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__simInstance,  &v927,  0LL,  0LL);
  if ((v630 & 1) != 0)
  {
    if ((*(_BYTE *)(v631 + 4) & 1) == 0) {
      goto LABEL_316;
    }
  }

  else if ((*(_BYTE *)(v631 + 4) & 1) != 0 || v629 != *(_DWORD *)v631)
  {
    goto LABEL_316;
  }

  v632 = v652
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__suplContext;
  swift_beginAccess( v652 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__suplContext,  &v926,  0LL,  0LL);
  v633 = v811;
  sub_10000E6C0(v632, v811, &qword_100364558);
  v634 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__suplContext;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__suplContext,  &v925,  0LL,  0LL);
  v635 = v815;
  v636 = v815 + *(int *)(v809 + 48);
  sub_10000E6C0(v633, v815, &qword_100364558);
  sub_10000E6C0(v634, v636, &qword_100364558);
  v637 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v810 + 48);
  if (v637(v635, 1LL, v814) == 1)
  {
    sub_100015764(v811, &qword_100364558);
    if (v637(v636, 1LL, v814) == 1)
    {
      sub_100015764(v815, &qword_100364558);
      goto LABEL_313;
    }

    goto LABEL_311;
  }

  sub_10000E6C0(v815, v812, &qword_100364558);
  if (v637(v636, 1LL, v814) == 1)
  {
    sub_100015764(v811, &qword_100364558);
    sub_100004090(v812, type metadata accessor for Proto_Gnss_Emergency_SuplContext);
LABEL_311:
    v335 = &qword_1003674A0;
    v336 = v815;
    goto LABEL_233;
  }

  v638 = v813;
  sub_100003E68(v636, v813, type metadata accessor for Proto_Gnss_Emergency_SuplContext);
  v639 = sub_10000FD98( &qword_10035D300,  type metadata accessor for Proto_Gnss_Emergency_SuplContext,  (uint64_t)&unk_1002CE2F8);
  v640 = v812;
  v641 = dispatch thunk of static Equatable.== infix(_:_:)(v812, v638, v814, v639);
  sub_100004090(v638, type metadata accessor for Proto_Gnss_Emergency_SuplContext);
  sub_100015764(v811, &qword_100364558);
  sub_100004090(v640, type metadata accessor for Proto_Gnss_Emergency_SuplContext);
  sub_100015764(v815, &qword_100364558);
  if ((v641 & 1) == 0)
  {
LABEL_316:
    v324 = v652;
    goto LABEL_69;
  }

LABEL_91:
    sub_100015764(v190, &qword_100355018);
    return 0LL;
  }

  sub_10000E6C0(v190, v185, &qword_100351878);
  if (v179(v178, 1LL, v189) == 1)
  {
    swift_release(v156);
    swift_release(v159);
    sub_100015764(v188, &qword_100351878);
    sub_100004090(v185, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
    goto LABEL_91;
  }

  uint64_t v180 = v184;
  sub_100003E68(v178, v184, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  uint64_t v181 = v185;
  char v182 = sub_100060320(v185, v180);
  swift_release(v156);
  swift_release(v159);
  sub_100004090(v180, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  sub_100015764(v188, &qword_100351878);
  sub_100004090(v181, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  sub_100015764(v190, &qword_100351878);
  return (v182 & 1) != 0;
}

Swift::Int sub_10004A0C0()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  &qword_1003519D8,  (uint64_t)&unk_1002B739C);
}

uint64_t sub_10004A0DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD7C(a1, &qword_10036D888, &qword_10036D890, (uint64_t)sub_1000468F0, a2);
}

uint64_t sub_10004A0F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000474F8(a1, a2, a3);
}

uint64_t sub_10004A10C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100047968(a1, a2, a3);
}

uint64_t sub_10004A120(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354E68,  type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  (uint64_t)&unk_1002B7314);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004A170@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D880, (uint64_t)qword_1003695C8, (uint64_t)sub_1000464D8, a1);
}

uint64_t sub_10004A18C(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351EB0,  type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  (uint64_t)&unk_1002B729C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004A1CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351EB0,  type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  (uint64_t)&unk_1002B729C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10004A21C()
{
  return &unk_10033DF20;
}

unint64_t sub_10004A228()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_10004A244()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003695E0);
  sub_10000E704(v0, (uint64_t)qword_1003695E0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32F0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "frequency_noise_ppb_per_second_per_rtHz";
  *(void *)(v9 + 8) = 39LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "phase_noise_ppb_per_rtHz";
  *(void *)(v13 + 8) = 24LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "frequency_variance_ppb2";
  *((void *)v15 + 1) = 23LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 4LL;
  *(void *)uint64_t v17 = "phase_variance_nanoseconds2";
  *((void *)v17 + 1) = 27LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 5LL;
  *(void *)uint64_t v18 = "clock_jump_detected";
  *(void *)(v18 + 8) = 19LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10004A448()
{
  return sub_100008C30(&qword_10036D898, (uint64_t)qword_1003695E0, (uint64_t)sub_10004A244);
}

uint64_t sub_10004A464@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D898, (uint64_t)qword_1003695E0, (uint64_t)sub_10004A244, a1);
}

uint64_t sub_10004A480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0LL) + 20);
          goto LABEL_5;
        case 2LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0LL) + 24);
          goto LABEL_5;
        case 3LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0LL) + 28);
          goto LABEL_5;
        case 4LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0LL) + 32);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + v9, a2, a3);
          break;
        case 5LL:
          uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0LL);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + *(int *)(v10 + 36), a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_10004A598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0LL);
  uint64_t v10 = (int *)result;
  uint64_t v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 4) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(1LL, a2, a3, *(float *)v11);
  }
  if (!v4)
  {
    uint64_t v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(2LL, a2, a3, *(float *)v12);
    }
    uint64_t v13 = v5 + v10[7];
    if ((*(_BYTE *)(v13 + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(3LL, a2, a3, *(float *)v13);
    }
    uint64_t v14 = v5 + v10[8];
    if ((*(_BYTE *)(v14 + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(4LL, a2, a3, *(float *)v14);
    }
    int v15 = *(unsigned __int8 *)(v5 + v10[9]);
    if (v15 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v15 & 1, 5LL, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_10004A6F8()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel,  &qword_1003519E0,  (uint64_t)&unk_1002B7504);
}

uint64_t sub_10004A714@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  uint64_t v7 = a2 + v5;
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  uint64_t v8 = a1[8];
  uint64_t v9 = a2 + a1[7];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a2 + v8;
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  *(_BYTE *)(a2 + a1[9]) = 2;
  return result;
}

uint64_t sub_10004A780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004A480(a1, a2, a3);
}

uint64_t sub_10004A794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004A598(a1, a2, a3);
}

uint64_t sub_10004A7A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354E60,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel,  (uint64_t)&unk_1002B747C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004A7F8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D898, (uint64_t)qword_1003695E0, (uint64_t)sub_10004A244, a1);
}

uint64_t sub_10004A814(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351EC8,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel,  (uint64_t)&unk_1002B7404);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004A854(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351EC8,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel,  (uint64_t)&unk_1002B7404);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10004A8A8()
{
  return &unk_10033DF30;
}

unint64_t sub_10004A8B4()
{
  return 0xD000000000000031LL;
}

uint64_t sub_10004A8D0()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003695F8);
  sub_10000E704(v0, (uint64_t)qword_1003695F8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32F0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "frequency_correction_ppb";
  *(void *)(v9 + 8) = 24LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "cummulative_phase_correction_nanoseconds";
  *(void *)(v13 + 8) = 40LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  int v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)int v15 = "current_temperature_degrees_celsius";
  *((void *)v15 + 1) = 35LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 4LL;
  *(void *)uint64_t v17 = "current_temperature_rate_degrees_per_second";
  *((void *)v17 + 1) = 43LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 5LL;
  *(void *)uint64_t v18 = "avg_temperature_over_last_epoch_degrees_celsius";
  *(void *)(v18 + 8) = 47LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10004AAD4()
{
  return sub_100008C30(&qword_10036D8A0, (uint64_t)qword_1003695F8, (uint64_t)sub_10004A8D0);
}

uint64_t sub_10004AAF0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D8A0, (uint64_t)qword_1003695F8, (uint64_t)sub_10004A8D0, a1);
}

uint64_t sub_10004AB0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0LL) + 20);
          goto LABEL_5;
        case 2LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0LL) + 24);
          goto LABEL_5;
        case 3LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0LL) + 28);
          goto LABEL_5;
        case 4LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0LL) + 32);
          goto LABEL_5;
        case 5LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0LL) + 36);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v9, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_10004AC08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0LL);
  uint64_t v10 = (int *)result;
  uint64_t v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1LL, a2, a3, *(double *)v11);
  }
  if (!v4)
  {
    uint64_t v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2LL, a2, a3, *(double *)v12);
    }
    uint64_t v13 = v5 + v10[7];
    if ((*(_BYTE *)(v13 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3LL, a2, a3, *(double *)v13);
    }
    uint64_t v14 = v5 + v10[8];
    if ((*(_BYTE *)(v14 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(4LL, a2, a3, *(double *)v14);
    }
    uint64_t v15 = v5 + v10[9];
    if ((*(_BYTE *)(v15 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(5LL, a2, a3, *(double *)v15);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_10004AD68()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections,  &qword_1003519E8,  (uint64_t)&unk_1002B766C);
}

uint64_t sub_10004AD84@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  uint64_t v7 = a2 + v5;
  *(void *)uint64_t v7 = 0LL;
  *(_BYTE *)(v7 + 8) = 1;
  uint64_t v8 = a1[8];
  uint64_t v9 = a2 + a1[7];
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  uint64_t v10 = a2 + v8;
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  uint64_t v11 = a2 + a1[9];
  *(void *)uint64_t v11 = 0LL;
  *(_BYTE *)(v11 + 8) = 1;
  return result;
}

uint64_t sub_10004ADF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004AB0C(a1, a2, a3);
}

uint64_t sub_10004AE08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004AC08(a1, a2, a3);
}

uint64_t sub_10004AE1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354E58,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections,  (uint64_t)&unk_1002B75E4);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004AE6C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D8A0, (uint64_t)qword_1003695F8, (uint64_t)sub_10004A8D0, a1);
}

uint64_t sub_10004AE88(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351EE0,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections,  (uint64_t)&unk_1002B756C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004AEC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351EE0,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections,  (uint64_t)&unk_1002B756C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10004AF18()
{
  return &unk_10033DF40;
}

unint64_t sub_10004AF24()
{
  return 0xD000000000000034LL;
}

uint64_t sub_10004AF40()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369610);
  sub_10000E704(v0, (uint64_t)qword_100369610);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32F0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "offset_nanoseconds";
  *(void *)(v9 + 8) = 18LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "sub_nanosecond_offset_nanoseconds";
  *(void *)(v13 + 8) = 33LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "offset_uncertainty_nanoseconds";
  *((void *)v15 + 1) = 30LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 4LL;
  *(void *)uint64_t v17 = "drift_ppb";
  *((void *)v17 + 1) = 9LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 5LL;
  *(void *)uint64_t v18 = "drift_uncertainty_ppb";
  *(void *)(v18 + 8) = 21LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10004B144()
{
  return sub_100008C30(&qword_10036D8A8, (uint64_t)qword_100369610, (uint64_t)sub_10004AF40);
}

uint64_t sub_10004B160@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D8A8, (uint64_t)qword_100369610, (uint64_t)sub_10004AF40, a1);
}

uint64_t sub_10004B17C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0LL);
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)(v3 + *(int *)(v12 + 20), a2, a3);
          goto LABEL_6;
        case 2LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0LL) + 24);
          goto LABEL_5;
        case 3LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0LL) + 28);
          goto LABEL_5;
        case 4LL:
          uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0LL);
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + *(int *)(v13 + 32), a2, a3);
          goto LABEL_6;
        case 5LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0LL) + 36);
LABEL_5:
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + v10, a2, a3);
LABEL_6:
          uint64_t v9 = v11;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_10004B2A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0LL);
  uint64_t v10 = (int *)result;
  uint64_t v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(*(void *)v11, 1LL, a2, a3);
  }
  if (!v4)
  {
    uint64_t v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(2LL, a2, a3, *(float *)v12);
    }
    uint64_t v13 = v5 + v10[7];
    if ((*(_BYTE *)(v13 + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(3LL, a2, a3, *(float *)v13);
    }
    uint64_t v14 = v5 + v10[8];
    if ((*(_BYTE *)(v14 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(4LL, a2, a3, *(double *)v14);
    }
    uint64_t v15 = v5 + v10[9];
    if ((*(_BYTE *)(v15 + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(5LL, a2, a3, *(float *)v15);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_10004B400()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion,  &qword_1003519F0,  (uint64_t)&unk_1002B77D4);
}

uint64_t sub_10004B41C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  uint64_t v7 = a2 + v5;
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  uint64_t v8 = a1[8];
  uint64_t v9 = a2 + a1[7];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a2 + v8;
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  uint64_t v11 = a2 + a1[9];
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  return result;
}

uint64_t sub_10004B48C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004B17C(a1, a2, a3);
}

uint64_t sub_10004B4A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004B2A0(a1, a2, a3);
}

uint64_t sub_10004B4B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354E50,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion,  (uint64_t)&unk_1002B774C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004B504@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D8A8, (uint64_t)qword_100369610, (uint64_t)sub_10004AF40, a1);
}

uint64_t sub_10004B520(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351EF8,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion,  (uint64_t)&unk_1002B76D4);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004B560(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351EF8,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion,  (uint64_t)&unk_1002B76D4);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10004B5B0()
{
  return &unk_10033DF50;
}

unint64_t sub_10004B5BC()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_10004B5D8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369628);
  sub_10000E704(v0, (uint64_t)qword_100369628);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "clock_nanoseconds";
  *(void *)(v9 + 8) = 17LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "model";
  *(void *)(v13 + 8) = 5LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "corrections";
  *((void *)v15 + 1) = 11LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 4LL;
  *(void *)uint64_t v17 = "receiver_to_gps_time";
  *((void *)v17 + 1) = 20LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10004B7AC()
{
  return sub_100008C30(&qword_10036D8B0, (uint64_t)qword_100369628, (uint64_t)sub_10004B5D8);
}

uint64_t sub_10004B7C8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D8B0, (uint64_t)qword_100369628, (uint64_t)sub_10004B5D8, a1);
}

uint64_t sub_10004B7E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0LL);
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v3 + *(int *)(v15 + 20), a2, a3);
          break;
        case 2LL:
          uint64_t v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Clock(0LL) + 24);
          uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0LL);
          uint64_t v11 = &qword_100351EC8;
          uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel;
          uint64_t v13 = &unk_1002B7404;
          goto LABEL_5;
        case 3LL:
          uint64_t v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Clock(0LL) + 28);
          uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0LL);
          uint64_t v11 = &qword_100351EE0;
          uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections;
          uint64_t v13 = &unk_1002B756C;
          goto LABEL_5;
        case 4LL:
          uint64_t v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Clock(0LL) + 32);
          uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0LL);
          uint64_t v11 = &qword_100351EF8;
          uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion;
          uint64_t v13 = &unk_1002B76D4;
LABEL_5:
          uint64_t v14 = sub_10000FD98(v11, v12, (uint64_t)v13);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v14, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_10004B988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0LL);
  uint64_t v10 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v10 + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(void *)v10, 1LL, a2, a3);
  }
  if (!v4)
  {
    sub_10004BA7C(v5, a1, a2, a3);
    sub_10004BBF0(v5, a1, a2, a3);
    sub_10004BD64(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_10004BA7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100351880);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_100351880);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  uint64_t v15 = sub_10000FD98( &qword_100351EC8,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel,  (uint64_t)&unk_1002B7404);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_10004BBF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100351888);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_100351888);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
  uint64_t v15 = sub_10000FD98( &qword_100351EE0,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections,  (uint64_t)&unk_1002B756C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_10004BD64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100351890);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 32), (uint64_t)v8, &qword_100351890);
  sub_100003E68( (uint64_t)v8,  (uint64_t)v12,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  uint64_t v15 = sub_10000FD98( &qword_100351EF8,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion,  (uint64_t)&unk_1002B76D4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

Swift::Int sub_10004BEDC()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_Clock,  &qword_1003519F8,  (uint64_t)&unk_1002B793C);
}

uint64_t sub_10004BEF8@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[6];
  uint64_t v5 = a2 + a1[5];
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + 8) = 1;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  uint64_t v8 = a2 + a1[7];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  uint64_t v10 = a2 + a1[8];
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))( v10,  1LL,  1LL,  v11);
}

uint64_t sub_10004BFB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004B7E4(a1, a2, a3);
}

uint64_t sub_10004BFC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004B988(a1, a2, a3);
}

uint64_t sub_10004BFDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354E48,  type metadata accessor for CLP_LogEntry_PrivateData_Clock,  (uint64_t)&unk_1002B78B4);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004C02C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D8B0, (uint64_t)qword_100369628, (uint64_t)sub_10004B5D8, a1);
}

uint64_t sub_10004C048(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351F10,  type metadata accessor for CLP_LogEntry_PrivateData_Clock,  (uint64_t)&unk_1002B783C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004C088(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351F10,  type metadata accessor for CLP_LogEntry_PrivateData_Clock,  (uint64_t)&unk_1002B783C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10004C0D8()
{
  return &unk_10033DF60;
}

unint64_t sub_10004C0E4()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_10004C100()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369640);
  sub_10000E704(v0, (uint64_t)qword_100369640);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3340;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "clock";
  *(void *)(v9 + 8) = 5LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "measurements";
  *((void *)v13 + 1) = 12LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10004C250()
{
  return sub_100008C30(&qword_10036D8B8, (uint64_t)qword_100369640, (uint64_t)sub_10004C100);
}

uint64_t sub_10004C26C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D8B8, (uint64_t)qword_100369640, (uint64_t)sub_10004C100, a1);
}

uint64_t sub_10004C288()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass(0LL);
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))( v2,  1LL,  1LL,  v3);
  *(void *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements) = &_swiftEmptyArrayStorage;
  qword_10036D8C8 = v1;
  return result;
}

uint64_t sub_10004C304(uint64_t a1)
{
  uint64_t v3 = sub_100003A0C(&qword_100351898);
  __chkstk_darwin(v3);
  uint64_t v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = v1
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  uint64_t v8 = (uint64_t *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
  *(void *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements) = &_swiftEmptyArrayStorage;
  uint64_t v9 = a1
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock,  v17,  0LL,  0LL);
  sub_10000E6C0(v9, (uint64_t)v5, &qword_100351898);
  swift_beginAccess(v6, v16, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v5, v6, &qword_100351898);
  swift_endAccess(v16);
  uint64_t v10 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements,  v16,  0LL,  0LL);
  uint64_t v11 = *v10;
  swift_bridgeObjectRetain(v11);
  swift_release(a1);
  swift_beginAccess(v8, v15, 1LL, 0LL);
  uint64_t v12 = *v8;
  *uint64_t v8 = v11;
  swift_bridgeObjectRelease(v12);
  return v1;
}

uint64_t sub_10004C470()
{
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements));
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_10004C4B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v9)) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v3 + v9);
    uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass(0LL);
    uint64_t v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v13 = swift_retain(v10);
    sub_10004C304(v13);
    uint64_t v14 = *(void *)(v6 + v9);
    *(void *)(v6 + v9) = v12;
    swift_release(v14);
  }

  uint64_t v15 = *(void *)(v6 + v9);
  swift_retain(v15);
  uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v17 & 1) != 0) {
        return swift_release(v15);
      }
      if (v16 == 2) {
        break;
      }
      if (v16 == 1)
      {
        uint64_t v23 = v15
            + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
        swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock,  v26,  33LL,  0LL);
        uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0LL);
        uint64_t v25 = sub_10000FD98( &qword_100351F10,  type metadata accessor for CLP_LogEntry_PrivateData_Clock,  (uint64_t)&unk_1002B783C);
        uint64_t v22 = v5;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v23, v24, v25, a2, a3);
        goto LABEL_7;
      }

LABEL_8:
      uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    uint64_t v19 = v15
        + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements;
    swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements,  v26,  33LL,  0LL);
    uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0LL);
    uint64_t v21 = sub_10000FD98( &qword_100351EB0,  type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  (uint64_t)&unk_1002B729C);
    uint64_t v22 = v5;
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v19, v20, v21, a2, a3);
LABEL_7:
    uint64_t v5 = v22;
    swift_endAccess(v26);
    goto LABEL_8;
  }

  return swift_release(v15);
}

      uint64_t v15 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    uint64_t v18 = v14
        + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry[0];
    swift_beginAccess( v14 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry[0],  v24,  33LL,  0LL);
    uint64_t v19 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0LL);
    uint64_t v20 = &qword_1003510A0;
    uint64_t v21 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry;
    uint64_t v22 = &unk_1002B3EDC;
LABEL_7:
    uint64_t v23 = sub_10000FD98(v20, v21, (uint64_t)v22);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v18, v19, v23, a2, a3);
    swift_endAccess(v24);
    goto LABEL_8;
  }

  return swift_release(v14);
}

      uint64_t v15 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    uint64_t v18 = v14
        + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__eutranTime;
    swift_beginAccess( v14 + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__eutranTime,  v24,  33LL,  0LL);
    uint64_t v19 = type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0LL);
    uint64_t v20 = &qword_10035CA70;
    uint64_t v21 = type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell;
    uint64_t v22 = &unk_1002CF9A0;
LABEL_7:
    uint64_t v23 = sub_10000FD98(v20, v21, (uint64_t)v22);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v18, v19, v23, a2, a3);
    swift_endAccess(v24);
    goto LABEL_8;
  }

  return swift_release(v14);
}

uint64_t sub_10004C6B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0LL) + 20));
  uint64_t v10 = swift_retain(v9);
  sub_10004C7F0(v10, a1, a2, a3);
  if (v4) {
    return swift_release(v9);
  }
  uint64_t v12 = (uint64_t *)(v9
                  + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements,  v17,  0LL,  0LL);
  uint64_t v13 = *v12;
  if (*(void *)(v13 + 16))
  {
    uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0LL);
    uint64_t v15 = sub_10000FD98( &qword_100351EB0,  type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  (uint64_t)&unk_1002B729C);
    uint64_t v16 = swift_bridgeObjectRetain(v13);
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v16, 2LL, v14, v15, a2, a3);
    swift_bridgeObjectRelease(v13);
  }

  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10004C7F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100351898);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100351898);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
  uint64_t v15 = sub_10000FD98( &qword_100351F10,  type metadata accessor for CLP_LogEntry_PrivateData_Clock,  (uint64_t)&unk_1002B783C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t sub_10004C97C(uint64_t a1, uint64_t a2)
{
  return sub_100065AC0(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, sub_10004C9A4) & 1;
}

uint64_t sub_10004C9A4(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = a2;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v29 = (uint64_t)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100003A0C(&qword_100355010);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100003A0C(&qword_100351898);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v29 - v13;
  uint64_t v15 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock,  v34,  0LL,  0LL);
  sub_10000E6C0(v15, (uint64_t)v14, &qword_100351898);
  uint64_t v16 = v30;
  uint64_t v17 = v30
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess( v30 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock,  v33,  0LL,  0LL);
  uint64_t v18 = (uint64_t)&v8[*(int *)(v6 + 48)];
  sub_10000E6C0((uint64_t)v14, (uint64_t)v8, &qword_100351898);
  sub_10000E6C0(v17, v18, &qword_100351898);
  uint64_t v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v19((uint64_t)v8, 1LL, v3) != 1)
  {
    uint64_t v20 = a1;
    sub_10000E6C0((uint64_t)v8, (uint64_t)v12, &qword_100351898);
    if (v19(v18, 1LL, v3) != 1)
    {
      uint64_t v21 = v29;
      sub_100003E68(v18, v29, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
      swift_retain(a1);
      swift_retain(v16);
      char v22 = sub_100065E50((uint64_t)v12, v21);
      sub_100004090(v21, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
      sub_100015764((uint64_t)v14, &qword_100351898);
      sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
      sub_100015764((uint64_t)v8, &qword_100351898);
      if ((v22 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_9:
      char v27 = 0;
      goto LABEL_10;
    }

    swift_retain(a1);
    swift_retain(v16);
    sub_100015764((uint64_t)v14, &qword_100351898);
    sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
LABEL_6:
    sub_100015764((uint64_t)v8, &qword_100355010);
    goto LABEL_9;
  }

  swift_retain(a1);
  swift_retain(v16);
  sub_100015764((uint64_t)v14, &qword_100351898);
  uint64_t v20 = a1;
  if (v19(v18, 1LL, v3) != 1) {
    goto LABEL_6;
  }
  sub_100015764((uint64_t)v8, &qword_100351898);
LABEL_8:
  uint64_t v23 = (uint64_t *)(v20
                  + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
  swift_beginAccess( v20 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements,  v32,  0LL,  0LL);
  uint64_t v24 = *v23;
  uint64_t v25 = (uint64_t *)(v16
                  + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements,  v31,  0LL,  0LL);
  uint64_t v26 = *v25;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v26);
  char v27 = sub_10005E880( v24,  v26,  type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  (uint64_t (*)(uint64_t, uint64_t))sub_100048950);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v26);
LABEL_10:
  swift_release(v20);
  swift_release(v16);
  return v27 & 1;
}

Swift::Int sub_10004CD2C()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport,  &qword_100351A00,  (uint64_t)&unk_1002B7AA4);
}

uint64_t sub_10004CD48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD7C(a1, &qword_10036D8C0, &qword_10036D8C8, (uint64_t)sub_10004C288, a2);
}

uint64_t sub_10004CD64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004C4B8(a1, a2, a3);
}

uint64_t sub_10004CD78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004C6B0(a1, a2, a3);
}

uint64_t sub_10004CD8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354E40,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport,  (uint64_t)&unk_1002B7A1C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004CDDC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D8B8, (uint64_t)qword_100369640, (uint64_t)sub_10004C100, a1);
}

uint64_t sub_10004CDF8(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351F28,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport,  (uint64_t)&unk_1002B79A4);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004CE38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351F28,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport,  (uint64_t)&unk_1002B79A4);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10004CE88()
{
  return &unk_10033DF70;
}

unint64_t sub_10004CE94()
{
  return 0xD000000000000022LL;
}

uint64_t sub_10004CEB0()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369658);
  sub_10000E704(v0, (uint64_t)qword_100369658);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "x";
  *(void *)(v9 + 8) = 1LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "y";
  *((void *)v13 + 1) = 1LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "z";
  *(void *)(v14 + 8) = 1LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10004D03C()
{
  return sub_100008C30(&qword_10036D8D0, (uint64_t)qword_100369658, (uint64_t)sub_10004CEB0);
}

uint64_t sub_10004D058@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D8D0, (uint64_t)qword_100369658, (uint64_t)sub_10004CEB0, a1);
}

uint64_t sub_10004D074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000540F8( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef,  (void (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of Decoder.decodeSingularDoubleField(value:));
}

uint64_t sub_10004D098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005A800(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_10004D0B4(uint64_t a1, uint64_t a2)
{
  return sub_100065750(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef) & 1;
}

Swift::Int sub_10004D0D4()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef,  &qword_100351A08,  (uint64_t)&unk_1002B7C0C);
}

uint64_t sub_10004D0F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354E38,  type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef,  (uint64_t)&unk_1002B7B84);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004D144@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D8D0, (uint64_t)qword_100369658, (uint64_t)sub_10004CEB0, a1);
}

uint64_t sub_10004D160(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351F40,  type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef,  (uint64_t)&unk_1002B7B0C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004D1A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351F40,  type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef,  (uint64_t)&unk_1002B7B0C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10004D1F0()
{
  return &unk_10033DF80;
}

unint64_t sub_10004D1FC()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_10004D218()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369670);
  sub_10000E704(v0, (uint64_t)qword_100369670);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32F0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "band";
  *(void *)(v9 + 8) = 4LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "tropospheric_nanoseconds";
  *(void *)(v13 + 8) = 24LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "ionospheric_nanoseconds";
  *((void *)v15 + 1) = 23LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 4LL;
  *(void *)uint64_t v17 = "tx_group_delay_nanoseconds";
  *((void *)v17 + 1) = 26LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 5LL;
  *(void *)uint64_t v18 = "ionospheric_model";
  *(void *)(v18 + 8) = 17LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10004D428()
{
  return sub_100008C30(&qword_10036D8D8, (uint64_t)qword_100369670, (uint64_t)sub_10004D218);
}

uint64_t sub_10004D444@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D8D8, (uint64_t)qword_100369670, (uint64_t)sub_10004D218, a1);
}

uint64_t sub_10004D460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0LL) + 20);
          unint64_t v11 = sub_10007FBE0();
          uint64_t v12 = v10;
          uint64_t v13 = &type metadata for CLP_LogEntry_PrivateData_Band;
          goto LABEL_12;
        case 2LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0LL) + 24);
          goto LABEL_5;
        case 3LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0LL) + 28);
          goto LABEL_5;
        case 4LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0LL) + 32);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v9, a2, a3);
          break;
        case 5LL:
          uint64_t v14 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0LL) + 36);
          unint64_t v11 = sub_10007FA48();
          uint64_t v12 = v14;
          uint64_t v13 = &type metadata for CLP_LogEntry_PrivateData_IonosphericCorrectionSource;
LABEL_12:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v12, v13, v11, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_10004D5C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0LL);
  uint64_t v10 = (int *)result;
  if (*(_BYTE *)(v5 + *(int *)(result + 20)) != 13)
  {
    char v16 = *(_BYTE *)(v5 + *(int *)(result + 20));
    unint64_t v11 = sub_10007FBE0();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v16,  1LL,  &type metadata for CLP_LogEntry_PrivateData_Band,  v11,  a2,  a3);
  }

  if (!v4)
  {
    uint64_t v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2LL, a2, a3, *(double *)v12);
    }
    uint64_t v13 = v5 + v10[7];
    if ((*(_BYTE *)(v13 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3LL, a2, a3, *(double *)v13);
    }
    uint64_t v14 = v5 + v10[8];
    if ((*(_BYTE *)(v14 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(4LL, a2, a3, *(double *)v14);
    }
    if (*(_BYTE *)(v5 + v10[9]) != 3)
    {
      char v17 = *(_BYTE *)(v5 + v10[9]);
      unint64_t v15 = sub_10007FA48();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v17,  5LL,  &type metadata for CLP_LogEntry_PrivateData_IonosphericCorrectionSource,  v15,  a2,  a3);
    }

    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_10004D750()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections,  &qword_100351A10,  (uint64_t)&unk_1002B7D74);
}

uint64_t sub_10004D76C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 13;
  uint64_t v6 = a2 + v5;
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  uint64_t v7 = a1[8];
  uint64_t v8 = a2 + a1[7];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  *(_BYTE *)(a2 + a1[9]) = 3;
  return result;
}

uint64_t sub_10004D7D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004D460(a1, a2, a3);
}

uint64_t sub_10004D7E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004D5C0(a1, a2, a3);
}

uint64_t sub_10004D7FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354E30,  type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections,  (uint64_t)&unk_1002B7CEC);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004D84C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D8D8, (uint64_t)qword_100369670, (uint64_t)sub_10004D218, a1);
}

uint64_t sub_10004D868(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351F58,  type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections,  (uint64_t)&unk_1002B7C74);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004D8A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351F58,  type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections,  (uint64_t)&unk_1002B7C74);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10004D8F8()
{
  return &unk_10033DF90;
}

unint64_t sub_10004D904()
{
  return 0xD000000000000029LL;
}

uint64_t sub_10004D920()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369688);
  sub_10000E704(v0, (uint64_t)qword_100369688);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3340;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "applicable_time_nanoseconds";
  *(void *)(v9 + 8) = 27LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "position";
  *((void *)v13 + 1) = 8LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10004DA78()
{
  return sub_100008C30(&qword_10036D8E0, (uint64_t)qword_100369688, (uint64_t)sub_10004D920);
}

uint64_t sub_10004DA94@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D8E0, (uint64_t)qword_100369688, (uint64_t)sub_10004D920, a1);
}

uint64_t sub_10004DAB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      if (result == 2)
      {
        uint64_t v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0LL) + 24);
        uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0LL);
        uint64_t v11 = sub_10000FD98( &qword_100351F40,  type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef,  (uint64_t)&unk_1002B7B0C);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v11, a2, a3);
      }

      else if (result == 1)
      {
        uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0LL);
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + *(int *)(v12 + 20), a2, a3);
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_10004DBD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0LL);
  uint64_t v10 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v10 + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1LL, a2, a3, *(double *)v10);
  }
  if (!v4)
  {
    sub_10004DC88(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_10004DC88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003518A0);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_1003518A0);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  uint64_t v15 = sub_10000FD98( &qword_100351F40,  type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef,  (uint64_t)&unk_1002B7B0C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

Swift::Int sub_10004DE00()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime,  &qword_100351A18,  (uint64_t)&unk_1002B7EDC);
}

uint64_t sub_10004DE1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(int *)(a1 + 24);
  uint64_t v5 = a2 + *(int *)(a1 + 20);
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + 8) = 1;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t sub_10004DE78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004DAB0(a1, a2, a3);
}

uint64_t sub_10004DE8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004DBD4(a1, a2, a3);
}

uint64_t sub_10004DEA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354E28,  type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime,  (uint64_t)&unk_1002B7E54);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004DEF0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D8E0, (uint64_t)qword_100369688, (uint64_t)sub_10004D920, a1);
}

uint64_t sub_10004DF0C(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351F70,  type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime,  (uint64_t)&unk_1002B7DDC);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004DF4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351F70,  type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime,  (uint64_t)&unk_1002B7DDC);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10004DF9C()
{
  return &unk_10033DFA0;
}

unint64_t sub_10004DFA8()
{
  return 0xD000000000000028LL;
}

uint64_t sub_10004DFC4()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003696A0);
  sub_10000E704(v0, (uint64_t)qword_1003696A0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32F0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 2LL;
  *(void *)uint64_t v9 = "fit_validity_start_time_ns";
  *(void *)(v9 + 8) = 26LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 3LL;
  *(void *)uint64_t v13 = "fit_validity_end_time_ns";
  *(void *)(v13 + 8) = 24LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 4LL;
  *(void *)uint64_t v15 = "x_position_ecef_coefficients";
  *((void *)v15 + 1) = 28LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 5LL;
  *(void *)uint64_t v17 = "y_position_ecef_coefficients";
  *((void *)v17 + 1) = 28LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 6LL;
  *(void *)uint64_t v18 = "z_position_ecef_coefficients";
  *(void *)(v18 + 8) = 28LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10004E1C8()
{
  return sub_100008C30(&qword_10036D8E8, (uint64_t)qword_1003696A0, (uint64_t)sub_10004DFC4);
}

uint64_t sub_10004E1E4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D8E8, (uint64_t)qword_1003696A0, (uint64_t)sub_10004DFC4, a1);
}

uint64_t sub_10004E200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 2LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0LL) + 32);
          goto LABEL_10;
        case 3LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0LL) + 36);
LABEL_10:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v10, a2, a3);
          break;
        case 4LL:
          uint64_t v9 = v3;
          goto LABEL_5;
        case 5LL:
          uint64_t v9 = v3 + 8;
          goto LABEL_5;
        case 6LL:
          uint64_t v9 = v3 + 16;
LABEL_5:
          dispatch thunk of Decoder.decodeRepeatedDoubleField(value:)(v9, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_10004E310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0LL);
  uint64_t v9 = result;
  uint64_t v10 = (double *)((char *)v3 + *(int *)(result + 32));
  if (((_BYTE)v10[1] & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2LL, a2, a3, *v10);
  }
  if (!v4)
  {
    uint64_t v11 = (double *)((char *)v3 + *(int *)(v9 + 36));
    if (((_BYTE)v11[1] & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3LL, a2, a3, *v11);
    }
    if (*(void *)(*v3 + 16LL)) {
      dispatch thunk of Visitor.visitRepeatedDoubleField(value:fieldNumber:)();
    }
    if (*(void *)(v3[1] + 16LL)) {
      dispatch thunk of Visitor.visitRepeatedDoubleField(value:fieldNumber:)();
    }
    if (*(void *)(v3[2] + 16LL)) {
      dispatch thunk of Visitor.visitRepeatedDoubleField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_10004E478()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit,  &qword_100351A20,  (uint64_t)&unk_1002B8044);
}

uint64_t sub_10004E494@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  a2[1] = &_swiftEmptyArrayStorage;
  a2[2] = &_swiftEmptyArrayStorage;
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = *(int *)(a1 + 36);
  uint64_t v6 = (char *)a2 + *(int *)(a1 + 32);
  *(void *)uint64_t v6 = 0LL;
  v6[8] = 1;
  uint64_t v7 = (char *)a2 + v5;
  *(void *)uint64_t v7 = 0LL;
  v7[8] = 1;
  return result;
}

uint64_t sub_10004E4F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004E200(a1, a2, a3);
}

uint64_t sub_10004E504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004E310(a1, a2, a3);
}

uint64_t sub_10004E518(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354E20,  type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit,  (uint64_t)&unk_1002B7FBC);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004E568@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D8E8, (uint64_t)qword_1003696A0, (uint64_t)sub_10004DFC4, a1);
}

uint64_t sub_10004E584(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351F88,  type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit,  (uint64_t)&unk_1002B7F44);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004E5C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351F88,  type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit,  (uint64_t)&unk_1002B7F44);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10004E614()
{
  return &unk_10033DFB0;
}

unint64_t sub_10004E620()
{
  return 0xD00000000000001FLL;
}

uint64_t sub_10004E63C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003696B8);
  sub_10000E704(v0, (uint64_t)qword_1003696B8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v54 = swift_allocObject(v1, v6 + 23 * v4, v5 | 7);
  *(_OWORD *)(v54 + 16) = xmmword_1002B4300;
  uint64_t v7 = v54 + v6;
  uint64_t v8 = v54 + v6 + *(int *)(v2 + 48);
  *(void *)(v54 + v6) = 1LL;
  *(void *)uint64_t v8 = "id";
  *(void *)(v8 + 8) = 2LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v54 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "reference_time_nanoseconds";
  *(void *)(v12 + 8) = 26LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v54 + v6 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 3LL;
  *(void *)uint64_t v14 = "position_source";
  *((void *)v14 + 1) = 15LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v54 + v6 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *uint64_t v15 = 4LL;
  *(void *)uint64_t v16 = "anchor_positions";
  *((void *)v16 + 1) = 16LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v54 + v6 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "clock_bias_correction_nanoseconds";
  *((void *)v18 + 1) = 33LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v54 + v6 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 6LL;
  *(void *)uint64_t v20 = "clock_frequency_correction_ppb";
  *((void *)v20 + 1) = 30LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v54 + v6 + 6 * v4);
  char v22 = (char *)v21 + *(int *)(v2 + 48);
  *uint64_t v21 = 7LL;
  *(void *)char v22 = "clock_frequency_change_correction_ppb_per_sec";
  *((void *)v22 + 1) = 45LL;
  v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v54 + v6 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  *uint64_t v23 = 8LL;
  *(void *)uint64_t v24 = "range_accuracy_position_m";
  *((void *)v24 + 1) = 25LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v54 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 9LL;
  *(void *)uint64_t v25 = "range_accuracy_clock_nanoseconds";
  *(void *)(v25 + 8) = 32LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  uint64_t v26 = (void *)(v54 + v6 + 9 * v4);
  char v27 = (char *)v26 + *(int *)(v2 + 48);
  void *v26 = 10LL;
  *(void *)char v27 = "over_the_air_from_sv_health_l1";
  *((void *)v27 + 1) = 30LL;
  v27[16] = 2;
  v11();
  uint64_t v28 = (void *)(v54 + v6 + 10 * v4);
  uint64_t v29 = (char *)v28 + *(int *)(v2 + 48);
  *uint64_t v28 = 11LL;
  *(void *)uint64_t v29 = "over_the_air_from_other_sv_health_l1";
  *((void *)v29 + 1) = 36LL;
  v29[16] = 2;
  v11();
  uint64_t v30 = (void *)(v54 + v6 + 11 * v4);
  uint64_t v31 = (char *)v30 + *(int *)(v2 + 48);
  *uint64_t v30 = 12LL;
  *(void *)uint64_t v31 = "assistance_file_health_l1";
  *((void *)v31 + 1) = 25LL;
  v31[16] = 2;
  v11();
  uint64_t v32 = (void *)(v54 + v6 + 12 * v4);
  uint64_t v33 = (char *)v32 + *(int *)(v2 + 48);
  *uint64_t v32 = 13LL;
  *(void *)uint64_t v33 = "ms_based_health_l1";
  *((void *)v33 + 1) = 18LL;
  v33[16] = 2;
  v11();
  uint64_t v34 = (void *)(v54 + v6 + 13 * v4);
  uint64_t v35 = (char *)v34 + *(int *)(v2 + 48);
  *uint64_t v34 = 14LL;
  *(void *)uint64_t v35 = "integrity_health_l1";
  *((void *)v35 + 1) = 19LL;
  v35[16] = 2;
  v11();
  uint64_t v36 = (void *)(v54 + v6 + 14 * v4);
  uint64_t v37 = (char *)v36 + *(int *)(v2 + 48);
  *uint64_t v36 = 15LL;
  *(void *)uint64_t v37 = "sv_band_corrections";
  *((void *)v37 + 1) = 19LL;
  v37[16] = 2;
  v11();
  uint64_t v38 = (void *)(v54 + v6 + 15 * v4);
  uint64_t v39 = (char *)v38 + *(int *)(v2 + 48);
  *uint64_t v38 = 16LL;
  *(void *)uint64_t v39 = "polynomial_orbit";
  *((void *)v39 + 1) = 16LL;
  v39[16] = 2;
  v11();
  uint64_t v40 = v54 + v6 + 16 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 16 * v4) = 18LL;
  *(void *)uint64_t v40 = "over_the_air_from_sv_health_l5";
  *(void *)(v40 + 8) = 30LL;
  *(_BYTE *)(v40 + 16) = 2;
  v11();
  uint64_t v41 = (void *)(v54 + v6 + 17 * v4);
  uint64_t v42 = (char *)v41 + *(int *)(v2 + 48);
  *uint64_t v41 = 19LL;
  *(void *)uint64_t v42 = "over_the_air_from_other_sv_health_l5";
  *((void *)v42 + 1) = 36LL;
  v42[16] = 2;
  v11();
  uint64_t v43 = (void *)(v54 + v6 + 18 * v4);
  uint64_t v44 = (char *)v43 + *(int *)(v2 + 48);
  *uint64_t v43 = 20LL;
  *(void *)uint64_t v44 = "assistance_file_health_l5";
  *((void *)v44 + 1) = 25LL;
  v44[16] = 2;
  v11();
  uint64_t v45 = (void *)(v54 + v6 + 19 * v4);
  uint64_t v46 = (char *)v45 + *(int *)(v2 + 48);
  *uint64_t v45 = 21LL;
  *(void *)uint64_t v46 = "ms_based_health_l5";
  *((void *)v46 + 1) = 18LL;
  v46[16] = 2;
  v11();
  uint64_t v47 = (void *)(v54 + v6 + 20 * v4);
  uint64_t v48 = (char *)v47 + *(int *)(v2 + 48);
  *uint64_t v47 = 22LL;
  *(void *)uint64_t v48 = "integrity_health_l5";
  *((void *)v48 + 1) = 19LL;
  v48[16] = 2;
  v11();
  uint64_t v49 = (void *)(v54 + v6 + 21 * v4);
  uint64_t v50 = (char *)v49 + *(int *)(v2 + 48);
  *uint64_t v49 = 23LL;
  *(void *)uint64_t v50 = "clock_frequency_accel_correction_ppb_per_sec_per_sec";
  *((void *)v50 + 1) = 52LL;
  v50[16] = 2;
  v11();
  uint64_t v51 = (void *)(v54 + v6 + 22 * v4);
  uint64_t v52 = (char *)v51 + *(int *)(v2 + 48);
  *uint64_t v51 = 24LL;
  *(void *)uint64_t v52 = "sv_reference_point";
  *((void *)v52 + 1) = 18LL;
  v52[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v54);
}

uint64_t sub_10004EBF8()
{
  return sub_100008C30(&qword_10036D8F0, (uint64_t)qword_1003696B8, (uint64_t)sub_10004E63C);
}

uint64_t sub_10004EC14@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D8F0, (uint64_t)qword_1003696B8, (uint64_t)sub_10004E63C, a1);
}

uint64_t sub_10004EC30()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0LL);
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 1LL, 1LL, v3);
  uint64_t v4 = v1
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds;
  *(void *)uint64_t v4 = 0LL;
  *(_BYTE *)(v4 + 8) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource) = 7;
  *(void *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions) = &_swiftEmptyArrayStorage;
  uint64_t v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds;
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + 8) = 1;
  uint64_t v6 = v1
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb;
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  uint64_t v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  *(void *)uint64_t v7 = 0LL;
  *(_BYTE *)(v7 + 8) = 1;
  uint64_t v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1) = 5;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1) = 5;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1) = 5;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1) = 5;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1) = 5;
  *(void *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections) = &_swiftEmptyArrayStorage;
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))( v10,  1LL,  1LL,  v11);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5) = 5;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5) = 5;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5) = 5;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5) = 5;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5) = 5;
  uint64_t v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  *(void *)uint64_t v13 = 0LL;
  *(_BYTE *)(v13 + 8) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint) = 4;
  qword_10036D900 = v1;
  return result;
}

uint64_t sub_10004EE1C()
{
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions));
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections));
  sub_100015764( v0 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit,  &qword_1003518A8);
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_10004EE8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v9)) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v3 + v9);
    uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0LL);
    uint64_t v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v13 = swift_retain(v10);
    sub_10005F438(v13);
    swift_release(v10);
    uint64_t v14 = *(void *)(v6 + v9);
    *(void *)(v6 + v9) = v12;
    swift_release(v14);
  }

  uint64_t v15 = *(void *)(v6 + v9);
  swift_retain(v15);
  uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1LL:
          uint64_t v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id,  v43,  33LL,  0LL);
          uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL);
          uint64_t v21 = &qword_100351CE8;
          char v22 = type metadata accessor for CLP_LogEntry_PrivateData_SvId;
          uint64_t v23 = &unk_1002B57E4;
          goto LABEL_25;
        case 2LL:
          uint64_t v24 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds;
          goto LABEL_34;
        case 3LL:
          uint64_t v25 = v15
              + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource,  v43,  33LL,  0LL);
          unint64_t v26 = sub_10007FAD0();
          uint64_t v27 = v25;
          uint64_t v28 = &type metadata for CLP_LogEntry_PrivateData_SvPositionSource;
          goto LABEL_32;
        case 4LL:
          uint64_t v29 = v15
              + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions,  v43,  33LL,  0LL);
          uint64_t v30 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0LL);
          uint64_t v31 = &qword_100351F70;
          uint64_t v32 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime;
          uint64_t v33 = &unk_1002B7DDC;
          goto LABEL_23;
        case 5LL:
          uint64_t v24 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds;
          goto LABEL_34;
        case 6LL:
          uint64_t v24 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb;
          goto LABEL_34;
        case 7LL:
          uint64_t v24 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
          goto LABEL_34;
        case 8LL:
          uint64_t v34 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
          goto LABEL_16;
        case 9LL:
          uint64_t v34 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
LABEL_16:
          uint64_t v35 = v15 + v34;
          swift_beginAccess(v15 + v34, v43, 33LL, 0LL);
          uint64_t v36 = v5;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v35, a2, a3);
          goto LABEL_35;
        case 10LL:
          uint64_t v37 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1;
          goto LABEL_31;
        case 11LL:
          uint64_t v37 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1;
          goto LABEL_31;
        case 12LL:
          uint64_t v37 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1;
          goto LABEL_31;
        case 13LL:
          uint64_t v37 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1;
          goto LABEL_31;
        case 14LL:
          uint64_t v37 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1;
          goto LABEL_31;
        case 15LL:
          uint64_t v29 = v15
              + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections,  v43,  33LL,  0LL);
          uint64_t v30 = type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0LL);
          uint64_t v31 = &qword_100351F58;
          uint64_t v32 = type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections;
          uint64_t v33 = &unk_1002B7C74;
LABEL_23:
          uint64_t v38 = sub_10000FD98(v31, v32, (uint64_t)v33);
          uint64_t v36 = v5;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v29, v30, v38, a2, a3);
          goto LABEL_35;
        case 16LL:
          uint64_t v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit,  v43,  33LL,  0LL);
          uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0LL);
          uint64_t v21 = &qword_100351F88;
          char v22 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit;
          uint64_t v23 = &unk_1002B7F44;
LABEL_25:
          uint64_t v39 = sub_10000FD98(v21, v22, (uint64_t)v23);
          uint64_t v36 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v19, v20, v39, a2, a3);
          goto LABEL_35;
        case 18LL:
          uint64_t v37 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5;
          goto LABEL_31;
        case 19LL:
          uint64_t v37 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5;
          goto LABEL_31;
        case 20LL:
          uint64_t v37 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5;
          goto LABEL_31;
        case 21LL:
          uint64_t v37 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5;
          goto LABEL_31;
        case 22LL:
          uint64_t v37 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5;
LABEL_31:
          uint64_t v40 = v15 + v37;
          swift_beginAccess(v15 + v37, v43, 33LL, 0LL);
          unint64_t v26 = sub_10007FA8C();
          uint64_t v27 = v40;
          uint64_t v28 = &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication;
          goto LABEL_32;
        case 23LL:
          uint64_t v24 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
LABEL_34:
          uint64_t v41 = v15 + v24;
          swift_beginAccess(v15 + v24, v43, 33LL, 0LL);
          uint64_t v36 = v5;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v41, a2, a3);
          goto LABEL_35;
        case 24LL:
          uint64_t v42 = v15
              + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint,  v43,  33LL,  0LL);
          unint64_t v26 = sub_10007F97C();
          uint64_t v27 = v42;
          uint64_t v28 = &type metadata for CLP_LogEntry_PrivateData_SvReferencePoint;
LABEL_32:
          uint64_t v36 = v5;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v27, v28, v26, a2, a3);
LABEL_35:
          uint64_t v5 = v36;
          swift_endAccess(v43);
          break;
        default:
          break;
      }

      uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return swift_release(v15);
}

uint64_t sub_10004F304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL) + 20));
  uint64_t v10 = swift_retain(v9);
  sub_10004FB78(v10, a1, a2, a3);
  if (v4) {
    return swift_release(v9);
  }
  uint64_t v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds,  v55,  0LL,  0LL);
  if ((*(_BYTE *)(v12 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2LL, a2, a3, *(double *)v12);
  }
  uint64_t v13 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource,  v56,  0LL,  0LL);
  if (*v13 != 7)
  {
    v73[0] = *v13;
    unint64_t v14 = sub_10007FAD0();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v73,  3LL,  &type metadata for CLP_LogEntry_PrivateData_SvPositionSource,  v14,  a2,  a3);
  }

  uint64_t v15 = (uint64_t *)(v9
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions,  v54,  0LL,  0LL);
  uint64_t v16 = *v15;
  if (*(void *)(v16 + 16))
  {
    uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0LL);
    uint64_t v18 = sub_10000FD98( &qword_100351F70,  type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime,  (uint64_t)&unk_1002B7DDC);
    uint64_t v19 = swift_bridgeObjectRetain(v16);
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v19, 4LL, v17, v18, a2, a3);
    swift_bridgeObjectRelease(v16);
  }

  uint64_t v20 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds,  v57,  0LL,  0LL);
  if ((*(_BYTE *)(v20 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(5LL, a2, a3, *(double *)v20);
  }
  uint64_t v21 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb,  v73,  0LL,  0LL);
  if ((*(_BYTE *)(v21 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(6LL, a2, a3, *(double *)v21);
  }
  uint64_t v22 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec,  v72,  0LL,  0LL);
  if ((*(_BYTE *)(v22 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(7LL, a2, a3, *(double *)v22);
  }
  uint64_t v23 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM,  v71,  0LL,  0LL);
  if ((*(_BYTE *)(v23 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(8LL, a2, a3, *(float *)v23);
  }
  uint64_t v24 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds,  v70,  0LL,  0LL);
  if ((*(_BYTE *)(v24 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(9LL, a2, a3, *(float *)v24);
  }
  uint64_t v25 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1,  v69,  0LL,  0LL);
  if (*v25 != 5)
  {
    v68[0] = *v25;
    unint64_t v26 = sub_10007FA8C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v68,  10LL,  &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication,  v26,  a2,  a3);
  }

  uint64_t v27 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1,  v68,  0LL,  0LL);
  if (*v27 != 5)
  {
    v67[0] = *v27;
    unint64_t v28 = sub_10007FA8C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v67,  11LL,  &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication,  v28,  a2,  a3);
  }

  uint64_t v29 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1,  v67,  0LL,  0LL);
  if (*v29 != 5)
  {
    v66[0] = *v29;
    unint64_t v30 = sub_10007FA8C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v66,  12LL,  &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication,  v30,  a2,  a3);
  }

  uint64_t v31 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1,  v66,  0LL,  0LL);
  if (*v31 != 5)
  {
    v65[0] = *v31;
    unint64_t v32 = sub_10007FA8C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v65,  13LL,  &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication,  v32,  a2,  a3);
  }

  uint64_t v33 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1,  v65,  0LL,  0LL);
  if (*v33 != 5)
  {
    v64[0] = *v33;
    unint64_t v34 = sub_10007FA8C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v64,  14LL,  &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication,  v34,  a2,  a3);
  }

  uint64_t v35 = (uint64_t *)(v9
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections,  v53,  0LL,  0LL);
  uint64_t v36 = *v35;
  if (*(void *)(v36 + 16))
  {
    uint64_t v37 = type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0LL);
    uint64_t v38 = sub_10000FD98( &qword_100351F58,  type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections,  (uint64_t)&unk_1002B7C74);
    uint64_t v39 = swift_bridgeObjectRetain(v36);
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v39, 15LL, v37, v38, a2, a3);
    swift_bridgeObjectRelease(v36);
  }

  sub_10004FD04(v9, a1, a2, a3);
  uint64_t v40 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5,  v64,  0LL,  0LL);
  if (*v40 != 5)
  {
    v63[0] = *v40;
    unint64_t v41 = sub_10007FA8C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v63,  18LL,  &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication,  v41,  a2,  a3);
  }

  uint64_t v42 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5,  v63,  0LL,  0LL);
  if (*v42 != 5)
  {
    v62[0] = *v42;
    unint64_t v43 = sub_10007FA8C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v62,  19LL,  &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication,  v43,  a2,  a3);
  }

  uint64_t v44 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5,  v62,  0LL,  0LL);
  if (*v44 != 5)
  {
    v61[0] = *v44;
    unint64_t v45 = sub_10007FA8C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v61,  20LL,  &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication,  v45,  a2,  a3);
  }

  uint64_t v46 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5,  v61,  0LL,  0LL);
  if (*v46 != 5)
  {
    v60[0] = *v46;
    unint64_t v47 = sub_10007FA8C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v60,  21LL,  &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication,  v47,  a2,  a3);
  }

  uint64_t v48 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5,  v60,  0LL,  0LL);
  if (*v48 != 5)
  {
    v59[0] = *v48;
    unint64_t v49 = sub_10007FA8C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v59,  22LL,  &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication,  v49,  a2,  a3);
  }

  uint64_t v50 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec,  v59,  0LL,  0LL);
  if ((*(_BYTE *)(v50 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(23LL, a2, a3, *(double *)v50);
  }
  uint64_t v51 = (char *)(v9
               + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint,  v58,  0LL,  0LL);
  if (*v51 != 4)
  {
    char v74 = *v51;
    unint64_t v52 = sub_10007F97C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v74,  24LL,  &type metadata for CLP_LogEntry_PrivateData_SvReferencePoint,  v52,  a2,  a3);
  }

  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10004FB78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100351858);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100351858);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  uint64_t v15 = sub_10000FD98( &qword_100351CE8,  type metadata accessor for CLP_LogEntry_PrivateData_SvId,  (uint64_t)&unk_1002B57E4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_10004FD04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003518A8);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_1003518A8);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  uint64_t v15 = sub_10000FD98( &qword_100351F88,  type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit,  (uint64_t)&unk_1002B7F44);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 16LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t sub_10004FE90(uint64_t a1, uint64_t a2)
{
  return sub_100065AC0( a1,  a2,  type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  (uint64_t (*)(uint64_t, uint64_t))sub_10004FEB8) & 1;
}

BOOL sub_10004FEB8(uint64_t a1, uint64_t a2)
{
  uint64_t v134 = a2;
  uint64_t v130 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0LL);
  uint64_t v128 = *(void *)(v130 - 8);
  __chkstk_darwin(v130);
  char v125 = (uint64_t *)((char *)&v124 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v127 = sub_100003A0C(&qword_100354FA0);
  __chkstk_darwin(v127);
  uint64_t v131 = (uint64_t)&v124 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100003A0C(&qword_1003518A8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v126 = (uint64_t *)((char *)&v124 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v6);
  uint64_t v129 = (uint64_t)&v124 - v8;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v132 = (uint64_t)&v124 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100003A0C(&qword_100354FA8);
  __chkstk_darwin(v12);
  unint64_t v14 = (char *)&v124 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100003A0C(&qword_100351858);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v133 = (uint64_t)&v124 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v124 - v18;
  uint64_t v20 = a1;
  uint64_t v21 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess(v21, v180, 0LL, 0LL);
  sub_10000E6C0(v21, (uint64_t)v19, &qword_100351858);
  uint64_t v22 = v134;
  uint64_t v23 = v134
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess( v134 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id,  v179,  0LL,  0LL);
  uint64_t v24 = (uint64_t)&v14[*(int *)(v12 + 48)];
  sub_10000E6C0((uint64_t)v19, (uint64_t)v14, &qword_100351858);
  sub_10000E6C0(v23, v24, &qword_100351858);
  uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v25((uint64_t)v14, 1LL, v9) == 1)
  {
    swift_retain(v20);
    swift_retain(v22);
    sub_100015764((uint64_t)v19, &qword_100351858);
    int v26 = v25(v24, 1LL, v9);
    uint64_t v27 = v22;
    uint64_t v28 = v20;
    if (v26 == 1)
    {
      sub_100015764((uint64_t)v14, &qword_100351858);
      goto LABEL_12;
    }

LABEL_79:
    sub_100015764(v131, &qword_100354FA0);
    goto LABEL_80;
  }

  sub_10000E6C0(v131, (uint64_t)v126, &qword_1003518A8);
  if (v93(v92, 1LL, v130) == 1)
  {
    sub_100015764(v129, &qword_1003518A8);
    sub_100004090((uint64_t)v126, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
    goto LABEL_79;
  }

  char v94 = v125;
  sub_100003E68(v92, (uint64_t)v125, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  uint64_t v95 = v126;
  char v96 = sub_100062A70(v126, v94);
  sub_100004090((uint64_t)v94, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  sub_100015764(v129, &qword_1003518A8);
  sub_100004090((uint64_t)v95, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  sub_100015764(v131, &qword_1003518A8);
  if ((v96 & 1) == 0) {
    goto LABEL_80;
  }
LABEL_82:
  uint64_t v97 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
  swift_beginAccess( v28 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5,  &v148,  0LL,  0LL);
  int v98 = *v97;
  uint64_t v99 = (unsigned __int8 *)(v68
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
  swift_beginAccess( v68 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5,  &v147,  0LL,  0LL);
  int v100 = *v99;
  if (v98 == 5)
  {
    if (v100 != 5) {
      goto LABEL_80;
    }
  }

  else if (v100 == 5 || v98 != v100)
  {
    goto LABEL_80;
  }

  uint64_t v101 = (unsigned __int8 *)(v28
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
  swift_beginAccess( v28 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5,  &v146,  0LL,  0LL);
  int v102 = *v101;
  uint64_t v103 = (unsigned __int8 *)(v68
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
  swift_beginAccess( v68 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5,  &v145,  0LL,  0LL);
  int v104 = *v103;
  if (v102 == 5)
  {
    if (v104 != 5) {
      goto LABEL_80;
    }
  }

  else if (v104 == 5 || v102 != v104)
  {
    goto LABEL_80;
  }

  uint64_t v105 = (unsigned __int8 *)(v28
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
  swift_beginAccess( v28 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5,  &v144,  0LL,  0LL);
  int v106 = *v105;
  uint64_t v107 = (unsigned __int8 *)(v68
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
  swift_beginAccess( v68 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5,  &v143,  0LL,  0LL);
  int v108 = *v107;
  if (v106 == 5)
  {
    if (v108 != 5) {
      goto LABEL_80;
    }
  }

  else if (v108 == 5 || v106 != v108)
  {
    goto LABEL_80;
  }

  uint64_t v109 = (unsigned __int8 *)(v28
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
  swift_beginAccess( v28 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5,  &v142,  0LL,  0LL);
  int v110 = *v109;
  int v111 = (unsigned __int8 *)(v68
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
  swift_beginAccess( v68 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5,  &v141,  0LL,  0LL);
  int v112 = *v111;
  if (v110 == 5)
  {
    if (v112 != 5) {
      goto LABEL_80;
    }
  }

  else if (v112 == 5 || v110 != v112)
  {
    goto LABEL_80;
  }

  uint64_t v113 = (unsigned __int8 *)(v28
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
  swift_beginAccess( v28 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5,  &v140,  0LL,  0LL);
  int v114 = *v113;
  uint64_t v115 = (unsigned __int8 *)(v68
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
  swift_beginAccess( v68 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5,  &v139,  0LL,  0LL);
  int v116 = *v115;
  if (v114 == 5)
  {
    if (v116 != 5) {
      goto LABEL_80;
    }
  }

  else if (v116 == 5 || v114 != v116)
  {
    goto LABEL_80;
  }

  uint64_t v117 = v28
       + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  swift_beginAccess( v28 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec,  &v138,  0LL,  0LL);
  double v118 = *(double *)v117;
  LOBYTE(v117) = *(_BYTE *)(v117 + 8);
  uint64_t v119 = v68
       + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  swift_beginAccess( v68 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec,  &v137,  0LL,  0LL);
  if ((v117 & 1) != 0)
  {
    if ((*(_BYTE *)(v119 + 8) & 1) != 0) {
      goto LABEL_112;
    }
LABEL_80:
    swift_release(v28);
    uint64_t v31 = v68;
    goto LABEL_8;
  }

    int v65 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v65(v10, a1, v4);
    v65(v8, a2, v4);
    uint64_t v66 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    int v67 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v66);
    uint64_t v68 = *(void (**)(char *, uint64_t))(v5 + 8);
    v68(v8, v4);
    v68(v10, v4);
    LOBYTE(v16) = v67;
    return v16 & 1;
  }

  LOBYTE(v16) = 0;
  if (v63 != 7 && v62 == v63) {
    goto LABEL_79;
  }
  return v16 & 1;
}

LABEL_112:
  uint64_t v120 = (unsigned __int8 *)(v28
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  swift_beginAccess( v28 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint,  &v136,  0LL,  0LL);
  int v121 = *v120;
  swift_release(v28);
  uint64_t v122 = (unsigned __int8 *)(v68
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  swift_beginAccess( v68 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint,  &v135,  0LL,  0LL);
  int v123 = *v122;
  swift_release(v68);
  if (v121 == 4) {
    return v123 == 4;
  }
  BOOL result = 0LL;
  if (v123 != 4 && v121 == v123) {
    return 1LL;
  }
  return result;
}

Swift::Int sub_100050D18()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  &qword_100351A28,  (uint64_t)&unk_1002B81AC);
}

uint64_t sub_100050D34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD7C(a1, &qword_10036D8F8, &qword_10036D900, (uint64_t)sub_10004EC30, a2);
}

uint64_t sub_100050D50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004EE8C(a1, a2, a3);
}

uint64_t sub_100050D64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004F304(a1, a2, a3);
}

uint64_t sub_100050D78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354E18,  type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  (uint64_t)&unk_1002B8124);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100050DC8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D8F0, (uint64_t)qword_1003696B8, (uint64_t)sub_10004E63C, a1);
}

uint64_t sub_100050DE4(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351FA0,  type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  (uint64_t)&unk_1002B80AC);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100050E24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351FA0,  type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  (uint64_t)&unk_1002B80AC);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100050E74()
{
  return &unk_10033DFC0;
}

unint64_t sub_100050E80()
{
  return 0xD000000000000030LL;
}

uint64_t sub_100050E9C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003696D0);
  sub_10000E704(v0, (uint64_t)qword_1003696D0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "band";
  *(void *)(v9 + 8) = 4LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "rf_time_bias_nanoseconds";
  *(void *)(v13 + 8) = 24LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  unint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *unint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "rf_time_bias_uncertainty_nanoseconds";
  *((void *)v15 + 1) = 36LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 4LL;
  *(void *)uint64_t v17 = "automatic_gain_control_db";
  *((void *)v17 + 1) = 25LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10005106C()
{
  return sub_100008C30(&qword_10036D908, (uint64_t)qword_1003696D0, (uint64_t)sub_100050E9C);
}

uint64_t sub_100051088@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D908, (uint64_t)qword_1003696D0, (uint64_t)sub_100050E9C, a1);
}

uint64_t sub_1000510A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0LL) + 20);
          unint64_t v11 = sub_10007FBE0();
          uint64_t v12 = v9;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v10,  &type metadata for CLP_LogEntry_PrivateData_Band,  v11,  a2,  a3);
          goto LABEL_5;
        case 2LL:
          uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0LL);
          uint64_t v12 = v9;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + *(int *)(v13 + 24), a2, a3);
          goto LABEL_5;
        case 3LL:
          uint64_t v14 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0LL) + 28);
          goto LABEL_12;
        case 4LL:
          uint64_t v14 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0LL) + 32);
LABEL_12:
          uint64_t v12 = v9;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + v14, a2, a3);
LABEL_5:
          uint64_t v9 = v12;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000511D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0LL);
  uint64_t v10 = (int *)result;
  if (*(_BYTE *)(v5 + *(int *)(result + 20)) != 13)
  {
    char v15 = *(_BYTE *)(v5 + *(int *)(result + 20));
    unint64_t v11 = sub_10007FBE0();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v15,  1LL,  &type metadata for CLP_LogEntry_PrivateData_Band,  v11,  a2,  a3);
  }

  if (!v4)
  {
    uint64_t v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2LL, a2, a3, *(double *)v12);
    }
    uint64_t v13 = v5 + v10[7];
    if ((*(_BYTE *)(v13 + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(3LL, a2, a3, *(float *)v13);
    }
    uint64_t v14 = v5 + v10[8];
    if ((*(_BYTE *)(v14 + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(4LL, a2, a3, *(float *)v14);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_100051324()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections,  &qword_100351A30,  (uint64_t)&unk_1002B8314);
}

uint64_t sub_100051340@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 13;
  uint64_t v6 = a2 + v5;
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  uint64_t v7 = a1[8];
  uint64_t v8 = a2 + a1[7];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  return result;
}

uint64_t sub_10005139C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000510A4(a1, a2, a3);
}

uint64_t sub_1000513B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000511D8(a1, a2, a3);
}

uint64_t sub_1000513C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354E10,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections,  (uint64_t)&unk_1002B828C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100051414@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D908, (uint64_t)qword_1003696D0, (uint64_t)sub_100050E9C, a1);
}

uint64_t sub_100051430(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351FB8,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections,  (uint64_t)&unk_1002B8214);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100051470(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351FB8,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections,  (uint64_t)&unk_1002B8214);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000514C0()
{
  return &unk_10033DFD0;
}

unint64_t sub_1000514CC()
{
  return 0xD000000000000029LL;
}

uint64_t sub_1000514E8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003696E8);
  sub_10000E704(v0, (uint64_t)qword_1003696E8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3340;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "time_of_change";
  *(void *)(v9 + 8) = 14LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "new_leap_second";
  *((void *)v13 + 1) = 15LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100051638()
{
  return sub_100008C30(&qword_10036D910, (uint64_t)qword_1003696E8, (uint64_t)sub_1000514E8);
}

uint64_t sub_100051654@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D910, (uint64_t)qword_1003696E8, (uint64_t)sub_1000514E8, a1);
}

uint64_t sub_100051670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v11 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
      dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v3 + *(int *)(v9 + 24), a2, a3);
    }

    else if (result == 1)
    {
      uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
      dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v3 + *(int *)(v12 + 20), a2, a3);
    }

    uint64_t v4 = 0LL;
    uint64_t v7 = a2;
  }

  return result;
}

uint64_t sub_10005173C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
  uint64_t v10 = result;
  uint64_t v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(void *)v11, 1LL, a2, a3);
  }
  if (!v4)
  {
    uint64_t v12 = (unsigned int *)(v5 + *(int *)(v10 + 24));
    if ((v12[1] & 1) == 0) {
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v12, 2LL, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_100051808()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange,  &qword_100351A38,  (uint64_t)&unk_1002B847C);
}

uint64_t sub_100051824@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = *(int *)(a1 + 24);
  uint64_t v6 = a2 + *(int *)(a1 + 20);
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  uint64_t v7 = a2 + v5;
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  return result;
}

uint64_t sub_100051868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100051670(a1, a2, a3);
}

uint64_t sub_10005187C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005173C(a1, a2, a3);
}

uint64_t sub_100051890(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354E08,  type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange,  (uint64_t)&unk_1002B83F4);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000518E0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D910, (uint64_t)qword_1003696E8, (uint64_t)sub_1000514E8, a1);
}

uint64_t sub_1000518FC(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351FD0,  type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange,  (uint64_t)&unk_1002B837C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10005193C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351FD0,  type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange,  (uint64_t)&unk_1002B837C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100051990()
{
  return &unk_10033DFE0;
}

unint64_t sub_10005199C()
{
  return 0xD000000000000027LL;
}

uint64_t sub_1000519B8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369700);
  sub_10000E704(v0, (uint64_t)qword_100369700);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "current_leap_second";
  *(void *)(v9 + 8) = 19LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "change_knowledge";
  *((void *)v13 + 1) = 16LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "new_leap_second";
  *(void *)(v14 + 8) = 15LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100051B4C()
{
  return sub_100008C30(&qword_10036D918, (uint64_t)qword_100369700, (uint64_t)sub_1000519B8);
}

uint64_t sub_100051B68@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D918, (uint64_t)qword_100369700, (uint64_t)sub_1000519B8, a1);
}

uint64_t sub_100051B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v15 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL) + 24);
        unint64_t v16 = sub_10007FA04();
        uint64_t v13 = v9;
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v15,  &type metadata for CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge,  v16,  a2,  a3);
        goto LABEL_5;
      }

      if (result == 1)
      {
        uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
        uint64_t v13 = v9;
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + *(int *)(v14 + 20), a2, a3);
        goto LABEL_5;
      }

uint64_t sub_100051CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  uint64_t v10 = result;
  uint64_t v11 = (unsigned int *)(v5 + *(int *)(result + 20));
  if ((v11[1] & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v11, 1LL, a2, a3);
  }
  if (!v4)
  {
    if (*(_BYTE *)(v5 + *(int *)(v10 + 24)) != 5)
    {
      char v13 = *(_BYTE *)(v5 + *(int *)(v10 + 24));
      unint64_t v12 = sub_10007FA04();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v13,  2LL,  &type metadata for CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge,  v12,  a2,  a3);
    }

    sub_100051DE0(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_100051DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003518B0);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_1003518B0);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
  uint64_t v15 = sub_10000FD98( &qword_100351FD0,  type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange,  (uint64_t)&unk_1002B837C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

Swift::Int sub_100051F58()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo,  &qword_100351A40,  (uint64_t)&unk_1002B85E4);
}

uint64_t sub_100051F74@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[6];
  uint64_t v5 = a2 + a1[5];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  *(_BYTE *)(a2 + v4) = 5;
  uint64_t v6 = a2 + a1[7];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t sub_100051FDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100051B84(a1, a2, a3);
}

uint64_t sub_100051FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100051CDC(a1, a2, a3);
}

uint64_t sub_100052004(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354E00,  type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo,  (uint64_t)&unk_1002B855C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100052054@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D918, (uint64_t)qword_100369700, (uint64_t)sub_1000519B8, a1);
}

uint64_t sub_100052070(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100351FE8,  type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo,  (uint64_t)&unk_1002B84E4);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000520B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100351FE8,  type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo,  (uint64_t)&unk_1002B84E4);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100052104()
{
  return &unk_10033DFF0;
}

unint64_t sub_100052110()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_10005212C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369718);
  sub_10000E704(v0, (uint64_t)qword_100369718);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "applicable_time_nanoseconds";
  *(void *)(v9 + 8) = 27LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  unint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "offset_nanoseconds";
  *(void *)(v13 + 8) = 18LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "drift_ppb";
  *((void *)v15 + 1) = 9LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 4LL;
  *(void *)uint64_t v17 = "accel_ppb_per_second";
  *((void *)v17 + 1) = 20LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000522EC()
{
  return sub_100008C30(&qword_10036D920, (uint64_t)qword_100369718, (uint64_t)sub_10005212C);
}

uint64_t sub_100052308@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D920, (uint64_t)qword_100369718, (uint64_t)sub_10005212C, a1);
}

uint64_t sub_100052324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0LL);
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v3 + *(int *)(v10 + 20), a2, a3);
          break;
        case 2LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0LL) + 24);
          goto LABEL_5;
        case 3LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0LL) + 28);
          goto LABEL_5;
        case 4LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0LL) + 32);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v9, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_100052430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0LL);
  uint64_t v10 = (int *)result;
  uint64_t v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(void *)v11, 1LL, a2, a3);
  }
  if (!v4)
  {
    uint64_t v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2LL, a2, a3, *(double *)v12);
    }
    uint64_t v13 = v5 + v10[7];
    if ((*(_BYTE *)(v13 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3LL, a2, a3, *(double *)v13);
    }
    uint64_t v14 = v5 + v10[8];
    if ((*(_BYTE *)(v14 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(4LL, a2, a3, *(double *)v14);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_100052560()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion,  &qword_100351A48,  (uint64_t)&unk_1002B874C);
}

uint64_t sub_10005257C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  uint64_t v7 = a2 + v5;
  *(void *)uint64_t v7 = 0LL;
  *(_BYTE *)(v7 + 8) = 1;
  uint64_t v8 = a1[8];
  uint64_t v9 = a2 + a1[7];
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  uint64_t v10 = a2 + v8;
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  return result;
}

uint64_t sub_1000525DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100052324(a1, a2, a3);
}

uint64_t sub_1000525F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100052430(a1, a2, a3);
}

uint64_t sub_100052604(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354DF8,  type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion,  (uint64_t)&unk_1002B86C4);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100052654@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D920, (uint64_t)qword_100369718, (uint64_t)sub_10005212C, a1);
}

uint64_t sub_100052670(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100352000,  type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion,  (uint64_t)&unk_1002B864C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000526B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100352000,  type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion,  (uint64_t)&unk_1002B864C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100052700()
{
  return &unk_10033E000;
}

unint64_t sub_10005270C()
{
  return 0xD000000000000024LL;
}

uint64_t sub_100052728()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369730);
  sub_10000E704(v0, (uint64_t)qword_100369730);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "week";
  *(void *)(v9 + 8) = 4LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "leap_second";
  *((void *)v13 + 1) = 11LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "conversion";
  *(void *)(v14 + 8) = 10LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000528C4()
{
  return sub_100008C30(&qword_10036D928, (uint64_t)qword_100369730, (uint64_t)sub_100052728);
}

uint64_t sub_1000528E0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D928, (uint64_t)qword_100369730, (uint64_t)sub_100052728, a1);
}

uint64_t sub_1000528FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0LL) + 24);
        uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
        uint64_t v11 = &qword_100351FE8;
        uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo;
        uint64_t v13 = &unk_1002B84E4;
        goto LABEL_5;
      }

      if (result == 1)
      {
        uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0LL);
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + *(int *)(v15 + 20), a2, a3);
      }

LABEL_11:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    uint64_t v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0LL) + 28);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0LL);
    uint64_t v11 = &qword_100352000;
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion;
    uint64_t v13 = &unk_1002B864C;
LABEL_5:
    uint64_t v14 = sub_10000FD98(v11, v12, (uint64_t)v13);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v14, a2, a3);
    goto LABEL_11;
  }

  return result;
}

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0LL) + 28);
LABEL_5:
    dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + v9, a2, a3);
    goto LABEL_11;
  }

  return result;
}

    sub_100015764((uint64_t)v11, &qword_10035C408);
    goto LABEL_57;
  }

  sub_10000E6C0((uint64_t)v11, (uint64_t)v19, &qword_100355540);
  if (v29(v28, 1LL, v30) == 1)
  {
    swift_retain(v25);
    swift_retain(v24);
    sub_100015764((uint64_t)v21, &qword_100355540);
    sub_100004090((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
    goto LABEL_11;
  }

  uint64_t v31 = v28;
  unint64_t v32 = (uint64_t)v113;
  sub_100003E68(v31, (uint64_t)v113, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  swift_retain(v25);
  swift_retain(v24);
  uint64_t v33 = sub_10011F4C0((uint64_t)v19, v32, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_100004090(v32, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_100015764((uint64_t)v21, &qword_100355540);
  sub_100004090((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_100015764((uint64_t)v11, &qword_100355540);
  if ((v33 & 1) == 0) {
    goto LABEL_57;
  }
LABEL_14:
  char v34 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy;
  swift_beginAccess( v25 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy,  v157,  0LL,  0LL);
  uint64_t v35 = *(double *)v34;
  LOBYTE(v34) = *(_BYTE *)(v34 + 8);
  double v36 = v24
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy;
  swift_beginAccess( v24 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy,  v156,  0LL,  0LL);
  uint64_t v37 = v24;
  if ((v34 & 1) != 0)
  {
    if ((*(_BYTE *)(v36 + 8) & 1) == 0) {
      goto LABEL_57;
    }
  }

  else if ((*(_BYTE *)(v36 + 8) & 1) != 0 || v35 != *(double *)v36)
  {
    goto LABEL_57;
  }

  uint64_t v38 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude;
  swift_beginAccess( v25 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude,  &v155,  0LL,  0LL);
  int v39 = *(double *)v38;
  LOBYTE(v38) = *(_BYTE *)(v38 + 8);
  uint64_t v40 = v24
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude;
  swift_beginAccess( v24 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude,  &v154,  0LL,  0LL);
  if ((v38 & 1) != 0)
  {
    if ((*(_BYTE *)(v40 + 8) & 1) == 0) {
      goto LABEL_57;
    }
  }

  else if ((*(_BYTE *)(v40 + 8) & 1) != 0 || v39 != *(double *)v40)
  {
    goto LABEL_57;
  }

  int v41 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy;
  swift_beginAccess( v25 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy,  &v153,  0LL,  0LL);
  uint64_t v42 = *(double *)v41;
  LOBYTE(v41) = *(_BYTE *)(v41 + 8);
  uint64_t v43 = v24
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy;
  swift_beginAccess( v24 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy,  &v152,  0LL,  0LL);
  if ((v41 & 1) != 0)
  {
    if ((*(_BYTE *)(v43 + 8) & 1) == 0) {
      goto LABEL_57;
    }
  }

  else if ((*(_BYTE *)(v43 + 8) & 1) != 0 || v42 != *(double *)v43)
  {
    goto LABEL_57;
  }

  uint64_t v44 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  swift_beginAccess( v25 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed,  &v151,  0LL,  0LL);
  uint64_t v45 = *(double *)v44;
  LOBYTE(v44) = *(_BYTE *)(v44 + 8);
  char v46 = v24
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  swift_beginAccess( v24 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed,  &v150,  0LL,  0LL);
  if ((v44 & 1) != 0)
  {
    if ((*(_BYTE *)(v46 + 8) & 1) == 0) {
      goto LABEL_57;
    }
  }

  else if ((*(_BYTE *)(v46 + 8) & 1) != 0 || v45 != *(double *)v46)
  {
    goto LABEL_57;
  }

  uint64_t v47 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  swift_beginAccess( v25 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy,  &v149,  0LL,  0LL);
  double v48 = *(double *)v47;
  LOBYTE(v47) = *(_BYTE *)(v47 + 8);
  uint64_t v49 = v24
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  swift_beginAccess( v24 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy,  &v148,  0LL,  0LL);
  if ((v47 & 1) != 0)
  {
    if ((*(_BYTE *)(v49 + 8) & 1) == 0) {
      goto LABEL_57;
    }
  }

  else if ((*(_BYTE *)(v49 + 8) & 1) != 0 || v48 != *(double *)v49)
  {
    goto LABEL_57;
  }

  uint64_t v50 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  swift_beginAccess( v25 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course,  &v147,  0LL,  0LL);
  double v51 = *(double *)v50;
  LOBYTE(v50) = *(_BYTE *)(v50 + 8);
  uint64_t v52 = v24
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  swift_beginAccess( v24 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course,  &v146,  0LL,  0LL);
  if ((v50 & 1) != 0)
  {
    if ((*(_BYTE *)(v52 + 8) & 1) == 0) {
      goto LABEL_57;
    }
  }

  else if ((*(_BYTE *)(v52 + 8) & 1) != 0 || v51 != *(double *)v52)
  {
    goto LABEL_57;
  }

  uint64_t v53 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  swift_beginAccess( v25 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy,  &v145,  0LL,  0LL);
  double v54 = *(double *)v53;
  LOBYTE(v53) = *(_BYTE *)(v53 + 8);
  uint64_t v55 = v24
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  swift_beginAccess( v24 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy,  &v144,  0LL,  0LL);
  if ((v53 & 1) != 0)
  {
    if ((*(_BYTE *)(v55 + 8) & 1) == 0) {
      goto LABEL_57;
    }
  }

  else if ((*(_BYTE *)(v55 + 8) & 1) != 0 || v54 != *(double *)v55)
  {
    goto LABEL_57;
  }

  uint64_t v56 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess( v25 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp,  &v143,  0LL,  0LL);
  float v57 = *(double *)v56;
  LOBYTE(v56) = *(_BYTE *)(v56 + 8);
  uint64_t v58 = v24
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess( v24 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp,  &v142,  0LL,  0LL);
  if ((v56 & 1) != 0)
  {
    if ((*(_BYTE *)(v58 + 8) & 1) != 0) {
      goto LABEL_54;
    }
LABEL_57:
    swift_release(v25);
    int v65 = v24;
LABEL_58:
    swift_release(v65);
    return 0LL;
  }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0LL) + 28);
LABEL_5:
    dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v3 + v9, a2, a3);
    goto LABEL_11;
  }

  return result;
}

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    uint64_t v9 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_CtsCdmaCellTime(0LL) + 28);
LABEL_5:
    dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + v9, a2, a3);
    goto LABEL_11;
  }

  return result;
}

      uint64_t v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10) {
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
      goto LABEL_5;
    }

    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    uint64_t v22 = (uint64_t *)(v18[6] + 16 * v12);
    *uint64_t v22 = a2;
    v22[1] = a3;
    *(void *)(v18[7] + 8 * v12) = a1;
    uint64_t v23 = v18[2];
    uint64_t v24 = __OFADD__(v23, 1LL);
    uint64_t v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }

    goto LABEL_14;
  }

  sub_10028F950(v15, a4 & 1);
  uint64_t v20 = sub_10028F8EC(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    uint64_t v12 = v20;
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

uint64_t sub_100052A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0LL);
  uint64_t v10 = (unsigned int *)(v5 + *(int *)(result + 20));
  if ((v10[1] & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v10, 1LL, a2, a3);
  }
  if (!v4)
  {
    sub_100052B34(v5, a1, a2, a3);
    sub_100052CA8(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_100052B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003518B8);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_1003518B8);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  uint64_t v15 = sub_10000FD98( &qword_100351FE8,  type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo,  (uint64_t)&unk_1002B84E4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_100052CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003518C0);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_1003518C0);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  uint64_t v15 = sub_10000FD98( &qword_100352000,  type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion,  (uint64_t)&unk_1002B864C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

Swift::Int sub_100052E20()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo,  &qword_100351A50,  (uint64_t)&unk_1002B88B4);
}

uint64_t sub_100052E3C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[6];
  uint64_t v5 = a2 + a1[5];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  uint64_t v8 = a2 + a1[7];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
}

uint64_t sub_100052ECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000528FC(a1, a2, a3);
}

uint64_t sub_100052EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100052A60(a1, a2, a3);
}

uint64_t sub_100052EF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354DF0,  type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo,  (uint64_t)&unk_1002B882C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100052F44@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D928, (uint64_t)qword_100369730, (uint64_t)sub_100052728, a1);
}

uint64_t sub_100052F60(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100352018,  type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo,  (uint64_t)&unk_1002B87B4);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100052FA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100352018,  type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo,  (uint64_t)&unk_1002B87B4);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100052FF0()
{
  return &unk_10033E010;
}

unint64_t sub_100052FFC()
{
  return 0xD000000000000033LL;
}

uint64_t sub_100053018()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369748);
  sub_10000E704(v0, (uint64_t)qword_100369748);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3340;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "collection_time_nanoseconds";
  *(void *)(v9 + 8) = 27LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "offset_time_nanoseconds";
  *((void *)v13 + 1) = 23LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100053168()
{
  return sub_100008C30(&qword_10036D930, (uint64_t)qword_100369748, (uint64_t)sub_100053018);
}

uint64_t sub_100053184@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D930, (uint64_t)qword_100369748, (uint64_t)sub_100053018, a1);
}

uint64_t sub_1000531A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v11 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0LL);
      dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + *(int *)(v9 + 24), a2, a3);
    }

    else if (result == 1)
    {
      uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0LL);
      dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v3 + *(int *)(v12 + 20), a2, a3);
    }

    uint64_t v4 = 0LL;
    uint64_t v7 = a2;
  }

  return result;
}

uint64_t sub_10005326C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0LL);
  uint64_t v10 = result;
  uint64_t v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(void *)v11, 1LL, a2, a3);
  }
  if (!v4)
  {
    uint64_t v12 = v5 + *(int *)(v10 + 24);
    if ((*(_BYTE *)(v12 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2LL, a2, a3, *(double *)v12);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_100053338()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion,  &qword_100351A58,  (uint64_t)&unk_1002B8A1C);
}

uint64_t sub_100053354@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = *(int *)(a1 + 24);
  uint64_t v6 = a2 + *(int *)(a1 + 20);
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  uint64_t v7 = a2 + v5;
  *(void *)uint64_t v7 = 0LL;
  *(_BYTE *)(v7 + 8) = 1;
  return result;
}

uint64_t sub_100053398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000531A0(a1, a2, a3);
}

uint64_t sub_1000533AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005326C(a1, a2, a3);
}

uint64_t sub_1000533C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354DE8,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion,  (uint64_t)&unk_1002B8994);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100053410@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D930, (uint64_t)qword_100369748, (uint64_t)sub_100053018, a1);
}

uint64_t sub_10005342C(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100352030,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion,  (uint64_t)&unk_1002B891C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10005346C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100352030,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion,  (uint64_t)&unk_1002B891C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000534C0()
{
  return &unk_10033E020;
}

unint64_t sub_1000534CC()
{
  return 0xD000000000000028LL;
}

uint64_t sub_1000534E8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369760);
  sub_10000E704(v0, (uint64_t)qword_100369760);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32F0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "four_week_period";
  *(void *)(v9 + 8) = 16LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "day";
  *(void *)(v13 + 8) = 3LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "leap_second_deprecated";
  *((void *)v15 + 1) = 22LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 4LL;
  *(void *)uint64_t v17 = "gps_time_conversion";
  *((void *)v17 + 1) = 19LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 5LL;
  *(void *)uint64_t v18 = "utc_conversion_deprecated";
  *(void *)(v18 + 8) = 25LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000536F8()
{
  return sub_100008C30(&qword_10036D938, (uint64_t)qword_100369760, (uint64_t)sub_1000534E8);
}

uint64_t sub_100053714@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D938, (uint64_t)qword_100369760, (uint64_t)sub_1000534E8, a1);
}

uint64_t sub_100053730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v15 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0LL) + 20);
          goto LABEL_12;
        case 2LL:
          uint64_t v15 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0LL) + 24);
LABEL_12:
          uint64_t v14 = v9;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + v15, a2, a3);
          goto LABEL_6;
        case 3LL:
          uint64_t v16 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0LL) + 28);
          unint64_t v17 = sub_10007F9C0();
          uint64_t v14 = v9;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v16,  &type metadata for CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated,  v17,  a2,  a3);
          goto LABEL_6;
        case 4LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0LL) + 32);
          goto LABEL_5;
        case 5LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0LL) + 36);
LABEL_5:
          uint64_t v11 = v3 + v10;
          uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0LL);
          uint64_t v13 = sub_10000FD98( &qword_100352030,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion,  (uint64_t)&unk_1002B891C);
          uint64_t v14 = v9;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v11, v12, v13, a2, a3);
LABEL_6:
          uint64_t v9 = v14;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000538B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0LL);
  uint64_t v10 = result;
  uint64_t v11 = (unsigned int *)(v5 + *(int *)(result + 20));
  if ((v11[1] & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v11, 1LL, a2, a3);
  }
  if (!v4)
  {
    uint64_t v12 = (unsigned int *)(v5 + *(int *)(v10 + 24));
    if ((v12[1] & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v12, 2LL, a2, a3);
    }
    if (*(_BYTE *)(v5 + *(int *)(v10 + 28)) != 6)
    {
      char v14 = *(_BYTE *)(v5 + *(int *)(v10 + 28));
      unint64_t v13 = sub_10007F9C0();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v14,  3LL,  &type metadata for CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated,  v13,  a2,  a3);
    }

    sub_100053A08(v5, a1, a2, a3);
    sub_100053B7C(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_100053A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003518C8);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 32), (uint64_t)v8, &qword_1003518C8);
  sub_100003E68( (uint64_t)v8,  (uint64_t)v12,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  uint64_t v15 = sub_10000FD98( &qword_100352030,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion,  (uint64_t)&unk_1002B891C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t sub_100053B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003518C8);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 36), (uint64_t)v8, &qword_1003518C8);
  sub_100003E68( (uint64_t)v8,  (uint64_t)v12,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  uint64_t v15 = sub_10000FD98( &qword_100352030,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion,  (uint64_t)&unk_1002B891C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 5LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

Swift::Int sub_100053CF4()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo,  &qword_100351A60,  (uint64_t)&unk_1002B8B84);
}

uint64_t sub_100053D10@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[6];
  uint64_t v5 = a2 + a1[5];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  uint64_t v6 = a2 + v4;
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  uint64_t v7 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 6;
  uint64_t v8 = a2 + v7;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL);
  v11(v8, 1LL, 1LL, v9);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v11)(a2 + a1[9], 1LL, 1LL, v9);
}

uint64_t sub_100053DBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100053730(a1, a2, a3);
}

uint64_t sub_100053DD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000538B0(a1, a2, a3);
}

uint64_t sub_100053DE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354DE0,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo,  (uint64_t)&unk_1002B8AFC);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100053E34@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D938, (uint64_t)qword_100369760, (uint64_t)sub_1000534E8, a1);
}

uint64_t sub_100053E50(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100352048,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo,  (uint64_t)&unk_1002B8A84);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100053E90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100352048,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo,  (uint64_t)&unk_1002B8A84);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100053EE0()
{
  return &unk_10033E030;
}

unint64_t sub_100053EEC()
{
  return 0xD00000000000002CLL;
}

uint64_t sub_100053F08()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369778);
  sub_10000E704(v0, (uint64_t)qword_100369778);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "applicable_time_nanoSeconds";
  *(void *)(v9 + 8) = 27LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "offset_nanoSeconds";
  *((void *)v13 + 1) = 18LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "drift_ppb";
  *(void *)(v14 + 8) = 9LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10005409C()
{
  return sub_100008C30(&qword_10036D940, (uint64_t)qword_100369778, (uint64_t)sub_100053F08);
}

uint64_t sub_1000540B8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D940, (uint64_t)qword_100369778, (uint64_t)sub_100053F08, a1);
}

uint64_t sub_1000540D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000540F8( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion,  (void (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of Decoder.decodeSingularUInt64Field(value:));
}

uint64_t sub_1000540F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v11 = a2;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v11, i);
    if (v6 || (v15 & 1) != 0) {
      break;
    }
    switch(result)
    {
      case 3LL:
        uint64_t v13 = *(int *)(a4(0LL) + 28);
LABEL_3:
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v5 + v13, a2, a3);
        break;
      case 2LL:
        uint64_t v13 = *(int *)(a4(0LL) + 24);
        goto LABEL_3;
      case 1LL:
        uint64_t v16 = a4(0LL);
        a5(v5 + *(int *)(v16 + 20), a2, a3);
        break;
    }

    uint64_t v6 = 0LL;
    uint64_t v11 = a2;
  }

  return result;
}

uint64_t sub_1000541EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  uint64_t v10 = result;
  uint64_t v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(void *)v11, 1LL, a2, a3);
  }
  if (!v4)
  {
    uint64_t v12 = v5 + *(int *)(v10 + 24);
    if ((*(_BYTE *)(v12 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2LL, a2, a3, *(double *)v12);
    }
    uint64_t v13 = v5 + *(int *)(v10 + 28);
    if ((*(_BYTE *)(v13 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3LL, a2, a3, *(double *)v13);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_1000542E8()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion,  &qword_100351A68,  (uint64_t)&unk_1002B8CEC);
}

uint64_t sub_100054304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000541EC(a1, a2, a3);
}

uint64_t sub_100054318(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354DD8,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion,  (uint64_t)&unk_1002B8C64);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100054368@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D940, (uint64_t)qword_100369778, (uint64_t)sub_100053F08, a1);
}

uint64_t sub_100054384(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100352060,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion,  (uint64_t)&unk_1002B8BEC);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000543C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100352060,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion,  (uint64_t)&unk_1002B8BEC);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100054418()
{
  return &unk_10033E040;
}

unint64_t sub_100054424()
{
  return 0xD000000000000027LL;
}

uint64_t sub_100054440()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369790);
  sub_10000E704(v0, (uint64_t)qword_100369790);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 6 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32E0;
  uint64_t v8 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v8 = "week";
  *(void *)(v8 + 8) = 4LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v6 + v4) = 2LL;
  *(void *)uint64_t v12 = "leap_second_deprecated";
  *(void *)(v12 + 8) = 22LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + v6 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 3LL;
  *(void *)uint64_t v14 = "gps_time_conversion";
  *((void *)v14 + 1) = 19LL;
  v14[16] = 2;
  v11();
  char v15 = (void *)(v7 + v6 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *char v15 = 4LL;
  *(void *)uint64_t v16 = "glonass_time_conversion";
  *((void *)v16 + 1) = 23LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v7 + v6 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "galileo_time_conversion";
  *((void *)v18 + 1) = 23LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v7 + v6 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 6LL;
  *(void *)uint64_t v20 = "utc_time_conversion_deprecated";
  *((void *)v20 + 1) = 30LL;
  v20[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100054680()
{
  return sub_100008C30(&qword_10036D948, (uint64_t)qword_100369790, (uint64_t)sub_100054440);
}

uint64_t sub_10005469C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D948, (uint64_t)qword_100369790, (uint64_t)sub_100054440, a1);
}

uint64_t sub_1000546B8()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0LL);
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  *(_DWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 20) = 1;
  uint64_t v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 1LL, 1LL, v3);
  uint64_t v4 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL);
  v6(v4, 1LL, 1LL, v5);
  v6( v1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion,  1LL,  1LL,  v5);
  v6( v1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion,  1LL,  1LL,  v5);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v6)( v1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated,  1LL,  1LL,  v5);
  qword_10036D958 = v1;
  return result;
}

uint64_t sub_1000547BC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003518D0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100003A0C(&qword_1003518B8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(_DWORD *)(v1 + 16) = 0;
  uint64_t v10 = (_DWORD *)(v1 + 16);
  *(_BYTE *)(v2 + 20) = 1;
  uint64_t v11 = v2
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
  uint64_t v13 = v2
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  char v15 = *(void (**)(void))(*(void *)(v14 - 8) + 56LL);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v15)(v13, 1LL, 1LL, v14);
  uint64_t v16 = v2
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v15)( v2 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion,  1LL,  1LL,  v14);
  uint64_t v26 = v2
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  v15();
  uint64_t v27 = v2
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  v15();
  swift_beginAccess(a1 + 16, v35, 0LL, 0LL);
  LODWORD(v14) = *(_DWORD *)(a1 + 16);
  LOBYTE(v15) = *(_BYTE *)(a1 + 20);
  swift_beginAccess(v10, v34, 1LL, 0LL);
  *uint64_t v10 = v14;
  *(_BYTE *)(v2 + 20) = (_BYTE)v15;
  uint64_t v17 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated,  v33,  0LL,  0LL);
  sub_10000E6C0(v17, (uint64_t)v9, &qword_1003518B8);
  swift_beginAccess(v11, v32, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v9, v11, &qword_1003518B8);
  swift_endAccess(v32);
  uint64_t v18 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion,  v32,  0LL,  0LL);
  sub_10000E6C0(v18, (uint64_t)v6, &qword_1003518D0);
  swift_beginAccess(v13, v31, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v6, v13, &qword_1003518D0);
  swift_endAccess(v31);
  uint64_t v19 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion,  v31,  0LL,  0LL);
  sub_10000E6C0(v19, (uint64_t)v6, &qword_1003518D0);
  swift_beginAccess(v16, v30, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v6, v16, &qword_1003518D0);
  swift_endAccess(v30);
  uint64_t v20 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion,  v30,  0LL,  0LL);
  sub_10000E6C0(v20, (uint64_t)v6, &qword_1003518D0);
  uint64_t v21 = v26;
  swift_beginAccess(v26, v29, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v6, v21, &qword_1003518D0);
  swift_endAccess(v29);
  uint64_t v22 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated,  v29,  0LL,  0LL);
  sub_10000E6C0(v22, (uint64_t)v6, &qword_1003518D0);
  swift_release(a1);
  uint64_t v23 = v27;
  swift_beginAccess(v27, v28, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v6, v23, &qword_1003518D0);
  swift_endAccess(v28);
  return v2;
}

uint64_t sub_100054B7C()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100054C14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v9)) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v3 + v9);
    uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0LL);
    uint64_t v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v13 = swift_retain(v10);
    sub_1000547BC(v13);
    uint64_t v14 = *(void *)(v6 + v9);
    *(void *)(v6 + v9) = v12;
    swift_release(v14);
  }

  uint64_t v15 = *(void *)(v6 + v9);
  swift_retain(v15);
  uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1LL:
          swift_beginAccess(v15 + 16, v27, 33LL, 0LL);
          uint64_t v26 = v5;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v15 + 16, a2, a3);
          goto LABEL_9;
        case 2LL:
          uint64_t v20 = v15
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated,  v27,  33LL,  0LL);
          uint64_t v21 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
          uint64_t v22 = &qword_100351FE8;
          uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo;
          uint64_t v24 = &unk_1002B84E4;
          goto LABEL_8;
        case 3LL:
          uint64_t v19 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
          goto LABEL_7;
        case 4LL:
          uint64_t v19 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
          goto LABEL_7;
        case 5LL:
          uint64_t v19 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
          goto LABEL_7;
        case 6LL:
          uint64_t v19 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
LABEL_7:
          uint64_t v20 = v15 + v19;
          swift_beginAccess(v15 + v19, v27, 33LL, 0LL);
          uint64_t v21 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
          uint64_t v22 = &qword_100352060;
          uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion;
          uint64_t v24 = &unk_1002B8BEC;
LABEL_8:
          uint64_t v25 = sub_10000FD98(v22, v23, (uint64_t)v24);
          uint64_t v26 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v20, v21, v25, a2, a3);
LABEL_9:
          uint64_t v5 = v26;
          swift_endAccess(v27);
          break;
        default:
          break;
      }

      uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return swift_release(v15);
}

uint64_t sub_100054E4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0LL) + 20));
  swift_retain(v9);
  swift_beginAccess(v9 + 16, v11, 0LL, 0LL);
  if ((*(_BYTE *)(v9 + 20) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*(unsigned int *)(v9 + 16), 1LL, a2, a3);
  }
  if (v4) {
    return swift_release(v9);
  }
  sub_100054FC4(v9, a1, a2, a3);
  sub_100055150(v9, a1, a2, a3);
  sub_1000552DC(v9, a1, a2, a3);
  sub_100055468(v9, a1, a2, a3);
  sub_1000555F4(v9, a1, a2, a3);
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100054FC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003518B8);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_1003518B8);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  uint64_t v15 = sub_10000FD98( &qword_100351FE8,  type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo,  (uint64_t)&unk_1002B84E4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_100055150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003518D0);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_1003518D0);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  uint64_t v15 = sub_10000FD98( &qword_100352060,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion,  (uint64_t)&unk_1002B8BEC);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_1000552DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003518D0);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_1003518D0);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  uint64_t v15 = sub_10000FD98( &qword_100352060,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion,  (uint64_t)&unk_1002B8BEC);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_100055468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003518D0);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_1003518D0);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  uint64_t v15 = sub_10000FD98( &qword_100352060,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion,  (uint64_t)&unk_1002B8BEC);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 5LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_1000555F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003518D0);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_1003518D0);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  uint64_t v15 = sub_10000FD98( &qword_100352060,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion,  (uint64_t)&unk_1002B8BEC);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 6LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_100055780(uint64_t a1, uint64_t a2)
{
  return sub_100065AC0( a1,  a2,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo,  (uint64_t (*)(uint64_t, uint64_t))sub_1000557A8) & 1;
}

BOOL sub_1000557A8(uint64_t a1, uint64_t a2)
{
  uint64_t v123 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  uint64_t v121 = *(void *)(v123 - 8);
  __chkstk_darwin(v123);
  uint64_t v116 = (uint64_t)&v108 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v125 = sub_100003A0C(&qword_100354FE8);
  uint64_t v5 = __chkstk_darwin(v125);
  uint64_t v110 = (uint64_t)&v108 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v113 = (uint64_t)&v108 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v117 = (uint64_t)&v108 - v10;
  __chkstk_darwin(v9);
  uint64_t v122 = (uint64_t)&v108 - v11;
  uint64_t v12 = sub_100003A0C(&qword_1003518D0);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v109 = (uint64_t)&v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v112 = (uint64_t)&v108 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v111 = (uint64_t)&v108 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v115 = (char *)&v108 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v114 = (uint64_t)&v108 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v119 = (uint64_t)&v108 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v118 = (uint64_t)&v108 - v26;
  __chkstk_darwin(v25);
  uint64_t v126 = (uint64_t)&v108 - v27;
  uint64_t v127 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  uint64_t v28 = *(void *)(v127 - 8);
  __chkstk_darwin(v127);
  uint64_t v120 = (uint64_t)&v108 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = sub_100003A0C(&qword_100354FF0);
  __chkstk_darwin(v30);
  unint64_t v32 = (char *)&v108 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = sub_100003A0C(&qword_1003518B8);
  uint64_t v34 = __chkstk_darwin(v33);
  uint64_t v124 = (uint64_t)&v108 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v34);
  uint64_t v37 = (char *)&v108 - v36;
  swift_beginAccess(a1 + 16, v140, 0LL, 0LL);
  int v38 = *(_DWORD *)(a1 + 16);
  uint64_t v128 = a1;
  char v39 = *(_BYTE *)(a1 + 20);
  swift_beginAccess(a2 + 16, v139, 0LL, 0LL);
  uint64_t v40 = a2;
  char v41 = *(_BYTE *)(a2 + 20);
  if ((v39 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 20)) {
      return 0LL;
    }
  }

  else
  {
    if (v38 != *(_DWORD *)(a2 + 16)) {
      char v41 = 1;
    }
    if ((v41 & 1) != 0) {
      return 0LL;
    }
  }

  uint64_t v42 = v128;
  uint64_t v43 = v128
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess( v128 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated,  v138,  0LL,  0LL);
  sub_10000E6C0(v43, (uint64_t)v37, &qword_1003518B8);
  uint64_t v44 = v40;
  uint64_t v45 = v40
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess( v40 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated,  v137,  0LL,  0LL);
  uint64_t v46 = (uint64_t)&v32[*(int *)(v30 + 48)];
  sub_10000E6C0((uint64_t)v37, (uint64_t)v32, &qword_1003518B8);
  sub_10000E6C0(v45, v46, &qword_1003518B8);
  uint64_t v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
  uint64_t v48 = v127;
  if (v47((uint64_t)v32, 1LL, v127) == 1)
  {
    swift_retain(v42);
    swift_retain(v40);
    sub_100015764((uint64_t)v37, &qword_1003518B8);
    if (v47(v46, 1LL, v48) == 1)
    {
      sub_100015764((uint64_t)v32, &qword_1003518B8);
      uint64_t v49 = v42;
      goto LABEL_16;
    }

LABEL_16:
  uint64_t v59 = v49
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess( v49 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion,  v136,  0LL,  0LL);
  uint64_t v60 = v126;
  sub_10000E6C0(v59, v126, &qword_1003518D0);
  uint64_t v61 = v44
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess( v44 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion,  v135,  0LL,  0LL);
  uint64_t v62 = v122;
  uint64_t v63 = v122 + *(int *)(v125 + 48);
  sub_10000E6C0(v60, v122, &qword_1003518D0);
  sub_10000E6C0(v61, v63, &qword_1003518D0);
  uint64_t v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v121 + 48);
  uint64_t v65 = v123;
  if (v64(v62, 1LL, v123) == 1)
  {
    sub_100015764(v60, &qword_1003518D0);
    int v66 = v64(v63, 1LL, v65);
    uint64_t v67 = v128;
    if (v66 == 1)
    {
      sub_100015764(v62, &qword_1003518D0);
      goto LABEL_24;
    }

    uint64_t v23 = 0;
    return v23 & 1;
  }

  if (!v21) {
    goto LABEL_16;
  }
  if (*v18 == *v20 && v19 == v21) {
    goto LABEL_17;
  }
  uint64_t v23 = 0;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    goto LABEL_17;
  }
  return v23 & 1;
}

LABEL_21:
    sub_100015764(v62, &qword_100354FE8);
    uint64_t v53 = v67;
    goto LABEL_30;
  }

  uint64_t v68 = v118;
  sub_10000E6C0(v62, v118, &qword_1003518D0);
  if (v64(v63, 1LL, v65) == 1)
  {
    sub_100015764(v126, &qword_1003518D0);
    sub_100004090(v68, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    uint64_t v67 = v128;
    goto LABEL_21;
  }

  uint64_t v69 = v62;
  uint64_t v70 = v116;
  sub_100003E68(v63, v116, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  char v71 = sub_100064178(v68, v70);
  sub_100004090(v70, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  sub_100015764(v126, &qword_1003518D0);
  sub_100004090(v68, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  sub_100015764(v69, &qword_1003518D0);
  uint64_t v67 = v128;
  if ((v71 & 1) == 0)
  {
    uint64_t v53 = v128;
    goto LABEL_30;
  }

    uint64_t v69 = &qword_10035C540;
LABEL_36:
    uint64_t v70 = v87;
    goto LABEL_7;
  }

  sub_10000E6C0(v87, v79, &qword_100355560);
  int v93 = v88(v85, 1LL, v90);
  uint64_t v92 = v223;
  if (v93 == 1)
  {
    sub_100015764(v81, &qword_100355560);
    sub_100004090(v79, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
    goto LABEL_21;
  }

  uint64_t v94 = v79;
  uint64_t v95 = v214;
  sub_100003E68(v85, v214, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  uint64_t v96 = sub_100065AC0(v94, v95, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, sub_1000C9D48);
  sub_100004090(v95, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  sub_100015764(v81, &qword_100355560);
  char v97 = v94;
  uint64_t v80 = (uint64_t)v227;
  sub_100004090(v97, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  sub_100015764(v87, &qword_100355560);
  if ((v96 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_23:
  uint64_t v98 = v67
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess( v67 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate,  &v249,  0LL,  0LL);
  sub_10000E6C0(v98, v92, &qword_100355568);
  uint64_t v99 = v62
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess( v62 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate,  &v248,  0LL,  0LL);
  uint64_t v100 = v92;
  uint64_t v101 = v218;
  uint64_t v102 = v218 + *(int *)(v215 + 48);
  sub_10000E6C0(v100, v218, &qword_100355568);
  uint64_t v103 = v99;
  uint64_t v87 = v101;
  sub_10000E6C0(v103, v102, &qword_100355568);
  uint64_t v104 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v216 + 48);
  uint64_t v105 = v101;
  uint64_t v106 = v217;
  if (v104(v105, 1LL, v217) == 1)
  {
    sub_100015764(v100, &qword_100355568);
    if (v104(v102, 1LL, v106) == 1)
    {
      sub_100015764(v87, &qword_100355568);
      goto LABEL_30;
    }

    goto LABEL_28;
  }

  char v107 = v212;
  sub_10000E6C0(v87, v212, &qword_100355568);
  if (v104(v102, 1LL, v106) == 1)
  {
    sub_100015764(v223, &qword_100355568);
    sub_100004090(v107, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
LABEL_28:
    uint64_t v69 = &qword_10035C538;
    goto LABEL_36;
  }

  uint64_t v108 = v207;
  sub_100003E68(v102, v207, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  uint64_t v109 = sub_100065AC0( v107,  v108,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  sub_1000CF68C);
  sub_100004090(v108, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  sub_100015764(v223, &qword_100355568);
  sub_100004090(v107, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  sub_100015764(v87, &qword_100355568);
  if ((v109 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_30:
  uint64_t v110 = v67
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess( v67 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status,  &v247,  0LL,  0LL);
  uint64_t v111 = v213;
  sub_10000E6C0(v110, v213, &qword_100355570);
  uint64_t v112 = v62
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess( v62 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status,  &v246,  0LL,  0LL);
  uint64_t v113 = v211;
  uint64_t v114 = v211 + *(int *)(v208 + 48);
  sub_10000E6C0(v111, v211, &qword_100355570);
  uint64_t v115 = v112;
  uint64_t v87 = v113;
  sub_10000E6C0(v115, v114, &qword_100355570);
  uint64_t v116 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v209 + 48);
  uint64_t v117 = v113;
  uint64_t v118 = v210;
  if (v116(v117, 1LL, v210) == 1)
  {
    sub_100015764(v111, &qword_100355570);
    if (v116(v114, 1LL, v118) == 1)
    {
      sub_100015764(v87, &qword_100355570);
      goto LABEL_38;
    }

    goto LABEL_35;
  }

  sub_10000E6C0(v87, v80, &qword_100355570);
  if (v116(v114, 1LL, v118) == 1)
  {
    sub_100015764(v213, &qword_100355570);
    sub_100004090(v80, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
LABEL_35:
    uint64_t v69 = &qword_10035C530;
    goto LABEL_36;
  }

  uint64_t v119 = v206;
  sub_100003E68(v114, v206, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  uint64_t v120 = sub_1001153F8(v80, v119);
  sub_100004090(v119, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  sub_100015764(v213, &qword_100355570);
  sub_100004090(v80, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  sub_100015764(v87, &qword_100355570);
  if ((v120 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_38:
  uint64_t v121 = (unsigned __int8 *)(v67
                           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  swift_beginAccess( v67 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active,  &v245,  0LL,  0LL);
  uint64_t v122 = *v121;
  uint64_t v123 = (unsigned __int8 *)(v62
                           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  swift_beginAccess( v62 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active,  &v244,  0LL,  0LL);
  uint64_t v124 = *v123;
  if (v122 == 2)
  {
    if (v124 != 2) {
      goto LABEL_8;
    }
  }

  else if (v124 == 2 || ((((v124 & 1) == 0) ^ v122) & 1) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v125 = v67
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer;
  swift_beginAccess( v67 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer,  &v243,  0LL,  0LL);
  uint64_t v126 = *(double *)v125;
  uint64_t v127 = *(_BYTE *)(v125 + 8);
  uint64_t v128 = v62
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer;
  swift_beginAccess( v62 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer,  &v242,  0LL,  0LL);
  if ((v127 & 1) != 0)
  {
    if ((*(_BYTE *)(v128 + 8) & 1) == 0) {
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(v128 + 8) & 1) != 0 || v126 != *(double *)v128)
  {
    goto LABEL_8;
  }

  uint64_t v129 = (unsigned __int8 *)(v67
                           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  swift_beginAccess( v67 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality,  &v241,  0LL,  0LL);
  uint64_t v130 = *v129;
  uint64_t v131 = (unsigned __int8 *)(v62
                           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  swift_beginAccess( v62 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality,  &v240,  0LL,  0LL);
  uint64_t v132 = *v131;
  if (v130 == 3)
  {
    if (v132 != 3) {
      goto LABEL_8;
    }
  }

  else if (v132 == 3 || v130 != v132)
  {
    goto LABEL_8;
  }

  uint64_t v133 = v67
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess( v67 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed,  &v239,  0LL,  0LL);
  uint64_t v134 = v205;
  sub_10000E6C0(v133, v205, &qword_100355578);
  uint64_t v135 = v62
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess( v62 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed,  &v238,  0LL,  0LL);
  uint64_t v136 = v204;
  uint64_t v137 = v204 + *(int *)(v200 + 48);
  sub_10000E6C0(v134, v204, &qword_100355578);
  uint64_t v138 = v135;
  uint64_t v87 = v136;
  sub_10000E6C0(v138, v137, &qword_100355578);
  uint64_t v139 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v201 + 48);
  uint64_t v140 = v136;
  uint64_t v141 = v203;
  if (v139(v140, 1LL, v203) == 1)
  {
    sub_100015764(v134, &qword_100355578);
    if (v139(v137, 1LL, v141) == 1)
    {
      sub_100015764(v87, &qword_100355578);
      uint64_t v143 = (uint64_t)v198;
      uint64_t v142 = (uint64_t)v199;
      goto LABEL_60;
    }

    goto LABEL_58;
  }

  sub_10000E6C0(v87, v202, &qword_100355578);
  if (v139(v137, 1LL, v141) == 1)
  {
    sub_100015764(v205, &qword_100355578);
    sub_100004090(v202, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
LABEL_58:
    uint64_t v69 = &qword_10035C528;
    goto LABEL_36;
  }

  uint64_t v144 = v191;
  sub_100003E68(v137, v191, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  uint64_t v145 = v202;
  uint64_t v146 = sub_10011E088(v202, v144, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  sub_100004090(v144, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  sub_100015764(v205, &qword_100355578);
  sub_100004090(v145, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  sub_100015764(v87, &qword_100355578);
  uint64_t v143 = (uint64_t)v198;
  uint64_t v142 = (uint64_t)v199;
  if ((v146 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_60:
  uint64_t v147 = v67
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess( v67 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading,  &v237,  0LL,  0LL);
  sub_10000E6C0(v147, v143, &qword_100355580);
  uint64_t v148 = v62
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess( v62 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading,  &v236,  0LL,  0LL);
  uint64_t v149 = v142 + *(int *)(v195 + 48);
  sub_10000E6C0(v143, v142, &qword_100355580);
  sub_10000E6C0(v148, v149, &qword_100355580);
  uint64_t v150 = v197;
  uint64_t v151 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v196 + 48);
  if (v151(v142, 1LL, v197) == 1)
  {
    sub_100015764(v143, &qword_100355580);
    if (v151(v149, 1LL, v150) == 1)
    {
      sub_100015764(v142, &qword_100355580);
      goto LABEL_67;
    }

    goto LABEL_65;
  }

  uint64_t v152 = v190;
  sub_10000E6C0(v142, v190, &qword_100355580);
  if (v151(v149, 1LL, v150) == 1)
  {
    sub_100015764(v143, &qword_100355580);
    sub_100004090(v152, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
LABEL_65:
    uint64_t v69 = &qword_10035C520;
    uint64_t v70 = v142;
    goto LABEL_7;
  }

  uint64_t v153 = v186;
  sub_100003E68(v149, v186, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  uint64_t v154 = sub_10011F4C0(v152, v153, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  sub_100004090(v153, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  sub_100015764(v143, &qword_100355580);
  sub_100004090(v152, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  sub_100015764(v142, &qword_100355580);
  if ((v154 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_67:
  uint64_t v155 = v67
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess( v67 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable,  &v235,  0LL,  0LL);
  uint64_t v156 = v192;
  sub_10000E6C0(v155, v192, &qword_100355588);
  uint64_t v157 = v62
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess( v62 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable,  &v234,  0LL,  0LL);
  uint64_t v158 = v194;
  uint64_t v159 = v194 + *(int *)(v188 + 48);
  sub_10000E6C0(v156, v194, &qword_100355588);
  sub_10000E6C0(v157, v159, &qword_100355588);
  uint64_t v160 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v189 + 48);
  if (v160(v158, 1LL, v193) == 1)
  {
    sub_100015764(v192, &qword_100355588);
    if (v160(v159, 1LL, v193) == 1)
    {
      sub_100015764(v194, &qword_100355588);
      goto LABEL_74;
    }

    goto LABEL_72;
  }

  sub_10000E6C0(v194, v187, &qword_100355588);
  if (v160(v159, 1LL, v193) == 1)
  {
    sub_100015764(v192, &qword_100355588);
    sub_100004090(v187, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
LABEL_72:
    uint64_t v69 = &qword_10035C518;
    uint64_t v70 = v194;
    goto LABEL_7;
  }

  uint64_t v161 = v182;
  sub_100003E68(v159, v182, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  uint64_t v162 = v187;
  uint64_t v163 = sub_1001149D8(v187, v161);
  sub_100004090(v161, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  sub_100015764(v192, &qword_100355588);
  sub_100004090(v162, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  sub_100015764(v194, &qword_100355588);
  if ((v163 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_74:
  uint64_t v164 = (unsigned __int8 *)(v67
                           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  swift_beginAccess( v67 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected,  &v233,  0LL,  0LL);
  uint64_t v165 = *v164;
  uint64_t v166 = (unsigned __int8 *)(v62
                           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  swift_beginAccess( v62 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected,  &v232,  0LL,  0LL);
  uint64_t v167 = *v166;
  if (v165 == 3)
  {
    if (v167 == 3) {
      goto LABEL_79;
    }
LABEL_8:
    swift_release(v67);
    swift_release(v62);
    return 0LL;
  }

  if (v167 == 3 || v165 != v167) {
    goto LABEL_8;
  }
LABEL_79:
  uint64_t v168 = v67
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess( v67 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed,  &v231,  0LL,  0LL);
  uint64_t v169 = v183;
  sub_10000E6C0(v168, v183, &qword_100355590);
  uint64_t v170 = v62
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess( v62 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed,  &v230,  0LL,  0LL);
  uint64_t v171 = v185;
  uint64_t v172 = v185 + *(int *)(v180 + 48);
  sub_10000E6C0(v169, v185, &qword_100355590);
  sub_10000E6C0(v170, v172, &qword_100355590);
  uint64_t v173 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v181 + 48);
  if (v173(v171, 1LL, v184) == 1)
  {
    swift_release(v67);
    swift_release(v62);
    sub_100015764(v183, &qword_100355590);
    if (v173(v172, 1LL, v184) == 1)
    {
      sub_100015764(v185, &qword_100355590);
      return 1LL;
    }

LABEL_24:
  uint64_t v72 = v67
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess( v67 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion,  v134,  0LL,  0LL);
  uint64_t v73 = v119;
  sub_10000E6C0(v72, v119, &qword_1003518D0);
  uint64_t v74 = v44
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess( v44 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion,  &v133,  0LL,  0LL);
  uint64_t v75 = v125;
  uint64_t v76 = v117;
  uint64_t v77 = v117 + *(int *)(v125 + 48);
  sub_10000E6C0(v73, v117, &qword_1003518D0);
  sub_10000E6C0(v74, v77, &qword_1003518D0);
  if (v64(v76, 1LL, v65) == 1)
  {
    sub_100015764(v73, &qword_1003518D0);
    int v78 = v64(v77, 1LL, v65);
    uint64_t v42 = v128;
    if (v78 == 1)
    {
      sub_100015764(v76, &qword_1003518D0);
      uint64_t v79 = (uint64_t)v115;
      goto LABEL_33;
    }

LABEL_38:
    double v51 = &qword_100354FE8;
    uint64_t v52 = v76;
    goto LABEL_13;
  }

  uint64_t v80 = v114;
  sub_10000E6C0(v76, v114, &qword_1003518D0);
  int v81 = v64(v77, 1LL, v65);
  uint64_t v79 = (uint64_t)v115;
  if (v81 == 1)
  {
    sub_100015764(v119, &qword_1003518D0);
    sub_100004090(v80, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    uint64_t v42 = v128;
    goto LABEL_38;
  }

  uint64_t v83 = v116;
  sub_100003E68(v77, v116, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  char v84 = sub_100064178(v80, v83);
  sub_100004090(v83, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  sub_100015764(v119, &qword_1003518D0);
  sub_100004090(v80, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  sub_100015764(v117, &qword_1003518D0);
  uint64_t v42 = v128;
  if ((v84 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_33:
  uint64_t v85 = v42
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess( v42 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion,  &v132,  0LL,  0LL);
  sub_10000E6C0(v85, v79, &qword_1003518D0);
  uint64_t v86 = v44
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess( v44 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion,  &v131,  0LL,  0LL);
  uint64_t v87 = *(int *)(v75 + 48);
  uint64_t v88 = v113;
  uint64_t v89 = v113 + v87;
  sub_10000E6C0(v79, v113, &qword_1003518D0);
  uint64_t v76 = v88;
  sub_10000E6C0(v86, v89, &qword_1003518D0);
  if (v64(v88, 1LL, v65) == 1)
  {
    sub_100015764(v79, &qword_1003518D0);
    int v90 = v64(v89, 1LL, v65);
    uint64_t v91 = v112;
    if (v90 == 1)
    {
      sub_100015764(v76, &qword_1003518D0);
      goto LABEL_40;
    }

    goto LABEL_38;
  }

  uint64_t v92 = v111;
  sub_10000E6C0(v88, v111, &qword_1003518D0);
  int v93 = v64(v89, 1LL, v65);
  uint64_t v91 = v112;
  if (v93 == 1)
  {
    sub_100015764(v79, &qword_1003518D0);
    sub_100004090(v92, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_38;
  }

  uint64_t v94 = v79;
  uint64_t v95 = v92;
  uint64_t v96 = v116;
  sub_100003E68(v89, v116, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  char v97 = sub_100064178(v95, v96);
  sub_100004090(v96, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  sub_100015764(v94, &qword_1003518D0);
  sub_100004090(v95, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  sub_100015764(v113, &qword_1003518D0);
  if ((v97 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_40:
  uint64_t v98 = v42
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess( v42 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated,  &v130,  0LL,  0LL);
  sub_10000E6C0(v98, v91, &qword_1003518D0);
  uint64_t v99 = v44
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess( v44 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated,  &v129,  0LL,  0LL);
  uint64_t v100 = v91;
  uint64_t v101 = v110;
  uint64_t v102 = v110 + *(int *)(v125 + 48);
  sub_10000E6C0(v100, v110, &qword_1003518D0);
  uint64_t v103 = v101;
  sub_10000E6C0(v99, v102, &qword_1003518D0);
  if (v64(v101, 1LL, v65) != 1)
  {
    uint64_t v104 = v101;
    uint64_t v105 = v109;
    sub_10000E6C0(v104, v109, &qword_1003518D0);
    if (v64(v102, 1LL, v65) == 1)
    {
      swift_release(v42);
      swift_release(v44);
      sub_100015764(v112, &qword_1003518D0);
      sub_100004090(v105, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
      goto LABEL_45;
    }

    uint64_t v106 = v116;
    sub_100003E68(v102, v116, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    char v107 = sub_100064178(v105, v106);
    swift_release(v42);
    swift_release(v44);
    sub_100004090(v106, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    sub_100015764(v112, &qword_1003518D0);
    sub_100004090(v105, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    sub_100015764(v103, &qword_1003518D0);
    return (v107 & 1) != 0;
  }

  swift_release(v42);
  swift_release(v44);
  sub_100015764(v100, &qword_1003518D0);
  if (v64(v102, 1LL, v65) != 1)
  {
LABEL_45:
    sub_100015764(v103, &qword_100354FE8);
    return 0LL;
  }

  sub_100015764(v101, &qword_1003518D0);
  return 1LL;
}

Swift::Int sub_100056444()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo,  &qword_100351A70,  (uint64_t)&unk_1002B8E54);
}

uint64_t sub_100056460@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD7C(a1, &qword_10036D950, &qword_10036D958, (uint64_t)sub_1000546B8, a2);
}

uint64_t sub_10005647C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100054C14(a1, a2, a3);
}

uint64_t sub_100056490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100054E4C(a1, a2, a3);
}

uint64_t sub_1000564A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354DD0,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo,  (uint64_t)&unk_1002B8DCC);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000564F4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D948, (uint64_t)qword_100369790, (uint64_t)sub_100054440, a1);
}

uint64_t sub_100056510(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100352078,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo,  (uint64_t)&unk_1002B8D54);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100056550(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100352078,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo,  (uint64_t)&unk_1002B8D54);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000565A0()
{
  return &unk_10033E050;
}

unint64_t sub_1000565AC()
{
  return 0xD000000000000028LL;
}

uint64_t sub_1000565C8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003697A8);
  sub_10000E704(v0, (uint64_t)qword_1003697A8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "week";
  *(void *)(v9 + 8) = 4LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "leap_second_deprecated";
  *(void *)(v13 + 8) = 22LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "gps_time_conversion";
  *((void *)v15 + 1) = 19LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 4LL;
  *(void *)uint64_t v17 = "utc_time_conversion_deprecated";
  *((void *)v17 + 1) = 30LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100056798()
{
  return sub_100008C30(&qword_10036D960, (uint64_t)qword_1003697A8, (uint64_t)sub_1000565C8);
}

uint64_t sub_1000567B4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D960, (uint64_t)qword_1003697A8, (uint64_t)sub_1000565C8, a1);
}

uint64_t sub_1000567D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0LL);
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + *(int *)(v9 + 20), a2, a3);
          break;
        case 2LL:
          uint64_t v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0LL) + 24);
          uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
          uint64_t v12 = &qword_100351FE8;
          uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo;
          uint64_t v14 = &unk_1002B84E4;
          goto LABEL_11;
        case 3LL:
          uint64_t v15 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0LL) + 28);
          goto LABEL_10;
        case 4LL:
          uint64_t v15 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0LL) + 32);
LABEL_10:
          uint64_t v10 = v3 + v15;
          uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
          uint64_t v12 = &qword_100352060;
          uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion;
          uint64_t v14 = &unk_1002B8BEC;
LABEL_11:
          uint64_t v16 = sub_10000FD98(v12, v13, (uint64_t)v14);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v10, v11, v16, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_10005694C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0LL);
  uint64_t v10 = (unsigned int *)(v5 + *(int *)(result + 20));
  if ((v10[1] & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v10, 1LL, a2, a3);
  }
  if (!v4)
  {
    sub_100056A40(v5, a1, a2, a3);
    sub_100056BB4(v5, a1, a2, a3);
    sub_100056D28(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_100056A40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003518B8);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_1003518B8);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  uint64_t v15 = sub_10000FD98( &qword_100351FE8,  type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo,  (uint64_t)&unk_1002B84E4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_100056BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003518D0);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_1003518D0);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  uint64_t v15 = sub_10000FD98( &qword_100352060,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion,  (uint64_t)&unk_1002B8BEC);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_100056D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003518D0);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 32), (uint64_t)v8, &qword_1003518D0);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  uint64_t v15 = sub_10000FD98( &qword_100352060,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion,  (uint64_t)&unk_1002B8BEC);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

Swift::Int sub_100056EA0()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo,  &qword_100351A78,  (uint64_t)&unk_1002B8FBC);
}

uint64_t sub_100056EBC@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[6];
  uint64_t v5 = a2 + a1[5];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  uint64_t v8 = a2 + a1[7];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL);
  v11(v8, 1LL, 1LL, v9);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v11)(a2 + a1[8], 1LL, 1LL, v9);
}

uint64_t sub_100056F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000567D0(a1, a2, a3);
}

uint64_t sub_100056F90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005694C(a1, a2, a3);
}

uint64_t sub_100056FA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354DC8,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo,  (uint64_t)&unk_1002B8F34);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100056FF4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D960, (uint64_t)qword_1003697A8, (uint64_t)sub_1000565C8, a1);
}

uint64_t sub_100057010(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100352090,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo,  (uint64_t)&unk_1002B8EBC);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100057050(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100352090,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo,  (uint64_t)&unk_1002B8EBC);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000570A0()
{
  return &unk_10033E060;
}

unint64_t sub_1000570AC()
{
  return 0xD000000000000026LL;
}

uint64_t sub_1000570C8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003697C0);
  sub_10000E704(v0, (uint64_t)qword_1003697C0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3340;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "gps_time_conversion";
  *(void *)(v9 + 8) = 19LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "week";
  *((void *)v13 + 1) = 4LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100057220()
{
  return sub_100008C30(&qword_10036D968, (uint64_t)qword_1003697C0, (uint64_t)sub_1000570C8);
}

uint64_t sub_10005723C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D968, (uint64_t)qword_1003697C0, (uint64_t)sub_1000570C8, a1);
}

uint64_t sub_100057258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      if (result == 2)
      {
        uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0LL);
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + *(int *)(v9 + 24), a2, a3);
      }

      else if (result == 1)
      {
        uint64_t v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0LL) + 20);
        uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
        uint64_t v12 = sub_10000FD98( &qword_100352060,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion,  (uint64_t)&unk_1002B8BEC);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v10, v11, v12, a2, a3);
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_10005737C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = sub_100057428(v5, a1, a2, a3);
  if (!v4)
  {
    uint64_t v10 = (unsigned int *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0LL) + 24));
    if ((v10[1] & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v10, 2LL, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_100057428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003518D0);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 20), (uint64_t)v8, &qword_1003518D0);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  uint64_t v15 = sub_10000FD98( &qword_100352060,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion,  (uint64_t)&unk_1002B8BEC);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

Swift::Int sub_1000575A0()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo,  &qword_100351A80,  (uint64_t)&unk_1002B9124);
}

uint64_t sub_1000575BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))( v4,  1LL,  1LL,  v5);
  uint64_t v7 = a2 + *(int *)(a1 + 24);
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  return result;
}

uint64_t sub_100057628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100057258(a1, a2, a3);
}

uint64_t sub_10005763C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005737C(a1, a2, a3);
}

uint64_t sub_100057650(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354DC0,  type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo,  (uint64_t)&unk_1002B909C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000576A0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D968, (uint64_t)qword_1003697C0, (uint64_t)sub_1000570C8, a1);
}

uint64_t sub_1000576BC(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003520A8,  type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo,  (uint64_t)&unk_1002B9024);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000576FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003520A8,  type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo,  (uint64_t)&unk_1002B9024);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10005774C()
{
  return &unk_10033E070;
}

unint64_t sub_100057758()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_100057774()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003697D8);
  sub_10000E704(v0, (uint64_t)qword_1003697D8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32F0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "gps";
  *(void *)(v9 + 8) = 3LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "glonass";
  *(void *)(v13 + 8) = 7LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "beidou";
  *((void *)v15 + 1) = 6LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 4LL;
  *(void *)uint64_t v17 = "galileo";
  *((void *)v17 + 1) = 7LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 5LL;
  *(void *)uint64_t v18 = "navic";
  *(void *)(v18 + 8) = 5LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100057974()
{
  return sub_100008C30(&qword_10036D970, (uint64_t)qword_1003697D8, (uint64_t)sub_100057774);
}

uint64_t sub_100057990@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D970, (uint64_t)qword_1003697D8, (uint64_t)sub_100057774, a1);
}

uint64_t sub_1000579AC()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0LL);
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 1LL, 1LL, v3);
  uint64_t v4 = v1
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = v1
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  uint64_t v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))( v10,  1LL,  1LL,  v11);
  qword_10036D980 = v1;
  return result;
}

uint64_t sub_100057AD4(uint64_t a1)
{
  uint64_t v3 = sub_100003A0C(&qword_1003518F8);
  __chkstk_darwin(v3);
  uint64_t v36 = (uint64_t)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100003A0C(&qword_1003518F0);
  __chkstk_darwin(v5);
  uint64_t v35 = (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100003A0C(&qword_1003518E8);
  __chkstk_darwin(v7);
  uint64_t v34 = (uint64_t)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100003A0C(&qword_1003518E0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100003A0C(&qword_1003518D8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v15, 1LL, 1LL, v16);
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  uint64_t v18 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v17, 1LL, 1LL, v18);
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v19, 1LL, 1LL, v20);
  uint64_t v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v21, 1LL, 1LL, v22);
  uint64_t v23 = v1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56LL))(v23, 1LL, 1LL, v24);
  uint64_t v25 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps,  v42,  0LL,  0LL);
  sub_10000E6C0(v25, (uint64_t)v14, &qword_1003518D8);
  swift_beginAccess(v15, v41, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v14, v15, &qword_1003518D8);
  swift_endAccess(v41);
  uint64_t v26 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass,  v41,  0LL,  0LL);
  sub_10000E6C0(v26, (uint64_t)v11, &qword_1003518E0);
  swift_beginAccess(v17, v40, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v11, v17, &qword_1003518E0);
  swift_endAccess(v40);
  uint64_t v27 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou,  v40,  0LL,  0LL);
  uint64_t v28 = v34;
  sub_10000E6C0(v27, v34, &qword_1003518E8);
  swift_beginAccess(v19, v39, 33LL, 0LL);
  sub_10000E5D4(v28, v19, &qword_1003518E8);
  swift_endAccess(v39);
  uint64_t v29 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo,  v39,  0LL,  0LL);
  uint64_t v30 = v35;
  sub_10000E6C0(v29, v35, &qword_1003518F0);
  swift_beginAccess(v21, v38, 33LL, 0LL);
  sub_10000E5D4(v30, v21, &qword_1003518F0);
  swift_endAccess(v38);
  uint64_t v31 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic,  v38,  0LL,  0LL);
  uint64_t v32 = v36;
  sub_10000E6C0(v31, v36, &qword_1003518F8);
  swift_release(a1);
  swift_beginAccess(v23, v37, 33LL, 0LL);
  sub_10000E5D4(v32, v23, &qword_1003518F8);
  swift_endAccess(v37);
  return v1;
}

uint64_t sub_100057F34()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100057FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v8 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v8)) & 1) == 0)
  {
    uint64_t v9 = *(void *)(v3 + v8);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_100057AD4(v12);
    uint64_t v13 = *(void *)(v5 + v8);
    *(void *)(v5 + v8) = v11;
    swift_release(v13);
  }

  uint64_t v14 = *(void *)(v5 + v8);
  swift_retain(v14);
  uint64_t v15 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v16 & 1) == 0)
    {
      switch(v15)
      {
        case 1LL:
          uint64_t v18 = v14
              + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
          swift_beginAccess( v14 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps,  v24,  33LL,  0LL);
          uint64_t v19 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0LL);
          uint64_t v20 = &qword_100352018;
          uint64_t v21 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo;
          uint64_t v22 = &unk_1002B87B4;
          goto LABEL_7;
        case 2LL:
          uint64_t v18 = v14
              + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
          swift_beginAccess( v14 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass,  v24,  33LL,  0LL);
          uint64_t v19 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0LL);
          uint64_t v20 = &qword_100352048;
          uint64_t v21 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo;
          uint64_t v22 = &unk_1002B8A84;
          goto LABEL_7;
        case 3LL:
          uint64_t v18 = v14
              + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
          swift_beginAccess( v14 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou,  v24,  33LL,  0LL);
          uint64_t v19 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0LL);
          uint64_t v20 = &qword_100352078;
          uint64_t v21 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo;
          uint64_t v22 = &unk_1002B8D54;
          goto LABEL_7;
        case 4LL:
          uint64_t v18 = v14
              + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
          swift_beginAccess( v14 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo,  v24,  33LL,  0LL);
          uint64_t v19 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0LL);
          uint64_t v20 = &qword_100352090;
          uint64_t v21 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo;
          uint64_t v22 = &unk_1002B8EBC;
          goto LABEL_7;
        case 5LL:
          uint64_t v18 = v14
              + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
          swift_beginAccess( v14 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic,  v24,  33LL,  0LL);
          uint64_t v19 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0LL);
          uint64_t v20 = &qword_1003520A8;
          uint64_t v21 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo;
          uint64_t v22 = &unk_1002B9024;
LABEL_7:
          uint64_t v23 = sub_10000FD98(v20, v21, (uint64_t)v22);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v18, v19, v23, a2, a3);
          swift_endAccess(v24);
          break;
        default:
          break;
      }

      uint64_t v15 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return swift_release(v14);
}

uint64_t sub_100058288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)(v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0LL) + 20));
  uint64_t v9 = swift_retain(v8);
  sub_1000583A4(v9, a1, a2, a3);
  if (v4) {
    return swift_release(v8);
  }
  sub_100058530(v8, a1, a2, a3);
  sub_1000586BC(v8, a1, a2, a3);
  sub_100058848(v8, a1, a2, a3);
  sub_1000589D4(v8, a1, a2, a3);
  swift_release(v8);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000583A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003518D8);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_1003518D8);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  uint64_t v15 = sub_10000FD98( &qword_100352018,  type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo,  (uint64_t)&unk_1002B87B4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t sub_100058530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003518E0);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_1003518E0);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  uint64_t v15 = sub_10000FD98( &qword_100352048,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo,  (uint64_t)&unk_1002B8A84);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_1000586BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003518E8);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_1003518E8);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  uint64_t v15 = sub_10000FD98( &qword_100352078,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo,  (uint64_t)&unk_1002B8D54);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

uint64_t sub_100058848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003518F0);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_1003518F0);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
  uint64_t v15 = sub_10000FD98( &qword_100352090,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo,  (uint64_t)&unk_1002B8EBC);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t sub_1000589D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003518F8);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_1003518F8);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  uint64_t v15 = sub_10000FD98( &qword_1003520A8,  type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo,  (uint64_t)&unk_1002B9024);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 5LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t sub_100058B60(uint64_t a1, uint64_t a2)
{
  return sub_100065AC0( a1,  a2,  type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo,  (uint64_t (*)(uint64_t, uint64_t))sub_100058B88) & 1;
}

BOOL sub_100058B88(uint64_t a1, uint64_t a2)
{
  uint64_t v123 = a2;
  uint64_t v98 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0LL);
  uint64_t v97 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  uint64_t v94 = (uint64_t)&v93 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v96 = sub_100003A0C(&qword_100354FC0);
  __chkstk_darwin(v96);
  uint64_t v99 = (uint64_t)&v93 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100003A0C(&qword_1003518F8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v108 = (char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  char v107 = (char *)&v93 - v8;
  uint64_t v105 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0LL);
  uint64_t v103 = *(void *)(v105 - 8);
  __chkstk_darwin(v105);
  uint64_t v95 = (uint64_t)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v102 = sub_100003A0C(&qword_100354FC8);
  __chkstk_darwin(v102);
  uint64_t v106 = (uint64_t)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100003A0C(&qword_1003518F0);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v100 = (uint64_t)&v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v104 = (uint64_t)&v93 - v14;
  uint64_t v114 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0LL);
  uint64_t v112 = *(void *)(v114 - 8);
  __chkstk_darwin(v114);
  uint64_t v101 = (uint64_t)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v111 = sub_100003A0C(&qword_100354FD0);
  __chkstk_darwin(v111);
  uint64_t v115 = (uint64_t)&v93 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100003A0C(&qword_1003518E8);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v109 = (uint64_t)&v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v113 = (uint64_t)&v93 - v20;
  uint64_t v121 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0LL);
  uint64_t v119 = *(void *)(v121 - 8);
  __chkstk_darwin(v121);
  uint64_t v110 = (uint64_t)&v93 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v118 = sub_100003A0C(&qword_100354FD8);
  __chkstk_darwin(v118);
  uint64_t v122 = (uint64_t)&v93 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = sub_100003A0C(&qword_1003518E0);
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v116 = (uint64_t)&v93 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24);
  uint64_t v120 = (uint64_t)&v93 - v26;
  uint64_t v27 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v117 = (uint64_t)&v93 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = sub_100003A0C(&qword_100354FE0);
  __chkstk_darwin(v30);
  uint64_t v32 = (char *)&v93 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = sub_100003A0C(&qword_1003518D8);
  uint64_t v34 = __chkstk_darwin(v33);
  uint64_t v36 = (char *)&v93 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v34);
  int v38 = (char *)&v93 - v37;
  uint64_t v39 = a1;
  uint64_t v40 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess(v40, v133, 0LL, 0LL);
  sub_10000E6C0(v40, (uint64_t)v38, &qword_1003518D8);
  uint64_t v41 = v123;
  uint64_t v42 = v123
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess( v123 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps,  v132,  0LL,  0LL);
  uint64_t v43 = (uint64_t)&v32[*(int *)(v30 + 48)];
  sub_10000E6C0((uint64_t)v38, (uint64_t)v32, &qword_1003518D8);
  sub_10000E6C0(v42, v43, &qword_1003518D8);
  uint64_t v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
  if (v44((uint64_t)v32, 1LL, v27) == 1)
  {
    swift_retain(v39);
    swift_retain(v41);
    sub_100015764((uint64_t)v38, &qword_1003518D8);
    if (v44(v43, 1LL, v27) == 1)
    {
      sub_100015764((uint64_t)v32, &qword_1003518D8);
      goto LABEL_8;
    }

Swift::Int sub_1000599F4()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo,  &qword_100351A88,  (uint64_t)&unk_1002B928C);
}

uint64_t sub_100059A10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD7C(a1, &qword_10036D978, &qword_10036D980, (uint64_t)sub_1000579AC, a2);
}

uint64_t sub_100059A2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100057FCC(a1, a2, a3);
}

uint64_t sub_100059A40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100058288(a1, a2, a3);
}

uint64_t sub_100059A54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354DB8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo,  (uint64_t)&unk_1002B9204);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100059AA4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D970, (uint64_t)qword_1003697D8, (uint64_t)sub_100057774, a1);
}

uint64_t sub_100059AC0(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003520C0,  type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo,  (uint64_t)&unk_1002B918C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100059B00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003520C0,  type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo,  (uint64_t)&unk_1002B918C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100059B50()
{
  return &unk_10033E080;
}

unint64_t sub_100059B5C()
{
  return 0xD000000000000031LL;
}

uint64_t sub_100059B78()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003697F0);
  sub_10000E704(v0, (uint64_t)qword_1003697F0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v27 = swift_allocObject(v1, v6 + 9 * v4, v5 | 7);
  *(_OWORD *)(v27 + 16) = xmmword_1002B3320;
  uint64_t v7 = v27 + v6;
  uint64_t v8 = v27 + v6 + *(int *)(v2 + 48);
  *(void *)(v27 + v6) = 1LL;
  *(void *)uint64_t v8 = "decode_time_full_gps_ns";
  *(void *)(v8 + 8) = 23LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "alpha0";
  *(void *)(v12 + 8) = 6LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 3LL;
  *(void *)uint64_t v14 = "alpha1";
  *((void *)v14 + 1) = 6LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v7 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *uint64_t v15 = 4LL;
  *(void *)uint64_t v16 = "alpha2";
  *((void *)v16 + 1) = 6LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v7 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "alpha3";
  *((void *)v18 + 1) = 6LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v7 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 6LL;
  *(void *)uint64_t v20 = "beta0";
  *((void *)v20 + 1) = 5LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v7 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  *uint64_t v21 = 7LL;
  *(void *)uint64_t v22 = "beta1";
  *((void *)v22 + 1) = 5LL;
  v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v7 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  *uint64_t v23 = 8LL;
  *(void *)uint64_t v24 = "beta2";
  *((void *)v24 + 1) = 5LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 9LL;
  *(void *)uint64_t v25 = "beta3";
  *(void *)(v25 + 8) = 5LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v27);
}

uint64_t sub_100059E48()
{
  return sub_100008C30(&qword_10036D988, (uint64_t)qword_1003697F0, (uint64_t)sub_100059B78);
}

uint64_t sub_100059E64@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D988, (uint64_t)qword_1003697F0, (uint64_t)sub_100059B78, a1);
}

uint64_t sub_100059E80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL);
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v3 + *(int *)(v9 + 20), a2, a3);
          break;
        case 2LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL) + 24);
          goto LABEL_14;
        case 3LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL) + 28);
          goto LABEL_14;
        case 4LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL) + 32);
          goto LABEL_14;
        case 5LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL) + 36);
          goto LABEL_14;
        case 6LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL) + 40);
          goto LABEL_14;
        case 7LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL) + 44);
          goto LABEL_14;
        case 8LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL) + 48);
          goto LABEL_14;
        case 9LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL) + 52);
LABEL_14:
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + v10, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_100059FD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL);
  uint64_t v10 = (int *)result;
  uint64_t v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(void *)v11, 1LL, a2, a3);
  }
  if (!v4)
  {
    uint64_t v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(2LL, a2, a3, *(float *)v12);
    }
    uint64_t v13 = v5 + v10[7];
    if ((*(_BYTE *)(v13 + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(3LL, a2, a3, *(float *)v13);
    }
    uint64_t v14 = v5 + v10[8];
    if ((*(_BYTE *)(v14 + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(4LL, a2, a3, *(float *)v14);
    }
    sub_10005A1A4(v5, a1, a2, a3);
    sub_10005A218(v5, a1, a2, a3);
    sub_10005A28C(v5, a1, a2, a3);
    sub_10005A300(v5, a1, a2, a3);
    sub_10005A374(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_10005A1A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL);
  uint64_t v8 = a1 + *(int *)(result + 36);
  if ((*(_BYTE *)(v8 + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(5LL, a3, a4, *(float *)v8);
  }
  return result;
}

uint64_t sub_10005A218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL);
  uint64_t v8 = a1 + *(int *)(result + 40);
  if ((*(_BYTE *)(v8 + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(6LL, a3, a4, *(float *)v8);
  }
  return result;
}

uint64_t sub_10005A28C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL);
  uint64_t v8 = a1 + *(int *)(result + 44);
  if ((*(_BYTE *)(v8 + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(7LL, a3, a4, *(float *)v8);
  }
  return result;
}

uint64_t sub_10005A300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL);
  uint64_t v8 = a1 + *(int *)(result + 48);
  if ((*(_BYTE *)(v8 + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(8LL, a3, a4, *(float *)v8);
  }
  return result;
}

uint64_t sub_10005A374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL);
  uint64_t v8 = a1 + *(int *)(result + 52);
  if ((*(_BYTE *)(v8 + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(9LL, a3, a4, *(float *)v8);
  }
  return result;
}

Swift::Int sub_10005A3EC()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters,  &qword_100351A90,  (uint64_t)&unk_1002B93F4);
}

uint64_t sub_10005A408@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  uint64_t v7 = a2 + v5;
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  uint64_t v8 = a1[8];
  uint64_t v9 = a2 + a1[7];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a2 + v8;
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  uint64_t v11 = a1[10];
  uint64_t v12 = a2 + a1[9];
  *(_DWORD *)uint64_t v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  uint64_t v13 = a2 + v11;
  *(_DWORD *)uint64_t v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  uint64_t v14 = a1[12];
  uint64_t v15 = a2 + a1[11];
  *(_DWORD *)uint64_t v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  uint64_t v16 = a2 + v14;
  *(_DWORD *)uint64_t v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  uint64_t v17 = a2 + a1[13];
  *(_DWORD *)uint64_t v17 = 0;
  *(_BYTE *)(v17 + 4) = 1;
  return result;
}

uint64_t sub_10005A4B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100059E80(a1, a2, a3);
}

uint64_t sub_10005A4C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100059FD8(a1, a2, a3);
}

uint64_t sub_10005A4D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354DB0,  type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters,  (uint64_t)&unk_1002B936C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10005A528@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D988, (uint64_t)qword_1003697F0, (uint64_t)sub_100059B78, a1);
}

uint64_t sub_10005A544(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003520D8,  type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters,  (uint64_t)&unk_1002B92F4);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10005A584(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003520D8,  type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters,  (uint64_t)&unk_1002B92F4);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10005A5D4()
{
  return &unk_10033E090;
}

unint64_t sub_10005A5E0()
{
  return 0xD000000000000020LL;
}

uint64_t sub_10005A5FC()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369808);
  sub_10000E704(v0, (uint64_t)qword_100369808);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "x";
  *(void *)(v9 + 8) = 1LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "y";
  *((void *)v13 + 1) = 1LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "z";
  *(void *)(v14 + 8) = 1LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10005A788()
{
  return sub_100008C30(&qword_10036D990, (uint64_t)qword_100369808, (uint64_t)sub_10005A5FC);
}

uint64_t sub_10005A7A4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D990, (uint64_t)qword_100369808, (uint64_t)sub_10005A5FC, a1);
}

uint64_t sub_10005A7C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000540F8( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz,  (void (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of Decoder.decodeSingularDoubleField(value:));
}

uint64_t sub_10005A7E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005A800(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_10005A800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = v4;
  uint64_t result = a4(0LL);
  uint64_t v11 = result;
  uint64_t v12 = v6 + *(int *)(result + 20);
  if ((*(_BYTE *)(v12 + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1LL, a2, a3, *(double *)v12);
  }
  if (!v5)
  {
    uint64_t v13 = v6 + *(int *)(v11 + 24);
    if ((*(_BYTE *)(v13 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2LL, a2, a3, *(double *)v13);
    }
    uint64_t v14 = v6 + *(int *)(v11 + 28);
    if ((*(_BYTE *)(v14 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3LL, a2, a3, *(double *)v14);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_10005A8F8(uint64_t a1, uint64_t a2)
{
  return sub_100065750(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz) & 1;
}

Swift::Int sub_10005A918()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz,  &qword_100351A98,  (uint64_t)&unk_1002B955C);
}

uint64_t sub_10005A934(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354DA8,  type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz,  (uint64_t)&unk_1002B94D4);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10005A984@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D990, (uint64_t)qword_100369808, (uint64_t)sub_10005A5FC, a1);
}

uint64_t sub_10005A9A0(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003520F0,  type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz,  (uint64_t)&unk_1002B945C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10005A9E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003520F0,  type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz,  (uint64_t)&unk_1002B945C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10005AA30()
{
  return &unk_10033E0A0;
}

unint64_t sub_10005AA3C()
{
  return 0xD000000000000033LL;
}

uint64_t sub_10005AA58()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369820);
  sub_10000E704(v0, (uint64_t)qword_100369820);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v8 = "id";
  *(void *)(v8 + 8) = 2LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v6 + v4) = 2LL;
  *(void *)uint64_t v12 = "band";
  *(void *)(v12 + 8) = 4LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + v6 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 3LL;
  *(void *)uint64_t v14 = "sv_reference_point";
  *((void *)v14 + 1) = 18LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v7 + v6 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *uint64_t v15 = 4LL;
  *(void *)uint64_t v16 = "offset_xyz_m";
  *((void *)v16 + 1) = 12LL;
  v16[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10005AC24()
{
  return sub_100008C30(&qword_10036D998, (uint64_t)qword_100369820, (uint64_t)sub_10005AA58);
}

uint64_t sub_10005AC40@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D998, (uint64_t)qword_100369820, (uint64_t)sub_10005AA58, a1);
}

uint64_t sub_10005AC5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0LL) + 20);
          uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL);
          uint64_t v11 = &qword_100351CE8;
          uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvId;
          uint64_t v13 = &unk_1002B57E4;
          goto LABEL_5;
        case 2LL:
          uint64_t v15 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0LL) + 24);
          unint64_t v16 = sub_10007FBE0();
          uint64_t v17 = v15;
          uint64_t v18 = &type metadata for CLP_LogEntry_PrivateData_Band;
          goto LABEL_10;
        case 3LL:
          uint64_t v19 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0LL) + 28);
          unint64_t v16 = sub_10007F97C();
          uint64_t v17 = v19;
          uint64_t v18 = &type metadata for CLP_LogEntry_PrivateData_SvReferencePoint;
LABEL_10:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v17, v18, v16, a2, a3);
          break;
        case 4LL:
          uint64_t v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0LL) + 32);
          uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0LL);
          uint64_t v11 = &qword_1003520F0;
          uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz;
          uint64_t v13 = &unk_1002B945C;
LABEL_5:
          uint64_t v14 = sub_10000FD98(v11, v12, (uint64_t)v13);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v14, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_10005AE04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = sub_10005AF38(v5, a1, a2, a3);
  if (!v4)
  {
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0LL);
    uint64_t v11 = v10;
    if (*(_BYTE *)(v5 + *(int *)(v10 + 24)) != 13)
    {
      char v14 = *(_BYTE *)(v5 + *(int *)(v10 + 24));
      unint64_t v12 = sub_10007FBE0();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v14,  2LL,  &type metadata for CLP_LogEntry_PrivateData_Band,  v12,  a2,  a3);
    }

    if (*(_BYTE *)(v5 + *(int *)(v11 + 28)) != 4)
    {
      char v15 = *(_BYTE *)(v5 + *(int *)(v11 + 28));
      unint64_t v13 = sub_10007F97C();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v15,  3LL,  &type metadata for CLP_LogEntry_PrivateData_SvReferencePoint,  v13,  a2,  a3);
    }

    sub_10005B0AC(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_10005AF38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100351858);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 20), (uint64_t)v8, &qword_100351858);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  uint64_t v15 = sub_10000FD98( &qword_100351CE8,  type metadata accessor for CLP_LogEntry_PrivateData_SvId,  (uint64_t)&unk_1002B57E4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_10005B0AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100351900);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 32), (uint64_t)v8, &qword_100351900);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
  uint64_t v15 = sub_10000FD98( &qword_1003520F0,  type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz,  (uint64_t)&unk_1002B945C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

Swift::Int sub_10005B224()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset,  &qword_100351AA0,  (uint64_t)&unk_1002B96C4);
}

uint64_t sub_10005B240@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = a1[7];
  *(_BYTE *)(a2 + a1[6]) = 13;
  *(_BYTE *)(a2 + v6) = 4;
  uint64_t v7 = a2 + a1[8];
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 1LL, 1LL, v8);
}

uint64_t sub_10005B2D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005AC5C(a1, a2, a3);
}

uint64_t sub_10005B2E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005AE04(a1, a2, a3);
}

uint64_t sub_10005B2FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354DA0,  type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset,  (uint64_t)&unk_1002B963C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10005B34C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D998, (uint64_t)qword_100369820, (uint64_t)sub_10005AA58, a1);
}

uint64_t sub_10005B368(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100352108,  type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset,  (uint64_t)&unk_1002B95C4);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10005B3A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100352108,  type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset,  (uint64_t)&unk_1002B95C4);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10005B3F8()
{
  return &unk_10033E0B0;
}

unint64_t sub_10005B404()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_10005B420()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369838);
  sub_10000E704(v0, (uint64_t)qword_100369838);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "ios_absolute_sec";
  *(void *)(v9 + 8) = 16LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  unint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "mach_absolute_sec";
  *((void *)v13 + 1) = 17LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "mach_continuous_sec";
  *(void *)(v14 + 8) = 19LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10005B5B4()
{
  return sub_100008C30(&qword_10036D9A0, (uint64_t)qword_100369838, (uint64_t)sub_10005B420);
}

uint64_t sub_10005B5D0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D9A0, (uint64_t)qword_100369838, (uint64_t)sub_10005B420, a1);
}

uint64_t sub_10005B5EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000540F8( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp,  (void (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of Decoder.decodeSingularDoubleField(value:));
}

uint64_t sub_10005B610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005A800(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t sub_10005B62C(uint64_t a1, uint64_t a2)
{
  return sub_100065750(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp) & 1;
}

Swift::Int sub_10005B64C()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp,  &qword_100351AA8,  (uint64_t)&unk_1002B982C);
}

uint64_t sub_10005B668@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  uint64_t v7 = a2 + v5;
  *(void *)uint64_t v7 = 0LL;
  *(_BYTE *)(v7 + 8) = 1;
  uint64_t v8 = a2 + a1[7];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  return result;
}

uint64_t sub_10005B6BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354D98,  type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp,  (uint64_t)&unk_1002B97A4);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10005B70C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D9A0, (uint64_t)qword_100369838, (uint64_t)sub_10005B420, a1);
}

uint64_t sub_10005B728(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100352120,  type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp,  (uint64_t)&unk_1002B972C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10005B768(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100352120,  type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp,  (uint64_t)&unk_1002B972C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10005B7B8()
{
  return &unk_10033E0C0;
}

unint64_t sub_10005B7C4()
{
  return 0xD00000000000003ALL;
}

uint64_t sub_10005B7E0()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369850);
  sub_10000E704(v0, (uint64_t)qword_100369850);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 9 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3320;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "received_timestamp";
  *(void *)(v9 + 8) = 18LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  unint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "meas_report";
  *(void *)(v13 + 8) = 11LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "sv_info";
  *((void *)v15 + 1) = 7LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  void *v16 = 4LL;
  *(void *)uint64_t v17 = "rx_band_corrections";
  *((void *)v17 + 1) = 19LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 5LL;
  *(void *)uint64_t v19 = "time_conversion";
  *((void *)v19 + 1) = 15LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  *uint64_t v20 = 6LL;
  *(void *)uint64_t v21 = "meas_applicability_time_mach_continuous_sec";
  *((void *)v21 + 1) = 43LL;
  v21[16] = 2;
  v12();
  uint64_t v22 = (void *)(v8 + 6 * v4);
  uint64_t v23 = (char *)v22 + *(int *)(v2 + 48);
  *uint64_t v22 = 7LL;
  *(void *)uint64_t v23 = "meas_applicability_time_uncertainty_sec";
  *((void *)v23 + 1) = 39LL;
  v23[16] = 2;
  v12();
  uint64_t v24 = (void *)(v8 + 7 * v4);
  uint64_t v25 = (char *)v24 + *(int *)(v2 + 48);
  *uint64_t v24 = 8LL;
  *(void *)uint64_t v25 = "klobuchar_model";
  *((void *)v25 + 1) = 15LL;
  v25[16] = 2;
  v12();
  uint64_t v26 = v8 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 8 * v4) = 9LL;
  *(void *)uint64_t v26 = "apc_sv_offset";
  *(void *)(v26 + 8) = 13LL;
  *(_BYTE *)(v26 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10005BAC0()
{
  return sub_100008C30(&qword_10036D9A8, (uint64_t)qword_100369850, (uint64_t)sub_10005B7E0);
}

uint64_t sub_10005BADC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10036D9A8, (uint64_t)qword_100369850, (uint64_t)sub_10005B7E0, a1);
}

uint64_t sub_10005BAF8()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0LL);
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 1LL, 1LL, v3);
  uint64_t v4 = v1
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  *(void *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo) = &_swiftEmptyArrayStorage;
  *(void *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections) = &_swiftEmptyArrayStorage;
  uint64_t v6 = v1
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  uint64_t v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec;
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))( v10,  1LL,  1LL,  v11);
  *(void *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset[0]) = &_swiftEmptyArrayStorage;
  qword_10036D9B8 = v1;
  return result;
}

uint64_t sub_10005BC50(uint64_t a1)
{
  uint64_t v53 = a1;
  uint64_t v2 = sub_100003A0C(&qword_100351920);
  __chkstk_darwin(v2);
  uint64_t v59 = (uint64_t)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100003A0C(&qword_100351918);
  __chkstk_darwin(v4);
  uint64_t v58 = (uint64_t)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100003A0C(&qword_100351910);
  __chkstk_darwin(v6);
  uint64_t v52 = (uint64_t)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100003A0C(&qword_100351908);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
  uint64_t v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
  uint64_t v15 = (uint64_t *)(v1
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
  *(void *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo) = &_swiftEmptyArrayStorage;
  uint64_t v16 = (uint64_t *)(v1
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
  *(void *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections) = &_swiftEmptyArrayStorage;
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  uint64_t v54 = v1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  uint64_t v18 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v17, 1LL, 1LL, v18);
  uint64_t v19 = v1;
  uint64_t v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec;
  *(void *)uint64_t v20 = 0LL;
  *(_BYTE *)(v20 + 8) = 1;
  uint64_t v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  uint64_t v55 = v1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  *(void *)uint64_t v21 = 0LL;
  *(_BYTE *)(v21 + 8) = 1;
  uint64_t v22 = v1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  uint64_t v56 = v22;
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v22, 1LL, 1LL, v23);
  uint64_t v24 = v19;
  uint64_t v57 = (uint64_t *)(v19
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset);
  *(void *)(v19
            + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset) = &_swiftEmptyArrayStorage;
  uint64_t v25 = v53;
  uint64_t v26 = v53
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess( v53 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp,  v73,  0LL,  0LL);
  sub_10000E6C0(v26, (uint64_t)v10, &qword_100351908);
  swift_beginAccess(v11, v72, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v10, v11, &qword_100351908);
  swift_endAccess(v72);
  uint64_t v27 = v25
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess( v25 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport,  v72,  0LL,  0LL);
  uint64_t v28 = v52;
  sub_10000E6C0(v27, v52, &qword_100351910);
  swift_beginAccess(v13, v71, 33LL, 0LL);
  sub_10000E5D4(v28, v13, &qword_100351910);
  swift_endAccess(v71);
  uint64_t v29 = (uint64_t *)(v25
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
  swift_beginAccess( v25 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo,  v71,  0LL,  0LL);
  uint64_t v30 = *v29;
  swift_beginAccess(v15, v70, 1LL, 0LL);
  uint64_t v31 = *v15;
  *uint64_t v15 = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  uint64_t v32 = (uint64_t *)(v25
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
  swift_beginAccess( v25 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections,  v69,  0LL,  0LL);
  uint64_t v33 = *v32;
  swift_beginAccess(v16, v68, 1LL, 0LL);
  uint64_t v34 = *v16;
  uint64_t *v16 = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  uint64_t v35 = v25
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess( v25 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion,  &v67,  0LL,  0LL);
  uint64_t v36 = v58;
  sub_10000E6C0(v35, v58, &qword_100351918);
  uint64_t v37 = v54;
  swift_beginAccess(v54, v66, 33LL, 0LL);
  sub_10000E5D4(v36, v37, &qword_100351918);
  swift_endAccess(v66);
  int v38 = (uint64_t *)(v25
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec);
  swift_beginAccess( v25 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec,  v66,  0LL,  0LL);
  uint64_t v39 = *v38;
  LOBYTE(v38) = *((_BYTE *)v38 + 8);
  swift_beginAccess(v20, &v65, 1LL, 0LL);
  *(void *)uint64_t v20 = v39;
  *(_BYTE *)(v20 + 8) = (_BYTE)v38;
  uint64_t v40 = (uint64_t *)(v25
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec);
  swift_beginAccess( v25 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec,  &v64,  0LL,  0LL);
  uint64_t v41 = *v40;
  LOBYTE(v40) = *((_BYTE *)v40 + 8);
  uint64_t v42 = v55;
  swift_beginAccess(v55, &v63, 1LL, 0LL);
  *(void *)uint64_t v42 = v41;
  *(_BYTE *)(v42 + 8) = (_BYTE)v40;
  uint64_t v43 = v25
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess( v25 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel,  &v62,  0LL,  0LL);
  uint64_t v44 = v59;
  sub_10000E6C0(v43, v59, &qword_100351920);
  uint64_t v45 = v56;
  swift_beginAccess(v56, v61, 33LL, 0LL);
  sub_10000E5D4(v44, v45, &qword_100351920);
  swift_endAccess(v61);
  uint64_t v46 = (uint64_t *)(v25
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset);
  swift_beginAccess( v25 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset,  v61,  0LL,  0LL);
  uint64_t v47 = *v46;
  swift_bridgeObjectRetain(v47);
  swift_release(v25);
  char v48 = v57;
  swift_beginAccess(v57, &v60, 1LL, 0LL);
  uint64_t v49 = *v48;
  *char v48 = v47;
  swift_bridgeObjectRelease(v49);
  return v24;
}

uint64_t sub_10005C1F0()
{
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo));
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections));
  sub_100015764( v0 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion,  &qword_100351918);
  sub_100015764( v0 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel,  &qword_100351920);
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset[0]));
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_10005C2A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v9)) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v3 + v9);
    uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0LL);
    uint64_t v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v13 = swift_retain(v10);
    sub_10005BC50(v13);
    uint64_t v14 = *(void *)(v6 + v9);
    *(void *)(v6 + v9) = v12;
    swift_release(v14);
  }

  uint64_t v15 = *(void *)(v6 + v9);
  swift_retain(v15);
  uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1LL:
          uint64_t v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp,  v34,  33LL,  0LL);
          uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0LL);
          uint64_t v21 = &qword_100352120;
          uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp;
          uint64_t v23 = &unk_1002B972C;
          goto LABEL_16;
        case 2LL:
          uint64_t v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport,  v34,  33LL,  0LL);
          uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0LL);
          uint64_t v21 = &qword_100351F28;
          uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport;
          uint64_t v23 = &unk_1002B79A4;
          goto LABEL_16;
        case 3LL:
          uint64_t v24 = v15
              + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo,  v34,  33LL,  0LL);
          uint64_t v25 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL);
          uint64_t v26 = &qword_100351FA0;
          uint64_t v27 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo;
          uint64_t v28 = &unk_1002B80AC;
          goto LABEL_18;
        case 4LL:
          uint64_t v24 = v15
              + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections,  v34,  33LL,  0LL);
          uint64_t v25 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0LL);
          uint64_t v26 = &qword_100351FB8;
          uint64_t v27 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections;
          uint64_t v28 = &unk_1002B8214;
          goto LABEL_18;
        case 5LL:
          uint64_t v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion,  v34,  33LL,  0LL);
          uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0LL);
          uint64_t v21 = &qword_1003520C0;
          uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo;
          uint64_t v23 = &unk_1002B918C;
          goto LABEL_16;
        case 6LL:
          uint64_t v29 = OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec;
          goto LABEL_14;
        case 7LL:
          uint64_t v29 = OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
LABEL_14:
          uint64_t v30 = v15 + v29;
          swift_beginAccess(v15 + v29, v34, 33LL, 0LL);
          uint64_t v31 = v5;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v30, a2, a3);
          goto LABEL_19;
        case 8LL:
          uint64_t v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel,  v34,  33LL,  0LL);
          uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL);
          uint64_t v21 = &qword_1003520D8;
          uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters;
          uint64_t v23 = &unk_1002B92F4;
LABEL_16:
          uint64_t v32 = sub_10000FD98(v21, v22, (uint64_t)v23);
          uint64_t v31 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v19, v20, v32, a2, a3);
          goto LABEL_19;
        case 9LL:
          uint64_t v24 = v15
              + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset[0];
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset[0],  v34,  33LL,  0LL);
          uint64_t v25 = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0LL);
          uint64_t v26 = &qword_100352108;
          uint64_t v27 = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset;
          uint64_t v28 = &unk_1002B95C4;
LABEL_18:
          uint64_t v33 = sub_10000FD98(v26, v27, (uint64_t)v28);
          uint64_t v31 = v5;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v24, v25, v33, a2, a3);
LABEL_19:
          uint64_t v5 = v31;
          swift_endAccess(v34);
          break;
        default:
          break;
      }

      uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return swift_release(v15);
}

uint64_t sub_10005C658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5
  uint64_t v10 = swift_retain(v9);
  sub_10005C9A0(v10, a1, a2, a3);
  if (v4) {
    return swift_release(v9);
  }
  sub_10005CB2C(v9, a1, a2, a3);
  uint64_t v12 = (uint64_t *)(v9
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo,  v31,  0LL,  0LL);
  uint64_t v13 = *v12;
  if (*(void *)(v13 + 16))
  {
    uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0LL);
    uint64_t v15 = sub_10000FD98( &qword_100351FA0,  type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  (uint64_t)&unk_1002B80AC);
    uint64_t v16 = swift_bridgeObjectRetain(v13);
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v16, 3LL, v14, v15, a2, a3);
    swift_bridgeObjectRelease(v13);
  }

  char v17 = (uint64_t *)(v9
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections,  v30,  0LL,  0LL);
  uint64_t v18 = *v17;
  if (*(void *)(v18 + 16))
  {
    uint64_t v19 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0LL);
    uint64_t v20 = sub_10000FD98( &qword_100351FB8,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections,  (uint64_t)&unk_1002B8214);
    uint64_t v21 = swift_bridgeObjectRetain(v18);
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v21, 4LL, v19, v20, a2, a3);
    swift_bridgeObjectRelease(v18);
  }

  sub_10005CCB8(v9, a1, a2, a3);
  uint64_t v22 = v9
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec,  v33,  0LL,  0LL);
  if ((*(_BYTE *)(v22 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(6LL, a2, a3, *(double *)v22);
  }
  uint64_t v23 = v9
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec,  v32,  0LL,  0LL);
  if ((*(_BYTE *)(v23 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(7LL, a2, a3, *(double *)v23);
  }
  sub_10005CE44(v9, a1, a2, a3);
  uint64_t v24 = (uint64_t *)(v9
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset[0]);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset[0],  v29,  0LL,  0LL);
  uint64_t v25 = *v24;
  if (*(void *)(v25 + 16))
  {
    uint64_t v26 = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0LL);
    uint64_t v27 = sub_10000FD98( &qword_100352108,  type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset,  (uint64_t)&unk_1002B95C4);
    uint64_t v28 = swift_bridgeObjectRetain(v25);
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v28, 9LL, v26, v27, a2, a3);
    swift_bridgeObjectRelease(v25);
  }

  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10005C9A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100351908);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100351908);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  uint64_t v15 = sub_10000FD98( &qword_100352120,  type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp,  (uint64_t)&unk_1002B972C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t sub_10005CB2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100351910);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100351910);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  uint64_t v15 = sub_10000FD98( &qword_100351F28,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport,  (uint64_t)&unk_1002B79A4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
}

uint64_t sub_10005CCB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100351918);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100351918);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  uint64_t v15 = sub_10000FD98( &qword_1003520C0,  type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo,  (uint64_t)&unk_1002B918C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 5LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
}

uint64_t sub_10005CE44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100351920);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100351920);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
  uint64_t v15 = sub_10000FD98( &qword_1003520D8,  type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters,  (uint64_t)&unk_1002B92F4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 8LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_10005CFD0(uint64_t a1, uint64_t a2)
{
  return sub_100065AC0( a1,  a2,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents,  sub_10005CFF8) & 1;
}

uint64_t sub_10005CFF8(uint64_t a1, uint64_t a2)
{
  uint64_t v137 = a2;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL);
  uint64_t v116 = *(void *)(v3 - 8);
  uint64_t v117 = v3;
  __chkstk_darwin(v3);
  uint64_t v114 = (uint64_t)&v113 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v115 = sub_100003A0C(&qword_100354F80);
  __chkstk_darwin(v115);
  uint64_t v118 = (uint64_t)&v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100003A0C(&qword_100351920);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v120 = (char *)&v113 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v129 = (char *)&v113 - v9;
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0LL);
  uint64_t v123 = *(void *)(v10 - 8);
  uint64_t v124 = v10;
  __chkstk_darwin(v10);
  uint64_t v119 = (uint64_t)&v113 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v122 = sub_100003A0C(&qword_100354F88);
  __chkstk_darwin(v122);
  uint64_t v125 = (uint64_t)&v113 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100003A0C(&qword_100351918);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v121 = (uint64_t)&v113 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v134 = (uint64_t)&v113 - v16;
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0LL);
  uint64_t v131 = *(void *)(v17 - 8);
  uint64_t v132 = v17;
  __chkstk_darwin(v17);
  uint64_t v126 = (uint64_t)&v113 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v130 = sub_100003A0C(&qword_100354F90);
  __chkstk_darwin(v130);
  uint64_t v133 = (uint64_t)&v113 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_100003A0C(&qword_100351910);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v127 = (uint64_t)&v113 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v136 = (uint64_t)&v113 - v23;
  uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v128 = (uint64_t)&v113 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = sub_100003A0C(&qword_100354F98);
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v113 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = sub_100003A0C(&qword_100351908);
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v135 = (uint64_t)&v113 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v31);
  uint64_t v34 = (char *)&v113 - v33;
  uint64_t v35 = a1;
  uint64_t v36 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess(v36, v155, 0LL, 0LL);
  sub_10000E6C0(v36, (uint64_t)v34, &qword_100351908);
  uint64_t v37 = v137;
  uint64_t v38 = v137
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess( v137 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp,  v154,  0LL,  0LL);
  uint64_t v39 = (uint64_t)&v29[*(int *)(v27 + 48)];
  sub_10000E6C0((uint64_t)v34, (uint64_t)v29, &qword_100351908);
  sub_10000E6C0(v38, v39, &qword_100351908);
  uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  if (v40((uint64_t)v29, 1LL, v24) == 1)
  {
    swift_retain(v35);
    swift_retain(v37);
    sub_100015764((uint64_t)v34, &qword_100351908);
    int v41 = v40(v39, 1LL, v24);
    uint64_t v42 = v37;
    uint64_t v43 = v35;
    if (v41 == 1)
    {
      sub_100015764((uint64_t)v29, &qword_100351908);
      goto LABEL_8;
    }

Swift::Int sub_10005DD44()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents,  &qword_100351AB0,  (uint64_t)&unk_1002B9994);
}

uint64_t sub_10005DD60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD7C(a1, &qword_10036D9B0, &qword_10036D9B8, (uint64_t)sub_10005BAF8, a2);
}

uint64_t sub_10005DD7C@<X0>( uint64_t a1@<X0>, void *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10 = *(int *)(a1 + 20);
  if (*a2 != -1LL) {
    swift_once(a2, a4);
  }
  uint64_t v11 = *a3;
  *(void *)(a5 + v10) = *a3;
  return swift_retain(v11);
}

uint64_t sub_10005DDE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005C2A0(a1, a2, a3);
}

uint64_t sub_10005DDF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005C658(a1, a2, a3);
}

uint64_t sub_10005DE0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100354D90,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents,  (uint64_t)&unk_1002B990C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10005DE5C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10036D9A8, (uint64_t)qword_100369850, (uint64_t)sub_10005B7E0, a1);
}

uint64_t sub_10005DE78(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100352138,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents,  (uint64_t)&unk_1002B9894);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10005DEB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100352138,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents,  (uint64_t)&unk_1002B9894);
  return Message.hash(into:)(a1, a2, v4);
}

BOOL sub_10005DF08(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  if (v2 == 1) {
    return 1LL;
  }
  uint64_t v4 = v2 - 2;
  uint64_t v5 = (double *)(a1 + 40);
  uint64_t v6 = (double *)(a2 + 40);
  do
  {
    double v7 = *v5++;
    double v8 = v7;
    double v9 = *v6++;
    double v10 = v9;
    BOOL v12 = v4-- != 0;
    BOOL result = v8 == v10;
  }

  while (v8 == v10 && v12);
  return result;
}

uint64_t sub_10005DF7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  double v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  double v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }

    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_10000404C(a1 + v12, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
        sub_10000404C(a2 + v12, (uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
        char v15 = sub_1000614E4((uint64_t)v10, (uint64_t)v7);
        sub_100004090((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
        sub_100004090((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }

      while (v17);
    }
  }

  else
  {
    char v15 = 0;
  }

  return v15 & 1;
}

uint64_t sub_10005E0B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0LL);
  uint64_t v71 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100003A0C(&qword_1003518A0);
  __chkstk_darwin(v7);
  uint64_t v70 = (uint64_t)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100003A0C(&qword_100354FB0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v74 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0LL);
  uint64_t v12 = __chkstk_darwin(v74);
  uint64_t v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  BOOL v17 = (char *)&v65 - v16;
  uint64_t v18 = *(void *)(a1 + 16);
  if (v18 != *(void *)(a2 + 16)) {
    goto LABEL_44;
  }
  if (!v18 || a1 == a2)
  {
    char v61 = 1;
    return v61 & 1;
  }

  uint64_t v73 = v4;
  unint64_t v19 = (*(unsigned __int8 *)(v15 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v20 = *(void *)(v15 + 72);
  char v66 = v6;
  uint64_t v67 = v20;
  uint64_t v21 = v18 - 1;
  uint64_t v68 = a2;
  uint64_t v69 = a1;
  uint64_t v65 = v9;
  while (1)
  {
    uint64_t v72 = v21;
    sub_10000404C(a1 + v19, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
    sub_10000404C(a2 + v19, (uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
    uint64_t v22 = *(int *)(v74 + 20);
    uint64_t v23 = (double *)&v17[v22];
    char v24 = v17[v22 + 8];
    uint64_t v25 = (double *)&v14[v22];
    int v26 = v14[v22 + 8];
    if ((v24 & 1) != 0)
    {
      if (!v26) {
        goto LABEL_43;
      }
    }

    else
    {
      if (*v23 != *v25) {
        LOBYTE(v26) = 1;
      }
      if ((v26 & 1) != 0) {
        goto LABEL_43;
      }
    }

    uint64_t v27 = *(int *)(v74 + 24);
    uint64_t v28 = (uint64_t)&v14[v27];
    uint64_t v29 = (uint64_t)&v11[*(int *)(v9 + 48)];
    sub_10000E6C0((uint64_t)&v17[v27], (uint64_t)v11, &qword_1003518A0);
    sub_10000E6C0(v28, v29, &qword_1003518A0);
    uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48);
    uint64_t v31 = v73;
    if (v30((uint64_t)v11, 1LL, v73) == 1)
    {
      if (v30(v29, 1LL, v31) != 1)
      {
        uint64_t v63 = &qword_100354FB0;
        goto LABEL_42;
      }

      sub_100015764((uint64_t)v11, &qword_1003518A0);
      uint64_t v32 = v68;
      a1 = v69;
      goto LABEL_34;
    }

    uint64_t v33 = v17;
    uint64_t v34 = v14;
    uint64_t v35 = v11;
    uint64_t v36 = (uint64_t)v11;
    uint64_t v37 = v70;
    sub_10000E6C0(v36, v70, &qword_1003518A0);
    if (v30(v29, 1LL, v31) == 1) {
      break;
    }
    uint64_t v38 = v29;
    uint64_t v39 = (uint64_t)v66;
    sub_100003E68(v38, (uint64_t)v66, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
    uint64_t v40 = *(int *)(v31 + 20);
    int v41 = (double *)(v37 + v40);
    char v42 = *(_BYTE *)(v37 + v40 + 8);
    uint64_t v43 = (double *)(v39 + v40);
    int v44 = *(unsigned __int8 *)(v39 + v40 + 8);
    uint64_t v45 = v37;
    if ((v42 & 1) != 0)
    {
      uint64_t v32 = v68;
      a1 = v69;
      uint64_t v11 = v35;
      uint64_t v14 = v34;
      BOOL v17 = v33;
      if (!v44) {
        goto LABEL_38;
      }
    }

    else
    {
      if (*v41 != *v43) {
        LOBYTE(v44) = 1;
      }
      uint64_t v32 = v68;
      a1 = v69;
      uint64_t v11 = v35;
      uint64_t v14 = v34;
      BOOL v17 = v33;
      if ((v44 & 1) != 0)
      {
LABEL_38:
        sub_100004090(v39, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
        uint64_t v62 = v70;
        uint64_t v63 = &qword_1003518A0;
        goto LABEL_41;
      }
    }

    uint64_t v46 = *(int *)(v73 + 24);
    char v47 = (double *)(v45 + v46);
    char v48 = *(_BYTE *)(v45 + v46 + 8);
    uint64_t v49 = (double *)(v39 + v46);
    int v50 = *(unsigned __int8 *)(v39 + v46 + 8);
    if ((v48 & 1) != 0)
    {
      if (!v50) {
        goto LABEL_38;
      }
    }

    else
    {
      if (*v47 != *v49) {
        LOBYTE(v50) = 1;
      }
      if ((v50 & 1) != 0) {
        goto LABEL_38;
      }
    }

    uint64_t v51 = *(int *)(v73 + 28);
    uint64_t v52 = (double *)(v45 + v51);
    char v53 = *(_BYTE *)(v45 + v51 + 8);
    uint64_t v54 = (double *)(v39 + v51);
    int v55 = *(unsigned __int8 *)(v39 + v51 + 8);
    if ((v53 & 1) != 0)
    {
      if (!v55) {
        goto LABEL_38;
      }
    }

    else
    {
      if (*v52 != *v54) {
        LOBYTE(v55) = 1;
      }
      if ((v55 & 1) != 0) {
        goto LABEL_38;
      }
    }

    uint64_t v56 = v39;
    uint64_t v57 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v58 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    LOBYTE(v57) = dispatch thunk of static Equatable.== infix(_:_:)(v45, v56, v57, v58);
    sub_100004090(v56, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
    sub_100004090(v45, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
    sub_100015764((uint64_t)v11, &qword_1003518A0);
    uint64_t v9 = v65;
    if ((v57 & 1) == 0) {
      goto LABEL_43;
    }
LABEL_34:
    uint64_t v59 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v60 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v61 = dispatch thunk of static Equatable.== infix(_:_:)(v17, v14, v59, v60);
    sub_100004090((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
    sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
    uint64_t v21 = v72 - 1;
    if ((v61 & 1) != 0)
    {
      v19 += v67;
      a2 = v32;
      if (v72) {
        continue;
      }
    }

    return v61 & 1;
  }

  uint64_t v62 = v37;
  uint64_t v11 = v35;
  uint64_t v14 = v34;
  BOOL v17 = v33;
  uint64_t v63 = &qword_100354FB0;
LABEL_41:
  sub_100004090(v62, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
LABEL_42:
  sub_100015764((uint64_t)v11, v63);
LABEL_43:
  sub_100004090((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
  sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
LABEL_44:
  char v61 = 0;
  return v61 & 1;
}

uint64_t sub_10005E5F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v43 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (v11 && a1 != a2)
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      while (1)
      {
        sub_10000404C(a1 + v12, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
        sub_10000404C(a2 + v12, (uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
        uint64_t v15 = v4[5];
        int v16 = v10[v15];
        int v17 = v7[v15];
        if (v16 == 13)
        {
          if (v17 != 13) {
            goto LABEL_43;
          }
        }

        else if (v17 == 13 || v16 != v17)
        {
          goto LABEL_43;
        }

        uint64_t v19 = v4[6];
        uint64_t v20 = (double *)&v10[v19];
        char v21 = v10[v19 + 8];
        uint64_t v22 = (double *)&v7[v19];
        int v23 = v7[v19 + 8];
        if ((v21 & 1) != 0)
        {
          if (!v23) {
            goto LABEL_43;
          }
        }

        else
        {
          if (*v20 != *v22) {
            LOBYTE(v23) = 1;
          }
          if ((v23 & 1) != 0)
          {
LABEL_43:
            sub_100004090((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
            sub_100004090((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
            goto LABEL_44;
          }
        }

        uint64_t v24 = v4[7];
        uint64_t v25 = (double *)&v10[v24];
        char v26 = v10[v24 + 8];
        uint64_t v27 = (double *)&v7[v24];
        int v28 = v7[v24 + 8];
        if ((v26 & 1) != 0)
        {
          if (!v28) {
            goto LABEL_43;
          }
        }

        else
        {
          if (*v25 != *v27) {
            LOBYTE(v28) = 1;
          }
          if ((v28 & 1) != 0) {
            goto LABEL_43;
          }
        }

        uint64_t v29 = v4[8];
        uint64_t v30 = (double *)&v10[v29];
        char v31 = v10[v29 + 8];
        uint64_t v32 = (double *)&v7[v29];
        int v33 = v7[v29 + 8];
        if ((v31 & 1) != 0)
        {
          if (!v33) {
            goto LABEL_43;
          }
        }

        else
        {
          if (*v30 != *v32) {
            LOBYTE(v33) = 1;
          }
          if ((v33 & 1) != 0) {
            goto LABEL_43;
          }
        }

        uint64_t v34 = v4[9];
        int v35 = v10[v34];
        int v36 = v7[v34];
        if (v35 == 3)
        {
          if (v36 != 3) {
            goto LABEL_43;
          }
        }

        else if (v36 == 3 || v35 != v36)
        {
          goto LABEL_43;
        }

        uint64_t v37 = type metadata accessor for UnknownStorage(0LL);
        uint64_t v38 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
        char v39 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v7, v37, v38);
        sub_100004090((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
        sub_100004090((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
        BOOL v41 = v14-- != 0;
        if ((v39 & 1) != 0)
        {
          v12 += v13;
          if (v41) {
            continue;
          }
        }

        return v39 & 1;
      }
    }

    char v39 = 1;
  }

  else
  {
LABEL_44:
    char v39 = 0;
  }

  return v39 & 1;
}

uint64_t sub_10005E880( uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v27 = a4;
  uint64_t v29 = a3(0LL);
  uint64_t v7 = __chkstk_darwin(v29);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  unint64_t v12 = (char *)&v26 - v11;
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13 != *(void *)(a2 + 16))
  {
LABEL_15:
    char v22 = 0;
    return v22 & 1;
  }

  if (v13 && a1 != a2)
  {
    unint64_t v14 = (*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v28 = *(void *)(v10 + 72);
    uint64_t v15 = v13 - 1;
    while (1)
    {
      sub_10000404C(a1 + v14, (uint64_t)v12, a3);
      sub_10000404C(a2 + v14, (uint64_t)v9, a3);
      uint64_t v16 = *(int *)(v29 + 20);
      uint64_t v17 = *(void *)&v12[v16];
      uint64_t v18 = *(void *)&v9[v16];
      if (v17 != v18)
      {
        swift_retain(*(void *)&v12[v16]);
        swift_retain(v18);
        char v19 = v27(v17, v18);
        swift_release(v18);
        swift_release(v17);
        if ((v19 & 1) == 0) {
          break;
        }
      }

      uint64_t v20 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v21 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v20, v21);
      sub_100004090((uint64_t)v9, a3);
      sub_100004090((uint64_t)v12, a3);
      BOOL v24 = v15-- != 0;
      if ((v22 & 1) != 0)
      {
        v14 += v28;
        if (v24) {
          continue;
        }
      }

      return v22 & 1;
    }

    sub_100004090((uint64_t)v9, a3);
    sub_100004090((uint64_t)v12, a3);
    goto LABEL_15;
  }

  char v22 = 1;
  return v22 & 1;
}

uint64_t sub_10005EA64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v40 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (v11 && a1 != a2)
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      while (1)
      {
        sub_10000404C( a1 + v12,  (uint64_t)v10,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
        sub_10000404C( a2 + v12,  (uint64_t)v7,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
        uint64_t v15 = v4[5];
        int v16 = v10[v15];
        int v17 = v7[v15];
        if (v16 == 13)
        {
          if (v17 != 13) {
            goto LABEL_38;
          }
        }

        else if (v17 == 13 || v16 != v17)
        {
          goto LABEL_38;
        }

        uint64_t v19 = v4[6];
        uint64_t v20 = (double *)&v10[v19];
        char v21 = v10[v19 + 8];
        char v22 = (double *)&v7[v19];
        int v23 = v7[v19 + 8];
        if ((v21 & 1) != 0)
        {
          if (!v23) {
            goto LABEL_38;
          }
        }

        else
        {
          if (*v20 != *v22) {
            LOBYTE(v23) = 1;
          }
          if ((v23 & 1) != 0)
          {
LABEL_38:
            sub_100004090((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
            sub_100004090((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
            goto LABEL_39;
          }
        }

        uint64_t v24 = v4[7];
        uint64_t v25 = (float *)&v10[v24];
        char v26 = v10[v24 + 4];
        uint64_t v27 = (float *)&v7[v24];
        int v28 = v7[v24 + 4];
        if ((v26 & 1) != 0)
        {
          if (!v28) {
            goto LABEL_38;
          }
        }

        else
        {
          if (*v25 != *v27) {
            LOBYTE(v28) = 1;
          }
          if ((v28 & 1) != 0) {
            goto LABEL_38;
          }
        }

        uint64_t v29 = v4[8];
        uint64_t v30 = (float *)&v10[v29];
        char v31 = v10[v29 + 4];
        uint64_t v32 = (float *)&v7[v29];
        int v33 = v7[v29 + 4];
        if ((v31 & 1) != 0)
        {
          if (!v33) {
            goto LABEL_38;
          }
        }

        else
        {
          if (*v30 != *v32) {
            LOBYTE(v33) = 1;
          }
          if ((v33 & 1) != 0) {
            goto LABEL_38;
          }
        }

        uint64_t v34 = type metadata accessor for UnknownStorage(0LL);
        uint64_t v35 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
        char v36 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v7, v34, v35);
        sub_100004090((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
        sub_100004090((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
        BOOL v38 = v14-- != 0;
        if ((v36 & 1) != 0)
        {
          v12 += v13;
          if (v38) {
            continue;
          }
        }

        return v36 & 1;
      }
    }

    char v36 = 1;
  }

  else
  {
LABEL_39:
    char v36 = 0;
  }

  return v36 & 1;
}

uint64_t sub_10005ECBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }

    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_10000404C( a1 + v12,  (uint64_t)v10,  type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
        sub_10000404C( a2 + v12,  (uint64_t)v7,  type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
        char v15 = sub_100060728((uint64_t)v10, (uint64_t)v7);
        sub_100004090((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
        sub_100004090((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }

      while (v17);
    }
  }

  else
  {
    char v15 = 0;
  }

  return v15 & 1;
}

void sub_10005EDF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_10005EE58( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20, char a21, char a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37)
{
  uint64_t v42 = v39;
  __int16 v43 = v40;
  char v44 = BYTE2(v40);
  char v45 = BYTE3(v40);
  char v46 = BYTE4(v40);
  char v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x10005F03CLL);
  }

  uint64_t result = memcmp(v38, &v42, BYTE6(v40));
  *uint64_t v37 = (_DWORD)result == 0;
  return result;
}

unint64_t sub_10005F060(unint64_t result)
{
  if (result >= 5) {
    return 5LL;
  }
  return result;
}

uint64_t sub_10005F070(uint64_t a1)
{
  uint64_t result = 0LL;
  switch(a1)
  {
    case 0LL:
      return result;
    case 1LL:
      uint64_t result = 1LL;
      break;
    case 2LL:
      uint64_t result = 2LL;
      break;
    case 4LL:
      uint64_t result = 3LL;
      break;
    case 8LL:
      uint64_t result = 4LL;
      break;
    case 16LL:
      uint64_t result = 5LL;
      break;
    case 32LL:
      uint64_t result = 6LL;
      break;
    case 64LL:
      uint64_t result = 7LL;
      break;
    default:
      uint64_t result = 8LL;
      break;
  }

  return result;
}

unint64_t sub_10005F0D8(unint64_t result)
{
  if (result >= 0xD) {
    return 13LL;
  }
  return result;
}

unint64_t sub_10005F0E8(unint64_t result)
{
  if (result >= 6) {
    return 6LL;
  }
  return result;
}

unint64_t sub_10005F0F8(unint64_t result)
{
  if (result >= 7) {
    return 7LL;
  }
  return result;
}

unint64_t sub_10005F108(unint64_t result)
{
  if (result >= 4) {
    return 4LL;
  }
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379650,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379660,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379670,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvId(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379680,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379690,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003796A0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003796B0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003796C0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003796D0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003796E0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003796F0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379700,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379710,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SyncState(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379720,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_SyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379970,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_SyncState._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvTime(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379730,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379740,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379750,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379760,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379770,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379780,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379790,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003797A0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379980,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass);
}

uint64_t sub_10005F2F8(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100017F58(result, a2);
  }
  return result;
}

uint64_t sub_10005F30C(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100017F9C(result, a2);
  }
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Measurement(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003797B0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_Measurement);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379990,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_Measurement._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003797C0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003797D0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003797E0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Clock(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003797F0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379800,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MeasurementReport);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003799A0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379810,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379820,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379830,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379840,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379850,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_SvInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003799B0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_SvInfo._StorageClass);
}

uint64_t sub_10005F438(uint64_t a1)
{
  uint64_t v3 = sub_100003A0C(&qword_1003518A8);
  __chkstk_darwin(v3);
  uint64_t v93 = (uint64_t)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100003A0C(&qword_100351858);
  __chkstk_darwin(v5);
  uint64_t v75 = (uint64_t)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  uint64_t v74 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 1LL, 1LL, v8);
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds;
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  char v76 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource) = 7;
  uint64_t v10 = (uint64_t *)(v1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
  *(void *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions) = &_swiftEmptyArrayStorage;
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds;
  *(void *)uint64_t v11 = 0LL;
  *(_BYTE *)(v11 + 8) = 1;
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb;
  *(void *)uint64_t v12 = 0LL;
  *(_BYTE *)(v12 + 8) = 1;
  uint64_t v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  uint64_t v77 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  *(void *)uint64_t v13 = 0LL;
  *(_BYTE *)(v13 + 8) = 1;
  uint64_t v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  uint64_t v78 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  *(_DWORD *)uint64_t v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  uint64_t v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  uint64_t v79 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  *(_DWORD *)uint64_t v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  uint64_t v80 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1) = 5;
  uint64_t v81 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1) = 5;
  uint64_t v82 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1) = 5;
  uint64_t v83 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1) = 5;
  uint64_t v84 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1) = 5;
  int v16 = (uint64_t *)(v1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
  uint64_t *v16 = (uint64_t)&_swiftEmptyArrayStorage;
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  uint64_t v85 = v16;
  uint64_t v86 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  uint64_t v18 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v17, 1LL, 1LL, v18);
  char v87 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5) = 5;
  uint64_t v88 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5) = 5;
  double v89 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5) = 5;
  char v90 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5) = 5;
  uint64_t v91 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5) = 5;
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  uint64_t v92 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  *(void *)uint64_t v19 = 0LL;
  *(_BYTE *)(v19 + 8) = 1;
  double v94 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint) = 4;
  uint64_t v20 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id,  v138,  0LL,  0LL);
  uint64_t v21 = v75;
  sub_10000E6C0(v20, v75, &qword_100351858);
  uint64_t v22 = v74;
  swift_beginAccess(v74, v137, 33LL, 0LL);
  sub_10000E5D4(v21, v22, &qword_100351858);
  swift_endAccess(v137);
  int v23 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds,  v137,  0LL,  0LL);
  uint64_t v24 = *v23;
  LOBYTE(v23) = *((_BYTE *)v23 + 8);
  swift_beginAccess(v9, v136, 1LL, 0LL);
  *(void *)uint64_t v9 = v24;
  *(_BYTE *)(v9 + 8) = (_BYTE)v23;
  uint64_t v25 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource,  v135,  0LL,  0LL);
  LOBYTE(v25) = *v25;
  char v26 = v76;
  swift_beginAccess(v76, v134, 1LL, 0LL);
  _BYTE *v26 = (_BYTE)v25;
  uint64_t v27 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions,  v133,  0LL,  0LL);
  uint64_t v28 = *v27;
  swift_beginAccess(v10, v132, 1LL, 0LL);
  uint64_t v29 = *v10;
  *uint64_t v10 = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  uint64_t v30 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds,  &v131,  0LL,  0LL);
  uint64_t v31 = *v30;
  LOBYTE(v30) = *((_BYTE *)v30 + 8);
  swift_beginAccess(v11, &v130, 1LL, 0LL);
  *(void *)uint64_t v11 = v31;
  *(_BYTE *)(v11 + 8) = (_BYTE)v30;
  uint64_t v32 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb,  &v129,  0LL,  0LL);
  uint64_t v33 = *v32;
  LOBYTE(v32) = *((_BYTE *)v32 + 8);
  swift_beginAccess(v12, &v128, 1LL, 0LL);
  *(void *)uint64_t v12 = v33;
  *(_BYTE *)(v12 + 8) = (_BYTE)v32;
  uint64_t v34 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec,  &v127,  0LL,  0LL);
  uint64_t v35 = *v34;
  LOBYTE(v34) = *((_BYTE *)v34 + 8);
  uint64_t v36 = v77;
  swift_beginAccess(v77, &v126, 1LL, 0LL);
  *(void *)uint64_t v36 = v35;
  *(_BYTE *)(v36 + 8) = (_BYTE)v34;
  uint64_t v37 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM,  &v125,  0LL,  0LL);
  LODWORD(v35) = *(_DWORD *)v37;
  LOBYTE(v37) = *(_BYTE *)(v37 + 4);
  uint64_t v38 = v78;
  swift_beginAccess(v78, &v124, 1LL, 0LL);
  *(_DWORD *)uint64_t v38 = v35;
  *(_BYTE *)(v38 + 4) = v37;
  uint64_t v39 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds,  &v123,  0LL,  0LL);
  LODWORD(v35) = *(_DWORD *)v39;
  LOBYTE(v39) = *(_BYTE *)(v39 + 4);
  uint64_t v40 = v79;
  swift_beginAccess(v79, &v122, 1LL, 0LL);
  *(_DWORD *)uint64_t v40 = v35;
  *(_BYTE *)(v40 + 4) = v39;
  BOOL v41 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1,  &v121,  0LL,  0LL);
  LOBYTE(v41) = *v41;
  uint64_t v42 = v80;
  swift_beginAccess(v80, &v120, 1LL, 0LL);
  *uint64_t v42 = (_BYTE)v41;
  __int16 v43 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1,  &v119,  0LL,  0LL);
  LOBYTE(v43) = *v43;
  char v44 = v81;
  swift_beginAccess(v81, &v118, 1LL, 0LL);
  *char v44 = (_BYTE)v43;
  char v45 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1,  &v117,  0LL,  0LL);
  LOBYTE(v45) = *v45;
  char v46 = v82;
  swift_beginAccess(v82, &v116, 1LL, 0LL);
  *char v46 = (_BYTE)v45;
  char v47 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1,  &v115,  0LL,  0LL);
  LOBYTE(v47) = *v47;
  char v48 = v83;
  swift_beginAccess(v83, &v114, 1LL, 0LL);
  *char v48 = (_BYTE)v47;
  uint64_t v49 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1,  &v113,  0LL,  0LL);
  LOBYTE(v49) = *v49;
  int v50 = v84;
  swift_beginAccess(v84, &v112, 1LL, 0LL);
  *int v50 = (_BYTE)v49;
  uint64_t v51 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections,  &v111,  0LL,  0LL);
  uint64_t v52 = *v51;
  char v53 = v85;
  swift_beginAccess(v85, &v110, 1LL, 0LL);
  uint64_t v54 = *v53;
  *char v53 = v52;
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRelease(v54);
  uint64_t v55 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit,  &v109,  0LL,  0LL);
  uint64_t v56 = v93;
  sub_10000E6C0(v55, v93, &qword_1003518A8);
  uint64_t v57 = v86;
  swift_beginAccess(v86, v108, 33LL, 0LL);
  sub_10000E5D4(v56, v57, &qword_1003518A8);
  swift_endAccess(v108);
  uint64_t v58 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5,  v108,  0LL,  0LL);
  LOBYTE(v58) = *v58;
  uint64_t v59 = v87;
  swift_beginAccess(v87, &v107, 1LL, 0LL);
  *uint64_t v59 = (_BYTE)v58;
  uint64_t v60 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5,  &v106,  0LL,  0LL);
  LOBYTE(v60) = *v60;
  char v61 = v88;
  swift_beginAccess(v88, &v105, 1LL, 0LL);
  *char v61 = (_BYTE)v60;
  uint64_t v62 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5,  &v104,  0LL,  0LL);
  LOBYTE(v62) = *v62;
  uint64_t v63 = v89;
  swift_beginAccess(v89, &v103, 1LL, 0LL);
  *uint64_t v63 = (_BYTE)v62;
  uint64_t v64 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5,  &v102,  0LL,  0LL);
  LOBYTE(v64) = *v64;
  uint64_t v65 = v90;
  swift_beginAccess(v90, &v101, 1LL, 0LL);
  *uint64_t v65 = (_BYTE)v64;
  char v66 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5,  &v100,  0LL,  0LL);
  LOBYTE(v66) = *v66;
  uint64_t v67 = v91;
  swift_beginAccess(v91, &v99, 1LL, 0LL);
  *uint64_t v67 = (_BYTE)v66;
  uint64_t v68 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec,  &v98,  0LL,  0LL);
  uint64_t v69 = *v68;
  LOBYTE(v68) = *((_BYTE *)v68 + 8);
  uint64_t v70 = v92;
  swift_beginAccess(v92, &v97, 1LL, 0LL);
  *(void *)uint64_t v70 = v69;
  *(_BYTE *)(v70 + 8) = (_BYTE)v68;
  uint64_t v71 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  swift_beginAccess(v71, &v96, 0LL, 0LL);
  LOBYTE(v71) = *v71;
  uint64_t v72 = v94;
  swift_beginAccess(v94, &v95, 1LL, 0LL);
  *uint64_t v72 = (_BYTE)v71;
  return v1;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379860,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379870,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379880,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379890,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003798A0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003798B0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003798C0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003798D0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003798E0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003799C0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003798F0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379900,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379910,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_TimeConversionInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003799D0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379920,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379930,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379940,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379950,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100379960,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass( uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003799E0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass);
}

uint64_t sub_10005FF20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_10005EDF8((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_10005FFF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }

    v11 += a1 - result;
  }

  BOOL v12 = __OFSUB__(a2, a1);
  uint64_t v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v14 = __DataStorage._length.getter();
  if (v14 >= v13) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v14;
  }
  uint64_t v16 = v11 + v15;
  if (v11) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0LL;
  }
  sub_10005EDF8(v11, v17, a4, a5);
  if (!v5) {
    char v18 = v19;
  }
  return v18 & 1;
}

void sub_1000600A8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

uint64_t sub_1000600F4()
{
  return ((uint64_t (*)(void))((char *)&loc_100060128 + *((int *)qword_100060300 + (v0 >> 62))))();
}

uint64_t sub_100060138@<X0>(int a1@<W8>)
{
  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1) {
      __asm { BR              X10 }
    }

    char v3 = 1;
  }

  else
  {
    char v3 = 0;
  }

  return v3 & 1;
}

uint64_t sub_100060320(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  char v10 = (char *)&v33 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0LL);
  uint64_t v12 = v11[5];
  uint64_t v13 = (double *)(a1 + v12);
  char v14 = *(_BYTE *)(a1 + v12 + 8);
  uint64_t v15 = (double *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16) {
      goto LABEL_24;
    }
  }

  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if ((v16 & 1) != 0) {
      goto LABEL_24;
    }
  }

  uint64_t v17 = v11[6];
  char v18 = (double *)(a1 + v17);
  char v19 = *(_BYTE *)(a1 + v17 + 8);
  uint64_t v20 = (double *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21) {
      goto LABEL_24;
    }
  }

  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if ((v21 & 1) != 0) {
      goto LABEL_24;
    }
  }

  uint64_t v22 = v11[7];
  int v23 = *(unsigned __int8 *)(a1 + v22);
  int v24 = *(unsigned __int8 *)(a2 + v22);
  if (v23 == 2)
  {
    if (v24 != 2) {
      goto LABEL_24;
    }
  }

  else if (v24 == 2 || ((((v24 & 1) == 0) ^ v23) & 1) == 0)
  {
    goto LABEL_24;
  }

  uint64_t v25 = v11[8];
  int v26 = *(unsigned __int8 *)(a1 + v25);
  int v27 = *(unsigned __int8 *)(a2 + v25);
  if (v26 == 2)
  {
    if (v27 == 2) {
      goto LABEL_23;
    }
LABEL_24:
    char v30 = 0;
    return v30 & 1;
  }

  if (v27 == 2 || ((((v27 & 1) == 0) ^ v26) & 1) == 0) {
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v28(v10, a1, v4);
  v28(v8, a2, v4);
  uint64_t v29 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v30 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v29);
  uint64_t v31 = *(void (**)(char *, uint64_t))(v5 + 8);
  v31(v8, v4);
  v31(v10, v4);
  return v30 & 1;
}

uint64_t sub_100060510(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  char v10 = (char *)&v42 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0LL);
  uint64_t v12 = v11[5];
  uint64_t v13 = (void *)(a1 + v12);
  char v14 = *(_BYTE *)(a1 + v12 + 8);
  uint64_t v15 = (void *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16) {
      goto LABEL_27;
    }
  }

  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if ((v16 & 1) != 0) {
      goto LABEL_27;
    }
  }

  uint64_t v17 = v11[6];
  char v18 = (float *)(a1 + v17);
  char v19 = *(_BYTE *)(a1 + v17 + 4);
  uint64_t v20 = (float *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 4);
  if ((v19 & 1) != 0)
  {
    if (!v21) {
      goto LABEL_27;
    }
  }

  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if ((v21 & 1) != 0) {
      goto LABEL_27;
    }
  }

  uint64_t v22 = v11[7];
  int v23 = (float *)(a1 + v22);
  char v24 = *(_BYTE *)(a1 + v22 + 4);
  uint64_t v25 = (float *)(a2 + v22);
  int v26 = *(unsigned __int8 *)(a2 + v22 + 4);
  if ((v24 & 1) != 0)
  {
    if (!v26) {
      goto LABEL_27;
    }
  }

  else
  {
    if (*v23 != *v25) {
      LOBYTE(v26) = 1;
    }
    if ((v26 & 1) != 0) {
      goto LABEL_27;
    }
  }

  uint64_t v27 = v11[8];
  uint64_t v28 = (double *)(a1 + v27);
  char v29 = *(_BYTE *)(a1 + v27 + 8);
  char v30 = (double *)(a2 + v27);
  int v31 = *(unsigned __int8 *)(a2 + v27 + 8);
  if ((v29 & 1) == 0)
  {
    if (*v28 != *v30) {
      LOBYTE(v31) = 1;
    }
    if ((v31 & 1) != 0) {
      goto LABEL_27;
    }
LABEL_25:
    uint64_t v32 = v11[9];
    uint64_t v33 = (float *)(a1 + v32);
    char v34 = *(_BYTE *)(a1 + v32 + 4);
    uint64_t v35 = (float *)(a2 + v32);
    int v36 = *(unsigned __int8 *)(a2 + v32 + 4);
    if ((v34 & 1) != 0)
    {
      if (!v36) {
        goto LABEL_27;
      }
    }

    else
    {
      if (*v33 != *v35) {
        LOBYTE(v36) = 1;
      }
      if ((v36 & 1) != 0) {
        goto LABEL_27;
      }
    }

    uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v39(v10, a1, v4);
    v39(v8, a2, v4);
    uint64_t v40 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v37 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v40);
    BOOL v41 = *(void (**)(char *, uint64_t))(v5 + 8);
    v41(v8, v4);
    v41(v10, v4);
    return v37 & 1;
  }

  if (v31) {
    goto LABEL_25;
  }
LABEL_27:
  char v37 = 0;
  return v37 & 1;
}

uint64_t sub_100060728(uint64_t a1, uint64_t a2)
{
  uint64_t v75 = a1;
  uint64_t v76 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v66 = *(void *)(v2 - 8);
  uint64_t v67 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v65 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v64 = (char *)&v63 - v5;
  uint64_t v74 = type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0LL);
  uint64_t v69 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v63 = (uint64_t)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v68 = sub_100003A0C(&qword_100354FB8);
  __chkstk_darwin(v68);
  uint64_t v70 = (uint64_t)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100003A0C(&qword_100351900);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v73 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v71 = (char *)&v63 - v12;
  __chkstk_darwin(v11);
  uint64_t v72 = (char *)&v63 - v13;
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100003A0C(&qword_100354FA8);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100003A0C(&qword_100351858);
  uint64_t v22 = __chkstk_darwin(v21);
  char v24 = (char *)&v63 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v63 - v26;
  __chkstk_darwin(v25);
  char v29 = (char *)&v63 - v28;
  char v30 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0LL);
  sub_10000E6C0(v75 + v30[5], (uint64_t)v29, &qword_100351858);
  sub_10000E6C0(v76 + v30[5], (uint64_t)v27, &qword_100351858);
  uint64_t v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  sub_10000E6C0((uint64_t)v29, (uint64_t)v20, &qword_100351858);
  sub_10000E6C0((uint64_t)v27, v31, &qword_100351858);
  uint64_t v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1LL, v14) == 1)
  {
    sub_100015764((uint64_t)v27, &qword_100351858);
    sub_100015764((uint64_t)v29, &qword_100351858);
    if (v32(v31, 1LL, v14) == 1)
    {
      sub_100015764((uint64_t)v20, &qword_100351858);
      goto LABEL_11;
    }

uint64_t sub_100060E08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v42 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0LL);
  uint64_t v12 = v11[5];
  uint64_t v13 = (double *)(a1 + v12);
  char v14 = *(_BYTE *)(a1 + v12 + 8);
  uint64_t v15 = (double *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16) {
      goto LABEL_27;
    }
  }

  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if ((v16 & 1) != 0) {
      goto LABEL_27;
    }
  }

  uint64_t v17 = v11[6];
  uint64_t v18 = (double *)(a1 + v17);
  char v19 = *(_BYTE *)(a1 + v17 + 8);
  uint64_t v20 = (double *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21) {
      goto LABEL_27;
    }
  }

  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if ((v21 & 1) != 0) {
      goto LABEL_27;
    }
  }

  uint64_t v22 = v11[7];
  uint64_t v23 = (double *)(a1 + v22);
  char v24 = *(_BYTE *)(a1 + v22 + 8);
  uint64_t v25 = (double *)(a2 + v22);
  int v26 = *(unsigned __int8 *)(a2 + v22 + 8);
  if ((v24 & 1) != 0)
  {
    if (!v26) {
      goto LABEL_27;
    }
  }

  else
  {
    if (*v23 != *v25) {
      LOBYTE(v26) = 1;
    }
    if ((v26 & 1) != 0) {
      goto LABEL_27;
    }
  }

  uint64_t v27 = v11[8];
  uint64_t v28 = (double *)(a1 + v27);
  char v29 = *(_BYTE *)(a1 + v27 + 8);
  char v30 = (double *)(a2 + v27);
  int v31 = *(unsigned __int8 *)(a2 + v27 + 8);
  if ((v29 & 1) == 0)
  {
    if (*v28 != *v30) {
      LOBYTE(v31) = 1;
    }
    if ((v31 & 1) != 0) {
      goto LABEL_27;
    }
LABEL_25:
    uint64_t v32 = v11[9];
    uint64_t v33 = (double *)(a1 + v32);
    char v34 = *(_BYTE *)(a1 + v32 + 8);
    char v35 = (double *)(a2 + v32);
    int v36 = *(unsigned __int8 *)(a2 + v32 + 8);
    if ((v34 & 1) != 0)
    {
      if (!v36) {
        goto LABEL_27;
      }
    }

    else
    {
      if (*v33 != *v35) {
        LOBYTE(v36) = 1;
      }
      if ((v36 & 1) != 0) {
        goto LABEL_27;
      }
    }

    uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v39(v10, a1, v4);
    v39(v8, a2, v4);
    uint64_t v40 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v37 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v40);
    int v41 = *(void (**)(char *, uint64_t))(v5 + 8);
    v41(v8, v4);
    v41(v10, v4);
    return v37 & 1;
  }

  if (v31) {
    goto LABEL_25;
  }
LABEL_27:
  char v37 = 0;
  return v37 & 1;
}

uint64_t sub_100061020(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v62 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0LL);
  uint64_t v12 = v11[5];
  uint64_t v13 = (void *)(a1 + v12);
  char v14 = *(_BYTE *)(a1 + v12 + 8);
  uint64_t v15 = (void *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16) {
      goto LABEL_51;
    }
  }

  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if ((v16 & 1) != 0) {
      goto LABEL_51;
    }
  }

  uint64_t v17 = v11[6];
  uint64_t v18 = (float *)(a1 + v17);
  char v19 = *(_BYTE *)(a1 + v17 + 4);
  uint64_t v20 = (float *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 4);
  if ((v19 & 1) != 0)
  {
    if (!v21) {
      goto LABEL_51;
    }
  }

  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if ((v21 & 1) != 0) {
      goto LABEL_51;
    }
  }

  uint64_t v22 = v11[7];
  uint64_t v23 = (float *)(a1 + v22);
  char v24 = *(_BYTE *)(a1 + v22 + 4);
  uint64_t v25 = (float *)(a2 + v22);
  int v26 = *(unsigned __int8 *)(a2 + v22 + 4);
  if ((v24 & 1) != 0)
  {
    if (!v26) {
      goto LABEL_51;
    }
  }

  else
  {
    if (*v23 != *v25) {
      LOBYTE(v26) = 1;
    }
    if ((v26 & 1) != 0) {
      goto LABEL_51;
    }
  }

  uint64_t v27 = v11[8];
  uint64_t v28 = (float *)(a1 + v27);
  char v29 = *(_BYTE *)(a1 + v27 + 4);
  char v30 = (float *)(a2 + v27);
  int v31 = *(unsigned __int8 *)(a2 + v27 + 4);
  if ((v29 & 1) != 0)
  {
    if (!v31) {
      goto LABEL_51;
    }
  }

  else
  {
    if (*v28 != *v30) {
      LOBYTE(v31) = 1;
    }
    if ((v31 & 1) != 0) {
      goto LABEL_51;
    }
  }

  uint64_t v32 = v11[9];
  uint64_t v33 = (float *)(a1 + v32);
  char v34 = *(_BYTE *)(a1 + v32 + 4);
  char v35 = (float *)(a2 + v32);
  int v36 = *(unsigned __int8 *)(a2 + v32 + 4);
  if ((v34 & 1) != 0)
  {
    if (!v36) {
      goto LABEL_51;
    }
  }

  else
  {
    if (*v33 != *v35) {
      LOBYTE(v36) = 1;
    }
    if ((v36 & 1) != 0) {
      goto LABEL_51;
    }
  }

  uint64_t v37 = v11[10];
  uint64_t v38 = (float *)(a1 + v37);
  char v39 = *(_BYTE *)(a1 + v37 + 4);
  uint64_t v40 = (float *)(a2 + v37);
  int v41 = *(unsigned __int8 *)(a2 + v37 + 4);
  if ((v39 & 1) != 0)
  {
    if (!v41) {
      goto LABEL_51;
    }
  }

  else
  {
    if (*v38 != *v40) {
      LOBYTE(v41) = 1;
    }
    if ((v41 & 1) != 0) {
      goto LABEL_51;
    }
  }

  uint64_t v42 = v11[11];
  uint64_t v43 = (float *)(a1 + v42);
  char v44 = *(_BYTE *)(a1 + v42 + 4);
  uint64_t v45 = (float *)(a2 + v42);
  int v46 = *(unsigned __int8 *)(a2 + v42 + 4);
  if ((v44 & 1) != 0)
  {
    if (!v46) {
      goto LABEL_51;
    }
  }

  else
  {
    if (*v43 != *v45) {
      LOBYTE(v46) = 1;
    }
    if ((v46 & 1) != 0) {
      goto LABEL_51;
    }
  }

  uint64_t v47 = v11[12];
  int v48 = (float *)(a1 + v47);
  char v49 = *(_BYTE *)(a1 + v47 + 4);
  uint64_t v50 = (float *)(a2 + v47);
  int v51 = *(unsigned __int8 *)(a2 + v47 + 4);
  if ((v49 & 1) == 0)
  {
    if (*v48 != *v50) {
      LOBYTE(v51) = 1;
    }
    if ((v51 & 1) != 0) {
      goto LABEL_51;
    }
LABEL_49:
    uint64_t v52 = v11[13];
    char v53 = (float *)(a1 + v52);
    char v54 = *(_BYTE *)(a1 + v52 + 4);
    char v55 = (float *)(a2 + v52);
    int v56 = *(unsigned __int8 *)(a2 + v52 + 4);
    if ((v54 & 1) != 0)
    {
      if (!v56) {
        goto LABEL_51;
      }
    }

    else
    {
      if (*v53 != *v55) {
        LOBYTE(v56) = 1;
      }
      if ((v56 & 1) != 0) {
        goto LABEL_51;
      }
    }

    uint64_t v59 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v59(v10, a1, v4);
    v59(v8, a2, v4);
    uint64_t v60 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v57 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v60);
    uint64_t v61 = *(void (**)(char *, uint64_t))(v5 + 8);
    v61(v8, v4);
    v61(v10, v4);
    return v57 & 1;
  }

  if (v51) {
    goto LABEL_49;
  }
LABEL_51:
  char v57 = 0;
  return v57 & 1;
}

uint64_t sub_100061308(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v36 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0LL);
  uint64_t v12 = v11[5];
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 13)
  {
    if (v14 != 13) {
      goto LABEL_23;
    }
  }

  else if (v14 == 13 || v13 != v14)
  {
    goto LABEL_23;
  }

  uint64_t v16 = v11[6];
  uint64_t v17 = (double *)(a1 + v16);
  char v18 = *(_BYTE *)(a1 + v16 + 8);
  char v19 = (double *)(a2 + v16);
  int v20 = *(unsigned __int8 *)(a2 + v16 + 8);
  if ((v18 & 1) != 0)
  {
    if (!v20) {
      goto LABEL_23;
    }
  }

  else
  {
    if (*v17 != *v19) {
      LOBYTE(v20) = 1;
    }
    if ((v20 & 1) != 0) {
      goto LABEL_23;
    }
  }

  uint64_t v21 = v11[7];
  uint64_t v22 = (float *)(a1 + v21);
  char v23 = *(_BYTE *)(a1 + v21 + 4);
  char v24 = (float *)(a2 + v21);
  int v25 = *(unsigned __int8 *)(a2 + v21 + 4);
  if ((v23 & 1) == 0)
  {
    if (*v22 != *v24) {
      LOBYTE(v25) = 1;
    }
    if ((v25 & 1) != 0) {
      goto LABEL_23;
    }
LABEL_21:
    uint64_t v26 = v11[8];
    uint64_t v27 = (float *)(a1 + v26);
    char v28 = *(_BYTE *)(a1 + v26 + 4);
    char v29 = (float *)(a2 + v26);
    int v30 = *(unsigned __int8 *)(a2 + v26 + 4);
    if ((v28 & 1) != 0)
    {
      if (!v30) {
        goto LABEL_23;
      }
    }

    else
    {
      if (*v27 != *v29) {
        LOBYTE(v30) = 1;
      }
      if ((v30 & 1) != 0) {
        goto LABEL_23;
      }
    }

    uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v33(v10, a1, v4);
    v33(v8, a2, v4);
    uint64_t v34 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v31 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v34);
    char v35 = *(void (**)(char *, uint64_t))(v5 + 8);
    v35(v8, v4);
    v35(v10, v4);
    return v31 & 1;
  }

  if (v25) {
    goto LABEL_21;
  }
LABEL_23:
  char v31 = 0;
  return v31 & 1;
}

uint64_t sub_1000614E4(uint64_t a1, uint64_t a2)
{
  uint64_t v77 = a1;
  uint64_t v78 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v66 = *(void *)(v2 - 8);
  uint64_t v67 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v65 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v64 = (char *)&v63 - v5;
  uint64_t v74 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0LL);
  uint64_t v71 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v68 = (uint64_t)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v70 = sub_100003A0C(&qword_100355030);
  __chkstk_darwin(v70);
  uint64_t v75 = (uint64_t)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100003A0C(&qword_100351840);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v69 = (uint64_t)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v72 = (uint64_t)&v63 - v12;
  __chkstk_darwin(v11);
  uint64_t v73 = (uint64_t)&v63 - v13;
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100003A0C(&qword_100355038);
  __chkstk_darwin(v18);
  int v20 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100003A0C(&qword_100351838);
  uint64_t v22 = __chkstk_darwin(v21);
  char v24 = (char *)&v63 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v63 - v26;
  __chkstk_darwin(v25);
  char v29 = (char *)&v63 - v28;
  uint64_t v30 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0LL);
  sub_10000E6C0(v77 + *(int *)(v30 + 20), (uint64_t)v29, &qword_100351838);
  uint64_t v76 = v30;
  sub_10000E6C0(v78 + *(int *)(v30 + 20), (uint64_t)v27, &qword_100351838);
  uint64_t v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  sub_10000E6C0((uint64_t)v29, (uint64_t)v20, &qword_100351838);
  sub_10000E6C0((uint64_t)v27, v31, &qword_100351838);
  uint64_t v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1LL, v14) == 1)
  {
    sub_100015764((uint64_t)v27, &qword_100351838);
    sub_100015764((uint64_t)v29, &qword_100351838);
    if (v32(v31, 1LL, v14) == 1)
    {
      sub_100015764((uint64_t)v20, &qword_100351838);
      goto LABEL_8;
    }

LABEL_15:
  char v46 = 0;
  return v46 & 1;
}

  uint64_t v50 = 0;
  return v50 & 1;
}

        uint64_t v59 = 0;
        return v59 & 1;
      }
    }

    else
    {
      sub_10000E6C0(v78, v56, &qword_100355620);
      if (v79(v77, 1LL, v55) != 1)
      {
        uint64_t v80 = v103;
        sub_100003E68(v77, v103, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
        uint64_t v81 = sub_100117D9C(v56, v80);
        sub_100004090(v80, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
        sub_100015764(v109, &qword_100355620);
        sub_100015764(v107, &qword_100355620);
        sub_100004090(v56, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
        sub_100015764(v78, &qword_100355620);
        if ((v81 & 1) == 0) {
          goto LABEL_15;
        }
        goto LABEL_41;
      }

      sub_100015764(v109, &qword_100355620);
      sub_100015764(v107, &qword_100355620);
      sub_100004090(v56, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
    }

    uint64_t v42 = &qword_10035C468;
    uint64_t v43 = v78;
LABEL_14:
    sub_100015764(v43, v42);
    goto LABEL_15;
  }

  return v59 & 1;
}

  char v46 = 0;
  return v46 & 1;
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_100061BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v32 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0LL);
  uint64_t v12 = v11[5];
  uint64_t v13 = (float *)(a1 + v12);
  char v14 = *(_BYTE *)(a1 + v12 + 4);
  uint64_t v15 = (float *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 4);
  if ((v14 & 1) != 0)
  {
    if (!v16) {
      goto LABEL_15;
    }
  }

  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if ((v16 & 1) != 0) {
      goto LABEL_15;
    }
  }

  uint64_t v17 = v11[6];
  uint64_t v18 = (float *)(a1 + v17);
  char v19 = *(_BYTE *)(a1 + v17 + 4);
  int v20 = (float *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 4);
  if ((v19 & 1) == 0)
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if ((v21 & 1) != 0) {
      goto LABEL_15;
    }
LABEL_13:
    uint64_t v22 = v11[7];
    uint64_t v23 = (float *)(a1 + v22);
    char v24 = *(_BYTE *)(a1 + v22 + 4);
    uint64_t v25 = (float *)(a2 + v22);
    int v26 = *(unsigned __int8 *)(a2 + v22 + 4);
    if ((v24 & 1) != 0)
    {
      if (!v26) {
        goto LABEL_15;
      }
    }

    else
    {
      if (*v23 != *v25) {
        LOBYTE(v26) = 1;
      }
      if ((v26 & 1) != 0) {
        goto LABEL_15;
      }
    }

    char v29 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v29(v10, a1, v4);
    v29(v8, a2, v4);
    uint64_t v30 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v27 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v30);
    uint64_t v31 = *(void (**)(char *, uint64_t))(v5 + 8);
    v31(v8, v4);
    v31(v10, v4);
    return v27 & 1;
  }

  if (v21) {
    goto LABEL_13;
  }
LABEL_15:
  char v27 = 0;
  return v27 & 1;
}

uint64_t sub_100061D54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v37 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0LL);
  uint64_t v12 = v11[5];
  uint64_t v13 = (void *)(a1 + v12);
  char v14 = *(_BYTE *)(a1 + v12 + 8);
  uint64_t v15 = (void *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16) {
      goto LABEL_21;
    }
  }

  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if ((v16 & 1) != 0) {
      goto LABEL_21;
    }
  }

  uint64_t v17 = v11[6];
  uint64_t v18 = (double *)(a1 + v17);
  char v19 = *(_BYTE *)(a1 + v17 + 8);
  int v20 = (double *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21) {
      goto LABEL_21;
    }
  }

  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if ((v21 & 1) != 0) {
      goto LABEL_21;
    }
  }

  uint64_t v22 = v11[7];
  uint64_t v23 = (double *)(a1 + v22);
  char v24 = *(_BYTE *)(a1 + v22 + 8);
  uint64_t v25 = (double *)(a2 + v22);
  int v26 = *(unsigned __int8 *)(a2 + v22 + 8);
  if ((v24 & 1) == 0)
  {
    if (*v23 != *v25) {
      LOBYTE(v26) = 1;
    }
    if ((v26 & 1) != 0) {
      goto LABEL_21;
    }
LABEL_19:
    uint64_t v27 = v11[8];
    uint64_t v28 = (double *)(a1 + v27);
    char v29 = *(_BYTE *)(a1 + v27 + 8);
    uint64_t v30 = (double *)(a2 + v27);
    int v31 = *(unsigned __int8 *)(a2 + v27 + 8);
    if ((v29 & 1) != 0)
    {
      if (!v31) {
        goto LABEL_21;
      }
    }

    else
    {
      if (*v28 != *v30) {
        LOBYTE(v31) = 1;
      }
      if ((v31 & 1) != 0) {
        goto LABEL_21;
      }
    }

    uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v34(v10, a1, v4);
    v34(v8, a2, v4);
    uint64_t v35 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v32 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v35);
    uint64_t v36 = *(void (**)(char *, uint64_t))(v5 + 8);
    v36(v8, v4);
    v36(v10, v4);
    return v32 & 1;
  }

  if (v26) {
    goto LABEL_19;
  }
LABEL_21:
  char v32 = 0;
  return v32 & 1;
}

uint64_t sub_100061F38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v47 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0LL);
  uint64_t v12 = v11[5];
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 2)
  {
    if (v14 != 2) {
      goto LABEL_52;
    }
  }

  else if (v14 == 2 || ((((v14 & 1) == 0) ^ v13) & 1) == 0)
  {
    goto LABEL_52;
  }

  uint64_t v15 = v11[6];
  int v16 = *(unsigned __int8 *)(a1 + v15);
  int v17 = *(unsigned __int8 *)(a2 + v15);
  if (v16 == 2)
  {
    if (v17 != 2) {
      goto LABEL_52;
    }
  }

  else if (v17 == 2 || ((((v17 & 1) == 0) ^ v16) & 1) == 0)
  {
    goto LABEL_52;
  }

  uint64_t v18 = v11[7];
  int v19 = *(unsigned __int8 *)(a1 + v18);
  int v20 = *(unsigned __int8 *)(a2 + v18);
  if (v19 == 2)
  {
    if (v20 != 2) {
      goto LABEL_52;
    }
  }

  else if (v20 == 2 || ((((v20 & 1) == 0) ^ v19) & 1) == 0)
  {
    goto LABEL_52;
  }

  uint64_t v21 = v11[8];
  int v22 = *(unsigned __int8 *)(a1 + v21);
  int v23 = *(unsigned __int8 *)(a2 + v21);
  if (v22 == 2)
  {
    if (v23 != 2) {
      goto LABEL_52;
    }
  }

  else if (v23 == 2 || ((((v23 & 1) == 0) ^ v22) & 1) == 0)
  {
    goto LABEL_52;
  }

  uint64_t v24 = v11[9];
  int v25 = *(unsigned __int8 *)(a1 + v24);
  int v26 = *(unsigned __int8 *)(a2 + v24);
  if (v25 == 2)
  {
    if (v26 != 2) {
      goto LABEL_52;
    }
  }

  else if (v26 == 2 || ((((v26 & 1) == 0) ^ v25) & 1) == 0)
  {
    goto LABEL_52;
  }

  uint64_t v27 = v11[10];
  int v28 = *(unsigned __int8 *)(a1 + v27);
  int v29 = *(unsigned __int8 *)(a2 + v27);
  if (v28 == 2)
  {
    if (v29 != 2) {
      goto LABEL_52;
    }
  }

  else if (v29 == 2 || ((((v29 & 1) == 0) ^ v28) & 1) == 0)
  {
    goto LABEL_52;
  }

  uint64_t v30 = v11[11];
  int v31 = *(unsigned __int8 *)(a1 + v30);
  int v32 = *(unsigned __int8 *)(a2 + v30);
  if (v31 == 2)
  {
    if (v32 != 2) {
      goto LABEL_52;
    }
  }

  else if (v32 == 2 || ((((v32 & 1) == 0) ^ v31) & 1) == 0)
  {
    goto LABEL_52;
  }

  uint64_t v33 = v11[12];
  int v34 = *(unsigned __int8 *)(a1 + v33);
  int v35 = *(unsigned __int8 *)(a2 + v33);
  if (v34 == 2)
  {
    if (v35 != 2) {
      goto LABEL_52;
    }
  }

  else if (v35 == 2 || ((((v35 & 1) == 0) ^ v34) & 1) == 0)
  {
    goto LABEL_52;
  }

  uint64_t v36 = v11[13];
  int v37 = *(unsigned __int8 *)(a1 + v36);
  int v38 = *(unsigned __int8 *)(a2 + v36);
  if (v37 == 2)
  {
    if (v38 != 2) {
      goto LABEL_52;
    }
  }

  else if (v38 == 2 || ((((v38 & 1) == 0) ^ v37) & 1) == 0)
  {
    goto LABEL_52;
  }

  uint64_t v39 = v11[14];
  int v40 = *(unsigned __int8 *)(a1 + v39);
  int v41 = *(unsigned __int8 *)(a2 + v39);
  if (v40 == 2)
  {
    if (v41 == 2) {
      goto LABEL_51;
    }
LABEL_52:
    char v44 = 0;
    return v44 & 1;
  }

  if (v41 == 2 || ((((v41 & 1) == 0) ^ v40) & 1) == 0) {
    goto LABEL_52;
  }
LABEL_51:
  uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v42(v10, a1, v4);
  v42(v8, a2, v4);
  uint64_t v43 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v44 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v43);
  uint64_t v45 = *(void (**)(char *, uint64_t))(v5 + 8);
  v45(v8, v4);
  v45(v10, v4);
  return v44 & 1;
}

uint64_t sub_100062280(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v39 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0LL);
  uint64_t v12 = v11[5];
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 13)
  {
    if (v14 != 13) {
      goto LABEL_29;
    }
  }

  else if (v14 == 13 || v13 != v14)
  {
    goto LABEL_29;
  }

  uint64_t v16 = v11[6];
  int v17 = (double *)(a1 + v16);
  char v18 = *(_BYTE *)(a1 + v16 + 8);
  int v19 = (double *)(a2 + v16);
  int v20 = *(unsigned __int8 *)(a2 + v16 + 8);
  if ((v18 & 1) != 0)
  {
    if (!v20) {
      goto LABEL_29;
    }
  }

  else
  {
    if (*v17 != *v19) {
      LOBYTE(v20) = 1;
    }
    if ((v20 & 1) != 0) {
      goto LABEL_29;
    }
  }

  uint64_t v21 = v11[7];
  int v22 = (double *)(a1 + v21);
  char v23 = *(_BYTE *)(a1 + v21 + 8);
  uint64_t v24 = (double *)(a2 + v21);
  int v25 = *(unsigned __int8 *)(a2 + v21 + 8);
  if ((v23 & 1) != 0)
  {
    if (!v25) {
      goto LABEL_29;
    }
  }

  else
  {
    if (*v22 != *v24) {
      LOBYTE(v25) = 1;
    }
    if ((v25 & 1) != 0) {
      goto LABEL_29;
    }
  }

  uint64_t v26 = v11[8];
  uint64_t v27 = (double *)(a1 + v26);
  char v28 = *(_BYTE *)(a1 + v26 + 8);
  int v29 = (double *)(a2 + v26);
  int v30 = *(unsigned __int8 *)(a2 + v26 + 8);
  if ((v28 & 1) != 0)
  {
    if (!v30) {
      goto LABEL_29;
    }
  }

  else
  {
    if (*v27 != *v29) {
      LOBYTE(v30) = 1;
    }
    if ((v30 & 1) != 0) {
      goto LABEL_29;
    }
  }

  uint64_t v31 = v11[9];
  int v32 = *(unsigned __int8 *)(a1 + v31);
  int v33 = *(unsigned __int8 *)(a2 + v31);
  if (v32 == 3)
  {
    if (v33 != 3)
    {
LABEL_29:
      char v34 = 0;
      return v34 & 1;
    }

LABEL_33:
    uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v36(v10, a1, v4);
    v36(v8, a2, v4);
    uint64_t v37 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v34 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v37);
    int v38 = *(void (**)(char *, uint64_t))(v5 + 8);
    v38(v8, v4);
    v38(v10, v4);
    return v34 & 1;
  }

  char v34 = 0;
  if (v33 != 3 && v32 == v33) {
    goto LABEL_33;
  }
  return v34 & 1;
}

    uint64_t v11 = (v24 - 1) & v24;
    uint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    int v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    int v32 = *v30;
    uint64_t v31 = v30[1];
    int v33 = *(void **)(*(void *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      char v34 = v33;
    }

    Hasher.init(_seed:)(v40, *(void *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    int v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      char v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        char v28 = v17 == v27;
        if (v17 == v27) {
          int v17 = 0LL;
        }
        v26 |= v28;
        int v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      char v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    int v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *int v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v36;
  char v23 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  int v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *char v23 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

  uint64_t v26 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v26,  1046LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_100062490(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v50 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  char v49 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v48 = (char *)&v45 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v47 = (uint64_t)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100003A0C(&qword_100354FB0);
  __chkstk_darwin(v11);
  int v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100003A0C(&qword_1003518A0);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v51 = (uint64_t)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  int v19 = (char *)&v45 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v45 - v20;
  uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0LL);
  uint64_t v23 = v22;
  uint64_t v24 = *(int *)(v22 + 20);
  int v25 = (double *)(a1 + v24);
  char v26 = *(_BYTE *)(a1 + v24 + 8);
  uint64_t v52 = a2;
  uint64_t v27 = (double *)(a2 + v24);
  int v28 = *(unsigned __int8 *)(a2 + v24 + 8);
  if ((v26 & 1) != 0)
  {
    if (!v28) {
      goto LABEL_13;
    }
  }

  else
  {
    if (*v25 != *v27) {
      LOBYTE(v28) = 1;
    }
    if ((v28 & 1) != 0) {
      goto LABEL_13;
    }
  }

  uint64_t v46 = v4;
  uint64_t v29 = a1;
  sub_10000E6C0(a1 + *(int *)(v22 + 24), (uint64_t)v21, &qword_1003518A0);
  sub_10000E6C0(v52 + *(int *)(v23 + 24), (uint64_t)v19, &qword_1003518A0);
  uint64_t v30 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E6C0((uint64_t)v21, (uint64_t)v13, &qword_1003518A0);
  sub_10000E6C0((uint64_t)v19, v30, &qword_1003518A0);
  uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v31((uint64_t)v13, 1LL, v8) == 1)
  {
    sub_100015764((uint64_t)v19, &qword_1003518A0);
    sub_100015764((uint64_t)v21, &qword_1003518A0);
    int v32 = v31(v30, 1LL, v8);
    uint64_t v33 = v46;
    if (v32 == 1)
    {
      sub_100015764((uint64_t)v13, &qword_1003518A0);
LABEL_16:
      uint64_t v39 = v50;
      int v40 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
      int v41 = v48;
      v40(v48, v29, v33);
      uint64_t v42 = v49;
      v40(v49, v52, v33);
      uint64_t v43 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v35 = dispatch thunk of static Equatable.== infix(_:_:)(v41, v42, v33, v43);
      char v44 = *(void (**)(char *, uint64_t))(v39 + 8);
      v44(v42, v33);
      v44(v41, v33);
      return v35 & 1;
    }

    goto LABEL_12;
  }

  uint64_t v34 = v51;
  sub_10000E6C0((uint64_t)v13, v51, &qword_1003518A0);
  if (v31(v30, 1LL, v8) == 1)
  {
    sub_100015764((uint64_t)v19, &qword_1003518A0);
    sub_100015764((uint64_t)v21, &qword_1003518A0);
    sub_100004090(v34, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
LABEL_12:
    sub_100015764((uint64_t)v13, &qword_100354FB0);
    goto LABEL_13;
  }

  uint64_t v37 = v47;
  sub_100003E68(v30, v47, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  char v38 = sub_100065750(v34, v37, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  sub_100004090(v37, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  sub_100015764((uint64_t)v19, &qword_1003518A0);
  sub_100015764((uint64_t)v21, &qword_1003518A0);
  sub_100004090(v34, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  sub_100015764((uint64_t)v13, &qword_1003518A0);
  uint64_t v33 = v46;
  if ((v38 & 1) != 0) {
    goto LABEL_16;
  }
LABEL_13:
  char v35 = 0;
  return v35 & 1;
}

uint64_t sub_1000628B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v26 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0LL);
  uint64_t v12 = v11[5];
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 2)
  {
    if (v14 != 2) {
      goto LABEL_17;
    }
  }

  else if (v14 == 2 || ((((v14 & 1) == 0) ^ v13) & 1) == 0)
  {
    goto LABEL_17;
  }

  uint64_t v15 = v11[6];
  int v16 = *(unsigned __int8 *)(a1 + v15);
  int v17 = *(unsigned __int8 *)(a2 + v15);
  if (v16 == 2)
  {
    if (v17 != 2) {
      goto LABEL_17;
    }
  }

  else if (v17 == 2 || ((((v17 & 1) == 0) ^ v16) & 1) == 0)
  {
    goto LABEL_17;
  }

  uint64_t v18 = v11[7];
  int v19 = *(unsigned __int8 *)(a1 + v18);
  int v20 = *(unsigned __int8 *)(a2 + v18);
  if (v19 == 2)
  {
    if (v20 == 2) {
      goto LABEL_16;
    }
LABEL_17:
    char v23 = 0;
    return v23 & 1;
  }

  if (v20 == 2 || ((((v20 & 1) == 0) ^ v19) & 1) == 0) {
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v21(v10, a1, v4);
  v21(v8, a2, v4);
  uint64_t v22 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v23 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v22);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v5 + 8);
  v24(v8, v4);
  v24(v10, v4);
  return v23 & 1;
}

uint64_t sub_100062A70(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v29 - v9;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0LL);
  uint64_t v12 = v11;
  uint64_t v13 = *(int *)(v11 + 32);
  int v14 = (double *)((char *)a1 + v13);
  char v15 = *((_BYTE *)a1 + v13 + 8);
  int v16 = (double *)((char *)a2 + v13);
  int v17 = *((unsigned __int8 *)a2 + v13 + 8);
  if ((v15 & 1) != 0)
  {
    if (!v17) {
      goto LABEL_17;
    }
  }

  else
  {
    if (*v14 != *v16) {
      LOBYTE(v17) = 1;
    }
    if ((v17 & 1) != 0) {
      goto LABEL_17;
    }
  }

  uint64_t v18 = *(int *)(v11 + 36);
  int v19 = (double *)((char *)a1 + v18);
  char v20 = *((_BYTE *)a1 + v18 + 8);
  uint64_t v21 = (double *)((char *)a2 + v18);
  int v22 = *((unsigned __int8 *)a2 + v18 + 8);
  if ((v20 & 1) != 0)
  {
    if (!v22)
    {
LABEL_17:
      char v26 = 0;
      return v26 & 1;
    }
  }

  else
  {
    if (*v19 != *v21) {
      LOBYTE(v22) = 1;
    }
    if ((v22 & 1) != 0) {
      goto LABEL_17;
    }
  }

  if (!sub_10005DF08(*a1, *a2) || !sub_10005DF08(a1[1], a2[1]) || !sub_10005DF08(a1[2], a2[2])) {
    goto LABEL_17;
  }
  char v23 = (char *)a1 + *(int *)(v12 + 28);
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v24(v10, v23, v4);
  v24(v8, (char *)a2 + *(int *)(v12 + 28), v4);
  uint64_t v25 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v26 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v25);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v5 + 8);
  v27(v8, v4);
  v27(v10, v4);
  return v26 & 1;
}

uint64_t sub_100062C2C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v34 - v11;
  uint64_t v13 = (int *)a3(0LL);
  uint64_t v14 = v13[5];
  int v15 = *(unsigned __int8 *)(a1 + v14);
  int v16 = *(unsigned __int8 *)(a2 + v14);
  if (v15 == 2)
  {
    if (v16 != 2) {
      goto LABEL_27;
    }
  }

  else if (v16 == 2 || ((((v16 & 1) == 0) ^ v15) & 1) == 0)
  {
    goto LABEL_27;
  }

  uint64_t v17 = v13[6];
  int v18 = *(unsigned __int8 *)(a1 + v17);
  int v19 = *(unsigned __int8 *)(a2 + v17);
  if (v18 == 2)
  {
    if (v19 != 2) {
      goto LABEL_27;
    }
  }

  else if (v19 == 2 || ((((v19 & 1) == 0) ^ v18) & 1) == 0)
  {
    goto LABEL_27;
  }

  uint64_t v20 = v13[7];
  int v21 = *(unsigned __int8 *)(a1 + v20);
  int v22 = *(unsigned __int8 *)(a2 + v20);
  if (v21 == 2)
  {
    if (v22 != 2) {
      goto LABEL_27;
    }
  }

  else if (v22 == 2 || ((((v22 & 1) == 0) ^ v21) & 1) == 0)
  {
    goto LABEL_27;
  }

  uint64_t v23 = v13[8];
  int v24 = *(unsigned __int8 *)(a1 + v23);
  int v25 = *(unsigned __int8 *)(a2 + v23);
  if (v24 == 2)
  {
    if (v25 != 2) {
      goto LABEL_27;
    }
  }

  else if (v25 == 2 || ((((v25 & 1) == 0) ^ v24) & 1) == 0)
  {
    goto LABEL_27;
  }

  uint64_t v26 = v13[9];
  int v27 = *(unsigned __int8 *)(a1 + v26);
  int v28 = *(unsigned __int8 *)(a2 + v26);
  if (v27 == 2)
  {
    if (v28 == 2) {
      goto LABEL_26;
    }
LABEL_27:
    char v31 = 0;
    return v31 & 1;
  }

  if (v28 == 2 || ((((v28 & 1) == 0) ^ v27) & 1) == 0) {
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v29(v12, a1, v6);
  v29(v10, a2, v6);
  uint64_t v30 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v31 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v10, v6, v30);
  int v32 = *(void (**)(char *, uint64_t))(v7 + 8);
  v32(v10, v6);
  v32(v12, v6);
  return v31 & 1;
}

uint64_t sub_100062E60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v27 - v9;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0LL);
  uint64_t v12 = *(int *)(v11 + 20);
  uint64_t v13 = (void *)(a1 + v12);
  char v14 = *(_BYTE *)(a1 + v12 + 8);
  int v15 = (void *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) == 0)
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if ((v16 & 1) != 0) {
      goto LABEL_9;
    }
LABEL_7:
    uint64_t v17 = *(int *)(v11 + 24);
    int v18 = (double *)(a1 + v17);
    char v19 = *(_BYTE *)(a1 + v17 + 8);
    uint64_t v20 = (double *)(a2 + v17);
    int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
    if ((v19 & 1) != 0)
    {
      if (!v21) {
        goto LABEL_9;
      }
    }

    else
    {
      if (*v18 != *v20) {
        LOBYTE(v21) = 1;
      }
      if ((v21 & 1) != 0) {
        goto LABEL_9;
      }
    }

    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v23(v10, a1, v4);
    v23(v8, a2, v4);
    uint64_t v24 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v22 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v24);
    int v25 = *(void (**)(char *, uint64_t))(v5 + 8);
    v25(v8, v4);
    v25(v10, v4);
    return v22 & 1;
  }

  if (v16) {
    goto LABEL_7;
  }
LABEL_9:
  char v22 = 0;
  return v22 & 1;
}

uint64_t sub_100062FDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v80 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v79 = &v73[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v5);
  uint64_t v78 = &v73[-v7];
  uint64_t v85 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0LL);
  uint64_t v8 = *(void *)(v85 - 8);
  __chkstk_darwin(v85);
  uint64_t v82 = &v73[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = sub_100003A0C(&qword_100354FF8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v84 = &v73[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v11);
  char v14 = &v73[-v13];
  uint64_t v15 = sub_100003A0C(&qword_1003518C8);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v81 = &v73[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = &v73[-v19];
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v83 = &v73[-v22];
  uint64_t v23 = __chkstk_darwin(v21);
  int v25 = &v73[-v24];
  uint64_t v26 = __chkstk_darwin(v23);
  int v28 = &v73[-v27];
  __chkstk_darwin(v26);
  uint64_t v30 = &v73[-v29];
  char v31 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0LL);
  uint64_t v32 = a2;
  uint64_t v33 = v31;
  uint64_t v34 = v31[5];
  char v35 = (_DWORD *)(a1 + v34);
  char v36 = *(_BYTE *)(a1 + v34 + 4);
  uint64_t v37 = (_DWORD *)(v32 + v34);
  int v38 = *(unsigned __int8 *)(v32 + v34 + 4);
  if ((v36 & 1) != 0)
  {
    if (!v38) {
      goto LABEL_32;
    }
  }

  else
  {
    if (*v35 != *v37) {
      LOBYTE(v38) = 1;
    }
    if ((v38 & 1) != 0) {
      goto LABEL_32;
    }
  }

  uint64_t v39 = v31[6];
  int v40 = (_DWORD *)(a1 + v39);
  char v41 = *(_BYTE *)(a1 + v39 + 4);
  uint64_t v42 = (_DWORD *)(v32 + v39);
  int v43 = *(unsigned __int8 *)(v32 + v39 + 4);
  if ((v41 & 1) != 0)
  {
    if (!v43) {
      goto LABEL_32;
    }
  }

  else
  {
    if (*v40 != *v42) {
      LOBYTE(v43) = 1;
    }
    if ((v43 & 1) != 0) {
      goto LABEL_32;
    }
  }

  uint64_t v44 = v31[7];
  int v45 = *(unsigned __int8 *)(a1 + v44);
  int v46 = *(unsigned __int8 *)(v32 + v44);
  uint64_t v77 = v4;
  if (v45 == 6)
  {
    if (v46 != 6) {
      goto LABEL_32;
    }
LABEL_18:
    uint64_t v48 = v31[8];
    uint64_t v75 = a1;
    uint64_t v49 = a1 + v48;
    uint64_t v50 = v32;
    sub_10000E6C0(v49, (uint64_t)v30, &qword_1003518C8);
    uint64_t v51 = v33[8];
    uint64_t v76 = v50;
    sub_10000E6C0(v50 + v51, (uint64_t)v28, &qword_1003518C8);
    uint64_t v52 = (uint64_t)&v14[*(int *)(v10 + 48)];
    sub_10000E6C0((uint64_t)v30, (uint64_t)v14, &qword_1003518C8);
    sub_10000E6C0((uint64_t)v28, v52, &qword_1003518C8);
    char v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    uint64_t v54 = v85;
    if (v53((uint64_t)v14, 1LL, v85) == 1)
    {
      sub_100015764((uint64_t)v28, &qword_1003518C8);
      sub_100015764((uint64_t)v30, &qword_1003518C8);
      if (v53(v52, 1LL, v54) == 1)
      {
        sub_100015764((uint64_t)v14, &qword_1003518C8);
LABEL_25:
        uint64_t v58 = v75;
        uint64_t v59 = v83;
        sub_10000E6C0(v75 + v33[9], (uint64_t)v83, &qword_1003518C8);
        sub_10000E6C0(v76 + v33[9], (uint64_t)v20, &qword_1003518C8);
        uint64_t v60 = v84;
        uint64_t v61 = (uint64_t)&v84[*(int *)(v10 + 48)];
        sub_10000E6C0((uint64_t)v59, (uint64_t)v84, &qword_1003518C8);
        sub_10000E6C0((uint64_t)v20, v61, &qword_1003518C8);
        if (v53((uint64_t)v60, 1LL, v54) == 1)
        {
          sub_100015764((uint64_t)v20, &qword_1003518C8);
          sub_100015764((uint64_t)v59, &qword_1003518C8);
          if (v53(v61, 1LL, v54) == 1)
          {
            sub_100015764((uint64_t)v60, &qword_1003518C8);
LABEL_35:
            uint64_t v66 = v80;
            uint64_t v67 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v80 + 16);
            uint64_t v68 = v77;
            uint64_t v69 = v78;
            v67(v78, v58, v77);
            uint64_t v70 = v79;
            v67(v79, v76, v68);
            uint64_t v71 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
            char v47 = dispatch thunk of static Equatable.== infix(_:_:)(v69, v70, v68, v71);
            uint64_t v72 = *(void (**)(_BYTE *, uint64_t))(v66 + 8);
            v72(v70, v68);
            v72(v69, v68);
            return v47 & 1;
          }

          goto LABEL_30;
        }

        uint64_t v62 = v81;
        sub_10000E6C0((uint64_t)v60, (uint64_t)v81, &qword_1003518C8);
        if (v53(v61, 1LL, v54) == 1)
        {
          sub_100015764((uint64_t)v20, &qword_1003518C8);
          sub_100015764((uint64_t)v59, &qword_1003518C8);
          sub_100004090((uint64_t)v62, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
LABEL_30:
          uint64_t v55 = (uint64_t)v60;
          goto LABEL_31;
        }

        uint64_t v64 = v82;
        sub_100003E68(v61, (uint64_t)v82, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
        char v65 = sub_100062E60((uint64_t)v62, (uint64_t)v64);
        sub_100004090((uint64_t)v64, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
        sub_100015764((uint64_t)v20, &qword_1003518C8);
        sub_100015764((uint64_t)v59, &qword_1003518C8);
        sub_100004090((uint64_t)v62, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
        sub_100015764((uint64_t)v60, &qword_1003518C8);
        if ((v65 & 1) != 0) {
          goto LABEL_35;
        }
LABEL_32:
        char v47 = 0;
        return v47 & 1;
      }
    }

    else
    {
      sub_10000E6C0((uint64_t)v14, (uint64_t)v25, &qword_1003518C8);
      if (v53(v52, 1LL, v54) != 1)
      {
        uint64_t v56 = v52;
        char v57 = v82;
        sub_100003E68(v56, (uint64_t)v82, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
        int v74 = sub_100062E60((uint64_t)v25, (uint64_t)v57);
        sub_100004090((uint64_t)v57, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
        sub_100015764((uint64_t)v28, &qword_1003518C8);
        sub_100015764((uint64_t)v30, &qword_1003518C8);
        sub_100004090((uint64_t)v25, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
        uint64_t v54 = v85;
        sub_100015764((uint64_t)v14, &qword_1003518C8);
        if ((v74 & 1) == 0) {
          goto LABEL_32;
        }
        goto LABEL_25;
      }

      sub_100015764((uint64_t)v28, &qword_1003518C8);
      sub_100015764((uint64_t)v30, &qword_1003518C8);
      sub_100004090((uint64_t)v25, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
    }

    uint64_t v55 = (uint64_t)v14;
LABEL_31:
    sub_100015764(v55, &qword_100354FF8);
    goto LABEL_32;
  }

  char v47 = 0;
  if (v46 != 6 && v45 == v46) {
    goto LABEL_18;
  }
  return v47 & 1;
}

uint64_t sub_100063688(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v87 = *(void *)(v4 - 8);
  uint64_t v88 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v86 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v85 = (char *)&v83 - v7;
  uint64_t v98 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  uint64_t v96 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  uint64_t v90 = (uint64_t)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v97 = sub_100003A0C(&qword_100354FE8);
  uint64_t v9 = __chkstk_darwin(v97);
  uint64_t v91 = (uint64_t)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v99 = (uint64_t)&v83 - v11;
  uint64_t v12 = sub_100003A0C(&qword_1003518D0);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v89 = (uint64_t)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v93 = (char *)&v83 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  double v94 = (char *)&v83 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v92 = (uint64_t)&v83 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v100 = (uint64_t)&v83 - v22;
  __chkstk_darwin(v21);
  uint64_t v95 = (uint64_t)&v83 - v23;
  uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v83 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = sub_100003A0C(&qword_100354FF0);
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&v83 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = sub_100003A0C(&qword_1003518B8);
  uint64_t v32 = __chkstk_darwin(v31);
  uint64_t v34 = (char *)&v83 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = __chkstk_darwin(v32);
  uint64_t v37 = (char *)&v83 - v36;
  __chkstk_darwin(v35);
  uint64_t v39 = (char *)&v83 - v38;
  uint64_t v40 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0LL);
  uint64_t v41 = *(int *)(v40 + 20);
  uint64_t v42 = (_DWORD *)(a1 + v41);
  char v43 = *(_BYTE *)(a1 + v41 + 4);
  uint64_t v101 = a2;
  uint64_t v44 = (_DWORD *)(a2 + v41);
  int v45 = *(unsigned __int8 *)(a2 + v41 + 4);
  if ((v43 & 1) != 0)
  {
    if (!v45) {
      goto LABEL_28;
    }
  }

  else
  {
    if (*v42 != *v44) {
      LOBYTE(v45) = 1;
    }
    if ((v45 & 1) != 0) {
      goto LABEL_28;
    }
  }

  uint64_t v46 = *(int *)(v40 + 24);
  uint64_t v47 = v40;
  uint64_t v83 = a1;
  sub_10000E6C0(a1 + v46, (uint64_t)v39, &qword_1003518B8);
  uint64_t v84 = v47;
  sub_10000E6C0(v101 + *(int *)(v47 + 24), (uint64_t)v37, &qword_1003518B8);
  uint64_t v48 = (uint64_t)&v30[*(int *)(v28 + 48)];
  sub_10000E6C0((uint64_t)v39, (uint64_t)v30, &qword_1003518B8);
  sub_10000E6C0((uint64_t)v37, v48, &qword_1003518B8);
  uint64_t v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  if (v49((uint64_t)v30, 1LL, v24) == 1)
  {
    sub_100015764((uint64_t)v37, &qword_1003518B8);
    sub_100015764((uint64_t)v39, &qword_1003518B8);
    if (v49(v48, 1LL, v24) == 1)
    {
      sub_100015764((uint64_t)v30, &qword_1003518B8);
      goto LABEL_14;
    }

uint64_t sub_100063F58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v40 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0LL);
  uint64_t v12 = v11[5];
  uint64_t v13 = (void *)(a1 + v12);
  char v14 = *(_BYTE *)(a1 + v12 + 8);
  uint64_t v15 = (void *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16) {
      goto LABEL_31;
    }
  }

  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if ((v16 & 1) != 0) {
      goto LABEL_31;
    }
  }

  uint64_t v17 = v11[6];
  uint64_t v18 = (void *)(a1 + v17);
  char v19 = *(_BYTE *)(a1 + v17 + 8);
  uint64_t v20 = (void *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21) {
      goto LABEL_31;
    }
  }

  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if ((v21 & 1) != 0) {
      goto LABEL_31;
    }
  }

  uint64_t v22 = v11[7];
  uint64_t v23 = (double *)(a1 + v22);
  char v24 = *(_BYTE *)(a1 + v22 + 8);
  uint64_t v25 = (double *)(a2 + v22);
  int v26 = *(unsigned __int8 *)(a2 + v22 + 8);
  if ((v24 & 1) != 0)
  {
    if (!v26) {
      goto LABEL_31;
    }
  }

  else
  {
    if (*v23 != *v25) {
      LOBYTE(v26) = 1;
    }
    if ((v26 & 1) != 0) {
      goto LABEL_31;
    }
  }

  uint64_t v27 = v11[8];
  uint64_t v28 = (double *)(a1 + v27);
  char v29 = *(_BYTE *)(a1 + v27 + 8);
  uint64_t v30 = (double *)(a2 + v27);
  int v31 = *(unsigned __int8 *)(a2 + v27 + 8);
  if ((v29 & 1) != 0)
  {
    if (!v31) {
      goto LABEL_31;
    }
  }

  else
  {
    if (*v28 != *v30) {
      LOBYTE(v31) = 1;
    }
    if ((v31 & 1) != 0) {
      goto LABEL_31;
    }
  }

  uint64_t v32 = v11[9];
  int v33 = *(unsigned __int8 *)(a1 + v32);
  int v34 = *(unsigned __int8 *)(a2 + v32);
  if (v33 == 2)
  {
    if (v34 == 2) {
      goto LABEL_30;
    }
LABEL_31:
    char v37 = 0;
    return v37 & 1;
  }

  if (v34 == 2 || ((((v34 & 1) == 0) ^ v33) & 1) == 0) {
    goto LABEL_31;
  }
LABEL_30:
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v35(v10, a1, v4);
  v35(v8, a2, v4);
  uint64_t v36 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v37 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v36);
  uint64_t v38 = *(void (**)(char *, uint64_t))(v5 + 8);
  v38(v8, v4);
  v38(v10, v4);
  return v37 & 1;
}

uint64_t sub_100064178(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v32 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  uint64_t v12 = v11[5];
  uint64_t v13 = (void *)(a1 + v12);
  char v14 = *(_BYTE *)(a1 + v12 + 8);
  uint64_t v15 = (void *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16) {
      goto LABEL_15;
    }
  }

  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if ((v16 & 1) != 0) {
      goto LABEL_15;
    }
  }

  uint64_t v17 = v11[6];
  uint64_t v18 = (double *)(a1 + v17);
  char v19 = *(_BYTE *)(a1 + v17 + 8);
  uint64_t v20 = (double *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) == 0)
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if ((v21 & 1) != 0) {
      goto LABEL_15;
    }
LABEL_13:
    uint64_t v22 = v11[7];
    uint64_t v23 = (double *)(a1 + v22);
    char v24 = *(_BYTE *)(a1 + v22 + 8);
    uint64_t v25 = (double *)(a2 + v22);
    int v26 = *(unsigned __int8 *)(a2 + v22 + 8);
    if ((v24 & 1) != 0)
    {
      if (!v26) {
        goto LABEL_15;
      }
    }

    else
    {
      if (*v23 != *v25) {
        LOBYTE(v26) = 1;
      }
      if ((v26 & 1) != 0) {
        goto LABEL_15;
      }
    }

    char v29 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v29(v10, a1, v4);
    v29(v8, a2, v4);
    uint64_t v30 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v27 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v30);
    int v31 = *(void (**)(char *, uint64_t))(v5 + 8);
    v31(v8, v4);
    v31(v10, v4);
    return v27 & 1;
  }

  if (v21) {
    goto LABEL_13;
  }
LABEL_15:
  char v27 = 0;
  return v27 & 1;
}

uint64_t sub_100064328(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v48 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v46 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  int v45 = (char *)&v45 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v51 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100003A0C(&qword_100354FE8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100003A0C(&qword_1003518D0);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v52 = (uint64_t)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  char v19 = (char *)&v45 - v18;
  __chkstk_darwin(v17);
  int v21 = (char *)&v45 - v20;
  uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0LL);
  uint64_t v23 = *(int *)(v22 + 20);
  uint64_t v49 = a1;
  sub_10000E6C0(a1 + v23, (uint64_t)v21, &qword_1003518D0);
  uint64_t v24 = *(int *)(v22 + 20);
  uint64_t v50 = a2;
  sub_10000E6C0(a2 + v24, (uint64_t)v19, &qword_1003518D0);
  uint64_t v25 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E6C0((uint64_t)v21, (uint64_t)v13, &qword_1003518D0);
  sub_10000E6C0((uint64_t)v19, v25, &qword_1003518D0);
  int v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v26((uint64_t)v13, 1LL, v8) != 1)
  {
    uint64_t v27 = (uint64_t)v51;
    uint64_t v28 = v52;
    sub_10000E6C0((uint64_t)v13, v52, &qword_1003518D0);
    if (v26(v25, 1LL, v8) != 1)
    {
      sub_100003E68(v25, v27, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
      char v31 = sub_100064178(v28, v27);
      sub_100004090(v27, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
      sub_100015764((uint64_t)v19, &qword_1003518D0);
      sub_100015764((uint64_t)v21, &qword_1003518D0);
      sub_100004090(v28, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
      sub_100015764((uint64_t)v13, &qword_1003518D0);
      if ((v31 & 1) == 0) {
        goto LABEL_7;
      }
      goto LABEL_10;
    }

    sub_100015764((uint64_t)v19, &qword_1003518D0);
    sub_100015764((uint64_t)v21, &qword_1003518D0);
    sub_100004090(v28, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
LABEL_6:
    sub_100015764((uint64_t)v13, &qword_100354FE8);
    goto LABEL_7;
  }

  sub_100015764((uint64_t)v19, &qword_1003518D0);
  sub_100015764((uint64_t)v21, &qword_1003518D0);
  if (v26(v25, 1LL, v8) != 1) {
    goto LABEL_6;
  }
  sub_100015764((uint64_t)v13, &qword_1003518D0);
LABEL_10:
  uint64_t v32 = *(int *)(v22 + 24);
  uint64_t v33 = v50;
  int v34 = (_DWORD *)(v49 + v32);
  char v35 = *(_BYTE *)(v49 + v32 + 4);
  uint64_t v36 = (_DWORD *)(v50 + v32);
  int v37 = *(unsigned __int8 *)(v50 + v32 + 4);
  if ((v35 & 1) != 0)
  {
    if (v37)
    {
LABEL_16:
      uint64_t v39 = v47;
      uint64_t v38 = v48;
      uint64_t v40 = *(void (**)(char *))(v47 + 16);
      uint64_t v41 = v45;
      v40(v45);
      uint64_t v42 = v46;
      ((void (*)(char *, uint64_t, uint64_t))v40)(v46, v33, v38);
      uint64_t v43 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v29 = dispatch thunk of static Equatable.== infix(_:_:)(v41, v42, v38, v43);
      uint64_t v44 = *(void (**)(char *, uint64_t))(v39 + 8);
      v44(v42, v38);
      v44(v41, v38);
      return v29 & 1;
    }
  }

  else
  {
    if (*v34 != *v36) {
      LOBYTE(v37) = 1;
    }
    if ((v37 & 1) == 0) {
      goto LABEL_16;
    }
  }

LABEL_7:
  char v29 = 0;
  return v29 & 1;
}

  uint64_t v30 = 0;
  return v30 & 1;
}

  uint64_t v30 = 0;
  return v30 & 1;
}

  uint64_t v32 = 0;
  return v32 & 1;
}

  uint64_t v30 = 0;
  return v30 & 1;
}

  uint64_t v30 = 0;
  return v30 & 1;
}

  uint64_t v30 = 0;
  return v30 & 1;
}

  uint64_t v30 = 0;
  return v30 & 1;
}

  char v31 = 0;
  return v31 & 1;
}

  char v31 = 0;
  return v31 & 1;
}

  uint64_t v30 = 0;
  return v30 & 1;
}

  uint64_t v18 = a6(v14, v15, a5);
  swift_bridgeObjectRelease(v13);
  return v18 | ((HIDWORD(v18) & 1) << 32);
}

  uint64_t v16 = sub_10028C930(v12, v13, a5);
  swift_bridgeObjectRelease(v11);
  return v16;
}

  uint64_t v12 = sub_10028C930(v8, v9, a3);
  swift_bridgeObjectRelease(v7);
  return v12;
}

  uint64_t v16 = sub_10028C6B0(v12, v13, a5);
  swift_bridgeObjectRelease(v11);
  return v16 | ((((unint64_t)v16 >> 32) & 1) << 32);
}

uint64_t sub_100064728(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v27 - v9;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
  uint64_t v12 = *(int *)(v11 + 20);
  uint64_t v13 = (void *)(a1 + v12);
  char v14 = *(_BYTE *)(a1 + v12 + 8);
  uint64_t v15 = (void *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) == 0)
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if ((v16 & 1) != 0) {
      goto LABEL_9;
    }
LABEL_7:
    uint64_t v17 = *(int *)(v11 + 24);
    uint64_t v18 = (_DWORD *)(a1 + v17);
    char v19 = *(_BYTE *)(a1 + v17 + 4);
    uint64_t v20 = (_DWORD *)(a2 + v17);
    int v21 = *(unsigned __int8 *)(a2 + v17 + 4);
    if ((v19 & 1) != 0)
    {
      if (!v21) {
        goto LABEL_9;
      }
    }

    else
    {
      if (*v18 != *v20) {
        LOBYTE(v21) = 1;
      }
      if ((v21 & 1) != 0) {
        goto LABEL_9;
      }
    }

    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v23(v10, a1, v4);
    v23(v8, a2, v4);
    uint64_t v24 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v22 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v24);
    uint64_t v25 = *(void (**)(char *, uint64_t))(v5 + 8);
    v25(v8, v4);
    v25(v10, v4);
    return v22 & 1;
  }

  if (v16) {
    goto LABEL_7;
  }
LABEL_9:
  char v22 = 0;
  return v22 & 1;
}

uint64_t sub_1000648A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v58 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v57 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v56 = (char *)&v51 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v55 = (uint64_t)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100003A0C(&qword_100355008);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100003A0C(&qword_1003518B0);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v51 - v19;
  __chkstk_darwin(v18);
  char v22 = (char *)&v51 - v21;
  uint64_t v23 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  uint64_t v24 = a2;
  uint64_t v25 = v23;
  uint64_t v26 = v23[5];
  uint64_t v27 = (_DWORD *)(a1 + v26);
  char v28 = *(_BYTE *)(a1 + v26 + 4);
  char v29 = (_DWORD *)(v24 + v26);
  int v30 = *(unsigned __int8 *)(v24 + v26 + 4);
  if ((v28 & 1) != 0)
  {
    if (!v30) {
      goto LABEL_18;
    }
  }

  else
  {
    if (*v27 != *v29) {
      LOBYTE(v30) = 1;
    }
    if ((v30 & 1) != 0) {
      goto LABEL_18;
    }
  }

  uint64_t v54 = v4;
  uint64_t v31 = v23[6];
  int v32 = *(unsigned __int8 *)(a1 + v31);
  int v33 = *(unsigned __int8 *)(v24 + v31);
  if (v32 == 5)
  {
    if (v33 != 5) {
      goto LABEL_18;
    }
LABEL_12:
    uint64_t v35 = v23[7];
    uint64_t v52 = a1;
    uint64_t v36 = a1 + v35;
    uint64_t v37 = v24;
    sub_10000E6C0(v36, (uint64_t)v22, &qword_1003518B0);
    uint64_t v38 = v25[7];
    uint64_t v53 = v37;
    sub_10000E6C0(v37 + v38, (uint64_t)v20, &qword_1003518B0);
    uint64_t v39 = (uint64_t)&v13[*(int *)(v11 + 48)];
    sub_10000E6C0((uint64_t)v22, (uint64_t)v13, &qword_1003518B0);
    sub_10000E6C0((uint64_t)v20, v39, &qword_1003518B0);
    uint64_t v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v40((uint64_t)v13, 1LL, v8) == 1)
    {
      sub_100015764((uint64_t)v20, &qword_1003518B0);
      sub_100015764((uint64_t)v22, &qword_1003518B0);
      if (v40(v39, 1LL, v8) == 1)
      {
        sub_100015764((uint64_t)v13, &qword_1003518B0);
LABEL_21:
        uint64_t v44 = v58;
        int v45 = *(void (**)(char *, uint64_t, uint64_t))(v58 + 16);
        uint64_t v46 = v56;
        uint64_t v47 = v54;
        v45(v56, v52, v54);
        uint64_t v48 = v57;
        v45(v57, v53, v47);
        uint64_t v49 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
        char v34 = dispatch thunk of static Equatable.== infix(_:_:)(v46, v48, v47, v49);
        uint64_t v50 = *(void (**)(char *, uint64_t))(v44 + 8);
        v50(v48, v47);
        v50(v46, v47);
        return v34 & 1;
      }
    }

    else
    {
      sub_10000E6C0((uint64_t)v13, (uint64_t)v17, &qword_1003518B0);
      if (v40(v39, 1LL, v8) != 1)
      {
        uint64_t v42 = v55;
        sub_100003E68(v39, v55, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
        char v43 = sub_100064728((uint64_t)v17, v42);
        sub_100004090(v42, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
        sub_100015764((uint64_t)v20, &qword_1003518B0);
        sub_100015764((uint64_t)v22, &qword_1003518B0);
        sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
        sub_100015764((uint64_t)v13, &qword_1003518B0);
        if ((v43 & 1) != 0) {
          goto LABEL_21;
        }
LABEL_18:
        char v34 = 0;
        return v34 & 1;
      }

      sub_100015764((uint64_t)v20, &qword_1003518B0);
      sub_100015764((uint64_t)v22, &qword_1003518B0);
      sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
    }

    sub_100015764((uint64_t)v13, &qword_100355008);
    goto LABEL_18;
  }

  char v34 = 0;
  if (v33 != 5 && v32 == v33) {
    goto LABEL_12;
  }
  return v34 & 1;
}

uint64_t sub_100064CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v67 = *(void *)(v4 - 8);
  uint64_t v68 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  int v66 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v65 = (char *)&v63 - v7;
  uint64_t v75 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0LL);
  uint64_t v72 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  uint64_t v64 = (uint64_t)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v71 = sub_100003A0C(&qword_100355000);
  __chkstk_darwin(v71);
  uint64_t v76 = (uint64_t)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100003A0C(&qword_1003518C0);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v69 = (uint64_t)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v73 = (uint64_t)&v63 - v14;
  __chkstk_darwin(v13);
  uint64_t v74 = (uint64_t)&v63 - v15;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v70 = (uint64_t)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_100003A0C(&qword_100354FF0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_100003A0C(&qword_1003518B8);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v63 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = __chkstk_darwin(v23);
  char v28 = (char *)&v63 - v27;
  __chkstk_darwin(v26);
  int v30 = (char *)&v63 - v29;
  uint64_t v31 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0LL);
  uint64_t v32 = v31;
  uint64_t v33 = *(int *)(v31 + 20);
  uint64_t v77 = a1;
  uint64_t v78 = a2;
  char v34 = (_DWORD *)(a1 + v33);
  char v35 = *(_BYTE *)(a1 + v33 + 4);
  uint64_t v36 = (_DWORD *)(a2 + v33);
  int v37 = *(unsigned __int8 *)(a2 + v33 + 4);
  if ((v35 & 1) != 0)
  {
    if (!v37) {
      goto LABEL_21;
    }
  }

  else
  {
    if (*v34 != *v36) {
      LOBYTE(v37) = 1;
    }
    if ((v37 & 1) != 0) {
      goto LABEL_21;
    }
  }

  sub_10000E6C0(v77 + *(int *)(v31 + 24), (uint64_t)v30, &qword_1003518B8);
  sub_10000E6C0(v78 + *(int *)(v32 + 24), (uint64_t)v28, &qword_1003518B8);
  uint64_t v38 = (uint64_t)&v21[*(int *)(v19 + 48)];
  sub_10000E6C0((uint64_t)v30, (uint64_t)v21, &qword_1003518B8);
  sub_10000E6C0((uint64_t)v28, v38, &qword_1003518B8);
  uint64_t v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v39((uint64_t)v21, 1LL, v16) != 1)
  {
    sub_10000E6C0((uint64_t)v21, (uint64_t)v25, &qword_1003518B8);
    if (v39(v38, 1LL, v16) != 1)
    {
      uint64_t v42 = v70;
      sub_100003E68(v38, v70, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
      char v43 = sub_1000648A4((uint64_t)v25, v42);
      sub_100004090(v42, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
      sub_100015764((uint64_t)v28, &qword_1003518B8);
      sub_100015764((uint64_t)v30, &qword_1003518B8);
      sub_100004090((uint64_t)v25, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
      sub_100015764((uint64_t)v21, &qword_1003518B8);
      if ((v43 & 1) == 0) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

    sub_100015764((uint64_t)v28, &qword_1003518B8);
    sub_100015764((uint64_t)v30, &qword_1003518B8);
    sub_100004090((uint64_t)v25, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
LABEL_12:
    uint64_t v40 = &qword_100354FF0;
    uint64_t v41 = (uint64_t)v21;
LABEL_20:
    sub_100015764(v41, v40);
    goto LABEL_21;
  }

  sub_100015764((uint64_t)v28, &qword_1003518B8);
  sub_100015764((uint64_t)v30, &qword_1003518B8);
  if (v39(v38, 1LL, v16) != 1) {
    goto LABEL_12;
  }
  sub_100015764((uint64_t)v21, &qword_1003518B8);
LABEL_14:
  uint64_t v44 = v74;
  sub_10000E6C0(v77 + *(int *)(v32 + 28), v74, &qword_1003518C0);
  uint64_t v45 = v78 + *(int *)(v32 + 28);
  uint64_t v46 = v73;
  sub_10000E6C0(v45, v73, &qword_1003518C0);
  uint64_t v47 = v76;
  uint64_t v48 = v76 + *(int *)(v71 + 48);
  sub_10000E6C0(v44, v76, &qword_1003518C0);
  sub_10000E6C0(v46, v48, &qword_1003518C0);
  uint64_t v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
  uint64_t v50 = v75;
  if (v49(v47, 1LL, v75) == 1)
  {
    sub_100015764(v46, &qword_1003518C0);
    sub_100015764(v44, &qword_1003518C0);
    if (v49(v48, 1LL, v50) == 1)
    {
      sub_100015764(v47, &qword_1003518C0);
LABEL_24:
      uint64_t v57 = v67;
      uint64_t v56 = v68;
      uint64_t v58 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
      uint64_t v59 = v65;
      v58(v65, v77, v68);
      uint64_t v60 = v66;
      v58(v66, v78, v56);
      uint64_t v61 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v52 = dispatch thunk of static Equatable.== infix(_:_:)(v59, v60, v56, v61);
      int v62 = *(void (**)(char *, uint64_t))(v57 + 8);
      v62(v60, v56);
      v62(v59, v56);
      return v52 & 1;
    }

    goto LABEL_19;
  }

  uint64_t v51 = v69;
  sub_10000E6C0(v47, v69, &qword_1003518C0);
  if (v49(v48, 1LL, v50) == 1)
  {
    sub_100015764(v46, &qword_1003518C0);
    sub_100015764(v44, &qword_1003518C0);
    sub_100004090(v51, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
LABEL_19:
    uint64_t v40 = &qword_100355000;
    uint64_t v41 = v47;
    goto LABEL_20;
  }

  uint64_t v54 = v64;
  sub_100003E68(v48, v64, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  char v55 = sub_100061D54(v51, v54);
  sub_100004090(v54, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  sub_100015764(v46, &qword_1003518C0);
  sub_100015764(v44, &qword_1003518C0);
  sub_100004090(v51, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  sub_100015764(v47, &qword_1003518C0);
  if ((v55 & 1) != 0) {
    goto LABEL_24;
  }
LABEL_21:
  char v52 = 0;
  return v52 & 1;
}

uint64_t sub_1000653AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v31 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0LL);
  uint64_t v12 = v11[5];
  uint64_t v13 = (double *)(a1 + v12);
  char v14 = *(_BYTE *)(a1 + v12 + 8);
  uint64_t v15 = (double *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16) {
      goto LABEL_20;
    }
  }

  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if ((v16 & 1) != 0) {
      goto LABEL_20;
    }
  }

  uint64_t v17 = v11[6];
  uint64_t v18 = (double *)(a1 + v17);
  char v19 = *(_BYTE *)(a1 + v17 + 8);
  uint64_t v20 = (double *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21) {
      goto LABEL_20;
    }
  }

  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if ((v21 & 1) != 0) {
      goto LABEL_20;
    }
  }

  uint64_t v22 = v11[7];
  int v23 = *(unsigned __int8 *)(a1 + v22);
  int v24 = *(unsigned __int8 *)(a2 + v22);
  if (v23 != 6)
  {
    if (v24 != 6 && v23 == v24) {
      goto LABEL_15;
    }
LABEL_20:
    char v27 = 0;
    return v27 & 1;
  }

  if (v24 != 6) {
    goto LABEL_20;
  }
LABEL_15:
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v25(v10, a1, v4);
  v25(v8, a2, v4);
  uint64_t v26 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v27 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v26);
  char v28 = *(void (**)(char *, uint64_t))(v5 + 8);
  v28(v8, v4);
  v28(v10, v4);
  return v27 & 1;
}

uint64_t sub_100065554(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v31 - v11;
  uint64_t v13 = (int *)a3(0LL);
  uint64_t v14 = v13[5];
  int v15 = *(unsigned __int8 *)(a1 + v14);
  int v16 = *(unsigned __int8 *)(a2 + v14);
  if (v15 == 2)
  {
    if (v16 != 2) {
      goto LABEL_22;
    }
  }

  else if (v16 == 2 || ((((v16 & 1) == 0) ^ v15) & 1) == 0)
  {
    goto LABEL_22;
  }

  uint64_t v17 = v13[6];
  int v18 = *(unsigned __int8 *)(a1 + v17);
  int v19 = *(unsigned __int8 *)(a2 + v17);
  if (v18 == 2)
  {
    if (v19 != 2) {
      goto LABEL_22;
    }
  }

  else if (v19 == 2 || ((((v19 & 1) == 0) ^ v18) & 1) == 0)
  {
    goto LABEL_22;
  }

  uint64_t v20 = v13[7];
  int v21 = *(unsigned __int8 *)(a1 + v20);
  int v22 = *(unsigned __int8 *)(a2 + v20);
  if (v21 == 2)
  {
    if (v22 != 2) {
      goto LABEL_22;
    }
  }

  else if (v22 == 2 || ((((v22 & 1) == 0) ^ v21) & 1) == 0)
  {
    goto LABEL_22;
  }

  uint64_t v23 = v13[8];
  int v24 = *(unsigned __int8 *)(a1 + v23);
  int v25 = *(unsigned __int8 *)(a2 + v23);
  if (v24 == 2)
  {
    if (v25 == 2) {
      goto LABEL_21;
    }
LABEL_22:
    char v28 = 0;
    return v28 & 1;
  }

  if (v25 == 2 || ((((v25 & 1) == 0) ^ v24) & 1) == 0) {
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v26(v12, a1, v6);
  v26(v10, a2, v6);
  uint64_t v27 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v28 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v10, v6, v27);
  uint64_t v29 = *(void (**)(char *, uint64_t))(v7 + 8);
  v29(v10, v6);
  v29(v12, v6);
  return v28 & 1;
}

uint64_t sub_100065750(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v34 - v11;
  uint64_t v13 = (int *)a3(0LL);
  uint64_t v14 = v13[5];
  int v15 = (double *)(a1 + v14);
  char v16 = *(_BYTE *)(a1 + v14 + 8);
  uint64_t v17 = (double *)(a2 + v14);
  int v18 = *(unsigned __int8 *)(a2 + v14 + 8);
  if ((v16 & 1) != 0)
  {
    if (!v18) {
      goto LABEL_15;
    }
  }

  else
  {
    if (*v15 != *v17) {
      LOBYTE(v18) = 1;
    }
    if ((v18 & 1) != 0) {
      goto LABEL_15;
    }
  }

  uint64_t v19 = v13[6];
  uint64_t v20 = (double *)(a1 + v19);
  char v21 = *(_BYTE *)(a1 + v19 + 8);
  int v22 = (double *)(a2 + v19);
  int v23 = *(unsigned __int8 *)(a2 + v19 + 8);
  if ((v21 & 1) == 0)
  {
    if (*v20 != *v22) {
      LOBYTE(v23) = 1;
    }
    if ((v23 & 1) != 0) {
      goto LABEL_15;
    }
LABEL_13:
    uint64_t v24 = v13[7];
    int v25 = (double *)(a1 + v24);
    char v26 = *(_BYTE *)(a1 + v24 + 8);
    uint64_t v27 = (double *)(a2 + v24);
    int v28 = *(unsigned __int8 *)(a2 + v24 + 8);
    if ((v26 & 1) != 0)
    {
      if (!v28) {
        goto LABEL_15;
      }
    }

    else
    {
      if (*v25 != *v27) {
        LOBYTE(v28) = 1;
      }
      if ((v28 & 1) != 0) {
        goto LABEL_15;
      }
    }

    uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v31(v12, a1, v6);
    v31(v10, a2, v6);
    uint64_t v32 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v29 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v10, v6, v32);
    uint64_t v33 = *(void (**)(char *, uint64_t))(v7 + 8);
    v33(v10, v6);
    v33(v12, v6);
    return v29 & 1;
  }

  if (v23) {
    goto LABEL_13;
  }
LABEL_15:
  char v29 = 0;
  return v29 & 1;
}

uint64_t sub_100065904(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v32 - v11;
  uint64_t v13 = (int *)a3(0LL);
  uint64_t v14 = v13[5];
  int v15 = (double *)(a1 + v14);
  char v16 = *(_BYTE *)(a1 + v14 + 8);
  uint64_t v17 = (double *)(a2 + v14);
  int v18 = *(unsigned __int8 *)(a2 + v14 + 8);
  if ((v16 & 1) != 0)
  {
    if (!v18) {
      goto LABEL_19;
    }
  }

  else
  {
    if (*v15 != *v17) {
      LOBYTE(v18) = 1;
    }
    if ((v18 & 1) != 0) {
      goto LABEL_19;
    }
  }

  uint64_t v19 = v13[6];
  uint64_t v20 = (double *)(a1 + v19);
  char v21 = *(_BYTE *)(a1 + v19 + 8);
  int v22 = (double *)(a2 + v19);
  int v23 = *(unsigned __int8 *)(a2 + v19 + 8);
  if ((v21 & 1) != 0)
  {
    if (!v23) {
      goto LABEL_19;
    }
  }

  else
  {
    if (*v20 != *v22) {
      LOBYTE(v23) = 1;
    }
    if ((v23 & 1) != 0) {
      goto LABEL_19;
    }
  }

  uint64_t v24 = v13[7];
  int v25 = *(unsigned __int8 *)(a1 + v24);
  int v26 = *(unsigned __int8 *)(a2 + v24);
  if (v25 == 2)
  {
    if (v26 == 2) {
      goto LABEL_18;
    }
LABEL_19:
    char v29 = 0;
    return v29 & 1;
  }

  if (v26 == 2 || ((((v26 & 1) == 0) ^ v25) & 1) == 0) {
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v27(v12, a1, v6);
  v27(v10, a2, v6);
  uint64_t v28 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v29 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v10, v6, v28);
  int v30 = *(void (**)(char *, uint64_t))(v7 + 8);
  v30(v10, v6);
  v30(v12, v6);
  return v29 & 1;
}

uint64_t sub_100065AC0( uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v24 - v13;
  uint64_t v15 = *(int *)(a3(0LL) + 20);
  uint64_t v16 = *(void *)(a1 + v15);
  uint64_t v17 = *(void *)(a2 + v15);
  if (v16 == v17
    || (swift_retain(*(void *)(a1 + v15)),
        swift_retain(v17),
        char v18 = a4(v16, v17),
        swift_release(v17),
        swift_release(v16),
        (v18 & 1) != 0))
  {
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v19(v14, a1, v8);
    v19(v12, a2, v8);
    uint64_t v20 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v21 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v12, v8, v20);
    int v22 = *(void (**)(char *, uint64_t))(v9 + 8);
    v22(v12, v8);
    v22(v14, v8);
  }

  else
  {
    char v21 = 0;
  }

  return v21 & 1;
}

uint64_t sub_100065C30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v40 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0LL);
  uint64_t v12 = v11[5];
  uint64_t v13 = (float *)(a1 + v12);
  char v14 = *(_BYTE *)(a1 + v12 + 4);
  uint64_t v15 = (float *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 4);
  if ((v14 & 1) != 0)
  {
    if (!v16) {
      goto LABEL_31;
    }
  }

  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if ((v16 & 1) != 0) {
      goto LABEL_31;
    }
  }

  uint64_t v17 = v11[6];
  char v18 = (float *)(a1 + v17);
  char v19 = *(_BYTE *)(a1 + v17 + 4);
  uint64_t v20 = (float *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 4);
  if ((v19 & 1) != 0)
  {
    if (!v21) {
      goto LABEL_31;
    }
  }

  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if ((v21 & 1) != 0) {
      goto LABEL_31;
    }
  }

  uint64_t v22 = v11[7];
  int v23 = (float *)(a1 + v22);
  char v24 = *(_BYTE *)(a1 + v22 + 4);
  int v25 = (float *)(a2 + v22);
  int v26 = *(unsigned __int8 *)(a2 + v22 + 4);
  if ((v24 & 1) != 0)
  {
    if (!v26) {
      goto LABEL_31;
    }
  }

  else
  {
    if (*v23 != *v25) {
      LOBYTE(v26) = 1;
    }
    if ((v26 & 1) != 0) {
      goto LABEL_31;
    }
  }

  uint64_t v27 = v11[8];
  uint64_t v28 = (float *)(a1 + v27);
  char v29 = *(_BYTE *)(a1 + v27 + 4);
  int v30 = (float *)(a2 + v27);
  int v31 = *(unsigned __int8 *)(a2 + v27 + 4);
  if ((v29 & 1) != 0)
  {
    if (!v31) {
      goto LABEL_31;
    }
  }

  else
  {
    if (*v28 != *v30) {
      LOBYTE(v31) = 1;
    }
    if ((v31 & 1) != 0) {
      goto LABEL_31;
    }
  }

  uint64_t v32 = v11[9];
  int v33 = *(unsigned __int8 *)(a1 + v32);
  int v34 = *(unsigned __int8 *)(a2 + v32);
  if (v33 == 2)
  {
    if (v34 == 2) {
      goto LABEL_30;
    }
LABEL_31:
    char v37 = 0;
    return v37 & 1;
  }

  if (v34 == 2 || ((((v34 & 1) == 0) ^ v33) & 1) == 0) {
    goto LABEL_31;
  }
LABEL_30:
  char v35 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v35(v10, a1, v4);
  v35(v8, a2, v4);
  uint64_t v36 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v37 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v36);
  uint64_t v38 = *(void (**)(char *, uint64_t))(v5 + 8);
  v38(v8, v4);
  v38(v10, v4);
  return v37 & 1;
}

uint64_t sub_100065E50(uint64_t a1, uint64_t a2)
{
  uint64_t v97 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v87 = *(void *)(v97 - 8);
  uint64_t v4 = __chkstk_darwin(v97);
  uint64_t v86 = (char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v85 = (char *)&v83 - v6;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0LL);
  uint64_t v90 = *(void *)(v7 - 8);
  uint64_t v91 = v7;
  __chkstk_darwin(v7);
  uint64_t v84 = (uint64_t)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v89 = sub_100003A0C(&qword_100355048);
  __chkstk_darwin(v89);
  uint64_t v92 = (char *)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100003A0C(&qword_100351890);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v96 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  double v94 = (char *)&v83 - v14;
  __chkstk_darwin(v13);
  uint64_t v95 = (char *)&v83 - v15;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0LL);
  uint64_t v99 = *(void *)(v16 - 8);
  uint64_t v100 = v16;
  __chkstk_darwin(v16);
  uint64_t v88 = (uint64_t)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v98 = sub_100003A0C(&qword_100355050);
  __chkstk_darwin(v98);
  uint64_t v101 = (uint64_t)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_100003A0C(&qword_100351888);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v93 = (uint64_t)&v83 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v102 = (uint64_t)&v83 - v23;
  __chkstk_darwin(v22);
  uint64_t v103 = (uint64_t)&v83 - v24;
  uint64_t v25 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v83 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = sub_100003A0C(&qword_100355058);
  __chkstk_darwin(v29);
  int v31 = (char *)&v83 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = sub_100003A0C(&qword_100351880);
  uint64_t v33 = __chkstk_darwin(v32);
  char v35 = (char *)&v83 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = __chkstk_darwin(v33);
  uint64_t v38 = (char *)&v83 - v37;
  __chkstk_darwin(v36);
  uint64_t v40 = (char *)&v83 - v39;
  uint64_t v41 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0LL);
  uint64_t v42 = *(int *)(v41 + 20);
  uint64_t v104 = a1;
  uint64_t v105 = a2;
  char v43 = (void *)(a1 + v42);
  char v44 = *(_BYTE *)(a1 + v42 + 8);
  uint64_t v45 = (void *)(a2 + v42);
  int v46 = *(unsigned __int8 *)(a2 + v42 + 8);
  if ((v44 & 1) != 0)
  {
    if (!v46) {
      goto LABEL_22;
    }
  }

  else
  {
    if (*v43 != *v45) {
      LOBYTE(v46) = 1;
    }
    if ((v46 & 1) != 0) {
      goto LABEL_22;
    }
  }

  uint64_t v47 = v41;
  sub_10000E6C0(v104 + *(int *)(v41 + 24), (uint64_t)v40, &qword_100351880);
  uint64_t v83 = v47;
  sub_10000E6C0(v105 + *(int *)(v47 + 24), (uint64_t)v38, &qword_100351880);
  uint64_t v48 = (uint64_t)&v31[*(int *)(v29 + 48)];
  sub_10000E6C0((uint64_t)v40, (uint64_t)v31, &qword_100351880);
  sub_10000E6C0((uint64_t)v38, v48, &qword_100351880);
  uint64_t v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  if (v49((uint64_t)v31, 1LL, v25) == 1)
  {
    sub_100015764((uint64_t)v38, &qword_100351880);
    sub_100015764((uint64_t)v40, &qword_100351880);
    if (v49(v48, 1LL, v25) == 1)
    {
      sub_100015764((uint64_t)v31, &qword_100351880);
      goto LABEL_15;
    }

uint64_t sub_1000667DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v50 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v49 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v48 = (char *)&v45 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v47 = (uint64_t)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100003A0C(&qword_1003550C8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100003A0C(&qword_1003517D8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v51 = (uint64_t)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v45 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v45 - v20;
  uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
  uint64_t v23 = v22;
  uint64_t v24 = *(int *)(v22 + 20);
  uint64_t v25 = (_DWORD *)(a1 + v24);
  char v26 = *(_BYTE *)(a1 + v24 + 4);
  uint64_t v52 = a2;
  uint64_t v27 = (_DWORD *)(a2 + v24);
  int v28 = *(unsigned __int8 *)(a2 + v24 + 4);
  if ((v26 & 1) != 0)
  {
    if (!v28) {
      goto LABEL_13;
    }
  }

  else
  {
    if (*v25 != *v27) {
      LOBYTE(v28) = 1;
    }
    if ((v28 & 1) != 0) {
      goto LABEL_13;
    }
  }

  uint64_t v46 = v4;
  uint64_t v29 = a1;
  sub_10000E6C0(a1 + *(int *)(v22 + 24), (uint64_t)v21, &qword_1003517D8);
  sub_10000E6C0(v52 + *(int *)(v23 + 24), (uint64_t)v19, &qword_1003517D8);
  uint64_t v30 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E6C0((uint64_t)v21, (uint64_t)v13, &qword_1003517D8);
  sub_10000E6C0((uint64_t)v19, v30, &qword_1003517D8);
  int v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v31((uint64_t)v13, 1LL, v8) == 1)
  {
    sub_100015764((uint64_t)v19, &qword_1003517D8);
    sub_100015764((uint64_t)v21, &qword_1003517D8);
    int v32 = v31(v30, 1LL, v8);
    uint64_t v33 = v46;
    if (v32 == 1)
    {
      sub_100015764((uint64_t)v13, &qword_1003517D8);
LABEL_16:
      uint64_t v39 = v50;
      uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
      uint64_t v41 = v48;
      v40(v48, v29, v33);
      uint64_t v42 = v49;
      v40(v49, v52, v33);
      uint64_t v43 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v35 = dispatch thunk of static Equatable.== infix(_:_:)(v41, v42, v33, v43);
      char v44 = *(void (**)(char *, uint64_t))(v39 + 8);
      v44(v42, v33);
      v44(v41, v33);
      return v35 & 1;
    }

    goto LABEL_12;
  }

  uint64_t v34 = v51;
  sub_10000E6C0((uint64_t)v13, v51, &qword_1003517D8);
  if (v31(v30, 1LL, v8) == 1)
  {
    sub_100015764((uint64_t)v19, &qword_1003517D8);
    sub_100015764((uint64_t)v21, &qword_1003517D8);
    sub_100004090(v34, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
LABEL_12:
    sub_100015764((uint64_t)v13, &qword_1003550C8);
    goto LABEL_13;
  }

  uint64_t v37 = v47;
  sub_100003E68(v30, v47, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  char v38 = sub_100067544(v34, v37);
  sub_100004090(v37, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  sub_100015764((uint64_t)v19, &qword_1003517D8);
  sub_100015764((uint64_t)v21, &qword_1003517D8);
  sub_100004090(v34, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  sub_100015764((uint64_t)v13, &qword_1003517D8);
  uint64_t v33 = v46;
  if ((v38 & 1) != 0) {
    goto LABEL_16;
  }
LABEL_13:
  char v35 = 0;
  return v35 & 1;
}

uint64_t sub_100066BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v75 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v74 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v73 = (char *)&v70 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v76 = (uint64_t)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100003A0C(&qword_1003550C0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100003A0C(&qword_1003517E0);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v70 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v70 - v21;
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
  uint64_t v24 = *(int *)(v23 + 20);
  uint64_t v25 = a1;
  char v26 = (_DWORD *)(a1 + v24);
  char v27 = *(_BYTE *)(a1 + v24 + 4);
  uint64_t v77 = a2;
  int v28 = (_DWORD *)(a2 + v24);
  int v29 = *(unsigned __int8 *)(a2 + v24 + 4);
  if ((v27 & 1) != 0)
  {
    if (!v29) {
      goto LABEL_13;
    }
  }

  else
  {
    if (*v26 != *v28) {
      LOBYTE(v29) = 1;
    }
    if ((v29 & 1) != 0) {
      goto LABEL_13;
    }
  }

  uint64_t v71 = v4;
  uint64_t v30 = a1;
  int v31 = (int *)v23;
  sub_10000E6C0(v25 + *(int *)(v23 + 24), (uint64_t)v22, &qword_1003517E0);
  uint64_t v72 = v31;
  sub_10000E6C0(v77 + v31[6], (uint64_t)v20, &qword_1003517E0);
  uint64_t v32 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E6C0((uint64_t)v22, (uint64_t)v13, &qword_1003517E0);
  sub_10000E6C0((uint64_t)v20, v32, &qword_1003517E0);
  uint64_t v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v33((uint64_t)v13, 1LL, v8) != 1)
  {
    sub_10000E6C0((uint64_t)v13, (uint64_t)v17, &qword_1003517E0);
    if (v33(v32, 1LL, v8) != 1)
    {
      uint64_t v36 = v76;
      sub_100003E68(v32, v76, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      char v37 = sub_1000667DC((uint64_t)v17, v36);
      sub_100004090(v36, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      sub_100015764((uint64_t)v20, &qword_1003517E0);
      sub_100015764((uint64_t)v22, &qword_1003517E0);
      sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      sub_100015764((uint64_t)v13, &qword_1003517E0);
      if ((v37 & 1) == 0) {
        goto LABEL_13;
      }
      goto LABEL_16;
    }

    sub_100015764((uint64_t)v20, &qword_1003517E0);
    sub_100015764((uint64_t)v22, &qword_1003517E0);
    sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
LABEL_12:
    sub_100015764((uint64_t)v13, &qword_1003550C0);
    goto LABEL_13;
  }

  sub_100015764((uint64_t)v20, &qword_1003517E0);
  sub_100015764((uint64_t)v22, &qword_1003517E0);
  if (v33(v32, 1LL, v8) != 1) {
    goto LABEL_12;
  }
  sub_100015764((uint64_t)v13, &qword_1003517E0);
LABEL_16:
  uint64_t v38 = v72[7];
  uint64_t v39 = (_DWORD *)(v30 + v38);
  char v40 = *(_BYTE *)(v30 + v38 + 4);
  uint64_t v41 = (_DWORD *)(v77 + v38);
  int v42 = *(unsigned __int8 *)(v77 + v38 + 4);
  if ((v40 & 1) != 0)
  {
    if (!v42) {
      goto LABEL_13;
    }
  }

  else
  {
    if (*v39 != *v41) {
      LOBYTE(v42) = 1;
    }
    if ((v42 & 1) != 0) {
      goto LABEL_13;
    }
  }

  uint64_t v43 = v72[8];
  char v44 = (_DWORD *)(v30 + v43);
  char v45 = *(_BYTE *)(v30 + v43 + 4);
  uint64_t v46 = (_DWORD *)(v77 + v43);
  int v47 = *(unsigned __int8 *)(v77 + v43 + 4);
  if ((v45 & 1) != 0)
  {
    if (!v47) {
      goto LABEL_13;
    }
  }

  else
  {
    if (*v44 != *v46) {
      LOBYTE(v47) = 1;
    }
    if ((v47 & 1) != 0) {
      goto LABEL_13;
    }
  }

  uint64_t v48 = v72[9];
  uint64_t v49 = (_DWORD *)(v30 + v48);
  char v50 = *(_BYTE *)(v30 + v48 + 4);
  uint64_t v51 = (_DWORD *)(v77 + v48);
  int v52 = *(unsigned __int8 *)(v77 + v48 + 4);
  if ((v50 & 1) != 0)
  {
    if (!v52) {
      goto LABEL_13;
    }
  }

  else
  {
    if (*v49 != *v51) {
      LOBYTE(v52) = 1;
    }
    if ((v52 & 1) != 0) {
      goto LABEL_13;
    }
  }

  uint64_t v53 = v72[10];
  uint64_t v54 = (_DWORD *)(v30 + v53);
  char v55 = *(_BYTE *)(v30 + v53 + 4);
  uint64_t v56 = (_DWORD *)(v77 + v53);
  int v57 = *(unsigned __int8 *)(v77 + v53 + 4);
  if ((v55 & 1) != 0)
  {
    if (!v57) {
      goto LABEL_13;
    }
  }

  else
  {
    if (*v54 != *v56) {
      LOBYTE(v57) = 1;
    }
    if ((v57 & 1) != 0) {
      goto LABEL_13;
    }
  }

  uint64_t v58 = v72[11];
  uint64_t v59 = (_DWORD *)(v30 + v58);
  char v60 = *(_BYTE *)(v30 + v58 + 4);
  uint64_t v61 = (_DWORD *)(v77 + v58);
  int v62 = *(unsigned __int8 *)(v77 + v58 + 4);
  if ((v60 & 1) == 0)
  {
    if (*v59 != *v61) {
      LOBYTE(v62) = 1;
    }
    if ((v62 & 1) != 0) {
      goto LABEL_13;
    }
LABEL_46:
    uint64_t v63 = v75;
    uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t))(v75 + 16);
    uint64_t v65 = v73;
    uint64_t v66 = v71;
    v64(v73, v30, v71);
    char v67 = v74;
    v64(v74, v77, v66);
    uint64_t v68 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v34 = dispatch thunk of static Equatable.== infix(_:_:)(v65, v67, v66, v68);
    uint64_t v69 = *(void (**)(char *, uint64_t))(v63 + 8);
    v69(v67, v66);
    v69(v65, v66);
    return v34 & 1;
  }

  if (v62) {
    goto LABEL_46;
  }
LABEL_13:
  char v34 = 0;
  return v34 & 1;
}

uint64_t sub_100067128(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v50 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v49 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v48 = (char *)&v45 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v47 = (uint64_t)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100003A0C(&qword_1003550B8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100003A0C(&qword_1003517E8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v51 = (uint64_t)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v45 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v45 - v20;
  uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL);
  uint64_t v23 = v22;
  uint64_t v24 = *(int *)(v22 + 20);
  uint64_t v25 = (_DWORD *)(a1 + v24);
  char v26 = *(_BYTE *)(a1 + v24 + 4);
  uint64_t v52 = a2;
  char v27 = (_DWORD *)(a2 + v24);
  int v28 = *(unsigned __int8 *)(a2 + v24 + 4);
  if ((v26 & 1) != 0)
  {
    if (!v28) {
      goto LABEL_13;
    }
  }

  else
  {
    if (*v25 != *v27) {
      LOBYTE(v28) = 1;
    }
    if ((v28 & 1) != 0) {
      goto LABEL_13;
    }
  }

  uint64_t v46 = v4;
  uint64_t v29 = a1;
  sub_10000E6C0(a1 + *(int *)(v22 + 24), (uint64_t)v21, &qword_1003517E8);
  sub_10000E6C0(v52 + *(int *)(v23 + 24), (uint64_t)v19, &qword_1003517E8);
  uint64_t v30 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E6C0((uint64_t)v21, (uint64_t)v13, &qword_1003517E8);
  sub_10000E6C0((uint64_t)v19, v30, &qword_1003517E8);
  int v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v31((uint64_t)v13, 1LL, v8) == 1)
  {
    sub_100015764((uint64_t)v19, &qword_1003517E8);
    sub_100015764((uint64_t)v21, &qword_1003517E8);
    int v32 = v31(v30, 1LL, v8);
    uint64_t v33 = v46;
    if (v32 == 1)
    {
      sub_100015764((uint64_t)v13, &qword_1003517E8);
LABEL_16:
      uint64_t v39 = v50;
      char v40 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
      uint64_t v41 = v48;
      v40(v48, v29, v33);
      int v42 = v49;
      v40(v49, v52, v33);
      uint64_t v43 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v35 = dispatch thunk of static Equatable.== infix(_:_:)(v41, v42, v33, v43);
      char v44 = *(void (**)(char *, uint64_t))(v39 + 8);
      v44(v42, v33);
      v44(v41, v33);
      return v35 & 1;
    }

    goto LABEL_12;
  }

  uint64_t v34 = v51;
  sub_10000E6C0((uint64_t)v13, v51, &qword_1003517E8);
  if (v31(v30, 1LL, v8) == 1)
  {
    sub_100015764((uint64_t)v19, &qword_1003517E8);
    sub_100015764((uint64_t)v21, &qword_1003517E8);
    sub_100004090(v34, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
LABEL_12:
    sub_100015764((uint64_t)v13, &qword_1003550B8);
    goto LABEL_13;
  }

  uint64_t v37 = v47;
  sub_100003E68(v30, v47, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  char v38 = sub_100066BF8(v34, v37);
  sub_100004090(v37, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  sub_100015764((uint64_t)v19, &qword_1003517E8);
  sub_100015764((uint64_t)v21, &qword_1003517E8);
  sub_100004090(v34, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  sub_100015764((uint64_t)v13, &qword_1003517E8);
  uint64_t v33 = v46;
  if ((v38 & 1) != 0) {
    goto LABEL_16;
  }
LABEL_13:
  char v35 = 0;
  return v35 & 1;
}

uint64_t sub_100067544(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v26 - v9;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
  uint64_t v12 = *(int *)(v11 + 20);
  uint64_t v13 = (_DWORD *)(a1 + v12);
  char v14 = *(_BYTE *)(a1 + v12 + 4);
  uint64_t v15 = (_DWORD *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 4);
  if ((v14 & 1) != 0)
  {
    if (!v16) {
      goto LABEL_14;
    }
  }

  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if ((v16 & 1) != 0) {
      goto LABEL_14;
    }
  }

  uint64_t v17 = *(int *)(v11 + 24);
  int v18 = *(unsigned __int8 *)(a1 + v17);
  int v19 = *(unsigned __int8 *)(a2 + v17);
  if (v18 != 5)
  {
    if (v19 != 5 && v18 == v19) {
      goto LABEL_9;
    }
LABEL_14:
    char v22 = 0;
    return v22 & 1;
  }

  if (v19 != 5) {
    goto LABEL_14;
  }
LABEL_9:
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v20(v10, a1, v4);
  v20(v8, a2, v4);
  uint64_t v21 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v22 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v21);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v5 + 8);
  v23(v8, v4);
  v23(v10, v4);
  return v22 & 1;
}

unint64_t sub_1000676BC()
{
  unint64_t result = qword_100351AB8;
  if (!qword_100351AB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B444C, &type metadata for CLP_LogEntry_PrivateData_GlonassSlotSource);
    atomic_store(result, (unint64_t *)&qword_100351AB8);
  }

  return result;
}

unint64_t sub_100067704()
{
  unint64_t result = qword_100351AC0;
  if (!qword_100351AC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B4474, &type metadata for CLP_LogEntry_PrivateData_GlonassSlotSource);
    atomic_store(result, (unint64_t *)&qword_100351AC0);
  }

  return result;
}

unint64_t sub_10006774C()
{
  unint64_t result = qword_100351AC8;
  if (!qword_100351AC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B44FC, &type metadata for CLP_LogEntry_PrivateData_GlonassSlotSource);
    atomic_store(result, (unint64_t *)&qword_100351AC8);
  }

  return result;
}

uint64_t sub_100067790()
{
  return sub_100010014(&qword_100351AD0, &qword_100351AD8);
}

unint64_t sub_1000677B8()
{
  unint64_t result = qword_100351AE0;
  if (!qword_100351AE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B456C, &type metadata for CLP_LogEntry_PrivateData_SatelliteSystem);
    atomic_store(result, (unint64_t *)&qword_100351AE0);
  }

  return result;
}

unint64_t sub_100067800()
{
  unint64_t result = qword_100351AE8;
  if (!qword_100351AE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B4594, &type metadata for CLP_LogEntry_PrivateData_SatelliteSystem);
    atomic_store(result, (unint64_t *)&qword_100351AE8);
  }

  return result;
}

unint64_t sub_100067848()
{
  unint64_t result = qword_100351AF0;
  if (!qword_100351AF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B461C, &type metadata for CLP_LogEntry_PrivateData_SatelliteSystem);
    atomic_store(result, (unint64_t *)&qword_100351AF0);
  }

  return result;
}

uint64_t sub_10006788C()
{
  return sub_100010014(&qword_100351AF8, &qword_100351B00);
}

unint64_t sub_1000678B4()
{
  unint64_t result = qword_100351B08;
  if (!qword_100351B08)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B468C, &type metadata for CLP_LogEntry_PrivateData_Band);
    atomic_store(result, (unint64_t *)&qword_100351B08);
  }

  return result;
}

unint64_t sub_1000678FC()
{
  unint64_t result = qword_100351B10;
  if (!qword_100351B10)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B46B4, &type metadata for CLP_LogEntry_PrivateData_Band);
    atomic_store(result, (unint64_t *)&qword_100351B10);
  }

  return result;
}

unint64_t sub_100067944()
{
  unint64_t result = qword_100351B18;
  if (!qword_100351B18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B473C, &type metadata for CLP_LogEntry_PrivateData_Band);
    atomic_store(result, (unint64_t *)&qword_100351B18);
  }

  return result;
}

uint64_t sub_100067988()
{
  return sub_100010014(&qword_100351B20, &qword_100351B28);
}

unint64_t sub_1000679B0()
{
  unint64_t result = qword_100351B30;
  if (!qword_100351B30)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B47AC, &type metadata for CLP_LogEntry_PrivateData_FullSvTimeSource);
    atomic_store(result, (unint64_t *)&qword_100351B30);
  }

  return result;
}

unint64_t sub_1000679F8()
{
  unint64_t result = qword_100351B38;
  if (!qword_100351B38)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B47D4, &type metadata for CLP_LogEntry_PrivateData_FullSvTimeSource);
    atomic_store(result, (unint64_t *)&qword_100351B38);
  }

  return result;
}

unint64_t sub_100067A40()
{
  unint64_t result = qword_100351B40;
  if (!qword_100351B40)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B485C, &type metadata for CLP_LogEntry_PrivateData_FullSvTimeSource);
    atomic_store(result, (unint64_t *)&qword_100351B40);
  }

  return result;
}

uint64_t sub_100067A84()
{
  return sub_100010014(&qword_100351B48, &qword_100351B50);
}

unint64_t sub_100067AAC()
{
  unint64_t result = qword_100351B58;
  if (!qword_100351B58)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002B48CC,  &type metadata for CLP_LogEntry_PrivateData_MeasurementDetectionMethod);
    atomic_store(result, (unint64_t *)&qword_100351B58);
  }

  return result;
}

unint64_t sub_100067AF4()
{
  unint64_t result = qword_100351B60;
  if (!qword_100351B60)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002B48F4,  &type metadata for CLP_LogEntry_PrivateData_MeasurementDetectionMethod);
    atomic_store(result, (unint64_t *)&qword_100351B60);
  }

  return result;
}

unint64_t sub_100067B3C()
{
  unint64_t result = qword_100351B68;
  if (!qword_100351B68)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002B497C,  &type metadata for CLP_LogEntry_PrivateData_MeasurementDetectionMethod);
    atomic_store(result, (unint64_t *)&qword_100351B68);
  }

  return result;
}

uint64_t sub_100067B80()
{
  return sub_100010014(&qword_100351B70, &qword_100351B78);
}

unint64_t sub_100067BA8()
{
  unint64_t result = qword_100351B80;
  if (!qword_100351B80)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B49EC, &type metadata for CLP_LogEntry_PrivateData_MultipathIndicator);
    atomic_store(result, (unint64_t *)&qword_100351B80);
  }

  return result;
}

unint64_t sub_100067BF0()
{
  unint64_t result = qword_100351B88;
  if (!qword_100351B88)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B4A14, &type metadata for CLP_LogEntry_PrivateData_MultipathIndicator);
    atomic_store(result, (unint64_t *)&qword_100351B88);
  }

  return result;
}

unint64_t sub_100067C38()
{
  unint64_t result = qword_100351B90;
  if (!qword_100351B90)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B4A9C, &type metadata for CLP_LogEntry_PrivateData_MultipathIndicator);
    atomic_store(result, (unint64_t *)&qword_100351B90);
  }

  return result;
}

uint64_t sub_100067C7C()
{
  return sub_100010014(&qword_100351B98, &qword_100351BA0);
}

unint64_t sub_100067CA4()
{
  unint64_t result = qword_100351BA8;
  if (!qword_100351BA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B4B0C, &type metadata for CLP_LogEntry_PrivateData_SvPositionSource);
    atomic_store(result, (unint64_t *)&qword_100351BA8);
  }

  return result;
}

unint64_t sub_100067CEC()
{
  unint64_t result = qword_100351BB0;
  if (!qword_100351BB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B4B34, &type metadata for CLP_LogEntry_PrivateData_SvPositionSource);
    atomic_store(result, (unint64_t *)&qword_100351BB0);
  }

  return result;
}

unint64_t sub_100067D34()
{
  unint64_t result = qword_100351BB8;
  if (!qword_100351BB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B4BBC, &type metadata for CLP_LogEntry_PrivateData_SvPositionSource);
    atomic_store(result, (unint64_t *)&qword_100351BB8);
  }

  return result;
}

uint64_t sub_100067D78()
{
  return sub_100010014(&qword_100351BC0, &qword_100351BC8);
}

unint64_t sub_100067DA0()
{
  unint64_t result = qword_100351BD0;
  if (!qword_100351BD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B4C2C, &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication);
    atomic_store(result, (unint64_t *)&qword_100351BD0);
  }

  return result;
}

unint64_t sub_100067DE8()
{
  unint64_t result = qword_100351BD8;
  if (!qword_100351BD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B4C54, &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication);
    atomic_store(result, (unint64_t *)&qword_100351BD8);
  }

  return result;
}

unint64_t sub_100067E30()
{
  unint64_t result = qword_100351BE0;
  if (!qword_100351BE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B4CDC, &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication);
    atomic_store(result, (unint64_t *)&qword_100351BE0);
  }

  return result;
}

uint64_t sub_100067E74()
{
  return sub_100010014(&qword_100351BE8, &qword_100351BF0);
}

unint64_t sub_100067E9C()
{
  unint64_t result = qword_100351BF8;
  if (!qword_100351BF8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002B4D4C,  &type metadata for CLP_LogEntry_PrivateData_IonosphericCorrectionSource);
    atomic_store(result, (unint64_t *)&qword_100351BF8);
  }

  return result;
}

unint64_t sub_100067EE4()
{
  unint64_t result = qword_100351C00;
  if (!qword_100351C00)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002B4D74,  &type metadata for CLP_LogEntry_PrivateData_IonosphericCorrectionSource);
    atomic_store(result, (unint64_t *)&qword_100351C00);
  }

  return result;
}

unint64_t sub_100067F2C()
{
  unint64_t result = qword_100351C08;
  if (!qword_100351C08)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002B4DFC,  &type metadata for CLP_LogEntry_PrivateData_IonosphericCorrectionSource);
    atomic_store(result, (unint64_t *)&qword_100351C08);
  }

  return result;
}

uint64_t sub_100067F70()
{
  return sub_100010014(&qword_100351C10, &qword_100351C18);
}

unint64_t sub_100067F98()
{
  unint64_t result = qword_100351C20;
  if (!qword_100351C20)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002B4E6C,  &type metadata for CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge);
    atomic_store(result, (unint64_t *)&qword_100351C20);
  }

  return result;
}

unint64_t sub_100067FE0()
{
  unint64_t result = qword_100351C28;
  if (!qword_100351C28)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002B4E94,  &type metadata for CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge);
    atomic_store(result, (unint64_t *)&qword_100351C28);
  }

  return result;
}

unint64_t sub_100068028()
{
  unint64_t result = qword_100351C30;
  if (!qword_100351C30)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002B4F1C,  &type metadata for CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge);
    atomic_store(result, (unint64_t *)&qword_100351C30);
  }

  return result;
}

uint64_t sub_10006806C()
{
  return sub_100010014(&qword_100351C38, &qword_100351C40);
}

unint64_t sub_100068094()
{
  unint64_t result = qword_100351C48;
  if (!qword_100351C48)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002B4F8C,  &type metadata for CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated);
    atomic_store(result, (unint64_t *)&qword_100351C48);
  }

  return result;
}

unint64_t sub_1000680DC()
{
  unint64_t result = qword_100351C50;
  if (!qword_100351C50)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002B4FB4,  &type metadata for CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated);
    atomic_store(result, (unint64_t *)&qword_100351C50);
  }

  return result;
}

unint64_t sub_100068124()
{
  unint64_t result = qword_100351C58;
  if (!qword_100351C58)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002B503C,  &type metadata for CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated);
    atomic_store(result, (unint64_t *)&qword_100351C58);
  }

  return result;
}

uint64_t sub_100068168()
{
  return sub_100010014(&qword_100351C60, &qword_100351C68);
}

unint64_t sub_100068190()
{
  unint64_t result = qword_100351C70;
  if (!qword_100351C70)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B50AC, &type metadata for CLP_LogEntry_PrivateData_SvReferencePoint);
    atomic_store(result, (unint64_t *)&qword_100351C70);
  }

  return result;
}

unint64_t sub_1000681D8()
{
  unint64_t result = qword_100351C78;
  if (!qword_100351C78)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B50D4, &type metadata for CLP_LogEntry_PrivateData_SvReferencePoint);
    atomic_store(result, (unint64_t *)&qword_100351C78);
  }

  return result;
}

unint64_t sub_100068220()
{
  unint64_t result = qword_100351C80;
  if (!qword_100351C80)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B515C, &type metadata for CLP_LogEntry_PrivateData_SvReferencePoint);
    atomic_store(result, (unint64_t *)&qword_100351C80);
  }

  return result;
}

uint64_t sub_100068264()
{
  return sub_100010014(&qword_100351C88, &qword_100351C90);
}

uint64_t sub_100068288()
{
  return sub_10000FD98( &qword_100351C98,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo,  (uint64_t)&unk_1002B5484);
}

uint64_t sub_1000682B4()
{
  return sub_10000FD98( &qword_100351CA0,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo,  (uint64_t)&unk_1002B53AC);
}

uint64_t sub_1000682E0()
{
  return sub_10000FD98( &qword_100351928,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo,  (uint64_t)&unk_1002B54AC);
}

uint64_t sub_10006830C()
{
  return sub_10000FD98( &qword_100351CA8,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo,  (uint64_t)&unk_1002B54EC);
}

uint64_t sub_100068338()
{
  return sub_10000FD98( &qword_100351CB0,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassId,  (uint64_t)&unk_1002B55EC);
}

uint64_t sub_100068364()
{
  return sub_10000FD98( &qword_100351CB8,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassId,  (uint64_t)&unk_1002B5514);
}

uint64_t sub_100068390()
{
  return sub_10000FD98( &qword_100351930,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassId,  (uint64_t)&unk_1002B5614);
}

uint64_t sub_1000683BC()
{
  return sub_10000FD98( &qword_100351CC0,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassId,  (uint64_t)&unk_1002B5654);
}

uint64_t sub_1000683E8()
{
  return sub_10000FD98( &qword_100351CC8,  type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId,  (uint64_t)&unk_1002B5754);
}

uint64_t sub_100068414()
{
  return sub_10000FD98( &qword_100351CD0,  type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId,  (uint64_t)&unk_1002B567C);
}

uint64_t sub_100068440()
{
  return sub_10000FD98( &qword_100351938,  type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId,  (uint64_t)&unk_1002B577C);
}

uint64_t sub_10006846C()
{
  return sub_10000FD98( &qword_100351CD8,  type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId,  (uint64_t)&unk_1002B57BC);
}

uint64_t sub_100068498()
{
  return sub_10000FD98( &qword_100351CE0,  type metadata accessor for CLP_LogEntry_PrivateData_SvId,  (uint64_t)&unk_1002B58BC);
}

uint64_t sub_1000684C4()
{
  return sub_10000FD98( &qword_100351CE8,  type metadata accessor for CLP_LogEntry_PrivateData_SvId,  (uint64_t)&unk_1002B57E4);
}

uint64_t sub_1000684F0()
{
  return sub_10000FD98( &qword_100351940,  type metadata accessor for CLP_LogEntry_PrivateData_SvId,  (uint64_t)&unk_1002B58E4);
}

uint64_t sub_10006851C()
{
  return sub_10000FD98( &qword_100351CF0,  type metadata accessor for CLP_LogEntry_PrivateData_SvId,  (uint64_t)&unk_1002B5924);
}

uint64_t sub_100068548()
{
  return sub_10000FD98( &qword_100351CF8,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState,  (uint64_t)&unk_1002B5A24);
}

uint64_t sub_100068574()
{
  return sub_10000FD98( &qword_100351D00,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState,  (uint64_t)&unk_1002B594C);
}

uint64_t sub_1000685A0()
{
  return sub_10000FD98( &qword_100351948,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState,  (uint64_t)&unk_1002B5A4C);
}

uint64_t sub_1000685CC()
{
  return sub_10000FD98( &qword_100351D08,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState,  (uint64_t)&unk_1002B5A8C);
}

uint64_t sub_1000685F8()
{
  return sub_10000FD98( &qword_100351D10,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState,  (uint64_t)&unk_1002B5B8C);
}

uint64_t sub_100068624()
{
  return sub_10000FD98( &qword_100351D18,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState,  (uint64_t)&unk_1002B5AB4);
}

uint64_t sub_100068650()
{
  return sub_10000FD98( &qword_100351950,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState,  (uint64_t)&unk_1002B5BB4);
}

uint64_t sub_10006867C()
{
  return sub_10000FD98( &qword_100351D20,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState,  (uint64_t)&unk_1002B5BF4);
}

uint64_t sub_1000686A8()
{
  return sub_10000FD98( &qword_100351D28,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState,  (uint64_t)&unk_1002B5CF4);
}

uint64_t sub_1000686D4()
{
  return sub_10000FD98( &qword_100351D30,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState,  (uint64_t)&unk_1002B5C1C);
}

uint64_t sub_100068700()
{
  return sub_10000FD98( &qword_100351958,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState,  (uint64_t)&unk_1002B5D1C);
}

uint64_t sub_10006872C()
{
  return sub_10000FD98( &qword_100351D38,  type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState,  (uint64_t)&unk_1002B5D5C);
}

uint64_t sub_100068758()
{
  return sub_10000FD98( &qword_100351D40,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState,  (uint64_t)&unk_1002B5E5C);
}

uint64_t sub_100068784()
{
  return sub_10000FD98( &qword_100351D48,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState,  (uint64_t)&unk_1002B5D84);
}

uint64_t sub_1000687B0()
{
  return sub_10000FD98( &qword_100351960,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState,  (uint64_t)&unk_1002B5E84);
}

uint64_t sub_1000687DC()
{
  return sub_10000FD98( &qword_100351D50,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState,  (uint64_t)&unk_1002B5EC4);
}

uint64_t sub_100068808()
{
  return sub_10000FD98( &qword_100351D58,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState,  (uint64_t)&unk_1002B5FC4);
}

uint64_t sub_100068834()
{
  return sub_10000FD98( &qword_100351D60,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState,  (uint64_t)&unk_1002B5EEC);
}

uint64_t sub_100068860()
{
  return sub_10000FD98( &qword_100351968,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState,  (uint64_t)&unk_1002B5FEC);
}

uint64_t sub_10006888C()
{
  return sub_10000FD98( &qword_100351D68,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState,  (uint64_t)&unk_1002B602C);
}

uint64_t sub_1000688B8()
{
  return sub_10000FD98( &qword_100351D70,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState,  (uint64_t)&unk_1002B612C);
}

uint64_t sub_1000688E4()
{
  return sub_10000FD98( &qword_100351D78,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState,  (uint64_t)&unk_1002B6054);
}

uint64_t sub_100068910()
{
  return sub_10000FD98( &qword_100351970,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState,  (uint64_t)&unk_1002B6154);
}

uint64_t sub_10006893C()
{
  return sub_10000FD98( &qword_100351D80,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState,  (uint64_t)&unk_1002B6194);
}

uint64_t sub_100068968()
{
  return sub_10000FD98( &qword_100351D88,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState,  (uint64_t)&unk_1002B6294);
}

uint64_t sub_100068994()
{
  return sub_10000FD98( &qword_100351D90,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState,  (uint64_t)&unk_1002B61BC);
}

uint64_t sub_1000689C0()
{
  return sub_10000FD98( &qword_100351978,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState,  (uint64_t)&unk_1002B62BC);
}

uint64_t sub_1000689EC()
{
  return sub_10000FD98( &qword_100351D98,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState,  (uint64_t)&unk_1002B62FC);
}

uint64_t sub_100068A18()
{
  return sub_10000FD98( &qword_100351DA0,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState,  (uint64_t)&unk_1002B63FC);
}

uint64_t sub_100068A44()
{
  return sub_10000FD98( &qword_100351DA8,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState,  (uint64_t)&unk_1002B6324);
}

uint64_t sub_100068A70()
{
  return sub_10000FD98( &qword_100351980,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState,  (uint64_t)&unk_1002B6424);
}

uint64_t sub_100068A9C()
{
  return sub_10000FD98( &qword_100351DB0,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState,  (uint64_t)&unk_1002B6464);
}

uint64_t sub_100068AC8()
{
  return sub_10000FD98( &qword_100351DB8,  type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState,  (uint64_t)&unk_1002B6564);
}

uint64_t sub_100068AF4()
{
  return sub_10000FD98( &qword_100351DC0,  type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState,  (uint64_t)&unk_1002B648C);
}

uint64_t sub_100068B20()
{
  return sub_10000FD98( &qword_100351988,  type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState,  (uint64_t)&unk_1002B658C);
}

uint64_t sub_100068B4C()
{
  return sub_10000FD98( &qword_100351DC8,  type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState,  (uint64_t)&unk_1002B65CC);
}

uint64_t sub_100068B78()
{
  return sub_10000FD98( &qword_100351DD0,  type metadata accessor for CLP_LogEntry_PrivateData_SyncState,  (uint64_t)&unk_1002B66CC);
}

uint64_t sub_100068BA4()
{
  return sub_10000FD98( &qword_100351DD8,  type metadata accessor for CLP_LogEntry_PrivateData_SyncState,  (uint64_t)&unk_1002B65F4);
}

uint64_t sub_100068BD0()
{
  return sub_10000FD98( &qword_100351990,  type metadata accessor for CLP_LogEntry_PrivateData_SyncState,  (uint64_t)&unk_1002B66F4);
}

uint64_t sub_100068BFC()
{
  return sub_10000FD98( &qword_100351DE0,  type metadata accessor for CLP_LogEntry_PrivateData_SyncState,  (uint64_t)&unk_1002B6734);
}

uint64_t sub_100068C28()
{
  return sub_10000FD98( &qword_100351DE8,  type metadata accessor for CLP_LogEntry_PrivateData_SvTime,  (uint64_t)&unk_1002B6834);
}

uint64_t sub_100068C54()
{
  return sub_10000FD98( &qword_100351DF0,  type metadata accessor for CLP_LogEntry_PrivateData_SvTime,  (uint64_t)&unk_1002B675C);
}

uint64_t sub_100068C80()
{
  return sub_10000FD98( &qword_100351998,  type metadata accessor for CLP_LogEntry_PrivateData_SvTime,  (uint64_t)&unk_1002B685C);
}

uint64_t sub_100068CAC()
{
  return sub_10000FD98( &qword_100351DF8,  type metadata accessor for CLP_LogEntry_PrivateData_SvTime,  (uint64_t)&unk_1002B689C);
}

uint64_t sub_100068CD8()
{
  return sub_10000FD98( &qword_100351E00,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset,  (uint64_t)&unk_1002B699C);
}

uint64_t sub_100068D04()
{
  return sub_10000FD98( &qword_100351E08,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset,  (uint64_t)&unk_1002B68C4);
}

uint64_t sub_100068D30()
{
  return sub_10000FD98( &qword_1003519A0,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset,  (uint64_t)&unk_1002B69C4);
}

uint64_t sub_100068D5C()
{
  return sub_10000FD98( &qword_100351E10,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset,  (uint64_t)&unk_1002B6A04);
}

uint64_t sub_100068D88()
{
  return sub_10000FD98( &qword_100351E18,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking,  (uint64_t)&unk_1002B6B04);
}

uint64_t sub_100068DB4()
{
  return sub_10000FD98( &qword_100351E20,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking,  (uint64_t)&unk_1002B6A2C);
}

uint64_t sub_100068DE0()
{
  return sub_10000FD98( &qword_1003519A8,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking,  (uint64_t)&unk_1002B6B2C);
}

uint64_t sub_100068E0C()
{
  return sub_10000FD98( &qword_100351E28,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking,  (uint64_t)&unk_1002B6B6C);
}

uint64_t sub_100068E38()
{
  return sub_10000FD98( &qword_100351E30,  type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking,  (uint64_t)&unk_1002B6C6C);
}

uint64_t sub_100068E64()
{
  return sub_10000FD98( &qword_100351E38,  type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking,  (uint64_t)&unk_1002B6B94);
}

uint64_t sub_100068E90()
{
  return sub_10000FD98( &qword_1003519B0,  type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking,  (uint64_t)&unk_1002B6C94);
}

uint64_t sub_100068EBC()
{
  return sub_10000FD98( &qword_100351E40,  type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking,  (uint64_t)&unk_1002B6CD4);
}

uint64_t sub_100068EE8()
{
  return sub_10000FD98( &qword_100351E48,  type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak,  (uint64_t)&unk_1002B6DD4);
}

uint64_t sub_100068F14()
{
  return sub_10000FD98( &qword_100351E50,  type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak,  (uint64_t)&unk_1002B6CFC);
}

uint64_t sub_100068F40()
{
  return sub_10000FD98( &qword_1003519B8,  type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak,  (uint64_t)&unk_1002B6DFC);
}

uint64_t sub_100068F6C()
{
  return sub_10000FD98( &qword_100351E58,  type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak,  (uint64_t)&unk_1002B6E3C);
}

uint64_t sub_100068F98()
{
  return sub_10000FD98( &qword_100351E60,  type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime,  (uint64_t)&unk_1002B6F3C);
}

uint64_t sub_100068FC4()
{
  return sub_10000FD98( &qword_100351E68,  type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime,  (uint64_t)&unk_1002B6E64);
}

uint64_t sub_100068FF0()
{
  return sub_10000FD98( &qword_1003519C0,  type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime,  (uint64_t)&unk_1002B6F64);
}

uint64_t sub_10006901C()
{
  return sub_10000FD98( &qword_100351E70,  type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime,  (uint64_t)&unk_1002B6FA4);
}

uint64_t sub_100069048()
{
  return sub_10000FD98( &qword_100351E78,  type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage,  (uint64_t)&unk_1002B70A4);
}

uint64_t sub_100069074()
{
  return sub_10000FD98( &qword_100351E80,  type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage,  (uint64_t)&unk_1002B6FCC);
}

uint64_t sub_1000690A0()
{
  return sub_10000FD98( &qword_1003519C8,  type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage,  (uint64_t)&unk_1002B70CC);
}

uint64_t sub_1000690CC()
{
  return sub_10000FD98( &qword_100351E88,  type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage,  (uint64_t)&unk_1002B710C);
}

uint64_t sub_1000690F8()
{
  return sub_10000FD98( &qword_100351E90,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  (uint64_t)&unk_1002B720C);
}

uint64_t sub_100069124()
{
  return sub_10000FD98( &qword_100351E98,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  (uint64_t)&unk_1002B7134);
}

uint64_t sub_100069150()
{
  return sub_10000FD98( &qword_1003519D0,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  (uint64_t)&unk_1002B7234);
}

uint64_t sub_10006917C()
{
  return sub_10000FD98( &qword_100351EA0,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension,  (uint64_t)&unk_1002B7274);
}

uint64_t sub_1000691A8()
{
  return sub_10000FD98( &qword_100351EA8,  type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  (uint64_t)&unk_1002B7374);
}

uint64_t sub_1000691D4()
{
  return sub_10000FD98( &qword_100351EB0,  type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  (uint64_t)&unk_1002B729C);
}

uint64_t sub_100069200()
{
  return sub_10000FD98( &qword_1003519D8,  type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  (uint64_t)&unk_1002B739C);
}

uint64_t sub_10006922C()
{
  return sub_10000FD98( &qword_100351EB8,  type metadata accessor for CLP_LogEntry_PrivateData_Measurement,  (uint64_t)&unk_1002B73DC);
}

uint64_t sub_100069258()
{
  return sub_10000FD98( &qword_100351EC0,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel,  (uint64_t)&unk_1002B74DC);
}

uint64_t sub_100069284()
{
  return sub_10000FD98( &qword_100351EC8,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel,  (uint64_t)&unk_1002B7404);
}

uint64_t sub_1000692B0()
{
  return sub_10000FD98( &qword_1003519E0,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel,  (uint64_t)&unk_1002B7504);
}

uint64_t sub_1000692DC()
{
  return sub_10000FD98( &qword_100351ED0,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel,  (uint64_t)&unk_1002B7544);
}

uint64_t sub_100069308()
{
  return sub_10000FD98( &qword_100351ED8,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections,  (uint64_t)&unk_1002B7644);
}

uint64_t sub_100069334()
{
  return sub_10000FD98( &qword_100351EE0,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections,  (uint64_t)&unk_1002B756C);
}

uint64_t sub_100069360()
{
  return sub_10000FD98( &qword_1003519E8,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections,  (uint64_t)&unk_1002B766C);
}

uint64_t sub_10006938C()
{
  return sub_10000FD98( &qword_100351EE8,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections,  (uint64_t)&unk_1002B76AC);
}

uint64_t sub_1000693B8()
{
  return sub_10000FD98( &qword_100351EF0,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion,  (uint64_t)&unk_1002B77AC);
}

uint64_t sub_1000693E4()
{
  return sub_10000FD98( &qword_100351EF8,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion,  (uint64_t)&unk_1002B76D4);
}

uint64_t sub_100069410()
{
  return sub_10000FD98( &qword_1003519F0,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion,  (uint64_t)&unk_1002B77D4);
}

uint64_t sub_10006943C()
{
  return sub_10000FD98( &qword_100351F00,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion,  (uint64_t)&unk_1002B7814);
}

uint64_t sub_100069468()
{
  return sub_10000FD98( &qword_100351F08,  type metadata accessor for CLP_LogEntry_PrivateData_Clock,  (uint64_t)&unk_1002B7914);
}

uint64_t sub_100069494()
{
  return sub_10000FD98( &qword_100351F10,  type metadata accessor for CLP_LogEntry_PrivateData_Clock,  (uint64_t)&unk_1002B783C);
}

uint64_t sub_1000694C0()
{
  return sub_10000FD98( &qword_1003519F8,  type metadata accessor for CLP_LogEntry_PrivateData_Clock,  (uint64_t)&unk_1002B793C);
}

uint64_t sub_1000694EC()
{
  return sub_10000FD98( &qword_100351F18,  type metadata accessor for CLP_LogEntry_PrivateData_Clock,  (uint64_t)&unk_1002B797C);
}

uint64_t sub_100069518()
{
  return sub_10000FD98( &qword_100351F20,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport,  (uint64_t)&unk_1002B7A7C);
}

uint64_t sub_100069544()
{
  return sub_10000FD98( &qword_100351F28,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport,  (uint64_t)&unk_1002B79A4);
}

uint64_t sub_100069570()
{
  return sub_10000FD98( &qword_100351A00,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport,  (uint64_t)&unk_1002B7AA4);
}

uint64_t sub_10006959C()
{
  return sub_10000FD98( &qword_100351F30,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport,  (uint64_t)&unk_1002B7AE4);
}

uint64_t sub_1000695C8()
{
  return sub_10000FD98( &qword_100351F38,  type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef,  (uint64_t)&unk_1002B7BE4);
}

uint64_t sub_1000695F4()
{
  return sub_10000FD98( &qword_100351F40,  type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef,  (uint64_t)&unk_1002B7B0C);
}

uint64_t sub_100069620()
{
  return sub_10000FD98( &qword_100351A08,  type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef,  (uint64_t)&unk_1002B7C0C);
}

uint64_t sub_10006964C()
{
  return sub_10000FD98( &qword_100351F48,  type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef,  (uint64_t)&unk_1002B7C4C);
}

uint64_t sub_100069678()
{
  return sub_10000FD98( &qword_100351F50,  type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections,  (uint64_t)&unk_1002B7D4C);
}

uint64_t sub_1000696A4()
{
  return sub_10000FD98( &qword_100351F58,  type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections,  (uint64_t)&unk_1002B7C74);
}

uint64_t sub_1000696D0()
{
  return sub_10000FD98( &qword_100351A10,  type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections,  (uint64_t)&unk_1002B7D74);
}

uint64_t sub_1000696FC()
{
  return sub_10000FD98( &qword_100351F60,  type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections,  (uint64_t)&unk_1002B7DB4);
}

uint64_t sub_100069728()
{
  return sub_10000FD98( &qword_100351F68,  type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime,  (uint64_t)&unk_1002B7EB4);
}

uint64_t sub_100069754()
{
  return sub_10000FD98( &qword_100351F70,  type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime,  (uint64_t)&unk_1002B7DDC);
}

uint64_t sub_100069780()
{
  return sub_10000FD98( &qword_100351A18,  type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime,  (uint64_t)&unk_1002B7EDC);
}

uint64_t sub_1000697AC()
{
  return sub_10000FD98( &qword_100351F78,  type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime,  (uint64_t)&unk_1002B7F1C);
}

uint64_t sub_1000697D8()
{
  return sub_10000FD98( &qword_100351F80,  type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit,  (uint64_t)&unk_1002B801C);
}

uint64_t sub_100069804()
{
  return sub_10000FD98( &qword_100351F88,  type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit,  (uint64_t)&unk_1002B7F44);
}

uint64_t sub_100069830()
{
  return sub_10000FD98( &qword_100351A20,  type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit,  (uint64_t)&unk_1002B8044);
}

uint64_t sub_10006985C()
{
  return sub_10000FD98( &qword_100351F90,  type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit,  (uint64_t)&unk_1002B8084);
}

uint64_t sub_100069888()
{
  return sub_10000FD98( &qword_100351F98,  type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  (uint64_t)&unk_1002B8184);
}

uint64_t sub_1000698B4()
{
  return sub_10000FD98( &qword_100351FA0,  type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  (uint64_t)&unk_1002B80AC);
}

uint64_t sub_1000698E0()
{
  return sub_10000FD98( &qword_100351A28,  type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  (uint64_t)&unk_1002B81AC);
}

uint64_t sub_10006990C()
{
  return sub_10000FD98( &qword_100351FA8,  type metadata accessor for CLP_LogEntry_PrivateData_SvInfo,  (uint64_t)&unk_1002B81EC);
}

uint64_t sub_100069938()
{
  return sub_10000FD98( &qword_100351FB0,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections,  (uint64_t)&unk_1002B82EC);
}

uint64_t sub_100069964()
{
  return sub_10000FD98( &qword_100351FB8,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections,  (uint64_t)&unk_1002B8214);
}

uint64_t sub_100069990()
{
  return sub_10000FD98( &qword_100351A30,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections,  (uint64_t)&unk_1002B8314);
}

uint64_t sub_1000699BC()
{
  return sub_10000FD98( &qword_100351FC0,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections,  (uint64_t)&unk_1002B8354);
}

uint64_t sub_1000699E8()
{
  return sub_10000FD98( &qword_100351FC8,  type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange,  (uint64_t)&unk_1002B8454);
}

uint64_t sub_100069A14()
{
  return sub_10000FD98( &qword_100351FD0,  type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange,  (uint64_t)&unk_1002B837C);
}

uint64_t sub_100069A40()
{
  return sub_10000FD98( &qword_100351A38,  type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange,  (uint64_t)&unk_1002B847C);
}

uint64_t sub_100069A6C()
{
  return sub_10000FD98( &qword_100351FD8,  type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange,  (uint64_t)&unk_1002B84BC);
}

uint64_t sub_100069A98()
{
  return sub_10000FD98( &qword_100351FE0,  type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo,  (uint64_t)&unk_1002B85BC);
}

uint64_t sub_100069AC4()
{
  return sub_10000FD98( &qword_100351FE8,  type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo,  (uint64_t)&unk_1002B84E4);
}

uint64_t sub_100069AF0()
{
  return sub_10000FD98( &qword_100351A40,  type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo,  (uint64_t)&unk_1002B85E4);
}

uint64_t sub_100069B1C()
{
  return sub_10000FD98( &qword_100351FF0,  type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo,  (uint64_t)&unk_1002B8624);
}

uint64_t sub_100069B48()
{
  return sub_10000FD98( &qword_100351FF8,  type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion,  (uint64_t)&unk_1002B8724);
}

uint64_t sub_100069B74()
{
  return sub_10000FD98( &qword_100352000,  type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion,  (uint64_t)&unk_1002B864C);
}

uint64_t sub_100069BA0()
{
  return sub_10000FD98( &qword_100351A48,  type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion,  (uint64_t)&unk_1002B874C);
}

uint64_t sub_100069BCC()
{
  return sub_10000FD98( &qword_100352008,  type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion,  (uint64_t)&unk_1002B878C);
}

uint64_t sub_100069BF8()
{
  return sub_10000FD98( &qword_100352010,  type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo,  (uint64_t)&unk_1002B888C);
}

uint64_t sub_100069C24()
{
  return sub_10000FD98( &qword_100352018,  type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo,  (uint64_t)&unk_1002B87B4);
}

uint64_t sub_100069C50()
{
  return sub_10000FD98( &qword_100351A50,  type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo,  (uint64_t)&unk_1002B88B4);
}

uint64_t sub_100069C7C()
{
  return sub_10000FD98( &qword_100352020,  type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo,  (uint64_t)&unk_1002B88F4);
}

uint64_t sub_100069CA8()
{
  return sub_10000FD98( &qword_100352028,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion,  (uint64_t)&unk_1002B89F4);
}

uint64_t sub_100069CD4()
{
  return sub_10000FD98( &qword_100352030,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion,  (uint64_t)&unk_1002B891C);
}

uint64_t sub_100069D00()
{
  return sub_10000FD98( &qword_100351A58,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion,  (uint64_t)&unk_1002B8A1C);
}

uint64_t sub_100069D2C()
{
  return sub_10000FD98( &qword_100352038,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion,  (uint64_t)&unk_1002B8A5C);
}

uint64_t sub_100069D58()
{
  return sub_10000FD98( &qword_100352040,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo,  (uint64_t)&unk_1002B8B5C);
}

uint64_t sub_100069D84()
{
  return sub_10000FD98( &qword_100352048,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo,  (uint64_t)&unk_1002B8A84);
}

uint64_t sub_100069DB0()
{
  return sub_10000FD98( &qword_100351A60,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo,  (uint64_t)&unk_1002B8B84);
}

uint64_t sub_100069DDC()
{
  return sub_10000FD98( &qword_100352050,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo,  (uint64_t)&unk_1002B8BC4);
}

uint64_t sub_100069E08()
{
  return sub_10000FD98( &qword_100352058,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion,  (uint64_t)&unk_1002B8CC4);
}

uint64_t sub_100069E34()
{
  return sub_10000FD98( &qword_100352060,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion,  (uint64_t)&unk_1002B8BEC);
}

uint64_t sub_100069E60()
{
  return sub_10000FD98( &qword_100351A68,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion,  (uint64_t)&unk_1002B8CEC);
}

uint64_t sub_100069E8C()
{
  return sub_10000FD98( &qword_100352068,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion,  (uint64_t)&unk_1002B8D2C);
}

uint64_t sub_100069EB8()
{
  return sub_10000FD98( &qword_100352070,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo,  (uint64_t)&unk_1002B8E2C);
}

uint64_t sub_100069EE4()
{
  return sub_10000FD98( &qword_100352078,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo,  (uint64_t)&unk_1002B8D54);
}

uint64_t sub_100069F10()
{
  return sub_10000FD98( &qword_100351A70,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo,  (uint64_t)&unk_1002B8E54);
}

uint64_t sub_100069F3C()
{
  return sub_10000FD98( &qword_100352080,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo,  (uint64_t)&unk_1002B8E94);
}

uint64_t sub_100069F68()
{
  return sub_10000FD98( &qword_100352088,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo,  (uint64_t)&unk_1002B8F94);
}

uint64_t sub_100069F94()
{
  return sub_10000FD98( &qword_100352090,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo,  (uint64_t)&unk_1002B8EBC);
}

uint64_t sub_100069FC0()
{
  return sub_10000FD98( &qword_100351A78,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo,  (uint64_t)&unk_1002B8FBC);
}

uint64_t sub_100069FEC()
{
  return sub_10000FD98( &qword_100352098,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo,  (uint64_t)&unk_1002B8FFC);
}

uint64_t sub_10006A018()
{
  return sub_10000FD98( &qword_1003520A0,  type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo,  (uint64_t)&unk_1002B90FC);
}

uint64_t sub_10006A044()
{
  return sub_10000FD98( &qword_1003520A8,  type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo,  (uint64_t)&unk_1002B9024);
}

uint64_t sub_10006A070()
{
  return sub_10000FD98( &qword_100351A80,  type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo,  (uint64_t)&unk_1002B9124);
}

uint64_t sub_10006A09C()
{
  return sub_10000FD98( &qword_1003520B0,  type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo,  (uint64_t)&unk_1002B9164);
}

uint64_t sub_10006A0C8()
{
  return sub_10000FD98( &qword_1003520B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo,  (uint64_t)&unk_1002B9264);
}

uint64_t sub_10006A0F4()
{
  return sub_10000FD98( &qword_1003520C0,  type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo,  (uint64_t)&unk_1002B918C);
}

uint64_t sub_10006A120()
{
  return sub_10000FD98( &qword_100351A88,  type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo,  (uint64_t)&unk_1002B928C);
}

uint64_t sub_10006A14C()
{
  return sub_10000FD98( &qword_1003520C8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo,  (uint64_t)&unk_1002B92CC);
}

uint64_t sub_10006A178()
{
  return sub_10000FD98( &qword_1003520D0,  type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters,  (uint64_t)&unk_1002B93CC);
}

uint64_t sub_10006A1A4()
{
  return sub_10000FD98( &qword_1003520D8,  type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters,  (uint64_t)&unk_1002B92F4);
}

uint64_t sub_10006A1D0()
{
  return sub_10000FD98( &qword_100351A90,  type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters,  (uint64_t)&unk_1002B93F4);
}

uint64_t sub_10006A1FC()
{
  return sub_10000FD98( &qword_1003520E0,  type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters,  (uint64_t)&unk_1002B9434);
}

uint64_t sub_10006A228()
{
  return sub_10000FD98( &qword_1003520E8,  type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz,  (uint64_t)&unk_1002B9534);
}

uint64_t sub_10006A254()
{
  return sub_10000FD98( &qword_1003520F0,  type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz,  (uint64_t)&unk_1002B945C);
}

uint64_t sub_10006A280()
{
  return sub_10000FD98( &qword_100351A98,  type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz,  (uint64_t)&unk_1002B955C);
}

uint64_t sub_10006A2AC()
{
  return sub_10000FD98( &qword_1003520F8,  type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz,  (uint64_t)&unk_1002B959C);
}

uint64_t sub_10006A2D8()
{
  return sub_10000FD98( &qword_100352100,  type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset,  (uint64_t)&unk_1002B969C);
}

uint64_t sub_10006A304()
{
  return sub_10000FD98( &qword_100352108,  type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset,  (uint64_t)&unk_1002B95C4);
}

uint64_t sub_10006A330()
{
  return sub_10000FD98( &qword_100351AA0,  type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset,  (uint64_t)&unk_1002B96C4);
}

uint64_t sub_10006A35C()
{
  return sub_10000FD98( &qword_100352110,  type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset,  (uint64_t)&unk_1002B9704);
}

uint64_t sub_10006A388()
{
  return sub_10000FD98( &qword_100352118,  type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp,  (uint64_t)&unk_1002B9804);
}

uint64_t sub_10006A3B4()
{
  return sub_10000FD98( &qword_100352120,  type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp,  (uint64_t)&unk_1002B972C);
}

uint64_t sub_10006A3E0()
{
  return sub_10000FD98( &qword_100351AA8,  type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp,  (uint64_t)&unk_1002B982C);
}

uint64_t sub_10006A40C()
{
  return sub_10000FD98( &qword_100352128,  type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp,  (uint64_t)&unk_1002B986C);
}

uint64_t sub_10006A438()
{
  return sub_10000FD98( &qword_100352130,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents,  (uint64_t)&unk_1002B996C);
}

uint64_t sub_10006A464()
{
  return sub_10000FD98( &qword_100352138,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents,  (uint64_t)&unk_1002B9894);
}

uint64_t sub_10006A490()
{
  return sub_10000FD98( &qword_100351AB0,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents,  (uint64_t)&unk_1002B9994);
}

uint64_t sub_10006A4BC()
{
  return sub_10000FD98( &qword_100352140,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents,  (uint64_t)&unk_1002B99D4);
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotSource()
{
  return &type metadata for CLP_LogEntry_PrivateData_GlonassSlotSource;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_AONLoc_Type7Info.Placement( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SatelliteSystem( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_10006A5DC + 4 * byte_1002B4409[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_10006A610 + 4 * byte_1002B4404[v4]))();
}

uint64_t sub_10006A610(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006A618(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10006A620LL);
  }
  return result;
}

uint64_t sub_10006A62C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10006A634LL);
  }
  *(_BYTE *)unint64_t result = a2 + 7;
  return result;
}

uint64_t sub_10006A638(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006A640(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_SatelliteSystem()
{
  return &type metadata for CLP_LogEntry_PrivateData_SatelliteSystem;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_Band(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF4) {
    goto LABEL_17;
  }
  if (a2 + 12 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 12) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 12;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_Band( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF3) {
    return ((uint64_t (*)(void))((char *)&loc_10006A738 + 4 * byte_1002B4413[v4]))();
  }
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_10006A76C + 4 * byte_1002B440E[v4]))();
}

uint64_t sub_10006A76C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006A774(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10006A77CLL);
  }
  return result;
}

uint64_t sub_10006A788(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10006A790LL);
  }
  *(_BYTE *)unint64_t result = a2 + 12;
  return result;
}

uint64_t sub_10006A794(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006A79C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_Band()
{
  return &type metadata for CLP_LogEntry_PrivateData_Band;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_FullSvTimeSource()
{
  return &type metadata for CLP_LogEntry_PrivateData_FullSvTimeSource;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_MeasurementDetectionMethod()
{
  return &type metadata for CLP_LogEntry_PrivateData_MeasurementDetectionMethod;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_MultipathIndicator()
{
  return &type metadata for CLP_LogEntry_PrivateData_MultipathIndicator;
}

uint64_t _s10ALProtobuf51CLP_LogEntry_PrivateData_MeasurementDetectionMethodOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_10006A844 + 4 * byte_1002B441D[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10006A878 + 4 * byte_1002B4418[v4]))();
}

uint64_t sub_10006A878(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006A880(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10006A888LL);
  }
  return result;
}

uint64_t sub_10006A894(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10006A89CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 6;
  return result;
}

uint64_t sub_10006A8A0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006A8A8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_SvPositionSource()
{
  return &type metadata for CLP_LogEntry_PrivateData_SvPositionSource;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_SvHealthIndication()
{
  return &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_AONLoc_BtAdvertisement.BtType( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_IonosphericCorrectionSource( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10006A9B0 + 4 * byte_1002B4427[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10006A9E4 + 4 * byte_1002B4422[v4]))();
}

uint64_t sub_10006A9E4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006A9EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10006A9F4LL);
  }
  return result;
}

uint64_t sub_10006AA00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10006AA08LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10006AA0C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006AA14(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_IonosphericCorrectionSource()
{
  return &type metadata for CLP_LogEntry_PrivateData_IonosphericCorrectionSource;
}

uint64_t _s10ALProtobuf42CLP_LogEntry_PrivateData_GlonassSlotSourceOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10006AA7C + 4 * byte_1002B4431[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10006AAB0 + 4 * byte_1002B442C[v4]))();
}

uint64_t sub_10006AAB0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006AAB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10006AAC0LL);
  }
  return result;
}

uint64_t sub_10006AACC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10006AAD4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_10006AAD8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006AAE0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge()
{
  return &type metadata for CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }

uint64_t _s10ALProtobuf41CLP_LogEntry_PrivateData_FullSvTimeSourceOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_10006ABD8 + 4 * byte_1002B443B[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10006AC0C + 4 * byte_1002B4436[v4]))();
}

uint64_t sub_10006AC0C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006AC14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10006AC1CLL);
  }
  return result;
}

uint64_t sub_10006AC28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10006AC30LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_10006AC34(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006AC3C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated()
{
  return &type metadata for CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvReferencePoint( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvReferencePoint( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10006AD34 + 4 * byte_1002B4445[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10006AD68 + 4 * byte_1002B4440[v4]))();
}

uint64_t sub_10006AD68(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006AD70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10006AD78LL);
  }
  return result;
}

uint64_t sub_10006AD84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10006AD8CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10006AD90(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006AD98(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_SvReferencePoint()
{
  return &type metadata for CLP_LogEntry_PrivateData_SvReferencePoint;
}

void *sub_10006ADB4(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v12);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
  }

  return a1;
}

uint64_t sub_10006AE58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  return a1;
}

uint64_t sub_10006AECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (int *)(a2 + v7);
  int v10 = *v9;
  *(_BYTE *)(v8 + 4) = *((_BYTE *)v9 + 4);
  *(_DWORD *)uint64_t v8 = v10;
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10006AF44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  return a1;
}

uint64_t sub_10006AFB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  return a1;
}

uint64_t sub_10006B02C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006B038);
}

uint64_t sub_10006B038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  else {
    int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  }
  unsigned int v10 = v9 - 5;
  else {
    return 0LL;
  }
}

uint64_t sub_10006B0BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006B0C8);
}

uint64_t sub_10006B0C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 5;
  return result;
}

uint64_t sub_10006B140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007813C(a1, a2, a3, (uint64_t)&unk_1002B9CB0, (uint64_t)&unk_1002B9CC8);
}

uint64_t *sub_10006B154(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v18);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = *(int *)(a3 + 24);
    uint64_t v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
    v11[4] = v12[4];
    uint64_t v13 = (char *)a1 + v10;
    char v14 = (char *)a2 + v10;
    uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
    {
      uint64_t v17 = sub_100003A0C(&qword_1003517D8);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
    }

    else
    {
      v8((uint64_t *)v13, (uint64_t *)v14, v7);
      uint64_t v19 = *(int *)(v15 + 20);
      uint64_t v20 = &v13[v19];
      uint64_t v21 = &v14[v19];
      *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      v13[*(int *)(v15 + 24)] = v14[*(int *)(v15 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
    }
  }

  return a1;
}

uint64_t sub_10006B2A4(uint64_t a1, uint64_t a2)
{
  return sub_10007434C(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t sub_10006B2B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100003A0C(&qword_1003517D8);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = *(int *)(v14 + 20);
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v12[*(int *)(v14 + 24)] = v13[*(int *)(v14 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  return a1;
}

uint64_t sub_10006B3D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  char v12 = *(_BYTE *)(v11 + 4);
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = v12;
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (_BYTE *)(a1 + v13);
  uint64_t v15 = (_BYTE *)(a2 + v13);
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1LL, v16);
  int v20 = v18(v15, 1LL, v16);
  if (!v19)
  {
    if (!v20)
    {
      v8((uint64_t)v14, (uint64_t)v15, v6);
      uint64_t v27 = *(int *)(v16 + 20);
      int v28 = &v14[v27];
      uint64_t v29 = &v15[v27];
      int v30 = *(_DWORD *)v29;
      v28[4] = v29[4];
      *(_DWORD *)int v28 = v30;
      v14[*(int *)(v16 + 24)] = v15[*(int *)(v16 + 24)];
      return a1;
    }

    sub_100004090((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
    goto LABEL_6;
  }

  if (v20)
  {
LABEL_6:
    uint64_t v25 = sub_100003A0C(&qword_1003517D8);
    memcpy(v14, v15, *(void *)(*(void *)(v25 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v14, v15, v6);
  uint64_t v21 = *(int *)(v16 + 20);
  char v22 = &v14[v21];
  uint64_t v23 = &v15[v21];
  int v24 = *(_DWORD *)v23;
  v22[4] = v23[4];
  *(_DWORD *)char v22 = v24;
  v14[*(int *)(v16 + 24)] = v15[*(int *)(v16 + 24)];
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
  return a1;
}

uint64_t sub_10006B570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  char v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100003A0C(&qword_1003517D8);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = *(int *)(v14 + 20);
    uint64_t v18 = &v12[v17];
    int v19 = &v13[v17];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v12[*(int *)(v14 + 24)] = v13[*(int *)(v14 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  return a1;
}

uint64_t sub_10006B694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = a1 + v9;
  uint64_t v12 = a2 + v9;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  uint64_t v13 = (_BYTE *)(a1 + v10);
  uint64_t v14 = (_BYTE *)(a2 + v10);
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1LL, v15);
  int v19 = v17(v14, 1LL, v15);
  if (!v18)
  {
    if (!v19)
    {
      v8((uint64_t)v13, (uint64_t)v14, v6);
      uint64_t v25 = *(int *)(v15 + 20);
      uint64_t v26 = &v13[v25];
      uint64_t v27 = &v14[v25];
      *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
      v26[4] = v27[4];
      v13[*(int *)(v15 + 24)] = v14[*(int *)(v15 + 24)];
      return a1;
    }

    sub_100004090((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
    goto LABEL_6;
  }

  if (v19)
  {
LABEL_6:
    uint64_t v23 = sub_100003A0C(&qword_1003517D8);
    memcpy(v13, v14, *(void *)(*(void *)(v23 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v13, v14, v6);
  uint64_t v20 = *(int *)(v15 + 20);
  uint64_t v21 = &v13[v20];
  char v22 = &v14[v20];
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  v21[4] = v22[4];
  v13[*(int *)(v15 + 24)] = v14[*(int *)(v15 + 24)];
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
  return a1;
}

uint64_t sub_10006B82C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006B838);
}

uint64_t sub_10006B838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100074A8C(a1, a2, a3, &qword_1003517D8);
}

uint64_t sub_10006B844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006B850);
}

uint64_t sub_10006B850(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100074B1C(a1, a2, a3, a4, &qword_1003517D8);
}

void sub_10006B85C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *sub_10006B878(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v18);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
    v11[4] = v12[4];
    uint64_t v13 = (char *)a1 + v10;
    uint64_t v14 = (char *)a2 + v10;
    uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
    {
      uint64_t v17 = sub_100003A0C(&qword_1003517E0);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
    }

    else
    {
      v8((uint64_t *)v13, (uint64_t *)v14, v7);
      uint64_t v19 = *(int *)(v15 + 20);
      uint64_t v20 = &v13[v19];
      uint64_t v21 = &v14[v19];
      *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      uint64_t v22 = *(int *)(v15 + 24);
      __dst = &v13[v22];
      uint64_t v23 = &v14[v22];
      uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
      uint64_t v45 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v23, 1LL, v24))
      {
        uint64_t v25 = sub_100003A0C(&qword_1003517D8);
        memcpy(__dst, v23, *(void *)(*(void *)(v25 - 8) + 64LL));
      }

      else
      {
        v8((uint64_t *)__dst, (uint64_t *)v23, v7);
        uint64_t v26 = *(int *)(v24 + 20);
        uint64_t v27 = &__dst[v26];
        int v28 = &v23[v26];
        *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
        v27[4] = v28[4];
        __dst[*(int *)(v24 + 24)] = v23[*(int *)(v24 + 24)];
        (*(void (**)(void))(v45 + 56))();
      }

      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
    }

    uint64_t v29 = a3[7];
    uint64_t v30 = a3[8];
    int v31 = (char *)a1 + v29;
    int v32 = (char *)a2 + v29;
    *(_DWORD *)int v31 = *(_DWORD *)v32;
    v31[4] = v32[4];
    uint64_t v33 = (char *)a1 + v30;
    uint64_t v34 = (char *)a2 + v30;
    *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
    v33[4] = v34[4];
    uint64_t v35 = a3[9];
    uint64_t v36 = a3[10];
    uint64_t v37 = (char *)a1 + v35;
    char v38 = (char *)a2 + v35;
    *(_DWORD *)uint64_t v37 = *(_DWORD *)v38;
    v37[4] = v38[4];
    uint64_t v39 = (char *)a1 + v36;
    char v40 = (char *)a2 + v36;
    *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
    v39[4] = v40[4];
    uint64_t v41 = a3[11];
    int v42 = (char *)a1 + v41;
    uint64_t v43 = (char *)a2 + v41;
    LODWORD(v37) = *(_DWORD *)v43;
    v42[4] = v43[4];
    *(_DWORD *)int v42 = (_DWORD)v37;
  }

  return a1;
}

uint64_t sub_10006BB04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v10(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL))(v5, 1LL, v6);
  if (!(_DWORD)result)
  {
    v10(v5, v4);
    uint64_t v8 = v5 + *(int *)(v6 + 24);
    uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9);
    if (!(_DWORD)result) {
      return ((uint64_t (*)(uint64_t, uint64_t))v10)(v8, v4);
    }
  }

  return result;
}

uint64_t sub_10006BBE4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100003A0C(&qword_1003517E0);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = *(int *)(v14 + 20);
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    uint64_t v20 = *(int *)(v14 + 24);
    __dst = &v12[v20];
    uint64_t v21 = &v13[v20];
    uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
    uint64_t v43 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v21, 1LL, v22))
    {
      uint64_t v23 = sub_100003A0C(&qword_1003517D8);
      memcpy(__dst, v21, *(void *)(*(void *)(v23 - 8) + 64LL));
    }

    else
    {
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      uint64_t v24 = *(int *)(v22 + 20);
      uint64_t v25 = &__dst[v24];
      uint64_t v26 = &v21[v24];
      *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
      v25[4] = v26[4];
      __dst[*(int *)(v22 + 24)] = v21[*(int *)(v22 + 24)];
      (*(void (**)(void))(v43 + 56))();
    }

    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v27 = a3[7];
  uint64_t v28 = a3[8];
  uint64_t v29 = a1 + v27;
  uint64_t v30 = a2 + v27;
  *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
  *(_BYTE *)(v29 + 4) = *(_BYTE *)(v30 + 4);
  uint64_t v31 = a1 + v28;
  uint64_t v32 = a2 + v28;
  *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
  *(_BYTE *)(v31 + 4) = *(_BYTE *)(v32 + 4);
  uint64_t v33 = a3[9];
  uint64_t v34 = a3[10];
  uint64_t v35 = a1 + v33;
  uint64_t v36 = a2 + v33;
  *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
  *(_BYTE *)(v35 + 4) = *(_BYTE *)(v36 + 4);
  uint64_t v37 = a1 + v34;
  uint64_t v38 = a2 + v34;
  *(_DWORD *)uint64_t v37 = *(_DWORD *)v38;
  *(_BYTE *)(v37 + 4) = *(_BYTE *)(v38 + 4);
  uint64_t v39 = a3[11];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  LODWORD(v35) = *(_DWORD *)v41;
  *(_BYTE *)(v40 + 4) = *(_BYTE *)(v41 + 4);
  *(_DWORD *)uint64_t v40 = v35;
  return a1;
}

uint64_t sub_10006BE44(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v79 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 24);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  char v11 = *(_BYTE *)(v10 + 4);
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = v11;
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
  uint64_t v77 = *(void *)(v15 - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 48);
  int v17 = v16(v13, 1LL, v15);
  int v18 = v16((uint64_t)v14, 1LL, v15);
  if (!v17)
  {
    uint64_t v78 = (void (*)(uint64_t, char *, uint64_t))v7;
    if (!v18)
    {
      v7(v13, (uint64_t)v14, v6);
      uint64_t v32 = *(int *)(v15 + 20);
      uint64_t v33 = v13 + v32;
      uint64_t v34 = &v14[v32];
      char v35 = v34[4];
      *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
      *(_BYTE *)(v33 + 4) = v35;
      uint64_t v36 = *(int *)(v15 + 24);
      uint64_t v37 = v13 + v36;
      uint64_t v38 = &v14[v36];
      uint64_t v39 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
      uint64_t v40 = *(void *)(v39 - 8);
      uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
      int v42 = v41(v37, 1LL, v39);
      int v43 = v41((uint64_t)v38, 1LL, v39);
      if (v42)
      {
        if (!v43)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v79 + 16))(v37, v38, v6);
          uint64_t v44 = *(int *)(v39 + 20);
          uint64_t v45 = v37 + v44;
          uint64_t v46 = &v38[v44];
          int v47 = *(_DWORD *)v46;
          *(_BYTE *)(v45 + 4) = v46[4];
          *(_DWORD *)uint64_t v45 = v47;
          *(_BYTE *)(v37 + *(int *)(v39 + 24)) = v38[*(int *)(v39 + 24)];
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v37, 0LL, 1LL, v39);
          goto LABEL_14;
        }
      }

      else
      {
        if (!v43)
        {
          v78(v37, v38, v6);
          uint64_t v73 = *(int *)(v39 + 20);
          uint64_t v74 = v37 + v73;
          uint64_t v75 = &v38[v73];
          int v76 = *(_DWORD *)v75;
          *(_BYTE *)(v74 + 4) = v75[4];
          *(_DWORD *)uint64_t v74 = v76;
          *(_BYTE *)(v37 + *(int *)(v39 + 24)) = v38[*(int *)(v39 + 24)];
          goto LABEL_14;
        }

        sub_100004090(v37, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
      }

      size_t v29 = *(void *)(*(void *)(sub_100003A0C(&qword_1003517D8) - 8) + 64LL);
      uint64_t v30 = (void *)v37;
      uint64_t v31 = v38;
      goto LABEL_8;
    }

    sub_100004090(v13, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
LABEL_7:
    size_t v29 = *(void *)(*(void *)(sub_100003A0C(&qword_1003517E0) - 8) + 64LL);
    uint64_t v30 = (void *)v13;
    uint64_t v31 = v14;
LABEL_8:
    memcpy(v30, v31, v29);
    goto LABEL_14;
  }

  if (v18) {
    goto LABEL_7;
  }
  uint64_t v80 = *(void (**)(uint64_t, char *, uint64_t))(v79 + 16);
  v80(v13, v14, v6);
  uint64_t v19 = *(int *)(v15 + 20);
  uint64_t v20 = v13 + v19;
  uint64_t v21 = &v14[v19];
  char v22 = v21[4];
  *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = v22;
  uint64_t v23 = *(int *)(v15 + 24);
  uint64_t v24 = (char *)(v13 + v23);
  uint64_t v25 = &v14[v23];
  uint64_t v26 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26))
  {
    uint64_t v28 = sub_100003A0C(&qword_1003517D8);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    v80((uint64_t)v24, v25, v6);
    uint64_t v48 = *(int *)(v26 + 20);
    uint64_t v49 = &v24[v48];
    uint64_t v50 = &v25[v48];
    int v51 = *(_DWORD *)v50;
    v49[4] = v50[4];
    *(_DWORD *)uint64_t v49 = v51;
    v24[*(int *)(v26 + 24)] = v25[*(int *)(v26 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
  }

  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v77 + 56))(v13, 0LL, 1LL, v15);
LABEL_14:
  uint64_t v52 = a3[7];
  uint64_t v53 = a1 + v52;
  uint64_t v54 = (int *)(a2 + v52);
  int v55 = *v54;
  *(_BYTE *)(v53 + 4) = *((_BYTE *)v54 + 4);
  *(_DWORD *)uint64_t v53 = v55;
  uint64_t v56 = a3[8];
  uint64_t v57 = a1 + v56;
  uint64_t v58 = (int *)(a2 + v56);
  int v59 = *v58;
  *(_BYTE *)(v57 + 4) = *((_BYTE *)v58 + 4);
  *(_DWORD *)uint64_t v57 = v59;
  uint64_t v60 = a3[9];
  uint64_t v61 = a1 + v60;
  int v62 = (int *)(a2 + v60);
  int v63 = *v62;
  *(_BYTE *)(v61 + 4) = *((_BYTE *)v62 + 4);
  *(_DWORD *)uint64_t v61 = v63;
  uint64_t v64 = a3[10];
  uint64_t v65 = a1 + v64;
  uint64_t v66 = (int *)(a2 + v64);
  int v67 = *v66;
  *(_BYTE *)(v65 + 4) = *((_BYTE *)v66 + 4);
  *(_DWORD *)uint64_t v65 = v67;
  uint64_t v68 = a3[11];
  uint64_t v69 = a1 + v68;
  uint64_t v70 = (int *)(a2 + v68);
  int v71 = *v70;
  *(_BYTE *)(v69 + 4) = *((_BYTE *)v70 + 4);
  *(_DWORD *)uint64_t v69 = v71;
  return a1;
}

uint64_t sub_10006C238(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100003A0C(&qword_1003517E0);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = *(int *)(v14 + 20);
    int v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(_DWORD *)int v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    uint64_t v20 = *(int *)(v14 + 24);
    __dst = &v12[v20];
    uint64_t v21 = &v13[v20];
    uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
    uint64_t v43 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v21, 1LL, v22))
    {
      uint64_t v23 = sub_100003A0C(&qword_1003517D8);
      memcpy(__dst, v21, *(void *)(*(void *)(v23 - 8) + 64LL));
    }

    else
    {
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      uint64_t v24 = *(int *)(v22 + 20);
      uint64_t v25 = &__dst[v24];
      uint64_t v26 = &v21[v24];
      *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
      v25[4] = v26[4];
      __dst[*(int *)(v22 + 24)] = v21[*(int *)(v22 + 24)];
      (*(void (**)(void))(v43 + 56))();
    }

    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v27 = a3[7];
  uint64_t v28 = a3[8];
  uint64_t v29 = a1 + v27;
  uint64_t v30 = a2 + v27;
  *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
  *(_BYTE *)(v29 + 4) = *(_BYTE *)(v30 + 4);
  uint64_t v31 = a1 + v28;
  uint64_t v32 = a2 + v28;
  *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
  *(_BYTE *)(v31 + 4) = *(_BYTE *)(v32 + 4);
  uint64_t v33 = a3[9];
  uint64_t v34 = a3[10];
  uint64_t v35 = a1 + v33;
  uint64_t v36 = a2 + v33;
  *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
  *(_BYTE *)(v35 + 4) = *(_BYTE *)(v36 + 4);
  uint64_t v37 = a1 + v34;
  uint64_t v38 = a2 + v34;
  *(_DWORD *)uint64_t v37 = *(_DWORD *)v38;
  *(_BYTE *)(v37 + 4) = *(_BYTE *)(v38 + 4);
  uint64_t v39 = a3[11];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  LODWORD(v35) = *(_DWORD *)v41;
  *(_BYTE *)(v40 + 4) = *(_BYTE *)(v41 + 4);
  *(_DWORD *)uint64_t v40 = v35;
  return a1;
}

uint64_t sub_10006C498(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v68 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 40);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  uint64_t v12 = a1 + v9;
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
  uint64_t v66 = *(void *)(v14 - 8);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 48);
  int v16 = v15(v12, 1LL, v14);
  int v17 = v15((uint64_t)v13, 1LL, v14);
  if (!v16)
  {
    int v67 = (void (*)(uint64_t, char *, uint64_t))v7;
    if (!v17)
    {
      v7(v12, (uint64_t)v13, v6);
      uint64_t v30 = *(int *)(v14 + 20);
      uint64_t v31 = v12 + v30;
      uint64_t v32 = &v13[v30];
      *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
      *(_BYTE *)(v31 + 4) = v32[4];
      uint64_t v33 = *(int *)(v14 + 24);
      uint64_t v34 = v12 + v33;
      uint64_t v35 = &v13[v33];
      uint64_t v36 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
      uint64_t v37 = *(void *)(v36 - 8);
      uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
      int v39 = v38(v34, 1LL, v36);
      int v40 = v38((uint64_t)v35, 1LL, v36);
      if (v39)
      {
        if (!v40)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v68 + 32))(v34, v35, v6);
          uint64_t v41 = *(int *)(v36 + 20);
          uint64_t v42 = v34 + v41;
          uint64_t v43 = &v35[v41];
          *(_DWORD *)uint64_t v42 = *(_DWORD *)v43;
          *(_BYTE *)(v42 + 4) = v43[4];
          *(_BYTE *)(v34 + *(int *)(v36 + 24)) = v35[*(int *)(v36 + 24)];
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v34, 0LL, 1LL, v36);
          goto LABEL_14;
        }
      }

      else
      {
        if (!v40)
        {
          v67(v34, v35, v6);
          uint64_t v63 = *(int *)(v36 + 20);
          uint64_t v64 = v34 + v63;
          uint64_t v65 = &v35[v63];
          *(_DWORD *)uint64_t v64 = *(_DWORD *)v65;
          *(_BYTE *)(v64 + 4) = v65[4];
          *(_BYTE *)(v34 + *(int *)(v36 + 24)) = v35[*(int *)(v36 + 24)];
          goto LABEL_14;
        }

        sub_100004090(v34, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
      }

      size_t v27 = *(void *)(*(void *)(sub_100003A0C(&qword_1003517D8) - 8) + 64LL);
      uint64_t v28 = (void *)v34;
      uint64_t v29 = v35;
      goto LABEL_8;
    }

    sub_100004090(v12, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
LABEL_7:
    size_t v27 = *(void *)(*(void *)(sub_100003A0C(&qword_1003517E0) - 8) + 64LL);
    uint64_t v28 = (void *)v12;
    uint64_t v29 = v13;
LABEL_8:
    memcpy(v28, v29, v27);
    goto LABEL_14;
  }

  if (v17) {
    goto LABEL_7;
  }
  uint64_t v69 = *(void (**)(uint64_t, char *, uint64_t))(v68 + 32);
  v69(v12, v13, v6);
  uint64_t v18 = *(int *)(v14 + 20);
  uint64_t v19 = v12 + v18;
  uint64_t v20 = &v13[v18];
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = v20[4];
  uint64_t v21 = *(int *)(v14 + 24);
  uint64_t v22 = (char *)(v12 + v21);
  uint64_t v23 = &v13[v21];
  uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1LL, v24))
  {
    uint64_t v26 = sub_100003A0C(&qword_1003517D8);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64LL));
  }

  else
  {
    v69((uint64_t)v22, v23, v6);
    uint64_t v44 = *(int *)(v24 + 20);
    uint64_t v45 = &v22[v44];
    uint64_t v46 = &v23[v44];
    *(_DWORD *)uint64_t v45 = *(_DWORD *)v46;
    v45[4] = v46[4];
    v22[*(int *)(v24 + 24)] = v23[*(int *)(v24 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0LL, 1LL, v24);
  }

  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v66 + 56))(v12, 0LL, 1LL, v14);
LABEL_14:
  uint64_t v47 = a3[7];
  uint64_t v48 = a3[8];
  uint64_t v49 = a1 + v47;
  uint64_t v50 = a2 + v47;
  *(_DWORD *)uint64_t v49 = *(_DWORD *)v50;
  *(_BYTE *)(v49 + 4) = *(_BYTE *)(v50 + 4);
  uint64_t v51 = a1 + v48;
  uint64_t v52 = a2 + v48;
  *(_DWORD *)uint64_t v51 = *(_DWORD *)v52;
  *(_BYTE *)(v51 + 4) = *(_BYTE *)(v52 + 4);
  uint64_t v53 = a3[9];
  uint64_t v54 = a3[10];
  uint64_t v55 = a1 + v53;
  uint64_t v56 = a2 + v53;
  *(_DWORD *)uint64_t v55 = *(_DWORD *)v56;
  *(_BYTE *)(v55 + 4) = *(_BYTE *)(v56 + 4);
  uint64_t v57 = a1 + v54;
  uint64_t v58 = a2 + v54;
  *(_DWORD *)uint64_t v57 = *(_DWORD *)v58;
  *(_BYTE *)(v57 + 4) = *(_BYTE *)(v58 + 4);
  uint64_t v59 = a3[11];
  uint64_t v60 = a1 + v59;
  uint64_t v61 = a2 + v59;
  LODWORD(v55) = *(_DWORD *)v61;
  *(_BYTE *)(v60 + 4) = *(_BYTE *)(v61 + 4);
  *(_DWORD *)uint64_t v60 = v55;
  return a1;
}

uint64_t sub_10006C880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006C88C);
}

uint64_t sub_10006C88C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100074A8C(a1, a2, a3, &qword_1003517E0);
}

uint64_t sub_10006C898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006C8A4);
}

uint64_t sub_10006C8A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100074B1C(a1, a2, a3, a4, &qword_1003517E0);
}

void sub_10006C8B0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    v6[1] = &unk_1002B9CB0;
    sub_1000119EC( 319LL,  (unint64_t *)&unk_1003522B8,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
    if (v5 <= 0x3F)
    {
      v6[2] = *(void *)(v4 - 8) + 64LL;
      v6[3] = &unk_1002B9CB0;
      v6[4] = &unk_1002B9CB0;
      v6[5] = &unk_1002B9CB0;
      v6[6] = &unk_1002B9CB0;
      v6[7] = &unk_1002B9CB0;
      swift_initStructMetadata(a1, 256LL, 8LL, v6, a1 + 16);
    }
  }

uint64_t *sub_10006C954(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v18);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = *(int *)(a3 + 24);
    uint64_t v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
    v11[4] = v12[4];
    uint64_t v13 = (char *)a1 + v10;
    uint64_t v14 = (char *)a2 + v10;
    uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
    uint64_t v16 = *((void *)v15 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1LL, v15))
    {
      uint64_t v17 = sub_100003A0C(&qword_1003517E8);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
    }

    else
    {
      uint64_t v59 = v16;
      v8((uint64_t *)v13, (uint64_t *)v14, v7);
      uint64_t v19 = v15[5];
      uint64_t v20 = &v13[v19];
      uint64_t v21 = &v14[v19];
      *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      uint64_t v22 = v15[6];
      uint64_t v23 = &v13[v22];
      uint64_t v24 = &v14[v22];
      uint64_t v25 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
      uint64_t v26 = *(void *)(v25 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1LL, v25))
      {
        uint64_t v27 = sub_100003A0C(&qword_1003517E0);
        memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64LL));
        uint64_t v28 = v59;
      }

      else
      {
        uint64_t v57 = v26;
        v8((uint64_t *)v23, (uint64_t *)v24, v7);
        uint64_t v29 = *(int *)(v25 + 20);
        uint64_t v30 = &v23[v29];
        uint64_t v31 = &v24[v29];
        *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
        v30[4] = v31[4];
        uint64_t v32 = *(int *)(v25 + 24);
        uint64_t v58 = v23;
        uint64_t v33 = &v23[v32];
        uint64_t v34 = &v24[v32];
        uint64_t v35 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
        uint64_t v56 = *(void *)(v35 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v34, 1LL, v35))
        {
          uint64_t v36 = sub_100003A0C(&qword_1003517D8);
          memcpy(v33, v34, *(void *)(*(void *)(v36 - 8) + 64LL));
        }

        else
        {
          v8((uint64_t *)v33, (uint64_t *)v34, v7);
          uint64_t v37 = *(int *)(v35 + 20);
          uint64_t v38 = &v33[v37];
          int v39 = &v34[v37];
          *(_DWORD *)uint64_t v38 = *(_DWORD *)v39;
          v38[4] = v39[4];
          v33[*(int *)(v35 + 24)] = v34[*(int *)(v35 + 24)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(v33, 0LL, 1LL, v35);
        }

        uint64_t v28 = v59;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v58, 0LL, 1LL, v25);
      }

      uint64_t v40 = v15[7];
      uint64_t v41 = &v13[v40];
      uint64_t v42 = &v14[v40];
      *(_DWORD *)uint64_t v41 = *(_DWORD *)v42;
      v41[4] = v42[4];
      uint64_t v43 = v15[8];
      uint64_t v44 = &v13[v43];
      uint64_t v45 = &v14[v43];
      v44[4] = v45[4];
      *(_DWORD *)uint64_t v44 = *(_DWORD *)v45;
      uint64_t v46 = v15[9];
      uint64_t v47 = &v13[v46];
      uint64_t v48 = &v14[v46];
      *(_DWORD *)uint64_t v47 = *(_DWORD *)v48;
      v47[4] = v48[4];
      uint64_t v49 = v15[10];
      uint64_t v50 = &v13[v49];
      uint64_t v51 = &v14[v49];
      *(_DWORD *)uint64_t v50 = *(_DWORD *)v51;
      v50[4] = v51[4];
      uint64_t v52 = v15[11];
      uint64_t v53 = &v13[v52];
      uint64_t v54 = &v14[v52];
      *(_DWORD *)uint64_t v53 = *(_DWORD *)v54;
      v53[4] = v54[4];
      (*(void (**)(char *, void, uint64_t, int *))(v28 + 56))(v13, 0LL, 1LL, v15);
    }
  }

  return a1;
}

uint64_t sub_10006CC94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v12(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL))(v5, 1LL, v6);
  if (!(_DWORD)result)
  {
    v12(v5, v4);
    uint64_t v8 = v5 + *(int *)(v6 + 24);
    uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9);
    if (!(_DWORD)result)
    {
      v12(v8, v4);
      uint64_t v10 = v8 + *(int *)(v9 + 24);
      uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v10, 1LL, v11);
      if (!(_DWORD)result) {
        return ((uint64_t (*)(uint64_t, uint64_t))v12)(v10, v4);
      }
    }
  }

  return result;
}

uint64_t sub_10006CDB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100003A0C(&qword_1003517E8);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    uint64_t v56 = v15;
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    uint64_t v20 = v14[6];
    uint64_t v21 = &v12[v20];
    uint64_t v22 = &v13[v20];
    uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1LL, v23))
    {
      uint64_t v25 = sub_100003A0C(&qword_1003517E0);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64LL));
    }

    else
    {
      uint64_t v54 = v24;
      v7((uint64_t)v21, (uint64_t)v22, v6);
      uint64_t v26 = *(int *)(v23 + 20);
      uint64_t v27 = &v21[v26];
      uint64_t v28 = &v22[v26];
      *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
      v27[4] = v28[4];
      uint64_t v29 = *(int *)(v23 + 24);
      uint64_t v55 = v21;
      uint64_t v30 = &v21[v29];
      uint64_t v31 = &v22[v29];
      uint64_t v32 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
      uint64_t v53 = *(void *)(v32 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v31, 1LL, v32))
      {
        uint64_t v33 = sub_100003A0C(&qword_1003517D8);
        memcpy(v30, v31, *(void *)(*(void *)(v33 - 8) + 64LL));
      }

      else
      {
        v7((uint64_t)v30, (uint64_t)v31, v6);
        uint64_t v34 = *(int *)(v32 + 20);
        uint64_t v35 = &v30[v34];
        uint64_t v36 = &v31[v34];
        *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
        v35[4] = v36[4];
        v30[*(int *)(v32 + 24)] = v31[*(int *)(v32 + 24)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v30, 0LL, 1LL, v32);
      }

      (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v55, 0LL, 1LL, v23);
    }

    uint64_t v37 = v14[7];
    uint64_t v38 = &v12[v37];
    int v39 = &v13[v37];
    *(_DWORD *)uint64_t v38 = *(_DWORD *)v39;
    v38[4] = v39[4];
    uint64_t v40 = v14[8];
    uint64_t v41 = &v12[v40];
    uint64_t v42 = &v13[v40];
    v41[4] = v42[4];
    *(_DWORD *)uint64_t v41 = *(_DWORD *)v42;
    uint64_t v43 = v14[9];
    uint64_t v44 = &v12[v43];
    uint64_t v45 = &v13[v43];
    *(_DWORD *)uint64_t v44 = *(_DWORD *)v45;
    v44[4] = v45[4];
    uint64_t v46 = v14[10];
    uint64_t v47 = &v12[v46];
    uint64_t v48 = &v13[v46];
    *(_DWORD *)uint64_t v47 = *(_DWORD *)v48;
    v47[4] = v48[4];
    uint64_t v49 = v14[11];
    uint64_t v50 = &v12[v49];
    uint64_t v51 = &v13[v49];
    *(_DWORD *)uint64_t v50 = *(_DWORD *)v51;
    v50[4] = v51[4];
    (*(void (**)(char *, void, uint64_t, int *))(v56 + 56))(v12, 0LL, 1LL, v14);
  }

  return a1;
}

uint64_t sub_10006D0C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  char v12 = *(_BYTE *)(v11 + 4);
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = v12;
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (char *)(a1 + v13);
  uint64_t v15 = (char *)(a2 + v13);
  uint64_t v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
  uint64_t v17 = *((void *)v16 - 1);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, int *))(v17 + 48);
  int v19 = v18(v14, 1LL, v16);
  int v20 = v18(v15, 1LL, v16);
  if (!v19)
  {
    if (v20)
    {
      sub_100004090((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
      goto LABEL_7;
    }

    uint64_t v136 = a1;
    v8((uint64_t)v14, (uint64_t)v15, v6);
    uint64_t v32 = v16[5];
    uint64_t v33 = &v14[v32];
    uint64_t v34 = &v15[v32];
    char v35 = v34[4];
    *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
    v33[4] = v35;
    uint64_t v36 = v16[6];
    uint64_t v37 = &v14[v36];
    uint64_t v38 = &v15[v36];
    uint64_t v39 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
    uint64_t v132 = *(void *)(v39 - 8);
    uint64_t v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v132 + 48);
    uint64_t v141 = (uint64_t)v37;
    LODWORD(v37) = v40(v37, 1LL, v39);
    uint64_t v134 = v39;
    int v41 = v40(v38, 1LL, v39);
    if ((_DWORD)v37)
    {
      if (!v41)
      {
        uint64_t v131 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 16);
        v131(v141, v38, v6);
        uint64_t v52 = *(int *)(v39 + 20);
        uint64_t v53 = v141 + v52;
        uint64_t v54 = &v38[v52];
        char v55 = v54[4];
        *(_DWORD *)uint64_t v53 = *(_DWORD *)v54;
        *(_BYTE *)(v53 + 4) = v55;
        uint64_t v56 = *(int *)(v39 + 24);
        uint64_t v57 = (char *)(v141 + v56);
        uint64_t v58 = &v38[v56];
        uint64_t v59 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
        uint64_t v60 = *(void *)(v59 - 8);
        a1 = v136;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v58, 1LL, v59))
        {
          uint64_t v61 = sub_100003A0C(&qword_1003517D8);
          memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64LL));
        }

        else
        {
          v131((uint64_t)v57, v58, v6);
          uint64_t v98 = *(int *)(v59 + 20);
          uint64_t v99 = &v57[v98];
          uint64_t v100 = &v58[v98];
          int v101 = *(_DWORD *)v100;
          v99[4] = v100[4];
          *(_DWORD *)uint64_t v99 = v101;
          v57[*(int *)(v59 + 24)] = v58[*(int *)(v59 + 24)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v57, 0LL, 1LL, v59);
        }

        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v132 + 56))(v141, 0LL, 1LL, v134);
        goto LABEL_31;
      }

      size_t v42 = *(void *)(*(void *)(sub_100003A0C(&qword_1003517E0) - 8) + 64LL);
      uint64_t v43 = (void *)v141;
    }

    else
    {
      if (!v41)
      {
        v8(v141, (uint64_t)v38, v6);
        uint64_t v86 = *(int *)(v39 + 20);
        uint64_t v87 = v141 + v86;
        uint64_t v88 = &v38[v86];
        char v89 = v88[4];
        *(_DWORD *)uint64_t v87 = *(_DWORD *)v88;
        *(_BYTE *)(v87 + 4) = v89;
        uint64_t v90 = *(int *)(v39 + 24);
        uint64_t v91 = v141 + v90;
        uint64_t v92 = &v38[v90];
        uint64_t v93 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
        uint64_t v135 = *(void *)(v93 - 8);
        double v94 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v135 + 48);
        uint64_t v142 = v91;
        LODWORD(v91) = v94(v91, 1LL, v93);
        __dsta = v92;
        int v95 = v94((uint64_t)v92, 1LL, v93);
        if ((_DWORD)v91)
        {
          a1 = v136;
          if (!v95)
          {
            (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v142, __dsta, v6);
            uint64_t v102 = *(int *)(v93 + 20);
            uint64_t v103 = v142 + v102;
            uint64_t v104 = &__dsta[v102];
            int v105 = *(_DWORD *)v104;
            *(_BYTE *)(v103 + 4) = v104[4];
            *(_DWORD *)uint64_t v103 = v105;
            *(_BYTE *)(v142 + *(int *)(v93 + 24)) = __dsta[*(int *)(v93 + 24)];
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v135 + 56))(v142, 0LL, 1LL, v93);
            goto LABEL_31;
          }

          size_t v96 = *(void *)(*(void *)(sub_100003A0C(&qword_1003517D8) - 8) + 64LL);
          uint64_t v97 = (void *)v142;
        }

        else
        {
          a1 = v136;
          if (!v95)
          {
            v8(v142, (uint64_t)__dsta, v6);
            uint64_t v106 = *(int *)(v93 + 20);
            uint64_t v107 = v142 + v106;
            uint64_t v108 = &__dsta[v106];
            int v109 = *(_DWORD *)v108;
            *(_BYTE *)(v107 + 4) = v108[4];
            *(_DWORD *)uint64_t v107 = v109;
            *(_BYTE *)(v142 + *(int *)(v93 + 24)) = __dsta[*(int *)(v93 + 24)];
            goto LABEL_31;
          }

          sub_100004090(v142, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
          size_t v96 = *(void *)(*(void *)(sub_100003A0C(&qword_1003517D8) - 8) + 64LL);
          uint64_t v97 = (void *)v142;
        }

        memcpy(v97, __dsta, v96);
LABEL_31:
        uint64_t v110 = v16[7];
        uint64_t v111 = &v14[v110];
        uint64_t v112 = &v15[v110];
        int v113 = *(_DWORD *)v112;
        v111[4] = v112[4];
        *(_DWORD *)uint64_t v111 = v113;
        uint64_t v114 = v16[8];
        uint64_t v115 = &v14[v114];
        uint64_t v116 = &v15[v114];
        int v117 = *(_DWORD *)v116;
        v115[4] = v116[4];
        *(_DWORD *)uint64_t v115 = v117;
        uint64_t v118 = v16[9];
        uint64_t v119 = &v14[v118];
        uint64_t v120 = &v15[v118];
        int v121 = *(_DWORD *)v120;
        v119[4] = v120[4];
        *(_DWORD *)uint64_t v119 = v121;
        uint64_t v122 = v16[10];
        uint64_t v123 = &v14[v122];
        uint64_t v124 = &v15[v122];
        int v125 = *(_DWORD *)v124;
        v123[4] = v124[4];
        *(_DWORD *)uint64_t v123 = v125;
        uint64_t v126 = v16[11];
        uint64_t v127 = &v14[v126];
        uint64_t v128 = &v15[v126];
        int v129 = *(_DWORD *)v128;
        v127[4] = v128[4];
        *(_DWORD *)uint64_t v127 = v129;
        return a1;
      }

      sub_100004090(v141, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      size_t v42 = *(void *)(*(void *)(sub_100003A0C(&qword_1003517E0) - 8) + 64LL);
      uint64_t v43 = (void *)v141;
    }

    memcpy(v43, v38, v42);
    a1 = v136;
    goto LABEL_31;
  }

  if (v20)
  {
LABEL_7:
    uint64_t v31 = sub_100003A0C(&qword_1003517E8);
    memcpy(v14, v15, *(void *)(*(void *)(v31 - 8) + 64LL));
    return a1;
  }

  uint64_t v140 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v140(v14, v15, v6);
  uint64_t v21 = v16[5];
  uint64_t v22 = &v14[v21];
  uint64_t v23 = &v15[v21];
  char v24 = v23[4];
  *(_DWORD *)uint64_t v22 = *(_DWORD *)v23;
  v22[4] = v24;
  uint64_t v25 = v16[6];
  uint64_t v26 = &v14[v25];
  uint64_t v27 = &v15[v25];
  uint64_t v28 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1LL, v28))
  {
    uint64_t v30 = sub_100003A0C(&qword_1003517E0);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64LL));
  }

  else
  {
    v140(v26, v27, v6);
    uint64_t v44 = *(int *)(v28 + 20);
    uint64_t v45 = &v26[v44];
    uint64_t v46 = &v27[v44];
    char v47 = v46[4];
    *(_DWORD *)uint64_t v45 = *(_DWORD *)v46;
    v45[4] = v47;
    uint64_t v48 = *(int *)(v28 + 24);
    uint64_t v137 = v26;
    __dst = &v26[v48];
    uint64_t v49 = &v27[v48];
    uint64_t v50 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
    uint64_t v133 = *(void *)(v50 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v133 + 48))(v49, 1LL, v50))
    {
      uint64_t v51 = sub_100003A0C(&qword_1003517D8);
      memcpy(__dst, v49, *(void *)(*(void *)(v51 - 8) + 64LL));
    }

    else
    {
      v140(__dst, v49, v6);
      uint64_t v62 = *(int *)(v50 + 20);
      uint64_t v63 = &__dst[v62];
      uint64_t v64 = &v49[v62];
      int v65 = *(_DWORD *)v64;
      v63[4] = v64[4];
      *(_DWORD *)uint64_t v63 = v65;
      __dst[*(int *)(v50 + 24)] = v49[*(int *)(v50 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v133 + 56))(__dst, 0LL, 1LL, v50);
    }

    (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v137, 0LL, 1LL, v28);
  }

  uint64_t v66 = v16[7];
  int v67 = &v14[v66];
  uint64_t v68 = &v15[v66];
  int v69 = *(_DWORD *)v68;
  v67[4] = v68[4];
  *(_DWORD *)int v67 = v69;
  uint64_t v70 = v16[8];
  int v71 = &v14[v70];
  uint64_t v72 = &v15[v70];
  int v73 = *(_DWORD *)v72;
  v71[4] = v72[4];
  *(_DWORD *)int v71 = v73;
  uint64_t v74 = v16[9];
  uint64_t v75 = &v14[v74];
  int v76 = &v15[v74];
  int v77 = *(_DWORD *)v76;
  v75[4] = v76[4];
  *(_DWORD *)uint64_t v75 = v77;
  uint64_t v78 = v16[10];
  uint64_t v79 = &v14[v78];
  uint64_t v80 = &v15[v78];
  int v81 = *(_DWORD *)v80;
  v79[4] = v80[4];
  *(_DWORD *)uint64_t v79 = v81;
  uint64_t v82 = v16[11];
  uint64_t v83 = &v14[v82];
  uint64_t v84 = &v15[v82];
  int v85 = *(_DWORD *)v84;
  v83[4] = v84[4];
  *(_DWORD *)uint64_t v83 = v85;
  (*(void (**)(char *, void, uint64_t, int *))(v17 + 56))(v14, 0LL, 1LL, v16);
  return a1;
}

uint64_t sub_10006D818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  char v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100003A0C(&qword_1003517E8);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    uint64_t v56 = v15;
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    uint64_t v18 = &v12[v17];
    int v19 = &v13[v17];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    uint64_t v20 = v14[6];
    uint64_t v21 = &v12[v20];
    uint64_t v22 = &v13[v20];
    uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1LL, v23))
    {
      uint64_t v25 = sub_100003A0C(&qword_1003517E0);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64LL));
    }

    else
    {
      uint64_t v54 = v24;
      v7((uint64_t)v21, (uint64_t)v22, v6);
      uint64_t v26 = *(int *)(v23 + 20);
      uint64_t v27 = &v21[v26];
      uint64_t v28 = &v22[v26];
      *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
      v27[4] = v28[4];
      uint64_t v29 = *(int *)(v23 + 24);
      char v55 = v21;
      uint64_t v30 = &v21[v29];
      uint64_t v31 = &v22[v29];
      uint64_t v32 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
      uint64_t v53 = *(void *)(v32 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v31, 1LL, v32))
      {
        uint64_t v33 = sub_100003A0C(&qword_1003517D8);
        memcpy(v30, v31, *(void *)(*(void *)(v33 - 8) + 64LL));
      }

      else
      {
        v7((uint64_t)v30, (uint64_t)v31, v6);
        uint64_t v34 = *(int *)(v32 + 20);
        char v35 = &v30[v34];
        uint64_t v36 = &v31[v34];
        *(_DWORD *)char v35 = *(_DWORD *)v36;
        v35[4] = v36[4];
        v30[*(int *)(v32 + 24)] = v31[*(int *)(v32 + 24)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v30, 0LL, 1LL, v32);
      }

      (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v55, 0LL, 1LL, v23);
    }

    uint64_t v37 = v14[7];
    uint64_t v38 = &v12[v37];
    uint64_t v39 = &v13[v37];
    *(_DWORD *)uint64_t v38 = *(_DWORD *)v39;
    v38[4] = v39[4];
    uint64_t v40 = v14[8];
    int v41 = &v12[v40];
    size_t v42 = &v13[v40];
    v41[4] = v42[4];
    *(_DWORD *)int v41 = *(_DWORD *)v42;
    uint64_t v43 = v14[9];
    uint64_t v44 = &v12[v43];
    uint64_t v45 = &v13[v43];
    *(_DWORD *)uint64_t v44 = *(_DWORD *)v45;
    v44[4] = v45[4];
    uint64_t v46 = v14[10];
    char v47 = &v12[v46];
    uint64_t v48 = &v13[v46];
    *(_DWORD *)char v47 = *(_DWORD *)v48;
    v47[4] = v48[4];
    uint64_t v49 = v14[11];
    uint64_t v50 = &v12[v49];
    uint64_t v51 = &v13[v49];
    *(_DWORD *)uint64_t v50 = *(_DWORD *)v51;
    v50[4] = v51[4];
    (*(void (**)(char *, void, uint64_t, int *))(v56 + 56))(v12, 0LL, 1LL, v14);
  }

  return a1;
}

uint64_t sub_10006DB28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = a1 + v9;
  uint64_t v12 = a2 + v9;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  uint64_t v13 = (char *)(a1 + v10);
  uint64_t v14 = (char *)(a2 + v10);
  uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
  uint64_t v16 = *((void *)v15 - 1);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, int *))(v16 + 48);
  int v18 = v17(v13, 1LL, v15);
  int v19 = v17(v14, 1LL, v15);
  if (!v18)
  {
    if (v19)
    {
      sub_100004090((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
      goto LABEL_7;
    }

    uint64_t v116 = a1;
    v8((uint64_t)v13, (uint64_t)v14, v6);
    uint64_t v30 = v15[5];
    uint64_t v31 = &v13[v30];
    uint64_t v32 = &v14[v30];
    *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
    v31[4] = v32[4];
    uint64_t v33 = v15[6];
    uint64_t v34 = &v13[v33];
    char v35 = &v14[v33];
    uint64_t v36 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
    uint64_t v112 = *(void *)(v36 - 8);
    uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v112 + 48);
    uint64_t v121 = (uint64_t)v34;
    LODWORD(v34) = v37(v34, 1LL, v36);
    uint64_t v114 = v36;
    int v38 = v37(v35, 1LL, v36);
    if ((_DWORD)v34)
    {
      if (!v38)
      {
        uint64_t v111 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
        v111(v121, v35, v6);
        uint64_t v48 = *(int *)(v36 + 20);
        uint64_t v49 = v121 + v48;
        uint64_t v50 = &v35[v48];
        *(_DWORD *)uint64_t v49 = *(_DWORD *)v50;
        *(_BYTE *)(v49 + 4) = v50[4];
        uint64_t v51 = *(int *)(v36 + 24);
        uint64_t v52 = (char *)(v121 + v51);
        uint64_t v53 = &v35[v51];
        uint64_t v54 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
        uint64_t v55 = *(void *)(v54 - 8);
        a1 = v116;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1LL, v54))
        {
          uint64_t v56 = sub_100003A0C(&qword_1003517D8);
          memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64LL));
        }

        else
        {
          v111((uint64_t)v52, v53, v6);
          uint64_t v86 = *(int *)(v54 + 20);
          uint64_t v87 = &v52[v86];
          uint64_t v88 = &v53[v86];
          *(_DWORD *)uint64_t v87 = *(_DWORD *)v88;
          v87[4] = v88[4];
          v52[*(int *)(v54 + 24)] = v53[*(int *)(v54 + 24)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v52, 0LL, 1LL, v54);
        }

        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v112 + 56))(v121, 0LL, 1LL, v114);
        goto LABEL_31;
      }

      size_t v39 = *(void *)(*(void *)(sub_100003A0C(&qword_1003517E0) - 8) + 64LL);
      uint64_t v40 = (void *)v121;
    }

    else
    {
      if (!v38)
      {
        v8(v121, (uint64_t)v35, v6);
        uint64_t v75 = *(int *)(v36 + 20);
        uint64_t v76 = v121 + v75;
        int v77 = &v35[v75];
        *(_DWORD *)uint64_t v76 = *(_DWORD *)v77;
        *(_BYTE *)(v76 + 4) = v77[4];
        uint64_t v78 = *(int *)(v36 + 24);
        uint64_t v79 = v121 + v78;
        uint64_t v80 = &v35[v78];
        uint64_t v81 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
        uint64_t v115 = *(void *)(v81 - 8);
        uint64_t v82 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v115 + 48);
        uint64_t v122 = v79;
        LODWORD(v79) = v82(v79, 1LL, v81);
        __dsta = v80;
        int v83 = v82((uint64_t)v80, 1LL, v81);
        if ((_DWORD)v79)
        {
          a1 = v116;
          if (!v83)
          {
            (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v122, __dsta, v6);
            uint64_t v89 = *(int *)(v81 + 20);
            uint64_t v90 = v122 + v89;
            uint64_t v91 = &__dsta[v89];
            *(_DWORD *)uint64_t v90 = *(_DWORD *)v91;
            *(_BYTE *)(v90 + 4) = v91[4];
            *(_BYTE *)(v122 + *(int *)(v81 + 24)) = __dsta[*(int *)(v81 + 24)];
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v115 + 56))(v122, 0LL, 1LL, v81);
            goto LABEL_31;
          }

          size_t v84 = *(void *)(*(void *)(sub_100003A0C(&qword_1003517D8) - 8) + 64LL);
          int v85 = (void *)v122;
        }

        else
        {
          a1 = v116;
          if (!v83)
          {
            v8(v122, (uint64_t)__dsta, v6);
            uint64_t v92 = *(int *)(v81 + 20);
            uint64_t v93 = v122 + v92;
            double v94 = &__dsta[v92];
            *(_DWORD *)uint64_t v93 = *(_DWORD *)v94;
            *(_BYTE *)(v93 + 4) = v94[4];
            *(_BYTE *)(v122 + *(int *)(v81 + 24)) = __dsta[*(int *)(v81 + 24)];
            goto LABEL_31;
          }

          sub_100004090(v122, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
          size_t v84 = *(void *)(*(void *)(sub_100003A0C(&qword_1003517D8) - 8) + 64LL);
          int v85 = (void *)v122;
        }

        memcpy(v85, __dsta, v84);
LABEL_31:
        uint64_t v95 = v15[7];
        size_t v96 = &v13[v95];
        uint64_t v97 = &v14[v95];
        *(_DWORD *)size_t v96 = *(_DWORD *)v97;
        v96[4] = v97[4];
        uint64_t v98 = v15[8];
        uint64_t v99 = &v13[v98];
        uint64_t v100 = &v14[v98];
        v99[4] = v100[4];
        *(_DWORD *)uint64_t v99 = *(_DWORD *)v100;
        uint64_t v101 = v15[9];
        uint64_t v102 = &v13[v101];
        uint64_t v103 = &v14[v101];
        *(_DWORD *)uint64_t v102 = *(_DWORD *)v103;
        v102[4] = v103[4];
        uint64_t v104 = v15[10];
        int v105 = &v13[v104];
        uint64_t v106 = &v14[v104];
        *(_DWORD *)int v105 = *(_DWORD *)v106;
        v105[4] = v106[4];
        uint64_t v107 = v15[11];
        uint64_t v108 = &v13[v107];
        int v109 = &v14[v107];
        *(_DWORD *)uint64_t v108 = *(_DWORD *)v109;
        v108[4] = v109[4];
        return a1;
      }

      sub_100004090(v121, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      size_t v39 = *(void *)(*(void *)(sub_100003A0C(&qword_1003517E0) - 8) + 64LL);
      uint64_t v40 = (void *)v121;
    }

    memcpy(v40, v35, v39);
    a1 = v116;
    goto LABEL_31;
  }

  if (v19)
  {
LABEL_7:
    uint64_t v29 = sub_100003A0C(&qword_1003517E8);
    memcpy(v13, v14, *(void *)(*(void *)(v29 - 8) + 64LL));
    return a1;
  }

  uint64_t v120 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v120(v13, v14, v6);
  uint64_t v20 = v15[5];
  uint64_t v21 = &v13[v20];
  uint64_t v22 = &v14[v20];
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  v21[4] = v22[4];
  uint64_t v23 = v15[6];
  uint64_t v24 = &v13[v23];
  uint64_t v25 = &v14[v23];
  uint64_t v26 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26))
  {
    uint64_t v28 = sub_100003A0C(&qword_1003517E0);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    v120(v24, v25, v6);
    uint64_t v41 = *(int *)(v26 + 20);
    size_t v42 = &v24[v41];
    uint64_t v43 = &v25[v41];
    *(_DWORD *)size_t v42 = *(_DWORD *)v43;
    v42[4] = v43[4];
    uint64_t v44 = *(int *)(v26 + 24);
    int v117 = v24;
    __dst = &v24[v44];
    uint64_t v45 = &v25[v44];
    uint64_t v46 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
    uint64_t v113 = *(void *)(v46 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48))(v45, 1LL, v46))
    {
      uint64_t v47 = sub_100003A0C(&qword_1003517D8);
      memcpy(__dst, v45, *(void *)(*(void *)(v47 - 8) + 64LL));
    }

    else
    {
      v120(__dst, v45, v6);
      uint64_t v57 = *(int *)(v46 + 20);
      uint64_t v58 = &__dst[v57];
      uint64_t v59 = &v45[v57];
      *(_DWORD *)uint64_t v58 = *(_DWORD *)v59;
      v58[4] = v59[4];
      __dst[*(int *)(v46 + 24)] = v45[*(int *)(v46 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v113 + 56))(__dst, 0LL, 1LL, v46);
    }

    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v117, 0LL, 1LL, v26);
  }

  uint64_t v60 = v15[7];
  uint64_t v61 = &v13[v60];
  uint64_t v62 = &v14[v60];
  *(_DWORD *)uint64_t v61 = *(_DWORD *)v62;
  v61[4] = v62[4];
  uint64_t v63 = v15[8];
  uint64_t v64 = &v13[v63];
  int v65 = &v14[v63];
  v64[4] = v65[4];
  *(_DWORD *)uint64_t v64 = *(_DWORD *)v65;
  uint64_t v66 = v15[9];
  int v67 = &v13[v66];
  uint64_t v68 = &v14[v66];
  *(_DWORD *)int v67 = *(_DWORD *)v68;
  v67[4] = v68[4];
  uint64_t v69 = v15[10];
  uint64_t v70 = &v13[v69];
  int v71 = &v14[v69];
  *(_DWORD *)uint64_t v70 = *(_DWORD *)v71;
  v70[4] = v71[4];
  uint64_t v72 = v15[11];
  int v73 = &v13[v72];
  uint64_t v74 = &v14[v72];
  *(_DWORD *)int v73 = *(_DWORD *)v74;
  _BYTE v73[4] = v74[4];
  (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0LL, 1LL, v15);
  return a1;
}

uint64_t sub_10006E278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006E284);
}

uint64_t sub_10006E284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100074A8C(a1, a2, a3, &qword_1003517E8);
}

uint64_t sub_10006E290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006E29C);
}

uint64_t sub_10006E29C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100074B1C(a1, a2, a3, a4, &qword_1003517E8);
}

void sub_10006E2A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_10006E2D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006E2E4);
}

uint64_t sub_10006E2E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006E2F4);
}

uint64_t sub_10006E2F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100076804(a1, a2, a3, (uint64_t)&unk_1002B9D88, (uint64_t)&unk_1002B9D88, (uint64_t)&unk_1002B9D88);
}

uint64_t sub_10006E320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006E32C);
}

uint64_t sub_10006E330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006E33C);
}

uint64_t sub_10006E340(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100074134( a1,  a2,  a3,  (uint64_t)&unk_1002B9D88,  (uint64_t)&unk_1002B9D88,  (uint64_t)&unk_1002B9D88,  (uint64_t)&unk_1002B9D88);
}

uint64_t sub_10006E358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006E364);
}

uint64_t sub_10006E368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006E374);
}

void *sub_10006E378(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (void *)(v10 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v10);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    uint64_t v9 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }

  return a1;
}

uint64_t sub_10006E428(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10006E4AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10006E538(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10006E5BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10006E640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006E64C);
}

uint64_t sub_10006E650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006E65C);
}

uint64_t sub_10006E660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006E66C);
}

uint64_t sub_10006E670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006E67C);
}

uint64_t sub_10006E680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006E68C);
}

uint64_t sub_10006E690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006E69C);
}

void *sub_10006E6A0(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (void *)(v10 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v10);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    uint64_t v9 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
  }

  return a1;
}

uint64_t sub_10006E744(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  return a1;
}

uint64_t sub_10006E7BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_10006E83C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  return a1;
}

uint64_t sub_10006E8B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  return a1;
}

uint64_t sub_10006E92C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006E938);
}

uint64_t sub_10006E93C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006E948);
}

void *sub_10006E94C(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (void *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v13);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    uint64_t v9 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
    uint64_t v10 = a3[10];
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *((_BYTE *)a1 + v10) = *((_BYTE *)a2 + v10);
    uint64_t v11 = a3[12];
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
    uint64_t v12 = a3[14];
    *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
    *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
  }

  return a1;
}

uint64_t sub_10006EA2C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  uint64_t v11 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  return a1;
}

uint64_t sub_10006EAE0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  return a1;
}

uint64_t sub_10006EBA8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  uint64_t v11 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  return a1;
}

uint64_t sub_10006EC5C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  uint64_t v11 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  return a1;
}

uint64_t sub_10006ED10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006ED1C);
}

uint64_t sub_10006ED20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006ED2C);
}

uint64_t sub_10006ED30(uint64_t a1)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_1002B9D88;
    void v4[2] = &unk_1002B9D88;
    v4[3] = &unk_1002B9D88;
    void v4[4] = &unk_1002B9D88;
    v4[5] = &unk_1002B9D88;
    v4[6] = &unk_1002B9D88;
    v4[7] = &unk_1002B9D88;
    v4[8] = &unk_1002B9D88;
    v4[9] = &unk_1002B9D88;
    v4[10] = &unk_1002B9D88;
    swift_initStructMetadata(a1, 256LL, 11LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void *sub_10006EDB4(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v9);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  }

  return a1;
}

uint64_t sub_10006EE50(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10006EEC0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10006EF34(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10006EFA4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10006F014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006F020);
}

uint64_t sub_10006F024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unsigned int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2) {
    int v10 = ((v9 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v10 = -2;
  }
  if (v10 < 0) {
    int v10 = -1;
  }
  return (v10 + 1);
}

uint64_t sub_10006F0BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006F0C8);
}

uint64_t sub_10006F0CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  return result;
}

uint64_t sub_10006F144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007EEAC(a1, a2, a3, (uint64_t)&unk_1002B9D88, (uint64_t)&unk_1002B9D88);
}

uint64_t sub_10006F16C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006F178);
}

uint64_t sub_10006F17C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006F188);
}

uint64_t sub_10006F1A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006F1B0);
}

uint64_t sub_10006F1B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006F1C0);
}

uint64_t sub_10006F1C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007EEAC(a1, a2, a3, (uint64_t)"\t", (uint64_t)&unk_1002B9D88);
}

uint64_t sub_10006F1D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006F1E4);
}

uint64_t sub_10006F1E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006F1F4);
}

void *sub_10006F1F8(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (void *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    int v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)int v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
  }

  return a1;
}

uint64_t sub_10006F2BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  uint64_t v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  return a1;
}

uint64_t sub_10006F354(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
  *(void *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(_BYTE *)(v12 + 8) = v10;
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_10006F3F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  uint64_t v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  return a1;
}

uint64_t sub_10006F48C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  uint64_t v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  return a1;
}

uint64_t sub_10006F524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006F530);
}

uint64_t sub_10006F534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unsigned int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 2) {
    int v10 = ((v9 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v10 = -2;
  }
  if (v10 < 0) {
    int v10 = -1;
  }
  return (v10 + 1);
}

uint64_t sub_10006F5CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006F5D8);
}

uint64_t sub_10006F5DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 2sub_10005F30C( *(void *)(v0 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata),  *(void *)(v0 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata + 8)) = a2 + 2;
  return result;
}

uint64_t sub_10006F654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100076804(a1, a2, a3, (uint64_t)"\t", (uint64_t)"\t", (uint64_t)&unk_1002B9D88);
}

void *sub_10006F66C(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (void *)(v20 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v20);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    int v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)int v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    uint64_t v16 = (char *)a1 + v14;
    uint64_t v17 = (char *)a2 + v14;
    *(void *)uint64_t v16 = *(void *)v17;
    v16[8] = v17[8];
    int v18 = (char *)a1 + v15;
    int v19 = (char *)a2 + v15;
    v18[8] = v19[8];
    *(void *)int v18 = *(void *)v19;
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }

  return a1;
}

uint64_t sub_10006F75C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(void *)uint64_t v17 = *(void *)v18;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10006F820(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
  *(void *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(_BYTE *)(v12 + 8) = v10;
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  LOBYTE(v10) = *(_BYTE *)(v16 + 8);
  *(void *)uint64_t v15 = *(void *)v16;
  *(_BYTE *)(v15 + 8) = v10;
  uint64_t v17 = a3[8];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  LOBYTE(v10) = *(_BYTE *)(v19 + 8);
  *(void *)uint64_t v18 = *(void *)v19;
  *(_BYTE *)(v18 + 8) = v10;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10006F8EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(void *)uint64_t v17 = *(void *)v18;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10006F9B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(void *)uint64_t v17 = *(void *)v18;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10006FA74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006FA80);
}

uint64_t sub_10006FA84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006FA90);
}

uint64_t sub_10006FA94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100074134(a1, a2, a3, (uint64_t)"\t", (uint64_t)"\t", (uint64_t)"\t", (uint64_t)&unk_1002B9D88);
}

uint64_t *sub_10006FAB0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0LL);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1LL, v12))
    {
      uint64_t v14 = sub_100003A0C(&qword_100351838);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      v10[v12[7]] = v11[v12[7]];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
    }

    uint64_t v22 = a3[6];
    uint64_t v23 = (char *)a1 + v22;
    uint64_t v24 = (char *)a2 + v22;
    uint64_t v25 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0LL);
    uint64_t v26 = *((void *)v25 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v26 + 48))(v24, 1LL, v25))
    {
      uint64_t v27 = sub_100003A0C(&qword_100351840);
      memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64LL));
    }

    else
    {
      v8((uint64_t *)v23, (uint64_t *)v24, v7);
      uint64_t v28 = v25[5];
      uint64_t v29 = &v23[v28];
      uint64_t v30 = &v24[v28];
      *(void *)uint64_t v29 = *(void *)v30;
      v29[8] = v30[8];
      uint64_t v31 = v25[6];
      uint64_t v32 = &v23[v31];
      uint64_t v33 = &v24[v31];
      *(void *)uint64_t v32 = *(void *)v33;
      v32[8] = v33[8];
      v23[v25[7]] = v24[v25[7]];
      (*(void (**)(char *, void, uint64_t, int *))(v26 + 56))(v23, 0LL, 1LL, v25);
    }

    uint64_t v34 = a3[7];
    char v35 = (char *)a1 + v34;
    uint64_t v36 = (char *)a2 + v34;
    *(_DWORD *)char v35 = *(_DWORD *)v36;
    v35[4] = v36[4];
  }

  return a1;
}

uint64_t sub_10006FCEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v10(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0LL);
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))(v7, 1LL, v8);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v7, v4);
  }
  return result;
}

uint64_t sub_10006FDC8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100351838);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    v9[v11[7]] = v10[v11[7]];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v20 = a3[6];
  uint64_t v21 = (char *)(a1 + v20);
  uint64_t v22 = (char *)(a2 + v20);
  uint64_t v23 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0LL);
  uint64_t v24 = *((void *)v23 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v24 + 48))(v22, 1LL, v23))
  {
    uint64_t v25 = sub_100003A0C(&qword_100351840);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v21, (uint64_t)v22, v6);
    uint64_t v26 = v23[5];
    uint64_t v27 = &v21[v26];
    uint64_t v28 = &v22[v26];
    *(void *)uint64_t v27 = *(void *)v28;
    v27[8] = v28[8];
    uint64_t v29 = v23[6];
    uint64_t v30 = &v21[v29];
    uint64_t v31 = &v22[v29];
    *(void *)uint64_t v30 = *(void *)v31;
    v30[8] = v31[8];
    v21[v23[7]] = v22[v23[7]];
    (*(void (**)(char *, void, uint64_t, int *))(v24 + 56))(v21, 0LL, 1LL, v23);
  }

  uint64_t v32 = a3[7];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  return a1;
}

uint64_t sub_10006FFD8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v59 = *(void *)(v6 - 8);
  uint64_t v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 24);
  v58(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (_BYTE *)(a1 + v7);
  uint64_t v9 = (_BYTE *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0LL);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v59 + 16))(v8, v9, v6);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      uint64_t v18 = *(void *)v17;
      v16[8] = v17[8];
      *(void *)uint64_t v16 = v18;
      uint64_t v19 = v10[6];
      uint64_t v20 = &v8[v19];
      uint64_t v21 = &v9[v19];
      LOBYTE(v18) = v21[8];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v18;
      v8[v10[7]] = v9[v10[7]];
      (*(void (**)(_BYTE *, void, uint64_t, int *))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    sub_100004090((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
LABEL_6:
    uint64_t v22 = sub_100003A0C(&qword_100351838);
    memcpy(v8, v9, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_7;
  }

  v58((uint64_t)v8, (uint64_t)v9, v6);
  uint64_t v44 = v10[5];
  uint64_t v45 = &v8[v44];
  uint64_t v46 = &v9[v44];
  uint64_t v47 = *(void *)v46;
  v45[8] = v46[8];
  *(void *)uint64_t v45 = v47;
  uint64_t v48 = v10[6];
  uint64_t v49 = &v8[v48];
  uint64_t v50 = &v9[v48];
  LOBYTE(v47) = v50[8];
  *(void *)uint64_t v49 = *(void *)v50;
  v49[8] = v47;
  v8[v10[7]] = v9[v10[7]];
LABEL_7:
  uint64_t v23 = a3[6];
  uint64_t v24 = (_BYTE *)(a1 + v23);
  uint64_t v25 = (_BYTE *)(a2 + v23);
  uint64_t v26 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0LL);
  uint64_t v27 = *((void *)v26 - 1);
  uint64_t v28 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v27 + 48);
  int v29 = v28(v24, 1LL, v26);
  int v30 = v28(v25, 1LL, v26);
  if (!v29)
  {
    if (!v30)
    {
      v58((uint64_t)v24, (uint64_t)v25, v6);
      uint64_t v51 = v26[5];
      uint64_t v52 = &v24[v51];
      uint64_t v53 = &v25[v51];
      uint64_t v54 = *(void *)v53;
      v52[8] = v53[8];
      *(void *)uint64_t v52 = v54;
      uint64_t v55 = v26[6];
      uint64_t v56 = &v24[v55];
      uint64_t v57 = &v25[v55];
      LOBYTE(v54) = v57[8];
      *(void *)uint64_t v56 = *(void *)v57;
      v56[8] = v54;
      v24[v26[7]] = v25[v26[7]];
      goto LABEL_13;
    }

    sub_100004090((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
    goto LABEL_12;
  }

  if (v30)
  {
LABEL_12:
    uint64_t v38 = sub_100003A0C(&qword_100351840);
    memcpy(v24, v25, *(void *)(*(void *)(v38 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v59 + 16))(v24, v25, v6);
  uint64_t v31 = v26[5];
  uint64_t v32 = &v24[v31];
  uint64_t v33 = &v25[v31];
  uint64_t v34 = *(void *)v33;
  v32[8] = v33[8];
  *(void *)uint64_t v32 = v34;
  uint64_t v35 = v26[6];
  uint64_t v36 = &v24[v35];
  uint64_t v37 = &v25[v35];
  LOBYTE(v34) = v37[8];
  *(void *)uint64_t v36 = *(void *)v37;
  v36[8] = v34;
  v24[v26[7]] = v25[v26[7]];
  (*(void (**)(_BYTE *, void, uint64_t, int *))(v27 + 56))(v24, 0LL, 1LL, v26);
LABEL_13:
  uint64_t v39 = a3[7];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = (int *)(a2 + v39);
  int v42 = *v41;
  *(_BYTE *)(v40 + 4) = *((_BYTE *)v41 + 4);
  *(_DWORD *)uint64_t v40 = v42;
  return a1;
}

uint64_t sub_100070318(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100351838);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    v9[v11[7]] = v10[v11[7]];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v20 = a3[6];
  uint64_t v21 = (char *)(a1 + v20);
  uint64_t v22 = (char *)(a2 + v20);
  uint64_t v23 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0LL);
  uint64_t v24 = *((void *)v23 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v24 + 48))(v22, 1LL, v23))
  {
    uint64_t v25 = sub_100003A0C(&qword_100351840);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v21, (uint64_t)v22, v6);
    uint64_t v26 = v23[5];
    uint64_t v27 = &v21[v26];
    uint64_t v28 = &v22[v26];
    *(void *)uint64_t v27 = *(void *)v28;
    v27[8] = v28[8];
    uint64_t v29 = v23[6];
    int v30 = &v21[v29];
    uint64_t v31 = &v22[v29];
    *(void *)int v30 = *(void *)v31;
    v30[8] = v31[8];
    v21[v23[7]] = v22[v23[7]];
    (*(void (**)(char *, void, uint64_t, int *))(v24 + 56))(v21, 0LL, 1LL, v23);
  }

  uint64_t v32 = a3[7];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  return a1;
}

uint64_t sub_100070528(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v54 = *(void *)(v6 - 8);
  uint64_t v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 40);
  v53(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (_BYTE *)(a1 + v7);
  uint64_t v9 = (_BYTE *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0LL);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v54 + 32))(v8, v9, v6);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      *(void *)uint64_t v16 = *(void *)v17;
      v16[8] = v17[8];
      uint64_t v18 = v10[6];
      uint64_t v19 = &v8[v18];
      uint64_t v20 = &v9[v18];
      *(void *)uint64_t v19 = *(void *)v20;
      v19[8] = v20[8];
      v8[v10[7]] = v9[v10[7]];
      (*(void (**)(_BYTE *, void, uint64_t, int *))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    sub_100004090((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
LABEL_6:
    uint64_t v21 = sub_100003A0C(&qword_100351838);
    memcpy(v8, v9, *(void *)(*(void *)(v21 - 8) + 64LL));
    goto LABEL_7;
  }

  v53((uint64_t)v8, (uint64_t)v9, v6);
  uint64_t v41 = v10[5];
  int v42 = &v8[v41];
  uint64_t v43 = &v9[v41];
  *(void *)int v42 = *(void *)v43;
  v42[8] = v43[8];
  uint64_t v44 = v10[6];
  uint64_t v45 = &v8[v44];
  uint64_t v46 = &v9[v44];
  *(void *)uint64_t v45 = *(void *)v46;
  v45[8] = v46[8];
  v8[v10[7]] = v9[v10[7]];
LABEL_7:
  uint64_t v22 = a3[6];
  uint64_t v23 = (_BYTE *)(a1 + v22);
  uint64_t v24 = (_BYTE *)(a2 + v22);
  uint64_t v25 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0LL);
  uint64_t v26 = *((void *)v25 - 1);
  uint64_t v27 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v26 + 48);
  int v28 = v27(v23, 1LL, v25);
  int v29 = v27(v24, 1LL, v25);
  if (!v28)
  {
    if (!v29)
    {
      v53((uint64_t)v23, (uint64_t)v24, v6);
      uint64_t v47 = v25[5];
      uint64_t v48 = &v23[v47];
      uint64_t v49 = &v24[v47];
      *(void *)uint64_t v48 = *(void *)v49;
      v48[8] = v49[8];
      uint64_t v50 = v25[6];
      uint64_t v51 = &v23[v50];
      uint64_t v52 = &v24[v50];
      *(void *)uint64_t v51 = *(void *)v52;
      v51[8] = v52[8];
      v23[v25[7]] = v24[v25[7]];
      goto LABEL_13;
    }

    sub_100004090((uint64_t)v23, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
    goto LABEL_12;
  }

  if (v29)
  {
LABEL_12:
    uint64_t v36 = sub_100003A0C(&qword_100351840);
    memcpy(v23, v24, *(void *)(*(void *)(v36 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v54 + 32))(v23, v24, v6);
  uint64_t v30 = v25[5];
  uint64_t v31 = &v23[v30];
  uint64_t v32 = &v24[v30];
  *(void *)uint64_t v31 = *(void *)v32;
  v31[8] = v32[8];
  uint64_t v33 = v25[6];
  uint64_t v34 = &v23[v33];
  uint64_t v35 = &v24[v33];
  *(void *)uint64_t v34 = *(void *)v35;
  v34[8] = v35[8];
  v23[v25[7]] = v24[v25[7]];
  (*(void (**)(_BYTE *, void, uint64_t, int *))(v26 + 56))(v23, 0LL, 1LL, v25);
LABEL_13:
  uint64_t v37 = a3[7];
  uint64_t v38 = a1 + v37;
  uint64_t v39 = a2 + v37;
  *(_DWORD *)uint64_t v38 = *(_DWORD *)v39;
  *(_BYTE *)(v38 + 4) = *(_BYTE *)(v39 + 4);
  return a1;
}

uint64_t sub_100070868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100070874);
}

uint64_t sub_100070874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }

  else
  {
    uint64_t v11 = sub_100003A0C(&qword_100351838);
    uint64_t v12 = *(void *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      uint64_t v8 = v11;
      uint64_t v13 = *(int *)(a3 + 20);
    }

    else
    {
      uint64_t v8 = sub_100003A0C(&qword_100351840);
      uint64_t v12 = *(void *)(v8 - 8);
      uint64_t v13 = *(int *)(a3 + 24);
    }

    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_100070914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100070920);
}

uint64_t sub_100070920(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v13 = sub_100003A0C(&qword_100351838);
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v15 = *(int *)(a4 + 20);
    }

    else
    {
      uint64_t v10 = sub_100003A0C(&qword_100351840);
      uint64_t v14 = *(void *)(v10 - 8);
      uint64_t v15 = *(int *)(a4 + 24);
    }

    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_1000709C8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v8[0] = *(void *)(v2 - 8) + 64LL;
    sub_1000119EC(319LL, &qword_100352BB8, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
    if (v5 <= 0x3F)
    {
      v8[1] = *(void *)(v4 - 8) + 64LL;
      sub_1000119EC( 319LL,  (unint64_t *)&unk_100352BC0,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
      if (v7 <= 0x3F)
      {
        v8[2] = *(void *)(v6 - 8) + 64LL;
        void v8[3] = &unk_1002B9CB0;
        swift_initStructMetadata(a1, 256LL, 4LL, v8, a1 + 16);
      }
    }
  }

void *sub_100070A90(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (void *)(v14 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v14);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)uint64_t v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  }

  return a1;
}

uint64_t sub_100070B4C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100070BDC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
  *(void *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(_BYTE *)(v12 + 8) = v10;
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100070C70(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100070D00(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100070D90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100070D9C);
}

uint64_t sub_100070D9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  else {
    int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
  }
  unsigned int v10 = v9 - 6;
  else {
    return 0LL;
  }
}

uint64_t sub_100070E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100070E2C);
}

uint64_t sub_100070E2C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 2sub_10005F30C( *(void *)(v0 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata),  *(void *)(v0 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata + 8)) = a2 + 6;
  return result;
}

uint64_t sub_100070EA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007EEAC(a1, a2, a3, (uint64_t)"\t", (uint64_t)&unk_1002BA088);
}

uint64_t *sub_100070EB8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v17);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    unsigned int v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(_DWORD *)unsigned int v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    uint64_t v14 = a3[7];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
    v15[4] = v16[4];
  }

  return a1;
}

uint64_t sub_100070F84(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  return a1;
}

uint64_t sub_100071024(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(_BYTE *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(_BYTE *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  char v18 = *(_BYTE *)(v17 + 4);
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = v18;
  return a1;
}

uint64_t sub_1000710C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  return a1;
}

uint64_t sub_100071168(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  return a1;
}

uint64_t sub_100071208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100071214);
}

uint64_t sub_100071218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100071224);
}

uint64_t sub_100071228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007EEAC(a1, a2, a3, (uint64_t)&unk_1002B9CB0, (uint64_t)&unk_1002B9CB0);
}

uint64_t sub_100071238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100071244);
}

uint64_t sub_100071248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100071254);
}

uint64_t sub_100071258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100071264);
}

uint64_t sub_100071268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100071274);
}

void *sub_100071278(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (void *)(v20 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v20);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    uint64_t v16 = (char *)a1 + v14;
    uint64_t v17 = (char *)a2 + v14;
    *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
    v16[4] = v17[4];
    char v18 = (char *)a1 + v15;
    uint64_t v19 = (char *)a2 + v15;
    v18[4] = v19[4];
    *(_DWORD *)char v18 = *(_DWORD *)v19;
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }

  return a1;
}

uint64_t sub_100071368(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10007142C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (int *)(a2 + v7);
  int v10 = *v9;
  *(_BYTE *)(v8 + 4) = *((_BYTE *)v9 + 4);
  *(_DWORD *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v10;
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  LOBYTE(v10) = *(_BYTE *)(v16 + 4);
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = v10;
  uint64_t v17 = a3[8];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  LOBYTE(v10) = *(_BYTE *)(v19 + 4);
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = v10;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000714F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000715BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100071680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007168C);
}

uint64_t sub_100071690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unsigned int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 36));
  if (v9 >= 2) {
    int v10 = ((v9 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v10 = -2;
  }
  if (v10 < 0) {
    int v10 = -1;
  }
  return (v10 + 1);
}

uint64_t sub_100071728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100071734);
}

uint64_t sub_100071738(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 36)) = a2 + 2;
  return result;
}

uint64_t sub_1000717B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100074134( a1,  a2,  a3,  (uint64_t)&unk_1002B9CB0,  (uint64_t)&unk_1002B9CB0,  (uint64_t)&unk_1002B9CB0,  (uint64_t)&unk_1002B9D88);
}

uint64_t *sub_1000717CC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v24);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    int v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)int v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    uint64_t v16 = (char *)a1 + v14;
    uint64_t v17 = (char *)a2 + v14;
    *(void *)uint64_t v16 = *(void *)v17;
    v16[8] = v17[8];
    uint64_t v18 = (char *)a1 + v15;
    uint64_t v19 = (char *)a2 + v15;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = a3[9];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    uint64_t v23 = *(void *)v22;
    v21[8] = v22[8];
    *(void *)uint64_t v21 = v23;
  }

  return a1;
}

uint64_t sub_1000718CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(void *)uint64_t v17 = *(void *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  uint64_t v19 = a3[9];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v22 = *v21;
  *(_BYTE *)(v20 + 8) = *((_BYTE *)v21 + 8);
  *(void *)uint64_t v20 = v22;
  return a1;
}

uint64_t sub_1000719A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(_BYTE *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(_BYTE *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(_BYTE *)(v12 + 8) = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  char v18 = *(_BYTE *)(v17 + 8);
  *(void *)uint64_t v16 = *(void *)v17;
  *(_BYTE *)(v16 + 8) = v18;
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  char v22 = *(_BYTE *)(v21 + 8);
  *(void *)uint64_t v20 = *(void *)v21;
  *(_BYTE *)(v20 + 8) = v22;
  uint64_t v23 = a3[9];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  char v26 = *(_BYTE *)(v25 + 8);
  *(void *)uint64_t v24 = *(void *)v25;
  *(_BYTE *)(v24 + 8) = v26;
  return a1;
}

uint64_t sub_100071A7C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(void *)uint64_t v17 = *(void *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  uint64_t v19 = a3[9];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v22 = *v21;
  *(_BYTE *)(v20 + 8) = *((_BYTE *)v21 + 8);
  *(void *)uint64_t v20 = v22;
  return a1;
}

uint64_t sub_100071B50(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(void *)uint64_t v17 = *(void *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  uint64_t v19 = a3[9];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v22 = *v21;
  *(_BYTE *)(v20 + 8) = *((_BYTE *)v21 + 8);
  *(void *)uint64_t v20 = v22;
  return a1;
}

uint64_t sub_100071C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100071C30);
}

uint64_t sub_100071C34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100071C40);
}

uint64_t sub_100071C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100074134(a1, a2, a3, (uint64_t)"\t", (uint64_t)"\t", (uint64_t)"\t", (uint64_t)"\t");
}

uint64_t *sub_100071C5C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v23);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)uint64_t v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    uint64_t v16 = (char *)a1 + v14;
    uint64_t v17 = (char *)a2 + v14;
    *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
    v16[4] = v17[4];
    uint64_t v18 = (char *)a1 + v15;
    uint64_t v19 = (char *)a2 + v15;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = a3[9];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    LODWORD(v16) = *(_DWORD *)v22;
    v21[4] = v22[4];
    *(_DWORD *)uint64_t v21 = (_DWORD)v16;
  }

  return a1;
}

uint64_t sub_100071D5C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(void *)uint64_t v17 = *(void *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  uint64_t v19 = a3[9];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  LODWORD(v15) = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  *(_DWORD *)uint64_t v20 = v15;
  return a1;
}

uint64_t sub_100071E30(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(_BYTE *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(_BYTE *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  char v18 = *(_BYTE *)(v17 + 4);
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = v18;
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  char v22 = *(_BYTE *)(v21 + 8);
  *(void *)uint64_t v20 = *(void *)v21;
  *(_BYTE *)(v20 + 8) = v22;
  uint64_t v23 = a3[9];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  char v26 = *(_BYTE *)(v25 + 4);
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = v26;
  return a1;
}

uint64_t sub_100071F0C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(void *)uint64_t v17 = *(void *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  uint64_t v19 = a3[9];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  LODWORD(v15) = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  *(_DWORD *)uint64_t v20 = v15;
  return a1;
}

uint64_t sub_100071FE0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(void *)uint64_t v17 = *(void *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  uint64_t v19 = a3[9];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  LODWORD(v15) = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  *(_DWORD *)uint64_t v20 = v15;
  return a1;
}

uint64_t sub_1000720B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000720C0);
}

uint64_t sub_1000720C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000720D0);
}

uint64_t sub_1000720D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100074134(a1, a2, a3, (uint64_t)"\t", (uint64_t)&unk_1002B9CB0, (uint64_t)"\t", (uint64_t)&unk_1002B9CB0);
}

uint64_t *sub_1000720F0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v18);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    *(void *)uint64_t v11 = *(void *)v12;
    v11[8] = v12[8];
    uint64_t v13 = (char *)a1 + v10;
    uint64_t v14 = (char *)a2 + v10;
    uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0LL);
    uint64_t v16 = *((void *)v15 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1LL, v15))
    {
      uint64_t v17 = sub_100003A0C(&qword_100351880);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
    }

    else
    {
      v8((uint64_t *)v13, (uint64_t *)v14, v7);
      uint64_t v19 = v15[5];
      uint64_t v20 = &v13[v19];
      uint64_t v21 = &v14[v19];
      *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      uint64_t v22 = v15[6];
      uint64_t v23 = &v13[v22];
      uint64_t v24 = &v14[v22];
      *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
      v23[4] = v24[4];
      uint64_t v25 = v15[7];
      char v26 = &v13[v25];
      uint64_t v27 = &v14[v25];
      *(_DWORD *)char v26 = *(_DWORD *)v27;
      v26[4] = v27[4];
      uint64_t v28 = v15[8];
      int v29 = &v13[v28];
      uint64_t v30 = &v14[v28];
      *(_DWORD *)int v29 = *(_DWORD *)v30;
      v29[4] = v30[4];
      v13[v15[9]] = v14[v15[9]];
      (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0LL, 1LL, v15);
    }

    uint64_t v31 = a3[7];
    uint64_t v32 = (char *)a1 + v31;
    uint64_t v33 = (char *)a2 + v31;
    uint64_t v34 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0LL);
    uint64_t v35 = *((void *)v34 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v35 + 48))(v33, 1LL, v34))
    {
      uint64_t v36 = sub_100003A0C(&qword_100351888);
      memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64LL));
    }

    else
    {
      v8((uint64_t *)v32, (uint64_t *)v33, v7);
      uint64_t v37 = v34[5];
      uint64_t v38 = &v32[v37];
      uint64_t v39 = &v33[v37];
      *(void *)uint64_t v38 = *(void *)v39;
      v38[8] = v39[8];
      uint64_t v40 = v34[6];
      uint64_t v41 = &v32[v40];
      int v42 = &v33[v40];
      *(void *)uint64_t v41 = *(void *)v42;
      v41[8] = v42[8];
      uint64_t v43 = v34[7];
      uint64_t v44 = &v32[v43];
      uint64_t v45 = &v33[v43];
      *(void *)uint64_t v44 = *(void *)v45;
      v44[8] = v45[8];
      uint64_t v46 = v34[8];
      uint64_t v47 = &v32[v46];
      uint64_t v48 = &v33[v46];
      *(void *)uint64_t v47 = *(void *)v48;
      v47[8] = v48[8];
      uint64_t v49 = v34[9];
      uint64_t v50 = &v32[v49];
      uint64_t v51 = &v33[v49];
      *(void *)uint64_t v50 = *(void *)v51;
      v50[8] = v51[8];
      (*(void (**)(char *, void, uint64_t, int *))(v35 + 56))(v32, 0LL, 1LL, v34);
    }

    uint64_t v52 = a3[8];
    uint64_t v53 = (char *)a1 + v52;
    uint64_t v54 = (char *)a2 + v52;
    uint64_t v55 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0LL);
    uint64_t v56 = *((void *)v55 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v56 + 48))(v54, 1LL, v55))
    {
      uint64_t v57 = sub_100003A0C(&qword_100351890);
      memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64LL));
    }

    else
    {
      v8((uint64_t *)v53, (uint64_t *)v54, v7);
      uint64_t v58 = v55[5];
      uint64_t v59 = &v53[v58];
      uint64_t v60 = &v54[v58];
      *(void *)uint64_t v59 = *(void *)v60;
      v59[8] = v60[8];
      uint64_t v61 = v55[6];
      uint64_t v62 = &v53[v61];
      uint64_t v63 = &v54[v61];
      *(_DWORD *)uint64_t v62 = *(_DWORD *)v63;
      v62[4] = v63[4];
      uint64_t v64 = v55[7];
      int v65 = &v53[v64];
      uint64_t v66 = &v54[v64];
      *(_DWORD *)int v65 = *(_DWORD *)v66;
      v65[4] = v66[4];
      uint64_t v67 = v55[8];
      uint64_t v68 = &v53[v67];
      uint64_t v69 = &v54[v67];
      *(void *)uint64_t v68 = *(void *)v69;
      v68[8] = v69[8];
      uint64_t v70 = v55[9];
      int v71 = &v53[v70];
      uint64_t v72 = &v54[v70];
      *(_DWORD *)int v71 = *(_DWORD *)v72;
      v71[4] = v72[4];
      (*(void (**)(char *, void, uint64_t, int *))(v56 + 56))(v53, 0LL, 1LL, v55);
    }
  }

  return a1;
}

uint64_t sub_1000724B4(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v12(a1, v4);
  uint64_t v5 = a1 + a2[6];
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0LL);
  uint64_t v7 = a1 + a2[7];
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0LL);
  uint64_t v9 = a1 + a2[8];
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))(v9, 1LL, v10);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v9, v4);
  }
  return result;
}

uint64_t sub_1000725CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0LL);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100003A0C(&qword_100351880);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    uint64_t v20 = v14[6];
    uint64_t v21 = &v12[v20];
    uint64_t v22 = &v13[v20];
    *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
    v21[4] = v22[4];
    uint64_t v23 = v14[7];
    uint64_t v24 = &v12[v23];
    uint64_t v25 = &v13[v23];
    *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
    v24[4] = v25[4];
    uint64_t v26 = v14[8];
    uint64_t v27 = &v12[v26];
    uint64_t v28 = &v13[v26];
    *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    v12[v14[9]] = v13[v14[9]];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v29 = a3[7];
  uint64_t v30 = (char *)(a1 + v29);
  uint64_t v31 = (char *)(a2 + v29);
  uint64_t v32 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0LL);
  uint64_t v33 = *((void *)v32 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v33 + 48))(v31, 1LL, v32))
  {
    uint64_t v34 = sub_100003A0C(&qword_100351888);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v30, (uint64_t)v31, v6);
    uint64_t v35 = v32[5];
    uint64_t v36 = &v30[v35];
    uint64_t v37 = &v31[v35];
    *(void *)uint64_t v36 = *(void *)v37;
    v36[8] = v37[8];
    uint64_t v38 = v32[6];
    uint64_t v39 = &v30[v38];
    uint64_t v40 = &v31[v38];
    *(void *)uint64_t v39 = *(void *)v40;
    v39[8] = v40[8];
    uint64_t v41 = v32[7];
    int v42 = &v30[v41];
    uint64_t v43 = &v31[v41];
    *(void *)int v42 = *(void *)v43;
    v42[8] = v43[8];
    uint64_t v44 = v32[8];
    uint64_t v45 = &v30[v44];
    uint64_t v46 = &v31[v44];
    *(void *)uint64_t v45 = *(void *)v46;
    v45[8] = v46[8];
    uint64_t v47 = v32[9];
    uint64_t v48 = &v30[v47];
    uint64_t v49 = &v31[v47];
    *(void *)uint64_t v48 = *(void *)v49;
    v48[8] = v49[8];
    (*(void (**)(char *, void, uint64_t, int *))(v33 + 56))(v30, 0LL, 1LL, v32);
  }

  uint64_t v50 = a3[8];
  uint64_t v51 = (char *)(a1 + v50);
  uint64_t v52 = (char *)(a2 + v50);
  uint64_t v53 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0LL);
  uint64_t v54 = *((void *)v53 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v54 + 48))(v52, 1LL, v53))
  {
    uint64_t v55 = sub_100003A0C(&qword_100351890);
    memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v51, (uint64_t)v52, v6);
    uint64_t v56 = v53[5];
    uint64_t v57 = &v51[v56];
    uint64_t v58 = &v52[v56];
    *(void *)uint64_t v57 = *(void *)v58;
    v57[8] = v58[8];
    uint64_t v59 = v53[6];
    uint64_t v60 = &v51[v59];
    uint64_t v61 = &v52[v59];
    *(_DWORD *)uint64_t v60 = *(_DWORD *)v61;
    v60[4] = v61[4];
    uint64_t v62 = v53[7];
    uint64_t v63 = &v51[v62];
    uint64_t v64 = &v52[v62];
    *(_DWORD *)uint64_t v63 = *(_DWORD *)v64;
    v63[4] = v64[4];
    uint64_t v65 = v53[8];
    uint64_t v66 = &v51[v65];
    uint64_t v67 = &v52[v65];
    *(void *)uint64_t v66 = *(void *)v67;
    v66[8] = v67[8];
    uint64_t v68 = v53[9];
    uint64_t v69 = &v51[v68];
    uint64_t v70 = &v52[v68];
    *(_DWORD *)uint64_t v69 = *(_DWORD *)v70;
    v69[4] = v70[4];
    (*(void (**)(char *, void, uint64_t, int *))(v54 + 56))(v51, 0LL, 1LL, v53);
  }

  return a1;
}

uint64_t sub_100072964(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v146 = *(void *)(v6 - 8);
  uint64_t v145 = *(void (**)(uint64_t, uint64_t, uint64_t))(v146 + 24);
  v145(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(_BYTE *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = (_BYTE *)(a1 + v11);
  uint64_t v13 = (_BYTE *)(a2 + v11);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0LL);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v15 + 48);
  int v17 = v16(v12, 1LL, v14);
  int v18 = v16(v13, 1LL, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v146 + 16))(v12, v13, v6);
      uint64_t v19 = v14[5];
      uint64_t v20 = &v12[v19];
      uint64_t v21 = &v13[v19];
      int v22 = *(_DWORD *)v21;
      v20[4] = v21[4];
      *(_DWORD *)uint64_t v20 = v22;
      uint64_t v23 = v14[6];
      uint64_t v24 = &v12[v23];
      uint64_t v25 = &v13[v23];
      LOBYTE(v22) = v25[4];
      *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
      v24[4] = v22;
      uint64_t v26 = v14[7];
      uint64_t v27 = &v12[v26];
      uint64_t v28 = &v13[v26];
      LOBYTE(v22) = v28[4];
      *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
      v27[4] = v22;
      uint64_t v29 = v14[8];
      uint64_t v30 = &v12[v29];
      uint64_t v31 = &v13[v29];
      LOBYTE(v22) = v31[4];
      *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
      v30[4] = v22;
      v12[v14[9]] = v13[v14[9]];
      (*(void (**)(_BYTE *, void, uint64_t, int *))(v15 + 56))(v12, 0LL, 1LL, v14);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v18)
  {
    sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
LABEL_6:
    uint64_t v32 = sub_100003A0C(&qword_100351880);
    memcpy(v12, v13, *(void *)(*(void *)(v32 - 8) + 64LL));
    goto LABEL_7;
  }

  v145((uint64_t)v12, (uint64_t)v13, v6);
  uint64_t v92 = v14[5];
  uint64_t v93 = &v12[v92];
  double v94 = &v13[v92];
  int v95 = *(_DWORD *)v94;
  v93[4] = v94[4];
  *(_DWORD *)uint64_t v93 = v95;
  uint64_t v96 = v14[6];
  uint64_t v97 = &v12[v96];
  uint64_t v98 = &v13[v96];
  LOBYTE(v95) = v98[4];
  *(_DWORD *)uint64_t v97 = *(_DWORD *)v98;
  v97[4] = v95;
  uint64_t v99 = v14[7];
  uint64_t v100 = &v12[v99];
  uint64_t v101 = &v13[v99];
  LOBYTE(v95) = v101[4];
  *(_DWORD *)uint64_t v100 = *(_DWORD *)v101;
  v100[4] = v95;
  uint64_t v102 = v14[8];
  uint64_t v103 = &v12[v102];
  uint64_t v104 = &v13[v102];
  LOBYTE(v95) = v104[4];
  *(_DWORD *)uint64_t v103 = *(_DWORD *)v104;
  v103[4] = v95;
  v12[v14[9]] = v13[v14[9]];
LABEL_7:
  uint64_t v33 = a3[7];
  uint64_t v34 = (char *)(a1 + v33);
  uint64_t v35 = (char *)(a2 + v33);
  uint64_t v36 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0LL);
  uint64_t v37 = *((void *)v36 - 1);
  uint64_t v38 = *(uint64_t (**)(char *, uint64_t, int *))(v37 + 48);
  int v39 = v38(v34, 1LL, v36);
  int v40 = v38(v35, 1LL, v36);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v146 + 16))(v34, v35, v6);
      uint64_t v41 = v36[5];
      int v42 = &v34[v41];
      uint64_t v43 = &v35[v41];
      char v44 = v43[8];
      *(void *)int v42 = *(void *)v43;
      v42[8] = v44;
      uint64_t v45 = v36[6];
      uint64_t v46 = &v34[v45];
      uint64_t v47 = &v35[v45];
      char v48 = v47[8];
      *(void *)uint64_t v46 = *(void *)v47;
      v46[8] = v48;
      uint64_t v49 = v36[7];
      uint64_t v50 = &v34[v49];
      uint64_t v51 = &v35[v49];
      char v52 = v51[8];
      *(void *)uint64_t v50 = *(void *)v51;
      v50[8] = v52;
      uint64_t v53 = v36[8];
      uint64_t v54 = &v34[v53];
      uint64_t v55 = &v35[v53];
      char v56 = v55[8];
      *(void *)uint64_t v54 = *(void *)v55;
      v54[8] = v56;
      uint64_t v57 = v36[9];
      uint64_t v58 = &v34[v57];
      uint64_t v59 = &v35[v57];
      char v60 = v59[8];
      *(void *)uint64_t v58 = *(void *)v59;
      v58[8] = v60;
      (*(void (**)(char *, void, uint64_t, int *))(v37 + 56))(v34, 0LL, 1LL, v36);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v40)
  {
    sub_100004090((uint64_t)v34, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
LABEL_12:
    uint64_t v61 = sub_100003A0C(&qword_100351888);
    memcpy(v34, v35, *(void *)(*(void *)(v61 - 8) + 64LL));
    goto LABEL_13;
  }

  v145((uint64_t)v34, (uint64_t)v35, v6);
  uint64_t v105 = v36[5];
  uint64_t v106 = &v34[v105];
  uint64_t v107 = &v35[v105];
  char v108 = v107[8];
  *(void *)uint64_t v106 = *(void *)v107;
  v106[8] = v108;
  uint64_t v109 = v36[6];
  uint64_t v110 = &v34[v109];
  uint64_t v111 = &v35[v109];
  char v112 = v111[8];
  *(void *)uint64_t v110 = *(void *)v111;
  v110[8] = v112;
  uint64_t v113 = v36[7];
  uint64_t v114 = &v34[v113];
  uint64_t v115 = &v35[v113];
  char v116 = v115[8];
  *(void *)uint64_t v114 = *(void *)v115;
  v114[8] = v116;
  uint64_t v117 = v36[8];
  uint64_t v118 = &v34[v117];
  uint64_t v119 = &v35[v117];
  char v120 = v119[8];
  *(void *)uint64_t v118 = *(void *)v119;
  v118[8] = v120;
  uint64_t v121 = v36[9];
  uint64_t v122 = &v34[v121];
  uint64_t v123 = &v35[v121];
  char v124 = v123[8];
  *(void *)uint64_t v122 = *(void *)v123;
  v122[8] = v124;
LABEL_13:
  uint64_t v62 = a3[8];
  uint64_t v63 = (char *)(a1 + v62);
  uint64_t v64 = (char *)(a2 + v62);
  uint64_t v65 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0LL);
  uint64_t v66 = *((void *)v65 - 1);
  uint64_t v67 = *(uint64_t (**)(char *, uint64_t, int *))(v66 + 48);
  int v68 = v67(v63, 1LL, v65);
  int v69 = v67(v64, 1LL, v65);
  if (!v68)
  {
    if (!v69)
    {
      v145((uint64_t)v63, (uint64_t)v64, v6);
      uint64_t v125 = v65[5];
      uint64_t v126 = &v63[v125];
      uint64_t v127 = &v64[v125];
      char v128 = v127[8];
      *(void *)uint64_t v126 = *(void *)v127;
      _BYTE v126[8] = v128;
      uint64_t v129 = v65[6];
      uint64_t v130 = &v63[v129];
      uint64_t v131 = &v64[v129];
      char v132 = v131[4];
      *(_DWORD *)uint64_t v130 = *(_DWORD *)v131;
      v130[4] = v132;
      uint64_t v133 = v65[7];
      uint64_t v134 = &v63[v133];
      uint64_t v135 = &v64[v133];
      char v136 = v135[4];
      *(_DWORD *)uint64_t v134 = *(_DWORD *)v135;
      v134[4] = v136;
      uint64_t v137 = v65[8];
      uint64_t v138 = &v63[v137];
      uint64_t v139 = &v64[v137];
      char v140 = v139[8];
      *(void *)uint64_t v138 = *(void *)v139;
      v138[8] = v140;
      uint64_t v141 = v65[9];
      uint64_t v142 = &v63[v141];
      uint64_t v143 = &v64[v141];
      char v144 = v143[4];
      *(_DWORD *)uint64_t v142 = *(_DWORD *)v143;
      v142[4] = v144;
      return a1;
    }

    sub_100004090((uint64_t)v63, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
    goto LABEL_18;
  }

  if (v69)
  {
LABEL_18:
    uint64_t v90 = sub_100003A0C(&qword_100351890);
    memcpy(v63, v64, *(void *)(*(void *)(v90 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v146 + 16))(v63, v64, v6);
  uint64_t v70 = v65[5];
  int v71 = &v63[v70];
  uint64_t v72 = &v64[v70];
  char v73 = v72[8];
  *(void *)int v71 = *(void *)v72;
  v71[8] = v73;
  uint64_t v74 = v65[6];
  uint64_t v75 = &v63[v74];
  uint64_t v76 = &v64[v74];
  char v77 = v76[4];
  *(_DWORD *)uint64_t v75 = *(_DWORD *)v76;
  v75[4] = v77;
  uint64_t v78 = v65[7];
  uint64_t v79 = &v63[v78];
  uint64_t v80 = &v64[v78];
  char v81 = v80[4];
  *(_DWORD *)uint64_t v79 = *(_DWORD *)v80;
  v79[4] = v81;
  uint64_t v82 = v65[8];
  int v83 = &v63[v82];
  size_t v84 = &v64[v82];
  char v85 = v84[8];
  *(void *)int v83 = *(void *)v84;
  v83[8] = v85;
  uint64_t v86 = v65[9];
  uint64_t v87 = &v63[v86];
  uint64_t v88 = &v64[v86];
  char v89 = v88[4];
  *(_DWORD *)uint64_t v87 = *(_DWORD *)v88;
  v87[4] = v89;
  (*(void (**)(char *, void, uint64_t, int *))(v66 + 56))(v63, 0LL, 1LL, v65);
  return a1;
}

uint64_t sub_100072F88(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0LL);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100003A0C(&qword_100351880);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    int v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(_DWORD *)int v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    uint64_t v20 = v14[6];
    uint64_t v21 = &v12[v20];
    int v22 = &v13[v20];
    *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
    v21[4] = v22[4];
    uint64_t v23 = v14[7];
    uint64_t v24 = &v12[v23];
    uint64_t v25 = &v13[v23];
    *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
    v24[4] = v25[4];
    uint64_t v26 = v14[8];
    uint64_t v27 = &v12[v26];
    uint64_t v28 = &v13[v26];
    *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    v12[v14[9]] = v13[v14[9]];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v29 = a3[7];
  uint64_t v30 = (char *)(a1 + v29);
  uint64_t v31 = (char *)(a2 + v29);
  uint64_t v32 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0LL);
  uint64_t v33 = *((void *)v32 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v33 + 48))(v31, 1LL, v32))
  {
    uint64_t v34 = sub_100003A0C(&qword_100351888);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v30, (uint64_t)v31, v6);
    uint64_t v35 = v32[5];
    uint64_t v36 = &v30[v35];
    uint64_t v37 = &v31[v35];
    *(void *)uint64_t v36 = *(void *)v37;
    v36[8] = v37[8];
    uint64_t v38 = v32[6];
    int v39 = &v30[v38];
    int v40 = &v31[v38];
    *(void *)int v39 = *(void *)v40;
    v39[8] = v40[8];
    uint64_t v41 = v32[7];
    int v42 = &v30[v41];
    uint64_t v43 = &v31[v41];
    *(void *)int v42 = *(void *)v43;
    v42[8] = v43[8];
    uint64_t v44 = v32[8];
    uint64_t v45 = &v30[v44];
    uint64_t v46 = &v31[v44];
    *(void *)uint64_t v45 = *(void *)v46;
    v45[8] = v46[8];
    uint64_t v47 = v32[9];
    char v48 = &v30[v47];
    uint64_t v49 = &v31[v47];
    *(void *)char v48 = *(void *)v49;
    v48[8] = v49[8];
    (*(void (**)(char *, void, uint64_t, int *))(v33 + 56))(v30, 0LL, 1LL, v32);
  }

  uint64_t v50 = a3[8];
  uint64_t v51 = (char *)(a1 + v50);
  char v52 = (char *)(a2 + v50);
  uint64_t v53 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0LL);
  uint64_t v54 = *((void *)v53 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v54 + 48))(v52, 1LL, v53))
  {
    uint64_t v55 = sub_100003A0C(&qword_100351890);
    memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v51, (uint64_t)v52, v6);
    uint64_t v56 = v53[5];
    uint64_t v57 = &v51[v56];
    uint64_t v58 = &v52[v56];
    *(void *)uint64_t v57 = *(void *)v58;
    v57[8] = v58[8];
    uint64_t v59 = v53[6];
    char v60 = &v51[v59];
    uint64_t v61 = &v52[v59];
    *(_DWORD *)char v60 = *(_DWORD *)v61;
    v60[4] = v61[4];
    uint64_t v62 = v53[7];
    uint64_t v63 = &v51[v62];
    uint64_t v64 = &v52[v62];
    *(_DWORD *)uint64_t v63 = *(_DWORD *)v64;
    v63[4] = v64[4];
    uint64_t v65 = v53[8];
    uint64_t v66 = &v51[v65];
    uint64_t v67 = &v52[v65];
    *(void *)uint64_t v66 = *(void *)v67;
    v66[8] = v67[8];
    uint64_t v68 = v53[9];
    int v69 = &v51[v68];
    uint64_t v70 = &v52[v68];
    *(_DWORD *)int v69 = *(_DWORD *)v70;
    v69[4] = v70[4];
    (*(void (**)(char *, void, uint64_t, int *))(v54 + 56))(v51, 0LL, 1LL, v53);
  }

  return a1;
}

uint64_t sub_100073320(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v123 = *(void *)(v6 - 8);
  uint64_t v122 = *(void (**)(uint64_t, uint64_t, uint64_t))(v123 + 40);
  v122(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = (_BYTE *)(a1 + v8);
  uint64_t v12 = (_BYTE *)(a2 + v8);
  uint64_t v13 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0LL);
  uint64_t v14 = *((void *)v13 - 1);
  uint64_t v15 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v14 + 48);
  int v16 = v15(v11, 1LL, v13);
  int v17 = v15(v12, 1LL, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v123 + 32))(v11, v12, v6);
      uint64_t v18 = v13[5];
      uint64_t v19 = &v11[v18];
      uint64_t v20 = &v12[v18];
      *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
      v19[4] = v20[4];
      uint64_t v21 = v13[6];
      int v22 = &v11[v21];
      uint64_t v23 = &v12[v21];
      *(_DWORD *)int v22 = *(_DWORD *)v23;
      v22[4] = v23[4];
      uint64_t v24 = v13[7];
      uint64_t v25 = &v11[v24];
      uint64_t v26 = &v12[v24];
      *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
      v25[4] = v26[4];
      uint64_t v27 = v13[8];
      uint64_t v28 = &v11[v27];
      uint64_t v29 = &v12[v27];
      *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
      v28[4] = v29[4];
      v11[v13[9]] = v12[v13[9]];
      (*(void (**)(_BYTE *, void, uint64_t, int *))(v14 + 56))(v11, 0LL, 1LL, v13);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v17)
  {
    sub_100004090((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
LABEL_6:
    uint64_t v30 = sub_100003A0C(&qword_100351880);
    memcpy(v11, v12, *(void *)(*(void *)(v30 - 8) + 64LL));
    goto LABEL_7;
  }

  v122((uint64_t)v11, (uint64_t)v12, v6);
  uint64_t v80 = v13[5];
  char v81 = &v11[v80];
  uint64_t v82 = &v12[v80];
  *(_DWORD *)char v81 = *(_DWORD *)v82;
  v81[4] = v82[4];
  uint64_t v83 = v13[6];
  size_t v84 = &v11[v83];
  char v85 = &v12[v83];
  *(_DWORD *)size_t v84 = *(_DWORD *)v85;
  v84[4] = v85[4];
  uint64_t v86 = v13[7];
  uint64_t v87 = &v11[v86];
  uint64_t v88 = &v12[v86];
  *(_DWORD *)uint64_t v87 = *(_DWORD *)v88;
  v87[4] = v88[4];
  uint64_t v89 = v13[8];
  uint64_t v90 = &v11[v89];
  uint64_t v91 = &v12[v89];
  *(_DWORD *)uint64_t v90 = *(_DWORD *)v91;
  v90[4] = v91[4];
  v11[v13[9]] = v12[v13[9]];
LABEL_7:
  uint64_t v31 = a3[7];
  uint64_t v32 = (char *)(a1 + v31);
  uint64_t v33 = (char *)(a2 + v31);
  uint64_t v34 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0LL);
  uint64_t v35 = *((void *)v34 - 1);
  uint64_t v36 = *(uint64_t (**)(char *, uint64_t, int *))(v35 + 48);
  int v37 = v36(v32, 1LL, v34);
  int v38 = v36(v33, 1LL, v34);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v32, v33, v6);
      uint64_t v39 = v34[5];
      int v40 = &v32[v39];
      uint64_t v41 = &v33[v39];
      *(void *)int v40 = *(void *)v41;
      v40[8] = v41[8];
      uint64_t v42 = v34[6];
      uint64_t v43 = &v32[v42];
      uint64_t v44 = &v33[v42];
      *(void *)uint64_t v43 = *(void *)v44;
      v43[8] = v44[8];
      uint64_t v45 = v34[7];
      uint64_t v46 = &v32[v45];
      uint64_t v47 = &v33[v45];
      *(void *)uint64_t v46 = *(void *)v47;
      v46[8] = v47[8];
      uint64_t v48 = v34[8];
      uint64_t v49 = &v32[v48];
      uint64_t v50 = &v33[v48];
      *(void *)uint64_t v49 = *(void *)v50;
      v49[8] = v50[8];
      uint64_t v51 = v34[9];
      char v52 = &v32[v51];
      uint64_t v53 = &v33[v51];
      *(void *)char v52 = *(void *)v53;
      v52[8] = v53[8];
      (*(void (**)(char *, void, uint64_t, int *))(v35 + 56))(v32, 0LL, 1LL, v34);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v38)
  {
    sub_100004090((uint64_t)v32, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
LABEL_12:
    uint64_t v54 = sub_100003A0C(&qword_100351888);
    memcpy(v32, v33, *(void *)(*(void *)(v54 - 8) + 64LL));
    goto LABEL_13;
  }

  v122((uint64_t)v32, (uint64_t)v33, v6);
  uint64_t v92 = v34[5];
  uint64_t v93 = &v32[v92];
  double v94 = &v33[v92];
  *(void *)uint64_t v93 = *(void *)v94;
  v93[8] = v94[8];
  uint64_t v95 = v34[6];
  uint64_t v96 = &v32[v95];
  uint64_t v97 = &v33[v95];
  *(void *)uint64_t v96 = *(void *)v97;
  v96[8] = v97[8];
  uint64_t v98 = v34[7];
  uint64_t v99 = &v32[v98];
  uint64_t v100 = &v33[v98];
  *(void *)uint64_t v99 = *(void *)v100;
  v99[8] = v100[8];
  uint64_t v101 = v34[8];
  uint64_t v102 = &v32[v101];
  uint64_t v103 = &v33[v101];
  *(void *)uint64_t v102 = *(void *)v103;
  v102[8] = v103[8];
  uint64_t v104 = v34[9];
  uint64_t v105 = &v32[v104];
  uint64_t v106 = &v33[v104];
  *(void *)uint64_t v105 = *(void *)v106;
  v105[8] = v106[8];
LABEL_13:
  uint64_t v55 = a3[8];
  uint64_t v56 = (char *)(a1 + v55);
  uint64_t v57 = (char *)(a2 + v55);
  uint64_t v58 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0LL);
  uint64_t v59 = *((void *)v58 - 1);
  char v60 = *(uint64_t (**)(char *, uint64_t, int *))(v59 + 48);
  int v61 = v60(v56, 1LL, v58);
  int v62 = v60(v57, 1LL, v58);
  if (!v61)
  {
    if (!v62)
    {
      v122((uint64_t)v56, (uint64_t)v57, v6);
      uint64_t v107 = v58[5];
      char v108 = &v56[v107];
      uint64_t v109 = &v57[v107];
      *(void *)char v108 = *(void *)v109;
      v108[8] = v109[8];
      uint64_t v110 = v58[6];
      uint64_t v111 = &v56[v110];
      char v112 = &v57[v110];
      *(_DWORD *)uint64_t v111 = *(_DWORD *)v112;
      v111[4] = v112[4];
      uint64_t v113 = v58[7];
      uint64_t v114 = &v56[v113];
      uint64_t v115 = &v57[v113];
      *(_DWORD *)uint64_t v114 = *(_DWORD *)v115;
      v114[4] = v115[4];
      uint64_t v116 = v58[8];
      uint64_t v117 = &v56[v116];
      uint64_t v118 = &v57[v116];
      *(void *)uint64_t v117 = *(void *)v118;
      v117[8] = v118[8];
      uint64_t v119 = v58[9];
      char v120 = &v56[v119];
      uint64_t v121 = &v57[v119];
      *(_DWORD *)char v120 = *(_DWORD *)v121;
      v120[4] = v121[4];
      return a1;
    }

    sub_100004090((uint64_t)v56, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
    goto LABEL_18;
  }

  if (v62)
  {
LABEL_18:
    uint64_t v78 = sub_100003A0C(&qword_100351890);
    memcpy(v56, v57, *(void *)(*(void *)(v78 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v56, v57, v6);
  uint64_t v63 = v58[5];
  uint64_t v64 = &v56[v63];
  uint64_t v65 = &v57[v63];
  *(void *)uint64_t v64 = *(void *)v65;
  v64[8] = v65[8];
  uint64_t v66 = v58[6];
  uint64_t v67 = &v56[v66];
  uint64_t v68 = &v57[v66];
  *(_DWORD *)uint64_t v67 = *(_DWORD *)v68;
  v67[4] = v68[4];
  uint64_t v69 = v58[7];
  uint64_t v70 = &v56[v69];
  int v71 = &v57[v69];
  *(_DWORD *)uint64_t v70 = *(_DWORD *)v71;
  v70[4] = v71[4];
  uint64_t v72 = v58[8];
  char v73 = &v56[v72];
  uint64_t v74 = &v57[v72];
  *(void *)char v73 = *(void *)v74;
  v73[8] = v74[8];
  uint64_t v75 = v58[9];
  uint64_t v76 = &v56[v75];
  char v77 = &v57[v75];
  *(_DWORD *)uint64_t v76 = *(_DWORD *)v77;
  v76[4] = v77[4];
  (*(void (**)(char *, void, uint64_t, int *))(v59 + 56))(v56, 0LL, 1LL, v58);
  return a1;
}