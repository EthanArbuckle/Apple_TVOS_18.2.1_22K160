uint64_t sub_100073940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007394C);
}

uint64_t sub_10007394C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }

  else
  {
    uint64_t v11 = sub_100003A0C(&qword_100351880);
    uint64_t v12 = *(void *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      uint64_t v8 = v11;
      uint64_t v13 = a3[6];
    }

    else
    {
      uint64_t v14 = sub_100003A0C(&qword_100351888);
      uint64_t v12 = *(void *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        uint64_t v8 = v14;
        uint64_t v13 = a3[7];
      }

      else
      {
        uint64_t v8 = sub_100003A0C(&qword_100351890);
        uint64_t v12 = *(void *)(v8 - 8);
        uint64_t v13 = a3[8];
      }
    }

    uint64_t v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_100073A14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100073A20);
}

uint64_t sub_100073A20(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v13 = sub_100003A0C(&qword_100351880);
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v15 = a4[6];
    }

    else
    {
      uint64_t v16 = sub_100003A0C(&qword_100351888);
      uint64_t v14 = *(void *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        uint64_t v10 = v16;
        uint64_t v15 = a4[7];
      }

      else
      {
        uint64_t v10 = sub_100003A0C(&qword_100351890);
        uint64_t v14 = *(void *)(v10 - 8);
        uint64_t v15 = a4[8];
      }
    }

    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_100073AF0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v10[0] = *(void *)(v2 - 8) + 64LL;
    v10[1] = "\t";
    sub_1000119EC(319LL, &qword_100353010, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
    if (v5 <= 0x3F)
    {
      v10[2] = *(void *)(v4 - 8) + 64LL;
      sub_1000119EC( 319LL,  &qword_100353018,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
      if (v7 <= 0x3F)
      {
        v10[3] = *(void *)(v6 - 8) + 64LL;
        sub_1000119EC( 319LL,  (unint64_t *)&unk_100353020,  type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
        if (v9 <= 0x3F)
        {
          v10[4] = *(void *)(v8 - 8) + 64LL;
          swift_initStructMetadata(a1, 256LL, 5LL, v10, a1 + 16);
        }
      }
    }
  }

uint64_t sub_100073BE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100073BF0);
}

uint64_t sub_100073BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100073C00);
}

uint64_t sub_100073C18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100073C24);
}

uint64_t sub_100073C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100073C34);
}

uint64_t sub_100073C38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007EEAC(a1, a2, a3, (uint64_t)"\t", (uint64_t)"\t");
}

void *sub_100073C48(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (void *)(v17 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v17);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    unint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    v9[8] = v10[8];
    *(void *)unint64_t v9 = *(void *)v10;
    uint64_t v11 = a3[7];
    uint64_t v12 = a3[8];
    uint64_t v13 = (char *)a1 + v11;
    uint64_t v14 = (char *)a2 + v11;
    v13[8] = v14[8];
    *(void *)uint64_t v13 = *(void *)v14;
    uint64_t v15 = (char *)a1 + v12;
    uint64_t v16 = (char *)a2 + v12;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }

  return a1;
}

uint64_t sub_100073D28(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(void *)uint64_t v14 = *(void *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100073DDC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(_BYTE *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(_BYTE *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(_BYTE *)(v12 + 8) = v14;
  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  char v18 = *(_BYTE *)(v17 + 8);
  *(void *)uint64_t v16 = *(void *)v17;
  *(_BYTE *)(v16 + 8) = v18;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100073E98(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(void *)uint64_t v14 = *(void *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100073F4C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(void *)uint64_t v14 = *(void *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100074000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007400C);
}

uint64_t sub_10007400C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  else {
    int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 36));
  }
  unsigned int v10 = v9 - 3;
  else {
    return 0LL;
  }
}

uint64_t sub_100074090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007409C);
}

uint64_t sub_10007409C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 36)) = a2 + 3;
  return result;
}

uint64_t sub_100074114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100074134(a1, a2, a3, (uint64_t)&unk_1002BA290, (uint64_t)"\t", (uint64_t)"\t", (uint64_t)&unk_1002BA2A8);
}

uint64_t sub_100074134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v13 <= 0x3F)
  {
    v14[0] = *(void *)(result - 8) + 64LL;
    v14[1] = a4;
    v14[2] = a5;
    v14[3] = a5;
    v14[4] = a6;
    v14[5] = a7;
    swift_initStructMetadata(a1, 256LL, 6LL, v14, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *sub_1000741C4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v18);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = *(int *)(a3 + 24);
    uint64_t v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    *(void *)uint64_t v11 = *(void *)v12;
    v11[8] = v12[8];
    unint64_t v13 = (char *)a1 + v10;
    uint64_t v14 = (char *)a2 + v10;
    uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0LL);
    uint64_t v16 = *((void *)v15 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1LL, v15))
    {
      uint64_t v17 = sub_100003A0C(&qword_1003518A0);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
    }

    else
    {
      v8((uint64_t *)v13, (uint64_t *)v14, v7);
      uint64_t v19 = v15[5];
      v20 = &v13[v19];
      v21 = &v14[v19];
      *(void *)v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v15[6];
      v23 = &v13[v22];
      v24 = &v14[v22];
      *(void *)v23 = *(void *)v24;
      v23[8] = v24[8];
      uint64_t v25 = v15[7];
      v26 = &v13[v25];
      v27 = &v14[v25];
      *(void *)v26 = *(void *)v27;
      v26[8] = v27[8];
      (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0LL, 1LL, v15);
    }
  }

  return a1;
}

uint64_t sub_100074340(uint64_t a1, uint64_t a2)
{
  return sub_10007434C(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_10007434C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL);
  v10(a1, v6);
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t v8 = a3(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))(v7, 1LL, v8);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v7, v6);
  }
  return result;
}

uint64_t sub_1000743F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  uint64_t v12 = (char *)(a1 + v9);
  unint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0LL);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100003A0C(&qword_1003518A0);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v14[6];
    v21 = &v12[v20];
    uint64_t v22 = &v13[v20];
    *(void *)v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = v14[7];
    v24 = &v12[v23];
    uint64_t v25 = &v13[v23];
    *(void *)v24 = *(void *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  return a1;
}

uint64_t sub_100074540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  char v12 = *(_BYTE *)(v11 + 8);
  *(void *)uint64_t v10 = *(void *)v11;
  *(_BYTE *)(v10 + 8) = v12;
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (char *)(a1 + v13);
  uint64_t v15 = (char *)(a2 + v13);
  uint64_t v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0LL);
  uint64_t v17 = *((void *)v16 - 1);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, int *))(v17 + 48);
  int v19 = v18(v14, 1LL, v16);
  int v20 = v18(v15, 1LL, v16);
  if (!v19)
  {
    if (!v20)
    {
      v8((uint64_t)v14, (uint64_t)v15, v6);
      uint64_t v35 = v16[5];
      v36 = &v14[v35];
      v37 = &v15[v35];
      char v38 = v37[8];
      *(void *)v36 = *(void *)v37;
      v36[8] = v38;
      uint64_t v39 = v16[6];
      v40 = &v14[v39];
      v41 = &v15[v39];
      char v42 = v41[8];
      *(void *)v40 = *(void *)v41;
      v40[8] = v42;
      uint64_t v43 = v16[7];
      v44 = &v14[v43];
      v45 = &v15[v43];
      char v46 = v45[8];
      *(void *)v44 = *(void *)v45;
      v44[8] = v46;
      return a1;
    }

    sub_100004090((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
    goto LABEL_6;
  }

  if (v20)
  {
LABEL_6:
    uint64_t v33 = sub_100003A0C(&qword_1003518A0);
    memcpy(v14, v15, *(void *)(*(void *)(v33 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v14, v15, v6);
  uint64_t v21 = v16[5];
  uint64_t v22 = &v14[v21];
  uint64_t v23 = &v15[v21];
  char v24 = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v24;
  uint64_t v25 = v16[6];
  v26 = &v14[v25];
  v27 = &v15[v25];
  char v28 = v27[8];
  *(void *)v26 = *(void *)v27;
  v26[8] = v28;
  uint64_t v29 = v16[7];
  v30 = &v14[v29];
  v31 = &v15[v29];
  char v32 = v31[8];
  *(void *)v30 = *(void *)v31;
  v30[8] = v32;
  (*(void (**)(char *, void, uint64_t, int *))(v17 + 56))(v14, 0LL, 1LL, v16);
  return a1;
}

uint64_t sub_100074734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  char v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0LL);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100003A0C(&qword_1003518A0);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    uint64_t v18 = &v12[v17];
    int v19 = &v13[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v14[6];
    uint64_t v21 = &v12[v20];
    uint64_t v22 = &v13[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = v14[7];
    char v24 = &v12[v23];
    uint64_t v25 = &v13[v23];
    *(void *)char v24 = *(void *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  return a1;
}

uint64_t sub_100074884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = a1 + v9;
  uint64_t v12 = a2 + v9;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  uint64_t v13 = (char *)(a1 + v10);
  uint64_t v14 = (char *)(a2 + v10);
  uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0LL);
  uint64_t v16 = *((void *)v15 - 1);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, int *))(v16 + 48);
  int v18 = v17(v13, 1LL, v15);
  int v19 = v17(v14, 1LL, v15);
  if (!v18)
  {
    if (!v19)
    {
      v8((uint64_t)v13, (uint64_t)v14, v6);
      uint64_t v31 = v15[5];
      char v32 = &v13[v31];
      uint64_t v33 = &v14[v31];
      *(void *)char v32 = *(void *)v33;
      v32[8] = v33[8];
      uint64_t v34 = v15[6];
      uint64_t v35 = &v13[v34];
      v36 = &v14[v34];
      *(void *)uint64_t v35 = *(void *)v36;
      v35[8] = v36[8];
      uint64_t v37 = v15[7];
      char v38 = &v13[v37];
      uint64_t v39 = &v14[v37];
      *(void *)char v38 = *(void *)v39;
      v38[8] = v39[8];
      return a1;
    }

    sub_100004090((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
    goto LABEL_6;
  }

  if (v19)
  {
LABEL_6:
    uint64_t v29 = sub_100003A0C(&qword_1003518A0);
    memcpy(v13, v14, *(void *)(*(void *)(v29 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v14, v6);
  uint64_t v20 = v15[5];
  uint64_t v21 = &v13[v20];
  uint64_t v22 = &v14[v20];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  uint64_t v23 = v15[6];
  char v24 = &v13[v23];
  uint64_t v25 = &v14[v23];
  *(void *)char v24 = *(void *)v25;
  v24[8] = v25[8];
  uint64_t v26 = v15[7];
  v27 = &v13[v26];
  char v28 = &v14[v26];
  *(void *)v27 = *(void *)v28;
  v27[8] = v28[8];
  (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0LL, 1LL, v15);
  return a1;
}

uint64_t sub_100074A74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100074A80);
}

uint64_t sub_100074A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100074A8C(a1, a2, a3, &qword_1003518A0);
}

uint64_t sub_100074A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v10 = sub_100003A0C(a4);
    uint64_t v12 = a1 + *(int *)(a3 + 24);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL);
  }

  return v11(v12, a2, v10);
}

uint64_t sub_100074B04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100074B10);
}

uint64_t sub_100074B10(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100074B1C(a1, a2, a3, a4, &qword_1003518A0);
}

uint64_t sub_100074B1C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  if (*(_DWORD *)(v11 + 84) == a3)
  {
    uint64_t v12 = v10;
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    uint64_t v14 = a1;
  }

  else
  {
    uint64_t v12 = sub_100003A0C(a5);
    uint64_t v14 = a1 + *(int *)(a4 + 24);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL);
  }

  return v13(v14, a2, a2, v12);
}

void sub_100074BA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_100074BC0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v10 = type metadata accessor for UnknownStorage(319LL);
  if (v11 <= 0x3F)
  {
    v14[0] = *(void *)(v10 - 8) + 64LL;
    v14[1] = a4;
    sub_1000119EC(319LL, a5, a6);
    if (v13 <= 0x3F)
    {
      v14[2] = *(void *)(v12 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 3LL, v14, a1 + 16);
    }
  }

uint64_t *sub_100074C60(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain(v4);
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2[1];
    uint64_t v9 = a2[2];
    a1[1] = v8;
    a1[2] = v9;
    uint64_t v10 = a3[7];
    unint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v14(v11, v12, v13);
    uint64_t v15 = a3[8];
    uint64_t v16 = a3[9];
    uint64_t v17 = (char *)v7 + v15;
    int v18 = (char *)a2 + v15;
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = v18[8];
    int v19 = (char *)v7 + v16;
    uint64_t v20 = (char *)a2 + v16;
    *(void *)int v19 = *(void *)v20;
    v19[8] = v20[8];
  }

  return v7;
}

uint64_t *sub_100074D5C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  a1[2] = v8;
  uint64_t v9 = a3[7];
  uint64_t v10 = (char *)a1 + v9;
  unint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  v13(v10, v11, v12);
  uint64_t v14 = a3[8];
  uint64_t v15 = a3[9];
  uint64_t v16 = (char *)a1 + v14;
  uint64_t v17 = (char *)a2 + v14;
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  int v18 = (char *)a1 + v15;
  int v19 = (char *)a2 + v15;
  *(void *)int v18 = *(void *)v19;
  v18[8] = v19[8];
  return a1;
}

uint64_t *sub_100074E30(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[1];
  uint64_t v9 = a1[1];
  a1[1] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[2];
  uint64_t v11 = a1[2];
  a1[2] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 24LL))(v13, v14, v15);
  uint64_t v16 = a3[8];
  uint64_t v17 = (char *)a1 + v16;
  int v18 = (char *)a2 + v16;
  char v19 = v18[8];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v19;
  uint64_t v20 = a3[9];
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  char v23 = v22[8];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v23;
  return a1;
}

uint64_t sub_100074F14(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[7];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[8];
  uint64_t v11 = a3[9];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(void *)uint64_t v12 = *(void *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(void *)uint64_t v14 = *(void *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  return a1;
}

uint64_t *sub_100074FBC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a3[7];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 40LL))(v10, v11, v12);
  uint64_t v13 = a3[8];
  uint64_t v14 = a3[9];
  uint64_t v15 = (char *)a1 + v13;
  uint64_t v16 = (char *)a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = (char *)a1 + v14;
  int v18 = (char *)a2 + v14;
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  return a1;
}

uint64_t sub_100075084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100075090);
}

uint64_t sub_100075090(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 28)],  a2,  v8);
  }

uint64_t sub_10007510C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100075118);
}

char *sub_100075118(char *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 28)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_10007518C(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[3] = *(void *)(result - 8) + 64LL;
    v4[4] = "\t";
    v4[5] = "\t";
    swift_initStructMetadata(a1, 256LL, 6LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_100075214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100075220);
}

uint64_t sub_100075224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100075230);
}

void *sub_100075234(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (void *)(v17 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v17);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    v9[8] = v10[8];
    *(void *)uint64_t v9 = *(void *)v10;
    uint64_t v11 = a3[7];
    uint64_t v12 = a3[8];
    uint64_t v13 = (char *)a1 + v11;
    uint64_t v14 = (char *)a2 + v11;
    v13[4] = v14[4];
    *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
    uint64_t v15 = (char *)a1 + v12;
    uint64_t v16 = (char *)a2 + v12;
    v15[4] = v16[4];
    *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  }

  return a1;
}

uint64_t sub_100075308(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  return a1;
}

uint64_t sub_1000753B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(_BYTE *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(_BYTE *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v14;
  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  char v18 = *(_BYTE *)(v17 + 4);
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = v18;
  return a1;
}

uint64_t sub_100075460(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  return a1;
}

uint64_t sub_100075508(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  return a1;
}

uint64_t sub_1000755B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000755BC);
}

uint64_t sub_1000755BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  else {
    int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  }
  unsigned int v10 = v9 - 13;
  else {
    return 0LL;
  }
}

uint64_t sub_100075640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007564C);
}

uint64_t sub_10007564C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 13;
  return result;
}

uint64_t sub_1000756C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100076804(a1, a2, a3, (uint64_t)&unk_1002BA290, (uint64_t)"\t", (uint64_t)&unk_1002B9CB0);
}

uint64_t *sub_1000756E0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v14);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    unsigned int v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)unsigned int v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
  }

  return a1;
}

uint64_t sub_100075790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  return a1;
}

uint64_t sub_100075814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(_BYTE *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(_BYTE *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v14;
  return a1;
}

uint64_t sub_10007589C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  return a1;
}

uint64_t sub_100075920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  return a1;
}

uint64_t sub_1000759A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000759B0);
}

uint64_t sub_1000759B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000759C0);
}

uint64_t sub_1000759C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007813C(a1, a2, a3, (uint64_t)"\t", (uint64_t)&unk_1002B9CB0);
}

char *sub_1000759D8(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v20 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v20);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = &a1[v9];
    uint64_t v12 = &a2[v9];
    *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
    char v13 = a2[v10];
    v11[4] = v12[4];
    a1[v10] = v13;
    uint64_t v14 = a3[7];
    uint64_t v15 = &a1[v14];
    uint64_t v16 = &a2[v14];
    uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17))
    {
      uint64_t v19 = sub_100003A0C(&qword_1003518B0);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64LL));
    }

    else
    {
      v8(v15, v16, v7);
      uint64_t v21 = *(int *)(v17 + 20);
      uint64_t v22 = &v15[v21];
      char v23 = &v16[v21];
      *(void *)uint64_t v22 = *(void *)v23;
      v22[8] = v23[8];
      uint64_t v24 = *(int *)(v17 + 24);
      uint64_t v25 = &v15[v24];
      uint64_t v26 = &v16[v24];
      *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
      v25[4] = v26[4];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
    }
  }

  return a1;
}

uint64_t sub_100075B44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v8(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 28);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL))(v5, 1LL, v6);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v5, v4);
  }
  return result;
}

uint64_t sub_100075BE4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  char v12 = *(_BYTE *)(a2 + v9);
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  *(_BYTE *)(a1 + v9) = v12;
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)(a1 + v13);
  uint64_t v15 = (char *)(a2 + v13);
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
  {
    uint64_t v18 = sub_100003A0C(&qword_1003518B0);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v14, (uint64_t)v15, v6);
    uint64_t v19 = *(int *)(v16 + 20);
    uint64_t v20 = &v14[v19];
    uint64_t v21 = &v15[v19];
    *(void *)uint64_t v20 = *(void *)v21;
    v20[8] = v21[8];
    uint64_t v22 = *(int *)(v16 + 24);
    char v23 = &v14[v22];
    uint64_t v24 = &v15[v22];
    *(_DWORD *)char v23 = *(_DWORD *)v24;
    v23[4] = v24[4];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
  }

  return a1;
}

uint64_t sub_100075D24(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = (int *)(a2 + v9);
  int v12 = *v11;
  *(_BYTE *)(v10 + 4) = *((_BYTE *)v11 + 4);
  *(_DWORD *)uint64_t v10 = v12;
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)(a1 + v13);
  uint64_t v15 = (char *)(a2 + v13);
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1LL, v16);
  int v20 = v18(v15, 1LL, v16);
  if (!v19)
  {
    if (!v20)
    {
      v8((uint64_t)v14, (uint64_t)v15, v6);
      uint64_t v31 = *(int *)(v16 + 20);
      char v32 = &v14[v31];
      uint64_t v33 = &v15[v31];
      char v34 = v33[8];
      *(void *)char v32 = *(void *)v33;
      v32[8] = v34;
      uint64_t v35 = *(int *)(v16 + 24);
      v36 = &v14[v35];
      uint64_t v37 = &v15[v35];
      char v38 = v37[4];
      *(_DWORD *)v36 = *(_DWORD *)v37;
      v36[4] = v38;
      return a1;
    }

    sub_100004090((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
    goto LABEL_6;
  }

  if (v20)
  {
LABEL_6:
    uint64_t v29 = sub_100003A0C(&qword_1003518B0);
    memcpy(v14, v15, *(void *)(*(void *)(v29 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v14, v15, v6);
  uint64_t v21 = *(int *)(v16 + 20);
  uint64_t v22 = &v14[v21];
  char v23 = &v15[v21];
  char v24 = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v24;
  uint64_t v25 = *(int *)(v16 + 24);
  uint64_t v26 = &v14[v25];
  v27 = &v15[v25];
  char v28 = v27[4];
  *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
  v26[4] = v28;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
  return a1;
}

uint64_t sub_100075EEC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  char v12 = *(_BYTE *)(a2 + v9);
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  *(_BYTE *)(a1 + v9) = v12;
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)(a1 + v13);
  uint64_t v15 = (char *)(a2 + v13);
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
  {
    uint64_t v18 = sub_100003A0C(&qword_1003518B0);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v14, (uint64_t)v15, v6);
    uint64_t v19 = *(int *)(v16 + 20);
    int v20 = &v14[v19];
    uint64_t v21 = &v15[v19];
    *(void *)int v20 = *(void *)v21;
    v20[8] = v21[8];
    uint64_t v22 = *(int *)(v16 + 24);
    char v23 = &v14[v22];
    char v24 = &v15[v22];
    *(_DWORD *)char v23 = *(_DWORD *)v24;
    v23[4] = v24[4];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
  }

  return a1;
}

uint64_t sub_10007602C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = a1 + v9;
  uint64_t v12 = a2 + v9;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  char v13 = *(_BYTE *)(a2 + v10);
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  *(_BYTE *)(a1 + v10) = v13;
  uint64_t v14 = a3[7];
  uint64_t v15 = (char *)(a1 + v14);
  uint64_t v16 = (char *)(a2 + v14);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1LL, v17);
  int v21 = v19(v16, 1LL, v17);
  if (!v20)
  {
    if (!v21)
    {
      v8((uint64_t)v15, (uint64_t)v16, v6);
      uint64_t v30 = *(int *)(v17 + 20);
      uint64_t v31 = &v15[v30];
      char v32 = &v16[v30];
      *(void *)uint64_t v31 = *(void *)v32;
      v31[8] = v32[8];
      uint64_t v33 = *(int *)(v17 + 24);
      char v34 = &v15[v33];
      uint64_t v35 = &v16[v33];
      *(_DWORD *)char v34 = *(_DWORD *)v35;
      v34[4] = v35[4];
      return a1;
    }

    sub_100004090((uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
    goto LABEL_6;
  }

  if (v21)
  {
LABEL_6:
    uint64_t v28 = sub_100003A0C(&qword_1003518B0);
    memcpy(v15, v16, *(void *)(*(void *)(v28 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v15, v16, v6);
  uint64_t v22 = *(int *)(v17 + 20);
  char v23 = &v15[v22];
  char v24 = &v16[v22];
  *(void *)char v23 = *(void *)v24;
  v23[8] = v24[8];
  uint64_t v25 = *(int *)(v17 + 24);
  uint64_t v26 = &v15[v25];
  v27 = &v16[v25];
  *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
  v26[4] = v27[4];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
  return a1;
}

uint64_t sub_1000761F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000761FC);
}

uint64_t sub_1000761FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  if ((_DWORD)a2 == 250)
  {
    else {
      int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
    }
    unsigned int v10 = v9 - 5;
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v11 = sub_100003A0C(&qword_1003518B0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))( a1 + *(int *)(a3 + 28),  a2,  v11);
  }

uint64_t sub_1000762AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000762B8);
}

uint64_t sub_1000762B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    if (a3 == 250)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 5;
      return result;
    }

    uint64_t v10 = sub_100003A0C(&qword_1003518B0);
    uint64_t v12 = a1 + *(int *)(a4 + 28);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

void sub_10007635C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    v6[1] = &unk_1002B9CB0;
    v6[2] = &unk_1002B9CC8;
    sub_1000119EC( 319LL,  (unint64_t *)&unk_100353508,  type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
    if (v5 <= 0x3F)
    {
      v6[3] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 4LL, v6, a1 + 16);
    }
  }

uint64_t *sub_100076404(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v20);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)uint64_t v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    char v13 = (char *)a2 + v9;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    uint64_t v16 = (char *)a1 + v14;
    uint64_t v17 = (char *)a2 + v14;
    *(void *)uint64_t v16 = *(void *)v17;
    v16[8] = v17[8];
    uint64_t v18 = (char *)a1 + v15;
    uint64_t v19 = (char *)a2 + v15;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
  }

  return a1;
}

uint64_t sub_1000764E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(void *)uint64_t v17 = *(void *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  return a1;
}

uint64_t sub_1000765A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(_BYTE *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(_BYTE *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(_BYTE *)(v12 + 8) = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  char v18 = *(_BYTE *)(v17 + 8);
  *(void *)uint64_t v16 = *(void *)v17;
  *(_BYTE *)(v16 + 8) = v18;
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  char v22 = *(_BYTE *)(v21 + 8);
  *(void *)uint64_t v20 = *(void *)v21;
  *(_BYTE *)(v20 + 8) = v22;
  return a1;
}

uint64_t sub_100076660(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(void *)uint64_t v17 = *(void *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  return a1;
}

uint64_t sub_100076718(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(void *)uint64_t v17 = *(void *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  return a1;
}

uint64_t sub_1000767D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000767DC);
}

uint64_t sub_1000767E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000767EC);
}

uint64_t sub_1000767F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100076804(a1, a2, a3, (uint64_t)"\t", (uint64_t)"\t", (uint64_t)"\t");
}

uint64_t sub_100076804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v11 <= 0x3F)
  {
    v12[0] = *(void *)(result - 8) + 64LL;
    v12[1] = a4;
    v12[2] = a5;
    v12[3] = a6;
    v12[4] = a6;
    swift_initStructMetadata(a1, 256LL, 5LL, v12, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *sub_100076888(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v18);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    unint64_t v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    *(_DWORD *)unint64_t v11 = *(_DWORD *)v12;
    v11[4] = v12[4];
    uint64_t v13 = (char *)a1 + v10;
    uint64_t v14 = (char *)a2 + v10;
    uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
    uint64_t v16 = *((void *)v15 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1LL, v15))
    {
      uint64_t v17 = sub_100003A0C(&qword_1003518B8);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
    }

    else
    {
      v8((uint64_t *)v13, (uint64_t *)v14, v7);
      uint64_t v19 = v15[5];
      uint64_t v20 = &v13[v19];
      uint64_t v21 = &v14[v19];
      *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      v13[v15[6]] = v14[v15[6]];
      uint64_t v22 = v15[7];
      __dst = &v13[v22];
      char v23 = &v14[v22];
      uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
      uint64_t v51 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v23, 1LL, v24))
      {
        uint64_t v25 = sub_100003A0C(&qword_1003518B0);
        memcpy(__dst, v23, *(void *)(*(void *)(v25 - 8) + 64LL));
      }

      else
      {
        v8((uint64_t *)__dst, (uint64_t *)v23, v7);
        uint64_t v26 = *(int *)(v24 + 20);
        v27 = &__dst[v26];
        uint64_t v28 = &v23[v26];
        *(void *)v27 = *(void *)v28;
        v27[8] = v28[8];
        uint64_t v29 = *(int *)(v24 + 24);
        uint64_t v30 = &__dst[v29];
        uint64_t v31 = &v23[v29];
        *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
        v30[4] = v31[4];
        (*(void (**)(void))(v51 + 56))();
      }

      (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0LL, 1LL, v15);
    }

    uint64_t v32 = a3[7];
    uint64_t v33 = (char *)a1 + v32;
    char v34 = (char *)a2 + v32;
    uint64_t v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0LL);
    uint64_t v36 = *((void *)v35 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v36 + 48))(v34, 1LL, v35))
    {
      uint64_t v37 = sub_100003A0C(&qword_1003518C0);
      memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64LL));
    }

    else
    {
      v8((uint64_t *)v33, (uint64_t *)v34, v7);
      uint64_t v38 = v35[5];
      uint64_t v39 = &v33[v38];
      v40 = &v34[v38];
      *(void *)uint64_t v39 = *(void *)v40;
      v39[8] = v40[8];
      uint64_t v41 = v35[6];
      char v42 = &v33[v41];
      uint64_t v43 = &v34[v41];
      *(void *)char v42 = *(void *)v43;
      v42[8] = v43[8];
      uint64_t v44 = v35[7];
      v45 = &v33[v44];
      char v46 = &v34[v44];
      *(void *)v45 = *(void *)v46;
      v45[8] = v46[8];
      uint64_t v47 = v35[8];
      v48 = &v33[v47];
      v49 = &v34[v47];
      *(void *)v48 = *(void *)v49;
      v48[8] = v49[8];
      (*(void (**)(char *, void, uint64_t, int *))(v36 + 56))(v33, 0LL, 1LL, v35);
    }
  }

  return a1;
}

uint64_t sub_100076BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v12(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL))(v5, 1LL, v6))
  {
    v12(v5, v4);
    uint64_t v7 = v5 + *(int *)(v6 + 28);
    uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
  }

  uint64_t v9 = a1 + *(int *)(a2 + 28);
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))(v9, 1LL, v10);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v9, v4);
  }
  return result;
}

uint64_t sub_100076CCC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100003A0C(&qword_1003518B8);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v12[v14[6]] = v13[v14[6]];
    uint64_t v20 = v14[7];
    __dst = &v12[v20];
    uint64_t v21 = &v13[v20];
    uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
    uint64_t v49 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v21, 1LL, v22))
    {
      uint64_t v23 = sub_100003A0C(&qword_1003518B0);
      memcpy(__dst, v21, *(void *)(*(void *)(v23 - 8) + 64LL));
    }

    else
    {
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      uint64_t v24 = *(int *)(v22 + 20);
      uint64_t v25 = &__dst[v24];
      uint64_t v26 = &v21[v24];
      *(void *)uint64_t v25 = *(void *)v26;
      v25[8] = v26[8];
      uint64_t v27 = *(int *)(v22 + 24);
      uint64_t v28 = &__dst[v27];
      uint64_t v29 = &v21[v27];
      *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
      v28[4] = v29[4];
      (*(void (**)(void))(v49 + 56))();
    }

    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v30 = a3[7];
  uint64_t v31 = (char *)(a1 + v30);
  uint64_t v32 = (char *)(a2 + v30);
  uint64_t v33 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0LL);
  uint64_t v34 = *((void *)v33 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v34 + 48))(v32, 1LL, v33))
  {
    uint64_t v35 = sub_100003A0C(&qword_1003518C0);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v31, (uint64_t)v32, v6);
    uint64_t v36 = v33[5];
    uint64_t v37 = &v31[v36];
    uint64_t v38 = &v32[v36];
    *(void *)uint64_t v37 = *(void *)v38;
    v37[8] = v38[8];
    uint64_t v39 = v33[6];
    v40 = &v31[v39];
    uint64_t v41 = &v32[v39];
    *(void *)v40 = *(void *)v41;
    v40[8] = v41[8];
    uint64_t v42 = v33[7];
    uint64_t v43 = &v31[v42];
    uint64_t v44 = &v32[v42];
    *(void *)uint64_t v43 = *(void *)v44;
    v43[8] = v44[8];
    uint64_t v45 = v33[8];
    char v46 = &v31[v45];
    uint64_t v47 = &v32[v45];
    *(void *)char v46 = *(void *)v47;
    v46[8] = v47[8];
    (*(void (**)(char *, void, uint64_t, int *))(v34 + 56))(v31, 0LL, 1LL, v33);
  }

  return a1;
}

uint64_t sub_100076FBC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v112 = *(void *)(v6 - 8);
  v111 = *(void (**)(uint64_t, uint64_t, uint64_t))(v112 + 24);
  v111(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(_BYTE *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v15 + 48);
  int v17 = v16(v12, 1LL, v14);
  int v18 = v16((uint64_t)v13, 1LL, v14);
  if (!v17)
  {
    if (!v18)
    {
      v111(v12, (uint64_t)v13, v6);
      uint64_t v31 = v14[5];
      uint64_t v32 = v12 + v31;
      uint64_t v33 = &v13[v31];
      int v34 = *(_DWORD *)v33;
      *(_BYTE *)(v32 + 4) = v33[4];
      *(_DWORD *)uint64_t v32 = v34;
      *(_BYTE *)(v12 + v14[6]) = v13[v14[6]];
      uint64_t v35 = v14[7];
      uint64_t v36 = v12 + v35;
      uint64_t v37 = &v13[v35];
      uint64_t v38 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
      uint64_t v39 = *(void *)(v38 - 8);
      v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
      int v41 = v40(v36, 1LL, v38);
      int v42 = v40((uint64_t)v37, 1LL, v38);
      if (v41)
      {
        if (!v42)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v112 + 16))(v36, v37, v6);
          uint64_t v43 = *(int *)(v38 + 20);
          uint64_t v44 = v36 + v43;
          uint64_t v45 = &v37[v43];
          char v46 = v45[8];
          *(void *)uint64_t v44 = *(void *)v45;
          *(_BYTE *)(v44 + 8) = v46;
          uint64_t v47 = *(int *)(v38 + 24);
          uint64_t v48 = v36 + v47;
          uint64_t v49 = &v37[v47];
          char v50 = v49[4];
          *(_DWORD *)uint64_t v48 = *(_DWORD *)v49;
          *(_BYTE *)(v48 + 4) = v50;
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0LL, 1LL, v38);
          goto LABEL_14;
        }
      }

      else
      {
        if (!v42)
        {
          v111(v36, (uint64_t)v37, v6);
          uint64_t v101 = *(int *)(v38 + 20);
          uint64_t v102 = v36 + v101;
          v103 = &v37[v101];
          char v104 = v103[8];
          *(void *)uint64_t v102 = *(void *)v103;
          *(_BYTE *)(v102 + 8) = v104;
          uint64_t v105 = *(int *)(v38 + 24);
          uint64_t v106 = v36 + v105;
          v107 = &v37[v105];
          char v108 = v107[4];
          *(_DWORD *)uint64_t v106 = *(_DWORD *)v107;
          *(_BYTE *)(v106 + 4) = v108;
          goto LABEL_14;
        }

        sub_100004090(v36, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
      }

      size_t v28 = *(void *)(*(void *)(sub_100003A0C(&qword_1003518B0) - 8) + 64LL);
      uint64_t v29 = (void *)v36;
      uint64_t v30 = v37;
LABEL_8:
      memcpy(v29, v30, v28);
      goto LABEL_14;
    }

    sub_100004090(v12, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
LABEL_7:
    size_t v28 = *(void *)(*(void *)(sub_100003A0C(&qword_1003518B8) - 8) + 64LL);
    uint64_t v29 = (void *)v12;
    uint64_t v30 = v13;
    goto LABEL_8;
  }

  if (v18) {
    goto LABEL_7;
  }
  v109 = *(void (**)(uint64_t, char *, uint64_t))(v112 + 16);
  v109(v12, v13, v6);
  uint64_t v19 = v14[5];
  uint64_t v20 = v12 + v19;
  uint64_t v21 = &v13[v19];
  int v22 = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = v21[4];
  *(_DWORD *)uint64_t v20 = v22;
  *(_BYTE *)(v12 + v14[6]) = v13[v14[6]];
  uint64_t v23 = v14[7];
  __dst = (char *)(v12 + v23);
  uint64_t v24 = &v13[v23];
  uint64_t v25 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1LL, v25))
  {
    uint64_t v27 = sub_100003A0C(&qword_1003518B0);
    memcpy(__dst, v24, *(void *)(*(void *)(v27 - 8) + 64LL));
  }

  else
  {
    v109((uint64_t)__dst, v24, v6);
    uint64_t v51 = *(int *)(v25 + 20);
    v52 = &__dst[v51];
    v53 = &v24[v51];
    char v54 = v53[8];
    *(void *)v52 = *(void *)v53;
    v52[8] = v54;
    uint64_t v55 = *(int *)(v25 + 24);
    v56 = &__dst[v55];
    v57 = &v24[v55];
    char v58 = v57[4];
    *(_DWORD *)v56 = *(_DWORD *)v57;
    v56[4] = v58;
    (*(void (**)(void))(v26 + 56))();
  }

  (*(void (**)(uint64_t, void, uint64_t, int *))(v15 + 56))(v12, 0LL, 1LL, v14);
LABEL_14:
  uint64_t v59 = a3[7];
  v60 = (char *)(a1 + v59);
  v61 = (char *)(a2 + v59);
  v62 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0LL);
  uint64_t v63 = *((void *)v62 - 1);
  v64 = *(uint64_t (**)(char *, uint64_t, int *))(v63 + 48);
  int v65 = v64(v60, 1LL, v62);
  int v66 = v64(v61, 1LL, v62);
  if (!v65)
  {
    if (!v66)
    {
      v111((uint64_t)v60, (uint64_t)v61, v6);
      uint64_t v85 = v62[5];
      v86 = &v60[v85];
      v87 = &v61[v85];
      char v88 = v87[8];
      *(void *)v86 = *(void *)v87;
      v86[8] = v88;
      uint64_t v89 = v62[6];
      v90 = &v60[v89];
      v91 = &v61[v89];
      char v92 = v91[8];
      *(void *)v90 = *(void *)v91;
      v90[8] = v92;
      uint64_t v93 = v62[7];
      v94 = &v60[v93];
      v95 = &v61[v93];
      char v96 = v95[8];
      *(void *)v94 = *(void *)v95;
      v94[8] = v96;
      uint64_t v97 = v62[8];
      v98 = &v60[v97];
      v99 = &v61[v97];
      char v100 = v99[8];
      *(void *)v98 = *(void *)v99;
      v98[8] = v100;
      return a1;
    }

    sub_100004090((uint64_t)v60, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
    goto LABEL_19;
  }

  if (v66)
  {
LABEL_19:
    uint64_t v83 = sub_100003A0C(&qword_1003518C0);
    memcpy(v60, v61, *(void *)(*(void *)(v83 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v112 + 16))(v60, v61, v6);
  uint64_t v67 = v62[5];
  v68 = &v60[v67];
  v69 = &v61[v67];
  char v70 = v69[8];
  *(void *)v68 = *(void *)v69;
  v68[8] = v70;
  uint64_t v71 = v62[6];
  v72 = &v60[v71];
  v73 = &v61[v71];
  char v74 = v73[8];
  *(void *)v72 = *(void *)v73;
  v72[8] = v74;
  uint64_t v75 = v62[7];
  v76 = &v60[v75];
  v77 = &v61[v75];
  char v78 = v77[8];
  *(void *)v76 = *(void *)v77;
  v76[8] = v78;
  uint64_t v79 = v62[8];
  v80 = &v60[v79];
  v81 = &v61[v79];
  char v82 = v81[8];
  *(void *)v80 = *(void *)v81;
  v80[8] = v82;
  (*(void (**)(char *, void, uint64_t, int *))(v63 + 56))(v60, 0LL, 1LL, v62);
  return a1;
}

uint64_t sub_100077510(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100003A0C(&qword_1003518B8);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    int v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(_DWORD *)int v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v12[v14[6]] = v13[v14[6]];
    uint64_t v20 = v14[7];
    __dst = &v12[v20];
    uint64_t v21 = &v13[v20];
    uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
    uint64_t v49 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v21, 1LL, v22))
    {
      uint64_t v23 = sub_100003A0C(&qword_1003518B0);
      memcpy(__dst, v21, *(void *)(*(void *)(v23 - 8) + 64LL));
    }

    else
    {
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      uint64_t v24 = *(int *)(v22 + 20);
      uint64_t v25 = &__dst[v24];
      uint64_t v26 = &v21[v24];
      *(void *)uint64_t v25 = *(void *)v26;
      v25[8] = v26[8];
      uint64_t v27 = *(int *)(v22 + 24);
      size_t v28 = &__dst[v27];
      uint64_t v29 = &v21[v27];
      *(_DWORD *)size_t v28 = *(_DWORD *)v29;
      v28[4] = v29[4];
      (*(void (**)(void))(v49 + 56))();
    }

    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v30 = a3[7];
  uint64_t v31 = (char *)(a1 + v30);
  uint64_t v32 = (char *)(a2 + v30);
  uint64_t v33 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0LL);
  uint64_t v34 = *((void *)v33 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v34 + 48))(v32, 1LL, v33))
  {
    uint64_t v35 = sub_100003A0C(&qword_1003518C0);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v31, (uint64_t)v32, v6);
    uint64_t v36 = v33[5];
    uint64_t v37 = &v31[v36];
    uint64_t v38 = &v32[v36];
    *(void *)uint64_t v37 = *(void *)v38;
    v37[8] = v38[8];
    uint64_t v39 = v33[6];
    v40 = &v31[v39];
    int v41 = &v32[v39];
    *(void *)v40 = *(void *)v41;
    v40[8] = v41[8];
    uint64_t v42 = v33[7];
    uint64_t v43 = &v31[v42];
    uint64_t v44 = &v32[v42];
    *(void *)uint64_t v43 = *(void *)v44;
    v43[8] = v44[8];
    uint64_t v45 = v33[8];
    char v46 = &v31[v45];
    uint64_t v47 = &v32[v45];
    *(void *)char v46 = *(void *)v47;
    v46[8] = v47[8];
    (*(void (**)(char *, void, uint64_t, int *))(v34 + 56))(v31, 0LL, 1LL, v33);
  }

  return a1;
}

uint64_t sub_100077800(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v95 = *(void *)(v6 - 8);
  v94 = *(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 40);
  v94(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = (char *)(a2 + v8);
  uint64_t v13 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  uint64_t v14 = *((void *)v13 - 1);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v14 + 48);
  int v16 = v15(v11, 1LL, v13);
  int v17 = v15((uint64_t)v12, 1LL, v13);
  if (!v16)
  {
    if (!v17)
    {
      v94(v11, (uint64_t)v12, v6);
      uint64_t v29 = v13[5];
      uint64_t v30 = v11 + v29;
      uint64_t v31 = &v12[v29];
      *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
      *(_BYTE *)(v30 + 4) = v31[4];
      *(_BYTE *)(v11 + v13[6]) = v12[v13[6]];
      uint64_t v32 = v13[7];
      uint64_t v33 = v11 + v32;
      uint64_t v34 = &v12[v32];
      uint64_t v35 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
      uint64_t v36 = *(void *)(v35 - 8);
      uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
      int v38 = v37(v33, 1LL, v35);
      int v39 = v37((uint64_t)v34, 1LL, v35);
      if (v38)
      {
        if (!v39)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v95 + 32))(v33, v34, v6);
          uint64_t v40 = *(int *)(v35 + 20);
          uint64_t v41 = v33 + v40;
          uint64_t v42 = &v34[v40];
          *(void *)uint64_t v41 = *(void *)v42;
          *(_BYTE *)(v41 + 8) = v42[8];
          uint64_t v43 = *(int *)(v35 + 24);
          uint64_t v44 = v33 + v43;
          uint64_t v45 = &v34[v43];
          *(_DWORD *)uint64_t v44 = *(_DWORD *)v45;
          *(_BYTE *)(v44 + 4) = v45[4];
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0LL, 1LL, v35);
          goto LABEL_14;
        }
      }

      else
      {
        if (!v39)
        {
          v94(v33, (uint64_t)v34, v6);
          uint64_t v86 = *(int *)(v35 + 20);
          uint64_t v87 = v33 + v86;
          char v88 = &v34[v86];
          *(void *)uint64_t v87 = *(void *)v88;
          *(_BYTE *)(v87 + 8) = v88[8];
          uint64_t v89 = *(int *)(v35 + 24);
          uint64_t v90 = v33 + v89;
          v91 = &v34[v89];
          *(_DWORD *)uint64_t v90 = *(_DWORD *)v91;
          *(_BYTE *)(v90 + 4) = v91[4];
          goto LABEL_14;
        }

        sub_100004090(v33, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
      }

      size_t v26 = *(void *)(*(void *)(sub_100003A0C(&qword_1003518B0) - 8) + 64LL);
      uint64_t v27 = (void *)v33;
      size_t v28 = v34;
LABEL_8:
      memcpy(v27, v28, v26);
      goto LABEL_14;
    }

    sub_100004090(v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
LABEL_7:
    size_t v26 = *(void *)(*(void *)(sub_100003A0C(&qword_1003518B8) - 8) + 64LL);
    uint64_t v27 = (void *)v11;
    size_t v28 = v12;
    goto LABEL_8;
  }

  if (v17) {
    goto LABEL_7;
  }
  char v92 = *(void (**)(uint64_t, char *, uint64_t))(v95 + 32);
  v92(v11, v12, v6);
  uint64_t v18 = v13[5];
  uint64_t v19 = v11 + v18;
  uint64_t v20 = &v12[v18];
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = v20[4];
  *(_BYTE *)(v11 + v13[6]) = v12[v13[6]];
  uint64_t v21 = v13[7];
  __dst = (char *)(v11 + v21);
  uint64_t v22 = &v12[v21];
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1LL, v23))
  {
    uint64_t v25 = sub_100003A0C(&qword_1003518B0);
    memcpy(__dst, v22, *(void *)(*(void *)(v25 - 8) + 64LL));
  }

  else
  {
    v92((uint64_t)__dst, v22, v6);
    uint64_t v46 = *(int *)(v23 + 20);
    uint64_t v47 = &__dst[v46];
    uint64_t v48 = &v22[v46];
    *(void *)uint64_t v47 = *(void *)v48;
    v47[8] = v48[8];
    uint64_t v49 = *(int *)(v23 + 24);
    char v50 = &__dst[v49];
    uint64_t v51 = &v22[v49];
    *(_DWORD *)char v50 = *(_DWORD *)v51;
    v50[4] = v51[4];
    (*(void (**)(void))(v24 + 56))();
  }

  (*(void (**)(uint64_t, void, uint64_t, int *))(v14 + 56))(v11, 0LL, 1LL, v13);
LABEL_14:
  uint64_t v52 = a3[7];
  v53 = (char *)(a1 + v52);
  char v54 = (char *)(a2 + v52);
  uint64_t v55 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0LL);
  uint64_t v56 = *((void *)v55 - 1);
  v57 = *(uint64_t (**)(char *, uint64_t, int *))(v56 + 48);
  int v58 = v57(v53, 1LL, v55);
  int v59 = v57(v54, 1LL, v55);
  if (!v58)
  {
    if (!v59)
    {
      v94((uint64_t)v53, (uint64_t)v54, v6);
      uint64_t v74 = v55[5];
      uint64_t v75 = &v53[v74];
      v76 = &v54[v74];
      *(void *)uint64_t v75 = *(void *)v76;
      v75[8] = v76[8];
      uint64_t v77 = v55[6];
      char v78 = &v53[v77];
      uint64_t v79 = &v54[v77];
      *(void *)char v78 = *(void *)v79;
      v78[8] = v79[8];
      uint64_t v80 = v55[7];
      v81 = &v53[v80];
      char v82 = &v54[v80];
      *(void *)v81 = *(void *)v82;
      v81[8] = v82[8];
      uint64_t v83 = v55[8];
      v84 = &v53[v83];
      uint64_t v85 = &v54[v83];
      *(void *)v84 = *(void *)v85;
      v84[8] = v85[8];
      return a1;
    }

    sub_100004090((uint64_t)v53, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
    goto LABEL_19;
  }

  if (v59)
  {
LABEL_19:
    uint64_t v72 = sub_100003A0C(&qword_1003518C0);
    memcpy(v53, v54, *(void *)(*(void *)(v72 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v53, v54, v6);
  uint64_t v60 = v55[5];
  v61 = &v53[v60];
  v62 = &v54[v60];
  *(void *)v61 = *(void *)v62;
  v61[8] = v62[8];
  uint64_t v63 = v55[6];
  v64 = &v53[v63];
  int v65 = &v54[v63];
  *(void *)v64 = *(void *)v65;
  v64[8] = v65[8];
  uint64_t v66 = v55[7];
  uint64_t v67 = &v53[v66];
  v68 = &v54[v66];
  *(void *)uint64_t v67 = *(void *)v68;
  v67[8] = v68[8];
  uint64_t v69 = v55[8];
  char v70 = &v53[v69];
  uint64_t v71 = &v54[v69];
  *(void *)char v70 = *(void *)v71;
  v70[8] = v71[8];
  (*(void (**)(char *, void, uint64_t, int *))(v56 + 56))(v53, 0LL, 1LL, v55);
  return a1;
}

uint64_t sub_100077D50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100077D5C);
}

uint64_t sub_100077D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007AAB0(a1, a2, a3, &qword_1003518C0);
}

uint64_t sub_100077D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100077D74);
}

uint64_t sub_100077D74(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10007AB68(a1, a2, a3, a4, &qword_1003518C0);
}

void sub_100077D80(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v8[0] = *(void *)(v2 - 8) + 64LL;
    v8[1] = &unk_1002B9CB0;
    sub_1000119EC(319LL, &qword_100353628, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
    if (v5 <= 0x3F)
    {
      v8[2] = *(void *)(v4 - 8) + 64LL;
      sub_1000119EC( 319LL,  (unint64_t *)&unk_100353630,  type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
      if (v7 <= 0x3F)
      {
        v8[3] = *(void *)(v6 - 8) + 64LL;
        swift_initStructMetadata(a1, 256LL, 4LL, v8, a1 + 16);
      }
    }
  }

uint64_t *sub_100077E48(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v14);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)uint64_t v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
  }

  return a1;
}

uint64_t sub_100077EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  return a1;
}

uint64_t sub_100077F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(_BYTE *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(_BYTE *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(_BYTE *)(v12 + 8) = v14;
  return a1;
}

uint64_t sub_100078004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  return a1;
}

uint64_t sub_100078088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  return a1;
}

uint64_t sub_10007810C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100078118);
}

uint64_t sub_10007811C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100078128);
}

uint64_t sub_10007812C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007813C(a1, a2, a3, (uint64_t)"\t", (uint64_t)"\t");
}

uint64_t sub_10007813C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v9 <= 0x3F)
  {
    v10[0] = *(void *)(result - 8) + 64LL;
    v10[1] = a4;
    v10[2] = a5;
    swift_initStructMetadata(a1, 256LL, 3LL, v10, a1 + 16);
    return 0LL;
  }

  return result;
}

char *sub_1000781B8(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v22 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v22);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = &a1[v9];
    uint64_t v12 = &a2[v9];
    *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
    v11[4] = v12[4];
    uint64_t v13 = &a1[v10];
    char v14 = &a2[v10];
    *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
    v13[4] = v14[4];
    uint64_t v15 = a3[8];
    a1[a3[7]] = a2[a3[7]];
    int v16 = &a1[v15];
    int v17 = &a2[v15];
    uint64_t v18 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0LL);
    uint64_t v19 = *(void *)(v18 - 8);
    uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    if (v20(v17, 1LL, v18))
    {
      uint64_t v21 = sub_100003A0C(&qword_1003518C8);
      memcpy(v16, v17, *(void *)(*(void *)(v21 - 8) + 64LL));
    }

    else
    {
      v8(v16, v17, v7);
      uint64_t v23 = *(int *)(v18 + 20);
      uint64_t v24 = &v16[v23];
      uint64_t v25 = &v17[v23];
      *(void *)uint64_t v24 = *(void *)v25;
      v24[8] = v25[8];
      uint64_t v26 = *(int *)(v18 + 24);
      uint64_t v27 = &v16[v26];
      size_t v28 = &v17[v26];
      *(void *)uint64_t v27 = *(void *)v28;
      v27[8] = v28[8];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
    }

    uint64_t v29 = a3[9];
    uint64_t v30 = &a1[v29];
    uint64_t v31 = &a2[v29];
    if (v20(v31, 1LL, v18))
    {
      uint64_t v32 = sub_100003A0C(&qword_1003518C8);
      memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64LL));
    }

    else
    {
      v8(v30, v31, v7);
      uint64_t v33 = *(int *)(v18 + 20);
      uint64_t v34 = &v30[v33];
      uint64_t v35 = &v31[v33];
      *(void *)uint64_t v34 = *(void *)v35;
      v34[8] = v35[8];
      uint64_t v36 = *(int *)(v18 + 24);
      uint64_t v37 = &v30[v36];
      int v38 = &v31[v36];
      *(void *)uint64_t v37 = *(void *)v38;
      v37[8] = v38[8];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v30, 0LL, 1LL, v18);
    }
  }

  return a1;
}

uint64_t sub_1000783E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v10(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 32);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0LL);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL);
  if (!v7(v5, 1LL, v6)) {
    v10(v5, v4);
  }
  uint64_t v8 = a1 + *(int *)(a2 + 36);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v8, 1LL, v6);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v8, v4);
  }
  return result;
}

uint64_t sub_1000784C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  uint64_t v12 = a1 + v9;
  uint64_t v13 = a2 + v9;
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  uint64_t v14 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  uint64_t v15 = (char *)(a1 + v14);
  int v16 = (char *)(a2 + v14);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (v19(v16, 1LL, v17))
  {
    uint64_t v20 = sub_100003A0C(&qword_1003518C8);
    memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v15, (uint64_t)v16, v6);
    uint64_t v21 = *(int *)(v17 + 20);
    uint64_t v22 = &v15[v21];
    uint64_t v23 = &v16[v21];
    *(void *)uint64_t v22 = *(void *)v23;
    v22[8] = v23[8];
    uint64_t v24 = *(int *)(v17 + 24);
    uint64_t v25 = &v15[v24];
    uint64_t v26 = &v16[v24];
    *(void *)uint64_t v25 = *(void *)v26;
    v25[8] = v26[8];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
  }

  uint64_t v27 = a3[9];
  size_t v28 = (char *)(a1 + v27);
  uint64_t v29 = (char *)(a2 + v27);
  if (v19(v29, 1LL, v17))
  {
    uint64_t v30 = sub_100003A0C(&qword_1003518C8);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v28, (uint64_t)v29, v6);
    uint64_t v31 = *(int *)(v17 + 20);
    uint64_t v32 = &v28[v31];
    uint64_t v33 = &v29[v31];
    *(void *)uint64_t v32 = *(void *)v33;
    v32[8] = v33[8];
    uint64_t v34 = *(int *)(v17 + 24);
    uint64_t v35 = &v28[v34];
    uint64_t v36 = &v29[v34];
    *(void *)uint64_t v35 = *(void *)v36;
    v35[8] = v36[8];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v28, 0LL, 1LL, v17);
  }

  return a1;
}

uint64_t sub_1000786C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v63 = *(void *)(v6 - 8);
  v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 24);
  v62(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (int *)(a2 + v7);
  int v10 = *v9;
  *(_BYTE *)(v8 + 4) = *((_BYTE *)v9 + 4);
  *(_DWORD *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v10;
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  uint64_t v14 = a3[8];
  uint64_t v15 = (char *)(a1 + v14);
  int v16 = (char *)(a2 + v14);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1LL, v17);
  int v21 = v19(v16, 1LL, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v15, v16, v6);
      uint64_t v22 = *(int *)(v17 + 20);
      uint64_t v23 = &v15[v22];
      uint64_t v24 = &v16[v22];
      char v25 = v24[8];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v25;
      uint64_t v26 = *(int *)(v17 + 24);
      uint64_t v27 = &v15[v26];
      size_t v28 = &v16[v26];
      char v29 = v28[8];
      *(void *)uint64_t v27 = *(void *)v28;
      v27[8] = v29;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v21)
  {
    sub_100004090((uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
LABEL_6:
    uint64_t v30 = sub_100003A0C(&qword_1003518C8);
    memcpy(v15, v16, *(void *)(*(void *)(v30 - 8) + 64LL));
    goto LABEL_7;
  }

  v62((uint64_t)v15, (uint64_t)v16, v6);
  uint64_t v46 = *(int *)(v17 + 20);
  uint64_t v47 = &v15[v46];
  uint64_t v48 = &v16[v46];
  char v49 = v48[8];
  *(void *)uint64_t v47 = *(void *)v48;
  v47[8] = v49;
  uint64_t v50 = *(int *)(v17 + 24);
  uint64_t v51 = &v15[v50];
  uint64_t v52 = &v16[v50];
  char v53 = v52[8];
  *(void *)uint64_t v51 = *(void *)v52;
  v51[8] = v53;
LABEL_7:
  uint64_t v31 = a3[9];
  uint64_t v32 = (char *)(a1 + v31);
  uint64_t v33 = (char *)(a2 + v31);
  int v34 = v19((char *)(a1 + v31), 1LL, v17);
  int v35 = v19(v33, 1LL, v17);
  if (!v34)
  {
    if (!v35)
    {
      v62((uint64_t)v32, (uint64_t)v33, v6);
      uint64_t v54 = *(int *)(v17 + 20);
      uint64_t v55 = &v32[v54];
      uint64_t v56 = &v33[v54];
      char v57 = v56[8];
      *(void *)uint64_t v55 = *(void *)v56;
      v55[8] = v57;
      uint64_t v58 = *(int *)(v17 + 24);
      int v59 = &v32[v58];
      uint64_t v60 = &v33[v58];
      char v61 = v60[8];
      *(void *)int v59 = *(void *)v60;
      v59[8] = v61;
      return a1;
    }

    sub_100004090((uint64_t)v32, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
    goto LABEL_12;
  }

  if (v35)
  {
LABEL_12:
    uint64_t v44 = sub_100003A0C(&qword_1003518C8);
    memcpy(v32, v33, *(void *)(*(void *)(v44 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v32, v33, v6);
  uint64_t v36 = *(int *)(v17 + 20);
  uint64_t v37 = &v32[v36];
  int v38 = &v33[v36];
  char v39 = v38[8];
  *(void *)uint64_t v37 = *(void *)v38;
  v37[8] = v39;
  uint64_t v40 = *(int *)(v17 + 24);
  uint64_t v41 = &v32[v40];
  uint64_t v42 = &v33[v40];
  char v43 = v42[8];
  *(void *)uint64_t v41 = *(void *)v42;
  v41[8] = v43;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v32, 0LL, 1LL, v17);
  return a1;
}

uint64_t sub_1000789EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  uint64_t v12 = a1 + v9;
  uint64_t v13 = a2 + v9;
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  uint64_t v14 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  uint64_t v15 = (char *)(a1 + v14);
  int v16 = (char *)(a2 + v14);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (v19(v16, 1LL, v17))
  {
    uint64_t v20 = sub_100003A0C(&qword_1003518C8);
    memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v15, (uint64_t)v16, v6);
    uint64_t v21 = *(int *)(v17 + 20);
    uint64_t v22 = &v15[v21];
    uint64_t v23 = &v16[v21];
    *(void *)uint64_t v22 = *(void *)v23;
    v22[8] = v23[8];
    uint64_t v24 = *(int *)(v17 + 24);
    char v25 = &v15[v24];
    uint64_t v26 = &v16[v24];
    *(void *)char v25 = *(void *)v26;
    v25[8] = v26[8];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
  }

  uint64_t v27 = a3[9];
  size_t v28 = (char *)(a1 + v27);
  char v29 = (char *)(a2 + v27);
  if (v19(v29, 1LL, v17))
  {
    uint64_t v30 = sub_100003A0C(&qword_1003518C8);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v28, (uint64_t)v29, v6);
    uint64_t v31 = *(int *)(v17 + 20);
    uint64_t v32 = &v28[v31];
    uint64_t v33 = &v29[v31];
    *(void *)uint64_t v32 = *(void *)v33;
    v32[8] = v33[8];
    uint64_t v34 = *(int *)(v17 + 24);
    int v35 = &v28[v34];
    uint64_t v36 = &v29[v34];
    *(void *)int v35 = *(void *)v36;
    v35[8] = v36[8];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v28, 0LL, 1LL, v17);
  }

  return a1;
}

uint64_t sub_100078BF0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v54 = *(void *)(v6 - 8);
  char v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 40);
  v53(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  uint64_t v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  uint64_t v14 = (char *)(a1 + v13);
  uint64_t v15 = (char *)(a2 + v13);
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1LL, v16);
  int v20 = v18(v15, 1LL, v16);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v14, v15, v6);
      uint64_t v21 = *(int *)(v16 + 20);
      uint64_t v22 = &v14[v21];
      uint64_t v23 = &v15[v21];
      *(void *)uint64_t v22 = *(void *)v23;
      v22[8] = v23[8];
      uint64_t v24 = *(int *)(v16 + 24);
      char v25 = &v14[v24];
      uint64_t v26 = &v15[v24];
      *(void *)char v25 = *(void *)v26;
      v25[8] = v26[8];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v20)
  {
    sub_100004090((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
LABEL_6:
    uint64_t v27 = sub_100003A0C(&qword_1003518C8);
    memcpy(v14, v15, *(void *)(*(void *)(v27 - 8) + 64LL));
    goto LABEL_7;
  }

  v53((uint64_t)v14, (uint64_t)v15, v6);
  uint64_t v41 = *(int *)(v16 + 20);
  uint64_t v42 = &v14[v41];
  char v43 = &v15[v41];
  *(void *)uint64_t v42 = *(void *)v43;
  v42[8] = v43[8];
  uint64_t v44 = *(int *)(v16 + 24);
  uint64_t v45 = &v14[v44];
  uint64_t v46 = &v15[v44];
  *(void *)uint64_t v45 = *(void *)v46;
  v45[8] = v46[8];
LABEL_7:
  uint64_t v28 = a3[9];
  char v29 = (char *)(a1 + v28);
  uint64_t v30 = (char *)(a2 + v28);
  int v31 = v18((char *)(a1 + v28), 1LL, v16);
  int v32 = v18(v30, 1LL, v16);
  if (!v31)
  {
    if (!v32)
    {
      v53((uint64_t)v29, (uint64_t)v30, v6);
      uint64_t v47 = *(int *)(v16 + 20);
      uint64_t v48 = &v29[v47];
      char v49 = &v30[v47];
      *(void *)uint64_t v48 = *(void *)v49;
      v48[8] = v49[8];
      uint64_t v50 = *(int *)(v16 + 24);
      uint64_t v51 = &v29[v50];
      uint64_t v52 = &v30[v50];
      *(void *)uint64_t v51 = *(void *)v52;
      v51[8] = v52[8];
      return a1;
    }

    sub_100004090((uint64_t)v29, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
    goto LABEL_12;
  }

  if (v32)
  {
LABEL_12:
    uint64_t v39 = sub_100003A0C(&qword_1003518C8);
    memcpy(v29, v30, *(void *)(*(void *)(v39 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v29, v30, v6);
  uint64_t v33 = *(int *)(v16 + 20);
  uint64_t v34 = &v29[v33];
  int v35 = &v30[v33];
  *(void *)uint64_t v34 = *(void *)v35;
  v34[8] = v35[8];
  uint64_t v36 = *(int *)(v16 + 24);
  uint64_t v37 = &v29[v36];
  int v38 = &v30[v36];
  *(void *)uint64_t v37 = *(void *)v38;
  v37[8] = v38[8];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v29, 0LL, 1LL, v16);
  return a1;
}

uint64_t sub_100078F0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100078F18);
}

uint64_t sub_100078F18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  if ((_DWORD)a2 == 249)
  {
    else {
      int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
    }
    unsigned int v10 = v9 - 6;
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v11 = sub_100003A0C(&qword_1003518C8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))( a1 + *(int *)(a3 + 32),  a2,  v11);
  }

uint64_t sub_100078FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100078FD4);
}

uint64_t sub_100078FD4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    if (a3 == 249)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 28)) = a2 + 6;
      return result;
    }

    uint64_t v10 = sub_100003A0C(&qword_1003518C8);
    uint64_t v12 = a1 + *(int *)(a4 + 32);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

void sub_100079078(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    v6[1] = &unk_1002B9CB0;
    v6[2] = &unk_1002B9CB0;
    v6[3] = &unk_1002BA088;
    sub_1000119EC( 319LL,  (unint64_t *)&unk_100353748,  type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
    if (v5 <= 0x3F)
    {
      uint64_t v7 = *(void *)(v4 - 8) + 64LL;
      uint64_t v8 = v7;
      swift_initStructMetadata(a1, 256LL, 6LL, v6, a1 + 16);
    }
  }

uint64_t sub_100079120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007912C);
}

uint64_t sub_100079130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007913C);
}

uint64_t sub_100079140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007914C);
}

uint64_t sub_100079150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007915C);
}

uint64_t *sub_100079160(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v18);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8((char *)a1, (char *)a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
    v11[4] = v12[4];
    uint64_t v13 = (char *)a1 + v10;
    uint64_t v14 = (char *)a2 + v10;
    uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
    uint64_t v16 = *((void *)v15 - 1);
    v64 = v8;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1LL, v15))
    {
      uint64_t v17 = sub_100003A0C(&qword_1003518B8);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
    }

    else
    {
      v8(v13, v14, v7);
      uint64_t v19 = v15[5];
      int v20 = &v13[v19];
      uint64_t v21 = &v14[v19];
      *(_DWORD *)int v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      v13[v15[6]] = v14[v15[6]];
      uint64_t v22 = v15[7];
      __dst = &v13[v22];
      uint64_t v23 = &v14[v22];
      uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
      uint64_t v62 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v23, 1LL, v24))
      {
        uint64_t v25 = sub_100003A0C(&qword_1003518B0);
        memcpy(__dst, v23, *(void *)(*(void *)(v25 - 8) + 64LL));
      }

      else
      {
        v8(__dst, v23, v7);
        uint64_t v26 = *(int *)(v24 + 20);
        uint64_t v27 = &__dst[v26];
        uint64_t v28 = &v23[v26];
        *(void *)uint64_t v27 = *(void *)v28;
        v27[8] = v28[8];
        uint64_t v29 = *(int *)(v24 + 24);
        uint64_t v30 = &__dst[v29];
        int v31 = &v23[v29];
        *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
        v30[4] = v31[4];
        (*(void (**)(void))(v62 + 56))();
      }

      (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0LL, 1LL, v15);
    }

    uint64_t v32 = a3[7];
    uint64_t v33 = (char *)a1 + v32;
    uint64_t v34 = (char *)a2 + v32;
    int v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
    uint64_t v36 = *((void *)v35 - 1);
    uint64_t v37 = *(unsigned int (**)(char *, uint64_t, int *))(v36 + 48);
    if (v37(v34, 1LL, v35))
    {
      uint64_t v38 = sub_100003A0C(&qword_1003518D0);
      memcpy(v33, v34, *(void *)(*(void *)(v38 - 8) + 64LL));
    }

    else
    {
      v64(v33, v34, v7);
      uint64_t v39 = v35[5];
      uint64_t v40 = &v33[v39];
      uint64_t v41 = &v34[v39];
      *(void *)uint64_t v40 = *(void *)v41;
      v40[8] = v41[8];
      uint64_t v42 = v35[6];
      char v43 = &v33[v42];
      uint64_t v44 = &v34[v42];
      *(void *)char v43 = *(void *)v44;
      v43[8] = v44[8];
      uint64_t v45 = v35[7];
      uint64_t v46 = &v33[v45];
      uint64_t v47 = &v34[v45];
      *(void *)uint64_t v46 = *(void *)v47;
      v46[8] = v47[8];
      (*(void (**)(char *, void, uint64_t, int *))(v36 + 56))(v33, 0LL, 1LL, v35);
    }

    uint64_t v48 = a3[8];
    char v49 = (char *)a1 + v48;
    uint64_t v50 = (char *)a2 + v48;
    if (v37(v50, 1LL, v35))
    {
      uint64_t v51 = sub_100003A0C(&qword_1003518D0);
      memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64LL));
    }

    else
    {
      v64(v49, v50, v7);
      uint64_t v52 = v35[5];
      char v53 = &v49[v52];
      uint64_t v54 = &v50[v52];
      *(void *)char v53 = *(void *)v54;
      v53[8] = v54[8];
      uint64_t v55 = v35[6];
      uint64_t v56 = &v49[v55];
      char v57 = &v50[v55];
      *(void *)uint64_t v56 = *(void *)v57;
      v56[8] = v57[8];
      uint64_t v58 = v35[7];
      int v59 = &v49[v58];
      uint64_t v60 = &v50[v58];
      *(void *)int v59 = *(void *)v60;
      v59[8] = v60[8];
      (*(void (**)(char *, void, uint64_t, int *))(v36 + 56))(v49, 0LL, 1LL, v35);
    }
  }

  return a1;
}

uint64_t sub_100079524(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v14(a1, v4);
  uint64_t v5 = a1 + a2[6];
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL))(v5, 1LL, v6))
  {
    v14(v5, v4);
    uint64_t v7 = v5 + *(int *)(v6 + 28);
    uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
  }

  uint64_t v9 = a1 + a2[7];
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL);
  if (!v11(v9, 1LL, v10)) {
    v14(v9, v4);
  }
  uint64_t v12 = a1 + a2[8];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11)(v12, 1LL, v10);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(uint64_t, uint64_t))v14)(v12, v4);
  }
  return result;
}

uint64_t sub_10007967C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v62 = (void (*)(char *, char *, uint64_t))v7;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100003A0C(&qword_1003518B8);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v12[v14[6]] = v13[v14[6]];
    uint64_t v20 = v14[7];
    __dst = &v12[v20];
    uint64_t v21 = &v13[v20];
    uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
    uint64_t v60 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v21, 1LL, v22))
    {
      uint64_t v23 = sub_100003A0C(&qword_1003518B0);
      memcpy(__dst, v21, *(void *)(*(void *)(v23 - 8) + 64LL));
    }

    else
    {
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      uint64_t v24 = *(int *)(v22 + 20);
      uint64_t v25 = &__dst[v24];
      uint64_t v26 = &v21[v24];
      *(void *)uint64_t v25 = *(void *)v26;
      v25[8] = v26[8];
      uint64_t v27 = *(int *)(v22 + 24);
      uint64_t v28 = &__dst[v27];
      uint64_t v29 = &v21[v27];
      *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
      v28[4] = v29[4];
      (*(void (**)(void))(v60 + 56))();
    }

    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v30 = a3[7];
  int v31 = (char *)(a1 + v30);
  uint64_t v32 = (char *)(a2 + v30);
  uint64_t v33 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  uint64_t v34 = *((void *)v33 - 1);
  int v35 = *(unsigned int (**)(char *, uint64_t, int *))(v34 + 48);
  if (v35(v32, 1LL, v33))
  {
    uint64_t v36 = sub_100003A0C(&qword_1003518D0);
    memcpy(v31, v32, *(void *)(*(void *)(v36 - 8) + 64LL));
  }

  else
  {
    v62(v31, v32, v6);
    uint64_t v37 = v33[5];
    uint64_t v38 = &v31[v37];
    uint64_t v39 = &v32[v37];
    *(void *)uint64_t v38 = *(void *)v39;
    v38[8] = v39[8];
    uint64_t v40 = v33[6];
    uint64_t v41 = &v31[v40];
    uint64_t v42 = &v32[v40];
    *(void *)uint64_t v41 = *(void *)v42;
    v41[8] = v42[8];
    uint64_t v43 = v33[7];
    uint64_t v44 = &v31[v43];
    uint64_t v45 = &v32[v43];
    *(void *)uint64_t v44 = *(void *)v45;
    v44[8] = v45[8];
    (*(void (**)(char *, void, uint64_t, int *))(v34 + 56))(v31, 0LL, 1LL, v33);
  }

  uint64_t v46 = a3[8];
  uint64_t v47 = (char *)(a1 + v46);
  uint64_t v48 = (char *)(a2 + v46);
  if (v35(v48, 1LL, v33))
  {
    uint64_t v49 = sub_100003A0C(&qword_1003518D0);
    memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64LL));
  }

  else
  {
    v62(v47, v48, v6);
    uint64_t v50 = v33[5];
    uint64_t v51 = &v47[v50];
    uint64_t v52 = &v48[v50];
    *(void *)uint64_t v51 = *(void *)v52;
    v51[8] = v52[8];
    uint64_t v53 = v33[6];
    uint64_t v54 = &v47[v53];
    uint64_t v55 = &v48[v53];
    *(void *)uint64_t v54 = *(void *)v55;
    v54[8] = v55[8];
    uint64_t v56 = v33[7];
    char v57 = &v47[v56];
    uint64_t v58 = &v48[v56];
    *(void *)char v57 = *(void *)v58;
    v57[8] = v58[8];
    (*(void (**)(char *, void, uint64_t, int *))(v34 + 56))(v47, 0LL, 1LL, v33);
  }

  return a1;
}

uint64_t sub_100079A14(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v135 = *(void *)(v6 - 8);
  v134 = *(void (**)(uint64_t, uint64_t, uint64_t))(v135 + 24);
  v134(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(_BYTE *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v15 + 48);
  int v17 = v16(v12, 1LL, v14);
  int v18 = v16((uint64_t)v13, 1LL, v14);
  uint64_t v136 = v6;
  if (!v17)
  {
    if (!v18)
    {
      v134(v12, (uint64_t)v13, v6);
      uint64_t v32 = v14[5];
      uint64_t v33 = v12 + v32;
      uint64_t v34 = &v13[v32];
      int v35 = *(_DWORD *)v34;
      *(_BYTE *)(v33 + 4) = v34[4];
      *(_DWORD *)uint64_t v33 = v35;
      *(_BYTE *)(v12 + v14[6]) = v13[v14[6]];
      uint64_t v36 = v14[7];
      uint64_t v37 = v12 + v36;
      uint64_t v38 = &v13[v36];
      uint64_t v39 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
      uint64_t v40 = *(void *)(v39 - 8);
      uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
      int v42 = v41(v37, 1LL, v39);
      int v43 = v41((uint64_t)v38, 1LL, v39);
      if (v42)
      {
        if (!v43)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v135 + 16))(v37, v38, v136);
          uint64_t v44 = *(int *)(v39 + 20);
          uint64_t v45 = v37 + v44;
          uint64_t v46 = &v38[v44];
          char v47 = v46[8];
          *(void *)uint64_t v45 = *(void *)v46;
          *(_BYTE *)(v45 + 8) = v47;
          uint64_t v48 = *(int *)(v39 + 24);
          uint64_t v49 = v37 + v48;
          uint64_t v50 = &v38[v48];
          char v51 = v50[4];
          *(_DWORD *)uint64_t v49 = *(_DWORD *)v50;
          *(_BYTE *)(v49 + 4) = v51;
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v37, 0LL, 1LL, v39);
          goto LABEL_14;
        }
      }

      else
      {
        if (!v43)
        {
          v134(v37, (uint64_t)v38, v136);
          uint64_t v124 = *(int *)(v39 + 20);
          uint64_t v125 = v37 + v124;
          v126 = &v38[v124];
          char v127 = v126[8];
          *(void *)uint64_t v125 = *(void *)v126;
          *(_BYTE *)(v125 + 8) = v127;
          uint64_t v128 = *(int *)(v39 + 24);
          uint64_t v129 = v37 + v128;
          v130 = &v38[v128];
          char v131 = v130[4];
          *(_DWORD *)uint64_t v129 = *(_DWORD *)v130;
          *(_BYTE *)(v129 + 4) = v131;
          goto LABEL_14;
        }

        sub_100004090(v37, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
      }

      size_t v29 = *(void *)(*(void *)(sub_100003A0C(&qword_1003518B0) - 8) + 64LL);
      uint64_t v30 = (void *)v37;
      int v31 = v38;
LABEL_8:
      memcpy(v30, v31, v29);
      goto LABEL_14;
    }

    sub_100004090(v12, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
LABEL_7:
    size_t v29 = *(void *)(*(void *)(sub_100003A0C(&qword_1003518B8) - 8) + 64LL);
    uint64_t v30 = (void *)v12;
    int v31 = v13;
    goto LABEL_8;
  }

  if (v18) {
    goto LABEL_7;
  }
  v132 = *(void (**)(uint64_t, char *, uint64_t))(v135 + 16);
  v132(v12, v13, v6);
  uint64_t v19 = v14[5];
  uint64_t v20 = v12 + v19;
  uint64_t v21 = &v13[v19];
  int v22 = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = v21[4];
  *(_DWORD *)uint64_t v20 = v22;
  *(_BYTE *)(v12 + v14[6]) = v13[v14[6]];
  uint64_t v23 = v14[7];
  __dst = (char *)(v12 + v23);
  uint64_t v24 = &v13[v23];
  uint64_t v25 = v6;
  uint64_t v26 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v24, 1LL, v26))
  {
    uint64_t v28 = sub_100003A0C(&qword_1003518B0);
    memcpy(__dst, v24, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    v132((uint64_t)__dst, v24, v25);
    uint64_t v52 = *(int *)(v26 + 20);
    uint64_t v53 = &__dst[v52];
    uint64_t v54 = &v24[v52];
    char v55 = v54[8];
    *(void *)uint64_t v53 = *(void *)v54;
    v53[8] = v55;
    uint64_t v56 = *(int *)(v26 + 24);
    char v57 = &__dst[v56];
    uint64_t v58 = &v24[v56];
    char v59 = v58[4];
    *(_DWORD *)char v57 = *(_DWORD *)v58;
    v57[4] = v59;
    (*(void (**)(void))(v27 + 56))();
  }

  (*(void (**)(uint64_t, void, uint64_t, int *))(v15 + 56))(v12, 0LL, 1LL, v14);
LABEL_14:
  uint64_t v60 = a3[7];
  char v61 = (char *)(a1 + v60);
  uint64_t v62 = (char *)(a2 + v60);
  uint64_t v63 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  uint64_t v64 = *((void *)v63 - 1);
  int v65 = *(uint64_t (**)(char *, uint64_t, int *))(v64 + 48);
  int v66 = v65(v61, 1LL, v63);
  int v67 = v65(v62, 1LL, v63);
  if (v66)
  {
    if (!v67)
    {
      (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v61, v62, v136);
      uint64_t v68 = v63[5];
      uint64_t v69 = &v61[v68];
      char v70 = &v62[v68];
      char v71 = v70[8];
      *(void *)uint64_t v69 = *(void *)v70;
      v69[8] = v71;
      uint64_t v72 = v63[6];
      v73 = &v61[v72];
      uint64_t v74 = &v62[v72];
      char v75 = v74[8];
      *(void *)v73 = *(void *)v74;
      v73[8] = v75;
      uint64_t v76 = v63[7];
      uint64_t v77 = &v61[v76];
      char v78 = &v62[v76];
      char v79 = v78[8];
      *(void *)uint64_t v77 = *(void *)v78;
      v77[8] = v79;
      (*(void (**)(char *, void, uint64_t, int *))(v64 + 56))(v61, 0LL, 1LL, v63);
      goto LABEL_20;
    }

    goto LABEL_19;
  }

  if (v67)
  {
    sub_100004090((uint64_t)v61, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
LABEL_19:
    uint64_t v80 = sub_100003A0C(&qword_1003518D0);
    memcpy(v61, v62, *(void *)(*(void *)(v80 - 8) + 64LL));
    goto LABEL_20;
  }

  v134((uint64_t)v61, (uint64_t)v62, v136);
  uint64_t v100 = v63[5];
  uint64_t v101 = &v61[v100];
  uint64_t v102 = &v62[v100];
  char v103 = v102[8];
  *(void *)uint64_t v101 = *(void *)v102;
  v101[8] = v103;
  uint64_t v104 = v63[6];
  uint64_t v105 = &v61[v104];
  uint64_t v106 = &v62[v104];
  char v107 = v106[8];
  *(void *)uint64_t v105 = *(void *)v106;
  v105[8] = v107;
  uint64_t v108 = v63[7];
  v109 = &v61[v108];
  v110 = &v62[v108];
  char v111 = v110[8];
  *(void *)v109 = *(void *)v110;
  v109[8] = v111;
LABEL_20:
  uint64_t v81 = a3[8];
  char v82 = (char *)(a1 + v81);
  uint64_t v83 = (char *)(a2 + v81);
  int v84 = v65((char *)(a1 + v81), 1LL, v63);
  int v85 = v65(v83, 1LL, v63);
  if (!v84)
  {
    if (!v85)
    {
      v134((uint64_t)v82, (uint64_t)v83, v136);
      uint64_t v112 = v63[5];
      v113 = &v82[v112];
      v114 = &v83[v112];
      char v115 = v114[8];
      *(void *)v113 = *(void *)v114;
      v113[8] = v115;
      uint64_t v116 = v63[6];
      v117 = &v82[v116];
      v118 = &v83[v116];
      char v119 = v118[8];
      *(void *)v117 = *(void *)v118;
      v117[8] = v119;
      uint64_t v120 = v63[7];
      v121 = &v82[v120];
      v122 = &v83[v120];
      char v123 = v122[8];
      *(void *)v121 = *(void *)v122;
      v121[8] = v123;
      return a1;
    }

    sub_100004090((uint64_t)v82, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_25;
  }

  if (v85)
  {
LABEL_25:
    uint64_t v98 = sub_100003A0C(&qword_1003518D0);
    memcpy(v82, v83, *(void *)(*(void *)(v98 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v82, v83, v136);
  uint64_t v86 = v63[5];
  uint64_t v87 = &v82[v86];
  char v88 = &v83[v86];
  char v89 = v88[8];
  *(void *)uint64_t v87 = *(void *)v88;
  v87[8] = v89;
  uint64_t v90 = v63[6];
  v91 = &v82[v90];
  char v92 = &v83[v90];
  char v93 = v92[8];
  *(void *)v91 = *(void *)v92;
  v91[8] = v93;
  uint64_t v94 = v63[7];
  uint64_t v95 = &v82[v94];
  char v96 = &v83[v94];
  char v97 = v96[8];
  *(void *)uint64_t v95 = *(void *)v96;
  v95[8] = v97;
  (*(void (**)(char *, void, uint64_t, int *))(v64 + 56))(v82, 0LL, 1LL, v63);
  return a1;
}

uint64_t sub_10007A08C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v62 = (void (*)(char *, char *, uint64_t))v7;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100003A0C(&qword_1003518B8);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    int v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(_DWORD *)int v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v12[v14[6]] = v13[v14[6]];
    uint64_t v20 = v14[7];
    __dst = &v12[v20];
    uint64_t v21 = &v13[v20];
    uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
    uint64_t v60 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v21, 1LL, v22))
    {
      uint64_t v23 = sub_100003A0C(&qword_1003518B0);
      memcpy(__dst, v21, *(void *)(*(void *)(v23 - 8) + 64LL));
    }

    else
    {
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      uint64_t v24 = *(int *)(v22 + 20);
      uint64_t v25 = &__dst[v24];
      uint64_t v26 = &v21[v24];
      *(void *)uint64_t v25 = *(void *)v26;
      v25[8] = v26[8];
      uint64_t v27 = *(int *)(v22 + 24);
      uint64_t v28 = &__dst[v27];
      size_t v29 = &v21[v27];
      *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
      v28[4] = v29[4];
      (*(void (**)(void))(v60 + 56))();
    }

    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v30 = a3[7];
  int v31 = (char *)(a1 + v30);
  uint64_t v32 = (char *)(a2 + v30);
  uint64_t v33 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  uint64_t v34 = *((void *)v33 - 1);
  int v35 = *(unsigned int (**)(char *, uint64_t, int *))(v34 + 48);
  if (v35(v32, 1LL, v33))
  {
    uint64_t v36 = sub_100003A0C(&qword_1003518D0);
    memcpy(v31, v32, *(void *)(*(void *)(v36 - 8) + 64LL));
  }

  else
  {
    v62(v31, v32, v6);
    uint64_t v37 = v33[5];
    uint64_t v38 = &v31[v37];
    uint64_t v39 = &v32[v37];
    *(void *)uint64_t v38 = *(void *)v39;
    v38[8] = v39[8];
    uint64_t v40 = v33[6];
    uint64_t v41 = &v31[v40];
    int v42 = &v32[v40];
    *(void *)uint64_t v41 = *(void *)v42;
    v41[8] = v42[8];
    uint64_t v43 = v33[7];
    uint64_t v44 = &v31[v43];
    uint64_t v45 = &v32[v43];
    *(void *)uint64_t v44 = *(void *)v45;
    v44[8] = v45[8];
    (*(void (**)(char *, void, uint64_t, int *))(v34 + 56))(v31, 0LL, 1LL, v33);
  }

  uint64_t v46 = a3[8];
  char v47 = (char *)(a1 + v46);
  uint64_t v48 = (char *)(a2 + v46);
  if (v35(v48, 1LL, v33))
  {
    uint64_t v49 = sub_100003A0C(&qword_1003518D0);
    memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64LL));
  }

  else
  {
    v62(v47, v48, v6);
    uint64_t v50 = v33[5];
    char v51 = &v47[v50];
    uint64_t v52 = &v48[v50];
    *(void *)char v51 = *(void *)v52;
    v51[8] = v52[8];
    uint64_t v53 = v33[6];
    uint64_t v54 = &v47[v53];
    char v55 = &v48[v53];
    *(void *)uint64_t v54 = *(void *)v55;
    v54[8] = v55[8];
    uint64_t v56 = v33[7];
    char v57 = &v47[v56];
    uint64_t v58 = &v48[v56];
    *(void *)char v57 = *(void *)v58;
    v57[8] = v58[8];
    (*(void (**)(char *, void, uint64_t, int *))(v34 + 56))(v47, 0LL, 1LL, v33);
  }

  return a1;
}

uint64_t sub_10007A424(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v114 = *(void *)(v6 - 8);
  v113 = *(void (**)(uint64_t, uint64_t, uint64_t))(v114 + 40);
  v113(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = (char *)(a2 + v8);
  uint64_t v13 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0LL);
  uint64_t v14 = *((void *)v13 - 1);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v14 + 48);
  int v16 = v15(v11, 1LL, v13);
  int v17 = v15((uint64_t)v12, 1LL, v13);
  uint64_t v115 = v6;
  if (!v16)
  {
    if (!v17)
    {
      v113(v11, (uint64_t)v12, v6);
      uint64_t v30 = v13[5];
      uint64_t v31 = v11 + v30;
      uint64_t v32 = &v12[v30];
      *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
      *(_BYTE *)(v31 + 4) = v32[4];
      *(_BYTE *)(v11 + v13[6]) = v12[v13[6]];
      uint64_t v33 = v13[7];
      uint64_t v34 = v11 + v33;
      int v35 = &v12[v33];
      uint64_t v36 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
      uint64_t v37 = *(void *)(v36 - 8);
      uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
      int v39 = v38(v34, 1LL, v36);
      int v40 = v38((uint64_t)v35, 1LL, v36);
      if (v39)
      {
        if (!v40)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v114 + 32))(v34, v35, v115);
          uint64_t v41 = *(int *)(v36 + 20);
          uint64_t v42 = v34 + v41;
          uint64_t v43 = &v35[v41];
          *(void *)uint64_t v42 = *(void *)v43;
          *(_BYTE *)(v42 + 8) = v43[8];
          uint64_t v44 = *(int *)(v36 + 24);
          uint64_t v45 = v34 + v44;
          uint64_t v46 = &v35[v44];
          *(_DWORD *)uint64_t v45 = *(_DWORD *)v46;
          *(_BYTE *)(v45 + 4) = v46[4];
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v34, 0LL, 1LL, v36);
          goto LABEL_14;
        }
      }

      else
      {
        if (!v40)
        {
          v113(v34, (uint64_t)v35, v115);
          uint64_t v105 = *(int *)(v36 + 20);
          uint64_t v106 = v34 + v105;
          char v107 = &v35[v105];
          *(void *)uint64_t v106 = *(void *)v107;
          *(_BYTE *)(v106 + 8) = v107[8];
          uint64_t v108 = *(int *)(v36 + 24);
          uint64_t v109 = v34 + v108;
          v110 = &v35[v108];
          *(_DWORD *)uint64_t v109 = *(_DWORD *)v110;
          *(_BYTE *)(v109 + 4) = v110[4];
          goto LABEL_14;
        }

        sub_100004090(v34, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
      }

      size_t v27 = *(void *)(*(void *)(sub_100003A0C(&qword_1003518B0) - 8) + 64LL);
      uint64_t v28 = (void *)v34;
      size_t v29 = v35;
LABEL_8:
      memcpy(v28, v29, v27);
      goto LABEL_14;
    }

    sub_100004090(v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
LABEL_7:
    size_t v27 = *(void *)(*(void *)(sub_100003A0C(&qword_1003518B8) - 8) + 64LL);
    uint64_t v28 = (void *)v11;
    size_t v29 = v12;
    goto LABEL_8;
  }

  if (v17) {
    goto LABEL_7;
  }
  char v111 = *(void (**)(uint64_t, char *, uint64_t))(v114 + 32);
  v111(v11, v12, v6);
  uint64_t v18 = v13[5];
  uint64_t v19 = v11 + v18;
  uint64_t v20 = &v12[v18];
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = v20[4];
  *(_BYTE *)(v11 + v13[6]) = v12[v13[6]];
  uint64_t v21 = v13[7];
  __dst = (char *)(v11 + v21);
  uint64_t v22 = &v12[v21];
  uint64_t v23 = v6;
  uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v22, 1LL, v24))
  {
    uint64_t v26 = sub_100003A0C(&qword_1003518B0);
    memcpy(__dst, v22, *(void *)(*(void *)(v26 - 8) + 64LL));
  }

  else
  {
    v111((uint64_t)__dst, v22, v23);
    uint64_t v47 = *(int *)(v24 + 20);
    uint64_t v48 = &__dst[v47];
    uint64_t v49 = &v22[v47];
    *(void *)uint64_t v48 = *(void *)v49;
    v48[8] = v49[8];
    uint64_t v50 = *(int *)(v24 + 24);
    char v51 = &__dst[v50];
    uint64_t v52 = &v22[v50];
    *(_DWORD *)char v51 = *(_DWORD *)v52;
    v51[4] = v52[4];
    (*(void (**)(void))(v25 + 56))();
  }

  (*(void (**)(uint64_t, void, uint64_t, int *))(v14 + 56))(v11, 0LL, 1LL, v13);
LABEL_14:
  uint64_t v53 = a3[7];
  uint64_t v54 = (char *)(a1 + v53);
  char v55 = (char *)(a2 + v53);
  uint64_t v56 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  uint64_t v57 = *((void *)v56 - 1);
  uint64_t v58 = *(uint64_t (**)(char *, uint64_t, int *))(v57 + 48);
  int v59 = v58(v54, 1LL, v56);
  int v60 = v58(v55, 1LL, v56);
  if (v59)
  {
    if (!v60)
    {
      (*(void (**)(char *, char *, uint64_t))(v114 + 32))(v54, v55, v115);
      uint64_t v61 = v56[5];
      uint64_t v62 = &v54[v61];
      uint64_t v63 = &v55[v61];
      *(void *)uint64_t v62 = *(void *)v63;
      v62[8] = v63[8];
      uint64_t v64 = v56[6];
      int v65 = &v54[v64];
      int v66 = &v55[v64];
      *(void *)int v65 = *(void *)v66;
      v65[8] = v66[8];
      uint64_t v67 = v56[7];
      uint64_t v68 = &v54[v67];
      uint64_t v69 = &v55[v67];
      *(void *)uint64_t v68 = *(void *)v69;
      v68[8] = v69[8];
      (*(void (**)(char *, void, uint64_t, int *))(v57 + 56))(v54, 0LL, 1LL, v56);
      goto LABEL_20;
    }

    goto LABEL_19;
  }

  if (v60)
  {
    sub_100004090((uint64_t)v54, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
LABEL_19:
    uint64_t v70 = sub_100003A0C(&qword_1003518D0);
    memcpy(v54, v55, *(void *)(*(void *)(v70 - 8) + 64LL));
    goto LABEL_20;
  }

  v113((uint64_t)v54, (uint64_t)v55, v115);
  uint64_t v87 = v56[5];
  char v88 = &v54[v87];
  char v89 = &v55[v87];
  *(void *)char v88 = *(void *)v89;
  v88[8] = v89[8];
  uint64_t v90 = v56[6];
  v91 = &v54[v90];
  char v92 = &v55[v90];
  *(void *)v91 = *(void *)v92;
  v91[8] = v92[8];
  uint64_t v93 = v56[7];
  uint64_t v94 = &v54[v93];
  uint64_t v95 = &v55[v93];
  *(void *)uint64_t v94 = *(void *)v95;
  v94[8] = v95[8];
LABEL_20:
  uint64_t v71 = a3[8];
  uint64_t v72 = (char *)(a1 + v71);
  v73 = (char *)(a2 + v71);
  int v74 = v58((char *)(a1 + v71), 1LL, v56);
  int v75 = v58(v73, 1LL, v56);
  if (!v74)
  {
    if (!v75)
    {
      v113((uint64_t)v72, (uint64_t)v73, v115);
      uint64_t v96 = v56[5];
      char v97 = &v72[v96];
      uint64_t v98 = &v73[v96];
      *(void *)char v97 = *(void *)v98;
      v97[8] = v98[8];
      uint64_t v99 = v56[6];
      uint64_t v100 = &v72[v99];
      uint64_t v101 = &v73[v99];
      *(void *)uint64_t v100 = *(void *)v101;
      v100[8] = v101[8];
      uint64_t v102 = v56[7];
      char v103 = &v72[v102];
      uint64_t v104 = &v73[v102];
      *(void *)char v103 = *(void *)v104;
      v103[8] = v104[8];
      return a1;
    }

    sub_100004090((uint64_t)v72, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_25;
  }

  if (v75)
  {
LABEL_25:
    uint64_t v85 = sub_100003A0C(&qword_1003518D0);
    memcpy(v72, v73, *(void *)(*(void *)(v85 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v114 + 32))(v72, v73, v115);
  uint64_t v76 = v56[5];
  uint64_t v77 = &v72[v76];
  char v78 = &v73[v76];
  *(void *)uint64_t v77 = *(void *)v78;
  v77[8] = v78[8];
  uint64_t v79 = v56[6];
  uint64_t v80 = &v72[v79];
  uint64_t v81 = &v73[v79];
  *(void *)uint64_t v80 = *(void *)v81;
  v80[8] = v81[8];
  uint64_t v82 = v56[7];
  uint64_t v83 = &v72[v82];
  int v84 = &v73[v82];
  *(void *)uint64_t v83 = *(void *)v84;
  v83[8] = v84[8];
  (*(void (**)(char *, void, uint64_t, int *))(v57 + 56))(v72, 0LL, 1LL, v56);
  return a1;
}

uint64_t sub_10007AA98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007AAA4);
}

uint64_t sub_10007AAA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007AAB0(a1, a2, a3, &qword_1003518D0);
}

uint64_t sub_10007AAB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v13 = sub_100003A0C(&qword_1003518B8);
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v13;
      uint64_t v15 = *(int *)(a3 + 24);
    }

    else
    {
      uint64_t v10 = sub_100003A0C(a4);
      uint64_t v14 = *(void *)(v10 - 8);
      uint64_t v15 = *(int *)(a3 + 28);
    }

    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  }

  return v11(v12, a2, v10);
}

uint64_t sub_10007AB50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007AB5C);
}

uint64_t sub_10007AB5C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10007AB68(a1, a2, a3, a4, &qword_1003518D0);
}

uint64_t sub_10007AB68(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  if (*(_DWORD *)(v11 + 84) == a3)
  {
    uint64_t v12 = v10;
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    uint64_t v14 = a1;
  }

  else
  {
    uint64_t v15 = sub_100003A0C(&qword_1003518B8);
    uint64_t v16 = *(void *)(v15 - 8);
    if (*(_DWORD *)(v16 + 84) == a3)
    {
      uint64_t v12 = v15;
      uint64_t v17 = *(int *)(a4 + 24);
    }

    else
    {
      uint64_t v12 = sub_100003A0C(a5);
      uint64_t v16 = *(void *)(v12 - 8);
      uint64_t v17 = *(int *)(a4 + 28);
    }

    uint64_t v14 = a1 + v17;
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
  }

  return v13(v14, a2, a2, v12);
}

void sub_10007AC18(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v8[0] = *(void *)(v2 - 8) + 64LL;
    v8[1] = &unk_1002B9CB0;
    sub_1000119EC(319LL, &qword_100353628, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
    if (v5 <= 0x3F)
    {
      v8[2] = *(void *)(v4 - 8) + 64LL;
      sub_1000119EC( 319LL,  (unint64_t *)&unk_1003538E8,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
      if (v7 <= 0x3F)
      {
        uint64_t v9 = *(void *)(v6 - 8) + 64LL;
        uint64_t v10 = v9;
        swift_initStructMetadata(a1, 256LL, 5LL, v8, a1 + 16);
      }
    }
  }

uint64_t *sub_10007ACE0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1LL, v12))
    {
      uint64_t v14 = sub_100003A0C(&qword_1003518D0);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
    }

    uint64_t v25 = *(int *)(a3 + 24);
    uint64_t v26 = (char *)a1 + v25;
    size_t v27 = (char *)a2 + v25;
    *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
    v26[4] = v27[4];
  }

  return a1;
}

uint64_t sub_10007AE68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v8(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL))(v5, 1LL, v6);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v5, v4);
  }
  return result;
}

uint64_t sub_10007AF08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_1003518D0);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v23 = *(int *)(a3 + 24);
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = *(_BYTE *)(v25 + 4);
  return a1;
}

uint64_t sub_10007B064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v47 = a3;
  uint64_t v48 = a2;
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (char *)(a1 + v9);
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  uint64_t v13 = *((void *)v12 - 1);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, int *))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14(v11, 1LL, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      uint64_t v35 = v12[5];
      uint64_t v36 = &v10[v35];
      uint64_t v37 = &v11[v35];
      char v38 = v37[8];
      *(void *)uint64_t v36 = *(void *)v37;
      v36[8] = v38;
      uint64_t v39 = v12[6];
      int v40 = &v10[v39];
      uint64_t v41 = &v11[v39];
      char v42 = v41[8];
      *(void *)int v40 = *(void *)v41;
      v40[8] = v42;
      uint64_t v43 = v12[7];
      uint64_t v44 = &v10[v43];
      uint64_t v45 = &v11[v43];
      char v46 = v45[8];
      *(void *)uint64_t v44 = *(void *)v45;
      v44[8] = v46;
      goto LABEL_7;
    }

    sub_100004090((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_6;
  }

  if (v16)
  {
LABEL_6:
    uint64_t v29 = sub_100003A0C(&qword_1003518D0);
    memcpy(v10, v11, *(void *)(*(void *)(v29 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  uint64_t v17 = v12[5];
  uint64_t v18 = &v10[v17];
  uint64_t v19 = &v11[v17];
  char v20 = v19[8];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v20;
  uint64_t v21 = v12[6];
  uint64_t v22 = &v10[v21];
  uint64_t v23 = &v11[v21];
  char v24 = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v24;
  uint64_t v25 = v12[7];
  uint64_t v26 = &v10[v25];
  size_t v27 = &v11[v25];
  char v28 = v27[8];
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v28;
  (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
LABEL_7:
  uint64_t v30 = *(int *)(v47 + 24);
  uint64_t v31 = a1 + v30;
  uint64_t v32 = (int *)(v48 + v30);
  int v33 = *v32;
  *(_BYTE *)(v31 + 4) = *((_BYTE *)v32 + 4);
  *(_DWORD *)uint64_t v31 = v33;
  return a1;
}

uint64_t sub_10007B268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_1003518D0);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    int v15 = &v9[v14];
    int v16 = &v10[v14];
    *(void *)int v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v23 = *(int *)(a3 + 24);
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = *(_BYTE *)(v25 + 4);
  return a1;
}

uint64_t sub_10007B3C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v40 = a3;
  uint64_t v41 = a2;
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (char *)(a1 + v9);
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0LL);
  uint64_t v13 = *((void *)v12 - 1);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, int *))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14(v11, 1LL, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      uint64_t v31 = v12[5];
      uint64_t v32 = &v10[v31];
      int v33 = &v11[v31];
      *(void *)uint64_t v32 = *(void *)v33;
      v32[8] = v33[8];
      uint64_t v34 = v12[6];
      uint64_t v35 = &v10[v34];
      uint64_t v36 = &v11[v34];
      *(void *)uint64_t v35 = *(void *)v36;
      v35[8] = v36[8];
      uint64_t v37 = v12[7];
      char v38 = &v10[v37];
      uint64_t v39 = &v11[v37];
      *(void *)char v38 = *(void *)v39;
      v38[8] = v39[8];
      goto LABEL_7;
    }

    sub_100004090((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_6;
  }

  if (v16)
  {
LABEL_6:
    uint64_t v26 = sub_100003A0C(&qword_1003518D0);
    memcpy(v10, v11, *(void *)(*(void *)(v26 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
  uint64_t v17 = v12[5];
  uint64_t v18 = &v10[v17];
  uint64_t v19 = &v11[v17];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  uint64_t v20 = v12[6];
  uint64_t v21 = &v10[v20];
  uint64_t v22 = &v11[v20];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  uint64_t v23 = v12[7];
  uint64_t v24 = &v10[v23];
  uint64_t v25 = &v11[v23];
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
LABEL_7:
  uint64_t v27 = *(int *)(v40 + 24);
  uint64_t v28 = a1 + v27;
  uint64_t v29 = v41 + v27;
  *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
  *(_BYTE *)(v28 + 4) = *(_BYTE *)(v29 + 4);
  return a1;
}

uint64_t sub_10007B5C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007B5D4);
}

uint64_t sub_10007B5D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }

  else
  {
    uint64_t v8 = sub_100003A0C(&qword_1003518D0);
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_10007B64C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007B658);
}

uint64_t sub_10007B658(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v10 = sub_100003A0C(&qword_1003518D0);
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

void sub_10007B6D8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    sub_1000119EC( 319LL,  (unint64_t *)&unk_1003538E8,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    if (v5 <= 0x3F)
    {
      v6[1] = *(void *)(v4 - 8) + 64LL;
      v6[2] = &unk_1002B9CB0;
      swift_initStructMetadata(a1, 256LL, 3LL, v6, a1 + 16);
    }
  }

uint64_t sub_10007B774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007B780);
}

uint64_t sub_10007B784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007B790);
}

uint64_t *sub_10007B794(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v36 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v36 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v36);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)uint64_t v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    int v16 = (char *)a1 + v14;
    uint64_t v17 = (char *)a2 + v14;
    *(_DWORD *)int v16 = *(_DWORD *)v17;
    v16[4] = v17[4];
    uint64_t v18 = (char *)a1 + v15;
    uint64_t v19 = (char *)a2 + v15;
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    uint64_t v20 = a3[9];
    uint64_t v21 = a3[10];
    uint64_t v22 = (char *)a1 + v20;
    uint64_t v23 = (char *)a2 + v20;
    int v24 = *(_DWORD *)v23;
    v22[4] = v23[4];
    *(_DWORD *)uint64_t v22 = v24;
    uint64_t v25 = (char *)a1 + v21;
    uint64_t v26 = (char *)a2 + v21;
    v25[4] = v26[4];
    *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
    uint64_t v27 = a3[11];
    uint64_t v28 = a3[12];
    uint64_t v29 = (char *)a1 + v27;
    uint64_t v30 = (char *)a2 + v27;
    v29[4] = v30[4];
    *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
    uint64_t v31 = (char *)a1 + v28;
    uint64_t v32 = (char *)a2 + v28;
    v31[4] = v32[4];
    *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
    uint64_t v33 = a3[13];
    uint64_t v34 = (char *)a1 + v33;
    uint64_t v35 = (char *)a2 + v33;
    v34[4] = v35[4];
    *(_DWORD *)uint64_t v34 = *(_DWORD *)v35;
  }

  return a1;
}

uint64_t sub_10007B8FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  uint64_t v19 = a3[9];
  uint64_t v20 = a3[10];
  uint64_t v21 = a1 + v19;
  uint64_t v22 = (int *)(a2 + v19);
  int v23 = *v22;
  *(_BYTE *)(v21 + 4) = *((_BYTE *)v22 + 4);
  *(_DWORD *)uint64_t v21 = v23;
  uint64_t v24 = a1 + v20;
  uint64_t v25 = a2 + v20;
  *(_BYTE *)(v24 + 4) = *(_BYTE *)(v25 + 4);
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  uint64_t v26 = a3[11];
  uint64_t v27 = a3[12];
  uint64_t v28 = a1 + v26;
  uint64_t v29 = a2 + v26;
  *(_BYTE *)(v28 + 4) = *(_BYTE *)(v29 + 4);
  *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
  uint64_t v30 = a1 + v27;
  uint64_t v31 = a2 + v27;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  uint64_t v32 = a3[13];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
  return a1;
}

uint64_t sub_10007BA38(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(_BYTE *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(_BYTE *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  char v18 = *(_BYTE *)(v17 + 4);
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = v18;
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  char v22 = *(_BYTE *)(v21 + 4);
  *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = v22;
  uint64_t v23 = a3[9];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  char v26 = *(_BYTE *)(v25 + 4);
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = v26;
  uint64_t v27 = a3[10];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  char v30 = *(_BYTE *)(v29 + 4);
  *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
  *(_BYTE *)(v28 + 4) = v30;
  uint64_t v31 = a3[11];
  uint64_t v32 = a1 + v31;
  uint64_t v33 = a2 + v31;
  char v34 = *(_BYTE *)(v33 + 4);
  *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
  *(_BYTE *)(v32 + 4) = v34;
  uint64_t v35 = a3[12];
  uint64_t v36 = a1 + v35;
  uint64_t v37 = a2 + v35;
  char v38 = *(_BYTE *)(v37 + 4);
  *(_DWORD *)uint64_t v36 = *(_DWORD *)v37;
  *(_BYTE *)(v36 + 4) = v38;
  uint64_t v39 = a3[13];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  char v42 = *(_BYTE *)(v41 + 4);
  *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
  *(_BYTE *)(v40 + 4) = v42;
  return a1;
}

uint64_t sub_10007BB84(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  uint64_t v19 = a3[9];
  uint64_t v20 = a3[10];
  uint64_t v21 = a1 + v19;
  char v22 = (int *)(a2 + v19);
  int v23 = *v22;
  *(_BYTE *)(v21 + 4) = *((_BYTE *)v22 + 4);
  *(_DWORD *)uint64_t v21 = v23;
  uint64_t v24 = a1 + v20;
  uint64_t v25 = a2 + v20;
  *(_BYTE *)(v24 + 4) = *(_BYTE *)(v25 + 4);
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  uint64_t v26 = a3[11];
  uint64_t v27 = a3[12];
  uint64_t v28 = a1 + v26;
  uint64_t v29 = a2 + v26;
  *(_BYTE *)(v28 + 4) = *(_BYTE *)(v29 + 4);
  *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
  uint64_t v30 = a1 + v27;
  uint64_t v31 = a2 + v27;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  uint64_t v32 = a3[13];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
  return a1;
}

uint64_t sub_10007BCC0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  uint64_t v19 = a3[9];
  uint64_t v20 = a3[10];
  uint64_t v21 = a1 + v19;
  char v22 = (int *)(a2 + v19);
  int v23 = *v22;
  *(_BYTE *)(v21 + 4) = *((_BYTE *)v22 + 4);
  *(_DWORD *)uint64_t v21 = v23;
  uint64_t v24 = a1 + v20;
  uint64_t v25 = a2 + v20;
  *(_BYTE *)(v24 + 4) = *(_BYTE *)(v25 + 4);
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  uint64_t v26 = a3[11];
  uint64_t v27 = a3[12];
  uint64_t v28 = a1 + v26;
  uint64_t v29 = a2 + v26;
  *(_BYTE *)(v28 + 4) = *(_BYTE *)(v29 + 4);
  *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
  uint64_t v30 = a1 + v27;
  uint64_t v31 = a2 + v27;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  uint64_t v32 = a3[13];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
  return a1;
}

uint64_t sub_10007BDFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007BE08);
}

uint64_t sub_10007BE0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007BE18);
}

uint64_t sub_10007BE1C(uint64_t a1)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "\t";
    v4[2] = &unk_1002B9CB0;
    v4[3] = &unk_1002B9CB0;
    v4[4] = &unk_1002B9CB0;
    v4[5] = &unk_1002B9CB0;
    void v4[6] = &unk_1002B9CB0;
    v4[7] = &unk_1002B9CB0;
    v4[8] = &unk_1002B9CB0;
    v4[9] = &unk_1002B9CB0;
    swift_initStructMetadata(a1, 256LL, 10LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_10007BEA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007BEB0);
}

uint64_t sub_10007BEB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007BEC0);
}

char *sub_10007BEC4(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12))
    {
      uint64_t v14 = sub_100003A0C(&qword_100351858);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      uint64_t v90 = v13;
      v8(v10, v11, v7);
      uint64_t v16 = *(int *)(v12 + 20);
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
      v17[4] = v18[4];
      uint64_t v19 = *(int *)(v12 + 24);
      uint64_t v20 = v8;
      char v89 = v10;
      uint64_t v21 = &v10[v19];
      char v22 = &v11[v19];
      int v23 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
      uint64_t v24 = *((void *)v23 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v24 + 48))(v22, 1LL, v23))
      {
        uint64_t v25 = sub_100003A0C(&qword_1003517E8);
        memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64LL));
        uint64_t v8 = v20;
        uint64_t v26 = v90;
      }

      else
      {
        uint64_t v85 = v24;
        char v88 = v20;
        v20(v21, v22, v7);
        uint64_t v27 = v23[5];
        uint64_t v28 = &v21[v27];
        uint64_t v29 = &v22[v27];
        *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
        v28[4] = v29[4];
        uint64_t v30 = v23[6];
        uint64_t v86 = v21;
        __dst = &v21[v30];
        uint64_t v31 = &v22[v30];
        uint64_t v32 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
        uint64_t v33 = *(void *)(v32 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1LL, v32))
        {
          uint64_t v34 = sub_100003A0C(&qword_1003517E0);
          memcpy(__dst, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
          uint64_t v8 = v88;
          uint64_t v26 = v90;
        }

        else
        {
          uint64_t v81 = v22;
          uint64_t v35 = __dst;
          v88(__dst, v31, v7);
          uint64_t v36 = *(int *)(v32 + 20);
          uint64_t v37 = &__dst[v36];
          char v38 = &v31[v36];
          *(_DWORD *)uint64_t v37 = *(_DWORD *)v38;
          v37[4] = v38[4];
          uint64_t v83 = v32;
          uint64_t v39 = *(int *)(v32 + 24);
          uint64_t v82 = &__dst[v39];
          uint64_t v40 = &v31[v39];
          uint64_t v41 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
          uint64_t v79 = *(void *)(v41 - 8);
          uint64_t v80 = v41;
          __src = v40;
          int v42 = (*(uint64_t (**)(char *, uint64_t))(v79 + 48))(v40, 1LL);
          uint64_t v8 = v88;
          uint64_t v26 = v90;
          if (v42)
          {
            uint64_t v43 = sub_100003A0C(&qword_1003517D8);
            memcpy(v82, __src, *(void *)(*(void *)(v43 - 8) + 64LL));
          }

          else
          {
            v88(v82, __src, v7);
            uint64_t v44 = *(int *)(v80 + 20);
            uint64_t v45 = &v82[v44];
            char v46 = &__src[v44];
            *(_DWORD *)uint64_t v45 = *(_DWORD *)v46;
            v45[4] = v46[4];
            v82[*(int *)(v80 + 24)] = __src[*(int *)(v80 + 24)];
            uint64_t v35 = __dst;
            (*(void (**)(char *, void, uint64_t))(v79 + 56))(v82, 0LL, 1LL);
          }

          (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v35, 0LL, 1LL, v83);
          char v22 = v81;
        }

        uint64_t v47 = v23[7];
        uint64_t v48 = &v86[v47];
        uint64_t v49 = &v22[v47];
        *(_DWORD *)uint64_t v48 = *(_DWORD *)v49;
        v48[4] = v49[4];
        uint64_t v50 = v23[8];
        char v51 = &v86[v50];
        uint64_t v52 = &v22[v50];
        v51[4] = v52[4];
        *(_DWORD *)char v51 = *(_DWORD *)v52;
        uint64_t v53 = v23[9];
        uint64_t v54 = &v86[v53];
        char v55 = &v22[v53];
        *(_DWORD *)uint64_t v54 = *(_DWORD *)v55;
        v54[4] = v55[4];
        uint64_t v56 = v23[10];
        uint64_t v57 = &v86[v56];
        uint64_t v58 = &v22[v56];
        *(_DWORD *)uint64_t v57 = *(_DWORD *)v58;
        v57[4] = v58[4];
        uint64_t v59 = v23[11];
        int v60 = &v86[v59];
        uint64_t v61 = &v22[v59];
        *(_DWORD *)int v60 = *(_DWORD *)v61;
        v60[4] = v61[4];
        (*(void (**)(void))(v85 + 56))();
      }

      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v89, 0LL, 1LL, v12);
    }

    uint64_t v62 = a3[7];
    a1[a3[6]] = a2[a3[6]];
    a1[v62] = a2[v62];
    uint64_t v63 = a3[8];
    uint64_t v64 = &a1[v63];
    int v65 = &a2[v63];
    int v66 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0LL);
    uint64_t v67 = *((void *)v66 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v67 + 48))(v65, 1LL, v66))
    {
      uint64_t v68 = sub_100003A0C(&qword_100351900);
      memcpy(v64, v65, *(void *)(*(void *)(v68 - 8) + 64LL));
    }

    else
    {
      v8(v64, v65, v7);
      uint64_t v69 = v66[5];
      uint64_t v70 = &v64[v69];
      uint64_t v71 = &v65[v69];
      *(void *)uint64_t v70 = *(void *)v71;
      v70[8] = v71[8];
      uint64_t v72 = v66[6];
      v73 = &v64[v72];
      int v74 = &v65[v72];
      *(void *)v73 = *(void *)v74;
      v73[8] = v74[8];
      uint64_t v75 = v66[7];
      uint64_t v76 = &v64[v75];
      uint64_t v77 = &v65[v75];
      *(void *)uint64_t v76 = *(void *)v77;
      v76[8] = v77[8];
      (*(void (**)(char *, void, uint64_t, int *))(v67 + 56))(v64, 0LL, 1LL, v66);
    }
  }

  return a1;
}

uint64_t sub_10007C3BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v16(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL))(v5, 1LL, v6))
  {
    v16(v5, v4);
    uint64_t v7 = v5 + *(int *)(v6 + 24);
    uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))(v7, 1LL, v8))
    {
      v16(v7, v4);
      uint64_t v9 = v7 + *(int *)(v8 + 24);
      uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))(v9, 1LL, v10))
      {
        v16(v9, v4);
        uint64_t v11 = v9 + *(int *)(v10 + 24);
        uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
      }
    }
  }

  uint64_t v13 = a1 + *(int *)(a2 + 32);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48LL))(v13, 1LL, v14);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(uint64_t, uint64_t))v16)(v13, v4);
  }
  return result;
}

uint64_t sub_10007C564(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100351858);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    uint64_t v92 = v12;
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = *(int *)(v11 + 20);
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
    v15[4] = v16[4];
    uint64_t v17 = *(int *)(v11 + 24);
    uint64_t v18 = v7;
    v91 = v9;
    uint64_t v19 = &v9[v17];
    uint64_t v20 = &v10[v17];
    uint64_t v21 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, v21))
    {
      uint64_t v23 = sub_100003A0C(&qword_1003517E8);
      memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
      uint64_t v7 = v18;
      uint64_t v24 = v91;
      uint64_t v25 = v92;
    }

    else
    {
      uint64_t v89 = v22;
      v18((uint64_t)v19, (uint64_t)v20, v6);
      uint64_t v26 = *(int *)(v21 + 20);
      uint64_t v27 = &v19[v26];
      uint64_t v28 = &v20[v26];
      *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
      v27[4] = v28[4];
      uint64_t v87 = (int *)v21;
      char v88 = v20;
      uint64_t v29 = *(int *)(v21 + 24);
      uint64_t v90 = v19;
      uint64_t v30 = &v19[v29];
      uint64_t v31 = &v20[v29];
      uint64_t v32 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
      uint64_t v33 = *(void *)(v32 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1LL, v32))
      {
        uint64_t v34 = sub_100003A0C(&qword_1003517E0);
        memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
        uint64_t v7 = v18;
        uint64_t v24 = v91;
        uint64_t v25 = v92;
        uint64_t v36 = v87;
        uint64_t v35 = v88;
      }

      else
      {
        uint64_t v84 = v33;
        v18((uint64_t)v30, (uint64_t)v31, v6);
        uint64_t v37 = *(int *)(v32 + 20);
        char v38 = &v30[v37];
        uint64_t v39 = &v31[v37];
        *(_DWORD *)char v38 = *(_DWORD *)v39;
        v38[4] = v39[4];
        uint64_t v85 = v32;
        uint64_t v86 = v30;
        uint64_t v40 = *(int *)(v32 + 24);
        __dst = &v30[v40];
        uint64_t v41 = &v31[v40];
        uint64_t v42 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
        uint64_t v81 = *(void *)(v42 - 8);
        uint64_t v82 = v42;
        uint64_t v43 = v41;
        int v44 = (*(uint64_t (**)(char *, uint64_t))(v81 + 48))(v41, 1LL);
        uint64_t v7 = v18;
        uint64_t v24 = v91;
        uint64_t v25 = v92;
        if (v44)
        {
          uint64_t v45 = sub_100003A0C(&qword_1003517D8);
          memcpy(__dst, v43, *(void *)(*(void *)(v45 - 8) + 64LL));
        }

        else
        {
          v18((uint64_t)__dst, (uint64_t)v43, v6);
          uint64_t v46 = *(int *)(v82 + 20);
          uint64_t v47 = &__dst[v46];
          uint64_t v48 = &v43[v46];
          *(_DWORD *)uint64_t v47 = *(_DWORD *)v48;
          v47[4] = v48[4];
          __dst[*(int *)(v82 + 24)] = v43[*(int *)(v82 + 24)];
          (*(void (**)(char *, void, uint64_t))(v81 + 56))(__dst, 0LL, 1LL);
        }

        uint64_t v36 = v87;
        uint64_t v35 = v88;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v86, 0LL, 1LL, v85);
      }

      uint64_t v49 = v36[7];
      uint64_t v50 = &v90[v49];
      char v51 = &v35[v49];
      *(_DWORD *)uint64_t v50 = *(_DWORD *)v51;
      v50[4] = v51[4];
      uint64_t v52 = v36[8];
      uint64_t v53 = &v90[v52];
      uint64_t v54 = &v35[v52];
      v53[4] = v54[4];
      *(_DWORD *)uint64_t v53 = *(_DWORD *)v54;
      uint64_t v55 = v36[9];
      uint64_t v56 = &v90[v55];
      uint64_t v57 = &v35[v55];
      *(_DWORD *)uint64_t v56 = *(_DWORD *)v57;
      v56[4] = v57[4];
      uint64_t v58 = v36[10];
      uint64_t v59 = &v90[v58];
      int v60 = &v35[v58];
      *(_DWORD *)uint64_t v59 = *(_DWORD *)v60;
      v59[4] = v60[4];
      uint64_t v61 = v36[11];
      uint64_t v62 = &v90[v61];
      uint64_t v63 = &v35[v61];
      *(_DWORD *)uint64_t v62 = *(_DWORD *)v63;
      v62[4] = v63[4];
      (*(void (**)(void))(v89 + 56))();
    }

    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v24, 0LL, 1LL, v11);
  }

  uint64_t v64 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v64) = *(_BYTE *)(a2 + v64);
  uint64_t v65 = a3[8];
  int v66 = (char *)(a1 + v65);
  uint64_t v67 = (char *)(a2 + v65);
  uint64_t v68 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0LL);
  uint64_t v69 = *((void *)v68 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v69 + 48))(v67, 1LL, v68))
  {
    uint64_t v70 = sub_100003A0C(&qword_100351900);
    memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v66, (uint64_t)v67, v6);
    uint64_t v71 = v68[5];
    uint64_t v72 = &v66[v71];
    v73 = &v67[v71];
    *(void *)uint64_t v72 = *(void *)v73;
    v72[8] = v73[8];
    uint64_t v74 = v68[6];
    uint64_t v75 = &v66[v74];
    uint64_t v76 = &v67[v74];
    *(void *)uint64_t v75 = *(void *)v76;
    v75[8] = v76[8];
    uint64_t v77 = v68[7];
    char v78 = &v66[v77];
    uint64_t v79 = &v67[v77];
    *(void *)char v78 = *(void *)v79;
    v78[8] = v79[8];
    (*(void (**)(char *, void, uint64_t, int *))(v69 + 56))(v66, 0LL, 1LL, v68);
  }

  return a1;
}

uint64_t sub_10007CA1C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v253 = *(void *)(v6 - 8);
  v252 = *(void (**)(uint64_t, uint64_t, uint64_t))(v253 + 24);
  v252(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12((uint64_t)v9, 1LL, v10);
  if (!v13)
  {
    if (v14)
    {
      sub_100004090(v8, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
      goto LABEL_7;
    }

    v252(v8, (uint64_t)v9, v6);
    uint64_t v28 = *(int *)(v10 + 20);
    uint64_t v29 = v8 + v28;
    uint64_t v30 = &v9[v28];
    char v31 = v30[4];
    *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
    *(_BYTE *)(v29 + 4) = v31;
    uint64_t v32 = *(int *)(v10 + 24);
    uint64_t v33 = v8 + v32;
    uint64_t v34 = &v9[v32];
    uint64_t v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
    uint64_t v36 = *((void *)v35 - 1);
    uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v36 + 48);
    int v38 = v37(v33, 1LL, v35);
    int v39 = v37((uint64_t)v34, 1LL, v35);
    if (v38)
    {
      if (!v39)
      {
        v246 = *(void (**)(uint64_t, char *, uint64_t))(v253 + 16);
        v246(v33, v34, v6);
        uint64_t v40 = v35[5];
        uint64_t v41 = v33 + v40;
        uint64_t v42 = &v34[v40];
        char v43 = v42[4];
        *(_DWORD *)uint64_t v41 = *(_DWORD *)v42;
        *(_BYTE *)(v41 + 4) = v43;
        uint64_t v44 = v35[6];
        uint64_t v45 = v34;
        uint64_t v46 = (char *)(v33 + v44);
        uint64_t v242 = v6;
        v249 = v45;
        uint64_t v47 = &v45[v44];
        uint64_t v48 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
        uint64_t v49 = *(void *)(v48 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1LL, v48))
        {
          uint64_t v50 = sub_100003A0C(&qword_1003517E0);
          memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64LL));
          uint64_t v6 = v242;
          char v51 = v249;
        }

        else
        {
          uint64_t v236 = v49;
          v246((uint64_t)v46, v47, v242);
          uint64_t v84 = *(int *)(v48 + 20);
          uint64_t v85 = &v46[v84];
          uint64_t v86 = &v47[v84];
          char v87 = v86[4];
          *(_DWORD *)uint64_t v85 = *(_DWORD *)v86;
          v85[4] = v87;
          uint64_t v88 = *(int *)(v48 + 24);
          __dsta = v46;
          __srca = &v46[v88];
          uint64_t v89 = &v47[v88];
          uint64_t v90 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
          uint64_t v232 = *(void *)(v90 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v232 + 48))(v89, 1LL, v90))
          {
            uint64_t v91 = sub_100003A0C(&qword_1003517D8);
            memcpy(__srca, v89, *(void *)(*(void *)(v91 - 8) + 64LL));
          }

          else
          {
            v246((uint64_t)__srca, v89, v242);
            uint64_t v160 = *(int *)(v90 + 20);
            v161 = &__srca[v160];
            v162 = &v89[v160];
            int v163 = *(_DWORD *)v162;
            v161[4] = v162[4];
            *(_DWORD *)v161 = v163;
            __srca[*(int *)(v90 + 24)] = v89[*(int *)(v90 + 24)];
            (*(void (**)(char *, void, uint64_t, uint64_t))(v232 + 56))(__srca, 0LL, 1LL, v90);
          }

          char v51 = v249;
          (*(void (**)(void *, void, uint64_t, uint64_t))(v236 + 56))(__dsta, 0LL, 1LL, v48);
          uint64_t v6 = v242;
        }

        uint64_t v164 = v35[7];
        uint64_t v165 = v33 + v164;
        v166 = &v51[v164];
        int v167 = *(_DWORD *)v166;
        *(_BYTE *)(v165 + 4) = v166[4];
        *(_DWORD *)uint64_t v165 = v167;
        uint64_t v168 = v35[8];
        uint64_t v169 = v33 + v168;
        v170 = &v51[v168];
        int v171 = *(_DWORD *)v170;
        *(_BYTE *)(v169 + 4) = v170[4];
        *(_DWORD *)uint64_t v169 = v171;
        uint64_t v172 = v35[9];
        uint64_t v173 = v33 + v172;
        v174 = &v51[v172];
        int v175 = *(_DWORD *)v174;
        *(_BYTE *)(v173 + 4) = v174[4];
        *(_DWORD *)uint64_t v173 = v175;
        uint64_t v176 = v35[10];
        uint64_t v177 = v33 + v176;
        v178 = &v51[v176];
        int v179 = *(_DWORD *)v178;
        *(_BYTE *)(v177 + 4) = v178[4];
        *(_DWORD *)uint64_t v177 = v179;
        uint64_t v180 = v35[11];
        uint64_t v181 = v33 + v180;
        v182 = &v51[v180];
        int v183 = *(_DWORD *)v182;
        *(_BYTE *)(v181 + 4) = v182[4];
        *(_DWORD *)uint64_t v181 = v183;
        (*(void (**)(uint64_t, void, uint64_t, int *))(v36 + 56))(v33, 0LL, 1LL, v35);
        goto LABEL_29;
      }

      goto LABEL_17;
    }

    if (v39)
    {
      sub_100004090(v33, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
LABEL_17:
      size_t v25 = *(void *)(*(void *)(sub_100003A0C(&qword_1003517E8) - 8) + 64LL);
      uint64_t v26 = (void *)v33;
      uint64_t v27 = v34;
      goto LABEL_8;
    }

    uint64_t v244 = v6;
    v252(v33, (uint64_t)v34, v6);
    uint64_t v72 = v35[5];
    uint64_t v73 = v33 + v72;
    uint64_t v74 = &v34[v72];
    char v75 = v74[4];
    *(_DWORD *)uint64_t v73 = *(_DWORD *)v74;
    *(_BYTE *)(v73 + 4) = v75;
    uint64_t v76 = v35[6];
    uint64_t v77 = v33 + v76;
    char v78 = &v34[v76];
    uint64_t v79 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
    uint64_t v247 = *(void *)(v79 - 8);
    uint64_t v250 = v77;
    uint64_t v80 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v247 + 48);
    LODWORD(v77) = v80(v77, 1LL, v79);
    int v81 = v80((uint64_t)v78, 1LL, v79);
    if ((_DWORD)v77)
    {
      if (!v81)
      {
        v237 = *(void (**)(uint64_t, char *, uint64_t))(v253 + 16);
        v237(v250, v78, v244);
        uint64_t v151 = *(int *)(v79 + 20);
        uint64_t v152 = v250 + v151;
        v153 = &v78[v151];
        char v154 = v153[4];
        *(_DWORD *)uint64_t v152 = *(_DWORD *)v153;
        *(_BYTE *)(v152 + 4) = v154;
        uint64_t v155 = *(int *)(v79 + 24);
        __dstb = (char *)(v250 + v155);
        v156 = &v78[v155];
        uint64_t v157 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
        uint64_t v158 = *(void *)(v157 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v158 + 48))(v156, 1LL, v157))
        {
          uint64_t v159 = sub_100003A0C(&qword_1003517D8);
          memcpy(__dstb, v156, *(void *)(*(void *)(v159 - 8) + 64LL));
        }

        else
        {
          v237((uint64_t)__dstb, v156, v244);
          uint64_t v194 = *(int *)(v157 + 20);
          v195 = &__dstb[v194];
          v196 = &v156[v194];
          int v197 = *(_DWORD *)v196;
          v195[4] = v196[4];
          *(_DWORD *)v195 = v197;
          __dstb[*(int *)(v157 + 24)] = v156[*(int *)(v157 + 24)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v158 + 56))(__dstb, 0LL, 1LL, v157);
        }

        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v247 + 56))(v250, 0LL, 1LL, v79);
        goto LABEL_51;
      }

      size_t v82 = *(void *)(*(void *)(sub_100003A0C(&qword_1003517E0) - 8) + 64LL);
      uint64_t v83 = (void *)v250;
    }

    else
    {
      if (!v81)
      {
        v252(v250, (uint64_t)v78, v244);
        uint64_t v184 = *(int *)(v79 + 20);
        uint64_t v185 = v250 + v184;
        v186 = &v78[v184];
        char v187 = v186[4];
        *(_DWORD *)uint64_t v185 = *(_DWORD *)v186;
        *(_BYTE *)(v185 + 4) = v187;
        uint64_t v188 = *(int *)(v79 + 24);
        uint64_t v189 = v250 + v188;
        v190 = &v78[v188];
        uint64_t v191 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
        __dstc = *(void **)(v191 - 8);
        v192 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))__dstc[6];
        uint64_t v251 = v189;
        LODWORD(v189) = v192(v189, 1LL, v191);
        int v193 = v192((uint64_t)v190, 1LL, v191);
        if ((_DWORD)v189)
        {
          if (!v193)
          {
            (*(void (**)(uint64_t, char *, uint64_t))(v253 + 16))(v251, v190, v244);
            uint64_t v218 = *(int *)(v191 + 20);
            uint64_t v219 = v251 + v218;
            v220 = &v190[v218];
            int v221 = *(_DWORD *)v220;
            *(_BYTE *)(v219 + 4) = v220[4];
            *(_DWORD *)uint64_t v219 = v221;
            *(_BYTE *)(v251 + *(int *)(v191 + 24)) = v190[*(int *)(v191 + 24)];
            uint64_t v222 = v191;
            uint64_t v6 = v244;
            ((void (*)(uint64_t, void, uint64_t, uint64_t))__dstc[7])(v251, 0LL, 1LL, v222);
            goto LABEL_52;
          }

          size_t v82 = *(void *)(*(void *)(sub_100003A0C(&qword_1003517D8) - 8) + 64LL);
          v150 = v190;
          uint64_t v83 = (void *)v251;
        }

        else
        {
          if (!v193)
          {
            v252(v251, (uint64_t)v190, v244);
            uint64_t v223 = *(int *)(v191 + 20);
            uint64_t v224 = v251 + v223;
            v225 = &v190[v223];
            int v226 = *(_DWORD *)v225;
            *(_BYTE *)(v224 + 4) = v225[4];
            *(_DWORD *)uint64_t v224 = v226;
            uint64_t v227 = *(int *)(v191 + 24);
            uint64_t v6 = v244;
            *(_BYTE *)(v251 + v227) = v190[v227];
            goto LABEL_52;
          }

          sub_100004090(v251, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
          size_t v82 = *(void *)(*(void *)(sub_100003A0C(&qword_1003517D8) - 8) + 64LL);
          uint64_t v83 = (void *)v251;
          v150 = v190;
        }

        goto LABEL_40;
      }

      sub_100004090(v250, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      size_t v82 = *(void *)(*(void *)(sub_100003A0C(&qword_1003517E0) - 8) + 64LL);
      uint64_t v83 = (void *)v250;
    }

    v150 = v78;
LABEL_40:
    memcpy(v83, v150, v82);
LABEL_51:
    uint64_t v6 = v244;
LABEL_52:
    uint64_t v198 = v35[7];
    uint64_t v199 = v33 + v198;
    v200 = &v34[v198];
    int v201 = *(_DWORD *)v200;
    *(_BYTE *)(v199 + 4) = v200[4];
    *(_DWORD *)uint64_t v199 = v201;
    uint64_t v202 = v35[8];
    uint64_t v203 = v33 + v202;
    v204 = &v34[v202];
    int v205 = *(_DWORD *)v204;
    *(_BYTE *)(v203 + 4) = v204[4];
    *(_DWORD *)uint64_t v203 = v205;
    uint64_t v206 = v35[9];
    uint64_t v207 = v33 + v206;
    v208 = &v34[v206];
    int v209 = *(_DWORD *)v208;
    *(_BYTE *)(v207 + 4) = v208[4];
    *(_DWORD *)uint64_t v207 = v209;
    uint64_t v210 = v35[10];
    uint64_t v211 = v33 + v210;
    v212 = &v34[v210];
    int v213 = *(_DWORD *)v212;
    *(_BYTE *)(v211 + 4) = v212[4];
    *(_DWORD *)uint64_t v211 = v213;
    uint64_t v214 = v35[11];
    uint64_t v215 = v33 + v214;
    v216 = &v34[v214];
    int v217 = *(_DWORD *)v216;
    *(_BYTE *)(v215 + 4) = v216[4];
    *(_DWORD *)uint64_t v215 = v217;
    goto LABEL_29;
  }

  if (v14)
  {
LABEL_7:
    size_t v25 = *(void *)(*(void *)(sub_100003A0C(&qword_100351858) - 8) + 64LL);
    uint64_t v26 = (void *)v8;
    uint64_t v27 = v9;
LABEL_8:
    memcpy(v26, v27, v25);
    goto LABEL_29;
  }

  v245 = *(void (**)(uint64_t, char *, uint64_t))(v253 + 16);
  v248 = a3;
  v245(v8, v9, v6);
  uint64_t v15 = *(int *)(v10 + 20);
  uint64_t v16 = v8 + v15;
  uint64_t v17 = &v9[v15];
  char v18 = v17[4];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = v18;
  uint64_t v19 = *(int *)(v10 + 24);
  uint64_t v20 = (char *)(v8 + v19);
  uint64_t v21 = &v9[v19];
  uint64_t v22 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
  uint64_t v23 = *((void *)v22 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v23 + 48))(v21, 1LL, v22))
  {
    uint64_t v24 = sub_100003A0C(&qword_1003517E8);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
    a3 = v248;
  }

  else
  {
    uint64_t v235 = v23;
    v245((uint64_t)v20, v21, v6);
    uint64_t v52 = v22[5];
    uint64_t v53 = &v20[v52];
    uint64_t v54 = &v21[v52];
    char v55 = v54[4];
    *(_DWORD *)uint64_t v53 = *(_DWORD *)v54;
    v53[4] = v55;
    uint64_t v56 = v22[6];
    __dst = &v20[v56];
    uint64_t v243 = v6;
    v230 = v21;
    uint64_t v57 = &v21[v56];
    uint64_t v58 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
    uint64_t v59 = *(void *)(v58 - 8);
    v231 = v20;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1LL, v58))
    {
      uint64_t v60 = sub_100003A0C(&qword_1003517E0);
      memcpy(__dst, v57, *(void *)(*(void *)(v60 - 8) + 64LL));
      uint64_t v6 = v243;
      a3 = v248;
      uint64_t v62 = v230;
      uint64_t v61 = v231;
    }

    else
    {
      uint64_t v228 = v59;
      v245((uint64_t)__dst, v57, v243);
      uint64_t v63 = *(int *)(v58 + 20);
      uint64_t v64 = &__dst[v63];
      uint64_t v65 = &v57[v63];
      char v66 = v65[4];
      *(_DWORD *)uint64_t v64 = *(_DWORD *)v65;
      v64[4] = v66;
      uint64_t v229 = v58;
      uint64_t v67 = *(int *)(v58 + 24);
      uint64_t v68 = &__dst[v67];
      uint64_t v69 = &v57[v67];
      uint64_t v70 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
      __src = *(void (***)(void *, void, uint64_t, uint64_t))(v70 - 8);
      a3 = v248;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))__src[6])(v69, 1LL, v70))
      {
        uint64_t v71 = sub_100003A0C(&qword_1003517D8);
        memcpy(v68, v69, *(void *)(*(void *)(v71 - 8) + 64LL));
      }

      else
      {
        v245((uint64_t)v68, v69, v243);
        uint64_t v92 = *(int *)(v70 + 20);
        uint64_t v93 = &v68[v92];
        uint64_t v94 = &v69[v92];
        int v95 = *(_DWORD *)v94;
        v93[4] = v94[4];
        *(_DWORD *)uint64_t v93 = v95;
        v68[*(int *)(v70 + 24)] = v69[*(int *)(v70 + 24)];
        __src[7](v68, 0LL, 1LL, v70);
      }

      uint64_t v62 = v230;
      uint64_t v61 = v231;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v228 + 56))(__dst, 0LL, 1LL, v229);
      uint64_t v6 = v243;
    }

    uint64_t v96 = v22[7];
    char v97 = &v61[v96];
    uint64_t v98 = &v62[v96];
    int v99 = *(_DWORD *)v98;
    v97[4] = v98[4];
    *(_DWORD *)char v97 = v99;
    uint64_t v100 = v22[8];
    uint64_t v101 = &v61[v100];
    uint64_t v102 = &v62[v100];
    int v103 = *(_DWORD *)v102;
    v101[4] = v102[4];
    *(_DWORD *)uint64_t v101 = v103;
    uint64_t v104 = v22[9];
    uint64_t v105 = &v61[v104];
    uint64_t v106 = &v62[v104];
    int v107 = *(_DWORD *)v106;
    v105[4] = v106[4];
    *(_DWORD *)uint64_t v105 = v107;
    uint64_t v108 = v22[10];
    uint64_t v109 = &v61[v108];
    v110 = &v62[v108];
    int v111 = *(_DWORD *)v110;
    v109[4] = v110[4];
    *(_DWORD *)uint64_t v109 = v111;
    uint64_t v112 = v22[11];
    v113 = &v61[v112];
    uint64_t v114 = &v62[v112];
    int v115 = *(_DWORD *)v114;
    v113[4] = v114[4];
    *(_DWORD *)v113 = v115;
    (*(void (**)(char *, void, uint64_t, int *))(v235 + 56))(v61, 0LL, 1LL, v22);
  }

  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
LABEL_29:
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  uint64_t v116 = a3[8];
  v117 = (char *)(a1 + v116);
  v118 = (char *)(a2 + v116);
  char v119 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0LL);
  uint64_t v120 = *((void *)v119 - 1);
  v121 = *(uint64_t (**)(char *, uint64_t, int *))(v120 + 48);
  int v122 = v121(v117, 1LL, v119);
  int v123 = v121(v118, 1LL, v119);
  if (!v122)
  {
    if (!v123)
    {
      v252((uint64_t)v117, (uint64_t)v118, v6);
      uint64_t v138 = v119[5];
      v139 = &v117[v138];
      v140 = &v118[v138];
      char v141 = v140[8];
      *(void *)v139 = *(void *)v140;
      v139[8] = v141;
      uint64_t v142 = v119[6];
      v143 = &v117[v142];
      v144 = &v118[v142];
      char v145 = v144[8];
      *(void *)v143 = *(void *)v144;
      v143[8] = v145;
      uint64_t v146 = v119[7];
      v147 = &v117[v146];
      v148 = &v118[v146];
      char v149 = v148[8];
      *(void *)v147 = *(void *)v148;
      v147[8] = v149;
      return a1;
    }

    sub_100004090((uint64_t)v117, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
    goto LABEL_34;
  }

  if (v123)
  {
LABEL_34:
    uint64_t v136 = sub_100003A0C(&qword_100351900);
    memcpy(v117, v118, *(void *)(*(void *)(v136 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v253 + 16))(v117, v118, v6);
  uint64_t v124 = v119[5];
  uint64_t v125 = &v117[v124];
  v126 = &v118[v124];
  char v127 = v126[8];
  *(void *)uint64_t v125 = *(void *)v126;
  v125[8] = v127;
  uint64_t v128 = v119[6];
  uint64_t v129 = &v117[v128];
  v130 = &v118[v128];
  char v131 = v130[8];
  *(void *)uint64_t v129 = *(void *)v130;
  v129[8] = v131;
  uint64_t v132 = v119[7];
  v133 = &v117[v132];
  v134 = &v118[v132];
  char v135 = v134[8];
  *(void *)v133 = *(void *)v134;
  v133[8] = v135;
  (*(void (**)(char *, void, uint64_t, int *))(v120 + 56))(v117, 0LL, 1LL, v119);
  return a1;
}

uint64_t sub_10007D6CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100351858);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    uint64_t v92 = v12;
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = *(int *)(v11 + 20);
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
    v15[4] = v16[4];
    uint64_t v17 = *(int *)(v11 + 24);
    char v18 = v7;
    uint64_t v91 = v9;
    uint64_t v19 = &v9[v17];
    uint64_t v20 = &v10[v17];
    uint64_t v21 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, v21))
    {
      uint64_t v23 = sub_100003A0C(&qword_1003517E8);
      memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
      uint64_t v7 = v18;
      uint64_t v24 = v91;
      uint64_t v25 = v92;
    }

    else
    {
      uint64_t v89 = v22;
      v18((uint64_t)v19, (uint64_t)v20, v6);
      uint64_t v26 = *(int *)(v21 + 20);
      uint64_t v27 = &v19[v26];
      uint64_t v28 = &v20[v26];
      *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
      v27[4] = v28[4];
      char v87 = (int *)v21;
      uint64_t v88 = v20;
      uint64_t v29 = *(int *)(v21 + 24);
      uint64_t v90 = v19;
      uint64_t v30 = &v19[v29];
      char v31 = &v20[v29];
      uint64_t v32 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
      uint64_t v33 = *(void *)(v32 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1LL, v32))
      {
        uint64_t v34 = sub_100003A0C(&qword_1003517E0);
        memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
        uint64_t v7 = v18;
        uint64_t v24 = v91;
        uint64_t v25 = v92;
        uint64_t v36 = v87;
        uint64_t v35 = v88;
      }

      else
      {
        uint64_t v84 = v33;
        v18((uint64_t)v30, (uint64_t)v31, v6);
        uint64_t v37 = *(int *)(v32 + 20);
        int v38 = &v30[v37];
        int v39 = &v31[v37];
        *(_DWORD *)int v38 = *(_DWORD *)v39;
        v38[4] = v39[4];
        uint64_t v85 = v32;
        uint64_t v86 = v30;
        uint64_t v40 = *(int *)(v32 + 24);
        __dst = &v30[v40];
        uint64_t v41 = &v31[v40];
        uint64_t v42 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
        uint64_t v81 = *(void *)(v42 - 8);
        uint64_t v82 = v42;
        char v43 = v41;
        int v44 = (*(uint64_t (**)(char *, uint64_t))(v81 + 48))(v41, 1LL);
        uint64_t v7 = v18;
        uint64_t v24 = v91;
        uint64_t v25 = v92;
        if (v44)
        {
          uint64_t v45 = sub_100003A0C(&qword_1003517D8);
          memcpy(__dst, v43, *(void *)(*(void *)(v45 - 8) + 64LL));
        }

        else
        {
          v18((uint64_t)__dst, (uint64_t)v43, v6);
          uint64_t v46 = *(int *)(v82 + 20);
          uint64_t v47 = &__dst[v46];
          uint64_t v48 = &v43[v46];
          *(_DWORD *)uint64_t v47 = *(_DWORD *)v48;
          v47[4] = v48[4];
          __dst[*(int *)(v82 + 24)] = v43[*(int *)(v82 + 24)];
          (*(void (**)(char *, void, uint64_t))(v81 + 56))(__dst, 0LL, 1LL);
        }

        uint64_t v36 = v87;
        uint64_t v35 = v88;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v86, 0LL, 1LL, v85);
      }

      uint64_t v49 = v36[7];
      uint64_t v50 = &v90[v49];
      char v51 = &v35[v49];
      *(_DWORD *)uint64_t v50 = *(_DWORD *)v51;
      v50[4] = v51[4];
      uint64_t v52 = v36[8];
      uint64_t v53 = &v90[v52];
      uint64_t v54 = &v35[v52];
      v53[4] = v54[4];
      *(_DWORD *)uint64_t v53 = *(_DWORD *)v54;
      uint64_t v55 = v36[9];
      uint64_t v56 = &v90[v55];
      uint64_t v57 = &v35[v55];
      *(_DWORD *)uint64_t v56 = *(_DWORD *)v57;
      v56[4] = v57[4];
      uint64_t v58 = v36[10];
      uint64_t v59 = &v90[v58];
      uint64_t v60 = &v35[v58];
      *(_DWORD *)uint64_t v59 = *(_DWORD *)v60;
      v59[4] = v60[4];
      uint64_t v61 = v36[11];
      uint64_t v62 = &v90[v61];
      uint64_t v63 = &v35[v61];
      *(_DWORD *)uint64_t v62 = *(_DWORD *)v63;
      v62[4] = v63[4];
      (*(void (**)(void))(v89 + 56))();
    }

    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v24, 0LL, 1LL, v11);
  }

  uint64_t v64 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v64) = *(_BYTE *)(a2 + v64);
  uint64_t v65 = a3[8];
  char v66 = (char *)(a1 + v65);
  uint64_t v67 = (char *)(a2 + v65);
  uint64_t v68 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0LL);
  uint64_t v69 = *((void *)v68 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v69 + 48))(v67, 1LL, v68))
  {
    uint64_t v70 = sub_100003A0C(&qword_100351900);
    memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v66, (uint64_t)v67, v6);
    uint64_t v71 = v68[5];
    uint64_t v72 = &v66[v71];
    uint64_t v73 = &v67[v71];
    *(void *)uint64_t v72 = *(void *)v73;
    v72[8] = v73[8];
    uint64_t v74 = v68[6];
    char v75 = &v66[v74];
    uint64_t v76 = &v67[v74];
    *(void *)char v75 = *(void *)v76;
    v75[8] = v76[8];
    uint64_t v77 = v68[7];
    char v78 = &v66[v77];
    uint64_t v79 = &v67[v77];
    *(void *)char v78 = *(void *)v79;
    v78[8] = v79[8];
    (*(void (**)(char *, void, uint64_t, int *))(v69 + 56))(v66, 0LL, 1LL, v68);
  }

  return a1;
}

uint64_t sub_10007DB84(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v219 = *(void *)(v6 - 8);
  uint64_t v218 = *(void (**)(uint64_t, uint64_t, uint64_t))(v219 + 40);
  v218(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12((uint64_t)v9, 1LL, v10);
  if (!v13)
  {
    if (v14)
    {
      sub_100004090(v8, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
      goto LABEL_7;
    }

    v218(v8, (uint64_t)v9, v6);
    uint64_t v27 = *(int *)(v10 + 20);
    uint64_t v28 = v8 + v27;
    uint64_t v29 = &v9[v27];
    *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
    *(_BYTE *)(v28 + 4) = v29[4];
    uint64_t v30 = *(int *)(v10 + 24);
    uint64_t v31 = v8 + v30;
    uint64_t v32 = &v9[v30];
    uint64_t v33 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
    uint64_t v34 = *((void *)v33 - 1);
    uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v34 + 48);
    int v36 = v35(v31, 1LL, v33);
    int v37 = v35((uint64_t)v32, 1LL, v33);
    if (v36)
    {
      if (!v37)
      {
        v212 = *(void (**)(uint64_t, char *, uint64_t))(v219 + 32);
        v212(v31, v32, v6);
        uint64_t v38 = v33[5];
        uint64_t v39 = v31 + v38;
        uint64_t v40 = &v32[v38];
        *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
        *(_BYTE *)(v39 + 4) = v40[4];
        uint64_t v41 = v33[6];
        uint64_t v42 = v32;
        char v43 = (char *)(v31 + v41);
        uint64_t v208 = v6;
        uint64_t v215 = v42;
        int v44 = &v42[v41];
        uint64_t v45 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
        uint64_t v46 = *(void *)(v45 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1LL, v45))
        {
          uint64_t v47 = sub_100003A0C(&qword_1003517E0);
          memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64LL));
          uint64_t v6 = v208;
          uint64_t v48 = v215;
        }

        else
        {
          uint64_t v202 = v46;
          v212((uint64_t)v43, v44, v208);
          uint64_t v78 = *(int *)(v45 + 20);
          uint64_t v79 = &v43[v78];
          uint64_t v80 = &v44[v78];
          *(_DWORD *)uint64_t v79 = *(_DWORD *)v80;
          v79[4] = v80[4];
          uint64_t v81 = *(int *)(v45 + 24);
          __dsta = v43;
          __srca = &v43[v81];
          uint64_t v82 = &v44[v81];
          uint64_t v83 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
          uint64_t v198 = *(void *)(v83 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v198 + 48))(v82, 1LL, v83))
          {
            uint64_t v84 = sub_100003A0C(&qword_1003517D8);
            memcpy(__srca, v82, *(void *)(*(void *)(v84 - 8) + 64LL));
          }

          else
          {
            v212((uint64_t)__srca, v82, v208);
            uint64_t v141 = *(int *)(v83 + 20);
            uint64_t v142 = &__srca[v141];
            v143 = &v82[v141];
            *(_DWORD *)uint64_t v142 = *(_DWORD *)v143;
            v142[4] = v143[4];
            __srca[*(int *)(v83 + 24)] = v82[*(int *)(v83 + 24)];
            (*(void (**)(char *, void, uint64_t, uint64_t))(v198 + 56))(__srca, 0LL, 1LL, v83);
          }

          uint64_t v48 = v215;
          (*(void (**)(void *, void, uint64_t, uint64_t))(v202 + 56))(__dsta, 0LL, 1LL, v45);
          uint64_t v6 = v208;
        }

        uint64_t v144 = v33[7];
        uint64_t v145 = v31 + v144;
        uint64_t v146 = &v48[v144];
        *(_DWORD *)uint64_t v145 = *(_DWORD *)v146;
        *(_BYTE *)(v145 + 4) = v146[4];
        uint64_t v147 = v33[8];
        uint64_t v148 = v31 + v147;
        char v149 = &v48[v147];
        *(_BYTE *)(v148 + 4) = v149[4];
        *(_DWORD *)uint64_t v148 = *(_DWORD *)v149;
        uint64_t v150 = v33[9];
        uint64_t v151 = v31 + v150;
        uint64_t v152 = &v48[v150];
        *(_DWORD *)uint64_t v151 = *(_DWORD *)v152;
        *(_BYTE *)(v151 + 4) = v152[4];
        uint64_t v153 = v33[10];
        uint64_t v154 = v31 + v153;
        uint64_t v155 = &v48[v153];
        *(_DWORD *)uint64_t v154 = *(_DWORD *)v155;
        *(_BYTE *)(v154 + 4) = v155[4];
        uint64_t v156 = v33[11];
        uint64_t v157 = v31 + v156;
        uint64_t v158 = &v48[v156];
        *(_DWORD *)uint64_t v157 = *(_DWORD *)v158;
        *(_BYTE *)(v157 + 4) = v158[4];
        (*(void (**)(uint64_t, void, uint64_t, int *))(v34 + 56))(v31, 0LL, 1LL, v33);
        goto LABEL_29;
      }

      goto LABEL_17;
    }

    if (v37)
    {
      sub_100004090(v31, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
LABEL_17:
      size_t v24 = *(void *)(*(void *)(sub_100003A0C(&qword_1003517E8) - 8) + 64LL);
      uint64_t v25 = (void *)v31;
      uint64_t v26 = v32;
      goto LABEL_8;
    }

    uint64_t v210 = v6;
    v218(v31, (uint64_t)v32, v6);
    uint64_t v67 = v33[5];
    uint64_t v68 = v31 + v67;
    uint64_t v69 = &v32[v67];
    *(_DWORD *)uint64_t v68 = *(_DWORD *)v69;
    *(_BYTE *)(v68 + 4) = v69[4];
    uint64_t v70 = v33[6];
    uint64_t v71 = v31 + v70;
    uint64_t v72 = &v32[v70];
    uint64_t v73 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
    uint64_t v213 = *(void *)(v73 - 8);
    uint64_t v216 = v71;
    uint64_t v74 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v213 + 48);
    LODWORD(v71) = v74(v71, 1LL, v73);
    int v75 = v74((uint64_t)v72, 1LL, v73);
    if ((_DWORD)v71)
    {
      if (!v75)
      {
        uint64_t v203 = *(void (**)(uint64_t, char *, uint64_t))(v219 + 32);
        v203(v216, v72, v210);
        uint64_t v133 = *(int *)(v73 + 20);
        uint64_t v134 = v216 + v133;
        char v135 = &v72[v133];
        *(_DWORD *)uint64_t v134 = *(_DWORD *)v135;
        *(_BYTE *)(v134 + 4) = v135[4];
        uint64_t v136 = *(int *)(v73 + 24);
        __dstb = (char *)(v216 + v136);
        v137 = &v72[v136];
        uint64_t v138 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
        uint64_t v139 = *(void *)(v138 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v139 + 48))(v137, 1LL, v138))
        {
          uint64_t v140 = sub_100003A0C(&qword_1003517D8);
          memcpy(__dstb, v137, *(void *)(*(void *)(v140 - 8) + 64LL));
        }

        else
        {
          v203((uint64_t)__dstb, v137, v210);
          uint64_t v168 = *(int *)(v138 + 20);
          uint64_t v169 = &__dstb[v168];
          v170 = &v137[v168];
          *(_DWORD *)uint64_t v169 = *(_DWORD *)v170;
          v169[4] = v170[4];
          __dstb[*(int *)(v138 + 24)] = v137[*(int *)(v138 + 24)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v139 + 56))(__dstb, 0LL, 1LL, v138);
        }

        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v213 + 56))(v216, 0LL, 1LL, v73);
        goto LABEL_51;
      }

      size_t v76 = *(void *)(*(void *)(sub_100003A0C(&qword_1003517E0) - 8) + 64LL);
      uint64_t v77 = (void *)v216;
    }

    else
    {
      if (!v75)
      {
        v218(v216, (uint64_t)v72, v210);
        uint64_t v159 = *(int *)(v73 + 20);
        uint64_t v160 = v216 + v159;
        v161 = &v72[v159];
        *(_DWORD *)uint64_t v160 = *(_DWORD *)v161;
        *(_BYTE *)(v160 + 4) = v161[4];
        uint64_t v162 = *(int *)(v73 + 24);
        uint64_t v163 = v216 + v162;
        uint64_t v164 = &v72[v162];
        uint64_t v165 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
        __dstc = *(void **)(v165 - 8);
        v166 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))__dstc[6];
        uint64_t v217 = v163;
        LODWORD(v163) = v166(v163, 1LL, v165);
        int v167 = v166((uint64_t)v164, 1LL, v165);
        if ((_DWORD)v163)
        {
          if (!v167)
          {
            (*(void (**)(uint64_t, char *, uint64_t))(v219 + 32))(v217, v164, v210);
            uint64_t v186 = *(int *)(v165 + 20);
            uint64_t v187 = v217 + v186;
            uint64_t v188 = &v164[v186];
            *(_DWORD *)uint64_t v187 = *(_DWORD *)v188;
            *(_BYTE *)(v187 + 4) = v188[4];
            *(_BYTE *)(v217 + *(int *)(v165 + 24)) = v164[*(int *)(v165 + 24)];
            uint64_t v189 = v165;
            uint64_t v6 = v210;
            ((void (*)(uint64_t, void, uint64_t, uint64_t))__dstc[7])(v217, 0LL, 1LL, v189);
            goto LABEL_52;
          }

          size_t v76 = *(void *)(*(void *)(sub_100003A0C(&qword_1003517D8) - 8) + 64LL);
          uint64_t v132 = v164;
          uint64_t v77 = (void *)v217;
        }

        else
        {
          if (!v167)
          {
            v218(v217, (uint64_t)v164, v210);
            uint64_t v190 = *(int *)(v165 + 20);
            uint64_t v191 = v217 + v190;
            v192 = &v164[v190];
            *(_DWORD *)uint64_t v191 = *(_DWORD *)v192;
            *(_BYTE *)(v191 + 4) = v192[4];
            uint64_t v193 = *(int *)(v165 + 24);
            uint64_t v6 = v210;
            *(_BYTE *)(v217 + v193) = v164[v193];
            goto LABEL_52;
          }

          sub_100004090(v217, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
          size_t v76 = *(void *)(*(void *)(sub_100003A0C(&qword_1003517D8) - 8) + 64LL);
          uint64_t v77 = (void *)v217;
          uint64_t v132 = v164;
        }

        goto LABEL_40;
      }

      sub_100004090(v216, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      size_t v76 = *(void *)(*(void *)(sub_100003A0C(&qword_1003517E0) - 8) + 64LL);
      uint64_t v77 = (void *)v216;
    }

    uint64_t v132 = v72;
LABEL_40:
    memcpy(v77, v132, v76);
LABEL_51:
    uint64_t v6 = v210;
LABEL_52:
    uint64_t v171 = v33[7];
    uint64_t v172 = v31 + v171;
    uint64_t v173 = &v32[v171];
    *(_DWORD *)uint64_t v172 = *(_DWORD *)v173;
    *(_BYTE *)(v172 + 4) = v173[4];
    uint64_t v174 = v33[8];
    uint64_t v175 = v31 + v174;
    uint64_t v176 = &v32[v174];
    *(_BYTE *)(v175 + 4) = v176[4];
    *(_DWORD *)uint64_t v175 = *(_DWORD *)v176;
    uint64_t v177 = v33[9];
    uint64_t v178 = v31 + v177;
    int v179 = &v32[v177];
    *(_DWORD *)uint64_t v178 = *(_DWORD *)v179;
    *(_BYTE *)(v178 + 4) = v179[4];
    uint64_t v180 = v33[10];
    uint64_t v181 = v31 + v180;
    v182 = &v32[v180];
    *(_DWORD *)uint64_t v181 = *(_DWORD *)v182;
    *(_BYTE *)(v181 + 4) = v182[4];
    uint64_t v183 = v33[11];
    uint64_t v184 = v31 + v183;
    uint64_t v185 = &v32[v183];
    *(_DWORD *)uint64_t v184 = *(_DWORD *)v185;
    *(_BYTE *)(v184 + 4) = v185[4];
    goto LABEL_29;
  }

  if (v14)
  {
LABEL_7:
    size_t v24 = *(void *)(*(void *)(sub_100003A0C(&qword_100351858) - 8) + 64LL);
    uint64_t v25 = (void *)v8;
    uint64_t v26 = v9;
LABEL_8:
    memcpy(v25, v26, v24);
    goto LABEL_29;
  }

  uint64_t v211 = *(void (**)(uint64_t, char *, uint64_t))(v219 + 32);
  uint64_t v214 = a3;
  v211(v8, v9, v6);
  uint64_t v15 = *(int *)(v10 + 20);
  uint64_t v16 = v8 + v15;
  uint64_t v17 = &v9[v15];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = v17[4];
  uint64_t v18 = *(int *)(v10 + 24);
  uint64_t v19 = (char *)(v8 + v18);
  uint64_t v20 = &v9[v18];
  uint64_t v21 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0LL);
  uint64_t v22 = *((void *)v21 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v22 + 48))(v20, 1LL, v21))
  {
    uint64_t v23 = sub_100003A0C(&qword_1003517E8);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
    a3 = v214;
  }

  else
  {
    uint64_t v201 = v22;
    v211((uint64_t)v19, v20, v6);
    uint64_t v49 = v21[5];
    uint64_t v50 = &v19[v49];
    char v51 = &v20[v49];
    *(_DWORD *)uint64_t v50 = *(_DWORD *)v51;
    v50[4] = v51[4];
    uint64_t v52 = v21[6];
    __dst = &v19[v52];
    uint64_t v209 = v6;
    v196 = v20;
    uint64_t v53 = &v20[v52];
    uint64_t v54 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0LL);
    uint64_t v55 = *(void *)(v54 - 8);
    int v197 = v19;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1LL, v54))
    {
      uint64_t v56 = sub_100003A0C(&qword_1003517E0);
      memcpy(__dst, v53, *(void *)(*(void *)(v56 - 8) + 64LL));
      uint64_t v6 = v209;
      a3 = v214;
      uint64_t v58 = v196;
      uint64_t v57 = v197;
    }

    else
    {
      uint64_t v194 = v55;
      v211((uint64_t)__dst, v53, v209);
      uint64_t v59 = *(int *)(v54 + 20);
      uint64_t v60 = &__dst[v59];
      uint64_t v61 = &v53[v59];
      *(_DWORD *)uint64_t v60 = *(_DWORD *)v61;
      v60[4] = v61[4];
      uint64_t v195 = v54;
      uint64_t v62 = *(int *)(v54 + 24);
      uint64_t v63 = &__dst[v62];
      uint64_t v64 = &v53[v62];
      uint64_t v65 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0LL);
      __src = *(void (***)(void *, void, uint64_t, uint64_t))(v65 - 8);
      a3 = v214;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))__src[6])(v64, 1LL, v65))
      {
        uint64_t v66 = sub_100003A0C(&qword_1003517D8);
        memcpy(v63, v64, *(void *)(*(void *)(v66 - 8) + 64LL));
      }

      else
      {
        v211((uint64_t)v63, v64, v209);
        uint64_t v85 = *(int *)(v65 + 20);
        uint64_t v86 = &v63[v85];
        char v87 = &v64[v85];
        *(_DWORD *)uint64_t v86 = *(_DWORD *)v87;
        v86[4] = v87[4];
        v63[*(int *)(v65 + 24)] = v64[*(int *)(v65 + 24)];
        __src[7](v63, 0LL, 1LL, v65);
      }

      uint64_t v58 = v196;
      uint64_t v57 = v197;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v194 + 56))(__dst, 0LL, 1LL, v195);
      uint64_t v6 = v209;
    }

    uint64_t v88 = v21[7];
    uint64_t v89 = &v57[v88];
    uint64_t v90 = &v58[v88];
    *(_DWORD *)uint64_t v89 = *(_DWORD *)v90;
    v89[4] = v90[4];
    uint64_t v91 = v21[8];
    uint64_t v92 = &v57[v91];
    uint64_t v93 = &v58[v91];
    v92[4] = v93[4];
    *(_DWORD *)uint64_t v92 = *(_DWORD *)v93;
    uint64_t v94 = v21[9];
    int v95 = &v57[v94];
    uint64_t v96 = &v58[v94];
    *(_DWORD *)int v95 = *(_DWORD *)v96;
    v95[4] = v96[4];
    uint64_t v97 = v21[10];
    uint64_t v98 = &v57[v97];
    int v99 = &v58[v97];
    *(_DWORD *)uint64_t v98 = *(_DWORD *)v99;
    v98[4] = v99[4];
    uint64_t v100 = v21[11];
    uint64_t v101 = &v57[v100];
    uint64_t v102 = &v58[v100];
    *(_DWORD *)uint64_t v101 = *(_DWORD *)v102;
    v101[4] = v102[4];
    (*(void (**)(char *, void, uint64_t, int *))(v201 + 56))(v57, 0LL, 1LL, v21);
  }

  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
LABEL_29:
  uint64_t v103 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v103) = *(_BYTE *)(a2 + v103);
  uint64_t v104 = a3[8];
  uint64_t v105 = (char *)(a1 + v104);
  uint64_t v106 = (char *)(a2 + v104);
  int v107 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0LL);
  uint64_t v108 = *((void *)v107 - 1);
  uint64_t v109 = *(uint64_t (**)(char *, uint64_t, int *))(v108 + 48);
  int v110 = v109(v105, 1LL, v107);
  int v111 = v109(v106, 1LL, v107);
  if (!v110)
  {
    if (!v111)
    {
      v218((uint64_t)v105, (uint64_t)v106, v6);
      uint64_t v123 = v107[5];
      uint64_t v124 = &v105[v123];
      uint64_t v125 = &v106[v123];
      *(void *)uint64_t v124 = *(void *)v125;
      v124[8] = v125[8];
      uint64_t v126 = v107[6];
      char v127 = &v105[v126];
      uint64_t v128 = &v106[v126];
      *(void *)char v127 = *(void *)v128;
      v127[8] = v128[8];
      uint64_t v129 = v107[7];
      v130 = &v105[v129];
      char v131 = &v106[v129];
      *(void *)v130 = *(void *)v131;
      v130[8] = v131[8];
      return a1;
    }

    sub_100004090((uint64_t)v105, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
    goto LABEL_34;
  }

  if (v111)
  {
LABEL_34:
    uint64_t v121 = sub_100003A0C(&qword_100351900);
    memcpy(v105, v106, *(void *)(*(void *)(v121 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v219 + 32))(v105, v106, v6);
  uint64_t v112 = v107[5];
  v113 = &v105[v112];
  uint64_t v114 = &v106[v112];
  *(void *)v113 = *(void *)v114;
  v113[8] = v114[8];
  uint64_t v115 = v107[6];
  uint64_t v116 = &v105[v115];
  v117 = &v106[v115];
  *(void *)uint64_t v116 = *(void *)v117;
  v116[8] = v117[8];
  uint64_t v118 = v107[7];
  char v119 = &v105[v118];
  uint64_t v120 = &v106[v118];
  *(void *)char v119 = *(void *)v120;
  v119[8] = v120[8];
  (*(void (**)(char *, void, uint64_t, int *))(v108 + 56))(v105, 0LL, 1LL, v107);
  return a1;
}

uint64_t sub_10007E830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007E83C);
}

uint64_t sub_10007E83C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  uint64_t v9 = sub_100003A0C(&qword_100351858);
  uint64_t v10 = *(void *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    uint64_t v11 = v9;
    uint64_t v12 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }

  if ((_DWORD)a2 != 251)
  {
    uint64_t v11 = sub_100003A0C(&qword_100351900);
    uint64_t v10 = *(void *)(v11 - 8);
    uint64_t v12 = a3[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }

  else {
    int v13 = *(unsigned __int8 *)(a1 + a3[7]);
  }
  unsigned int v14 = v13 - 4;
  else {
    return 0LL;
  }
}

uint64_t sub_10007E914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007E920);
}

uint64_t sub_10007E920(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t result = sub_100003A0C(&qword_100351858);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      uint64_t v10 = result;
      uint64_t v15 = a4[5];
    }

    else
    {
      if (a3 == 251)
      {
        *(_BYTE *)(a1 + a4[7]) = a2 + 4;
        return result;
      }

      uint64_t v10 = sub_100003A0C(&qword_100351900);
      uint64_t v14 = *(void *)(v10 - 8);
      uint64_t v15 = a4[8];
    }

    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_10007E9EC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v8[0] = *(void *)(v2 - 8) + 64LL;
    sub_1000119EC(319LL, &qword_100353BB0, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
    if (v5 <= 0x3F)
    {
      v8[1] = *(void *)(v4 - 8) + 64LL;
      v8[2] = &unk_1002BA290;
      void v8[3] = &unk_1002BA648;
      sub_1000119EC( 319LL,  (unint64_t *)&unk_100353BB8,  type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
      if (v7 <= 0x3F)
      {
        void v8[4] = *(void *)(v6 - 8) + 64LL;
        swift_initStructMetadata(a1, 256LL, 5LL, v8, a1 + 16);
      }
    }
  }

uint64_t *sub_10007EAC0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v17);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)uint64_t v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    int v13 = (char *)a2 + v9;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = a3[7];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
  }

  return a1;
}

uint64_t sub_10007EB8C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(void *)uint64_t v14 = *(void *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  return a1;
}

uint64_t sub_10007EC2C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(_BYTE *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(_BYTE *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(_BYTE *)(v12 + 8) = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  char v18 = *(_BYTE *)(v17 + 8);
  *(void *)uint64_t v16 = *(void *)v17;
  *(_BYTE *)(v16 + 8) = v18;
  return a1;
}

uint64_t sub_10007ECD0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(void *)uint64_t v14 = *(void *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  return a1;
}

uint64_t sub_10007ED70(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(void *)uint64_t v14 = *(void *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  return a1;
}

uint64_t sub_10007EE10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007EE1C);
}

uint64_t sub_10007EE20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t sub_10007EE5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007EE68);
}

uint64_t sub_10007EE6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t sub_10007EEAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v9 <= 0x3F)
  {
    v10[0] = *(void *)(result - 8) + 64LL;
    v10[1] = a4;
    v10[2] = a4;
    void v10[3] = a5;
    swift_initStructMetadata(a1, 256LL, 4LL, v10, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_10007EF28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007EF34);
}

uint64_t sub_10007EF38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_10007EFB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007EFC0);
}

uint64_t sub_10007EFC4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_10007F03C()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0LL);
}

void sub_10007F044(uint64_t a1)
{
  v21[0] = &unk_1002BA290;
  sub_1000119EC(319LL, &qword_100353D28, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(v2 - 8) + 64LL;
    v21[1] = v4;
    sub_1000119EC(319LL, &qword_100353D30, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
    if (v6 <= 0x3F)
    {
      v21[2] = *(void *)(v5 - 8) + 64LL;
      sub_1000119EC(319LL, &qword_100353D38, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
      if (v8 <= 0x3F)
      {
        v21[3] = *(void *)(v7 - 8) + 64LL;
        sub_1000119EC(319LL, &qword_100353D40, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
        if (v10 <= 0x3F)
        {
          v21[4] = *(void *)(v9 - 8) + 64LL;
          sub_1000119EC(319LL, &qword_100353D48, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
          if (v12 <= 0x3F)
          {
            v21[5] = *(void *)(v11 - 8) + 64LL;
            sub_1000119EC( 319LL,  &qword_100353D50,  type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
            if (v14 <= 0x3F)
            {
              v21[6] = *(void *)(v13 - 8) + 64LL;
              sub_1000119EC( 319LL,  &qword_100353D58,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
              if (v16 <= 0x3F)
              {
                v21[7] = *(void *)(v15 - 8) + 64LL;
                sub_1000119EC( 319LL,  &qword_100353D60,  type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
                if (v18 <= 0x3F)
                {
                  v21[8] = *(void *)(v17 - 8) + 64LL;
                  sub_1000119EC( 319LL,  (unint64_t *)&unk_100353D68,  type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
                  if (v20 <= 0x3F)
                  {
                    v21[9] = *(void *)(v19 - 8) + 64LL;
                    v21[10] = v4;
                    swift_updateClassMetadata2(a1, 256LL, 11LL, v21, a1 + 80);
                  }
                }
              }
            }
          }
        }
      }
    }
  }

uint64_t sub_10007F228()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0LL);
}

void sub_10007F230(uint64_t a1)
{
  v6[0] = &unk_1002B9CB0;
  v6[1] = &unk_1002B9CB0;
  sub_1000119EC(319LL, &qword_100353F70, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
  if (v3 <= 0x3F)
  {
    v6[2] = *(void *)(v2 - 8) + 64LL;
    sub_1000119EC( 319LL,  (unint64_t *)&unk_100353F78,  type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
    if (v5 <= 0x3F)
    {
      uint64_t v7 = *(void *)(v4 - 8) + 64LL;
      uint64_t v8 = v7;
      uint64_t v9 = v7;
      unint64_t v10 = &unk_1002B9CB0;
      uint64_t v11 = &unk_1002B9CB0;
      unint64_t v12 = &unk_1002BA6F8;
      uint64_t v13 = &unk_1002BA6F8;
      unint64_t v14 = &unk_1002B9CB0;
      uint64_t v15 = &unk_1002B9CB0;
      unint64_t v16 = &unk_1002B9CB0;
      uint64_t v17 = &unk_1002BA710;
      unint64_t v18 = &unk_1002B9CB0;
      uint64_t v19 = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_updateClassMetadata2(a1, 256LL, 16LL, v6, a1 + 80);
    }
  }

uint64_t sub_10007F314()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0LL);
}

void sub_10007F31C(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v17[0] = *(void *)(v2 - 8) + 64LL;
    sub_1000119EC(319LL, &qword_100354220, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
    if (v5 <= 0x3F)
    {
      v17[1] = *(void *)(v4 - 8) + 64LL;
      v17[2] = "\t";
      v17[3] = "\t";
      v17[4] = "\t";
      sub_1000119EC(319LL, &qword_100352BB8, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
      if (v7 <= 0x3F)
      {
        v17[5] = *(void *)(v6 - 8) + 64LL;
        sub_1000119EC( 319LL,  (unint64_t *)&unk_100352BC0,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
        if (v9 <= 0x3F)
        {
          uint64_t v10 = *(void *)(v8 - 8) + 64LL;
          v17[6] = v10;
          sub_1000119EC(319LL, &qword_100354228, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
          if (v12 <= 0x3F)
          {
            v17[7] = *(void *)(v11 - 8) + 64LL;
            sub_1000119EC( 319LL,  &qword_100354230,  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
            if (v14 <= 0x3F)
            {
              v17[8] = *(void *)(v13 - 8) + 64LL;
              v17[9] = &unk_1002B9CB0;
              v17[10] = &unk_1002B9CC8;
              v17[11] = v10;
              v17[12] = &unk_1002B9D88;
              sub_1000119EC( 319LL,  (unint64_t *)&unk_100354238,  type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
              if (v16 <= 0x3F)
              {
                v17[13] = *(void *)(v15 - 8) + 64LL;
                swift_updateClassMetadata2(a1, 256LL, 14LL, v17, a1 + 80);
              }
            }
          }
        }
      }
    }
  }

uint64_t sub_10007F4C8()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass(0LL);
}

void sub_10007F4D0(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_updateClassMetadata2(a1, 256LL, 2LL, v4, a1 + 80);
  }

uint64_t sub_10007F558()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0LL);
}

void sub_10007F560(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    v6[1] = "\t";
    v6[2] = &unk_1002BA6F8;
    void v6[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v6[4] = "\t";
    v6[5] = "\t";
    v6[6] = "\t";
    v6[7] = &unk_1002B9CB0;
    v6[8] = &unk_1002B9CB0;
    v6[9] = &unk_1002B9CC8;
    v6[10] = &unk_1002B9CC8;
    v6[11] = &unk_1002B9CC8;
    v6[12] = &unk_1002B9CC8;
    v6[13] = &unk_1002B9CC8;
    v6[14] = (char *)&value witness table for Builtin.BridgeObject + 64;
    sub_1000119EC( 319LL,  (unint64_t *)&unk_100354588,  type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
    if (v5 <= 0x3F)
    {
      v6[15] = *(void *)(v4 - 8) + 64LL;
      v6[16] = &unk_1002B9CC8;
      v6[17] = &unk_1002B9CC8;
      v6[18] = &unk_1002B9CC8;
      v6[19] = &unk_1002B9CC8;
      v6[20] = &unk_1002B9CC8;
      v6[21] = "\t";
      v6[22] = &unk_1002BA648;
      swift_updateClassMetadata2(a1, 256LL, 23LL, v6, a1 + 80);
    }
  }

uint64_t sub_10007F668()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0LL);
}

void sub_10007F670(uint64_t a1)
{
  v6[0] = &unk_1002B9CB0;
  sub_1000119EC(319LL, &qword_100353628, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  if (v3 <= 0x3F)
  {
    v6[1] = *(void *)(v2 - 8) + 64LL;
    sub_1000119EC( 319LL,  (unint64_t *)&unk_1003538E8,  type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    if (v5 <= 0x3F)
    {
      uint64_t v7 = *(void *)(v4 - 8) + 64LL;
      uint64_t v8 = v7;
      uint64_t v9 = v7;
      uint64_t v10 = v7;
      swift_updateClassMetadata2(a1, 256LL, 6LL, v6, a1 + 80);
    }
  }

uint64_t sub_10007F728()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0LL);
}

void sub_10007F730(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v12[0] = *(void *)(v2 - 8) + 64LL;
    sub_1000119EC(319LL, &qword_100354A78, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
    if (v5 <= 0x3F)
    {
      v12[1] = *(void *)(v4 - 8) + 64LL;
      sub_1000119EC(319LL, &qword_100354A80, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
      if (v7 <= 0x3F)
      {
        v12[2] = *(void *)(v6 - 8) + 64LL;
        sub_1000119EC(319LL, &qword_100354A88, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
        if (v9 <= 0x3F)
        {
          v12[3] = *(void *)(v8 - 8) + 64LL;
          sub_1000119EC( 319LL,  (unint64_t *)&unk_100354A90,  type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
          if (v11 <= 0x3F)
          {
            v12[4] = *(void *)(v10 - 8) + 64LL;
            swift_updateClassMetadata2(a1, 256LL, 5LL, v12, a1 + 80);
          }
        }
      }
    }
  }

uint64_t sub_10007F858()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0LL);
}

void sub_10007F860(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v10[0] = *(void *)(v2 - 8) + 64LL;
    sub_1000119EC(319LL, &qword_100354BE0, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
    if (v5 <= 0x3F)
    {
      v10[1] = *(void *)(v4 - 8) + 64LL;
      v10[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
      void v10[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
      sub_1000119EC(319LL, &qword_100354BE8, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
      if (v7 <= 0x3F)
      {
        void v10[4] = *(void *)(v6 - 8) + 64LL;
        void v10[5] = "\t";
        v10[6] = "\t";
        sub_1000119EC( 319LL,  (unint64_t *)&unk_100354BF0,  type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
        if (v9 <= 0x3F)
        {
          v10[7] = *(void *)(v8 - 8) + 64LL;
          v10[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
          swift_updateClassMetadata2(a1, 256LL, 9LL, v10, a1 + 80);
        }
      }
    }
  }

unint64_t sub_10007F97C()
{
  unint64_t result = qword_100354F20;
  if (!qword_100354F20)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B5114, &type metadata for CLP_LogEntry_PrivateData_SvReferencePoint);
    atomic_store(result, (unint64_t *)&qword_100354F20);
  }

  return result;
}

unint64_t sub_10007F9C0()
{
  unint64_t result = qword_100354F28;
  if (!qword_100354F28)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002B4FF4,  &type metadata for CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated);
    atomic_store(result, (unint64_t *)&qword_100354F28);
  }

  return result;
}

unint64_t sub_10007FA04()
{
  unint64_t result = qword_100354F30;
  if (!qword_100354F30)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002B4ED4,  &type metadata for CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge);
    atomic_store(result, (unint64_t *)&qword_100354F30);
  }

  return result;
}

unint64_t sub_10007FA48()
{
  unint64_t result = qword_100354F38;
  if (!qword_100354F38)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002B4DB4,  &type metadata for CLP_LogEntry_PrivateData_IonosphericCorrectionSource);
    atomic_store(result, (unint64_t *)&qword_100354F38);
  }

  return result;
}

unint64_t sub_10007FA8C()
{
  unint64_t result = qword_100354F40;
  if (!qword_100354F40)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B4C94, &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication);
    atomic_store(result, (unint64_t *)&qword_100354F40);
  }

  return result;
}

unint64_t sub_10007FAD0()
{
  unint64_t result = qword_100354F48;
  if (!qword_100354F48)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B4B74, &type metadata for CLP_LogEntry_PrivateData_SvPositionSource);
    atomic_store(result, (unint64_t *)&qword_100354F48);
  }

  return result;
}

unint64_t sub_10007FB14()
{
  unint64_t result = qword_100354F50;
  if (!qword_100354F50)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B4A54, &type metadata for CLP_LogEntry_PrivateData_MultipathIndicator);
    atomic_store(result, (unint64_t *)&qword_100354F50);
  }

  return result;
}

unint64_t sub_10007FB58()
{
  unint64_t result = qword_100354F58;
  if (!qword_100354F58)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002B4934,  &type metadata for CLP_LogEntry_PrivateData_MeasurementDetectionMethod);
    atomic_store(result, (unint64_t *)&qword_100354F58);
  }

  return result;
}

unint64_t sub_10007FB9C()
{
  unint64_t result = qword_100354F60;
  if (!qword_100354F60)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B4814, &type metadata for CLP_LogEntry_PrivateData_FullSvTimeSource);
    atomic_store(result, (unint64_t *)&qword_100354F60);
  }

  return result;
}

unint64_t sub_10007FBE0()
{
  unint64_t result = qword_100354F68;
  if (!qword_100354F68)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B46F4, &type metadata for CLP_LogEntry_PrivateData_Band);
    atomic_store(result, (unint64_t *)&qword_100354F68);
  }

  return result;
}

unint64_t sub_10007FC24()
{
  unint64_t result = qword_100354F70;
  if (!qword_100354F70)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B45D4, &type metadata for CLP_LogEntry_PrivateData_SatelliteSystem);
    atomic_store(result, (unint64_t *)&qword_100354F70);
  }

  return result;
}

unint64_t sub_10007FC68()
{
  unint64_t result = qword_100354F78;
  if (!qword_100354F78)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002B44B4, &type metadata for CLP_LogEntry_PrivateData_GlonassSlotSource);
    atomic_store(result, (unint64_t *)&qword_100354F78);
  }

  return result;
}

uint64_t sub_10007FCD4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_1003550D0);
  __chkstk_darwin(v3);
  unint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_LogEntry(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_1003550D0);
  unint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  uint64_t v11 = a1 + v7[8];
  *(void *)uint64_t v11 = 0LL;
  *(_BYTE *)(v11 + 8) = 1;
  return sub_100015764((uint64_t)v5, &qword_1003550D0);
}

int *sub_10007FDF4@<X0>(uint64_t a1@<X8>)
{
  unint64_t result = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(void *)uint64_t v4 = 0LL;
  *(_BYTE *)(v4 + 8) = 1;
  uint64_t v5 = a1 + result[7];
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + 8) = 1;
  uint64_t v6 = a1 + result[8];
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_LogEntry(uint64_t a1)
{
  return sub_10000E68C(a1, (uint64_t *)&unk_10037A090, (uint64_t)&nominal type descriptor for CLP_LogEntry_LogEntry);
}

uint64_t type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_10037A0A0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_LogEntry.TimeStamp);
}

uint64_t sub_10007FE88(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0LL) + 24);
  sub_100015764(v3, &qword_1003550D0);
  sub_100003E68(a1, v3, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 0LL, 1LL, v4);
}

void (*sub_10007FEF8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003550D0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_1003550D0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    unint64_t v12 = &v9[v6[6]];
    *(void *)unint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    unint64_t v14 = &v9[v6[8]];
    *(void *)unint64_t v14 = 0LL;
    v14[8] = 1;
    sub_100015764((uint64_t)v5, &qword_1003550D0);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  }

  return sub_100080058;
}

void sub_100080058(uint64_t a1, char a2)
{
}

BOOL sub_10008006C()
{
  uint64_t v1 = sub_100003A0C(&qword_1003550D0);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_LogEntry(0LL);
  sub_10000E6C0(v0 + *(int *)(v4 + 24), (uint64_t)v3, &qword_1003550D0);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v3, 1LL, v5) != 1;
  sub_100015764((uint64_t)v3, &qword_1003550D0);
  return v6;
}

uint64_t sub_100080120()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0LL) + 24);
  sub_100015764(v1, &qword_1003550D0);
  uint64_t v2 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
}

uint64_t sub_100080178@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_1003550D8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_LogEntry(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_1003550D8);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0LL);
  sub_100087FFC(a1);
  return sub_100015764((uint64_t)v5, &qword_1003550D8);
}

uint64_t sub_100080250(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0LL) + 28);
  sub_100015764(v3, &qword_1003550D8);
  sub_100003E68(a1, v3, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 0LL, 1LL, v4);
}

void (*sub_1000802C0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003550D8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_1003550D8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    sub_100087FFC((uint64_t)v9);
    sub_100015764((uint64_t)v5, &qword_1003550D8);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
  }

  return sub_1000803DC;
}

void sub_1000803DC(uint64_t a1, char a2)
{
}

BOOL sub_1000803F0()
{
  uint64_t v1 = sub_100003A0C(&qword_1003550D8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_LogEntry(0LL);
  sub_10000E6C0(v0 + *(int *)(v4 + 28), (uint64_t)v3, &qword_1003550D8);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0LL);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v3, 1LL, v5) != 1;
  sub_100015764((uint64_t)v3, &qword_1003550D8);
  return v6;
}

uint64_t sub_1000804A4()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0LL) + 28);
  sub_100015764(v1, &qword_1003550D8);
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
}

double sub_1000804FC()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL) + 20);
  double result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100080530(double a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL);
  uint64_t v4 = v1 + *(int *)(result + 20);
  *(double *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_100080564(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000805BC()
{
  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL) + 20) + 8) & 1) == 0;
}

uint64_t sub_1000805E8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL);
  uint64_t v2 = v0 + *(int *)(result + 20);
  *(void *)uint64_t v2 = 0LL;
  *(_BYTE *)(v2 + 8) = 1;
  return result;
}

double sub_100080614()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL) + 24);
  double result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100080648(double a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL);
  uint64_t v4 = v1 + *(int *)(result + 24);
  *(double *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_10008067C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000806D4()
{
  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL) + 24) + 8) & 1) == 0;
}

uint64_t sub_100080700()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL);
  uint64_t v2 = v0 + *(int *)(result + 24);
  *(void *)uint64_t v2 = 0LL;
  *(_BYTE *)(v2 + 8) = 1;
  return result;
}

double sub_10008072C()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL) + 28);
  double result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100080760(double a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL);
  uint64_t v4 = v1 + *(int *)(result + 28);
  *(double *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_100080794(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000807EC()
{
  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL) + 28) + 8) & 1) == 0;
}

uint64_t sub_100080818()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL);
  uint64_t v2 = v0 + *(int *)(result + 28);
  *(void *)uint64_t v2 = 0LL;
  *(_BYTE *)(v2 + 8) = 1;
  return result;
}

uint64_t sub_100080844()
{
  uint64_t v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL) + 32));
  if (v1[8]) {
    return 0LL;
  }
  else {
    return *(void *)v1;
  }
}

uint64_t sub_100080874(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL);
  uint64_t v4 = v1 + *(int *)(result + 32);
  *(void *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_1000808A8(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8)) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_100004AD8;
}

BOOL sub_1000808FC()
{
  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL) + 32) + 8) & 1) == 0;
}

uint64_t sub_100080928()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL);
  uint64_t v2 = v0 + *(int *)(result + 32);
  *(void *)uint64_t v2 = 0LL;
  *(_BYTE *)(v2 + 8) = 1;
  return result;
}

uint64_t sub_100080954@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CLP_LogEntry_LogEntry(0LL);
  ExtensionFieldValueSet.init()();
  uint64_t v3 = a1 + *(int *)(v2 + 24);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  uint64_t v5 = a1 + *(int *)(v2 + 28);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
}

uint64_t sub_1000809EC@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp, a1);
}

uint64_t sub_1000809F8@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture, a1);
}

uint64_t sub_100080A04@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0LL) + 20);
  uint64_t v4 = type metadata accessor for ExtensionFieldValueSet(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t sub_100080A4C(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0LL) + 20);
  uint64_t v4 = type metadata accessor for ExtensionFieldValueSet(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
}

uint64_t (*sub_100080A94())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_100080ABC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for ExtensionFieldValueSet(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_100080AFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for ExtensionFieldValueSet(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

void *sub_100080B3C()
{
  return &unk_10033EBB0;
}

unint64_t sub_100080B48()
{
  return 0xD000000000000015LL;
}

uint64_t sub_100080B64()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369868);
  sub_10000E704(v0, (uint64_t)qword_100369868);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3340;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "event_record_time";
  *(void *)(v9 + 8) = 17LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  unint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 4LL;
  *(void *)uint64_t v13 = "private_data_capture";
  *((void *)v13 + 1) = 20LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100080CB8()
{
  return sub_100008C30(&qword_1003799F0, (uint64_t)qword_100369868, (uint64_t)sub_100080B64);
}

uint64_t sub_100080CD4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_1003799F0, (uint64_t)qword_100369868, (uint64_t)sub_100080B64, a1);
}

uint64_t sub_100080CF0()
{
  return ExtensionFieldValueSet.isInitialized.getter() & 1;
}

uint64_t sub_100080D20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0) {
        return result;
      }
      if (result == 4) {
        break;
      }
      if (result == 2)
      {
        uint64_t v9 = type metadata accessor for CLP_LogEntry_LogEntry(0LL);
        uint64_t v10 = sub_10000FD98(&qword_1003550F0, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&unk_1002BA7C4);
        dispatch thunk of Decoder.decodeExtensionField(values:messageType:fieldNumber:)( v3 + *(int *)(v9 + 20),  v9,  v10,  2LL,  a2,  a3);
        goto LABEL_12;
      }

      if (result == 1)
      {
        uint64_t v11 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0LL) + 24);
        uint64_t v12 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL);
        uint64_t v13 = (unint64_t *)&unk_100355110;
        unint64_t v14 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp;
        uint64_t v15 = &unk_1002BA92C;
LABEL_11:
        uint64_t v16 = sub_10000FD98(v13, v14, (uint64_t)v15);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v11, v12, v16, a2, a3);
      }

uint64_t sub_100080EB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = sub_100080F74(v5, a1, a2, a3);
  if (!v4)
  {
    uint64_t v10 = type metadata accessor for CLP_LogEntry_LogEntry(0LL);
    dispatch thunk of Visitor.visitExtensionFields(fields:start:end:)(v5 + *(int *)(v10 + 20), 2LL, 3LL, a2, a3);
    sub_1000810E8(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_100080F74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003550D0);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_LogEntry(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_1003550D0);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  uint64_t v15 = sub_10000FD98( &qword_100355110,  type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp,  (uint64_t)&unk_1002BA92C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
}

uint64_t sub_1000810E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003550D8);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_LogEntry(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_1003550D8);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
  uint64_t v15 = sub_10000FD98( &qword_100355278,  type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture,  (uint64_t)&unk_1002BAB20);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
}

Swift::Int sub_100081260()
{
  return sub_10000DF8C(type metadata accessor for CLP_LogEntry_LogEntry, &qword_1003550E0, (uint64_t)&unk_1002BA8C4);
}

uint64_t sub_10008127C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = UnknownStorage.init()();
  ExtensionFieldValueSet.init()(v4);
  uint64_t v5 = a2 + *(int *)(a1 + 24);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
  uint64_t v7 = a2 + *(int *)(a1 + 28);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 1LL, 1LL, v8);
}

uint64_t sub_100081308()
{
  return ExtensionFieldValueSet.isInitialized.getter() & 1;
}

uint64_t sub_100081330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100080D20(a1, a2, a3);
}

uint64_t sub_100081344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100080EB0(a1, a2, a3);
}

uint64_t sub_100081358(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98(&qword_100355250, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&unk_1002BA83C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000813A8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_1003799F0, (uint64_t)qword_100369868, (uint64_t)sub_100080B64, a1);
}

uint64_t sub_1000813C4(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98(&qword_1003550F0, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&unk_1002BA7C4);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100081404(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98(&qword_1003550F0, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&unk_1002BA7C4);
  return Message.hash(into:)(a1, a2, v4);
}

void sub_100081458()
{
  v0._countAndFlagsBits = 0x617453656D69542ELL;
  v0._object = (void *)0xEA0000000000706DLL;
  String.append(_:)(v0);
  qword_100369880 = 0xD000000000000015LL;
  *(void *)algn_100369888 = 0x80000001002E3CB0LL;
}

uint64_t *sub_1000814C4()
{
  if (qword_1003799F8 != -1) {
    swift_once(&qword_1003799F8, sub_100081458);
  }
  return &qword_100369880;
}

uint64_t sub_100081504()
{
  if (qword_1003799F8 != -1) {
    swift_once(&qword_1003799F8, sub_100081458);
  }
  uint64_t v0 = qword_100369880;
  swift_bridgeObjectRetain(*(void *)algn_100369888);
  return v0;
}

uint64_t sub_100081560()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369890);
  sub_10000E704(v0, (uint64_t)qword_100369890);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "cf_absolute_time_s";
  *(void *)(v9 + 8) = 18LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "mach_absolute_time_s";
  *(void *)(v13 + 8) = 20LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  unint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *unint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "mach_continuous_time_s";
  *((void *)v15 + 1) = 22LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "pipelined_monotonic_time_ns";
  *((void *)v17 + 1) = 27LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100081720()
{
  return sub_100008C30(qword_100379A00, (uint64_t)qword_100369890, (uint64_t)sub_100081560);
}

uint64_t sub_10008173C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(qword_100379A00, (uint64_t)qword_100369890, (uint64_t)sub_100081560, a1);
}

uint64_t sub_100081758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL) + 20);
          goto LABEL_5;
        case 2LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL) + 24);
          goto LABEL_5;
        case 3LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL) + 28);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v9, a2, a3);
          break;
        case 4LL:
          uint64_t v10 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL);
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)(v3 + *(int *)(v10 + 32), a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_100081864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL);
  uint64_t v10 = (int *)result;
  uint64_t v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1LL, a2, a3, *(double *)v11);
  }
  if (!v4)
  {
    uint64_t v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2LL, a2, a3, *(double *)v12);
    }
    uint64_t v13 = v5 + v10[7];
    if ((*(_BYTE *)(v13 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3LL, a2, a3, *(double *)v13);
    }
    uint64_t v14 = v5 + v10[8];
    if ((*(_BYTE *)(v14 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(*(void *)v14, 4LL, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_100081994()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp,  &qword_1003550E8,  (uint64_t)&unk_1002BAA2C);
}

uint64_t sub_1000819B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100081758(a1, a2, a3);
}

uint64_t sub_1000819C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100081864(a1, a2, a3);
}

uint64_t sub_1000819D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100355248,  type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp,  (uint64_t)&unk_1002BA9A4);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100081A28@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(qword_100379A00, (uint64_t)qword_100369890, (uint64_t)sub_100081560, a1);
}

uint64_t sub_100081A44(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100355110,  type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp,  (uint64_t)&unk_1002BA92C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100081A84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100355110,  type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp,  (uint64_t)&unk_1002BA92C);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_100081AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  char v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v37 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL);
  uint64_t v12 = v11[5];
  uint64_t v13 = (double *)(a1 + v12);
  char v14 = *(_BYTE *)(a1 + v12 + 8);
  uint64_t v15 = (double *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16) {
      goto LABEL_21;
    }
  }

  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if ((v16 & 1) != 0) {
      goto LABEL_21;
    }
  }

  uint64_t v17 = v11[6];
  unint64_t v18 = (double *)(a1 + v17);
  char v19 = *(_BYTE *)(a1 + v17 + 8);
  unint64_t v20 = (double *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21) {
      goto LABEL_21;
    }
  }

  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if ((v21 & 1) != 0) {
      goto LABEL_21;
    }
  }

  uint64_t v22 = v11[7];
  uint64_t v23 = (double *)(a1 + v22);
  char v24 = *(_BYTE *)(a1 + v22 + 8);
  uint64_t v25 = (double *)(a2 + v22);
  int v26 = *(unsigned __int8 *)(a2 + v22 + 8);
  if ((v24 & 1) == 0)
  {
    if (*v23 != *v25) {
      LOBYTE(v26) = 1;
    }
    if ((v26 & 1) != 0) {
      goto LABEL_21;
    }
LABEL_19:
    uint64_t v27 = v11[8];
    uint64_t v28 = (void *)(a1 + v27);
    char v29 = *(_BYTE *)(a1 + v27 + 8);
    uint64_t v30 = (void *)(a2 + v27);
    int v31 = *(unsigned __int8 *)(a2 + v27 + 8);
    if ((v29 & 1) != 0)
    {
      if (!v31) {
        goto LABEL_21;
      }
    }

    else
    {
      if (*v28 != *v30) {
        LOBYTE(v31) = 1;
      }
      if ((v31 & 1) != 0) {
        goto LABEL_21;
      }
    }

    uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v34(v10, a1, v4);
    v34(v8, a2, v4);
    uint64_t v35 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v32 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v35);
    int v36 = *(void (**)(char *, uint64_t))(v5 + 8);
    v36(v8, v4);
    v36(v10, v4);
    return v32 & 1;
  }

  if (v26) {
    goto LABEL_19;
  }
LABEL_21:
  char v32 = 0;
  return v32 & 1;
}

uint64_t sub_100081CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v87 = a1;
  uint64_t v88 = a2;
  uint64_t v2 = type metadata accessor for ExtensionFieldValueSet(0LL);
  uint64_t v72 = *(void *)(v2 - 8);
  uint64_t v73 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v71 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v70 = (char *)&v70 - v5;
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v77 = *(void *)(v6 - 8);
  uint64_t v78 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  size_t v76 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  int v75 = (char *)&v70 - v9;
  uint64_t v84 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0LL);
  uint64_t v81 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v74 = (uint64_t)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v80 = sub_100003A0C(&qword_100355258);
  __chkstk_darwin(v80);
  uint64_t v85 = (uint64_t)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100003A0C(&qword_1003550D8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v79 = (uint64_t)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v86 = (uint64_t)&v70 - v16;
  __chkstk_darwin(v15);
  uint64_t v82 = (uint64_t)&v70 - v17;
  uint64_t v18 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  int v21 = (char *)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_100003A0C(&qword_100355260);
  __chkstk_darwin(v22);
  char v24 = (char *)&v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = sub_100003A0C(&qword_1003550D0);
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v70 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = __chkstk_darwin(v26);
  int v31 = (char *)&v70 - v30;
  __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v70 - v32;
  uint64_t v34 = type metadata accessor for CLP_LogEntry_LogEntry(0LL);
  sub_10000E6C0(v87 + *(int *)(v34 + 24), (uint64_t)v33, &qword_1003550D0);
  uint64_t v83 = v34;
  sub_10000E6C0(v88 + *(int *)(v34 + 24), (uint64_t)v31, &qword_1003550D0);
  uint64_t v35 = (uint64_t)&v24[*(int *)(v22 + 48)];
  sub_10000E6C0((uint64_t)v33, (uint64_t)v24, &qword_1003550D0);
  sub_10000E6C0((uint64_t)v31, v35, &qword_1003550D0);
  int v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  if (v36((uint64_t)v24, 1LL, v18) == 1)
  {
    sub_100015764((uint64_t)v31, &qword_1003550D0);
    sub_100015764((uint64_t)v33, &qword_1003550D0);
    if (v36(v35, 1LL, v18) == 1)
    {
      sub_100015764((uint64_t)v24, &qword_1003550D0);
      goto LABEL_8;
    }

uint64_t sub_100082448()
{
  return sub_10000FD98(&qword_1003550F0, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&unk_1002BA7C4);
}

uint64_t sub_100082474()
{
  return sub_10000FD98(&qword_1003550F8, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&unk_1002BA89C);
}

uint64_t sub_1000824A0()
{
  return sub_10000FD98(&qword_1003550F0, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&unk_1002BA7C4);
}

uint64_t sub_1000824CC()
{
  return sub_10000FD98(&qword_1003550E0, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&unk_1002BA8C4);
}

uint64_t sub_1000824F8()
{
  return sub_10000FD98(&qword_100355100, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&unk_1002BA904);
}

uint64_t sub_100082524()
{
  return sub_10000FD98( &qword_100355108,  type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp,  (uint64_t)&unk_1002BAA04);
}

uint64_t sub_100082550()
{
  return sub_10000FD98( &qword_100355110,  type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp,  (uint64_t)&unk_1002BA92C);
}

uint64_t sub_10008257C()
{
  return sub_10000FD98( &qword_1003550E8,  type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp,  (uint64_t)&unk_1002BAA2C);
}

uint64_t sub_1000825A8()
{
  return sub_10000FD98( &qword_100355118,  type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp,  (uint64_t)&unk_1002BAA6C);
}

uint64_t *sub_1000825D4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v19);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for ExtensionFieldValueSet(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
    uint64_t v13 = a3[6];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL);
    uint64_t v17 = *((void *)v16 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1LL, v16))
    {
      uint64_t v18 = sub_100003A0C(&qword_1003550D0);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      v8((uint64_t *)v14, (uint64_t *)v15, v7);
      uint64_t v20 = v16[5];
      int v21 = &v14[v20];
      uint64_t v22 = &v15[v20];
      *(void *)int v21 = *(void *)v22;
      v21[8] = v22[8];
      uint64_t v23 = v16[6];
      char v24 = &v14[v23];
      uint64_t v25 = &v15[v23];
      *(void *)char v24 = *(void *)v25;
      v24[8] = v25[8];
      uint64_t v26 = v16[7];
      uint64_t v27 = &v14[v26];
      uint64_t v28 = &v15[v26];
      *(void *)uint64_t v27 = *(void *)v28;
      v27[8] = v28[8];
      uint64_t v29 = v16[8];
      uint64_t v30 = &v14[v29];
      int v31 = &v15[v29];
      *(void *)uint64_t v30 = *(void *)v31;
      v30[8] = v31[8];
      (*(void (**)(char *, void, uint64_t, int *))(v17 + 56))(v14, 0LL, 1LL, v16);
    }

    uint64_t v32 = a3[7];
    uint64_t v33 = (char *)a1 + v32;
    uint64_t v34 = (char *)a2 + v32;
    uint64_t v35 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0LL);
    uint64_t v36 = *(void *)(v35 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1LL, v35))
    {
      uint64_t v37 = sub_100003A0C(&qword_1003550D8);
      memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64LL));
    }

    else
    {
      v8((uint64_t *)v33, (uint64_t *)v34, v7);
      uint64_t v38 = *(int *)(v35 + 20);
      uint64_t v39 = *(void *)&v34[v38];
      *(void *)&v33[v38] = v39;
      uint64_t v40 = *(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56);
      swift_retain(v39);
      v40(v33, 0LL, 1LL, v35);
    }
  }

  return a1;
}

uint64_t sub_100082818(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v5(a1, v4);
  uint64_t v6 = a1 + a2[5];
  uint64_t v7 = type metadata accessor for ExtensionFieldValueSet(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
  uint64_t v8 = a1 + a2[6];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL);
  uint64_t v10 = a1 + a2[7];
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v10, 1LL, v11);
  if (!(_DWORD)result)
  {
    v5(v10, v4);
    return swift_release(*(void *)(v10 + *(int *)(v11 + 20)));
  }

  return result;
}

uint64_t sub_10008291C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for ExtensionFieldValueSet(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL);
  uint64_t v16 = *((void *)v15 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1LL, v15))
  {
    uint64_t v17 = sub_100003A0C(&qword_1003550D0);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v13, (uint64_t)v14, v6);
    uint64_t v18 = v15[5];
    uint64_t v19 = &v13[v18];
    uint64_t v20 = &v14[v18];
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = v15[6];
    uint64_t v22 = &v13[v21];
    uint64_t v23 = &v14[v21];
    *(void *)uint64_t v22 = *(void *)v23;
    v22[8] = v23[8];
    uint64_t v24 = v15[7];
    uint64_t v25 = &v13[v24];
    uint64_t v26 = &v14[v24];
    *(void *)uint64_t v25 = *(void *)v26;
    v25[8] = v26[8];
    uint64_t v27 = v15[8];
    uint64_t v28 = &v13[v27];
    uint64_t v29 = &v14[v27];
    *(void *)uint64_t v28 = *(void *)v29;
    v28[8] = v29[8];
    (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0LL, 1LL, v15);
  }

  uint64_t v30 = a3[7];
  int v31 = (char *)(a1 + v30);
  uint64_t v32 = (char *)(a2 + v30);
  uint64_t v33 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0LL);
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1LL, v33))
  {
    uint64_t v35 = sub_100003A0C(&qword_1003550D8);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v31, (uint64_t)v32, v6);
    uint64_t v36 = *(int *)(v33 + 20);
    uint64_t v37 = *(void *)&v32[v36];
    *(void *)&v31[v36] = v37;
    uint64_t v38 = *(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56);
    swift_retain(v37);
    v38(v31, 0LL, 1LL, v33);
  }

  return a1;
}

uint64_t sub_100082B34(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v69 = *(void *)(v6 - 8);
  uint64_t v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 24);
  v68(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for ExtensionFieldValueSet(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24LL))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, int *))(v15 + 48);
  int v17 = v16(v12, 1LL, v14);
  int v18 = v16(v13, 1LL, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v12, v13, v6);
      uint64_t v19 = v14[5];
      uint64_t v20 = &v12[v19];
      uint64_t v21 = &v13[v19];
      char v22 = v21[8];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v22;
      uint64_t v23 = v14[6];
      uint64_t v24 = &v12[v23];
      uint64_t v25 = &v13[v23];
      char v26 = v25[8];
      *(void *)uint64_t v24 = *(void *)v25;
      v24[8] = v26;
      uint64_t v27 = v14[7];
      uint64_t v28 = &v12[v27];
      uint64_t v29 = &v13[v27];
      char v30 = v29[8];
      *(void *)uint64_t v28 = *(void *)v29;
      v28[8] = v30;
      uint64_t v31 = v14[8];
      uint64_t v32 = &v12[v31];
      uint64_t v33 = &v13[v31];
      char v34 = v33[8];
      *(void *)uint64_t v32 = *(void *)v33;
      v32[8] = v34;
      (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0LL, 1LL, v14);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v18)
  {
    sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
LABEL_6:
    uint64_t v35 = sub_100003A0C(&qword_1003550D0);
    memcpy(v12, v13, *(void *)(*(void *)(v35 - 8) + 64LL));
    goto LABEL_7;
  }

  v68((uint64_t)v12, (uint64_t)v13, v6);
  uint64_t v49 = v14[5];
  char v50 = &v12[v49];
  char v51 = &v13[v49];
  char v52 = v51[8];
  *(void *)char v50 = *(void *)v51;
  v50[8] = v52;
  uint64_t v53 = v14[6];
  char v54 = &v12[v53];
  uint64_t v55 = &v13[v53];
  char v56 = v55[8];
  *(void *)char v54 = *(void *)v55;
  v54[8] = v56;
  uint64_t v57 = v14[7];
  uint64_t v58 = &v12[v57];
  uint64_t v59 = &v13[v57];
  char v60 = v59[8];
  *(void *)uint64_t v58 = *(void *)v59;
  v58[8] = v60;
  uint64_t v61 = v14[8];
  uint64_t v62 = &v12[v61];
  uint64_t v63 = &v13[v61];
  char v64 = v63[8];
  *(void *)uint64_t v62 = *(void *)v63;
  v62[8] = v64;
LABEL_7:
  uint64_t v36 = a3[7];
  uint64_t v37 = (char *)(a1 + v36);
  uint64_t v38 = (char *)(a2 + v36);
  uint64_t v39 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0LL);
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
  int v42 = v41(v37, 1LL, v39);
  int v43 = v41(v38, 1LL, v39);
  if (!v42)
  {
    if (!v43)
    {
      v68((uint64_t)v37, (uint64_t)v38, v6);
      uint64_t v65 = *(int *)(v39 + 20);
      uint64_t v66 = *(void *)&v38[v65];
      uint64_t v67 = *(void *)&v37[v65];
      *(void *)&v37[v65] = v66;
      swift_retain(v66);
      swift_release(v67);
      return a1;
    }

    sub_100004090((uint64_t)v37, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
    goto LABEL_12;
  }

  if (v43)
  {
LABEL_12:
    uint64_t v47 = sub_100003A0C(&qword_1003550D8);
    memcpy(v37, v38, *(void *)(*(void *)(v47 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v37, v38, v6);
  uint64_t v44 = *(int *)(v39 + 20);
  uint64_t v45 = *(void *)&v38[v44];
  *(void *)&v37[v44] = v45;
  uint64_t v46 = *(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56);
  swift_retain(v45);
  v46(v37, 0LL, 1LL, v39);
  return a1;
}

uint64_t sub_100082E80(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for ExtensionFieldValueSet(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL);
  uint64_t v16 = *((void *)v15 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1LL, v15))
  {
    uint64_t v17 = sub_100003A0C(&qword_1003550D0);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v13, (uint64_t)v14, v6);
    uint64_t v18 = v15[5];
    uint64_t v19 = &v13[v18];
    uint64_t v20 = &v14[v18];
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = v15[6];
    char v22 = &v13[v21];
    uint64_t v23 = &v14[v21];
    *(void *)char v22 = *(void *)v23;
    v22[8] = v23[8];
    uint64_t v24 = v15[7];
    uint64_t v25 = &v13[v24];
    char v26 = &v14[v24];
    *(void *)uint64_t v25 = *(void *)v26;
    v25[8] = v26[8];
    uint64_t v27 = v15[8];
    uint64_t v28 = &v13[v27];
    uint64_t v29 = &v14[v27];
    *(void *)uint64_t v28 = *(void *)v29;
    v28[8] = v29[8];
    (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0LL, 1LL, v15);
  }

  uint64_t v30 = a3[7];
  uint64_t v31 = (char *)(a1 + v30);
  uint64_t v32 = (char *)(a2 + v30);
  uint64_t v33 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0LL);
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1LL, v33))
  {
    uint64_t v35 = sub_100003A0C(&qword_1003550D8);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v31, (uint64_t)v32, v6);
    *(void *)&v31[*(int *)(v33 + 20)] = *(void *)&v32[*(int *)(v33 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0LL, 1LL, v33);
  }

  return a1;
}

uint64_t sub_100083094(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v57 = *(void *)(v6 - 8);
  char v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 40);
  v56(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for ExtensionFieldValueSet(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, int *))(v15 + 48);
  int v17 = v16(v12, 1LL, v14);
  int v18 = v16(v13, 1LL, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v12, v13, v6);
      uint64_t v19 = v14[5];
      uint64_t v20 = &v12[v19];
      uint64_t v21 = &v13[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v14[6];
      uint64_t v23 = &v12[v22];
      uint64_t v24 = &v13[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      uint64_t v25 = v14[7];
      char v26 = &v12[v25];
      uint64_t v27 = &v13[v25];
      *(void *)char v26 = *(void *)v27;
      v26[8] = v27[8];
      uint64_t v28 = v14[8];
      uint64_t v29 = &v12[v28];
      uint64_t v30 = &v13[v28];
      *(void *)uint64_t v29 = *(void *)v30;
      v29[8] = v30[8];
      (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0LL, 1LL, v14);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v18)
  {
    sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
LABEL_6:
    uint64_t v31 = sub_100003A0C(&qword_1003550D0);
    memcpy(v12, v13, *(void *)(*(void *)(v31 - 8) + 64LL));
    goto LABEL_7;
  }

  v56((uint64_t)v12, (uint64_t)v13, v6);
  uint64_t v42 = v14[5];
  int v43 = &v12[v42];
  uint64_t v44 = &v13[v42];
  *(void *)int v43 = *(void *)v44;
  v43[8] = v44[8];
  uint64_t v45 = v14[6];
  uint64_t v46 = &v12[v45];
  uint64_t v47 = &v13[v45];
  *(void *)uint64_t v46 = *(void *)v47;
  v46[8] = v47[8];
  uint64_t v48 = v14[7];
  uint64_t v49 = &v12[v48];
  char v50 = &v13[v48];
  *(void *)uint64_t v49 = *(void *)v50;
  v49[8] = v50[8];
  uint64_t v51 = v14[8];
  char v52 = &v12[v51];
  uint64_t v53 = &v13[v51];
  *(void *)char v52 = *(void *)v53;
  v52[8] = v53[8];
LABEL_7:
  uint64_t v32 = a3[7];
  uint64_t v33 = (char *)(a1 + v32);
  uint64_t v34 = (char *)(a2 + v32);
  uint64_t v35 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0LL);
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  int v38 = v37(v33, 1LL, v35);
  int v39 = v37(v34, 1LL, v35);
  if (!v38)
  {
    if (!v39)
    {
      v56((uint64_t)v33, (uint64_t)v34, v6);
      uint64_t v54 = *(int *)(v35 + 20);
      uint64_t v55 = *(void *)&v33[v54];
      *(void *)&v33[v54] = *(void *)&v34[v54];
      swift_release(v55);
      return a1;
    }

    sub_100004090((uint64_t)v33, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
    goto LABEL_12;
  }

  if (v39)
  {
LABEL_12:
    uint64_t v40 = sub_100003A0C(&qword_1003550D8);
    memcpy(v33, v34, *(void *)(*(void *)(v40 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v33, v34, v6);
  *(void *)&v33[*(int *)(v35 + 20)] = *(void *)&v34[*(int *)(v35 + 20)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0LL, 1LL, v35);
  return a1;
}

uint64_t sub_1000833D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000833E0);
}

uint64_t sub_1000833E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }

  else
  {
    uint64_t v11 = type metadata accessor for ExtensionFieldValueSet(0LL);
    uint64_t v12 = *(void *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      uint64_t v8 = v11;
      uint64_t v13 = a3[5];
    }

    else
    {
      uint64_t v14 = sub_100003A0C(&qword_1003550D0);
      uint64_t v12 = *(void *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        uint64_t v8 = v14;
        uint64_t v13 = a3[6];
      }

      else
      {
        uint64_t v8 = sub_100003A0C(&qword_1003550D8);
        uint64_t v12 = *(void *)(v8 - 8);
        uint64_t v13 = a3[7];
      }
    }

    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_1000834A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000834B0);
}

uint64_t sub_1000834B0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v13 = type metadata accessor for ExtensionFieldValueSet(0LL);
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v15 = a4[5];
    }

    else
    {
      uint64_t v16 = sub_100003A0C(&qword_1003550D0);
      uint64_t v14 = *(void *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        uint64_t v10 = v16;
        uint64_t v15 = a4[6];
      }

      else
      {
        uint64_t v10 = sub_100003A0C(&qword_1003550D8);
        uint64_t v14 = *(void *)(v10 - 8);
        uint64_t v15 = a4[7];
      }
    }

    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_10008357C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v10[0] = *(void *)(v2 - 8) + 64LL;
    uint64_t v4 = type metadata accessor for ExtensionFieldValueSet(319LL);
    if (v5 <= 0x3F)
    {
      v10[1] = *(void *)(v4 - 8) + 64LL;
      sub_1000119EC(319LL, &qword_100355178, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
      if (v7 <= 0x3F)
      {
        v10[2] = *(void *)(v6 - 8) + 64LL;
        sub_1000119EC( 319LL,  (unint64_t *)&unk_100355180,  type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
        if (v9 <= 0x3F)
        {
          void v10[3] = *(void *)(v8 - 8) + 64LL;
          swift_initStructMetadata(a1, 256LL, 4LL, v10, a1 + 16);
        }
      }
    }
  }

uint64_t sub_100083658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100083664);
}

uint64_t sub_100083664(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t sub_1000836A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000836AC);
}

uint64_t sub_1000836AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t sub_1000836EC(uint64_t a1)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "\t";
    void v4[2] = "\t";
    v4[3] = "\t";
    v4[4] = "\t";
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_100083764@<X0>(void *a1@<X8>)
{
  uint64_t v1 = sub_100003958(a1);
  uint64_t v2 = ALResultOptions._maxBatchSize.getter(v1);
  if ((v2 & 0x100000000LL) == 0) {
    uint64_t v2 = sub_100004410(v2);
  }
  uint64_t v3 = ALResultOptions._intervalSec.getter(v2);
  if ((v3 & 0x100000000LL) == 0) {
    uint64_t v3 = sub_100004520(*(float *)&v3);
  }
  uint64_t v4 = ALResultOptions._maxAgeSec.getter(v3);
  if ((v4 & 0x100000000LL) == 0) {
    uint64_t v4 = sub_100004638(*(float *)&v4);
  }
  uint64_t started = ALResultOptions._startCfaTimeSec.getter(v4);
  if ((v6 & 1) == 0) {
    uint64_t started = sub_100004934(*(double *)&started);
  }
  uint64_t result = ALResultOptions._endCfaTimeSec.getter(started);
  if ((v8 & 1) == 0) {
    return sub_100004A4C(*(double *)&result);
  }
  return result;
}

uint64_t sub_100083800()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  uint64_t v1 = __chkstk_darwin(v0);
  uint64_t v3 = (char *)v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v1);
  unint64_t v5 = (void *)((char *)v14 - v4);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  __chkstk_darwin(v6);
  char v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004C14((uint64_t)v8);
  sub_100003720(3);
  uint64_t v9 = sub_100003958(v5);
  float v10 = ALResultOptions.intervalSec.getter(v9);
  sub_100004520(v10);
  sub_10000404C((uint64_t)v5, (uint64_t)v3, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  sub_100003A60((uint64_t)v3);
  uint64_t v11 = sub_10000FD98( (unint64_t *)&qword_100351010,  type metadata accessor for CLP_LogEntry_AONLoc_Request,  (uint64_t)&unk_1002B361C);
  uint64_t v12 = Message.serializedData(partial:)(0LL, v6, v11);
  sub_100004090((uint64_t)v5, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  sub_100004090((uint64_t)v8, type metadata accessor for CLP_LogEntry_AONLoc_Request);
  return v12;
}

uint64_t sub_100083980(uint64_t a1)
{
  if (sub_1000045AC())
  {
    float v2 = sub_1000044EC();
    ALResultOptions._intervalSec.setter(LODWORD(v2));
  }

  return sub_100004090(a1, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

uint64_t sub_1000839F0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v25 = a3;
  uint64_t v6 = type metadata accessor for ALResultOptions(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v28 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for BinaryDecodingOptions(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  int v17 = (char *)&v24 - v16;
  uint64_t v27 = 0LL;
  memset(v26, 0, sizeof(v26));
  uint64_t v18 = sub_100017F58(a1, a2);
  BinaryDecodingOptions.init()(v18);
  uint64_t v19 = sub_10000FD98( &qword_100351028,  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions,  (uint64_t)&unk_1002B37AC);
  Message.init(serializedData:extensions:partial:options:)(a1, a2, v26, 0LL, v11, v12, v19);
  if (v3) {
    return sub_100017F9C(a1, a2);
  }
  uint64_t v21 = v25;
  uint64_t v22 = sub_10000404C((uint64_t)v17, (uint64_t)v15, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  ALResultOptions.init()(v22);
  if (sub_1000045AC())
  {
    float v23 = sub_1000044EC();
    LOBYTE(v26[0]) = 0;
    ALResultOptions._intervalSec.setter(LODWORD(v23));
  }

  sub_100004090((uint64_t)v15, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v21, v28, v6);
  sub_100017F9C(a1, a2);
  return sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

void sub_100083C10(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100083C3C()
{
  uint64_t v1 = enum case for ALWiFiScanSingleAccessPoint.Band.unknown(_:);
  uint64_t v2 = ((uint64_t (*)(void))type metadata accessor for ALWiFiScanSingleAccessPoint.Band)(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 104LL))(v0, v1, v2);
}

uint64_t sub_100083C94(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ALWiFiScanSingleAccessPoint.Band(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(a1, v2);
  if (v4 != enum case for ALWiFiScanSingleAccessPoint.Band.band6G(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return 0LL;
  }

  return 3LL;
}

void sub_100083D58(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100083D84()
{
  uint64_t v1 = enum case for ALWiFiScanSingleAccessPoint.Mode.unknown(_:);
  uint64_t v2 = ((uint64_t (*)(void))type metadata accessor for ALWiFiScanSingleAccessPoint.Mode)(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 104LL))(v0, v1, v2);
}

uint64_t sub_100083DDC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ALWiFiScanSingleAccessPoint.Mode(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(a1, v2);
  if (v4 != enum case for ALWiFiScanSingleAccessPoint.Mode.others(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return 0LL;
  }

  return 3LL;
}

uint64_t sub_100083EA0()
{
  uint64_t v0 = sub_100003A0C(&qword_100355280);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v37 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for ALWiFiScanSingleAccessPoint.Mode(0LL);
  uint64_t v40 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  int v38 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  int v39 = (char *)&v37 - v6;
  uint64_t v7 = sub_100003A0C((uint64_t *)&unk_100368080);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for ALWiFiScanSingleAccessPoint.Band(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  int v17 = (char *)&v37 - v16;
  uint64_t v18 = ALWiFiScanSingleAccessPoint._mac.getter(v15);
  if ((v19 & 1) == 0) {
    uint64_t v18 = sub_1000B4DA8(v18);
  }
  uint64_t v20 = ALWiFiScanSingleAccessPoint._ssid.getter(v18);
  if (v21) {
    uint64_t v20 = sub_1000B4E2C(v20, v21);
  }
  uint64_t v22 = ALWiFiScanSingleAccessPoint._rssidB.getter(v20);
  if ((v22 & 0x100000000LL) == 0) {
    uint64_t v22 = sub_1000B4EC4(v22);
  }
  uint64_t v23 = ALWiFiScanSingleAccessPoint._channel.getter(v22);
  if ((v23 & 0x100000000LL) == 0) {
    uint64_t v23 = sub_1000B5074(v23);
  }
  uint64_t v24 = ALWiFiScanSingleAccessPoint._ageSec.getter(v23);
  if ((v24 & 0x100000000LL) == 0) {
    uint64_t v24 = sub_1000B5128(*(float *)&v24);
  }
  uint64_t v25 = ALWiFiScanSingleAccessPoint._isMoving.getter(v24);
  uint64_t v26 = ALWiFiScanSingleAccessPoint._frequencyKhz.getter(v25);
  if ((v26 & 0x100000000LL) == 0) {
    uint64_t v26 = sub_1000B5418(v26);
  }
  uint64_t v27 = ALWiFiScanSingleAccessPoint._isAph.getter(v26);
  ALWiFiScanSingleAccessPoint._band.getter(v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10) == 1)
  {
    uint64_t v28 = sub_100015764((uint64_t)v9, (uint64_t *)&unk_100368080);
    goto LABEL_28;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v17, v9, v10);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v17, v10);
  int v29 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v14, v10);
  if (v29 != enum case for ALWiFiScanSingleAccessPoint.Band.unknown(_:))
  {
    if (v29 == enum case for ALWiFiScanSingleAccessPoint.Band.band2G(_:))
    {
      char v30 = 1;
      goto LABEL_27;
    }

    if (v29 == enum case for ALWiFiScanSingleAccessPoint.Band.band5G(_:))
    {
      char v30 = 2;
      goto LABEL_27;
    }

    if (v29 == enum case for ALWiFiScanSingleAccessPoint.Band.band6G(_:))
    {
      char v30 = 3;
      goto LABEL_27;
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }

  char v30 = 0;
LABEL_27:
  sub_1000B5324(v30);
  uint64_t v28 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v17, v10);
LABEL_28:
  ALWiFiScanSingleAccessPoint._mode.getter(v28);
  uint64_t v31 = v40;
  uint64_t v33 = v39;
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v39, v2, v3);
  uint64_t v34 = v38;
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v38, v33, v3);
  int v35 = (*(uint64_t (**)(char *, uint64_t))(v31 + 88))(v34, v3);
  if (v35 != enum case for ALWiFiScanSingleAccessPoint.Mode.unknown(_:))
  {
    if (v35 == enum case for ALWiFiScanSingleAccessPoint.Mode.ibss(_:))
    {
      char v36 = 1;
      goto LABEL_38;
    }

    if (v35 == enum case for ALWiFiScanSingleAccessPoint.Mode.infra(_:))
    {
      char v36 = 2;
      goto LABEL_38;
    }

    if (v35 == enum case for ALWiFiScanSingleAccessPoint.Mode.others(_:))
    {
      char v36 = 3;
      goto LABEL_38;
    }

    (*(void (**)(char *, uint64_t))(v31 + 8))(v34, v3);
  }

  char v36 = 0;
LABEL_38:
  sub_1000B4F70(v36);
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v33, v3);
}

uint64_t sub_1000842E8@<X0>(uint64_t a1@<X8>)
{
  return sub_100083EA0();
}

uint64_t sub_10008430C()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000B54F4((uint64_t)v2);
  sub_100083EA0();
  uint64_t v3 = sub_10000FD98( &qword_100355288,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint,  (uint64_t)&unk_1002C5878);
  uint64_t v4 = Message.serializedData(partial:)(0LL, v0, v3);
  sub_100004090((uint64_t)v2, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  return v4;
}

uint64_t sub_1000843E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ALWiFiScanSingleAccessPoint.Mode(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v30 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100003A0C(&qword_100355280);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for ALWiFiScanSingleAccessPoint.Band(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100003A0C((uint64_t *)&unk_100368080);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  ALWiFiScanSingleAccessPoint.init(_:)(a2);
  if (sub_1000B4E08())
  {
    uint64_t v17 = sub_1000B4D9C();
    ALWiFiScanSingleAccessPoint._mac.setter(v17, 0LL);
  }

  if (sub_1000B4EA0())
  {
    uint64_t v18 = sub_1000B4E20();
    ALWiFiScanSingleAccessPoint._ssid.setter(v18);
  }

  if (sub_1000B4F20())
  {
    unsigned int v19 = sub_1000B4EB8();
    char v31 = 0;
    ALWiFiScanSingleAccessPoint._rssidB.setter(v19);
  }

  if (sub_1000B5104())
  {
    unsigned int v20 = sub_1000B5034();
    char v32 = 0;
    ALWiFiScanSingleAccessPoint._channel.setter(v20);
  }

  if (sub_1000B518C())
  {
    float v21 = sub_1000B511C();
    char v33 = 0;
    ALWiFiScanSingleAccessPoint._ageSec.setter(LODWORD(v21));
  }

  if (sub_1000B52B0())
  {
    char v22 = sub_1000B5250();
    ALWiFiScanSingleAccessPoint._isMoving.setter(v22 & 1);
  }

  if (sub_1000B549C())
  {
    unsigned int v23 = sub_1000B53E8();
    char v34 = 0;
    ALWiFiScanSingleAccessPoint._frequencyKhz.setter(v23);
  }

  if (sub_1000B539C())
  {
    char v24 = sub_1000B52FC();
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, *(unsigned int *)*(&off_10033ECC0 + v24), v10);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v13, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0LL, 1LL, v10);
    ALWiFiScanSingleAccessPoint._band.setter(v16);
  }

  if (sub_1000B4FE8())
  {
    char v25 = sub_1000B4F38();
    uint64_t v26 = v30;
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v30, *(unsigned int *)*(&off_10033ECE0 + v25), v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v9, v26, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v9, 0LL, 1LL, v4);
    ALWiFiScanSingleAccessPoint._mode.setter(v9);
  }

  if (sub_1000B5204())
  {
    char v27 = sub_1000B51A4();
    ALWiFiScanSingleAccessPoint._isAph.setter(v27 & 1);
  }

  return sub_100004090(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_10008473C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
  uint64_t v46 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v47 = (uint64_t)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for ALWiFiScanSingleAccessPoint(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v49 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v44 - v10;
  uint64_t v12 = sub_100003A0C(&qword_1003517B8);
  __chkstk_darwin(v12);
  uint64_t v45 = (uint64_t)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0LL);
  __chkstk_darwin(v17);
  unsigned int v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for ALWiFiScanResult(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  char v24 = (char *)&v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  ALWiFiScanResult.init()(v22);
  char v25 = *(void (**)(uint64_t, char *, uint64_t))(v21 + 32);
  uint64_t v48 = a2;
  v25(a2, v24, v20);
  LOBYTE(v24) = sub_1000B5BA0();
  sub_10000404C(a1, (uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  if ((v24 & 1) != 0)
  {
    sub_1000B5A28((uint64_t)v16);
    BOOL v26 = sub_10008A208();
    sub_100004090((uint64_t)v16, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    sub_100004090((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
    if (v26)
    {
      sub_1000B5A28((uint64_t)v16);
      uint64_t v27 = v45;
      sub_1000869C4((uint64_t)v16);
      uint64_t v28 = type metadata accessor for ALTimeStamp(0LL);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(v27, 0LL, 1LL, v28);
      ALWiFiScanResult._scanTimestamp.setter(v27);
    }
  }

  else
  {
    sub_100004090((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  }

  uint64_t v29 = *(void *)a1;
  uint64_t v30 = *(void *)(*(void *)a1 + 16LL);
  char v31 = v49;
  uint64_t v44 = *(void *)a1;
  uint64_t v45 = a1;
  if (v30)
  {
    uint64_t v32 = v29 + ((*(unsigned __int8 *)(v46 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80));
    uint64_t v46 = *(void *)(v46 + 72);
    swift_bridgeObjectRetain(v29);
    do
    {
      uint64_t v33 = v47;
      sub_10000404C(v32, v47, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
      char v34 = (void (*)(_BYTE *, void))ALWiFiScanResult._scanTimestamp.modify(v50);
      sub_1000843E0(v33, v35);
      v34(v50, 0LL);
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v31, v11, v6);
      char v36 = (void (*)(_BYTE *, void))ALWiFiScanResult._accessPoints.modify(v50);
      int v38 = v37;
      unint64_t v39 = *v37;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v37);
      *int v38 = v39;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v39 = sub_100017FE0( 0,  *(void *)(v39 + 16) + 1LL,  1,  v39,  &qword_1003682F0,  (uint64_t (*)(void))&type metadata accessor for ALWiFiScanSingleAccessPoint);
        *int v38 = v39;
      }

      unint64_t v42 = *(void *)(v39 + 16);
      unint64_t v41 = *(void *)(v39 + 24);
      if (v42 >= v41 >> 1)
      {
        unint64_t v39 = sub_100017FE0( v41 > 1,  v42 + 1,  1,  v39,  &qword_1003682F0,  (uint64_t (*)(void))&type metadata accessor for ALWiFiScanSingleAccessPoint);
        *int v38 = v39;
      }

      *(void *)(v39 + 16) = v42 + 1;
      char v31 = v49;
      (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))( v39 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
      + *(void *)(v7 + 72) * v42,
        v49,
        v6);
      v36(v50, 0LL);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
      v32 += v46;
      --v30;
    }

    while (v30);
  }

  else
  {
    swift_bridgeObjectRetain(v29);
  }

  sub_100004090(v45, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  return swift_bridgeObjectRelease(v44);
}

uint64_t ALWiFiScanResult.init(data:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100017774( a1,  a2,  type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult,  &qword_100355290,  (uint64_t)&unk_1002C5B48,  (void (*)(char *))sub_10008473C,  a3);
}

uint64_t sub_100084BA8@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
  uint64_t v34 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for ALWiFiScanSingleAccessPoint(0LL);
  uint64_t v35 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  __chkstk_darwin(v8);
  uint64_t v33 = (uint64_t)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100003A0C(&qword_1003517B8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for ALTimeStamp(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_1000B5C18(a1);
  ALWiFiScanResult._scanTimestamp.getter(v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13) == 1)
  {
    uint64_t v18 = sub_100015764((uint64_t)v12, &qword_1003517B8);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    uint64_t v19 = v33;
    sub_100086A9C(v33);
    sub_1000B5A34(v19);
    uint64_t v18 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }

  uint64_t v20 = ALWiFiScanResult._accessPoints.getter(v18);
  uint64_t v21 = *(void *)(v20 + 16);
  if (v21)
  {
    unint64_t v22 = v20 + ((*(unsigned __int8 *)(v35 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80));
    uint64_t v23 = *(void *)(v35 + 72);
    uint64_t v32 = v20;
    uint64_t v33 = v23;
    char v24 = *(void (**)(char *, unint64_t, uint64_t))(v35 + 16);
    char v25 = a1;
    do
    {
      v24(v7, v22, v5);
      sub_1000B54F4((uint64_t)v4);
      sub_100083EA0();
      unint64_t v26 = *a1;
      if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
        unint64_t v26 = sub_100017FE0( 0,  *(void *)(v26 + 16) + 1LL,  1,  v26,  &qword_1003552B0,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
      }
      unint64_t v28 = *(void *)(v26 + 16);
      unint64_t v27 = *(void *)(v26 + 24);
      if (v28 >= v27 >> 1) {
        unint64_t v26 = sub_100017FE0( v27 > 1,  v28 + 1,  1,  v26,  &qword_1003552B0,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
      }
      *(void *)(v26 + 16) = v28 + 1;
      sub_100003E68( (uint64_t)v4,  v26 + ((*(unsigned __int8 *)(v34 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))
      + *(void *)(v34 + 72) * v28,
        type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
      a1 = v25;
      *char v25 = v26;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v5);
      v22 += v33;
      --v21;
    }

    while (v21);
    uint64_t v20 = v32;
  }

  swift_bridgeObjectRelease(v20);
  type metadata accessor for ALProtobufUtil();
  uint64_t v29 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0LL);
  uint64_t v30 = sub_10000FD98( &qword_100355290,  type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult,  (uint64_t)&unk_1002C5B48);
  return static ALProtobufUtil.debug<A>(_:)(a1, v29, v30);
}

uint64_t sub_100084F10@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = sub_1000B59C0(a3);
  if ((a2 & 1) == 0)
  {
    sub_1000B55B0(1);
    sub_1000B54F4((uint64_t)v8);
    sub_1000B57B4((uint64_t)v8);
    sub_1000B5650((uint64_t)v8);
    sub_1000B4DA8(a1);
    return sub_1000B57B4((uint64_t)v8);
  }

  return result;
}

uint64_t sub_100084FBC()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!sub_1000B5604()) {
    return 0LL;
  }
  if (!sub_1000B5988()) {
    return 0LL;
  }
  sub_1000B5650((uint64_t)v2);
  BOOL v3 = sub_1000B4E08();
  sub_100004090((uint64_t)v2, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  if (!v3) {
    return 0LL;
  }
  sub_1000B5650((uint64_t)v2);
  uint64_t v4 = sub_1000B4D9C();
  sub_100004090((uint64_t)v2, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  return v4;
}

void sub_100085094(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1000850C0()
{
  uint64_t v1 = enum case for ALWiFiNotification.NotiType.unknown(_:);
  uint64_t v2 = ((uint64_t (*)(void))type metadata accessor for ALWiFiNotification.NotiType)(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 104LL))(v0, v1, v2);
}

uint64_t sub_1000851A0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)((char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = sub_100003A0C((uint64_t *)&unk_100368070);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100003A0C(&qword_1003517B8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100003A0C(&qword_100355298);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  ALWiFiNotification.init()(v18);
  if (sub_1000B628C())
  {
    char v21 = sub_1000B61B8();
    sub_100085094(v21);
    uint64_t v22 = type metadata accessor for ALWiFiNotification.NotiType(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v20, 0LL, 1LL, v22);
    ALWiFiNotification._type.setter(v20);
  }

  if (sub_1000B5F48())
  {
    sub_1000B5C24((uint64_t)v13);
    sub_1000869C4((uint64_t)v13);
    uint64_t v23 = type metadata accessor for ALTimeStamp(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v16, 0LL, 1LL, v23);
    ALWiFiNotification._timestamp.setter(v16);
  }

  if (sub_1000B7100())
  {
    sub_1000B6CB8(v7);
    sub_10008473C((uint64_t)v7, (uint64_t)v10);
    uint64_t v24 = type metadata accessor for ALWiFiScanResult(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56LL))(v10, 0LL, 1LL, v24);
    ALWiFiNotification._scanResult.setter(v10);
  }

  if (sub_1000B6B60())
  {
    sub_1000B6720((uint64_t)v4);
    uint64_t v25 = sub_100084FBC();
    uint64_t v27 = v26 & 1;
    sub_100004090((uint64_t)v4, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
    ALWiFiNotification._associatedMac.setter(v25, v27);
  }

  if (sub_1000B7330())
  {
    char v28 = sub_1000B7258();
    ALWiFiNotification._simulated.setter(v28 & 1);
  }

  if (sub_1000B74C8())
  {
    char v29 = sub_1000B73F0();
    ALWiFiNotification._available.setter(v29 & 1);
  }

  if (sub_1000B77F8())
  {
    char v30 = sub_1000B7720();
    ALWiFiNotification._isApAwake.setter(v30 & 1);
  }

  return sub_100004090(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
}

uint64_t sub_1000854DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0LL);
  __chkstk_darwin(v2);
  uint64_t v83 = (uint64_t)&v78 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
  uint64_t v93 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v82 = (uint64_t)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v78 - v7;
  uint64_t v9 = type metadata accessor for ALWiFiScanSingleAccessPoint(0LL);
  uint64_t v94 = *(void *)(v9 - 8);
  uint64_t v95 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v81 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0LL);
  __chkstk_darwin(v81);
  uint64_t v13 = (unint64_t *)((char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v14 = sub_100003A0C((uint64_t *)&unk_100368070);
  __chkstk_darwin(v14);
  uint64_t v87 = (char *)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v92 = type metadata accessor for ALWiFiScanResult(0LL);
  uint64_t v90 = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  uint64_t v89 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  __chkstk_darwin(v17);
  uint64_t v84 = (uint64_t)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_100003A0C(&qword_1003517B8);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v80 = (char *)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  uint64_t v85 = (char *)&v78 - v22;
  uint64_t v86 = type metadata accessor for ALTimeStamp(0LL);
  uint64_t v88 = *(void *)(v86 - 8);
  uint64_t v23 = __chkstk_darwin(v86);
  uint64_t v78 = (char *)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23);
  uint64_t v79 = (char *)&v78 - v25;
  uint64_t v26 = sub_100003A0C(&qword_100355298);
  __chkstk_darwin(v26);
  char v28 = (char *)&v78 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = type metadata accessor for ALWiFiNotification.NotiType(0LL);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v78 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v31);
  uint64_t v35 = (char *)&v78 - v34;
  uint64_t v36 = sub_1000B78B8(a1);
  ALWiFiNotification._type.getter(v36);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1LL, v29) == 1)
  {
    uint64_t v37 = sub_100015764((uint64_t)v28, &qword_100355298);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v35, v28, v29);
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v33, v35, v29);
    char v38 = sub_1000867CC((uint64_t)v33);
    sub_1000B61C4(v38);
    uint64_t v37 = (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v35, v29);
  }

  uint64_t v91 = a1;
  uint64_t v39 = (uint64_t)v85;
  ALWiFiNotification._timestamp.getter(v37);
  uint64_t v40 = v88;
  unint64_t v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48);
  uint64_t v42 = v86;
  if (v41(v39, 1LL, v86) == 1)
  {
    uint64_t v43 = sub_100015764(v39, &qword_1003517B8);
  }

  else
  {
    uint64_t v44 = v79;
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))(v79, v39, v42);
    uint64_t v45 = v84;
    sub_100086A9C(v84);
    sub_1000B5C48(v45);
    uint64_t v43 = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v44, v42);
  }

  uint64_t v46 = (uint64_t)v87;
  ALWiFiNotification._scanResult.getter(v43);
  uint64_t v47 = v90;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v90 + 48))(v46, 1LL, v92) == 1)
  {
    uint64_t v48 = sub_100015764(v46, (uint64_t *)&unk_100368070);
    uint64_t v49 = v91;
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v89, v46, v92);
    uint64_t v50 = sub_1000B5C18(v13);
    uint64_t v51 = (uint64_t)v80;
    ALWiFiScanResult._scanTimestamp.getter(v50);
    if (v41(v51, 1LL, v42) == 1)
    {
      uint64_t v52 = sub_100015764(v51, &qword_1003517B8);
    }

    else
    {
      uint64_t v53 = v88;
      uint64_t v54 = v78;
      (*(void (**)(char *, uint64_t, uint64_t))(v88 + 32))(v78, v51, v42);
      uint64_t v55 = v84;
      sub_100086A9C(v84);
      sub_1000B5A34(v55);
      uint64_t v52 = (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v54, v42);
    }

    uint64_t v49 = v91;
    uint64_t v56 = ALWiFiScanResult._accessPoints.getter(v52);
    uint64_t v57 = *(void *)(v56 + 16);
    if (v57)
    {
      uint64_t v58 = v95;
      unint64_t v59 = (*(unsigned __int8 *)(v94 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80);
      uint64_t v88 = v56;
      unint64_t v60 = v56 + v59;
      uint64_t v61 = *(void *)(v94 + 72);
      uint64_t v62 = *(void (**)(char *, unint64_t, uint64_t))(v94 + 16);
      do
      {
        v62(v11, v60, v58);
        sub_1000B54F4((uint64_t)v8);
        sub_100083EA0();
        unint64_t v63 = *v13;
        if ((swift_isUniquelyReferenced_nonNull_native(*v13) & 1) == 0) {
          unint64_t v63 = sub_100017FE0( 0,  *(void *)(v63 + 16) + 1LL,  1,  v63,  &qword_1003552B0,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
        }
        unint64_t v65 = *(void *)(v63 + 16);
        unint64_t v64 = *(void *)(v63 + 24);
        if (v65 >= v64 >> 1) {
          unint64_t v63 = sub_100017FE0( v64 > 1,  v65 + 1,  1,  v63,  &qword_1003552B0,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
        }
        *(void *)(v63 + 16) = v65 + 1;
        sub_100003E68( (uint64_t)v8,  v63 + ((*(unsigned __int8 *)(v93 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80))
        + *(void *)(v93 + 72) * v65,
          type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
        *uint64_t v13 = v63;
        uint64_t v58 = v95;
        (*(void (**)(char *, uint64_t))(v94 + 8))(v11, v95);
        v60 += v61;
        --v57;
      }

      while (v57);
      swift_bridgeObjectRelease(v88);
      uint64_t v49 = v91;
    }

    else
    {
      swift_bridgeObjectRelease(v56);
    }

    type metadata accessor for ALProtobufUtil();
    uint64_t v66 = sub_10000FD98( &qword_100355290,  type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult,  (uint64_t)&unk_1002C5B48);
    static ALProtobufUtil.debug<A>(_:)(v13, v81, v66);
    sub_1000B6DF8((uint64_t)v13);
    uint64_t v48 = (*(uint64_t (**)(char *, uint64_t))(v90 + 8))(v89, v92);
  }

  uint64_t v67 = ALWiFiNotification._associatedMac.getter(v48);
  if ((v68 & 1) == 0)
  {
    uint64_t v69 = v67;
    uint64_t v70 = v83;
    sub_1000B59C0(v83);
    sub_1000B55B0(1);
    uint64_t v71 = v82;
    sub_1000B54F4(v82);
    sub_1000B57B4(v71);
    sub_1000B5650(v71);
    sub_1000B4DA8(v69);
    sub_1000B57B4(v71);
    uint64_t v67 = sub_1000B685C(v70);
  }

  uint64_t v72 = ALWiFiNotification._simulated.getter(v67);
  uint64_t v73 = ALWiFiNotification._available.getter(v72);
  char isAp = ALWiFiNotification._isApAwake.getter(v73);
  if (isAp != 2) {
    sub_1000B7734(isAp & 1);
  }
  type metadata accessor for ALProtobufUtil();
  uint64_t v75 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0LL);
  uint64_t v76 = sub_10000FD98( &qword_100350F88,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  (uint64_t)&unk_1002C5CB0);
  return static ALProtobufUtil.debug<A>(_:)(v49, v75, v76);
}

uint64_t sub_100085CD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v45 = a1;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for ALWiFiNotification(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for ALWiFiNotifications(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  ALWiFiNotifications.init()(v16);
  uint64_t v19 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 32);
  uint64_t v20 = v45;
  v19(a2, v18, v14);
  if (sub_100005E20()
    && (uint64_t v48 = v10,
        v49[0] = sub_100005BDC(),
        char v50 = 4,
        unint64_t v21 = sub_10000FF1C(),
        (dispatch thunk of static Equatable.== infix(_:_:)( v49,  &v50,  &type metadata for CLP_LogEntry_AONLoc_Indication.TypeEnum,  v21) & 1) != 0)
    && sub_1000069F8())
  {
    uint64_t v22 = v13;
    uint64_t v23 = v13;
    uint64_t v24 = v20;
    sub_100006840(v23);
    uint64_t v25 = *(void *)v22;
    uint64_t v26 = *(void *)(*(void *)v22 + 16LL);
    if (v26)
    {
      uint64_t v43 = *(void *)v22;
      uint64_t v44 = v22;
      uint64_t v27 = v4;
      uint64_t v28 = v25 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
      uint64_t v46 = *(void *)(v27 + 72);
      uint64_t v47 = v7;
      swift_bridgeObjectRetain(v25);
      do
      {
        sub_10000404C(v28, (uint64_t)v6, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
        uint64_t v29 = v6;
        sub_1000851A0((uint64_t)v6);
        uint64_t v30 = a2;
        uint64_t v31 = (void (*)(_BYTE *, void))ALWiFiNotifications._results.modify(v49);
        uint64_t v33 = v32;
        unint64_t v34 = *v32;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v32);
        *uint64_t v33 = v34;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          unint64_t v34 = sub_100017FE0( 0,  *(void *)(v34 + 16) + 1LL,  1,  v34,  &qword_1003552A8,  (uint64_t (*)(void))&type metadata accessor for ALWiFiNotification);
          *uint64_t v33 = v34;
        }

        unint64_t v37 = *(void *)(v34 + 16);
        unint64_t v36 = *(void *)(v34 + 24);
        if (v37 >= v36 >> 1)
        {
          unint64_t v34 = sub_100017FE0( v36 > 1,  v37 + 1,  1,  v34,  &qword_1003552A8,  (uint64_t (*)(void))&type metadata accessor for ALWiFiNotification);
          *uint64_t v33 = v34;
        }

        a2 = v30;
        *(void *)(v34 + 16) = v37 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))( v34 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
        + *(void *)(v8 + 72) * v37,
          v48,
          v47);
        v31(v49, 0LL);
        v28 += v46;
        --v26;
        uint64_t v6 = v29;
      }

      while (v26);
      swift_bridgeObjectRelease(v43);
      uint64_t v22 = v44;
      uint64_t v24 = v45;
    }

    char v41 = sub_100005178();
    ALWiFiNotifications._isLastBatch.setter(v41 & 1);
    sub_100004090(v24, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    char v38 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication;
    uint64_t v39 = (uint64_t)v22;
  }

  else
  {
    char v38 = type metadata accessor for CLP_LogEntry_AONLoc_Indication;
    uint64_t v39 = v20;
  }

  return sub_100004090(v39, v38);
}

uint64_t sub_100086020@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0LL);
  uint64_t v39 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for ALWiFiNotification(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0LL);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v33 = (uint64_t)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v16 = (void *)((char *)v32 - v15);
  sub_10000738C(a1);
  uint64_t v35 = a1;
  sub_100005C2C(4);
  uint64_t v17 = sub_100005270(v16);
  uint64_t v34 = v3;
  uint64_t v18 = ALWiFiNotifications.results.getter(v17);
  uint64_t v19 = *(void *)(v18 + 16);
  if (v19)
  {
    v32[0] = v18;
    v32[1] = v2;
    unint64_t v20 = v18 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v21 = *(void *)(v9 + 72);
    unint64_t v36 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    uint64_t v37 = v21;
    uint64_t v38 = v9;
    do
    {
      v36(v11, v20, v8);
      sub_1000854DC((uint64_t)v7);
      unint64_t v22 = *v16;
      if ((swift_isUniquelyReferenced_nonNull_native(*v16) & 1) == 0) {
        unint64_t v22 = sub_100017FE0( 0,  *(void *)(v22 + 16) + 1LL,  1,  v22,  &qword_1003552A0,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
      }
      unint64_t v24 = *(void *)(v22 + 16);
      unint64_t v23 = *(void *)(v22 + 24);
      if (v24 >= v23 >> 1) {
        unint64_t v22 = sub_100017FE0( v23 > 1,  v24 + 1,  1,  v22,  &qword_1003552A0,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
      }
      *(void *)(v22 + 16) = v24 + 1;
      sub_100003E68( (uint64_t)v7,  v22 + ((*(unsigned __int8 *)(v39 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))
      + *(void *)(v39 + 72) * v24,
        type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
      *uint64_t v16 = v22;
      (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v8);
      v20 += v37;
      --v19;
    }

    while (v19);
    uint64_t v25 = swift_bridgeObjectRelease(v32[0]);
  }

  else
  {
    uint64_t v25 = swift_bridgeObjectRelease(v18);
  }

  char v26 = ALWiFiNotifications.isLastBatch.getter(v25);
  sub_100005184(v26 & 1);
  uint64_t v27 = v33;
  sub_10000404C((uint64_t)v16, v33, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  uint64_t v28 = v35;
  sub_10000685C(v27);
  type metadata accessor for ALProtobufUtil();
  uint64_t v29 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL);
  uint64_t v30 = sub_10000FD98( &qword_100351088,  type metadata accessor for CLP_LogEntry_AONLoc_Indication,  (uint64_t)&unk_1002B3D4C);
  static ALProtobufUtil.debug<A>(_:)(v28, v29, v30);
  return sub_100004090((uint64_t)v16, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t ALWiFiNotifications.init(data:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100017774( a1,  a2,  type metadata accessor for CLP_LogEntry_AONLoc_Indication,  &qword_100351088,  (uint64_t)&unk_1002B3D4C,  (void (*)(char *))sub_100085CD8,  a3);
}

uint64_t ALWiFiNotifications.serializedData()()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for ALWiFiNotifications(0LL);
  uint64_t v47 = *(char **)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v46 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100086020((uint64_t)v11);
  if (!v1)
  {
    uint64_t v12 = sub_10000FD98( &qword_100351088,  type metadata accessor for CLP_LogEntry_AONLoc_Indication,  (uint64_t)&unk_1002B3D4C);
    uint64_t v13 = Message.serializedData(partial:)(0LL, v9, v12);
    unint64_t v15 = v14;
    uint64_t v16 = (uint64_t)v11;
    uint64_t v17 = v6;
    uint64_t v18 = v5;
    sub_100004090(v16, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    uint64_t v44 = v17;
    corelog.getter((uint64_t)v8);
    uint64_t v21 = v46;
    unint64_t v20 = v47;
    (*((void (**)(char *, uint64_t, uint64_t))v47 + 2))(v46, v2, v3);
    sub_100017F58(v13, v15);
    uint64_t v22 = v3;
    uint64_t v45 = v13;
    uint64_t v23 = sub_100017F58(v13, v15);
    unint64_t v24 = v21;
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    int v27 = v26;
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v28 = swift_slowAlloc(22LL, -1LL);
      uint64_t v39 = v22;
      uint64_t v29 = v28;
      uint64_t v42 = swift_slowAlloc(64LL, -1LL);
      uint64_t v50 = v42;
      *(_DWORD *)uint64_t v29 = 136446466;
      int v41 = v27;
      uint64_t v30 = v24;
      uint64_t v31 = ALWiFiNotifications.description.getter();
      unint64_t v33 = v32;
      uint64_t v48 = sub_1000181EC(v31, v32, &v50);
      uint64_t v43 = v18;
      os_log_t v40 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease(v33);
      (*((void (**)(char *, uint64_t))v47 + 1))(v30, v39);
      *(_WORD *)(v29 + 12) = 2082;
      uint64_t v0 = v45;
      sub_100017F58(v45, v15);
      uint64_t v34 = Data.description.getter(v0, v15);
      uint64_t v47 = v8;
      unint64_t v36 = v35;
      sub_100017F9C(v0, v15);
      uint64_t v48 = sub_1000181EC(v34, v36, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v29 + 14, v29 + 22);
      swift_bridgeObjectRelease(v36);
      sub_100017F9C(v0, v15);
      sub_100017F9C(v0, v15);
      os_log_t v37 = v40;
      _os_log_impl( (void *)&_mh_execute_header,  v40,  (os_log_type_t)v41,  "#WiFi,serializedData,notif,%{public}s,data,%{public}s",  (uint8_t *)v29,  0x16u);
      uint64_t v38 = v42;
      swift_arrayDestroy(v42, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v44 + 8))(v47, v43);
    }

    else
    {
      (*((void (**)(char *, uint64_t))v20 + 1))(v24, v22);
      uint64_t v0 = v45;
      sub_100017F9C(v45, v15);
      sub_100017F9C(v0, v15);

      (*(void (**)(char *, uint64_t))(v44 + 8))(v8, v18);
    }
  }

  return v0;
}

uint64_t static ALWiFiNotifications.serializedIndications(results:isLastBatch:)(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for ALWiFiNotifications(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = swift_bridgeObjectRetain(a1);
  ALWiFiNotifications.init(_results:_isLastBatch:)(v8, a2 & 1);
  uint64_t v9 = ALWiFiNotifications.serializedData()();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v9;
}

uint64_t sub_1000867CC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ALWiFiNotification.NotiType(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(a1, v2);
  if (v4 == enum case for ALWiFiNotification.NotiType.unknown(_:)) {
    return 0LL;
  }
  if (v4 == enum case for ALWiFiNotification.NotiType.available(_:)) {
    return 1LL;
  }
  if (v4 == enum case for ALWiFiNotification.NotiType.power(_:)) {
    return 2LL;
  }
  if (v4 == enum case for ALWiFiNotification.NotiType.scanReady(_:)) {
    return 3LL;
  }
  if (v4 == enum case for ALWiFiNotification.NotiType.scan(_:)) {
    return 4LL;
  }
  if (v4 == enum case for ALWiFiNotification.NotiType.scanError(_:)) {
    return 5LL;
  }
  if (v4 == enum case for ALWiFiNotification.NotiType.scanErrorBusy(_:)) {
    return 6LL;
  }
  if (v4 == enum case for ALWiFiNotification.NotiType.linkStatus(_:)) {
    return 7LL;
  }
  if (v4 == enum case for ALWiFiNotification.NotiType.roam(_:)) {
    return 8LL;
  }
  if (v4 == enum case for ALWiFiNotification.NotiType.backgroundEntry(_:)) {
    return 9LL;
  }
  if (v4 == enum case for ALWiFiNotification.NotiType.backgroundExit(_:)) {
    return 10LL;
  }
  if (v4 == enum case for ALWiFiNotification.NotiType.trackingAvailable(_:)) {
    return 11LL;
  }
  if (v4 == enum case for ALWiFiNotification.NotiType.wow(_:)) {
    return 12LL;
  }
  if (v4 == enum case for ALWiFiNotification.NotiType.scanCache(_:)) {
    return 13LL;
  }
  if (v4 != enum case for ALWiFiNotification.NotiType.peerRanging(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return 0LL;
  }

  return 14LL;
}

uint64_t sub_1000869C4(uint64_t a1)
{
  if (sub_10008A0F8())
  {
    double v2 = sub_10008A088();
    ALTimeStamp._cfAbsoluteTimeSec.setter(*(void *)&v2, 0LL);
  }

  if (sub_10008A180())
  {
    double v3 = sub_10008A110();
    ALTimeStamp._machAbsoluteTimeSec.setter(*(void *)&v3, 0LL);
  }

  if (sub_10008A208())
  {
    double v4 = sub_10008A198();
    ALTimeStamp._machContinuousTimeSec.setter(*(void *)&v4, 0LL);
  }

  return sub_100086A60(a1);
}

uint64_t sub_100086A60(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100086A9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1 = sub_10008A220(a1);
  uint64_t v2 = ALTimeStamp.cfAbsoluteTimeSec.getter(v1);
  if ((v3 & 1) == 0) {
    uint64_t v2 = sub_10008A094(*(double *)&v2);
  }
  uint64_t v4 = ALTimeStamp.machAbsoluteTimeSec.getter(v2);
  if ((v5 & 1) == 0) {
    uint64_t v4 = sub_10008A11C(*(double *)&v4);
  }
  uint64_t result = ALTimeStamp.machContinuousTimeSec.getter(v4);
  if ((v7 & 1) == 0) {
    return sub_10008A1A4(*(double *)&result);
  }
  return result;
}

uint64_t ALTimeStamp.serializedData()()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v1 = __chkstk_darwin(v0);
  char v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v1);
  char v5 = (char *)&v16 - v4;
  uint64_t v6 = sub_10008A220((uint64_t)v3);
  uint64_t v7 = ALTimeStamp.cfAbsoluteTimeSec.getter(v6);
  if ((v8 & 1) == 0) {
    uint64_t v7 = sub_10008A094(*(double *)&v7);
  }
  uint64_t v9 = ALTimeStamp.machAbsoluteTimeSec.getter(v7);
  if ((v10 & 1) == 0) {
    uint64_t v9 = sub_10008A11C(*(double *)&v9);
  }
  double v11 = COERCE_DOUBLE(ALTimeStamp.machContinuousTimeSec.getter(v9));
  if ((v12 & 1) == 0) {
    sub_10008A1A4(v11);
  }
  sub_100086C28((uint64_t)v3, (uint64_t)v5);
  unint64_t v13 = sub_100086C6C();
  uint64_t v14 = Message.serializedData(partial:)(0LL, v0, v13);
  sub_100086A60((uint64_t)v5);
  return v14;
}

uint64_t sub_100086C28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_100086C6C()
{
  unint64_t result = qword_1003552B8;
  if (!qword_1003552B8)
  {
    uint64_t v1 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1002BF798, v1);
    atomic_store(result, (unint64_t *)&qword_1003552B8);
  }

  return result;
}

uint64_t static ALProtobufUtil.stringfyJson<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Logger(0LL);
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v6);
  char v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = type metadata accessor for JSONEncodingOptions(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v13 = &v22[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  JSONEncodingOptions.init()(v11);
  uint64_t v14 = Message.jsonUTF8Data(options:)(v13, a2, a3);
  unint64_t v16 = v15;
  uint64_t v17 = (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v13, v9);
  static String.Encoding.utf8.getter(v17);
  uint64_t v18 = String.init(data:encoding:)(v14, v16, v8);
  uint64_t v20 = v19;
  sub_100017F9C(v14, v16);
  if (v20) {
    return v18;
  }
  else {
    return 0x3E6C696E3CLL;
  }
}

uint64_t static ALProtobufUtil.stringfyLogEntryJson(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (uint64_t)&v25[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = type metadata accessor for JSONEncodingOptions(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = type metadata accessor for CLP_LogEntry_LogEntry(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = &v25[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_100087650(a1, (uint64_t)v25);
  uint64_t v13 = sub_100003A0C(&qword_1003552C0);
  uint64_t v14 = swift_dynamicCast(v12, v25, v13, v10, 7LL);
  JSONEncodingOptions.init()(v14);
  uint64_t v15 = sub_10000FD98(&qword_1003550F0, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&unk_1002BA7C4);
  uint64_t v16 = Message.jsonUTF8Data(options:)(v9, v10, v15);
  if (v1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
    sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_LogEntry);
  }

  else
  {
    uint64_t v18 = v16;
    unint64_t v19 = v17;
    uint64_t v20 = (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
    static String.Encoding.utf8.getter(v20);
    uint64_t v5 = String.init(data:encoding:)(v18, v19, v5);
    uint64_t v22 = v21;
    sub_100017F9C(v18, v19);
    if (!v22) {
      uint64_t v5 = 0x3E6C696E3CLL;
    }
    sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_LogEntry);
  }

  return v5;
}

uint64_t static ALProtobufUtil.stringfyLogEntryJson(serializedData:)(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v5);
  uint64_t v39 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = type metadata accessor for JSONEncodingOptions(0LL);
  uint64_t v7 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  int v41 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for BinaryDecodingOptions(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for CLP_LogEntry_LogEntry(0LL);
  __chkstk_darwin(v15);
  unint64_t v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v43 = 0LL;
  memset(v42, 0, sizeof(v42));
  uint64_t v18 = sub_100017F58(a1, a2);
  BinaryDecodingOptions.init()(v18);
  uint64_t v19 = sub_10000FD98(&qword_1003550F0, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&unk_1002BA7C4);
  Message.init(serializedData:extensions:partial:options:)(a1, a2, v42, 0LL, v14, v15, v19);
  if (!v2)
  {
    uint64_t v20 = v7;
    uint64_t v21 = v40;
    uint64_t v22 = sub_100003A0C(&qword_1003552C8);
    uint64_t v23 = swift_allocObject(v22, 112LL, 7LL);
    *(_OWORD *)(v23 + 16) = xmmword_1002B3340;
    sub_10007FCD4((uint64_t)v11);
    double v24 = sub_10008072C();
    sub_100004090((uint64_t)v11, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
    *(void *)(v23 + 56) = &type metadata for Double;
    *(void *)(v23 + 64) = &protocol witness table for Double;
    *(double *)(v23 + 32) = v24;
    BOOL v25 = sub_1000803F0();
    *(void *)(v23 + 96) = &type metadata for Bool;
    *(void *)(v23 + 104) = &protocol witness table for Bool;
    *(_BYTE *)(v23 + 72) = v25;
    sub_100087694();
    os_log_type_t v26 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)("time,%.2f,has,%d", v38, (_DWORD)v39);
    swift_bridgeObjectRelease(v23);

    int v27 = v41;
    JSONEncodingOptions.init()(v28);
    uint64_t v30 = Message.jsonUTF8Data(options:)(v27, v15, v19);
    unint64_t v32 = v31;
    uint64_t v33 = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v27, v21);
    uint64_t v34 = v39;
    static String.Encoding.utf8.getter(v33);
    uint64_t v35 = String.init(data:encoding:)(v30, v32, v34);
    uint64_t v37 = v36;
    sub_100017F9C(v30, v32);
    if (v37) {
      a1 = v35;
    }
    else {
      a1 = 0x3E6C696E3CLL;
    }
    sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_LogEntry);
  }

  return a1;
}

uint64_t static ALProtobufUtil.serialized(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Google_Protobuf_UInt32Value(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Google_Protobuf_UInt32Value.init()(v4);
  Google_Protobuf_UInt32Value.value.setter(a1);
  uint64_t v7 = sub_10000FD98( &qword_1003552D8,  (uint64_t (*)(uint64_t))&type metadata accessor for Google_Protobuf_UInt32Value,  (uint64_t)&protocol conformance descriptor for Google_Protobuf_UInt32Value);
  uint64_t v8 = Message.serializedData(partial:)(0LL, v2, v7);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v8;
}

uint64_t static ALProtobufUtil.serialized(_:)(double a1)
{
  uint64_t v2 = type metadata accessor for Google_Protobuf_DoubleValue(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = Google_Protobuf_DoubleValue.init()(v4);
  Google_Protobuf_DoubleValue.value.setter(v7, a1);
  uint64_t v8 = sub_10000FD98( &qword_1003552E0,  (uint64_t (*)(uint64_t))&type metadata accessor for Google_Protobuf_DoubleValue,  (uint64_t)&protocol conformance descriptor for Google_Protobuf_DoubleValue);
  uint64_t v9 = Message.serializedData(partial:)(0LL, v2, v8);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v9;
}

uint64_t PersistentConfig.deinit()
{
  return v0;
}

uint64_t PersistentConfig.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t sub_100087640()
{
  return swift_allocObject(v0, 16LL, 7LL);
}

uint64_t sub_100087650(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_100087694()
{
  unint64_t result = qword_1003552D0;
  if (!qword_1003552D0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_os_log);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1003552D0);
  }

  return result;
}

uint64_t type metadata accessor for ALProtobufUtil()
{
  return objc_opt_self(&OBJC_CLASS____TtC10ALProtobuf14ALProtobufUtil);
}

uint64_t method lookup function for ALProtobufUtil(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ALProtobufUtil);
}

uint64_t sub_1000876FC@<X0>(uint64_t a1@<X8>)
{
  return sub_100087910( &qword_100355380,  &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry,  type metadata accessor for Proto_Gpsd_LogEntry,  (void (*)(void))sub_10024A7D0,  a1);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_10037A3E0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_PrivateDataCapture);
}

uint64_t sub_100087734(uint64_t a1)
{
  return sub_100087A34( a1,  &qword_100355380,  type metadata accessor for Proto_Gpsd_LogEntry,  &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_10037A3F0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass);
}

void (*sub_100087764(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355380);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gpsd_LogEntry(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355380);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    sub_10024A7D0((uint64_t)v9);
    sub_100015764((uint64_t)v5, &qword_100355380);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gpsd_LogEntry);
  }

  return sub_100087898;
}

void sub_100087898(uint64_t a1, char a2)
{
}

BOOL sub_1000878B4()
{
  return sub_100087DCC( &qword_100355380,  &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry,  type metadata accessor for Proto_Gpsd_LogEntry);
}

uint64_t sub_1000878D0()
{
  return sub_100087EC8( &qword_100355380,  type metadata accessor for Proto_Gpsd_LogEntry,  &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry);
}

uint64_t sub_1000878EC@<X0>(uint64_t a1@<X8>)
{
  return sub_100087910( &qword_100355388,  OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry,  type metadata accessor for CLP_LogEntry_AONLoc_LogEntry,  (void (*)(void))sub_100007E70,  a1);
}

uint64_t sub_100087910@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t (*a3)(void)@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = sub_100003A0C(a1);
  __chkstk_darwin(v11);
  uint64_t v13 = &v18[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v14, v18, 0LL, 0LL);
  sub_10000E6C0(v14, (uint64_t)v13, a1);
  uint64_t v15 = a3(0LL);
  a4();
  return sub_100015764((uint64_t)v13, a1);
}

uint64_t sub_100087A18(uint64_t a1)
{
  return sub_100087A34( a1,  &qword_100355388,  type metadata accessor for CLP_LogEntry_AONLoc_LogEntry,  OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry);
}

uint64_t sub_100087A34(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), void *a4)
{
  uint64_t v8 = v4;
  uint64_t v10 = sub_100003A0C(a2);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = &v27[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v11);
  uint64_t v15 = &v27[-v14 - 8];
  uint64_t v16 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v4 + v16)) & 1) == 0)
  {
    uint64_t v17 = *(void *)(v4 + v16);
    uint64_t v18 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass(0LL);
    uint64_t v19 = swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
    uint64_t v20 = swift_retain(v17);
    sub_100088368(v20);
    uint64_t v21 = *(void *)(v8 + v16);
    *(void *)(v8 + v16) = v19;
    swift_release(v21);
  }

  uint64_t v22 = *(void *)(v8 + v16);
  sub_100003E68(a1, (uint64_t)v15, a3);
  uint64_t v23 = a3(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v15, 0LL, 1LL, v23);
  sub_10000E590((uint64_t)v15, (uint64_t)v13, a2);
  uint64_t v24 = v22 + *a4;
  swift_beginAccess(v24, v27, 33LL, 0LL);
  swift_retain(v22);
  sub_10000E5D4((uint64_t)v13, v24, a2);
  swift_endAccess(v27);
  return swift_release(v22);
}

void (*sub_100087BB4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355388);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355388);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    sub_100007E70((uint64_t)v9);
    sub_100015764((uint64_t)v5, &qword_100355388);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  }

  return sub_100087CE8;
}

void sub_100087CE8(uint64_t a1, char a2)
{
}

void sub_100087D04(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void), void *a5)
{
  size_t v8 = *(void **)a1;
  uint64_t v9 = *(void **)(*(void *)a1 + 40LL);
  uint64_t v10 = *(void **)(*(void *)a1 + 48LL);
  uint64_t v11 = *(void **)(*(void *)a1 + 32LL);
  if ((a2 & 1) != 0)
  {
    sub_10000404C((uint64_t)v10, (uint64_t)v9, a4);
    sub_100087A34((uint64_t)v9, a3, a4, a5);
    sub_100004090((uint64_t)v10, a4);
  }

  else
  {
    sub_100087A34((uint64_t)v10, a3, a4, a5);
  }

  free(v10);
  free(v9);
  free(v11);
  free(v8);
}

BOOL sub_100087DB0()
{
  return sub_100087DCC( &qword_100355388,  OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry,  type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
}

BOOL sub_100087DCC(uint64_t *a1, void *a2, uint64_t (*a3)(void))
{
  uint64_t v7 = sub_100003A0C(a1);
  __chkstk_darwin(v7);
  uint64_t v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v10, v15, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v9, a1);
  uint64_t v11 = a3(0LL);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v9, 1LL, v11) != 1;
  sub_100015764((uint64_t)v9, a1);
  return v12;
}

uint64_t sub_100087EAC()
{
  return sub_100087EC8( &qword_100355388,  type metadata accessor for CLP_LogEntry_AONLoc_LogEntry,  OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry);
}

uint64_t sub_100087EC8(uint64_t *a1, uint64_t (*a2)(void), void *a3)
{
  uint64_t v7 = v3;
  uint64_t v8 = sub_100003A0C(a1);
  __chkstk_darwin(v8);
  uint64_t v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v11)) & 1) == 0)
  {
    uint64_t v12 = *(void *)(v3 + v11);
    uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass(0LL);
    uint64_t v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    uint64_t v15 = swift_retain(v12);
    sub_100088368(v15);
    uint64_t v16 = *(void *)(v7 + v11);
    *(void *)(v7 + v11) = v14;
    swift_release(v16);
  }

  uint64_t v17 = *(void *)(v7 + v11);
  uint64_t v18 = a2(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v10, 1LL, 1LL, v18);
  uint64_t v19 = v17 + *a3;
  swift_beginAccess(v19, v22, 33LL, 0LL);
  swift_retain(v17);
  sub_10000E5D4((uint64_t)v10, v19, a1);
  swift_endAccess(v22);
  return swift_release(v17);
}

uint64_t sub_100087FFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0LL) + 20);
  if (qword_10037A0B8 != -1) {
    swift_once(&qword_10037A0B8, sub_1000882D0);
  }
  uint64_t v3 = qword_10037A0C0;
  *(void *)(a1 + v2) = qword_10037A0C0;
  return swift_retain(v3);
}

uint64_t sub_10008805C()
{
  if (qword_10037A0B8 != -1) {
    swift_once(&qword_10037A0B8, sub_1000882D0);
  }
  return swift_retain(qword_10037A0C0);
}

void *sub_10008809C()
{
  return &unk_10033ED00;
}

unint64_t sub_1000880A8()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_1000880C4()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003698A8);
  sub_10000E704(v0, (uint64_t)qword_1003698A8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3340;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1004LL;
  *(void *)uint64_t v9 = "gpsd_log_entry";
  *(void *)(v9 + 8) = 14LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 1018LL;
  *(void *)uint64_t v13 = "aonloc_log_entry";
  *((void *)v13 + 1) = 16LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100088218()
{
  if (qword_10037A0B0 != -1) {
    swift_once(&qword_10037A0B0, sub_1000880C4);
  }
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  return sub_10000E704(v0, (uint64_t)qword_1003698A8);
}

uint64_t sub_100088260@<X0>(uint64_t a1@<X8>)
{
  if (qword_10037A0B0 != -1) {
    swift_once(&qword_10037A0B0, sub_1000880C4);
  }
  uint64_t v2 = type metadata accessor for _NameMap(0LL);
  uint64_t v3 = sub_10000E704(v2, (uint64_t)qword_1003698A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(a1, v3, v2);
}

uint64_t sub_1000882D0()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass(0LL);
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  uint64_t v3 = type metadata accessor for Proto_Gpsd_LogEntry(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 1LL, 1LL, v3);
  uint64_t v4 = v1
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry;
  uint64_t v5 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))( v4,  1LL,  1LL,  v5);
  qword_10037A0C0 = v1;
  return result;
}

uint64_t sub_100088368(uint64_t a1)
{
  uint64_t v3 = sub_100003A0C(&qword_100355388);
  __chkstk_darwin(v3);
  uint64_t v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = sub_100003A0C(&qword_100355380);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  uint64_t v10 = type metadata accessor for Proto_Gpsd_LogEntry(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry;
  uint64_t v12 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry,  v19,  0LL,  0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355380);
  swift_beginAccess(v9, v18, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v8, v9, &qword_100355380);
  swift_endAccess(v18);
  uint64_t v14 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry,  v18,  0LL,  0LL);
  sub_10000E6C0(v14, (uint64_t)v5, &qword_100355388);
  swift_release(a1);
  swift_beginAccess(v11, v17, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v5, v11, &qword_100355388);
  swift_endAccess(v17);
  return v1;
}

uint64_t sub_100088540()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100088590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v8 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v8)) & 1) == 0)
  {
    uint64_t v9 = *(void *)(v3 + v8);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_100088368(v12);
    uint64_t v13 = *(void *)(v5 + v8);
    *(void *)(v5 + v8) = v11;
    swift_release(v13);
  }

  uint64_t v14 = *(void *)(v5 + v8);
  swift_retain(v14);
  uint64_t v15 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v16 & 1) != 0) {
        return swift_release(v14);
      }
      if (v15 == 1018) {
        break;
      }
      if (v15 == 1004)
      {
        uint64_t v18 = v14
            + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
        swift_beginAccess( v14 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry,  v24,  33LL,  0LL);
        uint64_t v19 = type metadata accessor for Proto_Gpsd_LogEntry(0LL);
        uint64_t v20 = (unint64_t *)&unk_100355530;
        uint64_t v21 = type metadata accessor for Proto_Gpsd_LogEntry;
        uint64_t v22 = &unk_1002DE4E0;
        goto LABEL_7;
      }

uint64_t sub_100088764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)(v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0LL) + 20));
  uint64_t v9 = swift_retain(v8);
  sub_100088820(v9, a1, a2, a3);
  if (v4) {
    return swift_release(v8);
  }
  sub_1000889AC(v8, a1, a2, a3);
  swift_release(v8);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100088820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355380);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for Proto_Gpsd_LogEntry(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355380);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for Proto_Gpsd_LogEntry);
  uint64_t v15 = sub_10000FD98(&qword_100355530, type metadata accessor for Proto_Gpsd_LogEntry, (uint64_t)&unk_1002DE4E0);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1004LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for Proto_Gpsd_LogEntry);
}

uint64_t sub_1000889AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355388);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry[0];
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355388);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  uint64_t v15 = sub_10000FD98( &qword_1003510A0,  type metadata accessor for CLP_LogEntry_AONLoc_LogEntry,  (uint64_t)&unk_1002B3EDC);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1018LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
}

BOOL sub_100088B3C(uint64_t a1, uint64_t a2)
{
  uint64_t v52 = a2;
  uint64_t v50 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0LL);
  uint64_t v48 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v44 = (uint64_t)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = sub_100003A0C(&qword_100355518);
  __chkstk_darwin(v47);
  uint64_t v51 = (uint64_t)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100003A0C(&qword_100355388);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v45 = (uint64_t)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v49 = (uint64_t)&v44 - v8;
  uint64_t v9 = type metadata accessor for Proto_Gpsd_LogEntry(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v46 = (uint64_t)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100003A0C(&qword_100355520);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100003A0C(&qword_100355380);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v44 - v19;
  uint64_t v21 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry,  v56,  0LL,  0LL);
  sub_10000E6C0(v21, (uint64_t)v20, &qword_100355380);
  uint64_t v22 = v52;
  uint64_t v23 = v52
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  swift_beginAccess( v52 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry,  v55,  0LL,  0LL);
  uint64_t v24 = (uint64_t)&v14[*(int *)(v12 + 48)];
  sub_10000E6C0((uint64_t)v20, (uint64_t)v14, &qword_100355380);
  sub_10000E6C0(v23, v24, &qword_100355380);
  BOOL v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v25((uint64_t)v14, 1LL, v9) != 1)
  {
    sub_10000E6C0((uint64_t)v14, (uint64_t)v18, &qword_100355380);
    if (v25(v24, 1LL, v9) != 1)
    {
      uint64_t v27 = v24;
      uint64_t v28 = v46;
      sub_100003E68(v27, v46, type metadata accessor for Proto_Gpsd_LogEntry);
      uint64_t v29 = sub_10000FD98(&qword_100355528, type metadata accessor for Proto_Gpsd_LogEntry, (uint64_t)&unk_1002DE620);
      swift_retain(a1);
      swift_retain(v22);
      uint64_t v30 = v29;
      uint64_t v26 = a1;
      char v31 = dispatch thunk of static Equatable.== infix(_:_:)(v18, v28, v9, v30);
      sub_100004090(v28, type metadata accessor for Proto_Gpsd_LogEntry);
      sub_100015764((uint64_t)v20, &qword_100355380);
      sub_100004090((uint64_t)v18, type metadata accessor for Proto_Gpsd_LogEntry);
      sub_100015764((uint64_t)v14, &qword_100355380);
      if ((v31 & 1) != 0) {
        goto LABEL_9;
      }
LABEL_7:
      swift_release(v26);
      swift_release(v22);
      return 0LL;
    }

    uint64_t v26 = a1;
    swift_retain(a1);
    swift_retain(v22);
    sub_100015764((uint64_t)v20, &qword_100355380);
    sub_100004090((uint64_t)v18, type metadata accessor for Proto_Gpsd_LogEntry);
LABEL_6:
    sub_100015764((uint64_t)v14, &qword_100355520);
    goto LABEL_7;
  }

  swift_retain(a1);
  swift_retain(v22);
  sub_100015764((uint64_t)v20, &qword_100355380);
  uint64_t v26 = a1;
  if (v25(v24, 1LL, v9) != 1) {
    goto LABEL_6;
  }
  sub_100015764((uint64_t)v14, &qword_100355380);
LABEL_9:
  uint64_t v32 = v26
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry[0];
  swift_beginAccess( v26 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry[0],  v54,  0LL,  0LL);
  uint64_t v33 = v49;
  sub_10000E6C0(v32, v49, &qword_100355388);
  uint64_t v34 = v22
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry[0];
  swift_beginAccess( v22 + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry[0],  v53,  0LL,  0LL);
  uint64_t v35 = v51;
  uint64_t v36 = v51 + *(int *)(v47 + 48);
  sub_10000E6C0(v33, v51, &qword_100355388);
  sub_10000E6C0(v34, v36, &qword_100355388);
  uint64_t v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
  uint64_t v38 = v50;
  if (v37(v35, 1LL, v50) == 1)
  {
    swift_release(v26);
    swift_release(v22);
    sub_100015764(v33, &qword_100355388);
    if (v37(v36, 1LL, v38) == 1)
    {
      sub_100015764(v35, &qword_100355388);
      return 1LL;
    }

    goto LABEL_14;
  }

  uint64_t v39 = v45;
  sub_10000E6C0(v35, v45, &qword_100355388);
  if (v37(v36, 1LL, v38) == 1)
  {
    swift_release(v26);
    swift_release(v22);
    sub_100015764(v33, &qword_100355388);
    sub_100004090(v39, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
LABEL_14:
    sub_100015764(v35, &qword_100355518);
    return 0LL;
  }

  uint64_t v41 = v44;
  sub_100003E68(v36, v44, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  uint64_t v42 = sub_10000FD98( &qword_1003510A8,  type metadata accessor for CLP_LogEntry_AONLoc_LogEntry,  (uint64_t)&unk_1002B401C);
  char v43 = dispatch thunk of static Equatable.== infix(_:_:)(v39, v41, v38, v42);
  swift_release(v26);
  swift_release(v22);
  sub_100004090(v41, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  sub_100015764(v33, &qword_100355388);
  sub_100004090(v39, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  sub_100015764(v35, &qword_100355388);
  return (v43 & 1) != 0;
}

Swift::Int sub_100089148()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0LL);
  uint64_t v1 = sub_10000FD98( &qword_100355390,  type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture,  (uint64_t)&unk_1002BAC20);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t sub_1000891B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(int *)(a1 + 20);
  if (qword_10037A0B8 != -1) {
    swift_once(&qword_10037A0B8, sub_1000882D0);
  }
  uint64_t v5 = qword_10037A0C0;
  *(void *)(a2 + v4) = qword_10037A0C0;
  return swift_retain(v5);
}

uint64_t sub_100089210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100088590(a1, a2, a3);
}

uint64_t sub_100089224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100088764(a1, a2, a3);
}

uint64_t sub_100089238(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100355510,  type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture,  (uint64_t)&unk_1002BAB98);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100089288(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100355278,  type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture,  (uint64_t)&unk_1002BAB20);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000892C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100355278,  type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture,  (uint64_t)&unk_1002BAB20);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_10008931C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0LL) + 20);
  uint64_t v12 = *(void *)(a1 + v11);
  uint64_t v13 = *(void *)(a2 + v11);
  if (v12 == v13
    || (swift_retain(*(void *)(a1 + v11)),
        swift_retain(v13),
        BOOL v14 = sub_100088B3C(v12, v13),
        swift_release(v13),
        swift_release(v12),
        v14))
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1, v4);
    v15(v8, a2, v4);
    uint64_t v16 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v17 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v16);
    uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v10, v4);
  }

  else
  {
    char v17 = 0;
  }

  return v17 & 1;
}

uint64_t sub_100089484()
{
  return sub_10000FD98( &qword_100355398,  type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture,  (uint64_t)&unk_1002BABF8);
}

uint64_t sub_1000894B0()
{
  return sub_10000FD98( &qword_100355278,  type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture,  (uint64_t)&unk_1002BAB20);
}

uint64_t sub_1000894DC()
{
  return sub_10000FD98( &qword_100355390,  type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture,  (uint64_t)&unk_1002BAC20);
}

uint64_t sub_100089508()
{
  return sub_10000FD98( &qword_100355270,  type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture,  (uint64_t)&unk_1002BAC60);
}

uint64_t sub_100089534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100089540);
}

uint64_t sub_100089540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_1000895BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000895C8);
}

uint64_t sub_1000895C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_100089640()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass(0LL);
}

void sub_100089648(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    sub_1000119EC(319LL, (unint64_t *)&unk_100355450, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
    if (v5 <= 0x3F)
    {
      v6[1] = *(void *)(v4 - 8) + 64LL;
      swift_updateClassMetadata2(a1, 256LL, 2LL, v6, a1 + 80);
    }
  }

uint64_t sub_1000896F0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014AA60();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100089728()
{
  return &off_10033F338;
}

void sub_100089734(void *a1@<X8>)
{
  *a1 = &off_10033F360;
}

uint64_t sub_100089748(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014AA1C();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_100089780@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10010BC38(a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000897A4@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10010BC38(*a1);
  *a2 = result;
  return result;
}

_UNKNOWN **sub_1000897CC()
{
  return &off_10033F388;
}

void sub_1000897D8(void *a1@<X8>)
{
  *a1 = &off_10033F388;
}

uint64_t sub_1000897E8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A9D8();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100089820()
{
  return &off_10033F3B8;
}

void sub_10008982C(void *a1@<X8>)
{
  *a1 = &off_10033F3B8;
}

uint64_t sub_10008983C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A994();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100089874()
{
  return &off_10033F3E0;
}

void sub_100089880(void *a1@<X8>)
{
  *a1 = &off_10033F408;
}

uint64_t sub_100089890(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A950();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_1000898C8()
{
  return &off_10033F430;
}

void sub_1000898D4(void *a1@<X8>)
{
  *a1 = &off_10033F458;
}

uint64_t sub_1000898E4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A90C();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10008991C()
{
  return &off_10033F480;
}

void sub_100089928(void *a1@<X8>)
{
  *a1 = &off_10033F4A8;
}

uint64_t sub_100089938(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A8C8();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100089970()
{
  return &off_10033F4D0;
}

void sub_10008997C(void *a1@<X8>)
{
  *a1 = &off_10033F4F8;
}

uint64_t sub_10008998C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A884();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_1000899C4()
{
  return &off_10033F520;
}

void sub_1000899D0(void *a1@<X8>)
{
  *a1 = &off_10033F548;
}

uint64_t sub_1000899E0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A840();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100089A18()
{
  return &off_10033F570;
}

void sub_100089A24(void *a1@<X8>)
{
  *a1 = &off_10033F598;
}

uint64_t sub_100089A38(char a1)
{
  return qword_1002C93B0[a1];
}

BOOL sub_100089A4C(char *a1, char *a2)
{
  return qword_1002C93B0[*a1] == qword_1002C93B0[*a2];
}

uint64_t sub_100089A70(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A7FC();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_100089AA8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10010BC48(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100089ACC()
{
  return qword_1002C93B0[*v0];
}

uint64_t sub_100089AE0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10010BC48(*a1);
  *a2 = result;
  return result;
}

void sub_100089B08(void *a1@<X8>)
{
  *a1 = qword_1002C93B0[*v1];
}

_UNKNOWN **sub_100089B20()
{
  return &off_10033F5C0;
}

void sub_100089B2C(void *a1@<X8>)
{
  *a1 = &off_10033F5C0;
}

uint64_t sub_100089B40(char a1)
{
  return qword_1002C95F0[a1];
}

BOOL sub_100089B54(char *a1, char *a2)
{
  return qword_1002C95F0[*a1] == qword_1002C95F0[*a2];
}

uint64_t sub_100089B78(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A7B8();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_100089BB0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10010C168(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100089BD4()
{
  return qword_1002C95F0[*v0];
}

uint64_t sub_100089BE8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10010C168(*a1);
  *a2 = result;
  return result;
}

void sub_100089C10(void *a1@<X8>)
{
  *a1 = qword_1002C95F0[*v1];
}

_UNKNOWN **sub_100089C28()
{
  return &off_10033F628;
}

void sub_100089C34(void *a1@<X8>)
{
  *a1 = &off_10033F650;
}

uint64_t sub_100089C44(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A774();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100089C7C()
{
  return &off_10033F678;
}

void sub_100089C88(void *a1@<X8>)
{
  *a1 = &off_10033F6A0;
}

uint64_t sub_100089C98(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A730();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100089CD0()
{
  return &off_10033F6C8;
}

void sub_100089CDC(void *a1@<X8>)
{
  *a1 = &off_10033F6F0;
}

uint64_t sub_100089CF0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A6EC();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100089D28()
{
  return &off_10033F718;
}

void sub_100089D34(void *a1@<X8>)
{
  *a1 = &off_10033F718;
}

uint64_t sub_100089D44(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A6A8();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100089D7C()
{
  return &off_10033F740;
}

void sub_100089D88(void *a1@<X8>)
{
  *a1 = &off_10033F768;
}

uint64_t sub_100089D98(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A664();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100089DD0()
{
  return &off_10033F790;
}

void sub_100089DDC(void *a1@<X8>)
{
  *a1 = &off_10033F7B8;
}

uint64_t sub_100089DEC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10000FD54();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100089E24()
{
  return &off_10033F7E0;
}

void sub_100089E30(void *a1@<X8>)
{
  *a1 = &off_10033F808;
}

uint64_t sub_100089E44(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A620();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_100089E7C@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10010C1BC(a1);
  *a2 = result;
  return result;
}

unint64_t sub_100089EA0@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10010C1BC(*a1);
  *a2 = result;
  return result;
}

_UNKNOWN **sub_100089EC8()
{
  return &off_10033F830;
}

void sub_100089ED4(void *a1@<X8>)
{
  *a1 = &off_10033F830;
}

uint64_t sub_100089EE4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A5DC();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100089F1C()
{
  return &off_10033F860;
}

void sub_100089F28(void *a1@<X8>)
{
  *a1 = &off_10033F860;
}

uint64_t sub_100089F38(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A598();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100089F70()
{
  return &off_10033F890;
}

void sub_100089F7C(void *a1@<X8>)
{
  *a1 = &off_10033F8B8;
}

uint64_t sub_100089F8C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A554();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100089FC4()
{
  return &off_10033F8E0;
}

void sub_100089FD0(void *a1@<X8>)
{
  *a1 = &off_10033F908;
}

uint64_t sub_100089FE0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A510();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10008A018()
{
  return &off_10033F930;
}

void sub_10008A024(void *a1@<X8>)
{
  *a1 = &off_10033F958;
}

uint64_t sub_10008A034(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A4CC();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10008A06C()
{
  return &off_10033F980;
}

void sub_10008A078(void *a1@<X8>)
{
  *a1 = &off_10033F9A8;
}

double sub_10008A088()
{
  return sub_10001FC20(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10008A094(double a1)
{
  return sub_10001FC64(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t (*sub_10008A0A0(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10008A0F8()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10008A104()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

double sub_10008A110()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10008A11C(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t (*sub_10008A128(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10008A180()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10008A18C()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

double sub_10008A198()
{
  return sub_100027BE4(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10008A1A4(double a1)
{
  return sub_100027C28(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t (*sub_10008A1B0(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10008A208()
{
  return sub_100027CC4(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10008A214()
{
  return sub_100027D00(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

int *sub_10008A220@<X0>(uint64_t a1@<X8>)
{
  return sub_10002EB64(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t sub_10008A22C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAF00(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, a1);
}

uint64_t sub_10008A238(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_AccelSample,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_10008A254(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  double v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

void sub_10008A3A4(uint64_t a1, char a2)
{
}

BOOL sub_10008A3B8()
{
  return sub_100031370( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_AccelSample,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10008A3D4()
{
  return sub_100031448( type metadata accessor for CLP_LogEntry_PrivateData_AccelSample,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

float sub_10008A3F0()
{
  return sub_1000276E8(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t sub_10008A3FC(float a1)
{
  return sub_10002772C(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, a1);
}

uint64_t (*sub_10008A408(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample(0LL) + 24);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10008A460()
{
  return sub_1000277C8(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t sub_10008A46C()
{
  return sub_100027804(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

float sub_10008A478()
{
  return sub_100021008(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t sub_10008A484(float a1)
{
  return sub_10002104C(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, a1);
}

uint64_t (*sub_10008A490(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample(0LL) + 28);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10008A4E8()
{
  return sub_100020BD0(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t sub_10008A4F4()
{
  return sub_100020C0C(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

float sub_10008A500()
{
  return sub_10002CCD0(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t sub_10008A50C(float a1)
{
  return sub_10002CD14(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, a1);
}

uint64_t (*sub_10008A518(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample(0LL) + 32);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10008A570()
{
  return sub_100027938(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t sub_10008A57C()
{
  return sub_100027974(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t sub_10008A588@<X0>(uint64_t a1@<X8>)
{
  return sub_10008AAF0(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, a1);
}

uint64_t sub_10008A594@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t sub_10008A5A0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA124(type metadata accessor for CLP_LogEntry_PrivateData_Accel, a1);
}

uint64_t sub_10008A5AC(uint64_t a1)
{
  return sub_1000308E8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_Accel,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_10008A5C8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  double v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Accel(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_10008A718()
{
  return sub_100019928( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_Accel,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10008A734()
{
  return sub_100019A00( type metadata accessor for CLP_LogEntry_PrivateData_Accel,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10008A750@<X0>(uint64_t a1@<X8>)
{
  return sub_100005424(type metadata accessor for CLP_LogEntry_PrivateData_Accel, a1);
}

uint64_t sub_10008A75C(uint64_t a1)
{
  return sub_10000547C(a1, type metadata accessor for CLP_LogEntry_PrivateData_Accel);
}

uint64_t (*sub_10008A768())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_10008A790@<X0>(void *a1@<X8>)
{
  return sub_10008AD84(type metadata accessor for CLP_LogEntry_PrivateData_Accel, a1);
}

uint64_t sub_10008A79C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAF00(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, a1);
}

uint64_t sub_10008A7A8(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_GyroSample,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_10008A7C4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  double v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_10008A914()
{
  return sub_100031370( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_GyroSample,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10008A930()
{
  return sub_100031448( type metadata accessor for CLP_LogEntry_PrivateData_GyroSample,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

float sub_10008A94C()
{
  return sub_1000276E8(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t sub_10008A958(float a1)
{
  return sub_10002772C(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, a1);
}

uint64_t (*sub_10008A964(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample(0LL) + 24);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10008A9BC()
{
  return sub_1000277C8(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t sub_10008A9C8()
{
  return sub_100027804(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

float sub_10008A9D4()
{
  return sub_100021008(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t sub_10008A9E0(float a1)
{
  return sub_10002104C(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, a1);
}

uint64_t (*sub_10008A9EC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample(0LL) + 28);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10008AA44()
{
  return sub_100020BD0(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t sub_10008AA50()
{
  return sub_100020C0C(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

float sub_10008AA5C()
{
  return sub_10002CCD0(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t sub_10008AA68(float a1)
{
  return sub_10002CD14(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, a1);
}

uint64_t (*sub_10008AA74(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample(0LL) + 32);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10008AACC()
{
  return sub_100027938(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t sub_10008AAD8()
{
  return sub_100027974(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t sub_10008AAE4@<X0>(uint64_t a1@<X8>)
{
  return sub_10008AAF0(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, a1);
}

uint64_t sub_10008AAF0@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  float v4 = (int *)a1(0LL);
  uint64_t v5 = a2 + v4[5];
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))( v5,  1LL,  1LL,  v6);
  uint64_t v8 = a2 + v4[6];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a2 + v4[7];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a2 + v4[8];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return result;
}

uint64_t sub_10008AB88@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA124(type metadata accessor for CLP_LogEntry_PrivateData_Gyro, a1);
}

uint64_t sub_10008AB94(uint64_t a1)
{
  return sub_1000308E8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_Gyro,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_10008ABB0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Gyro(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_10008AD00()
{
  return sub_100019928( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_Gyro,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10008AD1C()
{
  return sub_100019A00( type metadata accessor for CLP_LogEntry_PrivateData_Gyro,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10008AD38@<X0>(uint64_t a1@<X8>)
{
  return sub_100005424(type metadata accessor for CLP_LogEntry_PrivateData_Gyro, a1);
}

uint64_t sub_10008AD44(uint64_t a1)
{
  return sub_10000547C(a1, type metadata accessor for CLP_LogEntry_PrivateData_Gyro);
}

uint64_t (*sub_10008AD50())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_10008AD78@<X0>(void *a1@<X8>)
{
  return sub_10008AD84(type metadata accessor for CLP_LogEntry_PrivateData_Gyro, a1);
}

uint64_t sub_10008AD84@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  uint64_t v3 = a1(0LL);
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(v3 + 24);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
}

uint64_t sub_10008ADF0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAF00(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, a1);
}

uint64_t sub_10008ADFC(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_BaroSample,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_10008AE18(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_10008AF68()
{
  return sub_100031370( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_BaroSample,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10008AF84()
{
  return sub_100031448( type metadata accessor for CLP_LogEntry_PrivateData_BaroSample,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

float sub_10008AFA0()
{
  return sub_1000276E8(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t sub_10008AFAC(float a1)
{
  return sub_10002772C(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, a1);
}

uint64_t (*sub_10008AFB8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0LL) + 24);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10008B010()
{
  return sub_1000277C8(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t sub_10008B01C()
{
  return sub_100027804(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

float sub_10008B028()
{
  return sub_100021008(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t sub_10008B034(float a1)
{
  return sub_10002104C(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, a1);
}

uint64_t (*sub_10008B040(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0LL) + 28);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10008B098()
{
  return sub_100020BD0(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t sub_10008B0A4()
{
  return sub_100020C0C(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t sub_10008B0B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0LL);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))( v3,  1LL,  1LL,  v4);
  uint64_t v6 = a1 + v2[6];
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  uint64_t v7 = a1 + v2[7];
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  return result;
}

uint64_t sub_10008B134@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA124(type metadata accessor for CLP_LogEntry_PrivateData_Baro, a1);
}

uint64_t sub_10008B140(uint64_t a1)
{
  return sub_1000308E8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_Baro,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_10008B15C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Baro(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_10008B2AC()
{
  return sub_100019928( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_Baro,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10008B2C8()
{
  return sub_100019A00( type metadata accessor for CLP_LogEntry_PrivateData_Baro,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10008B2E4@<X0>(uint64_t a1@<X8>)
{
  return sub_100005424(type metadata accessor for CLP_LogEntry_PrivateData_Baro, a1);
}

uint64_t sub_10008B2F0(uint64_t a1)
{
  return sub_10000547C(a1, type metadata accessor for CLP_LogEntry_PrivateData_Baro);
}

uint64_t (*sub_10008B2FC())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_10008B324@<X0>(void *a1@<X8>)
{
  return sub_10008AD84(type metadata accessor for CLP_LogEntry_PrivateData_Baro, a1);
}

double sub_10008B330()
{
  return sub_10001FC20(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_10008B33C(double a1)
{
  return sub_10001FC64(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, a1);
}

uint64_t (*sub_10008B348(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10008B3A0()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_10008B3AC()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

double sub_10008B3B8()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_10008B3C4(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, a1);
}

uint64_t (*sub_10008B3D0(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10008B428()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_10008B434()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_10008B440@<X0>(uint64_t a1@<X8>)
{
  return sub_10008E720(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, a1);
}

uint64_t sub_10008B44C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20));
  swift_beginAccess(v1 + 16, v3, 0LL, 0LL);
  if (*(_BYTE *)(v1 + 16) == 4) {
    return 0LL;
  }
  else {
    return *(unsigned __int8 *)(v1 + 16);
  }
}

uint64_t sub_10008B49C(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_10010C294(v8);
    swift_release(v5);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 16, v12, 1LL, 0LL);
  *(_BYTE *)(v10 + 16) = a1;
  return result;
}

void (*sub_10008B544(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0LL, 0LL);
  int v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 4) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10008B5C0;
}

void sub_10008B5C0(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_10010C294(v12);
    swift_release(v9);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_10008B698()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20));
  swift_beginAccess(v1 + 16, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 16) != 4;
}

uint64_t sub_10008B6E8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010C294(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 16, v10, 1LL, 0LL);
  *(_BYTE *)(v8 + 16) = 4;
  return result;
}

uint64_t sub_10008B788@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BD678( &qword_100355540,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate,  a1);
}

uint64_t sub_10008B7AC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355540);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10010C294(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355540);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355540);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10008B930(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355540);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355540);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355540);
  }

  else
  {
    sub_100003E68( (uint64_t)v5,  (uint64_t)v9,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  }

  return sub_10008BA88;
}

void sub_10008BA88(uint64_t a1, char a2)
{
}

BOOL sub_10008BA9C()
{
  return sub_10001D054( &qword_100355540,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_10008BAC0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355540);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10010C294(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355540);
  swift_endAccess(v16);
  return swift_release(v11);
}

double sub_10008BBF4()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy);
}

uint64_t sub_10008BC08(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass,  (void (*)(uint64_t))sub_10010C294,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy,  a1);
}

void (*sub_10008BC2C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10008BCBC;
}

void sub_10008BCBC(uint64_t *a1, char a2)
{
}

BOOL sub_10008BCD8()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy);
}

uint64_t sub_10008BCEC()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass,  (void (*)(uint64_t))sub_10010C294,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy);
}

double sub_10008BD10()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude);
}

uint64_t sub_10008BD24(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass,  (void (*)(uint64_t))sub_10010C294,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude,  a1);
}

uint64_t sub_10008BD48( uint64_t (*a1)(void), uint64_t (*a2)(void), void (*a3)(uint64_t), void *a4, double a5)
{
  uint64_t v9 = v5;
  uint64_t v11 = *(int *)(a1(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v5 + v11)) & 1) == 0)
  {
    uint64_t v12 = *(void *)(v5 + v11);
    uint64_t v13 = a2(0LL);
    uint64_t v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    uint64_t v15 = swift_retain(v12);
    a3(v15);
    swift_release(v12);
    uint64_t v16 = *(void *)(v9 + v11);
    *(void *)(v9 + v11) = v14;
    swift_release(v16);
  }

  uint64_t v17 = *(void *)(v9 + v11) + *a4;
  uint64_t result = swift_beginAccess(v17, v19, 1LL, 0LL);
  *(double *)uint64_t v17 = a5;
  *(_BYTE *)(v17 + 8) = 0;
  return result;
}

void (*sub_10008BE1C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10008BEAC;
}

void sub_10008BEAC(uint64_t *a1, char a2)
{
}

void sub_10008BEC8( uint64_t *a1, char a2, uint64_t (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = *a1;
  uint64_t v10 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v12 = v9 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v12 = v9 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v13 = *(int *)(v9 + 88);
    uint64_t v14 = *(void *)(v9 + 80);
    uint64_t v15 = *(void *)(v14 + v13);
    uint64_t v16 = a3(0LL);
    uint64_t v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    uint64_t v18 = swift_retain(v15);
    a4(v18);
    swift_release(v15);
    uint64_t v19 = *(void *)(v14 + v13);
    *(void *)(v14 + v13) = v17;
    swift_release(v19);
  }

BOOL sub_10008BFBC()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude);
}

uint64_t sub_10008BFD0()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass,  (void (*)(uint64_t))sub_10010C294,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude);
}

uint64_t sub_10008BFF4( uint64_t (*a1)(void), uint64_t (*a2)(void), void (*a3)(uint64_t), void *a4)
{
  uint64_t v8 = v4;
  uint64_t v9 = *(int *)(a1(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v4 + v9)) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v4 + v9);
    uint64_t v11 = a2(0LL);
    uint64_t v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v13 = swift_retain(v10);
    a3(v13);
    swift_release(v10);
    uint64_t v14 = *(void *)(v8 + v9);
    *(void *)(v8 + v9) = v12;
    swift_release(v14);
  }

  uint64_t v15 = *(void *)(v8 + v9) + *a4;
  uint64_t result = swift_beginAccess(v15, v17, 1LL, 0LL);
  *(void *)uint64_t v15 = 0LL;
  *(_BYTE *)(v15 + 8) = 1;
  return result;
}

double sub_10008C0C0()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy);
}

uint64_t sub_10008C0D4(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass,  (void (*)(uint64_t))sub_10010C294,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy,  a1);
}

void (*sub_10008C0F8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10008C188;
}

void sub_10008C188(uint64_t *a1, char a2)
{
}

BOOL sub_10008C1A4()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy);
}

uint64_t sub_10008C1B8()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass,  (void (*)(uint64_t))sub_10010C294,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy);
}

double sub_10008C1DC()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed);
}

uint64_t sub_10008C1F0(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass,  (void (*)(uint64_t))sub_10010C294,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed,  a1);
}

void (*sub_10008C214(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10008C2A4;
}

void sub_10008C2A4(uint64_t *a1, char a2)
{
}

BOOL sub_10008C2C0()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed);
}

uint64_t sub_10008C2D4()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass,  (void (*)(uint64_t))sub_10010C294,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed);
}

double sub_10008C2F8()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy);
}

uint64_t sub_10008C30C(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass,  (void (*)(uint64_t))sub_10010C294,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy,  a1);
}

void (*sub_10008C330(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10008C3C0;
}

void sub_10008C3C0(uint64_t *a1, char a2)
{
}

BOOL sub_10008C3DC()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy);
}

uint64_t sub_10008C3F0()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass,  (void (*)(uint64_t))sub_10010C294,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy);
}

double sub_10008C414()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course);
}

uint64_t sub_10008C428(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass,  (void (*)(uint64_t))sub_10010C294,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course,  a1);
}

void (*sub_10008C44C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10008C4DC;
}

void sub_10008C4DC(uint64_t *a1, char a2)
{
}

BOOL sub_10008C4F8()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course);
}

uint64_t sub_10008C50C()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass,  (void (*)(uint64_t))sub_10010C294,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course);
}

double sub_10008C530()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy);
}

uint64_t sub_10008C544(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass,  (void (*)(uint64_t))sub_10010C294,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy,  a1);
}

void (*sub_10008C568(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10008C5F8;
}

void sub_10008C5F8(uint64_t *a1, char a2)
{
}

BOOL sub_10008C614()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy);
}

uint64_t sub_10008C628()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass,  (void (*)(uint64_t))sub_10010C294,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy);
}

double sub_10008C64C()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp);
}

uint64_t sub_10008C660(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass,  (void (*)(uint64_t))sub_10010C294,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp,  a1);
}

void (*sub_10008C684(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10008C714;
}

void sub_10008C714(uint64_t *a1, char a2)
{
}

BOOL sub_10008C730()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp);
}

uint64_t sub_10008C744()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass,  (void (*)(uint64_t))sub_10010C294,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp);
}

uint64_t sub_10008C768()
{
  return sub_10008D164( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence);
}

uint64_t sub_10008C77C(int a1)
{
  return sub_10008D1EC( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass,  (void (*)(uint64_t))sub_10010C294,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence);
}

void (*sub_10008C7A0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_10008C82C;
}

void sub_10008C82C(uint64_t *a1, char a2)
{
}

BOOL sub_10008C848()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence);
}

uint64_t sub_10008C85C()
{
  return sub_10008D488( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass,  (void (*)(uint64_t))sub_10010C294,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence);
}

double sub_10008C880()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan);
}

uint64_t sub_10008C894(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass,  (void (*)(uint64_t))sub_10010C294,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan,  a1);
}

void (*sub_10008C8B8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10008C948;
}

void sub_10008C948(uint64_t *a1, char a2)
{
}

BOOL sub_10008C964()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan);
}

uint64_t sub_10008C978()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass,  (void (*)(uint64_t))sub_10010C294,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan);
}

uint64_t sub_10008C99C()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL)
                                              + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess(v1, v3, 0LL, 0LL);
  if (*v1 == 14) {
    return 0LL;
  }
  else {
    return *v1;
  }
}

uint64_t sub_10008C9F8(char a1)
{
  return sub_10008D58C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass,  (void (*)(uint64_t))sub_10010C294,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
}

void (*sub_10008CA1C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 14) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10008CAA4;
}

void sub_10008CAA4(uint64_t *a1, char a2)
{
}

BOOL sub_10008CAC0()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL)
                                              + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess(v1, v3, 0LL, 0LL);
  return *v1 != 14;
}

uint64_t sub_10008CB1C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010C294(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 14;
  return result;
}

uint64_t sub_10008CBC8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BD678( &qword_100355540,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate,  a1);
}

uint64_t sub_10008CBEC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355540);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10010C294(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355540);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355540);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10008CD70(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355540);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355540);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355540);
  }

  else
  {
    sub_100003E68( (uint64_t)v5,  (uint64_t)v9,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  }

  return sub_10008CEC8;
}

void sub_10008CEC8(uint64_t a1, char a2)
{
}

BOOL sub_10008CEDC()
{
  return sub_10001D054( &qword_100355540,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_10008CF00()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355540);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10010C294(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355540);
  swift_endAccess(v16);
  return swift_release(v11);
}

double sub_10008D034()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse);
}

uint64_t sub_10008D048(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass,  (void (*)(uint64_t))sub_10010C294,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse,  a1);
}

void (*sub_10008D06C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10008D0FC;
}

void sub_10008D0FC(uint64_t *a1, char a2)
{
}

BOOL sub_10008D118()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse);
}

uint64_t sub_10008D12C()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass,  (void (*)(uint64_t))sub_10010C294,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse);
}

uint64_t sub_10008D150()
{
  return sub_10008D164( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor);
}

uint64_t sub_10008D164(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (_BYTE *)(*(void *)(v2 + *(int *)(a1(0LL) + 20)) + *a2);
  swift_beginAccess(v3, v5, 0LL, 0LL);
  if (v3[4]) {
    return 0LL;
  }
  else {
    return *(unsigned int *)v3;
  }
}

uint64_t sub_10008D1C8(int a1)
{
  return sub_10008D1EC( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass,  (void (*)(uint64_t))sub_10010C294,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor);
}

uint64_t sub_10008D1EC( int a1, uint64_t (*a2)(void), uint64_t (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = v5;
  uint64_t v11 = *(int *)(a2(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v5 + v11)) & 1) == 0)
  {
    uint64_t v12 = *(void *)(v5 + v11);
    uint64_t v13 = a3(0LL);
    uint64_t v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    uint64_t v15 = swift_retain(v12);
    a4(v15);
    swift_release(v12);
    uint64_t v16 = *(void *)(v9 + v11);
    *(void *)(v9 + v11) = v14;
    swift_release(v16);
  }

  uint64_t v17 = *(void *)(v9 + v11) + *a5;
  uint64_t result = swift_beginAccess(v17, v19, 1LL, 0LL);
  *(_DWORD *)uint64_t v17 = a1;
  *(_BYTE *)(v17 + 4) = 0;
  return result;
}

void (*sub_10008D2B4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_10008D340;
}

void sub_10008D340(uint64_t *a1, char a2)
{
}

void sub_10008D35C( uint64_t *a1, char a2, uint64_t (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = *a1;
  int v10 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v12 = v9 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v12 = v9 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v13 = *(int *)(v9 + 84);
    uint64_t v14 = *(void *)(v9 + 72);
    uint64_t v15 = *(void *)(v14 + v13);
    uint64_t v16 = a3(0LL);
    uint64_t v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    uint64_t v18 = swift_retain(v15);
    a4(v18);
    swift_release(v15);
    uint64_t v19 = *(void *)(v14 + v13);
    *(void *)(v14 + v13) = v17;
    swift_release(v19);
  }

BOOL sub_10008D450()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor);
}

uint64_t sub_10008D464()
{
  return sub_10008D488( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass,  (void (*)(uint64_t))sub_10010C294,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor);
}

uint64_t sub_10008D488( uint64_t (*a1)(void), uint64_t (*a2)(void), void (*a3)(uint64_t), void *a4)
{
  uint64_t v8 = v4;
  uint64_t v9 = *(int *)(a1(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v4 + v9)) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v4 + v9);
    uint64_t v11 = a2(0LL);
    uint64_t v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v13 = swift_retain(v10);
    a3(v13);
    swift_release(v10);
    uint64_t v14 = *(void *)(v8 + v9);
    *(void *)(v8 + v9) = v12;
    swift_release(v14);
  }

  uint64_t v15 = *(void *)(v8 + v9) + *a4;
  uint64_t result = swift_beginAccess(v15, v17, 1LL, 0LL);
  *(_DWORD *)uint64_t v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  return result;
}

uint64_t sub_10008D554()
{
  return sub_10002B414( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
}

uint64_t sub_10008D568(char a1)
{
  return sub_10008D58C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass,  (void (*)(uint64_t))sub_10010C294,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
}

uint64_t sub_10008D58C( char a1, uint64_t (*a2)(void), uint64_t (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = v5;
  uint64_t v11 = *(int *)(a2(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v5 + v11)) & 1) == 0)
  {
    uint64_t v12 = *(void *)(v5 + v11);
    uint64_t v13 = a3(0LL);
    uint64_t v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    uint64_t v15 = swift_retain(v12);
    a4(v15);
    swift_release(v12);
    uint64_t v16 = *(void *)(v9 + v11);
    *(void *)(v9 + v11) = v14;
    swift_release(v16);
  }

  uint64_t v17 = (_BYTE *)(*(void *)(v9 + v11) + *a5);
  uint64_t result = swift_beginAccess(v17, v19, 1LL, 0LL);
  *uint64_t v17 = a1;
  return result;
}

void (*sub_10008D650(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10008D6D8;
}

void sub_10008D6D8(uint64_t *a1, char a2)
{
}

void sub_10008D6F4( uint64_t *a1, char a2, uint64_t (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = *a1;
  char v10 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v12 = v9 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v12 = v9 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v13 = *(int *)(v9 + 80);
    uint64_t v14 = *(void *)(v9 + 72);
    uint64_t v15 = *(void *)(v14 + v13);
    uint64_t v16 = a3(0LL);
    uint64_t v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    uint64_t v18 = swift_retain(v15);
    a4(v18);
    swift_release(v15);
    uint64_t v19 = *(void *)(v14 + v13);
    *(void *)(v14 + v13) = v17;
    swift_release(v19);
  }

BOOL sub_10008D7E4()
{
  return sub_10002B6BC( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
}

uint64_t sub_10008D7F8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010C294(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 5;
  return result;
}

uint64_t sub_10008D8A4()
{
  return sub_10008DA54( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

uint64_t sub_10008D8B8(char a1)
{
  return sub_10008D58C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass,  (void (*)(uint64_t))sub_10010C294,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

void (*sub_10008D8DC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10008D964;
}

void sub_10008D964(uint64_t *a1, char a2)
{
}

BOOL sub_10008D980()
{
  return sub_10008DB90( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

uint64_t sub_10008D994()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010C294(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 3;
  return result;
}

uint64_t sub_10008DA40()
{
  return sub_10008DA54( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
}

uint64_t sub_10008DA54(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)(v2 + *(int *)(a1(0LL) + 20)) + *a2);
  swift_beginAccess(v3, v5, 0LL, 0LL);
  if (*v3 == 3) {
    return 0LL;
  }
  else {
    return *v3;
  }
}

uint64_t sub_10008DAB4(char a1)
{
  return sub_10008D58C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass,  (void (*)(uint64_t))sub_10010C294,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
}

void (*sub_10008DAD8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10008DB60;
}

void sub_10008DB60(uint64_t *a1, char a2)
{
}

BOOL sub_10008DB7C()
{
  return sub_10008DB90( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
}

BOOL sub_10008DB90(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)(v2 + *(int *)(a1(0LL) + 20)) + *a2);
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return *v3 != 3;
}

uint64_t sub_10008DBF0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010C294(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 3;
  return result;
}

uint64_t sub_10008DC9C()
{
  return sub_1000AFED4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
}

uint64_t sub_10008DCB0(char a1)
{
  return sub_10008D58C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass,  (void (*)(uint64_t))sub_10010C294,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
}

void (*sub_10008DCD4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 8) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10008DD5C;
}

void sub_10008DD5C(uint64_t *a1, char a2)
{
}

BOOL sub_10008DD78()
{
  return sub_1000B0010( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
}

uint64_t sub_10008DD8C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010C294(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 8;
  return result;
}

double sub_10008DE38()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude);
}

uint64_t sub_10008DE4C(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass,  (void (*)(uint64_t))sub_10010C294,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude,  a1);
}

void (*sub_10008DE70(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10008DF00;
}

void sub_10008DF00(uint64_t *a1, char a2)
{
}

BOOL sub_10008DF1C()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude);
}

uint64_t sub_10008DF30()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass,  (void (*)(uint64_t))sub_10010C294,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude);
}

uint64_t sub_10008DF54()
{
  return sub_1000911E0( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
}

uint64_t sub_10008DF68(char a1)
{
  return sub_100091260( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass,  (void (*)(uint64_t))sub_10010C294,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
}

void (*sub_10008DF8C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_10008E010;
}

void sub_10008E010(uint64_t *a1, char a2)
{
}

BOOL sub_10008E02C()
{
  return sub_1000914C8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
}

uint64_t sub_10008E040()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010C294(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 2;
  return result;
}

uint64_t sub_10008E0F0(char a1)
{
  return qword_1002C9368[a1];
}

BOOL sub_10008E104(char *a1, char *a2)
{
  return qword_1002C9368[*a1] == qword_1002C9368[*a2];
}

uint64_t sub_10008E128(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A488();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_10008E160@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10010CB50(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10008E184()
{
  return qword_1002C9368[*v0];
}

uint64_t sub_10008E198@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10010CB50(*a1);
  *a2 = result;
  return result;
}

void sub_10008E1C0(void *a1@<X8>)
{
  *a1 = qword_1002C9368[*v1];
}

uint64_t sub_10008E1DC(char a1)
{
  return qword_1002C9388[a1];
}

BOOL sub_10008E1F0(char *a1, char *a2)
{
  return qword_1002C9388[*a1] == qword_1002C9388[*a2];
}

uint64_t sub_10008E214(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A444();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_10008E24C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10010CB8C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10008E270()
{
  return qword_1002C9388[*v0];
}

uint64_t sub_10008E284@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10010CB8C(*a1);
  *a2 = result;
  return result;
}

void sub_10008E2AC(void *a1@<X8>)
{
  *a1 = qword_1002C9388[*v1];
}

uint64_t sub_10008E2C4@<X0>(uint64_t a1@<X8>)
{
  return sub_100024054( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &qword_10037A500,  &qword_10037A508,  (uint64_t)sub_1000C8C50,  a1);
}

uint64_t sub_10008E2E8()
{
  return sub_1000365F4(&qword_10037A500, &qword_10037A508, (uint64_t)sub_1000C8C50);
}

_UNKNOWN **sub_10008E304()
{
  return &off_10033F9D0;
}

void sub_10008E310(void *a1@<X8>)
{
  *a1 = &off_10033F9F8;
}

_UNKNOWN **sub_10008E320()
{
  return &off_10033FA20;
}

void sub_10008E32C(void *a1@<X8>)
{
  *a1 = &off_10033FA48;
}

double sub_10008E33C()
{
  return sub_10001FC20(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t sub_10008E348(double a1)
{
  return sub_10001FC64(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData, a1);
}

uint64_t (*sub_10008E354(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10008E3AC()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t sub_10008E3B8()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

double sub_10008E3C4()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t sub_10008E3D0(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData, a1);
}

uint64_t (*sub_10008E3DC(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10008E434()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t sub_10008E440()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t sub_10008E44C()
{
  return sub_10001A898(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t sub_10008E458(char a1)
{
  return sub_10000534C(a1, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t (*sub_10008E464(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0LL) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10008E4AC()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0LL) + 28)) != 2;
}

uint64_t sub_10008E4D4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_10008E4F8()
{
  return sub_10001A96C(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t sub_10008E504(char a1)
{
  return sub_10001A9A0(a1, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t (*sub_10008E510(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0LL) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10008E558()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0LL) + 32)) != 2;
}

uint64_t sub_10008E580()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

int *sub_10008E5A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0LL);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(void *)uint64_t v4 = 0LL;
  *(_BYTE *)(v4 + 8) = 1;
  *(_BYTE *)(a1 + result[7]) = 2;
  *(_BYTE *)(a1 + result[8]) = 2;
  return result;
}

double sub_10008E604()
{
  return sub_10001FC20(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t sub_10008E610(double a1)
{
  return sub_10001FC64(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, a1);
}

uint64_t (*sub_10008E61C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10008E674()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t sub_10008E680()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

double sub_10008E68C()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t sub_10008E698(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, a1);
}

uint64_t (*sub_10008E6A4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10008E6FC()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t sub_10008E708()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t sub_10008E714@<X0>(uint64_t a1@<X8>)
{
  return sub_10008E720(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, a1);
}

uint64_t sub_10008E720@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = a1(0LL);
  uint64_t v5 = a2 + *(int *)(result + 20);
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + 8) = 1;
  uint64_t v6 = a2 + *(int *)(result + 24);
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  return result;
}

uint64_t sub_10008E770()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0LL) + 20));
  if (v1 == 7) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_10008E798(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_10008E7C4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0LL) + 20);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 7) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10008E810()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0LL) + 20)) != 7;
}

uint64_t sub_10008E838()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 7;
  return result;
}

uint64_t sub_10008E85C()
{
  return sub_10002DF9C(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_10008E868(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t (*sub_10008E874(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10008E8C4()
{
  return sub_1000277C8(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_10008E8D0()
{
  return sub_100027804(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

float sub_10008E8DC()
{
  return sub_100021008(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_10008E8E8(float a1)
{
  return sub_10002104C(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, a1);
}

uint64_t (*sub_10008E8F4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0LL) + 28);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10008E94C()
{
  return sub_100020BD0(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_10008E958()
{
  return sub_100020C0C(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

float sub_10008E964()
{
  return sub_10002CCD0(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_10008E970(float a1)
{
  return sub_10002CD14(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, a1);
}

uint64_t (*sub_10008E97C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0LL) + 32);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10008E9D4()
{
  return sub_100027938(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_10008E9E0()
{
  return sub_100027974(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

float sub_10008E9EC()
{
  return sub_100033594(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_10008E9F8(float a1)
{
  return sub_1000335D8(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, a1);
}

uint64_t (*sub_10008EA04(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0LL) + 36);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10008EA5C()
{
  return sub_10002828C(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_10008EA68()
{
  return sub_1000282C8(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

float sub_10008EA74()
{
  return sub_1000A0988(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_10008EA80(float a1)
{
  return sub_1000A09CC(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, a1);
}

uint64_t (*sub_10008EA8C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0LL) + 40);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10008EAE4()
{
  return sub_10003374C(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_10008EAF0()
{
  return sub_100033788(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_10008EAFC()
{
  return sub_1000A3B84(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_10008EB08(char a1)
{
  return sub_1000A3BB8(a1, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t (*sub_10008EB14(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0LL) + 44);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10008EB5C()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0LL) + 44)) != 2;
}

uint64_t sub_10008EB84()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 44)) = 2;
  return result;
}

uint64_t sub_10008EBA8()
{
  return sub_1000A3C84(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_10008EBB4(char a1)
{
  return sub_1000A3CB8(a1, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t (*sub_10008EBC0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0LL) + 48);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10008EC08()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0LL) + 48)) != 2;
}

uint64_t sub_10008EC30()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 48)) = 2;
  return result;
}

int *sub_10008EC54@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0LL);
  *(_BYTE *)(a1 + result[5]) = 7;
  uint64_t v3 = a1 + result[6];
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  uint64_t v4 = a1 + result[7];
  *(_DWORD *)uint64_t v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  uint64_t v5 = a1 + result[8];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  uint64_t v6 = a1 + result[9];
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  uint64_t v7 = a1 + result[10];
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  *(_BYTE *)(a1 + result[11]) = 2;
  *(_BYTE *)(a1 + result[12]) = 2;
  return result;
}

uint64_t sub_10008ECF0()
{
  return 7LL;
}

double sub_10008ECF8()
{
  return sub_1000BE364(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_10008ED04(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_10010CC4C(v8);
    swift_release(v5);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 16, v12, 1LL, 0LL);
  *(double *)(v10 + 16) = a1;
  *(_BYTE *)(v10 + 24) = 0;
  return result;
}

void (*sub_10008EDB0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0LL, 0LL);
  double v6 = *(double *)(v5 + 16);
  if (*(_BYTE *)(v5 + 24)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10008EE34;
}

void sub_10008EE34(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 88);
    uint64_t v8 = *(void *)(v3 + 80);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_10010CC4C(v12);
    swift_release(v9);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_10008EF0C()
{
  return sub_1000BE5BC(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_10008EF18()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010CC4C(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 16, v10, 1LL, 0LL);
  *(void *)(v8 + 16) = 0LL;
  *(_BYTE *)(v8 + 24) = 1;
  return result;
}

double sub_10008EFBC()
{
  return sub_10009B5C8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_10008EFC8(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_10010CC4C(v8);
    swift_release(v5);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 32, v12, 1LL, 0LL);
  *(double *)(v10 + 32) = a1;
  *(_BYTE *)(v10 + 40) = 0;
  return result;
}

void (*sub_10008F074(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 32, v3, 0LL, 0LL);
  double v6 = *(double *)(v5 + 32);
  if (*(_BYTE *)(v5 + 40)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10008F0F8;
}

void sub_10008F0F8(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 88);
    uint64_t v8 = *(void *)(v3 + 80);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_10010CC4C(v12);
    swift_release(v9);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_10008F1D0()
{
  return sub_10009B830(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_10008F1DC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010CC4C(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 32, v10, 1LL, 0LL);
  *(void *)(v8 + 32) = 0LL;
  *(_BYTE *)(v8 + 40) = 1;
  return result;
}

double sub_10008F280()
{
  return sub_10009BF84(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_10008F28C(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_10010CC4C(v8);
    swift_release(v5);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 48, v12, 1LL, 0LL);
  *(double *)(v10 + 48) = a1;
  *(_BYTE *)(v10 + 56) = 0;
  return result;
}

void (*sub_10008F338(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 48, v3, 0LL, 0LL);
  double v6 = *(double *)(v5 + 48);
  if (*(_BYTE *)(v5 + 56)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10008F3BC;
}

void sub_10008F3BC(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 88);
    uint64_t v8 = *(void *)(v3 + 80);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_10010CC4C(v12);
    swift_release(v9);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_10008F494()
{
  return sub_10009C1EC(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_10008F4A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010CC4C(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 48, v10, 1LL, 0LL);
  *(void *)(v8 + 48) = 0LL;
  *(_BYTE *)(v8 + 56) = 1;
  return result;
}

double sub_10008F544()
{
  return sub_10009C2EC(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_10008F550(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_10010CC4C(v8);
    swift_release(v5);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 64, v12, 1LL, 0LL);
  *(double *)(v10 + 64) = a1;
  *(_BYTE *)(v10 + 72) = 0;
  return result;
}

void (*sub_10008F5FC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 64, v3, 0LL, 0LL);
  double v6 = *(double *)(v5 + 64);
  if (*(_BYTE *)(v5 + 72)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10008F680;
}

void sub_10008F680(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 88);
    uint64_t v8 = *(void *)(v3 + 80);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_10010CC4C(v12);
    swift_release(v9);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_10008F758()
{
  return sub_10009C554(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_10008F764()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010CC4C(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 64, v10, 1LL, 0LL);
  *(void *)(v8 + 64) = 0LL;
  *(_BYTE *)(v8 + 72) = 1;
  return result;
}

double sub_10008F808()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20));
  swift_beginAccess(v1 + 80, v3, 0LL, 0LL);
  double result = *(double *)(v1 + 80);
  if (*(_BYTE *)(v1 + 88)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_10008F860(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_10010CC4C(v8);
    swift_release(v5);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 80, v12, 1LL, 0LL);
  *(double *)(v10 + 80) = a1;
  *(_BYTE *)(v10 + 88) = 0;
  return result;
}

void (*sub_10008F90C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 80, v3, 0LL, 0LL);
  double v6 = *(double *)(v5 + 80);
  if (*(_BYTE *)(v5 + 88)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10008F990;
}

void sub_10008F990(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 88);
    uint64_t v8 = *(void *)(v3 + 80);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_10010CC4C(v12);
    swift_release(v9);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_10008FA68()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20));
  swift_beginAccess(v1 + 80, v3, 0LL, 0LL);
  return (*(_BYTE *)(v1 + 88) & 1) == 0;
}

uint64_t sub_10008FAB8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010CC4C(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 80, v10, 1LL, 0LL);
  *(void *)(v8 + 80) = 0LL;
  *(_BYTE *)(v8 + 88) = 1;
  return result;
}

float sub_10008FB5C()
{
  return sub_1000BFC74(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_10008FB68(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_10010CC4C(v8);
    swift_release(v5);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 92, v12, 1LL, 0LL);
  *(float *)(v10 + 92) = a1;
  *(_BYTE *)(v10 + 96) = 0;
  return result;
}

void (*sub_10008FC14(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 92, v3, 0LL, 0LL);
  float v6 = *(float *)(v5 + 92);
  if (*(_BYTE *)(v5 + 96)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_10008FC98;
}

void sub_10008FC98(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_10010CC4C(v12);
    swift_release(v9);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_10008FD70()
{
  return sub_1000BFECC(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_10008FD7C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010CC4C(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 92, v10, 1LL, 0LL);
  *(_DWORD *)(v8 + 92) = 0;
  *(_BYTE *)(v8 + 96) = 1;
  return result;
}

float sub_10008FE20()
{
  return sub_1000BFFC4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_10008FE2C(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_10010CC4C(v8);
    swift_release(v5);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 100, v12, 1LL, 0LL);
  *(float *)(v10 + 100) = a1;
  *(_BYTE *)(v10 + 104) = 0;
  return result;
}

void (*sub_10008FED8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 100, v3, 0LL, 0LL);
  float v6 = *(float *)(v5 + 100);
  if (*(_BYTE *)(v5 + 104)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_10008FF5C;
}

void sub_10008FF5C(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_10010CC4C(v12);
    swift_release(v9);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_100090034()
{
  return sub_1000C021C(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_100090040()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010CC4C(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 100, v10, 1LL, 0LL);
  *(_DWORD *)(v8 + 100) = 0;
  *(_BYTE *)(v8 + 104) = 1;
  return result;
}

float sub_1000900E4()
{
  return sub_1000C0314(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_1000900F0(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_10010CC4C(v8);
    swift_release(v5);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 108, v12, 1LL, 0LL);
  *(float *)(v10 + 108) = a1;
  *(_BYTE *)(v10 + 112) = 0;
  return result;
}

void (*sub_10009019C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 108, v3, 0LL, 0LL);
  float v6 = *(float *)(v5 + 108);
  if (*(_BYTE *)(v5 + 112)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_100090220;
}

void sub_100090220(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_10010CC4C(v12);
    swift_release(v9);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_1000902F8()
{
  return sub_1000C056C(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_100090304()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010CC4C(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 108, v10, 1LL, 0LL);
  *(_DWORD *)(v8 + 108) = 0;
  *(_BYTE *)(v8 + 112) = 1;
  return result;
}

uint64_t sub_1000903A8()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20));
  swift_beginAccess(v1 + 113, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 113) & 1;
}

uint64_t sub_1000903F4(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_10010CC4C(v8);
    swift_release(v5);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 113, v12, 1LL, 0LL);
  *(_BYTE *)(v10 + 113) = a1 & 1;
  return result;
}

void (*sub_1000904A0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 113, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 113) & 1;
  return sub_100090518;
}

void sub_100090518(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_10010CC4C(v12);
    swift_release(v9);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_1000905E8()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20));
  swift_beginAccess(v1 + 113, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 113) != 2;
}

uint64_t sub_100090638()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010CC4C(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 113, v10, 1LL, 0LL);
  *(_BYTE *)(v8 + 113) = 2;
  return result;
}

uint64_t sub_1000906D8()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20));
  swift_beginAccess(v1 + 114, v3, 0LL, 0LL);
  if (*(_BYTE *)(v1 + 114) == 4) {
    return 0LL;
  }
  else {
    return *(unsigned __int8 *)(v1 + 114);
  }
}

uint64_t sub_100090728(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_10010CC4C(v8);
    swift_release(v5);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 114, v12, 1LL, 0LL);
  *(_BYTE *)(v10 + 114) = a1;
  return result;
}

void (*sub_1000907D0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 114, v3, 0LL, 0LL);
  int v6 = *(unsigned __int8 *)(v5 + 114);
  if (v6 == 4) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10009084C;
}

void sub_10009084C(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_10010CC4C(v12);
    swift_release(v9);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_100090924()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20));
  swift_beginAccess(v1 + 114, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 114) != 4;
}

uint64_t sub_100090974()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010CC4C(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 114, v10, 1LL, 0LL);
  *(_BYTE *)(v8 + 114) = 4;
  return result;
}

uint64_t sub_100090A14@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BD678( &qword_100355540,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate,  a1);
}

uint64_t sub_100090A38(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355540);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10010CC4C(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355540);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355540);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100090BBC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355540);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355540);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355540);
  }

  else
  {
    sub_100003E68( (uint64_t)v5,  (uint64_t)v9,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  }

  return sub_100090D14;
}

void sub_100090D14(uint64_t a1, char a2)
{
}

BOOL sub_100090D28()
{
  return sub_10001D054( &qword_100355540,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_100090D4C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355540);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10010CC4C(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355540);
  swift_endAccess(v16);
  return swift_release(v11);
}

double sub_100090E80()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse);
}

uint64_t sub_100090E94(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse,  a1);
}

void (*sub_100090EB8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_100090F48;
}

void sub_100090F48(uint64_t *a1, char a2)
{
}

BOOL sub_100090F64()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse);
}

uint64_t sub_100090F78()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse);
}

uint64_t sub_100090F9C()
{
  return sub_10008D164( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay);
}

uint64_t sub_100090FB0(int a1)
{
  return sub_10008D1EC( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay);
}

void (*sub_100090FD4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_100091060;
}

void sub_100091060(uint64_t *a1, char a2)
{
}

BOOL sub_10009107C()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay);
}

uint64_t sub_100091090()
{
  return sub_10008D488( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay);
}

uint64_t sub_1000910B4()
{
  return sub_10008D164( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass);
}

uint64_t sub_1000910C8(int a1)
{
  return sub_10008D1EC( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass);
}

void (*sub_1000910EC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_100091178;
}

void sub_100091178(uint64_t *a1, char a2)
{
}

BOOL sub_100091194()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass);
}

uint64_t sub_1000911A8()
{
  return sub_10008D488( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass);
}

uint64_t sub_1000911CC()
{
  return sub_1000911E0( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
}

uint64_t sub_1000911E0(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (_BYTE *)(*(void *)(v2 + *(int *)(a1(0LL) + 20)) + *a2);
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return *v3 & 1;
}

uint64_t sub_10009123C(char a1)
{
  return sub_100091260( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
}

uint64_t sub_100091260( char a1, uint64_t (*a2)(void), uint64_t (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = v5;
  uint64_t v11 = *(int *)(a2(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v5 + v11)) & 1) == 0)
  {
    uint64_t v12 = *(void *)(v5 + v11);
    uint64_t v13 = a3(0LL);
    uint64_t v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    uint64_t v15 = swift_retain(v12);
    a4(v15);
    swift_release(v12);
    uint64_t v16 = *(void *)(v9 + v11);
    *(void *)(v9 + v11) = v14;
    swift_release(v16);
  }

  uint64_t v17 = (_BYTE *)(*(void *)(v9 + v11) + *a5);
  uint64_t result = swift_beginAccess(v17, v19, 1LL, 0LL);
  *uint64_t v17 = a1 & 1;
  return result;
}

void (*sub_100091328(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000913AC;
}

void sub_1000913AC(uint64_t *a1, char a2)
{
}

void sub_1000913C8( uint64_t *a1, char a2, uint64_t (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = *a1;
  char v10 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v12 = v9 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v12 = v9 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v13 = *(int *)(v9 + 80);
    uint64_t v14 = *(void *)(v9 + 72);
    uint64_t v15 = *(void *)(v14 + v13);
    uint64_t v16 = a3(0LL);
    uint64_t v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    uint64_t v18 = swift_retain(v15);
    a4(v18);
    swift_release(v15);
    uint64_t v19 = *(void *)(v14 + v13);
    *(void *)(v14 + v13) = v17;
    swift_release(v19);
  }

BOOL sub_1000914B4()
{
  return sub_1000914C8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
}

BOOL sub_1000914C8(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)(v2 + *(int *)(a1(0LL) + 20)) + *a2);
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return *v3 != 2;
}

uint64_t sub_100091528()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010CC4C(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 2;
  return result;
}

uint64_t sub_1000915D4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BD678( &qword_100355548,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure,  type metadata accessor for CLP_LogEntry_PrivateData_PressureSample,  a1);
}

uint64_t sub_1000915F8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355548);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10010CC4C(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355548);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355548);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10009177C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355548);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355548);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355548);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
  }

  return sub_1000918D4;
}

void sub_1000918D4(uint64_t a1, char a2)
{
}

BOOL sub_1000918E8()
{
  return sub_10001D054( &qword_100355548,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure,  type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t sub_10009190C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355548);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10010CC4C(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355548);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100091A40()
{
  return sub_100095784(&OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
}

uint64_t sub_100091A4C(char a1)
{
  return sub_10008D58C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
}

void (*sub_100091A70(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 4) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_100091AF8;
}

void sub_100091AF8(uint64_t *a1, char a2)
{
}

BOOL sub_100091B14()
{
  return sub_1000958B4(&OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
}

uint64_t sub_100091B20()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010CC4C(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 4;
  return result;
}

float sub_100091BCC()
{
  return sub_1000236F8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation);
}

uint64_t sub_100091BE0(float a1)
{
  return sub_1000B2E54( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation,  a1);
}

void (*sub_100091C04(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  float v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_100091C94;
}

void sub_100091C94(uint64_t *a1, char a2)
{
}

BOOL sub_100091CB0()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation);
}

uint64_t sub_100091CC4()
{
  return sub_10008D488( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation);
}

uint64_t sub_100091CE8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BD678( &qword_100355540,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate,  a1);
}

uint64_t sub_100091D0C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355540);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10010CC4C(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355540);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355540);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100091E90(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355540);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355540);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355540);
  }

  else
  {
    sub_100003E68( (uint64_t)v5,  (uint64_t)v9,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  }

  return sub_100091FE8;
}

void sub_100091FE8(uint64_t a1, char a2)
{
}

BOOL sub_100091FFC()
{
  return sub_10001D054( &qword_100355540,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_100092020()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355540);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10010CC4C(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355540);
  swift_endAccess(v16);
  return swift_release(v11);
}

double sub_100092154()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy);
}

uint64_t sub_100092168(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy,  a1);
}

void (*sub_10009218C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10009221C;
}

void sub_10009221C(uint64_t *a1, char a2)
{
}

BOOL sub_100092238()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy);
}

uint64_t sub_10009224C()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy);
}

double sub_100092270()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime);
}

uint64_t sub_100092284(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime,  a1);
}

void (*sub_1000922A8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_100092338;
}

void sub_100092338(uint64_t *a1, char a2)
{
}

BOOL sub_100092354()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime);
}

uint64_t sub_100092368()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime);
}

uint64_t sub_10009238C()
{
  return sub_10008DA54( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
}

uint64_t sub_1000923A0(char a1)
{
  return sub_10008D58C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
}

void (*sub_1000923C4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10009244C;
}

void sub_10009244C(uint64_t *a1, char a2)
{
}

BOOL sub_100092468()
{
  return sub_10008DB90( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
}

uint64_t sub_10009247C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010CC4C(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 3;
  return result;
}

uint64_t sub_100092528()
{
  return sub_1000911E0( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
}

uint64_t sub_10009253C(char a1)
{
  return sub_100091260( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
}

void (*sub_100092560(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000925E4;
}

void sub_1000925E4(uint64_t *a1, char a2)
{
}

BOOL sub_100092600()
{
  return sub_1000914C8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
}

uint64_t sub_100092614()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010CC4C(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 2;
  return result;
}

uint64_t sub_1000926C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100355550);
  __chkstk_darwin(v3);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v12, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_100355550);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  *(_BYTE *)(a1 + v7[7]) = 2;
  *(_BYTE *)(a1 + v7[8]) = 2;
  return sub_100015764((uint64_t)v5, &qword_100355550);
}

uint64_t sub_1000927FC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355550);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10010CC4C(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355550);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355550);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100092980(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355550);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355550);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    sub_100015764((uint64_t)v5, &qword_100355550);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
  }

  return sub_100092AEC;
}

void sub_100092AEC(uint64_t a1, char a2)
{
}

BOOL sub_100092B00()
{
  return sub_10001D054( &qword_100355550,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData,  type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t sub_100092B24()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355550);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10010CC4C(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355550);
  swift_endAccess(v16);
  return swift_release(v11);
}

double sub_100092C58()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope);
}

uint64_t sub_100092C6C(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope,  a1);
}

void (*sub_100092C90(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_100092D20;
}

void sub_100092D20(uint64_t *a1, char a2)
{
}

BOOL sub_100092D3C()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope);
}

uint64_t sub_100092D50()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope);
}

double sub_100092D74()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope);
}

uint64_t sub_100092D88(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope,  a1);
}

void (*sub_100092DAC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_100092E3C;
}

void sub_100092E3C(uint64_t *a1, char a2)
{
}

BOOL sub_100092E58()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope);
}

uint64_t sub_100092E6C()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope);
}

double sub_100092E90()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude);
}

uint64_t sub_100092EA4(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude,  a1);
}

void (*sub_100092EC8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_100092F58;
}

void sub_100092F58(uint64_t *a1, char a2)
{
}

BOOL sub_100092F74()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude);
}

uint64_t sub_100092F88()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude);
}

double sub_100092FAC()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty);
}

uint64_t sub_100092FC0(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty,  a1);
}

void (*sub_100092FE4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_100093074;
}

void sub_100093074(uint64_t *a1, char a2)
{
}

BOOL sub_100093090()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty);
}

uint64_t sub_1000930A4()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty);
}

double sub_1000930C8()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude);
}

uint64_t sub_1000930DC(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude,  a1);
}

void (*sub_100093100(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_100093190;
}

void sub_100093190(uint64_t *a1, char a2)
{
}

BOOL sub_1000931AC()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude);
}

uint64_t sub_1000931C0()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude);
}

double sub_1000931E4()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty);
}

uint64_t sub_1000931F8(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty,  a1);
}

void (*sub_10009321C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000932AC;
}

void sub_1000932AC(uint64_t *a1, char a2)
{
}

BOOL sub_1000932C8()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty);
}

uint64_t sub_1000932DC()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty);
}

uint64_t sub_100093300()
{
  return sub_1000911E0( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
}

uint64_t sub_100093314(char a1)
{
  return sub_100091260( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
}

void (*sub_100093338(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000933BC;
}

void sub_1000933BC(uint64_t *a1, char a2)
{
}

BOOL sub_1000933D8()
{
  return sub_1000914C8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
}

uint64_t sub_1000933EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010CC4C(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 2;
  return result;
}

double sub_100093498()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy);
}

uint64_t sub_1000934AC(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy,  a1);
}

void (*sub_1000934D0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_100093560;
}

void sub_100093560(uint64_t *a1, char a2)
{
}

BOOL sub_10009357C()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy);
}

uint64_t sub_100093590()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy);
}

double sub_1000935B4()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy);
}

uint64_t sub_1000935C8(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy,  a1);
}

void (*sub_1000935EC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10009367C;
}

void sub_10009367C(uint64_t *a1, char a2)
{
}

BOOL sub_100093698()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy);
}

uint64_t sub_1000936AC()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy);
}

uint64_t sub_1000936D0()
{
  return sub_1000911E0( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
}

uint64_t sub_1000936E4(char a1)
{
  return sub_100091260( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
}

void (*sub_100093708(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_10009378C;
}

void sub_10009378C(uint64_t *a1, char a2)
{
}

BOOL sub_1000937A8()
{
  return sub_1000914C8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
}

uint64_t sub_1000937BC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010CC4C(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 2;
  return result;
}

uint64_t sub_100093868@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BD678( &qword_100355540,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate,  a1);
}

uint64_t sub_10009388C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355540);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10010CC4C(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355540);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355540);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100093A10(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355540);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355540);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355540);
  }

  else
  {
    sub_100003E68( (uint64_t)v5,  (uint64_t)v9,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  }

  return sub_100093B68;
}

void sub_100093B68(uint64_t a1, char a2)
{
}

BOOL sub_100093B7C()
{
  return sub_10001D054( &qword_100355540,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_100093BA0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355540);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10010CC4C(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355540);
  swift_endAccess(v16);
  return swift_release(v11);
}

double sub_100093CD4()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy);
}

uint64_t sub_100093CE8(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy,  a1);
}

void (*sub_100093D0C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_100093D9C;
}

void sub_100093D9C(uint64_t *a1, char a2)
{
}

BOOL sub_100093DB8()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy);
}

uint64_t sub_100093DCC()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy);
}

uint64_t sub_100093DF0()
{
  return sub_10008DA54( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
}

uint64_t sub_100093E04(char a1)
{
  return sub_10008D58C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
}

void (*sub_100093E28(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_100093EB0;
}

void sub_100093EB0(uint64_t *a1, char a2)
{
}

BOOL sub_100093ECC()
{
  return sub_10008DB90( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
}

uint64_t sub_100093EE0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010CC4C(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 3;
  return result;
}

double sub_100093F8C()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse);
}

uint64_t sub_100093FA0(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse,  a1);
}

void (*sub_100093FC4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_100094054;
}

void sub_100094054(uint64_t *a1, char a2)
{
}

BOOL sub_100094070()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse);
}

uint64_t sub_100094084()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse);
}

double sub_1000940A8()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy);
}

uint64_t sub_1000940BC(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy,  a1);
}

void (*sub_1000940E0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_100094170;
}

void sub_100094170(uint64_t *a1, char a2)
{
}

BOOL sub_10009418C()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy);
}

uint64_t sub_1000941A0()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy);
}

double sub_1000941C4()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError);
}

uint64_t sub_1000941D8(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError,  a1);
}

void (*sub_1000941FC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10009428C;
}

void sub_10009428C(uint64_t *a1, char a2)
{
}

BOOL sub_1000942A8()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError);
}

uint64_t sub_1000942BC()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError);
}

double sub_1000942E0()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude);
}

uint64_t sub_1000942F4(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude,  a1);
}

void (*sub_100094318(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000943A8;
}

void sub_1000943A8(uint64_t *a1, char a2)
{
}

BOOL sub_1000943C4()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude);
}

uint64_t sub_1000943D8()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude);
}

double sub_1000943FC()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy);
}

uint64_t sub_100094410(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy,  a1);
}

void (*sub_100094434(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000944C4;
}

void sub_1000944C4(uint64_t *a1, char a2)
{
}

BOOL sub_1000944E0()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy);
}

uint64_t sub_1000944F4()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy);
}

uint64_t sub_100094518()
{
  return sub_1000911E0( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
}

uint64_t sub_10009452C(char a1)
{
  return sub_100091260( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
}

void (*sub_100094550(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000945D4;
}

void sub_1000945D4(uint64_t *a1, char a2)
{
}

BOOL sub_1000945F0()
{
  return sub_1000914C8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
}

uint64_t sub_100094604()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010CC4C(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 2;
  return result;
}

double sub_1000946B0()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude);
}

uint64_t sub_1000946C4(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude,  a1);
}

void (*sub_1000946E8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_100094778;
}

void sub_100094778(uint64_t *a1, char a2)
{
}

BOOL sub_100094794()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude);
}

uint64_t sub_1000947A8()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude);
}

double sub_1000947CC()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy);
}

uint64_t sub_1000947E0(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy,  a1);
}

void (*sub_100094804(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_100094894;
}

void sub_100094894(uint64_t *a1, char a2)
{
}

BOOL sub_1000948B0()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy);
}

uint64_t sub_1000948C4()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy);
}

uint64_t sub_1000948E8()
{
  uint64_t v1 = (void *)(*(void *)(v0
                            + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL)
                                     + 20))
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
  swift_beginAccess(v1, v3, 0LL, 0LL);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t sub_100094940(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_10010CC4C(v8);
    swift_release(v5);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  swift_beginAccess(v10, v13, 1LL, 0LL);
  uint64_t v11 = *v10;
  *uint64_t v10 = a1;
  return swift_bridgeObjectRelease(v11);
}

void (*sub_1000949FC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  uint64_t v6 = *v5;
  void v3[9] = *v5;
  swift_bridgeObjectRetain(v6);
  return sub_100094A84;
}

void sub_100094A84(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(int *)(*a1 + 88);
  uint64_t v5 = *(void *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(*(void *)(*a1 + 72));
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v5 + v4)) & 1) == 0)
    {
      uint64_t v6 = *(int *)(v2 + 88);
      uint64_t v7 = *(void *)(v2 + 80);
      uint64_t v8 = *(void *)(v7 + v6);
      uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
      uint64_t v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
      uint64_t v11 = swift_retain(v8);
      sub_10010CC4C(v11);
      swift_release(v8);
      uint64_t v12 = *(void *)(v7 + v6);
      *(void *)(v7 + v6) = v10;
      swift_release(v12);
    }

    swift_beginAccess(v13, v2 + 24, 1LL, 0LL);
    uint64_t v14 = *v13;
    *uint64_t v13 = v3;
    swift_bridgeObjectRelease(v14);
    uint64_t v15 = *(void *)(v2 + 72);
  }

  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v5 + v4)) & 1) == 0)
    {
      uint64_t v16 = *(int *)(v2 + 88);
      uint64_t v17 = *(void *)(v2 + 80);
      uint64_t v18 = *(void *)(v17 + v16);
      uint64_t v19 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
      uint64_t v20 = swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
      uint64_t v21 = swift_retain(v18);
      sub_10010CC4C(v21);
      swift_release(v18);
      uint64_t v22 = *(void *)(v17 + v16);
      *(void *)(v17 + v16) = v20;
      swift_release(v22);
    }

    swift_beginAccess(v23, v2 + 48, 1LL, 0LL);
    uint64_t v15 = *v23;
    uint64_t *v23 = v3;
  }

  swift_bridgeObjectRelease(v15);
  free((void *)v2);
}

uint64_t sub_100094BF8()
{
  return sub_10008DA54( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
}

uint64_t sub_100094C0C(char a1)
{
  return sub_10008D58C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
}

void (*sub_100094C30(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_100094CB8;
}

void sub_100094CB8(uint64_t *a1, char a2)
{
}

BOOL sub_100094CD4()
{
  return sub_10008DB90( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
}

uint64_t sub_100094CE8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010CC4C(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 3;
  return result;
}

uint64_t sub_100094D94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100355558);
  __chkstk_darwin(v3);
  uint64_t v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v13, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_100355558);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48LL))(v5, 1LL, v7) != 1) {
    return sub_100003E68( (uint64_t)v5,  a1,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  *(_BYTE *)(a1 + v7[8]) = 4;
  return sub_100015764((uint64_t)v5, &qword_100355558);
}

int *sub_100094ED8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0LL);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(void *)uint64_t v4 = 0LL;
  *(_BYTE *)(v4 + 8) = 1;
  uint64_t v5 = a1 + result[7];
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + 8) = 1;
  *(_BYTE *)(a1 + result[8]) = 4;
  return result;
}

uint64_t sub_100094F40(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355558);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10010CC4C(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355558);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355558);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000950C4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355558);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355558);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    v9[v6[8]] = 4;
    sub_100015764((uint64_t)v5, &qword_100355558);
  }

  else
  {
    sub_100003E68( (uint64_t)v5,  (uint64_t)v9,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
  }

  return sub_100095238;
}

void sub_100095238(uint64_t a1, char a2)
{
}

BOOL sub_10009524C()
{
  return sub_10001D054( &qword_100355558,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t sub_100095270()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355558);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10010CC4C(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355558);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000953A4()
{
  return sub_10008DA54( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
}

uint64_t sub_1000953B8(char a1)
{
  return sub_10008D58C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
}

void (*sub_1000953DC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_100095464;
}

void sub_100095464(uint64_t *a1, char a2)
{
}

BOOL sub_100095480()
{
  return sub_10008DB90( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
}

uint64_t sub_100095494()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010CC4C(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 3;
  return result;
}

double sub_100095540()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor);
}

uint64_t sub_100095554(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor,  a1);
}

void (*sub_100095578(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_100095608;
}

void sub_100095608(uint64_t *a1, char a2)
{
}

BOOL sub_100095624()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor);
}

uint64_t sub_100095638()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor);
}

double sub_10009565C()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor);
}

uint64_t sub_100095670(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor,  a1);
}

void (*sub_100095694(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_100095724;
}

void sub_100095724(uint64_t *a1, char a2)
{
}

BOOL sub_100095740()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor);
}

uint64_t sub_100095754()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor);
}

uint64_t sub_100095778()
{
  return sub_100095784(&OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
}

uint64_t sub_100095784(void *a1)
{
  uint64_t v2 = (unsigned __int8 *)(*(void *)(v1
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL)
                                              + 20))
                         + *a1);
  swift_beginAccess(v2, v4, 0LL, 0LL);
  if (*v2 == 4) {
    return 0LL;
  }
  else {
    return *v2;
  }
}

uint64_t sub_1000957E0(char a1)
{
  return sub_10008D58C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
}

void (*sub_100095804(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 4) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10009588C;
}

void sub_10009588C(uint64_t *a1, char a2)
{
}

BOOL sub_1000958A8()
{
  return sub_1000958B4(&OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
}

BOOL sub_1000958B4(void *a1)
{
  uint64_t v2 = (unsigned __int8 *)(*(void *)(v1
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL)
                                              + 20))
                         + *a1);
  swift_beginAccess(v2, v4, 0LL, 0LL);
  return *v2 != 4;
}

uint64_t sub_100095910()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010CC4C(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 4;
  return result;
}

uint64_t sub_1000959BC()
{
  return sub_1000911E0( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
}

uint64_t sub_1000959D0(char a1)
{
  return sub_100091260( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
}

void (*sub_1000959F4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_100095A78;
}

void sub_100095A78(uint64_t *a1, char a2)
{
}

BOOL sub_100095A94()
{
  return sub_1000914C8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
}

uint64_t sub_100095AA8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010CC4C(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 2;
  return result;
}

uint64_t sub_100095B54()
{
  return sub_10008DA54( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
}

uint64_t sub_100095B68(char a1)
{
  return sub_10008D58C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
}

void (*sub_100095B8C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_100095C14;
}

void sub_100095C14(uint64_t *a1, char a2)
{
}

BOOL sub_100095C30()
{
  return sub_10008DB90( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
}

uint64_t sub_100095C44()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010CC4C(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 3;
  return result;
}

uint64_t sub_100095CF0()
{
  return sub_10002B414( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
}

uint64_t sub_100095D04(char a1)
{
  return sub_10008D58C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
}

void (*sub_100095D28(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_100095DB0;
}

void sub_100095DB0(uint64_t *a1, char a2)
{
}

BOOL sub_100095DCC()
{
  return sub_10002B6BC( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
}

uint64_t sub_100095DE0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010CC4C(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 5;
  return result;
}

uint64_t sub_100095E8C()
{
  return sub_1000911E0( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
}

uint64_t sub_100095EA0(char a1)
{
  return sub_100091260( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass,  (void (*)(uint64_t))sub_10010CC4C,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
}

void (*sub_100095EC4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_100095F48;
}

void sub_100095F48(uint64_t *a1, char a2)
{
}

BOOL sub_100095F64()
{
  return sub_1000914C8( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
}

uint64_t sub_100095F78()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010CC4C(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 2;
  return result;
}

uint64_t sub_100096024(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A400();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_100096060(unsigned __int8 a1)
{
  return a1 - 1LL;
}

uint64_t sub_10009606C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A3BC();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000960A4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10010E254(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000960C8()
{
  return *v0 - 1LL;
}

uint64_t sub_1000960D4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10010E254(*a1);
  *a2 = result;
  return result;
}

void sub_1000960FC(void *a1@<X8>)
{
  *a1 = *v1 - 1LL;
}

uint64_t sub_10009610C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A378();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_100096144(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A334();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_10009617C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A2F0();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000961B4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A2AC();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000961EC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A268();
  return Enum.hash(into:)(a1, a2, v4);
}

double sub_100096224()
{
  return sub_10001FC20(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t sub_100096230(double a1)
{
  return sub_10001FC64(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, a1);
}

uint64_t (*sub_10009623C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_100096294()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t sub_1000962A0()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

double sub_1000962AC()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t sub_1000962B8(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, a1);
}

uint64_t (*sub_1000962C4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10009631C()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t sub_100096328()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

double sub_100096334()
{
  return sub_100027BE4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t sub_100096340(double a1)
{
  return sub_100027C28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, a1);
}

uint64_t (*sub_10009634C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0LL) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000963A4()
{
  return sub_100027CC4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t sub_1000963B0()
{
  return sub_100027D00(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t sub_1000963BC()
{
  return sub_1000B4F44(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t sub_1000963C8(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_1000963F4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0LL) + 32);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100003798;
}

BOOL sub_100096440()
{
  return *(_BYTE *)(v0
}

uint64_t sub_100096468()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 4;
  return result;
}

uint64_t sub_10009648C@<X0>(uint64_t a1@<X8>)
{
  return sub_100024054( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &qword_10037A540,  &qword_10037A548,  (uint64_t)sub_1000CCFE4,  a1);
}

uint64_t sub_1000964B0()
{
  return sub_1000365F4(&qword_10037A540, &qword_10037A548, (uint64_t)sub_1000CCFE4);
}

_UNKNOWN **sub_1000964CC()
{
  return &off_10033FA70;
}

void sub_1000964D8(void *a1@<X8>)
{
  *a1 = &off_10033FA98;
}

_UNKNOWN **sub_1000964E8()
{
  return &off_10033FAC0;
}

void sub_1000964F4(void *a1@<X8>)
{
  *a1 = &off_10033FAE8;
}

_UNKNOWN **sub_100096504()
{
  return &off_10033FB10;
}

void sub_100096510(void *a1@<X8>)
{
  *a1 = &off_10033FB38;
}

_UNKNOWN **sub_100096520()
{
  return &off_10033FB60;
}

void sub_10009652C(void *a1@<X8>)
{
  *a1 = &off_10033FB88;
}

_UNKNOWN **sub_10009653C()
{
  return &off_10033FBB0;
}

void sub_100096548(void *a1@<X8>)
{
  *a1 = &off_10033FBD8;
}

_UNKNOWN **sub_100096558()
{
  return &off_10033FC00;
}

void sub_100096564(void *a1@<X8>)
{
  *a1 = &off_10033FC28;
}

_UNKNOWN **sub_100096574()
{
  return &off_10033FC50;
}

void sub_100096580(void *a1@<X8>)
{
  *a1 = &off_10033FC78;
}

uint64_t sub_100096590()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0LL) + 20));
  if (v1 == 14) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000965B8(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_1000965E4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0LL) + 20);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 14) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100096630()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0LL) + 20)) != 14;
}

uint64_t sub_100096658()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 14;
  return result;
}

uint64_t sub_10009667C()
{
  return sub_10001A798(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t sub_100096688(char a1)
{
  return sub_10001A7CC(a1, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t (*sub_100096694(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0LL) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000966DC()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0LL) + 24)) != 2;
}

uint64_t sub_100096704()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_100096728@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AA274(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus, 14, 2, a1);
}

uint64_t sub_10009673C()
{
  return 14LL;
}

double sub_100096744()
{
  return sub_10001FC20(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_100096750(double a1)
{
  return sub_10001FC64(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, a1);
}

uint64_t (*sub_10009675C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000967B4()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_1000967C0()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

double sub_1000967CC()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_1000967D8(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, a1);
}

uint64_t (*sub_1000967E4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10009683C()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_100096848()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

double sub_100096854()
{
  return sub_100027BE4(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_100096860(double a1)
{
  return sub_100027C28(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, a1);
}

uint64_t (*sub_10009686C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0LL) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000968C4()
{
  return sub_100027CC4(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_1000968D0()
{
  return sub_100027D00(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

double sub_1000968DC()
{
  return sub_100027D3C(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_1000968E8(double a1)
{
  return sub_100027D80(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, a1);
}

uint64_t (*sub_1000968F4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0LL) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10009694C()
{
  return sub_100027E1C(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_100096958()
{
  return sub_100027E58(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

int *sub_100096964@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF110(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, a1);
}

double sub_100096970()
{
  return sub_10001FC20(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t sub_10009697C(double a1)
{
  return sub_10001FC64(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, a1);
}

uint64_t (*sub_100096988(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000969E0()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t sub_1000969EC()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

double sub_1000969F8()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t sub_100096A04(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, a1);
}

uint64_t (*sub_100096A10(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_100096A68()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t sub_100096A74()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t sub_100096A80@<X0>(uint64_t a1@<X8>)
{
  return sub_10008E720(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, a1);
}

double sub_100096A8C()
{
  return sub_10001FC20(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t sub_100096A98(double a1)
{
  return sub_10001FC64(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable, a1);
}

uint64_t (*sub_100096AA4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_100096AFC()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t sub_100096B08()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t sub_100096B14()
{
  return sub_10009E808(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t sub_100096B20(uint64_t a1, uint64_t a2)
{
  return sub_10009E868(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t (*sub_100096B2C(uint64_t a1))(uint64_t *, char)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0LL) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }

  else
  {
    uint64_t v6 = 0LL;
    unint64_t v7 = 0xE000000000000000LL;
  }

  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v5);
  return sub_100096B94;
}

BOOL sub_100096B98()
{
  return sub_10009E920(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t sub_100096BA4()
{
  return sub_10009E95C(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t sub_100096BB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0LL);
  uint64_t v3 = a1 + *(int *)(result + 20);
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  uint64_t v4 = (void *)(a1 + *(int *)(result + 24));
  *uint64_t v4 = 0LL;
  v4[1] = 0LL;
  return result;
}

uint64_t sub_100096BF8()
{
  return 0LL;
}

double sub_100096C04()
{
  return sub_10001FC20(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t sub_100096C10(double a1)
{
  return sub_10001FC64(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, a1);
}

uint64_t (*sub_100096C1C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_100096C74()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t sub_100096C80()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

double sub_100096C8C()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t sub_100096C98(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, a1);
}

uint64_t (*sub_100096CA4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_100096CFC()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t sub_100096D08()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

double sub_100096D14()
{
  return sub_100027BE4(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t sub_100096D20(double a1)
{
  return sub_100027C28(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, a1);
}

uint64_t (*sub_100096D2C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0LL) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_100096D84()
{
  return sub_100027CC4(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t sub_100096D90()
{
  return sub_100027D00(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

int *sub_100096D9C@<X0>(uint64_t a1@<X8>)
{
  return sub_10002EB64(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, a1);
}

uint64_t sub_100096DA8@<X0>(uint64_t a1@<X8>)
{
  return sub_100034894( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_Location,  &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  a1);
}

uint64_t sub_100096DCC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = __chkstk_darwin(v4);
  unint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1000D4BD0(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355538);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355538);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100096F4C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_1000970B4;
}

void sub_1000970B4(uint64_t a1, char a2)
{
}

BOOL sub_1000970C8()
{
  return sub_10001D054( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_Location,  &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000970EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1000D4BD0(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355538);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10009721C()
{
  return sub_10008D164( type metadata accessor for CLP_LogEntry_PrivateData_Location,  &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_100097230(int a1)
{
  return sub_10009FE24( a1,  type metadata accessor for CLP_LogEntry_PrivateData_Location,  type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass,  (void (*)(uint64_t))sub_1000D4BD0,  &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

void (*sub_100097254(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000972E0;
}

void sub_1000972E0(uint64_t *a1, char a2)
{
}

BOOL sub_1000972FC()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_Location,  &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_100097310()
{
  return sub_100022F10( type metadata accessor for CLP_LogEntry_PrivateData_Location,  type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass,  (void (*)(uint64_t))sub_1000D4BD0,  &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_100097334@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100355560);
  __chkstk_darwin(v3);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v12, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_100355560);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL);
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (qword_10037A500 != -1) {
    swift_once(&qword_10037A500, sub_1000C8C50);
  }
  uint64_t v9 = qword_10037A508;
  *(void *)(a1 + v8) = qword_10037A508;
  swift_retain(v9);
  return sub_100015764((uint64_t)v5, &qword_100355560);
}

uint64_t sub_100097474(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355560);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1000D4BD0(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355560);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355560);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000975F4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355560);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355560);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = *(int *)(v6 + 20);
    if (qword_10037A500 != -1) {
      swift_once(&qword_10037A500, sub_1000C8C50);
    }
    uint64_t v12 = qword_10037A508;
    *(void *)&v9[v11] = qword_10037A508;
    swift_retain(v12);
    sub_100015764((uint64_t)v5, &qword_100355560);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  }

  return sub_100097764;
}

void sub_100097764(uint64_t a1, char a2)
{
}

BOOL sub_100097778()
{
  return sub_10001D054( &qword_100355560,  type metadata accessor for CLP_LogEntry_PrivateData_Location,  &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
}

uint64_t sub_10009779C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355560);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1000D4BD0(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355560);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000978CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100355568);
  __chkstk_darwin(v3);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v12, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_100355568);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL);
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (qword_10037A540 != -1) {
    swift_once(&qword_10037A540, sub_1000CCFE4);
  }
  uint64_t v9 = qword_10037A548;
  *(void *)(a1 + v8) = qword_10037A548;
  swift_retain(v9);
  return sub_100015764((uint64_t)v5, &qword_100355568);
}

uint64_t sub_100097A0C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355568);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1000D4BD0(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355568);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355568);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100097B8C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355568);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355568);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = *(int *)(v6 + 20);
    if (qword_10037A540 != -1) {
      swift_once(&qword_10037A540, sub_1000CCFE4);
    }
    uint64_t v12 = qword_10037A548;
    *(void *)&v9[v11] = qword_10037A548;
    swift_retain(v12);
    sub_100015764((uint64_t)v5, &qword_100355568);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  }

  return sub_100097CFC;
}

void sub_100097CFC(uint64_t a1, char a2)
{
}

BOOL sub_100097D10()
{
  return sub_10001D054( &qword_100355568,  type metadata accessor for CLP_LogEntry_PrivateData_Location,  &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_100097D34()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355568);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1000D4BD0(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355568);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100097E64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100355570);
  __chkstk_darwin(v3);
  uint64_t v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v10, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_100355570);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0LL);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = 14;
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = 2;
  return sub_100015764((uint64_t)v5, &qword_100355570);
}

uint64_t sub_100097F80(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355570);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1000D4BD0(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355570);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355570);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100098100(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355570);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355570);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    v9[*(int *)(v6 + 20)] = 14;
    v9[*(int *)(v6 + 24)] = 2;
    sub_100015764((uint64_t)v5, &qword_100355570);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  }

  return sub_10009824C;
}

void sub_10009824C(uint64_t a1, char a2)
{
}

BOOL sub_100098260()
{
  return sub_10001D054( &qword_100355570,  type metadata accessor for CLP_LogEntry_PrivateData_Location,  &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status,  type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t sub_100098284()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355570);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1000D4BD0(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355570);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000983B4()
{
  return sub_1000911E0( type metadata accessor for CLP_LogEntry_PrivateData_Location,  &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
}

uint64_t sub_1000983C8(char a1)
{
  return sub_1000ACF78( a1,  type metadata accessor for CLP_LogEntry_PrivateData_Location,  type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass,  (void (*)(uint64_t))sub_1000D4BD0,  &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
}

void (*sub_1000983EC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_100098470;
}

void sub_100098470(uint64_t *a1, char a2)
{
}

BOOL sub_10009848C()
{
  return sub_1000914C8( type metadata accessor for CLP_LogEntry_PrivateData_Location,  &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
}

uint64_t sub_1000984A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_1000D4BD0(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 2;
  return result;
}

double sub_100098548()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_Location,  &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer);
}

uint64_t sub_10009855C(double a1)
{
  return sub_1000AC0A4( type metadata accessor for CLP_LogEntry_PrivateData_Location,  type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass,  (void (*)(uint64_t))sub_1000D4BD0,  &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer,  a1);
}

void (*sub_100098580(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_100098610;
}

void sub_100098610(uint64_t *a1, char a2)
{
}

BOOL sub_10009862C()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_Location,  &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer);
}

uint64_t sub_100098640()
{
  return sub_100024F0C( type metadata accessor for CLP_LogEntry_PrivateData_Location,  type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass,  (void (*)(uint64_t))sub_1000D4BD0,  &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer);
}

uint64_t sub_100098664()
{
  return sub_10008DA54( type metadata accessor for CLP_LogEntry_PrivateData_Location,  &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
}

uint64_t sub_100098678(char a1)
{
  return sub_100023164( a1,  type metadata accessor for CLP_LogEntry_PrivateData_Location,  type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass,  (void (*)(uint64_t))sub_1000D4BD0,  &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
}

void (*sub_10009869C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_100098724;
}

void sub_100098724(uint64_t *a1, char a2)
{
}

BOOL sub_100098740()
{
  return sub_10008DB90( type metadata accessor for CLP_LogEntry_PrivateData_Location,  &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
}

uint64_t sub_100098754()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_1000D4BD0(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 3;
  return result;
}

uint64_t sub_1000987FC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B1378( &qword_100355578,  type metadata accessor for CLP_LogEntry_PrivateData_Location,  &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed,  type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed,  a1);
}

uint64_t sub_100098820(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355578);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1000D4BD0(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355578);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355578);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000989A0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355578);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355578);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    uint64_t v14 = &v9[v6[8]];
    *(void *)uint64_t v14 = 0LL;
    v14[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355578);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  }

  return sub_100098B18;
}

void sub_100098B18(uint64_t a1, char a2)
{
}

BOOL sub_100098B2C()
{
  return sub_10001D054( &qword_100355578,  type metadata accessor for CLP_LogEntry_PrivateData_Location,  &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed,  type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_100098B50()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355578);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1000D4BD0(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355578);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100098C80@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BD678( &qword_100355580,  type metadata accessor for CLP_LogEntry_PrivateData_Location,  &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading,  type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading,  a1);
}

uint64_t sub_100098CA4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355580);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1000D4BD0(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355580);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355580);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100098E24(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355580);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355580);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355580);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  }

  return sub_100098F7C;
}

void sub_100098F7C(uint64_t a1, char a2)
{
}

BOOL sub_100098F90()
{
  return sub_10001D054( &qword_100355580,  type metadata accessor for CLP_LogEntry_PrivateData_Location,  &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading,  type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t sub_100098FB4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355580);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1000D4BD0(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355580);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000990E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100355588);
  __chkstk_darwin(v3);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v12, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_100355588);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = (void *)(a1 + *(int *)(v7 + 24));
  *uint64_t v9 = 0LL;
  v9[1] = 0LL;
  return sub_100015764((uint64_t)v5, &qword_100355588);
}

uint64_t sub_100099208(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355588);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1000D4BD0(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355588);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355588);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100099388(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355588);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355588);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(void *)uint64_t v12 = 0LL;
    *((void *)v12 + 1) = 0LL;
    sub_100015764((uint64_t)v5, &qword_100355588);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  }

  return sub_1000994DC;
}

void sub_1000994DC(uint64_t a1, char a2)
{
}

BOOL sub_1000994F0()
{
  return sub_10001D054( &qword_100355588,  type metadata accessor for CLP_LogEntry_PrivateData_Location,  &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable,  type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t sub_100099514()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355588);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1000D4BD0(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355588);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100099644()
{
  return sub_10008DA54( type metadata accessor for CLP_LogEntry_PrivateData_Location,  &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
}

uint64_t sub_100099658(char a1)
{
  return sub_100023164( a1,  type metadata accessor for CLP_LogEntry_PrivateData_Location,  type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass,  (void (*)(uint64_t))sub_1000D4BD0,  &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
}

void (*sub_10009967C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_100099704;
}

void sub_100099704(uint64_t *a1, char a2)
{
}

BOOL sub_100099720()
{
  return sub_10008DB90( type metadata accessor for CLP_LogEntry_PrivateData_Location,  &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
}

uint64_t sub_100099734()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_1000D4BD0(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 3;
  return result;
}

uint64_t sub_1000997DC@<X0>(uint64_t a1@<X8>)
{
  return sub_100034894( &qword_100355590,  type metadata accessor for CLP_LogEntry_PrivateData_Location,  &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed,  type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed,  a1);
}

uint64_t sub_100099800(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355590);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1000D4BD0(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355590);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355590);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100099980(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355590);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355590);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355590);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  }

  return sub_100099AE8;
}

void sub_100099AE8(uint64_t a1, char a2)
{
}

BOOL sub_100099AFC()
{
  return sub_10001D054( &qword_100355590,  type metadata accessor for CLP_LogEntry_PrivateData_Location,  &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed,  type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t sub_100099B20()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355590);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1000D4BD0(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355590);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100099C50(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A224();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_100099C88(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A1E0();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_100099CC0@<X0>(uint64_t a1@<X8>)
{
  return sub_100024054( type metadata accessor for CLP_LogEntry_PrivateData_Location,  &qword_10037A5C8,  &qword_10037A5D0,  (uint64_t)sub_1000D49B8,  a1);
}

uint64_t sub_100099CE4()
{
  return sub_1000365F4(&qword_10037A5C8, &qword_10037A5D0, (uint64_t)sub_1000D49B8);
}

_UNKNOWN **sub_100099D00()
{
  return &off_10033FCA0;
}

void sub_100099D0C(void *a1@<X8>)
{
  *a1 = &off_10033FCC8;
}

_UNKNOWN **sub_100099D1C()
{
  return &off_10033FCF0;
}

void sub_100099D28(void *a1@<X8>)
{
  *a1 = &off_10033FD18;
}

uint64_t sub_100099D38@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A705C(type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations, a1);
}

uint64_t sub_100099D44(uint64_t a1)
{
  return sub_1000A70B4(a1, type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations);
}

uint64_t (*sub_100099D50())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_100099D78@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  a1[1] = &_swiftEmptyArrayStorage;
  type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations(0LL);
  return UnknownStorage.init()();
}

uint64_t sub_100099DB4()
{
  return sub_1000A066C(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t sub_100099DC0(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_100099DEC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0LL) + 20);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 3) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100099E38()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0LL) + 20)) != 3;
}

uint64_t sub_100099E60()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 3;
  return result;
}

uint64_t sub_100099E84()
{
  return sub_10001A798(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t sub_100099E90(char a1)
{
  return sub_10001A7CC(a1, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t (*sub_100099E9C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0LL) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100099EE4()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0LL) + 24)) != 2;
}

uint64_t sub_100099F0C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_100099F30()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
  if (v1 == 5) {
    return 1LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_100099F58(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_100099F84(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0LL) + 28);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 1;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100099FD0()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0LL) + 28)) != 5;
}

uint64_t sub_100099FF8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 5;
  return result;
}

uint64_t sub_10009A01C()
{
  return sub_1000A9EA0(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t sub_10009A028(int a1)
{
  return sub_1000A9EE0(a1, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t (*sub_10009A034(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0LL) + 32);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10009A084()
{
  return sub_100027938(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t sub_10009A090()
{
  return sub_100027974(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t sub_10009A09C()
{
  return sub_10001B0E0(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t sub_10009A0A8(char a1)
{
  return sub_10001B114(a1, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t (*sub_10009A0B4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0LL) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10009A0FC()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0LL) + 36)) != 2;
}

uint64_t sub_10009A124()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

int *sub_10009A148@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0LL);
  *(_BYTE *)(a1 + result[5]) = 3;
  *(_BYTE *)(a1 + result[6]) = 2;
  *(_BYTE *)(a1 + result[7]) = 5;
  uint64_t v3 = a1 + result[8];
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  *(_BYTE *)(a1 + result[9]) = 2;
  return result;
}

uint64_t sub_10009A1B0()
{
  return sub_10001A698(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl);
}

uint64_t sub_10009A1BC(char a1)
{
  return sub_10001A6CC(a1, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl);
}

uint64_t (*sub_10009A1C8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0LL) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10009A210()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0LL) + 20)) != 2;
}

uint64_t sub_10009A238()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_10009A25C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0LL);
  *(_BYTE *)(a1 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_10009A290()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20));
  swift_beginAccess(v1 + 16, v3, 0LL, 0LL);
  if (*(_BYTE *)(v1 + 16) == 72) {
    return 0LL;
  }
  else {
    return *(unsigned __int8 *)(v1 + 16);
  }
}

uint64_t sub_10009A2E0(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_1000D9B78(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 16, v12, 1LL, 0LL);
  *(_BYTE *)(v10 + 16) = a1;
  return result;
}

void (*sub_10009A384(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0LL, 0LL);
  int v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 72) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10009A400;
}

void sub_10009A400(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_1000D9B78(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_10009A4D4()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20));
  swift_beginAccess(v1 + 16, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 16) != 72;
}

uint64_t sub_10009A524()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_1000D9B78(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 16, v10, 1LL, 0LL);
  *(_BYTE *)(v8 + 16) = 72;
  return result;
}

uint64_t sub_10009A5C0()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20));
  swift_beginAccess(v1 + 17, v3, 0LL, 0LL);
  if (*(_BYTE *)(v1 + 17) == 4) {
    return 0LL;
  }
  else {
    return *(unsigned __int8 *)(v1 + 17);
  }
}

uint64_t sub_10009A610(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_1000D9B78(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 17, v12, 1LL, 0LL);
  *(_BYTE *)(v10 + 17) = a1;
  return result;
}

void (*sub_10009A6B4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 17, v3, 0LL, 0LL);
  int v6 = *(unsigned __int8 *)(v5 + 17);
  if (v6 == 4) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10009A730;
}

void sub_10009A730(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_1000D9B78(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_10009A804()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20));
  swift_beginAccess(v1 + 17, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 17) != 4;
}

uint64_t sub_10009A854()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_1000D9B78(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 17, v10, 1LL, 0LL);
  *(_BYTE *)(v8 + 17) = 4;
  return result;
}

uint64_t sub_10009A8F0()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20));
  swift_beginAccess(v1 + 18, v3, 0LL, 0LL);
  if (*(_BYTE *)(v1 + 18) == 3) {
    return 0LL;
  }
  else {
    return *(unsigned __int8 *)(v1 + 18);
  }
}

uint64_t sub_10009A940(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_1000D9B78(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 18, v12, 1LL, 0LL);
  *(_BYTE *)(v10 + 18) = a1;
  return result;
}

void (*sub_10009A9E4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 18, v3, 0LL, 0LL);
  int v6 = *(unsigned __int8 *)(v5 + 18);
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10009AA60;
}

void sub_10009AA60(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_1000D9B78(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_10009AB34()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20));
  swift_beginAccess(v1 + 18, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 18) != 3;
}

uint64_t sub_10009AB84()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_1000D9B78(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 18, v10, 1LL, 0LL);
  *(_BYTE *)(v8 + 18) = 3;
  return result;
}

uint64_t sub_10009AC20()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20));
  swift_beginAccess(v1 + 19, v3, 0LL, 0LL);
  if (*(_BYTE *)(v1 + 19) == 4) {
    return 0LL;
  }
  else {
    return *(unsigned __int8 *)(v1 + 19);
  }
}

uint64_t sub_10009AC70(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_1000D9B78(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 19, v12, 1LL, 0LL);
  *(_BYTE *)(v10 + 19) = a1;
  return result;
}

void (*sub_10009AD14(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 19, v3, 0LL, 0LL);
  int v6 = *(unsigned __int8 *)(v5 + 19);
  if (v6 == 4) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10009AD90;
}

void sub_10009AD90(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_1000D9B78(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_10009AE64()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20));
  swift_beginAccess(v1 + 19, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 19) != 4;
}

uint64_t sub_10009AEB4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_1000D9B78(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 19, v10, 1LL, 0LL);
  *(_BYTE *)(v8 + 19) = 4;
  return result;
}

uint64_t sub_10009AF50()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20));
  swift_beginAccess(v1 + 20, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 20) & 1;
}

uint64_t sub_10009AF9C(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_1000D9B78(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 20, v12, 1LL, 0LL);
  *(_BYTE *)(v10 + 20) = a1 & 1;
  return result;
}

void (*sub_10009B044(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 20, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 20) & 1;
  return sub_10009B0BC;
}

void sub_10009B0BC(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_1000D9B78(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_10009B188()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20));
  swift_beginAccess(v1 + 20, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 20) != 2;
}

uint64_t sub_10009B1D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_1000D9B78(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 20, v10, 1LL, 0LL);
  *(_BYTE *)(v8 + 20) = 2;
  return result;
}

float sub_10009B274()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20));
  swift_beginAccess(v1 + 24, v3, 0LL, 0LL);
  float result = *(float *)(v1 + 24);
  if (*(_BYTE *)(v1 + 28)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_10009B2CC(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_1000D9B78(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 24, v12, 1LL, 0LL);
  *(float *)(v10 + 24) = a1;
  *(_BYTE *)(v10 + 28) = 0;
  return result;
}

void (*sub_10009B374(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 24, v3, 0LL, 0LL);
  float v6 = *(float *)(v5 + 24);
  if (*(_BYTE *)(v5 + 28)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_10009B3F8;
}

void sub_10009B3F8(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_1000D9B78(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_10009B4CC()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20));
  swift_beginAccess(v1 + 24, v3, 0LL, 0LL);
  return (*(_BYTE *)(v1 + 28) & 1) == 0;
}

uint64_t sub_10009B51C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_1000D9B78(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 24, v10, 1LL, 0LL);
  *(_DWORD *)(v8 + 24) = 0;
  *(_BYTE *)(v8 + 28) = 1;
  return result;
}

double sub_10009B5BC()
{
  return sub_10009B5C8(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

double sub_10009B5C8(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0LL) + 20));
  swift_beginAccess(v2 + 32, v4, 0LL, 0LL);
  double result = *(double *)(v2 + 32);
  if (*(_BYTE *)(v2 + 40)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_10009B624(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_1000D9B78(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 32, v12, 1LL, 0LL);
  *(double *)(v10 + 32) = a1;
  *(_BYTE *)(v10 + 40) = 0;
  return result;
}

void (*sub_10009B6CC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 32, v3, 0LL, 0LL);
  double v6 = *(double *)(v5 + 32);
  if (*(_BYTE *)(v5 + 40)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10009B750;
}

void sub_10009B750(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 88);
    uint64_t v8 = *(void *)(v3 + 80);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_1000D9B78(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_10009B824()
{
  return sub_10009B830(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

BOOL sub_10009B830(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0LL) + 20));
  swift_beginAccess(v2 + 32, v4, 0LL, 0LL);
  return (*(_BYTE *)(v2 + 40) & 1) == 0;
}

uint64_t sub_10009B884()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_1000D9B78(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 32, v10, 1LL, 0LL);
  *(void *)(v8 + 32) = 0LL;
  *(_BYTE *)(v8 + 40) = 1;
  return result;
}

uint64_t sub_10009B924()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20));
  swift_beginAccess(v1 + 41, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 41) & 1;
}

uint64_t sub_10009B970(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_1000D9B78(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 41, v12, 1LL, 0LL);
  *(_BYTE *)(v10 + 41) = a1 & 1;
  return result;
}

void (*sub_10009BA18(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 41, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 41) & 1;
  return sub_10009BA90;
}

void sub_10009BA90(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_1000D9B78(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_10009BB5C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20));
  swift_beginAccess(v1 + 41, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 41) != 2;
}

uint64_t sub_10009BBAC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_1000D9B78(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 41, v10, 1LL, 0LL);
  *(_BYTE *)(v8 + 41) = 2;
  return result;
}

uint64_t sub_10009BC48()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20));
  swift_beginAccess(v1 + 42, v3, 0LL, 0LL);
  if (*(_BYTE *)(v1 + 42) == 4) {
    return 0LL;
  }
  else {
    return *(unsigned __int8 *)(v1 + 42);
  }
}

uint64_t sub_10009BC98(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_1000D9B78(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 42, v12, 1LL, 0LL);
  *(_BYTE *)(v10 + 42) = a1;
  return result;
}

void (*sub_10009BD3C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 42, v3, 0LL, 0LL);
  int v6 = *(unsigned __int8 *)(v5 + 42);
  if (v6 == 4) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10009BDB8;
}

void sub_10009BDB8(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_1000D9B78(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_10009BE8C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20));
  swift_beginAccess(v1 + 42, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 42) != 4;
}

uint64_t sub_10009BEDC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_1000D9B78(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 42, v10, 1LL, 0LL);
  *(_BYTE *)(v8 + 42) = 4;
  return result;
}

double sub_10009BF78()
{
  return sub_10009BF84(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

double sub_10009BF84(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0LL) + 20));
  swift_beginAccess(v2 + 48, v4, 0LL, 0LL);
  double result = *(double *)(v2 + 48);
  if (*(_BYTE *)(v2 + 56)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_10009BFE0(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_1000D9B78(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 48, v12, 1LL, 0LL);
  *(double *)(v10 + 48) = a1;
  *(_BYTE *)(v10 + 56) = 0;
  return result;
}

void (*sub_10009C088(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 48, v3, 0LL, 0LL);
  double v6 = *(double *)(v5 + 48);
  if (*(_BYTE *)(v5 + 56)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10009C10C;
}

void sub_10009C10C(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 88);
    uint64_t v8 = *(void *)(v3 + 80);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_1000D9B78(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_10009C1E0()
{
  return sub_10009C1EC(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

BOOL sub_10009C1EC(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0LL) + 20));
  swift_beginAccess(v2 + 48, v4, 0LL, 0LL);
  return (*(_BYTE *)(v2 + 56) & 1) == 0;
}

uint64_t sub_10009C240()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_1000D9B78(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 48, v10, 1LL, 0LL);
  *(void *)(v8 + 48) = 0LL;
  *(_BYTE *)(v8 + 56) = 1;
  return result;
}

double sub_10009C2E0()
{
  return sub_10009C2EC(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

double sub_10009C2EC(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0LL) + 20));
  swift_beginAccess(v2 + 64, v4, 0LL, 0LL);
  double result = *(double *)(v2 + 64);
  if (*(_BYTE *)(v2 + 72)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_10009C348(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_1000D9B78(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 64, v12, 1LL, 0LL);
  *(double *)(v10 + 64) = a1;
  *(_BYTE *)(v10 + 72) = 0;
  return result;
}

void (*sub_10009C3F0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 64, v3, 0LL, 0LL);
  double v6 = *(double *)(v5 + 64);
  if (*(_BYTE *)(v5 + 72)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10009C474;
}

void sub_10009C474(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 88);
    uint64_t v8 = *(void *)(v3 + 80);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_1000D9B78(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_10009C548()
{
  return sub_10009C554(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

BOOL sub_10009C554(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0LL) + 20));
  swift_beginAccess(v2 + 64, v4, 0LL, 0LL);
  return (*(_BYTE *)(v2 + 72) & 1) == 0;
}

uint64_t sub_10009C5A8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_1000D9B78(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 64, v10, 1LL, 0LL);
  *(void *)(v8 + 64) = 0LL;
  *(_BYTE *)(v8 + 72) = 1;
  return result;
}

uint64_t sub_10009C648()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20));
  swift_beginAccess(v1 + 73, v3, 0LL, 0LL);
  if (*(_BYTE *)(v1 + 73) == 72) {
    return 0LL;
  }
  else {
    return *(unsigned __int8 *)(v1 + 73);
  }
}

uint64_t sub_10009C698(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_1000D9B78(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 73, v12, 1LL, 0LL);
  *(_BYTE *)(v10 + 73) = a1;
  return result;
}

void (*sub_10009C73C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 73, v3, 0LL, 0LL);
  int v6 = *(unsigned __int8 *)(v5 + 73);
  if (v6 == 72) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10009C7B8;
}

void sub_10009C7B8(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_1000D9B78(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_10009C88C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20));
  swift_beginAccess(v1 + 73, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 73) != 72;
}

uint64_t sub_10009C8DC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_1000D9B78(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 73, v10, 1LL, 0LL);
  *(_BYTE *)(v8 + 73) = 72;
  return result;
}

uint64_t sub_10009C978()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20));
  swift_beginAccess(v1 + 74, v3, 0LL, 0LL);
  if (*(_BYTE *)(v1 + 74) == 4) {
    return 0LL;
  }
  else {
    return *(unsigned __int8 *)(v1 + 74);
  }
}

uint64_t sub_10009C9C8(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_1000D9B78(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 74, v12, 1LL, 0LL);
  *(_BYTE *)(v10 + 74) = a1;
  return result;
}

void (*sub_10009CA6C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 74, v3, 0LL, 0LL);
  int v6 = *(unsigned __int8 *)(v5 + 74);
  if (v6 == 4) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10009CAE8;
}

void sub_10009CAE8(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_1000D9B78(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_10009CBBC()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20));
  swift_beginAccess(v1 + 74, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 74) != 4;
}

uint64_t sub_10009CC0C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_1000D9B78(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 74, v10, 1LL, 0LL);
  *(_BYTE *)(v8 + 74) = 4;
  return result;
}

uint64_t sub_10009CCA8@<X0>(uint64_t a1@<X8>)
{
  return sub_100034894( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  a1);
}

uint64_t sub_10009CCCC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1000D9B78(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355538);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355538);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10009CE4C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10009CFB4;
}

void sub_10009CFB4(uint64_t a1, char a2)
{
}

BOOL sub_10009CFC8()
{
  return sub_10001D054( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10009CFEC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1000D9B78(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355538);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10009D11C@<X0>(uint64_t a1@<X8>)
{
  return sub_100034894( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  a1);
}

uint64_t sub_10009D140(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1000D9B78(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355538);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355538);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10009D2C0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10009D428;
}

void sub_10009D428(uint64_t a1, char a2)
{
}

BOOL sub_10009D43C()
{
  return sub_10001D054( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10009D460()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1000D9B78(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355538);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10009D590(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A19C();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_10009D5C8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A158();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_10009D600(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A114();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_10009D638@<X0>(uint64_t a1@<X8>)
{
  return sub_100024054( type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity,  &qword_10037A608,  &qword_10037A610,  (uint64_t)sub_1000D9AA0,  a1);
}

uint64_t sub_10009D65C()
{
  return sub_1000365F4(&qword_10037A608, &qword_10037A610, (uint64_t)sub_1000D9AA0);
}

_UNKNOWN **sub_10009D678()
{
  return &off_10033FD40;
}

void sub_10009D684(void *a1@<X8>)
{
  *a1 = &off_10033FD68;
}

_UNKNOWN **sub_10009D694()
{
  return &off_10033FD90;
}

void sub_10009D6A0(void *a1@<X8>)
{
  *a1 = &off_10033FDB8;
}

_UNKNOWN **sub_10009D6B0()
{
  return &off_10033FDE0;
}

void sub_10009D6BC(void *a1@<X8>)
{
  *a1 = &off_10033FE08;
}

uint64_t sub_10009D6CC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAF00(type metadata accessor for CLP_LogEntry_PrivateData_MotionState, a1);
}

uint64_t sub_10009D6D8(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_MotionState,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_10009D6F4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_10009D844()
{
  return sub_100031370( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_MotionState,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10009D860()
{
  return sub_100031448( type metadata accessor for CLP_LogEntry_PrivateData_MotionState,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10009D87C()
{
  return sub_10002DF9C(type metadata accessor for CLP_LogEntry_PrivateData_MotionState);
}

uint64_t sub_10009D888(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionState);
}

uint64_t (*sub_10009D894(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10009D8E4()
{
  return sub_1000277C8(type metadata accessor for CLP_LogEntry_PrivateData_MotionState);
}

uint64_t sub_10009D8F0()
{
  return sub_100027804(type metadata accessor for CLP_LogEntry_PrivateData_MotionState);
}

uint64_t sub_10009D8FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100355598);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_100355598);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL);
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (qword_10037A608 != -1) {
    swift_once(&qword_10037A608, sub_1000D9AA0);
  }
  uint64_t v9 = qword_10037A610;
  *(void *)(a1 + v8) = qword_10037A610;
  swift_retain(v9);
  return sub_100015764((uint64_t)v5, &qword_100355598);
}

uint64_t sub_10009DA14(uint64_t a1)
{
  return sub_100030C2C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_MotionState,  &qword_100355598,  type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

void (*sub_10009DA30(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355598);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355598);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = *(int *)(v6 + 20);
    if (qword_10037A608 != -1) {
      swift_once(&qword_10037A608, sub_1000D9AA0);
    }
    uint64_t v12 = qword_10037A610;
    *(void *)&v9[v11] = qword_10037A610;
    swift_retain(v12);
    sub_100015764((uint64_t)v5, &qword_100355598);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
  }

  return sub_10009DB88;
}

void sub_10009DB88(uint64_t a1, char a2)
{
}

BOOL sub_10009DB9C()
{
  return sub_10002D37C( &qword_100355598,  type metadata accessor for CLP_LogEntry_PrivateData_MotionState,  type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

uint64_t sub_10009DBB8()
{
  return sub_10002D454( type metadata accessor for CLP_LogEntry_PrivateData_MotionState,  &qword_100355598,  type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

uint64_t sub_10009DBD4@<X0>(uint64_t a1@<X8>)
{
  return sub_10009E5E8( type metadata accessor for CLP_LogEntry_PrivateData_MotionState,  type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity,  a1);
}

uint64_t sub_10009DBE8@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, a1);
}

uint64_t sub_10009DBF4()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0LL) + 20));
  if (v1 == 72) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_10009DC1C(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_10009DC48(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0LL) + 20);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 72) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10009DC94()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0LL) + 20)) != 72;
}

uint64_t sub_10009DCBC()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 72;
  return result;
}

double sub_10009DCE0()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t sub_10009DCEC(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, a1);
}

uint64_t (*sub_10009DCF8(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10009DD50()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t sub_10009DD5C()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t sub_10009DD68@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B86E8(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, a1);
}

uint64_t sub_10009DD74(uint64_t a1)
{
  return sub_100030C2C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_10009DD90(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  double v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_10009DEE0()
{
  return sub_10002D37C( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10009DEFC()
{
  return sub_10002D454( type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10009DF18()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0LL) + 32));
  if (v1 == 72) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_10009DF40(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_10009DF6C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0LL) + 32);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 72) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10009DFB8()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0LL) + 32)) != 72;
}

uint64_t sub_10009DFE0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 72;
  return result;
}

uint64_t sub_10009E004@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0LL);
  *(_BYTE *)(a1 + v2[5]) = 72;
  uint64_t v3 = a1 + v2[6];
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  uint64_t v4 = a1 + v2[7];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))( v4,  1LL,  1LL,  v5);
  *(_BYTE *)(a1 + v2[8]) = 72;
  return result;
}

uint64_t sub_10009E08C()
{
  return 72LL;
}

uint64_t sub_10009E094@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAF00(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, a1);
}

uint64_t sub_10009E0A0(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_10009E0BC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_10009E20C()
{
  return sub_100031370( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10009E228()
{
  return sub_100031448( type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10009E244()
{
  return sub_10002DF9C(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver);
}

uint64_t sub_10009E250(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver);
}

uint64_t (*sub_10009E25C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10009E2AC()
{
  return sub_1000277C8(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver);
}

uint64_t sub_10009E2B8()
{
  return sub_100027804(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver);
}

uint64_t sub_10009E2C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_1003555A0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_1003555A0);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0LL);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v7[5]) = 72;
  uint64_t v8 = a1 + v7[6];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[7];
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  *(_BYTE *)(a1 + v7[8]) = 72;
  return sub_100015764((uint64_t)v5, &qword_1003555A0);
}

uint64_t sub_10009E3FC(uint64_t a1)
{
  return sub_100030C2C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver,  &qword_1003555A0,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

void (*sub_10009E418(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003555A0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_1003555A0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 72;
    uint64_t v11 = &v9[v6[6]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[7]];
    uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
    v9[v6[8]] = 72;
    sub_100015764((uint64_t)v5, &qword_1003555A0);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  }

  return sub_10009E588;
}

void sub_10009E588(uint64_t a1, char a2)
{
}

BOOL sub_10009E59C()
{
  return sub_10002D37C( &qword_1003555A0,  type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t sub_10009E5B8()
{
  return sub_10002D454( type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver,  &qword_1003555A0,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t sub_10009E5D4@<X0>(uint64_t a1@<X8>)
{
  return sub_10009E5E8( type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate,  a1);
}

uint64_t sub_10009E5E8@<X0>( uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (int *)a1(0LL);
  uint64_t v7 = a3 + v6[5];
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 1LL, 1LL, v8);
  uint64_t v9 = a3 + v6[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a3 + v6[7];
  uint64_t v11 = a2(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))( v10,  1LL,  1LL,  v11);
}

uint64_t sub_10009E694@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, a1);
}

uint64_t sub_10009E6A0()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL) + 20));
  uint64_t v2 = v1[1];
  if (v2) {
    uint64_t v3 = *v1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  swift_bridgeObjectRetain(v2);
  return v3;
}

uint64_t sub_10009E6F0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL) + 20));
  uint64_t result = swift_bridgeObjectRelease(v5[1]);
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_10009E734(uint64_t a1))(uint64_t *, char)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }

  else
  {
    uint64_t v6 = 0LL;
    unint64_t v7 = 0xE000000000000000LL;
  }

  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v5);
  return sub_100096B94;
}

BOOL sub_10009E79C()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL) + 20) + 8) != 0LL;
}

uint64_t sub_10009E7C8()
{
  uint64_t v1 = (void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL) + 20));
  uint64_t result = swift_bridgeObjectRelease(v1[1]);
  *uint64_t v1 = 0LL;
  v1[1] = 0LL;
  return result;
}

uint64_t sub_10009E7FC()
{
  return sub_10009E808(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

uint64_t sub_10009E808(uint64_t (*a1)(void))
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1(0LL) + 24));
  uint64_t v3 = v2[1];
  if (v3) {
    uint64_t v4 = *v2;
  }
  else {
    uint64_t v4 = 0LL;
  }
  swift_bridgeObjectRetain(v3);
  return v4;
}

uint64_t sub_10009E85C(uint64_t a1, uint64_t a2)
{
  return sub_10009E868(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

uint64_t sub_10009E868(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = (void *)(v3 + *(int *)(a3(0LL) + 24));
  uint64_t result = swift_bridgeObjectRelease(v6[1]);
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*sub_10009E8AC(uint64_t a1))(uint64_t *, char)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }

  else
  {
    uint64_t v6 = 0LL;
    unint64_t v7 = 0xE000000000000000LL;
  }

  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v5);
  return sub_100096B94;
}

BOOL sub_10009E914()
{
  return sub_10009E920(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

BOOL sub_10009E920(uint64_t (*a1)(void))
{
  return *(void *)(v1 + *(int *)(a1(0LL) + 24) + 8) != 0LL;
}

uint64_t sub_10009E950()
{
  return sub_10009E95C(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

uint64_t sub_10009E95C(uint64_t (*a1)(void))
{
  uint64_t v2 = (void *)(v1 + *(int *)(a1(0LL) + 24));
  uint64_t result = swift_bridgeObjectRelease(v2[1]);
  *uint64_t v2 = 0LL;
  v2[1] = 0LL;
  return result;
}

uint64_t sub_10009E994()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL) + 28));
  if (v1 == 67) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_10009E9BC(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_10009E9E8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL) + 28);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 67) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10009EA34()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL) + 28)) != 67;
}

uint64_t sub_10009EA5C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 67;
  return result;
}

uint64_t sub_10009EA80()
{
  return sub_1000A7894(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

uint64_t sub_10009EA8C(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_10009EAB8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL) + 32);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10009EB04()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL) + 32)) != 5;
}

uint64_t sub_10009EB2C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 5;
  return result;
}

uint64_t sub_10009EB50()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL) + 36));
  if (v1 == 3) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_10009EB78(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_10009EBA4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL) + 36);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 3) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10009EBF0()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL) + 36)) != 3;
}

uint64_t sub_10009EC18()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 3;
  return result;
}

uint64_t sub_10009EC40(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A0D0();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_10009EC78@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10010E3A8(a1);
  *a2 = result;
  return result;
}

unint64_t sub_10009EC9C@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10010E3A8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009ECC4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A08C();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_10009ECFC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A048();
  return Enum.hash(into:)(a1, a2, v4);
}

int *sub_10009ED34@<X0>(uint64_t a1@<X8>)
{
  unint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL);
  uint64_t v3 = (void *)(a1 + result[5]);
  *uint64_t v3 = 0LL;
  v3[1] = 0LL;
  unint64_t v4 = (void *)(a1 + result[6]);
  *unint64_t v4 = 0LL;
  v4[1] = 0LL;
  *(_BYTE *)(a1 + result[7]) = 67;
  *(_BYTE *)(a1 + result[8]) = 5;
  *(_BYTE *)(a1 + result[9]) = 3;
  return result;
}

uint64_t sub_10009ED98()
{
  return 67LL;
}

_UNKNOWN **sub_10009EDA0()
{
  return &off_10033FE30;
}

void sub_10009EDAC(void *a1@<X8>)
{
  *a1 = &off_10033FE30;
}

_UNKNOWN **sub_10009EDBC()
{
  return &off_10033FE98;
}

void sub_10009EDC8(void *a1@<X8>)
{
  *a1 = &off_10033FEC0;
}

_UNKNOWN **sub_10009EDD8()
{
  return &off_10033FEE8;
}

void sub_10009EDE4(void *a1@<X8>)
{
  *a1 = &off_10033FF10;
}

uint64_t sub_10009EDF4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAF00(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, a1);
}

uint64_t sub_10009EE00(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_10009EE1C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  unint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_10009EF6C()
{
  return sub_100031370( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10009EF88()
{
  return sub_100031448( type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10009EFA4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA124(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, a1);
}

uint64_t sub_10009EFB0(uint64_t a1)
{
  return sub_1000308E8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_10009EFCC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  unint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_10009F11C()
{
  return sub_100019928( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10009F138()
{
  return sub_100019A00( type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10009F154()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0LL) + 28));
  if (v1 == 19) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_10009F17C(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_10009F1A8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0LL) + 28);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 19) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10009F1F4()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0LL) + 28)) != 19;
}

uint64_t sub_10009F21C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 19;
  return result;
}

uint64_t sub_10009F240@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A69AC(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, a1);
}

uint64_t sub_10009F24C(uint64_t a1)
{
  return sub_1000343F8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_10009F268(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  unint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0LL) + 32);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_10009F3B8()
{
  return sub_10002E400( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10009F3D4()
{
  return sub_10002E4D8( type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10009F3F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_1003555A8);
  __chkstk_darwin(v3);
  unint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 36), (uint64_t)v5, &qword_1003555A8);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL);
  UnknownStorage.init()();
  size_t v8 = (void *)(a1 + v7[5]);
  *size_t v8 = 0LL;
  v8[1] = 0LL;
  uint64_t v9 = (void *)(a1 + v7[6]);
  *uint64_t v9 = 0LL;
  v9[1] = 0LL;
  *(_BYTE *)(a1 + v7[7]) = 67;
  *(_BYTE *)(a1 + v7[8]) = 5;
  *(_BYTE *)(a1 + v7[9]) = 3;
  return sub_100015764((uint64_t)v5, &qword_1003555A8);
}

uint64_t sub_10009F508(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0LL) + 36);
  sub_100015764(v3, &qword_1003555A8);
  sub_100003E68(a1, v3, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 0LL, 1LL, v4);
}

void (*sub_10009F578(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003555A8);
  unint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0LL) + 36);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_1003555A8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *uint64_t v11 = 0LL;
    v11[1] = 0LL;
    uint64_t v12 = &v9[v6[6]];
    *uint64_t v12 = 0LL;
    v12[1] = 0LL;
    v9[v6[7]] = 67;
    v9[v6[8]] = 5;
    v9[v6[9]] = 3;
    sub_100015764((uint64_t)v5, &qword_1003555A8);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
  }

  return sub_10009F6D0;
}

void sub_10009F6D0(uint64_t a1, char a2)
{
}

BOOL sub_10009F6E4()
{
  uint64_t v1 = sub_100003A0C(&qword_1003555A8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0LL);
  sub_10000E6C0(v0 + *(int *)(v4 + 36), (uint64_t)v3, &qword_1003555A8);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v3, 1LL, v5) != 1;
  sub_100015764((uint64_t)v3, &qword_1003555A8);
  return v6;
}

uint64_t sub_10009F798()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0LL) + 36);
  sub_100015764(v1, &qword_1003555A8);
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
}

uint64_t sub_10009F7F4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A004();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_10009F82C@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10010E3CC(a1);
  *a2 = result;
  return result;
}

unint64_t sub_10009F850@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10010E3CC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009F878@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0LL);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL);
  v5(v3, 1LL, 1LL, v4);
  v5(a1 + v2[6], 1LL, 1LL, v4);
  *(_BYTE *)(a1 + v2[7]) = 19;
  v5(a1 + v2[8], 1LL, 1LL, v4);
  uint64_t v6 = a1 + v2[9];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t sub_10009F948()
{
  return 19LL;
}

uint64_t sub_10009F950@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings, a1);
}

_UNKNOWN **sub_10009F95C()
{
  return &off_10033FF38;
}

void sub_10009F968(void *a1@<X8>)
{
  *a1 = &off_10033FF38;
}

uint64_t sub_10009F978@<X0>(uint64_t a1@<X8>)
{
  return sub_100034894( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator,  &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  a1);
}

uint64_t sub_10009F99C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1000DFAEC(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355538);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355538);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10009FB1C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10009FC84;
}

void sub_10009FC84(uint64_t a1, char a2)
{
}

BOOL sub_10009FC98()
{
  return sub_10001D054( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator,  &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10009FCBC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1000DFAEC(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355538);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10009FDEC()
{
  return sub_10008D164( type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator,  &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_10009FE00(int a1)
{
  return sub_10009FE24( a1,  type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator,  type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass,  (void (*)(uint64_t))sub_1000DFAEC,  &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_10009FE24( int a1, uint64_t (*a2)(void), uint64_t (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = v5;
  uint64_t v11 = *(int *)(a2(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v5 + v11)) & 1) == 0)
  {
    uint64_t v12 = *(void *)(v5 + v11);
    uint64_t v13 = a3(0LL);
    uint64_t v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    uint64_t v15 = swift_retain(v12);
    a4(v15);
    uint64_t v16 = *(void *)(v9 + v11);
    *(void *)(v9 + v11) = v14;
    swift_release(v16);
  }

  uint64_t v17 = *(void *)(v9 + v11) + *a5;
  uint64_t result = swift_beginAccess(v17, v19, 1LL, 0LL);
  *(_DWORD *)uint64_t v17 = a1;
  *(_BYTE *)(v17 + 4) = 0;
  return result;
}

void (*sub_10009FEE8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_10009FF74;
}

void sub_10009FF74(uint64_t *a1, char a2)
{
}

BOOL sub_10009FF90()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator,  &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_10009FFA4()
{
  return sub_100022F10( type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator,  type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass,  (void (*)(uint64_t))sub_1000DFAEC,  &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_10009FFC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_1003555B0);
  __chkstk_darwin(v3);
  uint64_t v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v15, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_1003555B0);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL);
  v10(v8, 1LL, 1LL, v9);
  v10(a1 + v7[6], 1LL, 1LL, v9);
  *(_BYTE *)(a1 + v7[7]) = 19;
  v10(a1 + v7[8], 1LL, 1LL, v9);
  uint64_t v11 = a1 + v7[9];
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
  return sub_100015764((uint64_t)v5, &qword_1003555B0);
}

uint64_t sub_1000A016C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003555B0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1000DFAEC(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_1003555B0);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_1003555B0);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000A02EC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003555B0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_1003555B0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL);
    v13(v11, 1LL, 1LL, v12);
    v13(&v9[v6[6]], 1LL, 1LL, v12);
    v9[v6[7]] = 19;
    v13(&v9[v6[8]], 1LL, 1LL, v12);
    uint64_t v14 = &v9[v6[9]];
    uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v14, 1LL, 1LL, v15);
    sub_100015764((uint64_t)v5, &qword_1003555B0);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  }

  return sub_1000A04B8;
}

void sub_1000A04B8(uint64_t a1, char a2)
{
}

BOOL sub_1000A04CC()
{
  return sub_10001D054( &qword_1003555B0,  type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator,  &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
}

uint64_t sub_1000A04F0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_1003555B0);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1000DFAEC(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_1003555B0);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000A0620@<X0>(uint64_t a1@<X8>)
{
  return sub_100024054( type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator,  &qword_10037A680,  &qword_10037A688,  (uint64_t)sub_1000DFA34,  a1);
}

uint64_t sub_1000A0644()
{
  return sub_1000365F4(&qword_10037A680, &qword_10037A688, (uint64_t)sub_1000DFA34);
}

uint64_t sub_1000A0660()
{
  return sub_1000A066C(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000A066C(uint64_t (*a1)(void))
{
  unsigned int v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0LL) + 20));
  if (v2 == 3) {
    return 0LL;
  }
  else {
    return v2;
  }
}

uint64_t sub_1000A0698(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_1000A06C4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL) + 20);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 3) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000A0710()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL) + 20)) != 3;
}

uint64_t sub_1000A0738()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 3;
  return result;
}

float sub_1000A075C()
{
  return sub_1000276E8(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000A0768(float a1)
{
  return sub_10002772C(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t (*sub_1000A0774(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL) + 24);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000A07CC()
{
  return sub_1000277C8(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000A07D8()
{
  return sub_100027804(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

float sub_1000A07E4()
{
  return sub_100021008(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000A07F0(float a1)
{
  return sub_10002104C(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t (*sub_1000A07FC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL) + 28);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000A0854()
{
  return sub_100020BD0(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000A0860()
{
  return sub_100020C0C(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

float sub_1000A086C()
{
  return sub_10002CCD0(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000A0878(float a1)
{
  return sub_10002CD14(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t (*sub_1000A0884(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL) + 32);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000A08DC()
{
  return sub_100027938(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000A08E8()
{
  return sub_100027974(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

float sub_1000A08F4()
{
  return sub_100033594(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000A0900(float a1)
{
  return sub_1000335D8(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t (*sub_1000A090C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL) + 36);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000A0964()
{
  return sub_10002828C(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000A0970()
{
  return sub_1000282C8(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

float sub_1000A097C()
{
  return sub_1000A0988(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

float sub_1000A0988(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0LL) + 40);
  float result = *(float *)v2;
  if (*(_BYTE *)(v2 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000A09C0(float a1)
{
  return sub_1000A09CC(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t sub_1000A09CC(uint64_t (*a1)(void), float a2)
{
  uint64_t result = a1(0LL);
  uint64_t v5 = v2 + *(int *)(result + 40);
  *(float *)uint64_t v5 = a2;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_1000A0A04(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL) + 40);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000A0A5C()
{
  return sub_10003374C(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000A0A68()
{
  return sub_100033788(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

float sub_1000A0A74()
{
  return sub_1000B3A88(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000A0A80(float a1)
{
  return sub_1000B3ACC(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t (*sub_1000A0A8C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL) + 44);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000A0AE4()
{
  return sub_100033884(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000A0AF0()
{
  return sub_1000338C0(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

float sub_1000A0AFC()
{
  return sub_1000B3B80(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000A0B08(float a1)
{
  return sub_1000B3BC4(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t (*sub_1000A0B14(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL) + 48);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000A0B6C()
{
  return sub_1000B3C60(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000A0B78()
{
  return sub_1000B3C9C(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

float sub_1000A0B84()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL) + 52);
  float result = *(float *)v1;
  if (*(_BYTE *)(v1 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000A0BB8(float a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL);
  uint64_t v4 = v1 + *(int *)(result + 52);
  *(float *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_1000A0BEC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL) + 52);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000A0C44()
{
  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL) + 52) + 4) & 1) == 0;
}

uint64_t sub_1000A0C70()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL);
  uint64_t v2 = v0 + *(int *)(result + 52);
  *(_DWORD *)uint64_t v2 = 0;
  *(_BYTE *)(v2 + 4) = 1;
  return result;
}

uint64_t sub_1000A0C9C()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL) + 56));
  if (v1 == 8) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000A0CC4(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

uint64_t (*sub_1000A0CF0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL) + 56);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 8) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000A0D3C()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL) + 56)) != 8;
}

uint64_t sub_1000A0D64()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 56)) = 8;
  return result;
}

float sub_1000A0D88()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL) + 60);
  float result = *(float *)v1;
  if (*(_BYTE *)(v1 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000A0DBC(float a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL);
  uint64_t v4 = v1 + *(int *)(result + 60);
  *(float *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_1000A0DF0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL) + 60);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000A0E48()
{
  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL) + 60) + 4) & 1) == 0;
}

uint64_t sub_1000A0E74()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL);
  uint64_t v2 = v0 + *(int *)(result + 60);
  *(_DWORD *)uint64_t v2 = 0;
  *(_BYTE *)(v2 + 4) = 1;
  return result;
}

uint64_t sub_1000A0EA0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100149FC0();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000A0EDC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100149F7C();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_1000A0F14@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10010E418(a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000A0F38@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10010E418(*a1);
  *a2 = result;
  return result;
}

int *sub_1000A0F60@<X0>(uint64_t a1@<X8>)
{
  unint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL);
  *(_BYTE *)(a1 + result[5]) = 3;
  uint64_t v3 = a1 + result[6];
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  uint64_t v4 = a1 + result[7];
  *(_DWORD *)uint64_t v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  uint64_t v5 = a1 + result[8];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  uint64_t v6 = a1 + result[9];
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  uint64_t v7 = a1 + result[10];
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  uint64_t v8 = a1 + result[11];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + result[12];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1 + result[13];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  *(_BYTE *)(a1 + result[14]) = 8;
  uint64_t v11 = a1 + result[15];
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  return result;
}

uint64_t sub_1000A1034()
{
  return 8LL;
}

_UNKNOWN **sub_1000A103C()
{
  return &off_10033FF70;
}

void sub_1000A1048(void *a1@<X8>)
{
  *a1 = &off_10033FF98;
}

_UNKNOWN **sub_1000A1058()
{
  return &off_10033FFC0;
}

void sub_1000A1064(void *a1@<X8>)
{
  *a1 = &off_10033FFC0;
}

uint64_t sub_1000A1074@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAF00(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, a1);
}

uint64_t sub_1000A1080(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000A109C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_1000A11EC()
{
  return sub_100031370( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A1208()
{
  return sub_100031448( type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A1224()
{
  return sub_10002DF9C(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry);
}

uint64_t sub_1000A1230(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry);
}

uint64_t (*sub_1000A123C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000A128C()
{
  return sub_1000277C8(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry);
}

uint64_t sub_1000A1298()
{
  return sub_100027804(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry);
}

uint64_t sub_1000A12A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_1003555B8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_1003555B8);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v7[5]) = 3;
  uint64_t v8 = a1 + v7[6];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v7[7];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v7[8];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  uint64_t v11 = a1 + v7[9];
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  uint64_t v12 = a1 + v7[10];
  *(_DWORD *)uint64_t v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  uint64_t v13 = a1 + v7[11];
  *(_DWORD *)uint64_t v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  uint64_t v14 = a1 + v7[12];
  *(_DWORD *)uint64_t v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  uint64_t v15 = a1 + v7[13];
  *(_DWORD *)uint64_t v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  *(_BYTE *)(a1 + v7[14]) = 8;
  uint64_t v16 = a1 + v7[15];
  *(_DWORD *)uint64_t v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  return sub_100015764((uint64_t)v5, &qword_1003555B8);
}

uint64_t sub_1000A142C(uint64_t a1)
{
  return sub_100030C2C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry,  &qword_1003555B8,  type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

void (*sub_1000A1448(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003555B8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_1003555B8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 3;
    uint64_t v11 = &v9[v6[6]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[7]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[8]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    uint64_t v14 = &v9[v6[9]];
    *(_DWORD *)uint64_t v14 = 0;
    v14[4] = 1;
    uint64_t v15 = &v9[v6[10]];
    *(_DWORD *)uint64_t v15 = 0;
    v15[4] = 1;
    uint64_t v16 = &v9[v6[11]];
    *(_DWORD *)uint64_t v16 = 0;
    v16[4] = 1;
    uint64_t v17 = &v9[v6[12]];
    *(_DWORD *)uint64_t v17 = 0;
    v17[4] = 1;
    uint64_t v18 = &v9[v6[13]];
    *(_DWORD *)uint64_t v18 = 0;
    v18[4] = 1;
    v9[v6[14]] = 8;
    uint64_t v19 = &v9[v6[15]];
    *(_DWORD *)uint64_t v19 = 0;
    v19[4] = 1;
    sub_100015764((uint64_t)v5, &qword_1003555B8);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
  }

  return sub_1000A1610;
}

void sub_1000A1610(uint64_t a1, char a2)
{
}

BOOL sub_1000A1624()
{
  return sub_10002D37C( &qword_1003555B8,  type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry,  type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000A1640()
{
  return sub_10002D454( type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry,  &qword_1003555B8,  type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000A165C@<X0>(uint64_t a1@<X8>)
{
  return sub_10009E5E8( type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry,  type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics,  a1);
}

uint64_t sub_1000A1670@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t sub_1000A167C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAF00(type metadata accessor for CLP_LogEntry_PrivateData_Timer, a1);
}

uint64_t sub_1000A1688(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_Timer,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000A16A4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Timer(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_1000A17F4()
{
  return sub_100031370( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_Timer,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A1810()
{
  return sub_100031448( type metadata accessor for CLP_LogEntry_PrivateData_Timer,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A182C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AA9D4( type metadata accessor for CLP_LogEntry_PrivateData_Timer,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  a1);
}

uint64_t sub_1000A1840@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAF00(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, a1);
}

uint64_t sub_1000A184C(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000A1868(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_1000A19B8()
{
  return sub_100031370( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A19D4()
{
  return sub_100031448( type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

double sub_1000A19F0()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000A19FC(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, a1);
}

uint64_t (*sub_1000A1A08(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000A1A60()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000A1A6C()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

double sub_1000A1A78()
{
  return sub_100027BE4(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000A1A84(double a1)
{
  return sub_100027C28(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, a1);
}

uint64_t (*sub_1000A1A90(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0LL) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000A1AE8()
{
  return sub_100027CC4(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000A1AF4()
{
  return sub_100027D00(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

float sub_1000A1B00()
{
  return sub_10002CCD0(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000A1B0C(float a1)
{
  return sub_10002CD14(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, a1);
}

uint64_t (*sub_1000A1B18(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0LL) + 32);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000A1B70()
{
  return sub_100027938(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000A1B7C()
{
  return sub_100027974(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

float sub_1000A1B88()
{
  return sub_100033594(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000A1B94(float a1)
{
  return sub_1000335D8(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, a1);
}

uint64_t (*sub_1000A1BA0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0LL) + 36);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000A1BF8()
{
  return sub_10002828C(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000A1C04()
{
  return sub_1000282C8(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

float sub_1000A1C10()
{
  return sub_1000A0988(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000A1C1C(float a1)
{
  return sub_1000A09CC(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, a1);
}

uint64_t (*sub_1000A1C28(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0LL) + 40);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000A1C80()
{
  return sub_10003374C(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000A1C8C()
{
  return sub_100033788(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000A1C98()
{
  return sub_1000A6DE4(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000A1CA4(int a1)
{
  return sub_1000A6E24(a1, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t (*sub_1000A1CB0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0LL) + 44);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000A1D00()
{
  return sub_100033884(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000A1D0C()
{
  return sub_1000338C0(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000A1D18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0LL);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))( v3,  1LL,  1LL,  v4);
  uint64_t v6 = a1 + v2[6];
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  uint64_t v7 = a1 + v2[7];
  *(void *)uint64_t v7 = 0LL;
  *(_BYTE *)(v7 + 8) = 1;
  uint64_t v8 = a1 + v2[8];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v2[9];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v2[10];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  uint64_t v11 = a1 + v2[11];
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  return result;
}

uint64_t sub_1000A1DDC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAF00(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t sub_1000A1DE8(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000A1E04(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  double v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_1000A1F54()
{
  return sub_100031370( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A1F70()
{
  return sub_100031448( type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

double sub_1000A1F8C()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000A1F98(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*sub_1000A1FA4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000A1FFC()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000A2008()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

double sub_1000A2014()
{
  return sub_100027BE4(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000A2020(double a1)
{
  return sub_100027C28(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*sub_1000A202C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000A2084()
{
  return sub_100027CC4(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000A2090()
{
  return sub_100027D00(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

double sub_1000A209C()
{
  return sub_100027D3C(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000A20A8(double a1)
{
  return sub_100027D80(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*sub_1000A20B4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000A210C()
{
  return sub_100027E1C(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000A2118()
{
  return sub_100027E58(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

double sub_1000A2124()
{
  return sub_10002A1C4(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000A2130(double a1)
{
  return sub_10002A208(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*sub_1000A213C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000A2194()
{
  return sub_10002A2A4(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000A21A0()
{
  return sub_10002A2E0(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

double sub_1000A21AC()
{
  return sub_1000B4298(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000A21B8(double a1)
{
  return sub_1000B42DC(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*sub_1000A21C4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 40);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000A221C()
{
  return sub_1000B4378(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000A2228()
{
  return sub_1000B43B4(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

double sub_1000A2234()
{
  return sub_1000B43F0(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000A2240(double a1)
{
  return sub_1000B4434(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*sub_1000A224C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 44);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000A22A4()
{
  return sub_1000B44D0(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000A22B0()
{
  return sub_1000B450C(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

double sub_1000A22BC()
{
  return sub_1000B82A8(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000A22C8(double a1)
{
  return sub_1000B82EC(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*sub_1000A22D4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 48);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000A232C()
{
  return sub_1000B8388(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000A2338()
{
  return sub_1000B83C4(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

double sub_1000A2344()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 52);
  double result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000A2378(double a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL);
  uint64_t v4 = v1 + *(int *)(result + 52);
  *(double *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_1000A23AC(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 52);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000A2404()
{
  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 52) + 8) & 1) == 0;
}

uint64_t sub_1000A2430()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL);
  uint64_t v2 = v0 + *(int *)(result + 52);
  *(void *)uint64_t v2 = 0LL;
  *(_BYTE *)(v2 + 8) = 1;
  return result;
}

double sub_1000A245C()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 56);
  double result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000A2490(double a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL);
  uint64_t v4 = v1 + *(int *)(result + 56);
  *(double *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_1000A24C4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 56);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000A251C()
{
  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 56) + 8) & 1) == 0;
}

uint64_t sub_1000A2548()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL);
  uint64_t v2 = v0 + *(int *)(result + 56);
  *(void *)uint64_t v2 = 0LL;
  *(_BYTE *)(v2 + 8) = 1;
  return result;
}

uint64_t sub_1000A2574()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 60)) & 1;
}

uint64_t sub_1000A2598(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 60)) = a1;
  return result;
}

uint64_t (*sub_1000A25C4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 60);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000A260C()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 60)) != 2;
}

uint64_t sub_1000A2634()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 60)) = 2;
  return result;
}

uint64_t sub_1000A2658()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 64)) & 1;
}

uint64_t sub_1000A267C(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 64)) = a1;
  return result;
}

uint64_t (*sub_1000A26A8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 64);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000A26F0()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 64)) != 2;
}

uint64_t sub_1000A2718()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 64)) = 2;
  return result;
}

uint64_t sub_1000A273C()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 68)) & 1;
}

uint64_t sub_1000A2760(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 68)) = a1;
  return result;
}

uint64_t (*sub_1000A278C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 68);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000A27D4()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 68)) != 2;
}

uint64_t sub_1000A27FC()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 68)) = 2;
  return result;
}

uint64_t sub_1000A2820()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 72)) & 1;
}

uint64_t sub_1000A2844(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 72)) = a1;
  return result;
}

uint64_t (*sub_1000A2870(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 72);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000A28B8()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 72)) != 2;
}

uint64_t sub_1000A28E0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 72)) = 2;
  return result;
}

uint64_t sub_1000A2904@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))( v3,  1LL,  1LL,  v4);
  uint64_t v6 = a1 + v2[6];
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  uint64_t v7 = a1 + v2[7];
  *(void *)uint64_t v7 = 0LL;
  *(_BYTE *)(v7 + 8) = 1;
  uint64_t v8 = a1 + v2[8];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v2[9];
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v2[10];
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  uint64_t v11 = a1 + v2[11];
  *(void *)uint64_t v11 = 0LL;
  *(_BYTE *)(v11 + 8) = 1;
  uint64_t v12 = a1 + v2[12];
  *(void *)uint64_t v12 = 0LL;
  *(_BYTE *)(v12 + 8) = 1;
  uint64_t v13 = a1 + v2[13];
  *(void *)uint64_t v13 = 0LL;
  *(_BYTE *)(v13 + 8) = 1;
  uint64_t v14 = a1 + v2[14];
  *(void *)uint64_t v14 = 0LL;
  *(_BYTE *)(v14 + 8) = 1;
  *(_BYTE *)(a1 + v2[15]) = 2;
  *(_BYTE *)(a1 + v2[16]) = 2;
  *(_BYTE *)(a1 + v2[17]) = 2;
  *(_BYTE *)(a1 + v2[18]) = 2;
  return result;
}

uint64_t sub_1000A2A1C@<X0>(uint64_t a1@<X8>)
{
  return sub_100034894( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_MapVector,  &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  a1);
}

uint64_t sub_1000A2A40(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1000E37C8(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355538);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355538);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000A2BC0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_1000A2D28;
}

void sub_1000A2D28(uint64_t a1, char a2)
{
}

BOOL sub_1000A2D3C()
{
  return sub_10001D054( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_MapVector,  &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A2D60()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1000E37C8(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355538);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000A2E90()
{
  return sub_10008D164( type metadata accessor for CLP_LogEntry_PrivateData_MapVector,  &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000A2EA4(int a1)
{
  return sub_10009FE24( a1,  type metadata accessor for CLP_LogEntry_PrivateData_MapVector,  type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass,  (void (*)(uint64_t))sub_1000E37C8,  &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

void (*sub_1000A2EC8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000A2F54;
}

void sub_1000A2F54(uint64_t *a1, char a2)
{
}

BOOL sub_1000A2F70()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_MapVector,  &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000A2F84()
{
  return sub_100022F10( type metadata accessor for CLP_LogEntry_PrivateData_MapVector,  type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass,  (void (*)(uint64_t))sub_1000E37C8,  &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000A2FA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_1003555C0);
  __chkstk_darwin(v3);
  uint64_t v5 = &v21[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v21, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_1003555C0);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  uint64_t v10 = a1 + v7[6];
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  uint64_t v11 = a1 + v7[7];
  *(void *)uint64_t v11 = 0LL;
  *(_BYTE *)(v11 + 8) = 1;
  uint64_t v12 = a1 + v7[8];
  *(void *)uint64_t v12 = 0LL;
  *(_BYTE *)(v12 + 8) = 1;
  uint64_t v13 = a1 + v7[9];
  *(void *)uint64_t v13 = 0LL;
  *(_BYTE *)(v13 + 8) = 1;
  uint64_t v14 = a1 + v7[10];
  *(void *)uint64_t v14 = 0LL;
  *(_BYTE *)(v14 + 8) = 1;
  uint64_t v15 = a1 + v7[11];
  *(void *)uint64_t v15 = 0LL;
  *(_BYTE *)(v15 + 8) = 1;
  uint64_t v16 = a1 + v7[12];
  *(void *)uint64_t v16 = 0LL;
  *(_BYTE *)(v16 + 8) = 1;
  uint64_t v17 = a1 + v7[13];
  *(void *)uint64_t v17 = 0LL;
  *(_BYTE *)(v17 + 8) = 1;
  uint64_t v18 = a1 + v7[14];
  *(void *)uint64_t v18 = 0LL;
  *(_BYTE *)(v18 + 8) = 1;
  *(_BYTE *)(a1 + v7[15]) = 2;
  *(_BYTE *)(a1 + v7[16]) = 2;
  *(_BYTE *)(a1 + v7[17]) = 2;
  *(_BYTE *)(a1 + v7[18]) = 2;
  return sub_100015764((uint64_t)v5, &qword_1003555C0);
}

uint64_t sub_1000A3198(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003555C0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1000E37C8(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_1003555C0);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_1003555C0);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000A3318(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003555C0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_1003555C0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
    uint64_t v13 = &v9[v6[6]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    uint64_t v14 = &v9[v6[7]];
    *(void *)uint64_t v14 = 0LL;
    v14[8] = 1;
    uint64_t v15 = &v9[v6[8]];
    *(void *)uint64_t v15 = 0LL;
    v15[8] = 1;
    uint64_t v16 = &v9[v6[9]];
    *(void *)uint64_t v16 = 0LL;
    v16[8] = 1;
    uint64_t v17 = &v9[v6[10]];
    *(void *)uint64_t v17 = 0LL;
    v17[8] = 1;
    uint64_t v18 = &v9[v6[11]];
    *(void *)uint64_t v18 = 0LL;
    v18[8] = 1;
    uint64_t v19 = &v9[v6[12]];
    *(void *)uint64_t v19 = 0LL;
    v19[8] = 1;
    uint64_t v20 = &v9[v6[13]];
    *(void *)uint64_t v20 = 0LL;
    v20[8] = 1;
    uint64_t v21 = &v9[v6[14]];
    *(void *)uint64_t v21 = 0LL;
    v21[8] = 1;
    v9[v6[15]] = 2;
    v9[v6[16]] = 2;
    v9[v6[17]] = 2;
    v9[v6[18]] = 2;
    sub_100015764((uint64_t)v5, &qword_1003555C0);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  }

  return sub_1000A3530;
}

void sub_1000A3530(uint64_t a1, char a2)
{
}

BOOL sub_1000A3544()
{
  return sub_10001D054( &qword_1003555C0,  type metadata accessor for CLP_LogEntry_PrivateData_MapVector,  &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData,  type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000A3568()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_1003555C0);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1000E37C8(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_1003555C0);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000A3698@<X0>(uint64_t a1@<X8>)
{
  return sub_100024054( type metadata accessor for CLP_LogEntry_PrivateData_MapVector,  &qword_10037A6D0,  &qword_10037A6D8,  (uint64_t)sub_1000E3710,  a1);
}

uint64_t sub_1000A36BC()
{
  return sub_1000365F4(&qword_10037A6D0, &qword_10037A6D8, (uint64_t)sub_1000E3710);
}

uint64_t sub_1000A36D8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAF00(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a1);
}

uint64_t sub_1000A36E4(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000A3700(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_1000A3850()
{
  return sub_100031370( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A386C()
{
  return sub_100031448( type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

double sub_1000A3888()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000A3894(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a1);
}

uint64_t (*sub_1000A38A0(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000A38F8()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000A3904()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

double sub_1000A3910()
{
  return sub_100027BE4(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000A391C(double a1)
{
  return sub_100027C28(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a1);
}

uint64_t (*sub_1000A3928(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000A3980()
{
  return sub_100027CC4(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000A398C()
{
  return sub_100027D00(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

double sub_1000A3998()
{
  return sub_100027D3C(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000A39A4(double a1)
{
  return sub_100027D80(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a1);
}

uint64_t (*sub_1000A39B0(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000A3A08()
{
  return sub_100027E1C(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000A3A14()
{
  return sub_100027E58(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000A3A20()
{
  return sub_10001B0E0(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000A3A2C(char a1)
{
  return sub_10001B114(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t (*sub_1000A3A38(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000A3A80()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL) + 36)) != 2;
}

uint64_t sub_1000A3AA8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

uint64_t sub_1000A3ACC()
{
  return sub_1000AAF40(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000A3AD8(char a1)
{
  return sub_1000AAF74(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t (*sub_1000A3AE4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL) + 40);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000A3B2C()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL) + 40)) != 2;
}

uint64_t sub_1000A3B54()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 40)) = 2;
  return result;
}

uint64_t sub_1000A3B78()
{
  return sub_1000A3B84(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000A3B84(uint64_t (*a1)(void))
{
  return *(_BYTE *)(v1 + *(int *)(a1(0LL) + 44)) & 1;
}

uint64_t sub_1000A3BAC(char a1)
{
  return sub_1000A3BB8(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000A3BB8(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0LL);
  *(_BYTE *)(v2 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*sub_1000A3BE4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL) + 44);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000A3C2C()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL) + 44)) != 2;
}

uint64_t sub_1000A3C54()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 44)) = 2;
  return result;
}

uint64_t sub_1000A3C78()
{
  return sub_1000A3C84(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000A3C84(uint64_t (*a1)(void))
{
  return *(_BYTE *)(v1 + *(int *)(a1(0LL) + 48)) & 1;
}

uint64_t sub_1000A3CAC(char a1)
{
  return sub_1000A3CB8(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000A3CB8(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0LL);
  *(_BYTE *)(v2 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*sub_1000A3CE4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL) + 48);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000A3D2C()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL) + 48)) != 2;
}

uint64_t sub_1000A3D54()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 48)) = 2;
  return result;
}

uint64_t sub_1000A3D78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))( v3,  1LL,  1LL,  v4);
  uint64_t v6 = a1 + v2[6];
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  uint64_t v7 = a1 + v2[7];
  *(void *)uint64_t v7 = 0LL;
  *(_BYTE *)(v7 + 8) = 1;
  uint64_t v8 = a1 + v2[8];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  *(_BYTE *)(a1 + v2[9]) = 2;
  *(_BYTE *)(a1 + v2[10]) = 2;
  *(_BYTE *)(a1 + v2[11]) = 2;
  *(_BYTE *)(a1 + v2[12]) = 2;
  return result;
}

uint64_t sub_1000A3E30@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAF00(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, a1);
}

uint64_t sub_1000A3E3C(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000A3E58(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  double v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_1000A3FA8()
{
  return sub_100031370( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A3FC4()
{
  return sub_100031448( type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A3FE0()
{
  return sub_10002DF9C(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

uint64_t sub_1000A3FEC(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

uint64_t (*sub_1000A3FF8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000A4048()
{
  return sub_1000277C8(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

uint64_t sub_1000A4054()
{
  return sub_100027804(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

uint64_t sub_1000A4060@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_1003555C8);
  __chkstk_darwin(v3);
  double v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_1003555C8);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  uint64_t v10 = a1 + v7[6];
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  uint64_t v11 = a1 + v7[7];
  *(void *)uint64_t v11 = 0LL;
  *(_BYTE *)(v11 + 8) = 1;
  uint64_t v12 = a1 + v7[8];
  *(void *)uint64_t v12 = 0LL;
  *(_BYTE *)(v12 + 8) = 1;
  *(_BYTE *)(a1 + v7[9]) = 2;
  *(_BYTE *)(a1 + v7[10]) = 2;
  *(_BYTE *)(a1 + v7[11]) = 2;
  *(_BYTE *)(a1 + v7[12]) = 2;
  return sub_100015764((uint64_t)v5, &qword_1003555C8);
}

uint64_t sub_1000A41C8(uint64_t a1)
{
  return sub_100030C2C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification,  &qword_1003555C8,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

void (*sub_1000A41E4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003555C8);
  double v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_1003555C8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
    uint64_t v13 = &v9[v6[6]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    uint64_t v14 = &v9[v6[7]];
    *(void *)uint64_t v14 = 0LL;
    v14[8] = 1;
    uint64_t v15 = &v9[v6[8]];
    *(void *)uint64_t v15 = 0LL;
    v15[8] = 1;
    v9[v6[9]] = 2;
    v9[v6[10]] = 2;
    v9[v6[11]] = 2;
    v9[v6[12]] = 2;
    sub_100015764((uint64_t)v5, &qword_1003555C8);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  }

  return sub_1000A4384;
}

void sub_1000A4384(uint64_t a1, char a2)
{
}

BOOL sub_1000A4398()
{
  return sub_10002D37C( &qword_1003555C8,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000A43B4()
{
  return sub_10002D454( type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification,  &qword_1003555C8,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000A43D0@<X0>(uint64_t a1@<X8>)
{
  return sub_10009E5E8( type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance,  a1);
}

uint64_t sub_1000A43E4@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a1);
}

uint64_t sub_1000A43F0@<X0>(uint64_t a1@<X8>)
{
  return sub_100034894( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  a1);
}

uint64_t sub_1000A4414(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10010E4F0(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355538);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355538);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000A4598(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_1000A4700;
}

void sub_1000A4700(uint64_t a1, char a2)
{
}

BOOL sub_1000A4714()
{
  return sub_10001D054( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A4738()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10010E4F0(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355538);
  swift_endAccess(v16);
  return swift_release(v11);
}

double sub_1000A486C()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg);
}

uint64_t sub_1000A4880(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass,  (void (*)(uint64_t))sub_10010E4F0,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg,  a1);
}

void (*sub_1000A48A4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000A4934;
}

void sub_1000A4934(uint64_t *a1, char a2)
{
}

BOOL sub_1000A4950()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg);
}

uint64_t sub_1000A4964()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass,  (void (*)(uint64_t))sub_10010E4F0,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg);
}

double sub_1000A4988()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg);
}

uint64_t sub_1000A499C(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass,  (void (*)(uint64_t))sub_10010E4F0,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg,  a1);
}

void (*sub_1000A49C0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000A4A50;
}

void sub_1000A4A50(uint64_t *a1, char a2)
{
}

BOOL sub_1000A4A6C()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg);
}

uint64_t sub_1000A4A80()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass,  (void (*)(uint64_t))sub_10010E4F0,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg);
}

double sub_1000A4AA4()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM);
}

uint64_t sub_1000A4AB8(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass,  (void (*)(uint64_t))sub_10010E4F0,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM,  a1);
}

void (*sub_1000A4ADC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000A4B6C;
}

void sub_1000A4B6C(uint64_t *a1, char a2)
{
}

BOOL sub_1000A4B88()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM);
}

uint64_t sub_1000A4B9C()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass,  (void (*)(uint64_t))sub_10010E4F0,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM);
}

double sub_1000A4BC0()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM);
}

uint64_t sub_1000A4BD4(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass,  (void (*)(uint64_t))sub_10010E4F0,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM,  a1);
}

void (*sub_1000A4BF8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000A4C88;
}

void sub_1000A4C88(uint64_t *a1, char a2)
{
}

BOOL sub_1000A4CA4()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM);
}

uint64_t sub_1000A4CB8()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass,  (void (*)(uint64_t))sub_10010E4F0,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM);
}

double sub_1000A4CDC()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM);
}

uint64_t sub_1000A4CF0(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass,  (void (*)(uint64_t))sub_10010E4F0,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM,  a1);
}

void (*sub_1000A4D14(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000A4DA4;
}

void sub_1000A4DA4(uint64_t *a1, char a2)
{
}

BOOL sub_1000A4DC0()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM);
}

uint64_t sub_1000A4DD4()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass,  (void (*)(uint64_t))sub_10010E4F0,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM);
}

uint64_t sub_1000A4DF8()
{
  return sub_10008DA54( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

uint64_t sub_1000A4E0C(char a1)
{
  return sub_10008D58C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass,  (void (*)(uint64_t))sub_10010E4F0,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

void (*sub_1000A4E30(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_1000A4EB8;
}

void sub_1000A4EB8(uint64_t *a1, char a2)
{
}

BOOL sub_1000A4ED4()
{
  return sub_10008DB90( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

uint64_t sub_1000A4EE8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010E4F0(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 3;
  return result;
}

double sub_1000A4F94()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg);
}

uint64_t sub_1000A4FA8(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass,  (void (*)(uint64_t))sub_10010E4F0,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg,  a1);
}

void (*sub_1000A4FCC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000A505C;
}

void sub_1000A505C(uint64_t *a1, char a2)
{
}

BOOL sub_1000A5078()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg);
}

uint64_t sub_1000A508C()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass,  (void (*)(uint64_t))sub_10010E4F0,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg);
}

double sub_1000A50B0()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg);
}

uint64_t sub_1000A50C4(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass,  (void (*)(uint64_t))sub_10010E4F0,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg,  a1);
}

void (*sub_1000A50E8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000A5178;
}

void sub_1000A5178(uint64_t *a1, char a2)
{
}

BOOL sub_1000A5194()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg);
}

uint64_t sub_1000A51A8()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass,  (void (*)(uint64_t))sub_10010E4F0,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg);
}

double sub_1000A51CC()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM);
}

uint64_t sub_1000A51E0(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass,  (void (*)(uint64_t))sub_10010E4F0,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM,  a1);
}

void (*sub_1000A5204(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000A5294;
}

void sub_1000A5294(uint64_t *a1, char a2)
{
}

BOOL sub_1000A52B0()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM);
}

uint64_t sub_1000A52C4()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass,  (void (*)(uint64_t))sub_10010E4F0,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM);
}

uint64_t sub_1000A52E8()
{
  return sub_1000911E0( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
}

uint64_t sub_1000A52FC(char a1)
{
  return sub_100091260( a1,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass,  (void (*)(uint64_t))sub_10010E4F0,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
}

void (*sub_1000A5320(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000A53A4;
}

void sub_1000A53A4(uint64_t *a1, char a2)
{
}

BOOL sub_1000A53C0()
{
  return sub_1000914C8( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
}

uint64_t sub_1000A53D4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010E4F0(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 2;
  return result;
}

double sub_1000A5480()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg);
}

uint64_t sub_1000A5494(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass,  (void (*)(uint64_t))sub_10010E4F0,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg,  a1);
}

void (*sub_1000A54B8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000A5548;
}

void sub_1000A5548(uint64_t *a1, char a2)
{
}

BOOL sub_1000A5564()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg);
}

uint64_t sub_1000A5578()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass,  (void (*)(uint64_t))sub_10010E4F0,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg);
}

double sub_1000A559C()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg);
}

uint64_t sub_1000A55B0(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass,  (void (*)(uint64_t))sub_10010E4F0,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg,  a1);
}

void (*sub_1000A55D4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000A5664;
}

void sub_1000A5664(uint64_t *a1, char a2)
{
}

BOOL sub_1000A5680()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg);
}

uint64_t sub_1000A5694()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass,  (void (*)(uint64_t))sub_10010E4F0,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg);
}

double sub_1000A56B8()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM);
}

uint64_t sub_1000A56CC(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass,  (void (*)(uint64_t))sub_10010E4F0,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM,  a1);
}

void (*sub_1000A56F0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000A5780;
}

void sub_1000A5780(uint64_t *a1, char a2)
{
}

BOOL sub_1000A579C()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM);
}

uint64_t sub_1000A57B0()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass,  (void (*)(uint64_t))sub_10010E4F0,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM);
}

double sub_1000A57D4()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM);
}

uint64_t sub_1000A57E8(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass,  (void (*)(uint64_t))sub_10010E4F0,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM,  a1);
}

void (*sub_1000A580C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000A589C;
}

void sub_1000A589C(uint64_t *a1, char a2)
{
}

BOOL sub_1000A58B8()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM);
}

uint64_t sub_1000A58CC()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass,  (void (*)(uint64_t))sub_10010E4F0,  &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM);
}

uint64_t sub_1000A58F0@<X0>(uint64_t a1@<X8>)
{
  return sub_100024054( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &qword_10037A6F8,  &qword_10037A700,  (uint64_t)sub_1000E5994,  a1);
}

uint64_t sub_1000A5914()
{
  return sub_1000365F4(&qword_10037A6F8, &qword_10037A700, (uint64_t)sub_1000E5994);
}

uint64_t sub_1000A5930@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAF00(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, a1);
}

uint64_t sub_1000A593C(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000A5958(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  double v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_1000A5AA8()
{
  return sub_100031370( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A5AC4()
{
  return sub_100031448( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A5AE0()
{
  return sub_10002DF9C(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

uint64_t sub_1000A5AEC(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

uint64_t (*sub_1000A5AF8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000A5B48()
{
  return sub_1000277C8(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

uint64_t sub_1000A5B54()
{
  return sub_100027804(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

uint64_t sub_1000A5B60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_1003555D0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_1003555D0);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0LL);
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (qword_10037A6F8 != -1) {
    swift_once(&qword_10037A6F8, sub_1000E5994);
  }
  uint64_t v9 = qword_10037A700;
  *(void *)(a1 + v8) = qword_10037A700;
  swift_retain(v9);
  return sub_100015764((uint64_t)v5, &qword_1003555D0);
}

uint64_t sub_1000A5C78(uint64_t a1)
{
  return sub_100030C2C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint,  &qword_1003555D0,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

void (*sub_1000A5C94(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003555D0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_1003555D0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = *(int *)(v6 + 20);
    if (qword_10037A6F8 != -1) {
      swift_once(&qword_10037A6F8, sub_1000E5994);
    }
    uint64_t v12 = qword_10037A700;
    *(void *)&v9[v11] = qword_10037A700;
    swift_retain(v12);
    sub_100015764((uint64_t)v5, &qword_1003555D0);
  }

  else
  {
    sub_100003E68( (uint64_t)v5,  (uint64_t)v9,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  }

  return sub_1000A5DEC;
}

void sub_1000A5DEC(uint64_t a1, char a2)
{
}

BOOL sub_1000A5E00()
{
  return sub_10002D37C( &qword_1003555D0,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

uint64_t sub_1000A5E1C()
{
  return sub_10002D454( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint,  &qword_1003555D0,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

uint64_t sub_1000A5E38@<X0>(uint64_t a1@<X8>)
{
  return sub_10009E5E8( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  a1);
}

uint64_t sub_1000A5E4C@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, a1);
}

uint64_t sub_1000A5E58()
{
  return sub_100027F98(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t sub_1000A5E64(uint64_t a1)
{
  return sub_100027FD8(a1, type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t (*sub_1000A5E70(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8)) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000A5EC4()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t sub_1000A5ED0()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

double sub_1000A5EDC()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t sub_1000A5EE8(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, a1);
}

uint64_t (*sub_1000A5EF4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000A5F4C()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t sub_1000A5F58()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

double sub_1000A5F64()
{
  return sub_100027BE4(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t sub_1000A5F70(double a1)
{
  return sub_100027C28(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, a1);
}

uint64_t (*sub_1000A5F7C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0LL) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000A5FD4()
{
  return sub_100027CC4(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t sub_1000A5FE0()
{
  return sub_100027D00(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

double sub_1000A5FEC()
{
  return sub_100027D3C(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t sub_1000A5FF8(double a1)
{
  return sub_100027D80(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, a1);
}

uint64_t (*sub_1000A6004(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0LL) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000A605C()
{
  return sub_100027E1C(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t sub_1000A6068()
{
  return sub_100027E58(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

double sub_1000A6074()
{
  return sub_10002A1C4(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t sub_1000A6080(double a1)
{
  return sub_10002A208(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, a1);
}

uint64_t (*sub_1000A608C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0LL) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000A60E4()
{
  return sub_10002A2A4(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t sub_1000A60F0()
{
  return sub_10002A2E0(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

int *sub_1000A60FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0LL);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(void *)uint64_t v4 = 0LL;
  *(_BYTE *)(v4 + 8) = 1;
  uint64_t v5 = a1 + result[7];
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + 8) = 1;
  uint64_t v6 = a1 + result[8];
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  uint64_t v7 = a1 + result[9];
  *(void *)uint64_t v7 = 0LL;
  *(_BYTE *)(v7 + 8) = 1;
  return result;
}

uint64_t sub_1000A6178@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA124(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, a1);
}

uint64_t sub_1000A6184(uint64_t a1)
{
  return sub_1000308E8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000A61A0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_1000A62F0()
{
  return sub_100019928( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A630C()
{
  return sub_100019A00( type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A6328@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B86E8(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, a1);
}

uint64_t sub_1000A6334(uint64_t a1)
{
  return sub_100030C2C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000A6350(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_1000A64A0()
{
  return sub_10002D37C( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A64BC()
{
  return sub_10002D454( type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A64D8()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0LL) + 32));
  if (v1 == 7) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000A6500(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_1000A652C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0LL) + 32);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 7) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000A6578()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0LL) + 32)) != 7;
}

uint64_t sub_1000A65A0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 7;
  return result;
}

uint64_t sub_1000A65C4()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0LL) + 36));
  if (v1 == 7) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000A65EC(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_1000A6618(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0LL) + 36);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 7) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000A6664()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0LL) + 36)) != 7;
}

uint64_t sub_1000A668C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 7;
  return result;
}

uint64_t sub_1000A66B0@<X0>(uint64_t a1@<X8>)
{
  return sub_100005424(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, a1);
}

uint64_t sub_1000A66BC(uint64_t a1)
{
  return sub_10000547C(a1, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint);
}

uint64_t (*sub_1000A66C8())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000A66F0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100149F38();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000A6728@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0LL);
  UnknownStorage.init()();
  uint64_t v3 = (char *)a1 + v2[6];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL);
  v5(v3, 1LL, 1LL, v4);
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v5)((char *)a1 + v2[7], 1LL, 1LL, v4);
  *((_BYTE *)a1 + v2[8]) = 7;
  *((_BYTE *)a1 + v2[9]) = 7;
  return result;
}

_UNKNOWN **sub_1000A67D4()
{
  return &off_10033FFE8;
}

void sub_1000A67E0(void *a1@<X8>)
{
  *a1 = &off_10033FFE8;
}

uint64_t sub_1000A67F0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B86E8(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, a1);
}

uint64_t sub_1000A67FC(uint64_t a1)
{
  return sub_100030C2C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000A6818(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_1000A6968()
{
  return sub_10002D37C( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A6984()
{
  return sub_10002D454( type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A69A0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A69AC(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, a1);
}

uint64_t sub_1000A69AC@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1(0LL);
  sub_10000E6C0(v2 + *(int *)(v8 + 32), (uint64_t)v7, &qword_100355538);
  uint64_t v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  UnknownStorage.init()();
  uint64_t v10 = a2 + v9[5];
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  uint64_t v11 = a2 + v9[6];
  *(void *)uint64_t v11 = 0LL;
  *(_BYTE *)(v11 + 8) = 1;
  uint64_t v12 = a2 + v9[7];
  *(void *)uint64_t v12 = 0LL;
  *(_BYTE *)(v12 + 8) = 1;
  return sub_100015764((uint64_t)v7, &qword_100355538);
}

uint64_t sub_1000A6AC8(uint64_t a1)
{
  return sub_1000343F8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000A6AE4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0LL) + 32);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_1000A6C34()
{
  return sub_10002E400( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A6C50()
{
  return sub_10002E4D8( type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A6C6C()
{
  return sub_1000B5040(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t sub_1000A6C78(int a1)
{
  return sub_1000B5080(a1, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t (*sub_1000A6C84(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0LL) + 36);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000A6CD4()
{
  return sub_10002828C(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t sub_1000A6CE0()
{
  return sub_1000282C8(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t sub_1000A6CEC()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
  if (v1 == 5) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000A6D14(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*sub_1000A6D40(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0LL) + 40);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000A6D8C()
{
  return *(_BYTE *)(v0
}

uint64_t sub_1000A6DB4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 40)) = 5;
  return result;
}

uint64_t sub_1000A6DD8()
{
  return sub_1000A6DE4(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t sub_1000A6DE4(uint64_t (*a1)(void))
{
  uint64_t v2 = (_BYTE *)(v1 + *(int *)(a1(0LL) + 44));
  if (v2[4]) {
    return 0LL;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t sub_1000A6E18(int a1)
{
  return sub_1000A6E24(a1, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t sub_1000A6E24(int a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0LL);
  uint64_t v5 = v2 + *(int *)(result + 44);
  *(_DWORD *)uint64_t v5 = a1;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_1000A6E58(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0LL) + 44);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000A6EA8()
{
  return sub_100033884(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t sub_1000A6EB4()
{
  return sub_1000338C0(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t sub_1000A6EC0()
{
  return sub_1000A3C84(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t sub_1000A6ECC(char a1)
{
  return sub_1000A3CB8(a1, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t (*sub_1000A6ED8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0LL) + 48);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000A6F20()
{
  return *(_BYTE *)(v0
}

uint64_t sub_1000A6F48()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 48)) = 2;
  return result;
}

uint64_t sub_1000A6F6C()
{
  return *(_BYTE *)(v0
}

uint64_t sub_1000A6F90(char a1)
{
  char v2 = a1 & 1;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 52)) = v2;
  return result;
}

uint64_t (*sub_1000A6FBC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0LL) + 52);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000A7004()
{
  return *(_BYTE *)(v0
}

uint64_t sub_1000A702C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 52)) = 2;
  return result;
}

uint64_t sub_1000A7050@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A705C(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, a1);
}

uint64_t sub_1000A705C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0LL) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_1000A70A8(uint64_t a1)
{
  return sub_1000A70B4(a1, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t sub_1000A70B4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0LL) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*sub_1000A70FC())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000A7124(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100149EF4();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000A715C(uint64_t a1)
{
  if (a1 == 1) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 2;
  }
  if (a1) {
    return v1;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000A7174(char a1)
{
  return a1 & 1;
}

BOOL sub_1000A717C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1000A7194(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100149EB0();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000A71CC@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!result) {
    char v2 = 0;
  }
  *a2 = v2;
  return result;
}

void *sub_1000A71E8@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1LL) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

uint64_t sub_1000A7208@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  a1[1] = &_swiftEmptyArrayStorage;
  char v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0LL);
  UnknownStorage.init()();
  char v3 = (char *)a1 + v2[7];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL);
  v5(v3, 1LL, 1LL, v4);
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v5)((char *)a1 + v2[8], 1LL, 1LL, v4);
  uint64_t v7 = (char *)a1 + v2[9];
  *(_DWORD *)uint64_t v7 = 0;
  v7[4] = 1;
  *((_BYTE *)a1 + v2[10]) = 5;
  size_t v8 = (char *)a1 + v2[11];
  *(_DWORD *)size_t v8 = 0;
  void v8[4] = 1;
  *((_BYTE *)a1 + v2[12]) = 2;
  *((_BYTE *)a1 + v2[13]) = 2;
  return result;
}

_UNKNOWN **sub_1000A72E4()
{
  return &off_100340010;
}

void sub_1000A72F0(void *a1@<X8>)
{
  *a1 = &off_100340038;
}

_UNKNOWN **sub_1000A7300()
{
  return &off_100340060;
}

void sub_1000A730C(void *a1@<X8>)
{
  *a1 = &off_100340088;
}

uint64_t sub_1000A731C()
{
  return sub_1000BB8DC(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t sub_1000A7328(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_1000A7354(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0LL) + 20);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000A73A0()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0LL) + 20)) != 5;
}

uint64_t sub_1000A73C8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 5;
  return result;
}

uint64_t sub_1000A73EC()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0LL) + 24));
  if (v1 == 5) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000A7414(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_1000A7440(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0LL) + 24);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000A748C()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0LL) + 24)) != 5;
}

uint64_t sub_1000A74B4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 5;
  return result;
}

uint64_t sub_1000A74D8()
{
  return sub_10001A898(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t sub_1000A74E4(char a1)
{
  return sub_10000534C(a1, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t (*sub_1000A74F0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0LL) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000A7538()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0LL) + 28)) != 2;
}

uint64_t sub_1000A7560()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_1000A7584()
{
  return sub_10001A96C(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t sub_1000A7590(char a1)
{
  return sub_10001A9A0(a1, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t (*sub_1000A759C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0LL) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000A75E4()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0LL) + 32)) != 2;
}

uint64_t sub_1000A760C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

int *sub_1000A7630@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0LL);
  *(_BYTE *)(a1 + result[5]) = 5;
  *(_BYTE *)(a1 + result[6]) = 5;
  *(_BYTE *)(a1 + result[7]) = 2;
  *(_BYTE *)(a1 + result[8]) = 2;
  return result;
}

double sub_1000A7680()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL) + 20);
  double result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8)) {
    return -1.0;
  }
  return result;
}

uint64_t sub_1000A76B4(double a1)
{
  return sub_10001FC64(type metadata accessor for CLP_LogEntry_PrivateData_Battery, a1);
}

uint64_t (*sub_1000A76C0(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = -1.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000A7718()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t sub_1000A7724()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t sub_1000A7730()
{
  return sub_10001A798(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t sub_1000A773C(char a1)
{
  return sub_10001A7CC(a1, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t (*sub_1000A7748(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000A7790()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL) + 24)) != 2;
}

uint64_t sub_1000A77B8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_1000A77DC()
{
  return sub_10001A898(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t sub_1000A77E8(char a1)
{
  return sub_10000534C(a1, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t (*sub_1000A77F4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000A783C()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL) + 28)) != 2;
}

uint64_t sub_1000A7864()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_1000A7888()
{
  return sub_1000A7894(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t sub_1000A7894(uint64_t (*a1)(void))
{
  unsigned int v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0LL) + 32));
  if (v2 == 5) {
    return 0LL;
  }
  else {
    return v2;
  }
}

uint64_t sub_1000A78C0(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_1000A78EC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL) + 32);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000A7938()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL) + 32)) != 5;
}

uint64_t sub_1000A7960()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 5;
  return result;
}

uint64_t sub_1000A7984()
{
  return sub_10001B0E0(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t sub_1000A7990(char a1)
{
  return sub_10001B114(a1, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t (*sub_1000A799C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000A79E4()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL) + 36)) != 2;
}

uint64_t sub_1000A7A0C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

uint64_t sub_1000A7A30()
{
  uint64_t v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL) + 40));
  if (v1[4]) {
    return 0LL;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t sub_1000A7A60(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL);
  uint64_t v4 = v1 + *(int *)(result + 40);
  *(_DWORD *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_1000A7A94(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL) + 40);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000A7AE4()
{
  return sub_10003374C(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t sub_1000A7AF0()
{
  return sub_100033788(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

int *sub_1000A7AFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  *(_BYTE *)(a1 + result[6]) = 2;
  *(_BYTE *)(a1 + result[7]) = 2;
  *(_BYTE *)(a1 + result[8]) = 5;
  *(_BYTE *)(a1 + result[9]) = 2;
  uint64_t v4 = a1 + result[10];
  *(_DWORD *)uint64_t v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  return result;
}

uint64_t sub_1000A7B70@<X0>(uint64_t a1@<X8>)
{
  return sub_100034894( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  a1);
}

uint64_t sub_1000A7B94(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10010EBB4(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355538);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355538);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000A7D18(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_1000A7E80;
}

void sub_1000A7E80(uint64_t a1, char a2)
{
}

BOOL sub_1000A7E94()
{
  return sub_10001D054( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A7EB8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10010EBB4(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355538);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000A7FEC()
{
  return sub_10008D164( type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000A8000(int a1)
{
  return sub_10008D1EC( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass,  (void (*)(uint64_t))sub_10010EBB4,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

void (*sub_1000A8024(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000A80B0;
}

void sub_1000A80B0(uint64_t *a1, char a2)
{
}

BOOL sub_1000A80CC()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000A80E0()
{
  return sub_10008D488( type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass,  (void (*)(uint64_t))sub_10010EBB4,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000A8104()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0LL)
                                              + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess(v1, v3, 0LL, 0LL);
  if (*v1 == 20) {
    return 0LL;
  }
  else {
    return *v1;
  }
}

uint64_t sub_1000A8160(char a1)
{
  return sub_10008D58C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass,  (void (*)(uint64_t))sub_10010EBB4,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
}

void (*sub_1000A8184(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 20) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_1000A820C;
}

void sub_1000A820C(uint64_t *a1, char a2)
{
}

BOOL sub_1000A8228()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0LL)
                                              + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess(v1, v3, 0LL, 0LL);
  return *v1 != 20;
}

uint64_t sub_1000A8284()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010EBB4(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 20;
  return result;
}

uint64_t sub_1000A8330@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_1003555D8);
  __chkstk_darwin(v3);
  uint64_t v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v10, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_1003555D8);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0LL);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v7[5]) = 5;
  *(_BYTE *)(a1 + v7[6]) = 5;
  *(_BYTE *)(a1 + v7[7]) = 2;
  *(_BYTE *)(a1 + v7[8]) = 2;
  return sub_100015764((uint64_t)v5, &qword_1003555D8);
}

uint64_t sub_1000A845C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003555D8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10010EBB4(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_1003555D8);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_1003555D8);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000A85E0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003555D8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_1003555D8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 5;
    v9[v6[6]] = 5;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    sub_100015764((uint64_t)v5, &qword_1003555D8);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  }

  return sub_1000A873C;
}

void sub_1000A873C(uint64_t a1, char a2)
{
}

BOOL sub_1000A8750()
{
  return sub_10001D054( &qword_1003555D8,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability,  type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t sub_1000A8774()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_1003555D8);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10010EBB4(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_1003555D8);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000A88A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_1003555E0);
  __chkstk_darwin(v3);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v12, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_1003555E0);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  *(_BYTE *)(a1 + v7[6]) = 2;
  *(_BYTE *)(a1 + v7[7]) = 2;
  *(_BYTE *)(a1 + v7[8]) = 5;
  *(_BYTE *)(a1 + v7[9]) = 2;
  uint64_t v9 = a1 + v7[10];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  return sub_100015764((uint64_t)v5, &qword_1003555E0);
}

uint64_t sub_1000A89F8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003555E0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10010EBB4(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_1003555E0);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_1003555E0);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000A8B7C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003555E0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_1003555E0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 5;
    v9[v6[9]] = 2;
    uint64_t v12 = &v9[v6[10]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    sub_100015764((uint64_t)v5, &qword_1003555E0);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  }

  return sub_1000A8CFC;
}

void sub_1000A8CFC(uint64_t a1, char a2)
{
}

BOOL sub_1000A8D10()
{
  return sub_10001D054( &qword_1003555E0,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery,  type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t sub_1000A8D34()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_1003555E0);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10010EBB4(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_1003555E0);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000A8E68()
{
  return sub_1000911E0( type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
}

uint64_t sub_1000A8E7C(char a1)
{
  return sub_100091260( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass,  (void (*)(uint64_t))sub_10010EBB4,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
}

void (*sub_1000A8EA0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000A8F24;
}

void sub_1000A8F24(uint64_t *a1, char a2)
{
}

BOOL sub_1000A8F40()
{
  return sub_1000914C8( type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
}

uint64_t sub_1000A8F54()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010EBB4(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 2;
  return result;
}

uint64_t sub_1000A9000()
{
  return sub_1000911E0( type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
}

uint64_t sub_1000A9014(char a1)
{
  return sub_100091260( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass,  (void (*)(uint64_t))sub_10010EBB4,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
}

void (*sub_1000A9038(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000A90BC;
}

void sub_1000A90BC(uint64_t *a1, char a2)
{
}

BOOL sub_1000A90D8()
{
  return sub_1000914C8( type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
}

uint64_t sub_1000A90EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010EBB4(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 2;
  return result;
}

uint64_t sub_1000A9198()
{
  return sub_1000911E0( type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
}

uint64_t sub_1000A91AC(char a1)
{
  return sub_100091260( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass,  (void (*)(uint64_t))sub_10010EBB4,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
}

void (*sub_1000A91D0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000A9254;
}

void sub_1000A9254(uint64_t *a1, char a2)
{
}

BOOL sub_1000A9270()
{
  return sub_1000914C8( type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
}

uint64_t sub_1000A9284()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010EBB4(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 2;
  return result;
}

uint64_t sub_1000A9330()
{
  return sub_1000911E0( type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
}

uint64_t sub_1000A9344(char a1)
{
  return sub_100091260( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass,  (void (*)(uint64_t))sub_10010EBB4,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
}

void (*sub_1000A9368(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000A93EC;
}

void sub_1000A93EC(uint64_t *a1, char a2)
{
}

BOOL sub_1000A9408()
{
  return sub_1000914C8( type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
}

uint64_t sub_1000A941C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010EBB4(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 2;
  return result;
}

uint64_t sub_1000A94C8()
{
  return sub_1000911E0( type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
}

uint64_t sub_1000A94DC(char a1)
{
  return sub_100091260( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass,  (void (*)(uint64_t))sub_10010EBB4,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
}

void (*sub_1000A9500(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000A9584;
}

void sub_1000A9584(uint64_t *a1, char a2)
{
}

BOOL sub_1000A95A0()
{
  return sub_1000914C8( type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
}

uint64_t sub_1000A95B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010EBB4(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 2;
  return result;
}

uint64_t sub_1000A9660()
{
  return sub_10008D164( type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients);
}

uint64_t sub_1000A9674(int a1)
{
  return sub_10008D1EC( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass,  (void (*)(uint64_t))sub_10010EBB4,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients);
}

void (*sub_1000A9698(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000A9724;
}

void sub_1000A9724(uint64_t *a1, char a2)
{
}

BOOL sub_1000A9740()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients);
}

uint64_t sub_1000A9754()
{
  return sub_10008D488( type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass,  (void (*)(uint64_t))sub_10010EBB4,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients);
}

uint64_t sub_1000A9778()
{
  return sub_10008D164( type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel);
}

uint64_t sub_1000A978C(int a1)
{
  return sub_10008D1EC( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass,  (void (*)(uint64_t))sub_10010EBB4,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel);
}

void (*sub_1000A97B0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000A983C;
}

void sub_1000A983C(uint64_t *a1, char a2)
{
}

BOOL sub_1000A9858()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel);
}

uint64_t sub_1000A986C()
{
  return sub_10008D488( type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass,  (void (*)(uint64_t))sub_10010EBB4,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel);
}

uint64_t sub_1000A9890()
{
  return sub_1000911E0( type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
}

uint64_t sub_1000A98A4(char a1)
{
  return sub_100091260( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass,  (void (*)(uint64_t))sub_10010EBB4,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
}

void (*sub_1000A98C8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000A994C;
}

void sub_1000A994C(uint64_t *a1, char a2)
{
}

BOOL sub_1000A9968()
{
  return sub_1000914C8( type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
}

uint64_t sub_1000A997C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010EBB4(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 2;
  return result;
}

uint64_t sub_1000A9A2C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100149E6C();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_1000A9A64@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10010F1DC(a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000A9A88@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10010F1DC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A9AB0@<X0>(uint64_t a1@<X8>)
{
  return sub_100024054( type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  &qword_10037A758,  &qword_10037A760,  (uint64_t)sub_1000EA950,  a1);
}

uint64_t sub_1000A9AD4()
{
  return sub_1000365F4(&qword_10037A758, &qword_10037A760, (uint64_t)sub_1000EA950);
}

_UNKNOWN **sub_1000A9AF0()
{
  return &off_1003400B0;
}

void sub_1000A9AFC(void *a1@<X8>)
{
  *a1 = &off_1003400B0;
}

uint64_t sub_1000A9B0C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAF00(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, a1);
}

uint64_t sub_1000A9B18(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000A9B34(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_1000A9C84()
{
  return sub_100031370( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A9CA0()
{
  return sub_100031448( type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A9CBC()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0LL) + 24));
  if (v1 == 8) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000A9CE4(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_1000A9D10(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0LL) + 24);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 8) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000A9D5C()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0LL) + 24)) != 8;
}

uint64_t sub_1000A9D84()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 8;
  return result;
}

uint64_t sub_1000A9DA8()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0LL) + 28));
  if (v1 == 8) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000A9DD0(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_1000A9DFC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0LL) + 28);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 8) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000A9E48()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0LL) + 28)) != 8;
}

uint64_t sub_1000A9E70()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 8;
  return result;
}

uint64_t sub_1000A9E94()
{
  return sub_1000A9EA0(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
}

uint64_t sub_1000A9EA0(uint64_t (*a1)(void))
{
  uint64_t v2 = (_BYTE *)(v1 + *(int *)(a1(0LL) + 32));
  if (v2[4]) {
    return 0LL;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t sub_1000A9ED4(int a1)
{
  return sub_1000A9EE0(a1, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
}

uint64_t sub_1000A9EE0(int a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0LL);
  uint64_t v5 = v2 + *(int *)(result + 32);
  *(_DWORD *)uint64_t v5 = a1;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_1000A9F14(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0LL) + 32);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000A9F64()
{
  return sub_100027938(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
}

uint64_t sub_1000A9F70()
{
  return sub_100027974(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
}

uint64_t sub_1000A9F7C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100149E28();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000A9FB4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10010F200(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A9FD8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10010F200(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000AA000@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0LL);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))( v3,  1LL,  1LL,  v4);
  *(_BYTE *)(a1 + v2[6]) = 8;
  *(_BYTE *)(a1 + v2[7]) = 8;
  uint64_t v6 = a1 + v2[8];
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  return result;
}

_UNKNOWN **sub_1000AA088()
{
  return &off_1003400E8;
}

void sub_1000AA094(void *a1@<X8>)
{
  *a1 = &off_1003400E8;
}

uint64_t sub_1000AA0A4()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0LL) + 20));
  if (v1 == 8) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000AA0CC(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_1000AA0F8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0LL) + 20);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 8) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000AA144()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0LL) + 20)) != 8;
}

uint64_t sub_1000AA16C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 8;
  return result;
}

uint64_t sub_1000AA190()
{
  return sub_1000B7AB4(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo);
}

uint64_t sub_1000AA19C(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_1000AA1C8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0LL) + 24);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000AA214()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0LL) + 24)) != 4;
}

uint64_t sub_1000AA23C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 4;
  return result;
}

uint64_t sub_1000AA260@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AA274(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo, 8, 4, a1);
}

uint64_t sub_1000AA274@<X0>( uint64_t (*a1)(void)@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = a1(0LL);
  *(_BYTE *)(a4 + *(int *)(result + 20)) = a2;
  *(_BYTE *)(a4 + *(int *)(result + 24)) = a3;
  return result;
}

uint64_t sub_1000AA2C0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAF00(type metadata accessor for CLP_LogEntry_PrivateData_MagSample, a1);
}

uint64_t sub_1000AA2CC(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_MagSample,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000AA2E8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MagSample(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_1000AA438()
{
  return sub_100031370( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_MagSample,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000AA454()
{
  return sub_100031448( type metadata accessor for CLP_LogEntry_PrivateData_MagSample,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

float sub_1000AA470()
{
  return sub_1000276E8(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t sub_1000AA47C(float a1)
{
  return sub_10002772C(type metadata accessor for CLP_LogEntry_PrivateData_MagSample, a1);
}

uint64_t (*sub_1000AA488(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MagSample(0LL) + 24);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000AA4E0()
{
  return sub_1000277C8(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t sub_1000AA4EC()
{
  return sub_100027804(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

float sub_1000AA4F8()
{
  return sub_100021008(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t sub_1000AA504(float a1)
{
  return sub_10002104C(type metadata accessor for CLP_LogEntry_PrivateData_MagSample, a1);
}

uint64_t (*sub_1000AA510(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MagSample(0LL) + 28);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000AA568()
{
  return sub_100020BD0(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t sub_1000AA574()
{
  return sub_100020C0C(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

float sub_1000AA580()
{
  return sub_10002CCD0(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t sub_1000AA58C(float a1)
{
  return sub_10002CD14(type metadata accessor for CLP_LogEntry_PrivateData_MagSample, a1);
}

uint64_t (*sub_1000AA598(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MagSample(0LL) + 32);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000AA5F0()
{
  return sub_100027938(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t sub_1000AA5FC()
{
  return sub_100027974(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t sub_1000AA608@<X0>(uint64_t a1@<X8>)
{
  return sub_10008AAF0(type metadata accessor for CLP_LogEntry_PrivateData_MagSample, a1);
}

uint64_t sub_1000AA614@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA124(type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, a1);
}

uint64_t sub_1000AA620(uint64_t a1)
{
  return sub_1000308E8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000AA63C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_1000AA78C()
{
  return sub_100019928( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000AA7A8()
{
  return sub_100019A00( type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000AA7C4@<X0>(uint64_t a1@<X8>)
{
  return sub_100005424(type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, a1);
}

uint64_t sub_1000AA7D0(uint64_t a1)
{
  return sub_10000547C(a1, type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer);
}

uint64_t (*sub_1000AA7DC())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000AA804@<X0>(void *a1@<X8>)
{
  return sub_10008AD84(type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, a1);
}

uint64_t sub_1000AA810@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAF00(type metadata accessor for CLP_LogEntry_PrivateData_Reset, a1);
}

uint64_t sub_1000AA81C(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_Reset,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000AA838(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Reset(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_1000AA988()
{
  return sub_100031370( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_Reset,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000AA9A4()
{
  return sub_100031448( type metadata accessor for CLP_LogEntry_PrivateData_Reset,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000AA9C0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AA9D4( type metadata accessor for CLP_LogEntry_PrivateData_Reset,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  a1);
}

uint64_t sub_1000AA9D4@<X0>( uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a3 + *(int *)(a1(0LL) + 20);
  uint64_t v7 = a2(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

double sub_1000AAA34()
{
  return sub_10001FC20(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t sub_1000AAA40(double a1)
{
  return sub_10001FC64(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, a1);
}

uint64_t (*sub_1000AAA4C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000AAAA4()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t sub_1000AAAB0()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

double sub_1000AAABC()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t sub_1000AAAC8(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, a1);
}

uint64_t (*sub_1000AAAD4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000AAB2C()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t sub_1000AAB38()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

double sub_1000AAB44()
{
  return sub_100027BE4(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t sub_1000AAB50(double a1)
{
  return sub_100027C28(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, a1);
}

uint64_t (*sub_1000AAB5C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0LL) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000AABB4()
{
  return sub_100027CC4(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t sub_1000AABC0()
{
  return sub_100027D00(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

int *sub_1000AABCC@<X0>(uint64_t a1@<X8>)
{
  return sub_10002EB64(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, a1);
}

uint64_t sub_1000AABD8()
{
  return sub_10001A698(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000AABE4(char a1)
{
  return sub_10001A6CC(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*sub_1000AABF0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000AAC38()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL) + 20)) != 2;
}

uint64_t sub_1000AAC60()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_1000AAC84()
{
  return sub_10001A798(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000AAC90(char a1)
{
  return sub_10001A7CC(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*sub_1000AAC9C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000AACE4()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL) + 24)) != 2;
}

uint64_t sub_1000AAD0C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_1000AAD30()
{
  return sub_10001A898(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000AAD3C(char a1)
{
  return sub_10000534C(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*sub_1000AAD48(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000AAD90()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL) + 28)) != 2;
}

uint64_t sub_1000AADB8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_1000AADDC()
{
  return sub_10001A96C(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000AADE8(char a1)
{
  return sub_10001A9A0(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*sub_1000AADF4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000AAE3C()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL) + 32)) != 2;
}

uint64_t sub_1000AAE64()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

uint64_t sub_1000AAE88()
{
  return sub_10001B0E0(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000AAE94(char a1)
{
  return sub_10001B114(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*sub_1000AAEA0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000AAEE8()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL) + 36)) != 2;
}

uint64_t sub_1000AAF10()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

uint64_t sub_1000AAF34()
{
  return sub_1000AAF40(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000AAF40(uint64_t (*a1)(void))
{
  return *(_BYTE *)(v1 + *(int *)(a1(0LL) + 40)) & 1;
}

uint64_t sub_1000AAF68(char a1)
{
  return sub_1000AAF74(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000AAF74(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0LL);
  *(_BYTE *)(v2 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*sub_1000AAFA0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL) + 40);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000AAFE8()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL) + 40)) != 2;
}

uint64_t sub_1000AB010()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 40)) = 2;
  return result;
}

uint64_t sub_1000AB034()
{
  return sub_1000A3B84(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000AB040(char a1)
{
  return sub_1000A3BB8(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*sub_1000AB04C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL) + 44);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000AB094()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL) + 44)) != 2;
}

uint64_t sub_1000AB0BC()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 44)) = 2;
  return result;
}

uint64_t sub_1000AB0E0()
{
  return sub_1000A3C84(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000AB0EC(char a1)
{
  return sub_1000A3CB8(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*sub_1000AB0F8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL) + 48);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000AB140()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL) + 48)) != 2;
}

uint64_t sub_1000AB168()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 48)) = 2;
  return result;
}

int *sub_1000AB18C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL);
  *(_BYTE *)(a1 + result[5]) = 2;
  *(_BYTE *)(a1 + result[6]) = 2;
  *(_BYTE *)(a1 + result[7]) = 2;
  *(_BYTE *)(a1 + result[8]) = 2;
  *(_BYTE *)(a1 + result[9]) = 2;
  *(_BYTE *)(a1 + result[10]) = 2;
  *(_BYTE *)(a1 + result[11]) = 2;
  *(_BYTE *)(a1 + result[12]) = 2;
  return result;
}

uint64_t sub_1000AB1F8@<X0>(uint64_t a1@<X8>)
{
  return sub_100034894( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  a1);
}

uint64_t sub_1000AB21C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1000EFA88(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355538);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355538);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000AB39C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_1000AB504;
}

void sub_1000AB504(uint64_t a1, char a2)
{
}

BOOL sub_1000AB518()
{
  return sub_10001D054( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000AB53C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1000EFA88(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355538);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000AB66C@<X0>(uint64_t a1@<X8>)
{
  return sub_100034894( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  a1);
}

uint64_t sub_1000AB690(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1000EFA88(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355538);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355538);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000AB810(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_1000AB978;
}

void sub_1000AB978(uint64_t a1, char a2)
{
}

BOOL sub_1000AB98C()
{
  return sub_10001D054( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000AB9B0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1000EFA88(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355538);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000ABAE0@<X0>(uint64_t a1@<X8>)
{
  return sub_100034894( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  a1);
}

uint64_t sub_1000ABB04(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1000EFA88(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355538);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355538);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000ABC84(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_1000ABDEC;
}

void sub_1000ABDEC(uint64_t a1, char a2)
{
}

BOOL sub_1000ABE00()
{
  return sub_10001D054( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000ABE24()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1000EFA88(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355538);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000ABF54()
{
  return sub_10008D164( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count);
}

uint64_t sub_1000ABF68(int a1)
{
  return sub_10009FE24( a1,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count);
}

void (*sub_1000ABF8C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000AC018;
}

void sub_1000AC018(uint64_t *a1, char a2)
{
}

BOOL sub_1000AC034()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count);
}

uint64_t sub_1000AC048()
{
  return sub_100022F10( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count);
}

double sub_1000AC06C()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM);
}

uint64_t sub_1000AC080(double a1)
{
  return sub_1000AC0A4( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM,  a1);
}

uint64_t sub_1000AC0A4( uint64_t (*a1)(void), uint64_t (*a2)(void), void (*a3)(uint64_t), void *a4, double a5)
{
  uint64_t v9 = v5;
  uint64_t v11 = *(int *)(a1(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v5 + v11)) & 1) == 0)
  {
    uint64_t v12 = *(void *)(v5 + v11);
    uint64_t v13 = a2(0LL);
    uint64_t v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    uint64_t v15 = swift_retain(v12);
    a3(v15);
    uint64_t v16 = *(void *)(v9 + v11);
    *(void *)(v9 + v11) = v14;
    swift_release(v16);
  }

  uint64_t v17 = *(void *)(v9 + v11) + *a4;
  uint64_t result = swift_beginAccess(v17, v19, 1LL, 0LL);
  *(double *)uint64_t v17 = a5;
  *(_BYTE *)(v17 + 8) = 0;
  return result;
}

void (*sub_1000AC16C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000AC1FC;
}

void sub_1000AC1FC(uint64_t *a1, char a2)
{
}

void sub_1000AC218( uint64_t *a1, char a2, uint64_t (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = *a1;
  uint64_t v10 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v12 = v9 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v12 = v9 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v13 = *(int *)(v9 + 88);
    uint64_t v14 = *(void *)(v9 + 80);
    uint64_t v15 = *(void *)(v14 + v13);
    uint64_t v16 = a3(0LL);
    uint64_t v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    uint64_t v18 = swift_retain(v15);
    a4(v18);
    uint64_t v19 = *(void *)(v14 + v13);
    *(void *)(v14 + v13) = v17;
    swift_release(v19);
  }

BOOL sub_1000AC304()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM);
}

uint64_t sub_1000AC318()
{
  return sub_100024F0C( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM);
}

double sub_1000AC33C()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM);
}

uint64_t sub_1000AC350(double a1)
{
  return sub_1000AC0A4( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM,  a1);
}

void (*sub_1000AC374(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000AC404;
}

void sub_1000AC404(uint64_t *a1, char a2)
{
}

BOOL sub_1000AC420()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM);
}

uint64_t sub_1000AC434()
{
  return sub_100024F0C( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM);
}

uint64_t sub_1000AC458()
{
  return sub_10008D164( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended);
}

uint64_t sub_1000AC46C(int a1)
{
  return sub_10009FE24( a1,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended);
}

void (*sub_1000AC490(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000AC51C;
}

void sub_1000AC51C(uint64_t *a1, char a2)
{
}

BOOL sub_1000AC538()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended);
}

uint64_t sub_1000AC54C()
{
  return sub_100022F10( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended);
}

uint64_t sub_1000AC570()
{
  return sub_10008D164( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended);
}

uint64_t sub_1000AC584(int a1)
{
  return sub_10009FE24( a1,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended);
}

void (*sub_1000AC5A8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000AC634;
}

void sub_1000AC634(uint64_t *a1, char a2)
{
}

BOOL sub_1000AC650()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended);
}

uint64_t sub_1000AC664()
{
  return sub_100022F10( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended);
}

double sub_1000AC688()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm);
}

uint64_t sub_1000AC69C(double a1)
{
  return sub_1000AC0A4( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm,  a1);
}

void (*sub_1000AC6C0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000AC750;
}

void sub_1000AC750(uint64_t *a1, char a2)
{
}

BOOL sub_1000AC76C()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm);
}

uint64_t sub_1000AC780()
{
  return sub_100024F0C( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm);
}

double sub_1000AC7A4()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence);
}

uint64_t sub_1000AC7B8(double a1)
{
  return sub_1000AC0A4( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence,  a1);
}

void (*sub_1000AC7DC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000AC86C;
}

void sub_1000AC86C(uint64_t *a1, char a2)
{
}

BOOL sub_1000AC888()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence);
}

uint64_t sub_1000AC89C()
{
  return sub_100024F0C( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence);
}

double sub_1000AC8C0()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime);
}

uint64_t sub_1000AC8D4(double a1)
{
  return sub_1000AC0A4( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime,  a1);
}

void (*sub_1000AC8F8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000AC988;
}

void sub_1000AC988(uint64_t *a1, char a2)
{
}

BOOL sub_1000AC9A4()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime);
}

uint64_t sub_1000AC9B8()
{
  return sub_100024F0C( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime);
}

uint64_t sub_1000AC9DC()
{
  return sub_10008D164( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID);
}

uint64_t sub_1000AC9F0(int a1)
{
  return sub_10009FE24( a1,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID);
}

void (*sub_1000ACA14(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000ACAA0;
}

void sub_1000ACAA0(uint64_t *a1, char a2)
{
}

BOOL sub_1000ACABC()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID);
}

uint64_t sub_1000ACAD0()
{
  return sub_100022F10( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID);
}

uint64_t sub_1000ACAF4()
{
  uint64_t v1 = (uint64_t *)(*(void *)(v0
  swift_beginAccess(v1, v5, 0LL, 0LL);
  uint64_t v2 = v1[1];
  if (v2) {
    uint64_t v3 = *v1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  swift_bridgeObjectRetain(v2);
  return v3;
}

uint64_t sub_1000ACB6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v2 + v6);
    uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0LL);
    uint64_t v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v10 = swift_retain(v7);
    sub_1000EFA88(v10);
    uint64_t v11 = *(void *)(v3 + v6);
    *(void *)(v3 + v6) = v9;
    swift_release(v11);
  }

  uint64_t v12 = (void *)(*(void *)(v3 + v6)
                 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess(v12, v15, 1LL, 0LL);
  uint64_t v13 = v12[1];
  *uint64_t v12 = a1;
  v12[1] = a2;
  return swift_bridgeObjectRelease(v13);
}

void (*sub_1000ACC28(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  *((_DWORD *)v3 + 24) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  uint64_t v6 = v5[1];
  if (v6)
  {
    uint64_t v7 = *v5;
    unint64_t v8 = v5[1];
  }

  else
  {
    uint64_t v7 = 0LL;
    unint64_t v8 = 0xE000000000000000LL;
  }

  void v3[9] = v7;
  v3[10] = v8;
  swift_bridgeObjectRetain(v6);
  return sub_1000ACCCC;
}

void sub_1000ACCCC(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(int *)(*a1 + 96);
  uint64_t v5 = *(void *)(*a1 + 80);
  uint64_t v6 = *(void *)(*a1 + 88);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(*(void *)(*a1 + 80));
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v6 + v4)) & 1) == 0)
    {
      uint64_t v7 = *(int *)(v2 + 96);
      uint64_t v8 = *(void *)(v2 + 88);
      uint64_t v9 = *(void *)(v8 + v7);
      uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0LL);
      uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
      uint64_t v12 = swift_retain(v9);
      sub_1000EFA88(v12);
      uint64_t v13 = *(void *)(v8 + v7);
      *(void *)(v8 + v7) = v11;
      swift_release(v13);
    }

    swift_beginAccess(v14, v2 + 24, 1LL, 0LL);
    uint64_t v15 = v14[1];
    *uint64_t v14 = v3;
    v14[1] = v5;
    swift_bridgeObjectRelease(v15);
    uint64_t v16 = *(void *)(v2 + 80);
  }

  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v6 + v4)) & 1) == 0)
    {
      uint64_t v17 = *(int *)(v2 + 96);
      uint64_t v18 = *(void *)(v2 + 88);
      uint64_t v19 = *(void *)(v18 + v17);
      uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0LL);
      uint64_t v21 = swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
      uint64_t v22 = swift_retain(v19);
      sub_1000EFA88(v22);
      uint64_t v23 = *(void *)(v18 + v17);
      *(void *)(v18 + v17) = v21;
      swift_release(v23);
    }

    swift_beginAccess(v24, v2 + 48, 1LL, 0LL);
    uint64_t v16 = v24[1];
    void *v24 = v3;
    v24[1] = v5;
  }

  swift_bridgeObjectRelease(v16);
  free((void *)v2);
}

BOOL sub_1000ACE38()
{
  return *(void *)(v1 + 8) != 0LL;
}

uint64_t sub_1000ACE94()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_1000EFA88(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (void *)(*(void *)(v1 + v2)
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess(v8, v11, 1LL, 0LL);
  uint64_t v9 = v8[1];
  *uint64_t v8 = 0LL;
  v8[1] = 0LL;
  return swift_bridgeObjectRelease(v9);
}

uint64_t sub_1000ACF40()
{
  return sub_1000911E0( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
}

uint64_t sub_1000ACF54(char a1)
{
  return sub_1000ACF78( a1,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
}

uint64_t sub_1000ACF78( char a1, uint64_t (*a2)(void), uint64_t (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = v5;
  uint64_t v11 = *(int *)(a2(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v5 + v11)) & 1) == 0)
  {
    uint64_t v12 = *(void *)(v5 + v11);
    uint64_t v13 = a3(0LL);
    uint64_t v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    uint64_t v15 = swift_retain(v12);
    a4(v15);
    uint64_t v16 = *(void *)(v9 + v11);
    *(void *)(v9 + v11) = v14;
    swift_release(v16);
  }

  uint64_t v17 = (_BYTE *)(*(void *)(v9 + v11) + *a5);
  uint64_t result = swift_beginAccess(v17, v19, 1LL, 0LL);
  *uint64_t v17 = a1 & 1;
  return result;
}

void (*sub_1000AD03C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000AD0C0;
}

void sub_1000AD0C0(uint64_t *a1, char a2)
{
}

void sub_1000AD0DC( uint64_t *a1, char a2, uint64_t (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = *a1;
  char v10 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v12 = v9 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v12 = v9 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v13 = *(int *)(v9 + 80);
    uint64_t v14 = *(void *)(v9 + 72);
    uint64_t v15 = *(void *)(v14 + v13);
    uint64_t v16 = a3(0LL);
    uint64_t v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    uint64_t v18 = swift_retain(v15);
    a4(v18);
    uint64_t v19 = *(void *)(v14 + v13);
    *(void *)(v14 + v13) = v17;
    swift_release(v19);
  }

BOOL sub_1000AD1C0()
{
  return sub_1000914C8( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
}

uint64_t sub_1000AD1D4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_1000EFA88(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 2;
  return result;
}

uint64_t sub_1000AD27C()
{
  return sub_1000911E0( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
}

uint64_t sub_1000AD290(char a1)
{
  return sub_1000ACF78( a1,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
}

void (*sub_1000AD2B4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000AD338;
}

void sub_1000AD338(uint64_t *a1, char a2)
{
}

BOOL sub_1000AD354()
{
  return sub_1000914C8( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
}

uint64_t sub_1000AD368()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_1000EFA88(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 2;
  return result;
}

uint64_t sub_1000AD410@<X0>(uint64_t a1@<X8>)
{
  return sub_100034894( &qword_1003555E8,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace,  type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace,  a1);
}

uint64_t sub_1000AD434(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003555E8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1000EFA88(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_1003555E8);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_1003555E8);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000AD5B4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003555E8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_1003555E8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_1003555E8);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  }

  return sub_1000AD71C;
}

void sub_1000AD71C(uint64_t a1, char a2)
{
}

BOOL sub_1000AD730()
{
  return sub_10001D054( &qword_1003555E8,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace,  type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t sub_1000AD754()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_1003555E8);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1000EFA88(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_1003555E8);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000AD884()
{
  return sub_10008D164( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount);
}

uint64_t sub_1000AD898(int a1)
{
  return sub_10009FE24( a1,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount);
}

void (*sub_1000AD8BC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000AD948;
}

void sub_1000AD948(uint64_t *a1, char a2)
{
}

BOOL sub_1000AD964()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount);
}

uint64_t sub_1000AD978()
{
  return sub_100022F10( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount);
}

uint64_t sub_1000AD99C()
{
  return sub_10008D164( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType);
}

uint64_t sub_1000AD9B0(int a1)
{
  return sub_10009FE24( a1,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType);
}

void (*sub_1000AD9D4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000ADA60;
}

void sub_1000ADA60(uint64_t *a1, char a2)
{
}

BOOL sub_1000ADA7C()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType);
}

uint64_t sub_1000ADA90()
{
  return sub_100022F10( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType);
}

uint64_t sub_1000ADAB4()
{
  return sub_10008D164( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState);
}

uint64_t sub_1000ADAC8(int a1)
{
  return sub_10009FE24( a1,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState);
}

void (*sub_1000ADAEC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000ADB78;
}

void sub_1000ADB78(uint64_t *a1, char a2)
{
}

BOOL sub_1000ADB94()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState);
}

uint64_t sub_1000ADBA8()
{
  return sub_100022F10( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState);
}

uint64_t sub_1000ADBCC()
{
  return sub_10008D164( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm);
}

uint64_t sub_1000ADBE0(int a1)
{
  return sub_10009FE24( a1,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm);
}

void (*sub_1000ADC04(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000ADC90;
}

void sub_1000ADC90(uint64_t *a1, char a2)
{
}

BOOL sub_1000ADCAC()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm);
}

uint64_t sub_1000ADCC0()
{
  return sub_100022F10( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm);
}

uint64_t sub_1000ADCE4()
{
  return sub_10008D164( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm);
}

uint64_t sub_1000ADCF8(int a1)
{
  return sub_10009FE24( a1,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm);
}

void (*sub_1000ADD1C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000ADDA8;
}

void sub_1000ADDA8(uint64_t *a1, char a2)
{
}

BOOL sub_1000ADDC4()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm);
}

uint64_t sub_1000ADDD8()
{
  return sub_100022F10( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm);
}

uint64_t sub_1000ADDFC()
{
  return sub_10008D164( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed);
}

uint64_t sub_1000ADE10(int a1)
{
  return sub_10009FE24( a1,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed);
}

void (*sub_1000ADE34(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000ADEC0;
}

void sub_1000ADEC0(uint64_t *a1, char a2)
{
}

BOOL sub_1000ADEDC()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed);
}

uint64_t sub_1000ADEF0()
{
  return sub_100022F10( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed);
}

uint64_t sub_1000ADF14()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL)
                                              + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess(v1, v3, 0LL, 0LL);
  if (*v1 == 6) {
    return 0LL;
  }
  else {
    return *v1;
  }
}

uint64_t sub_1000ADF70(char a1)
{
  return sub_100023164( a1,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass,  (void (*)(uint64_t))sub_1000EFA88,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
}

void (*sub_1000ADF94(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 6) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_1000AE01C;
}

void sub_1000AE01C(uint64_t *a1, char a2)
{
}

BOOL sub_1000AE038()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL)
                                              + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess(v1, v3, 0LL, 0LL);
  return *v1 != 6;
}

uint64_t sub_1000AE094()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_1000EFA88(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 6;
  return result;
}

uint64_t sub_1000AE13C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_1003555F0);
  __chkstk_darwin(v3);
  uint64_t v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v10, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_1003555F0);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v7[5]) = 2;
  *(_BYTE *)(a1 + v7[6]) = 2;
  *(_BYTE *)(a1 + v7[7]) = 2;
  *(_BYTE *)(a1 + v7[8]) = 2;
  *(_BYTE *)(a1 + v7[9]) = 2;
  *(_BYTE *)(a1 + v7[10]) = 2;
  *(_BYTE *)(a1 + v7[11]) = 2;
  *(_BYTE *)(a1 + v7[12]) = 2;
  return sub_100015764((uint64_t)v5, &qword_1003555F0);
}

uint64_t sub_1000AE284(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003555F0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1000EFA88(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_1003555F0);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_1003555F0);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000AE404(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003555F0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_1003555F0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    v9[v6[9]] = 2;
    v9[v6[10]] = 2;
    v9[v6[11]] = 2;
    v9[v6[12]] = 2;
    sub_100015764((uint64_t)v5, &qword_1003555F0);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  }

  return sub_1000AE57C;
}

void sub_1000AE57C(uint64_t a1, char a2)
{
}

BOOL sub_1000AE590()
{
  return sub_10001D054( &qword_1003555F0,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState,  type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000AE5B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_1003555F0);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1000EFA88(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_1003555F0);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000AE6E4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100149DE4();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000AE71C@<X0>(uint64_t a1@<X8>)
{
  return sub_100024054( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &qword_10037A7B8,  &qword_10037A7C0,  (uint64_t)sub_1000EF808,  a1);
}

uint64_t sub_1000AE740()
{
  return sub_1000365F4(&qword_10037A7B8, &qword_10037A7C0, (uint64_t)sub_1000EF808);
}

_UNKNOWN **sub_1000AE75C()
{
  return &off_100340110;
}

void sub_1000AE768(void *a1@<X8>)
{
  *a1 = &off_100340110;
}

uint64_t sub_1000AE778@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAF00(type metadata accessor for CLP_LogEntry_PrivateData_StepCount, a1);
}

uint64_t sub_1000AE784(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_StepCount,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000AE7A0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_1000AE8F0()
{
  return sub_100031370( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_StepCount,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000AE90C()
{
  return sub_100031448( type metadata accessor for CLP_LogEntry_PrivateData_StepCount,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000AE928()
{
  return sub_10002DF9C(type metadata accessor for CLP_LogEntry_PrivateData_StepCount);
}

uint64_t sub_1000AE934(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCount);
}

uint64_t (*sub_1000AE940(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000AE990()
{
  return sub_1000277C8(type metadata accessor for CLP_LogEntry_PrivateData_StepCount);
}

uint64_t sub_1000AE99C()
{
  return sub_100027804(type metadata accessor for CLP_LogEntry_PrivateData_StepCount);
}

uint64_t sub_1000AE9A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_1003555F8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_1003555F8);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL);
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (qword_10037A7B8 != -1) {
    swift_once(&qword_10037A7B8, sub_1000EF808);
  }
  uint64_t v9 = qword_10037A7C0;
  *(void *)(a1 + v8) = qword_10037A7C0;
  swift_retain(v9);
  return sub_100015764((uint64_t)v5, &qword_1003555F8);
}

uint64_t sub_1000AEAC0(uint64_t a1)
{
  return sub_100030C2C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_StepCount,  &qword_1003555F8,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

void (*sub_1000AEADC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_1003555F8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_1003555F8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = *(int *)(v6 + 20);
    if (qword_10037A7B8 != -1) {
      swift_once(&qword_10037A7B8, sub_1000EF808);
    }
    uint64_t v12 = qword_10037A7C0;
    *(void *)&v9[v11] = qword_10037A7C0;
    swift_retain(v12);
    sub_100015764((uint64_t)v5, &qword_1003555F8);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
  }

  return sub_1000AEC34;
}

void sub_1000AEC34(uint64_t a1, char a2)
{
}

BOOL sub_1000AEC48()
{
  return sub_10002D37C( &qword_1003555F8,  type metadata accessor for CLP_LogEntry_PrivateData_StepCount,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

uint64_t sub_1000AEC64()
{
  return sub_10002D454( type metadata accessor for CLP_LogEntry_PrivateData_StepCount,  &qword_1003555F8,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

uint64_t sub_1000AEC80@<X0>(uint64_t a1@<X8>)
{
  return sub_10009E5E8( type metadata accessor for CLP_LogEntry_PrivateData_StepCount,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  a1);
}

uint64_t sub_1000AEC94@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, a1);
}

float sub_1000AECA0()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL) + 20);
  float result = *(float *)v1;
  if (*(_BYTE *)(v1 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000AECD4(float a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
  uint64_t v4 = v1 + *(int *)(result + 20);
  *(float *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_1000AED08(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL) + 20);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000AED60()
{
  return sub_1000192B8(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000AED6C()
{
  return sub_1000192F4(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

float sub_1000AED78()
{
  return sub_1000276E8(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000AED84(float a1)
{
  return sub_10002772C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, a1);
}

uint64_t (*sub_1000AED90(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL) + 24);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000AEDE8()
{
  return sub_1000277C8(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000AEDF4()
{
  return sub_100027804(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

float sub_1000AEE00()
{
  return sub_100021008(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000AEE0C(float a1)
{
  return sub_10002104C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, a1);
}

uint64_t (*sub_1000AEE18(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL) + 28);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000AEE70()
{
  return sub_100020BD0(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000AEE7C()
{
  return sub_100020C0C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

int *sub_1000AEE88@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
  uint64_t v3 = a1 + result[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  uint64_t v4 = a1 + result[6];
  *(_DWORD *)uint64_t v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  uint64_t v5 = a1 + result[7];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  return result;
}

double sub_1000AEEE4()
{
  return sub_10001FC20(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000AEEF0(double a1)
{
  return sub_10001FC64(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, a1);
}

uint64_t (*sub_1000AEEFC(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000AEF54()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000AEF60()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

double sub_1000AEF6C()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000AEF78(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, a1);
}

uint64_t (*sub_1000AEF84(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000AEFDC()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000AEFE8()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

double sub_1000AEFF4()
{
  return sub_100027BE4(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000AF000(double a1)
{
  return sub_100027C28(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, a1);
}

uint64_t (*sub_1000AF00C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0LL) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000AF064()
{
  return sub_100027CC4(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000AF070()
{
  return sub_100027D00(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

double sub_1000AF07C()
{
  return sub_100027D3C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000AF088(double a1)
{
  return sub_100027D80(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, a1);
}

uint64_t (*sub_1000AF094(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0LL) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000AF0EC()
{
  return sub_100027E1C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000AF0F8()
{
  return sub_100027E58(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

int *sub_1000AF104@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF110(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, a1);
}

int *sub_1000AF110@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (int *)a1(0LL);
  uint64_t v5 = a2 + result[5];
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + 8) = 1;
  uint64_t v6 = a2 + result[6];
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  uint64_t v7 = a2 + result[7];
  *(void *)uint64_t v7 = 0LL;
  *(_BYTE *)(v7 + 8) = 1;
  uint64_t v8 = a2 + result[8];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  return result;
}

uint64_t sub_1000AF180@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B221C( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField,  a1);
}

uint64_t sub_1000AF194(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355600);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1000F47DC(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355600);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355600);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000AF314(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355600);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355600);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    sub_100015764((uint64_t)v5, &qword_100355600);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  }

  return sub_1000AF47C;
}

void sub_1000AF47C(uint64_t a1, char a2)
{
}

BOOL sub_1000AF490()
{
  return sub_10001D054( &qword_100355600,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000AF4B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355600);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1000F47DC(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355600);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000AF5E4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B221C( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField,  a1);
}

uint64_t sub_1000AF5F8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355600);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1000F47DC(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355600);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355600);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000AF778(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355600);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355600);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    sub_100015764((uint64_t)v5, &qword_100355600);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  }

  return sub_1000AF8E0;
}

void sub_1000AF8E0(uint64_t a1, char a2)
{
}

BOOL sub_1000AF8F4()
{
  return sub_10001D054( &qword_100355600,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000AF918()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355600);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1000F47DC(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355600);
  swift_endAccess(v16);
  return swift_release(v11);
}

float sub_1000AFA48()
{
  return sub_1000236F8( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading);
}

uint64_t sub_1000AFA5C(float a1)
{
  return sub_1000AFB5C( &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading,  a1);
}

void (*sub_1000AFA68(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  float v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000AFAF8;
}

void sub_1000AFAF8(uint64_t *a1, char a2)
{
}

BOOL sub_1000AFB04()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading);
}

uint64_t sub_1000AFB18()
{
  return sub_100022F10( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass,  (void (*)(uint64_t))sub_1000F47DC,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading);
}

float sub_1000AFB3C()
{
  return sub_1000236F8( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading);
}

uint64_t sub_1000AFB50(float a1)
{
  return sub_1000AFB5C( &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading,  a1);
}

uint64_t sub_1000AFB5C(void *a1, float a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v2 + v6);
    uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0LL);
    uint64_t v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v10 = swift_retain(v7);
    sub_1000F47DC(v10);
    uint64_t v11 = *(void *)(v4 + v6);
    *(void *)(v4 + v6) = v9;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v4 + v6) + *a1;
  uint64_t result = swift_beginAccess(v12, v14, 1LL, 0LL);
  *(float *)uint64_t v12 = a2;
  *(_BYTE *)(v12 + 4) = 0;
  return result;
}

void (*sub_1000AFC18(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  float v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000AFCA8;
}

void sub_1000AFCA8(uint64_t *a1, char a2)
{
}

void sub_1000AFCB4(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = *a1;
  int v6 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v8 = v5 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v8 = v5 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v9 = *(int *)(v5 + 84);
    uint64_t v10 = *(void *)(v5 + 72);
    uint64_t v11 = *(void *)(v10 + v9);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1000F47DC(v14);
    uint64_t v15 = *(void *)(v10 + v9);
    *(void *)(v10 + v9) = v13;
    swift_release(v15);
  }

BOOL sub_1000AFD94()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading);
}

uint64_t sub_1000AFDA8()
{
  return sub_100022F10( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass,  (void (*)(uint64_t))sub_1000F47DC,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading);
}

float sub_1000AFDCC()
{
  return sub_1000236F8( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy);
}

uint64_t sub_1000AFDE0(float a1)
{
  return sub_1000AFB5C( &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy,  a1);
}

void (*sub_1000AFDEC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  float v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000AFE7C;
}

void sub_1000AFE7C(uint64_t *a1, char a2)
{
}

BOOL sub_1000AFE88()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy);
}

uint64_t sub_1000AFE9C()
{
  return sub_100022F10( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass,  (void (*)(uint64_t))sub_1000F47DC,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy);
}

uint64_t sub_1000AFEC0()
{
  return sub_1000AFED4( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
}

uint64_t sub_1000AFED4(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)(v2 + *(int *)(a1(0LL) + 20)) + *a2);
  swift_beginAccess(v3, v5, 0LL, 0LL);
  if (*v3 == 8) {
    return 0LL;
  }
  else {
    return *v3;
  }
}

uint64_t sub_1000AFF34(char a1)
{
  return sub_100023164( a1,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass,  (void (*)(uint64_t))sub_1000F47DC,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
}

void (*sub_1000AFF58(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 8) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_1000AFFE0;
}

void sub_1000AFFE0(uint64_t *a1, char a2)
{
}

BOOL sub_1000AFFFC()
{
  return sub_1000B0010( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
}

BOOL sub_1000B0010(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)(v2 + *(int *)(a1(0LL) + 20)) + *a2);
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return *v3 != 8;
}

uint64_t sub_1000B0070()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_1000F47DC(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 8;
  return result;
}

uint64_t sub_1000B0118()
{
  return sub_1000911E0( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
}

uint64_t sub_1000B012C(char a1)
{
  return sub_1000ACF78( a1,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass,  (void (*)(uint64_t))sub_1000F47DC,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
}

void (*sub_1000B0150(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000B01D4;
}

void sub_1000B01D4(uint64_t *a1, char a2)
{
}

BOOL sub_1000B01F0()
{
  return sub_1000914C8( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
}

uint64_t sub_1000B0204()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_1000F47DC(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 2;
  return result;
}

float sub_1000B02AC()
{
  return sub_1000236F8( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude);
}

uint64_t sub_1000B02C0(float a1)
{
  return sub_1000AFB5C( &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude,  a1);
}

void (*sub_1000B02CC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  float v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000B035C;
}

void sub_1000B035C(uint64_t *a1, char a2)
{
}

BOOL sub_1000B0368()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude);
}

uint64_t sub_1000B037C()
{
  return sub_100022F10( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass,  (void (*)(uint64_t))sub_1000F47DC,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude);
}

float sub_1000B03A0()
{
  return sub_1000236F8( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination);
}

uint64_t sub_1000B03B4(float a1)
{
  return sub_1000AFB5C( &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination,  a1);
}

void (*sub_1000B03C0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  float v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000B0450;
}

void sub_1000B0450(uint64_t *a1, char a2)
{
}

BOOL sub_1000B045C()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination);
}

uint64_t sub_1000B0470()
{
  return sub_100022F10( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass,  (void (*)(uint64_t))sub_1000F47DC,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination);
}

float sub_1000B0494()
{
  return sub_1000236F8( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal);
}

uint64_t sub_1000B04A8(float a1)
{
  return sub_1000AFB5C( &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal,  a1);
}

void (*sub_1000B04B4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  float v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000B0544;
}

void sub_1000B0544(uint64_t *a1, char a2)
{
}

BOOL sub_1000B0550()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal);
}

uint64_t sub_1000B0564()
{
  return sub_100022F10( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass,  (void (*)(uint64_t))sub_1000F47DC,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal);
}

uint64_t sub_1000B0588@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B1378( &qword_100355608,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4,  a1);
}

uint64_t sub_1000B05AC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355608);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1000F47DC(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355608);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355608);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000B072C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355608);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355608);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    uint64_t v14 = &v9[v6[8]];
    *(void *)uint64_t v14 = 0LL;
    v14[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355608);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  }

  return sub_1000B08A4;
}

void sub_1000B08A4(uint64_t a1, char a2)
{
}

BOOL sub_1000B08B8()
{
  return sub_10001D054( &qword_100355608,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000B08DC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355608);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1000F47DC(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355608);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000B0A0C@<X0>(uint64_t a1@<X8>)
{
  return sub_100024054( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  &qword_10037A7F0,  &qword_10037A7F8,  (uint64_t)sub_1000F4678,  a1);
}

uint64_t sub_1000B0A30()
{
  return sub_1000365F4(&qword_10037A7F0, &qword_10037A7F8, (uint64_t)sub_1000F4678);
}

uint64_t sub_1000B0A4C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAF00(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, a1);
}

uint64_t sub_1000B0A58(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000B0A74(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_1000B0BC4()
{
  return sub_100031370( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B0BE0()
{
  return sub_100031448( type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B0BFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100355610);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_100355610);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0LL);
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (qword_10037A7F0 != -1) {
    swift_once(&qword_10037A7F0, sub_1000F4678);
  }
  uint64_t v9 = qword_10037A7F8;
  *(void *)(a1 + v8) = qword_10037A7F8;
  swift_retain(v9);
  return sub_100015764((uint64_t)v5, &qword_100355610);
}

uint64_t sub_1000B0D14(uint64_t a1)
{
  return sub_1000308E8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample,  &qword_100355610,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

void (*sub_1000B0D30(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355610);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355610);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = *(int *)(v6 + 20);
    if (qword_10037A7F0 != -1) {
      swift_once(&qword_10037A7F0, sub_1000F4678);
    }
    uint64_t v12 = qword_10037A7F8;
    *(void *)&v9[v11] = qword_10037A7F8;
    swift_retain(v12);
    sub_100015764((uint64_t)v5, &qword_100355610);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
  }

  return sub_1000B0E88;
}

void sub_1000B0E88(uint64_t a1, char a2)
{
}

BOOL sub_1000B0E9C()
{
  return sub_100019928( &qword_100355610,  type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

uint64_t sub_1000B0EB8()
{
  return sub_100019A00( type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample,  &qword_100355610,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

float sub_1000B0ED4()
{
  return sub_100021008(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t sub_1000B0EE0(float a1)
{
  return sub_10002104C(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, a1);
}

uint64_t (*sub_1000B0EEC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0LL) + 28);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000B0F44()
{
  return sub_100020BD0(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t sub_1000B0F50()
{
  return sub_100020C0C(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

float sub_1000B0F5C()
{
  return sub_10002CCD0(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t sub_1000B0F68(float a1)
{
  return sub_10002CD14(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, a1);
}

uint64_t (*sub_1000B0F74(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0LL) + 32);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000B0FCC()
{
  return sub_100027938(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t sub_1000B0FD8()
{
  return sub_100027974(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t sub_1000B0FE4()
{
  return sub_10001B0E0(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t sub_1000B0FF0(char a1)
{
  return sub_10001B114(a1, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t (*sub_1000B0FFC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0LL) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000B1044()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0LL) + 36)) != 2;
}

uint64_t sub_1000B106C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

uint64_t sub_1000B1090@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0LL);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  uint64_t v5 = a1 + v2[6];
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))( v5,  1LL,  1LL,  v6);
  uint64_t v8 = a1 + v2[7];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v2[8];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  *(_BYTE *)(a1 + v2[9]) = 2;
  return result;
}

uint64_t sub_1000B114C@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, a1);
}

uint64_t sub_1000B1158@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA124(type metadata accessor for CLP_LogEntry_PrivateData_Compass, a1);
}

uint64_t sub_1000B1164(uint64_t a1)
{
  return sub_1000308E8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_Compass,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000B1180(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Compass(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_1000B12D0()
{
  return sub_100019928( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_Compass,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B12EC()
{
  return sub_100019A00( type metadata accessor for CLP_LogEntry_PrivateData_Compass,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B1308@<X0>(uint64_t a1@<X8>)
{
  return sub_100005424(type metadata accessor for CLP_LogEntry_PrivateData_Compass, a1);
}

uint64_t sub_1000B1314(uint64_t a1)
{
  return sub_10000547C(a1, type metadata accessor for CLP_LogEntry_PrivateData_Compass);
}

uint64_t (*sub_1000B1320())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000B1348@<X0>(void *a1@<X8>)
{
  return sub_10008AD84(type metadata accessor for CLP_LogEntry_PrivateData_Compass, a1);
}

uint64_t sub_1000B1354@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B1378( &qword_100355608,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4,  a1);
}

uint64_t sub_1000B1378@<X0>( uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X1>, void *a3@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = sub_100003A0C(a1);
  __chkstk_darwin(v11);
  uint64_t v13 = &v22[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v14 = *(void *)(v5 + *(int *)(a2(0LL) + 20)) + *a3;
  swift_beginAccess(v14, v22, 0LL, 0LL);
  sub_10000E6C0(v14, (uint64_t)v13, a1);
  uint64_t v15 = (int *)a4(0LL);
  UnknownStorage.init()();
  uint64_t v16 = a5 + v15[5];
  *(void *)uint64_t v16 = 0LL;
  *(_BYTE *)(v16 + 8) = 1;
  uint64_t v17 = a5 + v15[6];
  *(void *)uint64_t v17 = 0LL;
  *(_BYTE *)(v17 + 8) = 1;
  uint64_t v18 = a5 + v15[7];
  *(void *)uint64_t v18 = 0LL;
  *(_BYTE *)(v18 + 8) = 1;
  uint64_t v19 = a5 + v15[8];
  *(void *)uint64_t v19 = 0LL;
  *(_BYTE *)(v19 + 8) = 1;
  return sub_100015764((uint64_t)v13, a1);
}

uint64_t sub_1000B14C8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355608);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10010F368(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355608);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355608);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000B164C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355608);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355608);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    uint64_t v14 = &v9[v6[8]];
    *(void *)uint64_t v14 = 0LL;
    v14[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355608);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  }

  return sub_1000B17C4;
}

void sub_1000B17C4(uint64_t a1, char a2)
{
}

BOOL sub_1000B17D8()
{
  return sub_10001D054( &qword_100355608,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000B17FC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355608);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10010F368(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355608);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000B1930@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B221C( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration,  a1);
}

uint64_t sub_1000B1944(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355600);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10010F368(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355600);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355600);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000B1AC8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355600);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355600);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    sub_100015764((uint64_t)v5, &qword_100355600);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  }

  return sub_1000B1C30;
}

void sub_1000B1C30(uint64_t a1, char a2)
{
}

BOOL sub_1000B1C44()
{
  return sub_10001D054( &qword_100355600,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000B1C68()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355600);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10010F368(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355600);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000B1D9C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B221C( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate,  a1);
}

uint64_t sub_1000B1DB0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355600);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10010F368(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355600);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355600);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000B1F34(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355600);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355600);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    sub_100015764((uint64_t)v5, &qword_100355600);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  }

  return sub_1000B209C;
}

void sub_1000B209C(uint64_t a1, char a2)
{
}

BOOL sub_1000B20B0()
{
  return sub_10001D054( &qword_100355600,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000B20D4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355600);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10010F368(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355600);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000B2208@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B221C( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField,  a1);
}

uint64_t sub_1000B221C@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_100003A0C(&qword_100355600);
  __chkstk_darwin(v7);
  uint64_t v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = *(void *)(v3 + *(int *)(a1(0LL) + 20)) + *a2;
  swift_beginAccess(v10, v17, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v9, &qword_100355600);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
  UnknownStorage.init()();
  uint64_t v12 = a3 + v11[5];
  *(_DWORD *)uint64_t v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  uint64_t v13 = a3 + v11[6];
  *(_DWORD *)uint64_t v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  uint64_t v14 = a3 + v11[7];
  *(_DWORD *)uint64_t v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  return sub_100015764((uint64_t)v9, &qword_100355600);
}

uint64_t sub_1000B2360(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355600);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10010F368(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355600);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355600);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000B24E4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355600);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355600);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    sub_100015764((uint64_t)v5, &qword_100355600);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  }

  return sub_1000B264C;
}

void sub_1000B264C(uint64_t a1, char a2)
{
}

BOOL sub_1000B2660()
{
  return sub_10001D054( &qword_100355600,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000B2684()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355600);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10010F368(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355600);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000B27B8()
{
  return sub_1000AFED4( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
}

uint64_t sub_1000B27CC(char a1)
{
  return sub_10008D58C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass,  (void (*)(uint64_t))sub_10010F368,  &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
}

void (*sub_1000B27F0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 8) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_1000B2878;
}

void sub_1000B2878(uint64_t *a1, char a2)
{
}

BOOL sub_1000B2894()
{
  return sub_1000B0010( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
}

uint64_t sub_1000B28A8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010F368(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 8;
  return result;
}

uint64_t sub_1000B2954()
{
  return sub_1000911E0( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
}

uint64_t sub_1000B2968(char a1)
{
  return sub_100091260( a1,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass,  (void (*)(uint64_t))sub_10010F368,  &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
}

void (*sub_1000B298C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000B2A10;
}

void sub_1000B2A10(uint64_t *a1, char a2)
{
}

BOOL sub_1000B2A2C()
{
  return sub_1000914C8( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
}

uint64_t sub_1000B2A40()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010F368(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 2;
  return result;
}

uint64_t sub_1000B2AEC()
{
  return sub_1000911E0( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
}

uint64_t sub_1000B2B00(char a1)
{
  return sub_100091260( a1,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass,  (void (*)(uint64_t))sub_10010F368,  &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
}

void (*sub_1000B2B24(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000B2BA8;
}

void sub_1000B2BA8(uint64_t *a1, char a2)
{
}

BOOL sub_1000B2BC4()
{
  return sub_1000914C8( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
}

uint64_t sub_1000B2BD8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010F368(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 2;
  return result;
}

uint64_t sub_1000B2C84()
{
  return sub_1000911E0( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
}

uint64_t sub_1000B2C98(char a1)
{
  return sub_100091260( a1,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass,  (void (*)(uint64_t))sub_10010F368,  &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
}

void (*sub_1000B2CBC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000B2D40;
}

void sub_1000B2D40(uint64_t *a1, char a2)
{
}

BOOL sub_1000B2D5C()
{
  return sub_1000914C8( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
}

uint64_t sub_1000B2D70()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010F368(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 2;
  return result;
}

float sub_1000B2E1C()
{
  return sub_1000236F8( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading);
}

uint64_t sub_1000B2E30(float a1)
{
  return sub_1000B2E54( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass,  (void (*)(uint64_t))sub_10010F368,  &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading,  a1);
}

uint64_t sub_1000B2E54( uint64_t (*a1)(void), uint64_t (*a2)(void), void (*a3)(uint64_t), void *a4, float a5)
{
  uint64_t v9 = v5;
  uint64_t v11 = *(int *)(a1(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v5 + v11)) & 1) == 0)
  {
    uint64_t v12 = *(void *)(v5 + v11);
    uint64_t v13 = a2(0LL);
    uint64_t v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    uint64_t v15 = swift_retain(v12);
    a3(v15);
    swift_release(v12);
    uint64_t v16 = *(void *)(v9 + v11);
    *(void *)(v9 + v11) = v14;
    swift_release(v16);
  }

  uint64_t v17 = *(void *)(v9 + v11) + *a4;
  uint64_t result = swift_beginAccess(v17, v19, 1LL, 0LL);
  *(float *)uint64_t v17 = a5;
  *(_BYTE *)(v17 + 4) = 0;
  return result;
}

void (*sub_1000B2F28(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  float v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000B2FB8;
}

void sub_1000B2FB8(uint64_t *a1, char a2)
{
}

BOOL sub_1000B2FD4()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading);
}

uint64_t sub_1000B2FE8()
{
  return sub_10008D488( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass,  (void (*)(uint64_t))sub_10010F368,  &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading);
}

uint64_t sub_1000B300C@<X0>(uint64_t a1@<X8>)
{
  return sub_100024054( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  &qword_10037A818,  &qword_10037A820,  (uint64_t)sub_1000F76CC,  a1);
}

uint64_t sub_1000B3030()
{
  return sub_1000365F4(&qword_10037A818, &qword_10037A820, (uint64_t)sub_1000F76CC);
}

uint64_t sub_1000B304C()
{
  uint64_t v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0LL) + 20));
  if (v1[4]) {
    return 0LL;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t sub_1000B307C(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0LL);
  uint64_t v4 = v1 + *(int *)(result + 20);
  *(_DWORD *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_1000B30B0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0LL) + 20);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000B3100()
{
  return sub_1000192B8(type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

uint64_t sub_1000B310C()
{
  return sub_1000192F4(type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

uint64_t sub_1000B3118@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0LL);
  uint64_t v3 = a1 + *(int *)(result + 20);
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

uint64_t sub_1000B3154@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAF00(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, a1);
}

uint64_t sub_1000B3160(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000B317C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  float v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_1000B32CC()
{
  return sub_100031370( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B32E8()
{
  return sub_100031448( type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B3304@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100355618);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_100355618);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0LL);
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (qword_10037A818 != -1) {
    swift_once(&qword_10037A818, sub_1000F76CC);
  }
  uint64_t v9 = qword_10037A820;
  *(void *)(a1 + v8) = qword_10037A820;
  swift_retain(v9);
  return sub_100015764((uint64_t)v5, &qword_100355618);
}

uint64_t sub_1000B341C(uint64_t a1)
{
  return sub_1000308E8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample,  &qword_100355618,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

void (*sub_1000B3438(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355618);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355618);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = *(int *)(v6 + 20);
    if (qword_10037A818 != -1) {
      swift_once(&qword_10037A818, sub_1000F76CC);
    }
    uint64_t v12 = qword_10037A820;
    *(void *)&v9[v11] = qword_10037A820;
    swift_retain(v12);
    sub_100015764((uint64_t)v5, &qword_100355618);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  }

  return sub_1000B3590;
}

void sub_1000B3590(uint64_t a1, char a2)
{
}

BOOL sub_1000B35A4()
{
  return sub_100019928( &qword_100355618,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

uint64_t sub_1000B35C0()
{
  return sub_100019A00( type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample,  &qword_100355618,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

uint64_t sub_1000B35DC()
{
  return sub_10001A898(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t sub_1000B35E8(char a1)
{
  return sub_10000534C(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t (*sub_1000B35F4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0LL) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000B363C()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0LL) + 28)) != 2;
}

uint64_t sub_1000B3664()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_1000B3688()
{
  return sub_1000A9EA0(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t sub_1000B3694(int a1)
{
  return sub_1000A9EE0(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t (*sub_1000B36A0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0LL) + 32);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000B36F0()
{
  return sub_100027938(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t sub_1000B36FC()
{
  return sub_100027974(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t sub_1000B3708()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0LL) + 36));
  if (v1 == 5) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000B3730(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_1000B375C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0LL) + 36);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000B37A8()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0LL) + 36)) != 5;
}

uint64_t sub_1000B37D0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 5;
  return result;
}

uint64_t sub_1000B37F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100355620);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 40), (uint64_t)v5, &qword_100355620);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  return sub_100015764((uint64_t)v5, &qword_100355620);
}

uint64_t sub_1000B38E4(uint64_t a1)
{
  return sub_1000B9A4C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample,  &qword_100355620,  type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

void (*sub_1000B3900(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355620);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0LL) + 40);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355620);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    sub_100015764((uint64_t)v5, &qword_100355620);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
  }

  return sub_1000B3A30;
}

void sub_1000B3A30(uint64_t a1, char a2)
{
}

BOOL sub_1000B3A44()
{
  return sub_1000B9C24( &qword_100355620,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample,  type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

uint64_t sub_1000B3A60()
{
  return sub_1000B9CFC( type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample,  &qword_100355620,  type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

float sub_1000B3A7C()
{
  return sub_1000B3A88(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

float sub_1000B3A88(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0LL) + 44);
  float result = *(float *)v2;
  if (*(_BYTE *)(v2 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000B3AC0(float a1)
{
  return sub_1000B3ACC(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, a1);
}

uint64_t sub_1000B3ACC(uint64_t (*a1)(void), float a2)
{
  uint64_t result = a1(0LL);
  uint64_t v5 = v2 + *(int *)(result + 44);
  *(float *)uint64_t v5 = a2;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_1000B3B04(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0LL) + 44);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000B3B5C()
{
  return sub_100033884(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t sub_1000B3B68()
{
  return sub_1000338C0(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

float sub_1000B3B74()
{
  return sub_1000B3B80(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

float sub_1000B3B80(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0LL) + 48);
  float result = *(float *)v2;
  if (*(_BYTE *)(v2 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000B3BB8(float a1)
{
  return sub_1000B3BC4(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, a1);
}

uint64_t sub_1000B3BC4(uint64_t (*a1)(void), float a2)
{
  uint64_t result = a1(0LL);
  uint64_t v5 = v2 + *(int *)(result + 48);
  *(float *)uint64_t v5 = a2;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_1000B3BFC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0LL) + 48);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000B3C54()
{
  return sub_1000B3C60(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

BOOL sub_1000B3C60(uint64_t (*a1)(void))
{
  return (*(_BYTE *)(v1 + *(int *)(a1(0LL) + 48) + 4) & 1) == 0;
}

uint64_t sub_1000B3C90()
{
  return sub_1000B3C9C(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t sub_1000B3C9C(uint64_t (*a1)(void))
{
  uint64_t result = a1(0LL);
  uint64_t v3 = v1 + *(int *)(result + 48);
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

uint64_t sub_1000B3CCC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0LL);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  uint64_t v5 = a1 + v2[6];
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
  *(_BYTE *)(a1 + v2[7]) = 2;
  uint64_t v7 = a1 + v2[8];
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  *(_BYTE *)(a1 + v2[9]) = 5;
  uint64_t v8 = a1 + v2[10];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))( v8,  1LL,  1LL,  v9);
  uint64_t v11 = a1 + v2[11];
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  uint64_t v12 = a1 + v2[12];
  *(_DWORD *)uint64_t v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  return result;
}

uint64_t sub_1000B3DD0@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, a1);
}

uint64_t sub_1000B3DDC@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus, a1);
}

uint64_t sub_1000B3DE8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA124(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, a1);
}

uint64_t sub_1000B3DF4(uint64_t a1)
{
  return sub_1000308E8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000B3E10(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_1000B3F60()
{
  return sub_100019928( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B3F7C()
{
  return sub_100019A00( type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B3F98@<X0>(uint64_t a1@<X8>)
{
  return sub_100005424(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, a1);
}

uint64_t sub_1000B3FA4(uint64_t a1)
{
  return sub_10000547C(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion);
}

uint64_t (*sub_1000B3FB0())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000B3FD8@<X0>(void *a1@<X8>)
{
  return sub_10008AD84(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, a1);
}

double sub_1000B3FE4()
{
  return sub_10001FC20(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000B3FF0(double a1)
{
  return sub_10001FC64(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t (*sub_1000B3FFC(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000B4054()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000B4060()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

double sub_1000B406C()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000B4078(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t (*sub_1000B4084(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000B40DC()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000B40E8()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

double sub_1000B40F4()
{
  return sub_100027BE4(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000B4100(double a1)
{
  return sub_100027C28(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t (*sub_1000B410C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000B4164()
{
  return sub_100027CC4(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000B4170()
{
  return sub_100027D00(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

double sub_1000B417C()
{
  return sub_100027D3C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000B4188(double a1)
{
  return sub_100027D80(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t (*sub_1000B4194(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000B41EC()
{
  return sub_100027E1C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000B41F8()
{
  return sub_100027E58(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

double sub_1000B4204()
{
  return sub_10002A1C4(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000B4210(double a1)
{
  return sub_10002A208(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t (*sub_1000B421C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000B4274()
{
  return sub_10002A2A4(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000B4280()
{
  return sub_10002A2E0(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

double sub_1000B428C()
{
  return sub_1000B4298(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

double sub_1000B4298(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0LL) + 40);
  double result = *(double *)v2;
  if (*(_BYTE *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000B42D0(double a1)
{
  return sub_1000B42DC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t sub_1000B42DC(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0LL);
  uint64_t v5 = v2 + *(int *)(result + 40);
  *(double *)uint64_t v5 = a2;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_1000B4314(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL) + 40);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000B436C()
{
  return sub_1000B4378(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

BOOL sub_1000B4378(uint64_t (*a1)(void))
{
  return (*(_BYTE *)(v1 + *(int *)(a1(0LL) + 40) + 8) & 1) == 0;
}

uint64_t sub_1000B43A8()
{
  return sub_1000B43B4(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000B43B4(uint64_t (*a1)(void))
{
  uint64_t result = a1(0LL);
  uint64_t v3 = v1 + *(int *)(result + 40);
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  return result;
}

double sub_1000B43E4()
{
  return sub_1000B43F0(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

double sub_1000B43F0(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0LL) + 44);
  double result = *(double *)v2;
  if (*(_BYTE *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000B4428(double a1)
{
  return sub_1000B4434(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t sub_1000B4434(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0LL);
  uint64_t v5 = v2 + *(int *)(result + 44);
  *(double *)uint64_t v5 = a2;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_1000B446C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL) + 44);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000B44C4()
{
  return sub_1000B44D0(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

BOOL sub_1000B44D0(uint64_t (*a1)(void))
{
  return (*(_BYTE *)(v1 + *(int *)(a1(0LL) + 44) + 8) & 1) == 0;
}

uint64_t sub_1000B4500()
{
  return sub_1000B450C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000B450C(uint64_t (*a1)(void))
{
  uint64_t result = a1(0LL);
  uint64_t v3 = v1 + *(int *)(result + 44);
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  return result;
}

uint64_t sub_1000B453C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v3);
  double v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 48), (uint64_t)v5, &qword_100355538);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  return sub_100015764((uint64_t)v5, &qword_100355538);
}

uint64_t sub_1000B464C(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL) + 48);
  sub_100015764(v3, &qword_100355538);
  sub_100003E68(a1, v3, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 0LL, 1LL, v4);
}

void (*sub_1000B46BC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  double v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL) + 48);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_1000B480C()
{
  uint64_t v1 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL);
  sub_10000E6C0(v0 + *(int *)(v4 + 48), (uint64_t)v3, &qword_100355538);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v3, 1LL, v5) != 1;
  sub_100015764((uint64_t)v3, &qword_100355538);
  return v6;
}

uint64_t sub_1000B48C0()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL) + 48);
  sub_100015764(v1, &qword_100355538);
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
}

uint64_t sub_1000B4918@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL);
  uint64_t v3 = a1 + v2[5];
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  uint64_t v4 = a1 + v2[6];
  *(void *)uint64_t v4 = 0LL;
  *(_BYTE *)(v4 + 8) = 1;
  uint64_t v5 = a1 + v2[7];
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + 8) = 1;
  uint64_t v6 = a1 + v2[8];
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  uint64_t v7 = a1 + v2[9];
  *(void *)uint64_t v7 = 0LL;
  *(_BYTE *)(v7 + 8) = 1;
  uint64_t v8 = a1 + v2[10];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v2[11];
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v2[12];
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))( v10,  1LL,  1LL,  v11);
}

uint64_t sub_1000B49DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100355628);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_100355628);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48LL))(v5, 1LL, v7) != 1) {
    return sub_100003E68( (uint64_t)v5,  a1,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  uint64_t v11 = a1 + v7[8];
  *(void *)uint64_t v11 = 0LL;
  *(_BYTE *)(v11 + 8) = 1;
  uint64_t v12 = a1 + v7[9];
  *(void *)uint64_t v12 = 0LL;
  *(_BYTE *)(v12 + 8) = 1;
  uint64_t v13 = a1 + v7[10];
  *(void *)uint64_t v13 = 0LL;
  *(_BYTE *)(v13 + 8) = 1;
  uint64_t v14 = a1 + v7[11];
  *(void *)uint64_t v14 = 0LL;
  *(_BYTE *)(v14 + 8) = 1;
  uint64_t v15 = a1 + v7[12];
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v15, 1LL, 1LL, v16);
  return sub_100015764((uint64_t)v5, &qword_100355628);
}

uint64_t sub_1000B4B58(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData,  &qword_100355628,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

void (*sub_1000B4B74(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355628);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355628);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    uint64_t v14 = &v9[v6[8]];
    *(void *)uint64_t v14 = 0LL;
    v14[8] = 1;
    uint64_t v15 = &v9[v6[9]];
    *(void *)uint64_t v15 = 0LL;
    v15[8] = 1;
    uint64_t v16 = &v9[v6[10]];
    *(void *)uint64_t v16 = 0LL;
    v16[8] = 1;
    uint64_t v17 = &v9[v6[11]];
    *(void *)uint64_t v17 = 0LL;
    v17[8] = 1;
    uint64_t v18 = &v9[v6[12]];
    uint64_t v19 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v18, 1LL, 1LL, v19);
    sub_100015764((uint64_t)v5, &qword_100355628);
  }

  else
  {
    sub_100003E68( (uint64_t)v5,  (uint64_t)v9,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
  }

  return sub_1000B4D30;
}

void sub_1000B4D30(uint64_t a1, char a2)
{
}

BOOL sub_1000B4D44()
{
  return sub_100031370( &qword_100355628,  type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000B4D60()
{
  return sub_100031448( type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData,  &qword_100355628,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000B4D7C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AA9D4( type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData,  a1);
}

uint64_t sub_1000B4D90@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t sub_1000B4D9C()
{
  return sub_100027F98(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B4DA8(uint64_t a1)
{
  return sub_100027FD8(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t (*sub_1000B4DB4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8)) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000B4E08()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B4E14()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B4E20()
{
  return sub_10009E808(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B4E2C(uint64_t a1, uint64_t a2)
{
  return sub_10009E868(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t (*sub_1000B4E38(uint64_t a1))(uint64_t *, char)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }

  else
  {
    uint64_t v6 = 0LL;
    unint64_t v7 = 0xE000000000000000LL;
  }

  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v5);
  return sub_100096B94;
}

BOOL sub_1000B4EA0()
{
  return sub_10009E920(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B4EAC()
{
  return sub_10009E95C(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B4EB8()
{
  return sub_1000B8E14(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B4EC4(int a1)
{
  return sub_1000B8E54(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t (*sub_1000B4ED0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL) + 28);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000B4F20()
{
  return sub_100020BD0(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B4F2C()
{
  return sub_100020C0C(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B4F38()
{
  return sub_1000B4F44(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B4F44(uint64_t (*a1)(void))
{
  unsigned int v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0LL) + 32));
  if (v2 == 4) {
    return 0LL;
  }
  else {
    return v2;
  }
}

uint64_t sub_1000B4F70(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_1000B4F9C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL) + 32);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000B4FE8()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL) + 32)) != 4;
}

uint64_t sub_1000B5010()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 4;
  return result;
}

uint64_t sub_1000B5034()
{
  return sub_1000B5040(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B5040(uint64_t (*a1)(void))
{
  unsigned int v2 = (_BYTE *)(v1 + *(int *)(a1(0LL) + 36));
  if (v2[4]) {
    return 0LL;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t sub_1000B5074(int a1)
{
  return sub_1000B5080(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B5080(int a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0LL);
  uint64_t v5 = v2 + *(int *)(result + 36);
  *(_DWORD *)uint64_t v5 = a1;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_1000B50B4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL) + 36);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000B5104()
{
  return sub_10002828C(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B5110()
{
  return sub_1000282C8(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

float sub_1000B511C()
{
  return sub_1000A0988(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B5128(float a1)
{
  return sub_1000A09CC(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, a1);
}

uint64_t (*sub_1000B5134(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL) + 40);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000B518C()
{
  return sub_10003374C(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B5198()
{
  return sub_100033788(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B51A4()
{
  return sub_1000A3B84(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B51B0(char a1)
{
  return sub_1000A3BB8(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t (*sub_1000B51BC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL) + 44);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000B5204()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL) + 44)) != 2;
}

uint64_t sub_1000B522C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 44)) = 2;
  return result;
}

uint64_t sub_1000B5250()
{
  return sub_1000A3C84(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B525C(char a1)
{
  return sub_1000A3CB8(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t (*sub_1000B5268(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL) + 48);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000B52B0()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL) + 48)) != 2;
}

uint64_t sub_1000B52D8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 48)) = 2;
  return result;
}

uint64_t sub_1000B52FC()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL) + 52));
  if (v1 == 4) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000B5324(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*sub_1000B5350(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL) + 52);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000B539C()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL) + 52)) != 4;
}

uint64_t sub_1000B53C4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 52)) = 4;
  return result;
}

uint64_t sub_1000B53E8()
{
  uint64_t v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL) + 56));
  if (v1[4]) {
    return 0LL;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t sub_1000B5418(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
  uint64_t v4 = v1 + *(int *)(result + 56);
  *(_DWORD *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_1000B544C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL) + 56);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000B549C()
{
  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL) + 56) + 4) & 1) == 0;
}

uint64_t sub_1000B54C8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
  uint64_t v2 = v0 + *(int *)(result + 56);
  *(_DWORD *)uint64_t v2 = 0;
  *(_BYTE *)(v2 + 4) = 1;
  return result;
}

int *sub_1000B54F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  int v4 = (void *)(a1 + result[6]);
  *int v4 = 0LL;
  v4[1] = 0LL;
  uint64_t v5 = a1 + result[7];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  *(_BYTE *)(a1 + result[8]) = 4;
  uint64_t v6 = a1 + result[9];
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  uint64_t v7 = a1 + result[10];
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  *(_BYTE *)(a1 + result[11]) = 2;
  *(_BYTE *)(a1 + result[12]) = 2;
  *(_BYTE *)(a1 + result[13]) = 4;
  uint64_t v8 = a1 + result[14];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  return result;
}

uint64_t sub_1000B55A4()
{
  return sub_10001A698(type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t sub_1000B55B0(char a1)
{
  return sub_10001A6CC(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t (*sub_1000B55BC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0LL) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000B5604()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0LL) + 20)) != 2;
}

uint64_t sub_1000B562C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_1000B5650@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100355630);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_100355630);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = (void *)(a1 + v7[6]);
  *uint64_t v9 = 0LL;
  v9[1] = 0LL;
  uint64_t v10 = a1 + v7[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  *(_BYTE *)(a1 + v7[8]) = 4;
  uint64_t v11 = a1 + v7[9];
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  uint64_t v12 = a1 + v7[10];
  *(_DWORD *)uint64_t v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  *(_BYTE *)(a1 + v7[11]) = 2;
  *(_BYTE *)(a1 + v7[12]) = 2;
  *(_BYTE *)(a1 + v7[13]) = 4;
  uint64_t v13 = a1 + v7[14];
  *(_DWORD *)uint64_t v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  return sub_100015764((uint64_t)v5, &qword_100355630);
}

uint64_t sub_1000B57B4(uint64_t a1)
{
  return sub_1000308E8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState,  &qword_100355630,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

void (*sub_1000B57D0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355630);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355630);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *uint64_t v12 = 0LL;
    v12[1] = 0LL;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    v9[v6[8]] = 4;
    uint64_t v14 = &v9[v6[9]];
    *(_DWORD *)uint64_t v14 = 0;
    v14[4] = 1;
    uint64_t v15 = &v9[v6[10]];
    *(_DWORD *)uint64_t v15 = 0;
    v15[4] = 1;
    v9[v6[11]] = 2;
    v9[v6[12]] = 2;
    v9[v6[13]] = 4;
    uint64_t v16 = &v9[v6[14]];
    *(_DWORD *)uint64_t v16 = 0;
    v16[4] = 1;
    sub_100015764((uint64_t)v5, &qword_100355630);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  }

  return sub_1000B5974;
}

void sub_1000B5974(uint64_t a1, char a2)
{
}

BOOL sub_1000B5988()
{
  return sub_100019928( &qword_100355630,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B59A4()
{
  return sub_100019A00( type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState,  &qword_100355630,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B59C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0LL);
  *(_BYTE *)(a1 + *(int *)(v2 + 20)) = 2;
  uint64_t v3 = a1 + *(int *)(v2 + 24);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
}

uint64_t sub_1000B5A1C@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, a1);
}

uint64_t sub_1000B5A28@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA124(type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, a1);
}

uint64_t sub_1000B5A34(uint64_t a1)
{
  return sub_1000308E8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000B5A50(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_1000B5BA0()
{
  return sub_100019928( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B5BBC()
{
  return sub_100019A00( type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B5BD8@<X0>(uint64_t a1@<X8>)
{
  return sub_100005424(type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, a1);
}

uint64_t sub_1000B5BE4(uint64_t a1)
{
  return sub_10000547C(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
}

uint64_t (*sub_1000B5BF0())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000B5C18@<X0>(void *a1@<X8>)
{
  return sub_10008AD84(type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, a1);
}

uint64_t sub_1000B5C24@<X0>(uint64_t a1@<X8>)
{
  return sub_100034894( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  a1);
}

uint64_t sub_1000B5C48(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10010F8CC(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355538);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355538);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000B5DCC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_1000B5F34;
}

void sub_1000B5F34(uint64_t a1, char a2)
{
}

BOOL sub_1000B5F48()
{
  return sub_10001D054( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B5F6C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10010F8CC(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355538);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000B60A0()
{
  return sub_10008D164( type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000B60B4(int a1)
{
  return sub_10008D1EC( a1,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass,  (void (*)(uint64_t))sub_10010F8CC,  &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

void (*sub_1000B60D8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000B6164;
}

void sub_1000B6164(uint64_t *a1, char a2)
{
}

BOOL sub_1000B6180()
{
  return sub_100022E8C( type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000B6194()
{
  return sub_10008D488( type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass,  (void (*)(uint64_t))sub_10010F8CC,  &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000B61B8()
{
  return sub_1000B6350(&OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
}

uint64_t sub_1000B61C4(char a1)
{
  return sub_10008D58C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass,  (void (*)(uint64_t))sub_10010F8CC,  &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
}

void (*sub_1000B61E8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 15) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_1000B6270;
}

void sub_1000B6270(uint64_t *a1, char a2)
{
}

BOOL sub_1000B628C()
{
  return sub_1000B6480(&OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
}

uint64_t sub_1000B6298()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010F8CC(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 15;
  return result;
}

uint64_t sub_1000B6344()
{
  return sub_1000B6350(&OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
}

uint64_t sub_1000B6350(void *a1)
{
  uint64_t v2 = (unsigned __int8 *)(*(void *)(v1
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0LL)
                                              + 20))
                         + *a1);
  swift_beginAccess(v2, v4, 0LL, 0LL);
  if (*v2 == 15) {
    return 0LL;
  }
  else {
    return *v2;
  }
}

uint64_t sub_1000B63AC(char a1)
{
  return sub_10008D58C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass,  (void (*)(uint64_t))sub_10010F8CC,  &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
}

void (*sub_1000B63D0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *v5;
  if (v6 == 15) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_1000B6458;
}

void sub_1000B6458(uint64_t *a1, char a2)
{
}

BOOL sub_1000B6474()
{
  return sub_1000B6480(&OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
}

BOOL sub_1000B6480(void *a1)
{
  uint64_t v2 = (unsigned __int8 *)(*(void *)(v1
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0LL)
                                              + 20))
                         + *a1);
  swift_beginAccess(v2, v4, 0LL, 0LL);
  return *v2 != 15;
}

uint64_t sub_1000B64DC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010F8CC(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 15;
  return result;
}

uint64_t sub_1000B6588()
{
  return sub_1000911E0( type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
}

uint64_t sub_1000B659C(char a1)
{
  return sub_100091260( a1,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass,  (void (*)(uint64_t))sub_10010F8CC,  &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
}

void (*sub_1000B65C0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000B6644;
}

void sub_1000B6644(uint64_t *a1, char a2)
{
}

BOOL sub_1000B6660()
{
  return sub_1000914C8( type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
}

uint64_t sub_1000B6674()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010F8CC(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 2;
  return result;
}

uint64_t sub_1000B6720@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100355638);
  __chkstk_darwin(v3);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v12, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_100355638);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0LL);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = 2;
  uint64_t v8 = a1 + *(int *)(v7 + 24);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  return sub_100015764((uint64_t)v5, &qword_100355638);
}

uint64_t sub_1000B685C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355638);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10010F8CC(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355638);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355638);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000B69E0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355638);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355638);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    v9[*(int *)(v6 + 20)] = 2;
    uint64_t v11 = &v9[*(int *)(v6 + 24)];
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
    sub_100015764((uint64_t)v5, &qword_100355638);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  }

  return sub_1000B6B4C;
}

void sub_1000B6B4C(uint64_t a1, char a2)
{
}

BOOL sub_1000B6B60()
{
  return sub_10001D054( &qword_100355638,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t sub_1000B6B84()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355638);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10010F8CC(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355638);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000B6CB8@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100355640);
  __chkstk_darwin(v3);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v12, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_100355640);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0LL);
  *a1 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  uint64_t v8 = (char *)a1 + *(int *)(v7 + 24);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  return sub_100015764((uint64_t)v5, &qword_100355640);
}

uint64_t sub_1000B6DF8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355640);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10010F8CC(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355640);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355640);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000B6F7C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355640);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355640);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    uint64_t v11 = (char *)v9 + *(int *)(v6 + 24);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
    sub_100015764((uint64_t)v5, &qword_100355640);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  }

  return sub_1000B70EC;
}

void sub_1000B70EC(uint64_t a1, char a2)
{
}

BOOL sub_1000B7100()
{
  return sub_10001D054( &qword_100355640,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan,  type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
}

uint64_t sub_1000B7124()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355640);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10010F8CC(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355640);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000B7258()
{
  return sub_1000911E0( type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
}

uint64_t sub_1000B726C(char a1)
{
  return sub_100091260( a1,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass,  (void (*)(uint64_t))sub_10010F8CC,  &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
}

void (*sub_1000B7290(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000B7314;
}

void sub_1000B7314(uint64_t *a1, char a2)
{
}

BOOL sub_1000B7330()
{
  return sub_1000914C8( type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
}

uint64_t sub_1000B7344()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010F8CC(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 2;
  return result;
}

uint64_t sub_1000B73F0()
{
  return sub_1000911E0( type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
}

uint64_t sub_1000B7404(char a1)
{
  return sub_100091260( a1,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass,  (void (*)(uint64_t))sub_10010F8CC,  &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
}

void (*sub_1000B7428(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000B74AC;
}

void sub_1000B74AC(uint64_t *a1, char a2)
{
}

BOOL sub_1000B74C8()
{
  return sub_1000914C8( type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
}

uint64_t sub_1000B74DC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010F8CC(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 2;
  return result;
}

uint64_t sub_1000B7588()
{
  return sub_1000911E0( type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
}

uint64_t sub_1000B759C(char a1)
{
  return sub_100091260( a1,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass,  (void (*)(uint64_t))sub_10010F8CC,  &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
}

void (*sub_1000B75C0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000B7644;
}

void sub_1000B7644(uint64_t *a1, char a2)
{
}

BOOL sub_1000B7660()
{
  return sub_1000914C8( type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
}

uint64_t sub_1000B7674()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010F8CC(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 2;
  return result;
}

uint64_t sub_1000B7720()
{
  return sub_1000911E0( type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
}

uint64_t sub_1000B7734(char a1)
{
  return sub_100091260( a1,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass,  (void (*)(uint64_t))sub_10010F8CC,  &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
}

void (*sub_1000B7758(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000B77DC;
}

void sub_1000B77DC(uint64_t *a1, char a2)
{
}

BOOL sub_1000B77F8()
{
  return sub_1000914C8( type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
}

uint64_t sub_1000B780C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_10010F8CC(v6);
    swift_release(v3);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = (_BYTE *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  uint64_t result = swift_beginAccess(v8, v10, 1LL, 0LL);
  *uint64_t v8 = 2;
  return result;
}

uint64_t sub_1000B78B8@<X0>(uint64_t a1@<X8>)
{
  return sub_100024054( type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  &qword_10037A870,  &qword_10037A878,  (uint64_t)sub_1000FD568,  a1);
}

uint64_t sub_1000B78DC()
{
  return sub_1000365F4(&qword_10037A870, &qword_10037A878, (uint64_t)sub_1000FD568);
}

uint64_t sub_1000B78F8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAF00(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, a1);
}

uint64_t sub_1000B7904(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000B7920(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_1000B7A70()
{
  return sub_100031370( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B7A8C()
{
  return sub_100031448( type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B7AA8()
{
  return sub_1000B7AB4(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t sub_1000B7AB4(uint64_t (*a1)(void))
{
  unsigned int v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0LL) + 24));
  if (v2 == 4) {
    return 0LL;
  }
  else {
    return v2;
  }
}

uint64_t sub_1000B7AE0(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_1000B7B0C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0LL) + 24);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000B7B58()
{
  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0LL) + 24)) != 4;
}

uint64_t sub_1000B7B80()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 4;
  return result;
}

double sub_1000B7BA4()
{
  return sub_100027BE4(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t sub_1000B7BB0(double a1)
{
  return sub_100027C28(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, a1);
}

uint64_t (*sub_1000B7BBC(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0LL) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000B7C14()
{
  return sub_100027CC4(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t sub_1000B7C20()
{
  return sub_100027D00(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t sub_1000B7C2C()
{
  return sub_1000B4F44(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t sub_1000B7C38(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_1000B7C64(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0LL) + 32);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000B7CB0()
{
  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0LL) + 32)) != 4;
}

uint64_t sub_1000B7CD8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 4;
  return result;
}

uint64_t sub_1000B7CFC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100149DA0();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000B7D34(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100149D5C();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000B7D6C@<X0>(uint64_t a1@<X8>)
{
  unsigned int v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0LL);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))( v3,  1LL,  1LL,  v4);
  *(_BYTE *)(a1 + v2[6]) = 4;
  uint64_t v6 = a1 + v2[7];
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  *(_BYTE *)(a1 + v2[8]) = 4;
  return result;
}

_UNKNOWN **sub_1000B7DF4()
{
  return &off_100340138;
}

void sub_1000B7E00(void *a1@<X8>)
{
  *a1 = &off_100340160;
}

_UNKNOWN **sub_1000B7E10()
{
  return &off_100340188;
}

void sub_1000B7E1C(void *a1@<X8>)
{
  *a1 = &off_1003401B0;
}

double sub_1000B7E2C()
{
  return sub_10001FC20(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t sub_1000B7E38(double a1)
{
  return sub_10001FC64(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, a1);
}

uint64_t (*sub_1000B7E44(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000B7E9C()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t sub_1000B7EA8()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

double sub_1000B7EB4()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t sub_1000B7EC0(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, a1);
}

uint64_t (*sub_1000B7ECC(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000B7F24()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t sub_1000B7F30()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t sub_1000B7F3C@<X0>(uint64_t a1@<X8>)
{
  return sub_10008E720(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, a1);
}

double sub_1000B7F48()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000B7F54(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t (*sub_1000B7F60(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000B7FB8()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000B7FC4()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

double sub_1000B7FD0()
{
  return sub_100027BE4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000B7FDC(double a1)
{
  return sub_100027C28(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t (*sub_1000B7FE8(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0LL) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000B8040()
{
  return sub_100027CC4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000B804C()
{
  return sub_100027D00(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000B8058()
{
  return sub_10001A96C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000B8064(char a1)
{
  return sub_10001A9A0(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t (*sub_1000B8070(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0LL) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000B80B8()
{
  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0LL) + 32)) != 2;
}

uint64_t sub_1000B80E0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

double sub_1000B8104()
{
  return sub_10002A1C4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000B8110(double a1)
{
  return sub_10002A208(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t (*sub_1000B811C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0LL) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000B8174()
{
  return sub_10002A2A4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000B8180()
{
  return sub_10002A2E0(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

double sub_1000B818C()
{
  return sub_1000B4298(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000B8198(double a1)
{
  return sub_1000B42DC(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t (*sub_1000B81A4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0LL) + 40);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000B81FC()
{
  return sub_1000B4378(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000B8208()
{
  return sub_1000B43B4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

double sub_1000B8214()
{
  return sub_1000B43F0(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000B8220(double a1)
{
  return sub_1000B4434(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t (*sub_1000B822C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0LL) + 44);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000B8284()
{
  return sub_1000B44D0(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000B8290()
{
  return sub_1000B450C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

double sub_1000B829C()
{
  return sub_1000B82A8(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

double sub_1000B82A8(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0LL) + 48);
  double result = *(double *)v2;
  if (*(_BYTE *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000B82E0(double a1)
{
  return sub_1000B82EC(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t sub_1000B82EC(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0LL);
  uint64_t v5 = v2 + *(int *)(result + 48);
  *(double *)uint64_t v5 = a2;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_1000B8324(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0LL) + 48);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000B837C()
{
  return sub_1000B8388(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

BOOL sub_1000B8388(uint64_t (*a1)(void))
{
  return (*(_BYTE *)(v1 + *(int *)(a1(0LL) + 48) + 8) & 1) == 0;
}

uint64_t sub_1000B83B8()
{
  return sub_1000B83C4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000B83C4(uint64_t (*a1)(void))
{
  uint64_t result = a1(0LL);
  uint64_t v3 = v1 + *(int *)(result + 48);
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  return result;
}

uint64_t sub_1000B83F4@<X0>(uint64_t a1@<X8>)
{
  return sub_100005424(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t sub_1000B8400(uint64_t a1)
{
  return sub_10000547C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t (*sub_1000B840C())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000B8434@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0LL);
  uint64_t result = UnknownStorage.init()();
  uint64_t v4 = (char *)a1 + v2[6];
  *(void *)uint64_t v4 = 0LL;
  v4[8] = 1;
  double v5 = (char *)a1 + v2[7];
  *(void *)double v5 = 0LL;
  v5[8] = 1;
  *((_BYTE *)a1 + v2[8]) = 2;
  uint64_t v6 = (char *)a1 + v2[9];
  *(void *)uint64_t v6 = 0LL;
  v6[8] = 1;
  uint64_t v7 = (char *)a1 + v2[10];
  *(void *)uint64_t v7 = 0LL;
  v7[8] = 1;
  size_t v8 = (char *)a1 + v2[11];
  *(void *)size_t v8 = 0LL;
  v8[8] = 1;
  uint64_t v9 = (char *)a1 + v2[12];
  *(void *)uint64_t v9 = 0LL;
  v9[8] = 1;
  return result;
}

uint64_t sub_1000B84E4()
{
  uint64_t v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0LL) + 24));
  if (v1[8]) {
    return 0LL;
  }
  else {
    return *(void *)v1;
  }
}

uint64_t sub_1000B8514(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0LL);
  uint64_t v4 = v1 + *(int *)(result + 24);
  *(void *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_1000B8548(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8)) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000B859C()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t sub_1000B85A8()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t sub_1000B85B4()
{
  return sub_1000B96FC(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t sub_1000B85C0(uint64_t a1)
{
  return sub_1000B973C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t (*sub_1000B85CC(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0LL) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8)) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000B8620()
{
  return sub_100027CC4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t sub_1000B862C()
{
  return sub_100027D00(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t sub_1000B8638@<X0>(uint64_t a1@<X8>)
{
  return sub_100005424(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, a1);
}

uint64_t sub_1000B8644(uint64_t a1)
{
  return sub_10000547C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t (*sub_1000B8650())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000B8678@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0LL);
  uint64_t result = UnknownStorage.init()();
  uint64_t v4 = (char *)a1 + *(int *)(v2 + 24);
  *(void *)uint64_t v4 = 0LL;
  v4[8] = 1;
  uint64_t v5 = (char *)a1 + *(int *)(v2 + 28);
  *(void *)uint64_t v5 = 0LL;
  v5[8] = 1;
  return result;
}

uint64_t sub_1000B86DC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B86E8(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, a1);
}

uint64_t sub_1000B86E8@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1(0LL);
  sub_10000E6C0(v2 + *(int *)(v8 + 28), (uint64_t)v7, &qword_100355538);
  uint64_t v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  UnknownStorage.init()();
  uint64_t v10 = a2 + v9[5];
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  uint64_t v11 = a2 + v9[6];
  *(void *)uint64_t v11 = 0LL;
  *(_BYTE *)(v11 + 8) = 1;
  uint64_t v12 = a2 + v9[7];
  *(void *)uint64_t v12 = 0LL;
  *(_BYTE *)(v12 + 8) = 1;
  return sub_100015764((uint64_t)v7, &qword_100355538);
}

uint64_t sub_1000B8804(uint64_t a1)
{
  return sub_100030C2C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000B8820(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_1000B8970()
{
  return sub_10002D37C( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B898C()
{
  return sub_10002D454( type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B89A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100355648);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 32), (uint64_t)v5, &qword_100355648);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a1 + *(int *)(v7 + 24);
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  return sub_100015764((uint64_t)v5, &qword_100355648);
}

uint64_t sub_1000B8AA8(uint64_t a1)
{
  return sub_1000343F8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData,  &qword_100355648,  type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

void (*sub_1000B8AC4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355648);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0LL) + 32);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355648);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355648);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
  }

  return sub_1000B8C04;
}

void sub_1000B8C04(uint64_t a1, char a2)
{
}

BOOL sub_1000B8C18()
{
  return sub_10002E400( &qword_100355648,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData,  type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t sub_1000B8C34()
{
  return sub_10002E4D8( type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData,  &qword_100355648,  type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t sub_1000B8C50@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A705C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, a1);
}

uint64_t sub_1000B8C5C(uint64_t a1)
{
  return sub_1000A70B4(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData);
}

uint64_t (*sub_1000B8C68())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000B8C90@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  a1[1] = &_swiftEmptyArrayStorage;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0LL);
  UnknownStorage.init()();
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 28);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  uint64_t v5 = (char *)a1 + *(int *)(v2 + 32);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
}

uint64_t sub_1000B8D2C@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, a1);
}

uint64_t sub_1000B8D38()
{
  return sub_1000B7AB4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000B8D44(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_1000B8D70(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0LL) + 24);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000B8DBC()
{
  return *(_BYTE *)(v0
}

uint64_t sub_1000B8DE4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 4;
  return result;
}

uint64_t sub_1000B8E08()
{
  return sub_1000B8E14(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000B8E14(uint64_t (*a1)(void))
{
  uint64_t v2 = (_BYTE *)(v1 + *(int *)(a1(0LL) + 28));
  if (v2[4]) {
    return 0LL;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t sub_1000B8E48(int a1)
{
  return sub_1000B8E54(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000B8E54(int a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0LL);
  uint64_t v5 = v2 + *(int *)(result + 28);
  *(_DWORD *)uint64_t v5 = a1;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_1000B8E88(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0LL) + 28);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000B8ED8()
{
  return sub_100020BD0(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000B8EE4()
{
  return sub_100020C0C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000B8EF0()
{
  return sub_1000A9EA0(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000B8EFC(int a1)
{
  return sub_1000A9EE0(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t (*sub_1000B8F08(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0LL) + 32);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000B8F58()
{
  return sub_100027938(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000B8F64()
{
  return sub_100027974(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000B8F70()
{
  return sub_1000B5040(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000B8F7C(int a1)
{
  return sub_1000B5080(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t (*sub_1000B8F88(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0LL) + 36);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000B8FD8()
{
  return sub_10002828C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000B8FE4()
{
  return sub_1000282C8(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000B8FF0@<X0>(uint64_t a1@<X8>)
{
  return sub_100005424(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, a1);
}

uint64_t sub_1000B8FFC(uint64_t a1)
{
  return sub_10000547C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t (*sub_1000B9008())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000B9030(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100149D18();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000B9068@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0LL);
  uint64_t result = UnknownStorage.init()();
  *((_BYTE *)a1 + v2[6]) = 4;
  unint64_t v4 = (char *)a1 + v2[7];
  *(_DWORD *)unint64_t v4 = 0;
  v4[4] = 1;
  uint64_t v5 = (char *)a1 + v2[8];
  *(_DWORD *)uint64_t v5 = 0;
  v5[4] = 1;
  uint64_t v6 = (char *)a1 + v2[9];
  *(_DWORD *)uint64_t v6 = 0;
  void v6[4] = 1;
  return result;
}

_UNKNOWN **sub_1000B90E8()
{
  return &off_1003401D8;
}

void sub_1000B90F4(void *a1@<X8>)
{
  *a1 = &off_100340200;
}

double sub_1000B9104()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000B9110(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, a1);
}

uint64_t (*sub_1000B911C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000B9174()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000B9180()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

double sub_1000B918C()
{
  return sub_100027BE4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000B9198(double a1)
{
  return sub_100027C28(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, a1);
}

uint64_t (*sub_1000B91A4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0LL) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000B91FC()
{
  return sub_100027CC4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000B9208()
{
  return sub_100027D00(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

double sub_1000B9214()
{
  return sub_100027D3C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000B9220(double a1)
{
  return sub_100027D80(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, a1);
}

uint64_t (*sub_1000B922C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0LL) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000B9284()
{
  return sub_100027E1C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000B9290()
{
  return sub_100027E58(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

double sub_1000B929C()
{
  return sub_10002A1C4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000B92A8(double a1)
{
  return sub_10002A208(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, a1);
}

uint64_t (*sub_1000B92B4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0LL) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000B930C()
{
  return sub_10002A2A4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000B9318()
{
  return sub_10002A2E0(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000B9324@<X0>(uint64_t a1@<X8>)
{
  return sub_100005424(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, a1);
}

uint64_t sub_1000B9330(uint64_t a1)
{
  return sub_10000547C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t (*sub_1000B933C())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000B9364@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0LL);
  uint64_t result = UnknownStorage.init()();
  uint64_t v4 = (char *)a1 + v2[6];
  *(void *)uint64_t v4 = 0LL;
  v4[8] = 1;
  double v5 = (char *)a1 + v2[7];
  *(void *)double v5 = 0LL;
  v5[8] = 1;
  uint64_t v6 = (char *)a1 + v2[8];
  *(void *)uint64_t v6 = 0LL;
  v6[8] = 1;
  uint64_t v7 = (char *)a1 + v2[9];
  *(void *)uint64_t v7 = 0LL;
  v7[8] = 1;
  return result;
}

uint64_t sub_1000B93E8@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100355650);
  __chkstk_darwin(v3);
  double v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_100355650);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48LL))(v5, 1LL, v7) != 1) {
    return sub_100003E68( (uint64_t)v5,  (uint64_t)a1,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  }
  *a1 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  size_t v8 = (char *)a1 + v7[6];
  *(void *)size_t v8 = 0LL;
  v8[8] = 1;
  uint64_t v9 = (char *)a1 + v7[7];
  *(void *)uint64_t v9 = 0LL;
  v9[8] = 1;
  uint64_t v10 = (char *)a1 + v7[8];
  *(void *)uint64_t v10 = 0LL;
  v10[8] = 1;
  uint64_t v11 = (char *)a1 + v7[9];
  *(void *)uint64_t v11 = 0LL;
  v11[8] = 1;
  return sub_100015764((uint64_t)v5, &qword_100355650);
}

uint64_t sub_1000B9518(uint64_t a1)
{
  return sub_1000308E8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna,  &qword_100355650,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

void (*sub_1000B9534(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355650);
  double v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355650);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    uint64_t v11 = (char *)v9 + v6[6];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = (char *)v9 + v6[7];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = (char *)v9 + v6[8];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    uint64_t v14 = (char *)v9 + v6[9];
    *(void *)uint64_t v14 = 0LL;
    v14[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355650);
  }

  else
  {
    sub_100003E68( (uint64_t)v5,  (uint64_t)v9,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  }

  return sub_1000B96A4;
}

void sub_1000B96A4(uint64_t a1, char a2)
{
}

BOOL sub_1000B96B8()
{
  return sub_100019928( &qword_100355650,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000B96D4()
{
  return sub_100019A00( type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna,  &qword_100355650,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000B96F0()
{
  return sub_1000B96FC(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t sub_1000B96FC(uint64_t (*a1)(void))
{
  uint64_t v2 = (_BYTE *)(v1 + *(int *)(a1(0LL) + 28));
  if (v2[8]) {
    return 0LL;
  }
  else {
    return *(void *)v2;
  }
}

uint64_t sub_1000B9730(uint64_t a1)
{
  return sub_1000B973C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t sub_1000B973C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0LL);
  uint64_t v5 = v2 + *(int *)(result + 28);
  *(void *)uint64_t v5 = a1;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_1000B9770(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0LL) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8)) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000B97C4()
{
  return sub_100027CC4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t sub_1000B97D0()
{
  return sub_100027D00(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t sub_1000B97DC()
{
  return sub_1000B4F44(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t sub_1000B97E8(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_1000B9814(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0LL) + 32);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000B9860()
{
  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0LL) + 32)) != 4;
}

uint64_t sub_1000B9888()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 4;
  return result;
}

uint64_t sub_1000B98AC()
{
  return sub_1000B5040(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t sub_1000B98B8(int a1)
{
  return sub_1000B5080(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t (*sub_1000B98C4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0LL) + 36);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000B9914()
{
  return sub_10002828C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t sub_1000B9920()
{
  return sub_1000282C8(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t sub_1000B992C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100355658);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 40), (uint64_t)v5, &qword_100355658);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v5, 1LL, v7) != 1) {
    return sub_100003E68( (uint64_t)v5,  a1,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
  }
  UnknownStorage.init()();
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = 2;
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = 2;
  return sub_100015764((uint64_t)v5, &qword_100355658);
}

uint64_t sub_1000B9A1C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AA274( type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures,  2,  2,  a1);
}

uint64_t sub_1000B9A30(uint64_t a1)
{
  return sub_1000B9A4C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna,  &qword_100355658,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t sub_1000B9A4C( uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v8 = v4 + *(int *)(a2(0LL) + 40);
  sub_100015764(v8, a3);
  sub_100003E68(a1, v8, a4);
  uint64_t v9 = a4(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 0LL, 1LL, v9);
}

void (*sub_1000B9AC4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355658);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0LL) + 40);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355658);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    v9[*(int *)(v6 + 20)] = 2;
    v9[*(int *)(v6 + 24)] = 2;
    sub_100015764((uint64_t)v5, &qword_100355658);
  }

  else
  {
    sub_100003E68( (uint64_t)v5,  (uint64_t)v9,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
  }

  return sub_1000B9BF4;
}

void sub_1000B9BF4(uint64_t a1, char a2)
{
}

BOOL sub_1000B9C08()
{
  return sub_1000B9C24( &qword_100355658,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

BOOL sub_1000B9C24(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = sub_100003A0C(a1);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a2(0LL);
  sub_10000E6C0(v3 + *(int *)(v10 + 40), (uint64_t)v9, a1);
  uint64_t v11 = a3(0LL);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v9, 1LL, v11) != 1;
  sub_100015764((uint64_t)v9, a1);
  return v12;
}

uint64_t sub_1000B9CE0()
{
  return sub_1000B9CFC( type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna,  &qword_100355658,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t sub_1000B9CFC(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0LL) + 40);
  sub_100015764(v6, a2);
  uint64_t v7 = a3(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t sub_1000B9D64()
{
  uint64_t v1 = (_BYTE *)(v0
               + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0LL) + 44));
  if (v1[8]) {
    return 0LL;
  }
  else {
    return *(void *)v1;
  }
}

uint64_t sub_1000B9D94(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0LL);
  uint64_t v4 = v1 + *(int *)(result + 44);
  *(void *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_1000B9DC8(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0LL) + 44);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8)) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000B9E1C()
{
  return sub_1000B44D0(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t sub_1000B9E28()
{
  return sub_1000B450C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t sub_1000B9E34@<X0>(uint64_t a1@<X8>)
{
  return sub_100005424(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, a1);
}

uint64_t sub_1000B9E40(uint64_t a1)
{
  return sub_10000547C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t (*sub_1000B9E4C())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000B9E74(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100149CD4();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000B9EAC()
{
  return sub_10001A698(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t sub_1000B9EB8(char a1)
{
  return sub_10001A6CC( a1,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t (*sub_1000B9EC4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0LL) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000B9F0C()
{
  return *(_BYTE *)(v0
}

uint64_t sub_1000B9F34()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_1000B9F58()
{
  return sub_10001A798(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t sub_1000B9F64(char a1)
{
  return sub_10001A7CC( a1,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t (*sub_1000B9F70(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0LL) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000B9FB8()
{
  return *(_BYTE *)(v0
}

uint64_t sub_1000B9FE0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_1000BA004@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0LL);
  UnknownStorage.init()();
  uint64_t v3 = (char *)a1 + v2[6];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  uint64_t v5 = (char *)a1 + v2[7];
  *(void *)uint64_t v5 = 0LL;
  v5[8] = 1;
  *((_BYTE *)a1 + v2[8]) = 4;
  uint64_t v6 = (char *)a1 + v2[9];
  *(_DWORD *)uint64_t v6 = 0;
  void v6[4] = 1;
  uint64_t v7 = (char *)a1 + v2[10];
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 1LL, 1LL, v8);
  uint64_t v10 = (char *)a1 + v2[11];
  *(void *)uint64_t v10 = 0LL;
  v10[8] = 1;
  return result;
}

uint64_t sub_1000BA0E4@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, a1);
}

uint64_t sub_1000BA0F0@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18( type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures,  a1);
}

_UNKNOWN **sub_1000BA0FC()
{
  return &off_100340228;
}

void sub_1000BA108(void *a1@<X8>)
{
  *a1 = &off_100340250;
}

uint64_t sub_1000BA118@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA124(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, a1);
}

uint64_t sub_1000BA124@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1(0LL);
  sub_10000E6C0(v2 + *(int *)(v8 + 24), (uint64_t)v7, &qword_100355538);
  uint64_t v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  UnknownStorage.init()();
  uint64_t v10 = a2 + v9[5];
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  uint64_t v11 = a2 + v9[6];
  *(void *)uint64_t v11 = 0LL;
  *(_BYTE *)(v11 + 8) = 1;
  uint64_t v12 = a2 + v9[7];
  *(void *)uint64_t v12 = 0LL;
  *(_BYTE *)(v12 + 8) = 1;
  return sub_100015764((uint64_t)v7, &qword_100355538);
}

uint64_t sub_1000BA240(uint64_t a1)
{
  return sub_1000308E8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000BA25C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_1000BA3AC()
{
  return sub_100019928( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000BA3C8()
{
  return sub_100019A00( type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000BA3E4()
{
  return sub_10001A898(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
}

uint64_t sub_1000BA3F0(char a1)
{
  return sub_10000534C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
}

uint64_t (*sub_1000BA3FC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0LL) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000BA444()
{
  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0LL) + 28)) != 2;
}

uint64_t sub_1000BA46C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_1000BA490@<X0>(uint64_t a1@<X8>)
{
  return sub_100005424(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, a1);
}

uint64_t sub_1000BA49C(uint64_t a1)
{
  return sub_10000547C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
}

uint64_t (*sub_1000BA4A8())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000BA4D0@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0LL);
  UnknownStorage.init()();
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 24);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  *((_BYTE *)a1 + *(int *)(v2 + 28)) = 2;
  return result;
}

uint64_t sub_1000BA550()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0LL) + 20));
  if (v1 == 4) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000BA578(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_1000BA5A4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0LL) + 20);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000BA5F0()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0LL) + 20)) != 4;
}

uint64_t sub_1000BA618()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 4;
  return result;
}

uint64_t sub_1000BA63C()
{
  return sub_1000B7AB4(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t sub_1000BA648(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_1000BA674(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0LL) + 24);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000BA6C0()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0LL) + 24)) != 4;
}

uint64_t sub_1000BA6E8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 4;
  return result;
}

uint64_t sub_1000BA70C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100149C90();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000BA744@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AA274(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation, 4, 4, a1);
}

_UNKNOWN **sub_1000BA758()
{
  return &off_100340278;
}

void sub_1000BA764(void *a1@<X8>)
{
  *a1 = &off_1003402A0;
}

uint64_t sub_1000BA774@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAF00(type metadata accessor for CLP_LogEntry_PrivateData_WristState, a1);
}

uint64_t sub_1000BA780(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_WristState,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000BA79C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_1000BA8EC()
{
  return sub_100031370( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_WristState,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000BA908()
{
  return sub_100031448( type metadata accessor for CLP_LogEntry_PrivateData_WristState,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000BA924()
{
  return sub_1000B7AB4(type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t sub_1000BA930(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_1000BA95C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL) + 24);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000BA9A8()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL) + 24)) != 4;
}

uint64_t sub_1000BA9D0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 4;
  return result;
}

uint64_t sub_1000BA9F4()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL) + 28));
  if (v1 == 4) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000BAA1C(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_1000BAA48(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL) + 28);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000BAA94()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL) + 28)) != 4;
}

uint64_t sub_1000BAABC()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 4;
  return result;
}

uint64_t sub_1000BAAE0()
{
  return sub_1000B4F44(type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t sub_1000BAAEC(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_1000BAB18(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL) + 32);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000BAB64()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL) + 32)) != 4;
}

uint64_t sub_1000BAB8C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 4;
  return result;
}

uint64_t sub_1000BABB0()
{
  return sub_10001B0E0(type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t sub_1000BABBC(char a1)
{
  return sub_10001B114(a1, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t (*sub_1000BABC8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000BAC10()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL) + 36)) != 2;
}

uint64_t sub_1000BAC38()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

uint64_t sub_1000BAC5C()
{
  return sub_1000AAF40(type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t sub_1000BAC68(char a1)
{
  return sub_1000AAF74(a1, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t (*sub_1000BAC74(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL) + 40);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000BACBC()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL) + 40)) != 2;
}

uint64_t sub_1000BACE4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 40)) = 2;
  return result;
}

uint64_t sub_1000BAD08()
{
  return sub_1000A3B84(type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t sub_1000BAD14(char a1)
{
  return sub_1000A3BB8(a1, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t (*sub_1000BAD20(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL) + 44);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000BAD68()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL) + 44)) != 2;
}

uint64_t sub_1000BAD90()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 44)) = 2;
  return result;
}

uint64_t sub_1000BADB4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100149C4C();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000BADEC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100149C08();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000BAE24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))( v3,  1LL,  1LL,  v4);
  *(_BYTE *)(a1 + v2[6]) = 4;
  *(_BYTE *)(a1 + v2[7]) = 4;
  *(_BYTE *)(a1 + v2[8]) = 4;
  *(_BYTE *)(a1 + v2[9]) = 2;
  *(_BYTE *)(a1 + v2[10]) = 2;
  *(_BYTE *)(a1 + v2[11]) = 2;
  return result;
}

_UNKNOWN **sub_1000BAEBC()
{
  return &off_1003402C8;
}

void sub_1000BAEC8(void *a1@<X8>)
{
  *a1 = &off_1003402F0;
}

_UNKNOWN **sub_1000BAED8()
{
  return &off_100340318;
}

void sub_1000BAEE4(void *a1@<X8>)
{
  *a1 = &off_100340340;
}

uint64_t sub_1000BAEF4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAF00(type metadata accessor for CLP_LogEntry_PrivateData_WatchState, a1);
}

uint64_t sub_1000BAF00@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1(0LL);
  sub_10000E6C0(v2 + *(int *)(v8 + 20), (uint64_t)v7, &qword_100355538);
  uint64_t v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  UnknownStorage.init()();
  uint64_t v10 = a2 + v9[5];
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  uint64_t v11 = a2 + v9[6];
  *(void *)uint64_t v11 = 0LL;
  *(_BYTE *)(v11 + 8) = 1;
  uint64_t v12 = a2 + v9[7];
  *(void *)uint64_t v12 = 0LL;
  *(_BYTE *)(v12 + 8) = 1;
  return sub_100015764((uint64_t)v7, &qword_100355538);
}

uint64_t sub_1000BB01C(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_WatchState,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000BB038(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_10008A3A4;
}

BOOL sub_1000BB188()
{
  return sub_100031370( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_WatchState,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000BB1A4()
{
  return sub_100031448( type metadata accessor for CLP_LogEntry_PrivateData_WatchState,  &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000BB1C0()
{
  return sub_10002DF9C(type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
}

uint64_t sub_1000BB1CC(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
}

uint64_t (*sub_1000BB1D8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000BB228()
{
  return sub_1000277C8(type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
}

uint64_t sub_1000BB234()
{
  return sub_100027804(type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
}

uint64_t sub_1000BB240@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100355660);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_100355660);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0LL);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = 4;
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = 4;
  return sub_100015764((uint64_t)v5, &qword_100355660);
}

uint64_t sub_1000BB330(uint64_t a1)
{
  return sub_100030C2C( a1,  type metadata accessor for CLP_LogEntry_PrivateData_WatchState,  &qword_100355660,  type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
}

void (*sub_1000BB34C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355660);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355660);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    v9[*(int *)(v6 + 20)] = 4;
    v9[*(int *)(v6 + 24)] = 4;
    sub_100015764((uint64_t)v5, &qword_100355660);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
  }

  return sub_1000BB47C;
}

void sub_1000BB47C(uint64_t a1, char a2)
{
}

BOOL sub_1000BB490()
{
  return sub_10002D37C( &qword_100355660,  type metadata accessor for CLP_LogEntry_PrivateData_WatchState,  type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t sub_1000BB4AC()
{
  return sub_10002D454( type metadata accessor for CLP_LogEntry_PrivateData_WatchState,  &qword_100355660,  type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t sub_1000BB4C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100355668);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 32), (uint64_t)v5, &qword_100355668);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  *(_BYTE *)(a1 + v7[6]) = 4;
  *(_BYTE *)(a1 + v7[7]) = 4;
  *(_BYTE *)(a1 + v7[8]) = 4;
  *(_BYTE *)(a1 + v7[9]) = 2;
  *(_BYTE *)(a1 + v7[10]) = 2;
  *(_BYTE *)(a1 + v7[11]) = 2;
  return sub_100015764((uint64_t)v5, &qword_100355668);
}

uint64_t sub_1000BB608(uint64_t a1)
{
  return sub_1000343F8( a1,  type metadata accessor for CLP_LogEntry_PrivateData_WatchState,  &qword_100355668,  type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

void (*sub_1000BB624(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355668);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0LL) + 32);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_100355668);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
    v9[v6[6]] = 4;
    v9[v6[7]] = 4;
    v9[v6[8]] = 4;
    v9[v6[9]] = 2;
    v9[v6[10]] = 2;
    v9[v6[11]] = 2;
    sub_100015764((uint64_t)v5, &qword_100355668);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  }

  return sub_1000BB7A4;
}

void sub_1000BB7A4(uint64_t a1, char a2)
{
}

BOOL sub_1000BB7B8()
{
  return sub_10002E400( &qword_100355668,  type metadata accessor for CLP_LogEntry_PrivateData_WatchState,  type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t sub_1000BB7D4()
{
  return sub_10002E4D8( type metadata accessor for CLP_LogEntry_PrivateData_WatchState,  &qword_100355668,  type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t sub_1000BB7F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0LL);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  uint64_t v5 = a1 + v2[6];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  uint64_t v6 = a1 + v2[7];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  uint64_t v8 = a1 + v2[8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
}

uint64_t sub_1000BB8B8@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation, a1);
}

uint64_t sub_1000BB8C4@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for CLP_LogEntry_PrivateData_WristState, a1);
}

uint64_t sub_1000BB8D0()
{
  return sub_1000BB8DC(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
}

uint64_t sub_1000BB8DC(uint64_t (*a1)(void))
{
  unsigned int v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0LL) + 20));
  if (v2 == 5) {
    return 0LL;
  }
  else {
    return v2;
  }
}

uint64_t sub_1000BB908(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_1000BB934(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL) + 20);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000BB980()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL) + 20)) != 5;
}

uint64_t sub_1000BB9A8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 5;
  return result;
}

uint64_t sub_1000BB9CC()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL) + 24));
  if (v1 == 3) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000BB9F4(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_1000BBA20(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL) + 24);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 3) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000BBA6C()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL) + 24)) != 3;
}

uint64_t sub_1000BBA94()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 3;
  return result;
}

uint64_t sub_1000BBAB8()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL) + 28));
  uint64_t v2 = v1[1];
  if (v2) {
    uint64_t v3 = *v1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  swift_bridgeObjectRetain(v2);
  return v3;
}

uint64_t sub_1000BBB08(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL) + 28));
  uint64_t result = swift_bridgeObjectRelease(v5[1]);
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_1000BBB4C(uint64_t a1))(uint64_t *, char)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL) + 28);
  *(_DWORD *)(a1 + 24) = v3;
  int v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }

  else
  {
    uint64_t v6 = 0LL;
    unint64_t v7 = 0xE000000000000000LL;
  }

  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v5);
  return sub_100096B94;
}

BOOL sub_1000BBBB4()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL) + 28) + 8) != 0LL;
}

uint64_t sub_1000BBBE0()
{
  uint64_t v1 = (void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL) + 28));
  uint64_t result = swift_bridgeObjectRelease(v1[1]);
  *uint64_t v1 = 0LL;
  v1[1] = 0LL;
  return result;
}

uint64_t sub_1000BBC14()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL) + 32));
  uint64_t v2 = v1[1];
  if (v2) {
    uint64_t v3 = *v1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  swift_bridgeObjectRetain(v2);
  return v3;
}

uint64_t sub_1000BBC64(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL) + 32));
  uint64_t result = swift_bridgeObjectRelease(v5[1]);
  *unint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_1000BBCA8(uint64_t a1))(uint64_t *, char)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL) + 32);
  *(_DWORD *)(a1 + 24) = v3;
  int v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }

  else
  {
    uint64_t v6 = 0LL;
    unint64_t v7 = 0xE000000000000000LL;
  }

  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v5);
  return sub_100096B94;
}

uint64_t sub_1000BBD10(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = (void *)(a1[2] + *((int *)a1 + 6));
  uint64_t v4 = *a1;
  uint64_t v5 = v3[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(a1[1]);
    swift_bridgeObjectRelease(v5);
    *uint64_t v3 = v4;
    v3[1] = v2;
    return swift_bridgeObjectRelease(v2);
  }

  else
  {
    uint64_t result = swift_bridgeObjectRelease(v3[1]);
    *uint64_t v3 = v4;
    v3[1] = v2;
  }

  return result;
}

BOOL sub_1000BBD7C()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL) + 32) + 8) != 0LL;
}

uint64_t sub_1000BBDA8()
{
  uint64_t v1 = (void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL) + 32));
  uint64_t result = swift_bridgeObjectRelease(v1[1]);
  *uint64_t v1 = 0LL;
  v1[1] = 0LL;
  return result;
}

uint64_t sub_1000BBDDC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100149BC4();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000BBE14(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100149B80();
  return Enum.hash(into:)(a1, a2, v4);
}

int *sub_1000BBE4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL);
  *(_BYTE *)(a1 + result[5]) = 5;
  *(_BYTE *)(a1 + result[6]) = 3;
  uint64_t v3 = (void *)(a1 + result[7]);
  *uint64_t v3 = 0LL;
  v3[1] = 0LL;
  unint64_t v4 = (void *)(a1 + result[8]);
  *unint64_t v4 = 0LL;
  v4[1] = 0LL;
  return result;
}

_UNKNOWN **sub_1000BBEA4()
{
  return &off_100340368;
}

void sub_1000BBEB0(void *a1@<X8>)
{
  *a1 = &off_100340390;
}

_UNKNOWN **sub_1000BBEC0()
{
  return &off_1003403B8;
}

void sub_1000BBECC(void *a1@<X8>)
{
  *a1 = &off_1003403E0;
}

uint64_t sub_1000BBEDC@<X0>(uint64_t a1@<X8>)
{
  return sub_100034894( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  a1);
}

uint64_t sub_1000BBF00(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = __chkstk_darwin(v4);
  unint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10010FF78(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355538);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355538);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000BC084(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_1000BC1EC;
}

void sub_1000BC1EC(uint64_t a1, char a2)
{
}

BOOL sub_1000BC200()
{
  return sub_10001D054( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000BC224()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10010FF78(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355538);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000BC358@<X0>(uint64_t a1@<X8>)
{
  return sub_100034894( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  a1);
}

uint64_t sub_1000BC37C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10010FF78(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355538);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355538);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000BC500(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_1000BC668;
}

void sub_1000BC668(uint64_t a1, char a2)
{
}

BOOL sub_1000BC67C()
{
  return sub_10001D054( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000BC6A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10010FF78(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355538);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000BC7D4@<X0>(uint64_t a1@<X8>)
{
  return sub_100034894( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  a1);
}

uint64_t sub_1000BC7F8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10010FF78(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355538);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355538);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000BC97C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_1000BCAE4;
}

void sub_1000BCAE4(uint64_t a1, char a2)
{
}

BOOL sub_1000BCAF8()
{
  return sub_10001D054( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000BCB1C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10010FF78(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355538);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000BCC50@<X0>(uint64_t a1@<X8>)
{
  return sub_100034894( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  a1);
}

uint64_t sub_1000BCC74(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10010FF78(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355538);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355538);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000BCDF8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355538);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355538);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355538);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }

  return sub_1000BCF60;
}

void sub_1000BCF60(uint64_t a1, char a2)
{
}

BOOL sub_1000BCF74()
{
  return sub_10001D054( &qword_100355538,  type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000BCF98()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10010FF78(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355538);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000BD0CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_100355670);
  __chkstk_darwin(v3);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v12, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_100355670);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v7[5]) = 5;
  *(_BYTE *)(a1 + v7[6]) = 3;
  uint64_t v8 = (void *)(a1 + v7[7]);
  *uint64_t v8 = 0LL;
  v8[1] = 0LL;
  uint64_t v9 = (void *)(a1 + v7[8]);
  *uint64_t v9 = 0LL;
  v9[1] = 0LL;
  return sub_100015764((uint64_t)v5, &qword_100355670);
}

uint64_t sub_1000BD200(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355670);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10010FF78(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355670);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355670);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000BD384(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355670);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355670);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 5;
    v9[v6[6]] = 3;
    uint64_t v11 = &v9[v6[7]];
    *uint64_t v11 = 0LL;
    v11[1] = 0LL;
    uint64_t v12 = &v9[v6[8]];
    *uint64_t v12 = 0LL;
    v12[1] = 0LL;
    sub_100015764((uint64_t)v5, &qword_100355670);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  }

  return sub_1000BD4E8;
}

void sub_1000BD4E8(uint64_t a1, char a2)
{
}

BOOL sub_1000BD4FC()
{
  return sub_10001D054( &qword_100355670,  type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference,  type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
}

uint64_t sub_1000BD520()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355670);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10010FF78(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355670);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000BD654@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BD678( &qword_100355540,  type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate,  a1);
}

uint64_t sub_1000BD678@<X0>( uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X1>, void *a3@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = sub_100003A0C(a1);
  __chkstk_darwin(v11);
  uint64_t v13 = &v20[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v14 = *(void *)(v5 + *(int *)(a2(0LL) + 20)) + *a3;
  swift_beginAccess(v14, v20, 0LL, 0LL);
  sub_10000E6C0(v14, (uint64_t)v13, a1);
  uint64_t v15 = a4(0LL);
  UnknownStorage.init()();
  uint64_t v16 = a5 + *(int *)(v15 + 20);
  *(void *)uint64_t v16 = 0LL;
  *(_BYTE *)(v16 + 8) = 1;
  uint64_t v17 = a5 + *(int *)(v15 + 24);
  *(void *)uint64_t v17 = 0LL;
  *(_BYTE *)(v17 + 8) = 1;
  return sub_100015764((uint64_t)v13, a1);
}

uint64_t sub_1000BD7A8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355540);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10010FF78(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_100355540);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_100355540);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000BD92C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_100355540);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_100355540);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    sub_100015764((uint64_t)v5, &qword_100355540);
  }

  else
  {
    sub_100003E68( (uint64_t)v5,  (uint64_t)v9,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  }

  return sub_1000BDA84;
}

void sub_1000BDA84(uint64_t a1, char a2)
{
}

BOOL sub_1000BDA98()
{
  return sub_10001D054( &qword_100355540,  type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit,  &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_1000BDABC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_100355540);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10010FF78(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_100355540);
  swift_endAccess(v16);
  return swift_release(v11);
}

double sub_1000BDBF0()
{
  return sub_10002AAA8( type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit,  OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM);
}

uint64_t sub_1000BDC04(double a1)
{
  return sub_10008BD48( type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit,  type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass,  (void (*)(uint64_t))sub_10010FF78,  OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM,  a1);
}

void (*sub_1000BDC28(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM[0];
  swift_beginAccess(v5, v3, 0LL, 0LL);
  double v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000BDCB8;
}

void sub_1000BDCB8(uint64_t *a1, char a2)
{
}

BOOL sub_1000BDCD4()
{
  return sub_100024E88( type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit,  OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM);
}

uint64_t sub_1000BDCE8()
{
  return sub_10008BFF4( type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit,  type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass,  (void (*)(uint64_t))sub_10010FF78,  OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM);
}

uint64_t sub_1000BDD0C@<X0>(uint64_t a1@<X8>)
{
  return sub_100024054( type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit,  &qword_10037A948,  &qword_10037A950,  (uint64_t)sub_100106F98,  a1);
}

uint64_t sub_1000BDD30()
{
  return sub_1000365F4(&qword_10037A948, &qword_10037A950, (uint64_t)sub_100106F98);
}

double sub_1000BDD4C()
{
  return sub_10001FC20(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000BDD58(double a1)
{
  return sub_10001FC64(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, a1);
}

uint64_t (*sub_1000BDD64(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000BDDBC()
{
  return sub_10001FD00(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000BDDC8()
{
  return sub_10001FD3C(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

double sub_1000BDDD4()
{
  return sub_10001FD78(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000BDDE0(double a1)
{
  return sub_10001FDBC(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, a1);
}

uint64_t (*sub_1000BDDEC(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000BDE44()
{
  return sub_10000510C(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000BDE50()
{
  return sub_100005148(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000BDE5C()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL) + 28));
  if (v1 == 3) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000BDE84(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_1000BDEB0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL) + 28);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 3) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000BDEFC()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL) + 28)) != 3;
}

uint64_t sub_1000BDF24()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 3;
  return result;
}

uint64_t sub_1000BDF48()
{
  return sub_1000B4F44(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000BDF54(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_1000BDF80(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL) + 32);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000BDFCC()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL) + 32)) != 4;
}

uint64_t sub_1000BDFF4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 4;
  return result;
}

double sub_1000BE018()
{
  return sub_10002A1C4(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000BE024(double a1)
{
  return sub_10002A208(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, a1);
}

uint64_t (*sub_1000BE030(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_1000BE088()
{
  return sub_10002A2A4(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000BE094()
{
  return sub_10002A2E0(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000BE0A0()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL) + 40));
  if (v1 == 4) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000BE0C8(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*sub_1000BE0F4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL) + 40);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000BE140()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL) + 40)) != 4;
}

uint64_t sub_1000BE168()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 40)) = 4;
  return result;
}

uint64_t sub_1000BE18C()
{
  return sub_1000A3B84(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000BE198(char a1)
{
  return sub_1000A3BB8(a1, type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t (*sub_1000BE1A4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL) + 44);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1000BE1EC()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL) + 44)) != 2;
}

uint64_t sub_1000BE214()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 44)) = 2;
  return result;
}

float sub_1000BE238()
{
  return sub_1000B3B80(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000BE244(float a1)
{
  return sub_1000B3BC4(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, a1);
}

uint64_t (*sub_1000BE250(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL) + 48);
  float v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    float v4 = 0.0;
  }
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1000BE2A8()
{
  return sub_1000B3C60(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000BE2B4()
{
  return sub_1000B3C9C(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

int *sub_1000BE2C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(void *)uint64_t v4 = 0LL;
  *(_BYTE *)(v4 + 8) = 1;
  *(_BYTE *)(a1 + result[7]) = 3;
  *(_BYTE *)(a1 + result[8]) = 4;
  uint64_t v5 = a1 + result[9];
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + 8) = 1;
  *(_BYTE *)(a1 + result[10]) = 4;
  *(_BYTE *)(a1 + result[11]) = 2;
  uint64_t v6 = a1 + result[12];
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  return result;
}

double sub_1000BE358()
{
  return sub_1000BE364(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

double sub_1000BE364(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0LL) + 20));
  swift_beginAccess(v2 + 16, v4, 0LL, 0LL);
  double result = *(double *)(v2 + 16);
  if (*(_BYTE *)(v2 + 24)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000BE3C0(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 133LL, 7LL);
    sub_10011047C(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 16, v11, 1LL, 0LL);
  *(double *)(v9 + 16) = a1;
  *(_BYTE *)(v9 + 24) = 0;
  return result;
}

void (*sub_1000BE460(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0LL, 0LL);
  double v6 = *(double *)(v5 + 16);
  if (*(_BYTE *)(v5 + 24)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000BE4E4;
}

void sub_1000BE4E4(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 88);
    uint64_t v8 = *(void *)(v3 + 80);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 133LL, 7LL);
    sub_10011047C(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_1000BE5B0()
{
  return sub_1000BE5BC(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

BOOL sub_1000BE5BC(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0LL) + 20));
  swift_beginAccess(v2 + 16, v4, 0LL, 0LL);
  return (*(_BYTE *)(v2 + 24) & 1) == 0;
}

uint64_t sub_1000BE610()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 133LL, 7LL);
    sub_10011047C(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 16, v9, 1LL, 0LL);
  *(void *)(v7 + 16) = 0LL;
  *(_BYTE *)(v7 + 24) = 1;
  return result;
}

double sub_1000BE6A8()
{
  return sub_10009B5C8(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

uint64_t sub_1000BE6B4(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 133LL, 7LL);
    sub_10011047C(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 32, v11, 1LL, 0LL);
  *(double *)(v9 + 32) = a1;
  *(_BYTE *)(v9 + 40) = 0;
  return result;
}

void (*sub_1000BE754(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 32, v3, 0LL, 0LL);
  double v6 = *(double *)(v5 + 32);
  if (*(_BYTE *)(v5 + 40)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000BE7D8;
}

void sub_1000BE7D8(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 88);
    uint64_t v8 = *(void *)(v3 + 80);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 133LL, 7LL);
    sub_10011047C(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_1000BE8A4()
{
  return sub_10009B830(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

uint64_t sub_1000BE8B0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 133LL, 7LL);
    sub_10011047C(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 32, v9, 1LL, 0LL);
  *(void *)(v7 + 32) = 0LL;
  *(_BYTE *)(v7 + 40) = 1;
  return result;
}

float sub_1000BE948()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20));
  swift_beginAccess(v1 + 44, v3, 0LL, 0LL);
  float result = *(float *)(v1 + 44);
  if (*(_BYTE *)(v1 + 48)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000BE9A0(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 133LL, 7LL);
    sub_10011047C(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 44, v11, 1LL, 0LL);
  *(float *)(v9 + 44) = a1;
  *(_BYTE *)(v9 + 48) = 0;
  return result;
}

void (*sub_1000BEA40(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 44, v3, 0LL, 0LL);
  float v6 = *(float *)(v5 + 44);
  if (*(_BYTE *)(v5 + 48)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000BEAC4;
}

void sub_1000BEAC4(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 133LL, 7LL);
    sub_10011047C(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_1000BEB90()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20));
  swift_beginAccess(v1 + 44, v3, 0LL, 0LL);
  return (*(_BYTE *)(v1 + 48) & 1) == 0;
}

uint64_t sub_1000BEBE0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 133LL, 7LL);
    sub_10011047C(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 44, v9, 1LL, 0LL);
  *(_DWORD *)(v7 + 44) = 0;
  *(_BYTE *)(v7 + 48) = 1;
  return result;
}

float sub_1000BEC78()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20));
  swift_beginAccess(v1 + 52, v3, 0LL, 0LL);
  float result = *(float *)(v1 + 52);
  if (*(_BYTE *)(v1 + 56)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000BECD0(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 133LL, 7LL);
    sub_10011047C(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 52, v11, 1LL, 0LL);
  *(float *)(v9 + 52) = a1;
  *(_BYTE *)(v9 + 56) = 0;
  return result;
}

void (*sub_1000BED70(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 52, v3, 0LL, 0LL);
  float v6 = *(float *)(v5 + 52);
  if (*(_BYTE *)(v5 + 56)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000BEDF4;
}

void sub_1000BEDF4(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 133LL, 7LL);
    sub_10011047C(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_1000BEEC0()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20));
  swift_beginAccess(v1 + 52, v3, 0LL, 0LL);
  return (*(_BYTE *)(v1 + 56) & 1) == 0;
}

uint64_t sub_1000BEF10()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 133LL, 7LL);
    sub_10011047C(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 52, v9, 1LL, 0LL);
  *(_DWORD *)(v7 + 52) = 0;
  *(_BYTE *)(v7 + 56) = 1;
  return result;
}

float sub_1000BEFA8()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20));
  swift_beginAccess(v1 + 60, v3, 0LL, 0LL);
  float result = *(float *)(v1 + 60);
  if (*(_BYTE *)(v1 + 64)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000BF000(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 133LL, 7LL);
    sub_10011047C(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 60, v11, 1LL, 0LL);
  *(float *)(v9 + 60) = a1;
  *(_BYTE *)(v9 + 64) = 0;
  return result;
}

void (*sub_1000BF0A0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 60, v3, 0LL, 0LL);
  float v6 = *(float *)(v5 + 60);
  if (*(_BYTE *)(v5 + 64)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000BF124;
}

void sub_1000BF124(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 133LL, 7LL);
    sub_10011047C(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_1000BF1F0()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20));
  swift_beginAccess(v1 + 60, v3, 0LL, 0LL);
  return (*(_BYTE *)(v1 + 64) & 1) == 0;
}

uint64_t sub_1000BF240()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 133LL, 7LL);
    sub_10011047C(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 60, v9, 1LL, 0LL);
  *(_DWORD *)(v7 + 60) = 0;
  *(_BYTE *)(v7 + 64) = 1;
  return result;
}

float sub_1000BF2D8()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20));
  swift_beginAccess(v1 + 68, v3, 0LL, 0LL);
  float result = *(float *)(v1 + 68);
  if (*(_BYTE *)(v1 + 72)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000BF330(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 133LL, 7LL);
    sub_10011047C(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 68, v11, 1LL, 0LL);
  *(float *)(v9 + 68) = a1;
  *(_BYTE *)(v9 + 72) = 0;
  return result;
}

void (*sub_1000BF3D0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 68, v3, 0LL, 0LL);
  float v6 = *(float *)(v5 + 68);
  if (*(_BYTE *)(v5 + 72)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000BF454;
}

void sub_1000BF454(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 133LL, 7LL);
    sub_10011047C(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_1000BF520()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20));
  swift_beginAccess(v1 + 68, v3, 0LL, 0LL);
  return (*(_BYTE *)(v1 + 72) & 1) == 0;
}

uint64_t sub_1000BF570()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 133LL, 7LL);
    sub_10011047C(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 68, v9, 1LL, 0LL);
  *(_DWORD *)(v7 + 68) = 0;
  *(_BYTE *)(v7 + 72) = 1;
  return result;
}

float sub_1000BF608()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20));
  swift_beginAccess(v1 + 76, v3, 0LL, 0LL);
  float result = *(float *)(v1 + 76);
  if (*(_BYTE *)(v1 + 80)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000BF660(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 133LL, 7LL);
    sub_10011047C(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 76, v11, 1LL, 0LL);
  *(float *)(v9 + 76) = a1;
  *(_BYTE *)(v9 + 80) = 0;
  return result;
}

void (*sub_1000BF700(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 76, v3, 0LL, 0LL);
  float v6 = *(float *)(v5 + 76);
  if (*(_BYTE *)(v5 + 80)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000BF784;
}

void sub_1000BF784(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 133LL, 7LL);
    sub_10011047C(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_1000BF850()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20));
  swift_beginAccess(v1 + 76, v3, 0LL, 0LL);
  return (*(_BYTE *)(v1 + 80) & 1) == 0;
}

uint64_t sub_1000BF8A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 133LL, 7LL);
    sub_10011047C(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 76, v9, 1LL, 0LL);
  *(_DWORD *)(v7 + 76) = 0;
  *(_BYTE *)(v7 + 80) = 1;
  return result;
}

float sub_1000BF938()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20));
  swift_beginAccess(v1 + 84, v3, 0LL, 0LL);
  float result = *(float *)(v1 + 84);
  if (*(_BYTE *)(v1 + 88)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000BF990(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 133LL, 7LL);
    sub_10011047C(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 84, v11, 1LL, 0LL);
  *(float *)(v9 + 84) = a1;
  *(_BYTE *)(v9 + 88) = 0;
  return result;
}

void (*sub_1000BFA30(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 84, v3, 0LL, 0LL);
  float v6 = *(float *)(v5 + 84);
  if (*(_BYTE *)(v5 + 88)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000BFAB4;
}

void sub_1000BFAB4(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 133LL, 7LL);
    sub_10011047C(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_1000BFB80()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20));
  swift_beginAccess(v1 + 84, v3, 0LL, 0LL);
  return (*(_BYTE *)(v1 + 88) & 1) == 0;
}

uint64_t sub_1000BFBD0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 133LL, 7LL);
    sub_10011047C(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 84, v9, 1LL, 0LL);
  *(_DWORD *)(v7 + 84) = 0;
  *(_BYTE *)(v7 + 88) = 1;
  return result;
}

float sub_1000BFC68()
{
  return sub_1000BFC74(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

float sub_1000BFC74(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0LL) + 20));
  swift_beginAccess(v2 + 92, v4, 0LL, 0LL);
  float result = *(float *)(v2 + 92);
  if (*(_BYTE *)(v2 + 96)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000BFCD0(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 133LL, 7LL);
    sub_10011047C(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 92, v11, 1LL, 0LL);
  *(float *)(v9 + 92) = a1;
  *(_BYTE *)(v9 + 96) = 0;
  return result;
}

void (*sub_1000BFD70(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 92, v3, 0LL, 0LL);
  float v6 = *(float *)(v5 + 92);
  if (*(_BYTE *)(v5 + 96)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000BFDF4;
}

void sub_1000BFDF4(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 133LL, 7LL);
    sub_10011047C(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_1000BFEC0()
{
  return sub_1000BFECC(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

BOOL sub_1000BFECC(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0LL) + 20));
  swift_beginAccess(v2 + 92, v4, 0LL, 0LL);
  return (*(_BYTE *)(v2 + 96) & 1) == 0;
}

uint64_t sub_1000BFF20()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 133LL, 7LL);
    sub_10011047C(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 92, v9, 1LL, 0LL);
  *(_DWORD *)(v7 + 92) = 0;
  *(_BYTE *)(v7 + 96) = 1;
  return result;
}

float sub_1000BFFB8()
{
  return sub_1000BFFC4(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

float sub_1000BFFC4(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0LL) + 20));
  swift_beginAccess(v2 + 100, v4, 0LL, 0LL);
  float result = *(float *)(v2 + 100);
  if (*(_BYTE *)(v2 + 104)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000C0020(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 133LL, 7LL);
    sub_10011047C(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 100, v11, 1LL, 0LL);
  *(float *)(v9 + 100) = a1;
  *(_BYTE *)(v9 + 104) = 0;
  return result;
}

void (*sub_1000C00C0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 100, v3, 0LL, 0LL);
  float v6 = *(float *)(v5 + 100);
  if (*(_BYTE *)(v5 + 104)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000C0144;
}

void sub_1000C0144(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 133LL, 7LL);
    sub_10011047C(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_1000C0210()
{
  return sub_1000C021C(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

BOOL sub_1000C021C(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0LL) + 20));
  swift_beginAccess(v2 + 100, v4, 0LL, 0LL);
  return (*(_BYTE *)(v2 + 104) & 1) == 0;
}

uint64_t sub_1000C0270()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 133LL, 7LL);
    sub_10011047C(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 100, v9, 1LL, 0LL);
  *(_DWORD *)(v7 + 100) = 0;
  *(_BYTE *)(v7 + 104) = 1;
  return result;
}

float sub_1000C0308()
{
  return sub_1000C0314(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

float sub_1000C0314(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0LL) + 20));
  swift_beginAccess(v2 + 108, v4, 0LL, 0LL);
  float result = *(float *)(v2 + 108);
  if (*(_BYTE *)(v2 + 112)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000C0370(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 133LL, 7LL);
    sub_10011047C(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 108, v11, 1LL, 0LL);
  *(float *)(v9 + 108) = a1;
  *(_BYTE *)(v9 + 112) = 0;
  return result;
}

void (*sub_1000C0410(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 108, v3, 0LL, 0LL);
  float v6 = *(float *)(v5 + 108);
  if (*(_BYTE *)(v5 + 112)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000C0494;
}

void sub_1000C0494(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 133LL, 7LL);
    sub_10011047C(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_1000C0560()
{
  return sub_1000C056C(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

BOOL sub_1000C056C(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0LL) + 20));
  swift_beginAccess(v2 + 108, v4, 0LL, 0LL);
  return (*(_BYTE *)(v2 + 112) & 1) == 0;
}

uint64_t sub_1000C05C0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 133LL, 7LL);
    sub_10011047C(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 108, v9, 1LL, 0LL);
  *(_DWORD *)(v7 + 108) = 0;
  *(_BYTE *)(v7 + 112) = 1;
  return result;
}

float sub_1000C0658()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20));
  swift_beginAccess(v1 + 116, v3, 0LL, 0LL);
  float result = *(float *)(v1 + 116);
  if (*(_BYTE *)(v1 + 120)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000C06B0(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 133LL, 7LL);
    sub_10011047C(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 116, v11, 1LL, 0LL);
  *(float *)(v9 + 116) = a1;
  *(_BYTE *)(v9 + 120) = 0;
  return result;
}

void (*sub_1000C0750(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 116, v3, 0LL, 0LL);
  float v6 = *(float *)(v5 + 116);
  if (*(_BYTE *)(v5 + 120)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000C07D4;
}

void sub_1000C07D4(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 133LL, 7LL);
    sub_10011047C(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_1000C08A0()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20));
  swift_beginAccess(v1 + 116, v3, 0LL, 0LL);
  return (*(_BYTE *)(v1 + 120) & 1) == 0;
}

uint64_t sub_1000C08F0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 133LL, 7LL);
    sub_10011047C(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 116, v9, 1LL, 0LL);
  *(_DWORD *)(v7 + 116) = 0;
  *(_BYTE *)(v7 + 120) = 1;
  return result;
}

float sub_1000C0988()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20));
  swift_beginAccess(v1 + 124, v3, 0LL, 0LL);
  float result = *(float *)(v1 + 124);
  if (*(_BYTE *)(v1 + 128)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000C09E0(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 133LL, 7LL);
    sub_10011047C(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 124, v11, 1LL, 0LL);
  *(float *)(v9 + 124) = a1;
  *(_BYTE *)(v9 + 128) = 0;
  return result;
}

void (*sub_1000C0A80(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 124, v3, 0LL, 0LL);
  float v6 = *(float *)(v5 + 124);
  if (*(_BYTE *)(v5 + 128)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000C0B04;
}

void sub_1000C0B04(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 133LL, 7LL);
    sub_10011047C(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_1000C0BD0()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20));
  swift_beginAccess(v1 + 124, v3, 0LL, 0LL);
  return (*(_BYTE *)(v1 + 128) & 1) == 0;
}

uint64_t sub_1000C0C20()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 133LL, 7LL);
    sub_10011047C(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 124, v9, 1LL, 0LL);
  *(_DWORD *)(v7 + 124) = 0;
  *(_BYTE *)(v7 + 128) = 1;
  return result;
}

uint64_t sub_1000C0CB8()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20));
  swift_beginAccess(v1 + 129, v3, 0LL, 0LL);
  if (*(_BYTE *)(v1 + 129) == 3) {
    return 0LL;
  }
  else {
    return *(unsigned __int8 *)(v1 + 129);
  }
}

uint64_t sub_1000C0D08(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 133LL, 7LL);
    sub_10011047C(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 129, v11, 1LL, 0LL);
  *(_BYTE *)(v9 + 129) = a1;
  return result;
}

void (*sub_1000C0DA4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 129, v3, 0LL, 0LL);
  int v6 = *(unsigned __int8 *)(v5 + 129);
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_1000C0E20;
}

void sub_1000C0E20(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 133LL, 7LL);
    sub_10011047C(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_1000C0EEC()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20));
  swift_beginAccess(v1 + 129, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 129) != 3;
}

uint64_t sub_1000C0F3C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 133LL, 7LL);
    sub_10011047C(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 129, v9, 1LL, 0LL);
  *(_BYTE *)(v7 + 129) = 3;
  return result;
}

uint64_t sub_1000C0FD0()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20));
  swift_beginAccess(v1 + 130, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 130) & 1;
}

uint64_t sub_1000C101C(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 133LL, 7LL);
    sub_10011047C(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 130, v11, 1LL, 0LL);
  *(_BYTE *)(v9 + 130) = a1 & 1;
  return result;
}

void (*sub_1000C10BC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 130, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 130) & 1;
  return sub_1000C1134;
}

void sub_1000C1134(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 133LL, 7LL);
    sub_10011047C(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_1000C11F8()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20));
  swift_beginAccess(v1 + 130, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 130) != 2;
}

uint64_t sub_1000C1248()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 133LL, 7LL);
    sub_10011047C(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 130, v9, 1LL, 0LL);
  *(_BYTE *)(v7 + 130) = 2;
  return result;
}

uint64_t sub_1000C12DC()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20));
  swift_beginAccess(v1 + 131, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 131) & 1;
}

uint64_t sub_1000C1328(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 133LL, 7LL);
    sub_10011047C(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 131, v11, 1LL, 0LL);
  *(_BYTE *)(v9 + 131) = a1 & 1;
  return result;
}

void (*sub_1000C13C8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 131, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 131) & 1;
  return sub_1000C1440;
}

void sub_1000C1440(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 133LL, 7LL);
    sub_10011047C(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_1000C1504()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20));
  swift_beginAccess(v1 + 131, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 131) != 2;
}

uint64_t sub_1000C1554()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 133LL, 7LL);
    sub_10011047C(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 131, v9, 1LL, 0LL);
  *(_BYTE *)(v7 + 131) = 2;
  return result;
}

uint64_t sub_1000C15E8()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20));
  swift_beginAccess(v1 + 132, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 132) & 1;
}

uint64_t sub_1000C1634(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 133LL, 7LL);
    sub_10011047C(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 132, v11, 1LL, 0LL);
  *(_BYTE *)(v9 + 132) = a1 & 1;
  return result;
}

void (*sub_1000C16D4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 132, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 132) & 1;
  return sub_1000C174C;
}

void sub_1000C174C(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 133LL, 7LL);
    sub_10011047C(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_1000C1810()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20));
  swift_beginAccess(v1 + 132, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 132) != 2;
}

uint64_t sub_1000C1860()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 133LL, 7LL);
    sub_10011047C(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 132, v9, 1LL, 0LL);
  *(_BYTE *)(v7 + 132) = 2;
  return result;
}

uint64_t sub_1000C18F4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100149B3C();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000C192C@<X0>(uint64_t a1@<X8>)
{
  return sub_100024054( type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample,  &qword_10037A968,  &qword_10037A970,  (uint64_t)sub_100109DC4,  a1);
}

uint64_t sub_1000C1950()
{
  return sub_1000365F4(&qword_10037A968, &qword_10037A970, (uint64_t)sub_100109DC4);
}

_UNKNOWN **sub_1000C196C()
{
  return &off_100340408;
}

void sub_1000C1978(void *a1@<X8>)
{
  *a1 = &off_100340430;
}

uint64_t sub_1000C1988()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003698C0);
  sub_10000E704(v0, (uint64_t)qword_1003698C0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 0LL;
  *(void *)uint64_t v9 = "CLRF_UNKNOWN";
  *(void *)(v9 + 8) = 12LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "CLRF_WGS84";
  *((void *)v13 + 1) = 10LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 2LL;
  *(void *)uint64_t v14 = "CLRF_CHINA_SHIFTED";
  *(void *)(v14 + 8) = 18LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C1B18()
{
  return sub_100008C30(&qword_10037A400, (uint64_t)qword_1003698C0, (uint64_t)sub_1000C1988);
}

uint64_t sub_1000C1B34@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A400, (uint64_t)qword_1003698C0, (uint64_t)sub_1000C1988, a1);
}

uint64_t sub_1000C1B50@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A400, (uint64_t)qword_1003698C0, (uint64_t)sub_1000C1988, a1);
}

uint64_t sub_1000C1B6C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003698D8);
  sub_10000E704(v0, (uint64_t)qword_1003698D8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v37 = swift_allocObject(v1, v6 + 14 * v4, v5 | 7);
  *(_OWORD *)(v37 + 16) = xmmword_1002B42F0;
  uint64_t v7 = v37 + v6;
  uint64_t v8 = v37 + v6 + *(int *)(v2 + 48);
  *(void *)(v37 + v6) = 0LL;
  *(void *)uint64_t v8 = "LT_UNKNOWN";
  *(void *)(v8 + 8) = 10LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 1LL;
  *(void *)uint64_t v12 = "LT_GPS";
  *(void *)(v12 + 8) = 6LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 2LL;
  *(void *)uint64_t v14 = "LT_NMEA";
  *((void *)v14 + 1) = 7LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v7 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *uint64_t v15 = 3LL;
  *(void *)uint64_t v16 = "LT_ACCESSORY";
  *((void *)v16 + 1) = 12LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v7 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 4LL;
  *(void *)uint64_t v18 = "LT_WIFI";
  *((void *)v18 + 1) = 7LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v7 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 5LL;
  *(void *)uint64_t v20 = "LT_SKYHOOK_OBSOLETE";
  *((void *)v20 + 1) = 19LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v7 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 6LL;
  *(void *)uint64_t v22 = "LT_CELL";
  *((void *)v22 + 1) = 7LL;
  _BYTE v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v7 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  void *v23 = 7LL;
  *(void *)uint64_t v24 = "LT_LAC";
  *((void *)v24 + 1) = 6LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 8LL;
  *(void *)uint64_t v25 = "LT_MCC";
  *(void *)(v25 + 8) = 6LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  uint64_t v26 = (void *)(v7 + 9 * v4);
  uint64_t v27 = (char *)v26 + *(int *)(v2 + 48);
  void *v26 = 9LL;
  *(void *)uint64_t v27 = "LT_GPS_COARSE";
  *((void *)v27 + 1) = 13LL;
  v27[16] = 2;
  v11();
  uint64_t v28 = (void *)(v7 + 10 * v4);
  uint64_t v29 = (char *)v28 + *(int *)(v2 + 48);
  *uint64_t v28 = 10LL;
  *(void *)uint64_t v29 = "LT_PIPELINE";
  *((void *)v29 + 1) = 11LL;
  v29[16] = 2;
  v11();
  uint64_t v30 = (void *)(v7 + 11 * v4);
  char v31 = (char *)v30 + *(int *)(v2 + 48);
  void *v30 = 11LL;
  *(void *)char v31 = "LT_WIFI2";
  *((void *)v31 + 1) = 8LL;
  v31[16] = 2;
  v11();
  uint64_t v32 = (void *)(v7 + 12 * v4);
  uint64_t v33 = (char *)v32 + *(int *)(v2 + 48);
  *uint64_t v32 = 12LL;
  *(void *)uint64_t v33 = "LT_COMPENSATED";
  *((void *)v33 + 1) = 14LL;
  v33[16] = 2;
  v11();
  uint64_t v34 = (void *)(v7 + 13 * v4);
  uint64_t v35 = (char *)v34 + *(int *)(v2 + 48);
  *uint64_t v34 = 13LL;
  *(void *)uint64_t v35 = "LT_LOIOVERRIDE";
  *((void *)v35 + 1) = 14LL;
  v35[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v37);
}

uint64_t sub_1000C1F24()
{
  return sub_100008C30(&qword_10037A408, (uint64_t)qword_1003698D8, (uint64_t)sub_1000C1B6C);
}

uint64_t sub_1000C1F40@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A408, (uint64_t)qword_1003698D8, (uint64_t)sub_1000C1B6C, a1);
}

uint64_t sub_1000C1F5C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A408, (uint64_t)qword_1003698D8, (uint64_t)sub_1000C1B6C, a1);
}

uint64_t sub_1000C1F78()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003698F0);
  sub_10000E704(v0, (uint64_t)qword_1003698F0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 - v4 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3330;
  uint64_t v8 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v8 = "CLIENT_SATELLITE_CONSTELLATION_UNKNOWN";
  *(void *)(v8 + 8) = 38LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v6 + v4) = 1LL;
  *(void *)uint64_t v12 = "CLIENT_SATELLITE_CONSTELLATION_GPS";
  *(void *)(v12 + 8) = 34LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + v6 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 2LL;
  *(void *)uint64_t v14 = "CLIENT_SATELLITE_CONSTELLATION_GLONASS";
  *((void *)v14 + 1) = 38LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v7 + v6 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *uint64_t v15 = 3LL;
  *(void *)uint64_t v16 = "CLIENT_SATELLITE_CONSTELLATION_BEIDOU";
  *((void *)v16 + 1) = 37LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v7 + v6 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 4LL;
  *(void *)uint64_t v18 = "CLIENT_SATELLITE_CONSTELLATION_GALILEO";
  *((void *)v18 + 1) = 38LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v7 + v6 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 5LL;
  *(void *)uint64_t v20 = "CLIENT_SATELLITE_CONSTELLATION_QZSS";
  *((void *)v20 + 1) = 35LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v7 + v6 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 6LL;
  *(void *)uint64_t v22 = "CLIENT_SATELLITE_CONSTELLATION_NAVIC";
  *((void *)v22 + 1) = 36LL;
  _BYTE v22[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C21DC()
{
  return sub_100008C30(&qword_10037A410, (uint64_t)qword_1003698F0, (uint64_t)sub_1000C1F78);
}

uint64_t sub_1000C21F8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A410, (uint64_t)qword_1003698F0, (uint64_t)sub_1000C1F78, a1);
}

uint64_t sub_1000C2214@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A410, (uint64_t)qword_1003698F0, (uint64_t)sub_1000C1F78, a1);
}

uint64_t sub_1000C2230()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369908);
  sub_10000E704(v0, (uint64_t)qword_100369908);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32F0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "BATCHED_LOCATION_FIX_TYPE_UNKNOWN";
  *(void *)(v9 + 8) = 33LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "BATCHED_LOCATION_FIX_TYPE_SCALED_INTERPOLATED";
  *(void *)(v13 + 8) = 45LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "BATCHED_LOCATION_FIX_TYPE_MAP_MATCHED_INTERPOLATED";
  *((void *)v15 + 1) = 50LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 3LL;
  *(void *)uint64_t v17 = "BATCHED_LOCATION_FIX_TYPE_MAP_MATCHED_GNSS_FIX";
  *((void *)v17 + 1) = 46LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 4LL;
  *(void *)uint64_t v18 = "BATCHED_LOCATION_FIX_TYPE_GNSS_FIX";
  *(void *)(v18 + 8) = 34LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C2430()
{
  return sub_100008C30(&qword_10037A418, (uint64_t)qword_100369908, (uint64_t)sub_1000C2230);
}

uint64_t sub_1000C244C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A418, (uint64_t)qword_100369908, (uint64_t)sub_1000C2230, a1);
}

uint64_t sub_1000C2468@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A418, (uint64_t)qword_100369908, (uint64_t)sub_1000C2230, a1);
}

uint64_t sub_1000C2484()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369920);
  sub_10000E704(v0, (uint64_t)qword_100369920);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 0LL;
  *(void *)uint64_t v9 = "GNSS_MODE_OF_OPERATION_UNKNOWN";
  *(void *)(v9 + 8) = 30LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "GNSS_MODE_OF_OPERATION_1HZ";
  *((void *)v13 + 1) = 26LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 2LL;
  *(void *)uint64_t v14 = "GNSS_MODE_OF_OPERATION_RHYTHMIC";
  *(void *)(v14 + 8) = 31LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C2614()
{
  return sub_100008C30(&qword_10037A420, (uint64_t)qword_100369920, (uint64_t)sub_1000C2484);
}

uint64_t sub_1000C2630@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A420, (uint64_t)qword_100369920, (uint64_t)sub_1000C2484, a1);
}

uint64_t sub_1000C264C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A420, (uint64_t)qword_100369920, (uint64_t)sub_1000C2484, a1);
}

uint64_t sub_1000C2668()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369938);
  sub_10000E704(v0, (uint64_t)qword_100369938);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32F0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "RHYTHMIC_GNSS_BEST_RHYTHMIC_UNKNOWN";
  *(void *)(v9 + 8) = 35LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "RHYTHMIC_GNSS_BEST_RHYTHMIC_INVALID";
  *(void *)(v13 + 8) = 35LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "RHYTHMIC_GNSS_BEST_RHYTHMIC_NON_WAKING";
  *((void *)v15 + 1) = 38LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 3LL;
  *(void *)uint64_t v17 = "RHYTHMIC_GNSS_BEST_RHYTHMIC_WAKING";
  *((void *)v17 + 1) = 34LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 4LL;
  *(void *)uint64_t v18 = "RHYTHMIC_GNSS_PROACTIVE_NON_WAKING";
  *(void *)(v18 + 8) = 34LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C2868()
{
  return sub_100008C30(&qword_10037A428, (uint64_t)qword_100369938, (uint64_t)sub_1000C2668);
}

uint64_t sub_1000C2884@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A428, (uint64_t)qword_100369938, (uint64_t)sub_1000C2668, a1);
}

uint64_t sub_1000C28A0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A428, (uint64_t)qword_100369938, (uint64_t)sub_1000C2668, a1);
}

uint64_t sub_1000C28BC()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369950);
  sub_10000E704(v0, (uint64_t)qword_100369950);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 0LL;
  *(void *)uint64_t v9 = "BATCH_MODE_UNKNOWN";
  *(void *)(v9 + 8) = 18LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "BATCH_MODE_DISABLE_ON_WAKE";
  *((void *)v13 + 1) = 26LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 2LL;
  *(void *)uint64_t v14 = "BATCH_MODE_ALLOW_DARK_WAKE";
  *(void *)(v14 + 8) = 26LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C2A48()
{
  return sub_100008C30(&qword_10037A430, (uint64_t)qword_100369950, (uint64_t)sub_1000C28BC);
}

uint64_t sub_1000C2A64@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A430, (uint64_t)qword_100369950, (uint64_t)sub_1000C28BC, a1);
}

uint64_t sub_1000C2A80@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A430, (uint64_t)qword_100369950, (uint64_t)sub_1000C28BC, a1);
}

uint64_t sub_1000C2A9C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369968);
  sub_10000E704(v0, (uint64_t)qword_100369968);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "OPERATING_MODE_UNKNOWN";
  *(void *)(v9 + 8) = 22LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "OPERATING_MODE_NORMAL";
  *(void *)(v13 + 8) = 21LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "OPERATING_MODE_TIME";
  *((void *)v15 + 1) = 19LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 3LL;
  *(void *)uint64_t v17 = "OPERATING_MODE_SKIP_DEBOUNCE";
  *((void *)v17 + 1) = 28LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C2C58()
{
  return sub_100008C30(&qword_10037A438, (uint64_t)qword_100369968, (uint64_t)sub_1000C2A9C);
}

uint64_t sub_1000C2C74@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A438, (uint64_t)qword_100369968, (uint64_t)sub_1000C2A9C, a1);
}

uint64_t sub_1000C2C90@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A438, (uint64_t)qword_100369968, (uint64_t)sub_1000C2A9C, a1);
}

uint64_t sub_1000C2CAC()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369980);
  sub_10000E704(v0, (uint64_t)qword_100369980);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 0LL;
  *(void *)uint64_t v9 = "PIPELINE_OPERATING_MODE_UNKNOWN";
  *(void *)(v9 + 8) = 31LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "PIPELINE_OPERATING_MODE_INDOOR";
  *((void *)v13 + 1) = 30LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 2LL;
  *(void *)uint64_t v14 = "PIPELINE_OPERATING_MODE_REGIONAL";
  *(void *)(v14 + 8) = 32LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C2E3C()
{
  return sub_100008C30(&qword_10037A440, (uint64_t)qword_100369980, (uint64_t)sub_1000C2CAC);
}

uint64_t sub_1000C2E58@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A440, (uint64_t)qword_100369980, (uint64_t)sub_1000C2CAC, a1);
}

uint64_t sub_1000C2E74@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A440, (uint64_t)qword_100369980, (uint64_t)sub_1000C2CAC, a1);
}

uint64_t sub_1000C2E90()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369998);
  sub_10000E704(v0, (uint64_t)qword_100369998);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v150 = swift_allocObject(v1, v6 + 72 * v4, v5 | 7);
  *(_OWORD *)(v150 + 16) = xmmword_1002BACE0;
  uint64_t v7 = v150 + v6;
  uint64_t v8 = v150 + v6 + *(int *)(v2 + 48);
  *(void *)(v150 + v6) = 0LL;
  *(void *)uint64_t v8 = "DM_UNKNOWN";
  *(void *)(v8 + 8) = 10LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v150 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 1LL;
  *(void *)uint64_t v12 = "DM_FROZEN";
  *(void *)(v12 + 8) = 9LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v150 + v6 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 2LL;
  *(void *)uint64_t v14 = "DM_STATIC";
  *((void *)v14 + 1) = 9LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v150 + v6 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *uint64_t v15 = 3LL;
  *(void *)uint64_t v16 = "DM_MOVING";
  *((void *)v16 + 1) = 9LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v150 + v6 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 4LL;
  *(void *)uint64_t v18 = "DM_WALKING";
  *((void *)v18 + 1) = 10LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v150 + v6 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 5LL;
  *(void *)uint64_t v20 = "DM_DRIVING";
  *((void *)v20 + 1) = 10LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v150 + v6 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 6LL;
  *(void *)uint64_t v22 = "DM_CYCLING";
  *((void *)v22 + 1) = 10LL;
  _BYTE v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v150 + v6 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  void *v23 = 7LL;
  *(void *)uint64_t v24 = "DM_SEMI_STATIONARY";
  *((void *)v24 + 1) = 18LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v150 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 8LL;
  *(void *)uint64_t v25 = "DM_RUNNING";
  *(void *)(v25 + 8) = 10LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  uint64_t v26 = (void *)(v150 + v6 + 9 * v4);
  uint64_t v27 = (char *)v26 + *(int *)(v2 + 48);
  void *v26 = 9LL;
  *(void *)uint64_t v27 = "DM_MOVING_COARSE";
  *((void *)v27 + 1) = 16LL;
  v27[16] = 2;
  v11();
  uint64_t v28 = (void *)(v150 + v6 + 10 * v4);
  uint64_t v29 = (char *)v28 + *(int *)(v2 + 48);
  *uint64_t v28 = 10LL;
  *(void *)uint64_t v29 = "DM_IN_VEHICLE_FROZEN";
  *((void *)v29 + 1) = 20LL;
  v29[16] = 2;
  v11();
  uint64_t v30 = (void *)(v150 + v6 + 11 * v4);
  char v31 = (char *)v30 + *(int *)(v2 + 48);
  void *v30 = 11LL;
  *(void *)char v31 = "DM_IN_VEHICLE_STATIC";
  *((void *)v31 + 1) = 20LL;
  v31[16] = 2;
  v11();
  uint64_t v32 = (void *)(v150 + v6 + 12 * v4);
  uint64_t v33 = (char *)v32 + *(int *)(v2 + 48);
  *uint64_t v32 = 41LL;
  *(void *)uint64_t v33 = "DM_WALKING_SLOW";
  *((void *)v33 + 1) = 15LL;
  v33[16] = 2;
  v11();
  uint64_t v34 = (void *)(v150 + v6 + 13 * v4);
  uint64_t v35 = (char *)v34 + *(int *)(v2 + 48);
  *uint64_t v34 = 52LL;
  *(void *)uint64_t v35 = "DM_VEHICULAR_IN_HAND";
  *((void *)v35 + 1) = 20LL;
  v35[16] = 2;
  v11();
  uint64_t v36 = (void *)(v150 + v6 + 14 * v4);
  uint64_t v37 = (char *)v36 + *(int *)(v2 + 48);
  void *v36 = 56LL;
  *(void *)uint64_t v37 = "DM_DRIVING_OTHER";
  *((void *)v37 + 1) = 16LL;
  v37[16] = 2;
  v11();
  uint64_t v38 = (void *)(v150 + v6 + 15 * v4);
  uint64_t v39 = (char *)v38 + *(int *)(v2 + 48);
  *uint64_t v38 = 61LL;
  *(void *)uint64_t v39 = "DM_MACHINE_WORKOUT";
  *((void *)v39 + 1) = 18LL;
  v39[16] = 2;
  v11();
  uint64_t v40 = v150 + v6 + 16 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 16 * v4) = 62LL;
  *(void *)uint64_t v40 = "DM_WORKOUT";
  *(void *)(v40 + 8) = 10LL;
  *(_BYTE *)(v40 + 16) = 2;
  v11();
  uint64_t v41 = (void *)(v150 + v6 + 17 * v4);
  uint64_t v42 = (char *)v41 + *(int *)(v2 + 48);
  void *v41 = 63LL;
  *(void *)uint64_t v42 = "DM_MULTI_SPORT_TRANSITION";
  *((void *)v42 + 1) = 25LL;
  v42[16] = 2;
  v11();
  char v43 = (void *)(v150 + v6 + 18 * v4);
  uint64_t v44 = (char *)v43 + *(int *)(v2 + 48);
  *char v43 = 64LL;
  *(void *)uint64_t v44 = "DM_INDOOR_SOCCER";
  *((void *)v44 + 1) = 16LL;
  v44[16] = 2;
  v11();
  uint64_t v45 = (void *)(v150 + v6 + 19 * v4);
  uint64_t v46 = (char *)v45 + *(int *)(v2 + 48);
  void *v45 = 65LL;
  *(void *)uint64_t v46 = "DM_AUSTRALIAN_FOOTBALL";
  *((void *)v46 + 1) = 22LL;
  v46[16] = 2;
  v11();
  uint64_t v47 = (void *)(v150 + v6 + 20 * v4);
  uint64_t v48 = (char *)v47 + *(int *)(v2 + 48);
  *uint64_t v47 = 66LL;
  *(void *)uint64_t v48 = "DM_PICKLEBALL";
  *((void *)v48 + 1) = 13LL;
  v48[16] = 2;
  v11();
  uint64_t v49 = (void *)(v150 + v6 + 21 * v4);
  uint64_t v50 = (char *)v49 + *(int *)(v2 + 48);
  void *v49 = 100LL;
  *(void *)uint64_t v50 = "DM_CYCLING_LEG";
  *((void *)v50 + 1) = 14LL;
  v50[16] = 2;
  v11();
  uint64_t v51 = (void *)(v150 + v6 + 22 * v4);
  uint64_t v52 = (char *)v51 + *(int *)(v2 + 48);
  *uint64_t v51 = 2010LL;
  *(void *)uint64_t v52 = "DM_STATIONARY_CYCLING";
  *((void *)v52 + 1) = 21LL;
  v52[16] = 2;
  v11();
  uint64_t v53 = (void *)(v150 + v6 + 23 * v4);
  uint64_t v54 = (char *)v53 + *(int *)(v2 + 48);
  void *v53 = 2020LL;
  *(void *)uint64_t v54 = "DM_CALISTHENICS";
  *((void *)v54 + 1) = 15LL;
  v54[16] = 2;
  v11();
  uint64_t v55 = (void *)(v150 + v6 + 24 * v4);
  uint64_t v56 = (char *)v55 + *(int *)(v2 + 48);
  *uint64_t v55 = 2022LL;
  *(void *)uint64_t v56 = "DM_FUNCTIONAL_STRENGTH";
  *((void *)v56 + 1) = 22LL;
  v56[16] = 2;
  v11();
  uint64_t v57 = (void *)(v150 + v6 + 25 * v4);
  uint64_t v58 = (char *)v57 + *(int *)(v2 + 48);
  void *v57 = 2024LL;
  *(void *)uint64_t v58 = "DM_CORE_TRAINING";
  *((void *)v58 + 1) = 16LL;
  v58[16] = 2;
  v11();
  unint64_t v59 = (void *)(v150 + v6 + 26 * v4);
  unint64_t v60 = (char *)v59 + *(int *)(v2 + 48);
  *unint64_t v59 = 2048LL;
  *(void *)unint64_t v60 = "DM_ELLIPTICAL";
  *((void *)v60 + 1) = 13LL;
  v60[16] = 2;
  v11();
  uint64_t v61 = (void *)(v150 + v6 + 27 * v4);
  uint64_t v62 = (char *)v61 + *(int *)(v2 + 48);
  void *v61 = 2061LL;
  *(void *)uint64_t v62 = "DM_CROSS_TRAINING";
  *((void *)v62 + 1) = 17LL;
  v62[16] = 2;
  v11();
  unint64_t v63 = (void *)(v150 + v6 + 28 * v4);
  unint64_t v64 = (char *)v63 + *(int *)(v2 + 48);
  *unint64_t v63 = 2065LL;
  *(void *)unint64_t v64 = "DM_STAIR_CLIMBING";
  *((void *)v64 + 1) = 17LL;
  v64[16] = 2;
  v11();
  unint64_t v65 = (void *)(v150 + v6 + 29 * v4);
  uint64_t v66 = (char *)v65 + *(int *)(v2 + 48);
  *unint64_t v65 = 2068LL;
  *(void *)uint64_t v66 = "DM_JUMP_ROPE";
  *((void *)v66 + 1) = 12LL;
  v66[16] = 2;
  v11();
  uint64_t v67 = (void *)(v150 + v6 + 30 * v4);
  char v68 = (char *)v67 + *(int *)(v2 + 48);
  *uint64_t v67 = 2071LL;
  *(void *)char v68 = "DM_ROWING";
  *((void *)v68 + 1) = 9LL;
  v68[16] = 2;
  v11();
  uint64_t v69 = (void *)(v150 + v6 + 31 * v4);
  uint64_t v70 = (char *)v69 + *(int *)(v2 + 48);
  void *v69 = 2101LL;
  *(void *)uint64_t v70 = "DM_COOL_DOWN";
  *((void *)v70 + 1) = 12LL;
  v70[16] = 2;
  v11();
  uint64_t v71 = v150 + v6 + 32 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 32 * v4) = 2105LL;
  *(void *)uint64_t v71 = "DM_PILATES";
  *(void *)(v71 + 8) = 10LL;
  *(_BYTE *)(v71 + 16) = 2;
  v11();
  uint64_t v72 = (void *)(v150 + v6 + 33 * v4);
  uint64_t v73 = (char *)v72 + *(int *)(v2 + 48);
  void *v72 = 2150LL;
  *(void *)uint64_t v73 = "DM_YOGA";
  *((void *)v73 + 1) = 7LL;
  v73[16] = 2;
  v11();
  uint64_t v74 = (void *)(v150 + v6 + 34 * v4);
  uint64_t v75 = (char *)v74 + *(int *)(v2 + 48);
  *uint64_t v74 = 3015LL;
  *(void *)uint64_t v75 = "DM_DANCING";
  *((void *)v75 + 1) = 10LL;
  v75[16] = 2;
  v11();
  uint64_t v76 = (void *)(v150 + v6 + 35 * v4);
  uint64_t v77 = (char *)v76 + *(int *)(v2 + 48);
  void *v76 = 3016LL;
  *(void *)uint64_t v77 = "DM_STEP_TRAINING";
  *((void *)v77 + 1) = 16LL;
  v77[16] = 2;
  v11();
  uint64_t v78 = (void *)(v150 + v6 + 36 * v4);
  uint64_t v79 = (char *)v78 + *(int *)(v2 + 48);
  *uint64_t v78 = 11805LL;
  *(void *)uint64_t v79 = "DM_PUSHING_WHEELCHAIR";
  *((void *)v79 + 1) = 21LL;
  v79[16] = 2;
  v11();
  uint64_t v80 = (void *)(v150 + v6 + 37 * v4);
  uint64_t v81 = (char *)v80 + *(int *)(v2 + 48);
  void *v80 = 12150LL;
  *(void *)uint64_t v81 = "DM_INDOOR_RUNNING";
  *((void *)v81 + 1) = 17LL;
  v81[16] = 2;
  v11();
  uint64_t v82 = (void *)(v150 + v6 + 38 * v4);
  uint64_t v83 = (char *)v82 + *(int *)(v2 + 48);
  *uint64_t v82 = 15030LL;
  *(void *)uint64_t v83 = "DM_BADMINTON";
  *((void *)v83 + 1) = 12LL;
  v83[16] = 2;
  v11();
  uint64_t v84 = (void *)(v150 + v6 + 39 * v4);
  uint64_t v85 = (char *)v84 + *(int *)(v2 + 48);
  void *v84 = 15055LL;
  *(void *)uint64_t v85 = "DM_BASKETBALL";
  *((void *)v85 + 1) = 13LL;
  v85[16] = 2;
  v11();
  uint64_t v86 = (void *)(v150 + v6 + 40 * v4);
  uint64_t v87 = (char *)v86 + *(int *)(v2 + 48);
  void *v86 = 15100LL;
  *(void *)uint64_t v87 = "DM_BOXING";
  *((void *)v87 + 1) = 9LL;
  v87[16] = 2;
  v11();
  uint64_t v88 = (void *)(v150 + v6 + 41 * v4);
  uint64_t v89 = (char *)v88 + *(int *)(v2 + 48);
  *uint64_t v88 = 15110LL;
  *(void *)uint64_t v89 = "DM_KICKBOXING";
  *((void *)v89 + 1) = 13LL;
  v89[16] = 2;
  v11();
  uint64_t v90 = (void *)(v150 + v6 + 42 * v4);
  uint64_t v91 = (char *)v90 + *(int *)(v2 + 48);
  void *v90 = 15150LL;
  *(void *)uint64_t v91 = "DM_CRICKET";
  *((void *)v91 + 1) = 10LL;
  v91[16] = 2;
  v11();
  uint64_t v92 = (void *)(v150 + v6 + 43 * v4);
  uint64_t v93 = (char *)v92 + *(int *)(v2 + 48);
  *uint64_t v92 = 15230LL;
  *(void *)uint64_t v93 = "DM_AMERICAN_FOOTBALL";
  *((void *)v93 + 1) = 20LL;
  v93[16] = 2;
  v11();
  uint64_t v94 = (void *)(v150 + v6 + 44 * v4);
  uint64_t v95 = (char *)v94 + *(int *)(v2 + 48);
  void *v94 = 15240LL;
  *(void *)uint64_t v95 = "DM_DISC_SPORTS";
  *((void *)v95 + 1) = 14LL;
  v95[16] = 2;
  v11();
  uint64_t v96 = (void *)(v150 + v6 + 45 * v4);
  uint64_t v97 = (char *)v96 + *(int *)(v2 + 48);
  *uint64_t v96 = 15255LL;
  *(void *)uint64_t v97 = "DM_GOLFING";
  *((void *)v97 + 1) = 10LL;
  v97[16] = 2;
  v11();
  uint64_t v98 = (void *)(v150 + v6 + 46 * v4);
  int v99 = (char *)v98 + *(int *)(v2 + 48);
  void *v98 = 15330LL;
  *(void *)int v99 = "DM_HANDBALL";
  *((void *)v99 + 1) = 11LL;
  v99[16] = 2;
  v11();
  uint64_t v100 = (void *)(v150 + v6 + 47 * v4);
  uint64_t v101 = (char *)v100 + *(int *)(v2 + 48);
  *uint64_t v100 = 15350LL;
  *(void *)uint64_t v101 = "DM_OUTDOOR_HOCKEY";
  *((void *)v101 + 1) = 17LL;
  v101[16] = 2;
  v11();
  uint64_t v102 = (void *)(v150 + v6 + 48 * v4);
  uint64_t v103 = (char *)v102 + *(int *)(v2 + 48);
  *uint64_t v102 = 15360LL;
  *(void *)uint64_t v103 = "DM_INDOOR_HOCKEY";
  *((void *)v103 + 1) = 16LL;
  v103[16] = 2;
  v11();
  uint64_t v104 = (void *)(v150 + v6 + 49 * v4);
  uint64_t v105 = (char *)v104 + *(int *)(v2 + 48);
  *uint64_t v104 = 15460LL;
  *(void *)uint64_t v105 = "DM_LACROSSE";
  *((void *)v105 + 1) = 11LL;
  v105[16] = 2;
  v11();
  uint64_t v106 = (void *)(v150 + v6 + 50 * v4);
  int v107 = (char *)v106 + *(int *)(v2 + 48);
  *uint64_t v106 = 15562LL;
  *(void *)int v107 = "DM_RUGBY";
  *((void *)v107 + 1) = 8LL;
  v107[16] = 2;
  v11();
  uint64_t v108 = (void *)(v150 + v6 + 51 * v4);
  uint64_t v109 = (char *)v108 + *(int *)(v2 + 48);
  *uint64_t v108 = 15592LL;
  *(void *)uint64_t v109 = "DM_OUTDOOR_SKATING_SPORTS";
  *((void *)v109 + 1) = 25LL;
  v109[16] = 2;
  v11();
  int v110 = (void *)(v150 + v6 + 52 * v4);
  int v111 = (char *)v110 + *(int *)(v2 + 48);
  void *v110 = 15610LL;
  *(void *)int v111 = "DM_OUTDOOR_SOCCER";
  *((void *)v111 + 1) = 17LL;
  v111[16] = 2;
  v11();
  uint64_t v112 = (void *)(v150 + v6 + 53 * v4);
  v113 = (char *)v112 + *(int *)(v2 + 48);
  *uint64_t v112 = 15620LL;
  *(void *)v113 = "DM_SOFTBALL";
  *((void *)v113 + 1) = 11LL;
  v113[16] = 2;
  v11();
  uint64_t v114 = (void *)(v150 + v6 + 54 * v4);
  uint64_t v115 = (char *)v114 + *(int *)(v2 + 48);
  void *v114 = 15652LL;
  *(void *)uint64_t v115 = "DM_SQUASH";
  *((void *)v115 + 1) = 9LL;
  v115[16] = 2;
  v11();
  uint64_t v116 = (void *)(v150 + v6 + 55 * v4);
  v117 = (char *)v116 + *(int *)(v2 + 48);
  *uint64_t v116 = 15660LL;
  *(void *)v117 = "DM_TABLE_TENNIS";
  *((void *)v117 + 1) = 15LL;
  v117[16] = 2;
  v11();
  uint64_t v118 = (void *)(v150 + v6 + 56 * v4);
  char v119 = (char *)v118 + *(int *)(v2 + 48);
  void *v118 = 15670LL;
  *(void *)char v119 = "DM_TAI_CHI";
  *((void *)v119 + 1) = 10LL;
  v119[16] = 2;
  v11();
  uint64_t v120 = (void *)(v150 + v6 + 57 * v4);
  uint64_t v121 = (char *)v120 + *(int *)(v2 + 48);
  *uint64_t v120 = 15675LL;
  *(void *)uint64_t v121 = "DM_TENNIS";
  *((void *)v121 + 1) = 9LL;
  v121[16] = 2;
  v11();
  int v122 = (void *)(v150 + v6 + 58 * v4);
  uint64_t v123 = (char *)v122 + *(int *)(v2 + 48);
  void *v122 = 15710LL;
  *(void *)uint64_t v123 = "DM_VOLLEYBALL";
  *((void *)v123 + 1) = 13LL;
  v123[16] = 2;
  v11();
  uint64_t v124 = (void *)(v150 + v6 + 59 * v4);
  uint64_t v125 = (char *)v124 + *(int *)(v2 + 48);
  *uint64_t v124 = 15733LL;
  *(void *)uint64_t v125 = "DM_TRACK_AND_FIELD";
  *((void *)v125 + 1) = 18LL;
  v125[16] = 2;
  v11();
  uint64_t v126 = (void *)(v150 + v6 + 60 * v4);
  char v127 = (char *)v126 + *(int *)(v2 + 48);
  void *v126 = 17150LL;
  *(void *)char v127 = "DM_INDOOR_WALKING";
  *((void *)v127 + 1) = 17LL;
  v127[16] = 2;
  v11();
  uint64_t v128 = (void *)(v150 + v6 + 61 * v4);
  uint64_t v129 = (char *)v128 + *(int *)(v2 + 48);
  *uint64_t v128 = 18070LL;
  *(void *)uint64_t v129 = "DM_OUTDOOR_ROWING";
  *((void *)v129 + 1) = 17LL;
  v129[16] = 2;
  v11();
  v130 = (void *)(v150 + v6 + 62 * v4);
  char v131 = (char *)v130 + *(int *)(v2 + 48);
  void *v130 = 18200LL;
  *(void *)char v131 = "DM_SCUBA_DIVING";
  *((void *)v131 + 1) = 15LL;
  v131[16] = 2;
  v11();
  uint64_t v132 = (void *)(v150 + v6 + 63 * v4);
  uint64_t v133 = (char *)v132 + *(int *)(v2 + 48);
  *uint64_t v132 = 18225LL;
  *(void *)uint64_t v133 = "DM_PADDLE_SPORTS";
  *((void *)v133 + 1) = 16LL;
  v133[16] = 2;
  v11();
  uint64_t v134 = v150 + v6 + (v4 << 6) + *(int *)(v2 + 48);
  *(void *)(v7 + (v4 << 6)) = 18240LL;
  *(void *)uint64_t v134 = "DM_SWIMMING";
  *(void *)(v134 + 8) = 11LL;
  *(_BYTE *)(v134 + 16) = 2;
  v11();
  char v135 = (void *)(v150 + v6 + 65 * v4);
  uint64_t v136 = (char *)v135 + *(int *)(v2 + 48);
  *char v135 = 19030LL;
  *(void *)uint64_t v136 = "DM_INDOOR_SKATING_SPORTS";
  *((void *)v136 + 1) = 24LL;
  v136[16] = 2;
  v11();
  v137 = (void *)(v150 + v6 + 66 * v4);
  uint64_t v138 = (char *)v137 + *(int *)(v2 + 48);
  void *v137 = 19090LL;
  *(void *)uint64_t v138 = "DM_CROSS_COUNTRY_SKIING";
  *((void *)v138 + 1) = 23LL;
  v138[16] = 2;
  v11();
  uint64_t v139 = (void *)(v150 + v6 + 67 * v4);
  uint64_t v140 = (char *)v139 + *(int *)(v2 + 48);
  void *v139 = 19150LL;
  *(void *)uint64_t v140 = "DM_DOWNHILL_SKIING";
  *((void *)v140 + 1) = 18LL;
  v140[16] = 2;
  v11();
  uint64_t v141 = (void *)(v150 + v6 + 68 * v4);
  uint64_t v142 = (char *)v141 + *(int *)(v2 + 48);
  *uint64_t v141 = 19160LL;
  *(void *)uint64_t v142 = "DM_SNOWBOARDING";
  *((void *)v142 + 1) = 15LL;
  v142[16] = 2;
  v11();
  v143 = (void *)(v150 + v6 + 69 * v4);
  uint64_t v144 = (char *)v143 + *(int *)(v2 + 48);
  void *v143 = 90603LL;
  *(void *)uint64_t v144 = "DM_OUTDOOR_WHEELCHAIR";
  *((void *)v144 + 1) = 21LL;
  v144[16] = 2;
  v11();
  uint64_t v145 = (void *)(v150 + v6 + 70 * v4);
  uint64_t v146 = (char *)v145 + *(int *)(v2 + 48);
  *uint64_t v145 = 515621LL;
  *(void *)uint64_t v146 = "DM_BASEBALL";
  *((void *)v146 + 1) = 11LL;
  v146[16] = 2;
  v11();
  uint64_t v147 = (void *)(v150 + v6 + 71 * v4);
  uint64_t v148 = (char *)v147 + *(int *)(v2 + 48);
  void *v147 = 515652LL;
  *(void *)uint64_t v148 = "DM_RACQUETBALL";
  *((void *)v148 + 1) = 14LL;
  v148[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v150);
}

uint64_t sub_1000C3EE4()
{
  return sub_100008C30(&qword_10037A448, (uint64_t)qword_100369998, (uint64_t)sub_1000C2E90);
}

uint64_t sub_1000C3F00@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A448, (uint64_t)qword_100369998, (uint64_t)sub_1000C2E90, a1);
}

uint64_t sub_1000C3F1C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A448, (uint64_t)qword_100369998, (uint64_t)sub_1000C2E90, a1);
}

uint64_t sub_1000C3F38()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003699B0);
  sub_10000E704(v0, (uint64_t)qword_1003699B0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32F0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "RT_UNKNOWN";
  *(void *)(v9 + 8) = 10LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "RT_UNAVAILABLE";
  *(void *)(v13 + 8) = 14LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "RT_SMALL";
  *((void *)v15 + 1) = 8LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 3LL;
  *(void *)uint64_t v17 = "RT_LARGE";
  *((void *)v17 + 1) = 8LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 1001LL;
  *(void *)uint64_t v18 = "RT_UNACHIEVABLE";
  *(void *)(v18 + 8) = 15LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C413C()
{
  return sub_100008C30(&qword_10037A450, (uint64_t)qword_1003699B0, (uint64_t)sub_1000C3F38);
}

uint64_t sub_1000C4158@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A450, (uint64_t)qword_1003699B0, (uint64_t)sub_1000C3F38, a1);
}

uint64_t sub_1000C4174@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A450, (uint64_t)qword_1003699B0, (uint64_t)sub_1000C3F38, a1);
}

uint64_t sub_1000C4190()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003699C8);
  sub_10000E704(v0, (uint64_t)qword_1003699C8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32F0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "BC_UNKNOWN";
  *(void *)(v9 + 8) = 10LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "BC_NONE";
  *(void *)(v13 + 8) = 7LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "BC_USB";
  *((void *)v15 + 1) = 6LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 3LL;
  *(void *)uint64_t v17 = "BC_EXTERNAL";
  *((void *)v17 + 1) = 11LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 4LL;
  *(void *)uint64_t v18 = "BC_ARCAS";
  *(void *)(v18 + 8) = 8LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C4390()
{
  return sub_100008C30(&qword_10037A458, (uint64_t)qword_1003699C8, (uint64_t)sub_1000C4190);
}

uint64_t sub_1000C43AC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A458, (uint64_t)qword_1003699C8, (uint64_t)sub_1000C4190, a1);
}

uint64_t sub_1000C43C8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A458, (uint64_t)qword_1003699C8, (uint64_t)sub_1000C4190, a1);
}

uint64_t sub_1000C43E4()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003699E0);
  sub_10000E704(v0, (uint64_t)qword_1003699E0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "SE_FIDELITY_LEVEL_UNKNOWN";
  *(void *)(v9 + 8) = 25LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "SE_FIDELITY_LEVEL_UNAVAILABLE";
  *(void *)(v13 + 8) = 29LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "SE_FIDELITY_LEVEL_COARSE";
  *((void *)v15 + 1) = 24LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 3LL;
  *(void *)uint64_t v17 = "SE_FIDELITY_LEVEL_HIGH_RESOLUTION";
  *((void *)v17 + 1) = 33LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C45A0()
{
  return sub_100008C30(&qword_10037A460, (uint64_t)qword_1003699E0, (uint64_t)sub_1000C43E4);
}

uint64_t sub_1000C45BC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A460, (uint64_t)qword_1003699E0, (uint64_t)sub_1000C43E4, a1);
}

uint64_t sub_1000C45D8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A460, (uint64_t)qword_1003699E0, (uint64_t)sub_1000C43E4, a1);
}

uint64_t sub_1000C45F4()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_1003699F8);
  sub_10000E704(v0, (uint64_t)qword_1003699F8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42A0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = -1LL;
  *(void *)uint64_t v9 = "CC_UNKNOWN";
  *(void *)(v9 + 8) = 10LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 0LL;
  *(void *)uint64_t v13 = "CC_UNRELIABLE";
  *(void *)(v13 + 8) = 13LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 1LL;
  *(void *)uint64_t v15 = "CC_2DWEAK";
  *((void *)v15 + 1) = 9LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 2LL;
  *(void *)uint64_t v17 = "CC_2DSTRONG";
  *((void *)v17 + 1) = 11LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 3LL;
  *(void *)uint64_t v19 = "CC_3DWEAK";
  *((void *)v19 + 1) = 9LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  void *v20 = 4LL;
  *(void *)uint64_t v21 = "CC_3D";
  *((void *)v21 + 1) = 5LL;
  v21[16] = 2;
  v12();
  uint64_t v22 = (void *)(v8 + 6 * v4);
  uint64_t v23 = (char *)v22 + *(int *)(v2 + 48);
  *uint64_t v22 = 5LL;
  *(void *)uint64_t v23 = "CC_3DSTRONG";
  *((void *)v23 + 1) = 11LL;
  v23[16] = 2;
  v12();
  uint64_t v24 = (void *)(v8 + 7 * v4);
  uint64_t v25 = (char *)v24 + *(int *)(v2 + 48);
  void *v24 = 6LL;
  *(void *)uint64_t v25 = "CC_MAX";
  *((void *)v25 + 1) = 6LL;
  v25[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C4894()
{
  return sub_100008C30(&qword_10037A468, (uint64_t)qword_1003699F8, (uint64_t)sub_1000C45F4);
}

uint64_t sub_1000C48B0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A468, (uint64_t)qword_1003699F8, (uint64_t)sub_1000C45F4, a1);
}

uint64_t sub_1000C48CC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A468, (uint64_t)qword_1003699F8, (uint64_t)sub_1000C45F4, a1);
}

uint64_t sub_1000C48E8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369A10);
  sub_10000E704(v0, (uint64_t)qword_100369A10);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32F0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "FM_UNKNOWN";
  *(void *)(v9 + 8) = 10LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "FM_DEFAULT";
  *(void *)(v13 + 8) = 10LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "FM_NAVIGATION";
  *((void *)v15 + 1) = 13LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 3LL;
  *(void *)uint64_t v17 = "FM_SWIM";
  *((void *)v17 + 1) = 7LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 4LL;
  *(void *)uint64_t v18 = "FM_GAMING";
  *(void *)(v18 + 8) = 9LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C4AEC()
{
  return sub_100008C30(&qword_10037A470, (uint64_t)qword_100369A10, (uint64_t)sub_1000C48E8);
}

uint64_t sub_1000C4B08@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A470, (uint64_t)qword_100369A10, (uint64_t)sub_1000C48E8, a1);
}

uint64_t sub_1000C4B24@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A470, (uint64_t)qword_100369A10, (uint64_t)sub_1000C48E8, a1);
}

uint64_t sub_1000C4B40()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369A28);
  sub_10000E704(v0, (uint64_t)qword_100369A28);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "AP_MODE_UNKNOWN";
  *(void *)(v9 + 8) = 15LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "AP_MODE_IBSS";
  *(void *)(v13 + 8) = 12LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "AP_MODE_INFRA";
  *((void *)v15 + 1) = 13LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 3LL;
  *(void *)uint64_t v17 = "AP_MODE_ANY";
  *((void *)v17 + 1) = 11LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C4CFC()
{
  return sub_100008C30(&qword_10037A478, (uint64_t)qword_100369A28, (uint64_t)sub_1000C4B40);
}

uint64_t sub_1000C4D18@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A478, (uint64_t)qword_100369A28, (uint64_t)sub_1000C4B40, a1);
}

uint64_t sub_1000C4D34@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A478, (uint64_t)qword_100369A28, (uint64_t)sub_1000C4B40, a1);
}

uint64_t sub_1000C4D50()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369A40);
  sub_10000E704(v0, (uint64_t)qword_100369A40);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "PROTOBUF_DEFAULT";
  *(void *)(v9 + 8) = 16LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "BAND_2GHz";
  *(void *)(v13 + 8) = 9LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "BAND_5GHz";
  *((void *)v15 + 1) = 9LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 3LL;
  *(void *)uint64_t v17 = "BAND_6GHz";
  *((void *)v17 + 1) = 9LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C4F0C()
{
  return sub_100008C30(&qword_10037A480, (uint64_t)qword_100369A40, (uint64_t)sub_1000C4D50);
}

uint64_t sub_1000C4F28@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A480, (uint64_t)qword_100369A40, (uint64_t)sub_1000C4D50, a1);
}

uint64_t sub_1000C4F44@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A480, (uint64_t)qword_100369A40, (uint64_t)sub_1000C4D50, a1);
}

uint64_t sub_1000C4F60()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369A58);
  sub_10000E704(v0, (uint64_t)qword_100369A58);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v39 = swift_allocObject(v1, v6 - v4 + 16 * v4, v5 | 7);
  *(_OWORD *)(v39 + 16) = xmmword_1002BACF0;
  uint64_t v7 = v39 + v6;
  uint64_t v8 = v39 + v6 + *(int *)(v2 + 48);
  *(void *)(v39 + v6) = 0LL;
  *(void *)uint64_t v8 = "WS_UNKNOWN";
  *(void *)(v8 + 8) = 10LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v39 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 1LL;
  *(void *)uint64_t v12 = "WS_HARVEST_2_GHZ_SET1";
  *(void *)(v12 + 8) = 21LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v39 + v6 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 2LL;
  *(void *)uint64_t v14 = "WS_HARVEST_2_GHZ_SET2";
  *((void *)v14 + 1) = 21LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v39 + v6 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *uint64_t v15 = 3LL;
  *(void *)uint64_t v16 = "WS_HARVEST_5_GHZ_SET1";
  *((void *)v16 + 1) = 21LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v39 + v6 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 4LL;
  *(void *)uint64_t v18 = "WS_HARVEST_5_GHZ_SET2";
  *((void *)v18 + 1) = 21LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v39 + v6 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 5LL;
  *(void *)uint64_t v20 = "WS_HARVEST_5_GHZ_SET3";
  *((void *)v20 + 1) = 21LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v39 + v6 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 6LL;
  *(void *)uint64_t v22 = "WS_CACHED";
  *((void *)v22 + 1) = 9LL;
  _BYTE v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v39 + v6 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  void *v23 = 7LL;
  *(void *)uint64_t v24 = "WS_LOW_PRIORITY";
  *((void *)v24 + 1) = 15LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v39 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 8LL;
  *(void *)uint64_t v25 = "WS_CHANNEL";
  *(void *)(v25 + 8) = 10LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  uint64_t v26 = (void *)(v39 + v6 + 9 * v4);
  uint64_t v27 = (char *)v26 + *(int *)(v2 + 48);
  void *v26 = 9LL;
  *(void *)uint64_t v27 = "WS_FAST";
  *((void *)v27 + 1) = 7LL;
  v27[16] = 2;
  v11();
  uint64_t v28 = (void *)(v39 + v6 + 10 * v4);
  uint64_t v29 = (char *)v28 + *(int *)(v2 + 48);
  *uint64_t v28 = 10LL;
  *(void *)uint64_t v29 = "WS_STAGE1";
  *((void *)v29 + 1) = 9LL;
  v29[16] = 2;
  v11();
  uint64_t v30 = (void *)(v39 + v6 + 11 * v4);
  char v31 = (char *)v30 + *(int *)(v2 + 48);
  void *v30 = 11LL;
  *(void *)char v31 = "WS_STAGE2";
  *((void *)v31 + 1) = 9LL;
  v31[16] = 2;
  v11();
  uint64_t v32 = (void *)(v39 + v6 + 12 * v4);
  uint64_t v33 = (char *)v32 + *(int *)(v2 + 48);
  *uint64_t v32 = 12LL;
  *(void *)uint64_t v33 = "WS_NORMAL";
  *((void *)v33 + 1) = 9LL;
  v33[16] = 2;
  v11();
  uint64_t v34 = (void *)(v39 + v6 + 13 * v4);
  uint64_t v35 = (char *)v34 + *(int *)(v2 + 48);
  *uint64_t v34 = 13LL;
  *(void *)uint64_t v35 = "WS_CUSTOM_SCAN_PARAMETERS";
  *((void *)v35 + 1) = 25LL;
  v35[16] = 2;
  v11();
  uint64_t v36 = (void *)(v39 + v6 + 14 * v4);
  uint64_t v37 = (char *)v36 + *(int *)(v2 + 48);
  void *v36 = 14LL;
  *(void *)uint64_t v37 = "WS_5GHZ_STAGE1";
  *((void *)v37 + 1) = 14LL;
  v37[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v39);
}

uint64_t sub_1000C534C()
{
  return sub_100008C30(&qword_10037A488, (uint64_t)qword_100369A58, (uint64_t)sub_1000C4F60);
}

uint64_t sub_1000C5368@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A488, (uint64_t)qword_100369A58, (uint64_t)sub_1000C4F60, a1);
}

uint64_t sub_1000C5384@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A488, (uint64_t)qword_100369A58, (uint64_t)sub_1000C4F60, a1);
}

uint64_t sub_1000C53A0()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369A70);
  sub_10000E704(v0, (uint64_t)qword_100369A70);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v39 = swift_allocObject(v1, v6 - v4 + 16 * v4, v5 | 7);
  *(_OWORD *)(v39 + 16) = xmmword_1002BACF0;
  uint64_t v7 = v39 + v6;
  uint64_t v8 = v39 + v6 + *(int *)(v2 + 48);
  *(void *)(v39 + v6) = 0LL;
  *(void *)uint64_t v8 = "WN_UNKNOWN";
  *(void *)(v8 + 8) = 10LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v39 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 1LL;
  *(void *)uint64_t v12 = "WN_AVAILABLE";
  *(void *)(v12 + 8) = 12LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v39 + v6 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 2LL;
  *(void *)uint64_t v14 = "WN_POWER";
  *((void *)v14 + 1) = 8LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v39 + v6 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *uint64_t v15 = 3LL;
  *(void *)uint64_t v16 = "WN_SCAN_READY";
  *((void *)v16 + 1) = 13LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v39 + v6 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 4LL;
  *(void *)uint64_t v18 = "WN_SCAN";
  *((void *)v18 + 1) = 7LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v39 + v6 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 5LL;
  *(void *)uint64_t v20 = "WN_SCAN_ERROR";
  *((void *)v20 + 1) = 13LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v39 + v6 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 6LL;
  *(void *)uint64_t v22 = "WN_SCAN_ERROR_BUSY";
  *((void *)v22 + 1) = 18LL;
  _BYTE v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v39 + v6 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  void *v23 = 7LL;
  *(void *)uint64_t v24 = "WN_LINK_STATUS";
  *((void *)v24 + 1) = 14LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v39 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 8LL;
  *(void *)uint64_t v25 = "WN_ROAM";
  *(void *)(v25 + 8) = 7LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  uint64_t v26 = (void *)(v39 + v6 + 9 * v4);
  uint64_t v27 = (char *)v26 + *(int *)(v2 + 48);
  void *v26 = 9LL;
  *(void *)uint64_t v27 = "WN_BACKGROUND_ENTRY";
  *((void *)v27 + 1) = 19LL;
  v27[16] = 2;
  v11();
  uint64_t v28 = (void *)(v39 + v6 + 10 * v4);
  uint64_t v29 = (char *)v28 + *(int *)(v2 + 48);
  *uint64_t v28 = 10LL;
  *(void *)uint64_t v29 = "WN_BACKGROUND_EXIT";
  *((void *)v29 + 1) = 18LL;
  v29[16] = 2;
  v11();
  uint64_t v30 = (void *)(v39 + v6 + 11 * v4);
  char v31 = (char *)v30 + *(int *)(v2 + 48);
  void *v30 = 11LL;
  *(void *)char v31 = "WN_TRACKING_AVAILABLE";
  *((void *)v31 + 1) = 21LL;
  v31[16] = 2;
  v11();
  uint64_t v32 = (void *)(v39 + v6 + 12 * v4);
  uint64_t v33 = (char *)v32 + *(int *)(v2 + 48);
  *uint64_t v32 = 12LL;
  *(void *)uint64_t v33 = "WN_WOW";
  *((void *)v33 + 1) = 6LL;
  v33[16] = 2;
  v11();
  uint64_t v34 = (void *)(v39 + v6 + 13 * v4);
  uint64_t v35 = (char *)v34 + *(int *)(v2 + 48);
  *uint64_t v34 = 13LL;
  *(void *)uint64_t v35 = "WN_SCAN_CACHE";
  *((void *)v35 + 1) = 13LL;
  v35[16] = 2;
  v11();
  uint64_t v36 = (void *)(v39 + v6 + 14 * v4);
  uint64_t v37 = (char *)v36 + *(int *)(v2 + 48);
  void *v36 = 14LL;
  *(void *)uint64_t v37 = "WN_PEER_RANGING";
  *((void *)v37 + 1) = 15LL;
  v37[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v39);
}

uint64_t sub_1000C57A4()
{
  return sub_100008C30(&qword_10037A490, (uint64_t)qword_100369A70, (uint64_t)sub_1000C53A0);
}

uint64_t sub_1000C57C0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A490, (uint64_t)qword_100369A70, (uint64_t)sub_1000C53A0, a1);
}

uint64_t sub_1000C57DC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A490, (uint64_t)qword_100369A70, (uint64_t)sub_1000C53A0, a1);
}

uint64_t sub_1000C57F8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369A88);
  sub_10000E704(v0, (uint64_t)qword_100369A88);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "LOCATION_SERVICES_ENABLED_UNKNOWN";
  *(void *)(v9 + 8) = 33LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "LOCATION_SERVICES_ENABLED_NO";
  *(void *)(v13 + 8) = 28LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "LOCATION_SERVICES_ENABLED_YES";
  *((void *)v15 + 1) = 29LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 3LL;
  *(void *)uint64_t v17 = "LOCATION_SERVICES_ENABLED_UNAVAILABLE";
  *((void *)v17 + 1) = 37LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C59B4()
{
  return sub_100008C30(&qword_10037A498, (uint64_t)qword_100369A88, (uint64_t)sub_1000C57F8);
}

uint64_t sub_1000C59D0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A498, (uint64_t)qword_100369A88, (uint64_t)sub_1000C57F8, a1);
}

uint64_t sub_1000C59EC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A498, (uint64_t)qword_100369A88, (uint64_t)sub_1000C57F8, a1);
}

uint64_t sub_1000C5A08()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369AA0);
  sub_10000E704(v0, (uint64_t)qword_100369AA0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 0LL;
  *(void *)uint64_t v9 = "DATA_AVAILABILITY_UNKNOWN";
  *(void *)(v9 + 8) = 25LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "DATA_AVAILABILITY_UNAVAILABLE";
  *((void *)v13 + 1) = 29LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 2LL;
  *(void *)uint64_t v14 = "DATA_AVAILABILITY_AVAILABLE";
  *(void *)(v14 + 8) = 27LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C5B98()
{
  return sub_100008C30(&qword_10037A4A0, (uint64_t)qword_100369AA0, (uint64_t)sub_1000C5A08);
}

uint64_t sub_1000C5BB4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A4A0, (uint64_t)qword_100369AA0, (uint64_t)sub_1000C5A08, a1);
}

uint64_t sub_1000C5BD0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A4A0, (uint64_t)qword_100369AA0, (uint64_t)sub_1000C5A08, a1);
}

uint64_t sub_1000C5BEC()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369AB8);
  sub_10000E704(v0, (uint64_t)qword_100369AB8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 0LL;
  *(void *)uint64_t v9 = "INDOOR_OUTDOOR_TYPE_UNKNOWN";
  *(void *)(v9 + 8) = 27LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "INDOOR_OUTDOOR_TYPE_INDOOR";
  *((void *)v13 + 1) = 26LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 2LL;
  *(void *)uint64_t v14 = "INDOOR_OUTDOOR_TYPE_OUTDOOR";
  *(void *)(v14 + 8) = 27LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C5D7C()
{
  return sub_100008C30(&qword_10037A4A8, (uint64_t)qword_100369AB8, (uint64_t)sub_1000C5BEC);
}

uint64_t sub_1000C5D98@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A4A8, (uint64_t)qword_100369AB8, (uint64_t)sub_1000C5BEC, a1);
}

uint64_t sub_1000C5DB4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A4A8, (uint64_t)qword_100369AB8, (uint64_t)sub_1000C5BEC, a1);
}

uint64_t sub_1000C5DD0()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369AD0);
  sub_10000E704(v0, (uint64_t)qword_100369AD0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "INDOOR_OUTDOOR_CONFIDENCE_UNKNOWN";
  *(void *)(v9 + 8) = 33LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "INDOOR_OUTDOOR_CONFIDENCE_LOW";
  *(void *)(v13 + 8) = 29LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "INDOOR_OUTDOOR_CONFIDENCE_MEDIUM";
  *((void *)v15 + 1) = 32LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 3LL;
  *(void *)uint64_t v17 = "INDOOR_OUTDOOR_CONFIDENCE_HIGH";
  *((void *)v17 + 1) = 30LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C5F8C()
{
  return sub_100008C30(&qword_10037A4B0, (uint64_t)qword_100369AD0, (uint64_t)sub_1000C5DD0);
}

uint64_t sub_1000C5FA8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A4B0, (uint64_t)qword_100369AD0, (uint64_t)sub_1000C5DD0, a1);
}

uint64_t sub_1000C5FC4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A4B0, (uint64_t)qword_100369AD0, (uint64_t)sub_1000C5DD0, a1);
}

void *sub_1000C5FE0()
{
  return &unk_10033EDE8;
}

unint64_t sub_1000C5FEC()
{
  return 0xD000000000000022LL;
}

uint64_t sub_1000C6008()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369AE8);
  sub_10000E704(v0, (uint64_t)qword_100369AE8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "cf_absolute_time_s";
  *(void *)(v9 + 8) = 18LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "mach_absolute_time_s";
  *((void *)v13 + 1) = 20LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "mach_continuous_time_s";
  *(void *)(v14 + 8) = 22LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C619C()
{
  return sub_100008C30(&qword_10037A4B8, (uint64_t)qword_100369AE8, (uint64_t)sub_1000C6008);
}

uint64_t sub_1000C61B8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A4B8, (uint64_t)qword_100369AE8, (uint64_t)sub_1000C6008, a1);
}

uint64_t sub_1000C61D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D4398(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000C61F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005A800(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000C620C(uint64_t a1, uint64_t a2)
{
  return sub_100065750(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp) & 1;
}

Swift::Int sub_1000C622C()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  &qword_100355678,  (uint64_t)&unk_1002BF898);
}

uint64_t sub_1000C6248(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C230,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF810);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000C6298@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A4B8, (uint64_t)qword_100369AE8, (uint64_t)sub_1000C6008, a1);
}

uint64_t sub_1000C62B4(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C62F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000C6348()
{
  return &unk_10033EDF8;
}

unint64_t sub_1000C6354()
{
  return 0xD000000000000024LL;
}

uint64_t sub_1000C6370()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369B00);
  sub_10000E704(v0, (uint64_t)qword_100369B00);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "applicable_time";
  *(void *)(v9 + 8) = 15LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "x_mps2";
  *(void *)(v13 + 8) = 6LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "y_mps2";
  *((void *)v15 + 1) = 6LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "z_mps2";
  *((void *)v17 + 1) = 6LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C6530()
{
  return sub_100008C30(&qword_10037A4C0, (uint64_t)qword_100369B00, (uint64_t)sub_1000C6370);
}

uint64_t sub_1000C654C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A4C0, (uint64_t)qword_100369B00, (uint64_t)sub_1000C6370, a1);
}

uint64_t sub_1000C6568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EDB50(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t sub_1000C6584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C6ED8(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t sub_1000C65A0(uint64_t a1, uint64_t (*a2)(void))
{
  return sub_10011CA2C(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample) & 1;
}

Swift::Int sub_1000C65C0()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_AccelSample,  &qword_100355680,  (uint64_t)&unk_1002BFA00);
}

uint64_t sub_1000C65E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C228,  type metadata accessor for CLP_LogEntry_PrivateData_AccelSample,  (uint64_t)&unk_1002BF978);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000C6630@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A4C0, (uint64_t)qword_100369B00, (uint64_t)sub_1000C6370, a1);
}

uint64_t sub_1000C664C(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100355688,  type metadata accessor for CLP_LogEntry_PrivateData_AccelSample,  (uint64_t)&unk_1002BF900);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C668C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100355688,  type metadata accessor for CLP_LogEntry_PrivateData_AccelSample,  (uint64_t)&unk_1002BF900);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000C66E0()
{
  return &unk_10033EE08;
}

unint64_t sub_1000C66EC()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_1000C6708()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369B18);
  sub_10000E704(v0, (uint64_t)qword_100369B18);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3340;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "event_receipt_time";
  *(void *)(v9 + 8) = 18LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "sample";
  *((void *)v13 + 1) = 6LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C6860()
{
  return sub_100008C30(&qword_10037A4C8, (uint64_t)qword_100369B18, (uint64_t)sub_1000C6708);
}

uint64_t sub_1000C687C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A4C8, (uint64_t)qword_100369B18, (uint64_t)sub_1000C6708, a1);
}

uint64_t sub_1000C6898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FCCA0( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_Accel,  type metadata accessor for CLP_LogEntry_PrivateData_AccelSample,  &qword_100355688,  (uint64_t)&unk_1002BF900);
}

uint64_t sub_1000C68CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1000C69B4(v3, a1, a2, a3);
  if (!v4)
  {
    uint64_t v9 = *(void *)v3;
    if (*(void *)(*(void *)v3 + 16LL))
    {
      uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_AccelSample(0LL);
      uint64_t v11 = sub_10000FD98( &qword_100355688,  type metadata accessor for CLP_LogEntry_PrivateData_AccelSample,  (uint64_t)&unk_1002BF900);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v9, 2LL, v10, v11, a2, a3);
    }

    type metadata accessor for CLP_LogEntry_PrivateData_Accel(0LL);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_1000C69B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_Accel(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_100355538);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v15 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000C6B28(uint64_t *a1, uint64_t *a2)
{
  return sub_100117798( a1,  a2,  (uint64_t *)type metadata accessor for CLP_LogEntry_PrivateData_Accel,  type metadata accessor for CLP_LogEntry_PrivateData_AccelSample) & 1;
}

Swift::Int sub_1000C6B50()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_Accel,  &qword_100355690,  (uint64_t)&unk_1002BFB68);
}

uint64_t sub_1000C6B70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C68CC(a1, a2, a3);
}

uint64_t sub_1000C6B84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C220,  type metadata accessor for CLP_LogEntry_PrivateData_Accel,  (uint64_t)&unk_1002BFAE0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000C6BD4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A4C8, (uint64_t)qword_100369B18, (uint64_t)sub_1000C6708, a1);
}

uint64_t sub_1000C6BF0(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003562F8,  type metadata accessor for CLP_LogEntry_PrivateData_Accel,  (uint64_t)&unk_1002BFA68);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C6C30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003562F8,  type metadata accessor for CLP_LogEntry_PrivateData_Accel,  (uint64_t)&unk_1002BFA68);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000C6C80()
{
  return &unk_10033EE18;
}

unint64_t sub_1000C6C8C()
{
  return 0xD000000000000023LL;
}

uint64_t sub_1000C6CA8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369B30);
  sub_10000E704(v0, (uint64_t)qword_100369B30);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "applicable_time";
  *(void *)(v9 + 8) = 15LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "x_radps";
  *(void *)(v13 + 8) = 7LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "y_radps";
  *((void *)v15 + 1) = 7LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "z_radps";
  *((void *)v17 + 1) = 7LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C6E68()
{
  return sub_100008C30(&qword_10037A4D0, (uint64_t)qword_100369B30, (uint64_t)sub_1000C6CA8);
}

uint64_t sub_1000C6E84@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A4D0, (uint64_t)qword_100369B30, (uint64_t)sub_1000C6CA8, a1);
}

uint64_t sub_1000C6EA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EDB50(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t sub_1000C6EBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C6ED8(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t sub_1000C6ED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7 = v4;
  uint64_t result = sub_100105BC8(v7, a1, a2, a3, a4);
  if (!v5)
  {
    uint64_t v12 = (int *)a4(0LL);
    uint64_t v13 = v7 + v12[6];
    if ((*(_BYTE *)(v13 + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(2LL, a2, a3, *(float *)v13);
    }
    uint64_t v14 = v7 + v12[7];
    if ((*(_BYTE *)(v14 + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(3LL, a2, a3, *(float *)v14);
    }
    uint64_t v15 = v7 + v12[8];
    if ((*(_BYTE *)(v15 + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(4LL, a2, a3, *(float *)v15);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_1000C6FF4(uint64_t a1, uint64_t (*a2)(void))
{
  return sub_10011CA2C(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample) & 1;
}

Swift::Int sub_1000C7014()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_GyroSample,  &qword_100355698,  (uint64_t)&unk_1002BFCD0);
}

uint64_t sub_1000C7030@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))( v4,  1LL,  1LL,  v5);
  uint64_t v7 = a1[7];
  uint64_t v8 = a2 + a1[6];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a2 + a1[8];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return result;
}

uint64_t sub_1000C70B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C218,  type metadata accessor for CLP_LogEntry_PrivateData_GyroSample,  (uint64_t)&unk_1002BFC48);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000C7108@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A4D0, (uint64_t)qword_100369B30, (uint64_t)sub_1000C6CA8, a1);
}

uint64_t sub_1000C7124(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003556A0,  type metadata accessor for CLP_LogEntry_PrivateData_GyroSample,  (uint64_t)&unk_1002BFBD0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C7164(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003556A0,  type metadata accessor for CLP_LogEntry_PrivateData_GyroSample,  (uint64_t)&unk_1002BFBD0);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000C71B8()
{
  return &unk_10033EE28;
}

unint64_t sub_1000C71C4()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_1000C71E0()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369B48);
  sub_10000E704(v0, (uint64_t)qword_100369B48);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3340;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "event_receipt_time";
  *(void *)(v9 + 8) = 18LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "sample";
  *((void *)v13 + 1) = 6LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C7338()
{
  return sub_100008C30(&qword_10037A4D8, (uint64_t)qword_100369B48, (uint64_t)sub_1000C71E0);
}

uint64_t sub_1000C7354@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A4D8, (uint64_t)qword_100369B48, (uint64_t)sub_1000C71E0, a1);
}

uint64_t sub_1000C7370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FCCA0( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_Gyro,  type metadata accessor for CLP_LogEntry_PrivateData_GyroSample,  &qword_1003556A0,  (uint64_t)&unk_1002BFBD0);
}

uint64_t sub_1000C73A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1000C748C(v3, a1, a2, a3);
  if (!v4)
  {
    uint64_t v9 = *(void *)v3;
    if (*(void *)(*(void *)v3 + 16LL))
    {
      uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_GyroSample(0LL);
      uint64_t v11 = sub_10000FD98( &qword_1003556A0,  type metadata accessor for CLP_LogEntry_PrivateData_GyroSample,  (uint64_t)&unk_1002BFBD0);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v9, 2LL, v10, v11, a2, a3);
    }

    type metadata accessor for CLP_LogEntry_PrivateData_Gyro(0LL);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_1000C748C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_Gyro(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_100355538);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v15 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000C7600(uint64_t *a1, uint64_t *a2)
{
  return sub_100117798( a1,  a2,  (uint64_t *)type metadata accessor for CLP_LogEntry_PrivateData_Gyro,  type metadata accessor for CLP_LogEntry_PrivateData_GyroSample) & 1;
}

Swift::Int sub_1000C7628()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_Gyro,  &qword_1003556A8,  (uint64_t)&unk_1002BFE38);
}

uint64_t sub_1000C7644@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
}

uint64_t sub_1000C76A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C73A4(a1, a2, a3);
}

uint64_t sub_1000C76B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C210,  type metadata accessor for CLP_LogEntry_PrivateData_Gyro,  (uint64_t)&unk_1002BFDB0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000C7708@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A4D8, (uint64_t)qword_100369B48, (uint64_t)sub_1000C71E0, a1);
}

uint64_t sub_1000C7724(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356320,  type metadata accessor for CLP_LogEntry_PrivateData_Gyro,  (uint64_t)&unk_1002BFD38);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C7764(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356320,  type metadata accessor for CLP_LogEntry_PrivateData_Gyro,  (uint64_t)&unk_1002BFD38);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000C77B4()
{
  return &unk_10033EE38;
}

unint64_t sub_1000C77C0()
{
  return 0xD000000000000023LL;
}

uint64_t sub_1000C77DC()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369B60);
  sub_10000E704(v0, (uint64_t)qword_100369B60);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "applicable_time";
  *(void *)(v9 + 8) = 15LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "pressure";
  *((void *)v13 + 1) = 8LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "temperature";
  *(void *)(v14 + 8) = 11LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C797C()
{
  return sub_100008C30(&qword_10037A4E0, (uint64_t)qword_100369B60, (uint64_t)sub_1000C77DC);
}

uint64_t sub_1000C7998@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A4E0, (uint64_t)qword_100369B60, (uint64_t)sub_1000C77DC, a1);
}

uint64_t sub_1000C79B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0LL) + 24);
        goto LABEL_5;
      }

      if (result == 1)
      {
        uint64_t v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0LL) + 20);
        uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
        uint64_t v12 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v10, v11, v12, a2, a3);
      }

uint64_t sub_1000C7AF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = sub_100105BC8(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
  if (!v4)
  {
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0LL);
    uint64_t v11 = v5 + *(int *)(v10 + 24);
    if ((*(_BYTE *)(v11 + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(2LL, a2, a3, *(float *)v11);
    }
    uint64_t v12 = v5 + *(int *)(v10 + 28);
    if ((*(_BYTE *)(v12 + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(3LL, a2, a3, *(float *)v12);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_1000C7BDC()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_BaroSample,  &qword_1003556B0,  (uint64_t)&unk_1002BFFA0);
}

uint64_t sub_1000C7BF8@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))( v4,  1LL,  1LL,  v5);
  uint64_t v7 = a1[7];
  uint64_t v8 = a2 + a1[6];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  return result;
}

uint64_t sub_1000C7C70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C79B4(a1, a2, a3);
}

uint64_t sub_1000C7C84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C7AF0(a1, a2, a3);
}

uint64_t sub_1000C7C98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C208,  type metadata accessor for CLP_LogEntry_PrivateData_BaroSample,  (uint64_t)&unk_1002BFF18);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000C7CE8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A4E0, (uint64_t)qword_100369B60, (uint64_t)sub_1000C77DC, a1);
}

uint64_t sub_1000C7D04(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003556B8,  type metadata accessor for CLP_LogEntry_PrivateData_BaroSample,  (uint64_t)&unk_1002BFEA0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C7D44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003556B8,  type metadata accessor for CLP_LogEntry_PrivateData_BaroSample,  (uint64_t)&unk_1002BFEA0);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000C7D98()
{
  return &unk_10033EE48;
}

unint64_t sub_1000C7DA4()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_1000C7DC0()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369B78);
  sub_10000E704(v0, (uint64_t)qword_100369B78);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3340;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "event_receipt_time";
  *(void *)(v9 + 8) = 18LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "sample";
  *((void *)v13 + 1) = 6LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C7F18()
{
  return sub_100008C30(&qword_10037A4E8, (uint64_t)qword_100369B78, (uint64_t)sub_1000C7DC0);
}

uint64_t sub_1000C7F34@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A4E8, (uint64_t)qword_100369B78, (uint64_t)sub_1000C7DC0, a1);
}

uint64_t sub_1000C7F50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FCCA0( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_Baro,  type metadata accessor for CLP_LogEntry_PrivateData_BaroSample,  &qword_1003556B8,  (uint64_t)&unk_1002BFEA0);
}

uint64_t sub_1000C7F84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1000C806C(v3, a1, a2, a3);
  if (!v4)
  {
    uint64_t v9 = *(void *)v3;
    if (*(void *)(*(void *)v3 + 16LL))
    {
      uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0LL);
      uint64_t v11 = sub_10000FD98( &qword_1003556B8,  type metadata accessor for CLP_LogEntry_PrivateData_BaroSample,  (uint64_t)&unk_1002BFEA0);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v9, 2LL, v10, v11, a2, a3);
    }

    type metadata accessor for CLP_LogEntry_PrivateData_Baro(0LL);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_1000C806C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_Baro(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_100355538);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v15 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000C81E0(uint64_t *a1, uint64_t *a2)
{
  return sub_10011893C( a1,  a2,  (uint64_t *)type metadata accessor for CLP_LogEntry_PrivateData_Baro,  type metadata accessor for CLP_LogEntry_PrivateData_BaroSample,  (uint64_t (*)(char *, char *))sub_10011CEA4) & 1;
}

Swift::Int sub_1000C8210()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_Baro,  &qword_1003556C0,  (uint64_t)&unk_1002C0108);
}

uint64_t sub_1000C822C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C7F84(a1, a2, a3);
}

uint64_t sub_1000C8240(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C200,  type metadata accessor for CLP_LogEntry_PrivateData_Baro,  (uint64_t)&unk_1002C0080);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000C8290@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A4E8, (uint64_t)qword_100369B78, (uint64_t)sub_1000C7DC0, a1);
}

uint64_t sub_1000C82AC(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356348,  type metadata accessor for CLP_LogEntry_PrivateData_Baro,  (uint64_t)&unk_1002C0008);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C82EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356348,  type metadata accessor for CLP_LogEntry_PrivateData_Baro,  (uint64_t)&unk_1002C0008);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000C833C()
{
  return &unk_10033EE58;
}

unint64_t sub_1000C8348()
{
  return 0xD000000000000031LL;
}

uint64_t sub_1000C8364()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369B90);
  sub_10000E704(v0, (uint64_t)qword_100369B90);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3340;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "latitude";
  *(void *)(v9 + 8) = 8LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "longitude";
  *((void *)v13 + 1) = 9LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C84B4()
{
  return sub_100008C30(&qword_10037A4F0, (uint64_t)qword_100369B90, (uint64_t)sub_1000C8364);
}

uint64_t sub_1000C84D0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A4F0, (uint64_t)qword_100369B90, (uint64_t)sub_1000C8364, a1);
}

uint64_t sub_1000C84EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CB7D4(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_1000C8508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CB8A0(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_1000C8524(uint64_t a1, uint64_t a2)
{
  return sub_10011F4C0(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate) & 1;
}

Swift::Int sub_1000C8544()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate,  &qword_1003556C8,  (uint64_t)&unk_1002C0270);
}

uint64_t sub_1000C8564(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C1F8,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate,  (uint64_t)&unk_1002C01E8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000C85B4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A4F0, (uint64_t)qword_100369B90, (uint64_t)sub_1000C8364, a1);
}

uint64_t sub_1000C85D0(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356360,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate,  (uint64_t)&unk_1002C0170);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C8610(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356360,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate,  (uint64_t)&unk_1002C0170);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000C8664()
{
  return &unk_10033EE68;
}

unint64_t sub_1000C8670()
{
  return 0xD000000000000027LL;
}

uint64_t sub_1000C868C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369BA8);
  sub_10000E704(v0, (uint64_t)qword_100369BA8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v52 = swift_allocObject(v1, v6 + 22 * v4, v5 | 7);
  *(_OWORD *)(v52 + 16) = xmmword_1002BAD00;
  uint64_t v7 = v52 + v6;
  uint64_t v8 = v52 + v6 + *(int *)(v2 + 48);
  *(void *)(v52 + v6) = 1LL;
  *(void *)uint64_t v8 = "suitability";
  *(void *)(v8 + 8) = 11LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v52 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "coordinate";
  *(void *)(v12 + 8) = 10LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v52 + v6 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 3LL;
  *(void *)uint64_t v14 = "horizontal_accuracy";
  *((void *)v14 + 1) = 19LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v52 + v6 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *uint64_t v15 = 4LL;
  *(void *)uint64_t v16 = "altitude";
  *((void *)v16 + 1) = 8LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v52 + v6 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "vertical_accuracy";
  *((void *)v18 + 1) = 17LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v52 + v6 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 6LL;
  *(void *)uint64_t v20 = "speed";
  *((void *)v20 + 1) = 5LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v52 + v6 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 7LL;
  *(void *)uint64_t v22 = "speed_accuracy";
  *((void *)v22 + 1) = 14LL;
  _BYTE v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v52 + v6 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  void *v23 = 8LL;
  *(void *)uint64_t v24 = "course";
  *((void *)v24 + 1) = 6LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v52 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 9LL;
  *(void *)uint64_t v25 = "course_accuracy";
  *(void *)(v25 + 8) = 15LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  uint64_t v26 = (void *)(v52 + v6 + 9 * v4);
  uint64_t v27 = (char *)v26 + *(int *)(v2 + 48);
  void *v26 = 10LL;
  *(void *)uint64_t v27 = "timestamp";
  *((void *)v27 + 1) = 9LL;
  v27[16] = 2;
  v11();
  uint64_t v28 = (void *)(v52 + v6 + 10 * v4);
  uint64_t v29 = (char *)v28 + *(int *)(v2 + 48);
  *uint64_t v28 = 11LL;
  *(void *)uint64_t v29 = "confidence";
  *((void *)v29 + 1) = 10LL;
  v29[16] = 2;
  v11();
  uint64_t v30 = (void *)(v52 + v6 + 11 * v4);
  char v31 = (char *)v30 + *(int *)(v2 + 48);
  void *v30 = 12LL;
  *(void *)char v31 = "lifespan";
  *((void *)v31 + 1) = 8LL;
  v31[16] = 2;
  v11();
  uint64_t v32 = (void *)(v52 + v6 + 12 * v4);
  uint64_t v33 = (char *)v32 + *(int *)(v2 + 48);
  *uint64_t v32 = 13LL;
  *(void *)uint64_t v33 = "type";
  *((void *)v33 + 1) = 4LL;
  v33[16] = 2;
  v11();
  uint64_t v34 = (void *)(v52 + v6 + 13 * v4);
  uint64_t v35 = (char *)v34 + *(int *)(v2 + 48);
  *uint64_t v34 = 14LL;
  *(void *)uint64_t v35 = "raw_coordinate";
  *((void *)v35 + 1) = 14LL;
  v35[16] = 2;
  v11();
  uint64_t v36 = (void *)(v52 + v6 + 14 * v4);
  uint64_t v37 = (char *)v36 + *(int *)(v2 + 48);
  void *v36 = 15LL;
  *(void *)uint64_t v37 = "raw_course";
  *((void *)v37 + 1) = 10LL;
  v37[16] = 2;
  v11();
  uint64_t v38 = (void *)(v52 + v6 + 15 * v4);
  uint64_t v39 = (char *)v38 + *(int *)(v2 + 48);
  *uint64_t v38 = 16LL;
  *(void *)uint64_t v39 = "floor";
  *((void *)v39 + 1) = 5LL;
  v39[16] = 2;
  v11();
  uint64_t v40 = v52 + v6 + 16 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 16 * v4) = 17LL;
  *(void *)uint64_t v40 = "integrity";
  *(void *)(v40 + 8) = 9LL;
  *(_BYTE *)(v40 + 16) = 2;
  v11();
  uint64_t v41 = (void *)(v52 + v6 + 17 * v4);
  uint64_t v42 = (char *)v41 + *(int *)(v2 + 48);
  void *v41 = 18LL;
  *(void *)uint64_t v42 = "reference_frame";
  *((void *)v42 + 1) = 15LL;
  v42[16] = 2;
  v11();
  char v43 = (void *)(v52 + v6 + 18 * v4);
  uint64_t v44 = (char *)v43 + *(int *)(v2 + 48);
  *char v43 = 19LL;
  *(void *)uint64_t v44 = "raw_reference_frame";
  *((void *)v44 + 1) = 19LL;
  v44[16] = 2;
  v11();
  uint64_t v45 = (void *)(v52 + v6 + 19 * v4);
  uint64_t v46 = (char *)v45 + *(int *)(v2 + 48);
  void *v45 = 20LL;
  *(void *)uint64_t v46 = "signal_environment_type";
  *((void *)v46 + 1) = 23LL;
  v46[16] = 2;
  v11();
  uint64_t v47 = (void *)(v52 + v6 + 20 * v4);
  uint64_t v48 = (char *)v47 + *(int *)(v2 + 48);
  *uint64_t v47 = 21LL;
  *(void *)uint64_t v48 = "ellipsoidal_altitude";
  *((void *)v48 + 1) = 20LL;
  v48[16] = 2;
  v11();
  uint64_t v49 = (void *)(v52 + v6 + 21 * v4);
  uint64_t v50 = (char *)v49 + *(int *)(v2 + 48);
  void *v49 = 22LL;
  *(void *)uint64_t v50 = "from_simulation_controller";
  *((void *)v50 + 1) = 26LL;
  v50[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v52);
}

uint64_t sub_1000C8C18()
{
  return sub_100008C30(&qword_10037A4F8, (uint64_t)qword_100369BA8, (uint64_t)sub_1000C868C);
}

uint64_t sub_1000C8C34@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A4F8, (uint64_t)qword_100369BA8, (uint64_t)sub_1000C868C, a1);
}

uint64_t sub_1000C8C50()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0LL);
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  *(_BYTE *)(v1 + 16) = 4;
  uint64_t v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL);
  v4(v2, 1LL, 1LL, v3);
  uint64_t v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy;
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + 8) = 1;
  uint64_t v6 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude;
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  uint64_t v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy;
  *(void *)uint64_t v7 = 0LL;
  *(_BYTE *)(v7 + 8) = 1;
  uint64_t v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  *(void *)uint64_t v11 = 0LL;
  *(_BYTE *)(v11 + 8) = 1;
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  *(void *)uint64_t v12 = 0LL;
  *(_BYTE *)(v12 + 8) = 1;
  uint64_t v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  *(_DWORD *)uint64_t v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  uint64_t v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  *(void *)uint64_t v14 = 0LL;
  *(_BYTE *)(v14 + 8) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type) = 14;
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v4)( v1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate,  1LL,  1LL,  v3);
  uint64_t v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  *(void *)uint64_t v16 = 0LL;
  *(_BYTE *)(v16 + 8) = 1;
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  *(_DWORD *)uint64_t v17 = 0;
  *(_BYTE *)(v17 + 4) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity) = 5;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame) = 3;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame) = 3;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType) = 8;
  uint64_t v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude;
  *(void *)uint64_t v18 = 0LL;
  *(_BYTE *)(v18 + 8) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController) = 2;
  qword_10037A508 = v1;
  return result;
}

uint64_t sub_1000C8E54()
{
  return sub_1000DA088( &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate,  &qword_100355540,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate,  &qword_100355540);
}

uint64_t sub_1000C8E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v9)) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v3 + v9);
    uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0LL);
    uint64_t v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v13 = swift_retain(v10);
    sub_10010C294(v13);
    swift_release(v10);
    uint64_t v14 = *(void *)(v6 + v9);
    *(void *)(v6 + v9) = v12;
    swift_release(v14);
  }

  uint64_t v15 = *(void *)(v6 + v9);
  swift_retain(v15);
  uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    uint64_t v43 = v15 + 16;
    uint64_t v19 = &type metadata for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType;
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1LL:
          uint64_t v20 = v43;
          swift_beginAccess(v43, v42, 33LL, 0LL);
          unint64_t v21 = sub_10014A488();
          uint64_t v22 = v20;
          uint64_t v23 = &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType;
          goto LABEL_30;
        case 2LL:
          uint64_t v24 = v15
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate,  v42,  33LL,  0LL);
          uint64_t v25 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
          uint64_t v26 = sub_10000FD98( &qword_100356360,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate,  (uint64_t)&unk_1002C0170);
          uint64_t v27 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v24, v25, v26, a2, a3);
          goto LABEL_33;
        case 3LL:
          uint64_t v28 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy;
          goto LABEL_32;
        case 4LL:
          uint64_t v28 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude;
          goto LABEL_32;
        case 5LL:
          uint64_t v28 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy;
          goto LABEL_32;
        case 6LL:
          uint64_t v28 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
          goto LABEL_32;
        case 7LL:
          uint64_t v28 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
          goto LABEL_32;
        case 8LL:
          uint64_t v28 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
          goto LABEL_32;
        case 9LL:
          uint64_t v28 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
          goto LABEL_32;
        case 10LL:
          uint64_t v28 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
          goto LABEL_32;
        case 11LL:
          uint64_t v29 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
          goto LABEL_24;
        case 12LL:
          uint64_t v28 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
          goto LABEL_32;
        case 13LL:
          uint64_t v30 = v15
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type,  v42,  33LL,  0LL);
          unint64_t v21 = sub_10014AA1C();
          uint64_t v22 = v30;
          uint64_t v23 = &type metadata for CLP_LogEntry_PrivateData_LocationType;
          goto LABEL_30;
        case 14LL:
          char v31 = v19;
          uint64_t v32 = v15
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate,  v42,  33LL,  0LL);
          uint64_t v33 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
          uint64_t v34 = sub_10000FD98( &qword_100356360,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate,  (uint64_t)&unk_1002C0170);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v32, v33, v34, a2, a3);
          swift_endAccess(v42);
          uint64_t v19 = v31;
          break;
        case 15LL:
          uint64_t v28 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
          goto LABEL_32;
        case 16LL:
          uint64_t v29 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
LABEL_24:
          uint64_t v35 = v15 + v29;
          swift_beginAccess(v15 + v29, v42, 33LL, 0LL);
          uint64_t v27 = v5;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v35, a2, a3);
          goto LABEL_33;
        case 17LL:
          uint64_t v36 = v15
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity,  v42,  33LL,  0LL);
          unint64_t v21 = sub_10014A444();
          uint64_t v22 = v36;
          uint64_t v23 = &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType;
          goto LABEL_30;
        case 18LL:
          uint64_t v37 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame;
          goto LABEL_28;
        case 19LL:
          uint64_t v37 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame;
LABEL_28:
          uint64_t v38 = v15 + v37;
          swift_beginAccess(v15 + v37, v42, 33LL, 0LL);
          unint64_t v21 = sub_10014AA60();
          uint64_t v22 = v38;
          uint64_t v23 = v19;
          goto LABEL_30;
        case 20LL:
          uint64_t v39 = v15
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType,  v42,  33LL,  0LL);
          unint64_t v21 = sub_100149E28();
          uint64_t v22 = v39;
          uint64_t v23 = &type metadata for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType;
LABEL_30:
          uint64_t v27 = v5;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v22, v23, v21, a2, a3);
          goto LABEL_33;
        case 21LL:
          uint64_t v28 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude;
LABEL_32:
          uint64_t v40 = v15 + v28;
          swift_beginAccess(v15 + v28, v42, 33LL, 0LL);
          uint64_t v27 = v5;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v40, a2, a3);
          goto LABEL_33;
        case 22LL:
          uint64_t v41 = v15
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController,  v42,  33LL,  0LL);
          uint64_t v27 = v5;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v41, a2, a3);
LABEL_33:
          uint64_t v5 = v27;
          swift_endAccess(v42);
          break;
        default:
          break;
      }

      uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return swift_release(v15);
}

uint64_t sub_1000C9308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL) + 20));
  swift_retain(v9);
  swift_beginAccess(v9 + 16, &v37, 0LL, 0LL);
  if (*(_BYTE *)(v9 + 16) != 4)
  {
    v56[0] = *(_BYTE *)(v9 + 16);
    unint64_t v10 = sub_10014A488();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v56,  1LL,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType,  v10,  a2,  a3);
  }

  if (v4) {
    return swift_release(v9);
  }
  sub_1000C9A08(v9, a1, a2, a3);
  uint64_t v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy,  v38,  0LL,  0LL);
  if ((*(_BYTE *)(v12 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3LL, a2, a3, *(double *)v12);
  }
  uint64_t v13 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude,  v39,  0LL,  0LL);
  if ((*(_BYTE *)(v13 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(4LL, a2, a3, *(double *)v13);
  }
  uint64_t v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy,  v56,  0LL,  0LL);
  if ((*(_BYTE *)(v14 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(5LL, a2, a3, *(double *)v14);
  }
  uint64_t v15 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed,  v55,  0LL,  0LL);
  if ((*(_BYTE *)(v15 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(6LL, a2, a3, *(double *)v15);
  }
  uint64_t v16 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy,  v54,  0LL,  0LL);
  if ((*(_BYTE *)(v16 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(7LL, a2, a3, *(double *)v16);
  }
  uint64_t v17 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course,  v53,  0LL,  0LL);
  if ((*(_BYTE *)(v17 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(8LL, a2, a3, *(double *)v17);
  }
  uint64_t v18 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy,  v52,  0LL,  0LL);
  if ((*(_BYTE *)(v18 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(9LL, a2, a3, *(double *)v18);
  }
  uint64_t v19 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp,  v51,  0LL,  0LL);
  if ((*(_BYTE *)(v19 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(10LL, a2, a3, *(double *)v19);
  }
  uint64_t v20 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence,  v50,  0LL,  0LL);
  if ((v20[1] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v20, 11LL, a2, a3);
  }
  uint64_t v21 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan,  v49,  0LL,  0LL);
  if ((*(_BYTE *)(v21 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(12LL, a2, a3, *(double *)v21);
  }
  uint64_t v22 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type,  v48,  0LL,  0LL);
  if (*v22 != 14)
  {
    v47[0] = *v22;
    unint64_t v23 = sub_10014AA1C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v47,  13LL,  &type metadata for CLP_LogEntry_PrivateData_LocationType,  v23,  a2,  a3);
  }

  sub_1000C9B94(v9, a1, a2, a3);
  uint64_t v24 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse,  v47,  0LL,  0LL);
  if ((*(_BYTE *)(v24 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(15LL, a2, a3, *(double *)v24);
  }
  uint64_t v25 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor,  v46,  0LL,  0LL);
  if ((v25[1] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v25, 16LL, a2, a3);
  }
  uint64_t v26 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity,  v45,  0LL,  0LL);
  if (*v26 != 5)
  {
    v44[0] = *v26;
    unint64_t v27 = sub_10014A444();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v44,  17LL,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType,  v27,  a2,  a3);
  }

  uint64_t v28 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame,  v44,  0LL,  0LL);
  if (*v28 != 3)
  {
    v43[0] = *v28;
    unint64_t v29 = sub_10014AA60();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v43,  18LL,  &type metadata for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType,  v29,  a2,  a3);
  }

  uint64_t v30 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame,  v43,  0LL,  0LL);
  if (*v30 != 3)
  {
    v42[0] = *v30;
    unint64_t v31 = sub_10014AA60();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v42,  19LL,  &type metadata for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType,  v31,  a2,  a3);
  }

  uint64_t v32 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType,  v42,  0LL,  0LL);
  if (*v32 != 8)
  {
    v41[0] = *v32;
    unint64_t v33 = sub_100149E28();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v41,  20LL,  &type metadata for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType,  v33,  a2,  a3);
  }

  uint64_t v34 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude,  v41,  0LL,  0LL);
  if ((*(_BYTE *)(v34 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(21LL, a2, a3, *(double *)v34);
  }
  uint64_t v35 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController,  v40,  0LL,  0LL);
  int v36 = *v35;
  if (v36 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v36 & 1, 22LL, a2, a3);
  }
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000C9A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355540);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355540);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  uint64_t v15 = sub_10000FD98( &qword_100356360,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate,  (uint64_t)&unk_1002C0170);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_1000C9B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355540);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355540);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  uint64_t v15 = sub_10000FD98( &qword_100356360,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate,  (uint64_t)&unk_1002C0170);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 14LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_1000C9D20(uint64_t a1, uint64_t a2)
{
  return sub_100065AC0(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, sub_1000C9D48) & 1;
}

uint64_t sub_1000C9D48(uint64_t a1, uint64_t a2)
{
  uint64_t v117 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  uint64_t v4 = *(void *)(v117 - 8);
  __chkstk_darwin(v117);
  uint64_t v6 = (char *)&v111 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v116 = sub_100003A0C(&qword_10035C408);
  uint64_t v7 = __chkstk_darwin(v116);
  uint64_t v9 = (char *)&v111 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v111 - v10;
  uint64_t v12 = sub_100003A0C(&qword_100355540);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v114 = (uint64_t)&v111 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v115 = (uint64_t)&v111 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v111 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v111 - v20;
  swift_beginAccess(a1 + 16, v161, 0LL, 0LL);
  uint64_t v22 = *(char *)(a1 + 16);
  swift_beginAccess(a2 + 16, v160, 0LL, 0LL);
  uint64_t v23 = *(char *)(a2 + 16);
  if (v22 == 4)
  {
    if ((_DWORD)v23 != 4) {
      return 0LL;
    }
  }

  else if ((_DWORD)v23 == 4 || qword_1002C9368[v22] != qword_1002C9368[v23])
  {
    return 0LL;
  }

  uint64_t v112 = v9;
  v113 = v6;
  uint64_t v24 = a2;
  uint64_t v25 = a1;
  uint64_t v26 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess(v26, v159, 0LL, 0LL);
  sub_10000E6C0(v26, (uint64_t)v21, &qword_100355540);
  uint64_t v27 = a2
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess(v27, v158, 0LL, 0LL);
  uint64_t v28 = (uint64_t)&v11[*(int *)(v116 + 48)];
  sub_10000E6C0((uint64_t)v21, (uint64_t)v11, &qword_100355540);
  sub_10000E6C0(v27, v28, &qword_100355540);
  unint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  uint64_t v30 = v117;
  if (v29((uint64_t)v11, 1LL, v117) == 1)
  {
    swift_retain(v25);
    swift_retain(v24);
    sub_100015764((uint64_t)v21, &qword_100355540);
    if (v29(v28, 1LL, v30) == 1)
    {
      sub_100015764((uint64_t)v11, &qword_100355540);
      goto LABEL_14;
    }

LABEL_54:
  uint64_t v59 = v25;
  uint64_t v60 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  swift_beginAccess( v25 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence,  &v141,  0LL,  0LL);
  uint64_t v61 = v37;
  int v62 = *(_DWORD *)v60;
  LOBYTE(v60) = *(_BYTE *)(v60 + 4);
  uint64_t v63 = v61;
  uint64_t v64 = v61
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  swift_beginAccess( v61 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence,  &v140,  0LL,  0LL);
  if ((v60 & 1) != 0)
  {
    if ((*(_BYTE *)(v64 + 4) & 1) == 0) {
      goto LABEL_78;
    }
  }

  else if ((*(_BYTE *)(v64 + 4) & 1) != 0 || v62 != *(_DWORD *)v64)
  {
    goto LABEL_78;
  }

  uint64_t v67 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  swift_beginAccess( v25 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan,  &v139,  0LL,  0LL);
  double v68 = *(double *)v67;
  LOBYTE(v67) = *(_BYTE *)(v67 + 8);
  uint64_t v69 = v63
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  swift_beginAccess( v63 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan,  &v138,  0LL,  0LL);
  if ((v67 & 1) != 0)
  {
    if ((*(_BYTE *)(v69 + 8) & 1) == 0) {
      goto LABEL_78;
    }
  }

  else if ((*(_BYTE *)(v69 + 8) & 1) != 0 || v68 != *(double *)v69)
  {
    goto LABEL_78;
  }

  uint64_t v70 = (unsigned __int8 *)(v25
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess( v25 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type,  &v137,  0LL,  0LL);
  int v71 = *v70;
  uint64_t v72 = (unsigned __int8 *)(v63
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess( v63 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type,  &v136,  0LL,  0LL);
  int v73 = *v72;
  if (v71 == 14)
  {
    if (v73 != 14) {
      goto LABEL_78;
    }
  }

  else if (v73 == 14 || v71 != v73)
  {
    goto LABEL_78;
  }

  uint64_t v74 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess( v25 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate,  &v135,  0LL,  0LL);
  uint64_t v75 = v115;
  sub_10000E6C0(v74, v115, &qword_100355540);
  uint64_t v76 = v63
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess( v63 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate,  &v134,  0LL,  0LL);
  uint64_t v77 = (uint64_t)v112;
  uint64_t v78 = (uint64_t)&v112[*(int *)(v116 + 48)];
  sub_10000E6C0(v75, (uint64_t)v112, &qword_100355540);
  sub_10000E6C0(v76, v78, &qword_100355540);
  if (v29(v77, 1LL, v117) == 1)
  {
    sub_100015764(v115, &qword_100355540);
    if (v29(v78, 1LL, v117) == 1)
    {
      sub_100015764((uint64_t)v112, &qword_100355540);
      goto LABEL_80;
    }

LABEL_77:
    sub_100015764((uint64_t)v112, &qword_10035C408);
    goto LABEL_78;
  }

  sub_10000E6C0((uint64_t)v112, v114, &qword_100355540);
  if (v29(v78, 1LL, v117) == 1)
  {
    sub_100015764(v115, &qword_100355540);
    sub_100004090(v114, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
    goto LABEL_77;
  }

  uint64_t v79 = (uint64_t)v113;
  sub_100003E68(v78, (uint64_t)v113, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  uint64_t v80 = v114;
  char v81 = sub_10011F4C0(v114, v79, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_100004090(v79, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_100015764(v115, &qword_100355540);
  sub_100004090(v80, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_100015764((uint64_t)v112, &qword_100355540);
  if ((v81 & 1) == 0) {
    goto LABEL_78;
  }
LABEL_80:
  uint64_t v82 = v59
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  swift_beginAccess( v59 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse,  &v133,  0LL,  0LL);
  double v83 = *(double *)v82;
  LOBYTE(v82) = *(_BYTE *)(v82 + 8);
  uint64_t v84 = v63
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  swift_beginAccess( v63 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse,  &v132,  0LL,  0LL);
  if ((v82 & 1) != 0)
  {
    if ((*(_BYTE *)(v84 + 8) & 1) == 0) {
      goto LABEL_78;
    }
  }

  else if ((*(_BYTE *)(v84 + 8) & 1) != 0 || v83 != *(double *)v84)
  {
    goto LABEL_78;
  }

  uint64_t v85 = v59
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  swift_beginAccess( v59 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor,  &v131,  0LL,  0LL);
  int v86 = *(_DWORD *)v85;
  LOBYTE(v85) = *(_BYTE *)(v85 + 4);
  uint64_t v87 = v63
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  swift_beginAccess( v63 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor,  &v130,  0LL,  0LL);
  if ((v85 & 1) != 0)
  {
    if ((*(_BYTE *)(v87 + 4) & 1) == 0) {
      goto LABEL_78;
    }
  }

  else if ((*(_BYTE *)(v87 + 4) & 1) != 0 || v86 != *(_DWORD *)v87)
  {
    goto LABEL_78;
  }

  uint64_t v88 = (char *)(v59
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
  swift_beginAccess( v59 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity,  &v129,  0LL,  0LL);
  uint64_t v89 = *v88;
  uint64_t v90 = (char *)(v63
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
  swift_beginAccess( v63 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity,  &v128,  0LL,  0LL);
  uint64_t v91 = *v90;
  if (v89 == 5)
  {
    if ((_DWORD)v91 != 5) {
      goto LABEL_78;
    }
  }

  else if ((_DWORD)v91 == 5 || qword_1002C9388[v89] != qword_1002C9388[v91])
  {
    goto LABEL_78;
  }

  uint64_t v92 = (unsigned __int8 *)(v59
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess( v59 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame,  &v127,  0LL,  0LL);
  int v93 = *v92;
  uint64_t v94 = (unsigned __int8 *)(v63
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess( v63 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame,  &v126,  0LL,  0LL);
  int v95 = *v94;
  if (v93 == 3)
  {
    if (v95 != 3) {
      goto LABEL_78;
    }
  }

  else if (v95 == 3 || v93 != v95)
  {
    goto LABEL_78;
  }

  uint64_t v96 = (unsigned __int8 *)(v59
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
  swift_beginAccess( v59 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame,  &v125,  0LL,  0LL);
  int v97 = *v96;
  uint64_t v98 = (unsigned __int8 *)(v63
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
  swift_beginAccess( v63 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame,  &v124,  0LL,  0LL);
  int v99 = *v98;
  if (v97 == 3)
  {
    if (v99 != 3) {
      goto LABEL_78;
    }
  }

  else if (v99 == 3 || v97 != v99)
  {
    goto LABEL_78;
  }

  uint64_t v100 = (unsigned __int8 *)(v59
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
  swift_beginAccess( v59 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType,  &v123,  0LL,  0LL);
  int v101 = *v100;
  uint64_t v102 = (unsigned __int8 *)(v63
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
  swift_beginAccess( v63 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType,  &v122,  0LL,  0LL);
  int v103 = *v102;
  if (v101 == 8)
  {
    if (v103 != 8) {
      goto LABEL_78;
    }
  }

  else if (v103 == 8 || v101 != v103)
  {
    goto LABEL_78;
  }

  uint64_t v104 = v59
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude;
  swift_beginAccess( v59 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude,  &v121,  0LL,  0LL);
  double v105 = *(double *)v104;
  LOBYTE(v104) = *(_BYTE *)(v104 + 8);
  uint64_t v106 = v63
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude;
  swift_beginAccess( v63 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude,  &v120,  0LL,  0LL);
  if ((v104 & 1) != 0)
  {
    if ((*(_BYTE *)(v106 + 8) & 1) != 0) {
      goto LABEL_115;
    }
LABEL_78:
    swift_release(v59);
    uint64_t v65 = v63;
    goto LABEL_58;
  }

    sub_100015764((uint64_t)v64, &qword_100364428);
    return 0LL;
  }

  sub_10000E6C0((uint64_t)v64, (uint64_t)v11, &qword_100363ED8);
  if (v55(v54, 1LL, v63) == 1)
  {
    swift_release(a1);
    swift_release(a2);
    sub_100015764((uint64_t)v13, &qword_100363ED8);
    sub_100004090((uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Type7Info);
    goto LABEL_77;
  }

  double v57 = v62;
  sub_100003E68(v54, (uint64_t)v62, type metadata accessor for CLP_LogEntry_AONLoc_Type7Info);
  uint64_t v58 = sub_10022A204((uint64_t)v11, (uint64_t)v57);
  swift_release(a1);
  swift_release(a2);
  sub_100004090((uint64_t)v57, type metadata accessor for CLP_LogEntry_AONLoc_Type7Info);
  sub_100015764((uint64_t)v13, &qword_100363ED8);
  sub_100004090((uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Type7Info);
  sub_100015764((uint64_t)v64, &qword_100363ED8);
  return (v58 & 1) != 0;
}

LABEL_115:
  int v107 = (unsigned __int8 *)(v59
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  swift_beginAccess( v59 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController,  &v119,  0LL,  0LL);
  int v108 = *v107;
  swift_release(v59);
  uint64_t v109 = (unsigned __int8 *)(v63
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  swift_beginAccess( v63 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController,  &v118,  0LL,  0LL);
  int v110 = *v109;
  swift_release(v63);
  if (v108 == 2)
  {
    if (v110 != 2) {
      return 0LL;
    }
  }

  else if (v110 == 2 || ((((v110 & 1) == 0) ^ v108) & 1) == 0)
  {
    return 0LL;
  }

  return 1LL;
}

Swift::Int sub_1000CAAA4()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  &qword_1003556D0,  (uint64_t)&unk_1002C03D8);
}

uint64_t sub_1000CAAC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD7C(a1, &qword_10037A500, &qword_10037A508, (uint64_t)sub_1000C8C50, a2);
}

uint64_t sub_1000CAADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C8E74(a1, a2, a3);
}

uint64_t sub_1000CAAF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C9308(a1, a2, a3);
}

uint64_t sub_1000CAB04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C1F0,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  (uint64_t)&unk_1002C0350);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000CAB54@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A4F8, (uint64_t)qword_100369BA8, (uint64_t)sub_1000C868C, a1);
}

uint64_t sub_1000CAB70(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100355730,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  (uint64_t)&unk_1002C02D8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CABB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100355730,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  (uint64_t)&unk_1002C02D8);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000CAC04()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369BC0);
  sub_10000E704(v0, (uint64_t)qword_100369BC0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "ST_UNKNOWN";
  *(void *)(v9 + 8) = 10LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "ST_ROUTE_GUIDANCE";
  *(void *)(v13 + 8) = 17LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "ST_OTHER";
  *((void *)v15 + 1) = 8LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 0xFFFFLL;
  *(void *)uint64_t v17 = "ST_ANY";
  *((void *)v17 + 1) = 6LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000CADC0()
{
  return sub_100008C30(&qword_10037A510, (uint64_t)qword_100369BC0, (uint64_t)sub_1000CAC04);
}

uint64_t sub_1000CADDC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A510, (uint64_t)qword_100369BC0, (uint64_t)sub_1000CAC04, a1);
}

uint64_t sub_1000CADF8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A510, (uint64_t)qword_100369BC0, (uint64_t)sub_1000CAC04, a1);
}

uint64_t sub_1000CAE14()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369BD8);
  sub_10000E704(v0, (uint64_t)qword_100369BD8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32F0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = -1LL;
  *(void *)uint64_t v9 = "LI_UNKNOWN";
  *(void *)(v9 + 8) = 10LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 0LL;
  *(void *)uint64_t v13 = "LI_NONE";
  *(void *)(v13 + 8) = 7LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 25LL;
  *(void *)uint64_t v15 = "LI_LOW";
  *((void *)v15 + 1) = 6LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 50LL;
  *(void *)uint64_t v17 = "LI_MEDIUM";
  *((void *)v17 + 1) = 9LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 75LL;
  *(void *)uint64_t v18 = "LI_HIGH";
  *(void *)(v18 + 8) = 7LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000CB018()
{
  return sub_100008C30(&qword_10037A518, (uint64_t)qword_100369BD8, (uint64_t)sub_1000CAE14);
}

uint64_t sub_1000CB034@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A518, (uint64_t)qword_100369BD8, (uint64_t)sub_1000CAE14, a1);
}

uint64_t sub_1000CB050@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A518, (uint64_t)qword_100369BD8, (uint64_t)sub_1000CAE14, a1);
}

void *sub_1000CB06C()
{
  return &unk_10033EE78;
}

unint64_t sub_1000CB078()
{
  return 0xD000000000000027LL;
}

uint64_t sub_1000CB094()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369BF0);
  sub_10000E704(v0, (uint64_t)qword_100369BF0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "raw_unmodified_course";
  *(void *)(v9 + 8) = 21LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "raw_unmodified_course_unc";
  *(void *)(v13 + 8) = 25LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "is_static";
  *((void *)v15 + 1) = 9LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "is_mounted";
  *((void *)v17 + 1) = 10LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000CB254()
{
  return sub_100008C30(&qword_10037A520, (uint64_t)qword_100369BF0, (uint64_t)sub_1000CB094);
}

uint64_t sub_1000CB270@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A520, (uint64_t)qword_100369BF0, (uint64_t)sub_1000CB094, a1);
}

uint64_t sub_1000CB28C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0LL) + 20);
          goto LABEL_5;
        case 2LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0LL) + 24);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v9, a2, a3);
          break;
        case 3LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0LL) + 28);
          goto LABEL_11;
        case 4LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0LL) + 32);
LABEL_11:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + v10, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000CB398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0LL);
  uint64_t v10 = (int *)result;
  uint64_t v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1LL, a2, a3, *(double *)v11);
  }
  if (!v4)
  {
    uint64_t v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2LL, a2, a3, *(double *)v12);
    }
    int v13 = *(unsigned __int8 *)(v5 + v10[7]);
    if (v13 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v13 & 1, 3LL, a2, a3);
    }
    int v14 = *(unsigned __int8 *)(v5 + v10[8]);
    if (v14 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v14 & 1, 4LL, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_1000CB4C8()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData,  &qword_1003556D8,  (uint64_t)&unk_1002C0590);
}

uint64_t sub_1000CB4E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CB28C(a1, a2, a3);
}

uint64_t sub_1000CB4F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CB398(a1, a2, a3);
}

uint64_t sub_1000CB50C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C1E8,  type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData,  (uint64_t)&unk_1002C0508);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000CB55C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A520, (uint64_t)qword_100369BF0, (uint64_t)sub_1000CB094, a1);
}

uint64_t sub_1000CB578(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356388,  type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData,  (uint64_t)&unk_1002C0490);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CB5B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356388,  type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData,  (uint64_t)&unk_1002C0490);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000CB608()
{
  return &unk_10033EE88;
}

unint64_t sub_1000CB614()
{
  return 0xD000000000000027LL;
}

uint64_t sub_1000CB630()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369C08);
  sub_10000E704(v0, (uint64_t)qword_100369C08);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3340;
  char v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *char v8 = 1LL;
  *(void *)uint64_t v9 = "value";
  *(void *)(v9 + 8) = 5LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  int v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)int v13 = "std";
  *((void *)v13 + 1) = 3LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000CB780()
{
  return sub_100008C30(&qword_10037A528, (uint64_t)qword_100369C08, (uint64_t)sub_1000CB630);
}

uint64_t sub_1000CB79C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A528, (uint64_t)qword_100369C08, (uint64_t)sub_1000CB630, a1);
}

uint64_t sub_1000CB7B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CB7D4(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t sub_1000CB7D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v9 = a2;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v9, i);
    if (v5 || (v13 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      uint64_t v11 = *(int *)(a4(0LL) + 24);
LABEL_3:
      dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v4 + v11, a2, a3);
      goto LABEL_4;
    }

    if (result == 1)
    {
      uint64_t v11 = *(int *)(a4(0LL) + 20);
      goto LABEL_3;
    }

uint64_t sub_1000CB884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CB8A0(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t sub_1000CB8A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = v4;
  uint64_t result = a4(0LL);
  uint64_t v11 = result;
  uint64_t v12 = v6 + *(int *)(result + 20);
  if ((*(_BYTE *)(v12 + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1LL, a2, a3, *(double *)v12);
  }
  if (!v5)
  {
    uint64_t v13 = v6 + *(int *)(v11 + 24);
    if ((*(_BYTE *)(v13 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2LL, a2, a3, *(double *)v13);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_1000CB968(uint64_t a1, uint64_t a2)
{
  return sub_10011F4C0(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample) & 1;
}

Swift::Int sub_1000CB988()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_PressureSample,  &qword_1003556E0,  (uint64_t)&unk_1002C06F8);
}

uint64_t sub_1000CB9A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C1E0,  type metadata accessor for CLP_LogEntry_PrivateData_PressureSample,  (uint64_t)&unk_1002C0670);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000CB9F4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A528, (uint64_t)qword_100369C08, (uint64_t)sub_1000CB630, a1);
}

uint64_t sub_1000CBA10(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003563A0,  type metadata accessor for CLP_LogEntry_PrivateData_PressureSample,  (uint64_t)&unk_1002C05F8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CBA50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003563A0,  type metadata accessor for CLP_LogEntry_PrivateData_PressureSample,  (uint64_t)&unk_1002C05F8);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000CBAA0()
{
  return &unk_10033EE98;
}

unint64_t sub_1000CBAAC()
{
  return 0xD00000000000002CLL;
}

uint64_t sub_1000CBAC8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369C20);
  sub_10000E704(v0, (uint64_t)qword_100369C20);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42A0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "constellation";
  *(void *)(v9 + 8) = 13LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "sat_id";
  *(void *)(v13 + 8) = 6LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  int v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *int v14 = 3LL;
  *(void *)uint64_t v15 = "elevation_deg";
  *((void *)v15 + 1) = 13LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "azimuth_deg";
  *((void *)v17 + 1) = 11LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 5LL;
  *(void *)uint64_t v19 = "l1_cn0";
  *((void *)v19 + 1) = 6LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  void *v20 = 6LL;
  *(void *)uint64_t v21 = "l5_cn0";
  *((void *)v21 + 1) = 6LL;
  v21[16] = 2;
  v12();
  uint64_t v22 = (void *)(v8 + 6 * v4);
  uint64_t v23 = (char *)v22 + *(int *)(v2 + 48);
  *uint64_t v22 = 7LL;
  *(void *)uint64_t v23 = "is_tracked";
  *((void *)v23 + 1) = 10LL;
  v23[16] = 2;
  v12();
  uint64_t v24 = (void *)(v8 + 7 * v4);
  uint64_t v25 = (char *)v24 + *(int *)(v2 + 48);
  void *v24 = 8LL;
  *(void *)uint64_t v25 = "is_phase_tracked";
  *((void *)v25 + 1) = 16LL;
  v25[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000CBD78()
{
  return sub_100008C30(&qword_10037A530, (uint64_t)qword_100369C20, (uint64_t)sub_1000CBAC8);
}

uint64_t sub_1000CBD94@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A530, (uint64_t)qword_100369C20, (uint64_t)sub_1000CBAC8, a1);
}

uint64_t sub_1000CBDB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0LL) + 20);
          unint64_t v10 = sub_10014A9D8();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v9,  &type metadata for CLP_LogEntry_PrivateData_ClientSatelliteConstellation,  v10,  a2,  a3);
          break;
        case 2LL:
          uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0LL);
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v3 + *(int *)(v11 + 24), a2, a3);
          break;
        case 3LL:
          uint64_t v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0LL) + 28);
          goto LABEL_11;
        case 4LL:
          uint64_t v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0LL) + 32);
          goto LABEL_11;
        case 5LL:
          uint64_t v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0LL) + 36);
          goto LABEL_11;
        case 6LL:
          uint64_t v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0LL) + 40);
LABEL_11:
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + v12, a2, a3);
          break;
        case 7LL:
          uint64_t v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0LL) + 44);
          goto LABEL_14;
        case 8LL:
          uint64_t v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0LL) + 48);
LABEL_14:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + v13, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000CBF50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0LL);
  unint64_t v10 = (int *)result;
  if (*(_BYTE *)(v5 + *(int *)(result + 20)) != 7)
  {
    char v15 = *(_BYTE *)(v5 + *(int *)(result + 20));
    unint64_t v11 = sub_10014A9D8();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v15,  1LL,  &type metadata for CLP_LogEntry_PrivateData_ClientSatelliteConstellation,  v11,  a2,  a3);
  }

  if (!v4)
  {
    uint64_t v12 = (unsigned int *)(v5 + v10[6]);
    if ((v12[1] & 1) == 0) {
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v12, 2LL, a2, a3);
    }
    uint64_t v13 = v5 + v10[7];
    if ((*(_BYTE *)(v13 + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(3LL, a2, a3, *(float *)v13);
    }
    uint64_t v14 = v5 + v10[8];
    if ((*(_BYTE *)(v14 + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(4LL, a2, a3, *(float *)v14);
    }
    sub_1000E122C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
    sub_1000E12A0(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
    sub_1000E4EEC(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
    sub_1000E4F60(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_1000CC13C()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo,  &qword_1003556E8,  (uint64_t)&unk_1002C0860);
}

uint64_t sub_1000CC158@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 7;
  uint64_t v6 = a2 + v5;
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  uint64_t v7 = a1[8];
  uint64_t v8 = a2 + a1[7];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1[10];
  uint64_t v11 = a2 + a1[9];
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  uint64_t v12 = a2 + v10;
  *(_DWORD *)uint64_t v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  uint64_t v13 = a1[12];
  *(_BYTE *)(a2 + a1[11]) = 2;
  *(_BYTE *)(a2 + v13) = 2;
  return result;
}

uint64_t sub_1000CC1E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CBDB0(a1, a2, a3);
}

uint64_t sub_1000CC1F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CBF50(a1, a2, a3);
}

uint64_t sub_1000CC208(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C1D8,  type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo,  (uint64_t)&unk_1002C07D8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000CC258@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A530, (uint64_t)qword_100369C20, (uint64_t)sub_1000CBAC8, a1);
}

uint64_t sub_1000CC274(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003563B8,  type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo,  (uint64_t)&unk_1002C0760);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CC2B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003563B8,  type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo,  (uint64_t)&unk_1002C0760);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000CC304()
{
  return &unk_10033EEA8;
}

unint64_t sub_1000CC310()
{
  return 0xD00000000000002ELL;
}

uint64_t sub_1000CC32C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369C38);
  sub_10000E704(v0, (uint64_t)qword_100369C38);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v119 = swift_allocObject(v1, v6 + 56 * v4, v5 | 7);
  *(_OWORD *)(v119 + 16) = xmmword_1002BAD10;
  uint64_t v7 = v119 + v6;
  uint64_t v8 = v119 + v6 + *(int *)(v2 + 48);
  *(void *)(v119 + v6) = 1LL;
  *(void *)uint64_t v8 = "odometer";
  *(void *)(v8 + 8) = 8LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "delta_distance";
  *(void *)(v12 + 8) = 14LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 3LL;
  *(void *)uint64_t v14 = "delta_distance_accuracy";
  *((void *)v14 + 1) = 23LL;
  v14[16] = 2;
  v11();
  char v15 = (void *)(v7 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *char v15 = 4LL;
  *(void *)uint64_t v16 = "timestamp_gps";
  *((void *)v16 + 1) = 13LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v7 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "mach_time";
  *((void *)v18 + 1) = 9LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v7 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 6LL;
  *(void *)uint64_t v20 = "horz_unc_semi_maj";
  *((void *)v20 + 1) = 17LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v7 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 7LL;
  *(void *)uint64_t v22 = "horz_unc_semi_min";
  *((void *)v22 + 1) = 17LL;
  _BYTE v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v7 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  void *v23 = 8LL;
  *(void *)uint64_t v24 = "horz_unc_semi_maj_az";
  *((void *)v24 + 1) = 20LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 9LL;
  *(void *)uint64_t v25 = "is_fitness_match";
  *(void *)(v25 + 8) = 16LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  uint64_t v26 = (void *)(v7 + 9 * v4);
  uint64_t v27 = (char *)v26 + *(int *)(v2 + 48);
  void *v26 = 10LL;
  *(void *)uint64_t v27 = "match_quality";
  *((void *)v27 + 1) = 13LL;
  v27[16] = 2;
  v11();
  uint64_t v28 = (void *)(v7 + 10 * v4);
  unint64_t v29 = (char *)v28 + *(int *)(v2 + 48);
  *uint64_t v28 = 11LL;
  *(void *)unint64_t v29 = "match_coordinate";
  *((void *)v29 + 1) = 16LL;
  v29[16] = 2;
  v11();
  uint64_t v30 = (void *)(v7 + 11 * v4);
  uint64_t v31 = (char *)v30 + *(int *)(v2 + 48);
  void *v30 = 12LL;
  *(void *)uint64_t v31 = "match_course";
  *((void *)v31 + 1) = 12LL;
  v31[16] = 2;
  v11();
  uint64_t v32 = (void *)(v7 + 12 * v4);
  char v33 = (char *)v32 + *(int *)(v2 + 48);
  *uint64_t v32 = 13LL;
  *(void *)char v33 = "match_form_of_way";
  *((void *)v33 + 1) = 17LL;
  v33[16] = 2;
  v11();
  uint64_t v34 = (void *)(v7 + 13 * v4);
  double v35 = (char *)v34 + *(int *)(v2 + 48);
  *uint64_t v34 = 14LL;
  *(void *)double v35 = "match_road_class";
  *((void *)v35 + 1) = 16LL;
  v35[16] = 2;
  v11();
  uint64_t v36 = (void *)(v7 + 14 * v4);
  uint64_t v37 = (char *)v36 + *(int *)(v2 + 48);
  void *v36 = 15LL;
  *(void *)uint64_t v37 = "match_shifted";
  *((void *)v37 + 1) = 13LL;
  v37[16] = 2;
  v11();
  uint64_t v38 = (void *)(v7 + 15 * v4);
  double v39 = (char *)v38 + *(int *)(v2 + 48);
  *uint64_t v38 = 16LL;
  *(void *)double v39 = "pressure";
  *((void *)v39 + 1) = 8LL;
  v39[16] = 2;
  v11();
  uint64_t v40 = v7 + 16 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 16 * v4) = 17LL;
  *(void *)uint64_t v40 = "undulation_model";
  *(void *)(v40 + 8) = 16LL;
  *(_BYTE *)(v40 + 16) = 2;
  v11();
  uint64_t v41 = (void *)(v7 + 17 * v4);
  double v42 = (char *)v41 + *(int *)(v2 + 48);
  void *v41 = 18LL;
  *(void *)double v42 = "undulation";
  *((void *)v42 + 1) = 10LL;
  v42[16] = 2;
  v11();
  uint64_t v43 = (void *)(v7 + 18 * v4);
  uint64_t v44 = (char *)v43 + *(int *)(v2 + 48);
  *uint64_t v43 = 19LL;
  *(void *)uint64_t v44 = "special_coordinate";
  *((void *)v44 + 1) = 18LL;
  v44[16] = 2;
  v11();
  double v45 = (void *)(v7 + 19 * v4);
  uint64_t v46 = (char *)v45 + *(int *)(v2 + 48);
  void *v45 = 20LL;
  *(void *)uint64_t v46 = "special_horizontal_accuracy";
  *((void *)v46 + 1) = 27LL;
  v46[16] = 2;
  v11();
  uint64_t v47 = (void *)(v7 + 20 * v4);
  double v48 = (char *)v47 + *(int *)(v2 + 48);
  *uint64_t v47 = 21LL;
  *(void *)double v48 = "mach_continuous_time";
  *((void *)v48 + 1) = 20LL;
  v48[16] = 2;
  v11();
  uint64_t v49 = (void *)(v7 + 21 * v4);
  uint64_t v50 = (char *)v49 + *(int *)(v2 + 48);
  void *v49 = 22LL;
  *(void *)uint64_t v50 = "origin_device";
  *((void *)v50 + 1) = 13LL;
  v50[16] = 2;
  v11();
  double v51 = (void *)(v7 + 22 * v4);
  uint64_t v52 = (char *)v51 + *(int *)(v2 + 48);
  *double v51 = 23LL;
  *(void *)uint64_t v52 = "is_matcher_propagated_coordinates";
  *((void *)v52 + 1) = 33LL;
  v52[16] = 2;
  v11();
  uint64_t v53 = (void *)(v7 + 23 * v4);
  double v54 = (char *)v53 + *(int *)(v2 + 48);
  void *v53 = 24LL;
  *(void *)double v54 = "map_matcher_data";
  *((void *)v54 + 1) = 16LL;
  v54[16] = 2;
  v11();
  uint64_t v55 = (void *)(v7 + 24 * v4);
  uint64_t v56 = (char *)v55 + *(int *)(v2 + 48);
  *uint64_t v55 = 25LL;
  *(void *)uint64_t v56 = "slope";
  *((void *)v56 + 1) = 5LL;
  v56[16] = 2;
  v11();
  double v57 = (void *)(v7 + 25 * v4);
  uint64_t v58 = (char *)v57 + *(int *)(v2 + 48);
  void *v57 = 26LL;
  *(void *)uint64_t v58 = "max_abs_slope";
  *((void *)v58 + 1) = 13LL;
  v58[16] = 2;
  v11();
  uint64_t v59 = (void *)(v7 + 26 * v4);
  uint64_t v60 = (char *)v59 + *(int *)(v2 + 48);
  *uint64_t v59 = 27LL;
  *(void *)uint64_t v60 = "ground_altitude";
  *((void *)v60 + 1) = 15LL;
  v60[16] = 2;
  v11();
  uint64_t v61 = (void *)(v7 + 27 * v4);
  int v62 = (char *)v61 + *(int *)(v2 + 48);
  void *v61 = 28LL;
  *(void *)int v62 = "ground_altitude_uncertainty";
  *((void *)v62 + 1) = 27LL;
  v62[16] = 2;
  v11();
  uint64_t v63 = (void *)(v7 + 28 * v4);
  uint64_t v64 = (char *)v63 + *(int *)(v2 + 48);
  *uint64_t v63 = 29LL;
  *(void *)uint64_t v64 = "smoothed_gps_altitude";
  *((void *)v64 + 1) = 21LL;
  v64[16] = 2;
  v11();
  uint64_t v65 = (void *)(v7 + 29 * v4);
  uint64_t v66 = (char *)v65 + *(int *)(v2 + 48);
  *uint64_t v65 = 30LL;
  *(void *)uint64_t v66 = "smoothed_gps_altitude_uncertainty";
  *((void *)v66 + 1) = 33LL;
  v66[16] = 2;
  v11();
  uint64_t v67 = (void *)(v7 + 30 * v4);
  double v68 = (char *)v67 + *(int *)(v2 + 48);
  *uint64_t v67 = 31LL;
  *(void *)double v68 = "is_simulated_or_spoofed";
  *((void *)v68 + 1) = 23LL;
  v68[16] = 2;
  v11();
  uint64_t v69 = (void *)(v7 + 31 * v4);
  uint64_t v70 = (char *)v69 + *(int *)(v2 + 48);
  void *v69 = 32LL;
  *(void *)uint64_t v70 = "raw_horizontal_accuracy";
  *((void *)v70 + 1) = 23LL;
  v70[16] = 2;
  v11();
  uint64_t v71 = v7 + 32 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 32 * v4) = 33LL;
  *(void *)uint64_t v71 = "raw_course_accuracy";
  *(void *)(v71 + 8) = 19LL;
  *(_BYTE *)(v71 + 16) = 2;
  v11();
  uint64_t v72 = (void *)(v7 + 33 * v4);
  int v73 = (char *)v72 + *(int *)(v2 + 48);
  void *v72 = 34LL;
  *(void *)int v73 = "is_coordinate_fused";
  *((void *)v73 + 1) = 19LL;
  v73[16] = 2;
  v11();
  uint64_t v74 = (void *)(v7 + 34 * v4);
  uint64_t v75 = (char *)v74 + *(int *)(v2 + 48);
  *uint64_t v74 = 35LL;
  *(void *)uint64_t v75 = "fused_coordinate";
  *((void *)v75 + 1) = 16LL;
  v75[16] = 2;
  v11();
  uint64_t v76 = (void *)(v7 + 35 * v4);
  uint64_t v77 = (char *)v76 + *(int *)(v2 + 48);
  void *v76 = 36LL;
  *(void *)uint64_t v77 = "fused_horizontal_accuracy";
  *((void *)v77 + 1) = 25LL;
  v77[16] = 2;
  v11();
  uint64_t v78 = (void *)(v7 + 36 * v4);
  uint64_t v79 = (char *)v78 + *(int *)(v2 + 48);
  *uint64_t v78 = 37LL;
  *(void *)uint64_t v79 = "fused_reference_frame";
  *((void *)v79 + 1) = 21LL;
  v79[16] = 2;
  v11();
  uint64_t v80 = (void *)(v7 + 37 * v4);
  char v81 = (char *)v80 + *(int *)(v2 + 48);
  void *v80 = 38LL;
  *(void *)char v81 = "fused_course";
  *((void *)v81 + 1) = 12LL;
  v81[16] = 2;
  v11();
  uint64_t v82 = (void *)(v7 + 38 * v4);
  double v83 = (char *)v82 + *(int *)(v2 + 48);
  *uint64_t v82 = 39LL;
  *(void *)double v83 = "fused_course_accuracy";
  *((void *)v83 + 1) = 21LL;
  v83[16] = 2;
  v11();
  uint64_t v84 = (void *)(v7 + 39 * v4);
  uint64_t v85 = (char *)v84 + *(int *)(v2 + 48);
  void *v84 = 40LL;
  *(void *)uint64_t v85 = "estimated_worst_case_error";
  *((void *)v85 + 1) = 26LL;
  v85[16] = 2;
  v11();
  int v86 = (void *)(v7 + 40 * v4);
  uint64_t v87 = (char *)v86 + *(int *)(v2 + 48);
  void *v86 = 41LL;
  *(void *)uint64_t v87 = "pre_fusing_altitude";
  *((void *)v87 + 1) = 19LL;
  v87[16] = 2;
  v11();
  uint64_t v88 = (void *)(v7 + 41 * v4);
  uint64_t v89 = (char *)v88 + *(int *)(v2 + 48);
  *uint64_t v88 = 42LL;
  *(void *)uint64_t v89 = "pre_fusing_vertical_accuracy";
  *((void *)v89 + 1) = 28LL;
  v89[16] = 2;
  v11();
  uint64_t v90 = (void *)(v7 + 42 * v4);
  uint64_t v91 = (char *)v90 + *(int *)(v2 + 48);
  void *v90 = 43LL;
  *(void *)uint64_t v91 = "is_coordinate_fused_with_vl";
  *((void *)v91 + 1) = 27LL;
  v91[16] = 2;
  v11();
  uint64_t v92 = (void *)(v7 + 43 * v4);
  int v93 = (char *)v92 + *(int *)(v2 + 48);
  *uint64_t v92 = 44LL;
  *(void *)int v93 = "fused_altitude";
  *((void *)v93 + 1) = 14LL;
  v93[16] = 2;
  v11();
  uint64_t v94 = (void *)(v7 + 44 * v4);
  int v95 = (char *)v94 + *(int *)(v2 + 48);
  void *v94 = 45LL;
  *(void *)int v95 = "fused_vertical_accuracy";
  *((void *)v95 + 1) = 23LL;
  v95[16] = 2;
  v11();
  uint64_t v96 = (void *)(v7 + 45 * v4);
  int v97 = (char *)v96 + *(int *)(v2 + 48);
  *uint64_t v96 = 46LL;
  *(void *)int v97 = "satellite_visibility_report";
  *((void *)v97 + 1) = 27LL;
  v97[16] = 2;
  v11();
  uint64_t v98 = (void *)(v7 + 46 * v4);
  int v99 = (char *)v98 + *(int *)(v2 + 48);
  void *v98 = 47LL;
  *(void *)int v99 = "gnss_content";
  *((void *)v99 + 1) = 12LL;
  v99[16] = 2;
  v11();
  uint64_t v100 = (void *)(v7 + 47 * v4);
  int v101 = (char *)v100 + *(int *)(v2 + 48);
  *uint64_t v100 = 48LL;
  *(void *)int v101 = "raw_altitude";
  *((void *)v101 + 1) = 12LL;
  v101[16] = 2;
  v11();
  uint64_t v102 = (void *)(v7 + 48 * v4);
  int v103 = (char *)v102 + *(int *)(v2 + 48);
  *uint64_t v102 = 49LL;
  *(void *)int v103 = "estimated_position_context_state";
  *((void *)v103 + 1) = 32LL;
  v103[16] = 2;
  v11();
  uint64_t v104 = (void *)(v7 + 49 * v4);
  double v105 = (char *)v104 + *(int *)(v2 + 48);
  *uint64_t v104 = 50LL;
  *(void *)double v105 = "estimated_position_context_state_probability_indoor";
  *((void *)v105 + 1) = 51LL;
  v105[16] = 2;
  v11();
  uint64_t v106 = (void *)(v7 + 50 * v4);
  int v107 = (char *)v106 + *(int *)(v2 + 48);
  *uint64_t v106 = 51LL;
  *(void *)int v107 = "estimated_position_context_state_probability_outdoor";
  *((void *)v107 + 1) = 52LL;
  v107[16] = 2;
  v11();
  int v108 = (void *)(v7 + 51 * v4);
  uint64_t v109 = (char *)v108 + *(int *)(v2 + 48);
  *int v108 = 52LL;
  *(void *)uint64_t v109 = "map_matcher_type";
  *((void *)v109 + 1) = 16LL;
  v109[16] = 2;
  v11();
  int v110 = (void *)(v7 + 52 * v4);
  uint64_t v111 = (char *)v110 + *(int *)(v2 + 48);
  void *v110 = 53LL;
  *(void *)uint64_t v111 = "is_route_hints_triggered_map_matching";
  *((void *)v111 + 1) = 37LL;
  v111[16] = 2;
  v11();
  uint64_t v112 = (void *)(v7 + 53 * v4);
  v113 = (char *)v112 + *(int *)(v2 + 48);
  *uint64_t v112 = 54LL;
  *(void *)v113 = "loi_location_source_accuracy";
  *((void *)v113 + 1) = 28LL;
  v113[16] = 2;
  v11();
  uint64_t v114 = (void *)(v7 + 54 * v4);
  uint64_t v115 = (char *)v114 + *(int *)(v2 + 48);
  void *v114 = 55LL;
  *(void *)uint64_t v115 = "batched_location_fix_type";
  *((void *)v115 + 1) = 25LL;
  v115[16] = 2;
  v11();
  uint64_t v116 = (void *)(v7 + 55 * v4);
  uint64_t v117 = (char *)v116 + *(int *)(v2 + 48);
  *uint64_t v116 = 56LL;
  *(void *)uint64_t v117 = "is_wifi_fix_with_associated_ap";
  *((void *)v117 + 1) = 30LL;
  v117[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v119);
}

uint64_t sub_1000CCFAC()
{
  return sub_100008C30(&qword_10037A538, (uint64_t)qword_100369C38, (uint64_t)sub_1000CC32C);
}

uint64_t sub_1000CCFC8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A538, (uint64_t)qword_100369C38, (uint64_t)sub_1000CC32C, a1);
}

uint64_t sub_1000CCFE4()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  *(void *)(v1 + 16) = 0LL;
  *(_BYTE *)(v1 + 24) = 1;
  *(void *)(v1 + 32) = 0LL;
  *(_BYTE *)(v1 + 40) = 1;
  *(void *)(v1 + 48) = 0LL;
  *(_BYTE *)(v1 + 56) = 1;
  *(void *)(v1 + 64) = 0LL;
  *(_BYTE *)(v1 + 72) = 1;
  *(void *)(v1 + 80) = 0LL;
  *(_BYTE *)(v1 + 88) = 1;
  *(_DWORD *)(v1 + 92) = 0;
  *(_BYTE *)(v1 + 96) = 1;
  *(_DWORD *)(v1 + 100) = 0;
  *(_BYTE *)(v1 + 104) = 1;
  *(_DWORD *)(v1 + 108) = 0;
  *(_WORD *)(v1 + 113) = 1026;
  uint64_t v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  *(_BYTE *)(v1 + 112) = 1;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL);
  v4(v2, 1LL, 1LL, v3);
  uint64_t v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse;
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + 8) = 1;
  uint64_t v6 = v1
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay;
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  uint64_t v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass;
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted) = 2;
  uint64_t v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel) = 4;
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v4( v1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate,  1LL,  1LL,  v3);
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy;
  *(void *)uint64_t v11 = 0LL;
  *(_BYTE *)(v11 + 8) = 1;
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime;
  *(void *)uint64_t v12 = 0LL;
  *(_BYTE *)(v12 + 8) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice) = 3;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates) = 2;
  uint64_t v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
  uint64_t v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope;
  *(void *)uint64_t v15 = 0LL;
  *(_BYTE *)(v15 + 8) = 1;
  uint64_t v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope;
  *(void *)uint64_t v16 = 0LL;
  *(_BYTE *)(v16 + 8) = 1;
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude;
  *(void *)uint64_t v17 = 0LL;
  *(_BYTE *)(v17 + 8) = 1;
  uint64_t v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty;
  *(void *)uint64_t v18 = 0LL;
  *(_BYTE *)(v18 + 8) = 1;
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude;
  *(void *)uint64_t v19 = 0LL;
  *(_BYTE *)(v19 + 8) = 1;
  uint64_t v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty;
  *(void *)uint64_t v20 = 0LL;
  *(_BYTE *)(v20 + 8) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed) = 2;
  uint64_t v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy;
  *(void *)uint64_t v21 = 0LL;
  *(_BYTE *)(v21 + 8) = 1;
  uint64_t v22 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy;
  *(void *)uint64_t v22 = 0LL;
  *(_BYTE *)(v22 + 8) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused) = 2;
  v4( v1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate,  1LL,  1LL,  v3);
  uint64_t v23 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy;
  *(void *)uint64_t v23 = 0LL;
  *(_BYTE *)(v23 + 8) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame) = 3;
  uint64_t v24 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse;
  *(void *)uint64_t v24 = 0LL;
  *(_BYTE *)(v24 + 8) = 1;
  uint64_t v25 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy;
  *(void *)uint64_t v25 = 0LL;
  *(_BYTE *)(v25 + 8) = 1;
  uint64_t v26 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError;
  *(void *)uint64_t v26 = 0LL;
  *(_BYTE *)(v26 + 8) = 1;
  uint64_t v27 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude;
  *(void *)uint64_t v27 = 0LL;
  *(_BYTE *)(v27 + 8) = 1;
  uint64_t v28 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy;
  *(void *)uint64_t v28 = 0LL;
  *(_BYTE *)(v28 + 8) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl) = 2;
  uint64_t v29 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude;
  *(void *)uint64_t v29 = 0LL;
  *(_BYTE *)(v29 + 8) = 1;
  uint64_t v30 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy;
  *(void *)uint64_t v30 = 0LL;
  *(_BYTE *)(v30 + 8) = 1;
  *(void *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport) = &_swiftEmptyArrayStorage;
  uint64_t v31 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent) = 3;
  uint64_t v32 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56LL))( v31,  1LL,  1LL,  v32);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState) = 3;
  uint64_t v34 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor;
  *(void *)uint64_t v34 = 0LL;
  *(_BYTE *)(v34 + 8) = 1;
  uint64_t v35 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor;
  *(void *)uint64_t v35 = 0LL;
  *(_BYTE *)(v35 + 8) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType) = 4;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching) = 2;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy) = 3;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType) = 5;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp) = 2;
  qword_10037A548 = v1;
  return result;
}

uint64_t sub_1000CD434()
{
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport));
  sub_100015764( v0 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude,  &qword_100355558);
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_1000CD4F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v8 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v8)) & 1) == 0)
  {
    uint64_t v9 = *(void *)(v3 + v8);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_10010CC4C(v12);
    swift_release(v9);
    uint64_t v13 = *(void *)(v5 + v8);
    *(void *)(v5 + v8) = v11;
    swift_release(v13);
  }

  uint64_t v14 = *(void *)(v5 + v8);
  swift_retain(v14);
  uint64_t v15 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v17 = v4;
  if (!v4)
  {
    uint64_t v42 = v14 + 114;
    while ((v16 & 1) == 0)
    {
      switch(v15)
      {
        case 1LL:
          swift_beginAccess(v14 + 16, v41, 33LL, 0LL);
          uint64_t v19 = v14 + 16;
          goto LABEL_65;
        case 2LL:
          uint64_t v20 = v14 + 32;
          goto LABEL_64;
        case 3LL:
          uint64_t v20 = v14 + 48;
          goto LABEL_64;
        case 4LL:
          uint64_t v20 = v14 + 64;
          goto LABEL_64;
        case 5LL:
          uint64_t v20 = v14 + 80;
          goto LABEL_64;
        case 6LL:
          uint64_t v21 = v14 + 92;
          goto LABEL_27;
        case 7LL:
          uint64_t v21 = v14 + 100;
          goto LABEL_27;
        case 8LL:
          uint64_t v21 = v14 + 108;
          goto LABEL_27;
        case 9LL:
          uint64_t v22 = v14 + 113;
          goto LABEL_73;
        case 10LL:
          uint64_t v23 = v42;
          swift_beginAccess(v42, v41, 33LL, 0LL);
          unint64_t v24 = sub_10014A400();
          uint64_t v25 = &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType;
          goto LABEL_70;
        case 11LL:
          uint64_t v26 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
          goto LABEL_45;
        case 12LL:
          uint64_t v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse;
          goto LABEL_63;
        case 13LL:
          uint64_t v28 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay;
          goto LABEL_22;
        case 14LL:
          uint64_t v28 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass;
LABEL_22:
          uint64_t v29 = v14 + v28;
          swift_beginAccess(v14 + v28, v41, 33LL, 0LL);
          uint64_t v30 = v17;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v29, a2, a3);
          goto LABEL_74;
        case 15LL:
          uint64_t v31 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted;
          goto LABEL_72;
        case 16LL:
          uint64_t v32 = v14
              + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
          swift_beginAccess( v14 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure,  v41,  33LL,  0LL);
          uint64_t v33 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0LL);
          uint64_t v34 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample;
          uint64_t v35 = &qword_1003563A0;
          uint64_t v36 = &unk_1002C05F8;
          goto LABEL_59;
        case 17LL:
          uint64_t v23 = v14
              + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel;
          swift_beginAccess( v14 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel,  v41,  33LL,  0LL);
          unint64_t v24 = sub_10014A3BC();
          uint64_t v25 = &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType;
          goto LABEL_70;
        case 18LL:
          uint64_t v21 = v14
              + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
LABEL_27:
          swift_beginAccess(v21, v41, 33LL, 0LL);
          uint64_t v30 = v17;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v21, a2, a3);
          goto LABEL_74;
        case 19LL:
          uint64_t v26 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
          goto LABEL_45;
        case 20LL:
          uint64_t v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy;
          goto LABEL_63;
        case 21LL:
          uint64_t v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime;
          goto LABEL_63;
        case 22LL:
          uint64_t v23 = v14
              + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice;
          swift_beginAccess( v14 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice,  v41,  33LL,  0LL);
          unint64_t v24 = sub_10014A378();
          uint64_t v25 = &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType;
          goto LABEL_70;
        case 23LL:
          uint64_t v31 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates;
          goto LABEL_72;
        case 24LL:
          uint64_t v32 = v14
              + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
          swift_beginAccess( v14 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData,  v41,  33LL,  0LL);
          uint64_t v33 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0LL);
          uint64_t v34 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData;
          uint64_t v35 = &qword_100356388;
          uint64_t v36 = &unk_1002C0490;
          goto LABEL_59;
        case 25LL:
          uint64_t v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope;
          goto LABEL_63;
        case 26LL:
          uint64_t v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope;
          goto LABEL_63;
        case 27LL:
          uint64_t v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude;
          goto LABEL_63;
        case 28LL:
          uint64_t v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty;
          goto LABEL_63;
        case 29LL:
          uint64_t v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude;
          goto LABEL_63;
        case 30LL:
          uint64_t v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty;
          goto LABEL_63;
        case 31LL:
          uint64_t v31 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed;
          goto LABEL_72;
        case 32LL:
          uint64_t v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy;
          goto LABEL_63;
        case 33LL:
          uint64_t v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy;
          goto LABEL_63;
        case 34LL:
          uint64_t v31 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused;
          goto LABEL_72;
        case 35LL:
          uint64_t v26 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
LABEL_45:
          uint64_t v32 = v14 + v26;
          swift_beginAccess(v14 + v26, v41, 33LL, 0LL);
          uint64_t v33 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
          uint64_t v34 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate;
          uint64_t v35 = &qword_100356360;
          uint64_t v36 = &unk_1002C0170;
          goto LABEL_59;
        case 36LL:
          uint64_t v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy;
          goto LABEL_63;
        case 37LL:
          uint64_t v23 = v14
              + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame;
          swift_beginAccess( v14 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame,  v41,  33LL,  0LL);
          unint64_t v24 = sub_10014AA60();
          uint64_t v25 = &type metadata for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType;
          goto LABEL_70;
        case 38LL:
          uint64_t v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse;
          goto LABEL_63;
        case 39LL:
          uint64_t v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy;
          goto LABEL_63;
        case 40LL:
          uint64_t v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError;
          goto LABEL_63;
        case 41LL:
          uint64_t v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude;
          goto LABEL_63;
        case 42LL:
          uint64_t v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy;
          goto LABEL_63;
        case 43LL:
          uint64_t v31 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl;
          goto LABEL_72;
        case 44LL:
          uint64_t v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude;
          goto LABEL_63;
        case 45LL:
          uint64_t v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy;
          goto LABEL_63;
        case 46LL:
          uint64_t v37 = v14
              + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport;
          swift_beginAccess( v14 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport,  v41,  33LL,  0LL);
          uint64_t v38 = type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0LL);
          uint64_t v39 = sub_10000FD98( &qword_1003563B8,  type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo,  (uint64_t)&unk_1002C0760);
          uint64_t v30 = v17;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v37, v38, v39, a2, a3);
          goto LABEL_74;
        case 47LL:
          uint64_t v23 = v14
              + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent;
          swift_beginAccess( v14 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent,  v41,  33LL,  0LL);
          unint64_t v24 = sub_10014A334();
          uint64_t v25 = &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent;
          goto LABEL_70;
        case 48LL:
          uint64_t v32 = v14
              + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
          swift_beginAccess( v14 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude,  v41,  33LL,  0LL);
          uint64_t v33 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0LL);
          uint64_t v34 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo;
          uint64_t v35 = (unint64_t *)&unk_1003563E0;
          uint64_t v36 = &unk_1002C0B48;
LABEL_59:
          uint64_t v40 = sub_10000FD98(v35, v34, (uint64_t)v36);
          uint64_t v30 = v17;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v32, v33, v40, a2, a3);
          goto LABEL_74;
        case 49LL:
          uint64_t v23 = v14
              + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState;
          swift_beginAccess( v14 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState,  v41,  33LL,  0LL);
          unint64_t v24 = sub_10014A2F0();
          uint64_t v25 = &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType;
          goto LABEL_70;
        case 50LL:
          uint64_t v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor;
          goto LABEL_63;
        case 51LL:
          uint64_t v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor;
LABEL_63:
          uint64_t v20 = v14 + v27;
LABEL_64:
          swift_beginAccess(v20, v41, 33LL, 0LL);
          uint64_t v19 = v20;
LABEL_65:
          uint64_t v30 = v17;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v19, a2, a3);
          goto LABEL_74;
        case 52LL:
          uint64_t v23 = v14
              + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType;
          swift_beginAccess( v14 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType,  v41,  33LL,  0LL);
          unint64_t v24 = sub_10014A2AC();
          uint64_t v25 = &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType;
          goto LABEL_70;
        case 53LL:
          uint64_t v31 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching;
          goto LABEL_72;
        case 54LL:
          uint64_t v23 = v14
              + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy;
          swift_beginAccess( v14 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy,  v41,  33LL,  0LL);
          unint64_t v24 = sub_10014A268();
          uint64_t v25 = &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy;
          goto LABEL_70;
        case 55LL:
          uint64_t v23 = v14
              + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType;
          swift_beginAccess( v14 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType,  v41,  33LL,  0LL);
          unint64_t v24 = sub_10014A994();
          uint64_t v25 = &type metadata for CLP_LogEntry_PrivateData_BatchedLocationFixType;
LABEL_70:
          uint64_t v30 = v17;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v23, v25, v24, a2, a3);
          goto LABEL_74;
        case 56LL:
          uint64_t v31 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp;
LABEL_72:
          uint64_t v22 = v14 + v31;
LABEL_73:
          swift_beginAccess(v22, v41, 33LL, 0LL);
          uint64_t v30 = v17;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v22, a2, a3);
LABEL_74:
          uint64_t v17 = v30;
          swift_endAccess(v41);
          break;
        default:
          break;
      }

      uint64_t v15 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return swift_release(v14);
}

uint64_t sub_1000CDCC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL) + 20));
  swift_retain(v9);
  swift_beginAccess(v9 + 16, v73, 0LL, 0LL);
  if ((*(_BYTE *)(v9 + 24) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1LL, a2, a3, *(double *)(v9 + 16));
  }
  if (v4) {
    return swift_release(v9);
  }
  swift_beginAccess(v9 + 32, v74, 0LL, 0LL);
  if ((*(_BYTE *)(v9 + 40) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2LL, a2, a3, *(double *)(v9 + 32));
  }
  swift_beginAccess(v9 + 48, v75, 0LL, 0LL);
  if ((*(_BYTE *)(v9 + 56) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3LL, a2, a3, *(double *)(v9 + 48));
  }
  swift_beginAccess(v9 + 64, v76, 0LL, 0LL);
  if ((*(_BYTE *)(v9 + 72) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(4LL, a2, a3, *(double *)(v9 + 64));
  }
  swift_beginAccess(v9 + 80, v121, 0LL, 0LL);
  if ((*(_BYTE *)(v9 + 88) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(5LL, a2, a3, *(double *)(v9 + 80));
  }
  swift_beginAccess(v9 + 92, v120, 0LL, 0LL);
  if ((*(_BYTE *)(v9 + 96) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(6LL, a2, a3, *(float *)(v9 + 92));
  }
  swift_beginAccess(v9 + 100, v119, 0LL, 0LL);
  if ((*(_BYTE *)(v9 + 104) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(7LL, a2, a3, *(float *)(v9 + 100));
  }
  swift_beginAccess(v9 + 108, v118, 0LL, 0LL);
  if ((*(_BYTE *)(v9 + 112) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(8LL, a2, a3, *(float *)(v9 + 108));
  }
  swift_beginAccess(v9 + 113, v117, 0LL, 0LL);
  int v10 = *(unsigned __int8 *)(v9 + 113);
  if (v10 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v10 & 1, 9LL, a2, a3);
  }
  swift_beginAccess(v9 + 114, v116, 0LL, 0LL);
  if (*(_BYTE *)(v9 + 114) != 4)
  {
    v115[0] = *(_BYTE *)(v9 + 114);
    unint64_t v11 = sub_10014A400();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v115,  10LL,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType,  v11,  a2,  a3);
  }

  sub_1000CED1C(v9, a1, a2, a3);
  uint64_t v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse,  v115,  0LL,  0LL);
  if ((*(_BYTE *)(v12 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(12LL, a2, a3, *(double *)v12);
  }
  uint64_t v13 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay,  v114,  0LL,  0LL);
  if ((v13[1] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v13, 13LL, a2, a3);
  }
  uint64_t v14 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass,  v113,  0LL,  0LL);
  if ((v14[1] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v14, 14LL, a2, a3);
  }
  uint64_t v15 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted,  v112,  0LL,  0LL);
  int v16 = *v15;
  if (v16 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v16 & 1, 15LL, a2, a3);
  }
  sub_1000CEEA8(v9, a1, a2, a3);
  uint64_t v17 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel,  v111,  0LL,  0LL);
  if (*v17 != 4)
  {
    v110[0] = *v17;
    unint64_t v18 = sub_10014A3BC();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v110,  17LL,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType,  v18,  a2,  a3);
  }

  uint64_t v19 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation,  v110,  0LL,  0LL);
  if ((*(_BYTE *)(v19 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(18LL, a2, a3, *(float *)v19);
  }
  sub_1000CF034(v9, a1, a2, a3);
  uint64_t v20 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy,  v109,  0LL,  0LL);
  if ((*(_BYTE *)(v20 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(20LL, a2, a3, *(double *)v20);
  }
  uint64_t v21 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime,  v108,  0LL,  0LL);
  if ((*(_BYTE *)(v21 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(21LL, a2, a3, *(double *)v21);
  }
  uint64_t v22 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice,  v107,  0LL,  0LL);
  if (*v22 != 3)
  {
    v106[0] = *v22;
    unint64_t v23 = sub_10014A378();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v106,  22LL,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType,  v23,  a2,  a3);
  }

  unint64_t v24 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates,  v106,  0LL,  0LL);
  int v25 = *v24;
  if (v25 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v25 & 1, 23LL, a2, a3);
  }
  sub_1000CF1C0(v9, a1, a2, a3);
  uint64_t v26 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope,  v105,  0LL,  0LL);
  if ((*(_BYTE *)(v26 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(25LL, a2, a3, *(double *)v26);
  }
  uint64_t v27 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope,  v104,  0LL,  0LL);
  if ((*(_BYTE *)(v27 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(26LL, a2, a3, *(double *)v27);
  }
  uint64_t v28 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude,  v103,  0LL,  0LL);
  if ((*(_BYTE *)(v28 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(27LL, a2, a3, *(double *)v28);
  }
  uint64_t v29 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty,  v102,  0LL,  0LL);
  if ((*(_BYTE *)(v29 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(28LL, a2, a3, *(double *)v29);
  }
  uint64_t v30 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude,  v101,  0LL,  0LL);
  if ((*(_BYTE *)(v30 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(29LL, a2, a3, *(double *)v30);
  }
  uint64_t v31 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty,  v100,  0LL,  0LL);
  if ((*(_BYTE *)(v31 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(30LL, a2, a3, *(double *)v31);
  }
  uint64_t v32 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed,  v99,  0LL,  0LL);
  int v33 = *v32;
  if (v33 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v33 & 1, 31LL, a2, a3);
  }
  uint64_t v34 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy,  v98,  0LL,  0LL);
  if ((*(_BYTE *)(v34 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(32LL, a2, a3, *(double *)v34);
  }
  uint64_t v35 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy,  v97,  0LL,  0LL);
  if ((*(_BYTE *)(v35 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(33LL, a2, a3, *(double *)v35);
  }
  uint64_t v36 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused,  v96,  0LL,  0LL);
  int v37 = *v36;
  if (v37 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v37 & 1, 34LL, a2, a3);
  }
  sub_1000CF34C(v9, a1, a2, a3);
  uint64_t v38 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy,  v95,  0LL,  0LL);
  if ((*(_BYTE *)(v38 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(36LL, a2, a3, *(double *)v38);
  }
  uint64_t v39 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame,  v94,  0LL,  0LL);
  if (*v39 != 3)
  {
    v93[0] = *v39;
    unint64_t v40 = sub_10014AA60();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v93,  37LL,  &type metadata for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType,  v40,  a2,  a3);
  }

  uint64_t v41 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse,  v93,  0LL,  0LL);
  if ((*(_BYTE *)(v41 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(38LL, a2, a3, *(double *)v41);
  }
  uint64_t v42 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy,  v92,  0LL,  0LL);
  if ((*(_BYTE *)(v42 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(39LL, a2, a3, *(double *)v42);
  }
  uint64_t v43 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError,  v91,  0LL,  0LL);
  if ((*(_BYTE *)(v43 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(40LL, a2, a3, *(double *)v43);
  }
  uint64_t v44 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude,  v90,  0LL,  0LL);
  if ((*(_BYTE *)(v44 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(41LL, a2, a3, *(double *)v44);
  }
  uint64_t v45 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy,  v89,  0LL,  0LL);
  if ((*(_BYTE *)(v45 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(42LL, a2, a3, *(double *)v45);
  }
  uint64_t v46 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl,  v88,  0LL,  0LL);
  int v47 = *v46;
  if (v47 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v47 & 1, 43LL, a2, a3);
  }
  uint64_t v48 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude,  v87,  0LL,  0LL);
  if ((*(_BYTE *)(v48 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(44LL, a2, a3, *(double *)v48);
  }
  uint64_t v49 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy,  v86,  0LL,  0LL);
  if ((*(_BYTE *)(v49 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(45LL, a2, a3, *(double *)v49);
  }
  uint64_t v50 = (uint64_t *)(v9
                  + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport,  &v72,  0LL,  0LL);
  uint64_t v51 = *v50;
  if (*(void *)(v51 + 16))
  {
    uint64_t v52 = type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0LL);
    uint64_t v53 = sub_10000FD98( &qword_1003563B8,  type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo,  (uint64_t)&unk_1002C0760);
    uint64_t v54 = swift_bridgeObjectRetain(v51);
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v54, 46LL, v52, v53, a2, a3);
    swift_bridgeObjectRelease(v51);
  }

  uint64_t v55 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent,  v85,  0LL,  0LL);
  if (*v55 != 3)
  {
    v84[0] = *v55;
    unint64_t v56 = sub_10014A334();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v84,  47LL,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent,  v56,  a2,  a3);
  }

  sub_1000CF4D8(v9, a1, a2, a3);
  double v57 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState,  v84,  0LL,  0LL);
  if (*v57 != 3)
  {
    v83[0] = *v57;
    unint64_t v58 = sub_10014A2F0();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v83,  49LL,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType,  v58,  a2,  a3);
  }

  uint64_t v59 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor,  v83,  0LL,  0LL);
  if ((*(_BYTE *)(v59 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(50LL, a2, a3, *(double *)v59);
  }
  uint64_t v60 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor,  v82,  0LL,  0LL);
  if ((*(_BYTE *)(v60 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(51LL, a2, a3, *(double *)v60);
  }
  uint64_t v61 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType,  v81,  0LL,  0LL);
  if (*v61 != 4)
  {
    v80[0] = *v61;
    unint64_t v62 = sub_10014A2AC();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v80,  52LL,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType,  v62,  a2,  a3);
  }

  uint64_t v63 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching,  v80,  0LL,  0LL);
  int v64 = *v63;
  if (v64 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v64 & 1, 53LL, a2, a3);
  }
  uint64_t v65 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy,  v79,  0LL,  0LL);
  if (*v65 != 3)
  {
    v78[0] = *v65;
    unint64_t v66 = sub_10014A268();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v78,  54LL,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy,  v66,  a2,  a3);
  }

  uint64_t v67 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType,  v78,  0LL,  0LL);
  if (*v67 != 5)
  {
    v77[0] = *v67;
    unint64_t v68 = sub_10014A994();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v77,  55LL,  &type metadata for CLP_LogEntry_PrivateData_BatchedLocationFixType,  v68,  a2,  a3);
  }

  uint64_t v69 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp,  v77,  0LL,  0LL);
  int v70 = *v69;
  if (v70 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v70 & 1, 56LL, a2, a3);
  }
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000CED1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355540);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355540);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  uint64_t v15 = sub_10000FD98( &qword_100356360,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate,  (uint64_t)&unk_1002C0170);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 11LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_1000CEEA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355548);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355548);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
  uint64_t v15 = sub_10000FD98( &qword_1003563A0,  type metadata accessor for CLP_LogEntry_PrivateData_PressureSample,  (uint64_t)&unk_1002C05F8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 16LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t sub_1000CF034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355540);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355540);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  uint64_t v15 = sub_10000FD98( &qword_100356360,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate,  (uint64_t)&unk_1002C0170);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 19LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_1000CF1C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355550);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355550);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
  uint64_t v15 = sub_10000FD98( &qword_100356388,  type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData,  (uint64_t)&unk_1002C0490);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 24LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t sub_1000CF34C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355540);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355540);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  uint64_t v15 = sub_10000FD98( &qword_100356360,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate,  (uint64_t)&unk_1002C0170);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 35LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_1000CF4D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355558);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355558);
  sub_100003E68( (uint64_t)v8,  (uint64_t)v12,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
  uint64_t v15 = sub_10000FD98( &qword_1003563E0,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo,  (uint64_t)&unk_1002C0B48);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 48LL, v9, v15, a3, v18);
  return sub_100004090( (uint64_t)v12,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t sub_1000CF664(uint64_t a1, uint64_t a2)
{
  return sub_100065AC0(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, sub_1000CF68C) & 1;
}

uint64_t sub_1000CF68C(uint64_t a1, uint64_t a2)
{
  uint64_t v327 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0LL);
  uint64_t v324 = *(void *)(v327 - 8);
  __chkstk_darwin(v327);
  uint64_t v328 = (uint64_t)&v310 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v323 = sub_100003A0C(&qword_10035C4F8);
  __chkstk_darwin(v323);
  uint64_t v329 = (uint64_t)&v310 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100003A0C(&qword_100355558);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v326 = (uint64_t)&v310 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v325 = (uint64_t)&v310 - v9;
  uint64_t v317 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0LL);
  uint64_t v314 = *(void *)(v317 - 8);
  __chkstk_darwin(v317);
  uint64_t v318 = (uint64_t)&v310 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v313 = sub_100003A0C(&qword_10035C500);
  __chkstk_darwin(v313);
  uint64_t v319 = (uint64_t)&v310 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100003A0C(&qword_100355550);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v316 = (uint64_t)&v310 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v315 = (uint64_t)&v310 - v15;
  uint64_t v336 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0LL);
  uint64_t v16 = *(void *)(v336 - 8);
  __chkstk_darwin(v336);
  uint64_t v333 = (uint64_t)&v310 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100003A0C(&qword_10035C508);
  __chkstk_darwin(v18);
  uint64_t v337 = (uint64_t)&v310 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_100003A0C(&qword_100355548);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v334 = (uint64_t)&v310 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v335 = (uint64_t)&v310 - v23;
  uint64_t v340 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  uint64_t v24 = *(void *)(v340 - 8);
  __chkstk_darwin(v340);
  uint64_t v338 = (uint64_t)&v310 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v339 = sub_100003A0C(&qword_10035C408);
  uint64_t v26 = __chkstk_darwin(v339);
  uint64_t v322 = (uint64_t)&v310 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v332 = (uint64_t)&v310 - v29;
  __chkstk_darwin(v28);
  uint64_t v31 = (char *)&v310 - v30;
  uint64_t v32 = sub_100003A0C(&qword_100355540);
  uint64_t v33 = __chkstk_darwin(v32);
  uint64_t v321 = (uint64_t)&v310 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v320 = (uint64_t)&v310 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v330 = (uint64_t)&v310 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v331 = (uint64_t)&v310 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v43 = (char *)&v310 - v42;
  __chkstk_darwin(v41);
  uint64_t v45 = (char *)&v310 - v44;
  swift_beginAccess(a1 + 16, v454, 0LL, 0LL);
  double v46 = *(double *)(a1 + 16);
  uint64_t v342 = a1;
  LOBYTE(a1) = *(_BYTE *)(a1 + 24);
  swift_beginAccess(a2 + 16, v453, 0LL, 0LL);
  uint64_t v341 = a2;
  char v47 = *(_BYTE *)(a2 + 24);
  if ((a1 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 24)) {
      return 0LL;
    }
  }

  else
  {
    if ((v47 & 1) != 0) {
      return 0LL;
    }
  }

  uint64_t v48 = v342;
  swift_beginAccess(v342 + 32, v452, 0LL, 0LL);
  double v49 = *(double *)(v48 + 32);
  LOBYTE(v48) = *(_BYTE *)(v48 + 40);
  uint64_t v50 = v341;
  uint64_t v51 = (double *)(v341 + 32);
  swift_beginAccess(v341 + 32, v451, 0LL, 0LL);
  char v52 = *(_BYTE *)(v50 + 40);
  if ((v48 & 1) != 0)
  {
    if (!*(_BYTE *)(v50 + 40)) {
      return 0LL;
    }
  }

  else
  {
    if (v49 != *v51) {
      char v52 = 1;
    }
    if ((v52 & 1) != 0) {
      return 0LL;
    }
  }

  uint64_t v53 = v342;
  swift_beginAccess(v342 + 48, v450, 0LL, 0LL);
  double v54 = *(double *)(v53 + 48);
  LOBYTE(v53) = *(_BYTE *)(v53 + 56);
  uint64_t v55 = v341;
  unint64_t v56 = (double *)(v341 + 48);
  swift_beginAccess(v341 + 48, v449, 0LL, 0LL);
  char v57 = *(_BYTE *)(v55 + 56);
  if ((v53 & 1) != 0)
  {
    if (!*(_BYTE *)(v55 + 56)) {
      return 0LL;
    }
  }

  else
  {
    if (v54 != *v56) {
      char v57 = 1;
    }
    if ((v57 & 1) != 0) {
      return 0LL;
    }
  }

  uint64_t v58 = v342;
  swift_beginAccess(v342 + 64, &v448, 0LL, 0LL);
  double v59 = *(double *)(v58 + 64);
  LOBYTE(v58) = *(_BYTE *)(v58 + 72);
  uint64_t v60 = v341;
  uint64_t v61 = (double *)(v341 + 64);
  swift_beginAccess(v341 + 64, &v447, 0LL, 0LL);
  char v62 = *(_BYTE *)(v60 + 72);
  if ((v58 & 1) != 0)
  {
    if (!*(_BYTE *)(v60 + 72)) {
      return 0LL;
    }
  }

  else
  {
    if (v59 != *v61) {
      char v62 = 1;
    }
    if ((v62 & 1) != 0) {
      return 0LL;
    }
  }

  uint64_t v63 = v342;
  swift_beginAccess(v342 + 80, &v446, 0LL, 0LL);
  double v64 = *(double *)(v63 + 80);
  LOBYTE(v63) = *(_BYTE *)(v63 + 88);
  uint64_t v65 = v341;
  unint64_t v66 = (double *)(v341 + 80);
  swift_beginAccess(v341 + 80, &v445, 0LL, 0LL);
  char v67 = *(_BYTE *)(v65 + 88);
  if ((v63 & 1) != 0)
  {
    if (!*(_BYTE *)(v65 + 88)) {
      return 0LL;
    }
  }

  else
  {
    if (v64 != *v66) {
      char v67 = 1;
    }
    if ((v67 & 1) != 0) {
      return 0LL;
    }
  }

  uint64_t v68 = v342;
  swift_beginAccess(v342 + 92, &v444, 0LL, 0LL);
  float v69 = *(float *)(v68 + 92);
  LOBYTE(v68) = *(_BYTE *)(v68 + 96);
  uint64_t v70 = v341;
  uint64_t v71 = (float *)(v341 + 92);
  swift_beginAccess(v341 + 92, &v443, 0LL, 0LL);
  char v72 = *(_BYTE *)(v70 + 96);
  if ((v68 & 1) != 0)
  {
    if (!*(_BYTE *)(v70 + 96)) {
      return 0LL;
    }
  }

  else
  {
    if (v69 != *v71) {
      char v72 = 1;
    }
    if ((v72 & 1) != 0) {
      return 0LL;
    }
  }

  uint64_t v73 = v342;
  swift_beginAccess(v342 + 100, &v442, 0LL, 0LL);
  float v74 = *(float *)(v73 + 100);
  LOBYTE(v73) = *(_BYTE *)(v73 + 104);
  uint64_t v75 = v341;
  uint64_t v76 = (float *)(v341 + 100);
  swift_beginAccess(v341 + 100, &v441, 0LL, 0LL);
  char v77 = *(_BYTE *)(v75 + 104);
  if ((v73 & 1) != 0)
  {
    if (!*(_BYTE *)(v75 + 104)) {
      return 0LL;
    }
  }

  else
  {
    if (v74 != *v76) {
      char v77 = 1;
    }
    if ((v77 & 1) != 0) {
      return 0LL;
    }
  }

  uint64_t v78 = v342;
  swift_beginAccess(v342 + 108, &v440, 0LL, 0LL);
  float v79 = *(float *)(v78 + 108);
  LOBYTE(v78) = *(_BYTE *)(v78 + 112);
  uint64_t v80 = v341;
  char v81 = (float *)(v341 + 108);
  swift_beginAccess(v341 + 108, &v439, 0LL, 0LL);
  char v82 = *(_BYTE *)(v80 + 112);
  if ((v78 & 1) != 0)
  {
    if (!*(_BYTE *)(v80 + 112)) {
      return 0LL;
    }
  }

  else
  {
    if (v79 != *v81) {
      char v82 = 1;
    }
    if ((v82 & 1) != 0) {
      return 0LL;
    }
  }

  uint64_t v83 = v342;
  swift_beginAccess(v342 + 113, &v438, 0LL, 0LL);
  int v84 = *(unsigned __int8 *)(v83 + 113);
  uint64_t v85 = v341;
  swift_beginAccess(v341 + 113, &v437, 0LL, 0LL);
  int v86 = *(unsigned __int8 *)(v85 + 113);
  if (v84 == 2)
  {
    if (v86 != 2) {
      return 0LL;
    }
  }

  else if (v86 == 2 || ((((v86 & 1) == 0) ^ v84) & 1) == 0)
  {
    return 0LL;
  }

  uint64_t v87 = v342;
  swift_beginAccess(v342 + 114, &v436, 0LL, 0LL);
  int v88 = *(unsigned __int8 *)(v87 + 114);
  uint64_t v89 = v341;
  swift_beginAccess(v341 + 114, &v435, 0LL, 0LL);
  int v90 = *(unsigned __int8 *)(v89 + 114);
  if (v88 == 4)
  {
    if (v90 != 4) {
      return 0LL;
    }
LABEL_59:
    uint64_t v92 = v342
        + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
    swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate,  &v434,  0LL,  0LL);
    sub_10000E6C0(v92, (uint64_t)v45, &qword_100355540);
    uint64_t v93 = v341;
    uint64_t v94 = v341
        + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
    swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate,  &v433,  0LL,  0LL);
    uint64_t v95 = (uint64_t)&v31[*(int *)(v339 + 48)];
    sub_10000E6C0((uint64_t)v45, (uint64_t)v31, &qword_100355540);
    uint64_t v312 = v95;
    sub_10000E6C0(v94, v95, &qword_100355540);
    uint64_t v96 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
    uint64_t v97 = v340;
    if (v96((uint64_t)v31, 1LL, v340) == 1)
    {
      uint64_t v98 = v342;
      swift_retain(v342);
      swift_retain(v93);
      sub_100015764((uint64_t)v45, &qword_100355540);
      if (v96(v312, 1LL, v97) == 1)
      {
        v311 = v96;
        sub_100015764((uint64_t)v31, &qword_100355540);
        goto LABEL_67;
      }
    }

    else
    {
      sub_10000E6C0((uint64_t)v31, (uint64_t)v43, &qword_100355540);
      uint64_t v99 = v312;
      if (v96(v312, 1LL, v97) != 1)
      {
        v311 = v96;
        uint64_t v101 = v338;
        sub_100003E68(v99, v338, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
        uint64_t v98 = v342;
        swift_retain(v342);
        uint64_t v93 = v341;
        swift_retain(v341);
        LODWORD(v312) = sub_10011F4C0( (uint64_t)v43,  v101,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
        sub_100004090(v101, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
        sub_100015764((uint64_t)v45, &qword_100355540);
        sub_100004090((uint64_t)v43, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
        sub_100015764((uint64_t)v31, &qword_100355540);
        if ((v312 & 1) != 0)
        {
LABEL_67:
          uint64_t v102 = v98
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse;
          swift_beginAccess( v98 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse,  &v432,  0LL,  0LL);
          double v103 = *(double *)v102;
          char v104 = *(_BYTE *)(v102 + 8);
          uint64_t v105 = v93
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse;
          swift_beginAccess( v93 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse,  &v431,  0LL,  0LL);
          if ((v104 & 1) != 0)
          {
            if ((*(_BYTE *)(v105 + 8) & 1) == 0) {
              goto LABEL_94;
            }
          }

          else if ((*(_BYTE *)(v105 + 8) & 1) != 0 || v103 != *(double *)v105)
          {
            goto LABEL_94;
          }

          uint64_t v106 = (int *)(v342
                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay);
          swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay,  &v430,  0LL,  0LL);
          int v107 = *v106;
          char v108 = *((_BYTE *)v106 + 4);
          uint64_t v109 = v341
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay;
          swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay,  &v429,  0LL,  0LL);
          if ((v108 & 1) != 0)
          {
            if ((*(_BYTE *)(v109 + 4) & 1) == 0) {
              goto LABEL_94;
            }
          }

          else if ((*(_BYTE *)(v109 + 4) & 1) != 0 || v107 != *(_DWORD *)v109)
          {
            goto LABEL_94;
          }

          int v110 = (int *)(v342
                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass);
          swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass,  &v428,  0LL,  0LL);
          int v111 = *v110;
          char v112 = *((_BYTE *)v110 + 4);
          uint64_t v113 = v341
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass;
          swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass,  &v427,  0LL,  0LL);
          if ((v112 & 1) != 0)
          {
            if ((*(_BYTE *)(v113 + 4) & 1) == 0) {
              goto LABEL_94;
            }
          }

          else if ((*(_BYTE *)(v113 + 4) & 1) != 0 || v111 != *(_DWORD *)v113)
          {
            goto LABEL_94;
          }

          uint64_t v114 = (unsigned __int8 *)(v342
                                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
          swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted,  &v426,  0LL,  0LL);
          int v115 = *v114;
          uint64_t v116 = (unsigned __int8 *)(v341
                                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
          swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted,  &v425,  0LL,  0LL);
          int v117 = *v116;
          if (v115 == 2)
          {
            if (v117 != 2) {
              goto LABEL_94;
            }
          }

          else if (v117 == 2 || ((((v117 & 1) == 0) ^ v115) & 1) == 0)
          {
            goto LABEL_94;
          }

          uint64_t v118 = v342
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
          swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure,  &v424,  0LL,  0LL);
          uint64_t v119 = v335;
          sub_10000E6C0(v118, v335, &qword_100355548);
          uint64_t v120 = v341
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
          swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure,  &v423,  0LL,  0LL);
          uint64_t v121 = v337;
          uint64_t v122 = v337 + *(int *)(v18 + 48);
          sub_10000E6C0(v119, v337, &qword_100355548);
          sub_10000E6C0(v120, v122, &qword_100355548);
          uint64_t v123 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
          if (v123(v121, 1LL, v336) == 1)
          {
            sub_100015764(v335, &qword_100355548);
            if (v123(v122, 1LL, v336) == 1)
            {
              sub_100015764(v337, &qword_100355548);
              goto LABEL_99;
            }
          }

          else
          {
            sub_10000E6C0(v337, v334, &qword_100355548);
            if (v123(v122, 1LL, v336) != 1)
            {
              uint64_t v126 = v333;
              sub_100003E68(v122, v333, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
              uint64_t v127 = v334;
              char v128 = sub_10011F4C0(v334, v126, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
              sub_100004090(v126, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
              sub_100015764(v335, &qword_100355548);
              sub_100004090(v127, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
              sub_100015764(v337, &qword_100355548);
              if ((v128 & 1) == 0) {
                goto LABEL_94;
              }
LABEL_99:
              uint64_t v129 = (unsigned __int8 *)(v342
                                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
              swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel,  &v422,  0LL,  0LL);
              int v130 = *v129;
              uint64_t v131 = (unsigned __int8 *)(v341
                                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
              swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel,  &v421,  0LL,  0LL);
              int v132 = *v131;
              if (v130 == 4)
              {
                if (v132 != 4) {
                  goto LABEL_94;
                }
              }

              else if (v132 == 4 || v130 != v132)
              {
                goto LABEL_94;
              }

              uint64_t v133 = v342
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
              swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation,  &v420,  0LL,  0LL);
              float v134 = *(float *)v133;
              char v135 = *(_BYTE *)(v133 + 4);
              uint64_t v136 = v341
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
              swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation,  &v419,  0LL,  0LL);
              if ((v135 & 1) != 0)
              {
                if ((*(_BYTE *)(v136 + 4) & 1) == 0) {
                  goto LABEL_94;
                }
              }

              else if ((*(_BYTE *)(v136 + 4) & 1) != 0 || v134 != *(float *)v136)
              {
                goto LABEL_94;
              }

              uint64_t v137 = v342
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
              swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate,  &v418,  0LL,  0LL);
              uint64_t v138 = v331;
              sub_10000E6C0(v137, v331, &qword_100355540);
              uint64_t v139 = v341
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
              swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate,  &v417,  0LL,  0LL);
              uint64_t v140 = v332;
              uint64_t v141 = v332 + *(int *)(v339 + 48);
              sub_10000E6C0(v138, v332, &qword_100355540);
              sub_10000E6C0(v139, v141, &qword_100355540);
              if (v311(v140, 1LL, v340) == 1)
              {
                sub_100015764(v331, &qword_100355540);
                if (v311(v141, 1LL, v340) == 1)
                {
                  sub_100015764(v332, &qword_100355540);
                  goto LABEL_116;
                }
              }

              else
              {
                sub_10000E6C0(v332, v330, &qword_100355540);
                if (v311(v141, 1LL, v340) != 1)
                {
                  uint64_t v142 = v338;
                  sub_100003E68( v141,  v338,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                  uint64_t v143 = v330;
                  char v144 = sub_10011F4C0( v330,  v142,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                  sub_100004090(v142, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                  sub_100015764(v331, &qword_100355540);
                  sub_100004090(v143, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                  sub_100015764(v332, &qword_100355540);
                  if ((v144 & 1) == 0) {
                    goto LABEL_94;
                  }
LABEL_116:
                  uint64_t v145 = v342
                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy;
                  swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy,  &v416,  0LL,  0LL);
                  double v146 = *(double *)v145;
                  char v147 = *(_BYTE *)(v145 + 8);
                  uint64_t v148 = v341
                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy;
                  swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy,  &v415,  0LL,  0LL);
                  if ((v147 & 1) != 0)
                  {
                    if ((*(_BYTE *)(v148 + 8) & 1) == 0) {
                      goto LABEL_94;
                    }
                  }

                  else if ((*(_BYTE *)(v148 + 8) & 1) != 0 || v146 != *(double *)v148)
                  {
                    goto LABEL_94;
                  }

                  uint64_t v149 = v342
                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime;
                  swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime,  &v414,  0LL,  0LL);
                  double v150 = *(double *)v149;
                  char v151 = *(_BYTE *)(v149 + 8);
                  uint64_t v152 = v341
                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime;
                  swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime,  &v413,  0LL,  0LL);
                  if ((v151 & 1) != 0)
                  {
                    if ((*(_BYTE *)(v152 + 8) & 1) == 0) {
                      goto LABEL_94;
                    }
                  }

                  else if ((*(_BYTE *)(v152 + 8) & 1) != 0 || v150 != *(double *)v152)
                  {
                    goto LABEL_94;
                  }

                  uint64_t v153 = (unsigned __int8 *)(v342
                                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
                  swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice,  &v412,  0LL,  0LL);
                  int v154 = *v153;
                  uint64_t v155 = (unsigned __int8 *)(v341
                                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
                  swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice,  &v411,  0LL,  0LL);
                  int v156 = *v155;
                  if (v154 == 3)
                  {
                    if (v156 != 3) {
                      goto LABEL_94;
                    }
                  }

                  else if (v156 == 3 || v154 != v156)
                  {
                    goto LABEL_94;
                  }

                  uint64_t v157 = (unsigned __int8 *)(v342
                                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
                  swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates,  &v410,  0LL,  0LL);
                  int v158 = *v157;
                  uint64_t v159 = (unsigned __int8 *)(v341
                                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
                  swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates,  &v409,  0LL,  0LL);
                  int v160 = *v159;
                  if (v158 == 2)
                  {
                    if (v160 != 2) {
                      goto LABEL_94;
                    }
                  }

                  else if (v160 == 2 || ((((v160 & 1) == 0) ^ v158) & 1) == 0)
                  {
                    goto LABEL_94;
                  }

                  uint64_t v161 = v342
                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
                  swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData,  &v408,  0LL,  0LL);
                  uint64_t v162 = v315;
                  sub_10000E6C0(v161, v315, &qword_100355550);
                  uint64_t v163 = v341
                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
                  swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData,  &v407,  0LL,  0LL);
                  uint64_t v164 = v319;
                  uint64_t v165 = v319 + *(int *)(v313 + 48);
                  sub_10000E6C0(v162, v319, &qword_100355550);
                  sub_10000E6C0(v163, v165, &qword_100355550);
                  v166 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v314 + 48);
                  if (v166(v164, 1LL, v317) == 1)
                  {
                    sub_100015764(v315, &qword_100355550);
                    if (v166(v165, 1LL, v317) == 1)
                    {
                      sub_100015764(v319, &qword_100355550);
                      goto LABEL_143;
                    }
                  }

                  else
                  {
                    sub_10000E6C0(v319, v316, &qword_100355550);
                    if (v166(v165, 1LL, v317) != 1)
                    {
                      uint64_t v167 = v318;
                      sub_100003E68(v165, v318, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
                      uint64_t v168 = v316;
                      char v169 = sub_10011FA34(v316, v167);
                      sub_100004090(v167, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
                      sub_100015764(v315, &qword_100355550);
                      sub_100004090(v168, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
                      sub_100015764(v319, &qword_100355550);
                      if ((v169 & 1) == 0) {
                        goto LABEL_94;
                      }
LABEL_143:
                      uint64_t v170 = v342
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope;
                      swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope,  &v406,  0LL,  0LL);
                      double v171 = *(double *)v170;
                      char v172 = *(_BYTE *)(v170 + 8);
                      uint64_t v173 = v341
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope;
                      swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope,  &v405,  0LL,  0LL);
                      if ((v172 & 1) != 0)
                      {
                        if ((*(_BYTE *)(v173 + 8) & 1) == 0) {
                          goto LABEL_94;
                        }
                      }

                      else if ((*(_BYTE *)(v173 + 8) & 1) != 0 || v171 != *(double *)v173)
                      {
                        goto LABEL_94;
                      }

                      uint64_t v174 = v342
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope;
                      swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope,  &v404,  0LL,  0LL);
                      double v175 = *(double *)v174;
                      char v176 = *(_BYTE *)(v174 + 8);
                      uint64_t v177 = v341
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope;
                      swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope,  &v403,  0LL,  0LL);
                      if ((v176 & 1) != 0)
                      {
                        if ((*(_BYTE *)(v177 + 8) & 1) == 0) {
                          goto LABEL_94;
                        }
                      }

                      else if ((*(_BYTE *)(v177 + 8) & 1) != 0 || v175 != *(double *)v177)
                      {
                        goto LABEL_94;
                      }

                      uint64_t v178 = v342
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude;
                      swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude,  &v402,  0LL,  0LL);
                      double v179 = *(double *)v178;
                      char v180 = *(_BYTE *)(v178 + 8);
                      uint64_t v181 = v341
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude;
                      swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude,  &v401,  0LL,  0LL);
                      if ((v180 & 1) != 0)
                      {
                        if ((*(_BYTE *)(v181 + 8) & 1) == 0) {
                          goto LABEL_94;
                        }
                      }

                      else if ((*(_BYTE *)(v181 + 8) & 1) != 0 || v179 != *(double *)v181)
                      {
                        goto LABEL_94;
                      }

                      uint64_t v182 = v342
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty;
                      swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty,  &v400,  0LL,  0LL);
                      double v183 = *(double *)v182;
                      char v184 = *(_BYTE *)(v182 + 8);
                      uint64_t v185 = v341
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty;
                      swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty,  &v399,  0LL,  0LL);
                      if ((v184 & 1) != 0)
                      {
                        if ((*(_BYTE *)(v185 + 8) & 1) == 0) {
                          goto LABEL_94;
                        }
                      }

                      else if ((*(_BYTE *)(v185 + 8) & 1) != 0 || v183 != *(double *)v185)
                      {
                        goto LABEL_94;
                      }

                      uint64_t v186 = v342
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude;
                      swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude,  &v398,  0LL,  0LL);
                      double v187 = *(double *)v186;
                      char v188 = *(_BYTE *)(v186 + 8);
                      uint64_t v189 = v341
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude;
                      swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude,  &v397,  0LL,  0LL);
                      if ((v188 & 1) != 0)
                      {
                        if ((*(_BYTE *)(v189 + 8) & 1) == 0) {
                          goto LABEL_94;
                        }
                      }

                      else if ((*(_BYTE *)(v189 + 8) & 1) != 0 || v187 != *(double *)v189)
                      {
                        goto LABEL_94;
                      }

                      uint64_t v190 = v342
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty;
                      swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty,  &v396,  0LL,  0LL);
                      double v191 = *(double *)v190;
                      char v192 = *(_BYTE *)(v190 + 8);
                      uint64_t v193 = v341
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty;
                      swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty,  &v395,  0LL,  0LL);
                      if ((v192 & 1) != 0)
                      {
                        if ((*(_BYTE *)(v193 + 8) & 1) == 0) {
                          goto LABEL_94;
                        }
                      }

                      else if ((*(_BYTE *)(v193 + 8) & 1) != 0 || v191 != *(double *)v193)
                      {
                        goto LABEL_94;
                      }

                      uint64_t v194 = (unsigned __int8 *)(v342
                                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
                      swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed,  &v394,  0LL,  0LL);
                      int v195 = *v194;
                      v196 = (unsigned __int8 *)(v341
                                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
                      swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed,  &v393,  0LL,  0LL);
                      int v197 = *v196;
                      if (v195 == 2)
                      {
                        if (v197 != 2) {
                          goto LABEL_94;
                        }
                      }

                      else if (v197 == 2 || ((((v197 & 1) == 0) ^ v195) & 1) == 0)
                      {
                        goto LABEL_94;
                      }

                      uint64_t v198 = v342
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy;
                      swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy,  &v392,  0LL,  0LL);
                      double v199 = *(double *)v198;
                      char v200 = *(_BYTE *)(v198 + 8);
                      uint64_t v201 = v341
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy;
                      swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy,  &v391,  0LL,  0LL);
                      if ((v200 & 1) != 0)
                      {
                        if ((*(_BYTE *)(v201 + 8) & 1) == 0) {
                          goto LABEL_94;
                        }
                      }

                      else if ((*(_BYTE *)(v201 + 8) & 1) != 0 || v199 != *(double *)v201)
                      {
                        goto LABEL_94;
                      }

                      uint64_t v202 = v342
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy;
                      swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy,  &v390,  0LL,  0LL);
                      double v203 = *(double *)v202;
                      char v204 = *(_BYTE *)(v202 + 8);
                      uint64_t v205 = v341
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy;
                      swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy,  &v389,  0LL,  0LL);
                      if ((v204 & 1) != 0)
                      {
                        if ((*(_BYTE *)(v205 + 8) & 1) == 0) {
                          goto LABEL_94;
                        }
                      }

                      else if ((*(_BYTE *)(v205 + 8) & 1) != 0 || v203 != *(double *)v205)
                      {
                        goto LABEL_94;
                      }

                      uint64_t v206 = (unsigned __int8 *)(v342
                                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
                      swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused,  &v388,  0LL,  0LL);
                      int v207 = *v206;
                      uint64_t v208 = (unsigned __int8 *)(v341
                                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
                      swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused,  &v387,  0LL,  0LL);
                      int v209 = *v208;
                      if (v207 == 2)
                      {
                        if (v209 != 2) {
                          goto LABEL_94;
                        }
                      }

                      else if (v209 == 2 || ((((v209 & 1) == 0) ^ v207) & 1) == 0)
                      {
                        goto LABEL_94;
                      }

                      uint64_t v210 = v342
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
                      swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate,  &v386,  0LL,  0LL);
                      uint64_t v211 = v320;
                      sub_10000E6C0(v210, v320, &qword_100355540);
                      uint64_t v212 = v341
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
                      swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate,  &v385,  0LL,  0LL);
                      uint64_t v213 = v322;
                      uint64_t v214 = v322 + *(int *)(v339 + 48);
                      sub_10000E6C0(v211, v322, &qword_100355540);
                      sub_10000E6C0(v212, v214, &qword_100355540);
                      if (v311(v213, 1LL, v340) == 1)
                      {
                        sub_100015764(v320, &qword_100355540);
                        if (v311(v214, 1LL, v340) == 1)
                        {
                          sub_100015764(v322, &qword_100355540);
LABEL_200:
                          uint64_t v218 = v342
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy;
                          swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy,  &v384,  0LL,  0LL);
                          double v219 = *(double *)v218;
                          char v220 = *(_BYTE *)(v218 + 8);
                          uint64_t v221 = v341
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy;
                          swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy,  &v383,  0LL,  0LL);
                          if ((v220 & 1) != 0)
                          {
                            if ((*(_BYTE *)(v221 + 8) & 1) == 0) {
                              goto LABEL_94;
                            }
                          }

                          else if ((*(_BYTE *)(v221 + 8) & 1) != 0 || v219 != *(double *)v221)
                          {
                            goto LABEL_94;
                          }

                          uint64_t v222 = (unsigned __int8 *)(v342
                                                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
                          swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame,  &v382,  0LL,  0LL);
                          int v223 = *v222;
                          uint64_t v224 = (unsigned __int8 *)(v341
                                                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
                          swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame,  &v381,  0LL,  0LL);
                          int v225 = *v224;
                          if (v223 == 3)
                          {
                            if (v225 != 3) {
                              goto LABEL_94;
                            }
                          }

                          else if (v225 == 3 || v223 != v225)
                          {
                            goto LABEL_94;
                          }

                          uint64_t v226 = v342
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse;
                          swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse,  &v380,  0LL,  0LL);
                          double v227 = *(double *)v226;
                          char v228 = *(_BYTE *)(v226 + 8);
                          uint64_t v229 = v341
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse;
                          swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse,  &v379,  0LL,  0LL);
                          if ((v228 & 1) != 0)
                          {
                            if ((*(_BYTE *)(v229 + 8) & 1) == 0) {
                              goto LABEL_94;
                            }
                          }

                          else if ((*(_BYTE *)(v229 + 8) & 1) != 0 || v227 != *(double *)v229)
                          {
                            goto LABEL_94;
                          }

                          uint64_t v230 = v342
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy;
                          swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy,  &v378,  0LL,  0LL);
                          double v231 = *(double *)v230;
                          char v232 = *(_BYTE *)(v230 + 8);
                          uint64_t v233 = v341
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy;
                          swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy,  &v377,  0LL,  0LL);
                          if ((v232 & 1) != 0)
                          {
                            if ((*(_BYTE *)(v233 + 8) & 1) == 0) {
                              goto LABEL_94;
                            }
                          }

                          else if ((*(_BYTE *)(v233 + 8) & 1) != 0 || v231 != *(double *)v233)
                          {
                            goto LABEL_94;
                          }

                          uint64_t v234 = v342
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError;
                          swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError,  &v376,  0LL,  0LL);
                          double v235 = *(double *)v234;
                          char v236 = *(_BYTE *)(v234 + 8);
                          uint64_t v237 = v341
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError;
                          swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError,  &v375,  0LL,  0LL);
                          if ((v236 & 1) != 0)
                          {
                            if ((*(_BYTE *)(v237 + 8) & 1) == 0) {
                              goto LABEL_94;
                            }
                          }

                          else if ((*(_BYTE *)(v237 + 8) & 1) != 0 || v235 != *(double *)v237)
                          {
                            goto LABEL_94;
                          }

                          uint64_t v238 = v342
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude;
                          swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude,  &v374,  0LL,  0LL);
                          double v239 = *(double *)v238;
                          char v240 = *(_BYTE *)(v238 + 8);
                          uint64_t v241 = v341
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude;
                          swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude,  &v373,  0LL,  0LL);
                          if ((v240 & 1) != 0)
                          {
                            if ((*(_BYTE *)(v241 + 8) & 1) == 0) {
                              goto LABEL_94;
                            }
                          }

                          else if ((*(_BYTE *)(v241 + 8) & 1) != 0 || v239 != *(double *)v241)
                          {
                            goto LABEL_94;
                          }

                          uint64_t v242 = v342
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy;
                          swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy,  &v372,  0LL,  0LL);
                          double v243 = *(double *)v242;
                          char v244 = *(_BYTE *)(v242 + 8);
                          uint64_t v245 = v341
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy;
                          swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy,  &v371,  0LL,  0LL);
                          if ((v244 & 1) != 0)
                          {
                            if ((*(_BYTE *)(v245 + 8) & 1) == 0) {
                              goto LABEL_94;
                            }
                          }

                          else if ((*(_BYTE *)(v245 + 8) & 1) != 0 || v243 != *(double *)v245)
                          {
                            goto LABEL_94;
                          }

                          v246 = (unsigned __int8 *)(v342
                                                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
                          swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl,  &v370,  0LL,  0LL);
                          int v247 = *v246;
                          v248 = (unsigned __int8 *)(v341
                                                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
                          swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl,  &v369,  0LL,  0LL);
                          int v249 = *v248;
                          if (v247 == 2)
                          {
                            if (v249 != 2) {
                              goto LABEL_94;
                            }
                          }

                          else if (v249 == 2 || ((((v249 & 1) == 0) ^ v247) & 1) == 0)
                          {
                            goto LABEL_94;
                          }

                          uint64_t v250 = v342
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude;
                          swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude,  &v368,  0LL,  0LL);
                          double v251 = *(double *)v250;
                          char v252 = *(_BYTE *)(v250 + 8);
                          uint64_t v253 = v341
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude;
                          swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude,  &v367,  0LL,  0LL);
                          if ((v252 & 1) != 0)
                          {
                            if ((*(_BYTE *)(v253 + 8) & 1) == 0) {
                              goto LABEL_94;
                            }
                          }

                          else if ((*(_BYTE *)(v253 + 8) & 1) != 0 || v251 != *(double *)v253)
                          {
                            goto LABEL_94;
                          }

                          uint64_t v254 = v342
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy;
                          swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy,  &v366,  0LL,  0LL);
                          double v255 = *(double *)v254;
                          char v256 = *(_BYTE *)(v254 + 8);
                          uint64_t v257 = v341
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy;
                          swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy,  &v365,  0LL,  0LL);
                          if ((v256 & 1) != 0)
                          {
                            if ((*(_BYTE *)(v257 + 8) & 1) == 0) {
                              goto LABEL_94;
                            }
                          }

                          else if ((*(_BYTE *)(v257 + 8) & 1) != 0 || v255 != *(double *)v257)
                          {
                            goto LABEL_94;
                          }

                          v258 = (uint64_t *)(v342
                                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
                          swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport,  &v364,  0LL,  0LL);
                          uint64_t v259 = *v258;
                          v260 = (uint64_t *)(v341
                                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
                          swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport,  &v363,  0LL,  0LL);
                          uint64_t v261 = *v260;
                          swift_bridgeObjectRetain(v259);
                          swift_bridgeObjectRetain(v261);
                          char v262 = sub_10010B338( v259,  v261,  type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo,  (uint64_t (*)(char *, char *))sub_100114720);
                          swift_bridgeObjectRelease(v259);
                          swift_bridgeObjectRelease(v261);
                          if ((v262 & 1) == 0) {
                            goto LABEL_94;
                          }
                          v263 = (unsigned __int8 *)(v342
                                                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
                          swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent,  &v362,  0LL,  0LL);
                          int v264 = *v263;
                          v265 = (unsigned __int8 *)(v341
                                                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
                          swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent,  &v361,  0LL,  0LL);
                          int v266 = *v265;
                          if (v264 == 3)
                          {
                            if (v266 != 3) {
                              goto LABEL_94;
                            }
                          }

                          else if (v266 == 3 || v264 != v266)
                          {
                            goto LABEL_94;
                          }

                          uint64_t v267 = v342
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
                          swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude,  &v360,  0LL,  0LL);
                          uint64_t v268 = v325;
                          sub_10000E6C0(v267, v325, &qword_100355558);
                          uint64_t v269 = v341
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
                          swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude,  &v359,  0LL,  0LL);
                          uint64_t v270 = v329;
                          uint64_t v271 = v329 + *(int *)(v323 + 48);
                          sub_10000E6C0(v268, v329, &qword_100355558);
                          sub_10000E6C0(v269, v271, &qword_100355558);
                          v272 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v324 + 48);
                          if (v272(v270, 1LL, v327) == 1)
                          {
                            sub_100015764(v325, &qword_100355558);
                            if (v272(v271, 1LL, v327) == 1)
                            {
                              sub_100015764(v329, &qword_100355558);
LABEL_263:
                              v276 = (unsigned __int8 *)(v342
                                                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
                              swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState,  &v358,  0LL,  0LL);
                              int v277 = *v276;
                              v278 = (unsigned __int8 *)(v341
                                                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
                              swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState,  &v357,  0LL,  0LL);
                              int v279 = *v278;
                              if (v277 == 3)
                              {
                                if (v279 != 3) {
                                  goto LABEL_94;
                                }
                              }

                              else if (v279 == 3 || v277 != v279)
                              {
                                goto LABEL_94;
                              }

                              uint64_t v280 = v342
                                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor;
                              swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor,  &v356,  0LL,  0LL);
                              double v281 = *(double *)v280;
                              char v282 = *(_BYTE *)(v280 + 8);
                              uint64_t v283 = v341
                                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor;
                              swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor,  &v355,  0LL,  0LL);
                              if ((v282 & 1) != 0)
                              {
                                if ((*(_BYTE *)(v283 + 8) & 1) == 0) {
                                  goto LABEL_94;
                                }
                              }

                              else if ((*(_BYTE *)(v283 + 8) & 1) != 0 || v281 != *(double *)v283)
                              {
                                goto LABEL_94;
                              }

                              uint64_t v284 = v342
                                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor;
                              swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor,  &v354,  0LL,  0LL);
                              double v285 = *(double *)v284;
                              char v286 = *(_BYTE *)(v284 + 8);
                              uint64_t v287 = v341
                                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor;
                              swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor,  &v353,  0LL,  0LL);
                              if ((v286 & 1) != 0)
                              {
                                if ((*(_BYTE *)(v287 + 8) & 1) == 0) {
                                  goto LABEL_94;
                                }
                              }

                              else if ((*(_BYTE *)(v287 + 8) & 1) != 0 || v285 != *(double *)v287)
                              {
                                goto LABEL_94;
                              }

                              v288 = (unsigned __int8 *)(v342
                                                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
                              swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType,  &v352,  0LL,  0LL);
                              int v289 = *v288;
                              v290 = (unsigned __int8 *)(v341
                                                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
                              swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType,  &v351,  0LL,  0LL);
                              int v291 = *v290;
                              if (v289 == 4)
                              {
                                if (v291 != 4) {
                                  goto LABEL_94;
                                }
                              }

                              else if (v291 == 4 || v289 != v291)
                              {
                                goto LABEL_94;
                              }

                              v292 = (unsigned __int8 *)(v342
                                                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
                              swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching,  &v350,  0LL,  0LL);
                              int v293 = *v292;
                              v294 = (unsigned __int8 *)(v341
                                                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
                              swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching,  &v349,  0LL,  0LL);
                              int v295 = *v294;
                              if (v293 == 2)
                              {
                                if (v295 != 2) {
                                  goto LABEL_94;
                                }
                              }

                              else if (v295 == 2 || ((((v295 & 1) == 0) ^ v293) & 1) == 0)
                              {
                                goto LABEL_94;
                              }

                              v296 = (unsigned __int8 *)(v342
                                                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
                              swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy,  &v348,  0LL,  0LL);
                              int v297 = *v296;
                              v298 = (unsigned __int8 *)(v341
                                                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
                              swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy,  &v347,  0LL,  0LL);
                              int v299 = *v298;
                              if (v297 == 3)
                              {
                                if (v299 != 3) {
                                  goto LABEL_94;
                                }
                              }

                              else if (v299 == 3 || v297 != v299)
                              {
                                goto LABEL_94;
                              }

                              v300 = (unsigned __int8 *)(v342
                                                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
                              swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType,  &v346,  0LL,  0LL);
                              int v301 = *v300;
                              v302 = (unsigned __int8 *)(v341
                                                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
                              swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType,  &v345,  0LL,  0LL);
                              int v303 = *v302;
                              if (v301 != 5)
                              {
                                if (v303 == 5 || v301 != v303) {
                                  goto LABEL_94;
                                }
LABEL_298:
                                uint64_t v304 = v342;
                                v305 = (unsigned __int8 *)(v342
                                                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
                                swift_beginAccess( v342 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp,  &v344,  0LL,  0LL);
                                int v306 = *v305;
                                swift_release(v304);
                                uint64_t v307 = v341;
                                v308 = (unsigned __int8 *)(v341
                                                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
                                swift_beginAccess( v341 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp,  &v343,  0LL,  0LL);
                                int v309 = *v308;
                                swift_release(v307);
                                if (v306 == 2)
                                {
                                  if (v309 != 2) {
                                    return 0LL;
                                  }
                                }

                                else if (v309 == 2 || ((((v309 & 1) == 0) ^ v306) & 1) == 0)
                                {
                                  return 0LL;
                                }

                                return 1LL;
                              }

                              if (v303 == 5) {
                                goto LABEL_298;
                              }
LABEL_94:
                              swift_release(v342);
                              uint64_t v100 = v341;
                              goto LABEL_95;
                            }
                          }

                          else
                          {
                            sub_10000E6C0(v329, v326, &qword_100355558);
                            if (v272(v271, 1LL, v327) != 1)
                            {
                              uint64_t v273 = v328;
                              sub_100003E68( v271,  v328,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
                              uint64_t v274 = v326;
                              char v275 = sub_10011F640(v326, v273);
                              sub_100004090( v273,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
                              sub_100015764(v325, &qword_100355558);
                              sub_100004090( v274,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
                              sub_100015764(v329, &qword_100355558);
                              if ((v275 & 1) == 0) {
                                goto LABEL_94;
                              }
                              goto LABEL_263;
                            }

                            sub_100015764(v325, &qword_100355558);
                            sub_100004090( v326,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
                          }

                          uint64_t v124 = &qword_10035C4F8;
                          uint64_t v125 = v329;
LABEL_93:
                          sub_100015764(v125, v124);
                          goto LABEL_94;
                        }
                      }

                      else
                      {
                        sub_10000E6C0(v322, v321, &qword_100355540);
                        if (v311(v214, 1LL, v340) != 1)
                        {
                          uint64_t v215 = v338;
                          sub_100003E68( v214,  v338,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                          uint64_t v216 = v321;
                          char v217 = sub_10011F4C0( v321,  v215,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                          sub_100004090( v215,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                          sub_100015764(v320, &qword_100355540);
                          sub_100004090( v216,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                          sub_100015764(v322, &qword_100355540);
                          if ((v217 & 1) == 0) {
                            goto LABEL_94;
                          }
                          goto LABEL_200;
                        }

                        sub_100015764(v320, &qword_100355540);
                        sub_100004090( v321,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                      }

                      uint64_t v124 = &qword_10035C408;
                      uint64_t v125 = v322;
                      goto LABEL_93;
                    }

                    sub_100015764(v315, &qword_100355550);
                    sub_100004090(v316, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
                  }

                  uint64_t v124 = &qword_10035C500;
                  uint64_t v125 = v319;
                  goto LABEL_93;
                }

                sub_100015764(v331, &qword_100355540);
                sub_100004090(v330, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
              }

              uint64_t v124 = &qword_10035C408;
              uint64_t v125 = v332;
              goto LABEL_93;
            }

            sub_100015764(v335, &qword_100355548);
            sub_100004090(v334, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
          }

          uint64_t v124 = &qword_10035C508;
          uint64_t v125 = v337;
          goto LABEL_93;
        }

LABEL_65:
        swift_release(v98);
        uint64_t v100 = v93;
LABEL_95:
        swift_release(v100);
        return 0LL;
      }

      uint64_t v98 = v342;
      swift_retain(v342);
      uint64_t v93 = v341;
      swift_retain(v341);
      sub_100015764((uint64_t)v45, &qword_100355540);
      sub_100004090((uint64_t)v43, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
    }

    sub_100015764((uint64_t)v31, &qword_10035C408);
    goto LABEL_65;
  }

  uint64_t result = 0LL;
  if (v90 != 4 && v88 == v90) {
    goto LABEL_59;
  }
  return result;
}

Swift::Int sub_1000D1AE0()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  &qword_1003556F0,  (uint64_t)&unk_1002C09C8);
}

uint64_t sub_1000D1AFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD7C(a1, &qword_10037A540, &qword_10037A548, (uint64_t)sub_1000CCFE4, a2);
}

uint64_t sub_1000D1B18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CD4F8(a1, a2, a3);
}

uint64_t sub_1000D1B2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CDCC0(a1, a2, a3);
}

uint64_t sub_1000D1B40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C1D0,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  (uint64_t)&unk_1002C0940);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000D1B90@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A538, (uint64_t)qword_100369C38, (uint64_t)sub_1000CC32C, a1);
}

uint64_t sub_1000D1BAC(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100355738,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  (uint64_t)&unk_1002C08C8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D1BEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100355738,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  (uint64_t)&unk_1002C08C8);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000D1C3C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369C50);
  sub_10000E704(v0, (uint64_t)qword_100369C50);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "MQ_UNKNOWN";
  *(void *)(v9 + 8) = 10LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "MQ_NONE";
  *(void *)(v13 + 8) = 7LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "MQ_STRONG";
  *((void *)v15 + 1) = 9LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 3LL;
  *(void *)uint64_t v17 = "MQ_AMBIGUOUS";
  *((void *)v17 + 1) = 12LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D1DF8()
{
  return sub_100008C30(&qword_10037A550, (uint64_t)qword_100369C50, (uint64_t)sub_1000D1C3C);
}

uint64_t sub_1000D1E14@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A550, (uint64_t)qword_100369C50, (uint64_t)sub_1000D1C3C, a1);
}

uint64_t sub_1000D1E30@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A550, (uint64_t)qword_100369C50, (uint64_t)sub_1000D1C3C, a1);
}

uint64_t sub_1000D1E4C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369C68);
  sub_10000E704(v0, (uint64_t)qword_100369C68);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = -1LL;
  *(void *)uint64_t v9 = "UM_INVALID";
  *(void *)(v9 + 8) = 10LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 0LL;
  *(void *)uint64_t v13 = "UM_UNKNOWN";
  *(void *)(v13 + 8) = 10LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 1LL;
  *(void *)uint64_t v15 = "UM_DMA";
  *((void *)v15 + 1) = 6LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 2LL;
  *(void *)uint64_t v17 = "UM_EGM08";
  *((void *)v17 + 1) = 8LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D200C()
{
  return sub_100008C30(&qword_10037A558, (uint64_t)qword_100369C68, (uint64_t)sub_1000D1E4C);
}

uint64_t sub_1000D2028@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A558, (uint64_t)qword_100369C68, (uint64_t)sub_1000D1E4C, a1);
}

uint64_t sub_1000D2044@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A558, (uint64_t)qword_100369C68, (uint64_t)sub_1000D1E4C, a1);
}

uint64_t sub_1000D2060()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369C80);
  sub_10000E704(v0, (uint64_t)qword_100369C80);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 0LL;
  *(void *)uint64_t v9 = "OD_UNKNOWN";
  *(void *)(v9 + 8) = 10LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "OD_LOCAL";
  *((void *)v13 + 1) = 8LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 2LL;
  *(void *)uint64_t v14 = "OD_REMOTE";
  *(void *)(v14 + 8) = 9LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D21F0()
{
  return sub_100008C30(&qword_10037A560, (uint64_t)qword_100369C80, (uint64_t)sub_1000D2060);
}

uint64_t sub_1000D220C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A560, (uint64_t)qword_100369C80, (uint64_t)sub_1000D2060, a1);
}

uint64_t sub_1000D2228@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A560, (uint64_t)qword_100369C80, (uint64_t)sub_1000D2060, a1);
}

uint64_t sub_1000D2244()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369C98);
  sub_10000E704(v0, (uint64_t)qword_100369C98);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 0LL;
  *(void *)uint64_t v9 = "GNSS_CONTENT_UNKNOWN";
  *(void *)(v9 + 8) = 20LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "GNSS_CONTENT_NONE";
  *((void *)v13 + 1) = 17LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 2LL;
  *(void *)uint64_t v14 = "GNSS_CONTENT_PRESENT";
  *(void *)(v14 + 8) = 20LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D23D4()
{
  return sub_100008C30(&qword_10037A568, (uint64_t)qword_100369C98, (uint64_t)sub_1000D2244);
}

uint64_t sub_1000D23F0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A568, (uint64_t)qword_100369C98, (uint64_t)sub_1000D2244, a1);
}

uint64_t sub_1000D240C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A568, (uint64_t)qword_100369C98, (uint64_t)sub_1000D2244, a1);
}

uint64_t sub_1000D2428()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369CB0);
  sub_10000E704(v0, (uint64_t)qword_100369CB0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 0LL;
  *(void *)uint64_t v9 = "PC_UNKNOWN";
  *(void *)(v9 + 8) = 10LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "PC_INDOOR";
  *((void *)v13 + 1) = 9LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 2LL;
  *(void *)uint64_t v14 = "PC_OUTDOOR";
  *(void *)(v14 + 8) = 10LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D25B8()
{
  return sub_100008C30(&qword_10037A570, (uint64_t)qword_100369CB0, (uint64_t)sub_1000D2428);
}

uint64_t sub_1000D25D4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A570, (uint64_t)qword_100369CB0, (uint64_t)sub_1000D2428, a1);
}

uint64_t sub_1000D25F0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A570, (uint64_t)qword_100369CB0, (uint64_t)sub_1000D2428, a1);
}

uint64_t sub_1000D260C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369CC8);
  sub_10000E704(v0, (uint64_t)qword_100369CC8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "MM_TYPE_UNKNOWN";
  *(void *)(v9 + 8) = 15LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "MM_TYPE_VEHICLE";
  *(void *)(v13 + 8) = 15LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "MM_TYPE_PEDESTRIAN";
  *((void *)v15 + 1) = 18LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 3LL;
  *(void *)uint64_t v17 = "MM_TYPE_BICYCLE";
  *((void *)v17 + 1) = 15LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D27C8()
{
  return sub_100008C30(&qword_10037A578, (uint64_t)qword_100369CC8, (uint64_t)sub_1000D260C);
}

uint64_t sub_1000D27E4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A578, (uint64_t)qword_100369CC8, (uint64_t)sub_1000D260C, a1);
}

uint64_t sub_1000D2800@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A578, (uint64_t)qword_100369CC8, (uint64_t)sub_1000D260C, a1);
}

uint64_t sub_1000D281C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369CE0);
  sub_10000E704(v0, (uint64_t)qword_100369CE0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 0LL;
  *(void *)uint64_t v9 = "LOI_LOCATION_SOURCE_ACCURACY_UNKNOWN";
  *(void *)(v9 + 8) = 36LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "LOI_LOCATION_SOURCE_ACCURACY_LOW";
  *((void *)v13 + 1) = 32LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 2LL;
  *(void *)uint64_t v14 = "LOI_LOCATION_SOURCE_ACCURACY_HIGH";
  *(void *)(v14 + 8) = 33LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D29AC()
{
  return sub_100008C30(&qword_10037A580, (uint64_t)qword_100369CE0, (uint64_t)sub_1000D281C);
}

uint64_t sub_1000D29C8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A580, (uint64_t)qword_100369CE0, (uint64_t)sub_1000D281C, a1);
}

uint64_t sub_1000D29E4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A580, (uint64_t)qword_100369CE0, (uint64_t)sub_1000D281C, a1);
}

void sub_1000D2A00()
{
  v0._countAndFlagsBits = 0x64757469746C412ELL;
  v0._object = (void *)0xED00006F666E4965LL;
  String.append(_:)(v0);
  qword_100369CF8 = 0xD00000000000002ELL;
  unk_100369D00 = 0x80000001002E40F0LL;
}

uint64_t *sub_1000D2A74()
{
  if (qword_10037A588 != -1) {
    swift_once(&qword_10037A588, sub_1000D2A00);
  }
  return &qword_100369CF8;
}

uint64_t sub_1000D2AB4()
{
  return sub_1001036C8(&qword_10037A588, &qword_100369CF8, &qword_100369D00, (uint64_t)sub_1000D2A00);
}

uint64_t sub_1000D2AD4()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369D08);
  sub_10000E704(v0, (uint64_t)qword_100369D08);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v8 = "altitude";
  *(void *)(v8 + 8) = 8LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v6 + v4) = 2LL;
  *(void *)uint64_t v12 = "vertical_accuracy";
  *(void *)(v12 + 8) = 17LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + v6 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 3LL;
  *(void *)uint64_t v14 = "undulation";
  *((void *)v14 + 1) = 10LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v7 + v6 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *uint64_t v15 = 4LL;
  *(void *)uint64_t v16 = "undulation_model";
  *((void *)v16 + 1) = 16LL;
  v16[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D2CA8()
{
  return sub_100008C30(&qword_10037A590, (uint64_t)qword_100369D08, (uint64_t)sub_1000D2AD4);
}

uint64_t sub_1000D2CC4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A590, (uint64_t)qword_100369D08, (uint64_t)sub_1000D2AD4, a1);
}

uint64_t sub_1000D2CE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0LL) + 20);
          goto LABEL_5;
        case 2LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0LL) + 24);
          goto LABEL_5;
        case 3LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0LL) + 28);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v9, a2, a3);
          break;
        case 4LL:
          uint64_t v10 = v3
              + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0LL) + 32);
          unint64_t v11 = sub_10014A3BC();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v10,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType,  v11,  a2,  a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000D2E0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0LL);
  uint64_t v10 = (int *)result;
  uint64_t v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1LL, a2, a3, *(double *)v11);
  }
  if (!v4)
  {
    uint64_t v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2LL, a2, a3, *(double *)v12);
    }
    uint64_t v13 = v5 + v10[7];
    if ((*(_BYTE *)(v13 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3LL, a2, a3, *(double *)v13);
    }
    if (*(_BYTE *)(v5 + v10[8]) != 4)
    {
      char v15 = *(_BYTE *)(v5 + v10[8]);
      unint64_t v14 = sub_10014A3BC();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v15,  4LL,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType,  v14,  a2,  a3);
    }

    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_1000D2F58()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo,  &qword_1003556F8,  (uint64_t)&unk_1002C0C48);
}

uint64_t sub_1000D2F74@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  uint64_t v7 = a2 + v5;
  *(void *)uint64_t v7 = 0LL;
  *(_BYTE *)(v7 + 8) = 1;
  uint64_t v8 = a1[8];
  uint64_t v9 = a2 + a1[7];
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  *(_BYTE *)(a2 + v8) = 4;
  return result;
}

uint64_t sub_1000D2FD0(uint64_t a1, uint64_t a2)
{
  return sub_100103A60(a1, a2, &qword_10037A588, &qword_100369CF8, &qword_100369D00, (uint64_t)sub_1000D2A00);
}

uint64_t sub_1000D2FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D2CE0(a1, a2, a3);
}

uint64_t sub_1000D3004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D2E0C(a1, a2, a3);
}

uint64_t sub_1000D3018(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C1C8,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo,  (uint64_t)&unk_1002C0BC0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000D3068@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A590, (uint64_t)qword_100369D08, (uint64_t)sub_1000D2AD4, a1);
}

uint64_t sub_1000D3084(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003563E0,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo,  (uint64_t)&unk_1002C0B48);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D30C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003563E0,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo,  (uint64_t)&unk_1002C0B48);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000D3114()
{
  return &unk_10033EEB8;
}

unint64_t sub_1000D3120()
{
  return 0xD000000000000029LL;
}

uint64_t sub_1000D313C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369D20);
  sub_10000E704(v0, (uint64_t)qword_100369D20);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3340;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "location_type";
  *(void *)(v9 + 8) = 13LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "active";
  *((void *)v13 + 1) = 6LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D3294()
{
  return sub_100008C30(&qword_10037A598, (uint64_t)qword_100369D20, (uint64_t)sub_1000D313C);
}

uint64_t sub_1000D32B0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A598, (uint64_t)qword_100369D20, (uint64_t)sub_1000D313C, a1);
}

uint64_t sub_1000D32CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      if (result == 2)
      {
        uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0LL);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + *(int *)(v9 + 24), a2, a3);
      }

      else if (result == 1)
      {
        uint64_t v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0LL) + 20);
        unint64_t v11 = sub_10014AA1C();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v10,  &type metadata for CLP_LogEntry_PrivateData_LocationType,  v11,  a2,  a3);
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000D33C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0LL);
  uint64_t v10 = result;
  if (*(_BYTE *)(v5 + *(int *)(result + 20)) != 14)
  {
    char v13 = *(_BYTE *)(v5 + *(int *)(result + 20));
    unint64_t v11 = sub_10014AA1C();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v13,  1LL,  &type metadata for CLP_LogEntry_PrivateData_LocationType,  v11,  a2,  a3);
  }

  if (!v4)
  {
    int v12 = *(unsigned __int8 *)(v5 + *(int *)(v10 + 24));
    if (v12 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v12 & 1, 2LL, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_1000D34AC()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus,  &qword_100355700,  (uint64_t)&unk_1002C0DB0);
}

uint64_t sub_1000D34C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10010473C(a1, 14, 2, a2);
}

uint64_t sub_1000D34D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D32CC(a1, a2, a3);
}

uint64_t sub_1000D34E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D33C4(a1, a2, a3);
}

uint64_t sub_1000D34FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C1C0,  type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus,  (uint64_t)&unk_1002C0D28);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000D354C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A598, (uint64_t)qword_100369D20, (uint64_t)sub_1000D313C, a1);
}

uint64_t sub_1000D3568(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003563F8,  type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus,  (uint64_t)&unk_1002C0CB0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D35A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003563F8,  type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus,  (uint64_t)&unk_1002C0CB0);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000D35F8()
{
  return &unk_10033EEC8;
}

unint64_t sub_1000D3604()
{
  return 0xD000000000000025LL;
}

uint64_t sub_1000D3620()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369D38);
  sub_10000E704(v0, (uint64_t)qword_100369D38);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v8 = "timestamp";
  *(void *)(v8 + 8) = 9LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  unint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v6 + v4) = 2LL;
  *(void *)uint64_t v12 = "speed";
  *(void *)(v12 + 8) = 5LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  char v13 = (void *)(v7 + v6 + 2 * v4);
  unint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *char v13 = 3LL;
  *(void *)unint64_t v14 = "mach_continuous_time";
  *((void *)v14 + 1) = 20LL;
  v14[16] = 2;
  v11();
  char v15 = (void *)(v7 + v6 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *char v15 = 4LL;
  *(void *)uint64_t v16 = "mach_absolute_time";
  *((void *)v16 + 1) = 18LL;
  v16[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D37EC()
{
  return sub_100008C30(&qword_10037A5A0, (uint64_t)qword_100369D38, (uint64_t)sub_1000D3620);
}

uint64_t sub_1000D3808@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A5A0, (uint64_t)qword_100369D38, (uint64_t)sub_1000D3620, a1);
}

uint64_t sub_1000D3824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F3F5C(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_1000D3840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F4070(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_1000D385C(uint64_t a1, uint64_t a2)
{
  return sub_10011E088(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed) & 1;
}

Swift::Int sub_1000D387C()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed,  &qword_100355708,  (uint64_t)&unk_1002C0F18);
}

uint64_t sub_1000D389C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C1B8,  type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed,  (uint64_t)&unk_1002C0E90);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000D38EC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A5A0, (uint64_t)qword_100369D38, (uint64_t)sub_1000D3620, a1);
}

uint64_t sub_1000D3908(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356410,  type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed,  (uint64_t)&unk_1002C0E18);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D3948(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356410,  type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed,  (uint64_t)&unk_1002C0E18);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000D3998()
{
  return &unk_10033EED8;
}

unint64_t sub_1000D39A4()
{
  return 0xD000000000000027LL;
}

uint64_t sub_1000D39C0()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369D50);
  sub_10000E704(v0, (uint64_t)qword_100369D50);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3340;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "timestamp";
  *(void *)(v9 + 8) = 9LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  char v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)char v13 = "true_heading";
  *((void *)v13 + 1) = 12LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D3B18()
{
  return sub_100008C30(&qword_10037A5A8, (uint64_t)qword_100369D50, (uint64_t)sub_1000D39C0);
}

uint64_t sub_1000D3B34@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A5A8, (uint64_t)qword_100369D50, (uint64_t)sub_1000D39C0, a1);
}

uint64_t sub_1000D3B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CB7D4(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t sub_1000D3B6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CB8A0(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t sub_1000D3B88(uint64_t a1, uint64_t a2)
{
  return sub_10011F4C0(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading) & 1;
}

Swift::Int sub_1000D3BA8()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading,  &qword_100355710,  (uint64_t)&unk_1002C1080);
}

uint64_t sub_1000D3BC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C1B0,  type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading,  (uint64_t)&unk_1002C0FF8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000D3C14@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A5A8, (uint64_t)qword_100369D50, (uint64_t)sub_1000D39C0, a1);
}

uint64_t sub_1000D3C30(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356428,  type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading,  (uint64_t)&unk_1002C0F80);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D3C70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356428,  type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading,  (uint64_t)&unk_1002C0F80);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000D3CC0()
{
  return &unk_10033EEE8;
}

unint64_t sub_1000D3CCC()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_1000D3CE8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369D68);
  sub_10000E704(v0, (uint64_t)qword_100369D68);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3340;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "when";
  *(void *)(v9 + 8) = 4LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  char v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)char v13 = "where";
  *((void *)v13 + 1) = 5LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D3E38()
{
  return sub_100008C30(&qword_10037A5B0, (uint64_t)qword_100369D68, (uint64_t)sub_1000D3CE8);
}

uint64_t sub_1000D3E54@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A5B0, (uint64_t)qword_100369D68, (uint64_t)sub_1000D3CE8, a1);
}

uint64_t sub_1000D3E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v11 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0LL);
      dispatch thunk of Decoder.decodeSingularStringField(value:)(v3 + *(int *)(v9 + 24), a2, a3);
    }

    else if (result == 1)
    {
      uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0LL);
      dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + *(int *)(v12 + 20), a2, a3);
    }

    uint64_t v4 = 0LL;
    uint64_t v7 = a2;
  }

  return result;
}

uint64_t sub_1000D3F3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0LL);
  uint64_t v10 = result;
  uint64_t v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1LL, a2, a3, *(double *)v11);
  }
  if (!v4)
  {
    uint64_t v12 = (void *)(v5 + *(int *)(v10 + 24));
    uint64_t v13 = v12[1];
    if (v13) {
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v12, v13, 2LL, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_1000D4008()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable,  &qword_100355718,  (uint64_t)&unk_1002C11E8);
}

uint64_t sub_1000D4024@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = *(int *)(a1 + 24);
  uint64_t v6 = a2 + *(int *)(a1 + 20);
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  uint64_t v7 = (void *)(a2 + v5);
  *uint64_t v7 = 0LL;
  v7[1] = 0LL;
  return result;
}

uint64_t sub_1000D4064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D3E70(a1, a2, a3);
}

uint64_t sub_1000D4078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D3F3C(a1, a2, a3);
}

uint64_t sub_1000D408C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C1A8,  type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable,  (uint64_t)&unk_1002C1160);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000D40DC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A5B0, (uint64_t)qword_100369D68, (uint64_t)sub_1000D3CE8, a1);
}

uint64_t sub_1000D40F8(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356440,  type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable,  (uint64_t)&unk_1002C10E8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D4138(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356440,  type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable,  (uint64_t)&unk_1002C10E8);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000D4188()
{
  return &unk_10033EEF8;
}

unint64_t sub_1000D4194()
{
  return 0xD00000000000002DLL;
}

uint64_t sub_1000D41B0()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369D80);
  sub_10000E704(v0, (uint64_t)qword_100369D80);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "timestamp";
  *(void *)(v9 + 8) = 9LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "speed";
  *((void *)v13 + 1) = 5LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "uncertainty";
  *(void *)(v14 + 8) = 11LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D4344()
{
  return sub_100008C30(&qword_10037A5B8, (uint64_t)qword_100369D80, (uint64_t)sub_1000D41B0);
}

uint64_t sub_1000D4360@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A5B8, (uint64_t)qword_100369D80, (uint64_t)sub_1000D41B0, a1);
}

uint64_t sub_1000D437C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D4398(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t sub_1000D4398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v9 = a2;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v9, i);
    if (v5 || (v13 & 1) != 0) {
      break;
    }
    switch(result)
    {
      case 3LL:
        uint64_t v11 = *(int *)(a4(0LL) + 28);
LABEL_3:
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v4 + v11, a2, a3);
        break;
      case 2LL:
        uint64_t v11 = *(int *)(a4(0LL) + 24);
        goto LABEL_3;
      case 1LL:
        uint64_t v11 = *(int *)(a4(0LL) + 20);
        goto LABEL_3;
    }

    uint64_t v5 = 0LL;
    uint64_t v9 = a2;
  }

  return result;
}

uint64_t sub_1000D4460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005A800(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t sub_1000D447C(uint64_t a1, uint64_t a2)
{
  return sub_100065750(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed) & 1;
}

Swift::Int sub_1000D449C()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed,  &qword_100355720,  (uint64_t)&unk_1002C1350);
}

uint64_t sub_1000D44B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C1A0,  type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed,  (uint64_t)&unk_1002C12C8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000D4508@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A5B8, (uint64_t)qword_100369D80, (uint64_t)sub_1000D41B0, a1);
}

uint64_t sub_1000D4524(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356458,  type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed,  (uint64_t)&unk_1002C1250);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D4564(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356458,  type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed,  (uint64_t)&unk_1002C1250);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000D45B4()
{
  return &unk_10033EF08;
}

unint64_t sub_1000D45C0()
{
  return 0xD000000000000021LL;
}

uint64_t sub_1000D45DC()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369D98);
  sub_10000E704(v0, (uint64_t)qword_100369D98);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v35 = swift_allocObject(v1, v6 + 13 * v4, v5 | 7);
  *(_OWORD *)(v35 + 16) = xmmword_1002B42B0;
  uint64_t v7 = v35 + v6;
  uint64_t v8 = v35 + v6 + *(int *)(v2 + 48);
  *(void *)(v35 + v6) = 1LL;
  *(void *)uint64_t v8 = "event_receipt_time";
  *(void *)(v8 + 8) = 18LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "client";
  *(void *)(v12 + 8) = 6LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  char v13 = (void *)(v7 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *char v13 = 3LL;
  *(void *)uint64_t v14 = "location";
  *((void *)v14 + 1) = 8LL;
  v14[16] = 2;
  v11();
  char v15 = (void *)(v7 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *char v15 = 4LL;
  *(void *)uint64_t v16 = "location_private";
  *((void *)v16 + 1) = 16LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v7 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "status";
  *((void *)v18 + 1) = 6LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v7 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 6LL;
  *(void *)uint64_t v20 = "active";
  *((void *)v20 + 1) = 6LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v7 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 7LL;
  *(void *)uint64_t v22 = "odometer";
  *((void *)v22 + 1) = 8LL;
  _BYTE v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v7 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  void *v23 = 8LL;
  *(void *)uint64_t v24 = "signal_quality";
  *((void *)v24 + 1) = 14LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 9LL;
  *(void *)uint64_t v25 = "vehicle_speed";
  *(void *)(v25 + 8) = 13LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  uint64_t v26 = (void *)(v7 + 9 * v4);
  uint64_t v27 = (char *)v26 + *(int *)(v2 + 48);
  void *v26 = 10LL;
  *(void *)uint64_t v27 = "vehicle_heading";
  *((void *)v27 + 1) = 15LL;
  v27[16] = 2;
  v11();
  uint64_t v28 = (void *)(v7 + 10 * v4);
  uint64_t v29 = (char *)v28 + *(int *)(v2 + 48);
  *uint64_t v28 = 11LL;
  *(void *)uint64_t v29 = "xtra_file_available";
  *((void *)v29 + 1) = 19LL;
  v29[16] = 2;
  v11();
  uint64_t v30 = (void *)(v7 + 11 * v4);
  uint64_t v31 = (char *)v30 + *(int *)(v2 + 48);
  void *v30 = 12LL;
  *(void *)uint64_t v31 = "motion_detected";
  *((void *)v31 + 1) = 15LL;
  v31[16] = 2;
  v11();
  uint64_t v32 = (void *)(v7 + 12 * v4);
  uint64_t v33 = (char *)v32 + *(int *)(v2 + 48);
  *uint64_t v32 = 13LL;
  *(void *)uint64_t v33 = "location_derived_speed";
  *((void *)v33 + 1) = 22LL;
  v33[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v35);
}

uint64_t sub_1000D4980()
{
  return sub_100008C30(&qword_10037A5C0, (uint64_t)qword_100369D98, (uint64_t)sub_1000D45DC);
}

uint64_t sub_1000D499C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A5C0, (uint64_t)qword_100369D98, (uint64_t)sub_1000D45DC, a1);
}

uint64_t sub_1000D49B8()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0LL);
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 1LL, 1LL, v3);
  uint64_t v4 = v1
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)uint64_t v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  uint64_t v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
  uint64_t v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 1LL, 1LL, v8);
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active) = 2;
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer;
  *(void *)uint64_t v11 = 0LL;
  *(_BYTE *)(v11 + 8) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality) = 3;
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
  uint64_t v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v14, 1LL, 1LL, v15);
  uint64_t v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v16, 1LL, 1LL, v17);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected) = 3;
  uint64_t v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  uint64_t v19 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))( v18,  1LL,  1LL,  v19);
  qword_10037A5D0 = v1;
  return result;
}

uint64_t sub_1000D4BD0(uint64_t a1)
{
  uint64_t v3 = sub_100003A0C(&qword_100355590);
  __chkstk_darwin(v3);
  uint64_t v85 = (uint64_t)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100003A0C(&qword_100355588);
  __chkstk_darwin(v5);
  uint64_t v84 = (uint64_t)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100003A0C(&qword_100355580);
  __chkstk_darwin(v7);
  uint64_t v83 = (uint64_t)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100003A0C(&qword_100355578);
  __chkstk_darwin(v9);
  uint64_t v82 = (uint64_t)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100003A0C(&qword_100355570);
  __chkstk_darwin(v11);
  uint64_t v79 = (uint64_t)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100003A0C(&qword_100355568);
  __chkstk_darwin(v13);
  uint64_t v76 = (uint64_t)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100003A0C(&qword_100355560);
  __chkstk_darwin(v15);
  uint64_t v72 = (uint64_t)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  uint64_t v21 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v20, 1LL, 1LL, v21);
  uint64_t v22 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)uint64_t v22 = 0;
  *(_BYTE *)(v22 + 4) = 1;
  uint64_t v23 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56LL))(v23, 1LL, 1LL, v24);
  uint64_t v25 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  uint64_t v70 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  uint64_t v26 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))(v25, 1LL, 1LL, v26);
  uint64_t v27 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  uint64_t v71 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  uint64_t v28 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(v27, 1LL, 1LL, v28);
  uint64_t v29 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  *uint64_t v29 = 2;
  uint64_t v30 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer;
  *(void *)uint64_t v30 = 0LL;
  *(_BYTE *)(v30 + 8) = 1;
  uint64_t v73 = v29;
  float v74 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  *float v74 = 3;
  uint64_t v31 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  uint64_t v75 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  uint64_t v32 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56LL))(v31, 1LL, 1LL, v32);
  uint64_t v33 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  uint64_t v77 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  uint64_t v34 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56LL))(v33, 1LL, 1LL, v34);
  uint64_t v35 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  uint64_t v78 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  uint64_t v36 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56LL))(v35, 1LL, 1LL, v36);
  uint64_t v80 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected) = 3;
  uint64_t v37 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  uint64_t v81 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  uint64_t v38 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56LL))(v37, 1LL, 1LL, v38);
  uint64_t v39 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  v104,  0LL,  0LL);
  sub_10000E6C0(v39, (uint64_t)v19, &qword_100355538);
  swift_beginAccess(v20, v103, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v19, v20, &qword_100355538);
  swift_endAccess(v103);
  uint64_t v40 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client,  v103,  0LL,  0LL);
  LODWORD(v39) = *(_DWORD *)v40;
  LOBYTE(v40) = *(_BYTE *)(v40 + 4);
  swift_beginAccess(v22, v102, 1LL, 0LL);
  *(_DWORD *)uint64_t v22 = v39;
  *(_BYTE *)(v22 + 4) = v40;
  uint64_t v41 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location,  v101,  0LL,  0LL);
  uint64_t v42 = v72;
  sub_10000E6C0(v41, v72, &qword_100355560);
  swift_beginAccess(v23, v100, 33LL, 0LL);
  sub_10000E5D4(v42, v23, &qword_100355560);
  swift_endAccess(v100);
  uint64_t v43 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate,  v100,  0LL,  0LL);
  uint64_t v44 = v76;
  sub_10000E6C0(v43, v76, &qword_100355568);
  uint64_t v45 = v70;
  swift_beginAccess(v70, v99, 33LL, 0LL);
  sub_10000E5D4(v44, v45, &qword_100355568);
  swift_endAccess(v99);
  uint64_t v46 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status,  v99,  0LL,  0LL);
  uint64_t v47 = v79;
  sub_10000E6C0(v46, v79, &qword_100355570);
  uint64_t v48 = v71;
  swift_beginAccess(v71, v98, 33LL, 0LL);
  sub_10000E5D4(v47, v48, &qword_100355570);
  swift_endAccess(v98);
  double v49 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active,  v98,  0LL,  0LL);
  LOBYTE(v49) = *v49;
  uint64_t v50 = v73;
  swift_beginAccess(v73, &v97, 1LL, 0LL);
  *uint64_t v50 = (_BYTE)v49;
  uint64_t v51 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer,  &v96,  0LL,  0LL);
  uint64_t v52 = *v51;
  LOBYTE(v51) = *((_BYTE *)v51 + 8);
  swift_beginAccess(v30, &v95, 1LL, 0LL);
  *(void *)uint64_t v30 = v52;
  *(_BYTE *)(v30 + 8) = (_BYTE)v51;
  uint64_t v53 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality,  &v94,  0LL,  0LL);
  LOBYTE(v53) = *v53;
  double v54 = v74;
  swift_beginAccess(v74, &v93, 1LL, 0LL);
  *double v54 = (_BYTE)v53;
  uint64_t v55 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed,  &v92,  0LL,  0LL);
  uint64_t v56 = v82;
  sub_10000E6C0(v55, v82, &qword_100355578);
  uint64_t v57 = v75;
  swift_beginAccess(v75, v91, 33LL, 0LL);
  sub_10000E5D4(v56, v57, &qword_100355578);
  swift_endAccess(v91);
  uint64_t v58 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading,  v91,  0LL,  0LL);
  uint64_t v59 = v83;
  sub_10000E6C0(v58, v83, &qword_100355580);
  uint64_t v60 = v77;
  swift_beginAccess(v77, v90, 33LL, 0LL);
  sub_10000E5D4(v59, v60, &qword_100355580);
  swift_endAccess(v90);
  uint64_t v61 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable,  v90,  0LL,  0LL);
  uint64_t v62 = v84;
  sub_10000E6C0(v61, v84, &qword_100355588);
  uint64_t v63 = v78;
  swift_beginAccess(v78, v89, 33LL, 0LL);
  sub_10000E5D4(v62, v63, &qword_100355588);
  swift_endAccess(v89);
  double v64 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected,  v89,  0LL,  0LL);
  LOBYTE(v64) = *v64;
  uint64_t v65 = v80;
  swift_beginAccess(v80, &v88, 1LL, 0LL);
  *uint64_t v65 = (_BYTE)v64;
  uint64_t v66 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed,  &v87,  0LL,  0LL);
  uint64_t v67 = v85;
  sub_10000E6C0(v66, v85, &qword_100355590);
  swift_release(a1);
  uint64_t v68 = v81;
  swift_beginAccess(v81, v86, 33LL, 0LL);
  sub_10000E5D4(v67, v68, &qword_100355590);
  swift_endAccess(v86);
  return v1;
}

uint64_t sub_1000D549C()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_1000D557C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v9)) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v3 + v9);
    uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0LL);
    uint64_t v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v13 = swift_retain(v10);
    sub_1000D4BD0(v13);
    uint64_t v14 = *(void *)(v6 + v9);
    *(void *)(v6 + v9) = v12;
    swift_release(v14);
  }

  uint64_t v15 = *(void *)(v6 + v9);
  swift_retain(v15);
  uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1LL:
          uint64_t v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  v34,  33LL,  0LL);
          uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
          uint64_t v21 = (unint64_t *)&qword_1003552B8;
          uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          uint64_t v23 = &unk_1002BF798;
          goto LABEL_21;
        case 2LL:
          uint64_t v24 = v15
              + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client,  v34,  33LL,  0LL);
          uint64_t v25 = v5;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v24, a2, a3);
          goto LABEL_22;
        case 3LL:
          uint64_t v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location,  v34,  33LL,  0LL);
          uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL);
          uint64_t v21 = &qword_100355730;
          uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation;
          uint64_t v23 = &unk_1002C02D8;
          goto LABEL_21;
        case 4LL:
          uint64_t v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate,  v34,  33LL,  0LL);
          uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL);
          uint64_t v21 = &qword_100355738;
          uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate;
          uint64_t v23 = &unk_1002C08C8;
          goto LABEL_21;
        case 5LL:
          uint64_t v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status,  v34,  33LL,  0LL);
          uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0LL);
          uint64_t v21 = &qword_1003563F8;
          uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus;
          uint64_t v23 = &unk_1002C0CB0;
          goto LABEL_21;
        case 6LL:
          uint64_t v26 = v15
              + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active,  v34,  33LL,  0LL);
          uint64_t v25 = v5;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v26, a2, a3);
          goto LABEL_22;
        case 7LL:
          uint64_t v27 = v15
              + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer,  v34,  33LL,  0LL);
          uint64_t v25 = v5;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v27, a2, a3);
          goto LABEL_22;
        case 8LL:
          uint64_t v28 = v15
              + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality,  v34,  33LL,  0LL);
          unint64_t v29 = sub_10014A224();
          uint64_t v30 = v28;
          uint64_t v31 = &type metadata for CLP_LogEntry_PrivateData_Location.SignalQualityType;
          goto LABEL_19;
        case 9LL:
          uint64_t v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed,  v34,  33LL,  0LL);
          uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0LL);
          uint64_t v21 = &qword_100356410;
          uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed;
          uint64_t v23 = &unk_1002C0E18;
          goto LABEL_21;
        case 10LL:
          uint64_t v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading,  v34,  33LL,  0LL);
          uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0LL);
          uint64_t v21 = &qword_100356428;
          uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading;
          uint64_t v23 = &unk_1002C0F80;
          goto LABEL_21;
        case 11LL:
          uint64_t v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable,  v34,  33LL,  0LL);
          uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0LL);
          uint64_t v21 = &qword_100356440;
          uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable;
          uint64_t v23 = &unk_1002C10E8;
          goto LABEL_21;
        case 12LL:
          uint64_t v32 = v15
              + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected,  v34,  33LL,  0LL);
          unint64_t v29 = sub_10014A1E0();
          uint64_t v30 = v32;
          uint64_t v31 = &type metadata for CLP_LogEntry_PrivateData_Location.MotionDetectedType;
LABEL_19:
          uint64_t v25 = v5;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v30, v31, v29, a2, a3);
          goto LABEL_22;
        case 13LL:
          uint64_t v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed,  v34,  33LL,  0LL);
          uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0LL);
          uint64_t v21 = &qword_100356458;
          uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed;
          uint64_t v23 = &unk_1002C1250;
LABEL_21:
          uint64_t v33 = sub_10000FD98(v21, v22, (uint64_t)v23);
          uint64_t v25 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v19, v20, v33, a2, a3);
LABEL_22:
          uint64_t v5 = v25;
          swift_endAccess(v34);
          break;
        default:
          break;
      }

      uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return swift_release(v15);
}

uint64_t sub_1000D5A48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0LL) + 20));
  uint64_t v10 = swift_retain(v9);
  sub_1000D5D78(v10, a1, a2, a3);
  if (v4) {
    return swift_release(v9);
  }
  uint64_t v11 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client,  v20,  0LL,  0LL);
  if ((v11[1] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v11, 2LL, a2, a3);
  }
  sub_1000D5F04(v9, a1, a2, a3);
  sub_1000D6090(v9, a1, a2, a3);
  sub_1000D621C(v9, a1, a2, a3);
  uint64_t v13 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active,  v24,  0LL,  0LL);
  int v14 = *v13;
  if (v14 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v14 & 1, 6LL, a2, a3);
  }
  uint64_t v15 = v9
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer,  v23,  0LL,  0LL);
  if ((*(_BYTE *)(v15 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(7LL, a2, a3, *(double *)v15);
  }
  uint64_t v16 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality,  v22,  0LL,  0LL);
  if (*v16 != 3)
  {
    v21[0] = *v16;
    unint64_t v17 = sub_10014A224();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v21,  8LL,  &type metadata for CLP_LogEntry_PrivateData_Location.SignalQualityType,  v17,  a2,  a3);
  }

  sub_1000D63A8(v9, a1, a2, a3);
  sub_1000D6534(v9, a1, a2, a3);
  sub_1000D66C0(v9, a1, a2, a3);
  uint64_t v18 = (char *)(v9
               + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected,  v21,  0LL,  0LL);
  if (*v18 != 3)
  {
    char v25 = *v18;
    unint64_t v19 = sub_10014A1E0();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v25,  12LL,  &type metadata for CLP_LogEntry_PrivateData_Location.MotionDetectedType,  v19,  a2,  a3);
  }

  sub_1000D684C(v9, a1, a2, a3);
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000D5D78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355538);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v15 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000D5F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355560);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355560);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  uint64_t v15 = sub_10000FD98( &qword_100355730,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  (uint64_t)&unk_1002C02D8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
}

uint64_t sub_1000D6090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355568);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355568);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  uint64_t v15 = sub_10000FD98( &qword_100355738,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  (uint64_t)&unk_1002C08C8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_1000D621C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355570);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355570);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  uint64_t v15 = sub_10000FD98( &qword_1003563F8,  type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus,  (uint64_t)&unk_1002C0CB0);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 5LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t sub_1000D63A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355578);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355578);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  uint64_t v15 = sub_10000FD98( &qword_100356410,  type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed,  (uint64_t)&unk_1002C0E18);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 9LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_1000D6534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355580);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355580);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  uint64_t v15 = sub_10000FD98( &qword_100356428,  type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading,  (uint64_t)&unk_1002C0F80);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 10LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t sub_1000D66C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355588);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355588);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  uint64_t v15 = sub_10000FD98( &qword_100356440,  type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable,  (uint64_t)&unk_1002C10E8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 11LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t sub_1000D684C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355590);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355590);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  uint64_t v15 = sub_10000FD98( &qword_100356458,  type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed,  (uint64_t)&unk_1002C1250);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 13LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t sub_1000D69D8(uint64_t a1, uint64_t a2)
{
  return sub_100065AC0( a1,  a2,  type metadata accessor for CLP_LogEntry_PrivateData_Location,  (uint64_t (*)(uint64_t, uint64_t))sub_1000D6A00) & 1;
}

BOOL sub_1000D6A00(uint64_t a1, uint64_t a2)
{
  uint64_t v229 = a2;
  uint64_t v184 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0LL);
  uint64_t v181 = *(void *)(v184 - 8);
  __chkstk_darwin(v184);
  uint64_t v178 = (uint64_t)&v177 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v180 = sub_100003A0C(&qword_10035C510);
  __chkstk_darwin(v180);
  uint64_t v185 = (uint64_t)&v177 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100003A0C(&qword_100355590);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v179 = (uint64_t)&v177 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v183 = (uint64_t)&v177 - v8;
  uint64_t v193 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0LL);
  uint64_t v189 = *(void *)(v193 - 8);
  __chkstk_darwin(v193);
  uint64_t v182 = (uint64_t)&v177 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v188 = sub_100003A0C(&qword_10035C518);
  __chkstk_darwin(v188);
  uint64_t v194 = (uint64_t)&v177 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100003A0C(&qword_100355588);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v187 = (uint64_t)&v177 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v192 = (uint64_t)&v177 - v14;
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0LL);
  uint64_t v196 = *(void *)(v15 - 8);
  uint64_t v197 = v15;
  __chkstk_darwin(v15);
  uint64_t v186 = (uint64_t)&v177 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v195 = sub_100003A0C(&qword_10035C520);
  __chkstk_darwin(v195);
  double v199 = (char *)&v177 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100003A0C(&qword_100355580);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v190 = (uint64_t)&v177 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v198 = (char *)&v177 - v21;
  uint64_t v203 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0LL);
  uint64_t v201 = *(void *)(v203 - 8);
  __chkstk_darwin(v203);
  uint64_t v191 = (uint64_t)&v177 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v200 = sub_100003A0C(&qword_10035C528);
  __chkstk_darwin(v200);
  uint64_t v204 = (uint64_t)&v177 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = sub_100003A0C(&qword_100355578);
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v202 = (uint64_t)&v177 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v25);
  uint64_t v205 = (uint64_t)&v177 - v27;
  uint64_t v28 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0LL);
  uint64_t v209 = *(void *)(v28 - 8);
  uint64_t v210 = v28;
  __chkstk_darwin(v28);
  uint64_t v206 = (uint64_t)&v177 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v208 = sub_100003A0C(&qword_10035C530);
  __chkstk_darwin(v208);
  uint64_t v211 = (uint64_t)&v177 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = sub_100003A0C(&qword_100355570);
  uint64_t v32 = __chkstk_darwin(v31);
  double v227 = (char *)&v177 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v32);
  uint64_t v213 = (uint64_t)&v177 - v34;
  uint64_t v35 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL);
  uint64_t v216 = *(void *)(v35 - 8);
  uint64_t v217 = v35;
  __chkstk_darwin(v35);
  uint64_t v207 = (uint64_t)&v177 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v215 = sub_100003A0C(&qword_10035C538);
  __chkstk_darwin(v215);
  uint64_t v218 = (uint64_t)&v177 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = sub_100003A0C(&qword_100355568);
  uint64_t v39 = __chkstk_darwin(v38);
  uint64_t v212 = (uint64_t)&v177 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v39);
  uint64_t v223 = (uint64_t)&v177 - v41;
  uint64_t v42 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL);
  uint64_t v220 = *(void *)(v42 - 8);
  uint64_t v221 = v42;
  __chkstk_darwin(v42);
  uint64_t v214 = (uint64_t)&v177 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v219 = sub_100003A0C(&qword_10035C540);
  __chkstk_darwin(v219);
  uint64_t v222 = (uint64_t)&v177 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = sub_100003A0C(&qword_100355560);
  uint64_t v46 = __chkstk_darwin(v45);
  uint64_t v226 = (char *)&v177 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v46);
  int v225 = (char *)&v177 - v48;
  uint64_t v49 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v50 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v224 = (uint64_t)&v177 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v52 = sub_100003A0C(&qword_10035C418);
  __chkstk_darwin(v52);
  double v54 = (char *)&v177 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v55 = sub_100003A0C(&qword_100355538);
  uint64_t v56 = __chkstk_darwin(v55);
  uint64_t v228 = (uint64_t)&v177 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v56);
  uint64_t v59 = (char *)&v177 - v58;
  uint64_t v60 = a1;
  uint64_t v61 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v61, v255, 0LL, 0LL);
  sub_10000E6C0(v61, (uint64_t)v59, &qword_100355538);
  uint64_t v62 = v229;
  uint64_t v63 = v229
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess( v229 + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  v254,  0LL,  0LL);
  uint64_t v64 = (uint64_t)&v54[*(int *)(v52 + 48)];
  sub_10000E6C0((uint64_t)v59, (uint64_t)v54, &qword_100355538);
  sub_10000E6C0(v63, v64, &qword_100355538);
  uint64_t v65 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 48);
  if (v65((uint64_t)v54, 1LL, v49) == 1)
  {
    swift_retain(v60);
    swift_retain(v62);
    sub_100015764((uint64_t)v59, &qword_100355538);
    int v66 = v65(v64, 1LL, v49);
    uint64_t v67 = v60;
    if (v66 == 1)
    {
      sub_100015764((uint64_t)v54, &qword_100355538);
      goto LABEL_11;
    }

LABEL_84:
    sub_100015764(v185, &qword_10035C510);
    return 0LL;
  }

  sub_10000E6C0(v185, v179, &qword_100355590);
  if (v173(v172, 1LL, v184) == 1)
  {
    swift_release(v67);
    swift_release(v62);
    sub_100015764(v183, &qword_100355590);
    sub_100004090(v179, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
    goto LABEL_84;
  }

  uint64_t v174 = v178;
  sub_100003E68(v172, v178, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  uint64_t v175 = v179;
  char v176 = sub_100065750(v179, v174, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  swift_release(v67);
  swift_release(v62);
  sub_100004090(v174, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  sub_100015764(v183, &qword_100355590);
  sub_100004090(v175, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  sub_100015764(v185, &qword_100355590);
  return (v176 & 1) != 0;
}

Swift::Int sub_1000D816C()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_Location,  &qword_100355728,  (uint64_t)&unk_1002C14B8);
}

uint64_t sub_1000D8188@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD7C(a1, &qword_10037A5C8, &qword_10037A5D0, (uint64_t)sub_1000D49B8, a2);
}

uint64_t sub_1000D81A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D557C(a1, a2, a3);
}

uint64_t sub_1000D81B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D5A48(a1, a2, a3);
}

uint64_t sub_1000D81CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C198,  type metadata accessor for CLP_LogEntry_PrivateData_Location,  (uint64_t)&unk_1002C1430);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000D821C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A5C0, (uint64_t)qword_100369D98, (uint64_t)sub_1000D45DC, a1);
}

uint64_t sub_1000D8238(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356470,  type metadata accessor for CLP_LogEntry_PrivateData_Location,  (uint64_t)&unk_1002C13B8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D8278(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356470,  type metadata accessor for CLP_LogEntry_PrivateData_Location,  (uint64_t)&unk_1002C13B8);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000D82C8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369DB0);
  sub_10000E704(v0, (uint64_t)qword_100369DB0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 0LL;
  *(void *)uint64_t v9 = "SQ_UNKNOWN";
  *(void *)(v9 + 8) = 10LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "SQ_POOR";
  *((void *)v13 + 1) = 7LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 2LL;
  *(void *)uint64_t v14 = "SQ_GOOD";
  *(void *)(v14 + 8) = 7LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D8454()
{
  return sub_100008C30(&qword_10037A5D8, (uint64_t)qword_100369DB0, (uint64_t)sub_1000D82C8);
}

uint64_t sub_1000D8470@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A5D8, (uint64_t)qword_100369DB0, (uint64_t)sub_1000D82C8, a1);
}

uint64_t sub_1000D848C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A5D8, (uint64_t)qword_100369DB0, (uint64_t)sub_1000D82C8, a1);
}

uint64_t sub_1000D84A8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369DC8);
  sub_10000E704(v0, (uint64_t)qword_100369DC8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 0LL;
  *(void *)uint64_t v9 = "MD_UNKNOWN";
  *(void *)(v9 + 8) = 10LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "MD_YES";
  *((void *)v13 + 1) = 6LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 2LL;
  *(void *)uint64_t v14 = "MD_NO";
  *(void *)(v14 + 8) = 5LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D8638()
{
  return sub_100008C30(&qword_10037A5E0, (uint64_t)qword_100369DC8, (uint64_t)sub_1000D84A8);
}

uint64_t sub_1000D8654@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A5E0, (uint64_t)qword_100369DC8, (uint64_t)sub_1000D84A8, a1);
}

uint64_t sub_1000D8670@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A5E0, (uint64_t)qword_100369DC8, (uint64_t)sub_1000D84A8, a1);
}

void *sub_1000D868C()
{
  return &unk_10033EF18;
}

unint64_t sub_1000D8698()
{
  return 0xD000000000000029LL;
}

uint64_t sub_1000D86B4()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369DE0);
  sub_10000E704(v0, (uint64_t)qword_100369DE0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3340;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "locations";
  *(void *)(v9 + 8) = 9LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "locations_private";
  *((void *)v13 + 1) = 17LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D880C()
{
  return sub_100008C30(&qword_10037A5E8, (uint64_t)qword_100369DE0, (uint64_t)sub_1000D86B4);
}

uint64_t sub_1000D8828@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A5E8, (uint64_t)qword_100369DE0, (uint64_t)sub_1000D86B4, a1);
}

uint64_t sub_1000D8844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0) {
        return result;
      }
      if (result == 2) {
        break;
      }
      if (result == 1)
      {
        uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL);
        uint64_t v10 = sub_10000FD98( &qword_100355730,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  (uint64_t)&unk_1002C02D8);
        uint64_t v11 = v3;
        goto LABEL_5;
      }

uint64_t sub_1000D8960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v3;
  if (!*(void *)(*v3 + 16LL)
    || (uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0LL),
        uint64_t v10 = sub_10000FD98( &qword_100355730,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  (uint64_t)&unk_1002C02D8),  result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v8, 1LL, v9, v10, a2, a3),  !v4))
  {
    uint64_t v12 = v3[1];
    if (!*(void *)(v12 + 16)
      || (uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0LL),
          uint64_t v14 = sub_10000FD98( &qword_100355738,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  (uint64_t)&unk_1002C08C8),  result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)( v12,  2LL,  v13,  v14,  a2,  a3),  !v4))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations(0LL);
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }

  return result;
}

Swift::Int sub_1000D8A94()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations,  &qword_100355740,  (uint64_t)&unk_1002C1670);
}

uint64_t sub_1000D8AB0@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  a1[1] = &_swiftEmptyArrayStorage;
  return UnknownStorage.init()();
}

uint64_t (*sub_1000D8AE0())()
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000D8AF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D8844(a1, a2, a3);
}

uint64_t sub_1000D8B08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D8960(a1, a2, a3);
}

uint64_t sub_1000D8B1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C190,  type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations,  (uint64_t)&unk_1002C15E8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000D8B6C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A5E8, (uint64_t)qword_100369DE0, (uint64_t)sub_1000D86B4, a1);
}

uint64_t sub_1000D8B88(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356488,  type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations,  (uint64_t)&unk_1002C1570);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D8BC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356488,  type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations,  (uint64_t)&unk_1002C1570);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000D8C18()
{
  return &unk_10033EF28;
}

unint64_t sub_1000D8C24()
{
  return 0xD000000000000031LL;
}

uint64_t sub_1000D8C40()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369DF8);
  sub_10000E704(v0, (uint64_t)qword_100369DF8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32F0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "gnss_mode_of_operation";
  *(void *)(v9 + 8) = 22LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "active_gnss_session";
  *(void *)(v13 + 8) = 19LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "rhythmic_mode";
  *((void *)v15 + 1) = 13LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "current_modes_of_operation";
  *((void *)v17 + 1) = 26LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 5LL;
  *(void *)uint64_t v18 = "has_subscribed_rhythmic_client";
  *(void *)(v18 + 8) = 30LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D8E44()
{
  return sub_100008C30(&qword_10037A5F0, (uint64_t)qword_100369DF8, (uint64_t)sub_1000D8C40);
}

uint64_t sub_1000D8E60@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A5F0, (uint64_t)qword_100369DF8, (uint64_t)sub_1000D8C40, a1);
}

uint64_t sub_1000D8E7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v12 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0LL) + 20);
          unint64_t v13 = sub_10014A950();
          uint64_t v14 = v12;
          uint64_t v15 = &type metadata for CLP_LogEntry_PrivateData_GnssModeOfOperation;
          goto LABEL_13;
        case 2LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0LL) + 24);
          goto LABEL_5;
        case 3LL:
          uint64_t v16 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0LL) + 28);
          unint64_t v13 = sub_10014A90C();
          uint64_t v14 = v16;
          uint64_t v15 = &type metadata for CLP_LogEntry_PrivateData_RhythmicGnssWakeMode;
LABEL_13:
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v14, v15, v13, a2, a3);
          goto LABEL_6;
        case 4LL:
          uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0LL);
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + *(int *)(v17 + 32), a2, a3);
          goto LABEL_6;
        case 5LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0LL) + 36);
LABEL_5:
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + v10, a2, a3);
LABEL_6:
          uint64_t v9 = v11;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000D8FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0LL);
  uint64_t v10 = (int *)result;
  if (*(_BYTE *)(v5 + *(int *)(result + 20)) != 3)
  {
    char v16 = *(_BYTE *)(v5 + *(int *)(result + 20));
    unint64_t v11 = sub_10014A950();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v16,  1LL,  &type metadata for CLP_LogEntry_PrivateData_GnssModeOfOperation,  v11,  a2,  a3);
  }

  if (!v4)
  {
    int v12 = *(unsigned __int8 *)(v5 + v10[6]);
    if (v12 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v12 & 1, 2LL, a2, a3);
    }
    if (*(_BYTE *)(v5 + v10[7]) != 5)
    {
      char v17 = *(_BYTE *)(v5 + v10[7]);
      unint64_t v13 = sub_10014A90C();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v17,  3LL,  &type metadata for CLP_LogEntry_PrivateData_RhythmicGnssWakeMode,  v13,  a2,  a3);
    }

    uint64_t v14 = (unsigned int *)(v5 + v10[8]);
    if ((v14[1] & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v14, 4LL, a2, a3);
    }
    int v15 = *(unsigned __int8 *)(v5 + v10[9]);
    if (v15 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v15 & 1, 5LL, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_1000D9174()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate,  &qword_100355748,  (uint64_t)&unk_1002C17D8);
}

uint64_t sub_1000D9190@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 3;
  *(_BYTE *)(a2 + v5) = 2;
  uint64_t v6 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 5;
  uint64_t v7 = a2 + v6;
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  *(_BYTE *)(a2 + a1[9]) = 2;
  return result;
}

uint64_t sub_1000D91EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D8E7C(a1, a2, a3);
}

uint64_t sub_1000D9200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D8FE4(a1, a2, a3);
}

uint64_t sub_1000D9214(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C188,  type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate,  (uint64_t)&unk_1002C1750);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000D9264@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A5F0, (uint64_t)qword_100369DF8, (uint64_t)sub_1000D8C40, a1);
}

uint64_t sub_1000D9280(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003564A0,  type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate,  (uint64_t)&unk_1002C16D8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D92C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003564A0,  type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate,  (uint64_t)&unk_1002C16D8);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000D9310()
{
  return &unk_10033EF38;
}

unint64_t sub_1000D931C()
{
  return 0xD000000000000031LL;
}

uint64_t sub_1000D9338(uint64_t a1)
{
  return sub_1000FB384( a1,  qword_100369E10,  (uint64_t)"allow_streaming",  15LL,  (unsigned int *)&enum case for _NameMap.NameDescription.standard(_:));
}

uint64_t sub_1000D9358()
{
  return sub_100008C30(&qword_10037A5F8, (uint64_t)qword_100369E10, (uint64_t)sub_1000D9338);
}

uint64_t sub_1000D9374@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A5F8, (uint64_t)qword_100369E10, (uint64_t)sub_1000D9338, a1);
}

uint64_t sub_1000D9390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v10 & 1) != 0) {
      break;
    }
    if (result == 1)
    {
      uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0LL);
      dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + *(int *)(v11 + 20), a2, a3);
    }

    uint64_t v4 = 0LL;
    uint64_t v7 = a2;
  }

  return result;
}

uint64_t sub_1000D9424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0LL);
  int v10 = *(unsigned __int8 *)(v5 + *(int *)(result + 20));
  if (v10 != 2) {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v10 & 1, 1LL, a2, a3);
  }
  if (!v4) {
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_1000D94BC()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl,  &qword_100355750,  (uint64_t)&unk_1002C1940);
}

uint64_t sub_1000D94D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  *(_BYTE *)(a2 + *(int *)(a1 + 20)) = 2;
  return result;
}

uint64_t sub_1000D9508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D9390(a1, a2, a3);
}

uint64_t sub_1000D951C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D9424(a1, a2, a3);
}

uint64_t sub_1000D9530(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C180,  type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl,  (uint64_t)&unk_1002C18B8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000D9580@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A5F8, (uint64_t)qword_100369E10, (uint64_t)sub_1000D9338, a1);
}

uint64_t sub_1000D959C(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003564B8,  type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl,  (uint64_t)&unk_1002C1840);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D95DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003564B8,  type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl,  (uint64_t)&unk_1002C1840);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000D962C()
{
  return &unk_10033EF48;
}

unint64_t sub_1000D9638()
{
  return 0xD000000000000027LL;
}

uint64_t sub_1000D9654()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369E28);
  sub_10000E704(v0, (uint64_t)qword_100369E28);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v39 = swift_allocObject(v1, v6 - v4 + 16 * v4, v5 | 7);
  *(_OWORD *)(v39 + 16) = xmmword_1002BACF0;
  uint64_t v7 = v39 + v6;
  uint64_t v8 = v39 + v6 + *(int *)(v2 + 48);
  *(void *)(v39 + v6) = 1LL;
  *(void *)uint64_t v8 = "type";
  *(void *)(v8 + 8) = 4LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v39 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "confidence";
  *(void *)(v12 + 8) = 10LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  unint64_t v13 = (void *)(v39 + v6 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *unint64_t v13 = 3LL;
  *(void *)uint64_t v14 = "mounted_state";
  *((void *)v14 + 1) = 13LL;
  v14[16] = 2;
  v11();
  int v15 = (void *)(v39 + v6 + 3 * v4);
  char v16 = (char *)v15 + *(int *)(v2 + 48);
  *int v15 = 4LL;
  *(void *)char v16 = "mounted_confidence";
  *((void *)v16 + 1) = 18LL;
  v16[16] = 2;
  v11();
  char v17 = (void *)(v39 + v6 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *char v17 = 5LL;
  *(void *)uint64_t v18 = "is_standing";
  *((void *)v18 + 1) = 11LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v39 + v6 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 6LL;
  *(void *)uint64_t v20 = "tilt";
  *((void *)v20 + 1) = 4LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v39 + v6 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 7LL;
  *(void *)uint64_t v22 = "timestamp_DEPRECATED";
  *((void *)v22 + 1) = 20LL;
  _BYTE v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v39 + v6 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  void *v23 = 8LL;
  *(void *)uint64_t v24 = "is_vehicle_connected";
  *((void *)v24 + 1) = 20LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v39 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 9LL;
  *(void *)uint64_t v25 = "exit_state";
  *(void *)(v25 + 8) = 10LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  uint64_t v26 = (void *)(v39 + v6 + 9 * v4);
  uint64_t v27 = (char *)v26 + *(int *)(v2 + 48);
  void *v26 = 10LL;
  *(void *)uint64_t v27 = "est_exit_time";
  *((void *)v27 + 1) = 13LL;
  v27[16] = 2;
  v11();
  uint64_t v28 = (void *)(v39 + v6 + 10 * v4);
  uint64_t v29 = (char *)v28 + *(int *)(v2 + 48);
  *uint64_t v28 = 11LL;
  *(void *)uint64_t v29 = "start_time_DEPRECATED";
  *((void *)v29 + 1) = 21LL;
  v29[16] = 2;
  v11();
  uint64_t v30 = (void *)(v39 + v6 + 11 * v4);
  uint64_t v31 = (char *)v30 + *(int *)(v2 + 48);
  void *v30 = 12LL;
  *(void *)uint64_t v31 = "raw_type";
  *((void *)v31 + 1) = 8LL;
  v31[16] = 2;
  v11();
  uint64_t v32 = (void *)(v39 + v6 + 12 * v4);
  uint64_t v33 = (char *)v32 + *(int *)(v2 + 48);
  *uint64_t v32 = 13LL;
  *(void *)uint64_t v33 = "raw_confidence";
  *((void *)v33 + 1) = 14LL;
  v33[16] = 2;
  v11();
  uint64_t v34 = (void *)(v39 + v6 + 13 * v4);
  uint64_t v35 = (char *)v34 + *(int *)(v2 + 48);
  *uint64_t v34 = 14LL;
  *(void *)uint64_t v35 = "timestamp";
  *((void *)v35 + 1) = 9LL;
  v35[16] = 2;
  v11();
  uint64_t v36 = (void *)(v39 + v6 + 14 * v4);
  uint64_t v37 = (char *)v36 + *(int *)(v2 + 48);
  void *v36 = 15LL;
  *(void *)uint64_t v37 = "start_time";
  *((void *)v37 + 1) = 10LL;
  v37[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v39);
}

uint64_t sub_1000D9A68()
{
  return sub_100008C30(&qword_10037A600, (uint64_t)qword_100369E28, (uint64_t)sub_1000D9654);
}

uint64_t sub_1000D9A84@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A600, (uint64_t)qword_100369E28, (uint64_t)sub_1000D9654, a1);
}

uint64_t sub_1000D9AA0()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  *(_DWORD *)(v1 + 16) = 67306568;
  *(_BYTE *)(v1 + 20) = 2;
  *(_DWORD *)(v1 + 24) = 0;
  *(_BYTE *)(v1 + 28) = 1;
  *(void *)(v1 + 32) = 0LL;
  *(_BYTE *)(v1 + 40) = 1;
  *(_WORD *)(v1 + 41) = 1026;
  *(void *)(v1 + 48) = 0LL;
  *(_BYTE *)(v1 + 56) = 1;
  *(void *)(v1 + 64) = 0LL;
  *(_BYTE *)(v1 + 72) = 1;
  uint64_t v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  *(_WORD *)(v1 + 73) = 1096;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL);
  v4(v2, 1LL, 1LL, v3);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v4)( v1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime,  1LL,  1LL,  v3);
  qword_10037A610 = v1;
  return result;
}

uint64_t sub_1000D9B78(uint64_t a1)
{
  uint64_t v3 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v3);
  uint64_t v34 = (uint64_t)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = v1 + 17;
  *(_DWORD *)(v1 + 16) = 67306568;
  uint64_t v24 = v1 + 18;
  uint64_t v25 = v1 + 19;
  *(_BYTE *)(v1 + 20) = 2;
  *(_DWORD *)(v1 + 24) = 0;
  *(_BYTE *)(v1 + 28) = 1;
  *(void *)(v1 + 32) = 0LL;
  *(_WORD *)(v1 + 41) = 1026;
  *(_BYTE *)(v1 + 40) = 1;
  uint64_t v26 = (_BYTE *)(v1 + 41);
  uint64_t v27 = v1 + 42;
  *(void *)(v1 + 48) = 0LL;
  uint64_t v28 = (void *)(v1 + 48);
  *(_BYTE *)(v1 + 56) = 1;
  *(void *)(v1 + 64) = 0LL;
  uint64_t v29 = (void *)(v1 + 64);
  *(_BYTE *)(v1 + 72) = 1;
  *(_WORD *)(v1 + 73) = 1096;
  uint64_t v30 = (_BYTE *)(v1 + 73);
  uint64_t v31 = v1 + 74;
  uint64_t v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  uint64_t v32 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 56LL);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v7)(v5, 1LL, 1LL, v6);
  uint64_t v33 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  v7();
  swift_beginAccess(a1 + 16, v63, 0LL, 0LL);
  LOBYTE(v7) = *(_BYTE *)(a1 + 16);
  swift_beginAccess(v1 + 16, v62, 1LL, 0LL);
  *(_BYTE *)(v1 + 16) = (_BYTE)v7;
  swift_beginAccess(a1 + 17, v61, 0LL, 0LL);
  LOBYTE(v7) = *(_BYTE *)(a1 + 17);
  swift_beginAccess(v23, v60, 1LL, 0LL);
  *(_BYTE *)(v1 + 17) = (_BYTE)v7;
  swift_beginAccess(a1 + 18, v59, 0LL, 0LL);
  LOBYTE(v7) = *(_BYTE *)(a1 + 18);
  swift_beginAccess(v24, v58, 1LL, 0LL);
  *(_BYTE *)(v1 + 18) = (_BYTE)v7;
  swift_beginAccess(a1 + 19, v57, 0LL, 0LL);
  LOBYTE(v7) = *(_BYTE *)(a1 + 19);
  swift_beginAccess(v25, &v56, 1LL, 0LL);
  *(_BYTE *)(v1 + 19) = (_BYTE)v7;
  swift_beginAccess(a1 + 20, &v55, 0LL, 0LL);
  LOBYTE(v7) = *(_BYTE *)(a1 + 20);
  swift_beginAccess(v1 + 20, &v54, 1LL, 0LL);
  *(_BYTE *)(v1 + 20) = (_BYTE)v7;
  swift_beginAccess(a1 + 24, &v53, 0LL, 0LL);
  int v8 = *(_DWORD *)(a1 + 24);
  LOBYTE(v7) = *(_BYTE *)(a1 + 28);
  swift_beginAccess(v1 + 24, &v52, 1LL, 0LL);
  *(_DWORD *)(v1 + 24) = v8;
  *(_BYTE *)(v1 + 28) = (_BYTE)v7;
  swift_beginAccess(a1 + 32, &v51, 0LL, 0LL);
  uint64_t v9 = *(void *)(a1 + 32);
  char v10 = *(_BYTE *)(a1 + 40);
  swift_beginAccess(v1 + 32, &v50, 1LL, 0LL);
  *(void *)(v1 + 32) = v9;
  *(_BYTE *)(v1 + 40) = v10;
  swift_beginAccess(a1 + 41, &v49, 0LL, 0LL);
  LOBYTE(v9) = *(_BYTE *)(a1 + 41);
  uint64_t v11 = v26;
  swift_beginAccess(v26, &v48, 1LL, 0LL);
  *uint64_t v11 = v9;
  swift_beginAccess(a1 + 42, &v47, 0LL, 0LL);
  LOBYTE(v11) = *(_BYTE *)(a1 + 42);
  swift_beginAccess(v27, &v46, 1LL, 0LL);
  *(_BYTE *)(v1 + 42) = (_BYTE)v11;
  swift_beginAccess(a1 + 48, &v45, 0LL, 0LL);
  uint64_t v12 = *(void *)(a1 + 48);
  LOBYTE(v9) = *(_BYTE *)(a1 + 56);
  unint64_t v13 = v28;
  swift_beginAccess(v28, &v44, 1LL, 0LL);
  *unint64_t v13 = v12;
  *(_BYTE *)(v1 + 56) = v9;
  swift_beginAccess(a1 + 64, &v43, 0LL, 0LL);
  uint64_t v14 = *(void *)(a1 + 64);
  LOBYTE(v9) = *(_BYTE *)(a1 + 72);
  int v15 = v29;
  swift_beginAccess(v29, &v42, 1LL, 0LL);
  *int v15 = v14;
  *(_BYTE *)(v1 + 72) = v9;
  swift_beginAccess(a1 + 73, &v41, 0LL, 0LL);
  LOBYTE(v14) = *(_BYTE *)(a1 + 73);
  char v16 = v30;
  swift_beginAccess(v30, &v40, 1LL, 0LL);
  *char v16 = v14;
  swift_beginAccess(a1 + 74, &v39, 0LL, 0LL);
  LOBYTE(v14) = *(_BYTE *)(a1 + 74);
  swift_beginAccess(v31, &v38, 1LL, 0LL);
  *(_BYTE *)(v1 + 74) = v14;
  uint64_t v17 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp,  &v37,  0LL,  0LL);
  uint64_t v18 = v34;
  sub_10000E6C0(v17, v34, &qword_100355538);
  uint64_t v19 = v32;
  swift_beginAccess(v32, v36, 33LL, 0LL);
  sub_10000E5D4(v18, v19, &qword_100355538);
  swift_endAccess(v36);
  uint64_t v20 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime,  v36,  0LL,  0LL);
  sub_10000E6C0(v20, v18, &qword_100355538);
  swift_release(a1);
  uint64_t v21 = v33;
  swift_beginAccess(v33, v35, 33LL, 0LL);
  sub_10000E5D4(v18, v21, &qword_100355538);
  swift_endAccess(v35);
  return v1;
}

uint64_t sub_1000DA068()
{
  return sub_1000DA088( &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp,  &qword_100355538,  &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime,  &qword_100355538);
}

uint64_t sub_1000DA088(void *a1, uint64_t *a2, void *a3, uint64_t *a4)
{
  return swift_deallocClassInstance( v4,  *(unsigned int *)(*(void *)v4 + 48LL),  *(unsigned __int16 *)(*(void *)v4 + 52LL));
}

uint64_t sub_1000DA0DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v9)) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v3 + v9);
    uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
    uint64_t v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v13 = swift_retain(v10);
    sub_1000D9B78(v13);
    uint64_t v14 = *(void *)(v6 + v9);
    *(void *)(v6 + v9) = v12;
    swift_release(v14);
  }

  uint64_t v15 = *(void *)(v6 + v9);
  swift_retain(v15);
  uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    uint64_t v37 = v15 + 74;
    uint64_t v35 = v15 + 24;
    uint64_t v19 = &type metadata for CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType;
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1LL:
          uint64_t v20 = v15 + 16;
          goto LABEL_22;
        case 2LL:
          uint64_t v21 = v15 + 17;
          goto LABEL_24;
        case 3LL:
          swift_beginAccess(v15 + 18, v36, 33LL, 0LL);
          unint64_t v22 = sub_10014A19C();
          uint64_t v23 = v15 + 18;
          uint64_t v24 = &type metadata for CLP_LogEntry_PrivateData_MotionActivity.MountedStateType;
          goto LABEL_25;
        case 4LL:
          uint64_t v21 = v15 + 19;
          goto LABEL_24;
        case 5LL:
          uint64_t v25 = v15 + 20;
          goto LABEL_16;
        case 6LL:
          swift_beginAccess(v35, v36, 33LL, 0LL);
          uint64_t v26 = v5;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v35, a2, a3);
          goto LABEL_26;
        case 7LL:
          uint64_t v27 = v15 + 32;
          goto LABEL_20;
        case 8LL:
          uint64_t v25 = v15 + 41;
LABEL_16:
          swift_beginAccess(v25, v36, 33LL, 0LL);
          uint64_t v26 = v5;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v25, a2, a3);
          goto LABEL_26;
        case 9LL:
          swift_beginAccess(v15 + 42, v36, 33LL, 0LL);
          unint64_t v22 = sub_10014A114();
          uint64_t v23 = v15 + 42;
          uint64_t v24 = &type metadata for CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType;
          goto LABEL_25;
        case 10LL:
          uint64_t v27 = v15 + 48;
          goto LABEL_20;
        case 11LL:
          uint64_t v27 = v15 + 64;
LABEL_20:
          swift_beginAccess(v27, v36, 33LL, 0LL);
          uint64_t v26 = v5;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v27, a2, a3);
          goto LABEL_26;
        case 12LL:
          uint64_t v20 = v15 + 73;
LABEL_22:
          swift_beginAccess(v20, v36, 33LL, 0LL);
          unint64_t v22 = sub_10014A7FC();
          uint64_t v23 = v20;
          uint64_t v24 = &type metadata for CLP_LogEntry_PrivateData_DominantMotionModeType;
          goto LABEL_25;
        case 13LL:
          uint64_t v21 = v37;
LABEL_24:
          swift_beginAccess(v21, v36, 33LL, 0LL);
          unint64_t v22 = sub_10014A158();
          uint64_t v23 = v21;
          uint64_t v24 = v19;
LABEL_25:
          uint64_t v26 = v5;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v23, v24, v22, a2, a3);
          goto LABEL_26;
        case 14LL:
          uint64_t v28 = v15
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp,  v36,  33LL,  0LL);
          uint64_t v29 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
          uint64_t v30 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
          uint64_t v26 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v28, v29, v30, a2, a3);
LABEL_26:
          uint64_t v5 = v26;
          swift_endAccess(v36);
          break;
        case 15LL:
          uint64_t v31 = v19;
          uint64_t v32 = v15
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime,  v36,  33LL,  0LL);
          uint64_t v33 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
          uint64_t v34 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v32, v33, v34, a2, a3);
          swift_endAccess(v36);
          uint64_t v19 = v31;
          break;
        default:
          break;
      }

      uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return swift_release(v15);
}

uint64_t sub_1000DA504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL) + 20));
  swift_retain(v9);
  swift_beginAccess(v9 + 16, &v20, 0LL, 0LL);
  if (*(_BYTE *)(v9 + 16) != 72)
  {
    v33[0] = *(_BYTE *)(v9 + 16);
    unint64_t v10 = sub_10014A7FC();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v33,  1LL,  &type metadata for CLP_LogEntry_PrivateData_DominantMotionModeType,  v10,  a2,  a3);
  }

  if (v4) {
    return swift_release(v9);
  }
  swift_beginAccess(v9 + 17, v21, 0LL, 0LL);
  if (*(_BYTE *)(v9 + 17) != 4)
  {
    v33[0] = *(_BYTE *)(v9 + 17);
    unint64_t v12 = sub_10014A158();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v33,  2LL,  &type metadata for CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType,  v12,  a2,  a3);
  }

  swift_beginAccess(v9 + 18, v22, 0LL, 0LL);
  if (*(_BYTE *)(v9 + 18) != 3)
  {
    v33[0] = *(_BYTE *)(v9 + 18);
    unint64_t v13 = sub_10014A19C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v33,  3LL,  &type metadata for CLP_LogEntry_PrivateData_MotionActivity.MountedStateType,  v13,  a2,  a3);
  }

  swift_beginAccess(v9 + 19, v23, 0LL, 0LL);
  if (*(_BYTE *)(v9 + 19) != 4)
  {
    v33[0] = *(_BYTE *)(v9 + 19);
    unint64_t v14 = sub_10014A158();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v33,  4LL,  &type metadata for CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType,  v14,  a2,  a3);
  }

  swift_beginAccess(v9 + 20, v33, 0LL, 0LL);
  int v15 = *(unsigned __int8 *)(v9 + 20);
  if (v15 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v15 & 1, 5LL, a2, a3);
  }
  swift_beginAccess(v9 + 24, v32, 0LL, 0LL);
  if ((*(_BYTE *)(v9 + 28) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(6LL, a2, a3, *(float *)(v9 + 24));
  }
  swift_beginAccess(v9 + 32, v31, 0LL, 0LL);
  if ((*(_BYTE *)(v9 + 40) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(7LL, a2, a3, *(double *)(v9 + 32));
  }
  swift_beginAccess(v9 + 41, v30, 0LL, 0LL);
  int v16 = *(unsigned __int8 *)(v9 + 41);
  if (v16 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v16 & 1, 8LL, a2, a3);
  }
  swift_beginAccess(v9 + 42, v29, 0LL, 0LL);
  if (*(_BYTE *)(v9 + 42) != 4)
  {
    v28[0] = *(_BYTE *)(v9 + 42);
    unint64_t v17 = sub_10014A114();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v28,  9LL,  &type metadata for CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType,  v17,  a2,  a3);
  }

  swift_beginAccess(v9 + 48, v28, 0LL, 0LL);
  if ((*(_BYTE *)(v9 + 56) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(10LL, a2, a3, *(double *)(v9 + 48));
  }
  swift_beginAccess(v9 + 64, v27, 0LL, 0LL);
  if ((*(_BYTE *)(v9 + 72) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(11LL, a2, a3, *(double *)(v9 + 64));
  }
  swift_beginAccess(v9 + 73, v26, 0LL, 0LL);
  if (*(_BYTE *)(v9 + 73) != 72)
  {
    v25[0] = *(_BYTE *)(v9 + 73);
    unint64_t v18 = sub_10014A7FC();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v25,  12LL,  &type metadata for CLP_LogEntry_PrivateData_DominantMotionModeType,  v18,  a2,  a3);
  }

  swift_beginAccess(v9 + 74, v25, 0LL, 0LL);
  if (*(_BYTE *)(v9 + 74) != 4)
  {
    char v24 = *(_BYTE *)(v9 + 74);
    unint64_t v19 = sub_10014A158();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v24,  13LL,  &type metadata for CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType,  v19,  a2,  a3);
  }

  sub_1000DA9A8(v9, a1, a2, a3);
  sub_1000DAB34(v9, a1, a2, a3);
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000DA9A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v6);
  int v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355538);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v15 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 14LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000DAB34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v6);
  int v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355538);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v15 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 15LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000DACC0(uint64_t a1, uint64_t a2)
{
  return sub_100065AC0( a1,  a2,  type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity,  (uint64_t (*)(uint64_t, uint64_t))sub_1000DACE8) & 1;
}

BOOL sub_1000DACE8(uint64_t a1, _BYTE *a2)
{
  uint64_t v69 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v4 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v66 = (uint64_t)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100003A0C(&qword_10035C418);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v68 = (uint64_t)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v65 - v9;
  uint64_t v11 = sub_100003A0C(&qword_100355538);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v67 = (uint64_t)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  int v16 = (char *)&v65 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  unint64_t v19 = (char *)&v65 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v65 - v20;
  swift_beginAccess(a1 + 16, v99, 0LL, 0LL);
  uint64_t v22 = *(char *)(a1 + 16);
  swift_beginAccess(a2 + 16, v98, 0LL, 0LL);
  uint64_t v23 = (char)a2[16];
  if (v22 == 72)
  {
    if ((_DWORD)v23 != 72) {
      return 0LL;
    }
  }

  else if ((_DWORD)v23 == 72 || qword_1002C93B0[v22] != qword_1002C93B0[v23])
  {
    return 0LL;
  }

  swift_beginAccess(a1 + 17, v97, 0LL, 0LL);
  int v24 = *(unsigned __int8 *)(a1 + 17);
  swift_beginAccess(a2 + 17, v96, 0LL, 0LL);
  int v25 = a2[17];
  if (v24 == 4)
  {
    if (v25 != 4) {
      return 0LL;
    }
  }

  else
  {
    BOOL result = 0LL;
    if (v25 == 4 || v24 != v25) {
      return result;
    }
  }

  swift_beginAccess(a1 + 18, v95, 0LL, 0LL);
  int v27 = *(unsigned __int8 *)(a1 + 18);
  swift_beginAccess(a2 + 18, v94, 0LL, 0LL);
  int v28 = a2[18];
  if (v27 == 3)
  {
    if (v28 != 3) {
      return 0LL;
    }
  }

  else
  {
    BOOL result = 0LL;
    if (v28 == 3 || v27 != v28) {
      return result;
    }
  }

  swift_beginAccess(a1 + 19, &v93, 0LL, 0LL);
  int v29 = *(unsigned __int8 *)(a1 + 19);
  swift_beginAccess(a2 + 19, &v92, 0LL, 0LL);
  int v30 = a2[19];
  if (v29 == 4)
  {
    if (v30 != 4) {
      return 0LL;
    }
  }

  else
  {
    BOOL result = 0LL;
    if (v30 == 4 || v29 != v30) {
      return result;
    }
  }

  swift_beginAccess(a1 + 20, &v91, 0LL, 0LL);
  int v31 = *(unsigned __int8 *)(a1 + 20);
  swift_beginAccess(a2 + 20, &v90, 0LL, 0LL);
  int v32 = a2[20];
  if (v31 == 2)
  {
    if (v32 != 2) {
      return 0LL;
    }
  }

  else if (v32 == 2 || ((((v32 & 1) == 0) ^ v31) & 1) == 0)
  {
    return 0LL;
  }

  swift_beginAccess(a1 + 24, &v89, 0LL, 0LL);
  float v33 = *(float *)(a1 + 24);
  char v34 = *(_BYTE *)(a1 + 28);
  uint64_t v65 = (uint64_t)(a2 + 24);
  swift_beginAccess(a2 + 24, &v88, 0LL, 0LL);
  char v35 = a2[28];
  if ((v34 & 1) != 0)
  {
    if (!a2[28]) {
      return 0LL;
    }
  }

  else
  {
    if ((v35 & 1) != 0) {
      return 0LL;
    }
  }

  swift_beginAccess(a1 + 32, &v87, 0LL, 0LL);
  double v36 = *(double *)(a1 + 32);
  char v37 = *(_BYTE *)(a1 + 40);
  uint64_t v65 = (uint64_t)(a2 + 32);
  swift_beginAccess(a2 + 32, &v86, 0LL, 0LL);
  char v38 = a2[40];
  if ((v37 & 1) != 0)
  {
    if (!a2[40]) {
      return 0LL;
    }
  }

  else
  {
    if ((v38 & 1) != 0) {
      return 0LL;
    }
  }

  swift_beginAccess(a1 + 41, &v85, 0LL, 0LL);
  int v39 = *(unsigned __int8 *)(a1 + 41);
  swift_beginAccess(a2 + 41, &v84, 0LL, 0LL);
  int v40 = a2[41];
  if (v39 == 2)
  {
    if (v40 != 2) {
      return 0LL;
    }
  }

  else if (v40 == 2 || ((((v40 & 1) == 0) ^ v39) & 1) == 0)
  {
    return 0LL;
  }

  swift_beginAccess(a1 + 42, &v83, 0LL, 0LL);
  int v41 = *(unsigned __int8 *)(a1 + 42);
  swift_beginAccess(a2 + 42, &v82, 0LL, 0LL);
  int v42 = a2[42];
  if (v41 == 4)
  {
    if (v42 != 4) {
      return 0LL;
    }
  }

  else
  {
    BOOL result = 0LL;
    if (v42 == 4 || v41 != v42) {
      return result;
    }
  }

  swift_beginAccess(a1 + 48, &v81, 0LL, 0LL);
  double v43 = *(double *)(a1 + 48);
  char v44 = *(_BYTE *)(a1 + 56);
  uint64_t v65 = (uint64_t)(a2 + 48);
  swift_beginAccess(a2 + 48, &v80, 0LL, 0LL);
  char v45 = a2[56];
  if ((v44 & 1) != 0)
  {
    if (!a2[56]) {
      return 0LL;
    }
  }

  else
  {
    if ((v45 & 1) != 0) {
      return 0LL;
    }
  }

  swift_beginAccess(a1 + 64, &v79, 0LL, 0LL);
  double v46 = *(double *)(a1 + 64);
  char v47 = *(_BYTE *)(a1 + 72);
  uint64_t v65 = (uint64_t)(a2 + 64);
  swift_beginAccess(a2 + 64, &v78, 0LL, 0LL);
  char v48 = a2[72];
  if ((v47 & 1) != 0)
  {
    if (!a2[72]) {
      return 0LL;
    }
  }

  else
  {
    if ((v48 & 1) != 0) {
      return 0LL;
    }
  }

  swift_beginAccess(a1 + 73, &v77, 0LL, 0LL);
  uint64_t v49 = *(char *)(a1 + 73);
  swift_beginAccess(a2 + 73, &v76, 0LL, 0LL);
  uint64_t v50 = (char)a2[73];
  if (v49 == 72)
  {
    if ((_DWORD)v50 != 72) {
      return 0LL;
    }
  }

  else if ((_DWORD)v50 == 72 || qword_1002C93B0[v49] != qword_1002C93B0[v50])
  {
    return 0LL;
  }

  swift_beginAccess(a1 + 74, &v75, 0LL, 0LL);
  int v51 = *(unsigned __int8 *)(a1 + 74);
  swift_beginAccess(a2 + 74, &v74, 0LL, 0LL);
  int v52 = a2[74];
  if (v51 == 4)
  {
    if (v52 != 4) {
      return 0LL;
    }
LABEL_70:
    uint64_t v53 = a1
        + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
    swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp,  &v73,  0LL,  0LL);
    sub_10000E6C0(v53, (uint64_t)v21, &qword_100355538);
    uint64_t v65 = (uint64_t)&a2[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp];
    swift_beginAccess( &a2[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp],  &v72,  0LL,  0LL);
    uint64_t v54 = (uint64_t)&v10[*(int *)(v6 + 48)];
    sub_10000E6C0((uint64_t)v21, (uint64_t)v10, &qword_100355538);
    uint64_t v55 = v65;
    uint64_t v65 = v54;
    sub_10000E6C0(v55, v54, &qword_100355538);
    uint64_t v56 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
    if (v56((uint64_t)v10, 1LL, v69) == 1)
    {
      swift_retain(a1);
      swift_retain(a2);
      sub_100015764((uint64_t)v21, &qword_100355538);
      if (v56(v65, 1LL, v69) == 1)
      {
        sub_100015764((uint64_t)v10, &qword_100355538);
LABEL_78:
        uint64_t v58 = a1
            + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
        swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime,  &v71,  0LL,  0LL);
        sub_10000E6C0(v58, (uint64_t)v16, &qword_100355538);
        uint64_t v59 = (uint64_t)&a2[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime];
        swift_beginAccess( &a2[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime],  &v70,  0LL,  0LL);
        uint64_t v60 = v68;
        uint64_t v61 = v68 + *(int *)(v6 + 48);
        sub_10000E6C0((uint64_t)v16, v68, &qword_100355538);
        sub_10000E6C0(v59, v61, &qword_100355538);
        if (v56(v60, 1LL, v69) == 1)
        {
          swift_release(a1);
          swift_release(a2);
          sub_100015764((uint64_t)v16, &qword_100355538);
          if (v56(v61, 1LL, v69) == 1)
          {
            sub_100015764(v68, &qword_100355538);
            return 1LL;
          }

          goto LABEL_83;
        }

        sub_10000E6C0(v68, v67, &qword_100355538);
        if (v56(v61, 1LL, v69) == 1)
        {
          swift_release(a1);
          swift_release(a2);
          sub_100015764((uint64_t)v16, &qword_100355538);
          sub_100004090(v67, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_83:
          sub_100015764(v68, &qword_10035C418);
          return 0LL;
        }

        uint64_t v62 = v66;
        sub_100003E68(v61, v66, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        uint64_t v63 = v67;
        char v64 = sub_100065750(v67, v62, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        swift_release(a1);
        swift_release(a2);
        sub_100004090(v62, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        sub_100015764((uint64_t)v16, &qword_100355538);
        sub_100004090(v63, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        sub_100015764(v68, &qword_100355538);
        return (v64 & 1) != 0;
      }
    }

    else
    {
      sub_10000E6C0((uint64_t)v10, (uint64_t)v19, &qword_100355538);
      if (v56(v65, 1LL, v69) != 1)
      {
        uint64_t v57 = v66;
        sub_100003E68(v65, v66, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        swift_retain(a1);
        swift_retain(a2);
        LODWORD(v65) = sub_100065750((uint64_t)v19, v57, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        sub_100004090(v57, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        sub_100015764((uint64_t)v21, &qword_100355538);
        sub_100004090((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        sub_100015764((uint64_t)v10, &qword_100355538);
        if ((v65 & 1) != 0) {
          goto LABEL_78;
        }
LABEL_76:
        swift_release(a1);
        swift_release(a2);
        return 0LL;
      }

      swift_retain(a1);
      swift_retain(a2);
      sub_100015764((uint64_t)v21, &qword_100355538);
      sub_100004090((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    }

    sub_100015764((uint64_t)v10, &qword_10035C418);
    goto LABEL_76;
  }

  BOOL result = 0LL;
  if (v52 != 4 && v51 == v52) {
    goto LABEL_70;
  }
  return result;
}

Swift::Int sub_1000DB6C8()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity,  &qword_100355758,  (uint64_t)&unk_1002C1AA8);
}

uint64_t sub_1000DB6E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD7C(a1, &qword_10037A608, &qword_10037A610, (uint64_t)sub_1000D9AA0, a2);
}

uint64_t sub_1000DB700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DA0DC(a1, a2, a3);
}

uint64_t sub_1000DB714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DA504(a1, a2, a3);
}

uint64_t sub_1000DB728(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C178,  type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity,  (uint64_t)&unk_1002C1A20);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000DB778@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A600, (uint64_t)qword_100369E28, (uint64_t)sub_1000D9654, a1);
}

uint64_t sub_1000DB794(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003564D0,  type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity,  (uint64_t)&unk_1002C19A8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DB7D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003564D0,  type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity,  (uint64_t)&unk_1002C19A8);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000DB828()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369E40);
  sub_10000E704(v0, (uint64_t)qword_100369E40);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 0LL;
  *(void *)uint64_t v9 = "MO_UNKNOWN";
  *(void *)(v9 + 8) = 10LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "MO_NOT_MOUNTED";
  *((void *)v13 + 1) = 14LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 2LL;
  *(void *)uint64_t v14 = "MO_MOUNTED";
  *(void *)(v14 + 8) = 10LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000DB9B8()
{
  return sub_100008C30(&qword_10037A618, (uint64_t)qword_100369E40, (uint64_t)sub_1000DB828);
}

uint64_t sub_1000DB9D4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A618, (uint64_t)qword_100369E40, (uint64_t)sub_1000DB828, a1);
}

uint64_t sub_1000DB9F0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A618, (uint64_t)qword_100369E40, (uint64_t)sub_1000DB828, a1);
}

uint64_t sub_1000DBA0C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369E58);
  sub_10000E704(v0, (uint64_t)qword_100369E58);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "C_UNKNOWN";
  *(void *)(v9 + 8) = 9LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "C_LOW";
  *(void *)(v13 + 8) = 5LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "C_MEDIUM";
  *((void *)v15 + 1) = 8LL;
  v15[16] = 2;
  v12();
  int v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *int v16 = 3LL;
  *(void *)uint64_t v17 = "C_HIGH";
  *((void *)v17 + 1) = 6LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000DBBC8()
{
  return sub_100008C30(&qword_10037A620, (uint64_t)qword_100369E58, (uint64_t)sub_1000DBA0C);
}

uint64_t sub_1000DBBE4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A620, (uint64_t)qword_100369E58, (uint64_t)sub_1000DBA0C, a1);
}

uint64_t sub_1000DBC00@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A620, (uint64_t)qword_100369E58, (uint64_t)sub_1000DBA0C, a1);
}

uint64_t sub_1000DBC1C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369E70);
  sub_10000E704(v0, (uint64_t)qword_100369E70);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "VE_UNKNOWN";
  *(void *)(v9 + 8) = 10LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "VE_NO_DETECTION";
  *(void *)(v13 + 8) = 15LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "VE_PREHEAT";
  *((void *)v15 + 1) = 10LL;
  v15[16] = 2;
  v12();
  int v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *int v16 = 3LL;
  *(void *)uint64_t v17 = "VE_DETECTED";
  *((void *)v17 + 1) = 11LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000DBDDC()
{
  return sub_100008C30(&qword_10037A628, (uint64_t)qword_100369E70, (uint64_t)sub_1000DBC1C);
}

uint64_t sub_1000DBDF8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A628, (uint64_t)qword_100369E70, (uint64_t)sub_1000DBC1C, a1);
}

uint64_t sub_1000DBE14@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A628, (uint64_t)qword_100369E70, (uint64_t)sub_1000DBC1C, a1);
}

void *sub_1000DBE30()
{
  return &unk_10033EF58;
}

unint64_t sub_1000DBE3C()
{
  return 0xD000000000000024LL;
}

uint64_t sub_1000DBE58()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369E88);
  sub_10000E704(v0, (uint64_t)qword_100369E88);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "event_receipt_time";
  *(void *)(v9 + 8) = 18LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "client";
  *((void *)v13 + 1) = 6LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "activity";
  *(void *)(v14 + 8) = 8LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000DBFF8()
{
  return sub_100008C30(&qword_10037A630, (uint64_t)qword_100369E88, (uint64_t)sub_1000DBE58);
}

uint64_t sub_1000DC014@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A630, (uint64_t)qword_100369E88, (uint64_t)sub_1000DBE58, a1);
}

uint64_t sub_1000DC030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F33A8( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_MotionState,  type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity,  &qword_1003564D0,  (uint64_t)&unk_1002C19A8);
}

uint64_t sub_1000DC064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DCC00( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_MotionState,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000DC088);
}

uint64_t sub_1000DC088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355598);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_100355598);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
  uint64_t v15 = sub_10000FD98( &qword_1003564D0,  type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity,  (uint64_t)&unk_1002C19A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

Swift::Int sub_1000DC200()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_MotionState,  &qword_100355760,  (uint64_t)&unk_1002C1C88);
}

uint64_t sub_1000DC21C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000DCE80(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, a2);
}

uint64_t sub_1000DC228(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C170,  type metadata accessor for CLP_LogEntry_PrivateData_MotionState,  (uint64_t)&unk_1002C1C00);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000DC278@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A630, (uint64_t)qword_100369E88, (uint64_t)sub_1000DBE58, a1);
}

uint64_t sub_1000DC294(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003564E8,  type metadata accessor for CLP_LogEntry_PrivateData_MotionState,  (uint64_t)&unk_1002C1B88);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DC2D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003564E8,  type metadata accessor for CLP_LogEntry_PrivateData_MotionState,  (uint64_t)&unk_1002C1B88);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000DC324()
{
  return &unk_10033EF68;
}

unint64_t sub_1000DC330()
{
  return 0xD000000000000026LL;
}

uint64_t sub_1000DC34C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369EA0);
  sub_10000E704(v0, (uint64_t)qword_100369EA0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "activity_type";
  *(void *)(v9 + 8) = 13LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "start_time_DEPRECATED";
  *(void *)(v13 + 8) = 21LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "start_time";
  *((void *)v15 + 1) = 10LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "predicted_workout_type";
  *((void *)v17 + 1) = 22LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000DC50C()
{
  return sub_100008C30(&qword_10037A638, (uint64_t)qword_100369EA0, (uint64_t)sub_1000DC34C);
}

uint64_t sub_1000DC528@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A638, (uint64_t)qword_100369EA0, (uint64_t)sub_1000DC34C, a1);
}

uint64_t sub_1000DC544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0LL) + 20);
          goto LABEL_5;
        case 2LL:
          uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0LL);
          uint64_t v13 = v9;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + *(int *)(v14 + 24), a2, a3);
          goto LABEL_6;
        case 3LL:
          uint64_t v15 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0LL) + 28);
          uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
          uint64_t v17 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
          uint64_t v13 = v9;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v15, v16, v17, a2, a3);
          goto LABEL_6;
        case 4LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0LL) + 32);
LABEL_5:
          uint64_t v11 = v3 + v10;
          unint64_t v12 = sub_10014A7FC();
          uint64_t v13 = v9;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v11,  &type metadata for CLP_LogEntry_PrivateData_DominantMotionModeType,  v12,  a2,  a3);
LABEL_6:
          uint64_t v9 = v13;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000DC6B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0LL);
  uint64_t v10 = result;
  if (*(_BYTE *)(v5 + *(int *)(result + 20)) != 72)
  {
    char v14 = *(_BYTE *)(v5 + *(int *)(result + 20));
    unint64_t v11 = sub_10014A7FC();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v14,  1LL,  &type metadata for CLP_LogEntry_PrivateData_DominantMotionModeType,  v11,  a2,  a3);
  }

  if (!v4)
  {
    uint64_t v12 = v5 + *(int *)(v10 + 24);
    if ((*(_BYTE *)(v12 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2LL, a2, a3, *(double *)v12);
    }
    sub_1000DC7FC(v5, a1, a2, a3);
    if (*(_BYTE *)(v5 + *(int *)(v10 + 32)) != 72)
    {
      char v15 = *(_BYTE *)(v5 + *(int *)(v10 + 32));
      unint64_t v13 = sub_10014A7FC();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v15,  4LL,  &type metadata for CLP_LogEntry_PrivateData_DominantMotionModeType,  v13,  a2,  a3);
    }

    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_1000DC7FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_100355538);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v15 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int sub_1000DC974()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate,  &qword_100355768,  (uint64_t)&unk_1002C1DF0);
}

uint64_t sub_1000DC990@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 72;
  uint64_t v5 = a2 + v4;
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + 8) = 1;
  uint64_t v6 = a2 + a1[7];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v6,  1LL,  1LL,  v7);
  *(_BYTE *)(a2 + a1[8]) = 72;
  return result;
}

uint64_t sub_1000DCA0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DC544(a1, a2, a3);
}

uint64_t sub_1000DCA20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DC6B4(a1, a2, a3);
}

uint64_t sub_1000DCA34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C168,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate,  (uint64_t)&unk_1002C1D68);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000DCA84@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A638, (uint64_t)qword_100369EA0, (uint64_t)sub_1000DC34C, a1);
}

uint64_t sub_1000DCAA0(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356500,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate,  (uint64_t)&unk_1002C1CF0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DCAE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356500,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate,  (uint64_t)&unk_1002C1CF0);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000DCB30()
{
  return &unk_10033EF78;
}

unint64_t sub_1000DCB3C()
{
  return 0xD00000000000002CLL;
}

uint64_t sub_1000DCB58(uint64_t a1)
{
  return sub_1000F31A4(a1, qword_100369EB8, (uint64_t)"workout_update", 14LL);
}

uint64_t sub_1000DCB70()
{
  return sub_100008C30(&qword_10037A640, (uint64_t)qword_100369EB8, (uint64_t)sub_1000DCB58);
}

uint64_t sub_1000DCB8C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A640, (uint64_t)qword_100369EB8, (uint64_t)sub_1000DCB58, a1);
}

uint64_t sub_1000DCBA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F33A8( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate,  &qword_100356500,  (uint64_t)&unk_1002C1CF0);
}

uint64_t sub_1000DCBDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DCC00( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000DCCE0);
}

uint64_t sub_1000DCC00( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = v5;
  uint64_t result = sub_100105BC8(v9, a1, a2, a3, a4);
  if (!v6)
  {
    char v14 = (unsigned int *)(v9 + *(int *)(a4(0LL) + 24));
    if ((v14[1] & 1) == 0) {
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v14, 2LL, a2, a3);
    }
    a5(v9, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_1000DCCE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003555A0);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_1003555A0);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  uint64_t v15 = sub_10000FD98( &qword_100356500,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate,  (uint64_t)&unk_1002C1CF0);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

Swift::Int sub_1000DCE58()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver,  &qword_100355770,  (uint64_t)&unk_1002C1F58);
}

uint64_t sub_1000DCE74@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000DCE80(a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, a2);
}

uint64_t sub_1000DCE80@<X0>(int *a1@<X0>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = a3 + a1[5];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  uint64_t v8 = a1[7];
  uint64_t v9 = a3 + a1[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a3 + v8;
  uint64_t v11 = a2(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))( v10,  1LL,  1LL,  v11);
}

uint64_t sub_1000DCF1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C160,  type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver,  (uint64_t)&unk_1002C1ED0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000DCF6C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A640, (uint64_t)qword_100369EB8, (uint64_t)sub_1000DCB58, a1);
}

uint64_t sub_1000DCF88(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356518,  type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver,  (uint64_t)&unk_1002C1E58);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DCFC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356518,  type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver,  (uint64_t)&unk_1002C1E58);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000DD018()
{
  return &unk_10033EF88;
}

unint64_t sub_1000DD024()
{
  return 0xD000000000000028LL;
}

uint64_t sub_1000DD040()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369ED0);
  sub_10000E704(v0, (uint64_t)qword_100369ED0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32F0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "session_id";
  *(void *)(v9 + 8) = 10LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "overview_id";
  *(void *)(v13 + 8) = 11LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  char v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *char v14 = 3LL;
  *(void *)uint64_t v15 = "workout_type";
  *((void *)v15 + 1) = 12LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "workout_location_type";
  *((void *)v17 + 1) = 21LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 5LL;
  *(void *)uint64_t v18 = "workout_mode";
  *(void *)(v18 + 8) = 12LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000DD244()
{
  return sub_100008C30(&qword_10037A648, (uint64_t)qword_100369ED0, (uint64_t)sub_1000DD040);
}

uint64_t sub_1000DD260@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A648, (uint64_t)qword_100369ED0, (uint64_t)sub_1000DD040, a1);
}

uint64_t sub_1000DD27C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL) + 20);
          goto LABEL_10;
        case 2LL:
          uint64_t v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL) + 24);
LABEL_10:
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v3 + v13, a2, a3);
          break;
        case 3LL:
          uint64_t v14 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL) + 28);
          unint64_t v10 = sub_10014A0D0();
          uint64_t v11 = v14;
          uint64_t v12 = &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType;
          goto LABEL_5;
        case 4LL:
          uint64_t v15 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL) + 32);
          unint64_t v10 = sub_10014A08C();
          uint64_t v11 = v15;
          uint64_t v12 = &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType;
          goto LABEL_5;
        case 5LL:
          uint64_t v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL) + 36);
          unint64_t v10 = sub_10014A048();
          uint64_t v11 = v9;
          uint64_t v12 = &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode;
LABEL_5:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v11, v12, v10, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000DD3F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL);
  unint64_t v10 = (int *)result;
  uint64_t v11 = (void *)(v5 + *(int *)(result + 20));
  uint64_t v12 = v11[1];
  if (v12) {
    uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v11, v12, 1LL, a2, a3);
  }
  if (!v4)
  {
    uint64_t v13 = (void *)(v5 + v10[6]);
    uint64_t v14 = v13[1];
    if (v14) {
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v13, v14, 2LL, a2, a3);
    }
    if (*(_BYTE *)(v5 + v10[7]) != 67)
    {
      char v18 = *(_BYTE *)(v5 + v10[7]);
      unint64_t v15 = sub_10014A0D0();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v18,  3LL,  &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType,  v15,  a2,  a3);
    }

    if (*(_BYTE *)(v5 + v10[8]) != 5)
    {
      char v19 = *(_BYTE *)(v5 + v10[8]);
      unint64_t v16 = sub_10014A08C();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v19,  4LL,  &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType,  v16,  a2,  a3);
    }

    if (*(_BYTE *)(v5 + v10[9]) != 3)
    {
      char v20 = *(_BYTE *)(v5 + v10[9]);
      unint64_t v17 = sub_10014A048();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v20,  5LL,  &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode,  v17,  a2,  a3);
    }

    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_1000DD598()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings,  &qword_100355778,  (uint64_t)&unk_1002C20C0);
}

uint64_t sub_1000DD5B4@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = (void *)(a2 + a1[5]);
  *uint64_t v6 = 0LL;
  v6[1] = 0LL;
  uint64_t v7 = (void *)(a2 + v5);
  *uint64_t v7 = 0LL;
  v7[1] = 0LL;
  uint64_t v8 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 67;
  *(_BYTE *)(a2 + v8) = 5;
  *(_BYTE *)(a2 + a1[9]) = 3;
  return result;
}

uint64_t sub_1000DD60C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DD27C(a1, a2, a3);
}

uint64_t sub_1000DD620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DD3F4(a1, a2, a3);
}

uint64_t sub_1000DD634(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C158,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings,  (uint64_t)&unk_1002C2038);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000DD684@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A648, (uint64_t)qword_100369ED0, (uint64_t)sub_1000DD040, a1);
}

uint64_t sub_1000DD6A0(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356530,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings,  (uint64_t)&unk_1002C1FC0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DD6E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356530,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings,  (uint64_t)&unk_1002C1FC0);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000DD734()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369EE8);
  sub_10000E704(v0, (uint64_t)qword_100369EE8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v140 = swift_allocObject(v1, v6 + 67 * v4, v5 | 7);
  *(_OWORD *)(v140 + 16) = xmmword_1002BAD20;
  uint64_t v7 = v140 + v6;
  uint64_t v8 = v140 + v6 + *(int *)(v2 + 48);
  *(void *)(v140 + v6) = 0LL;
  *(void *)uint64_t v8 = "WT_PROTOBUF_DEFAULT";
  *(void *)(v8 + 8) = 19LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v140 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 1LL;
  *(void *)uint64_t v12 = "WT_NoWorkout";
  *(void *)(v12 + 8) = 12LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v140 + v6 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 2LL;
  *(void *)uint64_t v14 = "WT_Walking";
  *((void *)v14 + 1) = 10LL;
  v14[16] = 2;
  v11();
  unint64_t v15 = (void *)(v140 + v6 + 3 * v4);
  unint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *unint64_t v15 = 3LL;
  *(void *)unint64_t v16 = "WT_Running";
  *((void *)v16 + 1) = 10LL;
  v16[16] = 2;
  v11();
  unint64_t v17 = (void *)(v140 + v6 + 4 * v4);
  char v18 = (char *)v17 + *(int *)(v2 + 48);
  *unint64_t v17 = 4LL;
  *(void *)char v18 = "WT_Cycling";
  *((void *)v18 + 1) = 10LL;
  v18[16] = 2;
  v11();
  char v19 = (void *)(v140 + v6 + 5 * v4);
  char v20 = (char *)v19 + *(int *)(v2 + 48);
  *char v19 = 5LL;
  *(void *)char v20 = "WT_OutdoorCycling";
  *((void *)v20 + 1) = 17LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v140 + v6 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 6LL;
  *(void *)uint64_t v22 = "WT_IndoorCycling";
  *((void *)v22 + 1) = 16LL;
  _BYTE v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v140 + v6 + 7 * v4);
  int v24 = (char *)v23 + *(int *)(v2 + 48);
  void *v23 = 7LL;
  *(void *)int v24 = "WT_Yoga";
  *((void *)v24 + 1) = 7LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v140 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 8LL;
  *(void *)uint64_t v25 = "WT_Dancing";
  *(void *)(v25 + 8) = 10LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  uint64_t v26 = (void *)(v140 + v6 + 9 * v4);
  int v27 = (char *)v26 + *(int *)(v2 + 48);
  void *v26 = 9LL;
  *(void *)int v27 = "WT_CrossTraining";
  *((void *)v27 + 1) = 16LL;
  v27[16] = 2;
  v11();
  int v28 = (void *)(v140 + v6 + 10 * v4);
  int v29 = (char *)v28 + *(int *)(v2 + 48);
  *int v28 = 10LL;
  *(void *)int v29 = "WT_Elliptical";
  *((void *)v29 + 1) = 13LL;
  v29[16] = 2;
  v11();
  int v30 = (void *)(v140 + v6 + 11 * v4);
  int v31 = (char *)v30 + *(int *)(v2 + 48);
  void *v30 = 11LL;
  *(void *)int v31 = "WT_Climbing";
  *((void *)v31 + 1) = 11LL;
  v31[16] = 2;
  v11();
  int v32 = (void *)(v140 + v6 + 12 * v4);
  float v33 = (char *)v32 + *(int *)(v2 + 48);
  *int v32 = 12LL;
  *(void *)float v33 = "WT_StairClimbing";
  *((void *)v33 + 1) = 16LL;
  v33[16] = 2;
  v11();
  char v34 = (void *)(v140 + v6 + 13 * v4);
  char v35 = (char *)v34 + *(int *)(v2 + 48);
  *char v34 = 13LL;
  *(void *)char v35 = "WT_Rowing";
  *((void *)v35 + 1) = 9LL;
  v35[16] = 2;
  v11();
  double v36 = (void *)(v140 + v6 + 14 * v4);
  char v37 = (char *)v36 + *(int *)(v2 + 48);
  void *v36 = 14LL;
  *(void *)char v37 = "WT_ResistanceTraining";
  *((void *)v37 + 1) = 21LL;
  v37[16] = 2;
  v11();
  char v38 = (void *)(v140 + v6 + 15 * v4);
  int v39 = (char *)v38 + *(int *)(v2 + 48);
  *char v38 = 15LL;
  *(void *)int v39 = "WT_GenericWorkout";
  *((void *)v39 + 1) = 17LL;
  v39[16] = 2;
  v11();
  uint64_t v40 = v140 + v6 + 16 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 16 * v4) = 16LL;
  *(void *)uint64_t v40 = "WT_OutdoorWalking";
  *(void *)(v40 + 8) = 17LL;
  *(_BYTE *)(v40 + 16) = 2;
  v11();
  int v41 = (void *)(v140 + v6 + 17 * v4);
  int v42 = (char *)v41 + *(int *)(v2 + 48);
  void *v41 = 17LL;
  *(void *)int v42 = "WT_IndoorWalking";
  *((void *)v42 + 1) = 16LL;
  v42[16] = 2;
  v11();
  double v43 = (void *)(v140 + v6 + 18 * v4);
  char v44 = (char *)v43 + *(int *)(v2 + 48);
  *double v43 = 18LL;
  *(void *)char v44 = "WT_OutdoorRunning";
  *((void *)v44 + 1) = 17LL;
  v44[16] = 2;
  v11();
  char v45 = (void *)(v140 + v6 + 19 * v4);
  double v46 = (char *)v45 + *(int *)(v2 + 48);
  void *v45 = 19LL;
  *(void *)double v46 = "WT_IndoorRunning";
  *((void *)v46 + 1) = 16LL;
  v46[16] = 2;
  v11();
  char v47 = (void *)(v140 + v6 + 20 * v4);
  char v48 = (char *)v47 + *(int *)(v2 + 48);
  *char v47 = 20LL;
  *(void *)char v48 = "WT_Swimming";
  *((void *)v48 + 1) = 11LL;
  v48[16] = 2;
  v11();
  uint64_t v49 = (void *)(v140 + v6 + 21 * v4);
  uint64_t v50 = (char *)v49 + *(int *)(v2 + 48);
  void *v49 = 21LL;
  *(void *)uint64_t v50 = "WT_OutdoorWheelchairWalk";
  *((void *)v50 + 1) = 24LL;
  v50[16] = 2;
  v11();
  int v51 = (void *)(v140 + v6 + 22 * v4);
  int v52 = (char *)v51 + *(int *)(v2 + 48);
  *int v51 = 22LL;
  *(void *)int v52 = "WT_OutdoorWheelchairRun";
  *((void *)v52 + 1) = 23LL;
  v52[16] = 2;
  v11();
  uint64_t v53 = (void *)(v140 + v6 + 23 * v4);
  uint64_t v54 = (char *)v53 + *(int *)(v2 + 48);
  void *v53 = 23LL;
  *(void *)uint64_t v54 = "WT_Calisthenics";
  *((void *)v54 + 1) = 15LL;
  v54[16] = 2;
  v11();
  uint64_t v55 = (void *)(v140 + v6 + 24 * v4);
  uint64_t v56 = (char *)v55 + *(int *)(v2 + 48);
  *uint64_t v55 = 24LL;
  *(void *)uint64_t v56 = "WT_DownhillSkiing";
  *((void *)v56 + 1) = 17LL;
  v56[16] = 2;
  v11();
  uint64_t v57 = (void *)(v140 + v6 + 25 * v4);
  uint64_t v58 = (char *)v57 + *(int *)(v2 + 48);
  void *v57 = 25LL;
  *(void *)uint64_t v58 = "WT_Hiking";
  *((void *)v58 + 1) = 9LL;
  v58[16] = 2;
  v11();
  uint64_t v59 = (void *)(v140 + v6 + 26 * v4);
  uint64_t v60 = (char *)v59 + *(int *)(v2 + 48);
  *uint64_t v59 = 26LL;
  *(void *)uint64_t v60 = "WT_UndeterminedWorkout";
  *((void *)v60 + 1) = 22LL;
  v60[16] = 2;
  v11();
  uint64_t v61 = (void *)(v140 + v6 + 27 * v4);
  uint64_t v62 = (char *)v61 + *(int *)(v2 + 48);
  void *v61 = 27LL;
  *(void *)uint64_t v62 = "WT_Unknown";
  *((void *)v62 + 1) = 10LL;
  v62[16] = 2;
  v11();
  uint64_t v63 = (void *)(v140 + v6 + 28 * v4);
  char v64 = (char *)v63 + *(int *)(v2 + 48);
  *uint64_t v63 = 28LL;
  *(void *)char v64 = "WT_Golfing";
  *((void *)v64 + 1) = 10LL;
  v64[16] = 2;
  v11();
  uint64_t v65 = (void *)(v140 + v6 + 29 * v4);
  uint64_t v66 = (char *)v65 + *(int *)(v2 + 48);
  *uint64_t v65 = 29LL;
  *(void *)uint64_t v66 = "WT_FunctionalStrength";
  *((void *)v66 + 1) = 21LL;
  v66[16] = 2;
  v11();
  uint64_t v67 = (void *)(v140 + v6 + 30 * v4);
  uint64_t v68 = (char *)v67 + *(int *)(v2 + 48);
  *uint64_t v67 = 30LL;
  *(void *)uint64_t v68 = "WT_CoolDown";
  *((void *)v68 + 1) = 11LL;
  v68[16] = 2;
  v11();
  uint64_t v69 = (void *)(v140 + v6 + 31 * v4);
  uint64_t v70 = (char *)v69 + *(int *)(v2 + 48);
  void *v69 = 31LL;
  *(void *)uint64_t v70 = "WT_CoreTraining";
  *((void *)v70 + 1) = 15LL;
  v70[16] = 2;
  v11();
  uint64_t v71 = v140 + v6 + 32 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 32 * v4) = 32LL;
  *(void *)uint64_t v71 = "WT_TaiChi";
  *(void *)(v71 + 8) = 9LL;
  *(_BYTE *)(v71 + 16) = 2;
  v11();
  uint64_t v72 = (void *)(v140 + v6 + 33 * v4);
  uint64_t v73 = (char *)v72 + *(int *)(v2 + 48);
  void *v72 = 33LL;
  *(void *)uint64_t v73 = "WT_Pilates";
  *((void *)v73 + 1) = 10LL;
  v73[16] = 2;
  v11();
  uint64_t v74 = (void *)(v140 + v6 + 34 * v4);
  uint64_t v75 = (char *)v74 + *(int *)(v2 + 48);
  *uint64_t v74 = 34LL;
  *(void *)uint64_t v75 = "WT_MultiSportTransition";
  *((void *)v75 + 1) = 23LL;
  v75[16] = 2;
  v11();
  uint64_t v76 = (void *)(v140 + v6 + 35 * v4);
  uint64_t v77 = (char *)v76 + *(int *)(v2 + 48);
  void *v76 = 35LL;
  *(void *)uint64_t v77 = "WT_Kickboxing";
  *((void *)v77 + 1) = 13LL;
  v77[16] = 2;
  v11();
  uint64_t v78 = (void *)(v140 + v6 + 36 * v4);
  uint64_t v79 = (char *)v78 + *(int *)(v2 + 48);
  *uint64_t v78 = 36LL;
  *(void *)uint64_t v79 = "WT_OutdoorRowing";
  *((void *)v79 + 1) = 16LL;
  v79[16] = 2;
  v11();
  uint64_t v80 = (void *)(v140 + v6 + 37 * v4);
  uint64_t v81 = (char *)v80 + *(int *)(v2 + 48);
  void *v80 = 37LL;
  *(void *)uint64_t v81 = "WT_CrossCountrySkiing";
  *((void *)v81 + 1) = 21LL;
  v81[16] = 2;
  v11();
  uint64_t v82 = (void *)(v140 + v6 + 38 * v4);
  uint64_t v83 = (char *)v82 + *(int *)(v2 + 48);
  *uint64_t v82 = 38LL;
  *(void *)uint64_t v83 = "WT_Snowboarding";
  *((void *)v83 + 1) = 15LL;
  v83[16] = 2;
  v11();
  uint64_t v84 = (void *)(v140 + v6 + 39 * v4);
  uint64_t v85 = (char *)v84 + *(int *)(v2 + 48);
  void *v84 = 39LL;
  *(void *)uint64_t v85 = "WT_PaddleSports";
  *((void *)v85 + 1) = 15LL;
  v85[16] = 2;
  v11();
  uint64_t v86 = (void *)(v140 + v6 + 40 * v4);
  uint64_t v87 = (char *)v86 + *(int *)(v2 + 48);
  void *v86 = 40LL;
  *(void *)uint64_t v87 = "WT_OutdoorSoccer";
  *((void *)v87 + 1) = 16LL;
  v87[16] = 2;
  v11();
  uint64_t v88 = (void *)(v140 + v6 + 41 * v4);
  uint64_t v89 = (char *)v88 + *(int *)(v2 + 48);
  *uint64_t v88 = 41LL;
  *(void *)uint64_t v89 = "WT_IndoorSoccer";
  *((void *)v89 + 1) = 15LL;
  v89[16] = 2;
  v11();
  uint64_t v90 = (void *)(v140 + v6 + 42 * v4);
  uint64_t v91 = (char *)v90 + *(int *)(v2 + 48);
  void *v90 = 42LL;
  *(void *)uint64_t v91 = "WT_AustralianFootball";
  *((void *)v91 + 1) = 21LL;
  v91[16] = 2;
  v11();
  uint64_t v92 = (void *)(v140 + v6 + 43 * v4);
  uint64_t v93 = (char *)v92 + *(int *)(v2 + 48);
  *uint64_t v92 = 43LL;
  *(void *)uint64_t v93 = "WT_AmericanFootball";
  *((void *)v93 + 1) = 19LL;
  v93[16] = 2;
  v11();
  uint64_t v94 = (void *)(v140 + v6 + 44 * v4);
  uint64_t v95 = (char *)v94 + *(int *)(v2 + 48);
  void *v94 = 44LL;
  *(void *)uint64_t v95 = "WT_DiscSports";
  *((void *)v95 + 1) = 13LL;
  v95[16] = 2;
  v11();
  char v96 = (void *)(v140 + v6 + 45 * v4);
  uint64_t v97 = (char *)v96 + *(int *)(v2 + 48);
  *char v96 = 45LL;
  *(void *)uint64_t v97 = "WT_Rugby";
  *((void *)v97 + 1) = 8LL;
  v97[16] = 2;
  v11();
  uint64_t v98 = (void *)(v140 + v6 + 46 * v4);
  uint64_t v99 = (char *)v98 + *(int *)(v2 + 48);
  void *v98 = 46LL;
  *(void *)uint64_t v99 = "WT_Lacrosse";
  *((void *)v99 + 1) = 11LL;
  v99[16] = 2;
  v11();
  uint64_t v100 = (void *)(v140 + v6 + 47 * v4);
  uint64_t v101 = (char *)v100 + *(int *)(v2 + 48);
  *uint64_t v100 = 47LL;
  *(void *)uint64_t v101 = "WT_OutdoorSkatingSports";
  *((void *)v101 + 1) = 23LL;
  v101[16] = 2;
  v11();
  uint64_t v102 = (void *)(v140 + v6 + 48 * v4);
  uint64_t v103 = (char *)v102 + *(int *)(v2 + 48);
  *uint64_t v102 = 48LL;
  *(void *)uint64_t v103 = "WT_IndoorSkatingSports";
  *((void *)v103 + 1) = 22LL;
  v103[16] = 2;
  v11();
  char v104 = (void *)(v140 + v6 + 49 * v4);
  uint64_t v105 = (char *)v104 + *(int *)(v2 + 48);
  *char v104 = 49LL;
  *(void *)uint64_t v105 = "WT_IndoorHockey";
  *((void *)v105 + 1) = 15LL;
  v105[16] = 2;
  v11();
  uint64_t v106 = (void *)(v140 + v6 + 50 * v4);
  uint64_t v107 = (char *)v106 + *(int *)(v2 + 48);
  *uint64_t v106 = 50LL;
  *(void *)uint64_t v107 = "WT_OutdoorHockey";
  *((void *)v107 + 1) = 16LL;
  v107[16] = 2;
  v11();
  uint64_t v108 = (void *)(v140 + v6 + 51 * v4);
  char v109 = (char *)v108 + *(int *)(v2 + 48);
  *uint64_t v108 = 51LL;
  *(void *)char v109 = "WT_Basketball";
  *((void *)v109 + 1) = 13LL;
  v109[16] = 2;
  v11();
  uint64_t v110 = (void *)(v140 + v6 + 52 * v4);
  uint64_t v111 = (char *)v110 + *(int *)(v2 + 48);
  void *v110 = 52LL;
  *(void *)uint64_t v111 = "WT_Tennis";
  *((void *)v111 + 1) = 9LL;
  v111[16] = 2;
  v11();
  uint64_t v112 = (void *)(v140 + v6 + 53 * v4);
  uint64_t v113 = (char *)v112 + *(int *)(v2 + 48);
  *uint64_t v112 = 53LL;
  *(void *)uint64_t v113 = "WT_Badminton";
  *((void *)v113 + 1) = 12LL;
  v113[16] = 2;
  v11();
  uint64_t v114 = (void *)(v140 + v6 + 54 * v4);
  uint64_t v115 = (char *)v114 + *(int *)(v2 + 48);
  void *v114 = 54LL;
  *(void *)uint64_t v115 = "WT_Racquetball";
  *((void *)v115 + 1) = 14LL;
  v115[16] = 2;
  v11();
  uint64_t v116 = (void *)(v140 + v6 + 55 * v4);
  uint64_t v117 = (char *)v116 + *(int *)(v2 + 48);
  *uint64_t v116 = 55LL;
  *(void *)uint64_t v117 = "WT_Pickleball";
  *((void *)v117 + 1) = 13LL;
  v117[16] = 2;
  v11();
  uint64_t v118 = (void *)(v140 + v6 + 56 * v4);
  uint64_t v119 = (char *)v118 + *(int *)(v2 + 48);
  void *v118 = 56LL;
  *(void *)uint64_t v119 = "WT_Volleyball";
  *((void *)v119 + 1) = 13LL;
  v119[16] = 2;
  v11();
  char v120 = (void *)(v140 + v6 + 57 * v4);
  uint64_t v121 = (char *)v120 + *(int *)(v2 + 48);
  *char v120 = 57LL;
  *(void *)uint64_t v121 = "WT_Squash";
  *((void *)v121 + 1) = 9LL;
  v121[16] = 2;
  v11();
  int v122 = (void *)(v140 + v6 + 58 * v4);
  uint64_t v123 = (char *)v122 + *(int *)(v2 + 48);
  void *v122 = 58LL;
  *(void *)uint64_t v123 = "WT_Handball";
  *((void *)v123 + 1) = 11LL;
  v123[16] = 2;
  v11();
  int v124 = (void *)(v140 + v6 + 59 * v4);
  uint64_t v125 = (char *)v124 + *(int *)(v2 + 48);
  *int v124 = 59LL;
  *(void *)uint64_t v125 = "WT_TrackAndField";
  *((void *)v125 + 1) = 16LL;
  v125[16] = 2;
  v11();
  double v126 = (void *)(v140 + v6 + 60 * v4);
  char v127 = (char *)v126 + *(int *)(v2 + 48);
  void *v126 = 60LL;
  *(void *)char v127 = "WT_Softball";
  *((void *)v127 + 1) = 11LL;
  v127[16] = 2;
  v11();
  uint64_t v128 = (void *)(v140 + v6 + 61 * v4);
  uint64_t v129 = (char *)v128 + *(int *)(v2 + 48);
  *uint64_t v128 = 61LL;
  *(void *)uint64_t v129 = "WT_Baseball";
  *((void *)v129 + 1) = 11LL;
  v129[16] = 2;
  v11();
  int v130 = (void *)(v140 + v6 + 62 * v4);
  uint64_t v131 = (char *)v130 + *(int *)(v2 + 48);
  void *v130 = 62LL;
  *(void *)uint64_t v131 = "WT_Cricket";
  *((void *)v131 + 1) = 10LL;
  v131[16] = 2;
  v11();
  int v132 = (void *)(v140 + v6 + 63 * v4);
  uint64_t v133 = (char *)v132 + *(int *)(v2 + 48);
  *int v132 = 63LL;
  *(void *)uint64_t v133 = "WT_TableTennis";
  *((void *)v133 + 1) = 14LL;
  v133[16] = 2;
  v11();
  uint64_t v134 = v140 + v6 + (v4 << 6) + *(int *)(v2 + 48);
  *(void *)(v7 + (v4 << 6)) = 64LL;
  *(void *)uint64_t v134 = "WT_JumpRope";
  *(void *)(v134 + 8) = 11LL;
  *(_BYTE *)(v134 + 16) = 2;
  v11();
  uint64_t v135 = (void *)(v140 + v6 + 65 * v4);
  uint64_t v136 = (char *)v135 + *(int *)(v2 + 48);
  *uint64_t v135 = 65LL;
  *(void *)uint64_t v136 = "WT_Boxing";
  *((void *)v136 + 1) = 9LL;
  v136[16] = 2;
  v11();
  uint64_t v137 = (void *)(v140 + v6 + 66 * v4);
  uint64_t v138 = (char *)v137 + *(int *)(v2 + 48);
  void *v137 = 66LL;
  *(void *)uint64_t v138 = "WT_StepTraining";
  *((void *)v138 + 1) = 15LL;
  v138[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v140);
}

uint64_t sub_1000DE5A0()
{
  return sub_100008C30(&qword_10037A650, (uint64_t)qword_100369EE8, (uint64_t)sub_1000DD734);
}

uint64_t sub_1000DE5BC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A650, (uint64_t)qword_100369EE8, (uint64_t)sub_1000DD734, a1);
}

uint64_t sub_1000DE5D8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A650, (uint64_t)qword_100369EE8, (uint64_t)sub_1000DD734, a1);
}

uint64_t sub_1000DE5F4()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369F00);
  sub_10000E704(v0, (uint64_t)qword_100369F00);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32F0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "WLT_PROTOBUF_DEFAULT";
  *(void *)(v9 + 8) = 20LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "WLT_Unknown";
  *(void *)(v13 + 8) = 11LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  unint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)unint64_t v15 = "WLT_Indoor";
  *((void *)v15 + 1) = 10LL;
  v15[16] = 2;
  v12();
  unint64_t v16 = (void *)(v8 + 3 * v4);
  unint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *unint64_t v16 = 3LL;
  *(void *)unint64_t v17 = "WLT_Outdoor";
  *((void *)v17 + 1) = 11LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 4LL;
  *(void *)uint64_t v18 = "WLT_Tbd";
  *(void *)(v18 + 8) = 7LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000DE7F4()
{
  return sub_100008C30(&qword_10037A658, (uint64_t)qword_100369F00, (uint64_t)sub_1000DE5F4);
}

uint64_t sub_1000DE810@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A658, (uint64_t)qword_100369F00, (uint64_t)sub_1000DE5F4, a1);
}

uint64_t sub_1000DE82C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A658, (uint64_t)qword_100369F00, (uint64_t)sub_1000DE5F4, a1);
}

uint64_t sub_1000DE848()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369F18);
  sub_10000E704(v0, (uint64_t)qword_100369F18);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 0LL;
  *(void *)uint64_t v9 = "WM_PROTOBUF_DEFAULT";
  *(void *)(v9 + 8) = 19LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "WM_NORMAL";
  *((void *)v13 + 1) = 9LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 2LL;
  *(void *)uint64_t v14 = "WM_TYPE_2";
  *(void *)(v14 + 8) = 9LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000DE9D4()
{
  return sub_100008C30(&qword_10037A660, (uint64_t)qword_100369F18, (uint64_t)sub_1000DE848);
}

uint64_t sub_1000DE9F0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A660, (uint64_t)qword_100369F18, (uint64_t)sub_1000DE848, a1);
}

uint64_t sub_1000DEA0C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A660, (uint64_t)qword_100369F18, (uint64_t)sub_1000DE848, a1);
}

void *sub_1000DEA28()
{
  return &unk_10033EF98;
}

unint64_t sub_1000DEA34()
{
  return 0xD000000000000025LL;
}

uint64_t sub_1000DEA50()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369F30);
  sub_10000E704(v0, (uint64_t)qword_100369F30);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32F0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "start_time";
  *(void *)(v9 + 8) = 10LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "end_time";
  *(void *)(v13 + 8) = 8LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  unint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)unint64_t v15 = "event_type";
  *((void *)v15 + 1) = 10LL;
  v15[16] = 2;
  v12();
  unint64_t v16 = (void *)(v8 + 3 * v4);
  unint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *unint64_t v16 = 4LL;
  *(void *)unint64_t v17 = "event_time";
  *((void *)v17 + 1) = 10LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 5LL;
  *(void *)uint64_t v18 = "workout_settings";
  *(void *)(v18 + 8) = 16LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000DEC54()
{
  return sub_100008C30(&qword_10037A668, (uint64_t)qword_100369F30, (uint64_t)sub_1000DEA50);
}

uint64_t sub_1000DEC70@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A668, (uint64_t)qword_100369F30, (uint64_t)sub_1000DEA50, a1);
}

uint64_t sub_1000DEC8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v18 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0LL) + 20);
          uint64_t v19 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
          uint64_t v15 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
          uint64_t v16 = v18;
          uint64_t v17 = v19;
          goto LABEL_7;
        case 2LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0LL) + 24);
          goto LABEL_5;
        case 3LL:
          uint64_t v20 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0LL) + 28);
          unint64_t v21 = sub_10014A004();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v20,  &type metadata for CLP_LogEntry_PrivateData_WorkoutEvent.EventType,  v21,  a2,  a3);
          break;
        case 4LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0LL) + 32);
LABEL_5:
          uint64_t v10 = v3 + v9;
          uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
          uint64_t v12 = (unint64_t *)&qword_1003552B8;
          uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          uint64_t v14 = &unk_1002BF798;
          goto LABEL_6;
        case 5LL:
          uint64_t v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0LL) + 36);
          uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL);
          uint64_t v12 = &qword_100356530;
          uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings;
          uint64_t v14 = &unk_1002C1FC0;
LABEL_6:
          uint64_t v15 = sub_10000FD98(v12, v13, (uint64_t)v14);
          uint64_t v16 = v10;
          uint64_t v17 = v11;
LABEL_7:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v16, v17, v15, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000DEE5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = sub_100105BC8(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  if (!v4)
  {
    sub_1000DEF90(v5, a1, a2, a3);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0LL);
    if (*(_BYTE *)(v5 + *(int *)(v10 + 28)) != 19)
    {
      char v12 = *(_BYTE *)(v5 + *(int *)(v10 + 28));
      unint64_t v11 = sub_10014A004();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v12,  3LL,  &type metadata for CLP_LogEntry_PrivateData_WorkoutEvent.EventType,  v11,  a2,  a3);
    }

    sub_1000E8E50(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, 4LL);
    sub_1000DF104(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_1000DEF90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_100355538);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v15 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000DF104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003555A8);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 36), (uint64_t)v8, &qword_1003555A8);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
  uint64_t v15 = sub_10000FD98( &qword_100356530,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings,  (uint64_t)&unk_1002C1FC0);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 5LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

Swift::Int sub_1000DF27C()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent,  &qword_100355780,  (uint64_t)&unk_1002C22A0);
}

uint64_t sub_1000DF298@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL);
  v6(v4, 1LL, 1LL, v5);
  v6(a2 + a1[6], 1LL, 1LL, v5);
  uint64_t v7 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 19;
  v6(a2 + v7, 1LL, 1LL, v5);
  uint64_t v8 = a2 + a1[9];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
}

uint64_t sub_1000DF35C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DEC8C(a1, a2, a3);
}

uint64_t sub_1000DF370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DEE5C(a1, a2, a3);
}

uint64_t sub_1000DF384(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C150,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent,  (uint64_t)&unk_1002C2218);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000DF3D4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A668, (uint64_t)qword_100369F30, (uint64_t)sub_1000DEA50, a1);
}

uint64_t sub_1000DF3F0(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356548,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent,  (uint64_t)&unk_1002C21A0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DF430(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356548,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent,  (uint64_t)&unk_1002C21A0);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000DF480()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369F48);
  sub_10000E704(v0, (uint64_t)qword_100369F48);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 19 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002BAD30;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "ET_PROTOBUF_DEFAULT";
  *(void *)(v9 + 8) = 19LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  char v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "ET_WorkoutDidStart";
  *(void *)(v13 + 8) = 18LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "ET_WorkoutDidStop";
  *((void *)v15 + 1) = 17LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 3LL;
  *(void *)uint64_t v17 = "ET_WorkoutWillPause";
  *((void *)v17 + 1) = 19LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 4LL;
  *(void *)uint64_t v19 = "ET_WorkoutWillResume";
  *((void *)v19 + 1) = 20LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  unint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  void *v20 = 5LL;
  *(void *)unint64_t v21 = "ET_WorkoutSuggestedStop";
  *((void *)v21 + 1) = 23LL;
  v21[16] = 2;
  v12();
  uint64_t v22 = (void *)(v8 + 6 * v4);
  uint64_t v23 = (char *)v22 + *(int *)(v2 + 48);
  *uint64_t v22 = 6LL;
  *(void *)uint64_t v23 = "ET_WorkoutPredictionStartDidMute";
  *((void *)v23 + 1) = 32LL;
  v23[16] = 2;
  v12();
  int v24 = (void *)(v8 + 7 * v4);
  uint64_t v25 = (char *)v24 + *(int *)(v2 + 48);
  void *v24 = 7LL;
  *(void *)uint64_t v25 = "ET_WorkoutLocationUpdate";
  *((void *)v25 + 1) = 24LL;
  v25[16] = 2;
  v12();
  uint64_t v26 = v8 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 8 * v4) = 8LL;
  *(void *)uint64_t v26 = "ET_WorkoutPredictedWorkoutDetected";
  *(void *)(v26 + 8) = 34LL;
  *(_BYTE *)(v26 + 16) = 2;
  v12();
  int v27 = (void *)(v8 + 9 * v4);
  int v28 = (char *)v27 + *(int *)(v2 + 48);
  void *v27 = 9LL;
  *(void *)int v28 = "ET_WorkoutPredictedWorkoutLabelUpdate";
  *((void *)v28 + 1) = 37LL;
  v28[16] = 2;
  v12();
  int v29 = (void *)(v8 + 10 * v4);
  int v30 = (char *)v29 + *(int *)(v2 + 48);
  *int v29 = 10LL;
  *(void *)int v30 = "ET_WorkoutPredictedWorkoutEnded";
  *((void *)v30 + 1) = 31LL;
  v30[16] = 2;
  v12();
  int v31 = (void *)(v8 + 11 * v4);
  int v32 = (char *)v31 + *(int *)(v2 + 48);
  void *v31 = 11LL;
  *(void *)int v32 = "ET_WorkoutShouldAlertUserForPredictedWorkout";
  *((void *)v32 + 1) = 44LL;
  v32[16] = 2;
  v12();
  float v33 = (void *)(v8 + 12 * v4);
  char v34 = (char *)v33 + *(int *)(v2 + 48);
  *float v33 = 12LL;
  *(void *)char v34 = "ET_WorkoutRetractStopAlert";
  *((void *)v34 + 1) = 26LL;
  v34[16] = 2;
  v12();
  char v35 = (void *)(v8 + 13 * v4);
  double v36 = (char *)v35 + *(int *)(v2 + 48);
  *char v35 = 13LL;
  *(void *)double v36 = "ET_WorkoutSessionDidBegin";
  *((void *)v36 + 1) = 25LL;
  v36[16] = 2;
  v12();
  char v37 = (void *)(v8 + 14 * v4);
  char v38 = (char *)v37 + *(int *)(v2 + 48);
  void *v37 = 14LL;
  *(void *)char v38 = "ET_WorkoutSessionDidSetCurrentWorkoutType";
  *((void *)v38 + 1) = 41LL;
  v38[16] = 2;
  v12();
  int v39 = (void *)(v8 + 15 * v4);
  uint64_t v40 = (char *)v39 + *(int *)(v2 + 48);
  *int v39 = 15LL;
  *(void *)uint64_t v40 = "ET_WorkoutSessionDidEnd";
  *((void *)v40 + 1) = 23LL;
  v40[16] = 2;
  v12();
  uint64_t v41 = v8 + 16 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 16 * v4) = 16LL;
  *(void *)uint64_t v41 = "ET_WorkoutSessionDidManuallyPause";
  *(void *)(v41 + 8) = 33LL;
  *(_BYTE *)(v41 + 16) = 2;
  v12();
  int v42 = (void *)(v8 + 17 * v4);
  double v43 = (char *)v42 + *(int *)(v2 + 48);
  *int v42 = 17LL;
  *(void *)double v43 = "ET_WorkoutSessionDidManuallyResume";
  *((void *)v43 + 1) = 34LL;
  v43[16] = 2;
  v12();
  char v44 = (void *)(v8 + 18 * v4);
  char v45 = (char *)v44 + *(int *)(v2 + 48);
  void *v44 = 18LL;
  *(void *)char v45 = "ET_WorkoutSessionDetectedChangeInWorkoutType";
  *((void *)v45 + 1) = 44LL;
  v45[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000DF968()
{
  return sub_100008C30(&qword_10037A670, (uint64_t)qword_100369F48, (uint64_t)sub_1000DF480);
}

uint64_t sub_1000DF984@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A670, (uint64_t)qword_100369F48, (uint64_t)sub_1000DF480, a1);
}

uint64_t sub_1000DF9A0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A670, (uint64_t)qword_100369F48, (uint64_t)sub_1000DF480, a1);
}

void *sub_1000DF9BC()
{
  return &unk_10033EFA8;
}

unint64_t sub_1000DF9C8()
{
  return 0xD00000000000002CLL;
}

uint64_t sub_1000DF9E4(uint64_t a1)
{
  return sub_1000F31A4(a1, qword_100369F60, (uint64_t)"workout_event", 13LL);
}

uint64_t sub_1000DF9FC()
{
  return sub_100008C30(&qword_10037A678, (uint64_t)qword_100369F60, (uint64_t)sub_1000DF9E4);
}

uint64_t sub_1000DFA18@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A678, (uint64_t)qword_100369F60, (uint64_t)sub_1000DF9E4, a1);
}

uint64_t sub_1000DFA34()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0LL);
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 1LL, 1LL, v3);
  uint64_t v4 = v1
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)uint64_t v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  uint64_t v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))( v5,  1LL,  1LL,  v6);
  qword_10037A688 = v1;
  return result;
}

uint64_t sub_1000DFAEC(uint64_t a1)
{
  uint64_t v3 = sub_100003A0C(&qword_1003555B0);
  __chkstk_darwin(v3);
  uint64_t v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v6);
  uint64_t v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
  uint64_t v14 = a1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  v24,  0LL,  0LL);
  sub_10000E6C0(v14, (uint64_t)v8, &qword_100355538);
  swift_beginAccess(v9, v23, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v8, v9, &qword_100355538);
  swift_endAccess(v23);
  uint64_t v15 = (int *)(a1
              + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client,  v23,  0LL,  0LL);
  int v16 = *v15;
  LOBYTE(v15) = *((_BYTE *)v15 + 4);
  swift_beginAccess(v11, v22, 1LL, 0LL);
  *(_DWORD *)uint64_t v11 = v16;
  *(_BYTE *)(v11 + 4) = (_BYTE)v15;
  uint64_t v17 = a1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent,  v21,  0LL,  0LL);
  sub_10000E6C0(v17, (uint64_t)v5, &qword_1003555B0);
  swift_release(a1);
  swift_beginAccess(v12, v20, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v5, v12, &qword_1003555B0);
  swift_endAccess(v20);
  return v1;
}

uint64_t sub_1000DFD24()
{
  return sub_1000DA088( &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  &qword_100355538,  &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent,  &qword_1003555B0);
}

uint64_t sub_1000DFD48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v9)) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v3 + v9);
    uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0LL);
    uint64_t v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v13 = swift_retain(v10);
    sub_1000DFAEC(v13);
    uint64_t v14 = *(void *)(v6 + v9);
    *(void *)(v6 + v9) = v12;
    swift_release(v14);
  }

  uint64_t v15 = *(void *)(v6 + v9);
  swift_retain(v15);
  uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v17 & 1) != 0) {
        return swift_release(v15);
      }
      if (v16 == 3)
      {
        uint64_t v19 = v15
            + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
        swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent,  v27,  33LL,  0LL);
        uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0LL);
        unint64_t v21 = &qword_100356548;
        uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent;
        uint64_t v23 = &unk_1002C21A0;
        goto LABEL_7;
      }

      if (v16 == 2) {
        break;
      }
      if (v16 == 1)
      {
        uint64_t v19 = v15
            + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
        swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  v27,  33LL,  0LL);
        uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
        unint64_t v21 = (unint64_t *)&qword_1003552B8;
        uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
        uint64_t v23 = &unk_1002BF798;
LABEL_7:
        uint64_t v24 = sub_10000FD98(v21, v22, (uint64_t)v23);
        uint64_t v25 = v5;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v19, v20, v24, a2, a3);
LABEL_8:
        uint64_t v5 = v25;
        swift_endAccess(v27);
      }

      uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    uint64_t v26 = v15
        + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
    swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client,  v27,  33LL,  0LL);
    uint64_t v25 = v5;
    dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v26, a2, a3);
    goto LABEL_8;
  }

  return swift_release(v15);
}

uint64_t sub_1000DFF60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E3C70( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000DFF94,  &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000E0120);
}

uint64_t sub_1000DFF94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355538);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v15 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000E0120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003555B0);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_1003555B0);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  uint64_t v15 = sub_10000FD98( &qword_100356548,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent,  (uint64_t)&unk_1002C21A0);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
}

uint64_t sub_1000E02AC(uint64_t a1, uint64_t a2)
{
  return sub_100065AC0( a1,  a2,  type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator,  (uint64_t (*)(uint64_t, uint64_t))sub_1000E02D4) & 1;
}

BOOL sub_1000E02D4(uint64_t a1, uint64_t a2)
{
  uint64_t v55 = a2;
  uint64_t v50 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0LL);
  uint64_t v49 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v47 = (uint64_t)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = sub_100003A0C(&qword_10035C4D8);
  __chkstk_darwin(v48);
  uint64_t v51 = (uint64_t)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100003A0C(&qword_1003555B0);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v53 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  int v52 = (char *)&v47 - v8;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100003A0C(&qword_10035C418);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100003A0C(&qword_100355538);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v54 = (uint64_t)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v47 - v19;
  uint64_t v21 = a1;
  uint64_t v22 = a1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v22, v61, 0LL, 0LL);
  sub_10000E6C0(v22, (uint64_t)v20, &qword_100355538);
  uint64_t v23 = v55;
  uint64_t v24 = v55
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess( v55 + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  v60,  0LL,  0LL);
  uint64_t v25 = (uint64_t)&v15[*(int *)(v13 + 48)];
  sub_10000E6C0((uint64_t)v20, (uint64_t)v15, &qword_100355538);
  sub_10000E6C0(v24, v25, &qword_100355538);
  uint64_t v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v26((uint64_t)v15, 1LL, v9) == 1)
  {
    swift_retain(v21);
    swift_retain(v23);
    sub_100015764((uint64_t)v20, &qword_100355538);
    uint64_t v27 = v21;
    if (v26(v25, 1LL, v9) == 1)
    {
      sub_100015764((uint64_t)v15, &qword_100355538);
      goto LABEL_11;
    }

Swift::Int sub_1000E0940()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator,  &qword_100355788,  (uint64_t)&unk_1002C2430);
}

uint64_t sub_1000E095C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD7C(a1, &qword_10037A680, &qword_10037A688, (uint64_t)sub_1000DFA34, a2);
}

uint64_t sub_1000E0978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DFD48(a1, a2, a3);
}

uint64_t sub_1000E098C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C148,  type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator,  (uint64_t)&unk_1002C23A8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E09DC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A678, (uint64_t)qword_100369F60, (uint64_t)sub_1000DF9E4, a1);
}

uint64_t sub_1000E09F8(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356560,  type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator,  (uint64_t)&unk_1002C2330);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E0A38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356560,  type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator,  (uint64_t)&unk_1002C2330);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000E0A88()
{
  return &unk_10033EFB8;
}

unint64_t sub_1000E0A94()
{
  return 0xD000000000000024LL;
}

uint64_t sub_1000E0AB0()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369F78);
  sub_10000E704(v0, (uint64_t)qword_100369F78);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v31 = swift_allocObject(v1, v6 + 11 * v4, v5 | 7);
  *(_OWORD *)(v31 + 16) = xmmword_1002B42D0;
  uint64_t v7 = v31 + v6;
  uint64_t v8 = v31 + v6 + *(int *)(v2 + 48);
  *(void *)(v31 + v6) = 1LL;
  *(void *)uint64_t v8 = "gender";
  *(void *)(v8 + 8) = 6LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v31 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "height_m";
  *(void *)(v12 + 8) = 8LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v31 + v6 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 3LL;
  *(void *)uint64_t v14 = "weight_kg";
  *((void *)v14 + 1) = 9LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v31 + v6 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *uint64_t v15 = 4LL;
  *(void *)uint64_t v16 = "vo2max";
  *((void *)v16 + 1) = 6LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v31 + v6 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "age";
  *((void *)v18 + 1) = 3LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v31 + v6 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 6LL;
  *(void *)uint64_t v20 = "hrmin";
  *((void *)v20 + 1) = 5LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v31 + v6 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 7LL;
  *(void *)uint64_t v22 = "hrmax";
  *((void *)v22 + 1) = 5LL;
  _BYTE v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v31 + v6 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  void *v23 = 8LL;
  *(void *)uint64_t v24 = "hronset";
  *((void *)v24 + 1) = 7LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v31 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 9LL;
  *(void *)uint64_t v25 = "pal";
  *(void *)(v25 + 8) = 3LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  uint64_t v26 = (void *)(v31 + v6 + 9 * v4);
  uint64_t v27 = (char *)v26 + *(int *)(v2 + 48);
  void *v26 = 10LL;
  *(void *)uint64_t v27 = "condition";
  *((void *)v27 + 1) = 9LL;
  v27[16] = 2;
  v11();
  uint64_t v28 = (void *)(v31 + v6 + 10 * v4);
  int v29 = (char *)v28 + *(int *)(v2 + 48);
  *uint64_t v28 = 11LL;
  *(void *)int v29 = "run_vo2max";
  *((void *)v29 + 1) = 10LL;
  v29[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v31);
}

uint64_t sub_1000E0DF0()
{
  return sub_100008C30(&qword_10037A690, (uint64_t)qword_100369F78, (uint64_t)sub_1000E0AB0);
}

uint64_t sub_1000E0E0C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A690, (uint64_t)qword_100369F78, (uint64_t)sub_1000E0AB0, a1);
}

uint64_t sub_1000E0E28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL) + 20);
          unint64_t v10 = sub_100149FC0();
          uint64_t v11 = v9;
          uint64_t v12 = &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType;
          goto LABEL_15;
        case 2LL:
          uint64_t v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL) + 24);
          goto LABEL_17;
        case 3LL:
          uint64_t v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL) + 28);
          goto LABEL_17;
        case 4LL:
          uint64_t v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL) + 32);
          goto LABEL_17;
        case 5LL:
          uint64_t v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL) + 36);
          goto LABEL_17;
        case 6LL:
          uint64_t v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL) + 40);
          goto LABEL_17;
        case 7LL:
          uint64_t v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL) + 44);
          goto LABEL_17;
        case 8LL:
          uint64_t v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL) + 48);
          goto LABEL_17;
        case 9LL:
          uint64_t v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL) + 52);
          goto LABEL_17;
        case 10LL:
          uint64_t v14 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL) + 56);
          unint64_t v10 = sub_100149F7C();
          uint64_t v11 = v14;
          uint64_t v12 = &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType;
LABEL_15:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v11, v12, v10, a2, a3);
          break;
        case 11LL:
          uint64_t v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL) + 60);
LABEL_17:
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + v13, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000E0FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL);
  unint64_t v10 = (int *)result;
  if (*(_BYTE *)(v5 + *(int *)(result + 20)) != 3)
  {
    char v15 = *(_BYTE *)(v5 + *(int *)(result + 20));
    unint64_t v11 = sub_100149FC0();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v15,  1LL,  &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType,  v11,  a2,  a3);
  }

  if (!v4)
  {
    uint64_t v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(2LL, a2, a3, *(float *)v12);
    }
    uint64_t v13 = v5 + v10[7];
    if ((*(_BYTE *)(v13 + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(3LL, a2, a3, *(float *)v13);
    }
    uint64_t v14 = v5 + v10[8];
    if ((*(_BYTE *)(v14 + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(4LL, a2, a3, *(float *)v14);
    }
    sub_1000E122C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
    sub_1000E12A0(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
    sub_1000F9F5C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
    sub_1000F9FD0(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
    sub_1000E1314(v5, a1, a2, a3);
    sub_1000E1388(v5, a1, a2, a3);
    sub_1000E1410(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_1000E122C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0LL);
  uint64_t v9 = a1 + *(int *)(result + 36);
  if ((*(_BYTE *)(v9 + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(5LL, a3, a4, *(float *)v9);
  }
  return result;
}

uint64_t sub_1000E12A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0LL);
  uint64_t v9 = a1 + *(int *)(result + 40);
  if ((*(_BYTE *)(v9 + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(6LL, a3, a4, *(float *)v9);
  }
  return result;
}

uint64_t sub_1000E1314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL);
  uint64_t v8 = a1 + *(int *)(result + 52);
  if ((*(_BYTE *)(v8 + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(9LL, a3, a4, *(float *)v8);
  }
  return result;
}

uint64_t sub_1000E1388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL);
  if (*(_BYTE *)(a1 + *(int *)(result + 56)) != 8)
  {
    char v9 = *(_BYTE *)(a1 + *(int *)(result + 56));
    unint64_t v8 = sub_100149F7C();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v9,  10LL,  &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType,  v8,  a3,  a4);
  }

  return result;
}

uint64_t sub_1000E1410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL);
  uint64_t v8 = a1 + *(int *)(result + 60);
  if ((*(_BYTE *)(v8 + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(11LL, a3, a4, *(float *)v8);
  }
  return result;
}

Swift::Int sub_1000E1488()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics,  &qword_100355790,  (uint64_t)&unk_1002C2598);
}

uint64_t sub_1000E14A4@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 3;
  uint64_t v6 = a2 + v5;
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  uint64_t v7 = a1[8];
  uint64_t v8 = a2 + a1[7];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1[10];
  uint64_t v11 = a2 + a1[9];
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  uint64_t v12 = a2 + v10;
  *(_DWORD *)uint64_t v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  uint64_t v13 = a1[12];
  uint64_t v14 = a2 + a1[11];
  *(_DWORD *)uint64_t v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  uint64_t v15 = a2 + v13;
  *(_DWORD *)uint64_t v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  uint64_t v16 = a1[14];
  uint64_t v17 = a2 + a1[13];
  *(_DWORD *)uint64_t v17 = 0;
  *(_BYTE *)(v17 + 4) = 1;
  *(_BYTE *)(a2 + v16) = 8;
  uint64_t v18 = a2 + a1[15];
  *(_DWORD *)uint64_t v18 = 0;
  *(_BYTE *)(v18 + 4) = 1;
  return result;
}

uint64_t sub_1000E1560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E0E28(a1, a2, a3);
}

uint64_t sub_1000E1574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E0FE4(a1, a2, a3);
}

uint64_t sub_1000E1588(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C140,  type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics,  (uint64_t)&unk_1002C2510);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E15D8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A690, (uint64_t)qword_100369F78, (uint64_t)sub_1000E0AB0, a1);
}

uint64_t sub_1000E15F4(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356578,  type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics,  (uint64_t)&unk_1002C2498);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E1634(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356578,  type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics,  (uint64_t)&unk_1002C2498);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000E1684()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369F90);
  sub_10000E704(v0, (uint64_t)qword_100369F90);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 0LL;
  *(void *)uint64_t v9 = "NG_UNKNOWN";
  *(void *)(v9 + 8) = 10LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "NG_MALE";
  *((void *)v13 + 1) = 7LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 2LL;
  *(void *)uint64_t v14 = "NG_FEMALE";
  *(void *)(v14 + 8) = 9LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000E1814()
{
  return sub_100008C30(&qword_10037A698, (uint64_t)qword_100369F90, (uint64_t)sub_1000E1684);
}

uint64_t sub_1000E1830@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A698, (uint64_t)qword_100369F90, (uint64_t)sub_1000E1684, a1);
}

uint64_t sub_1000E184C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A698, (uint64_t)qword_100369F90, (uint64_t)sub_1000E1684, a1);
}

uint64_t sub_1000E1868()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369FA8);
  sub_10000E704(v0, (uint64_t)qword_100369FA8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42A0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "UC_UNKNOWN";
  *(void *)(v9 + 8) = 10LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "UC_ABLE_BODIED";
  *(void *)(v13 + 8) = 14LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "UC_AMPUTATION";
  *((void *)v15 + 1) = 13LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 3LL;
  *(void *)uint64_t v17 = "UC_SPINA_BIFIDA";
  *((void *)v17 + 1) = 15LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 4LL;
  *(void *)uint64_t v19 = "UC_SPINAL_CORD_INJURY_HIGH";
  *((void *)v19 + 1) = 26LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  void *v20 = 5LL;
  *(void *)uint64_t v21 = "UC_SPINAL_CORD_INJURY_MID";
  *((void *)v21 + 1) = 25LL;
  v21[16] = 2;
  v12();
  uint64_t v22 = (void *)(v8 + 6 * v4);
  uint64_t v23 = (char *)v22 + *(int *)(v2 + 48);
  *uint64_t v22 = 6LL;
  *(void *)uint64_t v23 = "UC_SPINAL_CORD_INJURY_LOW";
  *((void *)v23 + 1) = 25LL;
  v23[16] = 2;
  v12();
  uint64_t v24 = (void *)(v8 + 7 * v4);
  uint64_t v25 = (char *)v24 + *(int *)(v2 + 48);
  void *v24 = 7LL;
  *(void *)uint64_t v25 = "UC_OTHER";
  *((void *)v25 + 1) = 8LL;
  v25[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000E1B08()
{
  return sub_100008C30(&qword_10037A6A0, (uint64_t)qword_100369FA8, (uint64_t)sub_1000E1868);
}

uint64_t sub_1000E1B24@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A6A0, (uint64_t)qword_100369FA8, (uint64_t)sub_1000E1868, a1);
}

uint64_t sub_1000E1B40@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A6A0, (uint64_t)qword_100369FA8, (uint64_t)sub_1000E1868, a1);
}

void *sub_1000E1B5C()
{
  return &unk_10033EFC8;
}

unint64_t sub_1000E1B68()
{
  return 0xD000000000000024LL;
}

uint64_t sub_1000E1B84(uint64_t a1)
{
  return sub_1000F31A4(a1, qword_100369FC0, (uint64_t)"body_metrics", 12LL);
}

uint64_t sub_1000E1B9C()
{
  return sub_100008C30(&qword_10037A6A8, (uint64_t)qword_100369FC0, (uint64_t)sub_1000E1B84);
}

uint64_t sub_1000E1BB8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A6A8, (uint64_t)qword_100369FC0, (uint64_t)sub_1000E1B84, a1);
}

uint64_t sub_1000E1BD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F33A8( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry,  type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics,  &qword_100356578,  (uint64_t)&unk_1002C2498);
}

uint64_t sub_1000E1C08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DCC00( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000E1C2C);
}

uint64_t sub_1000E1C2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003555B8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_1003555B8);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
  uint64_t v15 = sub_10000FD98( &qword_100356578,  type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics,  (uint64_t)&unk_1002C2498);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

Swift::Int sub_1000E1DA4()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry,  &qword_100355798,  (uint64_t)&unk_1002C2750);
}

uint64_t sub_1000E1DC0@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000DCE80(a1, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a2);
}

uint64_t sub_1000E1DCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C138,  type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry,  (uint64_t)&unk_1002C26C8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E1E1C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A6A8, (uint64_t)qword_100369FC0, (uint64_t)sub_1000E1B84, a1);
}

uint64_t sub_1000E1E38(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356590,  type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry,  (uint64_t)&unk_1002C2650);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E1E78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356590,  type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry,  (uint64_t)&unk_1002C2650);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000E1EC8()
{
  return &unk_10033EFD8;
}

unint64_t sub_1000E1ED4()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_1000E1EF0(uint64_t a1)
{
  return sub_1000FB384( a1,  qword_100369FD8,  (uint64_t)"event_receipt_time",  18LL,  (unsigned int *)&enum case for _NameMap.NameDescription.standard(_:));
}

uint64_t sub_1000E1F10()
{
  return sub_100008C30(&qword_10037A6B0, (uint64_t)qword_100369FD8, (uint64_t)sub_1000E1EF0);
}

uint64_t sub_1000E1F2C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A6B0, (uint64_t)qword_100369FD8, (uint64_t)sub_1000E1EF0, a1);
}

uint64_t sub_1000E1F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FB4F8( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_Timer,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (unint64_t *)&qword_1003552B8,  (uint64_t)&unk_1002BF798);
}

uint64_t sub_1000E1F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EE464(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Timer);
}

uint64_t sub_1000E1F98(uint64_t a1, uint64_t a2)
{
  return sub_10011C654(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Timer) & 1;
}

Swift::Int sub_1000E1FB8()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_Timer,  &qword_1003557A0,  (uint64_t)&unk_1002C28B8);
}

uint64_t sub_1000E1FD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000EE4F8(a1, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a2);
}

uint64_t sub_1000E1FE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C130,  type metadata accessor for CLP_LogEntry_PrivateData_Timer,  (uint64_t)&unk_1002C2830);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E2030@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A6B0, (uint64_t)qword_100369FD8, (uint64_t)sub_1000E1EF0, a1);
}

uint64_t sub_1000E204C(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003565A8,  type metadata accessor for CLP_LogEntry_PrivateData_Timer,  (uint64_t)&unk_1002C27B8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E208C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003565A8,  type metadata accessor for CLP_LogEntry_PrivateData_Timer,  (uint64_t)&unk_1002C27B8);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000E20DC()
{
  return &unk_10033EFE8;
}

unint64_t sub_1000E20E8()
{
  return 0xD00000000000002ELL;
}

uint64_t sub_1000E2104()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_100369FF0);
  sub_10000E704(v0, (uint64_t)qword_100369FF0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 - v4 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3330;
  uint64_t v8 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v8 = "applicable_time";
  *(void *)(v8 + 8) = 15LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v6 + v4) = 2LL;
  *(void *)uint64_t v12 = "ground_altitude_above_wgs84_m";
  *(void *)(v12 + 8) = 29LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + v6 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 3LL;
  *(void *)uint64_t v14 = "ground_altitude_above_wgs84_unc_m";
  *((void *)v14 + 1) = 33LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v7 + v6 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *uint64_t v15 = 4LL;
  *(void *)uint64_t v16 = "undulation_m";
  *((void *)v16 + 1) = 12LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v7 + v6 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "slope_in_direction_of_travel";
  *((void *)v18 + 1) = 28LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v7 + v6 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 6LL;
  *(void *)uint64_t v20 = "max_abs_slope";
  *((void *)v20 + 1) = 13LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v7 + v6 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 7LL;
  *(void *)uint64_t v22 = "client";
  *((void *)v22 + 1) = 6LL;
  _BYTE v22[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000E2370()
{
  return sub_100008C30(&qword_10037A6B8, (uint64_t)qword_100369FF0, (uint64_t)sub_1000E2104);
}

uint64_t sub_1000E238C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A6B8, (uint64_t)qword_100369FF0, (uint64_t)sub_1000E2104, a1);
}

uint64_t sub_1000E23A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0LL) + 20);
          uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
          uint64_t v11 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v11, a2, a3);
          break;
        case 2LL:
          uint64_t v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0LL) + 24);
          goto LABEL_8;
        case 3LL:
          uint64_t v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0LL) + 28);
LABEL_8:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v12, a2, a3);
          break;
        case 4LL:
          uint64_t v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0LL) + 32);
          goto LABEL_12;
        case 5LL:
          uint64_t v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0LL) + 36);
          goto LABEL_12;
        case 6LL:
          uint64_t v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0LL) + 40);
LABEL_12:
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + v13, a2, a3);
          break;
        case 7LL:
          uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0LL);
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v3 + *(int *)(v14 + 44), a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000E2560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = sub_100105BC8(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
  if (!v4)
  {
    uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0LL);
    uint64_t v11 = v5 + v10[6];
    if ((*(_BYTE *)(v11 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2LL, a2, a3, *(double *)v11);
    }
    uint64_t v12 = v5 + v10[7];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3LL, a2, a3, *(double *)v12);
    }
    uint64_t v13 = v5 + v10[8];
    if ((*(_BYTE *)(v13 + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(4LL, a2, a3, *(float *)v13);
    }
    sub_1000E122C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
    sub_1000E12A0(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
    sub_1000E8FCC(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, 7LL);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_1000E26FC()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel,  &qword_1003557A8,  (uint64_t)&unk_1002C2A20);
}

uint64_t sub_1000E2718@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))( v4,  1LL,  1LL,  v5);
  uint64_t v7 = a1[7];
  uint64_t v8 = a2 + a1[6];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  uint64_t v10 = a1[9];
  uint64_t v11 = a2 + a1[8];
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  uint64_t v12 = a2 + v10;
  *(_DWORD *)uint64_t v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  uint64_t v13 = a1[11];
  uint64_t v14 = a2 + a1[10];
  *(_DWORD *)uint64_t v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  uint64_t v15 = a2 + v13;
  *(_DWORD *)uint64_t v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  return result;
}

uint64_t sub_1000E27C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E23A8(a1, a2, a3);
}

uint64_t sub_1000E27DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E2560(a1, a2, a3);
}

uint64_t sub_1000E27F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C128,  type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel,  (uint64_t)&unk_1002C2998);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E2840@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A6B8, (uint64_t)qword_100369FF0, (uint64_t)sub_1000E2104, a1);
}

uint64_t sub_1000E285C(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003565C0,  type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel,  (uint64_t)&unk_1002C2920);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E289C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003565C0,  type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel,  (uint64_t)&unk_1002C2920);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000E28EC()
{
  return &unk_10033EFF8;
}

unint64_t sub_1000E28F8()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_1000E2914()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A008);
  sub_10000E704(v0, (uint64_t)qword_10036A008);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v37 = swift_allocObject(v1, v6 + 14 * v4, v5 | 7);
  *(_OWORD *)(v37 + 16) = xmmword_1002B42F0;
  uint64_t v7 = v37 + v6;
  uint64_t v8 = v37 + v6 + *(int *)(v2 + 48);
  *(void *)(v37 + v6) = 1LL;
  *(void *)uint64_t v8 = "applicable_time";
  *(void *)(v8 + 8) = 15LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "latitude_deg";
  *(void *)(v12 + 8) = 12LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 3LL;
  *(void *)uint64_t v14 = "longitude_deg";
  *((void *)v14 + 1) = 13LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v7 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *uint64_t v15 = 4LL;
  *(void *)uint64_t v16 = "course_deg";
  *((void *)v16 + 1) = 10LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v7 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "course_unc_deg";
  *((void *)v18 + 1) = 14LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v7 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 6LL;
  *(void *)uint64_t v20 = "road_width_m";
  *((void *)v20 + 1) = 12LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v7 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 7LL;
  *(void *)uint64_t v22 = "start_latitude_deg";
  *((void *)v22 + 1) = 18LL;
  _BYTE v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v7 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  void *v23 = 8LL;
  *(void *)uint64_t v24 = "start_longitude_deg";
  *((void *)v24 + 1) = 19LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 9LL;
  *(void *)uint64_t v25 = "road_length_m";
  *(void *)(v25 + 8) = 13LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  uint64_t v26 = (void *)(v7 + 9 * v4);
  uint64_t v27 = (char *)v26 + *(int *)(v2 + 48);
  void *v26 = 10LL;
  *(void *)uint64_t v27 = "speed_mps";
  *((void *)v27 + 1) = 9LL;
  v27[16] = 2;
  v11();
  uint64_t v28 = (void *)(v7 + 10 * v4);
  int v29 = (char *)v28 + *(int *)(v2 + 48);
  *uint64_t v28 = 11LL;
  *(void *)int v29 = "is_one_way";
  *((void *)v29 + 1) = 10LL;
  v29[16] = 2;
  v11();
  char v30 = (void *)(v7 + 11 * v4);
  uint64_t v31 = (char *)v30 + *(int *)(v2 + 48);
  void *v30 = 12LL;
  *(void *)uint64_t v31 = "is_rail_way";
  *((void *)v31 + 1) = 11LL;
  v31[16] = 2;
  v11();
  int v32 = (void *)(v7 + 12 * v4);
  char v33 = (char *)v32 + *(int *)(v2 + 48);
  *int v32 = 13LL;
  *(void *)char v33 = "is_tunnel";
  *((void *)v33 + 1) = 9LL;
  v33[16] = 2;
  v11();
  uint64_t v34 = (void *)(v7 + 13 * v4);
  uint64_t v35 = (char *)v34 + *(int *)(v2 + 48);
  *uint64_t v34 = 14LL;
  *(void *)uint64_t v35 = "is_bridge";
  *((void *)v35 + 1) = 9LL;
  v35[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v37);
}

uint64_t sub_1000E2CE0()
{
  return sub_100008C30(&qword_10037A6C0, (uint64_t)qword_10036A008, (uint64_t)sub_1000E2914);
}

uint64_t sub_1000E2CFC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A6C0, (uint64_t)qword_10036A008, (uint64_t)sub_1000E2914, a1);
}

uint64_t sub_1000E2D18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 20);
          uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
          uint64_t v11 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v11, a2, a3);
          break;
        case 2LL:
          uint64_t v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 24);
          goto LABEL_15;
        case 3LL:
          uint64_t v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 28);
          goto LABEL_15;
        case 4LL:
          uint64_t v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 32);
          goto LABEL_15;
        case 5LL:
          uint64_t v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 36);
          goto LABEL_15;
        case 6LL:
          uint64_t v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 40);
          goto LABEL_15;
        case 7LL:
          uint64_t v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 44);
          goto LABEL_15;
        case 8LL:
          uint64_t v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 48);
          goto LABEL_15;
        case 9LL:
          uint64_t v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 52);
          goto LABEL_15;
        case 10LL:
          uint64_t v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 56);
LABEL_15:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v12, a2, a3);
          break;
        case 11LL:
          uint64_t v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 60);
          goto LABEL_20;
        case 12LL:
          uint64_t v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 64);
          goto LABEL_20;
        case 13LL:
          uint64_t v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 68);
          goto LABEL_20;
        case 14LL:
          uint64_t v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL) + 72);
LABEL_20:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + v13, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000E2F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = sub_100105BC8(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  if (!v4)
  {
    uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL);
    uint64_t v11 = v5 + v10[6];
    if ((*(_BYTE *)(v11 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2LL, a2, a3, *(double *)v11);
    }
    uint64_t v12 = v5 + v10[7];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3LL, a2, a3, *(double *)v12);
    }
    uint64_t v13 = v5 + v10[8];
    if ((*(_BYTE *)(v13 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(4LL, a2, a3, *(double *)v13);
    }
    sub_1000FAE74(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
    sub_1000FAEE8(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
    sub_1000FAF5C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
    sub_100100474(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
    sub_1000E31A0(v5, a1, a2, a3);
    sub_1000E3214(v5, a1, a2, a3);
    sub_1000E3288(v5, a1, a2, a3);
    sub_1000E32FC(v5, a1, a2, a3);
    sub_1000E3370(v5, a1, a2, a3);
    sub_1000E33E4(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_1000E31A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL);
  uint64_t v8 = a1 + *(int *)(result + 52);
  if ((*(_BYTE *)(v8 + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(9LL, a3, a4, *(double *)v8);
  }
  return result;
}

uint64_t sub_1000E3214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL);
  uint64_t v8 = a1 + *(int *)(result + 56);
  if ((*(_BYTE *)(v8 + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(10LL, a3, a4, *(double *)v8);
  }
  return result;
}

uint64_t sub_1000E3288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL);
  int v8 = *(unsigned __int8 *)(a1 + *(int *)(result + 60));
  if (v8 != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v8 & 1, 11LL, a3, a4);
  }
  return result;
}

uint64_t sub_1000E32FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL);
  int v8 = *(unsigned __int8 *)(a1 + *(int *)(result + 64));
  if (v8 != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v8 & 1, 12LL, a3, a4);
  }
  return result;
}

uint64_t sub_1000E3370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL);
  int v8 = *(unsigned __int8 *)(a1 + *(int *)(result + 68));
  if (v8 != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v8 & 1, 13LL, a3, a4);
  }
  return result;
}

uint64_t sub_1000E33E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL);
  int v8 = *(unsigned __int8 *)(a1 + *(int *)(result + 72));
  if (v8 != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v8 & 1, 14LL, a3, a4);
  }
  return result;
}

Swift::Int sub_1000E345C()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel,  &qword_1003557B0,  (uint64_t)&unk_1002C2B88);
}

uint64_t sub_1000E3478@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))( v4,  1LL,  1LL,  v5);
  uint64_t v7 = a1[7];
  uint64_t v8 = a2 + a1[6];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  uint64_t v10 = a1[9];
  uint64_t v11 = a2 + a1[8];
  *(void *)uint64_t v11 = 0LL;
  *(_BYTE *)(v11 + 8) = 1;
  uint64_t v12 = a2 + v10;
  *(void *)uint64_t v12 = 0LL;
  *(_BYTE *)(v12 + 8) = 1;
  uint64_t v13 = a1[11];
  uint64_t v14 = a2 + a1[10];
  *(void *)uint64_t v14 = 0LL;
  *(_BYTE *)(v14 + 8) = 1;
  uint64_t v15 = a2 + v13;
  *(void *)uint64_t v15 = 0LL;
  *(_BYTE *)(v15 + 8) = 1;
  uint64_t v16 = a1[13];
  uint64_t v17 = a2 + a1[12];
  *(void *)uint64_t v17 = 0LL;
  *(_BYTE *)(v17 + 8) = 1;
  uint64_t v18 = a2 + v16;
  *(void *)uint64_t v18 = 0LL;
  *(_BYTE *)(v18 + 8) = 1;
  uint64_t v19 = a1[15];
  uint64_t v20 = a2 + a1[14];
  *(void *)uint64_t v20 = 0LL;
  *(_BYTE *)(v20 + 8) = 1;
  *(_BYTE *)(a2 + v19) = 2;
  uint64_t v21 = a1[17];
  *(_BYTE *)(a2 + a1[16]) = 2;
  *(_BYTE *)(a2 + v21) = 2;
  *(_BYTE *)(a2 + a1[18]) = 2;
  return result;
}

uint64_t sub_1000E3570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E2D18(a1, a2, a3);
}

uint64_t sub_1000E3584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E2F24(a1, a2, a3);
}

uint64_t sub_1000E3598(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C120,  type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel,  (uint64_t)&unk_1002C2B00);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E35E8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A6C0, (uint64_t)qword_10036A008, (uint64_t)sub_1000E2914, a1);
}

uint64_t sub_1000E3604(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003565D8,  type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel,  (uint64_t)&unk_1002C2A88);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E3644(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003565D8,  type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel,  (uint64_t)&unk_1002C2A88);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000E3698()
{
  return &unk_10033F008;
}

unint64_t sub_1000E36A4()
{
  return 0xD000000000000022LL;
}

uint64_t sub_1000E36C0(uint64_t a1)
{
  return sub_1000F31A4(a1, qword_10036A020, (uint64_t)"dot_data", 8LL);
}

uint64_t sub_1000E36D8()
{
  return sub_100008C30(&qword_10037A6C8, (uint64_t)qword_10036A020, (uint64_t)sub_1000E36C0);
}

uint64_t sub_1000E36F4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A6C8, (uint64_t)qword_10036A020, (uint64_t)sub_1000E36C0, a1);
}

uint64_t sub_1000E3710()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0LL);
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 1LL, 1LL, v3);
  uint64_t v4 = v1
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)uint64_t v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  uint64_t v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))( v5,  1LL,  1LL,  v6);
  qword_10037A6D8 = v1;
  return result;
}

uint64_t sub_1000E37C8(uint64_t a1)
{
  uint64_t v3 = sub_100003A0C(&qword_1003555C0);
  __chkstk_darwin(v3);
  uint64_t v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v6);
  uint64_t v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
  uint64_t v14 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  v24,  0LL,  0LL);
  sub_10000E6C0(v14, (uint64_t)v8, &qword_100355538);
  swift_beginAccess(v9, v23, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v8, v9, &qword_100355538);
  swift_endAccess(v23);
  uint64_t v15 = (int *)(a1
              + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client,  v23,  0LL,  0LL);
  int v16 = *v15;
  LOBYTE(v15) = *((_BYTE *)v15 + 4);
  swift_beginAccess(v11, v22, 1LL, 0LL);
  *(_DWORD *)uint64_t v11 = v16;
  *(_BYTE *)(v11 + 4) = (_BYTE)v15;
  uint64_t v17 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData,  v21,  0LL,  0LL);
  sub_10000E6C0(v17, (uint64_t)v5, &qword_1003555C0);
  swift_release(a1);
  swift_beginAccess(v12, v20, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v5, v12, &qword_1003555C0);
  swift_endAccess(v20);
  return v1;
}

uint64_t sub_1000E3A00()
{
  return sub_1000DA088( &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  &qword_100355538,  &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData,  &qword_1003555C0);
}

uint64_t sub_1000E3A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v9)) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v3 + v9);
    uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0LL);
    uint64_t v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v13 = swift_retain(v10);
    sub_1000E37C8(v13);
    uint64_t v14 = *(void *)(v6 + v9);
    *(void *)(v6 + v9) = v12;
    swift_release(v14);
  }

  uint64_t v15 = *(void *)(v6 + v9);
  swift_retain(v15);
  uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v17 & 1) != 0) {
        return swift_release(v15);
      }
      if (v16 == 3)
      {
        uint64_t v19 = v15
            + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
        swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData,  v27,  33LL,  0LL);
        uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL);
        uint64_t v21 = &qword_1003565D8;
        uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel;
        uint64_t v23 = &unk_1002C2A88;
        goto LABEL_7;
      }

      if (v16 == 2) {
        break;
      }
      if (v16 == 1)
      {
        uint64_t v19 = v15
            + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
        swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  v27,  33LL,  0LL);
        uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
        uint64_t v21 = (unint64_t *)&qword_1003552B8;
        uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
        uint64_t v23 = &unk_1002BF798;
LABEL_7:
        uint64_t v24 = sub_10000FD98(v21, v22, (uint64_t)v23);
        uint64_t v25 = v5;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v19, v20, v24, a2, a3);
LABEL_8:
        uint64_t v5 = v25;
        swift_endAccess(v27);
      }

      uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    uint64_t v26 = v15
        + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
    swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client,  v27,  33LL,  0LL);
    uint64_t v25 = v5;
    dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v26, a2, a3);
    goto LABEL_8;
  }

  return swift_release(v15);
}

uint64_t sub_1000E3C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E3C70( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_MapVector,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000E3D9C,  &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000E3F28);
}

uint64_t sub_1000E3C70( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t), void *a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v12 = v7;
  uint64_t v16 = *(void *)(v12 + *(int *)(a4(0LL) + 20));
  uint64_t v17 = swift_retain(v16);
  a5(v17, a1, a2, a3);
  if (v8) {
    return swift_release(v16);
  }
  uint64_t v18 = (unsigned int *)(v16 + *a6);
  swift_beginAccess(v18, v20, 0LL, 0LL);
  if ((v18[1] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v18, 2LL, a2, a3);
  }
  a7(v16, a1, a2, a3);
  swift_release(v16);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000E3D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355538);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v15 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000E3F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003555C0);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_1003555C0);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  uint64_t v15 = sub_10000FD98( &qword_1003565D8,  type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel,  (uint64_t)&unk_1002C2A88);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000E40B4(uint64_t a1, uint64_t a2)
{
  return sub_100065AC0( a1,  a2,  type metadata accessor for CLP_LogEntry_PrivateData_MapVector,  (uint64_t (*)(uint64_t, uint64_t))sub_1000E40DC) & 1;
}

BOOL sub_1000E40DC(uint64_t a1, uint64_t a2)
{
  uint64_t v55 = a2;
  uint64_t v50 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL);
  uint64_t v49 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v47 = (uint64_t)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = sub_100003A0C(&qword_10035C4C8);
  __chkstk_darwin(v48);
  uint64_t v51 = (uint64_t)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100003A0C(&qword_1003555C0);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v53 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  int v52 = (char *)&v47 - v8;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100003A0C(&qword_10035C418);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100003A0C(&qword_100355538);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v54 = (uint64_t)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v47 - v19;
  uint64_t v21 = a1;
  uint64_t v22 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v22, v61, 0LL, 0LL);
  sub_10000E6C0(v22, (uint64_t)v20, &qword_100355538);
  uint64_t v23 = v55;
  uint64_t v24 = v55
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess( v55 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  v60,  0LL,  0LL);
  uint64_t v25 = (uint64_t)&v15[*(int *)(v13 + 48)];
  sub_10000E6C0((uint64_t)v20, (uint64_t)v15, &qword_100355538);
  sub_10000E6C0(v24, v25, &qword_100355538);
  uint64_t v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v26((uint64_t)v15, 1LL, v9) == 1)
  {
    swift_retain(v21);
    swift_retain(v23);
    sub_100015764((uint64_t)v20, &qword_100355538);
    uint64_t v27 = v21;
    if (v26(v25, 1LL, v9) == 1)
    {
      sub_100015764((uint64_t)v15, &qword_100355538);
      goto LABEL_11;
    }

Swift::Int sub_1000E4748()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_MapVector,  &qword_1003557B8,  (uint64_t)&unk_1002C2CF0);
}

uint64_t sub_1000E4764@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD7C(a1, &qword_10037A6D0, &qword_10037A6D8, (uint64_t)sub_1000E3710, a2);
}

uint64_t sub_1000E4780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E3A24(a1, a2, a3);
}

uint64_t sub_1000E4794(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C118,  type metadata accessor for CLP_LogEntry_PrivateData_MapVector,  (uint64_t)&unk_1002C2C68);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E47E4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A6C8, (uint64_t)qword_10036A020, (uint64_t)sub_1000E36C0, a1);
}

uint64_t sub_1000E4800(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003565F0,  type metadata accessor for CLP_LogEntry_PrivateData_MapVector,  (uint64_t)&unk_1002C2BF0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E4840(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003565F0,  type metadata accessor for CLP_LogEntry_PrivateData_MapVector,  (uint64_t)&unk_1002C2BF0);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000E4890()
{
  return &unk_10033F018;
}

unint64_t sub_1000E489C()
{
  return 0xD00000000000002FLL;
}

uint64_t sub_1000E48B8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A038);
  sub_10000E704(v0, (uint64_t)qword_10036A038);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42A0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "applicable_time";
  *(void *)(v9 + 8) = 15LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "search_point_latitude_deg";
  *(void *)(v13 + 8) = 25LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "search_point_longitude_deg";
  *((void *)v15 + 1) = 26LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "search_radius_m";
  *((void *)v17 + 1) = 15LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 5LL;
  *(void *)uint64_t v19 = "is_close_to_tunnel";
  *((void *)v19 + 1) = 18LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  void *v20 = 6LL;
  *(void *)uint64_t v21 = "is_close_to_bridge";
  *((void *)v21 + 1) = 18LL;
  v21[16] = 2;
  v12();
  uint64_t v22 = (void *)(v8 + 6 * v4);
  uint64_t v23 = (char *)v22 + *(int *)(v2 + 48);
  *uint64_t v22 = 7LL;
  *(void *)uint64_t v23 = "is_tunnel";
  *((void *)v23 + 1) = 9LL;
  v23[16] = 2;
  v12();
  uint64_t v24 = (void *)(v8 + 7 * v4);
  uint64_t v25 = (char *)v24 + *(int *)(v2 + 48);
  void *v24 = 8LL;
  *(void *)uint64_t v25 = "is_bridge";
  *((void *)v25 + 1) = 9LL;
  v25[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000E4B5C()
{
  return sub_100008C30(&qword_10037A6E0, (uint64_t)qword_10036A038, (uint64_t)sub_1000E48B8);
}

uint64_t sub_1000E4B78@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A6E0, (uint64_t)qword_10036A038, (uint64_t)sub_1000E48B8, a1);
}

uint64_t sub_1000E4B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL) + 20);
          uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
          uint64_t v12 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
          uint64_t v13 = v9;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v10, v11, v12, a2, a3);
          goto LABEL_15;
        case 2LL:
          uint64_t v14 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL) + 24);
          goto LABEL_9;
        case 3LL:
          uint64_t v14 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL) + 28);
          goto LABEL_9;
        case 4LL:
          uint64_t v14 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL) + 32);
LABEL_9:
          uint64_t v13 = v9;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v14, a2, a3);
          goto LABEL_15;
        case 5LL:
          uint64_t v15 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL) + 36);
          goto LABEL_14;
        case 6LL:
          uint64_t v15 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL) + 40);
          goto LABEL_14;
        case 7LL:
          uint64_t v15 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL) + 44);
          goto LABEL_14;
        case 8LL:
          uint64_t v15 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL) + 48);
LABEL_14:
          uint64_t v13 = v9;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + v15, a2, a3);
LABEL_15:
          uint64_t v9 = v13;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000E4D30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = sub_100105BC8(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  if (!v4)
  {
    uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL);
    uint64_t v11 = v5 + v10[6];
    if ((*(_BYTE *)(v11 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2LL, a2, a3, *(double *)v11);
    }
    uint64_t v12 = v5 + v10[7];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3LL, a2, a3, *(double *)v12);
    }
    uint64_t v13 = v5 + v10[8];
    if ((*(_BYTE *)(v13 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(4LL, a2, a3, *(double *)v13);
    }
    sub_1000EA2B8(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
    sub_1000EEFB8(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
    sub_1000E4EEC(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
    sub_1000E4F60(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_1000E4EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0LL);
  int v9 = *(unsigned __int8 *)(a1 + *(int *)(result + 44));
  if (v9 != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v9 & 1, 7LL, a3, a4);
  }
  return result;
}

uint64_t sub_1000E4F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0LL);
  int v9 = *(unsigned __int8 *)(a1 + *(int *)(result + 48));
  if (v9 != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v9 & 1, 8LL, a3, a4);
  }
  return result;
}

Swift::Int sub_1000E4FD8()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance,  &qword_1003557C0,  (uint64_t)&unk_1002C2E58);
}

uint64_t sub_1000E4FF4@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))( v4,  1LL,  1LL,  v5);
  uint64_t v7 = a1[7];
  uint64_t v8 = a2 + a1[6];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  uint64_t v10 = a1[9];
  uint64_t v11 = a2 + a1[8];
  *(void *)uint64_t v11 = 0LL;
  *(_BYTE *)(v11 + 8) = 1;
  *(_BYTE *)(a2 + v10) = 2;
  uint64_t v12 = a1[11];
  *(_BYTE *)(a2 + a1[10]) = 2;
  *(_BYTE *)(a2 + v12) = 2;
  *(_BYTE *)(a2 + a1[12]) = 2;
  return result;
}

uint64_t sub_1000E5098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E4B94(a1, a2, a3);
}

uint64_t sub_1000E50AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E4D30(a1, a2, a3);
}

uint64_t sub_1000E50C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C110,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance,  (uint64_t)&unk_1002C2DD0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E5110@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A6E0, (uint64_t)qword_10036A038, (uint64_t)sub_1000E48B8, a1);
}

uint64_t sub_1000E512C(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356608,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance,  (uint64_t)&unk_1002C2D58);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E516C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356608,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance,  (uint64_t)&unk_1002C2D58);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000E51BC()
{
  return &unk_10033F028;
}

unint64_t sub_1000E51C8()
{
  return 0xD000000000000031LL;
}

uint64_t sub_1000E51E4(uint64_t a1)
{
  return sub_1000F31A4(a1, qword_10036A050, (uint64_t)"tunnel_bridge_data", 18LL);
}

uint64_t sub_1000E51FC()
{
  return sub_100008C30(&qword_10037A6E8, (uint64_t)qword_10036A050, (uint64_t)sub_1000E51E4);
}

uint64_t sub_1000E5218@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A6E8, (uint64_t)qword_10036A050, (uint64_t)sub_1000E51E4, a1);
}

uint64_t sub_1000E5234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F33A8( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance,  &qword_100356608,  (uint64_t)&unk_1002C2D58);
}

uint64_t sub_1000E5268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DCC00( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000E528C);
}

uint64_t sub_1000E528C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003555C8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_1003555C8);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  uint64_t v15 = sub_10000FD98( &qword_100356608,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance,  (uint64_t)&unk_1002C2D58);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

Swift::Int sub_1000E5404()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification,  &qword_1003557C8,  (uint64_t)&unk_1002C2FC0);
}

uint64_t sub_1000E5420@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000DCE80(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a2);
}

uint64_t sub_1000E542C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C108,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification,  (uint64_t)&unk_1002C2F38);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E547C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A6E8, (uint64_t)qword_10036A050, (uint64_t)sub_1000E51E4, a1);
}

uint64_t sub_1000E5498(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356620,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification,  (uint64_t)&unk_1002C2EC0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E54D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356620,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification,  (uint64_t)&unk_1002C2EC0);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000E5528()
{
  return &unk_10033F038;
}

unint64_t sub_1000E5534()
{
  return 0xD000000000000031LL;
}

uint64_t sub_1000E5550()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A068);
  sub_10000E704(v0, (uint64_t)qword_10036A068);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v39 = swift_allocObject(v1, v6 - v4 + 16 * v4, v5 | 7);
  *(_OWORD *)(v39 + 16) = xmmword_1002BACF0;
  uint64_t v7 = v39 + v6;
  uint64_t v8 = v39 + v6 + *(int *)(v2 + 48);
  *(void *)(v39 + v6) = 1LL;
  *(void *)uint64_t v8 = "applicable_time";
  *(void *)(v8 + 8) = 15LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "latitude_deg";
  *(void *)(v12 + 8) = 12LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 3LL;
  *(void *)uint64_t v14 = "longitude_deg";
  *((void *)v14 + 1) = 13LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v7 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *uint64_t v15 = 4LL;
  *(void *)uint64_t v16 = "horizontal_unc_m";
  *((void *)v16 + 1) = 16LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v7 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "altitude_m";
  *((void *)v18 + 1) = 10LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v7 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 6LL;
  *(void *)uint64_t v20 = "vertical_unc_m";
  *((void *)v20 + 1) = 14LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v7 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 7LL;
  *(void *)uint64_t v22 = "reference_frame";
  *((void *)v22 + 1) = 15LL;
  _BYTE v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v7 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  void *v23 = 8LL;
  *(void *)uint64_t v24 = "course_at_exit_deg";
  *((void *)v24 + 1) = 18LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 9LL;
  *(void *)uint64_t v25 = "course_at_exit_unc_deg";
  *(void *)(v25 + 8) = 22LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  uint64_t v26 = (void *)(v7 + 9 * v4);
  uint64_t v27 = (char *)v26 + *(int *)(v2 + 48);
  void *v26 = 10LL;
  *(void *)uint64_t v27 = "tunnel_width_at_exit_m";
  *((void *)v27 + 1) = 22LL;
  v27[16] = 2;
  v11();
  uint64_t v28 = (void *)(v7 + 10 * v4);
  int v29 = (char *)v28 + *(int *)(v2 + 48);
  *uint64_t v28 = 11LL;
  *(void *)int v29 = "is_tunnel_curved";
  *((void *)v29 + 1) = 16LL;
  v29[16] = 2;
  v11();
  char v30 = (void *)(v7 + 11 * v4);
  uint64_t v31 = (char *)v30 + *(int *)(v2 + 48);
  void *v30 = 12LL;
  *(void *)uint64_t v31 = "start_latitude_deg";
  *((void *)v31 + 1) = 18LL;
  v31[16] = 2;
  v11();
  int v32 = (void *)(v7 + 12 * v4);
  char v33 = (char *)v32 + *(int *)(v2 + 48);
  *int v32 = 13LL;
  *(void *)char v33 = "start_longitude_deg";
  *((void *)v33 + 1) = 19LL;
  v33[16] = 2;
  v11();
  uint64_t v34 = (void *)(v7 + 13 * v4);
  uint64_t v35 = (char *)v34 + *(int *)(v2 + 48);
  *uint64_t v34 = 14LL;
  *(void *)uint64_t v35 = "tunnel_length_m";
  *((void *)v35 + 1) = 15LL;
  v35[16] = 2;
  v11();
  uint64_t v36 = (void *)(v7 + 14 * v4);
  uint64_t v37 = (char *)v36 + *(int *)(v2 + 48);
  void *v36 = 15LL;
  *(void *)uint64_t v37 = "end_point_distance_from_current_solution_m";
  *((void *)v37 + 1) = 42LL;
  v37[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v39);
}

uint64_t sub_1000E595C()
{
  return sub_100008C30(&qword_10037A6F0, (uint64_t)qword_10036A068, (uint64_t)sub_1000E5550);
}

uint64_t sub_1000E5978@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A6F0, (uint64_t)qword_10036A068, (uint64_t)sub_1000E5550, a1);
}

uint64_t sub_1000E5994()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0LL);
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))( v2,  1LL,  1LL,  v3);
  uint64_t v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg;
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + 8) = 1;
  uint64_t v6 = v1
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg;
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  uint64_t v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM;
  *(void *)uint64_t v7 = 0LL;
  *(_BYTE *)(v7 + 8) = 1;
  uint64_t v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM;
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame) = 3;
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg;
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  *(void *)uint64_t v11 = 0LL;
  *(_BYTE *)(v11 + 8) = 1;
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  *(void *)uint64_t v12 = 0LL;
  *(_BYTE *)(v12 + 8) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved) = 2;
  uint64_t v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg;
  *(void *)uint64_t v13 = 0LL;
  *(_BYTE *)(v13 + 8) = 1;
  uint64_t v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  *(void *)uint64_t v14 = 0LL;
  *(_BYTE *)(v14 + 8) = 1;
  uint64_t v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  *(void *)uint64_t v15 = 0LL;
  *(_BYTE *)(v15 + 8) = 1;
  uint64_t v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  *(void *)uint64_t v16 = 0LL;
  *(_BYTE *)(v16 + 8) = 1;
  qword_10037A700 = v1;
  return result;
}

uint64_t sub_1000E5B18()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_1000E5B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v9)) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v3 + v9);
    uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0LL);
    uint64_t v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v13 = swift_retain(v10);
    sub_10010E4F0(v13);
    swift_release(v10);
    uint64_t v14 = *(void *)(v6 + v9);
    *(void *)(v6 + v9) = v12;
    swift_release(v14);
  }

  uint64_t v15 = *(void *)(v6 + v9);
  swift_retain(v15);
  uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    uint64_t v19 = &qword_100379A00[192];
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1LL:
          uint64_t v20 = v19;
          uint64_t v21 = v15
              + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime,  v30,  33LL,  0LL);
          uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
          uint64_t v23 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v21, v22, v23, a2, a3);
          swift_endAccess(v30);
          uint64_t v19 = v20;
          break;
        case 2LL:
          uint64_t v24 = OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg;
          goto LABEL_23;
        case 3LL:
          uint64_t v24 = OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg;
          goto LABEL_23;
        case 4LL:
          uint64_t v24 = OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM;
          goto LABEL_23;
        case 5LL:
          uint64_t v24 = OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM;
          goto LABEL_23;
        case 6LL:
          uint64_t v24 = OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
          goto LABEL_23;
        case 7LL:
          uint64_t v25 = v15
              + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame,  v30,  33LL,  0LL);
          unint64_t v26 = sub_10014AA60();
          uint64_t v27 = v5;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v25,  &type metadata for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType,  v26,  a2,  a3);
          goto LABEL_24;
        case 8LL:
          uint64_t v24 = OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg;
          goto LABEL_23;
        case 9LL:
          uint64_t v24 = OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
          goto LABEL_23;
        case 10LL:
          uint64_t v24 = OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
          goto LABEL_23;
        case 11LL:
          uint64_t v28 = v15
              + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved,  v30,  33LL,  0LL);
          uint64_t v27 = v5;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v28, a2, a3);
          goto LABEL_24;
        case 12LL:
          uint64_t v24 = OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg;
          goto LABEL_23;
        case 13LL:
          uint64_t v24 = OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
          goto LABEL_23;
        case 14LL:
          uint64_t v24 = OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
          goto LABEL_23;
        case 15LL:
          uint64_t v24 = v19[406];
LABEL_23:
          uint64_t v29 = v15 + v24;
          swift_beginAccess(v15 + v24, v30, 33LL, 0LL);
          uint64_t v27 = v5;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v29, a2, a3);
LABEL_24:
          uint64_t v5 = v27;
          swift_endAccess(v30);
          break;
        default:
          break;
      }

      uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return swift_release(v15);
}

uint64_t sub_1000E5E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0LL) + 20));
  uint64_t v10 = swift_retain(v9);
  sub_1000E6310(v10, a1, a2, a3);
  if (v4) {
    return swift_release(v9);
  }
  uint64_t v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg,  &v28,  0LL,  0LL);
  if ((*(_BYTE *)(v12 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2LL, a2, a3, *(double *)v12);
  }
  uint64_t v13 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg,  v29,  0LL,  0LL);
  if ((*(_BYTE *)(v13 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3LL, a2, a3, *(double *)v13);
  }
  uint64_t v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM,  v30,  0LL,  0LL);
  if ((*(_BYTE *)(v14 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(4LL, a2, a3, *(double *)v14);
  }
  uint64_t v15 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM,  v41,  0LL,  0LL);
  if ((*(_BYTE *)(v15 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(5LL, a2, a3, *(double *)v15);
  }
  uint64_t v16 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM,  v40,  0LL,  0LL);
  if ((*(_BYTE *)(v16 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(6LL, a2, a3, *(double *)v16);
  }
  char v17 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame,  v39,  0LL,  0LL);
  if (*v17 != 3)
  {
    v38[0] = *v17;
    unint64_t v18 = sub_10014AA60();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v38,  7LL,  &type metadata for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType,  v18,  a2,  a3);
  }

  uint64_t v19 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg,  v38,  0LL,  0LL);
  if ((*(_BYTE *)(v19 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(8LL, a2, a3, *(double *)v19);
  }
  uint64_t v20 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg,  v37,  0LL,  0LL);
  if ((*(_BYTE *)(v20 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(9LL, a2, a3, *(double *)v20);
  }
  uint64_t v21 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM,  v36,  0LL,  0LL);
  if ((*(_BYTE *)(v21 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(10LL, a2, a3, *(double *)v21);
  }
  uint64_t v22 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved,  v35,  0LL,  0LL);
  int v23 = *v22;
  if (v23 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v23 & 1, 11LL, a2, a3);
  }
  uint64_t v24 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg,  v34,  0LL,  0LL);
  if ((*(_BYTE *)(v24 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(12LL, a2, a3, *(double *)v24);
  }
  uint64_t v25 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg,  v33,  0LL,  0LL);
  if ((*(_BYTE *)(v25 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(13LL, a2, a3, *(double *)v25);
  }
  uint64_t v26 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM,  v32,  0LL,  0LL);
  if ((*(_BYTE *)(v26 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(14LL, a2, a3, *(double *)v26);
  }
  uint64_t v27 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM,  v31,  0LL,  0LL);
  if ((*(_BYTE *)(v27 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(15LL, a2, a3, *(double *)v27);
  }
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000E6310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355538);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v15 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000E649C(uint64_t a1, uint64_t a2)
{
  return sub_100065AC0( a1,  a2,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  sub_1000E64C4) & 1;
}

uint64_t sub_1000E64C4(uint64_t a1, uint64_t a2)
{
  uint64_t v75 = a2;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v73 = (uint64_t)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100003A0C(&qword_10035C418);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100003A0C(&qword_100355538);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v74 = (uint64_t)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v73 - v12;
  uint64_t v14 = a1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime,  v105,  0LL,  0LL);
  sub_10000E6C0(v14, (uint64_t)v13, &qword_100355538);
  uint64_t v15 = v75;
  uint64_t v16 = v75
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess( v75 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime,  v104,  0LL,  0LL);
  uint64_t v17 = (uint64_t)&v8[*(int *)(v6 + 48)];
  sub_10000E6C0((uint64_t)v13, (uint64_t)v8, &qword_100355538);
  sub_10000E6C0(v16, v17, &qword_100355538);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v18((uint64_t)v8, 1LL, v3) == 1)
  {
    swift_retain(a1);
    swift_retain(v15);
    sub_100015764((uint64_t)v13, &qword_100355538);
    int v19 = v18(v17, 1LL, v3);
    uint64_t v20 = a1;
    if (v19 == 1)
    {
      sub_100015764((uint64_t)v8, &qword_100355538);
      goto LABEL_10;
    }

LABEL_55:
  uint64_t v53 = (unsigned __int8 *)(v20
                          + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  swift_beginAccess( v20 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved,  &v85,  0LL,  0LL);
  int v54 = *v53;
  uint64_t v55 = (unsigned __int8 *)(v15
                          + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved,  &v84,  0LL,  0LL);
  int v56 = *v55;
  if (v54 == 2)
  {
    if (v56 != 2) {
      goto LABEL_7;
    }
  }

  else if (v56 == 2 || ((((v56 & 1) == 0) ^ v54) & 1) == 0)
  {
    goto LABEL_7;
  }

  uint64_t v57 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg;
  swift_beginAccess( v20 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg,  &v83,  0LL,  0LL);
  double v58 = *(double *)v57;
  LOBYTE(v57) = *(_BYTE *)(v57 + 8);
  uint64_t v59 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg;
  swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg,  &v82,  0LL,  0LL);
  if ((v57 & 1) != 0)
  {
    if ((*(_BYTE *)(v59 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }

  else if ((*(_BYTE *)(v59 + 8) & 1) != 0 || v58 != *(double *)v59)
  {
    goto LABEL_7;
  }

  uint64_t v60 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  swift_beginAccess( v20 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg,  &v81,  0LL,  0LL);
  double v61 = *(double *)v60;
  LOBYTE(v60) = *(_BYTE *)(v60 + 8);
  uint64_t v62 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg,  &v80,  0LL,  0LL);
  if ((v60 & 1) != 0)
  {
    if ((*(_BYTE *)(v62 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }

  else if ((*(_BYTE *)(v62 + 8) & 1) != 0 || v61 != *(double *)v62)
  {
    goto LABEL_7;
  }

  uint64_t v63 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  swift_beginAccess( v20 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM,  &v79,  0LL,  0LL);
  double v64 = *(double *)v63;
  LOBYTE(v63) = *(_BYTE *)(v63 + 8);
  uint64_t v65 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM,  &v78,  0LL,  0LL);
  if ((v63 & 1) != 0)
  {
    if ((*(_BYTE *)(v65 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }

  else if ((*(_BYTE *)(v65 + 8) & 1) != 0 || v64 != *(double *)v65)
  {
    goto LABEL_7;
  }

  uint64_t v66 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  swift_beginAccess( v20 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM,  &v77,  0LL,  0LL);
  double v67 = *(double *)v66;
  char v68 = *(_BYTE *)(v66 + 8);
  swift_release(v20);
  uint64_t v69 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM,  &v76,  0LL,  0LL);
  double v70 = *(double *)v69;
  int v71 = *(unsigned __int8 *)(v69 + 8);
  swift_release(v15);
  if ((v68 & 1) != 0)
  {
    if (!v71) {
      return 0LL;
    }
  }

  else
  {
    if (v67 == v70) {
      char v72 = v71;
    }
    else {
      char v72 = 1;
    }
    if ((v72 & 1) != 0) {
      return 0LL;
    }
  }

  return 1LL;
}

  uint64_t v78 = v34
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess( v34 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion,  &v105,  0LL,  0LL);
  uint64_t v79 = v95;
  sub_10000E6C0(v78, v95, &qword_100355608);
  uint64_t v80 = a2
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess( a2 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion,  &v104,  0LL,  0LL);
  uint64_t v81 = v96;
  uint64_t v82 = v96 + *(int *)(v92 + 48);
  sub_10000E6C0(v79, v96, &qword_100355608);
  sub_10000E6C0(v80, v82, &qword_100355608);
  uint64_t v83 = v94;
  uint64_t v84 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48);
  if (v84(v81, 1LL, v94) == 1)
  {
    swift_release(v34);
    swift_release(a2);
    sub_100015764(v95, &qword_100355608);
    if (v84(v82, 1LL, v83) == 1)
    {
      sub_100015764(v96, &qword_100355608);
      return 1LL;
    }

Swift::Int sub_1000E6D98()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &qword_1003557D0,  (uint64_t)&unk_1002C3128);
}

uint64_t sub_1000E6DB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD7C(a1, &qword_10037A6F8, &qword_10037A700, (uint64_t)sub_1000E5994, a2);
}

uint64_t sub_1000E6DD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E5B50(a1, a2, a3);
}

uint64_t sub_1000E6DE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E5E50(a1, a2, a3);
}

uint64_t sub_1000E6DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C100,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  (uint64_t)&unk_1002C30A0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E6E48@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A6F0, (uint64_t)qword_10036A068, (uint64_t)sub_1000E5550, a1);
}

uint64_t sub_1000E6E64(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356638,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  (uint64_t)&unk_1002C3028);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E6EA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356638,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  (uint64_t)&unk_1002C3028);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000E6EF8()
{
  return &unk_10033F048;
}

unint64_t sub_1000E6F04()
{
  return 0xD000000000000027LL;
}

uint64_t sub_1000E6F20(uint64_t a1)
{
  return sub_1000F31A4(a1, qword_10036A080, (uint64_t)"tunnel_end_point_data", 21LL);
}

uint64_t sub_1000E6F38()
{
  return sub_100008C30(&qword_10037A708, (uint64_t)qword_10036A080, (uint64_t)sub_1000E6F20);
}

uint64_t sub_1000E6F54@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A708, (uint64_t)qword_10036A080, (uint64_t)sub_1000E6F20, a1);
}

uint64_t sub_1000E6F70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F33A8( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &qword_100356638,  (uint64_t)&unk_1002C3028);
}

uint64_t sub_1000E6FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DCC00( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000E6FC8);
}

uint64_t sub_1000E6FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003555D0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_1003555D0);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  uint64_t v15 = sub_10000FD98( &qword_100356638,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  (uint64_t)&unk_1002C3028);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

Swift::Int sub_1000E7140()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint,  &qword_1003557D8,  (uint64_t)&unk_1002C3290);
}

uint64_t sub_1000E715C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000DCE80(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, a2);
}

uint64_t sub_1000E7168(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C0F8,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint,  (uint64_t)&unk_1002C3208);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E71B8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A708, (uint64_t)qword_10036A080, (uint64_t)sub_1000E6F20, a1);
}

uint64_t sub_1000E71D4(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356650,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint,  (uint64_t)&unk_1002C3190);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E7214(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356650,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint,  (uint64_t)&unk_1002C3190);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000E7264()
{
  return &unk_10033F058;
}

unint64_t sub_1000E7270()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_1000E728C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A098);
  sub_10000E704(v0, (uint64_t)qword_10036A098);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32F0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "road_id";
  *(void *)(v9 + 8) = 7LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "start_latitude_deg";
  *(void *)(v13 + 8) = 18LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "start_longitude_deg";
  *((void *)v15 + 1) = 19LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "end_latitude_deg";
  *((void *)v17 + 1) = 16LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 5LL;
  *(void *)uint64_t v18 = "end_longitude_deg";
  *(void *)(v18 + 8) = 17LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000E7490()
{
  return sub_100008C30(&qword_10037A710, (uint64_t)qword_10036A098, (uint64_t)sub_1000E728C);
}

uint64_t sub_1000E74AC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A710, (uint64_t)qword_10036A098, (uint64_t)sub_1000E728C, a1);
}

uint64_t sub_1000E74C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0LL);
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)(v3 + *(int *)(v10 + 20), a2, a3);
          break;
        case 2LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0LL) + 24);
          goto LABEL_5;
        case 3LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0LL) + 28);
          goto LABEL_5;
        case 4LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0LL) + 32);
          goto LABEL_5;
        case 5LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0LL) + 36);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v9, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000E75E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0LL);
  uint64_t v10 = (int *)result;
  uint64_t v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(*(void *)v11, 1LL, a2, a3);
  }
  if (!v4)
  {
    uint64_t v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2LL, a2, a3, *(double *)v12);
    }
    uint64_t v13 = v5 + v10[7];
    if ((*(_BYTE *)(v13 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3LL, a2, a3, *(double *)v13);
    }
    uint64_t v14 = v5 + v10[8];
    if ((*(_BYTE *)(v14 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(4LL, a2, a3, *(double *)v14);
    }
    uint64_t v15 = v5 + v10[9];
    if ((*(_BYTE *)(v15 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(5LL, a2, a3, *(double *)v15);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_1000E7740()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData,  &qword_1003557E0,  (uint64_t)&unk_1002C33F8);
}

uint64_t sub_1000E775C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E74C8(a1, a2, a3);
}

uint64_t sub_1000E7770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E75E0(a1, a2, a3);
}

uint64_t sub_1000E7784(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C0F0,  type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData,  (uint64_t)&unk_1002C3370);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E77D4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A710, (uint64_t)qword_10036A098, (uint64_t)sub_1000E728C, a1);
}

uint64_t sub_1000E77F0(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003557E8,  type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData,  (uint64_t)&unk_1002C32F8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E7830(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003557E8,  type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData,  (uint64_t)&unk_1002C32F8);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000E7880()
{
  return &unk_10033F068;
}

unint64_t sub_1000E788C()
{
  return 0xD00000000000002DLL;
}

uint64_t sub_1000E78A8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A0B0);
  sub_10000E704(v0, (uint64_t)qword_10036A0B0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32F0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "event_receipt_time";
  *(void *)(v9 + 8) = 18LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "applicable_time";
  *(void *)(v13 + 8) = 15LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "route_type";
  *((void *)v15 + 1) = 10LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "step_type";
  *((void *)v17 + 1) = 9LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 5LL;
  *(void *)uint64_t v18 = "route_hint_data";
  *(void *)(v18 + 8) = 15LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000E7AAC()
{
  return sub_100008C30(&qword_10037A718, (uint64_t)qword_10036A0B0, (uint64_t)sub_1000E78A8);
}

uint64_t sub_1000E7AC8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A718, (uint64_t)qword_10036A0B0, (uint64_t)sub_1000E78A8, a1);
}

uint64_t sub_1000E7AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v14 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0LL) + 24);
          goto LABEL_12;
        case 2LL:
          uint64_t v14 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0LL) + 28);
LABEL_12:
          uint64_t v15 = v3 + v14;
          uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
          uint64_t v17 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
          uint64_t v13 = v9;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v15, v16, v17, a2, a3);
          goto LABEL_6;
        case 3LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0LL) + 32);
          goto LABEL_5;
        case 4LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0LL) + 36);
LABEL_5:
          uint64_t v11 = v3 + v10;
          unint64_t v12 = sub_100149F38();
          uint64_t v13 = v9;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v11,  &type metadata for CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType,  v12,  a2,  a3);
          goto LABEL_6;
        case 5LL:
          uint64_t v18 = type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0LL);
          uint64_t v19 = sub_10000FD98( &qword_1003557E8,  type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData,  (uint64_t)&unk_1002C32F8);
          uint64_t v13 = v9;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v3, v18, v19, a2, a3);
LABEL_6:
          uint64_t v9 = v13;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000E7C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1000E7E30(v3, a1, a2, a3);
  if (!v4)
  {
    sub_1000E7FA4(v3, a1, a2, a3);
    uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0LL);
    uint64_t v10 = v9;
    if (*(_BYTE *)(v3 + *(int *)(v9 + 32)) != 7)
    {
      char v16 = *(_BYTE *)(v3 + *(int *)(v9 + 32));
      unint64_t v11 = sub_100149F38();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v16,  3LL,  &type metadata for CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType,  v11,  a2,  a3);
    }

    if (*(_BYTE *)(v3 + *(int *)(v10 + 36)) != 7)
    {
      char v17 = *(_BYTE *)(v3 + *(int *)(v10 + 36));
      unint64_t v12 = sub_100149F38();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v17,  4LL,  &type metadata for CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType,  v12,  a2,  a3);
    }

    uint64_t v13 = *(void *)v3;
    if (*(void *)(*(void *)v3 + 16LL))
    {
      uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0LL);
      uint64_t v15 = sub_10000FD98( &qword_1003557E8,  type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData,  (uint64_t)&unk_1002C32F8);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v13, 5LL, v14, v15, a2, a3);
    }

    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_1000E7E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_100355538);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v15 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000E7FA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_100355538);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v15 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int sub_1000E811C()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint,  &qword_1003557F0,  (uint64_t)&unk_1002C3560);
}

uint64_t sub_1000E8138@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + a1[6];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL);
  v6(v4, 1LL, 1LL, v5);
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v6)((char *)a2 + a1[7], 1LL, 1LL, v5);
  uint64_t v8 = a1[9];
  *((_BYTE *)a2 + a1[8]) = 7;
  *((_BYTE *)a2 + v8) = 7;
  return result;
}

uint64_t sub_1000E81D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E7AE4(a1, a2, a3);
}

uint64_t sub_1000E81EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E7C88(a1, a2, a3);
}

uint64_t sub_1000E8200(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C0E8,  type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint,  (uint64_t)&unk_1002C34D8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E8250@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A718, (uint64_t)qword_10036A0B0, (uint64_t)sub_1000E78A8, a1);
}

uint64_t sub_1000E826C(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356678,  type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint,  (uint64_t)&unk_1002C3460);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E82AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356678,  type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint,  (uint64_t)&unk_1002C3460);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000E82FC()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A0C8);
  sub_10000E704(v0, (uint64_t)qword_10036A0C8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 - v4 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3330;
  uint64_t v8 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v8 = "RT_UNKNOWN";
  *(void *)(v8 + 8) = 10LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v6 + v4) = 1LL;
  *(void *)uint64_t v12 = "RT_PEDESTRIAN";
  *(void *)(v12 + 8) = 13LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + v6 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 2LL;
  *(void *)uint64_t v14 = "RT_VEHICLE";
  *((void *)v14 + 1) = 10LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v7 + v6 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *uint64_t v15 = 3LL;
  *(void *)uint64_t v16 = "RT_TRANSIT";
  *((void *)v16 + 1) = 10LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v7 + v6 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 4LL;
  *(void *)uint64_t v18 = "RT_BICYCLE";
  *((void *)v18 + 1) = 10LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v7 + v6 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 5LL;
  *(void *)uint64_t v20 = "RT_FERRY";
  *((void *)v20 + 1) = 8LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v7 + v6 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 6LL;
  *(void *)uint64_t v22 = "RT_RIDESHARE";
  *((void *)v22 + 1) = 12LL;
  _BYTE v22[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000E855C()
{
  return sub_100008C30(&qword_10037A720, (uint64_t)qword_10036A0C8, (uint64_t)sub_1000E82FC);
}

uint64_t sub_1000E8578@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A720, (uint64_t)qword_10036A0C8, (uint64_t)sub_1000E82FC, a1);
}

uint64_t sub_1000E8594@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A720, (uint64_t)qword_10036A0C8, (uint64_t)sub_1000E82FC, a1);
}

void *sub_1000E85B0()
{
  return &unk_10033F078;
}

unint64_t sub_1000E85BC()
{
  return 0xD00000000000003ALL;
}

uint64_t sub_1000E85D8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A0E0);
  sub_10000E704(v0, (uint64_t)qword_10036A0E0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v27 = swift_allocObject(v1, v6 + 9 * v4, v5 | 7);
  *(_OWORD *)(v27 + 16) = xmmword_1002B3320;
  uint64_t v7 = v27 + v6;
  uint64_t v8 = v27 + v6 + *(int *)(v2 + 48);
  *(void *)(v27 + v6) = 1LL;
  *(void *)uint64_t v8 = "event_receipt_time";
  *(void *)(v8 + 8) = 18LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "applicable_time";
  *(void *)(v12 + 8) = 15LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 3LL;
  *(void *)uint64_t v14 = "client";
  *((void *)v14 + 1) = 6LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v7 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *uint64_t v15 = 4LL;
  *(void *)uint64_t v16 = "transmission_state";
  *((void *)v16 + 1) = 18LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v7 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "sample_count";
  *((void *)v18 + 1) = 12LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v7 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 6LL;
  *(void *)uint64_t v20 = "time_offset_sec";
  *((void *)v20 + 1) = 15LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v7 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 7LL;
  *(void *)uint64_t v22 = "speed_mps";
  *((void *)v22 + 1) = 9LL;
  _BYTE v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v7 + 7 * v4);
  char v24 = (char *)v23 + *(int *)(v2 + 48);
  void *v23 = 8LL;
  *(void *)char v24 = "slip_detected";
  *((void *)v24 + 1) = 13LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 9LL;
  *(void *)uint64_t v25 = "sensor_type";
  *(void *)(v25 + 8) = 11LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v27);
}

uint64_t sub_1000E88B4()
{
  return sub_100008C30(&qword_10037A728, (uint64_t)qword_10036A0E0, (uint64_t)sub_1000E85D8);
}

uint64_t sub_1000E88D0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A728, (uint64_t)qword_10036A0E0, (uint64_t)sub_1000E85D8, a1);
}

uint64_t sub_1000E88EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0LL) + 28);
          goto LABEL_7;
        case 2LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0LL) + 32);
LABEL_7:
          uint64_t v11 = v3 + v10;
          uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
          uint64_t v13 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
          uint64_t v14 = v9;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v11, v12, v13, a2, a3);
          goto LABEL_18;
        case 3LL:
          uint64_t v15 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0LL) + 36);
          goto LABEL_11;
        case 4LL:
          uint64_t v16 = v3
              + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0LL) + 40);
          unint64_t v17 = sub_100149EF4();
          uint64_t v18 = v16;
          uint64_t v19 = &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType;
          goto LABEL_17;
        case 5LL:
          uint64_t v15 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0LL) + 44);
LABEL_11:
          uint64_t v14 = v9;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v3 + v15, a2, a3);
          goto LABEL_18;
        case 6LL:
          uint64_t v20 = v3;
          goto LABEL_14;
        case 7LL:
          uint64_t v20 = v3 + 8;
LABEL_14:
          uint64_t v14 = v9;
          dispatch thunk of Decoder.decodeRepeatedDoubleField(value:)(v20, a2, a3);
          goto LABEL_18;
        case 8LL:
          uint64_t v21 = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0LL);
          uint64_t v14 = v9;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + *(int *)(v21 + 48), a2, a3);
          goto LABEL_18;
        case 9LL:
          uint64_t v22 = v3
              + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0LL) + 52);
          unint64_t v17 = sub_100149EB0();
          uint64_t v18 = v22;
          uint64_t v19 = &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType;
LABEL_17:
          uint64_t v14 = v9;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v18, v19, v17, a2, a3);
LABEL_18:
          uint64_t v9 = v14;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000E8AD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1000E8CDC((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    sub_1000E8E50( (uint64_t)v3,  a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification,  2LL);
    uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0LL);
    uint64_t v10 = v9;
    uint64_t v11 = (unsigned int *)((char *)v3 + *(int *)(v9 + 36));
    if ((v11[1] & 1) == 0) {
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v11, 3LL, a2, a3);
    }
    if (*((_BYTE *)v3 + *(int *)(v10 + 40)) != 5)
    {
      char v13 = *((_BYTE *)v3 + *(int *)(v10 + 40));
      unint64_t v12 = sub_100149EF4();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v13,  4LL,  &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType,  v12,  a2,  a3);
    }

    sub_1000E8FCC( (uint64_t)v3,  a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification,  5LL);
    if (*(void *)(*v3 + 16LL)) {
      dispatch thunk of Visitor.visitRepeatedDoubleField(value:fieldNumber:)();
    }
    if (*(void *)(v3[1] + 16LL)) {
      dispatch thunk of Visitor.visitRepeatedDoubleField(value:fieldNumber:)();
    }
    sub_1000E4F60( (uint64_t)v3,  a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
    sub_1000E9048((uint64_t)v3, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_1000E8CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_100355538);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v15 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000E8E50( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v18 = a6;
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  uint64_t v8 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = a5(0LL);
  sub_10000E6C0(a1 + *(int *)(v15 + 32), (uint64_t)v10, &qword_100355538);
  sub_100003E68((uint64_t)v10, (uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v17 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, v18, v11, v17, v19, v20);
  return sub_100004090((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000E8FCC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t result = a5(0LL);
  uint64_t v11 = (unsigned int *)(a1 + *(int *)(result + 44));
  if ((v11[1] & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v11, a6, a3, a4);
  }
  return result;
}

uint64_t sub_1000E9048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0LL);
  int v8 = *(unsigned __int8 *)(a1 + *(int *)(result + 52));
  if (v8 != 2)
  {
    char v10 = v8 & 1;
    unint64_t v9 = sub_100149EB0();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v10,  9LL,  &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType,  v9,  a3,  a4);
  }

  return result;
}

Swift::Int sub_1000E90D8()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification,  &qword_1003557F8,  (uint64_t)&unk_1002C36F0);
}

uint64_t sub_1000E90F4@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  a2[1] = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + a1[7];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL);
  v6(v4, 1LL, 1LL, v5);
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v6)((char *)a2 + a1[8], 1LL, 1LL, v5);
  uint64_t v8 = a1[10];
  unint64_t v9 = (char *)a2 + a1[9];
  *(_DWORD *)unint64_t v9 = 0;
  v9[4] = 1;
  *((_BYTE *)a2 + v8) = 5;
  uint64_t v10 = a1[12];
  uint64_t v11 = (char *)a2 + a1[11];
  *(_DWORD *)uint64_t v11 = 0;
  v11[4] = 1;
  *((_BYTE *)a2 + v10) = 2;
  *((_BYTE *)a2 + a1[13]) = 2;
  return result;
}

uint64_t sub_1000E91C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E88EC(a1, a2, a3);
}

uint64_t sub_1000E91D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E8AD8(a1, a2, a3);
}

uint64_t sub_1000E91E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C0E0,  type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification,  (uint64_t)&unk_1002C3668);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E9238@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A728, (uint64_t)qword_10036A0E0, (uint64_t)sub_1000E85D8, a1);
}

uint64_t sub_1000E9254(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356690,  type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification,  (uint64_t)&unk_1002C35F0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E9294(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356690,  type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification,  (uint64_t)&unk_1002C35F0);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000E92E4()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A0F8);
  sub_10000E704(v0, (uint64_t)qword_10036A0F8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32F0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "TS_UNKNOWN";
  *(void *)(v9 + 8) = 10LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v7 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "TS_PARK";
  *(void *)(v13 + 8) = 7LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v7 + v6 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "TS_REVERSE";
  *((void *)v15 + 1) = 10LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v7 + v6 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 3LL;
  *(void *)uint64_t v17 = "TS_DRIVE";
  *((void *)v17 + 1) = 8LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v7 + v6 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 4LL;
  *(void *)uint64_t v18 = "TS_NEUTRAL";
  *(void *)(v18 + 8) = 10LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000E94E4()
{
  return sub_100008C30(&qword_10037A730, (uint64_t)qword_10036A0F8, (uint64_t)sub_1000E92E4);
}

uint64_t sub_1000E9500@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A730, (uint64_t)qword_10036A0F8, (uint64_t)sub_1000E92E4, a1);
}

uint64_t sub_1000E951C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A730, (uint64_t)qword_10036A0F8, (uint64_t)sub_1000E92E4, a1);
}

uint64_t sub_1000E9538()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A110);
  sub_10000E704(v0, (uint64_t)qword_10036A110);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3340;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 0LL;
  *(void *)uint64_t v9 = "ST_UNKNOWN";
  *(void *)(v9 + 8) = 10LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "ST_COMBINED";
  *((void *)v13 + 1) = 11LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000E9688()
{
  return sub_100008C30(&qword_10037A738, (uint64_t)qword_10036A110, (uint64_t)sub_1000E9538);
}

uint64_t sub_1000E96A4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A738, (uint64_t)qword_10036A110, (uint64_t)sub_1000E9538, a1);
}

uint64_t sub_1000E96C0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A738, (uint64_t)qword_10036A110, (uint64_t)sub_1000E9538, a1);
}

void *sub_1000E96DC()
{
  return &unk_10033F088;
}

unint64_t sub_1000E96E8()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_1000E9704()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A128);
  sub_10000E704(v0, (uint64_t)qword_10036A128);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v8 = "previous";
  *(void *)(v8 + 8) = 8LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v6 + v4) = 2LL;
  *(void *)uint64_t v12 = "current";
  *(void *)(v12 + 8) = 7LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + v6 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 3LL;
  *(void *)uint64_t v14 = "about_to_sleep";
  *((void *)v14 + 1) = 14LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v7 + v6 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *uint64_t v15 = 4LL;
  *(void *)uint64_t v16 = "recently_woke";
  *((void *)v16 + 1) = 13LL;
  v16[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000E98D0()
{
  return sub_100008C30(&qword_10037A740, (uint64_t)qword_10036A128, (uint64_t)sub_1000E9704);
}

uint64_t sub_1000E98EC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A740, (uint64_t)qword_10036A128, (uint64_t)sub_1000E9704, a1);
}

uint64_t sub_1000E9908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0LL) + 20);
          goto LABEL_5;
        case 2LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0LL) + 24);
LABEL_5:
          uint64_t v10 = v3 + v9;
          unint64_t v11 = sub_10014A7B8();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v10,  &type metadata for CLP_LogEntry_PrivateData_ReachabilityType,  v11,  a2,  a3);
          break;
        case 3LL:
          uint64_t v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0LL) + 28);
          goto LABEL_11;
        case 4LL:
          uint64_t v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0LL) + 32);
LABEL_11:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + v12, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000E9A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0LL);
  uint64_t v10 = (int *)result;
  if (*(_BYTE *)(v5 + *(int *)(result + 20)) != 5)
  {
    char v15 = *(_BYTE *)(v5 + *(int *)(result + 20));
    unint64_t v11 = sub_10014A7B8();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v15,  1LL,  &type metadata for CLP_LogEntry_PrivateData_ReachabilityType,  v11,  a2,  a3);
  }

  if (!v4)
  {
    if (*(_BYTE *)(v5 + v10[6]) != 5)
    {
      char v16 = *(_BYTE *)(v5 + v10[6]);
      unint64_t v12 = sub_10014A7B8();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v16,  2LL,  &type metadata for CLP_LogEntry_PrivateData_ReachabilityType,  v12,  a2,  a3);
    }

    int v13 = *(unsigned __int8 *)(v5 + v10[7]);
    if (v13 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v13 & 1, 3LL, a2, a3);
    }
    int v14 = *(unsigned __int8 *)(v5 + v10[8]);
    if (v14 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v14 & 1, 4LL, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_1000E9B94()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState,  &qword_100355800,  (uint64_t)&unk_1002C38A8);
}

uint64_t sub_1000E9BB0@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 5;
  *(_BYTE *)(a2 + v5) = 5;
  uint64_t v6 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 2;
  *(_BYTE *)(a2 + v6) = 2;
  return result;
}

uint64_t sub_1000E9BF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E9908(a1, a2, a3);
}

uint64_t sub_1000E9C08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E9A34(a1, a2, a3);
}

uint64_t sub_1000E9C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C0D8,  type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState,  (uint64_t)&unk_1002C3820);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E9C6C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A740, (uint64_t)qword_10036A128, (uint64_t)sub_1000E9704, a1);
}

uint64_t sub_1000E9C88(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003566A8,  type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState,  (uint64_t)&unk_1002C37A8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E9CC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003566A8,  type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState,  (uint64_t)&unk_1002C37A8);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000E9D1C()
{
  return &unk_10033F098;
}

unint64_t sub_1000E9D28()
{
  return 0xD000000000000020LL;
}

uint64_t sub_1000E9D44()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A140);
  sub_10000E704(v0, (uint64_t)qword_10036A140);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 6 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32E0;
  uint64_t v8 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v8 = "level";
  *(void *)(v8 + 8) = 5LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  unint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v6 + v4) = 2LL;
  *(void *)uint64_t v12 = "charged";
  *(void *)(v12 + 8) = 7LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  int v13 = (void *)(v7 + v6 + 2 * v4);
  int v14 = (char *)v13 + *(int *)(v2 + 48);
  *int v13 = 3LL;
  *(void *)int v14 = "connected";
  *((void *)v14 + 1) = 9LL;
  v14[16] = 2;
  v11();
  char v15 = (void *)(v7 + v6 + 3 * v4);
  char v16 = (char *)v15 + *(int *)(v2 + 48);
  *char v15 = 4LL;
  *(void *)char v16 = "charger_type";
  *((void *)v16 + 1) = 12LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v7 + v6 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "was_connected";
  *((void *)v18 + 1) = 13LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v7 + v6 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 6LL;
  *(void *)uint64_t v20 = "charger_family";
  *((void *)v20 + 1) = 14LL;
  v20[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000E9F88()
{
  return sub_100008C30(&qword_10037A748, (uint64_t)qword_10036A140, (uint64_t)sub_1000E9D44);
}

uint64_t sub_1000E9FA4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A748, (uint64_t)qword_10036A140, (uint64_t)sub_1000E9D44, a1);
}

uint64_t sub_1000E9FC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL);
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + *(int *)(v12 + 20), a2, a3);
          goto LABEL_6;
        case 2LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL) + 24);
          goto LABEL_5;
        case 3LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL) + 28);
          goto LABEL_5;
        case 4LL:
          uint64_t v13 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL) + 32);
          unint64_t v14 = sub_10014A774();
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v13,  &type metadata for CLP_LogEntry_PrivateData_BatteryChargerType,  v14,  a2,  a3);
          goto LABEL_6;
        case 5LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL) + 36);
LABEL_5:
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + v10, a2, a3);
          goto LABEL_6;
        case 6LL:
          uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL);
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v3 + *(int *)(v15 + 40), a2, a3);
LABEL_6:
          uint64_t v9 = v11;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000EA128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL);
  uint64_t v10 = (int *)result;
  uint64_t v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1LL, a2, a3, *(double *)v11);
  }
  if (!v4)
  {
    int v12 = *(unsigned __int8 *)(v5 + v10[6]);
    if (v12 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v12 & 1, 2LL, a2, a3);
    }
    int v13 = *(unsigned __int8 *)(v5 + v10[7]);
    if (v13 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v13 & 1, 3LL, a2, a3);
    }
    if (*(_BYTE *)(v5 + v10[8]) != 5)
    {
      char v15 = *(_BYTE *)(v5 + v10[8]);
      unint64_t v14 = sub_10014A774();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v15,  4LL,  &type metadata for CLP_LogEntry_PrivateData_BatteryChargerType,  v14,  a2,  a3);
    }

    sub_1000EA2B8(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
    sub_1000EA32C(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_1000EA2B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0LL);
  int v9 = *(unsigned __int8 *)(a1 + *(int *)(result + 36));
  if (v9 != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v9 & 1, 5LL, a3, a4);
  }
  return result;
}

uint64_t sub_1000EA32C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL);
  char v8 = (unsigned int *)(a1 + *(int *)(result + 40));
  if ((v8[1] & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v8, 6LL, a3, a4);
  }
  return result;
}

Swift::Int sub_1000EA3A4()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_Battery,  &qword_100355808,  (uint64_t)&unk_1002C3A10);
}

uint64_t sub_1000EA3C0@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  *(_BYTE *)(a2 + v5) = 2;
  uint64_t v7 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 2;
  *(_BYTE *)(a2 + v7) = 5;
  uint64_t v8 = a1[10];
  *(_BYTE *)(a2 + a1[9]) = 2;
  uint64_t v9 = a2 + v8;
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  return result;
}

uint64_t sub_1000EA424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E9FC0(a1, a2, a3);
}

uint64_t sub_1000EA438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EA128(a1, a2, a3);
}

uint64_t sub_1000EA44C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C0D0,  type metadata accessor for CLP_LogEntry_PrivateData_Battery,  (uint64_t)&unk_1002C3988);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000EA49C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A748, (uint64_t)qword_10036A140, (uint64_t)sub_1000E9D44, a1);
}

uint64_t sub_1000EA4B8(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003566C0,  type metadata accessor for CLP_LogEntry_PrivateData_Battery,  (uint64_t)&unk_1002C3910);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000EA4F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003566C0,  type metadata accessor for CLP_LogEntry_PrivateData_Battery,  (uint64_t)&unk_1002C3910);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000EA548()
{
  return &unk_10033F0A8;
}

unint64_t sub_1000EA554()
{
  return 0xD000000000000025LL;
}

uint64_t sub_1000EA570()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A158);
  sub_10000E704(v0, (uint64_t)qword_10036A158);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v35 = swift_allocObject(v1, v6 + 13 * v4, v5 | 7);
  *(_OWORD *)(v35 + 16) = xmmword_1002B42B0;
  uint64_t v7 = v35 + v6;
  uint64_t v8 = v35 + v6 + *(int *)(v2 + 48);
  *(void *)(v35 + v6) = 1LL;
  *(void *)uint64_t v8 = "event_receipt_time";
  *(void *)(v8 + 8) = 18LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "client";
  *(void *)(v12 + 8) = 6LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  int v13 = (void *)(v7 + 2 * v4);
  unint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *int v13 = 3LL;
  *(void *)unint64_t v14 = "notification_data";
  *((void *)v14 + 1) = 17LL;
  v14[16] = 2;
  v11();
  char v15 = (void *)(v7 + 3 * v4);
  char v16 = (char *)v15 + *(int *)(v2 + 48);
  *char v15 = 4LL;
  *(void *)char v16 = "reachability";
  *((void *)v16 + 1) = 12LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v7 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "battery";
  *((void *)v18 + 1) = 7LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v7 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 6LL;
  *(void *)uint64_t v20 = "airplane_mode";
  *((void *)v20 + 1) = 13LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v7 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 7LL;
  *(void *)uint64_t v22 = "display_on";
  *((void *)v22 + 1) = 10LL;
  _BYTE v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v7 + 7 * v4);
  char v24 = (char *)v23 + *(int *)(v2 + 48);
  void *v23 = 8LL;
  *(void *)char v24 = "lock_screen";
  *((void *)v24 + 1) = 11LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 9LL;
  *(void *)uint64_t v25 = "is_battery_saver_mode_enabled";
  *(void *)(v25 + 8) = 29LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  double v26 = (void *)(v7 + 9 * v4);
  uint64_t v27 = (char *)v26 + *(int *)(v2 + 48);
  void *v26 = 10LL;
  *(void *)uint64_t v27 = "push_service_connected";
  *((void *)v27 + 1) = 22LL;
  v27[16] = 2;
  v11();
  uint64_t v28 = (void *)(v7 + 10 * v4);
  double v29 = (char *)v28 + *(int *)(v2 + 48);
  *uint64_t v28 = 11LL;
  *(void *)double v29 = "wireless_modem_clients";
  *((void *)v29 + 1) = 22LL;
  v29[16] = 2;
  v11();
  uint64_t v30 = (void *)(v7 + 11 * v4);
  uint64_t v31 = (char *)v30 + *(int *)(v2 + 48);
  void *v30 = 12LL;
  *(void *)uint64_t v31 = "thermal_level";
  *((void *)v31 + 1) = 13LL;
  v31[16] = 2;
  v11();
  double v32 = (void *)(v7 + 12 * v4);
  uint64_t v33 = (char *)v32 + *(int *)(v2 + 48);
  *double v32 = 13LL;
  *(void *)uint64_t v33 = "restricted_mode";
  *((void *)v33 + 1) = 15LL;
  v33[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v35);
}

uint64_t sub_1000EA918()
{
  return sub_100008C30(&qword_10037A750, (uint64_t)qword_10036A158, (uint64_t)sub_1000EA570);
}

uint64_t sub_1000EA934@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A750, (uint64_t)qword_10036A158, (uint64_t)sub_1000EA570, a1);
}

uint64_t sub_1000EA950()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0LL);
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 1LL, 1LL, v3);
  uint64_t v4 = v1
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)uint64_t v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData) = 20;
  uint64_t v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
  uint64_t v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))( v7,  1LL,  1LL,  v8);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode) = 2;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn) = 2;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen) = 2;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled) = 2;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected) = 2;
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients;
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel;
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode) = 2;
  qword_10037A760 = v1;
  return result;
}

uint64_t sub_1000EAABC()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_1000EAB24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v9)) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v3 + v9);
    uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0LL);
    uint64_t v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v13 = swift_retain(v10);
    sub_10010EBB4(v13);
    swift_release(v10);
    uint64_t v14 = *(void *)(v6 + v9);
    *(void *)(v6 + v9) = v12;
    swift_release(v14);
  }

  uint64_t v15 = *(void *)(v6 + v9);
  swift_retain(v15);
  uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1LL:
          uint64_t v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  v32,  33LL,  0LL);
          uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
          uint64_t v21 = (unint64_t *)&qword_1003552B8;
          uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          uint64_t v23 = &unk_1002BF798;
          goto LABEL_12;
        case 2LL:
          uint64_t v24 = OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
          goto LABEL_20;
        case 3LL:
          uint64_t v25 = v15
              + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData,  v32,  33LL,  0LL);
          unint64_t v26 = sub_100149E6C();
          uint64_t v27 = v5;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v25,  &type metadata for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType,  v26,  a2,  a3);
          goto LABEL_23;
        case 4LL:
          uint64_t v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability,  v32,  33LL,  0LL);
          uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0LL);
          uint64_t v21 = &qword_1003566A8;
          uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState;
          uint64_t v23 = &unk_1002C37A8;
          goto LABEL_12;
        case 5LL:
          uint64_t v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery,  v32,  33LL,  0LL);
          uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL);
          uint64_t v21 = &qword_1003566C0;
          uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_Battery;
          uint64_t v23 = &unk_1002C3910;
LABEL_12:
          uint64_t v28 = sub_10000FD98(v21, v22, (uint64_t)v23);
          uint64_t v27 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v19, v20, v28, a2, a3);
          goto LABEL_23;
        case 6LL:
          uint64_t v29 = OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode;
          goto LABEL_22;
        case 7LL:
          uint64_t v29 = OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn;
          goto LABEL_22;
        case 8LL:
          uint64_t v29 = OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen;
          goto LABEL_22;
        case 9LL:
          uint64_t v29 = OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled;
          goto LABEL_22;
        case 10LL:
          uint64_t v29 = OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected;
          goto LABEL_22;
        case 11LL:
          uint64_t v24 = OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients;
          goto LABEL_20;
        case 12LL:
          uint64_t v24 = OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel;
LABEL_20:
          uint64_t v30 = v15 + v24;
          swift_beginAccess(v15 + v24, v32, 33LL, 0LL);
          uint64_t v27 = v5;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v30, a2, a3);
          goto LABEL_23;
        case 13LL:
          uint64_t v29 = OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode;
LABEL_22:
          uint64_t v31 = v15 + v29;
          swift_beginAccess(v15 + v29, v32, 33LL, 0LL);
          uint64_t v27 = v5;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v31, a2, a3);
LABEL_23:
          uint64_t v5 = v27;
          swift_endAccess(v32);
          break;
        default:
          break;
      }

      uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return swift_release(v15);
}

uint64_t sub_1000EAE6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0LL) + 20));
  uint64_t v10 = swift_retain(v9);
  sub_1000EB260(v10, a1, a2, a3);
  if (v4) {
    return swift_release(v9);
  }
  uint64_t v12 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client,  &v29,  0LL,  0LL);
  if ((v12[1] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v12, 2LL, a2, a3);
  }
  uint64_t v13 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData,  v30,  0LL,  0LL);
  if (*v13 != 20)
  {
    v38[0] = *v13;
    unint64_t v14 = sub_100149E6C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v38,  3LL,  &type metadata for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType,  v14,  a2,  a3);
  }

  sub_1000EB3EC(v9, a1, a2, a3);
  sub_1000EB578(v9, a1, a2, a3);
  uint64_t v15 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode,  v38,  0LL,  0LL);
  int v16 = *v15;
  if (v16 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v16 & 1, 6LL, a2, a3);
  }
  char v17 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn,  v37,  0LL,  0LL);
  int v18 = *v17;
  if (v18 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v18 & 1, 7LL, a2, a3);
  }
  uint64_t v19 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen,  v36,  0LL,  0LL);
  int v20 = *v19;
  if (v20 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v20 & 1, 8LL, a2, a3);
  }
  uint64_t v21 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled,  v35,  0LL,  0LL);
  int v22 = *v21;
  if (v22 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v22 & 1, 9LL, a2, a3);
  }
  uint64_t v23 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected,  v34,  0LL,  0LL);
  int v24 = *v23;
  if (v24 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v24 & 1, 10LL, a2, a3);
  }
  uint64_t v25 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients,  v33,  0LL,  0LL);
  if ((v25[1] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v25, 11LL, a2, a3);
  }
  unint64_t v26 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel,  v32,  0LL,  0LL);
  if ((v26[1] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v26, 12LL, a2, a3);
  }
  uint64_t v27 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode,  v31,  0LL,  0LL);
  int v28 = *v27;
  if (v28 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v28 & 1, 13LL, a2, a3);
  }
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000EB260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355538);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v15 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000EB3EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003555D8);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_1003555D8);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  uint64_t v15 = sub_10000FD98( &qword_1003566A8,  type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState,  (uint64_t)&unk_1002C37A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t sub_1000EB578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003555E0);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_1003555E0);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  uint64_t v15 = sub_10000FD98( &qword_1003566C0,  type metadata accessor for CLP_LogEntry_PrivateData_Battery,  (uint64_t)&unk_1002C3910);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 5LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t sub_1000EB704(uint64_t a1, uint64_t a2)
{
  return sub_100065AC0(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, sub_1000EB72C) & 1;
}

uint64_t sub_1000EB72C(uint64_t a1, uint64_t a2)
{
  uint64_t v124 = a2;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL);
  uint64_t v111 = *(void *)(v3 - 8);
  uint64_t v112 = v3;
  __chkstk_darwin(v3);
  uint64_t v108 = (uint64_t)&v108 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v110 = sub_100003A0C(&qword_10035C4A8);
  __chkstk_darwin(v110);
  uint64_t v113 = (uint64_t)&v108 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100003A0C(&qword_1003555E0);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v121 = (char *)&v108 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v114 = (uint64_t)&v108 - v9;
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0LL);
  uint64_t v116 = *(void *)(v10 - 8);
  uint64_t v117 = v10;
  __chkstk_darwin(v10);
  uint64_t v109 = (uint64_t)&v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v115 = sub_100003A0C(&qword_10035C4B0);
  __chkstk_darwin(v115);
  uint64_t v118 = (uint64_t)&v108 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100003A0C(&qword_1003555D8);
  uint64_t v14 = __chkstk_darwin(v13);
  char v120 = (char *)&v108 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v122 = (uint64_t)&v108 - v16;
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v119 = (uint64_t)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_100003A0C(&qword_10035C418);
  __chkstk_darwin(v20);
  int v22 = (char *)&v108 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = sub_100003A0C(&qword_100355538);
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v123 = (uint64_t)&v108 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v108 - v26;
  uint64_t v28 = a1;
  uint64_t v29 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v29, v150, 0LL, 0LL);
  sub_10000E6C0(v29, (uint64_t)v27, &qword_100355538);
  uint64_t v30 = v124;
  uint64_t v31 = v124
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess( v124 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  v149,  0LL,  0LL);
  uint64_t v32 = (uint64_t)&v22[*(int *)(v20 + 48)];
  sub_10000E6C0((uint64_t)v27, (uint64_t)v22, &qword_100355538);
  sub_10000E6C0(v31, v32, &qword_100355538);
  uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  if (v33((uint64_t)v22, 1LL, v17) == 1)
  {
    swift_retain(v28);
    swift_retain(v30);
    sub_100015764((uint64_t)v27, &qword_100355538);
    int v34 = v33(v32, 1LL, v17);
    uint64_t v35 = v30;
    uint64_t v36 = v28;
    if (v34 == 1)
    {
      sub_100015764((uint64_t)v22, &qword_100355538);
      goto LABEL_11;
    }

LABEL_26:
    double v38 = &qword_10035C4B0;
LABEL_34:
    uint64_t v39 = v59;
    goto LABEL_7;
  }

  sub_10000E6C0(v59, v48, &qword_1003555D8);
  if (v60(v57, 1LL, v62) == 1)
  {
    sub_100015764(v122, &qword_1003555D8);
    sub_100004090(v48, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
    goto LABEL_26;
  }

  uint64_t v63 = v109;
  sub_100003E68(v57, v109, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  char v64 = sub_100117B94(v48, v63);
  sub_100004090(v63, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  sub_100015764(v122, &qword_1003555D8);
  sub_100004090(v48, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  sub_100015764(v59, &qword_1003555D8);
  if ((v64 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_28:
  uint64_t v65 = v36
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess( v36 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery,  &v142,  0LL,  0LL);
  uint64_t v66 = v114;
  sub_10000E6C0(v65, v114, &qword_1003555E0);
  uint64_t v67 = v35
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess( v35 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery,  &v141,  0LL,  0LL);
  uint64_t v68 = v113;
  uint64_t v69 = v113 + *(int *)(v110 + 48);
  sub_10000E6C0(v66, v113, &qword_1003555E0);
  uint64_t v70 = v67;
  uint64_t v59 = v68;
  sub_10000E6C0(v70, v69, &qword_1003555E0);
  int v71 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + 48);
  uint64_t v72 = v68;
  uint64_t v73 = v112;
  if (v71(v72, 1LL, v112) == 1)
  {
    sub_100015764(v66, &qword_1003555E0);
    if (v71(v69, 1LL, v73) == 1)
    {
      sub_100015764(v59, &qword_1003555E0);
      goto LABEL_36;
    }

    goto LABEL_33;
  }

  sub_10000E6C0(v59, v47, &qword_1003555E0);
  if (v71(v69, 1LL, v73) == 1)
  {
    sub_100015764(v114, &qword_1003555E0);
    sub_100004090(v47, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
LABEL_33:
    double v38 = &qword_10035C4A8;
    goto LABEL_34;
  }

  uint64_t v74 = v108;
  sub_100003E68(v69, v108, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  char v75 = sub_10011C404(v47, v74);
  sub_100004090(v74, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  sub_100015764(v114, &qword_1003555E0);
  sub_100004090(v47, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  sub_100015764(v59, &qword_1003555E0);
  if ((v75 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_36:
  uint64_t v76 = (unsigned __int8 *)(v36
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  swift_beginAccess( v36 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode,  &v140,  0LL,  0LL);
  int v77 = *v76;
  uint64_t v78 = (unsigned __int8 *)(v35
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  swift_beginAccess( v35 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode,  &v139,  0LL,  0LL);
  int v79 = *v78;
  if (v77 == 2)
  {
    if (v79 != 2) {
      goto LABEL_8;
    }
  }

  else if (v79 == 2 || ((((v79 & 1) == 0) ^ v77) & 1) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v80 = (unsigned __int8 *)(v36
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  swift_beginAccess( v36 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn,  &v138,  0LL,  0LL);
  int v81 = *v80;
  uint64_t v82 = (unsigned __int8 *)(v35
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  swift_beginAccess( v35 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn,  &v137,  0LL,  0LL);
  int v83 = *v82;
  if (v81 == 2)
  {
    if (v83 != 2) {
      goto LABEL_8;
    }
  }

  else if (v83 == 2 || ((((v83 & 1) == 0) ^ v81) & 1) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v84 = (unsigned __int8 *)(v36
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  swift_beginAccess( v36 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen,  &v136,  0LL,  0LL);
  int v85 = *v84;
  uint64_t v86 = (unsigned __int8 *)(v35
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  swift_beginAccess( v35 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen,  &v135,  0LL,  0LL);
  int v87 = *v86;
  if (v85 == 2)
  {
    if (v87 != 2) {
      goto LABEL_8;
    }
  }

  else if (v87 == 2 || ((((v87 & 1) == 0) ^ v85) & 1) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v88 = (unsigned __int8 *)(v36
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  swift_beginAccess( v36 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled,  &v134,  0LL,  0LL);
  int v89 = *v88;
  uint64_t v90 = (unsigned __int8 *)(v35
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  swift_beginAccess( v35 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled,  &v133,  0LL,  0LL);
  int v91 = *v90;
  if (v89 == 2)
  {
    if (v91 != 2) {
      goto LABEL_8;
    }
  }

  else if (v91 == 2 || ((((v91 & 1) == 0) ^ v89) & 1) == 0)
  {
    goto LABEL_8;
  }

  uint64_t v92 = (unsigned __int8 *)(v36
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  swift_beginAccess( v36 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected,  &v132,  0LL,  0LL);
  int v93 = *v92;
  uint64_t v94 = (unsigned __int8 *)(v35
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  swift_beginAccess( v35 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected,  &v131,  0LL,  0LL);
  int v95 = *v94;
  if (v93 == 2)
  {
    if (v95 == 2) {
      goto LABEL_61;
    }
LABEL_8:
    swift_release(v36);
    swift_release(v35);
    return 0LL;
  }

  if (v95 == 2 || ((((v95 & 1) == 0) ^ v93) & 1) == 0) {
    goto LABEL_8;
  }
LABEL_61:
  uint64_t v96 = (int *)(v36
              + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients);
  swift_beginAccess( v36 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients,  &v130,  0LL,  0LL);
  int v97 = *v96;
  char v98 = *((_BYTE *)v96 + 4);
  uint64_t v99 = v35
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients;
  swift_beginAccess( v35 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients,  &v129,  0LL,  0LL);
  if ((v98 & 1) != 0)
  {
    if ((*(_BYTE *)(v99 + 4) & 1) == 0) {
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(v99 + 4) & 1) != 0 || v97 != *(_DWORD *)v99)
  {
    goto LABEL_8;
  }

  uint64_t v100 = (int *)(v36
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel);
  swift_beginAccess( v36 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel,  &v128,  0LL,  0LL);
  int v101 = *v100;
  char v102 = *((_BYTE *)v100 + 4);
  uint64_t v103 = v35
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel;
  swift_beginAccess( v35 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel,  &v127,  0LL,  0LL);
  if ((v102 & 1) != 0)
  {
    if ((*(_BYTE *)(v103 + 4) & 1) == 0) {
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(v103 + 4) & 1) != 0 || v101 != *(_DWORD *)v103)
  {
    goto LABEL_8;
  }

  char v104 = (unsigned __int8 *)(v36
                           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  swift_beginAccess( v36 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode,  &v126,  0LL,  0LL);
  int v105 = *v104;
  swift_release(v36);
  uint64_t v106 = (unsigned __int8 *)(v35
                           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  swift_beginAccess( v35 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode,  &v125,  0LL,  0LL);
  int v107 = *v106;
  swift_release(v35);
  if (v105 == 2)
  {
    if (v107 != 2) {
      return 0LL;
    }
  }

  else if (v107 == 2 || ((((v107 & 1) == 0) ^ v105) & 1) == 0)
  {
    return 0LL;
  }

  return 1LL;
}

  uint64_t v30 = 0;
  return v30 & 1;
}

  char v98 = *(int *)(v12 + 24);
  uint64_t v99 = v10 + v98;
  uint64_t v100 = &v11[v98];
  int v101 = (int *)type metadata accessor for Proto_Gnss_Emergency_CtsCdmaCellTime(0LL);
  char v102 = *((void *)v101 - 1);
  uint64_t v103 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v102 + 48);
  char v104 = v103(v99, 1LL, v101);
  int v105 = v103((uint64_t)v100, 1LL, v101);
  if (!v104)
  {
    if (v105)
    {
      sub_100004090(v99, type metadata accessor for Proto_Gnss_Emergency_CtsCdmaCellTime);
      goto LABEL_32;
    }

    __dst((char *)v99, v100, v6);
    uint64_t v112 = v101[5];
    uint64_t v113 = (char *)(v99 + v112);
    uint64_t v114 = &v100[v112];
    uint64_t v115 = type metadata accessor for Proto_Gnss_Emergency_GpsTowCdmaCellTime(0LL);
    char v163 = *(void *)(v115 - 8);
    uint64_t v116 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v163 + 48);
    uint64_t v170 = v113;
    LODWORD(v113) = v116(v113, 1LL, v115);
    uint64_t v117 = v116(v114, 1LL, v115);
    if ((_DWORD)v113)
    {
      if (!v117)
      {
        (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v170, v114, v6);
        uint64_t v136 = *(int *)(v115 + 20);
        uint64_t v137 = &v170[v136];
        uint64_t v138 = &v114[v136];
        uint64_t v139 = v138[4];
        *(_DWORD *)uint64_t v137 = *(_DWORD *)v138;
        v137[4] = v139;
        uint64_t v140 = *(int *)(v115 + 24);
        uint64_t v141 = &v170[v140];
        uint64_t v142 = &v114[v140];
        uint64_t v143 = v142[4];
        *(_DWORD *)uint64_t v141 = *(_DWORD *)v142;
        v141[4] = v143;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v163 + 56))(v170, 0LL, 1LL, v115);
        goto LABEL_43;
      }

      uint64_t v118 = *(void *)(*(void *)(sub_100003A0C(&qword_10035C7A8) - 8) + 64LL);
      uint64_t v119 = v170;
    }

    else
    {
      if (!v117)
      {
        __dst(v170, v114, v6);
        uint64_t v144 = *(int *)(v115 + 20);
        uint64_t v145 = &v170[v144];
        char v146 = &v114[v144];
        uint64_t v147 = v146[4];
        *(_DWORD *)uint64_t v145 = *(_DWORD *)v146;
        v145[4] = v147;
        uint64_t v148 = *(int *)(v115 + 24);
        uint64_t v149 = &v170[v148];
        uint64_t v150 = &v114[v148];
        char v151 = v150[4];
        *(_DWORD *)uint64_t v149 = *(_DWORD *)v150;
        v149[4] = v151;
        goto LABEL_43;
      }

      sub_100004090((uint64_t)v170, type metadata accessor for Proto_Gnss_Emergency_GpsTowCdmaCellTime);
      uint64_t v118 = *(void *)(*(void *)(sub_100003A0C(&qword_10035C7A8) - 8) + 64LL);
      uint64_t v119 = v170;
    }

    memcpy(v119, v114, v118);
LABEL_43:
    uint64_t v152 = v101[6];
    uint64_t v153 = v99 + v152;
    char v154 = &v100[v152];
    uint64_t v155 = *(_DWORD *)v154;
    *(_BYTE *)(v153 + 4) = v154[4];
    *(_DWORD *)uint64_t v153 = v155;
    uint64_t v156 = v101[7];
    uint64_t v157 = v99 + v156;
    uint64_t v158 = &v100[v156];
    uint64_t v159 = *(_DWORD *)v158;
    *(_BYTE *)(v157 + 4) = v158[4];
    *(_DWORD *)uint64_t v157 = v159;
    return a1;
  }

  if (v105)
  {
LABEL_32:
    uint64_t v24 = *(void *)(*(void *)(sub_100003A0C(&qword_10035C7B8) - 8) + 64LL);
    uint64_t v25 = (void *)v99;
    uint64_t v26 = v100;
    goto LABEL_8;
  }

  uint64_t v106 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 16);
  v106(v99, v100, v6);
  int v107 = v101[5];
  uint64_t v169 = (char *)(v99 + v107);
  uint64_t v108 = &v100[v107];
  uint64_t v109 = type metadata accessor for Proto_Gnss_Emergency_GpsTowCdmaCellTime(0LL);
  uint64_t v110 = *(void *)(v109 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48))(v108, 1LL, v109))
  {
    uint64_t v111 = sub_100003A0C(&qword_10035C7A8);
    memcpy(v169, v108, *(void *)(*(void *)(v111 - 8) + 64LL));
  }

  else
  {
    v106((uint64_t)v169, v108, v6);
    char v120 = *(int *)(v109 + 20);
    uint64_t v121 = &v169[v120];
    uint64_t v122 = &v108[v120];
    uint64_t v123 = v122[4];
    *(_DWORD *)uint64_t v121 = *(_DWORD *)v122;
    v121[4] = v123;
    uint64_t v124 = *(int *)(v109 + 24);
    uint64_t v125 = &v169[v124];
    uint64_t v126 = &v108[v124];
    uint64_t v127 = v126[4];
    *(_DWORD *)uint64_t v125 = *(_DWORD *)v126;
    v125[4] = v127;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v110 + 56))(v169, 0LL, 1LL, v109);
  }

  uint64_t v128 = v101[6];
  uint64_t v129 = v99 + v128;
  uint64_t v130 = &v100[v128];
  uint64_t v131 = *(_DWORD *)v130;
  *(_BYTE *)(v129 + 4) = v130[4];
  *(_DWORD *)uint64_t v129 = v131;
  uint64_t v132 = v101[7];
  uint64_t v133 = v99 + v132;
  uint64_t v134 = &v100[v132];
  uint64_t v135 = *(_DWORD *)v134;
  *(_BYTE *)(v133 + 4) = v134[4];
  *(_DWORD *)uint64_t v133 = v135;
  (*(void (**)(uint64_t, void, uint64_t, int *))(v102 + 56))(v99, 0LL, 1LL, v101);
  return a1;
}

  int v85 = *(int *)(v12 + 24);
  uint64_t v86 = v10 + v85;
  int v87 = &v11[v85];
  uint64_t v88 = (int *)type metadata accessor for Proto_Gnss_Emergency_CtsCdmaCellTime(0LL);
  int v89 = *((void *)v88 - 1);
  uint64_t v90 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v89 + 48);
  int v91 = v90(v86, 1LL, v88);
  uint64_t v92 = v90((uint64_t)v87, 1LL, v88);
  if (!v91)
  {
    if (v92)
    {
      sub_100004090(v86, type metadata accessor for Proto_Gnss_Emergency_CtsCdmaCellTime);
      goto LABEL_32;
    }

    __dst((char *)v86, v87, v6);
    uint64_t v99 = v88[5];
    uint64_t v100 = (char *)(v86 + v99);
    int v101 = &v87[v99];
    char v102 = type metadata accessor for Proto_Gnss_Emergency_GpsTowCdmaCellTime(0LL);
    uint64_t v140 = *(void *)(v102 - 8);
    uint64_t v103 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v140 + 48);
    uint64_t v147 = v100;
    LODWORD(v100) = v103(v100, 1LL, v102);
    char v104 = v103(v101, 1LL, v102);
    if ((_DWORD)v100)
    {
      if (!v104)
      {
        (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v147, v101, v6);
        uint64_t v119 = *(int *)(v102 + 20);
        char v120 = &v147[v119];
        uint64_t v121 = &v101[v119];
        *(_DWORD *)char v120 = *(_DWORD *)v121;
        v120[4] = v121[4];
        uint64_t v122 = *(int *)(v102 + 24);
        uint64_t v123 = &v147[v122];
        uint64_t v124 = &v101[v122];
        *(_DWORD *)uint64_t v123 = *(_DWORD *)v124;
        v123[4] = v124[4];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v140 + 56))(v147, 0LL, 1LL, v102);
        goto LABEL_43;
      }

      int v105 = *(void *)(*(void *)(sub_100003A0C(&qword_10035C7A8) - 8) + 64LL);
      uint64_t v106 = v147;
    }

    else
    {
      if (!v104)
      {
        __dst(v147, v101, v6);
        uint64_t v125 = *(int *)(v102 + 20);
        uint64_t v126 = &v147[v125];
        uint64_t v127 = &v101[v125];
        *(_DWORD *)uint64_t v126 = *(_DWORD *)v127;
        v126[4] = v127[4];
        uint64_t v128 = *(int *)(v102 + 24);
        uint64_t v129 = &v147[v128];
        uint64_t v130 = &v101[v128];
        *(_DWORD *)uint64_t v129 = *(_DWORD *)v130;
        v129[4] = v130[4];
        goto LABEL_43;
      }

      sub_100004090((uint64_t)v147, type metadata accessor for Proto_Gnss_Emergency_GpsTowCdmaCellTime);
      int v105 = *(void *)(*(void *)(sub_100003A0C(&qword_10035C7A8) - 8) + 64LL);
      uint64_t v106 = v147;
    }

    memcpy(v106, v101, v105);
LABEL_43:
    uint64_t v131 = v88[6];
    uint64_t v132 = v86 + v131;
    uint64_t v133 = &v87[v131];
    *(_DWORD *)uint64_t v132 = *(_DWORD *)v133;
    *(_BYTE *)(v132 + 4) = v133[4];
    uint64_t v134 = v88[7];
    uint64_t v135 = v86 + v134;
    uint64_t v136 = &v87[v134];
    *(_BYTE *)(v135 + 4) = v136[4];
    *(_DWORD *)uint64_t v135 = *(_DWORD *)v136;
    return a1;
  }

  if (v92)
  {
LABEL_32:
    uint64_t v24 = *(void *)(*(void *)(sub_100003A0C(&qword_10035C7B8) - 8) + 64LL);
    uint64_t v25 = (void *)v86;
    uint64_t v26 = v87;
    goto LABEL_8;
  }

  int v93 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
  v93(v86, v87, v6);
  uint64_t v94 = v88[5];
  char v146 = (char *)(v86 + v94);
  int v95 = &v87[v94];
  uint64_t v96 = type metadata accessor for Proto_Gnss_Emergency_GpsTowCdmaCellTime(0LL);
  int v97 = *(void *)(v96 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v95, 1LL, v96))
  {
    char v98 = sub_100003A0C(&qword_10035C7A8);
    memcpy(v146, v95, *(void *)(*(void *)(v98 - 8) + 64LL));
  }

  else
  {
    v93((uint64_t)v146, v95, v6);
    int v107 = *(int *)(v96 + 20);
    uint64_t v108 = &v146[v107];
    uint64_t v109 = &v95[v107];
    *(_DWORD *)uint64_t v108 = *(_DWORD *)v109;
    v108[4] = v109[4];
    uint64_t v110 = *(int *)(v96 + 24);
    uint64_t v111 = &v146[v110];
    uint64_t v112 = &v95[v110];
    *(_DWORD *)uint64_t v111 = *(_DWORD *)v112;
    v111[4] = v112[4];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v97 + 56))(v146, 0LL, 1LL, v96);
  }

  uint64_t v113 = v88[6];
  uint64_t v114 = v86 + v113;
  uint64_t v115 = &v87[v113];
  *(_DWORD *)uint64_t v114 = *(_DWORD *)v115;
  *(_BYTE *)(v114 + 4) = v115[4];
  uint64_t v116 = v88[7];
  uint64_t v117 = v86 + v116;
  uint64_t v118 = &v87[v116];
  *(_BYTE *)(v117 + 4) = v118[4];
  *(_DWORD *)uint64_t v117 = *(_DWORD *)v118;
  (*(void (**)(uint64_t, void, uint64_t, int *))(v89 + 56))(v86, 0LL, 1LL, v88);
  return a1;
}

  char v98 = *(int *)(v12 + 24);
  uint64_t v99 = v10 + v98;
  uint64_t v100 = &v11[v98];
  int v101 = (int *)type metadata accessor for Proto_Gnss_Emergency_CtsCdmaCellTime(0LL);
  char v102 = *((void *)v101 - 1);
  uint64_t v103 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v102 + 48);
  char v104 = v103(v99, 1LL, v101);
  int v105 = v103((uint64_t)v100, 1LL, v101);
  if (!v104)
  {
    if (v105)
    {
      sub_100004090(v99, type metadata accessor for Proto_Gnss_Emergency_CtsCdmaCellTime);
      goto LABEL_32;
    }

    __dst((char *)v99, v100, v6);
    uint64_t v112 = v101[5];
    uint64_t v113 = (char *)(v99 + v112);
    uint64_t v114 = &v100[v112];
    uint64_t v115 = type metadata accessor for Proto_Gnss_Emergency_GpsTowCdmaCellTime(0LL);
    char v163 = *(void *)(v115 - 8);
    uint64_t v116 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v163 + 48);
    uint64_t v170 = v113;
    LODWORD(v113) = v116(v113, 1LL, v115);
    uint64_t v117 = v116(v114, 1LL, v115);
    if ((_DWORD)v113)
    {
      if (!v117)
      {
        (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v170, v114, v6);
        uint64_t v136 = *(int *)(v115 + 20);
        uint64_t v137 = &v170[v136];
        uint64_t v138 = &v114[v136];
        uint64_t v139 = v138[4];
        *(_DWORD *)uint64_t v137 = *(_DWORD *)v138;
        v137[4] = v139;
        uint64_t v140 = *(int *)(v115 + 24);
        uint64_t v141 = &v170[v140];
        uint64_t v142 = &v114[v140];
        uint64_t v143 = v142[4];
        *(_DWORD *)uint64_t v141 = *(_DWORD *)v142;
        v141[4] = v143;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v163 + 56))(v170, 0LL, 1LL, v115);
        goto LABEL_43;
      }

      uint64_t v118 = *(void *)(*(void *)(sub_100003A0C(&qword_10035C7A8) - 8) + 64LL);
      uint64_t v119 = v170;
    }

    else
    {
      if (!v117)
      {
        __dst(v170, v114, v6);
        uint64_t v144 = *(int *)(v115 + 20);
        uint64_t v145 = &v170[v144];
        char v146 = &v114[v144];
        uint64_t v147 = v146[4];
        *(_DWORD *)uint64_t v145 = *(_DWORD *)v146;
        v145[4] = v147;
        uint64_t v148 = *(int *)(v115 + 24);
        uint64_t v149 = &v170[v148];
        uint64_t v150 = &v114[v148];
        char v151 = v150[4];
        *(_DWORD *)uint64_t v149 = *(_DWORD *)v150;
        v149[4] = v151;
        goto LABEL_43;
      }

      sub_100004090((uint64_t)v170, type metadata accessor for Proto_Gnss_Emergency_GpsTowCdmaCellTime);
      uint64_t v118 = *(void *)(*(void *)(sub_100003A0C(&qword_10035C7A8) - 8) + 64LL);
      uint64_t v119 = v170;
    }

    memcpy(v119, v114, v118);
LABEL_43:
    uint64_t v152 = v101[6];
    uint64_t v153 = v99 + v152;
    char v154 = &v100[v152];
    uint64_t v155 = *(_DWORD *)v154;
    *(_BYTE *)(v153 + 4) = v154[4];
    *(_DWORD *)uint64_t v153 = v155;
    uint64_t v156 = v101[7];
    uint64_t v157 = v99 + v156;
    uint64_t v158 = &v100[v156];
    uint64_t v159 = *(_DWORD *)v158;
    *(_BYTE *)(v157 + 4) = v158[4];
    *(_DWORD *)uint64_t v157 = v159;
    return a1;
  }

  if (v105)
  {
LABEL_32:
    uint64_t v24 = *(void *)(*(void *)(sub_100003A0C(&qword_10035C7B8) - 8) + 64LL);
    uint64_t v25 = (void *)v99;
    uint64_t v26 = v100;
    goto LABEL_8;
  }

  uint64_t v106 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 16);
  v106(v99, v100, v6);
  int v107 = v101[5];
  uint64_t v169 = (char *)(v99 + v107);
  uint64_t v108 = &v100[v107];
  uint64_t v109 = type metadata accessor for Proto_Gnss_Emergency_GpsTowCdmaCellTime(0LL);
  uint64_t v110 = *(void *)(v109 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48))(v108, 1LL, v109))
  {
    uint64_t v111 = sub_100003A0C(&qword_10035C7A8);
    memcpy(v169, v108, *(void *)(*(void *)(v111 - 8) + 64LL));
  }

  else
  {
    v106((uint64_t)v169, v108, v6);
    char v120 = *(int *)(v109 + 20);
    uint64_t v121 = &v169[v120];
    uint64_t v122 = &v108[v120];
    uint64_t v123 = v122[4];
    *(_DWORD *)uint64_t v121 = *(_DWORD *)v122;
    v121[4] = v123;
    uint64_t v124 = *(int *)(v109 + 24);
    uint64_t v125 = &v169[v124];
    uint64_t v126 = &v108[v124];
    uint64_t v127 = v126[4];
    *(_DWORD *)uint64_t v125 = *(_DWORD *)v126;
    v125[4] = v127;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v110 + 56))(v169, 0LL, 1LL, v109);
  }

  uint64_t v128 = v101[6];
  uint64_t v129 = v99 + v128;
  uint64_t v130 = &v100[v128];
  uint64_t v131 = *(_DWORD *)v130;
  *(_BYTE *)(v129 + 4) = v130[4];
  *(_DWORD *)uint64_t v129 = v131;
  uint64_t v132 = v101[7];
  uint64_t v133 = v99 + v132;
  uint64_t v134 = &v100[v132];
  uint64_t v135 = *(_DWORD *)v134;
  *(_BYTE *)(v133 + 4) = v134[4];
  *(_DWORD *)uint64_t v133 = v135;
  (*(void (**)(uint64_t, void, uint64_t, int *))(v102 + 56))(v99, 0LL, 1LL, v101);
  return a1;
}

  uint64_t v86 = *(int *)(v13 + 24);
  int v87 = v11 + v86;
  uint64_t v88 = &v12[v86];
  int v89 = (int *)type metadata accessor for Proto_Gnss_Emergency_CtsCdmaCellTime(0LL);
  uint64_t v90 = *((void *)v89 - 1);
  int v91 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v90 + 48);
  uint64_t v92 = v91(v87, 1LL, v89);
  int v93 = v91((uint64_t)v88, 1LL, v89);
  if (!v92)
  {
    if (v93)
    {
      sub_100004090(v87, type metadata accessor for Proto_Gnss_Emergency_CtsCdmaCellTime);
      goto LABEL_32;
    }

    __dst((char *)v87, v88, v6);
    uint64_t v100 = v89[5];
    int v101 = (char *)(v87 + v100);
    char v102 = &v88[v100];
    uint64_t v103 = type metadata accessor for Proto_Gnss_Emergency_GpsTowCdmaCellTime(0LL);
    uint64_t v141 = *(void *)(v103 - 8);
    char v104 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v141 + 48);
    uint64_t v148 = v101;
    LODWORD(v101) = v104(v101, 1LL, v103);
    int v105 = v104(v102, 1LL, v103);
    if ((_DWORD)v101)
    {
      if (!v105)
      {
        (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v148, v102, v6);
        char v120 = *(int *)(v103 + 20);
        uint64_t v121 = &v148[v120];
        uint64_t v122 = &v102[v120];
        *(_DWORD *)uint64_t v121 = *(_DWORD *)v122;
        v121[4] = v122[4];
        uint64_t v123 = *(int *)(v103 + 24);
        uint64_t v124 = &v148[v123];
        uint64_t v125 = &v102[v123];
        *(_DWORD *)uint64_t v124 = *(_DWORD *)v125;
        v124[4] = v125[4];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v141 + 56))(v148, 0LL, 1LL, v103);
        goto LABEL_43;
      }

      uint64_t v106 = *(void *)(*(void *)(sub_100003A0C(&qword_10035C7A8) - 8) + 64LL);
      int v107 = v148;
    }

    else
    {
      if (!v105)
      {
        __dst(v148, v102, v6);
        uint64_t v126 = *(int *)(v103 + 20);
        uint64_t v127 = &v148[v126];
        uint64_t v128 = &v102[v126];
        *(_DWORD *)uint64_t v127 = *(_DWORD *)v128;
        v127[4] = v128[4];
        uint64_t v129 = *(int *)(v103 + 24);
        uint64_t v130 = &v148[v129];
        uint64_t v131 = &v102[v129];
        *(_DWORD *)uint64_t v130 = *(_DWORD *)v131;
        v130[4] = v131[4];
        goto LABEL_43;
      }

      sub_100004090((uint64_t)v148, type metadata accessor for Proto_Gnss_Emergency_GpsTowCdmaCellTime);
      uint64_t v106 = *(void *)(*(void *)(sub_100003A0C(&qword_10035C7A8) - 8) + 64LL);
      int v107 = v148;
    }

    memcpy(v107, v102, v106);
LABEL_43:
    uint64_t v132 = v89[6];
    uint64_t v133 = v87 + v132;
    uint64_t v134 = &v88[v132];
    *(_DWORD *)uint64_t v133 = *(_DWORD *)v134;
    *(_BYTE *)(v133 + 4) = v134[4];
    uint64_t v135 = v89[7];
    uint64_t v136 = v87 + v135;
    uint64_t v137 = &v88[v135];
    *(_BYTE *)(v136 + 4) = v137[4];
    *(_DWORD *)uint64_t v136 = *(_DWORD *)v137;
    return a1;
  }

  if (v93)
  {
LABEL_32:
    uint64_t v25 = *(void *)(*(void *)(sub_100003A0C(&qword_10035C7B8) - 8) + 64LL);
    uint64_t v26 = (void *)v87;
    uint64_t v27 = v88;
    goto LABEL_8;
  }

  uint64_t v94 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
  v94(v87, v88, v6);
  int v95 = v89[5];
  uint64_t v147 = (char *)(v87 + v95);
  uint64_t v96 = &v88[v95];
  int v97 = type metadata accessor for Proto_Gnss_Emergency_GpsTowCdmaCellTime(0LL);
  char v98 = *(void *)(v97 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v96, 1LL, v97))
  {
    uint64_t v99 = sub_100003A0C(&qword_10035C7A8);
    memcpy(v147, v96, *(void *)(*(void *)(v99 - 8) + 64LL));
  }

  else
  {
    v94((uint64_t)v147, v96, v6);
    uint64_t v108 = *(int *)(v97 + 20);
    uint64_t v109 = &v147[v108];
    uint64_t v110 = &v96[v108];
    *(_DWORD *)uint64_t v109 = *(_DWORD *)v110;
    v109[4] = v110[4];
    uint64_t v111 = *(int *)(v97 + 24);
    uint64_t v112 = &v147[v111];
    uint64_t v113 = &v96[v111];
    *(_DWORD *)uint64_t v112 = *(_DWORD *)v113;
    v112[4] = v113[4];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v98 + 56))(v147, 0LL, 1LL, v97);
  }

  uint64_t v114 = v89[6];
  uint64_t v115 = v87 + v114;
  uint64_t v116 = &v88[v114];
  *(_DWORD *)uint64_t v115 = *(_DWORD *)v116;
  *(_BYTE *)(v115 + 4) = v116[4];
  uint64_t v117 = v89[7];
  uint64_t v118 = v87 + v117;
  uint64_t v119 = &v88[v117];
  *(_BYTE *)(v118 + 4) = v119[4];
  *(_DWORD *)uint64_t v118 = *(_DWORD *)v119;
  (*(void (**)(uint64_t, void, uint64_t, int *))(v90 + 56))(v87, 0LL, 1LL, v89);
  return a1;
}

  uint64_t v36 = v22;
  uint64_t v37 = (v21 - 1) & v21;
  for (uint64_t i = __clz(__rbit64(v21)) + (v22 << 6); ; uint64_t i = __clz(__rbit64(v6)) | (v36 << 6))
  {
    uint64_t v24 = (uint64_t *)(*(void *)(v1 + 48) + 16 * i);
    uint64_t v26 = *v24;
    uint64_t v25 = v24[1];
    sub_10001884C(*(void *)(v1 + 56) + 32 * i, (uint64_t)v7);
    *(void *)&char v42 = v26;
    *((void *)&v42 + 1) = v25;
    uint64_t v40 = v42;
    v41[0] = v43[0];
    v41[1] = v43[1];
    uint64_t v27 = v42;
    sub_100299FDC(v8, v38);
    swift_bridgeObjectRetain(v25);
    swift_dynamicCast(&v39, v38, v10, v11, 7LL);
    uint64_t v28 = v39;
    uint64_t result = sub_10028F8EC(v27, *((uint64_t *)&v27 + 1));
    uint64_t v29 = result;
    if ((v30 & 1) != 0)
    {
      uint64_t v12 = v1;
      uint64_t v13 = v10;
      uint64_t v14 = v8;
      uint64_t v15 = v7;
      uint64_t v16 = v3[6] + 16 * result;
      swift_bridgeObjectRelease(*(void *)(v16 + 8));
      *(_OWORD *)uint64_t v16 = v27;
      uint64_t v17 = v3[7];
      uint64_t v18 = 8 * v29;
      uint64_t result = swift_unknownObjectRelease(*(void *)(v17 + v18));
      *(void *)(v17 + v18) = v28;
      uint64_t v7 = v15;
      uint64_t v8 = v14;
      uint64_t v10 = v13;
      uint64_t v1 = v12;
      uint64_t v11 = (char *)&type metadata for Swift.AnyObject + 8;
      uint64_t v6 = v37;
      if (!v37) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(_OWORD *)(v3[6] + 16 * result) = v27;
    *(void *)(v3[7] + 8 * result) = v28;
    uint64_t v31 = v3[2];
    uint64_t v32 = __OFADD__(v31, 1LL);
    uint64_t v33 = v31 + 1;
    if (v32) {
      goto LABEL_34;
    }
    v3[2] = v33;
    uint64_t v6 = v37;
    if (!v37) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v37 = (v6 - 1) & v6;
  }

  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

Swift::Int sub_1000EC3C8()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  &qword_100355810,  (uint64_t)&unk_1002C3B78);
}

uint64_t sub_1000EC3E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD7C(a1, &qword_10037A758, &qword_10037A760, (uint64_t)sub_1000EA950, a2);
}

uint64_t sub_1000EC400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EAB24(a1, a2, a3);
}

uint64_t sub_1000EC414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EAE6C(a1, a2, a3);
}

uint64_t sub_1000EC428(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C0C8,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  (uint64_t)&unk_1002C3AF0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000EC478@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A750, (uint64_t)qword_10036A158, (uint64_t)sub_1000EA570, a1);
}

uint64_t sub_1000EC494(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003566D8,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  (uint64_t)&unk_1002C3A78);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000EC4D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003566D8,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  (uint64_t)&unk_1002C3A78);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000EC524()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A170);
  sub_10000E704(v0, (uint64_t)qword_10036A170);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v48 = swift_allocObject(v1, v6 + 20 * v4, v5 | 7);
  *(_OWORD *)(v48 + 16) = xmmword_1002BAD40;
  uint64_t v7 = v48 + v6;
  uint64_t v8 = v48 + v6 + *(int *)(v2 + 48);
  *(void *)(v48 + v6) = 0LL;
  *(void *)uint64_t v8 = "NT_UNKNOWN";
  *(void *)(v8 + 8) = 10LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v48 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 1LL;
  *(void *)uint64_t v12 = "NT_INIT";
  *(void *)(v12 + 8) = 7LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v48 + v6 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 2LL;
  *(void *)uint64_t v14 = "NT_SHUTDOWN";
  *((void *)v14 + 1) = 11LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v48 + v6 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *uint64_t v15 = 3LL;
  *(void *)uint64_t v16 = "NT_SLEEP";
  *((void *)v16 + 1) = 8LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v48 + v6 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 4LL;
  *(void *)uint64_t v18 = "NT_WAKE";
  *((void *)v18 + 1) = 7LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v48 + v6 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 5LL;
  *(void *)uint64_t v20 = "NT_LINGER";
  *((void *)v20 + 1) = 9LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v48 + v6 + 6 * v4);
  int v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 6LL;
  *(void *)int v22 = "NT_PENALTY_FREE";
  *((void *)v22 + 1) = 15LL;
  _BYTE v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v48 + v6 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  void *v23 = 7LL;
  *(void *)uint64_t v24 = "NT_REACHABILITY";
  *((void *)v24 + 1) = 15LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v48 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 8LL;
  *(void *)uint64_t v25 = "NT_BATTERY";
  *(void *)(v25 + 8) = 10LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  uint64_t v26 = (void *)(v48 + v6 + 9 * v4);
  uint64_t v27 = (char *)v26 + *(int *)(v2 + 48);
  void *v26 = 9LL;
  *(void *)uint64_t v27 = "NT_AIRPLANE_MODE";
  *((void *)v27 + 1) = 16LL;
  v27[16] = 2;
  v11();
  uint64_t v28 = (void *)(v48 + v6 + 10 * v4);
  uint64_t v29 = (char *)v28 + *(int *)(v2 + 48);
  *uint64_t v28 = 10LL;
  *(void *)uint64_t v29 = "NT_MIGRATION";
  *((void *)v29 + 1) = 12LL;
  v29[16] = 2;
  v11();
  uint64_t v30 = (void *)(v48 + v6 + 11 * v4);
  uint64_t v31 = (char *)v30 + *(int *)(v2 + 48);
  void *v30 = 11LL;
  *(void *)uint64_t v31 = "NT_DISPLAY";
  *((void *)v31 + 1) = 10LL;
  v31[16] = 2;
  v11();
  uint64_t v32 = (void *)(v48 + v6 + 12 * v4);
  uint64_t v33 = (char *)v32 + *(int *)(v2 + 48);
  *uint64_t v32 = 12LL;
  *(void *)uint64_t v33 = "NT_LOCKSCREEN";
  *((void *)v33 + 1) = 13LL;
  v33[16] = 2;
  v11();
  int v34 = (void *)(v48 + v6 + 13 * v4);
  uint64_t v35 = (char *)v34 + *(int *)(v2 + 48);
  *int v34 = 13LL;
  *(void *)uint64_t v35 = "NT_PUSH_SERVICE";
  *((void *)v35 + 1) = 15LL;
  v35[16] = 2;
  v11();
  uint64_t v36 = (void *)(v48 + v6 + 14 * v4);
  uint64_t v37 = (char *)v36 + *(int *)(v2 + 48);
  void *v36 = 14LL;
  *(void *)uint64_t v37 = "NT_WIRELESS_MODEM";
  *((void *)v37 + 1) = 17LL;
  v37[16] = 2;
  v11();
  double v38 = (void *)(v48 + v6 + 15 * v4);
  uint64_t v39 = (char *)v38 + *(int *)(v2 + 48);
  *double v38 = 15LL;
  *(void *)uint64_t v39 = "NT_THERMAL";
  *((void *)v39 + 1) = 10LL;
  v39[16] = 2;
  v11();
  uint64_t v40 = v48 + v6 + 16 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 16 * v4) = 16LL;
  *(void *)uint64_t v40 = "NT_RESTRICTED_POWER_MODE";
  *(void *)(v40 + 8) = 24LL;
  *(_BYTE *)(v40 + 16) = 2;
  v11();
  uint64_t v41 = (void *)(v48 + v6 + 17 * v4);
  char v42 = (char *)v41 + *(int *)(v2 + 48);
  void *v41 = 17LL;
  *(void *)char v42 = "NT_BATTERY_SAVER_MODE";
  *((void *)v42 + 1) = 21LL;
  v42[16] = 2;
  v11();
  int v43 = (void *)(v48 + v6 + 18 * v4);
  int v44 = (char *)v43 + *(int *)(v2 + 48);
  *int v43 = 18LL;
  *(void *)int v44 = "NT_METRIC_HEARTBEAT";
  *((void *)v44 + 1) = 19LL;
  v44[16] = 2;
  v11();
  char v45 = (void *)(v48 + v6 + 19 * v4);
  uint64_t v46 = (char *)v45 + *(int *)(v2 + 48);
  void *v45 = 19LL;
  *(void *)uint64_t v46 = "NT_BOOT_AFTER_UNCLEAN_SHUTDOWN";
  *((void *)v46 + 1) = 30LL;
  v46[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v48);
}

uint64_t sub_1000ECA30()
{
  return sub_100008C30(&qword_10037A768, (uint64_t)qword_10036A170, (uint64_t)sub_1000EC524);
}

uint64_t sub_1000ECA4C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A768, (uint64_t)qword_10036A170, (uint64_t)sub_1000EC524, a1);
}

uint64_t sub_1000ECA68@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A768, (uint64_t)qword_10036A170, (uint64_t)sub_1000EC524, a1);
}

void *sub_1000ECA84()
{
  return &unk_10033F0B8;
}

unint64_t sub_1000ECA90()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_1000ECAAC()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A188);
  sub_10000E704(v0, (uint64_t)qword_10036A188);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v8 = "applicable_time";
  *(void *)(v8 + 8) = 15LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v6 + v4) = 2LL;
  *(void *)uint64_t v12 = "coarse_signal_environment";
  *(void *)(v12 + 8) = 25LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + v6 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 3LL;
  *(void *)uint64_t v14 = "high_resolution_signal_environment";
  *((void *)v14 + 1) = 34LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v7 + v6 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *uint64_t v15 = 4LL;
  *(void *)uint64_t v16 = "client";
  *((void *)v16 + 1) = 6LL;
  v16[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000ECC74()
{
  return sub_100008C30(&qword_10037A770, (uint64_t)qword_10036A188, (uint64_t)sub_1000ECAAC);
}

uint64_t sub_1000ECC90@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A770, (uint64_t)qword_10036A188, (uint64_t)sub_1000ECAAC, a1);
}

uint64_t sub_1000ECCAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0LL) + 20);
          uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
          uint64_t v12 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
          uint64_t v13 = v9;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v10, v11, v12, a2, a3);
          goto LABEL_5;
        case 2LL:
          uint64_t v14 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0LL) + 24);
          goto LABEL_11;
        case 3LL:
          uint64_t v14 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0LL) + 28);
LABEL_11:
          uint64_t v15 = v3 + v14;
          unint64_t v16 = sub_100149E28();
          uint64_t v13 = v9;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v15,  &type metadata for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType,  v16,  a2,  a3);
          goto LABEL_5;
        case 4LL:
          uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0LL);
          uint64_t v13 = v9;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v3 + *(int *)(v17 + 32), a2, a3);
LABEL_5:
          uint64_t v9 = v13;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000ECE1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = sub_100105BC8(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
  if (!v4)
  {
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0LL);
    uint64_t v11 = v10;
    if (*(_BYTE *)(v5 + *(int *)(v10 + 24)) != 8)
    {
      char v15 = *(_BYTE *)(v5 + *(int *)(v10 + 24));
      unint64_t v12 = sub_100149E28();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v15,  2LL,  &type metadata for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType,  v12,  a2,  a3);
    }

    if (*(_BYTE *)(v5 + *(int *)(v11 + 28)) != 8)
    {
      char v16 = *(_BYTE *)(v5 + *(int *)(v11 + 28));
      unint64_t v13 = sub_100149E28();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v16,  3LL,  &type metadata for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType,  v13,  a2,  a3);
    }

    uint64_t v14 = (unsigned int *)(v5 + *(int *)(v11 + 32));
    if ((v14[1] & 1) == 0) {
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v14, 4LL, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_1000ECF6C()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment,  &qword_100355818,  (uint64_t)&unk_1002C3D08);
}

uint64_t sub_1000ECF88@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))( v4,  1LL,  1LL,  v5);
  uint64_t v7 = a1[7];
  *(_BYTE *)(a2 + a1[6]) = 8;
  *(_BYTE *)(a2 + v7) = 8;
  uint64_t v8 = a2 + a1[8];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  return result;
}

uint64_t sub_1000ED004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000ECCAC(a1, a2, a3);
}

uint64_t sub_1000ED018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000ECE1C(a1, a2, a3);
}

uint64_t sub_1000ED02C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C0C0,  type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment,  (uint64_t)&unk_1002C3C80);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000ED07C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A770, (uint64_t)qword_10036A188, (uint64_t)sub_1000ECAAC, a1);
}

uint64_t sub_1000ED098(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003566F0,  type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment,  (uint64_t)&unk_1002C3C08);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000ED0D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003566F0,  type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment,  (uint64_t)&unk_1002C3C08);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000ED128()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A1A0);
  sub_10000E704(v0, (uint64_t)qword_10036A1A0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42A0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = -1LL;
  *(void *)uint64_t v9 = "SE_UNKNOWN";
  *(void *)(v9 + 8) = 10LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  unint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 0LL;
  *(void *)uint64_t v13 = "SE_UNAVAILABLE";
  *(void *)(v13 + 8) = 14LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  char v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 1LL;
  *(void *)char v15 = "SE_RURAL";
  *((void *)v15 + 1) = 8LL;
  v15[16] = 2;
  v12();
  char v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *char v16 = 2LL;
  *(void *)uint64_t v17 = "SE_URBAN";
  *((void *)v17 + 1) = 8LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 3LL;
  *(void *)uint64_t v19 = "SE_DENSE_URBAN";
  *((void *)v19 + 1) = 14LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  void *v20 = 4LL;
  *(void *)uint64_t v21 = "SE_DENSE_URBAN_CANYON";
  *((void *)v21 + 1) = 21LL;
  v21[16] = 2;
  v12();
  int v22 = (void *)(v8 + 6 * v4);
  uint64_t v23 = (char *)v22 + *(int *)(v2 + 48);
  *int v22 = 5LL;
  *(void *)uint64_t v23 = "SE_MARINE";
  *((void *)v23 + 1) = 9LL;
  v23[16] = 2;
  v12();
  uint64_t v24 = (void *)(v8 + 7 * v4);
  uint64_t v25 = (char *)v24 + *(int *)(v2 + 48);
  void *v24 = 6LL;
  *(void *)uint64_t v25 = "SE_FOLIAGE";
  *((void *)v25 + 1) = 10LL;
  v25[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000ED3D0()
{
  return sub_100008C30(&qword_10037A778, (uint64_t)qword_10036A1A0, (uint64_t)sub_1000ED128);
}

uint64_t sub_1000ED3EC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A778, (uint64_t)qword_10036A1A0, (uint64_t)sub_1000ED128, a1);
}

uint64_t sub_1000ED408@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A778, (uint64_t)qword_10036A1A0, (uint64_t)sub_1000ED128, a1);
}

void *sub_1000ED424()
{
  return &unk_10033F0C8;
}

unint64_t sub_1000ED430()
{
  return 0xD00000000000002ELL;
}

uint64_t sub_1000ED44C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A1B8);
  sub_10000E704(v0, (uint64_t)qword_10036A1B8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3340;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "type";
  *(void *)(v9 + 8) = 4LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  unint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "fidelity_level";
  *((void *)v13 + 1) = 14LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000ED5A4()
{
  return sub_100008C30(&qword_10037A780, (uint64_t)qword_10036A1B8, (uint64_t)sub_1000ED44C);
}

uint64_t sub_1000ED5C0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A780, (uint64_t)qword_10036A1B8, (uint64_t)sub_1000ED44C, a1);
}

uint64_t sub_1000ED5DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0) {
        return result;
      }
      if (result == 2) {
        break;
      }
      if (result == 1)
      {
        uint64_t v13 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0LL) + 20);
        unint64_t v10 = sub_100149E28();
        uint64_t v11 = v13;
        unint64_t v12 = &type metadata for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType;
        goto LABEL_5;
      }

uint64_t sub_1000ED6D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0LL);
  uint64_t v10 = result;
  if (*(_BYTE *)(v5 + *(int *)(result + 20)) != 8)
  {
    char v13 = *(_BYTE *)(v5 + *(int *)(result + 20));
    unint64_t v11 = sub_100149E28();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v13,  1LL,  &type metadata for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType,  v11,  a2,  a3);
  }

  if (!v4)
  {
    if (*(_BYTE *)(v5 + *(int *)(v10 + 24)) != 4)
    {
      char v14 = *(_BYTE *)(v5 + *(int *)(v10 + 24));
      unint64_t v12 = sub_10014A730();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v14,  2LL,  &type metadata for CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel,  v12,  a2,  a3);
    }

    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_1000ED7CC()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo,  &qword_100355820,  (uint64_t)&unk_1002C3E98);
}

uint64_t sub_1000ED7E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10010473C(a1, 8, 4, a2);
}

uint64_t sub_1000ED7F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000ED5DC(a1, a2, a3);
}

uint64_t sub_1000ED808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000ED6D0(a1, a2, a3);
}

uint64_t sub_1000ED81C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C0B8,  type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo,  (uint64_t)&unk_1002C3E10);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000ED86C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A780, (uint64_t)qword_10036A1B8, (uint64_t)sub_1000ED44C, a1);
}

uint64_t sub_1000ED888(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356708,  type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo,  (uint64_t)&unk_1002C3D98);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000ED8C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356708,  type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo,  (uint64_t)&unk_1002C3D98);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000ED918()
{
  return &unk_10033F0D8;
}

unint64_t sub_1000ED924()
{
  return 0xD000000000000022LL;
}

uint64_t sub_1000ED940()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A1D0);
  sub_10000E704(v0, (uint64_t)qword_10036A1D0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "applicable_time";
  *(void *)(v9 + 8) = 15LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  unint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "x_uT";
  *(void *)(v13 + 8) = 4LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  char v14 = (void *)(v8 + 2 * v4);
  char v15 = (char *)v14 + *(int *)(v2 + 48);
  *char v14 = 3LL;
  *(void *)char v15 = "y_uT";
  *((void *)v15 + 1) = 4LL;
  v15[16] = 2;
  v12();
  char v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *char v16 = 4LL;
  *(void *)uint64_t v17 = "z_uT";
  *((void *)v17 + 1) = 4LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000EDAFC()
{
  return sub_100008C30(&qword_10037A788, (uint64_t)qword_10036A1D0, (uint64_t)sub_1000ED940);
}

uint64_t sub_1000EDB18@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A788, (uint64_t)qword_10036A1D0, (uint64_t)sub_1000ED940, a1);
}

uint64_t sub_1000EDB34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EDB50(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t sub_1000EDB50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v5)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v12 = v4 + *(int *)(a4(0LL) + 20);
          uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
          uint64_t v14 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v12, v13, v14, a2, a3);
          break;
        case 2LL:
          uint64_t v11 = *(int *)(a4(0LL) + 24);
          goto LABEL_5;
        case 3LL:
          uint64_t v11 = *(int *)(a4(0LL) + 28);
          goto LABEL_5;
        case 4LL:
          uint64_t v11 = *(int *)(a4(0LL) + 32);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v4 + v11, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000EDCA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C6ED8(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t sub_1000EDCC0(uint64_t a1, uint64_t (*a2)(void))
{
  return sub_10011CA2C(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MagSample) & 1;
}

Swift::Int sub_1000EDCE0()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_MagSample,  &qword_100355828,  (uint64_t)&unk_1002C4000);
}

uint64_t sub_1000EDCFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C0B0,  type metadata accessor for CLP_LogEntry_PrivateData_MagSample,  (uint64_t)&unk_1002C3F78);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000EDD4C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A788, (uint64_t)qword_10036A1D0, (uint64_t)sub_1000ED940, a1);
}

uint64_t sub_1000EDD68(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100355830,  type metadata accessor for CLP_LogEntry_PrivateData_MagSample,  (uint64_t)&unk_1002C3F00);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000EDDA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100355830,  type metadata accessor for CLP_LogEntry_PrivateData_MagSample,  (uint64_t)&unk_1002C3F00);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000EDDF8()
{
  return &unk_10033F0E8;
}

unint64_t sub_1000EDE04()
{
  return 0xD000000000000025LL;
}

uint64_t sub_1000EDE20()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A1E8);
  sub_10000E704(v0, (uint64_t)qword_10036A1E8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3340;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "event_receipt_time";
  *(void *)(v9 + 8) = 18LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "sample";
  *((void *)v13 + 1) = 6LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000EDF78()
{
  return sub_100008C30(&qword_10037A790, (uint64_t)qword_10036A1E8, (uint64_t)sub_1000EDE20);
}

uint64_t sub_1000EDF94@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A790, (uint64_t)qword_10036A1E8, (uint64_t)sub_1000EDE20, a1);
}

uint64_t sub_1000EDFB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FCCA0( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer,  type metadata accessor for CLP_LogEntry_PrivateData_MagSample,  &qword_100355830,  (uint64_t)&unk_1002C3F00);
}

uint64_t sub_1000EDFE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1000EE0CC(v3, a1, a2, a3);
  if (!v4)
  {
    uint64_t v9 = *(void *)v3;
    if (*(void *)(*(void *)v3 + 16LL))
    {
      uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_MagSample(0LL);
      uint64_t v11 = sub_10000FD98( &qword_100355830,  type metadata accessor for CLP_LogEntry_PrivateData_MagSample,  (uint64_t)&unk_1002C3F00);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v9, 2LL, v10, v11, a2, a3);
    }

    type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer(0LL);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_1000EE0CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_100355538);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v15 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000EE240(uint64_t *a1, uint64_t *a2)
{
  return sub_100117798( a1,  a2,  (uint64_t *)type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer,  type metadata accessor for CLP_LogEntry_PrivateData_MagSample) & 1;
}

Swift::Int sub_1000EE268()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer,  &qword_100355838,  (uint64_t)&unk_1002C4168);
}

uint64_t sub_1000EE284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EDFE4(a1, a2, a3);
}

uint64_t sub_1000EE298(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C0A8,  type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer,  (uint64_t)&unk_1002C40E0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000EE2E8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A790, (uint64_t)qword_10036A1E8, (uint64_t)sub_1000EDE20, a1);
}

uint64_t sub_1000EE304(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356730,  type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer,  (uint64_t)&unk_1002C4068);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000EE344(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356730,  type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer,  (uint64_t)&unk_1002C4068);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000EE394()
{
  return &unk_10033F0F8;
}

unint64_t sub_1000EE3A0()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_1000EE3BC(uint64_t a1)
{
  return sub_1000FB384( a1,  qword_10036A200,  (uint64_t)"event_receipt_time",  18LL,  (unsigned int *)&enum case for _NameMap.NameDescription.standard(_:));
}

uint64_t sub_1000EE3DC()
{
  return sub_100008C30(&qword_10037A798, (uint64_t)qword_10036A200, (uint64_t)sub_1000EE3BC);
}

uint64_t sub_1000EE3F8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A798, (uint64_t)qword_10036A200, (uint64_t)sub_1000EE3BC, a1);
}

uint64_t sub_1000EE414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FB4F8( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_Reset,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (unint64_t *)&qword_1003552B8,  (uint64_t)&unk_1002BF798);
}

uint64_t sub_1000EE448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EE464(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Reset);
}

uint64_t sub_1000EE464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = sub_100105BC8(v4, a1, a2, a3, a4);
  if (!v5) {
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000EE4BC(uint64_t a1, uint64_t a2)
{
  return sub_10011C654(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Reset) & 1;
}

Swift::Int sub_1000EE4DC()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_Reset,  &qword_100355840,  (uint64_t)&unk_1002C42D0);
}

uint64_t sub_1000EE4F8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = a3 + *(int *)(a1 + 20);
  uint64_t v7 = a2(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t sub_1000EE550(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C0A0,  type metadata accessor for CLP_LogEntry_PrivateData_Reset,  (uint64_t)&unk_1002C4248);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000EE5A0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A798, (uint64_t)qword_10036A200, (uint64_t)sub_1000EE3BC, a1);
}

uint64_t sub_1000EE5BC(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356748,  type metadata accessor for CLP_LogEntry_PrivateData_Reset,  (uint64_t)&unk_1002C41D0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000EE5FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356748,  type metadata accessor for CLP_LogEntry_PrivateData_Reset,  (uint64_t)&unk_1002C41D0);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000EE64C()
{
  return &unk_10033F108;
}

unint64_t sub_1000EE658()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_1000EE674()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A218);
  sub_10000E704(v0, (uint64_t)qword_10036A218);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "calibrated";
  *(void *)(v9 + 8) = 10LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "lower_bound";
  *((void *)v13 + 1) = 11LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "upper_bound";
  *(void *)(v14 + 8) = 11LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000EE810()
{
  return sub_100008C30(&qword_10037A7A0, (uint64_t)qword_10036A218, (uint64_t)sub_1000EE674);
}

uint64_t sub_1000EE82C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A7A0, (uint64_t)qword_10036A218, (uint64_t)sub_1000EE674, a1);
}

uint64_t sub_1000EE848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D4398(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t sub_1000EE864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005A800(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t sub_1000EE880(uint64_t a1, uint64_t a2)
{
  return sub_100065750(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace) & 1;
}

Swift::Int sub_1000EE8A0()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace,  &qword_100355848,  (uint64_t)&unk_1002C4438);
}

uint64_t sub_1000EE8BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C098,  type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace,  (uint64_t)&unk_1002C43B0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000EE90C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A7A0, (uint64_t)qword_10036A218, (uint64_t)sub_1000EE674, a1);
}

uint64_t sub_1000EE928(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356760,  type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace,  (uint64_t)&unk_1002C4338);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000EE968(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356760,  type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace,  (uint64_t)&unk_1002C4338);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000EE9BC()
{
  return &unk_10033F118;
}

unint64_t sub_1000EE9C8()
{
  return 0xD00000000000002FLL;
}

uint64_t sub_1000EE9E4()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A230);
  sub_10000E704(v0, (uint64_t)qword_10036A230);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42A0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "accel_pose_x_high";
  *(void *)(v9 + 8) = 17LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "accel_var_xyz_low";
  *(void *)(v13 + 8) = 17LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "gyro_num_samples_sufficient";
  *((void *)v15 + 1) = 27LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "gyro_var_x_high";
  *((void *)v17 + 1) = 15LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 5LL;
  *(void *)uint64_t v19 = "consecutive_requirement";
  *((void *)v19 + 1) = 23LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  void *v20 = 6LL;
  *(void *)uint64_t v21 = "is_vehicular_low_confidence";
  *((void *)v21 + 1) = 27LL;
  v21[16] = 2;
  v12();
  int v22 = (void *)(v8 + 6 * v4);
  uint64_t v23 = (char *)v22 + *(int *)(v2 + 48);
  *int v22 = 7LL;
  *(void *)uint64_t v23 = "is_vehicular_high_confidence";
  *((void *)v23 + 1) = 28LL;
  v23[16] = 2;
  v12();
  uint64_t v24 = (void *)(v8 + 7 * v4);
  uint64_t v25 = (char *)v24 + *(int *)(v2 + 48);
  void *v24 = 8LL;
  *(void *)uint64_t v25 = "consistent_steps_protection";
  *((void *)v25 + 1) = 27LL;
  v25[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000EEC88()
{
  return sub_100008C30(&qword_10037A7A8, (uint64_t)qword_10036A230, (uint64_t)sub_1000EE9E4);
}

uint64_t sub_1000EECA4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A7A8, (uint64_t)qword_10036A230, (uint64_t)sub_1000EE9E4, a1);
}

uint64_t sub_1000EECC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL) + 20);
          goto LABEL_13;
        case 2LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL) + 24);
          goto LABEL_13;
        case 3LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL) + 28);
          goto LABEL_13;
        case 4LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL) + 32);
          goto LABEL_13;
        case 5LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL) + 36);
          goto LABEL_13;
        case 6LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL) + 40);
          goto LABEL_13;
        case 7LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL) + 44);
          goto LABEL_13;
        case 8LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL) + 48);
LABEL_13:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + v9, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000EEDEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL);
  uint64_t v10 = (int *)result;
  int v11 = *(unsigned __int8 *)(v5 + *(int *)(result + 20));
  if (v11 != 2) {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v11 & 1, 1LL, a2, a3);
  }
  if (!v4)
  {
    int v12 = *(unsigned __int8 *)(v5 + v10[6]);
    if (v12 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v12 & 1, 2LL, a2, a3);
    }
    int v13 = *(unsigned __int8 *)(v5 + v10[7]);
    if (v13 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v13 & 1, 3LL, a2, a3);
    }
    int v14 = *(unsigned __int8 *)(v5 + v10[8]);
    if (v14 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v14 & 1, 4LL, a2, a3);
    }
    sub_1000EA2B8(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
    sub_1000EEFB8(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
    sub_1000E4EEC(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
    sub_1000E4F60(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_1000EEFB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0LL);
  int v9 = *(unsigned __int8 *)(a1 + *(int *)(result + 40));
  if (v9 != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v9 & 1, 6LL, a3, a4);
  }
  return result;
}

Swift::Int sub_1000EF030()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState,  &qword_100355850,  (uint64_t)&unk_1002C45A0);
}

uint64_t sub_1000EF04C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 2;
  *(_BYTE *)(a2 + v5) = 2;
  uint64_t v6 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 2;
  *(_BYTE *)(a2 + v6) = 2;
  uint64_t v7 = a1[10];
  *(_BYTE *)(a2 + a1[9]) = 2;
  *(_BYTE *)(a2 + v7) = 2;
  uint64_t v8 = a1[12];
  *(_BYTE *)(a2 + a1[11]) = 2;
  *(_BYTE *)(a2 + v8) = 2;
  return result;
}

uint64_t sub_1000EF0A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EECC0(a1, a2, a3);
}

uint64_t sub_1000EF0B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EEDEC(a1, a2, a3);
}

uint64_t sub_1000EF0CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C090,  type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState,  (uint64_t)&unk_1002C4518);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000EF11C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A7A8, (uint64_t)qword_10036A230, (uint64_t)sub_1000EE9E4, a1);
}

uint64_t sub_1000EF138(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356778,  type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState,  (uint64_t)&unk_1002C44A0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000EF178(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356778,  type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState,  (uint64_t)&unk_1002C44A0);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000EF1C8()
{
  return &unk_10033F128;
}

unint64_t sub_1000EF1D4()
{
  return 0xD000000000000027LL;
}

uint64_t sub_1000EF1F0()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A248);
  sub_10000E704(v0, (uint64_t)qword_10036A248);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v56 = swift_allocObject(v1, v6 + 24 * v4, v5 | 7);
  *(_OWORD *)(v56 + 16) = xmmword_1002BAD50;
  uint64_t v7 = v56 + v6;
  uint64_t v8 = v56 + v6 + *(int *)(v2 + 48);
  *(void *)(v56 + v6) = 1LL;
  *(void *)uint64_t v8 = "timestamp";
  *(void *)(v8 + 8) = 9LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  int v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v56 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "start_time";
  *(void *)(v12 + 8) = 10LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  int v13 = (void *)(v56 + v6 + 2 * v4);
  int v14 = (char *)v13 + *(int *)(v2 + 48);
  *int v13 = 3LL;
  *(void *)int v14 = "first_step_time";
  *((void *)v14 + 1) = 15LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v56 + v6 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *uint64_t v15 = 4LL;
  *(void *)uint64_t v16 = "count";
  *((void *)v16 + 1) = 5LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v56 + v6 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "distance_m";
  *((void *)v18 + 1) = 10LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v56 + v6 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 6LL;
  *(void *)uint64_t v20 = "raw_distance_m";
  *((void *)v20 + 1) = 14LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v56 + v6 + 6 * v4);
  int v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 7LL;
  *(void *)int v22 = "floors_ascended";
  *((void *)v22 + 1) = 15LL;
  _BYTE v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v56 + v6 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  void *v23 = 8LL;
  *(void *)uint64_t v24 = "floors_descended";
  *((void *)v24 + 1) = 16LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v56 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 9LL;
  *(void *)uint64_t v25 = "current_pace_spm";
  *(void *)(v25 + 8) = 16LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  uint64_t v26 = (void *)(v56 + v6 + 9 * v4);
  uint64_t v27 = (char *)v26 + *(int *)(v2 + 48);
  void *v26 = 10LL;
  *(void *)uint64_t v27 = "current_cadence";
  *((void *)v27 + 1) = 15LL;
  v27[16] = 2;
  v11();
  uint64_t v28 = (void *)(v56 + v6 + 10 * v4);
  uint64_t v29 = (char *)v28 + *(int *)(v2 + 48);
  *uint64_t v28 = 11LL;
  *(void *)uint64_t v29 = "active_time";
  *((void *)v29 + 1) = 11LL;
  v29[16] = 2;
  v11();
  uint64_t v30 = (void *)(v56 + v6 + 11 * v4);
  uint64_t v31 = (char *)v30 + *(int *)(v2 + 48);
  void *v30 = 12LL;
  *(void *)uint64_t v31 = "record_id";
  *((void *)v31 + 1) = 9LL;
  v31[16] = 2;
  v11();
  uint64_t v32 = (void *)(v56 + v6 + 12 * v4);
  uint64_t v33 = (char *)v32 + *(int *)(v2 + 48);
  *uint64_t v32 = 13LL;
  *(void *)uint64_t v33 = "source_id";
  *((void *)v33 + 1) = 9LL;
  v33[16] = 2;
  v11();
  int v34 = (void *)(v56 + v6 + 13 * v4);
  uint64_t v35 = (char *)v34 + *(int *)(v2 + 48);
  *int v34 = 14LL;
  *(void *)uint64_t v35 = "is_odometer_distance";
  *((void *)v35 + 1) = 20LL;
  v35[16] = 2;
  v11();
  uint64_t v36 = (void *)(v56 + v6 + 14 * v4);
  uint64_t v37 = (char *)v36 + *(int *)(v2 + 48);
  void *v36 = 15LL;
  *(void *)uint64_t v37 = "is_odometer_pace";
  *((void *)v37 + 1) = 16LL;
  v37[16] = 2;
  v11();
  double v38 = (void *)(v56 + v6 + 15 * v4);
  uint64_t v39 = (char *)v38 + *(int *)(v2 + 48);
  *double v38 = 16LL;
  *(void *)uint64_t v39 = "accelerometer_pace";
  *((void *)v39 + 1) = 18LL;
  v39[16] = 2;
  v11();
  uint64_t v40 = v56 + v6 + 16 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 16 * v4) = 17LL;
  *(void *)uint64_t v40 = "push_count";
  *(void *)(v40 + 8) = 10LL;
  *(_BYTE *)(v40 + 16) = 2;
  v11();
  uint64_t v41 = (void *)(v56 + v6 + 17 * v4);
  char v42 = (char *)v41 + *(int *)(v2 + 48);
  void *v41 = 18LL;
  *(void *)char v42 = "workout_type";
  *((void *)v42 + 1) = 12LL;
  v42[16] = 2;
  v11();
  int v43 = (void *)(v56 + v6 + 18 * v4);
  int v44 = (char *)v43 + *(int *)(v2 + 48);
  *int v43 = 19LL;
  *(void *)int v44 = "pedometer_arm_constrainted_state";
  *((void *)v44 + 1) = 32LL;
  v44[16] = 2;
  v11();
  char v45 = (void *)(v56 + v6 + 19 * v4);
  uint64_t v46 = (char *)v45 + *(int *)(v2 + 48);
  void *v45 = 20LL;
  *(void *)uint64_t v46 = "elevation_ascended_cm";
  *((void *)v46 + 1) = 21LL;
  v46[16] = 2;
  v11();
  uint64_t v47 = (void *)(v56 + v6 + 20 * v4);
  uint64_t v48 = (char *)v47 + *(int *)(v2 + 48);
  *uint64_t v47 = 21LL;
  *(void *)uint64_t v48 = "elevation_descended_cm";
  *((void *)v48 + 1) = 22LL;
  v48[16] = 2;
  v11();
  uint64_t v49 = (void *)(v56 + v6 + 21 * v4);
  uint64_t v50 = (char *)v49 + *(int *)(v2 + 48);
  void *v49 = 22LL;
  *(void *)uint64_t v50 = "false_steps_suppressed";
  *((void *)v50 + 1) = 22LL;
  v50[16] = 2;
  v11();
  int v51 = (void *)(v56 + v6 + 22 * v4);
  uint64_t v52 = (char *)v51 + *(int *)(v2 + 48);
  *int v51 = 23LL;
  *(void *)uint64_t v52 = "distance_source";
  *((void *)v52 + 1) = 15LL;
  v52[16] = 2;
  v11();
  int v53 = (void *)(v56 + v6 + 23 * v4);
  uint64_t v54 = (char *)v53 + *(int *)(v2 + 48);
  void *v53 = 24LL;
  *(void *)uint64_t v54 = "false_step_detector_state";
  *((void *)v54 + 1) = 25LL;
  v54[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v56);
}

uint64_t sub_1000EF7D0()
{
  return sub_100008C30(&qword_10037A7B0, (uint64_t)qword_10036A248, (uint64_t)sub_1000EF1F0);
}

uint64_t sub_1000EF7EC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A7B0, (uint64_t)qword_10036A248, (uint64_t)sub_1000EF1F0, a1);
}

uint64_t sub_1000EF808()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0LL);
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL);
  v4(v2, 1LL, 1LL, v3);
  v4( v1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime,  1LL,  1LL,  v3);
  v4( v1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime,  1LL,  1LL,  v3);
  uint64_t v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count;
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  uint64_t v6 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM;
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  uint64_t v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM;
  *(void *)uint64_t v7 = 0LL;
  *(_BYTE *)(v7 + 8) = 1;
  uint64_t v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended;
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  *(void *)uint64_t v11 = 0LL;
  *(_BYTE *)(v11 + 8) = 1;
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  *(void *)uint64_t v12 = 0LL;
  *(_BYTE *)(v12 + 8) = 1;
  uint64_t v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
  *(_DWORD *)uint64_t v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  int v14 = (void *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  *int v14 = 0LL;
  v14[1] = 0LL;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance) = 2;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace) = 2;
  uint64_t v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v15, 1LL, 1LL, v16);
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
  *(_DWORD *)uint64_t v17 = 0;
  *(_BYTE *)(v17 + 4) = 1;
  uint64_t v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
  *(_DWORD *)uint64_t v18 = 0;
  *(_BYTE *)(v18 + 4) = 1;
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
  *(_DWORD *)uint64_t v19 = 0;
  *(_BYTE *)(v19 + 4) = 1;
  uint64_t v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
  *(_DWORD *)uint64_t v20 = 0;
  *(_BYTE *)(v20 + 4) = 1;
  uint64_t v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
  *(_DWORD *)uint64_t v21 = 0;
  *(_BYTE *)(v21 + 4) = 1;
  uint64_t v22 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
  *(_DWORD *)uint64_t v22 = 0;
  *(_BYTE *)(v22 + 4) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource) = 6;
  uint64_t v23 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56LL))( v23,  1LL,  1LL,  v24);
  qword_10037A7C0 = v1;
  return result;
}

uint64_t sub_1000EFA88(uint64_t a1)
{
  uint64_t v3 = sub_100003A0C(&qword_1003555F0);
  __chkstk_darwin(v3);
  uint64_t v111 = (uint64_t)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100003A0C(&qword_1003555E8);
  __chkstk_darwin(v5);
  uint64_t v109 = (uint64_t)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  uint64_t v90 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 56LL);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v12)(v10, 1LL, 1LL, v11);
  uint64_t v91 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  v12();
  uint64_t v92 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  v12();
  uint64_t v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count;
  *(_DWORD *)uint64_t v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  uint64_t v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM;
  *(void *)uint64_t v14 = 0LL;
  *(_BYTE *)(v14 + 8) = 1;
  uint64_t v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM;
  *(void *)uint64_t v15 = 0LL;
  *(_BYTE *)(v15 + 8) = 1;
  uint64_t v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended;
  *(_DWORD *)uint64_t v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
  uint64_t v93 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
  *(_DWORD *)uint64_t v17 = 0;
  *(_BYTE *)(v17 + 4) = 1;
  uint64_t v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  uint64_t v94 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  *(void *)uint64_t v18 = 0LL;
  *(_BYTE *)(v18 + 8) = 1;
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  uint64_t v95 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  *(void *)uint64_t v19 = 0LL;
  *(_BYTE *)(v19 + 8) = 1;
  uint64_t v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  uint64_t v96 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  *(void *)uint64_t v20 = 0LL;
  *(_BYTE *)(v20 + 8) = 1;
  uint64_t v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
  uint64_t v97 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
  *(_DWORD *)uint64_t v21 = 0;
  *(_BYTE *)(v21 + 4) = 1;
  uint64_t v22 = (void *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  char v98 = (void *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  *uint64_t v22 = 0LL;
  v22[1] = 0LL;
  uint64_t v99 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance) = 2;
  uint64_t v23 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  _BYTE *v23 = 2;
  uint64_t v24 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  uint64_t v100 = v23;
  uint64_t v101 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  uint64_t v25 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56LL))(v24, 1LL, 1LL, v25);
  uint64_t v26 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
  uint64_t v102 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
  *(_DWORD *)uint64_t v26 = 0;
  *(_BYTE *)(v26 + 4) = 1;
  uint64_t v27 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
  uint64_t v103 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
  *(_DWORD *)uint64_t v27 = 0;
  *(_BYTE *)(v27 + 4) = 1;
  uint64_t v28 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
  uint64_t v104 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
  *(_DWORD *)uint64_t v28 = 0;
  *(_BYTE *)(v28 + 4) = 1;
  uint64_t v29 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
  uint64_t v105 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
  *(_DWORD *)uint64_t v29 = 0;
  *(_BYTE *)(v29 + 4) = 1;
  uint64_t v30 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
  uint64_t v106 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
  *(_DWORD *)uint64_t v30 = 0;
  *(_BYTE *)(v30 + 4) = 1;
  uint64_t v31 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
  uint64_t v107 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
  *(_DWORD *)uint64_t v31 = 0;
  *(_BYTE *)(v31 + 4) = 1;
  uint64_t v108 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource) = 6;
  uint64_t v32 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  uint64_t v110 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  uint64_t v33 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56LL))(v32, 1LL, 1LL, v33);
  uint64_t v34 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp,  v155,  0LL,  0LL);
  sub_10000E6C0(v34, (uint64_t)v9, &qword_100355538);
  uint64_t v35 = v90;
  swift_beginAccess(v90, v154, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v9, v35, &qword_100355538);
  swift_endAccess(v154);
  uint64_t v36 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime,  v154,  0LL,  0LL);
  sub_10000E6C0(v36, (uint64_t)v9, &qword_100355538);
  uint64_t v37 = v91;
  swift_beginAccess(v91, v153, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v9, v37, &qword_100355538);
  swift_endAccess(v153);
  uint64_t v38 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime,  v153,  0LL,  0LL);
  sub_10000E6C0(v38, (uint64_t)v9, &qword_100355538);
  uint64_t v39 = v92;
  swift_beginAccess(v92, v152, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v9, v39, &qword_100355538);
  swift_endAccess(v152);
  uint64_t v40 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count,  v152,  0LL,  0LL);
  LODWORD(v37) = *(_DWORD *)v40;
  LOBYTE(v40) = *(_BYTE *)(v40 + 4);
  swift_beginAccess(v13, v151, 1LL, 0LL);
  *(_DWORD *)uint64_t v13 = v37;
  *(_BYTE *)(v13 + 4) = v40;
  uint64_t v41 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM,  v150,  0LL,  0LL);
  uint64_t v42 = *v41;
  LOBYTE(v41) = *((_BYTE *)v41 + 8);
  swift_beginAccess(v14, v149, 1LL, 0LL);
  *(void *)uint64_t v14 = v42;
  *(_BYTE *)(v14 + 8) = (_BYTE)v41;
  int v43 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM,  &v148,  0LL,  0LL);
  uint64_t v44 = *v43;
  LOBYTE(v43) = *((_BYTE *)v43 + 8);
  swift_beginAccess(v15, &v147, 1LL, 0LL);
  *(void *)uint64_t v15 = v44;
  *(_BYTE *)(v15 + 8) = (_BYTE)v43;
  uint64_t v45 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended,  &v146,  0LL,  0LL);
  LODWORD(v44) = *(_DWORD *)v45;
  LOBYTE(v45) = *(_BYTE *)(v45 + 4);
  swift_beginAccess(v16, &v145, 1LL, 0LL);
  *(_DWORD *)uint64_t v16 = v44;
  *(_BYTE *)(v16 + 4) = v45;
  uint64_t v46 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended,  &v144,  0LL,  0LL);
  LODWORD(v44) = *(_DWORD *)v46;
  LOBYTE(v46) = *(_BYTE *)(v46 + 4);
  uint64_t v47 = v93;
  swift_beginAccess(v93, &v143, 1LL, 0LL);
  *(_DWORD *)uint64_t v47 = v44;
  *(_BYTE *)(v47 + 4) = v46;
  uint64_t v48 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm,  &v142,  0LL,  0LL);
  uint64_t v49 = *v48;
  LOBYTE(v48) = *((_BYTE *)v48 + 8);
  uint64_t v50 = v94;
  swift_beginAccess(v94, &v141, 1LL, 0LL);
  *(void *)uint64_t v50 = v49;
  *(_BYTE *)(v50 + 8) = (_BYTE)v48;
  int v51 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence,  &v140,  0LL,  0LL);
  uint64_t v52 = *v51;
  LOBYTE(v51) = *((_BYTE *)v51 + 8);
  uint64_t v53 = v95;
  swift_beginAccess(v95, &v139, 1LL, 0LL);
  *(void *)uint64_t v53 = v52;
  *(_BYTE *)(v53 + 8) = (_BYTE)v51;
  uint64_t v54 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime,  &v138,  0LL,  0LL);
  uint64_t v55 = *v54;
  LOBYTE(v54) = *((_BYTE *)v54 + 8);
  uint64_t v56 = v96;
  swift_beginAccess(v96, &v137, 1LL, 0LL);
  *(void *)uint64_t v56 = v55;
  *(_BYTE *)(v56 + 8) = (_BYTE)v54;
  uint64_t v57 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID,  &v136,  0LL,  0LL);
  LODWORD(v55) = *(_DWORD *)v57;
  LOBYTE(v57) = *(_BYTE *)(v57 + 4);
  uint64_t v58 = v97;
  swift_beginAccess(v97, &v135, 1LL, 0LL);
  *(_DWORD *)uint64_t v58 = v55;
  *(_BYTE *)(v58 + 4) = v57;
  uint64_t v59 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID,  &v134,  0LL,  0LL);
  uint64_t v61 = *v59;
  uint64_t v60 = v59[1];
  uint64_t v62 = v98;
  swift_beginAccess(v98, &v133, 1LL, 0LL);
  uint64_t v63 = v62[1];
  void *v62 = v61;
  v62[1] = v60;
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRelease(v63);
  char v64 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance,  &v132,  0LL,  0LL);
  LOBYTE(v64) = *v64;
  uint64_t v65 = v99;
  swift_beginAccess(v99, &v131, 1LL, 0LL);
  *uint64_t v65 = (_BYTE)v64;
  uint64_t v66 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace,  &v130,  0LL,  0LL);
  LOBYTE(v66) = *v66;
  uint64_t v67 = v100;
  swift_beginAccess(v100, &v129, 1LL, 0LL);
  *uint64_t v67 = (_BYTE)v66;
  uint64_t v68 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace,  &v128,  0LL,  0LL);
  uint64_t v69 = v109;
  sub_10000E6C0(v68, v109, &qword_1003555E8);
  uint64_t v70 = v101;
  swift_beginAccess(v101, v127, 33LL, 0LL);
  sub_10000E5D4(v69, v70, &qword_1003555E8);
  swift_endAccess(v127);
  uint64_t v71 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount,  v127,  0LL,  0LL);
  LODWORD(v69) = *(_DWORD *)v71;
  LOBYTE(v71) = *(_BYTE *)(v71 + 4);
  uint64_t v72 = v102;
  swift_beginAccess(v102, &v126, 1LL, 0LL);
  *(_DWORD *)uint64_t v72 = v69;
  *(_BYTE *)(v72 + 4) = v71;
  uint64_t v73 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType,  &v125,  0LL,  0LL);
  LODWORD(v69) = *(_DWORD *)v73;
  LOBYTE(v73) = *(_BYTE *)(v73 + 4);
  uint64_t v74 = v103;
  swift_beginAccess(v103, &v124, 1LL, 0LL);
  *(_DWORD *)uint64_t v74 = v69;
  *(_BYTE *)(v74 + 4) = v73;
  uint64_t v75 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState,  &v123,  0LL,  0LL);
  LODWORD(v69) = *(_DWORD *)v75;
  LOBYTE(v75) = *(_BYTE *)(v75 + 4);
  uint64_t v76 = v104;
  swift_beginAccess(v104, &v122, 1LL, 0LL);
  *(_DWORD *)uint64_t v76 = v69;
  *(_BYTE *)(v76 + 4) = v75;
  uint64_t v77 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm,  &v121,  0LL,  0LL);
  LODWORD(v69) = *(_DWORD *)v77;
  LOBYTE(v77) = *(_BYTE *)(v77 + 4);
  uint64_t v78 = v105;
  swift_beginAccess(v105, &v120, 1LL, 0LL);
  *(_DWORD *)uint64_t v78 = v69;
  *(_BYTE *)(v78 + 4) = v77;
  uint64_t v79 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm,  &v119,  0LL,  0LL);
  LODWORD(v69) = *(_DWORD *)v79;
  LOBYTE(v79) = *(_BYTE *)(v79 + 4);
  uint64_t v80 = v106;
  swift_beginAccess(v106, &v118, 1LL, 0LL);
  *(_DWORD *)uint64_t v80 = v69;
  *(_BYTE *)(v80 + 4) = v79;
  uint64_t v81 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed,  &v117,  0LL,  0LL);
  LODWORD(v69) = *(_DWORD *)v81;
  LOBYTE(v81) = *(_BYTE *)(v81 + 4);
  uint64_t v82 = v107;
  swift_beginAccess(v107, &v116, 1LL, 0LL);
  *(_DWORD *)uint64_t v82 = v69;
  *(_BYTE *)(v82 + 4) = v81;
  int v83 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource,  &v115,  0LL,  0LL);
  LOBYTE(v83) = *v83;
  uint64_t v84 = v108;
  swift_beginAccess(v108, &v114, 1LL, 0LL);
  _BYTE *v84 = (_BYTE)v83;
  uint64_t v85 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState,  &v113,  0LL,  0LL);
  uint64_t v86 = v111;
  sub_10000E6C0(v85, v111, &qword_1003555F0);
  swift_release(a1);
  uint64_t v87 = v110;
  swift_beginAccess(v110, v112, 33LL, 0LL);
  sub_10000E5D4(v86, v87, &qword_1003555F0);
  swift_endAccess(v112);
  return v1;
}

uint64_t sub_1000F0564()
{
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID
                                      + 8));
  sub_100015764( v0 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace,  &qword_1003555E8);
  sub_100015764( v0 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState,  &qword_1003555F0);
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_1000F0614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v9)) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v3 + v9);
    uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0LL);
    uint64_t v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v13 = swift_retain(v10);
    sub_1000EFA88(v13);
    uint64_t v14 = *(void *)(v6 + v9);
    *(void *)(v6 + v9) = v12;
    swift_release(v14);
  }

  uint64_t v15 = *(void *)(v6 + v9);
  swift_retain(v15);
  uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1LL:
          uint64_t v19 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
          goto LABEL_10;
        case 2LL:
          uint64_t v19 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
          goto LABEL_10;
        case 3LL:
          uint64_t v19 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
LABEL_10:
          uint64_t v20 = v15 + v19;
          swift_beginAccess(v15 + v19, v37, 33LL, 0LL);
          uint64_t v21 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
          uint64_t v22 = (unint64_t *)&qword_1003552B8;
          uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          uint64_t v24 = &unk_1002BF798;
          goto LABEL_35;
        case 4LL:
          uint64_t v25 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count;
          goto LABEL_32;
        case 5LL:
          uint64_t v26 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM;
          goto LABEL_19;
        case 6LL:
          uint64_t v26 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM;
          goto LABEL_19;
        case 7LL:
          uint64_t v25 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended;
          goto LABEL_32;
        case 8LL:
          uint64_t v25 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
          goto LABEL_32;
        case 9LL:
          uint64_t v26 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
          goto LABEL_19;
        case 10LL:
          uint64_t v26 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
          goto LABEL_19;
        case 11LL:
          uint64_t v26 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
LABEL_19:
          uint64_t v27 = v15 + v26;
          swift_beginAccess(v15 + v26, v37, 33LL, 0LL);
          uint64_t v28 = v5;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v27, a2, a3);
          goto LABEL_36;
        case 12LL:
          uint64_t v29 = v15
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID,  v37,  33LL,  0LL);
          uint64_t v28 = v5;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v29, a2, a3);
          goto LABEL_36;
        case 13LL:
          uint64_t v30 = v15
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID,  v37,  33LL,  0LL);
          uint64_t v28 = v5;
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v30, a2, a3);
          goto LABEL_36;
        case 14LL:
          uint64_t v31 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance;
          goto LABEL_24;
        case 15LL:
          uint64_t v31 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace;
LABEL_24:
          uint64_t v32 = v15 + v31;
          swift_beginAccess(v15 + v31, v37, 33LL, 0LL);
          uint64_t v28 = v5;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v32, a2, a3);
          goto LABEL_36;
        case 16LL:
          uint64_t v20 = v15
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace,  v37,  33LL,  0LL);
          uint64_t v21 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0LL);
          uint64_t v22 = &qword_100356760;
          uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace;
          uint64_t v24 = &unk_1002C4338;
          goto LABEL_35;
        case 17LL:
          uint64_t v25 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
          goto LABEL_32;
        case 18LL:
          uint64_t v25 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
          goto LABEL_32;
        case 19LL:
          uint64_t v25 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
          goto LABEL_32;
        case 20LL:
          uint64_t v25 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
          goto LABEL_32;
        case 21LL:
          uint64_t v25 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
          goto LABEL_32;
        case 22LL:
          uint64_t v25 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
LABEL_32:
          uint64_t v33 = v15 + v25;
          swift_beginAccess(v15 + v25, v37, 33LL, 0LL);
          uint64_t v28 = v5;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v33, a2, a3);
          goto LABEL_36;
        case 23LL:
          uint64_t v34 = v15
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource,  v37,  33LL,  0LL);
          unint64_t v35 = sub_100149DE4();
          uint64_t v28 = v5;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v34,  &type metadata for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType,  v35,  a2,  a3);
          goto LABEL_36;
        case 24LL:
          uint64_t v20 = v15
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState,  v37,  33LL,  0LL);
          uint64_t v21 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL);
          uint64_t v22 = &qword_100356778;
          uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState;
          uint64_t v24 = &unk_1002C44A0;
LABEL_35:
          uint64_t v36 = sub_10000FD98(v22, v23, (uint64_t)v24);
          uint64_t v28 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v20, v21, v36, a2, a3);
LABEL_36:
          uint64_t v5 = v28;
          swift_endAccess(v37);
          break;
        default:
          break;
      }

      uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return swift_release(v15);
}

uint64_t sub_1000F0A6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL) + 20));
  uint64_t v10 = swift_retain(v9);
  sub_1000F1138(v10, a1, a2, a3);
  if (v4) {
    return swift_release(v9);
  }
  sub_1000F12C4(v9, a1, a2, a3);
  sub_1000F1450(v9, a1, a2, a3);
  uint64_t v12 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count,  v36,  0LL,  0LL);
  if ((v12[1] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v12, 4LL, a2, a3);
  }
  uint64_t v13 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM,  v54,  0LL,  0LL);
  if ((*(_BYTE *)(v13 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(5LL, a2, a3, *(double *)v13);
  }
  uint64_t v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM,  v53,  0LL,  0LL);
  if ((*(_BYTE *)(v14 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(6LL, a2, a3, *(double *)v14);
  }
  uint64_t v15 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended,  v52,  0LL,  0LL);
  if ((v15[1] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v15, 7LL, a2, a3);
  }
  uint64_t v16 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended,  v51,  0LL,  0LL);
  if ((v16[1] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v16, 8LL, a2, a3);
  }
  uint64_t v17 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm,  v50,  0LL,  0LL);
  if ((*(_BYTE *)(v17 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(9LL, a2, a3, *(double *)v17);
  }
  uint64_t v18 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence,  v49,  0LL,  0LL);
  if ((*(_BYTE *)(v18 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(10LL, a2, a3, *(double *)v18);
  }
  uint64_t v19 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime,  v48,  0LL,  0LL);
  if ((*(_BYTE *)(v19 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(11LL, a2, a3, *(double *)v19);
  }
  uint64_t v20 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID,  v47,  0LL,  0LL);
  if ((v20[1] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v20, 12LL, a2, a3);
  }
  uint64_t v21 = (uint64_t *)(v9
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID,  v46,  0LL,  0LL);
  uint64_t v22 = v21[1];
  if (v22)
  {
    uint64_t v23 = *v21;
    swift_bridgeObjectRetain(v21[1]);
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v23, v22, 13LL, a2, a3);
    swift_bridgeObjectRelease(v22);
  }

  uint64_t v24 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance,  v45,  0LL,  0LL);
  int v25 = *v24;
  if (v25 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v25 & 1, 14LL, a2, a3);
  }
  uint64_t v26 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace,  v44,  0LL,  0LL);
  int v27 = *v26;
  if (v27 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v27 & 1, 15LL, a2, a3);
  }
  sub_1000F15DC(v9, a1, a2, a3);
  uint64_t v28 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount,  v43,  0LL,  0LL);
  if ((v28[1] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v28, 17LL, a2, a3);
  }
  uint64_t v29 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType,  v42,  0LL,  0LL);
  if ((v29[1] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v29, 18LL, a2, a3);
  }
  uint64_t v30 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState,  v41,  0LL,  0LL);
  if ((v30[1] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v30, 19LL, a2, a3);
  }
  uint64_t v31 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm,  v40,  0LL,  0LL);
  if ((v31[1] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v31, 20LL, a2, a3);
  }
  uint64_t v32 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm,  v39,  0LL,  0LL);
  if ((v32[1] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v32, 21LL, a2, a3);
  }
  uint64_t v33 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed,  v38,  0LL,  0LL);
  if ((v33[1] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v33, 22LL, a2, a3);
  }
  uint64_t v34 = (char *)(v9
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource,  v37,  0LL,  0LL);
  if (*v34 != 6)
  {
    char v55 = *v34;
    unint64_t v35 = sub_100149DE4();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v55,  23LL,  &type metadata for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType,  v35,  a2,  a3);
  }

  sub_1000F1768(v9, a1, a2, a3);
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000F1138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355538);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v15 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000F12C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355538);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v15 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000F1450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355538);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v15 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000F15DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003555E8);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_1003555E8);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  uint64_t v15 = sub_10000FD98( &qword_100356760,  type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace,  (uint64_t)&unk_1002C4338);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 16LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t sub_1000F1768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003555F0);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_1003555F0);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  uint64_t v15 = sub_10000FD98( &qword_100356778,  type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState,  (uint64_t)&unk_1002C44A0);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 24LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000F18F4(uint64_t a1, uint64_t a2)
{
  return sub_100065AC0( a1,  a2,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  (uint64_t (*)(uint64_t, uint64_t))sub_1000F191C) & 1;
}

BOOL sub_1000F191C(uint64_t a1, uint64_t a2)
{
  uint64_t v172 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL);
  uint64_t v169 = *(void *)(v172 - 8);
  __chkstk_darwin(v172);
  uint64_t v173 = (uint64_t)&v167 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v168 = sub_100003A0C(&qword_10035C498);
  __chkstk_darwin(v168);
  uint64_t v174 = (uint64_t)&v167 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100003A0C(&qword_1003555F0);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v171 = (uint64_t)&v167 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v170 = (uint64_t)&v167 - v9;
  uint64_t v180 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0LL);
  uint64_t v178 = *(void *)(v180 - 8);
  __chkstk_darwin(v180);
  uint64_t v175 = (uint64_t)&v167 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v177 = sub_100003A0C(&qword_10035C4A0);
  __chkstk_darwin(v177);
  uint64_t v181 = (uint64_t)&v167 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100003A0C(&qword_1003555E8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v176 = (uint64_t)&v167 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v179 = (uint64_t)&v167 - v15;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v191 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v187 = (uint64_t)&v167 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100003A0C(&qword_10035C418);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v183 = (uint64_t)&v167 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v185 = (uint64_t)&v167 - v22;
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v167 - v23;
  uint64_t v25 = sub_100003A0C(&qword_100355538);
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v182 = (uint64_t)&v167 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v186 = (char *)&v167 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v184 = (uint64_t)&v167 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v190 = (uint64_t)&v167 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v188 = (uint64_t)&v167 - v35;
  __chkstk_darwin(v34);
  uint64_t v37 = (char *)&v167 - v36;
  uint64_t v38 = a1;
  uint64_t v39 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess(v39, v239, 0LL, 0LL);
  sub_10000E6C0(v39, (uint64_t)v37, &qword_100355538);
  uint64_t v40 = a2
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess( a2 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp,  v238,  0LL,  0LL);
  uint64_t v189 = v18;
  uint64_t v41 = (uint64_t)&v24[*(int *)(v18 + 48)];
  sub_10000E6C0((uint64_t)v37, (uint64_t)v24, &qword_100355538);
  sub_10000E6C0(v40, v41, &qword_100355538);
  uint64_t v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v191 + 48);
  if (v42((uint64_t)v24, 1LL, v16) == 1)
  {
    swift_retain(v38);
    swift_retain(a2);
    sub_100015764((uint64_t)v37, &qword_100355538);
    uint64_t v43 = a2;
    if (v42(v41, 1LL, v16) == 1)
    {
      sub_100015764((uint64_t)v24, &qword_100355538);
      goto LABEL_8;
    }

LABEL_61:
  uint64_t v99 = v38
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  swift_beginAccess( v38 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime,  &v219,  0LL,  0LL);
  double v100 = *(double *)v99;
  char v101 = *(_BYTE *)(v99 + 8);
  uint64_t v102 = v43;
  uint64_t v103 = v43
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  swift_beginAccess( v43 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime,  &v218,  0LL,  0LL);
  if ((v101 & 1) != 0)
  {
    if ((*(_BYTE *)(v103 + 8) & 1) == 0) {
      goto LABEL_94;
    }
  }

  else if ((*(_BYTE *)(v103 + 8) & 1) != 0 || v100 != *(double *)v103)
  {
    goto LABEL_94;
  }

  uint64_t v104 = (int *)(v38
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID);
  swift_beginAccess( v38 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID,  &v217,  0LL,  0LL);
  int v105 = *v104;
  char v106 = *((_BYTE *)v104 + 4);
  uint64_t v107 = v43
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
  swift_beginAccess( v43 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID,  &v216,  0LL,  0LL);
  if ((v106 & 1) != 0)
  {
    if ((*(_BYTE *)(v107 + 4) & 1) == 0) {
      goto LABEL_94;
    }
  }

  else if ((*(_BYTE *)(v107 + 4) & 1) != 0 || v105 != *(_DWORD *)v107)
  {
    goto LABEL_94;
  }

  uint64_t v108 = (uint64_t *)(v38
                   + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess( v38 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID,  &v215,  0LL,  0LL);
  uint64_t v109 = *v108;
  uint64_t v110 = v108[1];
  uint64_t v111 = (void *)(v43
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess( v43 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID,  &v214,  0LL,  0LL);
  uint64_t v112 = v111[1];
  if (v110)
  {
    if (!v112 || (v109 != *v111 || v110 != v112) && (_stringCompareWithSmolCheck(_:_:expecting:)(v109, v110) & 1) == 0) {
      goto LABEL_94;
    }
  }

  else if (v112)
  {
    goto LABEL_94;
  }

  uint64_t v113 = (unsigned __int8 *)(v38
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  swift_beginAccess( v38 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance,  &v213,  0LL,  0LL);
  int v114 = *v113;
  uint64_t v115 = (unsigned __int8 *)(v43
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  swift_beginAccess( v43 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance,  &v212,  0LL,  0LL);
  int v116 = *v115;
  if (v114 == 2)
  {
    if (v116 != 2) {
      goto LABEL_94;
    }
  }

  else if (v116 == 2 || ((((v116 & 1) == 0) ^ v114) & 1) == 0)
  {
    goto LABEL_94;
  }

  uint64_t v117 = (unsigned __int8 *)(v38
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  swift_beginAccess( v38 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace,  &v211,  0LL,  0LL);
  int v118 = *v117;
  uint64_t v119 = (unsigned __int8 *)(v43
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  swift_beginAccess( v43 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace,  &v210,  0LL,  0LL);
  int v120 = *v119;
  if (v118 == 2)
  {
    if (v120 != 2) {
      goto LABEL_94;
    }
  }

  else if (v120 == 2 || ((((v120 & 1) == 0) ^ v118) & 1) == 0)
  {
    goto LABEL_94;
  }

  uint64_t v121 = v38
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess( v38 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace,  &v209,  0LL,  0LL);
  uint64_t v122 = v179;
  sub_10000E6C0(v121, v179, &qword_1003555E8);
  uint64_t v123 = v102
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess( v102 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace,  &v208,  0LL,  0LL);
  uint64_t v124 = v181;
  uint64_t v125 = v181 + *(int *)(v177 + 48);
  sub_10000E6C0(v122, v181, &qword_1003555E8);
  sub_10000E6C0(v123, v125, &qword_1003555E8);
  uint64_t v126 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v178 + 48);
  if (v126(v124, 1LL, v180) == 1)
  {
    sub_100015764(v179, &qword_1003555E8);
    if (v126(v125, 1LL, v180) == 1)
    {
      sub_100015764(v181, &qword_1003555E8);
      goto LABEL_96;
    }

  uint64_t v315 = v249
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceMapVector;
  swift_beginAccess( v249 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceMapVector,  &v1000,  0LL,  0LL);
  uint64_t v316 = v884;
  sub_10000E6C0(v315, v884, &qword_100364460);
  uint64_t v317 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceMapVector;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceMapVector,  &v999,  0LL,  0LL);
  uint64_t v318 = v886;
  uint64_t v319 = v886 + *(int *)(v880 + 48);
  sub_10000E6C0(v316, v886, &qword_100364460);
  sub_10000E6C0(v317, v319, &qword_100364460);
  uint64_t v320 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v881 + 48);
  uint64_t v321 = v882;
  if (v320(v318, 1LL, v882) == 1)
  {
    sub_100015764(v316, &qword_100364460);
    if (v320(v319, 1LL, v321) == 1)
    {
      sub_100015764(v886, &qword_100364460);
      goto LABEL_73;
    }

    goto LABEL_66;
  }

  uint64_t v322 = v318;
  uint64_t v323 = v876;
  sub_10000E6C0(v322, v876, &qword_100364460);
  if (v320(v319, 1LL, v321) == 1)
  {
    sub_100015764(v884, &qword_100364460);
    sub_100004090(v323, type metadata accessor for Proto_Gpsd_SetAssistanceMapVector);
LABEL_66:
    uint64_t v271 = &qword_100367598;
    v272 = v886;
    goto LABEL_67;
  }

  uint64_t v326 = v868;
  sub_100003E68(v319, v868, type metadata accessor for Proto_Gpsd_SetAssistanceMapVector);
  uint64_t v327 = sub_100275688(v323, v326);
  sub_100004090(v326, type metadata accessor for Proto_Gpsd_SetAssistanceMapVector);
  sub_100015764(v884, &qword_100364460);
  sub_100004090(v323, type metadata accessor for Proto_Gpsd_SetAssistanceMapVector);
  sub_100015764(v886, &qword_100364460);
  if ((v327 & 1) == 0) {
    goto LABEL_68;
  }
LABEL_73:
  uint64_t v328 = v249
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceMotionActivityContext;
  swift_beginAccess( v249 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceMotionActivityContext,  &v998,  0LL,  0LL);
  uint64_t v329 = v878;
  sub_10000E6C0(v328, v878, &qword_100364468);
  uint64_t v330 = v922
       + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceMotionActivityContext;
  swift_beginAccess( v922 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceMotionActivityContext,  &v997,  0LL,  0LL);
  uint64_t v331 = v879;
  uint64_t v332 = v879 + *(int *)(v872 + 48);
  sub_10000E6C0(v329, v879, &qword_100364468);
  sub_10000E6C0(v330, v332, &qword_100364468);
  uint64_t v333 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v873 + 48);
  uint64_t v334 = v875;
  if (v333(v331, 1LL, v875) == 1)
  {
    sub_100015764(v878, &qword_100364468);
    if (v333(v332, 1LL, v334) == 1)
    {
      sub_100015764(v879, &qword_100364468);
      goto LABEL_80;
    }

LABEL_93:
    sub_100015764(v181, &qword_10035C4A0);
    goto LABEL_94;
  }

  sub_10000E6C0(v181, v176, &qword_1003555E8);
  if (v126(v125, 1LL, v180) == 1)
  {
    sub_100015764(v179, &qword_1003555E8);
    sub_100004090(v176, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
    goto LABEL_93;
  }

  uint64_t v127 = v175;
  sub_100003E68(v125, v175, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  uint64_t v128 = v176;
  char v129 = sub_100065750(v176, v127, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  sub_100004090(v127, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  sub_100015764(v179, &qword_1003555E8);
  sub_100004090(v128, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  sub_100015764(v181, &qword_1003555E8);
  if ((v129 & 1) == 0) {
    goto LABEL_94;
  }
LABEL_96:
  uint64_t v130 = (int *)(v38
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount);
  swift_beginAccess( v38 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount,  &v207,  0LL,  0LL);
  int v131 = *v130;
  char v132 = *((_BYTE *)v130 + 4);
  uint64_t v133 = v102
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
  swift_beginAccess( v102 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount,  &v206,  0LL,  0LL);
  if ((v132 & 1) != 0)
  {
    if ((*(_BYTE *)(v133 + 4) & 1) == 0) {
      goto LABEL_94;
    }
  }

  else if ((*(_BYTE *)(v133 + 4) & 1) != 0 || v131 != *(_DWORD *)v133)
  {
    goto LABEL_94;
  }

  uint64_t v134 = (int *)(v38
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType);
  swift_beginAccess( v38 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType,  &v205,  0LL,  0LL);
  int v135 = *v134;
  char v136 = *((_BYTE *)v134 + 4);
  uint64_t v137 = v102
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
  swift_beginAccess( v102 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType,  &v204,  0LL,  0LL);
  if ((v136 & 1) != 0)
  {
    if ((*(_BYTE *)(v137 + 4) & 1) == 0) {
      goto LABEL_94;
    }
  }

  else if ((*(_BYTE *)(v137 + 4) & 1) != 0 || v135 != *(_DWORD *)v137)
  {
    goto LABEL_94;
  }

  uint64_t v138 = (int *)(v38
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState);
  swift_beginAccess( v38 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState,  &v203,  0LL,  0LL);
  int v139 = *v138;
  char v140 = *((_BYTE *)v138 + 4);
  uint64_t v141 = v102
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
  swift_beginAccess( v102 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState,  &v202,  0LL,  0LL);
  if ((v140 & 1) != 0)
  {
    if ((*(_BYTE *)(v141 + 4) & 1) == 0) {
      goto LABEL_94;
    }
  }

  else if ((*(_BYTE *)(v141 + 4) & 1) != 0 || v139 != *(_DWORD *)v141)
  {
    goto LABEL_94;
  }

  uint64_t v142 = (int *)(v38
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm);
  swift_beginAccess( v38 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm,  &v201,  0LL,  0LL);
  int v143 = *v142;
  char v144 = *((_BYTE *)v142 + 4);
  uint64_t v145 = v102
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
  swift_beginAccess( v102 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm,  &v200,  0LL,  0LL);
  if ((v144 & 1) != 0)
  {
    if ((*(_BYTE *)(v145 + 4) & 1) == 0) {
      goto LABEL_94;
    }
  }

  else if ((*(_BYTE *)(v145 + 4) & 1) != 0 || v143 != *(_DWORD *)v145)
  {
    goto LABEL_94;
  }

  uint64_t v146 = (int *)(v38
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm);
  swift_beginAccess( v38 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm,  &v199,  0LL,  0LL);
  int v147 = *v146;
  char v148 = *((_BYTE *)v146 + 4);
  uint64_t v149 = v102
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
  swift_beginAccess( v102 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm,  &v198,  0LL,  0LL);
  if ((v148 & 1) != 0)
  {
    if ((*(_BYTE *)(v149 + 4) & 1) == 0) {
      goto LABEL_94;
    }
  }

  else if ((*(_BYTE *)(v149 + 4) & 1) != 0 || v147 != *(_DWORD *)v149)
  {
    goto LABEL_94;
  }

  uint64_t v150 = (int *)(v38
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed);
  swift_beginAccess( v38 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed,  &v197,  0LL,  0LL);
  int v151 = *v150;
  char v152 = *((_BYTE *)v150 + 4);
  uint64_t v153 = v102
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
  swift_beginAccess( v102 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed,  &v196,  0LL,  0LL);
  if ((v152 & 1) != 0)
  {
    if ((*(_BYTE *)(v153 + 4) & 1) == 0) {
      goto LABEL_94;
    }
  }

  else if ((*(_BYTE *)(v153 + 4) & 1) != 0 || v151 != *(_DWORD *)v153)
  {
    goto LABEL_94;
  }

  char v154 = (unsigned __int8 *)(v38
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess( v38 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource,  &v195,  0LL,  0LL);
  int v155 = *v154;
  uint64_t v156 = (unsigned __int8 *)(v102
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess( v102 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource,  &v194,  0LL,  0LL);
  int v157 = *v156;
  if (v155 == 6)
  {
    if (v157 == 6) {
      goto LABEL_131;
    }
LABEL_94:
    swift_release(v38);
    uint64_t v67 = v102;
    goto LABEL_23;
  }

  if (v157 == 6 || v155 != v157) {
    goto LABEL_94;
  }
LABEL_131:
  uint64_t v158 = v38
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess( v38 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState,  &v193,  0LL,  0LL);
  uint64_t v159 = v170;
  sub_10000E6C0(v158, v170, &qword_1003555F0);
  uint64_t v160 = v102
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess( v102 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState,  &v192,  0LL,  0LL);
  uint64_t v161 = v174;
  uint64_t v162 = v174 + *(int *)(v168 + 48);
  sub_10000E6C0(v159, v174, &qword_1003555F0);
  sub_10000E6C0(v160, v162, &qword_1003555F0);
  char v163 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v169 + 48);
  if (v163(v161, 1LL, v172) == 1)
  {
    swift_release(v38);
    swift_release(v102);
    sub_100015764(v170, &qword_1003555F0);
    if (v163(v162, 1LL, v172) == 1)
    {
      sub_100015764(v174, &qword_1003555F0);
      return 1LL;
    }

LABEL_136:
    sub_100015764(v174, &qword_10035C498);
    return 0LL;
  }

  sub_10000E6C0(v174, v171, &qword_1003555F0);
  if (v163(v162, 1LL, v172) == 1)
  {
    swift_release(v38);
    swift_release(v102);
    sub_100015764(v170, &qword_1003555F0);
    sub_100004090(v171, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
    goto LABEL_136;
  }

  uint64_t v164 = v173;
  sub_100003E68(v162, v173, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  uint64_t v165 = v171;
  char v166 = sub_100112EE0(v171, v164);
  swift_release(v38);
  swift_release(v102);
  sub_100004090(v164, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  sub_100015764(v170, &qword_1003555F0);
  sub_100004090(v165, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  sub_100015764(v174, &qword_1003555F0);
  return (v166 & 1) != 0;
}

Swift::Int sub_1000F2D80()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &qword_100355858,  (uint64_t)&unk_1002C4708);
}

uint64_t sub_1000F2D9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD7C(a1, &qword_10037A7B8, &qword_10037A7C0, (uint64_t)sub_1000EF808, a2);
}

uint64_t sub_1000F2DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F0614(a1, a2, a3);
}

uint64_t sub_1000F2DCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F0A6C(a1, a2, a3);
}

uint64_t sub_1000F2DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C088,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  (uint64_t)&unk_1002C4680);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F2E30@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A7B0, (uint64_t)qword_10036A248, (uint64_t)sub_1000EF1F0, a1);
}

uint64_t sub_1000F2E4C(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356790,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  (uint64_t)&unk_1002C4608);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F2E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356790,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  (uint64_t)&unk_1002C4608);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000F2EDC()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A260);
  sub_10000E704(v0, (uint64_t)qword_10036A260);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 6 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32E0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "DS_UNKNOWN";
  *(void *)(v9 + 8) = 10LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "DS_GPS";
  *(void *)(v13 + 8) = 6LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "DS_ENERGY_BASED_CALIBRATED";
  *((void *)v15 + 1) = 26LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 3LL;
  *(void *)uint64_t v17 = "DS_ENERGY_BASED_UNCALIBRATED";
  *((void *)v17 + 1) = 28LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 4LL;
  *(void *)uint64_t v19 = "DS_CADENCE_BASED_CALIBRATED";
  *((void *)v19 + 1) = 27LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  void *v20 = 5LL;
  *(void *)uint64_t v21 = "DS_CADENCE_BASED_UNCALIBRATED";
  *((void *)v21 + 1) = 29LL;
  v21[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000F3110()
{
  return sub_100008C30(&qword_10037A7C8, (uint64_t)qword_10036A260, (uint64_t)sub_1000F2EDC);
}

uint64_t sub_1000F312C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A7C8, (uint64_t)qword_10036A260, (uint64_t)sub_1000F2EDC, a1);
}

uint64_t sub_1000F3148@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A7C8, (uint64_t)qword_10036A260, (uint64_t)sub_1000F2EDC, a1);
}

void *sub_1000F3164()
{
  return &unk_10033F138;
}

unint64_t sub_1000F3170()
{
  return 0xD000000000000022LL;
}

uint64_t sub_1000F318C(uint64_t a1)
{
  return sub_1000F31A4(a1, qword_10036A278, (uint64_t)"step_count_entry", 16LL);
}

uint64_t sub_1000F31A4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v5, a2);
  sub_10000E704(v5, (uint64_t)a2);
  uint64_t v6 = sub_100003A0C(&qword_1003516F8);
  uint64_t v7 = sub_100003A0C(&qword_100351700);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (v10 + 32) & ~v10;
  uint64_t v12 = swift_allocObject(v6, v11 + 3 * v9, v10 | 7);
  *(_OWORD *)(v12 + 16) = xmmword_1002B3310;
  uint64_t v13 = (void *)(v12 + v11);
  uint64_t v14 = v12 + v11 + *(int *)(v7 + 48);
  *uint64_t v13 = 1LL;
  *(void *)uint64_t v14 = "event_receipt_time";
  *(void *)(v14 + 8) = 18LL;
  *(_BYTE *)(v14 + 16) = 2;
  uint64_t v15 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v16 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v17 = *(void (**)(void))(*(void *)(v16 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v17)(v14, v15, v16);
  uint64_t v18 = (char *)v13 + v9 + *(int *)(v7 + 48);
  *(void *)((char *)v13 + v9) = 2LL;
  *(void *)uint64_t v18 = "client";
  *((void *)v18 + 1) = 6LL;
  v18[16] = 2;
  v17();
  uint64_t v19 = (uint64_t)v13 + 2 * v9 + *(int *)(v7 + 48);
  *(void *)((char *)v13 + 2 * v9) = 3LL;
  *(void *)uint64_t v19 = a3;
  *(void *)(v19 + 8) = a4;
  *(_BYTE *)(v19 + 16) = 2;
  v17();
  return _NameMap.init(dictionaryLiteral:)(v12);
}

uint64_t sub_1000F333C()
{
  return sub_100008C30(&qword_10037A7D0, (uint64_t)qword_10036A278, (uint64_t)sub_1000F318C);
}

uint64_t sub_1000F3358@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A7D0, (uint64_t)qword_10036A278, (uint64_t)sub_1000F318C, a1);
}

uint64_t sub_1000F3374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F33A8( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_StepCount,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  &qword_100356790,  (uint64_t)&unk_1002C4608);
}

uint64_t sub_1000F33A8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t v11 = v7;
  uint64_t v12 = a3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v8)
  {
    uint64_t v27 = a7;
    uint64_t v23 = v12;
    while ((v15 & 1) == 0)
    {
      switch(result)
      {
        case 3LL:
          uint64_t v20 = v11;
          uint64_t v26 = v11 + *(int *)(a4(0LL) + 28);
          uint64_t v21 = a5(0LL);
          uint64_t v22 = sub_10000FD98(a6, a5, a7);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v26, v21, v22, a2, v23);
          uint64_t v11 = v20;
          uint64_t v12 = v23;
          a7 = v27;
          break;
        case 2LL:
          uint64_t v16 = a4(0LL);
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v11 + *(int *)(v16 + 24), a2, v12);
          break;
        case 1LL:
          uint64_t v17 = v11 + *(int *)(a4(0LL) + 20);
          uint64_t v18 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
          uint64_t v19 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v17, v18, v19, a2, v12);
          a7 = v27;
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, v12);
    }
  }

  return result;
}