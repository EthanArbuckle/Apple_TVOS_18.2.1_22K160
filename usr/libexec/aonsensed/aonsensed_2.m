uint64_t sub_1000F3578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DCC00( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_StepCount,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000F359C);
}

uint64_t sub_1000F359C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_1003555F8);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_1003555F8);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
  uint64_t v15 = sub_10000FD98( &qword_100356790,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  (uint64_t)&unk_1002C4608);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

Swift::Int sub_1000F3714()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_StepCount,  &qword_100355860,  (uint64_t)&unk_1002C4898);
}

uint64_t sub_1000F3730@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000DCE80(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, a2);
}

uint64_t sub_1000F373C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C080,  type metadata accessor for CLP_LogEntry_PrivateData_StepCount,  (uint64_t)&unk_1002C4810);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F378C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A7D0, (uint64_t)qword_10036A278, (uint64_t)sub_1000F318C, a1);
}

uint64_t sub_1000F37A8(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003567A8,  type metadata accessor for CLP_LogEntry_PrivateData_StepCount,  (uint64_t)&unk_1002C4798);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F37E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003567A8,  type metadata accessor for CLP_LogEntry_PrivateData_StepCount,  (uint64_t)&unk_1002C4798);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000F3838()
{
  return &unk_10033F148;
}

unint64_t sub_1000F3844()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_1000F3860()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A290);
  sub_10000E704(v0, (uint64_t)qword_10036A290);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  void *v8 = 1LL;
  *(void *)uint64_t v9 = "x";
  *(void *)(v9 + 8) = 1LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "y";
  *((void *)v13 + 1) = 1LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "z";
  *(void *)(v14 + 8) = 1LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000F39EC()
{
  return sub_100008C30(&qword_10037A7D8, (uint64_t)qword_10036A290, (uint64_t)sub_1000F3860);
}

uint64_t sub_1000F3A08@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A7D8, (uint64_t)qword_10036A290, (uint64_t)sub_1000F3860, a1);
}

uint64_t sub_1000F3A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v11 & 1) != 0) {
      break;
    }
    switch(result)
    {
      case 3LL:
        uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL) + 28);
LABEL_3:
        dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + v9, a2, a3);
        break;
      case 2LL:
        uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL) + 24);
        goto LABEL_3;
      case 1LL:
        uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL) + 20);
        goto LABEL_3;
    }

    uint64_t v4 = 0LL;
    uint64_t v7 = a2;
  }

  return result;
}

uint64_t sub_1000F3AE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
  uint64_t v10 = result;
  uint64_t v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 4) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(1LL, a2, a3, *(float *)v11);
  }
  if (!v4)
  {
    uint64_t v12 = v5 + *(int *)(v10 + 24);
    if ((*(_BYTE *)(v12 + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(2LL, a2, a3, *(float *)v12);
    }
    uint64_t v13 = v5 + *(int *)(v10 + 28);
    if ((*(_BYTE *)(v13 + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(3LL, a2, a3, *(float *)v13);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_1000F3BE4()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3,  &qword_100355868,  (uint64_t)&unk_1002C4A00);
}

uint64_t sub_1000F3C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F3A24(a1, a2, a3);
}

uint64_t sub_1000F3C14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F3AE8(a1, a2, a3);
}

uint64_t sub_1000F3C28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C078,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3,  (uint64_t)&unk_1002C4978);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F3C78@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A7D8, (uint64_t)qword_10036A290, (uint64_t)sub_1000F3860, a1);
}

uint64_t sub_1000F3C94(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003567C0,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3,  (uint64_t)&unk_1002C4900);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F3CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003567C0,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3,  (uint64_t)&unk_1002C4900);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000F3D28()
{
  return &unk_10033F158;
}

unint64_t sub_1000F3D34()
{
  return 0xD000000000000030LL;
}

uint64_t sub_1000F3D50()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A2A8);
  sub_10000E704(v0, (uint64_t)qword_10036A2A8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "w";
  *(void *)(v9 + 8) = 1LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "x";
  *(void *)(v13 + 8) = 1LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "y";
  *((void *)v15 + 1) = 1LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "z";
  *((void *)v17 + 1) = 1LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000F3F08()
{
  return sub_100008C30(&qword_10037A7E0, (uint64_t)qword_10036A2A8, (uint64_t)sub_1000F3D50);
}

uint64_t sub_1000F3F24@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A7E0, (uint64_t)qword_10036A2A8, (uint64_t)sub_1000F3D50, a1);
}

uint64_t sub_1000F3F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F3F5C(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000F3F5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v5)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v11 = *(int *)(a4(0LL) + 20);
          goto LABEL_5;
        case 2LL:
          uint64_t v11 = *(int *)(a4(0LL) + 24);
          goto LABEL_5;
        case 3LL:
          uint64_t v11 = *(int *)(a4(0LL) + 28);
          goto LABEL_5;
        case 4LL:
          uint64_t v11 = *(int *)(a4(0LL) + 32);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v4 + v11, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000F4054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F4070(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000F4070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = v4;
  uint64_t result = a4(0LL);
  uint64_t v11 = (int *)result;
  uint64_t v12 = v6 + *(int *)(result + 20);
  if ((*(_BYTE *)(v12 + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1LL, a2, a3, *(double *)v12);
  }
  if (!v5)
  {
    uint64_t v13 = v6 + v11[6];
    if ((*(_BYTE *)(v13 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2LL, a2, a3, *(double *)v13);
    }
    uint64_t v14 = v6 + v11[7];
    if ((*(_BYTE *)(v14 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3LL, a2, a3, *(double *)v14);
    }
    uint64_t v15 = v6 + v11[8];
    if ((*(_BYTE *)(v15 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(4LL, a2, a3, *(double *)v15);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_1000F419C(uint64_t a1, uint64_t a2)
{
  return sub_10011E088(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4) & 1;
}

Swift::Int sub_1000F41BC()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4,  &qword_100355870,  (uint64_t)&unk_1002C4B68);
}

uint64_t sub_1000F41D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C070,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4,  (uint64_t)&unk_1002C4AE0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F4228@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A7E0, (uint64_t)qword_10036A2A8, (uint64_t)sub_1000F3D50, a1);
}

uint64_t sub_1000F4244(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003567D8,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4,  (uint64_t)&unk_1002C4A68);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F4284(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003567D8,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4,  (uint64_t)&unk_1002C4A68);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000F42D8()
{
  return &unk_10033F168;
}

unint64_t sub_1000F42E4()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_1000F4300()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A2C0);
  sub_10000E704(v0, (uint64_t)qword_10036A2C0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v31 = swift_allocObject(v1, v6 + 11 * v4, v5 | 7);
  *(_OWORD *)(v31 + 16) = xmmword_1002B42D0;
  uint64_t v7 = v31 + v6;
  uint64_t v8 = v31 + v6 + *(int *)(v2 + 48);
  *(void *)(v31 + v6) = 1LL;
  *(void *)uint64_t v8 = "magnetic_field";
  *(void *)(v8 + 8) = 14LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "unassisted_magnetic_field";
  *(void *)(v12 + 8) = 25LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 3LL;
  *(void *)uint64_t v14 = "magnetic_heading";
  *((void *)v14 + 1) = 16LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v7 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *uint64_t v15 = 4LL;
  *(void *)uint64_t v16 = "true_heading";
  *((void *)v16 + 1) = 12LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v7 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)v18 = "accuracy";
  *((void *)v18 + 1) = 8LL;
  v18[16] = 2;
  v11();
  v19 = (void *)(v7 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  void *v19 = 6LL;
  *(void *)v20 = "calibration_level";
  *((void *)v20 + 1) = 17LL;
  v20[16] = 2;
  v11();
  v21 = (void *)(v7 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 7LL;
  *(void *)v22 = "using_database_bias";
  *((void *)v22 + 1) = 19LL;
  v22[16] = 2;
  v11();
  v23 = (void *)(v7 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  void *v23 = 8LL;
  *(void *)v24 = "magnitude";
  *((void *)v24 + 1) = 9LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 9LL;
  *(void *)uint64_t v25 = "inclination";
  *(void *)(v25 + 8) = 11LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  v26 = (void *)(v7 + 9 * v4);
  v27 = (char *)v26 + *(int *)(v2 + 48);
  void *v26 = 10LL;
  *(void *)v27 = "horizontal";
  *((void *)v27 + 1) = 10LL;
  v27[16] = 2;
  v11();
  v28 = (void *)(v7 + 10 * v4);
  v29 = (char *)v28 + *(int *)(v2 + 48);
  void *v28 = 11LL;
  *(void *)v29 = "quaternion";
  *((void *)v29 + 1) = 10LL;
  v29[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v31);
}

uint64_t sub_1000F4640()
{
  return sub_100008C30(&qword_10037A7E8, (uint64_t)qword_10036A2C0, (uint64_t)sub_1000F4300);
}

uint64_t sub_1000F465C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A7E8, (uint64_t)qword_10036A2C0, (uint64_t)sub_1000F4300, a1);
}

uint64_t sub_1000F4678()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0LL);
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL);
  v4(v2, 1LL, 1LL, v3);
  v4( v1 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField,  1LL,  1LL,  v3);
  uint64_t v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  uint64_t v6 = v1
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  uint64_t v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel) = 8;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias) = 2;
  uint64_t v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  *(_DWORD *)uint64_t v10 = 0;
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  *(_BYTE *)(v10 + 4) = 1;
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))( v11,  1LL,  1LL,  v12);
  qword_10037A7F8 = v1;
  return result;
}

uint64_t sub_1000F47DC(uint64_t a1)
{
  uint64_t v3 = sub_100003A0C(&qword_100355608);
  __chkstk_darwin(v3);
  uint64_t v46 = (uint64_t)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100003A0C(&qword_100355600);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL);
  v10(v8, 1LL, 1LL, v9);
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  v10( v1 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField,  1LL,  1LL,  v9);
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  *(_DWORD *)uint64_t v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  uint64_t v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  *(_DWORD *)uint64_t v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  uint64_t v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  *(_DWORD *)uint64_t v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  v40 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel) = 8;
  uint64_t v15 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  *uint64_t v15 = 2;
  uint64_t v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  v41 = v15;
  uint64_t v42 = v16;
  *(_DWORD *)uint64_t v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  uint64_t v43 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  *(_DWORD *)uint64_t v17 = 0;
  *(_BYTE *)(v17 + 4) = 1;
  uint64_t v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  uint64_t v44 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  *(_DWORD *)uint64_t v18 = 0;
  *(_BYTE *)(v18 + 4) = 1;
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  uint64_t v45 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v19, 1LL, 1LL, v20);
  uint64_t v21 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField,  v66,  0LL,  0LL);
  sub_10000E6C0(v21, (uint64_t)v7, &qword_100355600);
  swift_beginAccess(v8, v65, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v7, v8, &qword_100355600);
  swift_endAccess(v65);
  uint64_t v22 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField,  v65,  0LL,  0LL);
  sub_10000E6C0(v22, (uint64_t)v7, &qword_100355600);
  swift_beginAccess(v11, v64, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v7, v11, &qword_100355600);
  swift_endAccess(v64);
  uint64_t v23 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading,  v64,  0LL,  0LL);
  LODWORD(v22) = *(_DWORD *)v23;
  LOBYTE(v23) = *(_BYTE *)(v23 + 4);
  swift_beginAccess(v12, v63, 1LL, 0LL);
  *(_DWORD *)uint64_t v12 = v22;
  *(_BYTE *)(v12 + 4) = v23;
  uint64_t v24 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading,  v62,  0LL,  0LL);
  LODWORD(v23) = *(_DWORD *)v24;
  LOBYTE(v24) = *(_BYTE *)(v24 + 4);
  swift_beginAccess(v13, v61, 1LL, 0LL);
  *(_DWORD *)uint64_t v13 = v23;
  *(_BYTE *)(v13 + 4) = v24;
  uint64_t v25 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy,  v60,  0LL,  0LL);
  LODWORD(v13) = *(_DWORD *)v25;
  LOBYTE(v25) = *(_BYTE *)(v25 + 4);
  swift_beginAccess(v14, &v59, 1LL, 0LL);
  *(_DWORD *)uint64_t v14 = v13;
  *(_BYTE *)(v14 + 4) = v25;
  v26 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel,  &v58,  0LL,  0LL);
  LOBYTE(v26) = *v26;
  v27 = v40;
  swift_beginAccess(v40, &v57, 1LL, 0LL);
  _BYTE *v27 = (_BYTE)v26;
  v28 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias,  &v56,  0LL,  0LL);
  LOBYTE(v28) = *v28;
  v29 = v41;
  swift_beginAccess(v41, &v55, 1LL, 0LL);
  _BYTE *v29 = (_BYTE)v28;
  uint64_t v30 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude,  &v54,  0LL,  0LL);
  LODWORD(v29) = *(_DWORD *)v30;
  LOBYTE(v30) = *(_BYTE *)(v30 + 4);
  uint64_t v31 = v42;
  swift_beginAccess(v42, &v53, 1LL, 0LL);
  *(_DWORD *)uint64_t v31 = (_DWORD)v29;
  *(_BYTE *)(v31 + 4) = v30;
  uint64_t v32 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination,  &v52,  0LL,  0LL);
  LODWORD(v29) = *(_DWORD *)v32;
  LOBYTE(v32) = *(_BYTE *)(v32 + 4);
  uint64_t v33 = v43;
  swift_beginAccess(v43, &v51, 1LL, 0LL);
  *(_DWORD *)uint64_t v33 = (_DWORD)v29;
  *(_BYTE *)(v33 + 4) = v32;
  uint64_t v34 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal,  &v50,  0LL,  0LL);
  LODWORD(v29) = *(_DWORD *)v34;
  LOBYTE(v34) = *(_BYTE *)(v34 + 4);
  uint64_t v35 = v44;
  swift_beginAccess(v44, &v49, 1LL, 0LL);
  *(_DWORD *)uint64_t v35 = (_DWORD)v29;
  *(_BYTE *)(v35 + 4) = v34;
  uint64_t v36 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion,  &v48,  0LL,  0LL);
  uint64_t v37 = v46;
  sub_10000E6C0(v36, v46, &qword_100355608);
  swift_release(a1);
  uint64_t v38 = v45;
  swift_beginAccess(v45, v47, 33LL, 0LL);
  sub_10000E5D4(v37, v38, &qword_100355608);
  swift_endAccess(v47);
  return v1;
}

uint64_t sub_1000F4D30()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_1000F4DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v9)) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v3 + v9);
    uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0LL);
    uint64_t v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v13 = swift_retain(v10);
    sub_1000F47DC(v13);
    uint64_t v14 = *(void *)(v6 + v9);
    *(void *)(v6 + v9) = v12;
    swift_release(v14);
  }

  uint64_t v15 = *(void *)(v6 + v9);
  swift_retain(v15);
  uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1LL:
          uint64_t v19 = OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
          goto LABEL_9;
        case 2LL:
          uint64_t v19 = OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
LABEL_9:
          uint64_t v20 = v15 + v19;
          swift_beginAccess(v15 + v19, v32, 33LL, 0LL);
          uint64_t v21 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
          uint64_t v22 = &qword_1003567C0;
          uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3;
          uint64_t v24 = &unk_1002C4900;
          goto LABEL_20;
        case 3LL:
          uint64_t v25 = OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
          goto LABEL_18;
        case 4LL:
          uint64_t v25 = OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
          goto LABEL_18;
        case 5LL:
          uint64_t v25 = OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
          goto LABEL_18;
        case 6LL:
          uint64_t v26 = v15
              + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel,  v32,  33LL,  0LL);
          unint64_t v27 = sub_10014A6EC();
          uint64_t v28 = v5;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v26,  &type metadata for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel,  v27,  a2,  a3);
          goto LABEL_21;
        case 7LL:
          uint64_t v29 = v15
              + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias,  v32,  33LL,  0LL);
          uint64_t v28 = v5;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v29, a2, a3);
          goto LABEL_21;
        case 8LL:
          uint64_t v25 = OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
          goto LABEL_18;
        case 9LL:
          uint64_t v25 = OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
          goto LABEL_18;
        case 10LL:
          uint64_t v25 = OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
LABEL_18:
          uint64_t v30 = v15 + v25;
          swift_beginAccess(v15 + v25, v32, 33LL, 0LL);
          uint64_t v28 = v5;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v30, a2, a3);
          goto LABEL_21;
        case 11LL:
          uint64_t v20 = v15
              + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion,  v32,  33LL,  0LL);
          uint64_t v21 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0LL);
          uint64_t v22 = &qword_1003567D8;
          uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4;
          uint64_t v24 = &unk_1002C4A68;
LABEL_20:
          uint64_t v31 = sub_10000FD98(v22, v23, (uint64_t)v24);
          uint64_t v28 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v20, v21, v31, a2, a3);
LABEL_21:
          uint64_t v5 = v28;
          swift_endAccess(v32);
          break;
        default:
          break;
      }

      uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return swift_release(v15);
}

uint64_t sub_1000F5090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0LL) + 20));
  uint64_t v10 = swift_retain(v9);
  sub_1000F53E0(v10, a1, a2, a3);
  if (v4) {
    return swift_release(v9);
  }
  sub_1000F556C(v9, a1, a2, a3);
  uint64_t v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading,  &v22,  0LL,  0LL);
  if ((*(_BYTE *)(v12 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(3LL, a2, a3, *(float *)v12);
  }
  uint64_t v13 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading,  v23,  0LL,  0LL);
  if ((*(_BYTE *)(v13 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(4LL, a2, a3, *(float *)v13);
  }
  uint64_t v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy,  v29,  0LL,  0LL);
  if ((*(_BYTE *)(v14 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(5LL, a2, a3, *(float *)v14);
  }
  uint64_t v15 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel,  v28,  0LL,  0LL);
  if (*v15 != 8)
  {
    v27[0] = *v15;
    unint64_t v16 = sub_10014A6EC();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v27,  6LL,  &type metadata for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel,  v16,  a2,  a3);
  }

  char v17 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias,  v27,  0LL,  0LL);
  int v18 = *v17;
  if (v18 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v18 & 1, 7LL, a2, a3);
  }
  uint64_t v19 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude,  v26,  0LL,  0LL);
  if ((*(_BYTE *)(v19 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(8LL, a2, a3, *(float *)v19);
  }
  uint64_t v20 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination,  v25,  0LL,  0LL);
  if ((*(_BYTE *)(v20 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(9LL, a2, a3, *(float *)v20);
  }
  uint64_t v21 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal,  v24,  0LL,  0LL);
  if ((*(_BYTE *)(v21 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(10LL, a2, a3, *(float *)v21);
  }
  sub_1000F56F8(v9, a1, a2, a3);
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000F53E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355600);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355600);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  uint64_t v15 = sub_10000FD98( &qword_1003567C0,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3,  (uint64_t)&unk_1002C4900);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000F556C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355600);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355600);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  uint64_t v15 = sub_10000FD98( &qword_1003567C0,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3,  (uint64_t)&unk_1002C4900);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000F56F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355608);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355608);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  uint64_t v15 = sub_10000FD98( &qword_1003567D8,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4,  (uint64_t)&unk_1002C4A68);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 11LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000F5884(uint64_t a1, uint64_t a2)
{
  return sub_100065AC0( a1,  a2,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  (uint64_t (*)(uint64_t, uint64_t))sub_1000F58AC) & 1;
}

BOOL sub_1000F58AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0LL);
  uint64_t v93 = *(void *)(v4 - 8);
  uint64_t v94 = v4;
  __chkstk_darwin(v4);
  uint64_t v90 = (uint64_t)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v92 = sub_100003A0C(&qword_10035C480);
  __chkstk_darwin(v92);
  uint64_t v96 = (uint64_t)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100003A0C(&qword_100355608);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v91 = (uint64_t)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v95 = (uint64_t)&v89 - v10;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
  uint64_t v103 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v98 = (uint64_t)&v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100003A0C(&qword_10035C478);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v100 = (uint64_t)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  char v17 = (char *)&v89 - v16;
  uint64_t v18 = sub_100003A0C(&qword_100355600);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v97 = (uint64_t)&v89 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v102 = (uint64_t)&v89 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v101 = (uint64_t)&v89 - v24;
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v89 - v25;
  uint64_t v27 = a1;
  uint64_t v28 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess(v28, v125, 0LL, 0LL);
  sub_10000E6C0(v28, (uint64_t)v26, &qword_100355600);
  uint64_t v29 = a2
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess( a2 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField,  v124,  0LL,  0LL);
  uint64_t v99 = v13;
  uint64_t v30 = (uint64_t)&v17[*(int *)(v13 + 48)];
  sub_10000E6C0((uint64_t)v26, (uint64_t)v17, &qword_100355600);
  uint64_t v31 = v29;
  uint64_t v32 = v11;
  sub_10000E6C0(v31, v30, &qword_100355600);
  uint64_t v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v103 + 48);
  if (v33((uint64_t)v17, 1LL, v11) == 1)
  {
    swift_retain(v27);
    swift_retain(a2);
    sub_100015764((uint64_t)v26, &qword_100355600);
    uint64_t v34 = v27;
    if (v33(v30, 1LL, v11) == 1)
    {
      sub_100015764((uint64_t)v17, &qword_100355600);
      goto LABEL_8;
    }

LABEL_62:
    sub_100015764(v96, &qword_10035C480);
    return 0LL;
  }

  sub_10000E6C0(v96, v91, &qword_100355608);
  if (v84(v82, 1LL, v83) == 1)
  {
    swift_release(v34);
    swift_release(a2);
    sub_100015764(v95, &qword_100355608);
    sub_100004090(v91, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
    goto LABEL_62;
  }

  uint64_t v86 = v90;
  sub_100003E68(v82, v90, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  uint64_t v87 = v91;
  char v88 = sub_10011E088(v91, v86, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  swift_release(v34);
  swift_release(a2);
  sub_100004090(v86, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  sub_100015764(v95, &qword_100355608);
  sub_100004090(v87, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  sub_100015764(v96, &qword_100355608);
  return (v88 & 1) != 0;
}

Swift::Int sub_1000F63D0()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  &qword_100355878,  (uint64_t)&unk_1002C4CD0);
}

uint64_t sub_1000F63EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD7C(a1, &qword_10037A7F0, &qword_10037A7F8, (uint64_t)sub_1000F4678, a2);
}

uint64_t sub_1000F6408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F4DA0(a1, a2, a3);
}

uint64_t sub_1000F641C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F5090(a1, a2, a3);
}

uint64_t sub_1000F6430(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C068,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  (uint64_t)&unk_1002C4C48);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F6480@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A7E8, (uint64_t)qword_10036A2C0, (uint64_t)sub_1000F4300, a1);
}

uint64_t sub_1000F649C(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003567F0,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  (uint64_t)&unk_1002C4BD0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F64DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003567F0,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  (uint64_t)&unk_1002C4BD0);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000F6530()
{
  return &unk_10033F178;
}

unint64_t sub_1000F653C()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_1000F6558()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A2D8);
  sub_10000E704(v0, (uint64_t)qword_10036A2D8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32F0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "timestamp";
  *(void *)(v9 + 8) = 9LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "compass";
  *(void *)(v13 + 8) = 7LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "compass_cal_quality";
  *((void *)v15 + 1) = 19LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  char v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)char v17 = "gyro_magnitude";
  *((void *)v17 + 1) = 14LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 5LL;
  *(void *)uint64_t v18 = "is_location_available";
  *(void *)(v18 + 8) = 21LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000F6768()
{
  return sub_100008C30(&qword_10037A800, (uint64_t)qword_10036A2D8, (uint64_t)sub_1000F6558);
}

uint64_t sub_1000F6784@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A800, (uint64_t)qword_10036A2D8, (uint64_t)sub_1000F6558, a1);
}

uint64_t sub_1000F67A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v12 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0LL) + 20);
          uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
          uint64_t v14 = (unint64_t *)&qword_1003552B8;
          uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          uint64_t v16 = &unk_1002BF798;
          goto LABEL_12;
        case 2LL:
          uint64_t v12 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0LL) + 24);
          uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0LL);
          uint64_t v14 = &qword_1003567F0;
          uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass;
          uint64_t v16 = &unk_1002C4BD0;
LABEL_12:
          uint64_t v17 = sub_10000FD98(v14, v15, (uint64_t)v16);
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v12, v13, v17, a2, a3);
          goto LABEL_6;
        case 3LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0LL) + 28);
          goto LABEL_5;
        case 4LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0LL) + 32);
LABEL_5:
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + v10, a2, a3);
          goto LABEL_6;
        case 5LL:
          uint64_t v18 = type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0LL);
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + *(int *)(v18 + 36), a2, a3);
LABEL_6:
          uint64_t v9 = v11;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000F6934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = sub_100105BC8(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
  if (!v4)
  {
    sub_1000F6A70(v5, a1, a2, a3);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0LL);
    uint64_t v11 = v10;
    uint64_t v12 = v5 + *(int *)(v10 + 28);
    if ((*(_BYTE *)(v12 + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(3LL, a2, a3, *(float *)v12);
    }
    uint64_t v13 = v5 + *(int *)(v11 + 32);
    if ((*(_BYTE *)(v13 + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(4LL, a2, a3, *(float *)v13);
    }
    int v14 = *(unsigned __int8 *)(v5 + *(int *)(v11 + 36));
    if (v14 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v14 & 1, 5LL, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_1000F6A70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355610);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_100355610);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
  uint64_t v15 = sub_10000FD98( &qword_1003567F0,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  (uint64_t)&unk_1002C4BD0);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

Swift::Int sub_1000F6BE8()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample,  &qword_100355880,  (uint64_t)&unk_1002C4E38);
}

uint64_t sub_1000F6C04@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = a2 + a1[6];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v6,  1LL,  1LL,  v7);
  uint64_t v9 = a1[8];
  uint64_t v10 = a2 + a1[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  uint64_t v11 = a2 + v9;
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  *(_BYTE *)(a2 + a1[9]) = 2;
  return result;
}

uint64_t sub_1000F6CB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F67A0(a1, a2, a3);
}

uint64_t sub_1000F6CC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F6934(a1, a2, a3);
}

uint64_t sub_1000F6CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C060,  type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample,  (uint64_t)&unk_1002C4DB0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F6D2C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A800, (uint64_t)qword_10036A2D8, (uint64_t)sub_1000F6558, a1);
}

uint64_t sub_1000F6D48(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100355888,  type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample,  (uint64_t)&unk_1002C4D38);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F6D88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100355888,  type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample,  (uint64_t)&unk_1002C4D38);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000F6DDC()
{
  return &unk_10033F188;
}

unint64_t sub_1000F6DE8()
{
  return 0xD000000000000020LL;
}

uint64_t sub_1000F6E04()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A2F0);
  sub_10000E704(v0, (uint64_t)qword_10036A2F0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3340;
  char v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  void *v8 = 1LL;
  *(void *)uint64_t v9 = "event_receipt_time";
  *(void *)(v9 + 8) = 18LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "sample";
  *((void *)v13 + 1) = 6LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000F6F5C()
{
  return sub_100008C30(&qword_10037A808, (uint64_t)qword_10036A2F0, (uint64_t)sub_1000F6E04);
}

uint64_t sub_1000F6F78@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A808, (uint64_t)qword_10036A2F0, (uint64_t)sub_1000F6E04, a1);
}

uint64_t sub_1000F6F94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FCCA0( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_Compass,  type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample,  &qword_100355888,  (uint64_t)&unk_1002C4D38);
}

uint64_t sub_1000F6FC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1000F70B0(v3, a1, a2, a3);
  if (!v4)
  {
    uint64_t v9 = *(void *)v3;
    if (*(void *)(*(void *)v3 + 16LL))
    {
      uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0LL);
      uint64_t v11 = sub_10000FD98( &qword_100355888,  type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample,  (uint64_t)&unk_1002C4D38);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v9, 2LL, v10, v11, a2, a3);
    }

    type metadata accessor for CLP_LogEntry_PrivateData_Compass(0LL);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_1000F70B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_Compass(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_100355538);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v15 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000F7224(uint64_t *a1, uint64_t *a2)
{
  return sub_10011893C( a1,  a2,  (uint64_t *)type metadata accessor for CLP_LogEntry_PrivateData_Compass,  type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample,  (uint64_t (*)(char *, char *))sub_10011BCD8) & 1;
}

Swift::Int sub_1000F7254()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_Compass,  &qword_100355890,  (uint64_t)&unk_1002C4FA0);
}

uint64_t sub_1000F7270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F6FC8(a1, a2, a3);
}

uint64_t sub_1000F7284(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C058,  type metadata accessor for CLP_LogEntry_PrivateData_Compass,  (uint64_t)&unk_1002C4F18);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F72D4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A808, (uint64_t)qword_10036A2F0, (uint64_t)sub_1000F6E04, a1);
}

uint64_t sub_1000F72F0(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356818,  type metadata accessor for CLP_LogEntry_PrivateData_Compass,  (uint64_t)&unk_1002C4EA0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F7330(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356818,  type metadata accessor for CLP_LogEntry_PrivateData_Compass,  (uint64_t)&unk_1002C4EA0);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000F7380()
{
  return &unk_10033F198;
}

unint64_t sub_1000F738C()
{
  return 0xD00000000000002FLL;
}

uint64_t sub_1000F73A8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A308);
  sub_10000E704(v0, (uint64_t)qword_10036A308);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 9 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3320;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "quaternion";
  *(void *)(v9 + 8) = 10LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "user_acceleration";
  *(void *)(v13 + 8) = 17LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  int v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *int v14 = 3LL;
  *(void *)uint64_t v15 = "rotation_rate";
  *((void *)v15 + 1) = 13LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "magnetic_field";
  *((void *)v17 + 1) = 14LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  void *v18 = 5LL;
  *(void *)uint64_t v19 = "magnetic_field_calibration_level";
  *((void *)v19 + 1) = 32LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  void *v20 = 6LL;
  *(void *)uint64_t v21 = "doing_yaw_correction";
  *((void *)v21 + 1) = 20LL;
  v21[16] = 2;
  v12();
  uint64_t v22 = (void *)(v8 + 6 * v4);
  uint64_t v23 = (char *)v22 + *(int *)(v2 + 48);
  void *v22 = 7LL;
  *(void *)uint64_t v23 = "doing_bias_estimation";
  *((void *)v23 + 1) = 21LL;
  v23[16] = 2;
  v12();
  uint64_t v24 = (void *)(v8 + 7 * v4);
  uint64_t v25 = (char *)v24 + *(int *)(v2 + 48);
  void *v24 = 8LL;
  *(void *)uint64_t v25 = "is_initialized";
  *((void *)v25 + 1) = 14LL;
  v25[16] = 2;
  v12();
  uint64_t v26 = v8 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 8 * v4) = 9LL;
  *(void *)uint64_t v26 = "heading";
  *(void *)(v26 + 8) = 7LL;
  *(_BYTE *)(v26 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000F7694()
{
  return sub_100008C30(&qword_10037A810, (uint64_t)qword_10036A308, (uint64_t)sub_1000F73A8);
}

uint64_t sub_1000F76B0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A810, (uint64_t)qword_10036A308, (uint64_t)sub_1000F73A8, a1);
}

uint64_t sub_1000F76CC()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0LL);
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 1LL, 1LL, v3);
  uint64_t v4 = v1
     + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL);
  v6(v4, 1LL, 1LL, v5);
  v6( v1 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate,  1LL,  1LL,  v5);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v6)( v1 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField,  1LL,  1LL,  v5);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel) = 8;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection) = 2;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation) = 2;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p) = 2;
  uint64_t v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  qword_10037A820 = v1;
  return result;
}

uint64_t sub_1000F7800()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_1000F7884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v9)) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v3 + v9);
    uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0LL);
    uint64_t v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v13 = swift_retain(v10);
    sub_10010F368(v13);
    swift_release(v10);
    uint64_t v14 = *(void *)(v6 + v9);
    *(void *)(v6 + v9) = v12;
    swift_release(v14);
  }

  uint64_t v15 = *(void *)(v6 + v9);
  swift_retain(v15);
  uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1LL:
          uint64_t v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion,  v32,  33LL,  0LL);
          uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0LL);
          uint64_t v21 = &qword_1003567D8;
          uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4;
          uint64_t v23 = &unk_1002C4A68;
          goto LABEL_12;
        case 2LL:
          uint64_t v24 = OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
          goto LABEL_11;
        case 3LL:
          uint64_t v24 = OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
          goto LABEL_11;
        case 4LL:
          uint64_t v24 = OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
LABEL_11:
          uint64_t v19 = v15 + v24;
          swift_beginAccess(v15 + v24, v32, 33LL, 0LL);
          uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
          uint64_t v21 = &qword_1003567C0;
          uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3;
          uint64_t v23 = &unk_1002C4900;
LABEL_12:
          uint64_t v25 = sub_10000FD98(v21, v22, (uint64_t)v23);
          uint64_t v26 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v19, v20, v25, a2, a3);
          goto LABEL_19;
        case 5LL:
          uint64_t v27 = v15
              + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel,  v32,  33LL,  0LL);
          unint64_t v28 = sub_10014A6EC();
          uint64_t v26 = v5;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v27,  &type metadata for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel,  v28,  a2,  a3);
          goto LABEL_19;
        case 6LL:
          uint64_t v29 = OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection;
          goto LABEL_17;
        case 7LL:
          uint64_t v29 = OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation;
          goto LABEL_17;
        case 8LL:
          uint64_t v29 = OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p;
LABEL_17:
          uint64_t v30 = v15 + v29;
          swift_beginAccess(v15 + v29, v32, 33LL, 0LL);
          uint64_t v26 = v5;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v30, a2, a3);
          goto LABEL_19;
        case 9LL:
          uint64_t v31 = v15
              + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading,  v32,  33LL,  0LL);
          uint64_t v26 = v5;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v31, a2, a3);
LABEL_19:
          uint64_t v5 = v26;
          swift_endAccess(v32);
          break;
        default:
          break;
      }

      uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return swift_release(v15);
}

uint64_t sub_1000F7B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0LL) + 20));
  uint64_t v10 = swift_retain(v9);
  sub_1000F7E00(v10, a1, a2, a3);
  if (v4) {
    return swift_release(v9);
  }
  sub_1000F7F8C(v9, a1, a2, a3);
  sub_1000F8118(v9, a1, a2, a3);
  sub_1000F82A4(v9, a1, a2, a3);
  uint64_t v12 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel,  v25,  0LL,  0LL);
  if (*v12 != 8)
  {
    v24[0] = *v12;
    unint64_t v13 = sub_10014A6EC();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v24,  5LL,  &type metadata for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel,  v13,  a2,  a3);
  }

  uint64_t v14 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection,  v24,  0LL,  0LL);
  int v15 = *v14;
  if (v15 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v15 & 1, 6LL, a2, a3);
  }
  uint64_t v16 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation,  v23,  0LL,  0LL);
  int v17 = *v16;
  if (v17 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v17 & 1, 7LL, a2, a3);
  }
  uint64_t v18 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p,  v22,  0LL,  0LL);
  int v19 = *v18;
  if (v19 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v19 & 1, 8LL, a2, a3);
  }
  uint64_t v20 = v9
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading,  v21,  0LL,  0LL);
  if ((*(_BYTE *)(v20 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(9LL, a2, a3, *(float *)v20);
  }
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000F7E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355608);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355608);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  uint64_t v15 = sub_10000FD98( &qword_1003567D8,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4,  (uint64_t)&unk_1002C4A68);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000F7F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355600);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355600);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  uint64_t v15 = sub_10000FD98( &qword_1003567C0,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3,  (uint64_t)&unk_1002C4900);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000F8118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355600);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355600);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  uint64_t v15 = sub_10000FD98( &qword_1003567C0,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3,  (uint64_t)&unk_1002C4900);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000F82A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355600);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355600);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  uint64_t v15 = sub_10000FD98( &qword_1003567C0,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3,  (uint64_t)&unk_1002C4900);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000F8430(uint64_t a1, uint64_t a2)
{
  return sub_100065AC0( a1,  a2,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  sub_1000F8458) & 1;
}

uint64_t sub_1000F8458(uint64_t a1, uint64_t a2)
{
  uint64_t v121 = a2;
  uint64_t v118 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
  uint64_t v116 = *(void *)(v118 - 8);
  __chkstk_darwin(v118);
  uint64_t v109 = (uint64_t)&v105 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v120 = sub_100003A0C(&qword_10035C478);
  uint64_t v4 = __chkstk_darwin(v120);
  uint64_t v107 = (uint64_t)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v111 = (uint64_t)&v105 - v7;
  __chkstk_darwin(v6);
  uint64_t v117 = (uint64_t)&v105 - v8;
  uint64_t v9 = sub_100003A0C(&qword_100355600);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v106 = (uint64_t)&v105 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v110 = (uint64_t)&v105 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v108 = (uint64_t)&v105 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v113 = (uint64_t)&v105 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v112 = (uint64_t)&v105 - v19;
  __chkstk_darwin(v18);
  uint64_t v115 = (uint64_t)&v105 - v20;
  uint64_t v21 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v114 = (uint64_t)&v105 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = sub_100003A0C(&qword_10035C480);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v105 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = sub_100003A0C(&qword_100355608);
  uint64_t v28 = __chkstk_darwin(v27);
  uint64_t v119 = (uint64_t)&v105 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v28);
  uint64_t v31 = (char *)&v105 - v30;
  uint64_t v32 = a1;
  uint64_t v33 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess(v33, v139, 0LL, 0LL);
  sub_10000E6C0(v33, (uint64_t)v31, &qword_100355608);
  uint64_t v34 = v121;
  uint64_t v35 = v121
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess( v121 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion,  v138,  0LL,  0LL);
  uint64_t v36 = (uint64_t)&v26[*(int *)(v24 + 48)];
  sub_10000E6C0((uint64_t)v31, (uint64_t)v26, &qword_100355608);
  sub_10000E6C0(v35, v36, &qword_100355608);
  char v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  if (v37((uint64_t)v26, 1LL, v21) == 1)
  {
    uint64_t v38 = v32;
    swift_retain(v32);
    swift_retain(v34);
    sub_100015764((uint64_t)v31, &qword_100355608);
    int v39 = v37(v36, 1LL, v21);
    uint64_t v40 = v34;
    if (v39 == 1)
    {
      sub_100015764((uint64_t)v26, &qword_100355608);
      goto LABEL_8;
    }

LABEL_20:
    sub_100015764(v64, &qword_10035C478);
    goto LABEL_52;
  }

  uint64_t v67 = v108;
  sub_10000E6C0(v62, v108, &qword_100355600);
  unsigned int v68 = v51(v63, 1LL, v52);
  uint64_t v66 = v110;
  if (v68 == 1)
  {
    sub_100015764(v113, &qword_100355600);
    sub_100004090(v67, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    goto LABEL_20;
  }

  uint64_t v69 = v67;
  uint64_t v70 = v109;
  sub_100003E68(v63, v109, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  char v71 = sub_10011BB28(v69, v70);
  sub_100004090(v70, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  sub_100015764(v113, &qword_100355600);
  sub_100004090(v69, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  sub_100015764(v111, &qword_100355600);
  if ((v71 & 1) == 0) {
    goto LABEL_52;
  }
LABEL_22:
  uint64_t v72 = v38
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess( v38 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField,  &v133,  0LL,  0LL);
  sub_10000E6C0(v72, v66, &qword_100355600);
  uint64_t v73 = v40
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess( v40 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField,  &v132,  0LL,  0LL);
  uint64_t v74 = v66;
  uint64_t v75 = v107;
  uint64_t v76 = v107 + *(int *)(v120 + 48);
  sub_10000E6C0(v74, v107, &qword_100355600);
  sub_10000E6C0(v73, v76, &qword_100355600);
  if (v51(v75, 1LL, v52) == 1)
  {
    sub_100015764(v74, &qword_100355600);
    if (v51(v76, 1LL, v52) == 1)
    {
      sub_100015764(v75, &qword_100355600);
      goto LABEL_29;
    }

        swift_release(v45);
        uint64_t v58 = v40;
LABEL_21:
        swift_release(v58);
        return 0LL;
      }
    }

    else
    {
      sub_10000E6C0((uint64_t)v28, (uint64_t)v32, &qword_10035C628);
      if (v43(v42, 1LL, v23) != 1)
      {
        uint64_t v48 = v100;
        sub_100003E68(v42, v100, type metadata accessor for Proto_Gnss_Emergency_QoP);
        uint64_t v45 = v38;
        swift_retain(v38);
        swift_retain(v40);
        uint64_t v49 = sub_1001D4BAC((uint64_t)v32, v48, type metadata accessor for Proto_Gnss_Emergency_QoP);
        sub_100004090(v48, type metadata accessor for Proto_Gnss_Emergency_QoP);
        sub_100015764((uint64_t)v34, &qword_10035C628);
        sub_100004090((uint64_t)v32, type metadata accessor for Proto_Gnss_Emergency_QoP);
        sub_100015764((uint64_t)v28, &qword_10035C628);
        if ((v49 & 1) == 0) {
          goto LABEL_20;
        }
        goto LABEL_13;
      }

      uint64_t v45 = v38;
      swift_retain(v38);
      swift_retain(v40);
      sub_100015764((uint64_t)v34, &qword_10035C628);
      sub_100004090((uint64_t)v32, type metadata accessor for Proto_Gnss_Emergency_QoP);
    }

    uint64_t v46 = &qword_100363110;
    uint64_t v47 = (uint64_t)v28;
LABEL_19:
    sub_100015764(v47, v46);
    goto LABEL_20;
  }

  uint64_t result = 0LL;
  if (v36 != 18 && v35 == v36) {
    goto LABEL_6;
  }
  return result;
}

    uint64_t v64 = &qword_100363070;
LABEL_49:
    unsigned int v65 = v94;
    goto LABEL_50;
  }

  uint64_t v100 = v188;
  sub_10000E6C0(v94, v188, &qword_10035C6D8);
  float v101 = v95(v92, 1LL, v97);
  char v99 = v194;
  if (v101 == 1)
  {
    sub_100015764(v203, &qword_10035C6D8);
    sub_100004090(v100, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
    goto LABEL_20;
  }

  int v102 = v183;
  sub_100003E68(v92, v183, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
  uint64_t v103 = sub_1001C58D0(v100, v102);
  sub_100004090(v102, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
  sub_100015764(v203, &qword_10035C6D8);
  sub_100004090(v100, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
  sub_100015764(v94, &qword_10035C6D8);
  if ((v103 & 1) == 0) {
    goto LABEL_51;
  }
LABEL_22:
  char v104 = v61
       + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidArc;
  swift_beginAccess( v61 + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidArc,  v215,  0LL,  0LL);
  sub_10000E6C0(v104, v79, &qword_10035C6E0);
  uint64_t v105 = v205
       + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidArc;
  swift_beginAccess( v205 + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidArc,  &v214,  0LL,  0LL);
  uint64_t v106 = v187;
  uint64_t v107 = v187 + *(int *)(v184 + 48);
  sub_10000E6C0(v79, v187, &qword_10035C6E0);
  uint64_t v108 = v105;
  int v94 = v106;
  sub_10000E6C0(v108, v107, &qword_10035C6E0);
  uint64_t v109 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v185 + 48);
  uint64_t v110 = v106;
  uint64_t v111 = v186;
  if (v109(v110, 1LL, v186) == 1)
  {
    sub_100015764(v79, &qword_10035C6E0);
    if (v109(v107, 1LL, v111) == 1)
    {
      sub_100015764(v94, &qword_10035C6E0);
      goto LABEL_29;
    }

    goto LABEL_27;
  }

  uint64_t v112 = v99;
  uint64_t v113 = v182;
  sub_10000E6C0(v94, v182, &qword_10035C6E0);
  if (v109(v107, 1LL, v111) == 1)
  {
    sub_100015764(v202, &qword_10035C6E0);
    sub_100004090(v113, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
LABEL_27:
    uint64_t v64 = &qword_100363068;
    goto LABEL_49;
  }

  uint64_t v114 = v176;
  sub_100003E68(v107, v176, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
  uint64_t v115 = sub_1001D13F4(v113, v114);
  sub_100004090(v114, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
  sub_100015764(v202, &qword_10035C6E0);
  sub_100004090(v113, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
  sub_100015764(v94, &qword_10035C6E0);
  char v99 = v112;
  if ((v115 & 1) == 0) {
    goto LABEL_51;
  }
LABEL_29:
  uint64_t v116 = v61
       + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidPoint;
  swift_beginAccess( v61 + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidPoint,  &v213,  0LL,  0LL);
  sub_10000E6C0(v116, v99, &qword_10035C6C0);
  uint64_t v117 = v205
       + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidPoint;
  swift_beginAccess( v205 + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidPoint,  &v212,  0LL,  0LL);
  uint64_t v118 = v181;
  uint64_t v119 = v181 + *(int *)(v178 + 48);
  sub_10000E6C0(v99, v181, &qword_10035C6C0);
  uint64_t v120 = v117;
  int v94 = v118;
  sub_10000E6C0(v120, v119, &qword_10035C6C0);
  uint64_t v121 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v179 + 48);
  uint64_t v122 = v118;
  uint64_t v123 = v180;
  if (v121(v122, 1LL, v180) == 1)
  {
    sub_100015764(v99, &qword_10035C6C0);
    if (v121(v119, 1LL, v123) == 1)
    {
      sub_100015764(v94, &qword_10035C6C0);
      uint64_t v124 = v177;
      goto LABEL_36;
    }

    goto LABEL_34;
  }

  uint64_t v125 = v174;
  sub_10000E6C0(v94, v174, &qword_10035C6C0);
  uint64_t v126 = v121(v119, 1LL, v123);
  uint64_t v124 = v177;
  if (v126 == 1)
  {
    sub_100015764(v194, &qword_10035C6C0);
    sub_100004090(v125, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
LABEL_34:
    uint64_t v64 = &qword_100363060;
    goto LABEL_49;
  }

  uint64_t v127 = v169;
  sub_100003E68(v119, v169, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
  uint64_t v128 = sub_1001D3CAC(v125, v127, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
  sub_100004090(v127, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
  sub_100015764(v194, &qword_10035C6C0);
  sub_100004090(v125, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
  sub_100015764(v94, &qword_10035C6C0);
  if ((v128 & 1) == 0) {
    goto LABEL_51;
  }
LABEL_36:
  uint64_t v129 = v61
       + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitude;
  swift_beginAccess( v61 + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitude,  &v211,  0LL,  0LL);
  uint64_t v130 = v175;
  sub_10000E6C0(v129, v175, &qword_10035C6E8);
  uint64_t v131 = v205
       + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitude;
  swift_beginAccess( v205 + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitude,  &v210,  0LL,  0LL);
  uint64_t v132 = v173;
  uint64_t v133 = v173 + *(int *)(v170 + 48);
  sub_10000E6C0(v130, v173, &qword_10035C6E8);
  v134 = v131;
  int v94 = v132;
  sub_10000E6C0(v134, v133, &qword_10035C6E8);
  v135 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v171 + 48);
  v136 = v132;
  v137 = v172;
  if (v135(v136, 1LL, v172) == 1)
  {
    sub_100015764(v130, &qword_10035C6E8);
    if (v135(v133, 1LL, v137) == 1)
    {
      sub_100015764(v94, &qword_10035C6E8);
      goto LABEL_43;
    }

    goto LABEL_41;
  }

  v138 = v167;
  sub_10000E6C0(v94, v167, &qword_10035C6E8);
  if (v135(v133, 1LL, v137) == 1)
  {
    sub_100015764(v175, &qword_10035C6E8);
    sub_100004090(v138, type metadata accessor for Proto_Gnss_Emergency_PointAltitude);
LABEL_41:
    uint64_t v64 = &qword_100363058;
    goto LABEL_49;
  }

  v139 = v162;
  sub_100003E68(v133, v162, type metadata accessor for Proto_Gnss_Emergency_PointAltitude);
  v140 = sub_1001D3E2C(v138, v139, type metadata accessor for Proto_Gnss_Emergency_PointAltitude);
  sub_100004090(v139, type metadata accessor for Proto_Gnss_Emergency_PointAltitude);
  sub_100015764(v175, &qword_10035C6E8);
  sub_100004090(v138, type metadata accessor for Proto_Gnss_Emergency_PointAltitude);
  sub_100015764(v94, &qword_10035C6E8);
  if ((v140 & 1) == 0)
  {
LABEL_51:
    swift_release(v61);
    swift_release(v205);
    return 0LL;
  }

      return ((uint64_t (*)(char *, uint64_t))v29)(v15, v2);
    }

    if (v30 == 82)
    {
      uint64_t v15 = v60;
      uint64_t v31 = corelog.getter((uint64_t)v60);
      uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
      uint64_t v33 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v34 = 0;
        uint64_t v35 = "#WiFi,exceptionHandling,poweredOff";
LABEL_18:
        _os_log_impl((void *)&_mh_execute_header, v32, v33, v35, v34, 2u);
        uint64_t v48 = v34;
        goto LABEL_19;
      }

      goto LABEL_20;
    }
  }

  uint64_t v49 = corelog.getter((uint64_t)v6);
  __chkstk_darwin(v49);
  uint64_t v53 = 136LL;
  Logger._fault(_:function:file:line:)( sub_100297E5C,  (uint64_t)(&v54 - 4),  (uint64_t *)"exceptionHandling(_:)",  21LL,  2,  (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Daemon/ALLeechCoreWiFi.swift",  73LL,  2);
  uint64_t v15 = v6;
  return ((uint64_t (*)(char *, uint64_t))v29)(v15, v2);
}

LABEL_27:
    sub_100015764(v75, &qword_10035C478);
    goto LABEL_52;
  }

  uint64_t v77 = v106;
  sub_10000E6C0(v75, v106, &qword_100355600);
  if (v51(v76, 1LL, v52) == 1)
  {
    sub_100015764(v110, &qword_100355600);
    sub_100004090(v77, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    goto LABEL_27;
  }

  uint64_t v78 = v77;
  uint64_t v79 = v109;
  sub_100003E68(v76, v109, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  char v80 = sub_10011BB28(v78, v79);
  sub_100004090(v79, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  sub_100015764(v110, &qword_100355600);
  sub_100004090(v78, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  sub_100015764(v75, &qword_100355600);
  if ((v80 & 1) == 0) {
    goto LABEL_52;
  }
LABEL_29:
  uint64_t v81 = (unsigned __int8 *)(v38
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
  swift_beginAccess( v38 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel,  &v131,  0LL,  0LL);
  int v82 = *v81;
  uint64_t v83 = (unsigned __int8 *)(v40
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
  swift_beginAccess( v40 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel,  &v130,  0LL,  0LL);
  int v84 = *v83;
  if (v82 == 8)
  {
    if (v84 != 8) {
      goto LABEL_52;
    }
  }

  else if (v84 == 8 || v82 != v84)
  {
    goto LABEL_52;
  }

  v85 = (unsigned __int8 *)(v38
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  swift_beginAccess( v38 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection,  &v129,  0LL,  0LL);
  int v86 = *v85;
  uint64_t v87 = (unsigned __int8 *)(v40
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  swift_beginAccess( v40 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection,  &v128,  0LL,  0LL);
  int v88 = *v87;
  if (v86 == 2)
  {
    if (v88 != 2) {
      goto LABEL_52;
    }
  }

  else if (v88 == 2 || ((((v88 & 1) == 0) ^ v86) & 1) == 0)
  {
    goto LABEL_52;
  }

  uint64_t v89 = (unsigned __int8 *)(v38
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  swift_beginAccess( v38 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation,  &v127,  0LL,  0LL);
  int v90 = *v89;
  uint64_t v91 = (unsigned __int8 *)(v40
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  swift_beginAccess( v40 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation,  &v126,  0LL,  0LL);
  int v92 = *v91;
  if (v90 == 2)
  {
    if (v92 != 2) {
      goto LABEL_52;
    }
  }

  else if (v92 == 2 || ((((v92 & 1) == 0) ^ v90) & 1) == 0)
  {
    goto LABEL_52;
  }

  uint64_t v93 = (unsigned __int8 *)(v38
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  swift_beginAccess( v38 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p,  &v125,  0LL,  0LL);
  int v94 = *v93;
  uint64_t v95 = (unsigned __int8 *)(v40
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  swift_beginAccess( v40 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p,  &v124,  0LL,  0LL);
  int v96 = *v95;
  if (v94 == 2)
  {
    if (v96 == 2) {
      goto LABEL_49;
    }
LABEL_52:
    swift_release(v38);
    swift_release(v40);
    return 0LL;
  }

  if (v96 == 2 || ((((v96 & 1) == 0) ^ v94) & 1) == 0) {
    goto LABEL_52;
  }
LABEL_49:
  uint64_t v97 = v38
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  swift_beginAccess( v38 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading,  &v123,  0LL,  0LL);
  float v98 = *(float *)v97;
  char v99 = *(_BYTE *)(v97 + 4);
  swift_release(v38);
  uint64_t v100 = v40
       + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  swift_beginAccess( v40 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading,  &v122,  0LL,  0LL);
  float v101 = *(float *)v100;
  int v102 = *(unsigned __int8 *)(v100 + 4);
  swift_release(v40);
  if ((v99 & 1) != 0)
  {
    if (!v102) {
      return 0LL;
    }
  }

  else
  {
    if (v98 == v101) {
      char v104 = v102;
    }
    else {
      char v104 = 1;
    }
    if ((v104 & 1) != 0) {
      return 0LL;
    }
  }

  return 1LL;
}

        float v51 = 0;
        return v51 & 1;
      }

      sub_100015764(v47, &qword_100355658);
      sub_100015764(v46, &qword_100355658);
      sub_100004090(v45, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
    }

    uint64_t v33 = &qword_10035C430;
    uint64_t v34 = v60;
LABEL_7:
    sub_100015764(v34, v33);
    goto LABEL_27;
  }

  return v51 & 1;
}

        uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v31(v10, a1, v4);
        v31(v8, a2, v4);
        uint64_t v32 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
        uint64_t v18 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v32);
        uint64_t v33 = *(void (**)(char *, uint64_t))(v5 + 8);
        v33(v8, v4);
        v33(v10, v4);
        return v18 & 1;
      }
    }

    else if (!v28)
    {
      goto LABEL_27;
    }

    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    uint64_t v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }

    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

Swift::Int sub_1000F907C()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  &qword_100355898,  (uint64_t)&unk_1002C5108);
}

uint64_t sub_1000F9098@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD7C(a1, &qword_10037A818, &qword_10037A820, (uint64_t)sub_1000F76CC, a2);
}

uint64_t sub_1000F90B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F7884(a1, a2, a3);
}

uint64_t sub_1000F90C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F7B60(a1, a2, a3);
}

uint64_t sub_1000F90DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C050,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  (uint64_t)&unk_1002C5080);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F912C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A810, (uint64_t)qword_10036A308, (uint64_t)sub_1000F73A8, a1);
}

uint64_t sub_1000F9148(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356830,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  (uint64_t)&unk_1002C5008);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F9188(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356830,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  (uint64_t)&unk_1002C5008);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000F91D8()
{
  return &unk_10033F1A8;
}

unint64_t sub_1000F91E4()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_1000F9200(uint64_t a1)
{
  return sub_1000FB384( a1,  qword_10036A320,  (uint64_t)"bits",  4LL,  (unsigned int *)&enum case for _NameMap.NameDescription.same(_:));
}

uint64_t sub_1000F9220()
{
  return sub_100008C30(&qword_10037A828, (uint64_t)qword_10036A320, (uint64_t)sub_1000F9200);
}

uint64_t sub_1000F923C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A828, (uint64_t)qword_10036A320, (uint64_t)sub_1000F9200, a1);
}

uint64_t sub_1000F9258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v10 & 1) != 0) {
      break;
    }
    if (result == 1)
    {
      uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0LL);
      dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + *(int *)(v11 + 20), a2, a3);
    }

    uint64_t v4 = 0LL;
    uint64_t v7 = a2;
  }

  return result;
}

uint64_t sub_1000F92EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0LL);
  char v10 = (unsigned int *)(v5 + *(int *)(result + 20));
  if ((v10[1] & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v10, 1LL, a2, a3);
  }
  if (!v4) {
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_1000F9384()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus,  &qword_1003558A0,  (uint64_t)&unk_1002C5270);
}

uint64_t sub_1000F93A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a2 + *(int *)(a1 + 20);
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  return result;
}

uint64_t sub_1000F93D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F9258(a1, a2, a3);
}

uint64_t sub_1000F93EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F92EC(a1, a2, a3);
}

uint64_t sub_1000F9400(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C048,  type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus,  (uint64_t)&unk_1002C51E8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F9450@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A828, (uint64_t)qword_10036A320, (uint64_t)sub_1000F9200, a1);
}

uint64_t sub_1000F946C(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356848,  type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus,  (uint64_t)&unk_1002C5170);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F94AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356848,  type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus,  (uint64_t)&unk_1002C5170);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000F9500()
{
  return &unk_10033F1B8;
}

unint64_t sub_1000F950C()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_1000F9528()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A338);
  sub_10000E704(v0, (uint64_t)qword_10036A338);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v26 = swift_allocObject(v1, v6 + 8 * v4, v5 | 7);
  *(_OWORD *)(v26 + 16) = xmmword_1002B42A0;
  uint64_t v7 = v26 + v6;
  uint64_t v8 = v26 + v6 + *(int *)(v2 + 48);
  *(void *)(v26 + v6) = 1LL;
  *(void *)uint64_t v8 = "timestamp";
  *(void *)(v8 + 8) = 9LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "device_motion";
  *(void *)(v12 + 8) = 13LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 3LL;
  *(void *)uint64_t v14 = "fsync";
  *((void *)v14 + 1) = 5LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v7 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *uint64_t v15 = 4LL;
  *(void *)uint64_t v16 = "client_id";
  *((void *)v16 + 1) = 9LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v7 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "mode";
  *((void *)v18 + 1) = 4LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v7 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  void *v19 = 6LL;
  *(void *)uint64_t v20 = "status";
  *((void *)v20 + 1) = 6LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v7 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 7LL;
  *(void *)uint64_t v22 = "accuracy";
  *((void *)v22 + 1) = 8LL;
  v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v7 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  void *v23 = 8LL;
  *(void *)uint64_t v24 = "vision_compass_bias";
  *((void *)v24 + 1) = 19LL;
  v24[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v26);
}

uint64_t sub_1000F97D0()
{
  return sub_100008C30(&qword_10037A830, (uint64_t)qword_10036A338, (uint64_t)sub_1000F9528);
}

uint64_t sub_1000F97EC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A830, (uint64_t)qword_10036A338, (uint64_t)sub_1000F9528, a1);
}

uint64_t sub_1000F9808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0LL) + 20);
          uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
          uint64_t v11 = (unint64_t *)&qword_1003552B8;
          uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          uint64_t v13 = &unk_1002BF798;
          goto LABEL_11;
        case 2LL:
          uint64_t v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0LL) + 24);
          uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0LL);
          uint64_t v11 = &qword_100356830;
          uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion;
          uint64_t v13 = &unk_1002C5008;
          goto LABEL_11;
        case 3LL:
          uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0LL);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + *(int *)(v14 + 28), a2, a3);
          break;
        case 4LL:
          uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0LL);
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + *(int *)(v15 + 32), a2, a3);
          break;
        case 5LL:
          uint64_t v16 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0LL) + 36);
          unint64_t v17 = sub_10014A6A8();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v16,  &type metadata for CLP_LogEntry_PrivateData_SensorFusionMode,  v17,  a2,  a3);
          break;
        case 6LL:
          uint64_t v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0LL) + 40);
          uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0LL);
          uint64_t v11 = &qword_100356848;
          uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus;
          uint64_t v13 = &unk_1002C5170;
LABEL_11:
          uint64_t v18 = sub_10000FD98(v11, v12, (uint64_t)v13);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v18, a2, a3);
          break;
        case 7LL:
          uint64_t v19 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0LL) + 44);
          goto LABEL_14;
        case 8LL:
          uint64_t v19 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0LL) + 48);
LABEL_14:
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + v19, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000F9A50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = sub_100105BC8(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
  if (!v4)
  {
    sub_1000F9BEC(v5, a1, a2, a3);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0LL);
    uint64_t v11 = v10;
    int v12 = *(unsigned __int8 *)(v5 + *(int *)(v10 + 28));
    if (v12 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v12 & 1, 3LL, a2, a3);
    }
    uint64_t v13 = (unsigned int *)(v5 + *(int *)(v11 + 32));
    if ((v13[1] & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v13, 4LL, a2, a3);
    }
    sub_1000F9D60(v5, a1, a2, a3);
    sub_1000F9DE8(v5, a1, a2, a3);
    sub_1000F9F5C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
    sub_1000F9FD0(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_1000F9BEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355618);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  int v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_100355618);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  uint64_t v15 = sub_10000FD98( &qword_100356830,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  (uint64_t)&unk_1002C5008);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

uint64_t sub_1000F9D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0LL);
  if (*(_BYTE *)(a1 + *(int *)(result + 36)) != 5)
  {
    char v9 = *(_BYTE *)(a1 + *(int *)(result + 36));
    unint64_t v8 = sub_10014A6A8();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v9,  5LL,  &type metadata for CLP_LogEntry_PrivateData_SensorFusionMode,  v8,  a3,  a4);
  }

  return result;
}

uint64_t sub_1000F9DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355620);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  int v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 40), (uint64_t)v8, &qword_100355620);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
  uint64_t v15 = sub_10000FD98( &qword_100356848,  type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus,  (uint64_t)&unk_1002C5170);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 6LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

uint64_t sub_1000F9F5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0LL);
  uint64_t v9 = a1 + *(int *)(result + 44);
  if ((*(_BYTE *)(v9 + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(7LL, a3, a4, *(float *)v9);
  }
  return result;
}

uint64_t sub_1000F9FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0LL);
  uint64_t v9 = a1 + *(int *)(result + 48);
  if ((*(_BYTE *)(v9 + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(8LL, a3, a4, *(float *)v9);
  }
  return result;
}

Swift::Int sub_1000FA048()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample,  &qword_1003558A8,  (uint64_t)&unk_1002C53D8);
}

uint64_t sub_1000FA064@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = a2 + a1[6];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  uint64_t v8 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 2;
  uint64_t v9 = a2 + v8;
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1[10];
  *(_BYTE *)(a2 + a1[9]) = 5;
  uint64_t v11 = a2 + v10;
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))( v11,  1LL,  1LL,  v12);
  uint64_t v14 = a1[12];
  uint64_t v15 = a2 + a1[11];
  *(_DWORD *)uint64_t v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  uint64_t v16 = a2 + v14;
  *(_DWORD *)uint64_t v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  return result;
}

uint64_t sub_1000FA154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F9808(a1, a2, a3);
}

uint64_t sub_1000FA168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F9A50(a1, a2, a3);
}

uint64_t sub_1000FA17C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C040,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample,  (uint64_t)&unk_1002C5350);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FA1CC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A830, (uint64_t)qword_10036A338, (uint64_t)sub_1000F9528, a1);
}

uint64_t sub_1000FA1E8(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003558B0,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample,  (uint64_t)&unk_1002C52D8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FA228(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003558B0,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample,  (uint64_t)&unk_1002C52D8);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000FA27C()
{
  return &unk_10033F1C8;
}

unint64_t sub_1000FA288()
{
  return 0xD000000000000025LL;
}

uint64_t sub_1000FA2A4()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A350);
  sub_10000E704(v0, (uint64_t)qword_10036A350);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3340;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  void *v8 = 1LL;
  *(void *)uint64_t v9 = "event_receipt_time";
  *(void *)(v9 + 8) = 18LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "sample";
  *((void *)v13 + 1) = 6LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000FA3FC()
{
  return sub_100008C30(&qword_10037A838, (uint64_t)qword_10036A350, (uint64_t)sub_1000FA2A4);
}

uint64_t sub_1000FA418@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A838, (uint64_t)qword_10036A350, (uint64_t)sub_1000FA2A4, a1);
}

uint64_t sub_1000FA434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FCCA0( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample,  &qword_1003558B0,  (uint64_t)&unk_1002C52D8);
}

uint64_t sub_1000FA468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1000FA550(v3, a1, a2, a3);
  if (!v4)
  {
    uint64_t v9 = *(void *)v3;
    if (*(void *)(*(void *)v3 + 16LL))
    {
      uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0LL);
      uint64_t v11 = sub_10000FD98( &qword_1003558B0,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample,  (uint64_t)&unk_1002C52D8);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v9, 2LL, v10, v11, a2, a3);
    }

    type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion(0LL);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_1000FA550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_100355538);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v15 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000FA6C4(uint64_t *a1, uint64_t *a2)
{
  return sub_10011893C( a1,  a2,  (uint64_t *)type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample,  (uint64_t (*)(char *, char *))sub_100117EE4) & 1;
}

Swift::Int sub_1000FA6F4()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion,  &qword_1003558B8,  (uint64_t)&unk_1002C5540);
}

uint64_t sub_1000FA710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FA468(a1, a2, a3);
}

uint64_t sub_1000FA724(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C038,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion,  (uint64_t)&unk_1002C54B8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FA774@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A838, (uint64_t)qword_10036A350, (uint64_t)sub_1000FA2A4, a1);
}

uint64_t sub_1000FA790(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356870,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion,  (uint64_t)&unk_1002C5440);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FA7D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356870,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion,  (uint64_t)&unk_1002C5440);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000FA820()
{
  return &unk_10033F1D8;
}

unint64_t sub_1000FA82C()
{
  return 0xD000000000000037LL;
}

uint64_t sub_1000FA848()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A368);
  sub_10000E704(v0, (uint64_t)qword_10036A368);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42A0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "x";
  *(void *)(v9 + 8) = 1LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "y";
  *(void *)(v13 + 8) = 1LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "z";
  *((void *)v15 + 1) = 1LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "magnitude";
  *((void *)v17 + 1) = 9LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  void *v18 = 5LL;
  *(void *)uint64_t v19 = "horizontal";
  *((void *)v19 + 1) = 10LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  void *v20 = 6LL;
  *(void *)uint64_t v21 = "declination";
  *((void *)v21 + 1) = 11LL;
  v21[16] = 2;
  v12();
  uint64_t v22 = (void *)(v8 + 6 * v4);
  uint64_t v23 = (char *)v22 + *(int *)(v2 + 48);
  void *v22 = 7LL;
  *(void *)uint64_t v23 = "inclination";
  *((void *)v23 + 1) = 11LL;
  v23[16] = 2;
  v12();
  uint64_t v24 = (void *)(v8 + 7 * v4);
  uint64_t v25 = (char *)v24 + *(int *)(v2 + 48);
  void *v24 = 8LL;
  *(void *)uint64_t v25 = "timestamp";
  *((void *)v25 + 1) = 9LL;
  v25[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000FAAE8()
{
  return sub_100008C30(&qword_10037A840, (uint64_t)qword_10036A368, (uint64_t)sub_1000FA848);
}

uint64_t sub_1000FAB04@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A840, (uint64_t)qword_10036A368, (uint64_t)sub_1000FA848, a1);
}

uint64_t sub_1000FAB20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL) + 20);
          goto LABEL_12;
        case 2LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL) + 24);
          goto LABEL_12;
        case 3LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL) + 28);
          goto LABEL_12;
        case 4LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL) + 32);
          goto LABEL_12;
        case 5LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL) + 36);
          goto LABEL_12;
        case 6LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL) + 40);
          goto LABEL_12;
        case 7LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL) + 44);
LABEL_12:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v9, a2, a3);
          break;
        case 8LL:
          uint64_t v10 = v3
              + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL) + 48);
          uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
          uint64_t v12 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v10, v11, v12, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000FACB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL);
  uint64_t v10 = (int *)result;
  uint64_t v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1LL, a2, a3, *(double *)v11);
  }
  if (!v4)
  {
    uint64_t v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2LL, a2, a3, *(double *)v12);
    }
    uint64_t v13 = v5 + v10[7];
    if ((*(_BYTE *)(v13 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3LL, a2, a3, *(double *)v13);
    }
    uint64_t v14 = v5 + v10[8];
    if ((*(_BYTE *)(v14 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(4LL, a2, a3, *(double *)v14);
    }
    sub_1000FAE74(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
    sub_1000FAEE8(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
    sub_1000FAF5C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
    sub_1000FAFD0(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_1000FAE74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0LL);
  uint64_t v9 = a1 + *(int *)(result + 36);
  if ((*(_BYTE *)(v9 + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(5LL, a3, a4, *(double *)v9);
  }
  return result;
}

uint64_t sub_1000FAEE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0LL);
  uint64_t v9 = a1 + *(int *)(result + 40);
  if ((*(_BYTE *)(v9 + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(6LL, a3, a4, *(double *)v9);
  }
  return result;
}

uint64_t sub_1000FAF5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0LL);
  uint64_t v9 = a1 + *(int *)(result + 44);
  if ((*(_BYTE *)(v9 + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(7LL, a3, a4, *(double *)v9);
  }
  return result;
}

uint64_t sub_1000FAFD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 48), (uint64_t)v8, &qword_100355538);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v15 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 8LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int sub_1000FB148()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData,  &qword_1003558C0,  (uint64_t)&unk_1002C56A8);
}

uint64_t sub_1000FB164@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[6];
  uint64_t v5 = a2 + a1[5];
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + 8) = 1;
  uint64_t v6 = a2 + v4;
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  uint64_t v7 = a1[8];
  uint64_t v8 = a2 + a1[7];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  uint64_t v10 = a1[10];
  uint64_t v11 = a2 + a1[9];
  *(void *)uint64_t v11 = 0LL;
  *(_BYTE *)(v11 + 8) = 1;
  uint64_t v12 = a2 + v10;
  *(void *)uint64_t v12 = 0LL;
  *(_BYTE *)(v12 + 8) = 1;
  uint64_t v13 = a1[12];
  uint64_t v14 = a2 + a1[11];
  *(void *)uint64_t v14 = 0LL;
  uint64_t v15 = a2 + v13;
  *(_BYTE *)(v14 + 8) = 1;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))( v15,  1LL,  1LL,  v16);
}

uint64_t sub_1000FB214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FAB20(a1, a2, a3);
}

uint64_t sub_1000FB228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FACB0(a1, a2, a3);
}

uint64_t sub_1000FB23C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C030,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData,  (uint64_t)&unk_1002C5620);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FB28C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A840, (uint64_t)qword_10036A368, (uint64_t)sub_1000FA848, a1);
}

uint64_t sub_1000FB2A8(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356888,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData,  (uint64_t)&unk_1002C55A8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FB2E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356888,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData,  (uint64_t)&unk_1002C55A8);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000FB33C()
{
  return &unk_10033F1E8;
}

unint64_t sub_1000FB348()
{
  return 0xD00000000000002DLL;
}

uint64_t sub_1000FB364(uint64_t a1)
{
  return sub_1000FB384( a1,  qword_10036A380,  (uint64_t)"data",  4LL,  (unsigned int *)&enum case for _NameMap.NameDescription.same(_:));
}

uint64_t sub_1000FB384(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v9 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v9, a2);
  sub_10000E704(v9, (uint64_t)a2);
  uint64_t v10 = sub_100003A0C(&qword_1003516F8);
  uint64_t v11 = sub_100003A0C(&qword_100351700);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 72);
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = (v14 + 32) & ~v14;
  uint64_t v16 = swift_allocObject(v10, v15 + v13, v14 | 7);
  *(_OWORD *)(v16 + 16) = xmmword_1002BAD60;
  uint64_t v17 = v16 + v15 + *(int *)(v11 + 48);
  *(void *)(v16 + v15) = 1LL;
  *(void *)uint64_t v17 = a3;
  *(void *)(v17 + 8) = a4;
  *(_BYTE *)(v17 + 16) = 2;
  uint64_t v18 = *a5;
  uint64_t v19 = type metadata accessor for _NameMap.NameDescription(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 104LL))(v17, v18, v19);
  return _NameMap.init(dictionaryLiteral:)(v16);
}

uint64_t sub_1000FB48C()
{
  return sub_100008C30(&qword_10037A848, (uint64_t)qword_10036A380, (uint64_t)sub_1000FB364);
}

uint64_t sub_1000FB4A8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A848, (uint64_t)qword_10036A380, (uint64_t)sub_1000FB364, a1);
}

uint64_t sub_1000FB4C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FB4F8( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData,  &qword_100356888,  (uint64_t)&unk_1002C55A8);
}

uint64_t sub_1000FB4F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t v12 = a2;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v12, i);
    if (v8 || (v15 & 1) != 0) {
      break;
    }
    if (result == 1)
    {
      uint64_t v16 = v7 + *(int *)(a4(0LL) + 20);
      uint64_t v17 = a5(0LL);
      uint64_t v18 = sub_10000FD98(a6, a5, a7);
      dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v16, v17, v18, a2, a3);
    }

    uint64_t v8 = 0LL;
    uint64_t v12 = a2;
  }

  return result;
}

uint64_t sub_1000FB604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1000FB658(v3, a1, a2, a3);
  if (!v4) {
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000FB658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355628);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 20), (uint64_t)v8, &qword_100355628);
  sub_100003E68( (uint64_t)v8,  (uint64_t)v12,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
  uint64_t v15 = sub_10000FD98( &qword_100356888,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData,  (uint64_t)&unk_1002C55A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

Swift::Int sub_1000FB7D0()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData,  &qword_1003558C8,  (uint64_t)&unk_1002C5810);
}

uint64_t sub_1000FB7EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000EE4F8(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a2);
}

uint64_t sub_1000FB7F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FB604(a1, a2, a3);
}

uint64_t sub_1000FB80C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C028,  type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData,  (uint64_t)&unk_1002C5788);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FB85C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A848, (uint64_t)qword_10036A380, (uint64_t)sub_1000FB364, a1);
}

uint64_t sub_1000FB878(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003568A0,  type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData,  (uint64_t)&unk_1002C5710);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FB8B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003568A0,  type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData,  (uint64_t)&unk_1002C5710);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000FB908()
{
  return &unk_10033F1F8;
}

unint64_t sub_1000FB914()
{
  return 0xD000000000000028LL;
}

uint64_t sub_1000FB930()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A398);
  sub_10000E704(v0, (uint64_t)qword_10036A398);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v29 = swift_allocObject(v1, v6 + 10 * v4, v5 | 7);
  *(_OWORD *)(v29 + 16) = xmmword_1002B3300;
  uint64_t v7 = v29 + v6;
  uint64_t v8 = v29 + v6 + *(int *)(v2 + 48);
  *(void *)(v29 + v6) = 1LL;
  *(void *)uint64_t v8 = "mac";
  *(void *)(v8 + 8) = 3LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v29 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "ssid";
  *(void *)(v12 + 8) = 4LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v29 + v6 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 3LL;
  *(void *)uint64_t v14 = "rssi_db";
  *((void *)v14 + 1) = 7LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v29 + v6 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *uint64_t v15 = 4LL;
  *(void *)uint64_t v16 = "mode";
  *((void *)v16 + 1) = 4LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v29 + v6 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "channel";
  *((void *)v18 + 1) = 7LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v29 + v6 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  void *v19 = 6LL;
  *(void *)uint64_t v20 = "age_s";
  *((void *)v20 + 1) = 5LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v29 + v6 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 7LL;
  *(void *)uint64_t v22 = "is_apple_personal_hotspot";
  *((void *)v22 + 1) = 25LL;
  v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v29 + v6 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  void *v23 = 8LL;
  *(void *)uint64_t v24 = "is_moving";
  *((void *)v24 + 1) = 9LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v29 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 9LL;
  *(void *)uint64_t v25 = "band";
  *(void *)(v25 + 8) = 4LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  uint64_t v26 = (void *)(v29 + v6 + 9 * v4);
  uint64_t v27 = (char *)v26 + *(int *)(v2 + 48);
  void *v26 = 10LL;
  *(void *)uint64_t v27 = "frequency_khz";
  *((void *)v27 + 1) = 13LL;
  v27[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v29);
}

uint64_t sub_1000FBC40()
{
  return sub_100008C30(&qword_10037A850, (uint64_t)qword_10036A398, (uint64_t)sub_1000FB930);
}

uint64_t sub_1000FBC5C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A850, (uint64_t)qword_10036A398, (uint64_t)sub_1000FB930, a1);
}

uint64_t sub_1000FBC78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
          dispatch thunk of Decoder.decodeSingularFixed64Field(value:)(v3 + *(int *)(v9 + 20), a2, a3);
          break;
        case 2LL:
          uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v3 + *(int *)(v10 + 24), a2, a3);
          break;
        case 3LL:
          uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
          dispatch thunk of Decoder.decodeSingularSInt32Field(value:)(v3 + *(int *)(v11 + 28), a2, a3);
          break;
        case 4LL:
          uint64_t v12 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL) + 32);
          unint64_t v13 = sub_10014A664();
          uint64_t v14 = v12;
          uint64_t v15 = &type metadata for CLP_LogEntry_PrivateData_WifiAccessPointMode;
          goto LABEL_15;
        case 5LL:
          uint64_t v16 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL) + 36);
          goto LABEL_17;
        case 6LL:
          uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + *(int *)(v17 + 40), a2, a3);
          break;
        case 7LL:
          uint64_t v18 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL) + 44);
          goto LABEL_13;
        case 8LL:
          uint64_t v18 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL) + 48);
LABEL_13:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + v18, a2, a3);
          break;
        case 9LL:
          uint64_t v19 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL) + 52);
          unint64_t v13 = sub_10000FD54();
          uint64_t v14 = v19;
          uint64_t v15 = &type metadata for CLP_LogEntry_PrivateData_WifiRfBand;
LABEL_15:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v14, v15, v13, a2, a3);
          break;
        case 10LL:
          uint64_t v16 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL) + 56);
LABEL_17:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v3 + v16, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000FBEB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
  uint64_t v10 = (int *)result;
  uint64_t v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularFixed64Field(value:fieldNumber:)(*(void *)v11, 1LL, a2, a3);
  }
  if (!v4)
  {
    uint64_t v12 = (void *)(v5 + v10[6]);
    uint64_t v13 = v12[1];
    if (v13) {
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v12, v13, 2LL, a2, a3);
    }
    uint64_t v14 = (unsigned int *)(v5 + v10[7]);
    if ((v14[1] & 1) == 0) {
      dispatch thunk of Visitor.visitSingularSInt32Field(value:fieldNumber:)(*v14, 3LL, a2, a3);
    }
    if (*(_BYTE *)(v5 + v10[8]) != 4)
    {
      char v16 = *(_BYTE *)(v5 + v10[8]);
      unint64_t v15 = sub_10014A664();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v16,  4LL,  &type metadata for CLP_LogEntry_PrivateData_WifiAccessPointMode,  v15,  a2,  a3);
    }

    sub_1000FC0D0(v5, a1, a2, a3);
    sub_1000E12A0(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
    sub_1000E4EEC(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
    sub_1000E4F60(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
    sub_1000FC144(v5, a1, a2, a3);
    sub_1000FC1CC(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_1000FC0D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
  char v8 = (unsigned int *)(a1 + *(int *)(result + 36));
  if ((v8[1] & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v8, 5LL, a3, a4);
  }
  return result;
}

uint64_t sub_1000FC144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
  if (*(_BYTE *)(a1 + *(int *)(result + 52)) != 4)
  {
    char v9 = *(_BYTE *)(a1 + *(int *)(result + 52));
    unint64_t v8 = sub_10000FD54();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v9,  9LL,  &type metadata for CLP_LogEntry_PrivateData_WifiRfBand,  v8,  a3,  a4);
  }

  return result;
}

uint64_t sub_1000FC1CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
  unint64_t v8 = (unsigned int *)(a1 + *(int *)(result + 56));
  if ((v8[1] & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v8, 10LL, a3, a4);
  }
  return result;
}

Swift::Int sub_1000FC244()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint,  &qword_1003558D0,  (uint64_t)&unk_1002C5978);
}

uint64_t sub_1000FC260@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  uint64_t v7 = (void *)(a2 + v5);
  *uint64_t v7 = 0LL;
  v7[1] = 0LL;
  uint64_t v8 = a1[8];
  uint64_t v9 = a2 + a1[7];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  *(_BYTE *)(a2 + v8) = 4;
  uint64_t v10 = a1[10];
  uint64_t v11 = a2 + a1[9];
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  uint64_t v12 = a2 + v10;
  *(_DWORD *)uint64_t v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  uint64_t v13 = a1[12];
  *(_BYTE *)(a2 + a1[11]) = 2;
  *(_BYTE *)(a2 + v13) = 2;
  uint64_t v14 = a1[14];
  *(_BYTE *)(a2 + a1[13]) = 4;
  uint64_t v15 = a2 + v14;
  *(_DWORD *)uint64_t v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  return result;
}

uint64_t sub_1000FC2F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FBC78(a1, a2, a3);
}

uint64_t sub_1000FC30C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FBEB0(a1, a2, a3);
}

uint64_t sub_1000FC320(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C020,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint,  (uint64_t)&unk_1002C58F0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FC370@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A850, (uint64_t)qword_10036A398, (uint64_t)sub_1000FB930, a1);
}

uint64_t sub_1000FC38C(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100355288,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint,  (uint64_t)&unk_1002C5878);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FC3CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100355288,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint,  (uint64_t)&unk_1002C5878);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000FC420()
{
  return &unk_10033F208;
}

unint64_t sub_1000FC42C()
{
  return 0xD00000000000002DLL;
}

uint64_t sub_1000FC448()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A3B0);
  sub_10000E704(v0, (uint64_t)qword_10036A3B0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3340;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  void *v8 = 1LL;
  *(void *)uint64_t v9 = "is_associated";
  *(void *)(v9 + 8) = 13LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "ap";
  *((void *)v13 + 1) = 2LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000FC59C()
{
  return sub_100008C30(&qword_10037A858, (uint64_t)qword_10036A3B0, (uint64_t)sub_1000FC448);
}

uint64_t sub_1000FC5B8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A858, (uint64_t)qword_10036A3B0, (uint64_t)sub_1000FC448, a1);
}

uint64_t sub_1000FC5D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      if (result == 2)
      {
        uint64_t v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0LL) + 24);
        uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
        uint64_t v11 = sub_10000FD98( &qword_100355288,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint,  (uint64_t)&unk_1002C5878);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v11, a2, a3);
      }

      else if (result == 1)
      {
        uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0LL);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + *(int *)(v12 + 20), a2, a3);
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000FC6F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0LL);
  int v10 = *(unsigned __int8 *)(v5 + *(int *)(result + 20));
  if (v10 != 2) {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v10 & 1, 1LL, a2, a3);
  }
  if (!v4)
  {
    sub_1000FC7AC(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_1000FC7AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355630);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_100355630);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  uint64_t v15 = sub_10000FD98( &qword_100355288,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint,  (uint64_t)&unk_1002C5878);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

Swift::Int sub_1000FC924()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState,  &qword_1003558D8,  (uint64_t)&unk_1002C5AE0);
}

uint64_t sub_1000FC940@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(int *)(a1 + 24);
  *(_BYTE *)(a2 + *(int *)(a1 + 20)) = 2;
  uint64_t v5 = a2 + v4;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
}

uint64_t sub_1000FC994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FC5D4(a1, a2, a3);
}

uint64_t sub_1000FC9A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FC6F8(a1, a2, a3);
}

uint64_t sub_1000FC9BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C018,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState,  (uint64_t)&unk_1002C5A58);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FCA0C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A858, (uint64_t)qword_10036A3B0, (uint64_t)sub_1000FC448, a1);
}

uint64_t sub_1000FCA28(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003568C8,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState,  (uint64_t)&unk_1002C59E0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FCA68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003568C8,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState,  (uint64_t)&unk_1002C59E0);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000FCABC()
{
  return &unk_10033F218;
}

unint64_t sub_1000FCAC8()
{
  return 0xD000000000000027LL;
}

uint64_t sub_1000FCAE4()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A3C8);
  sub_10000E704(v0, (uint64_t)qword_10036A3C8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3340;
  char v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  void *v8 = 1LL;
  *(void *)uint64_t v9 = "scan_timestamp";
  *(void *)(v9 + 8) = 14LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "access_point";
  *((void *)v13 + 1) = 12LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000FCC34()
{
  return sub_100008C30(&qword_10037A860, (uint64_t)qword_10036A3C8, (uint64_t)sub_1000FCAE4);
}

uint64_t sub_1000FCC50@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A860, (uint64_t)qword_10036A3C8, (uint64_t)sub_1000FCAE4, a1);
}

uint64_t sub_1000FCC6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FCCA0( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint,  &qword_100355288,  (uint64_t)&unk_1002C5878);
}

uint64_t sub_1000FCCA0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t v13 = v7;
  uint64_t v14 = a3;
  uint64_t v15 = a2;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v8)
  {
    uint64_t v26 = v14;
    while ((v17 & 1) == 0)
    {
      if (result == 2)
      {
        uint64_t v18 = a5(0LL);
        uint64_t v19 = sub_10000FD98(a6, a5, a7);
        uint64_t v20 = v18;
        uint64_t v14 = v26;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v13, v20, v19, v15, v26);
      }

      else if (result == 1)
      {
        uint64_t v21 = v13 + *(int *)(a4(0LL) + 24);
        uint64_t v22 = v15;
        uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
        uint64_t v24 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
        uint64_t v25 = v23;
        uint64_t v15 = v22;
        uint64_t v14 = v26;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v21, v25, v24, v15, v26);
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v15, v14);
    }
  }

  return result;
}

uint64_t sub_1000FCE10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1000FCEF8(v3, a1, a2, a3);
  if (!v4)
  {
    uint64_t v9 = *(void *)v3;
    if (*(void *)(*(void *)v3 + 16LL))
    {
      uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
      uint64_t v11 = sub_10000FD98( &qword_100355288,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint,  (uint64_t)&unk_1002C5878);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v9, 2LL, v10, v11, a2, a3);
    }

    type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0LL);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_1000FCEF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_100355538);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v15 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000FD06C(uint64_t *a1, uint64_t *a2)
{
  return sub_10011893C( a1,  a2,  (uint64_t *)type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint,  (uint64_t (*)(char *, char *))sub_1001156D8) & 1;
}

Swift::Int sub_1000FD09C()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult,  &qword_1003558E0,  (uint64_t)&unk_1002C5C48);
}

uint64_t sub_1000FD0B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FCE10(a1, a2, a3);
}

uint64_t sub_1000FD0CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C010,  type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult,  (uint64_t)&unk_1002C5BC0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FD11C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A860, (uint64_t)qword_10036A3C8, (uint64_t)sub_1000FCAE4, a1);
}

uint64_t sub_1000FD138(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100355290,  type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult,  (uint64_t)&unk_1002C5B48);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FD178(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100355290,  type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult,  (uint64_t)&unk_1002C5B48);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000FD1C8()
{
  return &unk_10033F228;
}

unint64_t sub_1000FD1D4()
{
  return 0xD000000000000029LL;
}

uint64_t sub_1000FD1F0()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A3E0);
  sub_10000E704(v0, (uint64_t)qword_10036A3E0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v31 = swift_allocObject(v1, v6 + 11 * v4, v5 | 7);
  *(_OWORD *)(v31 + 16) = xmmword_1002B42D0;
  uint64_t v7 = v31 + v6;
  uint64_t v8 = v31 + v6 + *(int *)(v2 + 48);
  *(void *)(v31 + v6) = 1LL;
  *(void *)uint64_t v8 = "event_receipt_time";
  *(void *)(v8 + 8) = 18LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "client";
  *(void *)(v12 + 8) = 6LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 3LL;
  *(void *)uint64_t v14 = "type";
  *((void *)v14 + 1) = 4LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v7 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *uint64_t v15 = 4LL;
  *(void *)uint64_t v16 = "scan_type";
  *((void *)v16 + 1) = 9LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v7 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "power";
  *((void *)v18 + 1) = 5LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v7 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  void *v19 = 6LL;
  *(void *)uint64_t v20 = "associated_state";
  *((void *)v20 + 1) = 16LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v7 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 7LL;
  *(void *)uint64_t v22 = "scan";
  *((void *)v22 + 1) = 4LL;
  v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v7 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  void *v23 = 8LL;
  *(void *)uint64_t v24 = "simulated";
  *((void *)v24 + 1) = 9LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 9LL;
  *(void *)uint64_t v25 = "available";
  *(void *)(v25 + 8) = 9LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  uint64_t v26 = (void *)(v7 + 9 * v4);
  uint64_t v27 = (char *)v26 + *(int *)(v2 + 48);
  void *v26 = 10LL;
  *(void *)uint64_t v27 = "is_involuntary_link_down";
  *((void *)v27 + 1) = 24LL;
  v27[16] = 2;
  v11();
  uint64_t v28 = (void *)(v7 + 10 * v4);
  uint64_t v29 = (char *)v28 + *(int *)(v2 + 48);
  void *v28 = 11LL;
  *(void *)uint64_t v29 = "is_ap_awake";
  *((void *)v29 + 1) = 11LL;
  v29[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v31);
}

uint64_t sub_1000FD530()
{
  return sub_100008C30(&qword_10037A868, (uint64_t)qword_10036A3E0, (uint64_t)sub_1000FD1F0);
}

uint64_t sub_1000FD54C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A868, (uint64_t)qword_10036A3E0, (uint64_t)sub_1000FD1F0, a1);
}

uint64_t sub_1000FD568()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0LL);
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 1LL, 1LL, v3);
  uint64_t v4 = v1
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)uint64_t v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type) = 15;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType) = 15;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power) = 2;
  uint64_t v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
  uint64_t v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))( v7,  1LL,  1LL,  v8);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated) = 2;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available) = 2;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown) = 2;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake) = 2;
  qword_10037A878 = v1;
  return result;
}

uint64_t sub_1000FD6AC()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_1000FD714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v9)) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v3 + v9);
    uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0LL);
    uint64_t v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v13 = swift_retain(v10);
    sub_10010F8CC(v13);
    swift_release(v10);
    uint64_t v14 = *(void *)(v6 + v9);
    *(void *)(v6 + v9) = v12;
    swift_release(v14);
  }

  uint64_t v15 = *(void *)(v6 + v9);
  swift_retain(v15);
  uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1LL:
          uint64_t v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  v34,  33LL,  0LL);
          uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
          uint64_t v21 = (unint64_t *)&qword_1003552B8;
          uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          uint64_t v23 = &unk_1002BF798;
          goto LABEL_15;
        case 2LL:
          uint64_t v24 = v15
              + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client,  v34,  33LL,  0LL);
          uint64_t v25 = v5;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v24, a2, a3);
          goto LABEL_21;
        case 3LL:
          uint64_t v26 = v15
              + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type,  v34,  33LL,  0LL);
          unint64_t v27 = sub_10014A5DC();
          uint64_t v28 = v26;
          uint64_t v29 = &type metadata for CLP_LogEntry_PrivateData_WifiNotificationType;
          goto LABEL_11;
        case 4LL:
          uint64_t v30 = v15
              + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType,  v34,  33LL,  0LL);
          unint64_t v27 = sub_10014A620();
          uint64_t v28 = v30;
          uint64_t v29 = &type metadata for CLP_LogEntry_PrivateData_WifiScanType;
LABEL_11:
          uint64_t v25 = v5;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v28, v29, v27, a2, a3);
          goto LABEL_21;
        case 5LL:
          uint64_t v31 = OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power;
          goto LABEL_20;
        case 6LL:
          uint64_t v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState,  v34,  33LL,  0LL);
          uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0LL);
          uint64_t v21 = &qword_1003568C8;
          uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState;
          uint64_t v23 = &unk_1002C59E0;
          goto LABEL_15;
        case 7LL:
          uint64_t v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan,  v34,  33LL,  0LL);
          uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0LL);
          uint64_t v21 = &qword_100355290;
          uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult;
          uint64_t v23 = &unk_1002C5B48;
LABEL_15:
          uint64_t v32 = sub_10000FD98(v21, v22, (uint64_t)v23);
          uint64_t v25 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v19, v20, v32, a2, a3);
          goto LABEL_21;
        case 8LL:
          uint64_t v31 = OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated;
          goto LABEL_20;
        case 9LL:
          uint64_t v31 = OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available;
          goto LABEL_20;
        case 10LL:
          uint64_t v31 = OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown;
          goto LABEL_20;
        case 11LL:
          uint64_t v31 = OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake;
LABEL_20:
          uint64_t v33 = v15 + v31;
          swift_beginAccess(v15 + v31, v34, 33LL, 0LL);
          uint64_t v25 = v5;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v33, a2, a3);
LABEL_21:
          uint64_t v5 = v25;
          swift_endAccess(v34);
          break;
        default:
          break;
      }

      uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return swift_release(v15);
}

uint64_t sub_1000FDA70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0LL) + 20));
  uint64_t v10 = swift_retain(v9);
  sub_1000FDDE8(v10, a1, a2, a3);
  if (v4) {
    return swift_release(v9);
  }
  uint64_t v12 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client,  &v27,  0LL,  0LL);
  if ((v12[1] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v12, 2LL, a2, a3);
  }
  uint64_t v13 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type,  v28,  0LL,  0LL);
  if (*v13 != 15)
  {
    v34[0] = *v13;
    unint64_t v14 = sub_10014A5DC();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v34,  3LL,  &type metadata for CLP_LogEntry_PrivateData_WifiNotificationType,  v14,  a2,  a3);
  }

  uint64_t v15 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType,  v29,  0LL,  0LL);
  if (*v15 != 15)
  {
    v34[0] = *v15;
    unint64_t v16 = sub_10014A620();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v34,  4LL,  &type metadata for CLP_LogEntry_PrivateData_WifiScanType,  v16,  a2,  a3);
  }

  char v17 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power,  v34,  0LL,  0LL);
  int v18 = *v17;
  if (v18 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v18 & 1, 5LL, a2, a3);
  }
  sub_1000FDF74(v9, a1, a2, a3);
  sub_1000FE100(v9, a1, a2, a3);
  uint64_t v19 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated,  v33,  0LL,  0LL);
  int v20 = *v19;
  if (v20 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v20 & 1, 8LL, a2, a3);
  }
  uint64_t v21 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available,  v32,  0LL,  0LL);
  int v22 = *v21;
  if (v22 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v22 & 1, 9LL, a2, a3);
  }
  uint64_t v23 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown,  v31,  0LL,  0LL);
  int v24 = *v23;
  if (v24 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v24 & 1, 10LL, a2, a3);
  }
  uint64_t v25 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake,  v30,  0LL,  0LL);
  int v26 = *v25;
  if (v26 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v26 & 1, 11LL, a2, a3);
  }
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000FDDE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355538);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v15 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000FDF74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355638);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355638);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  uint64_t v15 = sub_10000FD98( &qword_1003568C8,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState,  (uint64_t)&unk_1002C59E0);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 6LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t sub_1000FE100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355640);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355640);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  uint64_t v15 = sub_10000FD98( &qword_100355290,  type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult,  (uint64_t)&unk_1002C5B48);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 7LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
}

uint64_t sub_1000FE28C(uint64_t a1, uint64_t a2)
{
  return sub_100065AC0( a1,  a2,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  (uint64_t (*)(uint64_t, uint64_t))sub_1000FE2B4) & 1;
}

BOOL sub_1000FE2B4(uint64_t a1, uint64_t a2)
{
  uint64_t v111 = a2;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0LL);
  uint64_t v98 = *(void *)(v3 - 8);
  uint64_t v99 = v3;
  __chkstk_darwin(v3);
  uint64_t v95 = (uint64_t *)((char *)&v95 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v97 = sub_100003A0C(&qword_10035C448);
  __chkstk_darwin(v97);
  uint64_t v100 = (uint64_t)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100003A0C(&qword_100355640);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v109 = (uint64_t *)((char *)&v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v7);
  uint64_t v108 = (char *)&v95 - v9;
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0LL);
  uint64_t v102 = *(void *)(v10 - 8);
  uint64_t v103 = v10;
  __chkstk_darwin(v10);
  uint64_t v96 = (uint64_t)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v101 = sub_100003A0C(&qword_10035C450);
  __chkstk_darwin(v101);
  uint64_t v104 = (uint64_t)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100003A0C(&qword_100355638);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v107 = (char *)&v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v105 = (uint64_t)&v95 - v16;
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v106 = (uint64_t)&v95 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_100003A0C(&qword_10035C418);
  __chkstk_darwin(v20);
  int v22 = (char *)&v95 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = sub_100003A0C(&qword_100355538);
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v110 = (uint64_t)&v95 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v95 - v26;
  uint64_t v28 = a1;
  uint64_t v29 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v29, v133, 0LL, 0LL);
  sub_10000E6C0(v29, (uint64_t)v27, &qword_100355538);
  uint64_t v30 = v111;
  uint64_t v31 = v111
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess( v111 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  v132,  0LL,  0LL);
  uint64_t v32 = (uint64_t)&v22[*(int *)(v20 + 48)];
  sub_10000E6C0((uint64_t)v27, (uint64_t)v22, &qword_100355538);
  sub_10000E6C0(v31, v32, &qword_100355538);
  uint64_t v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  if (v33((uint64_t)v22, 1LL, v17) == 1)
  {
    swift_retain(v28);
    swift_retain(v30);
    sub_100015764((uint64_t)v27, &qword_100355538);
    uint64_t v34 = v28;
    if (v33(v32, 1LL, v17) == 1)
    {
      sub_100015764((uint64_t)v22, &qword_100355538);
      goto LABEL_11;
    }

Swift::Int sub_1000FEE68()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  &qword_1003558E8,  (uint64_t)&unk_1002C5DB0);
}

uint64_t sub_1000FEE84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD7C(a1, &qword_10037A870, &qword_10037A878, (uint64_t)sub_1000FD568, a2);
}

uint64_t sub_1000FEEA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FD714(a1, a2, a3);
}

uint64_t sub_1000FEEB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FDA70(a1, a2, a3);
}

uint64_t sub_1000FEEC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C008,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  (uint64_t)&unk_1002C5D28);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FEF18@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A868, (uint64_t)qword_10036A3E0, (uint64_t)sub_1000FD1F0, a1);
}

uint64_t sub_1000FEF34(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100350F88,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  (uint64_t)&unk_1002C5CB0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FEF74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100350F88,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  (uint64_t)&unk_1002C5CB0);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000FEFC4()
{
  return &unk_10033F238;
}

unint64_t sub_1000FEFD0()
{
  return 0xD000000000000033LL;
}

uint64_t sub_1000FEFEC()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A3F8);
  sub_10000E704(v0, (uint64_t)qword_10036A3F8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "applicable_time";
  *(void *)(v9 + 8) = 15LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "state";
  *(void *)(v13 + 8) = 5LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "state_probability";
  *((void *)v15 + 1) = 17LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "measurement_source";
  *((void *)v17 + 1) = 18LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000FF1B4()
{
  return sub_100008C30(&qword_10037A880, (uint64_t)qword_10036A3F8, (uint64_t)sub_1000FEFEC);
}

uint64_t sub_1000FF1D0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A880, (uint64_t)qword_10036A3F8, (uint64_t)sub_1000FEFEC, a1);
}

uint64_t sub_1000FF1EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0LL) + 20);
          uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
          uint64_t v12 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
          uint64_t v13 = v9;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v10, v11, v12, a2, a3);
          goto LABEL_5;
        case 2LL:
          uint64_t v14 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0LL) + 24);
          unint64_t v15 = sub_100149DA0();
          uint64_t v16 = v14;
          uint64_t v17 = &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability;
          goto LABEL_12;
        case 3LL:
          uint64_t v18 = type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0LL);
          uint64_t v13 = v9;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + *(int *)(v18 + 28), a2, a3);
          goto LABEL_5;
        case 4LL:
          uint64_t v19 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0LL) + 32);
          unint64_t v15 = sub_100149D5C();
          uint64_t v16 = v19;
          uint64_t v17 = &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource;
LABEL_12:
          uint64_t v13 = v9;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v16, v17, v15, a2, a3);
LABEL_5:
          uint64_t v9 = v13;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000FF374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = sub_100105BC8(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
  if (!v4)
  {
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0LL);
    uint64_t v11 = v10;
    if (*(_BYTE *)(v5 + *(int *)(v10 + 24)) != 4)
    {
      char v15 = *(_BYTE *)(v5 + *(int *)(v10 + 24));
      unint64_t v12 = sub_100149DA0();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v15,  2LL,  &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability,  v12,  a2,  a3);
    }

    uint64_t v13 = v5 + *(int *)(v11 + 28);
    if ((*(_BYTE *)(v13 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3LL, a2, a3, *(double *)v13);
    }
    if (*(_BYTE *)(v5 + *(int *)(v11 + 32)) != 4)
    {
      char v16 = *(_BYTE *)(v5 + *(int *)(v11 + 32));
      unint64_t v14 = sub_100149D5C();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v16,  4LL,  &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource,  v14,  a2,  a3);
    }

    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_1000FF4C4()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction,  &qword_1003558F0,  (uint64_t)&unk_1002C5F18);
}

uint64_t sub_1000FF4E0@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))( v4,  1LL,  1LL,  v5);
  uint64_t v7 = a1[7];
  *(_BYTE *)(a2 + a1[6]) = 4;
  uint64_t v8 = a2 + v7;
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  *(_BYTE *)(a2 + a1[8]) = 4;
  return result;
}

uint64_t sub_1000FF55C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FF1EC(a1, a2, a3);
}

uint64_t sub_1000FF570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FF374(a1, a2, a3);
}

uint64_t sub_1000FF584(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035C000,  type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction,  (uint64_t)&unk_1002C5E90);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FF5D4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A880, (uint64_t)qword_10036A3F8, (uint64_t)sub_1000FEFEC, a1);
}

uint64_t sub_1000FF5F0(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003568F8,  type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction,  (uint64_t)&unk_1002C5E18);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FF630(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003568F8,  type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction,  (uint64_t)&unk_1002C5E18);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000FF680()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A410);
  sub_10000E704(v0, (uint64_t)qword_10036A410);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "GA_PROTOBUF_DEFAULT";
  *(void *)(v9 + 8) = 19LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  unint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "GA_UNKNOWN";
  *(void *)(v13 + 8) = 10LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  unint64_t v14 = (void *)(v8 + 2 * v4);
  char v15 = (char *)v14 + *(int *)(v2 + 48);
  *unint64_t v14 = 2LL;
  *(void *)char v15 = "GA_LOW";
  *((void *)v15 + 1) = 6LL;
  v15[16] = 2;
  v12();
  char v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *char v16 = 3LL;
  *(void *)uint64_t v17 = "GA_HIGH";
  *((void *)v17 + 1) = 7LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000FF83C()
{
  return sub_100008C30(&qword_10037A888, (uint64_t)qword_10036A410, (uint64_t)sub_1000FF680);
}

uint64_t sub_1000FF858@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A888, (uint64_t)qword_10036A410, (uint64_t)sub_1000FF680, a1);
}

uint64_t sub_1000FF874@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A888, (uint64_t)qword_10036A410, (uint64_t)sub_1000FF680, a1);
}

uint64_t sub_1000FF890()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A428);
  sub_10000E704(v0, (uint64_t)qword_10036A428);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "MS_PROTOBUF_DEFAULT";
  *(void *)(v9 + 8) = 19LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  unint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "MS_AMBIENT_LIGHT";
  *(void *)(v13 + 8) = 16LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  unint64_t v14 = (void *)(v8 + 2 * v4);
  char v15 = (char *)v14 + *(int *)(v2 + 48);
  *unint64_t v14 = 2LL;
  *(void *)char v15 = "MS_PROXIMITY";
  *((void *)v15 + 1) = 12LL;
  v15[16] = 2;
  v12();
  char v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *char v16 = 3LL;
  *(void *)uint64_t v17 = "MS_FUSED_MULTIPLE";
  *((void *)v17 + 1) = 17LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000FFA4C()
{
  return sub_100008C30(&qword_10037A890, (uint64_t)qword_10036A428, (uint64_t)sub_1000FF890);
}

uint64_t sub_1000FFA68@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A890, (uint64_t)qword_10036A428, (uint64_t)sub_1000FF890, a1);
}

uint64_t sub_1000FFA84@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A890, (uint64_t)qword_10036A428, (uint64_t)sub_1000FF890, a1);
}

void *sub_1000FFAA0()
{
  return &unk_10033F248;
}

unint64_t sub_1000FFAAC()
{
  return 0xD000000000000030LL;
}

uint64_t sub_1000FFAC8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A440);
  sub_10000E704(v0, (uint64_t)qword_10036A440);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3340;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  void *v8 = 1LL;
  *(void *)uint64_t v9 = "latitude_deg";
  *(void *)(v9 + 8) = 12LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  unint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "longitude_deg";
  *((void *)v13 + 1) = 13LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000FFC18()
{
  return sub_100008C30(&qword_10037A898, (uint64_t)qword_10036A440, (uint64_t)sub_1000FFAC8);
}

uint64_t sub_1000FFC34@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A898, (uint64_t)qword_10036A440, (uint64_t)sub_1000FFAC8, a1);
}

uint64_t sub_1000FFC50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CB7D4(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t sub_1000FFC6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CB8A0(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t sub_1000FFC88(uint64_t a1, uint64_t a2)
{
  return sub_10011F4C0(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D) & 1;
}

Swift::Int sub_1000FFCA8()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D,  &qword_1003558F8,  (uint64_t)&unk_1002C60D0);
}

uint64_t sub_1000FFCC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035BFF8,  type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D,  (uint64_t)&unk_1002C6048);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FFD14@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A898, (uint64_t)qword_10036A440, (uint64_t)sub_1000FFAC8, a1);
}

uint64_t sub_1000FFD30(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100355900,  type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D,  (uint64_t)&unk_1002C5FD0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FFD70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100355900,  type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D,  (uint64_t)&unk_1002C5FD0);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000FFDC0()
{
  return &unk_10033F258;
}

unint64_t sub_1000FFDCC()
{
  return 0xD000000000000035LL;
}

uint64_t sub_1000FFDE8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A458);
  sub_10000E704(v0, (uint64_t)qword_10036A458);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42A0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "coordinates";
  *(void *)(v9 + 8) = 11LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  unint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "base_height_above_ground_m";
  *(void *)(v13 + 8) = 26LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  unint64_t v14 = (void *)(v8 + 2 * v4);
  char v15 = (char *)v14 + *(int *)(v2 + 48);
  *unint64_t v14 = 3LL;
  *(void *)char v15 = "height_above_base_m";
  *((void *)v15 + 1) = 19LL;
  v15[16] = 2;
  v12();
  char v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *char v16 = 4LL;
  *(void *)uint64_t v17 = "has_terrain_elevation";
  *((void *)v17 + 1) = 21LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  void *v18 = 5LL;
  *(void *)uint64_t v19 = "terrain_elevation_m";
  *((void *)v19 + 1) = 19LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  void *v20 = 6LL;
  *(void *)uint64_t v21 = "min_base_height_m";
  *((void *)v21 + 1) = 17LL;
  v21[16] = 2;
  v12();
  int v22 = (void *)(v8 + 6 * v4);
  uint64_t v23 = (char *)v22 + *(int *)(v2 + 48);
  void *v22 = 7LL;
  *(void *)uint64_t v23 = "max_base_height_m";
  *((void *)v23 + 1) = 17LL;
  v23[16] = 2;
  v12();
  uint64_t v24 = (void *)(v8 + 7 * v4);
  uint64_t v25 = (char *)v24 + *(int *)(v2 + 48);
  void *v24 = 8LL;
  *(void *)uint64_t v25 = "top_height_m";
  *((void *)v25 + 1) = 12LL;
  v25[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10010009C()
{
  return sub_100008C30(&qword_10037A8A0, (uint64_t)qword_10036A458, (uint64_t)sub_1000FFDE8);
}

uint64_t sub_1001000B8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A8A0, (uint64_t)qword_10036A458, (uint64_t)sub_1000FFDE8, a1);
}

uint64_t sub_1001000D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0LL);
          uint64_t v11 = sub_10000FD98( &qword_100355900,  type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D,  (uint64_t)&unk_1002C5FD0);
          uint64_t v12 = v9;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v3, v10, v11, a2, a3);
          goto LABEL_14;
        case 2LL:
          uint64_t v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0LL) + 24);
          goto LABEL_13;
        case 3LL:
          uint64_t v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0LL) + 28);
          goto LABEL_13;
        case 4LL:
          uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0LL);
          uint64_t v12 = v9;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + *(int *)(v14 + 32), a2, a3);
          goto LABEL_14;
        case 5LL:
          uint64_t v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0LL) + 36);
          goto LABEL_13;
        case 6LL:
          uint64_t v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0LL) + 40);
          goto LABEL_13;
        case 7LL:
          uint64_t v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0LL) + 44);
          goto LABEL_13;
        case 8LL:
          uint64_t v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0LL) + 48);
LABEL_13:
          uint64_t v12 = v9;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v13, a2, a3);
LABEL_14:
          uint64_t v9 = v12;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_100100264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)v5;
  if (!*(void *)(*(void *)v5 + 16LL)
    || (uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0LL),
        uint64_t v11 = sub_10000FD98( &qword_100355900,  type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D,  (uint64_t)&unk_1002C5FD0),  result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v9, 1LL, v10, v11, a2, a3),  !v4))
  {
    uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0LL);
    uint64_t v13 = (int *)result;
    uint64_t v14 = v5 + *(int *)(result + 24);
    if ((*(_BYTE *)(v14 + 8) & 1) == 0) {
      uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2LL, a2, a3, *(double *)v14);
    }
    if (!v4)
    {
      uint64_t v15 = v5 + v13[7];
      if ((*(_BYTE *)(v15 + 8) & 1) == 0) {
        dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3LL, a2, a3, *(double *)v15);
      }
      int v16 = *(unsigned __int8 *)(v5 + v13[8]);
      if (v16 != 2) {
        dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v16 & 1, 4LL, a2, a3);
      }
      uint64_t v17 = v5 + v13[9];
      if ((*(_BYTE *)(v17 + 8) & 1) == 0) {
        dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(5LL, a2, a3, *(double *)v17);
      }
      sub_1000FAEE8(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
      sub_1000FAF5C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
      sub_100100474(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }

  return result;
}

uint64_t sub_100100474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0LL);
  uint64_t v9 = a1 + *(int *)(result + 48);
  if ((*(_BYTE *)(v9 + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(8LL, a3, a4, *(double *)v9);
  }
  return result;
}

Swift::Int sub_1001004EC()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection,  &qword_100355908,  (uint64_t)&unk_1002C6238);
}

uint64_t sub_100100508@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[7];
  uint64_t v6 = (char *)a2 + a1[6];
  *(void *)uint64_t v6 = 0LL;
  v6[8] = 1;
  uint64_t v7 = (char *)a2 + v5;
  *(void *)uint64_t v7 = 0LL;
  v7[8] = 1;
  uint64_t v8 = a1[9];
  *((_BYTE *)a2 + a1[8]) = 2;
  uint64_t v9 = (char *)a2 + v8;
  *(void *)uint64_t v9 = 0LL;
  v9[8] = 1;
  uint64_t v10 = a1[11];
  uint64_t v11 = (char *)a2 + a1[10];
  *(void *)uint64_t v11 = 0LL;
  v11[8] = 1;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)uint64_t v12 = 0LL;
  v12[8] = 1;
  uint64_t v13 = (char *)a2 + a1[12];
  *(void *)uint64_t v13 = 0LL;
  v13[8] = 1;
  return result;
}

uint64_t sub_1001005A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001000D4(a1, a2, a3);
}

uint64_t sub_1001005B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100100264(a1, a2, a3);
}

uint64_t sub_1001005CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035BFF0,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection,  (uint64_t)&unk_1002C61B0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10010061C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A8A0, (uint64_t)qword_10036A458, (uint64_t)sub_1000FFDE8, a1);
}

uint64_t sub_100100638(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100355910,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection,  (uint64_t)&unk_1002C6138);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100100678(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100355910,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection,  (uint64_t)&unk_1002C6138);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1001006CC()
{
  return &unk_10033F268;
}

unint64_t sub_1001006D8()
{
  return 0xD00000000000002ELL;
}

uint64_t sub_1001006F4()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A470);
  sub_10000E704(v0, (uint64_t)qword_10036A470);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  void *v8 = 1LL;
  *(void *)uint64_t v9 = "sections";
  *(void *)(v9 + 8) = 8LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "building_hash";
  *((void *)v13 + 1) = 13LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "building_id";
  *(void *)(v14 + 8) = 11LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100100894()
{
  return sub_100008C30(&qword_10037A8A8, (uint64_t)qword_10036A470, (uint64_t)sub_1001006F4);
}

uint64_t sub_1001008B0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A8A8, (uint64_t)qword_10036A470, (uint64_t)sub_1001006F4, a1);
}

uint64_t sub_1001008CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0LL) + 24);
        goto LABEL_5;
      }

      if (result == 1)
      {
        uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0LL);
        uint64_t v11 = sub_10000FD98( &qword_100355910,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection,  (uint64_t)&unk_1002C6138);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v3, v10, v11, a2, a3);
      }

uint64_t sub_1001009FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v3;
  if (!*(void *)(*v3 + 16)
    || (uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0LL),
        uint64_t v10 = sub_10000FD98( &qword_100355910,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection,  (uint64_t)&unk_1002C6138),  result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v8, 1LL, v9, v10, a2, a3),  !v4))
  {
    uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0LL);
    uint64_t v12 = result;
    uint64_t v13 = (uint64_t)v3 + *(int *)(result + 24);
    if ((*(_BYTE *)(v13 + 8) & 1) == 0) {
      uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(void *)v13, 2LL, a2, a3);
    }
    if (!v4)
    {
      uint64_t v14 = (uint64_t)v3 + *(int *)(v12 + 28);
      if ((*(_BYTE *)(v14 + 8) & 1) == 0) {
        dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(void *)v14, 3LL, a2, a3);
      }
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }

  return result;
}

Swift::Int sub_100100B3C()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding,  &qword_100355918,  (uint64_t)&unk_1002C63A0);
}

uint64_t sub_100100B58@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = *(int *)(a1 + 28);
  uint64_t v6 = (char *)a2 + *(int *)(a1 + 24);
  *(void *)uint64_t v6 = 0LL;
  v6[8] = 1;
  uint64_t v7 = (char *)a2 + v5;
  *(void *)uint64_t v7 = 0LL;
  v7[8] = 1;
  return result;
}

uint64_t sub_100100BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001008CC(a1, a2, a3);
}

uint64_t sub_100100BC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001009FC(a1, a2, a3);
}

uint64_t sub_100100BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035BFE8,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding,  (uint64_t)&unk_1002C6318);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100100C28@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A8A8, (uint64_t)qword_10036A470, (uint64_t)sub_1001006F4, a1);
}

uint64_t sub_100100C44(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100355920,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding,  (uint64_t)&unk_1002C62A0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100100C84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100355920,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding,  (uint64_t)&unk_1002C62A0);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100100CD4()
{
  return &unk_10033F278;
}

unint64_t sub_100100CE0()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_100100CFC()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A488);
  sub_10000E704(v0, (uint64_t)qword_10036A488);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "receipt_time";
  *(void *)(v9 + 8) = 12LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "buildings";
  *(void *)(v13 + 8) = 9LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "building_hashes_in_previous_query_but_not_current_query";
  *((void *)v15 + 1) = 55LL;
  v15[16] = 2;
  v12();
  int v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *int v16 = 4LL;
  *(void *)uint64_t v17 = "query_location_coordinate";
  *((void *)v17 + 1) = 25LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100100EC4()
{
  return sub_100008C30(&qword_10037A8B0, (uint64_t)qword_10036A488, (uint64_t)sub_100100CFC);
}

uint64_t sub_100100EE0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A8B0, (uint64_t)qword_10036A488, (uint64_t)sub_100100CFC, a1);
}

uint64_t sub_100100EFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0LL) + 28);
          uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
          uint64_t v12 = (unint64_t *)&qword_1003552B8;
          uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          uint64_t v14 = &unk_1002BF798;
          goto LABEL_5;
        case 2LL:
          uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0LL);
          uint64_t v18 = sub_10000FD98( &qword_100355920,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding,  (uint64_t)&unk_1002C62A0);
          uint64_t v16 = v9;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v3, v17, v18, a2, a3);
          goto LABEL_6;
        case 3LL:
          uint64_t v16 = v9;
          dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)(v3 + 8, a2, a3);
          goto LABEL_6;
        case 4LL:
          uint64_t v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0LL) + 32);
          uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0LL);
          uint64_t v12 = &qword_100355900;
          uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D;
          uint64_t v14 = &unk_1002C5FD0;
LABEL_5:
          uint64_t v15 = sub_10000FD98(v12, v13, (uint64_t)v14);
          uint64_t v16 = v9;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v10, v11, v15, a2, a3);
LABEL_6:
          uint64_t v9 = v16;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_100101098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1001011D0((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    uint64_t v9 = *v3;
    if (*(void *)(*v3 + 16LL))
    {
      uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0LL);
      uint64_t v11 = sub_10000FD98( &qword_100355920,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding,  (uint64_t)&unk_1002C62A0);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v9, 2LL, v10, v11, a2, a3);
    }

    if (*(void *)(v3[1] + 16LL)) {
      dispatch thunk of Visitor.visitRepeatedUInt64Field(value:fieldNumber:)();
    }
    sub_100101344((uint64_t)v3, a1, a2, a3);
    type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0LL);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_1001011D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_100355538);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v15 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_100101344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355648);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 32), (uint64_t)v8, &qword_100355648);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
  uint64_t v15 = sub_10000FD98( &qword_100355900,  type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D,  (uint64_t)&unk_1002C5FD0);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

Swift::Int sub_1001014BC()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData,  &qword_100355928,  (uint64_t)&unk_1002C6508);
}

uint64_t sub_1001014D8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  a2[1] = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = (char *)a2 + *(int *)(a1 + 32);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t sub_10010156C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_1001015AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t sub_1001015EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100100EFC(a1, a2, a3);
}

uint64_t sub_100101600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100101098(a1, a2, a3);
}

uint64_t sub_100101614(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035BFE0,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData,  (uint64_t)&unk_1002C6480);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100101664@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A8B0, (uint64_t)qword_10036A488, (uint64_t)sub_100100CFC, a1);
}

uint64_t sub_100101680(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356940,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData,  (uint64_t)&unk_1002C6408);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1001016C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356940,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData,  (uint64_t)&unk_1002C6408);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100101710()
{
  return &unk_10033F288;
}

unint64_t sub_10010171C()
{
  return 0xD00000000000003BLL;
}

uint64_t sub_100101738()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A4A0);
  sub_10000E704(v0, (uint64_t)qword_10036A4A0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32F0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "branch_coordinates";
  *(void *)(v9 + 8) = 18LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "branch_type";
  *(void *)(v13 + 8) = 11LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "branch_number";
  *((void *)v15 + 1) = 13LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "branch_width_mm";
  *((void *)v17 + 1) = 15LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 5LL;
  *(void *)uint64_t v18 = "branch_length_mm";
  *(void *)(v18 + 8) = 16LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10010193C()
{
  return sub_100008C30(&qword_10037A8B8, (uint64_t)qword_10036A4A0, (uint64_t)sub_100101738);
}

uint64_t sub_100101958@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A8B8, (uint64_t)qword_10036A4A0, (uint64_t)sub_100101738, a1);
}

uint64_t sub_100101974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0LL);
          uint64_t v13 = sub_10000FD98( &qword_100355900,  type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D,  (uint64_t)&unk_1002C5FD0);
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v3, v12, v13, a2, a3);
          goto LABEL_6;
        case 2LL:
          uint64_t v14 = v3
              + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0LL) + 24);
          unint64_t v15 = sub_100149D18();
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v14,  &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType,  v15,  a2,  a3);
          goto LABEL_6;
        case 3LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0LL) + 28);
          goto LABEL_5;
        case 4LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0LL) + 32);
          goto LABEL_5;
        case 5LL:
          uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0LL) + 36);
LABEL_5:
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + v10, a2, a3);
LABEL_6:
          uint64_t v9 = v11;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_100101AE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *v5;
  if (!*(void *)(*v5 + 16)
    || (uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0LL),
        uint64_t v11 = sub_10000FD98( &qword_100355900,  type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D,  (uint64_t)&unk_1002C5FD0),  result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v9, 1LL, v10, v11, a2, a3),  !v4))
  {
    uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0LL);
    uint64_t v13 = (int *)result;
    if (*((_BYTE *)v5 + *(int *)(result + 24)) != 4)
    {
      char v18 = *((_BYTE *)v5 + *(int *)(result + 24));
      unint64_t v14 = sub_100149D18();
      uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v18,  2LL,  &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType,  v14,  a2,  a3);
    }

    if (!v4)
    {
      unint64_t v15 = (unsigned int *)((char *)v5 + v13[7]);
      if ((v15[1] & 1) == 0) {
        dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v15, 3LL, a2, a3);
      }
      uint64_t v16 = (unsigned int *)((char *)v5 + v13[8]);
      if ((v16[1] & 1) == 0) {
        dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v16, 4LL, a2, a3);
      }
      uint64_t v17 = (unsigned int *)((char *)v5 + v13[9]);
      if ((v17[1] & 1) == 0) {
        dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v17, 5LL, a2, a3);
      }
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }

  return result;
}

Swift::Int sub_100101C98()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch,  &qword_100355930,  (uint64_t)&unk_1002C6670);
}

uint64_t sub_100101CB4@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[7];
  *((_BYTE *)a2 + a1[6]) = 4;
  uint64_t v6 = (char *)a2 + v5;
  *(_DWORD *)uint64_t v6 = 0;
  v6[4] = 1;
  uint64_t v7 = a1[9];
  char v8 = (char *)a2 + a1[8];
  *(_DWORD *)char v8 = 0;
  v8[4] = 1;
  uint64_t v9 = (char *)a2 + v7;
  *(_DWORD *)uint64_t v9 = 0;
  v9[4] = 1;
  return result;
}

uint64_t sub_100101D24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100101974(a1, a2, a3);
}

uint64_t sub_100101D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100101AE8(a1, a2, a3);
}

uint64_t sub_100101D4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035BFD8,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch,  (uint64_t)&unk_1002C65E8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100101D9C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A8B8, (uint64_t)qword_10036A4A0, (uint64_t)sub_100101738, a1);
}

uint64_t sub_100101DB8(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100355940,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch,  (uint64_t)&unk_1002C6570);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100101DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100355940,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch,  (uint64_t)&unk_1002C6570);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_100101E48()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A4B8);
  sub_10000E704(v0, (uint64_t)qword_10036A4B8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "BranchType_PROTOBUF_DEFAULT";
  *(void *)(v9 + 8) = 27LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "BranchType_UNKNOWN";
  *(void *)(v13 + 8) = 18LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  unint64_t v14 = (void *)(v8 + 2 * v4);
  unint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *unint64_t v14 = 2LL;
  *(void *)unint64_t v15 = "BranchType_LEAFY";
  *((void *)v15 + 1) = 16LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 3LL;
  *(void *)uint64_t v17 = "BranchType_NON_LEAFY";
  *((void *)v17 + 1) = 20LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100102004()
{
  return sub_100008C30(&qword_10037A8C0, (uint64_t)qword_10036A4B8, (uint64_t)sub_100101E48);
}

uint64_t sub_100102020@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A8C0, (uint64_t)qword_10036A4B8, (uint64_t)sub_100101E48, a1);
}

uint64_t sub_10010203C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A8C0, (uint64_t)qword_10036A4B8, (uint64_t)sub_100101E48, a1);
}

void *sub_100102058()
{
  return &unk_10033F298;
}

unint64_t sub_100102064()
{
  return 0xD000000000000040LL;
}

uint64_t sub_100102080()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A4D0);
  sub_10000E704(v0, (uint64_t)qword_10036A4D0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32F0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "north_latitude_deg";
  *(void *)(v9 + 8) = 18LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "west_longitude_deg";
  *(void *)(v13 + 8) = 18LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  unint64_t v14 = (void *)(v8 + 2 * v4);
  unint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *unint64_t v14 = 3LL;
  *(void *)unint64_t v15 = "south_latitude_deg";
  *((void *)v15 + 1) = 18LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "east_longitude_deg";
  *((void *)v17 + 1) = 18LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 5LL;
  *(void *)uint64_t v18 = "vertex";
  *(void *)(v18 + 8) = 6LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100102288()
{
  return sub_100008C30(&qword_10037A8C8, (uint64_t)qword_10036A4D0, (uint64_t)sub_100102080);
}

uint64_t sub_1001022A4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A8C8, (uint64_t)qword_10036A4D0, (uint64_t)sub_100102080, a1);
}

uint64_t sub_1001022C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          goto LABEL_5;
        case 2LL:
          goto LABEL_5;
        case 3LL:
          goto LABEL_5;
        case 4LL:
LABEL_5:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v9, a2, a3);
          break;
        case 5LL:
          uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0LL);
          uint64_t v11 = sub_10000FD98( &qword_100355900,  type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D,  (uint64_t)&unk_1002C5FD0);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v3, v10, v11, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_100102414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0LL);
  uint64_t v9 = (int *)result;
  uint64_t v10 = (uint64_t)v3 + *(int *)(result + 24);
  if ((*(_BYTE *)(v10 + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1LL, a2, a3, *(double *)v10);
  }
  if (!v4)
  {
    uint64_t v11 = (uint64_t)v3 + v9[7];
    if ((*(_BYTE *)(v11 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2LL, a2, a3, *(double *)v11);
    }
    uint64_t v12 = (uint64_t)v3 + v9[8];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3LL, a2, a3, *(double *)v12);
    }
    uint64_t v13 = (uint64_t)v3 + v9[9];
    if ((*(_BYTE *)(v13 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(4LL, a2, a3, *(double *)v13);
    }
    uint64_t v14 = *v3;
    if (*(void *)(*v3 + 16))
    {
      uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0LL);
      uint64_t v16 = sub_10000FD98( &qword_100355900,  type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D,  (uint64_t)&unk_1002C5FD0);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v14, 5LL, v15, v16, a2, a3);
    }

    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_1001025C8()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox,  &qword_100355938,  (uint64_t)&unk_1002C6800);
}

uint64_t sub_1001025E4@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[7];
  uint64_t v6 = (char *)a2 + a1[6];
  *(void *)uint64_t v6 = 0LL;
  v6[8] = 1;
  uint64_t v7 = (char *)a2 + v5;
  *(void *)uint64_t v7 = 0LL;
  v7[8] = 1;
  uint64_t v8 = a1[9];
  uint64_t v9 = (char *)a2 + a1[8];
  *(void *)uint64_t v9 = 0LL;
  v9[8] = 1;
  uint64_t v10 = (char *)a2 + v8;
  *(void *)uint64_t v10 = 0LL;
  v10[8] = 1;
  return result;
}

uint64_t sub_100102658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001022C0(a1, a2, a3);
}

uint64_t sub_10010266C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100102414(a1, a2, a3);
}

uint64_t sub_100102680(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035BFD0,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox,  (uint64_t)&unk_1002C6778);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1001026D0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A8C8, (uint64_t)qword_10036A4D0, (uint64_t)sub_100102080, a1);
}

uint64_t sub_1001026EC(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356968,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox,  (uint64_t)&unk_1002C6700);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10010272C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356968,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox,  (uint64_t)&unk_1002C6700);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100102780()
{
  return &unk_10033F2A8;
}

unint64_t sub_10010278C()
{
  return 0xD000000000000035LL;
}

uint64_t sub_1001027A8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A4E8);
  sub_10000E704(v0, (uint64_t)qword_10036A4E8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 - v4 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3330;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "bounding_box";
  *(void *)(v9 + 8) = 12LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "branches";
  *(void *)(v13 + 8) = 8LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "tree_id";
  *((void *)v15 + 1) = 7LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "tree_type";
  *((void *)v17 + 1) = 9LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  void *v18 = 5LL;
  *(void *)uint64_t v19 = "reliability_score_DEPRECATED";
  *((void *)v19 + 1) = 28LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  void *v20 = 6LL;
  *(void *)uint64_t v21 = "tree_features";
  *((void *)v21 + 1) = 13LL;
  v21[16] = 2;
  v12();
  int v22 = (void *)(v8 + 6 * v4);
  uint64_t v23 = (char *)v22 + *(int *)(v2 + 48);
  void *v22 = 7LL;
  *(void *)uint64_t v23 = "branch_count";
  *((void *)v23 + 1) = 12LL;
  v23[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100102A1C()
{
  return sub_100008C30(&qword_10037A8D0, (uint64_t)qword_10036A4E8, (uint64_t)sub_1001027A8);
}

uint64_t sub_100102A38@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A8D0, (uint64_t)qword_10036A4E8, (uint64_t)sub_1001027A8, a1);
}

uint64_t sub_100102A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0LL) + 24);
          uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0LL);
          uint64_t v11 = &qword_100356968;
          uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox;
          uint64_t v13 = &unk_1002C6700;
          goto LABEL_11;
        case 2LL:
          uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0LL);
          uint64_t v15 = sub_10000FD98( &qword_100355940,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch,  (uint64_t)&unk_1002C6570);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v3, v14, v15, a2, a3);
          break;
        case 3LL:
          uint64_t v16 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0LL) + 28);
          goto LABEL_13;
        case 4LL:
          uint64_t v17 = v3
              + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0LL) + 32);
          unint64_t v18 = sub_100149CD4();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v17,  &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType,  v18,  a2,  a3);
          break;
        case 5LL:
          uint64_t v19 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0LL);
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + *(int *)(v19 + 36), a2, a3);
          break;
        case 6LL:
          uint64_t v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0LL) + 40);
          uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0LL);
          uint64_t v11 = (unint64_t *)&unk_100356990;
          uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures;
          uint64_t v13 = &unk_1002C69F8;
LABEL_11:
          uint64_t v20 = sub_10000FD98(v11, v12, (uint64_t)v13);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v20, a2, a3);
          break;
        case 7LL:
          uint64_t v16 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0LL) + 44);
LABEL_13:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v3 + v16, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_100102C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_100102E70(v3, a1, a2, a3);
  if (!v4)
  {
    uint64_t v9 = *(void *)v3;
    if (*(void *)(*(void *)v3 + 16LL))
    {
      uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0LL);
      uint64_t v11 = sub_10000FD98( &qword_100355940,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch,  (uint64_t)&unk_1002C6570);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v9, 2LL, v10, v11, a2, a3);
    }

    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0LL);
    uint64_t v13 = v3 + v12[7];
    if ((*(_BYTE *)(v13 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(void *)v13, 3LL, a2, a3);
    }
    if (*(_BYTE *)(v3 + v12[8]) != 4)
    {
      char v16 = *(_BYTE *)(v3 + v12[8]);
      unint64_t v14 = sub_100149CD4();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v16,  4LL,  &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType,  v14,  a2,  a3);
    }

    uint64_t v15 = (unsigned int *)(v3 + v12[9]);
    if ((v15[1] & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v15, 5LL, a2, a3);
    }
    sub_100102FE4(v3, a1, a2, a3);
    sub_100103158(v3, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_100102E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355650);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_100355650);
  sub_100003E68( (uint64_t)v8,  (uint64_t)v12,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  uint64_t v15 = sub_10000FD98( &qword_100356968,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox,  (uint64_t)&unk_1002C6700);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v17);
  return sub_100004090( (uint64_t)v12,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_100102FE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355658);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 40), (uint64_t)v8, &qword_100355658);
  sub_100003E68( (uint64_t)v8,  (uint64_t)v12,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
  uint64_t v15 = sub_10000FD98( &qword_100356990,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures,  (uint64_t)&unk_1002C69F8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 6LL, v9, v15, a3, v17);
  return sub_100004090( (uint64_t)v12,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t sub_100103158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0LL);
  uint64_t v8 = a1 + *(int *)(result + 44);
  if ((*(_BYTE *)(v8 + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(void *)v8, 7LL, a3, a4);
  }
  return result;
}

Swift::Int sub_1001031D0()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna,  &qword_100355948,  (uint64_t)&unk_1002C6968);
}

uint64_t sub_1001031EC@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + a1[6];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = a1[8];
  uint64_t v7 = (char *)a2 + a1[7];
  *(void *)uint64_t v7 = 0LL;
  v7[8] = 1;
  *((_BYTE *)a2 + v6) = 4;
  uint64_t v8 = a1[10];
  uint64_t v9 = (char *)a2 + a1[9];
  *(_DWORD *)uint64_t v9 = 0;
  v9[4] = 1;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))( v10,  1LL,  1LL,  v11);
  uint64_t v13 = (char *)a2 + a1[11];
  *(void *)uint64_t v13 = 0LL;
  v13[8] = 1;
  return result;
}

uint64_t sub_1001032BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100102A54(a1, a2, a3);
}

uint64_t sub_1001032D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100102C88(a1, a2, a3);
}

uint64_t sub_1001032E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035BFC8,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna,  (uint64_t)&unk_1002C68E0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100103334@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A8D0, (uint64_t)qword_10036A4E8, (uint64_t)sub_1001027A8, a1);
}

uint64_t sub_100103350(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100355958,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna,  (uint64_t)&unk_1002C6868);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100103390(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100355958,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna,  (uint64_t)&unk_1002C6868);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1001033E4()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A500);
  sub_10000E704(v0, (uint64_t)qword_10036A500);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "TreeType_PROTOBUF_DEFAULT";
  *(void *)(v9 + 8) = 25LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "TreeType_UNKNOWN";
  *(void *)(v13 + 8) = 16LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  unint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *unint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "TreeType_STANDARD_ACACIA";
  *((void *)v15 + 1) = 24LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 3LL;
  *(void *)uint64_t v17 = "TreeType_NONSTANDARD_ACACIA";
  *((void *)v17 + 1) = 27LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1001035A0()
{
  return sub_100008C30(&qword_10037A8D8, (uint64_t)qword_10036A500, (uint64_t)sub_1001033E4);
}

uint64_t sub_1001035BC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A8D8, (uint64_t)qword_10036A500, (uint64_t)sub_1001033E4, a1);
}

uint64_t sub_1001035D8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A8D8, (uint64_t)qword_10036A500, (uint64_t)sub_1001033E4, a1);
}

void sub_1001035F4()
{
  v0._countAndFlagsBits = 0x616546656572542ELL;
  v0._object = (void *)0xED00007365727574LL;
  String.append(_:)(v0);
  qword_10036A518 = 0xD000000000000035LL;
  unk_10036A520 = 0x80000001002E4DA0LL;
}

uint64_t *sub_100103668()
{
  if (qword_10037A8E0 != -1) {
    swift_once(&qword_10037A8E0, sub_1001035F4);
  }
  return &qword_10036A518;
}

uint64_t sub_1001036A8()
{
  return sub_1001036C8(&qword_10037A8E0, &qword_10036A518, &qword_10036A520, (uint64_t)sub_1001035F4);
}

uint64_t sub_1001036C8(void *a1, uint64_t *a2, void *a3, uint64_t a4)
{
  if (*a1 != -1LL) {
    swift_once(a1, a4);
  }
  uint64_t v6 = *a2;
  swift_bridgeObjectRetain(*a3);
  return v6;
}

uint64_t sub_100103718()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A528);
  sub_10000E704(v0, (uint64_t)qword_10036A528);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3340;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  void *v8 = 1LL;
  *(void *)uint64_t v9 = "has_branch_widths";
  *(void *)(v9 + 8) = 17LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "has_branch_lengths";
  *((void *)v13 + 1) = 18LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100103868()
{
  return sub_100008C30(&qword_10037A8E8, (uint64_t)qword_10036A528, (uint64_t)sub_100103718);
}

uint64_t sub_100103884@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A8E8, (uint64_t)qword_10036A528, (uint64_t)sub_100103718, a1);
}

uint64_t sub_1001038A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v11 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
LABEL_3:
      dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + v9, a2, a3);
      goto LABEL_4;
    }

    if (result == 1)
    {
      goto LABEL_3;
    }

uint64_t sub_10010394C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0LL);
  uint64_t v10 = result;
  int v11 = *(unsigned __int8 *)(v5 + *(int *)(result + 20));
  if (v11 != 2) {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v11 & 1, 1LL, a2, a3);
  }
  if (!v4)
  {
    int v12 = *(unsigned __int8 *)(v5 + *(int *)(v10 + 24));
    if (v12 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v12 & 1, 2LL, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_100103A18()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures,  &qword_100355950,  (uint64_t)&unk_1002C6AF8);
}

uint64_t sub_100103A34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10010473C(a1, 2, 2, a2);
}

uint64_t sub_100103A40(uint64_t a1, uint64_t a2)
{
  return sub_100103A60(a1, a2, &qword_10037A8E0, &qword_10036A518, &qword_10036A520, (uint64_t)sub_1001035F4);
}

uint64_t sub_100103A60(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, void *a5, uint64_t a6)
{
  if (*a3 != -1LL) {
    swift_once(a3, a6);
  }
  uint64_t v8 = *a4;
  swift_bridgeObjectRetain(*a5);
  return v8;
}

uint64_t sub_100103AB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001038A0(a1, a2, a3);
}

uint64_t sub_100103AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10010394C(a1, a2, a3);
}

uint64_t sub_100103ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035BFC0,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures,  (uint64_t)&unk_1002C6A70);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100103B2C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A8E8, (uint64_t)qword_10036A528, (uint64_t)sub_100103718, a1);
}

uint64_t sub_100103B48(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356990,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures,  (uint64_t)&unk_1002C69F8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100103B88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356990,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures,  (uint64_t)&unk_1002C69F8);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100103BD8()
{
  return &unk_10033F2B8;
}

unint64_t sub_100103BE4()
{
  return 0xD000000000000032LL;
}

uint64_t sub_100103C00()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A540);
  sub_10000E704(v0, (uint64_t)qword_10036A540);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  void *v8 = 1LL;
  *(void *)uint64_t v9 = "receipt_time";
  *(void *)(v9 + 8) = 12LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  int v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "trees";
  *((void *)v13 + 1) = 5LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "contains_branch_geometry";
  *(void *)(v14 + 8) = 24LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100103D9C()
{
  return sub_100008C30(&qword_10037A8F0, (uint64_t)qword_10036A540, (uint64_t)sub_100103C00);
}

uint64_t sub_100103DB8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A8F0, (uint64_t)qword_10036A540, (uint64_t)sub_100103C00, a1);
}

uint64_t sub_100103DD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0LL);
        uint64_t v16 = sub_10000FD98( &qword_100355958,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna,  (uint64_t)&unk_1002C6868);
        uint64_t v11 = v9;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v3, v15, v16, a2, a3);
        goto LABEL_5;
      }

      if (result == 1)
      {
        uint64_t v12 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0LL) + 24);
        uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
        uint64_t v14 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
        uint64_t v11 = v9;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v12, v13, v14, a2, a3);
        goto LABEL_5;
      }

uint64_t sub_100103F3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_10010405C(v3, a1, a2, a3);
  if (!v4)
  {
    uint64_t v9 = *(void *)v3;
    if (*(void *)(*(void *)v3 + 16LL))
    {
      uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0LL);
      uint64_t v11 = sub_10000FD98( &qword_100355958,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna,  (uint64_t)&unk_1002C6868);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v9, 2LL, v10, v11, a2, a3);
    }

    int v12 = *(unsigned __int8 *)(v3
    if (v12 != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v12 & 1, 3LL, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_10010405C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v6);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  int v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_100355538);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v15 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int sub_1001041D4()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData,  &qword_100355960,  (uint64_t)&unk_1002C6C60);
}

uint64_t sub_1001041F0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  *((_BYTE *)a2 + *(int *)(a1 + 28)) = 2;
  return result;
}

uint64_t sub_100104268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100103DD4(a1, a2, a3);
}

uint64_t sub_10010427C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100103F3C(a1, a2, a3);
}

uint64_t sub_100104290(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035BFB8,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData,  (uint64_t)&unk_1002C6BD8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1001042E0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A8F0, (uint64_t)qword_10036A540, (uint64_t)sub_100103C00, a1);
}

uint64_t sub_1001042FC(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003569A8,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData,  (uint64_t)&unk_1002C6B60);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10010433C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003569A8,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData,  (uint64_t)&unk_1002C6B60);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10010438C()
{
  return &unk_10033F2C8;
}

unint64_t sub_100104398()
{
  return 0xD000000000000029LL;
}

uint64_t sub_1001043B4()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A558);
  sub_10000E704(v0, (uint64_t)qword_10036A558);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3340;
  char v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  void *v8 = 1LL;
  *(void *)uint64_t v9 = "wrist_orientation";
  *(void *)(v9 + 8) = 17LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  int v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "crown_orientation";
  *((void *)v13 + 1) = 17LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100104508()
{
  return sub_100008C30(&qword_10037A8F8, (uint64_t)qword_10036A558, (uint64_t)sub_1001043B4);
}

uint64_t sub_100104524@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A8F8, (uint64_t)qword_10036A558, (uint64_t)sub_1001043B4, a1);
}

uint64_t sub_100104540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0) {
        return result;
      }
      if (result == 2) {
        break;
      }
      if (result == 1)
      {
        uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0LL) + 20);
        goto LABEL_5;
      }

uint64_t sub_100104618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0LL);
  uint64_t v10 = result;
  if (*(_BYTE *)(v5 + *(int *)(result + 20)) != 4)
  {
    char v13 = *(_BYTE *)(v5 + *(int *)(result + 20));
    unint64_t v11 = sub_100149C90();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v13,  1LL,  &type metadata for CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType,  v11,  a2,  a3);
  }

  if (!v4)
  {
    if (*(_BYTE *)(v5 + *(int *)(v10 + 24)) != 4)
    {
      char v14 = *(_BYTE *)(v5 + *(int *)(v10 + 24));
      unint64_t v12 = sub_100149C90();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v14,  2LL,  &type metadata for CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType,  v12,  a2,  a3);
    }

    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_100104714()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation,  &qword_100355968,  (uint64_t)&unk_1002C6DC8);
}

uint64_t sub_100104730@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10010473C(a1, 4, 4, a2);
}

uint64_t sub_10010473C@<X0>(uint64_t a1@<X0>, char a2@<W2>, char a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v9 = *(int *)(a1 + 24);
  *(_BYTE *)(a4 + *(int *)(a1 + 20)) = a2;
  *(_BYTE *)(a4 + v9) = a3;
  return result;
}

uint64_t sub_10010477C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100104540(a1, a2, a3);
}

uint64_t sub_100104790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100104618(a1, a2, a3);
}

uint64_t sub_1001047A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035BFB0,  type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation,  (uint64_t)&unk_1002C6D40);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1001047F4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A8F8, (uint64_t)qword_10036A558, (uint64_t)sub_1001043B4, a1);
}

uint64_t sub_100104810(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003569C0,  type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation,  (uint64_t)&unk_1002C6CC8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100104850(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003569C0,  type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation,  (uint64_t)&unk_1002C6CC8);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1001048A4()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A570);
  sub_10000E704(v0, (uint64_t)qword_10036A570);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "WatchOrientationType_PROTOBUF_DEFAULT";
  *(void *)(v9 + 8) = 37LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  unint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "WatchOrientationType_Unknown";
  *(void *)(v13 + 8) = 28LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  char v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *char v14 = 2LL;
  *(void *)uint64_t v15 = "WatchOrientationType_Left";
  *((void *)v15 + 1) = 25LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 3LL;
  *(void *)uint64_t v17 = "WatchOrientationType_Right";
  *((void *)v17 + 1) = 26LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100104A60()
{
  return sub_100008C30(&qword_10037A900, (uint64_t)qword_10036A570, (uint64_t)sub_1001048A4);
}

uint64_t sub_100104A7C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A900, (uint64_t)qword_10036A570, (uint64_t)sub_1001048A4, a1);
}

uint64_t sub_100104A98@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A900, (uint64_t)qword_10036A570, (uint64_t)sub_1001048A4, a1);
}

void *sub_100104AB4()
{
  return &unk_10033F2D8;
}

unint64_t sub_100104AC0()
{
  return 0xD000000000000023LL;
}

uint64_t sub_100104ADC()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A588);
  sub_10000E704(v0, (uint64_t)qword_10036A588);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 - v4 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3330;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "applicable_time";
  *(void *)(v9 + 8) = 15LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  unint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "on_wrist";
  *(void *)(v13 + 8) = 8LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  char v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *char v14 = 3LL;
  *(void *)uint64_t v15 = "on_wrist_sensor";
  *((void *)v15 + 1) = 15LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "on_wrist_confidence";
  *((void *)v17 + 1) = 19LL;
  v17[16] = 2;
  v12();
  unint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  void *v18 = 5LL;
  *(void *)uint64_t v19 = "is_on_charger";
  *((void *)v19 + 1) = 13LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  void *v20 = 6LL;
  *(void *)uint64_t v21 = "is_forced_on_wrist_enabled";
  *((void *)v21 + 1) = 26LL;
  v21[16] = 2;
  v12();
  int v22 = (void *)(v8 + 6 * v4);
  uint64_t v23 = (char *)v22 + *(int *)(v2 + 48);
  void *v22 = 7LL;
  *(void *)uint64_t v23 = "is_wrist_detection_enabled";
  *((void *)v23 + 1) = 26LL;
  v23[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100104D44()
{
  return sub_100008C30(&qword_10037A908, (uint64_t)qword_10036A588, (uint64_t)sub_100104ADC);
}

uint64_t sub_100104D60@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A908, (uint64_t)qword_10036A588, (uint64_t)sub_100104ADC, a1);
}

uint64_t sub_100104D7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL) + 20);
          uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
          uint64_t v11 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v11, a2, a3);
          break;
        case 2LL:
          uint64_t v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL) + 24);
          goto LABEL_8;
        case 3LL:
          uint64_t v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL) + 28);
LABEL_8:
          uint64_t v13 = v3 + v12;
          unint64_t v14 = sub_100149C4C();
          uint64_t v15 = v13;
          uint64_t v16 = &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateType;
          goto LABEL_10;
        case 4LL:
          uint64_t v17 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL) + 32);
          unint64_t v14 = sub_100149C08();
          uint64_t v15 = v17;
          uint64_t v16 = &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType;
LABEL_10:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v15, v16, v14, a2, a3);
          break;
        case 5LL:
          uint64_t v18 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL) + 36);
          goto LABEL_14;
        case 6LL:
          uint64_t v18 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL) + 40);
          goto LABEL_14;
        case 7LL:
          uint64_t v18 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL) + 44);
LABEL_14:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + v18, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_100104F44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = sub_100105BC8(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  if (!v4)
  {
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL);
    uint64_t v11 = v10;
    if (*(_BYTE *)(v5 + *(int *)(v10 + 24)) != 4)
    {
      char v15 = *(_BYTE *)(v5 + *(int *)(v10 + 24));
      unint64_t v12 = sub_100149C4C();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v15,  2LL,  &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateType,  v12,  a2,  a3);
    }

    if (*(_BYTE *)(v5 + *(int *)(v11 + 28)) != 4)
    {
      char v16 = *(_BYTE *)(v5 + *(int *)(v11 + 28));
      unint64_t v13 = sub_100149C4C();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v16,  3LL,  &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateType,  v13,  a2,  a3);
    }

    if (*(_BYTE *)(v5 + *(int *)(v11 + 32)) != 4)
    {
      char v17 = *(_BYTE *)(v5 + *(int *)(v11 + 32));
      unint64_t v14 = sub_100149C08();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v17,  4LL,  &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType,  v14,  a2,  a3);
    }

    sub_1000EA2B8(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
    sub_1000EEFB8(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
    sub_1000E4EEC(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_100105120()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_WristState,  &qword_100355970,  (uint64_t)&unk_1002C6F58);
}

uint64_t sub_10010513C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))( v4,  1LL,  1LL,  v5);
  uint64_t v7 = a1[7];
  *(_BYTE *)(a2 + a1[6]) = 4;
  *(_BYTE *)(a2 + v7) = 4;
  uint64_t v8 = a1[9];
  *(_BYTE *)(a2 + a1[8]) = 4;
  *(_BYTE *)(a2 + v8) = 2;
  uint64_t v9 = a1[11];
  *(_BYTE *)(a2 + a1[10]) = 2;
  *(_BYTE *)(a2 + v9) = 2;
  return result;
}

uint64_t sub_1001051C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100104D7C(a1, a2, a3);
}

uint64_t sub_1001051D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100104F44(a1, a2, a3);
}

uint64_t sub_1001051E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035BFA8,  type metadata accessor for CLP_LogEntry_PrivateData_WristState,  (uint64_t)&unk_1002C6ED0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100105238@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A908, (uint64_t)qword_10036A588, (uint64_t)sub_100104ADC, a1);
}

uint64_t sub_100105254(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003569D8,  type metadata accessor for CLP_LogEntry_PrivateData_WristState,  (uint64_t)&unk_1002C6E58);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100105294(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003569D8,  type metadata accessor for CLP_LogEntry_PrivateData_WristState,  (uint64_t)&unk_1002C6E58);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1001052E4()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A5A0);
  sub_10000E704(v0, (uint64_t)qword_10036A5A0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "WristStateType_PROTOBUF_DEFAULT";
  *(void *)(v9 + 8) = 31LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  unint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "WristStateType_Unknown";
  *(void *)(v13 + 8) = 22LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  unint64_t v14 = (void *)(v8 + 2 * v4);
  char v15 = (char *)v14 + *(int *)(v2 + 48);
  *unint64_t v14 = 2LL;
  *(void *)char v15 = "WristStateType_On";
  *((void *)v15 + 1) = 17LL;
  v15[16] = 2;
  v12();
  char v16 = (void *)(v8 + 3 * v4);
  char v17 = (char *)v16 + *(int *)(v2 + 48);
  *char v16 = 3LL;
  *(void *)char v17 = "WristStateType_Off";
  *((void *)v17 + 1) = 18LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1001054A0()
{
  return sub_100008C30(&qword_10037A910, (uint64_t)qword_10036A5A0, (uint64_t)sub_1001052E4);
}

uint64_t sub_1001054BC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A910, (uint64_t)qword_10036A5A0, (uint64_t)sub_1001052E4, a1);
}

uint64_t sub_1001054D8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A910, (uint64_t)qword_10036A5A0, (uint64_t)sub_1001052E4, a1);
}

uint64_t sub_1001054F4()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A5B8);
  sub_10000E704(v0, (uint64_t)qword_10036A5B8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "WristStateConfidenceType_PROTOBUF_DEFAULT";
  *(void *)(v9 + 8) = 41LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  unint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "WristStateConfidenceType_None";
  *(void *)(v13 + 8) = 29LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  unint64_t v14 = (void *)(v8 + 2 * v4);
  char v15 = (char *)v14 + *(int *)(v2 + 48);
  *unint64_t v14 = 2LL;
  *(void *)char v15 = "WristStateConfidenceType_Low";
  *((void *)v15 + 1) = 28LL;
  v15[16] = 2;
  v12();
  char v16 = (void *)(v8 + 3 * v4);
  char v17 = (char *)v16 + *(int *)(v2 + 48);
  *char v16 = 3LL;
  *(void *)char v17 = "WristStateConfidenceType_High";
  *((void *)v17 + 1) = 29LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1001056B4()
{
  return sub_100008C30(&qword_10037A918, (uint64_t)qword_10036A5B8, (uint64_t)sub_1001054F4);
}

uint64_t sub_1001056D0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A918, (uint64_t)qword_10036A5B8, (uint64_t)sub_1001054F4, a1);
}

uint64_t sub_1001056EC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A918, (uint64_t)qword_10036A5B8, (uint64_t)sub_1001054F4, a1);
}

void *sub_100105708()
{
  return &unk_10033F2E8;
}

unint64_t sub_100105714()
{
  return 0xD000000000000023LL;
}

uint64_t sub_100105730()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A5D0);
  sub_10000E704(v0, (uint64_t)qword_10036A5D0);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "event_receipt_time";
  *(void *)(v9 + 8) = 18LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  unint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "client";
  *(void *)(v13 + 8) = 6LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  unint64_t v14 = (void *)(v8 + 2 * v4);
  char v15 = (char *)v14 + *(int *)(v2 + 48);
  *unint64_t v14 = 3LL;
  *(void *)char v15 = "watch_orientation";
  *((void *)v15 + 1) = 17LL;
  v15[16] = 2;
  v12();
  char v16 = (void *)(v8 + 3 * v4);
  char v17 = (char *)v16 + *(int *)(v2 + 48);
  *char v16 = 4LL;
  *(void *)char v17 = "wrist_state";
  *((void *)v17 + 1) = 11LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1001058F8()
{
  return sub_100008C30(&qword_10037A920, (uint64_t)qword_10036A5D0, (uint64_t)sub_100105730);
}

uint64_t sub_100105914@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A920, (uint64_t)qword_10036A5D0, (uint64_t)sub_100105730, a1);
}

uint64_t sub_100105930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0LL) + 20);
          uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
          uint64_t v11 = (unint64_t *)&qword_1003552B8;
          unint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          uint64_t v13 = &unk_1002BF798;
          goto LABEL_5;
        case 2LL:
          uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0LL);
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v3 + *(int *)(v15 + 24), a2, a3);
          break;
        case 3LL:
          uint64_t v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0LL) + 28);
          uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0LL);
          uint64_t v11 = &qword_1003569C0;
          unint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation;
          uint64_t v13 = &unk_1002C6CC8;
          goto LABEL_5;
        case 4LL:
          uint64_t v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0LL) + 32);
          uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL);
          uint64_t v11 = &qword_1003569D8;
          unint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_WristState;
          uint64_t v13 = &unk_1002C6E58;
LABEL_5:
          uint64_t v14 = sub_10000FD98(v11, v12, (uint64_t)v13);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v14, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_100105AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = sub_100105BC8(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
  if (!v4)
  {
    uint64_t v10 = (unsigned int *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0LL) + 24));
    if ((v10[1] & 1) == 0) {
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v10, 2LL, a2, a3);
    }
    sub_100105D44(v5, a1, a2, a3);
    sub_100105EB8(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_100105BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v19 = a4;
  uint64_t v18 = a3;
  uint64_t v7 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a5(0LL);
  sub_10000E6C0(a1 + *(int *)(v14 + 20), (uint64_t)v9, &qword_100355538);
  sub_100003E68((uint64_t)v9, (uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v16 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v13, 1LL, v10, v16, v18, v19);
  return sub_100004090((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_100105D44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355660);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_100355660);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
  uint64_t v15 = sub_10000FD98( &qword_1003569C0,  type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation,  (uint64_t)&unk_1002C6CC8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t sub_100105EB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355668);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0LL);
  sub_10000E6C0(a1 + *(int *)(v13 + 32), (uint64_t)v8, &qword_100355668);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  uint64_t v15 = sub_10000FD98( &qword_1003569D8,  type metadata accessor for CLP_LogEntry_PrivateData_WristState,  (uint64_t)&unk_1002C6E58);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4LL, v9, v15, a3, v17);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

Swift::Int sub_100106030()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_WatchState,  &qword_100355978,  (uint64_t)&unk_1002C7110);
}

uint64_t sub_10010604C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = a1[7];
  uint64_t v7 = a2 + a1[6];
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  uint64_t v10 = a2 + a1[8];
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))( v10,  1LL,  1LL,  v11);
}

uint64_t sub_100106108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100105930(a1, a2, a3);
}

uint64_t sub_10010611C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100105AD4(a1, a2, a3);
}

uint64_t sub_100106130(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035BFA0,  type metadata accessor for CLP_LogEntry_PrivateData_WatchState,  (uint64_t)&unk_1002C7088);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100106180@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A920, (uint64_t)qword_10036A5D0, (uint64_t)sub_100105730, a1);
}

uint64_t sub_10010619C(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_1003569F0,  type metadata accessor for CLP_LogEntry_PrivateData_WatchState,  (uint64_t)&unk_1002C7010);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1001061DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_1003569F0,  type metadata accessor for CLP_LogEntry_PrivateData_WatchState,  (uint64_t)&unk_1002C7010);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10010622C()
{
  return &unk_10033F2F8;
}

unint64_t sub_100106238()
{
  return 0xD000000000000027LL;
}

uint64_t sub_100106254()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A5E8);
  sub_10000E704(v0, (uint64_t)qword_10036A5E8);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B42C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "user_specific_place_type";
  *(void *)(v9 + 8) = 24LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "place_type";
  *(void *)(v13 + 8) = 10LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "preferred_name";
  *((void *)v15 + 1) = 14LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "loi_uuid_identifier";
  *((void *)v17 + 1) = 19LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100106414()
{
  return sub_100008C30(&qword_10037A928, (uint64_t)qword_10036A5E8, (uint64_t)sub_100106254);
}

uint64_t sub_100106430@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A928, (uint64_t)qword_10036A5E8, (uint64_t)sub_100106254, a1);
}

uint64_t sub_10010644C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL) + 20);
          unint64_t v10 = sub_100149BC4();
          uint64_t v11 = v9;
          uint64_t v12 = &type metadata for CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType;
          goto LABEL_5;
        case 2LL:
          uint64_t v13 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL) + 24);
          unint64_t v10 = sub_100149B80();
          uint64_t v11 = v13;
          uint64_t v12 = &type metadata for CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType;
LABEL_5:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v11, v12, v10, a2, a3);
          break;
        case 3LL:
          uint64_t v14 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL) + 28);
          goto LABEL_11;
        case 4LL:
          uint64_t v14 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL) + 32);
LABEL_11:
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v3 + v14, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_10010659C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL);
  unint64_t v10 = (int *)result;
  if (*(_BYTE *)(v5 + *(int *)(result + 20)) != 5)
  {
    char v17 = *(_BYTE *)(v5 + *(int *)(result + 20));
    unint64_t v11 = sub_100149BC4();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v17,  1LL,  &type metadata for CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType,  v11,  a2,  a3);
  }

  if (!v4)
  {
    if (*(_BYTE *)(v5 + v10[6]) != 3)
    {
      char v18 = *(_BYTE *)(v5 + v10[6]);
      unint64_t v12 = sub_100149B80();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v18,  2LL,  &type metadata for CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType,  v12,  a2,  a3);
    }

    uint64_t v13 = (void *)(v5 + v10[7]);
    uint64_t v14 = v13[1];
    if (v14) {
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v13, v14, 3LL, a2, a3);
    }
    uint64_t v15 = (void *)(v5 + v10[8]);
    uint64_t v16 = v15[1];
    if (v16) {
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v15, v16, 4LL, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_1001066FC()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference,  &qword_100355980,  (uint64_t)&unk_1002C7278);
}

uint64_t sub_100106718@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 5;
  *(_BYTE *)(a2 + v5) = 3;
  uint64_t v6 = a1[8];
  uint64_t v7 = (void *)(a2 + a1[7]);
  *uint64_t v7 = 0LL;
  v7[1] = 0LL;
  char v8 = (void *)(a2 + v6);
  void *v8 = 0LL;
  v8[1] = 0LL;
  return result;
}

uint64_t sub_100106764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10010644C(a1, a2, a3);
}

uint64_t sub_100106778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10010659C(a1, a2, a3);
}

uint64_t sub_10010678C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035BF98,  type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference,  (uint64_t)&unk_1002C71F0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1001067DC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A928, (uint64_t)qword_10036A5E8, (uint64_t)sub_100106254, a1);
}

uint64_t sub_1001067F8(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356A08,  type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference,  (uint64_t)&unk_1002C7178);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100106838(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356A08,  type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference,  (uint64_t)&unk_1002C7178);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_10010688C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A600);
  sub_10000E704(v0, (uint64_t)qword_10036A600);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B32F0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "USPT_UNKNOWN";
  *(void *)(v9 + 8) = 12LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  unint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "USPT_HOME";
  *(void *)(v13 + 8) = 9LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "USPT_WORK";
  *((void *)v15 + 1) = 9LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  char v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 3LL;
  *(void *)char v17 = "USPT_SCHOOL";
  *((void *)v17 + 1) = 11LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 4LL;
  *(void *)uint64_t v18 = "USPT_GYM";
  *(void *)(v18 + 8) = 8LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100106A90()
{
  return sub_100008C30(&qword_10037A930, (uint64_t)qword_10036A600, (uint64_t)sub_10010688C);
}

uint64_t sub_100106AAC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A930, (uint64_t)qword_10036A600, (uint64_t)sub_10010688C, a1);
}

uint64_t sub_100106AC8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A930, (uint64_t)qword_10036A600, (uint64_t)sub_10010688C, a1);
}

uint64_t sub_100106AE4()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A618);
  sub_10000E704(v0, (uint64_t)qword_10036A618);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  void *v8 = 0LL;
  *(void *)uint64_t v9 = "PIPT_AREA_OF_INTEREST";
  *(void *)(v9 + 8) = 21LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  unint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "PIPT_POINT_OF_INTEREST";
  *((void *)v13 + 1) = 22LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 2LL;
  *(void *)uint64_t v14 = "PIPT_ADDRESS";
  *(void *)(v14 + 8) = 12LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100106C74()
{
  return sub_100008C30(&qword_10037A938, (uint64_t)qword_10036A618, (uint64_t)sub_100106AE4);
}

uint64_t sub_100106C90@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A938, (uint64_t)qword_10036A618, (uint64_t)sub_100106AE4, a1);
}

uint64_t sub_100106CAC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A938, (uint64_t)qword_10036A618, (uint64_t)sub_100106AE4, a1);
}

void *sub_100106CC8()
{
  return &unk_10033F308;
}

unint64_t sub_100106CD4()
{
  return 0xD000000000000025LL;
}

uint64_t sub_100106CF0()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A630);
  sub_10000E704(v0, (uint64_t)qword_10036A630);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 - v4 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3330;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "receipt_time";
  *(void *)(v9 + 8) = 12LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  unint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "arrival_time";
  *(void *)(v13 + 8) = 12LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "departure_time";
  *((void *)v15 + 1) = 14LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  char v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)char v17 = "detection_time";
  *((void *)v17 + 1) = 14LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  void *v18 = 5LL;
  *(void *)uint64_t v19 = "place_inference";
  *((void *)v19 + 1) = 15LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  void *v20 = 6LL;
  *(void *)uint64_t v21 = "coordinate";
  *((void *)v21 + 1) = 10LL;
  v21[16] = 2;
  v12();
  int v22 = (void *)(v8 + 6 * v4);
  uint64_t v23 = (char *)v22 + *(int *)(v2 + 48);
  void *v22 = 7LL;
  *(void *)uint64_t v23 = "horizontal_accuracy_m";
  *((void *)v23 + 1) = 21LL;
  v23[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100106F60()
{
  return sub_100008C30(&qword_10037A940, (uint64_t)qword_10036A630, (uint64_t)sub_100106CF0);
}

uint64_t sub_100106F7C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A940, (uint64_t)qword_10036A630, (uint64_t)sub_100106CF0, a1);
}

uint64_t sub_100106F98()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0LL);
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL);
  v4(v2, 1LL, 1LL, v3);
  v4( v1 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime,  1LL,  1LL,  v3);
  v4( v1 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime,  1LL,  1LL,  v3);
  v4( v1 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime,  1LL,  1LL,  v3);
  uint64_t v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
  uint64_t v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))( v7,  1LL,  1LL,  v8);
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM[0];
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  qword_10037A950 = v1;
  return result;
}

uint64_t sub_1001070E0()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100107190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v9)) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v3 + v9);
    uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0LL);
    uint64_t v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v13 = swift_retain(v10);
    sub_10010FF78(v13);
    swift_release(v10);
    uint64_t v14 = *(void *)(v6 + v9);
    *(void *)(v6 + v9) = v12;
    swift_release(v14);
  }

  uint64_t v15 = *(void *)(v6 + v9);
  swift_retain(v15);
  uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1LL:
          uint64_t v19 = OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
          goto LABEL_11;
        case 2LL:
          uint64_t v19 = OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
          goto LABEL_11;
        case 3LL:
          uint64_t v19 = OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
          goto LABEL_11;
        case 4LL:
          uint64_t v19 = OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
LABEL_11:
          uint64_t v20 = v15 + v19;
          swift_beginAccess(v15 + v19, v28, 33LL, 0LL);
          uint64_t v21 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
          int v22 = (unint64_t *)&qword_1003552B8;
          uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          uint64_t v24 = &unk_1002BF798;
          goto LABEL_14;
        case 5LL:
          uint64_t v20 = v15
              + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference,  v28,  33LL,  0LL);
          uint64_t v21 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL);
          int v22 = &qword_100356A08;
          uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference;
          uint64_t v24 = &unk_1002C7178;
          goto LABEL_14;
        case 6LL:
          uint64_t v20 = v15
              + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate,  v28,  33LL,  0LL);
          uint64_t v21 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
          int v22 = &qword_100356360;
          uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate;
          uint64_t v24 = &unk_1002C0170;
LABEL_14:
          uint64_t v25 = sub_10000FD98(v22, v23, (uint64_t)v24);
          uint64_t v26 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v20, v21, v25, a2, a3);
          goto LABEL_15;
        case 7LL:
          uint64_t v27 = v15
              + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM[0];
          swift_beginAccess( v15 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM[0],  v28,  33LL,  0LL);
          uint64_t v26 = v5;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v27, a2, a3);
LABEL_15:
          uint64_t v5 = v26;
          swift_endAccess(v28);
          break;
        default:
          break;
      }

      uint64_t v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return swift_release(v15);
}

uint64_t sub_100107420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0LL) + 20));
  uint64_t v10 = swift_retain(v9);
  sub_1001075BC(v10, a1, a2, a3);
  if (v4) {
    return swift_release(v9);
  }
  sub_100107748(v9, a1, a2, a3);
  sub_1001078D4(v9, a1, a2, a3);
  sub_100107A60(v9, a1, a2, a3);
  sub_100107BEC(v9, a1, a2, a3);
  sub_100107D78(v9, a1, a2, a3);
  uint64_t v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM[0];
  swift_beginAccess( v9 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM[0],  v13,  0LL,  0LL);
  if ((*(_BYTE *)(v12 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(7LL, a2, a3, *(double *)v12);
  }
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1001075BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355538);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v15 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_100107748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355538);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v15 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1001078D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355538);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v15 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_100107A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355538);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v15 = sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_100107BEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355670);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355670);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  uint64_t v15 = sub_10000FD98( &qword_100356A08,  type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference,  (uint64_t)&unk_1002C7178);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 5LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
}

uint64_t sub_100107D78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = sub_100003A0C(&qword_100355540);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess(v13, v17, 0LL, 0LL);
  sub_10000E6C0(v13, (uint64_t)v8, &qword_100355540);
  sub_100003E68((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  uint64_t v15 = sub_10000FD98( &qword_100356360,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate,  (uint64_t)&unk_1002C0170);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 6LL, v9, v15, a3, v18);
  return sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_100107F04(uint64_t a1, uint64_t a2)
{
  return sub_100065AC0( a1,  a2,  type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit,  (uint64_t (*)(uint64_t, uint64_t))sub_100107F2C) & 1;
}

BOOL sub_100107F2C(uint64_t a1, uint64_t a2)
{
  uint64_t v164 = a2;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  uint64_t v142 = *(void *)(v3 - 8);
  uint64_t v143 = v3;
  __chkstk_darwin(v3);
  uint64_t v138 = (uint64_t)&v137 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v141 = sub_100003A0C(&qword_10035C408);
  __chkstk_darwin(v141);
  uint64_t v144 = (uint64_t)&v137 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100003A0C(&qword_100355540);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v139 = (uint64_t)&v137 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v146 = (uint64_t)&v137 - v9;
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL);
  uint64_t v148 = *(void *)(v10 - 8);
  uint64_t v149 = v10;
  __chkstk_darwin(v10);
  uint64_t v140 = (uint64_t)&v137 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v147 = sub_100003A0C(&qword_10035C410);
  __chkstk_darwin(v147);
  uint64_t v150 = (uint64_t)&v137 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100003A0C(&qword_100355670);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v145 = (uint64_t)&v137 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v152 = (uint64_t)&v137 - v16;
  uint64_t v165 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  v163 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v165 - 8);
  __chkstk_darwin(v165);
  uint64_t v162 = (uint64_t)&v137 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100003A0C(&qword_10035C418);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v153 = (uint64_t)&v137 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v155 = (uint64_t)&v137 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v160 = (uint64_t)&v137 - v24;
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v137 - v25;
  uint64_t v27 = sub_100003A0C(&qword_100355538);
  uint64_t v28 = __chkstk_darwin(v27);
  uint64_t v151 = (uint64_t)&v137 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v156 = (uint64_t)&v137 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v154 = (uint64_t)&v137 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v158 = (uint64_t)&v137 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v157 = (uint64_t)&v137 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v159 = (uint64_t)&v137 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  int v42 = (char *)&v137 - v41;
  __chkstk_darwin(v40);
  uint64_t v44 = (char *)&v137 - v43;
  uint64_t v45 = a1;
  uint64_t v46 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime,  v179,  0LL,  0LL);
  sub_10000E6C0(v46, (uint64_t)v44, &qword_100355538);
  uint64_t v47 = v164;
  uint64_t v48 = v164
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess( v164 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime,  v178,  0LL,  0LL);
  uint64_t v161 = v18;
  uint64_t v49 = (uint64_t)&v26[*(int *)(v18 + 48)];
  sub_10000E6C0((uint64_t)v44, (uint64_t)v26, &qword_100355538);
  sub_10000E6C0(v48, v49, &qword_100355538);
  uint64_t v50 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((void *)v163 + 6);
  uint64_t v51 = v165;
  if (v50((uint64_t)v26, 1LL, v165) == 1)
  {
    swift_retain(v45);
    swift_retain(v47);
    sub_100015764((uint64_t)v44, &qword_100355538);
    uint64_t v52 = v47;
    uint64_t v53 = v45;
    if (v50(v49, 1LL, v51) == 1)
    {
      uint64_t v54 = v51;
      sub_100015764((uint64_t)v26, &qword_100355538);
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  uint64_t v53 = v45;
  sub_10000E6C0((uint64_t)v26, (uint64_t)v42, &qword_100355538);
  if (v50(v49, 1LL, v51) == 1)
  {
    swift_retain(v45);
    swift_retain(v47);
    sub_100015764((uint64_t)v44, &qword_100355538);
    uint64_t v55 = (uint64_t)v42;
    uint64_t v52 = v47;
    sub_100004090(v55, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    sub_100015764((uint64_t)v26, &qword_10035C418);
LABEL_11:
    uint64_t v66 = v53;
LABEL_38:
    swift_release(v66);
    swift_release(v52);
    return 0LL;
  }

  uint64_t v56 = v49;
  uint64_t v57 = v162;
  sub_100003E68(v56, v162, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  swift_retain(v45);
  swift_retain(v47);
  char v58 = sub_100065750((uint64_t)v42, v57, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090(v57, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v44, &qword_100355538);
  uint64_t v59 = (uint64_t)v42;
  uint64_t v52 = v47;
  uint64_t v54 = v165;
  sub_100004090(v59, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v26, &qword_100355538);
  if ((v58 & 1) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  uint64_t v164 = v53;
  uint64_t v60 = v53
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess(v60, v177, 0LL, 0LL);
  uint64_t v61 = v159;
  sub_10000E6C0(v60, v159, &qword_100355538);
  uint64_t v62 = v52
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess( v52 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime,  v176,  0LL,  0LL);
  uint64_t v63 = v160;
  uint64_t v64 = v161;
  uint64_t v65 = v160 + *(int *)(v161 + 48);
  sub_10000E6C0(v61, v160, &qword_100355538);
  sub_10000E6C0(v62, v65, &qword_100355538);
  if (v50(v63, 1LL, v54) == 1)
  {
    sub_100015764(v61, &qword_100355538);
    if (v50(v65, 1LL, v54) == 1)
    {
      sub_100015764(v63, &qword_100355538);
      goto LABEL_16;
    }

LABEL_14:
    uint64_t v68 = &qword_10035C418;
    uint64_t v69 = v63;
LABEL_36:
    sub_100015764(v69, v68);
    goto LABEL_37;
  }

  uint64_t v67 = v157;
  sub_10000E6C0(v63, v157, &qword_100355538);
  if (v50(v65, 1LL, v54) == 1)
  {
    sub_100015764(v61, &qword_100355538);
    sub_100004090(v67, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_14;
  }

  uint64_t v70 = v65;
  uint64_t v71 = v64;
  uint64_t v72 = v52;
  uint64_t v73 = v61;
  uint64_t v74 = v162;
  sub_100003E68(v70, v162, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  LODWORD(v163) = sub_100065750(v67, v74, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090(v74, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v75 = v73;
  uint64_t v52 = v72;
  uint64_t v64 = v71;
  sub_100015764(v75, &qword_100355538);
  sub_100004090(v67, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764(v63, &qword_100355538);
LABEL_16:
  uint64_t v76 = v164
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess( v164 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime,  v175,  0LL,  0LL);
  uint64_t v77 = v158;
  sub_10000E6C0(v76, v158, &qword_100355538);
  uint64_t v78 = v52
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess( v52 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime,  v174,  0LL,  0LL);
  uint64_t v79 = v155;
  uint64_t v80 = v155 + *(int *)(v64 + 48);
  sub_10000E6C0(v77, v155, &qword_100355538);
  sub_10000E6C0(v78, v80, &qword_100355538);
  if (v50(v79, 1LL, v54) == 1)
  {
    sub_100015764(v77, &qword_100355538);
    unsigned int v81 = v50(v80, 1LL, v54);
    uint64_t v82 = v156;
    if (v81 == 1)
    {
      v163 = v50;
      sub_100015764(v79, &qword_100355538);
      goto LABEL_23;
    }

    goto LABEL_21;
  }

  uint64_t v83 = v154;
  sub_10000E6C0(v79, v154, &qword_100355538);
  unsigned int v84 = v50(v80, 1LL, v54);
  uint64_t v82 = v156;
  if (v84 == 1)
  {
    sub_100015764(v158, &qword_100355538);
    sub_100004090(v83, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_21:
    uint64_t v68 = &qword_10035C418;
    uint64_t v69 = v79;
    goto LABEL_36;
  }

  v163 = v50;
  uint64_t v85 = v83;
  uint64_t v86 = v162;
  sub_100003E68(v80, v162, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v87 = sub_100065750(v85, v86, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090(v86, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764(v158, &qword_100355538);
  sub_100004090(v85, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764(v79, &qword_100355538);
  if ((v87 & 1) == 0) {
    goto LABEL_37;
  }
LABEL_23:
  uint64_t v88 = v164
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess( v164 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime,  &v173,  0LL,  0LL);
  sub_10000E6C0(v88, v82, &qword_100355538);
  uint64_t v89 = v52
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess( v52 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime,  &v172,  0LL,  0LL);
  uint64_t v90 = *(int *)(v64 + 48);
  uint64_t v91 = v82;
  uint64_t v92 = v54;
  uint64_t v93 = v153;
  uint64_t v94 = v153 + v90;
  sub_10000E6C0(v91, v153, &qword_100355538);
  uint64_t v95 = v89;
  uint64_t v96 = v92;
  sub_10000E6C0(v95, v94, &qword_100355538);
  uint64_t v97 = v163;
  if (v163(v93, 1LL, v92) == 1)
  {
    sub_100015764(v91, &qword_100355538);
    if (v97(v94, 1LL, v92) == 1)
    {
      sub_100015764(v93, &qword_100355538);
      goto LABEL_30;
    }

    goto LABEL_28;
  }

  uint64_t v98 = v151;
  sub_10000E6C0(v93, v151, &qword_100355538);
  if (v97(v94, 1LL, v96) == 1)
  {
    sub_100015764(v156, &qword_100355538);
    sub_100004090(v98, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_28:
    uint64_t v68 = &qword_10035C418;
    uint64_t v69 = v93;
    goto LABEL_36;
  }

  uint64_t v99 = v162;
  sub_100003E68(v94, v162, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v100 = sub_100065750(v98, v99, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090(v99, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764(v156, &qword_100355538);
  sub_100004090(v98, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764(v93, &qword_100355538);
  if ((v100 & 1) == 0)
  {
LABEL_37:
    uint64_t v66 = v164;
    goto LABEL_38;
  }

LABEL_48:
  uint64_t v130 = v126
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM[0];
  swift_beginAccess( v126 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM[0],  &v167,  0LL,  0LL);
  double v131 = *(double *)v130;
  char v132 = *(_BYTE *)(v130 + 8);
  swift_release(v126);
  uint64_t v133 = v52
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM[0];
  swift_beginAccess( v52 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM[0],  &v166,  0LL,  0LL);
  double v134 = *(double *)v133;
  int v135 = *(unsigned __int8 *)(v133 + 8);
  swift_release(v52);
  if ((v132 & 1) == 0)
  {
    if (v131 == v134) {
      char v136 = v135;
    }
    else {
      char v136 = 1;
    }
    return (v136 & 1) == 0;
  }

  return v135 != 0;
}

Swift::Int sub_100108E88()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit,  &qword_100355988,  (uint64_t)&unk_1002C7430);
}

uint64_t sub_100108EA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD7C(a1, &qword_10037A948, &qword_10037A950, (uint64_t)sub_100106F98, a2);
}

uint64_t sub_100108EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100107190(a1, a2, a3);
}

uint64_t sub_100108ED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100107420(a1, a2, a3);
}

uint64_t sub_100108EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035BF90,  type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit,  (uint64_t)&unk_1002C73A8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100108F38@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A940, (uint64_t)qword_10036A630, (uint64_t)sub_100106CF0, a1);
}

uint64_t sub_100108F54(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356A20,  type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit,  (uint64_t)&unk_1002C7330);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100108F94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356A20,  type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit,  (uint64_t)&unk_1002C7330);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100108FE4()
{
  return &unk_10033F318;
}

unint64_t sub_100108FF0()
{
  return 0xD000000000000026LL;
}

uint64_t sub_10010900C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A648);
  sub_10000E704(v0, (uint64_t)qword_10036A648);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v26 = swift_allocObject(v1, v6 + 8 * v4, v5 | 7);
  *(_OWORD *)(v26 + 16) = xmmword_1002B42A0;
  uint64_t v7 = v26 + v6;
  uint64_t v8 = v26 + v6 + *(int *)(v2 + 48);
  *(void *)(v26 + v6) = 1LL;
  *(void *)uint64_t v8 = "start_time_cfat_sec";
  *(void *)(v8 + 8) = 19LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "mct_timestamp_sec";
  *(void *)(v12 + 8) = 17LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 3LL;
  *(void *)uint64_t v14 = "type";
  *((void *)v14 + 1) = 4LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v7 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *uint64_t v15 = 4LL;
  *(void *)uint64_t v16 = "confidence";
  *((void *)v16 + 1) = 10LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v7 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "estimated_state_probability_outdoor";
  *((void *)v18 + 1) = 35LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v7 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  void *v19 = 6LL;
  *(void *)uint64_t v20 = "daylight_confidence";
  *((void *)v20 + 1) = 19LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v7 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 7LL;
  *(void *)uint64_t v22 = "is_astronomical_daytime";
  *((void *)v22 + 1) = 23LL;
  v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v7 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  void *v23 = 8LL;
  *(void *)uint64_t v24 = "current_lux";
  *((void *)v24 + 1) = 11LL;
  v24[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v26);
}

uint64_t sub_1001092C0()
{
  return sub_100008C30(&qword_10037A958, (uint64_t)qword_10036A648, (uint64_t)sub_10010900C);
}

uint64_t sub_1001092DC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A958, (uint64_t)qword_10036A648, (uint64_t)sub_10010900C, a1);
}

uint64_t sub_1001092F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL) + 20);
          goto LABEL_10;
        case 2LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL) + 24);
          goto LABEL_10;
        case 3LL:
          uint64_t v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL) + 28);
          unint64_t v11 = sub_10014A510();
          uint64_t v12 = v10;
          uint64_t v13 = &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorType;
          goto LABEL_13;
        case 4LL:
          uint64_t v14 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL) + 32);
          goto LABEL_12;
        case 5LL:
          uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL) + 36);
LABEL_10:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v9, a2, a3);
          break;
        case 6LL:
          uint64_t v14 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL) + 40);
LABEL_12:
          uint64_t v15 = v3 + v14;
          unint64_t v11 = sub_10014A4CC();
          uint64_t v12 = v15;
          uint64_t v13 = &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorConfidence;
LABEL_13:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v12, v13, v11, a2, a3);
          break;
        case 7LL:
          uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + *(int *)(v16 + 44), a2, a3);
          break;
        case 8LL:
          uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + *(int *)(v17 + 48), a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1001094BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL);
  uint64_t v10 = (int *)result;
  uint64_t v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1LL, a2, a3, *(double *)v11);
  }
  if (!v4)
  {
    uint64_t v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2LL, a2, a3, *(double *)v12);
    }
    if (*(_BYTE *)(v5 + v10[7]) != 3)
    {
      char v15 = *(_BYTE *)(v5 + v10[7]);
      unint64_t v13 = sub_10014A510();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v15,  3LL,  &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorType,  v13,  a2,  a3);
    }

    if (*(_BYTE *)(v5 + v10[8]) != 4)
    {
      char v16 = *(_BYTE *)(v5 + v10[8]);
      unint64_t v14 = sub_10014A4CC();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v16,  4LL,  &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorConfidence,  v14,  a2,  a3);
    }

    sub_1000FAE74(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
    sub_1001096B0(v5, a1, a2, a3);
    sub_1000E4EEC(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
    sub_1000F9FD0(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_1001096B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL);
  if (*(_BYTE *)(a1 + *(int *)(result + 40)) != 4)
  {
    char v9 = *(_BYTE *)(a1 + *(int *)(result + 40));
    unint64_t v8 = sub_10014A4CC();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v9,  6LL,  &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorConfidence,  v8,  a3,  a4);
  }

  return result;
}

Swift::Int sub_10010973C()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate,  &qword_100355990,  (uint64_t)&unk_1002C7598);
}

uint64_t sub_100109758@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  uint64_t v7 = a2 + v5;
  *(void *)uint64_t v7 = 0LL;
  *(_BYTE *)(v7 + 8) = 1;
  uint64_t v8 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 3;
  *(_BYTE *)(a2 + v8) = 4;
  uint64_t v9 = a1[10];
  uint64_t v10 = a2 + a1[9];
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  *(_BYTE *)(a2 + v9) = 4;
  uint64_t v11 = a1[12];
  *(_BYTE *)(a2 + a1[11]) = 2;
  uint64_t v12 = a2 + v11;
  *(_DWORD *)uint64_t v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  return result;
}

uint64_t sub_1001097DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001092F8(a1, a2, a3);
}

uint64_t sub_1001097F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001094BC(a1, a2, a3);
}

uint64_t sub_100109804(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035BF88,  type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate,  (uint64_t)&unk_1002C7510);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100109854@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A958, (uint64_t)qword_10036A648, (uint64_t)sub_10010900C, a1);
}

uint64_t sub_100109870(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356A38,  type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate,  (uint64_t)&unk_1002C7498);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1001098B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356A38,  type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate,  (uint64_t)&unk_1002C7498);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100109900()
{
  return &unk_10033F328;
}

unint64_t sub_10010990C()
{
  return 0xD00000000000002FLL;
}

uint64_t sub_100109928()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A660);
  sub_10000E704(v0, (uint64_t)qword_10036A660);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v42 = swift_allocObject(v1, v6 + 17 * v4, v5 | 7);
  *(_OWORD *)(v42 + 16) = xmmword_1002BAD70;
  uint64_t v7 = v42 + v6;
  uint64_t v8 = v42 + v6 + *(int *)(v2 + 48);
  *(void *)(v42 + v6) = 1LL;
  *(void *)uint64_t v8 = "cf_absolute_timestamp_sec";
  *(void *)(v8 + 8) = 25LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "mach_continuous_timestamp_sec";
  *(void *)(v12 + 8) = 29LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  unint64_t v13 = (void *)(v7 + 2 * v4);
  unint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *unint64_t v13 = 3LL;
  *(void *)unint64_t v14 = "sample_interval_sec";
  *((void *)v14 + 1) = 19LL;
  v14[16] = 2;
  v11();
  char v15 = (void *)(v7 + 3 * v4);
  char v16 = (char *)v15 + *(int *)(v2 + 48);
  *char v15 = 4LL;
  *(void *)char v16 = "d_pos_x_m";
  *((void *)v16 + 1) = 9LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v7 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "d_pos_Y_m";
  *((void *)v18 + 1) = 9LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v7 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  void *v19 = 6LL;
  *(void *)uint64_t v20 = "d_pos_z_m";
  *((void *)v20 + 1) = 9LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v7 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 7LL;
  *(void *)uint64_t v22 = "d_vel_x_mps";
  *((void *)v22 + 1) = 11LL;
  v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v7 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  void *v23 = 8LL;
  *(void *)uint64_t v24 = "d_vel_y_mps";
  *((void *)v24 + 1) = 11LL;
  v24[16] = 2;
  v11();
  uint64_t v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 9LL;
  *(void *)uint64_t v25 = "d_vel_z_mps";
  *(void *)(v25 + 8) = 11LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  uint64_t v26 = (void *)(v7 + 9 * v4);
  uint64_t v27 = (char *)v26 + *(int *)(v2 + 48);
  void *v26 = 10LL;
  *(void *)uint64_t v27 = "q_x";
  *((void *)v27 + 1) = 3LL;
  v27[16] = 2;
  v11();
  uint64_t v28 = (void *)(v7 + 10 * v4);
  uint64_t v29 = (char *)v28 + *(int *)(v2 + 48);
  void *v28 = 11LL;
  *(void *)uint64_t v29 = "q_y";
  *((void *)v29 + 1) = 3LL;
  v29[16] = 2;
  v11();
  uint64_t v30 = (void *)(v7 + 11 * v4);
  uint64_t v31 = (char *)v30 + *(int *)(v2 + 48);
  *uint64_t v30 = 12LL;
  *(void *)uint64_t v31 = "q_z";
  *((void *)v31 + 1) = 3LL;
  v31[16] = 2;
  v11();
  uint64_t v32 = (void *)(v7 + 12 * v4);
  uint64_t v33 = (char *)v32 + *(int *)(v2 + 48);
  *uint64_t v32 = 13LL;
  *(void *)uint64_t v33 = "q_w";
  *((void *)v33 + 1) = 3LL;
  v33[16] = 2;
  v11();
  uint64_t v34 = (void *)(v7 + 13 * v4);
  uint64_t v35 = (char *)v34 + *(int *)(v2 + 48);
  *uint64_t v34 = 14LL;
  *(void *)uint64_t v35 = "reference_frame";
  *((void *)v35 + 1) = 15LL;
  v35[16] = 2;
  v11();
  uint64_t v36 = (void *)(v7 + 14 * v4);
  uint64_t v37 = (char *)v36 + *(int *)(v2 + 48);
  *uint64_t v36 = 15LL;
  *(void *)uint64_t v37 = "is_delta_position_valid";
  *((void *)v37 + 1) = 23LL;
  v37[16] = 2;
  v11();
  uint64_t v38 = (void *)(v7 + 15 * v4);
  uint64_t v39 = (char *)v38 + *(int *)(v2 + 48);
  *uint64_t v38 = 16LL;
  *(void *)uint64_t v39 = "is_delta_velocity_valid";
  *((void *)v39 + 1) = 23LL;
  v39[16] = 2;
  v11();
  uint64_t v40 = v7 + 16 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 16 * v4) = 17LL;
  *(void *)uint64_t v40 = "is_attitude_valid";
  *(void *)(v40 + 8) = 17LL;
  *(_BYTE *)(v40 + 16) = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v42);
}

uint64_t sub_100109D8C()
{
  return sub_100008C30(&qword_10037A960, (uint64_t)qword_10036A660, (uint64_t)sub_100109928);
}

uint64_t sub_100109DA8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A960, (uint64_t)qword_10036A660, (uint64_t)sub_100109928, a1);
}

double sub_100109DC4()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
  uint64_t v1 = swift_allocObject(v0, 133LL, 7LL);
  *(void *)(v1 + 16) = 0LL;
  *(_BYTE *)(v1 + 24) = 1;
  *(void *)(v1 + 32) = 0LL;
  *(_BYTE *)(v1 + 40) = 1;
  *(_DWORD *)(v1 + 44) = 0;
  *(_BYTE *)(v1 + 48) = 1;
  *(_DWORD *)(v1 + 52) = 0;
  *(_BYTE *)(v1 + 56) = 1;
  *(_DWORD *)(v1 + 60) = 0;
  *(_BYTE *)(v1 + 64) = 1;
  *(_DWORD *)(v1 + 68) = 0;
  *(_BYTE *)(v1 + 72) = 1;
  *(_DWORD *)(v1 + 76) = 0;
  *(_BYTE *)(v1 + 80) = 1;
  *(_DWORD *)(v1 + 84) = 0;
  *(_BYTE *)(v1 + 88) = 1;
  *(_DWORD *)(v1 + 92) = 0;
  *(_BYTE *)(v1 + 96) = 1;
  *(_DWORD *)(v1 + 100) = 0;
  *(_BYTE *)(v1 + 104) = 1;
  *(_DWORD *)(v1 + 108) = 0;
  *(_BYTE *)(v1 + 112) = 1;
  *(_DWORD *)(v1 + 116) = 0;
  *(_BYTE *)(v1 + 120) = 1;
  *(_DWORD *)(v1 + 124) = 0;
  *(_BYTE *)(v1 + 128) = 1;
  *(void *)&double result = 33686019LL;
  *(_DWORD *)(v1 + 129) = 33686019;
  qword_10037A970 = v1;
  return result;
}

uint64_t sub_100109E64()
{
  return swift_deallocClassInstance(v0, 133LL, 7LL);
}

uint64_t sub_100109E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v9)) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v3 + v9);
    uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v12 = swift_allocObject(v11, 133LL, 7LL);
    sub_10011047C(v10);
    uint64_t v13 = *(void *)(v6 + v9);
    *(void *)(v6 + v9) = v12;
    swift_release(v13);
  }

  uint64_t v14 = *(void *)(v6 + v9);
  swift_retain(v14);
  uint64_t v15 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    uint64_t v25 = v14 + 132;
    uint64_t v23 = v14 + 129;
    while ((v16 & 1) == 0)
    {
      switch(v15)
      {
        case 1LL:
          swift_beginAccess(v14 + 16, v24, 33LL, 0LL);
          uint64_t v18 = v14 + 16;
          goto LABEL_10;
        case 2LL:
          swift_beginAccess(v14 + 32, v24, 33LL, 0LL);
          uint64_t v18 = v14 + 32;
LABEL_10:
          uint64_t v19 = v5;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v18, a2, a3);
          goto LABEL_28;
        case 3LL:
          uint64_t v20 = v14 + 44;
          goto LABEL_22;
        case 4LL:
          uint64_t v20 = v14 + 52;
          goto LABEL_22;
        case 5LL:
          uint64_t v20 = v14 + 60;
          goto LABEL_22;
        case 6LL:
          uint64_t v20 = v14 + 68;
          goto LABEL_22;
        case 7LL:
          uint64_t v20 = v14 + 76;
          goto LABEL_22;
        case 8LL:
          uint64_t v20 = v14 + 84;
          goto LABEL_22;
        case 9LL:
          uint64_t v20 = v14 + 92;
          goto LABEL_22;
        case 10LL:
          uint64_t v20 = v14 + 100;
          goto LABEL_22;
        case 11LL:
          uint64_t v20 = v14 + 108;
          goto LABEL_22;
        case 12LL:
          uint64_t v20 = v14 + 116;
          goto LABEL_22;
        case 13LL:
          uint64_t v20 = v14 + 124;
LABEL_22:
          swift_beginAccess(v20, v24, 33LL, 0LL);
          uint64_t v19 = v5;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v20, a2, a3);
          goto LABEL_28;
        case 14LL:
          swift_beginAccess(v23, v24, 33LL, 0LL);
          unint64_t v21 = sub_100149B3C();
          uint64_t v19 = v5;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v23,  &type metadata for CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame,  v21,  a2,  a3);
          goto LABEL_28;
        case 15LL:
          uint64_t v22 = v14 + 130;
          goto LABEL_27;
        case 16LL:
          uint64_t v22 = v14 + 131;
          goto LABEL_27;
        case 17LL:
          uint64_t v22 = v25;
LABEL_27:
          swift_beginAccess(v22, v24, 33LL, 0LL);
          uint64_t v19 = v5;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v22, a2, a3);
LABEL_28:
          uint64_t v5 = v19;
          swift_endAccess(v24);
          break;
        default:
          break;
      }

      uint64_t v15 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return swift_release(v14);
}

uint64_t sub_10010A184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20));
  swift_retain(v9);
  swift_beginAccess(v9 + 16, v15, 0LL, 0LL);
  if ((*(_BYTE *)(v9 + 24) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1LL, a2, a3, *(double *)(v9 + 16));
  }
  if (v4) {
    return swift_release(v9);
  }
  swift_beginAccess(v9 + 32, v16, 0LL, 0LL);
  if ((*(_BYTE *)(v9 + 40) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2LL, a2, a3, *(double *)(v9 + 32));
  }
  swift_beginAccess(v9 + 44, v17, 0LL, 0LL);
  if ((*(_BYTE *)(v9 + 48) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(3LL, a2, a3, *(float *)(v9 + 44));
  }
  swift_beginAccess(v9 + 52, v18, 0LL, 0LL);
  if ((*(_BYTE *)(v9 + 56) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(4LL, a2, a3, *(float *)(v9 + 52));
  }
  swift_beginAccess(v9 + 60, v31, 0LL, 0LL);
  if ((*(_BYTE *)(v9 + 64) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(5LL, a2, a3, *(float *)(v9 + 60));
  }
  swift_beginAccess(v9 + 68, v30, 0LL, 0LL);
  if ((*(_BYTE *)(v9 + 72) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(6LL, a2, a3, *(float *)(v9 + 68));
  }
  swift_beginAccess(v9 + 76, v29, 0LL, 0LL);
  if ((*(_BYTE *)(v9 + 80) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(7LL, a2, a3, *(float *)(v9 + 76));
  }
  swift_beginAccess(v9 + 84, v28, 0LL, 0LL);
  if ((*(_BYTE *)(v9 + 88) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(8LL, a2, a3, *(float *)(v9 + 84));
  }
  swift_beginAccess(v9 + 92, v27, 0LL, 0LL);
  if ((*(_BYTE *)(v9 + 96) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(9LL, a2, a3, *(float *)(v9 + 92));
  }
  swift_beginAccess(v9 + 100, v26, 0LL, 0LL);
  if ((*(_BYTE *)(v9 + 104) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(10LL, a2, a3, *(float *)(v9 + 100));
  }
  swift_beginAccess(v9 + 108, v25, 0LL, 0LL);
  if ((*(_BYTE *)(v9 + 112) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(11LL, a2, a3, *(float *)(v9 + 108));
  }
  swift_beginAccess(v9 + 116, v24, 0LL, 0LL);
  if ((*(_BYTE *)(v9 + 120) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(12LL, a2, a3, *(float *)(v9 + 116));
  }
  swift_beginAccess(v9 + 124, v23, 0LL, 0LL);
  if ((*(_BYTE *)(v9 + 128) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(13LL, a2, a3, *(float *)(v9 + 124));
  }
  swift_beginAccess(v9 + 129, v22, 0LL, 0LL);
  if (*(_BYTE *)(v9 + 129) != 3)
  {
    v21[0] = *(_BYTE *)(v9 + 129);
    unint64_t v11 = sub_100149B3C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( v21,  14LL,  &type metadata for CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame,  v11,  a2,  a3);
  }

  swift_beginAccess(v9 + 130, v21, 0LL, 0LL);
  int v12 = *(unsigned __int8 *)(v9 + 130);
  if (v12 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v12 & 1, 15LL, a2, a3);
  }
  swift_beginAccess(v9 + 131, v20, 0LL, 0LL);
  int v13 = *(unsigned __int8 *)(v9 + 131);
  if (v13 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v13 & 1, 16LL, a2, a3);
  }
  swift_beginAccess(v9 + 132, v19, 0LL, 0LL);
  int v14 = *(unsigned __int8 *)(v9 + 132);
  if (v14 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v14 & 1, 17LL, a2, a3);
  }
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

Swift::Int sub_10010A674()
{
  return sub_10000DF8C( type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample,  &qword_100355998,  (uint64_t)&unk_1002C7700);
}

uint64_t sub_10010A690@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD7C(a1, &qword_10037A968, &qword_10037A970, (uint64_t)sub_100109DC4, a2);
}

uint64_t sub_10010A6AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100109E74(a1, a2, a3);
}

uint64_t sub_10010A6C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10010A184(a1, a2, a3);
}

uint64_t sub_10010A6D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_10035BF80,  type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample,  (uint64_t)&unk_1002C7678);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10010A724@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A960, (uint64_t)qword_10036A660, (uint64_t)sub_100109928, a1);
}

uint64_t sub_10010A740(uint64_t a1)
{
  uint64_t v2 = sub_10000FD98( &qword_100356A50,  type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample,  (uint64_t)&unk_1002C7600);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10010A780(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000FD98( &qword_100356A50,  type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample,  (uint64_t)&unk_1002C7600);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_10010A7D0()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100015614(v0, qword_10036A678);
  sub_10000E704(v0, (uint64_t)qword_10036A678);
  uint64_t v1 = sub_100003A0C(&qword_1003516F8);
  uint64_t v2 = sub_100003A0C(&qword_100351700);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002B3310;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  void *v8 = 0LL;
  *(void *)uint64_t v9 = "RF_UNKNOWN";
  *(void *)(v9 + 8) = 10LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  int v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  int v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 1LL;
  *(void *)int v13 = "RF_X_ARBITRARY_Z_VERTICAL";
  *((void *)v13 + 1) = 25LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 2LL;
  *(void *)uint64_t v14 = "RF_X_TRUE_NORTH_Z_VERTICAL";
  *(void *)(v14 + 8) = 26LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10010A960()
{
  return sub_100008C30(&qword_10037A978, (uint64_t)qword_10036A678, (uint64_t)sub_10010A7D0);
}

uint64_t sub_10010A97C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C8C(&qword_10037A978, (uint64_t)qword_10036A678, (uint64_t)sub_10010A7D0, a1);
}

uint64_t sub_10010A998@<X0>(uint64_t a1@<X8>)
{
  return sub_100008D10(&qword_10037A978, (uint64_t)qword_10036A678, (uint64_t)sub_10010A7D0, a1);
}

uint64_t sub_10010A9B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v31 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (v11 && a1 != a2)
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      while (1)
      {
        sub_10000404C( a1 + v12,  (uint64_t)v10,  type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
        sub_10000404C( a2 + v12,  (uint64_t)v7,  type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
        uint64_t v15 = *(int *)(v4 + 20);
        char v16 = (double *)&v10[v15];
        char v17 = v10[v15 + 8];
        uint64_t v18 = (double *)&v7[v15];
        int v19 = v7[v15 + 8];
        if ((v17 & 1) != 0)
        {
          if (!v19) {
            goto LABEL_24;
          }
        }

        else
        {
          if (*v16 != *v18) {
            LOBYTE(v19) = 1;
          }
          if ((v19 & 1) != 0)
          {
LABEL_24:
            sub_100004090((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
            sub_100004090((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
            goto LABEL_25;
          }
        }

        uint64_t v20 = *(int *)(v4 + 24);
        unint64_t v21 = (double *)&v10[v20];
        char v22 = v10[v20 + 8];
        uint64_t v23 = (double *)&v7[v20];
        int v24 = v7[v20 + 8];
        if ((v22 & 1) != 0)
        {
          if (!v24) {
            goto LABEL_24;
          }
        }

        else
        {
          if (*v21 != *v23) {
            LOBYTE(v24) = 1;
          }
          if ((v24 & 1) != 0) {
            goto LABEL_24;
          }
        }

        uint64_t v25 = type metadata accessor for UnknownStorage(0LL);
        uint64_t v26 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
        char v27 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v7, v25, v26);
        sub_100004090((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
        sub_100004090((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
        BOOL v29 = v14-- != 0;
        if ((v27 & 1) != 0)
        {
          v12 += v13;
          if (v29) {
            continue;
          }
        }

        return v27 & 1;
      }
    }

    char v27 = 1;
  }

  else
  {
LABEL_25:
    char v27 = 0;
  }

  return v27 & 1;
}

uint64_t sub_10010ABAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v65 - v9;
  uint64_t v74 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0LL);
  uint64_t v11 = __chkstk_darwin(v74);
  uint64_t v13 = (uint64_t *)((char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v11);
  char v16 = (uint64_t *)((char *)&v65 - v15);
  uint64_t v17 = *(void *)(a1 + 16);
  if (v17 == *(void *)(a2 + 16))
  {
    if (v17 && a1 != a2)
    {
      uint64_t v66 = v5;
      uint64_t v18 = 0LL;
      unint64_t v19 = (*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
      uint64_t v20 = a1 + v19;
      uint64_t v21 = a2 + v19;
      uint64_t v22 = *(void *)(v14 + 72);
      uint64_t v69 = v20;
      uint64_t v70 = v17;
      uint64_t v67 = v22;
      uint64_t v68 = v21;
      while (1)
      {
        uint64_t v71 = v18;
        uint64_t v23 = v22 * v18;
        sub_10000404C( v20 + v22 * v18,  (uint64_t)v16,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
        sub_10000404C( v21 + v23,  (uint64_t)v13,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
        uint64_t v24 = *v13;
        uint64_t v73 = *v16;
        uint64_t v25 = *(void *)(v73 + 16);
        if (v25 != *(void *)(v24 + 16)) {
          goto LABEL_54;
        }
        if (v25 && v73 != v24)
        {
          unint64_t v26 = (*(unsigned __int8 *)(v66 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80);
          uint64_t v72 = *(void *)(v66 + 72);
          do
          {
            sub_10000404C( v73 + v26,  (uint64_t)v10,  type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
            sub_10000404C( v24 + v26,  (uint64_t)v8,  type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
            uint64_t v27 = *(int *)(v4 + 20);
            uint64_t v28 = (double *)&v10[v27];
            char v29 = v10[v27 + 8];
            uint64_t v30 = (double *)&v8[v27];
            int v31 = v8[v27 + 8];
            if ((v29 & 1) != 0)
            {
              if (!v31) {
                goto LABEL_53;
              }
            }

            else
            {
              if (*v28 != *v30) {
                LOBYTE(v31) = 1;
              }
              if ((v31 & 1) != 0)
              {
LABEL_53:
                sub_100004090((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
                sub_100004090((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
                goto LABEL_54;
              }
            }

            uint64_t v32 = *(int *)(v4 + 24);
            uint64_t v33 = (double *)&v10[v32];
            char v34 = v10[v32 + 8];
            uint64_t v35 = (double *)&v8[v32];
            int v36 = v8[v32 + 8];
            if ((v34 & 1) != 0)
            {
              if (!v36) {
                goto LABEL_53;
              }
            }

            else
            {
              if (*v33 != *v35) {
                LOBYTE(v36) = 1;
              }
              if ((v36 & 1) != 0) {
                goto LABEL_53;
              }
            }

            uint64_t v37 = type metadata accessor for UnknownStorage(0LL);
            uint64_t v38 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
            LOBYTE(v37) = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v37, v38);
            sub_100004090((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
            sub_100004090((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
            if ((v37 & 1) == 0) {
              goto LABEL_54;
            }
            v26 += v72;
            --v25;
          }

          while (v25);
        }

        uint64_t v39 = v74[6];
        int v40 = *((unsigned __int8 *)v16 + v39);
        int v41 = *((unsigned __int8 *)v13 + v39);
        if (v40 == 4)
        {
          if (v41 != 4) {
            goto LABEL_54;
          }
        }

        else if (v41 == 4 || v40 != v41)
        {
          goto LABEL_54;
        }

        uint64_t v43 = v74[7];
        uint64_t v44 = (_DWORD *)((char *)v16 + v43);
        char v45 = *((_BYTE *)v16 + v43 + 4);
        uint64_t v46 = (_DWORD *)((char *)v13 + v43);
        int v47 = *((unsigned __int8 *)v13 + v43 + 4);
        if ((v45 & 1) != 0)
        {
          if (!v47) {
            goto LABEL_54;
          }
        }

        else
        {
          if (*v44 != *v46) {
            LOBYTE(v47) = 1;
          }
          if ((v47 & 1) != 0)
          {
LABEL_54:
            sub_100004090( (uint64_t)v13,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
            sub_100004090( (uint64_t)v16,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
            goto LABEL_55;
          }
        }

        uint64_t v48 = v74[8];
        uint64_t v49 = (_DWORD *)((char *)v16 + v48);
        char v50 = *((_BYTE *)v16 + v48 + 4);
        uint64_t v51 = (_DWORD *)((char *)v13 + v48);
        int v52 = *((unsigned __int8 *)v13 + v48 + 4);
        if ((v50 & 1) != 0)
        {
          if (!v52) {
            goto LABEL_54;
          }
        }

        else
        {
          if (*v49 != *v51) {
            LOBYTE(v52) = 1;
          }
          if ((v52 & 1) != 0) {
            goto LABEL_54;
          }
        }

        uint64_t v53 = v74[9];
        uint64_t v54 = (_DWORD *)((char *)v16 + v53);
        char v55 = *((_BYTE *)v16 + v53 + 4);
        uint64_t v56 = (_DWORD *)((char *)v13 + v53);
        int v57 = *((unsigned __int8 *)v13 + v53 + 4);
        if ((v55 & 1) != 0)
        {
          if (!v57) {
            goto LABEL_54;
          }
        }

        else
        {
          if (*v54 != *v56) {
            LOBYTE(v57) = 1;
          }
          if ((v57 & 1) != 0) {
            goto LABEL_54;
          }
        }

        uint64_t v58 = v74[5];
        uint64_t v59 = (char *)v16 + v58;
        uint64_t v60 = (char *)v13 + v58;
        uint64_t v61 = type metadata accessor for UnknownStorage(0LL);
        uint64_t v62 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
        char v63 = dispatch thunk of static Equatable.== infix(_:_:)(v59, v60, v61, v62);
        sub_100004090( (uint64_t)v13,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
        sub_100004090( (uint64_t)v16,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
        if ((v63 & 1) != 0)
        {
          uint64_t v18 = v71 + 1;
          uint64_t v21 = v68;
          uint64_t v20 = v69;
          uint64_t v22 = v67;
          if (v71 + 1 != v70) {
            continue;
          }
        }

        return v63 & 1;
      }
    }

    char v63 = 1;
  }

  else
  {
LABEL_55:
    char v63 = 0;
  }

  return v63 & 1;
}

uint64_t sub_10010B02C( uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v24 = a4;
  uint64_t v25 = a3(0LL);
  uint64_t v7 = __chkstk_darwin(v25);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v22 - v11;
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13 == *(void *)(a2 + 16))
  {
    if (!v13 || a1 == a2) {
      return 1LL;
    }
    unint64_t v14 = (*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v23 = *(void *)(v10 + 72);
    while (1)
    {
      sub_10000404C(a1 + v14, (uint64_t)v12, a3);
      sub_10000404C(a2 + v14, (uint64_t)v9, a3);
      uint64_t v15 = *(int *)(v25 + 20);
      uint64_t v16 = *(void *)&v12[v15];
      uint64_t v17 = *(void *)&v9[v15];
      if (v16 != v17)
      {
        swift_retain(*(void *)&v12[v15]);
        swift_retain(v17);
        char v18 = v24(v16, v17);
        swift_release(v17);
        swift_release(v16);
        if ((v18 & 1) == 0) {
          break;
        }
      }

      uint64_t v19 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v20 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v19, v20) & 1) == 0) {
        break;
      }
      sub_100004090((uint64_t)v9, a3);
      sub_100004090((uint64_t)v12, a3);
      v14 += v23;
      if (!--v13) {
        return 1LL;
      }
    }

    sub_100004090((uint64_t)v9, a3);
    sub_100004090((uint64_t)v12, a3);
  }

  return 0LL;
}

uint64_t sub_10010B1FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = a3(0LL);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t (*)(void))((char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13 == *(void *)(a2 + 16))
  {
    if (!v13 || a1 == a2)
    {
      char v17 = 1;
    }

    else
    {
      unint64_t v14 = (*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      uint64_t v15 = *(void *)(v10 + 72);
      uint64_t v16 = v13 - 1;
      do
      {
        sub_10000404C(a1 + v14, (uint64_t)v12, a3);
        sub_10000404C(a2 + v14, (uint64_t)v9, a3);
        char v17 = sub_10011CA2C((uint64_t)v12, v9, a3);
        sub_100004090((uint64_t)v9, a3);
        sub_100004090((uint64_t)v12, a3);
        BOOL v19 = v16-- != 0;
        if ((v17 & 1) == 0) {
          break;
        }
        v14 += v15;
      }

      while (v19);
    }
  }

  else
  {
    char v17 = 0;
  }

  return v17 & 1;
}

uint64_t sub_10010B338( uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(char *, char *))
{
  uint64_t v8 = a3(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  unint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15 == *(void *)(a2 + 16))
  {
    if (!v15 || a1 == a2)
    {
      char v19 = 1;
    }

    else
    {
      unint64_t v16 = (*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      uint64_t v17 = *(void *)(v12 + 72);
      uint64_t v18 = v15 - 1;
      do
      {
        sub_10000404C(a1 + v16, (uint64_t)v14, a3);
        sub_10000404C(a2 + v16, (uint64_t)v11, a3);
        char v19 = a4(v14, v11);
        sub_100004090((uint64_t)v11, a3);
        sub_100004090((uint64_t)v14, a3);
        BOOL v21 = v18-- != 0;
        if ((v19 & 1) == 0) {
          break;
        }
        v16 += v17;
      }

      while (v21);
    }
  }

  else
  {
    char v19 = 0;
  }

  return v19 & 1;
}

uint64_t sub_10010B474(uint64_t a1, uint64_t a2)
{
  uint64_t v131 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0LL);
  uint64_t v4 = *(void *)(v131 - 8);
  uint64_t v5 = __chkstk_darwin(v131);
  uint64_t v7 = (char *)&v114 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v114 - v8;
  char v132 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0LL);
  uint64_t v10 = *((void *)v132 - 1);
  uint64_t v11 = __chkstk_darwin(v132);
  uint64_t v13 = (char *)&v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v114 - v14;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0LL);
  uint64_t v17 = __chkstk_darwin(v16);
  char v19 = (char *)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v23 = (char *)&v114 - v22;
  uint64_t v24 = *(void *)(a1 + 16);
  if (v24 != *(void *)(a2 + 16))
  {
LABEL_90:
    char v113 = 0;
    return v113 & 1;
  }

  if (!v24 || a1 == a2)
  {
    char v113 = 1;
    return v113 & 1;
  }

  uint64_t v128 = (char *)&v114 - v22;
  char v129 = (int *)v20;
  uint64_t v114 = v4;
  uint64_t v25 = 0LL;
  unint64_t v26 = (*(unsigned __int8 *)(v21 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  uint64_t v29 = *(void *)(v21 + 72);
  uint64_t v121 = v28;
  uint64_t v122 = v27;
  uint64_t v123 = v24;
  uint64_t v120 = v29;
  while (1)
  {
    uint64_t v127 = v25;
    uint64_t v30 = v29 * v25;
    sub_10000404C( v27 + v29 * v25,  (uint64_t)v23,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
    sub_10000404C(v28 + v30, (uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
    uint64_t v31 = *(void *)v23;
    uint64_t v32 = *(void *)v19;
    uint64_t v33 = *(void *)(*(void *)v23 + 16LL);
    char v34 = v129;
    if (v33 != *(void *)(*(void *)v19 + 16LL))
    {
LABEL_89:
      sub_100004090((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
      sub_100004090((uint64_t)v23, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
      goto LABEL_90;
    }

    if (v33 && v31 != v32) {
      break;
    }
LABEL_71:
    uint64_t v97 = v34[6];
    uint64_t v98 = &v23[v97];
    char v99 = v23[v97 + 8];
    char v100 = &v19[v97];
    int v101 = v19[v97 + 8];
    if ((v99 & 1) != 0)
    {
      if (!v101) {
        goto LABEL_89;
      }
    }

    else
    {
      if (*(void *)v98 != *(void *)v100) {
        LOBYTE(v101) = 1;
      }
      if ((v101 & 1) != 0) {
        goto LABEL_89;
      }
    }

    uint64_t v102 = v34[7];
    uint64_t v103 = &v23[v102];
    char v104 = v23[v102 + 8];
    uint64_t v105 = &v19[v102];
    int v106 = v19[v102 + 8];
    if ((v104 & 1) != 0)
    {
      if (!v106) {
        goto LABEL_89;
      }
    }

    else
    {
      if (*(void *)v103 != *(void *)v105) {
        LOBYTE(v106) = 1;
      }
      if ((v106 & 1) != 0) {
        goto LABEL_89;
      }
    }

    uint64_t v107 = v34[5];
    uint64_t v108 = &v23[v107];
    uint64_t v109 = &v19[v107];
    uint64_t v110 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v111 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    uint64_t v112 = v109;
    uint64_t v23 = v128;
    char v113 = dispatch thunk of static Equatable.== infix(_:_:)(v108, v112, v110, v111);
    sub_100004090((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
    sub_100004090((uint64_t)v23, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
    if ((v113 & 1) != 0)
    {
      uint64_t v25 = v127 + 1;
      uint64_t v27 = v122;
      uint64_t v29 = v120;
      uint64_t v28 = v121;
      if (v127 + 1 != v123) {
        continue;
      }
    }

    return v113 & 1;
  }

  unint64_t v35 = 0LL;
  unint64_t v36 = (*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v37 = v31 + v36;
  uint64_t v124 = v19;
  uint64_t v125 = v32 + v36;
  uint64_t v38 = *(void *)(v10 + 72);
  uint64_t v118 = v32;
  uint64_t v119 = v10;
  uint64_t v116 = v37;
  uint64_t v117 = v33;
  uint64_t v115 = v38;
  while (1)
  {
    unint64_t v39 = v35;
    uint64_t v40 = v38 * v35;
    uint64_t result = sub_10000404C( v37 + v38 * v35,  (uint64_t)v15,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
    unint64_t v42 = *(void *)(v32 + 16);
    unint64_t v126 = v39;
    if (v39 >= v42) {
      break;
    }
    sub_10000404C( v125 + v40,  (uint64_t)v13,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
    uint64_t v43 = *(void *)v15;
    uint64_t v44 = *(void *)v13;
    uint64_t v45 = *(void *)(*(void *)v15 + 16LL);
    if (v45 != *(void *)(*(void *)v13 + 16LL)) {
      goto LABEL_88;
    }
    if (v45 && v43 != v44)
    {
      unint64_t v46 = (*(unsigned __int8 *)(v114 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v114 + 80);
      uint64_t v130 = *(void *)(v114 + 72);
      do
      {
        sub_10000404C( v43 + v46,  (uint64_t)v9,  type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
        sub_10000404C( v44 + v46,  (uint64_t)v7,  type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
        uint64_t v47 = *(int *)(v131 + 20);
        uint64_t v48 = (double *)&v9[v47];
        char v49 = v9[v47 + 8];
        char v50 = (double *)&v7[v47];
        int v51 = v7[v47 + 8];
        if ((v49 & 1) != 0)
        {
          if (!v51) {
            goto LABEL_87;
          }
        }

        else
        {
          if (*v48 != *v50) {
            LOBYTE(v51) = 1;
          }
          if ((v51 & 1) != 0)
          {
LABEL_87:
            sub_100004090((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
            sub_100004090((uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
            goto LABEL_88;
          }
        }

        uint64_t v52 = *(int *)(v131 + 24);
        uint64_t v53 = (double *)&v9[v52];
        char v54 = v9[v52 + 8];
        char v55 = (double *)&v7[v52];
        int v56 = v7[v52 + 8];
        if ((v54 & 1) != 0)
        {
          if (!v56) {
            goto LABEL_87;
          }
        }

        else
        {
          if (*v53 != *v55) {
            LOBYTE(v56) = 1;
          }
          if ((v56 & 1) != 0) {
            goto LABEL_87;
          }
        }

        uint64_t v57 = type metadata accessor for UnknownStorage(0LL);
        uint64_t v58 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
        LOBYTE(v57) = dispatch thunk of static Equatable.== infix(_:_:)(v9, v7, v57, v58);
        sub_100004090((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
        sub_100004090((uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
        if ((v57 & 1) == 0) {
          goto LABEL_88;
        }
        v46 += v130;
        --v45;
      }

      while (v45);
    }

    uint64_t v59 = v132[6];
    uint64_t v60 = (double *)&v15[v59];
    char v61 = v15[v59 + 8];
    uint64_t v62 = (double *)&v13[v59];
    int v63 = v13[v59 + 8];
    if ((v61 & 1) != 0)
    {
      if (!v63) {
        goto LABEL_88;
      }
    }

    else
    {
      if (*v60 != *v62) {
        LOBYTE(v63) = 1;
      }
      if ((v63 & 1) != 0)
      {
LABEL_88:
        sub_100004090((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
        sub_100004090((uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
        char v19 = v124;
        uint64_t v23 = v128;
        goto LABEL_89;
      }
    }

    uint64_t v64 = v132[7];
    uint64_t v65 = (double *)&v15[v64];
    char v66 = v15[v64 + 8];
    uint64_t v67 = (double *)&v13[v64];
    int v68 = v13[v64 + 8];
    if ((v66 & 1) != 0)
    {
      if (!v68) {
        goto LABEL_88;
      }
    }

    else
    {
      if (*v65 != *v67) {
        LOBYTE(v68) = 1;
      }
      if ((v68 & 1) != 0) {
        goto LABEL_88;
      }
    }

    uint64_t v69 = v132[8];
    int v70 = v15[v69];
    int v71 = v13[v69];
    if (v70 == 2)
    {
      if (v71 != 2) {
        goto LABEL_88;
      }
    }

    else if (v71 == 2 || ((((v71 & 1) == 0) ^ v70) & 1) == 0)
    {
      goto LABEL_88;
    }

    uint64_t v72 = v132[9];
    uint64_t v73 = (double *)&v15[v72];
    char v74 = v15[v72 + 8];
    uint64_t v75 = (double *)&v13[v72];
    int v76 = v13[v72 + 8];
    if ((v74 & 1) != 0)
    {
      if (!v76) {
        goto LABEL_88;
      }
    }

    else
    {
      if (*v73 != *v75) {
        LOBYTE(v76) = 1;
      }
      if ((v76 & 1) != 0) {
        goto LABEL_88;
      }
    }

    uint64_t v77 = v132[10];
    uint64_t v78 = (double *)&v15[v77];
    char v79 = v15[v77 + 8];
    uint64_t v80 = (double *)&v13[v77];
    int v81 = v13[v77 + 8];
    if ((v79 & 1) != 0)
    {
      if (!v81) {
        goto LABEL_88;
      }
    }

    else
    {
      if (*v78 != *v80) {
        LOBYTE(v81) = 1;
      }
      if ((v81 & 1) != 0) {
        goto LABEL_88;
      }
    }

    uint64_t v82 = v132[11];
    uint64_t v83 = (double *)&v15[v82];
    char v84 = v15[v82 + 8];
    uint64_t v85 = (double *)&v13[v82];
    int v86 = v13[v82 + 8];
    if ((v84 & 1) != 0)
    {
      if (!v86) {
        goto LABEL_88;
      }
    }

    else
    {
      if (*v83 != *v85) {
        LOBYTE(v86) = 1;
      }
      if ((v86 & 1) != 0) {
        goto LABEL_88;
      }
    }

    uint64_t v87 = v132[12];
    uint64_t v88 = (double *)&v15[v87];
    char v89 = v15[v87 + 8];
    uint64_t v90 = (double *)&v13[v87];
    int v91 = v13[v87 + 8];
    if ((v89 & 1) != 0)
    {
      if (!v91) {
        goto LABEL_88;
      }
    }

    else
    {
      if (*v88 != *v90) {
        LOBYTE(v91) = 1;
      }
      if ((v91 & 1) != 0) {
        goto LABEL_88;
      }
    }

    uint64_t v92 = v132[5];
    uint64_t v93 = &v15[v92];
    uint64_t v94 = &v13[v92];
    uint64_t v95 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v96 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    LOBYTE(v95) = dispatch thunk of static Equatable.== infix(_:_:)(v93, v94, v95, v96);
    sub_100004090((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
    sub_100004090((uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
    uint64_t v32 = v118;
    uint64_t v10 = v119;
    char v19 = v124;
    uint64_t v23 = v128;
    char v34 = v129;
    if ((v95 & 1) == 0) {
      goto LABEL_89;
    }
    unint64_t v35 = v126 + 1;
    uint64_t v38 = v115;
    uint64_t v37 = v116;
    if (v126 + 1 == v117) {
      goto LABEL_71;
    }
  }

  __break(1u);
  return result;
}

BOOL sub_10010BBC4(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  if (a1[4] != a2[4]) {
    return 0LL;
  }
  if (v2 == 1) {
    return 1LL;
  }
  uint64_t v4 = v2 - 2;
  uint64_t v5 = a1 + 5;
  uint64_t v6 = a2 + 5;
  do
  {
    uint64_t v8 = *v5++;
    uint64_t v7 = v8;
    uint64_t v10 = *v6++;
    uint64_t v9 = v10;
    BOOL v12 = v4-- != 0;
    BOOL result = v7 == v9;
  }

  while (v7 == v9 && v12);
  return result;
}

unint64_t sub_10010BC38(unint64_t result)
{
  if (result >= 0xE) {
    return 14LL;
  }
  return result;
}

uint64_t sub_10010BC48(uint64_t a1)
{
  if (a1 <= 11804)
  {
    if (a1 <= 2009)
    {
      uint64_t result = 0LL;
      switch(a1)
      {
        case 0LL:
          return result;
        case 1LL:
          uint64_t result = 1LL;
          break;
        case 2LL:
          uint64_t result = 2LL;
          break;
        case 3LL:
          uint64_t result = 3LL;
          break;
        case 4LL:
          uint64_t result = 4LL;
          break;
        case 5LL:
          uint64_t result = 5LL;
          break;
        case 6LL:
          uint64_t result = 6LL;
          break;
        case 7LL:
          uint64_t result = 7LL;
          break;
        case 8LL:
          uint64_t result = 8LL;
          break;
        case 9LL:
          uint64_t result = 9LL;
          break;
        case 10LL:
          uint64_t result = 10LL;
          break;
        case 11LL:
          uint64_t result = 11LL;
          break;
        case 41LL:
          uint64_t result = 12LL;
          break;
        case 52LL:
          uint64_t result = 13LL;
          break;
        case 56LL:
          uint64_t result = 14LL;
          break;
        case 61LL:
          uint64_t result = 15LL;
          break;
        case 62LL:
          uint64_t result = 16LL;
          break;
        case 63LL:
          uint64_t result = 39LL;
          break;
        case 64LL:
          uint64_t result = 46LL;
          break;
        case 65LL:
          uint64_t result = 47LL;
          break;
        case 66LL:
          uint64_t result = 60LL;
          break;
        case 100LL:
          uint64_t result = 17LL;
          break;
        default:
          return 72LL;
      }

      return result;
    }

    if (a1 <= 2149)
    {
      switch(a1)
      {
        case 2010LL:
          uint64_t result = 18LL;
          break;
        case 2020LL:
          uint64_t result = 19LL;
          break;
        case 2022LL:
          uint64_t result = 35LL;
          break;
        case 2024LL:
          uint64_t result = 37LL;
          break;
        case 2048LL:
          uint64_t result = 20LL;
          break;
        case 2061LL:
          uint64_t result = 21LL;
          break;
        case 2065LL:
          uint64_t result = 22LL;
          break;
        case 2068LL:
          uint64_t result = 69LL;
          break;
        case 2071LL:
          uint64_t result = 23LL;
          break;
        case 2101LL:
          uint64_t result = 36LL;
          break;
        case 2105LL:
          uint64_t result = 24LL;
          break;
        default:
          return 72LL;
      }

      return result;
    }

    switch(a1)
    {
      case 2150LL:
        return 25LL;
      case 3015LL:
        return 26LL;
      case 3016LL:
        return 71LL;
    }

    return 72LL;
  }

  if (a1 <= 15651)
  {
    if (a1 > 15254)
    {
      if (a1 <= 15459)
      {
        if (a1 > 15349)
        {
          if (a1 == 15350) {
            return 55LL;
          }
          if (a1 == 15360) {
            return 54LL;
          }
        }

        else
        {
          if (a1 == 15255) {
            return 29LL;
          }
          if (a1 == 15330) {
            return 63LL;
          }
        }
      }

      else if (a1 <= 15591)
      {
        if (a1 == 15460) {
          return 51LL;
        }
        if (a1 == 15562) {
          return 50LL;
        }
      }

      else
      {
        switch(a1)
        {
          case 15592LL:
            return 52LL;
          case 15610LL:
            return 45LL;
          case 15620LL:
            return 65LL;
        }
      }
    }

    else if (a1 <= 15099)
    {
      if (a1 > 15029)
      {
        if (a1 == 15030) {
          return 58LL;
        }
        if (a1 == 15055) {
          return 56LL;
        }
      }

      else
      {
        if (a1 == 11805) {
          return 27LL;
        }
        if (a1 == 12150) {
          return 28LL;
        }
      }
    }

    else if (a1 <= 15149)
    {
      if (a1 == 15100) {
        return 70LL;
      }
      if (a1 == 15110) {
        return 40LL;
      }
    }

    else
    {
      switch(a1)
      {
        case 15150LL:
          return 67LL;
        case 15230LL:
          return 48LL;
        case 15240LL:
          return 49LL;
      }
    }

    return 72LL;
  }

  if (a1 > 18224)
  {
    if (a1 <= 19149)
    {
      if (a1 > 19029)
      {
        if (a1 == 19030) {
          return 53LL;
        }
        if (a1 == 19090) {
          return 42LL;
        }
      }

      else
      {
        if (a1 == 18225) {
          return 44LL;
        }
        if (a1 == 18240) {
          return 32LL;
        }
      }
    }

    else if (a1 <= 90602)
    {
      if (a1 == 19150) {
        return 34LL;
      }
      if (a1 == 19160) {
        return 43LL;
      }
    }

    else
    {
      switch(a1)
      {
        case 90603LL:
          return 33LL;
        case 515621LL:
          return 66LL;
        case 515652LL:
          return 59LL;
      }
    }

    return 72LL;
  }

  if (a1 > 15732)
  {
    if (a1 > 18069)
    {
      if (a1 == 18070) {
        return 41LL;
      }
      if (a1 == 18200) {
        return 31LL;
      }
    }

    else
    {
      if (a1 == 15733) {
        return 64LL;
      }
      if (a1 == 17150) {
        return 30LL;
      }
    }

    return 72LL;
  }

  switch(a1)
  {
    case 15652LL:
      uint64_t result = 62LL;
      break;
    case 15653LL:
    case 15654LL:
    case 15655LL:
    case 15656LL:
    case 15657LL:
    case 15658LL:
    case 15659LL:
    case 15661LL:
    case 15662LL:
    case 15663LL:
    case 15664LL:
    case 15665LL:
    case 15666LL:
    case 15667LL:
    case 15668LL:
    case 15669LL:
    case 15671LL:
    case 15672LL:
    case 15673LL:
    case 15674LL:
      return 72LL;
    case 15660LL:
      uint64_t result = 68LL;
      break;
    case 15670LL:
      uint64_t result = 38LL;
      break;
    case 15675LL:
      uint64_t result = 57LL;
      break;
    default:
      if (a1 != 15710) {
        return 72LL;
      }
      uint64_t result = 61LL;
      break;
  }

  return result;
}

uint64_t sub_10010C168(uint64_t a1)
{
  uint64_t result = 0LL;
  switch(a1)
  {
    case 0LL:
      return result;
    case 1LL:
      uint64_t result = 1LL;
      break;
    case 2LL:
      uint64_t result = 2LL;
      break;
    case 3LL:
      uint64_t result = 3LL;
      break;
    default:
      if (a1 == 1001) {
        uint64_t result = 4LL;
      }
      else {
        uint64_t result = 5LL;
      }
      break;
  }

  return result;
}

unint64_t sub_10010C1BC(unint64_t result)
{
  if (result >= 0xF) {
    return 15LL;
  }
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396510,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_AccelSample(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396520,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Accel(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396530,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_Accel);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GyroSample(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396540,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Gyro(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396550,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_Gyro);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396560,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Baro(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396570,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_Baro);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396580,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396590,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_DaemonLocation);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396A80,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass);
}

uint64_t sub_10010C294(uint64_t a1)
{
  uint64_t v3 = sub_100003A0C(&qword_100355540);
  __chkstk_darwin(v3);
  uint64_t v76 = (uint64_t)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(_BYTE *)(v1 + 16) = 4;
  uint64_t v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  uint64_t v75 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 56LL);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v7)(v5, 1LL, 1LL, v6);
  uint64_t v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy;
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude;
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy;
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  uint64_t v77 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  *(void *)uint64_t v11 = 0LL;
  *(_BYTE *)(v11 + 8) = 1;
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  uint64_t v78 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  *(void *)uint64_t v12 = 0LL;
  *(_BYTE *)(v12 + 8) = 1;
  uint64_t v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  uint64_t v79 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  *(void *)uint64_t v13 = 0LL;
  *(_BYTE *)(v13 + 8) = 1;
  uint64_t v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  uint64_t v80 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  *(void *)uint64_t v14 = 0LL;
  *(_BYTE *)(v14 + 8) = 1;
  uint64_t v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  uint64_t v81 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  *(void *)uint64_t v15 = 0LL;
  *(_BYTE *)(v15 + 8) = 1;
  uint64_t v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  uint64_t v82 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  *(_DWORD *)uint64_t v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  uint64_t v83 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  *(void *)uint64_t v17 = 0LL;
  *(_BYTE *)(v17 + 8) = 1;
  uint64_t v18 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  _BYTE *v18 = 14;
  char v84 = v18;
  uint64_t v85 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  v7();
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  uint64_t v86 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  *(void *)uint64_t v19 = 0LL;
  *(_BYTE *)(v19 + 8) = 1;
  uint64_t v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  uint64_t v87 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  *(_DWORD *)uint64_t v20 = 0;
  *(_BYTE *)(v20 + 4) = 1;
  uint64_t v88 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity) = 5;
  char v89 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame) = 3;
  uint64_t v90 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame) = 3;
  uint64_t v92 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType) = 8;
  uint64_t v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude;
  *(void *)uint64_t v21 = 0LL;
  *(_BYTE *)(v21 + 8) = 1;
  int v91 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController) = 2;
  swift_beginAccess(a1 + 16, v134, 0LL, 0LL);
  char v22 = *(_BYTE *)(a1 + 16);
  swift_beginAccess(v1 + 16, v133, 1LL, 0LL);
  *(_BYTE *)(v1 + 16) = v22;
  uint64_t v23 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate,  v132,  0LL,  0LL);
  uint64_t v24 = v76;
  sub_10000E6C0(v23, v76, &qword_100355540);
  uint64_t v25 = v75;
  swift_beginAccess(v75, v131, 33LL, 0LL);
  sub_10000E5D4(v24, v25, &qword_100355540);
  swift_endAccess(v131);
  unint64_t v26 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy,  v131,  0LL,  0LL);
  uint64_t v27 = *v26;
  LOBYTE(v26) = *((_BYTE *)v26 + 8);
  swift_beginAccess(v8, v130, 1LL, 0LL);
  *(void *)uint64_t v8 = v27;
  *(_BYTE *)(v8 + 8) = (_BYTE)v26;
  uint64_t v28 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude,  v129,  0LL,  0LL);
  uint64_t v29 = *v28;
  LOBYTE(v28) = *((_BYTE *)v28 + 8);
  swift_beginAccess(v9, v128, 1LL, 0LL);
  *(void *)uint64_t v9 = v29;
  *(_BYTE *)(v9 + 8) = (_BYTE)v28;
  uint64_t v30 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy,  &v127,  0LL,  0LL);
  uint64_t v31 = *v30;
  LOBYTE(v30) = *((_BYTE *)v30 + 8);
  swift_beginAccess(v10, &v126, 1LL, 0LL);
  *(void *)uint64_t v10 = v31;
  *(_BYTE *)(v10 + 8) = (_BYTE)v30;
  uint64_t v32 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed,  &v125,  0LL,  0LL);
  uint64_t v33 = *v32;
  LOBYTE(v32) = *((_BYTE *)v32 + 8);
  uint64_t v34 = v77;
  swift_beginAccess(v77, &v124, 1LL, 0LL);
  *(void *)uint64_t v34 = v33;
  *(_BYTE *)(v34 + 8) = (_BYTE)v32;
  unint64_t v35 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy,  &v123,  0LL,  0LL);
  uint64_t v36 = *v35;
  LOBYTE(v35) = *((_BYTE *)v35 + 8);
  uint64_t v37 = v78;
  swift_beginAccess(v78, &v122, 1LL, 0LL);
  *(void *)uint64_t v37 = v36;
  *(_BYTE *)(v37 + 8) = (_BYTE)v35;
  uint64_t v38 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course,  &v121,  0LL,  0LL);
  uint64_t v39 = *v38;
  LOBYTE(v38) = *((_BYTE *)v38 + 8);
  uint64_t v40 = v79;
  swift_beginAccess(v79, &v120, 1LL, 0LL);
  *(void *)uint64_t v40 = v39;
  *(_BYTE *)(v40 + 8) = (_BYTE)v38;
  int v41 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy,  &v119,  0LL,  0LL);
  uint64_t v42 = *v41;
  LOBYTE(v41) = *((_BYTE *)v41 + 8);
  uint64_t v43 = v80;
  swift_beginAccess(v80, &v118, 1LL, 0LL);
  *(void *)uint64_t v43 = v42;
  *(_BYTE *)(v43 + 8) = (_BYTE)v41;
  uint64_t v44 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp,  &v117,  0LL,  0LL);
  uint64_t v45 = *v44;
  LOBYTE(v44) = *((_BYTE *)v44 + 8);
  uint64_t v46 = v81;
  swift_beginAccess(v81, &v116, 1LL, 0LL);
  *(void *)uint64_t v46 = v45;
  *(_BYTE *)(v46 + 8) = (_BYTE)v44;
  uint64_t v47 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence,  &v115,  0LL,  0LL);
  LODWORD(v45) = *(_DWORD *)v47;
  LOBYTE(v47) = *(_BYTE *)(v47 + 4);
  uint64_t v48 = v82;
  swift_beginAccess(v82, &v114, 1LL, 0LL);
  *(_DWORD *)uint64_t v48 = v45;
  *(_BYTE *)(v48 + 4) = v47;
  char v49 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan,  &v113,  0LL,  0LL);
  uint64_t v50 = *v49;
  LOBYTE(v49) = *((_BYTE *)v49 + 8);
  uint64_t v51 = v83;
  swift_beginAccess(v83, &v112, 1LL, 0LL);
  *(void *)uint64_t v51 = v50;
  *(_BYTE *)(v51 + 8) = (_BYTE)v49;
  uint64_t v52 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type,  &v111,  0LL,  0LL);
  LOBYTE(v52) = *v52;
  uint64_t v53 = v84;
  swift_beginAccess(v84, &v110, 1LL, 0LL);
  *uint64_t v53 = (_BYTE)v52;
  uint64_t v54 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate,  &v109,  0LL,  0LL);
  sub_10000E6C0(v54, v24, &qword_100355540);
  uint64_t v55 = v85;
  swift_beginAccess(v85, v108, 33LL, 0LL);
  sub_10000E5D4(v24, v55, &qword_100355540);
  swift_endAccess(v108);
  int v56 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse,  v108,  0LL,  0LL);
  uint64_t v57 = *v56;
  LOBYTE(v56) = *((_BYTE *)v56 + 8);
  uint64_t v58 = v86;
  swift_beginAccess(v86, &v107, 1LL, 0LL);
  *(void *)uint64_t v58 = v57;
  *(_BYTE *)(v58 + 8) = (_BYTE)v56;
  uint64_t v59 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor,  &v106,  0LL,  0LL);
  LODWORD(v57) = *(_DWORD *)v59;
  LOBYTE(v59) = *(_BYTE *)(v59 + 4);
  uint64_t v60 = v87;
  swift_beginAccess(v87, &v105, 1LL, 0LL);
  *(_DWORD *)uint64_t v60 = v57;
  *(_BYTE *)(v60 + 4) = v59;
  char v61 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity,  &v104,  0LL,  0LL);
  LOBYTE(v61) = *v61;
  uint64_t v62 = v88;
  swift_beginAccess(v88, &v103, 1LL, 0LL);
  _BYTE *v62 = (_BYTE)v61;
  int v63 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame,  &v102,  0LL,  0LL);
  LOBYTE(v63) = *v63;
  uint64_t v64 = v89;
  swift_beginAccess(v89, &v101, 1LL, 0LL);
  _BYTE *v64 = (_BYTE)v63;
  uint64_t v65 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame,  &v100,  0LL,  0LL);
  LOBYTE(v65) = *v65;
  char v66 = v90;
  swift_beginAccess(v90, &v99, 1LL, 0LL);
  *char v66 = (_BYTE)v65;
  uint64_t v67 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType,  &v98,  0LL,  0LL);
  LOBYTE(v67) = *v67;
  int v68 = v92;
  swift_beginAccess(v92, &v97, 1LL, 0LL);
  *int v68 = (_BYTE)v67;
  uint64_t v69 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude,  &v96,  0LL,  0LL);
  uint64_t v70 = *v69;
  LOBYTE(v69) = *((_BYTE *)v69 + 8);
  swift_beginAccess(v21, &v95, 1LL, 0LL);
  *(void *)uint64_t v21 = v70;
  *(_BYTE *)(v21 + 8) = (_BYTE)v69;
  int v71 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  swift_beginAccess(v71, &v94, 0LL, 0LL);
  LOBYTE(v71) = *v71;
  uint64_t v72 = v91;
  swift_beginAccess(v91, &v93, 1LL, 0LL);
  *uint64_t v72 = (_BYTE)v71;
  return v1;
}

uint64_t sub_10010CB50(uint64_t result)
{
  if (result <= 1)
  {
    return 4LL;
  }

  if (result != 2)
  {
    if (result == 0xFFFF) {
      return 3LL;
    }
    return 4LL;
  }

  return result;
}

uint64_t sub_10010CB8C(uint64_t a1)
{
  if (a1 <= 24)
  {
    if (a1 == -1) {
      return 0LL;
    }
    if (!a1) {
      return 1LL;
    }
  }

  else
  {
    switch(a1)
    {
      case 25LL:
        return 2LL;
      case 50LL:
        return 3LL;
      case 75LL:
        return 4LL;
    }
  }

  return 5LL;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003965A0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003965B0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003965C0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003965D0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396A90,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass);
}

uint64_t sub_10010CC4C(uint64_t a1)
{
  uint64_t v3 = sub_100003A0C(&qword_100355558);
  __chkstk_darwin(v3);
  uint64_t v241 = (uint64_t)&v185 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100003A0C(&qword_100355550);
  __chkstk_darwin(v5);
  uint64_t v219 = (uint64_t)&v185 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100003A0C(&qword_100355548);
  __chkstk_darwin(v7);
  uint64_t v205 = (uint64_t)&v185 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100003A0C(&qword_100355540);
  __chkstk_darwin(v9);
  uint64_t v196 = (uint64_t)&v185 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v1 + 16) = 0LL;
  *(_BYTE *)(v1 + 24) = 1;
  *(void *)(v1 + 32) = 0LL;
  v185 = (void *)(v1 + 32);
  *(void *)(v1 + 48) = 0LL;
  v186 = (void *)(v1 + 48);
  *(_BYTE *)(v1 + 40) = 1;
  *(_BYTE *)(v1 + 56) = 1;
  *(void *)(v1 + 64) = 0LL;
  v187 = (void *)(v1 + 64);
  *(_BYTE *)(v1 + 72) = 1;
  *(void *)(v1 + 80) = 0LL;
  v188 = (void *)(v1 + 80);
  *(_DWORD *)(v1 + 92) = 0;
  v189 = (_DWORD *)(v1 + 92);
  *(_BYTE *)(v1 + 88) = 1;
  *(_BYTE *)(v1 + 96) = 1;
  *(_DWORD *)(v1 + 100) = 0;
  v190 = (_DWORD *)(v1 + 100);
  *(_DWORD *)(v1 + 108) = 0;
  v191 = (_DWORD *)(v1 + 108);
  *(_WORD *)(v1 + 113) = 1026;
  *(_BYTE *)(v1 + 104) = 1;
  v192 = (_BYTE *)(v1 + 113);
  uint64_t v193 = v1 + 114;
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  uint64_t v194 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  *(_BYTE *)(v1 + 112) = 1;
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  uint64_t v13 = *(void (**)(void))(*(void *)(v12 - 8) + 56LL);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v13)(v11, 1LL, 1LL, v12);
  uint64_t v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse;
  uint64_t v195 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse;
  *(void *)uint64_t v14 = 0LL;
  *(_BYTE *)(v14 + 8) = 1;
  uint64_t v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay;
  uint64_t v197 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay;
  *(_DWORD *)uint64_t v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  uint64_t v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass;
  uint64_t v198 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass;
  *(_DWORD *)uint64_t v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  v199 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted) = 2;
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  uint64_t v200 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  uint64_t v18 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v17, 1LL, 1LL, v18);
  v201 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel) = 4;
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
  uint64_t v202 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
  *(_DWORD *)uint64_t v19 = 0;
  *(_BYTE *)(v19 + 4) = 1;
  uint64_t v203 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
  v13();
  uint64_t v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy;
  uint64_t v204 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy;
  *(void *)uint64_t v20 = 0LL;
  *(_BYTE *)(v20 + 8) = 1;
  uint64_t v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime;
  uint64_t v206 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime;
  *(void *)uint64_t v21 = 0LL;
  *(_BYTE *)(v21 + 8) = 1;
  v207 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice) = 3;
  v208 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates) = 2;
  uint64_t v22 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  uint64_t v209 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v22, 1LL, 1LL, v23);
  uint64_t v24 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope;
  uint64_t v210 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope;
  *(void *)uint64_t v24 = 0LL;
  *(_BYTE *)(v24 + 8) = 1;
  uint64_t v25 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope;
  uint64_t v211 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope;
  *(void *)uint64_t v25 = 0LL;
  *(_BYTE *)(v25 + 8) = 1;
  uint64_t v26 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude;
  uint64_t v212 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude;
  *(void *)uint64_t v26 = 0LL;
  *(_BYTE *)(v26 + 8) = 1;
  uint64_t v27 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty;
  uint64_t v213 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty;
  *(void *)uint64_t v27 = 0LL;
  *(_BYTE *)(v27 + 8) = 1;
  uint64_t v28 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude;
  uint64_t v214 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude;
  *(void *)uint64_t v28 = 0LL;
  *(_BYTE *)(v28 + 8) = 1;
  uint64_t v29 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty;
  uint64_t v215 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty;
  *(void *)uint64_t v29 = 0LL;
  *(_BYTE *)(v29 + 8) = 1;
  v216 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed) = 2;
  uint64_t v30 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy;
  uint64_t v217 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy;
  *(void *)uint64_t v30 = 0LL;
  *(_BYTE *)(v30 + 8) = 1;
  uint64_t v31 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy;
  uint64_t v218 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy;
  *(void *)uint64_t v31 = 0LL;
  *(_BYTE *)(v31 + 8) = 1;
  v220 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused) = 2;
  uint64_t v221 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
  v13();
  uint64_t v32 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy;
  uint64_t v222 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy;
  *(void *)uint64_t v32 = 0LL;
  *(_BYTE *)(v32 + 8) = 1;
  v223 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame) = 3;
  uint64_t v33 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse;
  uint64_t v224 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse;
  *(void *)uint64_t v33 = 0LL;
  *(_BYTE *)(v33 + 8) = 1;
  uint64_t v34 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy;
  uint64_t v225 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy;
  *(void *)uint64_t v34 = 0LL;
  *(_BYTE *)(v34 + 8) = 1;
  uint64_t v35 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError;
  uint64_t v226 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError;
  *(void *)uint64_t v35 = 0LL;
  *(_BYTE *)(v35 + 8) = 1;
  uint64_t v36 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude;
  uint64_t v227 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude;
  *(void *)uint64_t v36 = 0LL;
  *(_BYTE *)(v36 + 8) = 1;
  uint64_t v37 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy;
  uint64_t v228 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy;
  *(void *)uint64_t v37 = 0LL;
  *(_BYTE *)(v37 + 8) = 1;
  v229 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl) = 2;
  uint64_t v38 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude;
  uint64_t v230 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude;
  *(void *)uint64_t v38 = 0LL;
  *(_BYTE *)(v38 + 8) = 1;
  uint64_t v39 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy;
  uint64_t v231 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy;
  *(void *)uint64_t v39 = 0LL;
  *(_BYTE *)(v39 + 8) = 1;
  v232 = (uint64_t *)(v1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
  *(void *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport) = &_swiftEmptyArrayStorage;
  v233 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent) = 3;
  uint64_t v40 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  uint64_t v234 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  uint64_t v41 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56LL))(v40, 1LL, 1LL, v41);
  v235 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState) = 3;
  uint64_t v42 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor;
  uint64_t v236 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor;
  *(void *)uint64_t v42 = 0LL;
  *(_BYTE *)(v42 + 8) = 1;
  uint64_t v43 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor;
  uint64_t v237 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor;
  *(void *)uint64_t v43 = 0LL;
  *(_BYTE *)(v43 + 8) = 1;
  v238 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType) = 4;
  v239 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching) = 2;
  v240 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy) = 3;
  uint64_t v44 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType) = 5;
  uint64_t v45 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp) = 2;
  swift_beginAccess(a1 + 16, v347, 0LL, 0LL);
  uint64_t v46 = *(void *)(a1 + 16);
  char v47 = *(_BYTE *)(a1 + 24);
  swift_beginAccess(v1 + 16, v346, 1LL, 0LL);
  *(void *)(v1 + 16) = v46;
  *(_BYTE *)(v1 + 24) = v47;
  swift_beginAccess(a1 + 32, v345, 0LL, 0LL);
  uint64_t v48 = *(void *)(a1 + 32);
  char v49 = *(_BYTE *)(a1 + 40);
  uint64_t v50 = v185;
  swift_beginAccess(v185, v344, 1LL, 0LL);
  *uint64_t v50 = v48;
  *(_BYTE *)(v1 + 40) = v49;
  swift_beginAccess(a1 + 48, v343, 0LL, 0LL);
  uint64_t v51 = *(void *)(a1 + 48);
  char v52 = *(_BYTE *)(a1 + 56);
  uint64_t v53 = v186;
  swift_beginAccess(v186, v342, 1LL, 0LL);
  *uint64_t v53 = v51;
  *(_BYTE *)(v1 + 56) = v52;
  swift_beginAccess(a1 + 64, v341, 0LL, 0LL);
  uint64_t v54 = *(void *)(a1 + 64);
  char v55 = *(_BYTE *)(a1 + 72);
  int v56 = v187;
  swift_beginAccess(v187, &v340, 1LL, 0LL);
  *int v56 = v54;
  *(_BYTE *)(v1 + 72) = v55;
  swift_beginAccess(a1 + 80, &v339, 0LL, 0LL);
  uint64_t v57 = *(void *)(a1 + 80);
  char v58 = *(_BYTE *)(a1 + 88);
  uint64_t v59 = v188;
  swift_beginAccess(v188, &v338, 1LL, 0LL);
  *uint64_t v59 = v57;
  *(_BYTE *)(v1 + 88) = v58;
  swift_beginAccess(a1 + 92, &v337, 0LL, 0LL);
  LODWORD(v57) = *(_DWORD *)(a1 + 92);
  char v60 = *(_BYTE *)(a1 + 96);
  char v61 = v189;
  swift_beginAccess(v189, &v336, 1LL, 0LL);
  *char v61 = v57;
  *(_BYTE *)(v1 + 96) = v60;
  swift_beginAccess(a1 + 100, &v335, 0LL, 0LL);
  LODWORD(v57) = *(_DWORD *)(a1 + 100);
  char v62 = *(_BYTE *)(a1 + 104);
  int v63 = v190;
  swift_beginAccess(v190, &v334, 1LL, 0LL);
  *int v63 = v57;
  *(_BYTE *)(v1 + 104) = v62;
  swift_beginAccess(a1 + 108, &v333, 0LL, 0LL);
  LODWORD(v57) = *(_DWORD *)(a1 + 108);
  char v64 = *(_BYTE *)(a1 + 112);
  uint64_t v65 = v191;
  swift_beginAccess(v191, &v332, 1LL, 0LL);
  *uint64_t v65 = v57;
  *(_BYTE *)(v1 + 112) = v64;
  swift_beginAccess(a1 + 113, &v331, 0LL, 0LL);
  LOBYTE(v57) = *(_BYTE *)(a1 + 113);
  char v66 = v192;
  swift_beginAccess(v192, &v330, 1LL, 0LL);
  *char v66 = v57;
  swift_beginAccess(a1 + 114, &v329, 0LL, 0LL);
  LOBYTE(v57) = *(_BYTE *)(a1 + 114);
  swift_beginAccess(v193, &v328, 1LL, 0LL);
  *(_BYTE *)(v1 + 114) = v57;
  uint64_t v67 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate,  &v327,  0LL,  0LL);
  uint64_t v68 = v196;
  sub_10000E6C0(v67, v196, &qword_100355540);
  uint64_t v69 = v194;
  swift_beginAccess(v194, v326, 33LL, 0LL);
  sub_10000E5D4(v68, v69, &qword_100355540);
  swift_endAccess(v326);
  uint64_t v70 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse,  v326,  0LL,  0LL);
  uint64_t v71 = *v70;
  LOBYTE(v70) = *((_BYTE *)v70 + 8);
  uint64_t v72 = v195;
  swift_beginAccess(v195, &v325, 1LL, 0LL);
  *(void *)uint64_t v72 = v71;
  *(_BYTE *)(v72 + 8) = (_BYTE)v70;
  uint64_t v73 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay,  &v324,  0LL,  0LL);
  LODWORD(v71) = *(_DWORD *)v73;
  LOBYTE(v73) = *(_BYTE *)(v73 + 4);
  uint64_t v74 = v197;
  swift_beginAccess(v197, &v323, 1LL, 0LL);
  *(_DWORD *)uint64_t v74 = v71;
  *(_BYTE *)(v74 + 4) = v73;
  uint64_t v75 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass,  &v322,  0LL,  0LL);
  LODWORD(v71) = *(_DWORD *)v75;
  LOBYTE(v75) = *(_BYTE *)(v75 + 4);
  uint64_t v76 = v198;
  swift_beginAccess(v198, &v321, 1LL, 0LL);
  *(_DWORD *)uint64_t v76 = v71;
  *(_BYTE *)(v76 + 4) = v75;
  uint64_t v77 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted,  &v320,  0LL,  0LL);
  LOBYTE(v77) = *v77;
  uint64_t v78 = v199;
  swift_beginAccess(v199, &v319, 1LL, 0LL);
  *uint64_t v78 = (_BYTE)v77;
  uint64_t v79 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure,  &v318,  0LL,  0LL);
  uint64_t v80 = v205;
  sub_10000E6C0(v79, v205, &qword_100355548);
  uint64_t v81 = v200;
  swift_beginAccess(v200, v317, 33LL, 0LL);
  sub_10000E5D4(v80, v81, &qword_100355548);
  swift_endAccess(v317);
  uint64_t v82 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel,  v317,  0LL,  0LL);
  LOBYTE(v82) = *v82;
  uint64_t v83 = v201;
  swift_beginAccess(v201, &v316, 1LL, 0LL);
  *uint64_t v83 = (_BYTE)v82;
  uint64_t v84 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation,  &v315,  0LL,  0LL);
  LODWORD(v83) = *(_DWORD *)v84;
  LOBYTE(v84) = *(_BYTE *)(v84 + 4);
  uint64_t v85 = v202;
  swift_beginAccess(v202, &v314, 1LL, 0LL);
  *(_DWORD *)uint64_t v85 = (_DWORD)v83;
  *(_BYTE *)(v85 + 4) = v84;
  uint64_t v86 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate,  &v313,  0LL,  0LL);
  sub_10000E6C0(v86, v68, &qword_100355540);
  uint64_t v87 = v203;
  swift_beginAccess(v203, v312, 33LL, 0LL);
  sub_10000E5D4(v68, v87, &qword_100355540);
  swift_endAccess(v312);
  uint64_t v88 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy,  v312,  0LL,  0LL);
  uint64_t v89 = *v88;
  LOBYTE(v88) = *((_BYTE *)v88 + 8);
  uint64_t v90 = v204;
  swift_beginAccess(v204, &v311, 1LL, 0LL);
  *(void *)uint64_t v90 = v89;
  *(_BYTE *)(v90 + 8) = (_BYTE)v88;
  int v91 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime,  &v310,  0LL,  0LL);
  uint64_t v92 = *v91;
  LOBYTE(v91) = *((_BYTE *)v91 + 8);
  uint64_t v93 = v206;
  swift_beginAccess(v206, &v309, 1LL, 0LL);
  *(void *)uint64_t v93 = v92;
  *(_BYTE *)(v93 + 8) = (_BYTE)v91;
  uint64_t v94 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice,  &v308,  0LL,  0LL);
  LOBYTE(v94) = *v94;
  uint64_t v95 = v207;
  swift_beginAccess(v207, &v307, 1LL, 0LL);
  *uint64_t v95 = (_BYTE)v94;
  uint64_t v96 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates,  &v306,  0LL,  0LL);
  LOBYTE(v96) = *v96;
  uint64_t v97 = v208;
  swift_beginAccess(v208, &v305, 1LL, 0LL);
  *uint64_t v97 = (_BYTE)v96;
  uint64_t v98 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData,  &v304,  0LL,  0LL);
  uint64_t v99 = v219;
  sub_10000E6C0(v98, v219, &qword_100355550);
  uint64_t v100 = v209;
  swift_beginAccess(v209, v303, 33LL, 0LL);
  sub_10000E5D4(v99, v100, &qword_100355550);
  swift_endAccess(v303);
  uint64_t v101 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope,  v303,  0LL,  0LL);
  uint64_t v102 = *v101;
  LOBYTE(v101) = *((_BYTE *)v101 + 8);
  uint64_t v103 = v210;
  swift_beginAccess(v210, &v302, 1LL, 0LL);
  *(void *)uint64_t v103 = v102;
  *(_BYTE *)(v103 + 8) = (_BYTE)v101;
  uint64_t v104 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope,  &v301,  0LL,  0LL);
  uint64_t v105 = *v104;
  LOBYTE(v104) = *((_BYTE *)v104 + 8);
  uint64_t v106 = v211;
  swift_beginAccess(v211, &v300, 1LL, 0LL);
  *(void *)uint64_t v106 = v105;
  *(_BYTE *)(v106 + 8) = (_BYTE)v104;
  uint64_t v107 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude,  &v299,  0LL,  0LL);
  uint64_t v108 = *v107;
  LOBYTE(v107) = *((_BYTE *)v107 + 8);
  uint64_t v109 = v212;
  swift_beginAccess(v212, &v298, 1LL, 0LL);
  *(void *)uint64_t v109 = v108;
  *(_BYTE *)(v109 + 8) = (_BYTE)v107;
  uint64_t v110 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty,  &v297,  0LL,  0LL);
  uint64_t v111 = *v110;
  LOBYTE(v110) = *((_BYTE *)v110 + 8);
  uint64_t v112 = v213;
  swift_beginAccess(v213, &v296, 1LL, 0LL);
  *(void *)uint64_t v112 = v111;
  *(_BYTE *)(v112 + 8) = (_BYTE)v110;
  uint64_t v113 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude,  &v295,  0LL,  0LL);
  uint64_t v114 = *v113;
  LOBYTE(v113) = *((_BYTE *)v113 + 8);
  uint64_t v115 = v214;
  swift_beginAccess(v214, &v294, 1LL, 0LL);
  *(void *)uint64_t v115 = v114;
  *(_BYTE *)(v115 + 8) = (_BYTE)v113;
  uint64_t v116 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty,  &v293,  0LL,  0LL);
  uint64_t v117 = *v116;
  LOBYTE(v116) = *((_BYTE *)v116 + 8);
  uint64_t v118 = v215;
  swift_beginAccess(v215, &v292, 1LL, 0LL);
  *(void *)uint64_t v118 = v117;
  *(_BYTE *)(v118 + 8) = (_BYTE)v116;
  uint64_t v119 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed,  &v291,  0LL,  0LL);
  LOBYTE(v119) = *v119;
  uint64_t v120 = v216;
  swift_beginAccess(v216, &v290, 1LL, 0LL);
  *uint64_t v120 = (_BYTE)v119;
  uint64_t v121 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy,  &v289,  0LL,  0LL);
  uint64_t v122 = *v121;
  LOBYTE(v121) = *((_BYTE *)v121 + 8);
  uint64_t v123 = v217;
  swift_beginAccess(v217, &v288, 1LL, 0LL);
  *(void *)uint64_t v123 = v122;
  *(_BYTE *)(v123 + 8) = (_BYTE)v121;
  uint64_t v124 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy,  &v287,  0LL,  0LL);
  uint64_t v125 = *v124;
  LOBYTE(v124) = *((_BYTE *)v124 + 8);
  uint64_t v126 = v218;
  swift_beginAccess(v218, &v286, 1LL, 0LL);
  *(void *)uint64_t v126 = v125;
  *(_BYTE *)(v126 + 8) = (_BYTE)v124;
  uint64_t v127 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused,  &v285,  0LL,  0LL);
  LOBYTE(v127) = *v127;
  uint64_t v128 = v220;
  swift_beginAccess(v220, &v284, 1LL, 0LL);
  *uint64_t v128 = (_BYTE)v127;
  uint64_t v129 = a1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate,  &v283,  0LL,  0LL);
  sub_10000E6C0(v129, v68, &qword_100355540);
  uint64_t v130 = v221;
  swift_beginAccess(v221, v282, 33LL, 0LL);
  sub_10000E5D4(v68, v130, &qword_100355540);
  swift_endAccess(v282);
  uint64_t v131 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy,  v282,  0LL,  0LL);
  uint64_t v132 = *v131;
  LOBYTE(v131) = *((_BYTE *)v131 + 8);
  uint64_t v133 = v222;
  swift_beginAccess(v222, &v281, 1LL, 0LL);
  *(void *)uint64_t v133 = v132;
  *(_BYTE *)(v133 + 8) = (_BYTE)v131;
  double v134 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame,  &v280,  0LL,  0LL);
  LOBYTE(v134) = *v134;
  int v135 = v223;
  swift_beginAccess(v223, &v279, 1LL, 0LL);
  *int v135 = (_BYTE)v134;
  char v136 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse,  &v278,  0LL,  0LL);
  uint64_t v137 = *v136;
  LOBYTE(v136) = *((_BYTE *)v136 + 8);
  uint64_t v138 = v224;
  swift_beginAccess(v224, &v277, 1LL, 0LL);
  *(void *)uint64_t v138 = v137;
  *(_BYTE *)(v138 + 8) = (_BYTE)v136;
  uint64_t v139 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy,  &v276,  0LL,  0LL);
  uint64_t v140 = *v139;
  LOBYTE(v139) = *((_BYTE *)v139 + 8);
  uint64_t v141 = v225;
  swift_beginAccess(v225, &v275, 1LL, 0LL);
  *(void *)uint64_t v141 = v140;
  *(_BYTE *)(v141 + 8) = (_BYTE)v139;
  uint64_t v142 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError,  &v274,  0LL,  0LL);
  uint64_t v143 = *v142;
  LOBYTE(v142) = *((_BYTE *)v142 + 8);
  uint64_t v144 = v226;
  swift_beginAccess(v226, &v273, 1LL, 0LL);
  *(void *)uint64_t v144 = v143;
  *(_BYTE *)(v144 + 8) = (_BYTE)v142;
  uint64_t v145 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude,  &v272,  0LL,  0LL);
  uint64_t v146 = *v145;
  LOBYTE(v145) = *((_BYTE *)v145 + 8);
  uint64_t v147 = v227;
  swift_beginAccess(v227, &v271, 1LL, 0LL);
  *(void *)uint64_t v147 = v146;
  *(_BYTE *)(v147 + 8) = (_BYTE)v145;
  uint64_t v148 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy,  &v270,  0LL,  0LL);
  uint64_t v149 = *v148;
  LOBYTE(v148) = *((_BYTE *)v148 + 8);
  uint64_t v150 = v228;
  swift_beginAccess(v228, &v269, 1LL, 0LL);
  *(void *)uint64_t v150 = v149;
  *(_BYTE *)(v150 + 8) = (_BYTE)v148;
  uint64_t v151 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl,  &v268,  0LL,  0LL);
  LOBYTE(v151) = *v151;
  uint64_t v152 = v229;
  swift_beginAccess(v229, &v267, 1LL, 0LL);
  *uint64_t v152 = (_BYTE)v151;
  uint64_t v153 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude,  &v266,  0LL,  0LL);
  uint64_t v154 = *v153;
  LOBYTE(v153) = *((_BYTE *)v153 + 8);
  uint64_t v155 = v230;
  swift_beginAccess(v230, &v265, 1LL, 0LL);
  *(void *)uint64_t v155 = v154;
  *(_BYTE *)(v155 + 8) = (_BYTE)v153;
  uint64_t v156 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy,  &v264,  0LL,  0LL);
  uint64_t v157 = *v156;
  LOBYTE(v156) = *((_BYTE *)v156 + 8);
  uint64_t v158 = v231;
  swift_beginAccess(v231, &v263, 1LL, 0LL);
  *(void *)uint64_t v158 = v157;
  *(_BYTE *)(v158 + 8) = (_BYTE)v156;
  uint64_t v159 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport,  &v262,  0LL,  0LL);
  uint64_t v160 = *v159;
  uint64_t v161 = v232;
  swift_beginAccess(v232, &v261, 1LL, 0LL);
  uint64_t v162 = *v161;
  *uint64_t v161 = v160;
  swift_bridgeObjectRetain(v160);
  swift_bridgeObjectRelease(v162);
  v163 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent,  &v260,  0LL,  0LL);
  LOBYTE(v163) = *v163;
  uint64_t v164 = v233;
  swift_beginAccess(v233, &v259, 1LL, 0LL);
  *uint64_t v164 = (_BYTE)v163;
  uint64_t v165 = a1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude,  &v258,  0LL,  0LL);
  uint64_t v166 = v241;
  sub_10000E6C0(v165, v241, &qword_100355558);
  uint64_t v167 = v234;
  swift_beginAccess(v234, v257, 33LL, 0LL);
  sub_10000E5D4(v166, v167, &qword_100355558);
  swift_endAccess(v257);
  uint64_t v168 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState,  v257,  0LL,  0LL);
  LOBYTE(v168) = *v168;
  uint64_t v169 = v235;
  swift_beginAccess(v235, &v256, 1LL, 0LL);
  *uint64_t v169 = (_BYTE)v168;
  uint64_t v170 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor,  &v255,  0LL,  0LL);
  uint64_t v171 = *v170;
  LOBYTE(v170) = *((_BYTE *)v170 + 8);
  uint64_t v172 = v236;
  swift_beginAccess(v236, &v254, 1LL, 0LL);
  *(void *)uint64_t v172 = v171;
  *(_BYTE *)(v172 + 8) = (_BYTE)v170;
  uint64_t v173 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor,  &v253,  0LL,  0LL);
  uint64_t v174 = *v173;
  LOBYTE(v173) = *((_BYTE *)v173 + 8);
  uint64_t v175 = v237;
  swift_beginAccess(v237, &v252, 1LL, 0LL);
  *(void *)uint64_t v175 = v174;
  *(_BYTE *)(v175 + 8) = (_BYTE)v173;
  v176 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType,  &v251,  0LL,  0LL);
  LOBYTE(v176) = *v176;
  v177 = v238;
  swift_beginAccess(v238, &v250, 1LL, 0LL);
  _BYTE *v177 = (_BYTE)v176;
  v178 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching,  &v249,  0LL,  0LL);
  LOBYTE(v178) = *v178;
  v179 = v239;
  swift_beginAccess(v239, &v248, 1LL, 0LL);
  _BYTE *v179 = (_BYTE)v178;
  v180 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy,  &v247,  0LL,  0LL);
  LOBYTE(v180) = *v180;
  v181 = v240;
  swift_beginAccess(v240, &v246, 1LL, 0LL);
  _BYTE *v181 = (_BYTE)v180;
  v182 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType,  &v245,  0LL,  0LL);
  LOBYTE(v182) = *v182;
  swift_beginAccess(v44, &v244, 1LL, 0LL);
  *uint64_t v44 = (_BYTE)v182;
  v183 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
  swift_beginAccess(v183, &v243, 0LL, 0LL);
  LOBYTE(v183) = *v183;
  swift_beginAccess(v45, &v242, 1LL, 0LL);
  *uint64_t v45 = (_BYTE)v183;
  return v1;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003965E0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t sub_10010E254(uint64_t a1)
{
  else {
    return 4LL;
  }
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003965F0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396600,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396610,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396620,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396630,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Location(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396640,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_Location);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396AA0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_Location._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396650,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_BatchedLocations);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396660,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396670,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_RhythmicStreamingControl);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396680,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MotionActivity);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396AB0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionState(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396690,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MotionState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003966A0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003966B0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MotionStateObserver);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003966C0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

unint64_t sub_10010E3A8(unint64_t result)
{
  if (result >= 0x43) {
    return 67LL;
  }
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003966D0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_WorkoutEvent);
}

unint64_t sub_10010E3CC(unint64_t result)
{
  if (result >= 0x13) {
    return 19LL;
  }
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003966E0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MotionStateMediator);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396AC0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003966F0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_BodyMetrics);
}

unint64_t sub_10010E418(unint64_t result)
{
  if (result >= 8) {
    return 8LL;
  }
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396700,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_Natalimetry);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Timer(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396710,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_Timer);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396720,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396730,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MapVector(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396740,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MapVector);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396AD0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MapVector._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396750,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396760,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396770,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass( uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396AE0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass);
}

uint64_t sub_10010E4F0(uint64_t a1)
{
  uint64_t v3 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = v1
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  uint64_t v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg;
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg;
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM;
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM;
  *(void *)uint64_t v11 = 0LL;
  *(_BYTE *)(v11 + 8) = 1;
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  uint64_t v60 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  *(void *)uint64_t v12 = 0LL;
  *(_BYTE *)(v12 + 8) = 1;
  uint64_t v13 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  *uint64_t v13 = 3;
  uint64_t v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg;
  char v61 = v13;
  uint64_t v62 = v14;
  *(void *)uint64_t v14 = 0LL;
  *(_BYTE *)(v14 + 8) = 1;
  uint64_t v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  uint64_t v63 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  *(void *)uint64_t v15 = 0LL;
  *(_BYTE *)(v15 + 8) = 1;
  uint64_t v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  uint64_t v64 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  *(void *)uint64_t v16 = 0LL;
  *(_BYTE *)(v16 + 8) = 1;
  uint64_t v17 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  *uint64_t v17 = 2;
  uint64_t v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg;
  uint64_t v65 = v17;
  uint64_t v66 = v18;
  *(void *)uint64_t v18 = 0LL;
  *(_BYTE *)(v18 + 8) = 1;
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  uint64_t v67 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  *(void *)uint64_t v19 = 0LL;
  *(_BYTE *)(v19 + 8) = 1;
  uint64_t v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  uint64_t v68 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  *(void *)uint64_t v20 = 0LL;
  *(_BYTE *)(v20 + 8) = 1;
  uint64_t v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  uint64_t v69 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  *(_BYTE *)(v21 + 8) = 1;
  *(void *)uint64_t v21 = 0LL;
  uint64_t v22 = a1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime,  v98,  0LL,  0LL);
  sub_10000E6C0(v22, (uint64_t)v5, &qword_100355538);
  swift_beginAccess(v6, v97, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v5, v6, &qword_100355538);
  swift_endAccess(v97);
  uint64_t v23 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg,  v97,  0LL,  0LL);
  uint64_t v24 = *v23;
  LOBYTE(v23) = *((_BYTE *)v23 + 8);
  swift_beginAccess(v8, v96, 1LL, 0LL);
  *(void *)uint64_t v8 = v24;
  *(_BYTE *)(v8 + 8) = (_BYTE)v23;
  uint64_t v25 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg,  v95,  0LL,  0LL);
  uint64_t v26 = *v25;
  LOBYTE(v25) = *((_BYTE *)v25 + 8);
  swift_beginAccess(v9, v94, 1LL, 0LL);
  *(void *)uint64_t v9 = v26;
  *(_BYTE *)(v9 + 8) = (_BYTE)v25;
  uint64_t v27 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM,  v93,  0LL,  0LL);
  uint64_t v28 = *v27;
  LOBYTE(v27) = *((_BYTE *)v27 + 8);
  swift_beginAccess(v10, v92, 1LL, 0LL);
  *(void *)uint64_t v10 = v28;
  *(_BYTE *)(v10 + 8) = (_BYTE)v27;
  uint64_t v29 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM,  &v91,  0LL,  0LL);
  uint64_t v30 = *v29;
  LOBYTE(v29) = *((_BYTE *)v29 + 8);
  swift_beginAccess(v11, &v90, 1LL, 0LL);
  *(void *)uint64_t v11 = v30;
  *(_BYTE *)(v11 + 8) = (_BYTE)v29;
  uint64_t v31 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM,  &v89,  0LL,  0LL);
  uint64_t v32 = *v31;
  LOBYTE(v31) = *((_BYTE *)v31 + 8);
  uint64_t v33 = v60;
  swift_beginAccess(v60, &v88, 1LL, 0LL);
  *(void *)uint64_t v33 = v32;
  *(_BYTE *)(v33 + 8) = (_BYTE)v31;
  uint64_t v34 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame,  &v87,  0LL,  0LL);
  LOBYTE(v34) = *v34;
  uint64_t v35 = v61;
  swift_beginAccess(v61, &v86, 1LL, 0LL);
  *uint64_t v35 = (_BYTE)v34;
  uint64_t v36 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg,  &v85,  0LL,  0LL);
  uint64_t v37 = *v36;
  LOBYTE(v36) = *((_BYTE *)v36 + 8);
  uint64_t v38 = v62;
  swift_beginAccess(v62, &v84, 1LL, 0LL);
  *(void *)uint64_t v38 = v37;
  *(_BYTE *)(v38 + 8) = (_BYTE)v36;
  uint64_t v39 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg,  &v83,  0LL,  0LL);
  uint64_t v40 = *v39;
  LOBYTE(v39) = *((_BYTE *)v39 + 8);
  uint64_t v41 = v63;
  swift_beginAccess(v63, &v82, 1LL, 0LL);
  *(void *)uint64_t v41 = v40;
  *(_BYTE *)(v41 + 8) = (_BYTE)v39;
  uint64_t v42 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM,  &v81,  0LL,  0LL);
  uint64_t v43 = *v42;
  LOBYTE(v42) = *((_BYTE *)v42 + 8);
  uint64_t v44 = v64;
  swift_beginAccess(v64, &v80, 1LL, 0LL);
  *(void *)uint64_t v44 = v43;
  *(_BYTE *)(v44 + 8) = (_BYTE)v42;
  uint64_t v45 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved,  &v79,  0LL,  0LL);
  LOBYTE(v45) = *v45;
  uint64_t v46 = v65;
  swift_beginAccess(v65, &v78, 1LL, 0LL);
  *uint64_t v46 = (_BYTE)v45;
  char v47 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg,  &v77,  0LL,  0LL);
  uint64_t v48 = *v47;
  LOBYTE(v47) = *((_BYTE *)v47 + 8);
  uint64_t v49 = v66;
  swift_beginAccess(v66, &v76, 1LL, 0LL);
  *(void *)uint64_t v49 = v48;
  *(_BYTE *)(v49 + 8) = (_BYTE)v47;
  uint64_t v50 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg,  &v75,  0LL,  0LL);
  uint64_t v51 = *v50;
  LOBYTE(v50) = *((_BYTE *)v50 + 8);
  uint64_t v52 = v67;
  swift_beginAccess(v67, &v74, 1LL, 0LL);
  *(void *)uint64_t v52 = v51;
  *(_BYTE *)(v52 + 8) = (_BYTE)v50;
  uint64_t v53 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM,  &v73,  0LL,  0LL);
  uint64_t v54 = *v53;
  LOBYTE(v53) = *((_BYTE *)v53 + 8);
  uint64_t v55 = v68;
  swift_beginAccess(v68, &v72, 1LL, 0LL);
  *(void *)uint64_t v55 = v54;
  *(_BYTE *)(v55 + 8) = (_BYTE)v53;
  int v56 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM);
  swift_beginAccess(v56, &v71, 0LL, 0LL);
  uint64_t v57 = *v56;
  LOBYTE(v56) = *((_BYTE *)v56 + 8);
  uint64_t v58 = v69;
  swift_beginAccess(v69, &v70, 1LL, 0LL);
  *(void *)uint64_t v58 = v57;
  *(_BYTE *)(v58 + 8) = (_BYTE)v56;
  return v1;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396780,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396790,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003967A0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MapMatchingRouteHint);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003967B0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003967C0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Battery(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003967D0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003967E0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_DeviceStatus);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396AF0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass);
}

uint64_t sub_10010EBB4(uint64_t a1)
{
  uint64_t v3 = sub_100003A0C(&qword_1003555E0);
  __chkstk_darwin(v3);
  uint64_t v51 = (uint64_t)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100003A0C(&qword_1003555D8);
  __chkstk_darwin(v5);
  uint64_t v47 = (uint64_t)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v10, 1LL, 1LL, v11);
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)uint64_t v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  uint64_t v13 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData) = 20;
  uint64_t v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v14, 1LL, 1LL, v15);
  uint64_t v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  uint64_t v44 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v16, 1LL, 1LL, v17);
  uint64_t v45 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode) = 2;
  uint64_t v46 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn) = 2;
  uint64_t v48 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen) = 2;
  uint64_t v49 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled) = 2;
  uint64_t v50 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected) = 2;
  uint64_t v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients;
  *(_DWORD *)uint64_t v18 = 0;
  *(_BYTE *)(v18 + 4) = 1;
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel;
  uint64_t v52 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel;
  *(_DWORD *)uint64_t v19 = 0;
  *(_BYTE *)(v19 + 4) = 1;
  uint64_t v53 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode) = 2;
  uint64_t v20 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  v76,  0LL,  0LL);
  sub_10000E6C0(v20, (uint64_t)v9, &qword_100355538);
  swift_beginAccess(v10, v75, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v9, v10, &qword_100355538);
  swift_endAccess(v75);
  uint64_t v21 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client,  v75,  0LL,  0LL);
  LODWORD(v9) = *(_DWORD *)v21;
  LOBYTE(v21) = *(_BYTE *)(v21 + 4);
  swift_beginAccess(v12, v74, 1LL, 0LL);
  *(_DWORD *)uint64_t v12 = (_DWORD)v9;
  *(_BYTE *)(v12 + 4) = v21;
  uint64_t v22 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData,  v73,  0LL,  0LL);
  LOBYTE(v22) = *v22;
  swift_beginAccess(v13, v72, 1LL, 0LL);
  *uint64_t v13 = (_BYTE)v22;
  uint64_t v23 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability,  v71,  0LL,  0LL);
  uint64_t v24 = v47;
  sub_10000E6C0(v23, v47, &qword_1003555D8);
  swift_beginAccess(v14, v70, 33LL, 0LL);
  sub_10000E5D4(v24, v14, &qword_1003555D8);
  swift_endAccess(v70);
  uint64_t v25 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery,  v70,  0LL,  0LL);
  uint64_t v26 = v51;
  sub_10000E6C0(v25, v51, &qword_1003555E0);
  uint64_t v27 = v44;
  swift_beginAccess(v44, v69, 33LL, 0LL);
  sub_10000E5D4(v26, v27, &qword_1003555E0);
  swift_endAccess(v69);
  uint64_t v28 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode,  v69,  0LL,  0LL);
  LOBYTE(v28) = *v28;
  uint64_t v29 = v45;
  swift_beginAccess(v45, &v68, 1LL, 0LL);
  _BYTE *v29 = (_BYTE)v28;
  uint64_t v30 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn,  &v67,  0LL,  0LL);
  LOBYTE(v30) = *v30;
  uint64_t v31 = v46;
  swift_beginAccess(v46, &v66, 1LL, 0LL);
  *uint64_t v31 = (_BYTE)v30;
  uint64_t v32 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen,  &v65,  0LL,  0LL);
  LOBYTE(v32) = *v32;
  uint64_t v33 = v48;
  swift_beginAccess(v48, &v64, 1LL, 0LL);
  *uint64_t v33 = (_BYTE)v32;
  uint64_t v34 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled,  &v63,  0LL,  0LL);
  LOBYTE(v34) = *v34;
  uint64_t v35 = v49;
  swift_beginAccess(v49, &v62, 1LL, 0LL);
  *uint64_t v35 = (_BYTE)v34;
  uint64_t v36 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected,  &v61,  0LL,  0LL);
  LOBYTE(v36) = *v36;
  uint64_t v37 = v50;
  swift_beginAccess(v50, &v60, 1LL, 0LL);
  *uint64_t v37 = (_BYTE)v36;
  uint64_t v38 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients,  &v59,  0LL,  0LL);
  LODWORD(v37) = *(_DWORD *)v38;
  LOBYTE(v38) = *(_BYTE *)(v38 + 4);
  swift_beginAccess(v18, &v58, 1LL, 0LL);
  *(_DWORD *)uint64_t v18 = (_DWORD)v37;
  *(_BYTE *)(v18 + 4) = v38;
  uint64_t v39 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel,  &v57,  0LL,  0LL);
  LODWORD(v37) = *(_DWORD *)v39;
  LOBYTE(v39) = *(_BYTE *)(v39 + 4);
  uint64_t v40 = v52;
  swift_beginAccess(v52, &v56, 1LL, 0LL);
  *(_DWORD *)uint64_t v40 = (_DWORD)v37;
  *(_BYTE *)(v40 + 4) = v39;
  uint64_t v41 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  swift_beginAccess(v41, &v55, 0LL, 0LL);
  LOBYTE(v41) = *v41;
  uint64_t v42 = v53;
  swift_beginAccess(v53, &v54, 1LL, 0LL);
  *uint64_t v42 = (_BYTE)v41;
  return v1;
}

unint64_t sub_10010F1DC(unint64_t result)
{
  if (result >= 0x14) {
    return 20LL;
  }
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003967F0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_SignalEnvironment);
}

uint64_t sub_10010F200(uint64_t a1)
{
  else {
    return 8LL;
  }
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396800,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MagSample(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396810,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396820,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_Magnetometer);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Reset(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396830,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_Reset);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396840,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396850,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396860,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_StepCountEntry);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396B00,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_StepCount(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396870,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_StepCount);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396880,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396890,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003968A0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396B10,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003968B0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Compass(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003968C0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_Compass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003968D0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396B20,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass);
}

uint64_t sub_10010F368(uint64_t a1)
{
  uint64_t v3 = sub_100003A0C(&qword_100355600);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100003A0C(&qword_100355608);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
  uint64_t v13 = *(void (**)(void))(*(void *)(v12 - 8) + 56LL);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v13)(v11, 1LL, 1LL, v12);
  uint64_t v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v13)( v1 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate,  1LL,  1LL,  v12);
  uint64_t v31 = v1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  v13();
  uint64_t v32 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel) = 8;
  uint64_t v33 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection) = 2;
  uint64_t v34 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation) = 2;
  uint64_t v35 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p) = 2;
  uint64_t v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  *(_DWORD *)uint64_t v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  uint64_t v16 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion,  v49,  0LL,  0LL);
  sub_10000E6C0(v16, (uint64_t)v8, &qword_100355608);
  swift_beginAccess(v9, v48, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v8, v9, &qword_100355608);
  swift_endAccess(v48);
  uint64_t v17 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration,  v48,  0LL,  0LL);
  sub_10000E6C0(v17, (uint64_t)v5, &qword_100355600);
  swift_beginAccess(v11, v47, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v5, v11, &qword_100355600);
  swift_endAccess(v47);
  uint64_t v18 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate,  v47,  0LL,  0LL);
  sub_10000E6C0(v18, (uint64_t)v5, &qword_100355600);
  swift_beginAccess(v14, v46, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v5, v14, &qword_100355600);
  swift_endAccess(v46);
  uint64_t v19 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField,  v46,  0LL,  0LL);
  sub_10000E6C0(v19, (uint64_t)v5, &qword_100355600);
  uint64_t v20 = v31;
  swift_beginAccess(v31, v45, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v5, v20, &qword_100355600);
  swift_endAccess(v45);
  uint64_t v21 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel,  v45,  0LL,  0LL);
  LOBYTE(v21) = *v21;
  uint64_t v22 = v32;
  swift_beginAccess(v32, &v44, 1LL, 0LL);
  _BYTE *v22 = (_BYTE)v21;
  uint64_t v23 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection,  &v43,  0LL,  0LL);
  LOBYTE(v23) = *v23;
  uint64_t v24 = v33;
  swift_beginAccess(v33, &v42, 1LL, 0LL);
  _BYTE *v24 = (_BYTE)v23;
  uint64_t v25 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation,  &v41,  0LL,  0LL);
  LOBYTE(v25) = *v25;
  uint64_t v26 = v34;
  swift_beginAccess(v34, &v40, 1LL, 0LL);
  _BYTE *v26 = (_BYTE)v25;
  uint64_t v27 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p,  &v39,  0LL,  0LL);
  LOBYTE(v27) = *v27;
  uint64_t v28 = v35;
  swift_beginAccess(v35, &v38, 1LL, 0LL);
  _BYTE *v28 = (_BYTE)v27;
  uint64_t v29 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  swift_beginAccess(v29, &v37, 0LL, 0LL);
  LODWORD(v27) = *(_DWORD *)v29;
  LOBYTE(v29) = *(_BYTE *)(v29 + 4);
  swift_beginAccess(v15, &v36, 1LL, 0LL);
  *(_DWORD *)uint64_t v15 = (_DWORD)v27;
  *(_BYTE *)(v15 + 4) = v29;
  return v1;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003968E0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003968F0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396900,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_DeviceMotion);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396910,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396920,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GeomagneticModelData);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396930,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396940,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396950,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_WifiScanResult);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396960,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_WifiNotification);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396B30,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass);
}

uint64_t sub_10010F8CC(uint64_t a1)
{
  uint64_t v3 = sub_100003A0C(&qword_100355640);
  __chkstk_darwin(v3);
  uint64_t v49 = (uint64_t)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100003A0C(&qword_100355638);
  __chkstk_darwin(v5);
  uint64_t v46 = (uint64_t)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v10, 1LL, 1LL, v11);
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)uint64_t v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  uint64_t v13 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type) = 15;
  uint64_t v14 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType) = 15;
  uint64_t v41 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power) = 2;
  uint64_t v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  uint64_t v42 = v1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v15, 1LL, 1LL, v16);
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  uint64_t v43 = v1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  uint64_t v18 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v17, 1LL, 1LL, v18);
  uint64_t v44 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated) = 2;
  uint64_t v45 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available) = 2;
  uint64_t v47 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown) = 2;
  uint64_t v48 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake) = 2;
  uint64_t v19 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime,  v68,  0LL,  0LL);
  sub_10000E6C0(v19, (uint64_t)v9, &qword_100355538);
  swift_beginAccess(v10, v67, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v9, v10, &qword_100355538);
  swift_endAccess(v67);
  uint64_t v20 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client,  v67,  0LL,  0LL);
  LODWORD(v19) = *(_DWORD *)v20;
  LOBYTE(v20) = *(_BYTE *)(v20 + 4);
  swift_beginAccess(v12, v66, 1LL, 0LL);
  *(_DWORD *)uint64_t v12 = v19;
  *(_BYTE *)(v12 + 4) = v20;
  uint64_t v21 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type,  v65,  0LL,  0LL);
  LOBYTE(v21) = *v21;
  swift_beginAccess(v13, v64, 1LL, 0LL);
  *uint64_t v13 = (_BYTE)v21;
  uint64_t v22 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType,  v63,  0LL,  0LL);
  LOBYTE(v22) = *v22;
  swift_beginAccess(v14, v62, 1LL, 0LL);
  *uint64_t v14 = (_BYTE)v22;
  uint64_t v23 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power,  &v61,  0LL,  0LL);
  LOBYTE(v23) = *v23;
  uint64_t v24 = v41;
  swift_beginAccess(v41, &v60, 1LL, 0LL);
  _BYTE *v24 = (_BYTE)v23;
  uint64_t v25 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState,  &v59,  0LL,  0LL);
  uint64_t v26 = v46;
  sub_10000E6C0(v25, v46, &qword_100355638);
  uint64_t v27 = v42;
  swift_beginAccess(v42, v58, 33LL, 0LL);
  sub_10000E5D4(v26, v27, &qword_100355638);
  swift_endAccess(v58);
  uint64_t v28 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan,  v58,  0LL,  0LL);
  uint64_t v29 = v49;
  sub_10000E6C0(v28, v49, &qword_100355640);
  uint64_t v30 = v43;
  swift_beginAccess(v43, v57, 33LL, 0LL);
  sub_10000E5D4(v29, v30, &qword_100355640);
  swift_endAccess(v57);
  uint64_t v31 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated,  v57,  0LL,  0LL);
  LOBYTE(v31) = *v31;
  uint64_t v32 = v44;
  swift_beginAccess(v44, &v56, 1LL, 0LL);
  *uint64_t v32 = (_BYTE)v31;
  uint64_t v33 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available,  &v55,  0LL,  0LL);
  LOBYTE(v33) = *v33;
  uint64_t v34 = v45;
  swift_beginAccess(v45, &v54, 1LL, 0LL);
  *uint64_t v34 = (_BYTE)v33;
  uint64_t v35 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown,  &v53,  0LL,  0LL);
  LOBYTE(v35) = *v35;
  uint64_t v36 = v47;
  swift_beginAccess(v47, &v52, 1LL, 0LL);
  *uint64_t v36 = (_BYTE)v35;
  uint64_t v37 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  swift_beginAccess(v37, &v51, 0LL, 0LL);
  LOBYTE(v37) = *v37;
  uint64_t v38 = v48;
  swift_beginAccess(v48, &v50, 1LL, 0LL);
  *uint64_t v38 = (_BYTE)v37;
  return v1;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396970,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396980,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396990,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003969A0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003969B0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GEOMapBuildingData);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003969C0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox( uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003969D0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003969E0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures( uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_1003969F0,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396A00,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396A10,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WristState(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396A20,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WatchState(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396A30,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_WatchState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396A40,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_PlaceInference);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396A50,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_RoutineVisit);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396B40,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass);
}

uint64_t sub_10010FF78(uint64_t a1)
{
  uint64_t v3 = sub_100003A0C(&qword_100355540);
  __chkstk_darwin(v3);
  uint64_t v38 = (uint64_t)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100003A0C(&qword_100355670);
  __chkstk_darwin(v5);
  uint64_t v37 = (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100003A0C(&qword_100355538);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL);
  v12(v10, 1LL, 1LL, v11);
  uint64_t v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  v12( v1 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime,  1LL,  1LL,  v11);
  uint64_t v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  v12( v1 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime,  1LL,  1LL,  v11);
  uint64_t v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  v12( v1 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime,  1LL,  1LL,  v11);
  uint64_t v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  uint64_t v35 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v16, 1LL, 1LL, v17);
  uint64_t v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  uint64_t v36 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  uint64_t v19 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v18, 1LL, 1LL, v19);
  uint64_t v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM;
  *(void *)uint64_t v20 = 0LL;
  *(_BYTE *)(v20 + 8) = 1;
  uint64_t v21 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime,  v46,  0LL,  0LL);
  sub_10000E6C0(v21, (uint64_t)v9, &qword_100355538);
  swift_beginAccess(v10, v45, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v9, v10, &qword_100355538);
  swift_endAccess(v45);
  uint64_t v22 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime,  v45,  0LL,  0LL);
  sub_10000E6C0(v22, (uint64_t)v9, &qword_100355538);
  swift_beginAccess(v13, v44, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v9, v13, &qword_100355538);
  swift_endAccess(v44);
  uint64_t v23 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime,  v44,  0LL,  0LL);
  sub_10000E6C0(v23, (uint64_t)v9, &qword_100355538);
  swift_beginAccess(v14, v43, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v9, v14, &qword_100355538);
  swift_endAccess(v43);
  uint64_t v24 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime,  v43,  0LL,  0LL);
  sub_10000E6C0(v24, (uint64_t)v9, &qword_100355538);
  swift_beginAccess(v15, v42, 33LL, 0LL);
  sub_10000E5D4((uint64_t)v9, v15, &qword_100355538);
  swift_endAccess(v42);
  uint64_t v25 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference,  v42,  0LL,  0LL);
  uint64_t v26 = v37;
  sub_10000E6C0(v25, v37, &qword_100355670);
  uint64_t v27 = v35;
  swift_beginAccess(v35, v41, 33LL, 0LL);
  sub_10000E5D4(v26, v27, &qword_100355670);
  swift_endAccess(v41);
  uint64_t v28 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate,  v41,  0LL,  0LL);
  uint64_t v29 = v38;
  sub_10000E6C0(v28, v38, &qword_100355540);
  uint64_t v30 = v36;
  swift_beginAccess(v36, v40, 33LL, 0LL);
  sub_10000E5D4(v29, v30, &qword_100355540);
  swift_endAccess(v40);
  uint64_t v31 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM);
  swift_beginAccess(v31, v40, 0LL, 0LL);
  uint64_t v32 = *v31;
  LOBYTE(v31) = *((_BYTE *)v31 + 8);
  swift_beginAccess(v20, v39, 1LL, 0LL);
  *(void *)uint64_t v20 = v32;
  *(_BYTE *)(v20 + 8) = (_BYTE)v31;
  return v1;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396A60,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(uint64_t a1)
{
  return sub_10000E68C( a1,  (uint64_t *)&unk_100396A70,  (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass()
{
  return objc_opt_self(&OBJC_CLASS____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_InertialOdometrySampleP33_993346AF53650622B255AB1E3C41340D13_StorageClass);
}

uint64_t sub_10011047C(uint64_t a1)
{
  uint64_t v2 = a1;
  *(void *)(v1 + 16) = 0LL;
  *(_BYTE *)(v1 + 24) = 1;
  *(void *)(v1 + 32) = 0LL;
  *(_BYTE *)(v1 + 40) = 1;
  *(_DWORD *)(v1 + 44) = 0;
  *(_DWORD *)(v1 + 52) = 0;
  *(_BYTE *)(v1 + 48) = 1;
  *(_BYTE *)(v1 + 56) = 1;
  *(_DWORD *)(v1 + 60) = 0;
  *(_BYTE *)(v1 + 64) = 1;
  *(_DWORD *)(v1 + 68) = 0;
  *(_DWORD *)(v1 + 76) = 0;
  *(_BYTE *)(v1 + 72) = 1;
  *(_BYTE *)(v1 + 80) = 1;
  *(_DWORD *)(v1 + 84) = 0;
  *(_BYTE *)(v1 + 88) = 1;
  *(_DWORD *)(v1 + 92) = 0;
  *(_DWORD *)(v1 + 100) = 0;
  *(_BYTE *)(v1 + 96) = 1;
  *(_BYTE *)(v1 + 104) = 1;
  *(_DWORD *)(v1 + 108) = 0;
  *(_BYTE *)(v1 + 112) = 1;
  *(_DWORD *)(v1 + 116) = 0;
  *(_BYTE *)(v1 + 120) = 1;
  *(_BYTE *)(v1 + 128) = 1;
  *(_DWORD *)(v1 + 129) = 33686019;
  *(_DWORD *)(v1 + 124) = 0;
  swift_beginAccess(a1 + 16, v40, 0LL, 0LL);
  uint64_t v3 = *(void *)(v2 + 16);
  char v4 = *(_BYTE *)(v2 + 24);
  swift_beginAccess(v1 + 16, v39, 1LL, 0LL);
  *(void *)(v1 + 16) = v3;
  *(_BYTE *)(v1 + 24) = v4;
  swift_beginAccess(v2 + 32, v38, 0LL, 0LL);
  uint64_t v5 = *(void *)(v2 + 32);
  LOBYTE(v3) = *(_BYTE *)(v2 + 40);
  swift_beginAccess(v1 + 32, v37, 1LL, 0LL);
  *(void *)(v1 + 32) = v5;
  *(_BYTE *)(v1 + 40) = v3;
  swift_beginAccess(v2 + 44, v36, 0LL, 0LL);
  LODWORD(v5) = *(_DWORD *)(v2 + 44);
  LOBYTE(v3) = *(_BYTE *)(v2 + 48);
  swift_beginAccess(v1 + 44, v35, 1LL, 0LL);
  *(_DWORD *)(v1 + 44) = v5;
  *(_BYTE *)(v1 + 48) = v3;
  swift_beginAccess(v2 + 52, v34, 0LL, 0LL);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  LOBYTE(v3) = *(_BYTE *)(v2 + 56);
  swift_beginAccess(v1 + 52, v33, 1LL, 0LL);
  *(_DWORD *)(v1 + 52) = v5;
  *(_BYTE *)(v1 + 56) = v3;
  swift_beginAccess(v2 + 60, v32, 0LL, 0LL);
  LODWORD(v5) = *(_DWORD *)(v2 + 60);
  LOBYTE(v3) = *(_BYTE *)(v2 + 64);
  swift_beginAccess(v1 + 60, v31, 1LL, 0LL);
  *(_DWORD *)(v1 + 60) = v5;
  *(_BYTE *)(v1 + 64) = v3;
  swift_beginAccess(v2 + 68, v30, 0LL, 0LL);
  LODWORD(v5) = *(_DWORD *)(v2 + 68);
  LOBYTE(v3) = *(_BYTE *)(v2 + 72);
  swift_beginAccess(v1 + 68, v29, 1LL, 0LL);
  *(_DWORD *)(v1 + 68) = v5;
  *(_BYTE *)(v1 + 72) = v3;
  swift_beginAccess(v2 + 76, v28, 0LL, 0LL);
  LODWORD(v5) = *(_DWORD *)(v2 + 76);
  LOBYTE(v3) = *(_BYTE *)(v2 + 80);
  swift_beginAccess(v1 + 76, v27, 1LL, 0LL);
  *(_DWORD *)(v1 + 76) = v5;
  *(_BYTE *)(v1 + 80) = v3;
  swift_beginAccess(v2 + 84, v26, 0LL, 0LL);
  LODWORD(v5) = *(_DWORD *)(v2 + 84);
  LOBYTE(v3) = *(_BYTE *)(v2 + 88);
  swift_beginAccess(v1 + 84, v25, 1LL, 0LL);
  *(_DWORD *)(v1 + 84) = v5;
  *(_BYTE *)(v1 + 88) = v3;
  swift_beginAccess(v2 + 92, v24, 0LL, 0LL);
  LODWORD(v5) = *(_DWORD *)(v2 + 92);
  LOBYTE(v3) = *(_BYTE *)(v2 + 96);
  swift_beginAccess(v1 + 92, v23, 1LL, 0LL);
  *(_DWORD *)(v1 + 92) = v5;
  *(_BYTE *)(v1 + 96) = v3;
  swift_beginAccess(v2 + 100, v22, 0LL, 0LL);
  LODWORD(v5) = *(_DWORD *)(v2 + 100);
  LOBYTE(v3) = *(_BYTE *)(v2 + 104);
  swift_beginAccess(v1 + 100, v21, 1LL, 0LL);
  *(_DWORD *)(v1 + 100) = v5;
  *(_BYTE *)(v1 + 104) = v3;
  swift_beginAccess(v2 + 108, v20, 0LL, 0LL);
  LODWORD(v5) = *(_DWORD *)(v2 + 108);
  LOBYTE(v3) = *(_BYTE *)(v2 + 112);
  swift_beginAccess(v1 + 108, v19, 1LL, 0LL);
  *(_DWORD *)(v1 + 108) = v5;
  *(_BYTE *)(v1 + 112) = v3;
  swift_beginAccess(v2 + 116, v18, 0LL, 0LL);
  LODWORD(v5) = *(_DWORD *)(v2 + 116);
  LOBYTE(v3) = *(_BYTE *)(v2 + 120);
  swift_beginAccess(v1 + 116, v17, 1LL, 0LL);
  *(_DWORD *)(v1 + 116) = v5;
  *(_BYTE *)(v1 + 120) = v3;
  swift_beginAccess(v2 + 124, v16, 0LL, 0LL);
  LODWORD(v5) = *(_DWORD *)(v2 + 124);
  LOBYTE(v3) = *(_BYTE *)(v2 + 128);
  swift_beginAccess(v1 + 124, v15, 1LL, 0LL);
  *(_DWORD *)(v1 + 124) = v5;
  *(_BYTE *)(v1 + 128) = v3;
  swift_beginAccess(v2 + 129, v14, 0LL, 0LL);
  LOBYTE(v5) = *(_BYTE *)(v2 + 129);
  swift_beginAccess(v1 + 129, v13, 1LL, 0LL);
  *(_BYTE *)(v1 + 129) = v5;
  swift_beginAccess(v2 + 130, v12, 0LL, 0LL);
  LOBYTE(v5) = *(_BYTE *)(v2 + 130);
  swift_beginAccess(v1 + 130, v11, 1LL, 0LL);
  *(_BYTE *)(v1 + 130) = v5;
  swift_beginAccess(v2 + 131, v10, 0LL, 0LL);
  LOBYTE(v5) = *(_BYTE *)(v2 + 131);
  swift_beginAccess(v1 + 131, v9, 1LL, 0LL);
  *(_BYTE *)(v1 + 131) = v5;
  swift_beginAccess(v2 + 132, v8, 0LL, 0LL);
  LOBYTE(v2) = *(_BYTE *)(v2 + 132);
  swift_beginAccess(v1 + 132, v7, 1LL, 0LL);
  *(_BYTE *)(v1 + 132) = v2;
  return v1;
}

uint64_t sub_100110960(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v38 - v9;
  if ((sub_10010A9B4(*a1, *a2) & 1) == 0) {
    goto LABEL_24;
  }
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0LL);
  uint64_t v12 = v11;
  uint64_t v13 = v11[6];
  int v14 = *((unsigned __int8 *)a1 + v13);
  int v15 = *((unsigned __int8 *)a2 + v13);
  if (v14 == 4)
  {
    if (v15 != 4) {
      goto LABEL_24;
    }
  }

  else if (v15 == 4 || v14 != v15)
  {
    goto LABEL_24;
  }

  uint64_t v17 = v11[7];
  uint64_t v18 = (_DWORD *)((char *)a1 + v17);
  char v19 = *((_BYTE *)a1 + v17 + 4);
  uint64_t v20 = (_DWORD *)((char *)a2 + v17);
  int v21 = *((unsigned __int8 *)a2 + v17 + 4);
  if ((v19 & 1) != 0)
  {
    if (!v21) {
      goto LABEL_24;
    }
  }

  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if ((v21 & 1) != 0) {
      goto LABEL_24;
    }
  }

  uint64_t v22 = v11[8];
  uint64_t v23 = (_DWORD *)((char *)a1 + v22);
  char v24 = *((_BYTE *)a1 + v22 + 4);
  uint64_t v25 = (_DWORD *)((char *)a2 + v22);
  int v26 = *((unsigned __int8 *)a2 + v22 + 4);
  if ((v24 & 1) == 0)
  {
    if (*v23 != *v25) {
      LOBYTE(v26) = 1;
    }
    if ((v26 & 1) != 0) {
      goto LABEL_24;
    }
LABEL_22:
    uint64_t v27 = v11[9];
    uint64_t v28 = (_DWORD *)((char *)a1 + v27);
    char v29 = *((_BYTE *)a1 + v27 + 4);
    uint64_t v30 = (_DWORD *)((char *)a2 + v27);
    int v31 = *((unsigned __int8 *)a2 + v27 + 4);
    if ((v29 & 1) != 0)
    {
      if (!v31) {
        goto LABEL_24;
      }
    }

    else
    {
      if (*v28 != *v30) {
        LOBYTE(v31) = 1;
      }
      if ((v31 & 1) != 0) {
        goto LABEL_24;
      }
    }

    uint64_t v34 = (char *)a1 + v11[5];
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v35(v10, v34, v4);
    v35(v8, (char *)a2 + v12[5], v4);
    uint64_t v36 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v32 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v36);
    uint64_t v37 = *(void (**)(char *, uint64_t))(v5 + 8);
    v37(v8, v4);
    v37(v10, v4);
    return v32 & 1;
  }

  if (v26) {
    goto LABEL_22;
  }
LABEL_24:
  char v32 = 0;
  return v32 & 1;
}

uint64_t sub_100110B58(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v84 = *(void *)(v4 - 8);
  uint64_t v85 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v83 = &v80[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v5);
  uint64_t v82 = &v80[-v7];
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v87 = &v80[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = sub_100003A0C(&qword_10035C418);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v89 = &v80[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v12);
  int v15 = &v80[-v14];
  uint64_t v16 = sub_100003A0C(&qword_100355538);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v86 = &v80[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v92 = &v80[-v20];
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v88 = &v80[-v22];
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = &v80[-v24];
  uint64_t v26 = __chkstk_darwin(v23);
  uint64_t v28 = &v80[-v27];
  __chkstk_darwin(v26);
  uint64_t v30 = &v80[-v29];
  uint64_t v31 = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0LL);
  uint64_t v32 = *(int *)(v31 + 28);
  uint64_t v90 = a1;
  uint64_t v33 = (uint64_t)a1 + v32;
  uint64_t v34 = (int *)v31;
  sub_10000E6C0(v33, (uint64_t)v30, &qword_100355538);
  uint64_t v35 = v34[7];
  uint64_t v91 = a2;
  sub_10000E6C0((uint64_t)a2 + v35, (uint64_t)v28, &qword_100355538);
  uint64_t v36 = (uint64_t)&v15[*(int *)(v11 + 48)];
  sub_10000E6C0((uint64_t)v30, (uint64_t)v15, &qword_100355538);
  sub_10000E6C0((uint64_t)v28, v36, &qword_100355538);
  uint64_t v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v37((uint64_t)v15, 1LL, v8) == 1)
  {
    sub_100015764((uint64_t)v28, &qword_100355538);
    sub_100015764((uint64_t)v30, &qword_100355538);
    if (v37(v36, 1LL, v8) == 1)
    {
      sub_100015764((uint64_t)v15, &qword_100355538);
      goto LABEL_8;
    }

uint64_t sub_100111298(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v23 - v9;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0LL);
  uint64_t v12 = *(int *)(v11 + 20);
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 2)
  {
    if (v14 != 2) {
      goto LABEL_12;
    }
  }

  else if (v14 == 2 || ((((v14 & 1) == 0) ^ v13) & 1) == 0)
  {
    goto LABEL_12;
  }

  uint64_t v15 = *(int *)(v11 + 24);
  int v16 = *(unsigned __int8 *)(a1 + v15);
  int v17 = *(unsigned __int8 *)(a2 + v15);
  if (v16 == 2)
  {
    if (v17 != 2)
    {
LABEL_12:
      char v20 = 0;
      return v20 & 1;
    }
  }

  else if (v17 == 2 || ((((v17 & 1) == 0) ^ v16) & 1) == 0)
  {
    goto LABEL_12;
  }

  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v18(v10, a1, v4);
  v18(v8, a2, v4);
  uint64_t v19 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v20 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v19);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v5 + 8);
  v21(v8, v4);
  v21(v10, v4);
  return v20 & 1;
}

uint64_t sub_100111420(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v56 = *(void *)(v4 - 8);
  uint64_t v57 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v55 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  char v54 = (char *)&v53 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v58 = (uint64_t)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100003A0C(&qword_10035C418);
  __chkstk_darwin(v11);
  int v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100003A0C(&qword_100355538);
  uint64_t v15 = __chkstk_darwin(v14);
  int v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  char v20 = (char *)&v53 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v53 - v21;
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0LL);
  uint64_t v24 = *(int *)(v23 + 20);
  uint64_t v59 = a1;
  uint64_t v25 = a1 + v24;
  uint64_t v26 = (int *)v23;
  sub_10000E6C0(v25, (uint64_t)v22, &qword_100355538);
  uint64_t v27 = v26[5];
  uint64_t v60 = a2;
  sub_10000E6C0(a2 + v27, (uint64_t)v20, &qword_100355538);
  uint64_t v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E6C0((uint64_t)v22, (uint64_t)v13, &qword_100355538);
  sub_10000E6C0((uint64_t)v20, v28, &qword_100355538);
  uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1LL, v8) == 1)
  {
    sub_100015764((uint64_t)v20, &qword_100355538);
    sub_100015764((uint64_t)v22, &qword_100355538);
    if (v29(v28, 1LL, v8) == 1)
    {
      sub_100015764((uint64_t)v13, &qword_100355538);
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  sub_10000E6C0((uint64_t)v13, (uint64_t)v17, &qword_100355538);
  if (v29(v28, 1LL, v8) == 1)
  {
    sub_100015764((uint64_t)v20, &qword_100355538);
    sub_100015764((uint64_t)v22, &qword_100355538);
    sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    sub_100015764((uint64_t)v13, &qword_10035C418);
LABEL_21:
    char v36 = 0;
    return v36 & 1;
  }

  uint64_t v30 = v58;
  sub_100003E68(v28, v58, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v31 = sub_100065750((uint64_t)v17, v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090(v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v20, &qword_100355538);
  sub_100015764((uint64_t)v22, &qword_100355538);
  sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v13, &qword_100355538);
  if ((v31 & 1) == 0) {
    goto LABEL_21;
  }
LABEL_8:
  uint64_t v32 = v26[6];
  uint64_t v33 = v60;
  int v34 = *(unsigned __int8 *)(v59 + v32);
  int v35 = *(unsigned __int8 *)(v60 + v32);
  if (v34 == 4)
  {
    if (v35 != 4) {
      goto LABEL_21;
    }
  }

  else
  {
    char v36 = 0;
    if (v35 == 4 || v34 != v35) {
      return v36 & 1;
    }
  }

  uint64_t v37 = v26[7];
  uint64_t v38 = (double *)(v59 + v37);
  char v39 = *(_BYTE *)(v59 + v37 + 8);
  uint64_t v40 = (double *)(v60 + v37);
  int v41 = *(unsigned __int8 *)(v60 + v37 + 8);
  if ((v39 & 1) != 0)
  {
    if (!v41) {
      goto LABEL_21;
    }
  }

  else
  {
    if (*v38 != *v40) {
      LOBYTE(v41) = 1;
    }
    if ((v41 & 1) != 0) {
      goto LABEL_21;
    }
  }

  uint64_t v42 = v26[8];
  int v43 = *(unsigned __int8 *)(v59 + v42);
  int v44 = *(unsigned __int8 *)(v60 + v42);
  if (v43 == 4)
  {
    if (v44 != 4) {
      goto LABEL_21;
    }
LABEL_25:
    uint64_t v47 = v56;
    uint64_t v46 = v57;
    char v48 = *(void (**)(char *))(v56 + 16);
    uint64_t v49 = v54;
    v48(v54);
    uint64_t v50 = v55;
    ((void (*)(char *, uint64_t, uint64_t))v48)(v55, v33, v46);
    uint64_t v51 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v36 = dispatch thunk of static Equatable.== infix(_:_:)(v49, v50, v46, v51);
    uint64_t v52 = *(void (**)(char *, uint64_t))(v47 + 8);
    v52(v50, v46);
    v52(v49, v46);
    return v36 & 1;
  }

  char v36 = 0;
  if (v44 != 4 && v43 == v44) {
    goto LABEL_25;
  }
  return v36 & 1;
}

uint64_t sub_100111888(uint64_t a1, uint64_t a2)
{
  uint64_t v73 = a1;
  uint64_t v74 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v64 = *(void *)(v2 - 8);
  uint64_t v65 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  char v63 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v62 = (char *)&v61 - v5;
  uint64_t v71 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL);
  uint64_t v68 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v61 = (uint64_t)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v67 = sub_100003A0C(&qword_10035C4C0);
  __chkstk_darwin(v67);
  uint64_t v72 = (uint64_t)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100003A0C(&qword_1003555C8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v66 = (uint64_t)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v69 = (uint64_t)&v61 - v12;
  __chkstk_darwin(v11);
  uint64_t v70 = (uint64_t)&v61 - v13;
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  int v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100003A0C(&qword_10035C418);
  __chkstk_darwin(v18);
  char v20 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100003A0C(&qword_100355538);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v61 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v61 - v28;
  uint64_t v30 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0LL);
  sub_10000E6C0(v73 + v30[5], (uint64_t)v29, &qword_100355538);
  sub_10000E6C0(v74 + v30[5], (uint64_t)v27, &qword_100355538);
  uint64_t v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  sub_10000E6C0((uint64_t)v29, (uint64_t)v20, &qword_100355538);
  sub_10000E6C0((uint64_t)v27, v31, &qword_100355538);
  uint64_t v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1LL, v14) == 1)
  {
    sub_100015764((uint64_t)v27, &qword_100355538);
    sub_100015764((uint64_t)v29, &qword_100355538);
    if (v32(v31, 1LL, v14) == 1)
    {
      sub_100015764((uint64_t)v20, &qword_100355538);
      goto LABEL_11;
    }

uint64_t sub_100111F34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0LL) + 20);
  int v12 = *(unsigned __int8 *)(a1 + v11);
  int v13 = *(unsigned __int8 *)(a2 + v11);
  if (v12 == 2)
  {
    if (v13 != 2)
    {
LABEL_7:
      char v16 = 0;
      return v16 & 1;
    }
  }

  else if (v13 == 2 || ((((v13 & 1) == 0) ^ v12) & 1) == 0)
  {
    goto LABEL_7;
  }

  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v14(v10, a1, v4);
  v14(v8, a2, v4);
  uint64_t v15 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v16 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v15);
  int v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  v17(v8, v4);
  v17(v10, v4);
  return v16 & 1;
}

uint64_t sub_100112084(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v36 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0LL);
  uint64_t v12 = v11[5];
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 3)
  {
    if (v14 != 3) {
      goto LABEL_34;
    }
  }

  else if (v14 == 3 || v13 != v14)
  {
    goto LABEL_34;
  }

  uint64_t v16 = v11[6];
  int v17 = *(unsigned __int8 *)(a1 + v16);
  int v18 = *(unsigned __int8 *)(a2 + v16);
  if (v17 == 2)
  {
    if (v18 != 2) {
      goto LABEL_34;
    }
  }

  else if (v18 == 2 || ((((v18 & 1) == 0) ^ v17) & 1) == 0)
  {
    goto LABEL_34;
  }

  uint64_t v19 = v11[7];
  int v20 = *(unsigned __int8 *)(a1 + v19);
  int v21 = *(unsigned __int8 *)(a2 + v19);
  if (v20 == 5)
  {
    if (v21 != 5) {
      goto LABEL_34;
    }
  }

  else if (v21 == 5 || v20 != v21)
  {
    goto LABEL_34;
  }

  uint64_t v23 = v11[8];
  uint64_t v24 = (_DWORD *)(a1 + v23);
  char v25 = *(_BYTE *)(a1 + v23 + 4);
  uint64_t v26 = (_DWORD *)(a2 + v23);
  int v27 = *(unsigned __int8 *)(a2 + v23 + 4);
  if ((v25 & 1) != 0)
  {
    if (!v27) {
      goto LABEL_34;
    }
  }

  else
  {
    if (*v24 != *v26) {
      LOBYTE(v27) = 1;
    }
    if ((v27 & 1) != 0) {
      goto LABEL_34;
    }
  }

  uint64_t v28 = v11[9];
  int v29 = *(unsigned __int8 *)(a1 + v28);
  int v30 = *(unsigned __int8 *)(a2 + v28);
  if (v29 == 2)
  {
    if (v30 == 2) {
      goto LABEL_33;
    }
LABEL_34:
    char v33 = 0;
    return v33 & 1;
  }

  if (v30 == 2 || ((((v30 & 1) == 0) ^ v29) & 1) == 0) {
    goto LABEL_34;
  }
LABEL_33:
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v31(v10, a1, v4);
  v31(v8, a2, v4);
  uint64_t v32 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v33 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v32);
  uint64_t v34 = *(void (**)(char *, uint64_t))(v5 + 8);
  v34(v8, v4);
  v34(v10, v4);
  return v33 & 1;
}

uint64_t sub_100112298(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v72 = *(void *)(v4 - 8);
  uint64_t v73 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v71 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v70 = (char *)&v69 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v74 = (uint64_t)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100003A0C(&qword_10035C418);
  __chkstk_darwin(v11);
  int v13 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100003A0C(&qword_100355538);
  uint64_t v15 = __chkstk_darwin(v14);
  int v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  int v20 = (char *)&v69 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v69 - v21;
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL);
  uint64_t v24 = *(int *)(v23 + 20);
  uint64_t v75 = a1;
  uint64_t v25 = a1 + v24;
  uint64_t v26 = (int *)v23;
  sub_10000E6C0(v25, (uint64_t)v22, &qword_100355538);
  uint64_t v27 = v26[5];
  uint64_t v76 = a2;
  sub_10000E6C0(a2 + v27, (uint64_t)v20, &qword_100355538);
  uint64_t v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E6C0((uint64_t)v22, (uint64_t)v13, &qword_100355538);
  sub_10000E6C0((uint64_t)v20, v28, &qword_100355538);
  int v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1LL, v8) != 1)
  {
    sub_10000E6C0((uint64_t)v13, (uint64_t)v17, &qword_100355538);
    if (v29(v28, 1LL, v8) != 1)
    {
      uint64_t v32 = v74;
      sub_100003E68(v28, v74, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      char v33 = sub_100065750((uint64_t)v17, v32, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100004090(v32, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100015764((uint64_t)v20, &qword_100355538);
      sub_100015764((uint64_t)v22, &qword_100355538);
      sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100015764((uint64_t)v13, &qword_100355538);
      if ((v33 & 1) == 0) {
        goto LABEL_7;
      }
      goto LABEL_10;
    }

    sub_100015764((uint64_t)v20, &qword_100355538);
    sub_100015764((uint64_t)v22, &qword_100355538);
    sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    sub_100015764((uint64_t)v13, &qword_10035C418);
    goto LABEL_7;
  }

  sub_100015764((uint64_t)v20, &qword_100355538);
  sub_100015764((uint64_t)v22, &qword_100355538);
  if (v29(v28, 1LL, v8) != 1) {
    goto LABEL_6;
  }
  sub_100015764((uint64_t)v13, &qword_100355538);
LABEL_10:
  uint64_t v34 = v26[6];
  uint64_t v35 = v76;
  uint64_t v36 = (double *)(v75 + v34);
  char v37 = *(_BYTE *)(v75 + v34 + 8);
  uint64_t v38 = (double *)(v76 + v34);
  int v39 = *(unsigned __int8 *)(v76 + v34 + 8);
  if ((v37 & 1) != 0)
  {
    if (!v39) {
      goto LABEL_7;
    }
  }

  else
  {
    if (*v36 != *v38) {
      LOBYTE(v39) = 1;
    }
    if ((v39 & 1) != 0) {
      goto LABEL_7;
    }
  }

  uint64_t v40 = v26[7];
  int v41 = (double *)(v75 + v40);
  char v42 = *(_BYTE *)(v75 + v40 + 8);
  int v43 = (double *)(v76 + v40);
  int v44 = *(unsigned __int8 *)(v76 + v40 + 8);
  if ((v42 & 1) != 0)
  {
    if (!v44) {
      goto LABEL_7;
    }
  }

  else
  {
    if (*v41 != *v43) {
      LOBYTE(v44) = 1;
    }
    if ((v44 & 1) != 0) {
      goto LABEL_7;
    }
  }

  uint64_t v45 = v26[8];
  uint64_t v46 = (double *)(v75 + v45);
  char v47 = *(_BYTE *)(v75 + v45 + 8);
  uint64_t v48 = (double *)(v76 + v45);
  int v49 = *(unsigned __int8 *)(v76 + v45 + 8);
  if ((v47 & 1) != 0)
  {
    if (!v49) {
      goto LABEL_7;
    }
  }

  else
  {
    if (*v46 != *v48) {
      LOBYTE(v49) = 1;
    }
    if ((v49 & 1) != 0) {
      goto LABEL_7;
    }
  }

  uint64_t v50 = v26[9];
  int v51 = *(unsigned __int8 *)(v75 + v50);
  int v52 = *(unsigned __int8 *)(v76 + v50);
  if (v51 == 2)
  {
    if (v52 != 2) {
      goto LABEL_7;
    }
  }

  else if (v52 == 2 || ((((v52 & 1) == 0) ^ v51) & 1) == 0)
  {
    goto LABEL_7;
  }

  uint64_t v53 = v26[10];
  int v54 = *(unsigned __int8 *)(v75 + v53);
  int v55 = *(unsigned __int8 *)(v76 + v53);
  if (v54 == 2)
  {
    if (v55 != 2) {
      goto LABEL_7;
    }
  }

  else if (v55 == 2 || ((((v55 & 1) == 0) ^ v54) & 1) == 0)
  {
    goto LABEL_7;
  }

  uint64_t v56 = v26[11];
  int v57 = *(unsigned __int8 *)(v75 + v56);
  int v58 = *(unsigned __int8 *)(v76 + v56);
  if (v57 == 2)
  {
    if (v58 != 2) {
      goto LABEL_7;
    }
  }

  else if (v58 == 2 || ((((v58 & 1) == 0) ^ v57) & 1) == 0)
  {
    goto LABEL_7;
  }

  uint64_t v59 = v26[12];
  int v60 = *(unsigned __int8 *)(v75 + v59);
  int v61 = *(unsigned __int8 *)(v76 + v59);
  if (v60 == 2)
  {
    if (v61 == 2)
    {
LABEL_48:
      uint64_t v63 = v72;
      uint64_t v62 = v73;
      uint64_t v64 = *(void (**)(char *))(v72 + 16);
      uint64_t v65 = v70;
      v64(v70);
      uint64_t v66 = v71;
      ((void (*)(char *, uint64_t, uint64_t))v64)(v71, v35, v62);
      uint64_t v67 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v30 = dispatch thunk of static Equatable.== infix(_:_:)(v65, v66, v62, v67);
      uint64_t v68 = *(void (**)(char *, uint64_t))(v63 + 8);
      v68(v66, v62);
      v68(v65, v62);
      return v30 & 1;
    }
  }

  else if (v61 != 2 && ((((v61 & 1) == 0) ^ v60) & 1) != 0)
  {
    goto LABEL_48;
  }

uint64_t sub_1001127E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v67 - v9;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0LL) + 20);
  uint64_t v12 = *(void *)(a1 + v11);
  uint64_t v13 = *(void *)(a2 + v11);
  if (v12 == v13) {
    goto LABEL_100;
  }
  uint64_t v67 = a2;
  swift_beginAccess(v12 + 16, v101, 0LL, 0LL);
  double v14 = *(double *)(v12 + 16);
  char v15 = *(_BYTE *)(v12 + 24);
  swift_beginAccess(v13 + 16, v100, 0LL, 0LL);
  char v16 = *(_BYTE *)(v13 + 24);
  if ((v15 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 24)) {
      goto LABEL_101;
    }
  }

  else
  {
    if ((v16 & 1) != 0) {
      goto LABEL_101;
    }
  }

  swift_beginAccess(v12 + 32, v99, 0LL, 0LL);
  double v17 = *(double *)(v12 + 32);
  char v18 = *(_BYTE *)(v12 + 40);
  swift_beginAccess(v13 + 32, v98, 0LL, 0LL);
  char v19 = *(_BYTE *)(v13 + 40);
  if ((v18 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 40)) {
      goto LABEL_101;
    }
  }

  else
  {
    if ((v19 & 1) != 0) {
      goto LABEL_101;
    }
  }

  swift_beginAccess(v12 + 44, v97, 0LL, 0LL);
  float v20 = *(float *)(v12 + 44);
  char v21 = *(_BYTE *)(v12 + 48);
  swift_beginAccess(v13 + 44, v96, 0LL, 0LL);
  char v22 = *(_BYTE *)(v13 + 48);
  if ((v21 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 48)) {
      goto LABEL_101;
    }
  }

  else
  {
    if ((v22 & 1) != 0) {
      goto LABEL_101;
    }
  }

  swift_beginAccess(v12 + 52, &v95, 0LL, 0LL);
  float v23 = *(float *)(v12 + 52);
  char v24 = *(_BYTE *)(v12 + 56);
  swift_beginAccess(v13 + 52, &v94, 0LL, 0LL);
  char v25 = *(_BYTE *)(v13 + 56);
  if ((v24 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 56)) {
      goto LABEL_101;
    }
  }

  else
  {
    if ((v25 & 1) != 0) {
      goto LABEL_101;
    }
  }

  swift_beginAccess(v12 + 60, &v93, 0LL, 0LL);
  float v26 = *(float *)(v12 + 60);
  char v27 = *(_BYTE *)(v12 + 64);
  swift_beginAccess(v13 + 60, &v92, 0LL, 0LL);
  char v28 = *(_BYTE *)(v13 + 64);
  if ((v27 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 64)) {
      goto LABEL_101;
    }
  }

  else
  {
    if ((v28 & 1) != 0) {
      goto LABEL_101;
    }
  }

  swift_beginAccess(v12 + 68, &v91, 0LL, 0LL);
  float v29 = *(float *)(v12 + 68);
  char v30 = *(_BYTE *)(v12 + 72);
  swift_beginAccess(v13 + 68, &v90, 0LL, 0LL);
  char v31 = *(_BYTE *)(v13 + 72);
  if ((v30 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 72)) {
      goto LABEL_101;
    }
  }

  else
  {
    if ((v31 & 1) != 0) {
      goto LABEL_101;
    }
  }

  swift_beginAccess(v12 + 76, &v89, 0LL, 0LL);
  float v32 = *(float *)(v12 + 76);
  char v33 = *(_BYTE *)(v12 + 80);
  swift_beginAccess(v13 + 76, &v88, 0LL, 0LL);
  char v34 = *(_BYTE *)(v13 + 80);
  if ((v33 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 80)) {
      goto LABEL_101;
    }
  }

  else
  {
    if ((v34 & 1) != 0) {
      goto LABEL_101;
    }
  }

  swift_beginAccess(v12 + 84, &v87, 0LL, 0LL);
  float v35 = *(float *)(v12 + 84);
  char v36 = *(_BYTE *)(v12 + 88);
  swift_beginAccess(v13 + 84, &v86, 0LL, 0LL);
  char v37 = *(_BYTE *)(v13 + 88);
  if ((v36 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 88)) {
      goto LABEL_101;
    }
  }

  else
  {
    if ((v37 & 1) != 0) {
      goto LABEL_101;
    }
  }

  swift_beginAccess(v12 + 92, &v85, 0LL, 0LL);
  float v38 = *(float *)(v12 + 92);
  char v39 = *(_BYTE *)(v12 + 96);
  swift_beginAccess(v13 + 92, &v84, 0LL, 0LL);
  char v40 = *(_BYTE *)(v13 + 96);
  if ((v39 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 96)) {
      goto LABEL_101;
    }
  }

  else
  {
    if ((v40 & 1) != 0) {
      goto LABEL_101;
    }
  }

  swift_beginAccess(v12 + 100, &v83, 0LL, 0LL);
  float v41 = *(float *)(v12 + 100);
  char v42 = *(_BYTE *)(v12 + 104);
  swift_beginAccess(v13 + 100, &v82, 0LL, 0LL);
  char v43 = *(_BYTE *)(v13 + 104);
  if ((v42 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 104)) {
      goto LABEL_101;
    }
  }

  else
  {
    if ((v43 & 1) != 0) {
      goto LABEL_101;
    }
  }

  swift_beginAccess(v12 + 108, &v81, 0LL, 0LL);
  float v44 = *(float *)(v12 + 108);
  char v45 = *(_BYTE *)(v12 + 112);
  swift_beginAccess(v13 + 108, &v80, 0LL, 0LL);
  char v46 = *(_BYTE *)(v13 + 112);
  if ((v45 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 112)) {
      goto LABEL_101;
    }
  }

  else
  {
    if ((v46 & 1) != 0) {
      goto LABEL_101;
    }
  }

  swift_beginAccess(v12 + 116, &v79, 0LL, 0LL);
  float v47 = *(float *)(v12 + 116);
  char v48 = *(_BYTE *)(v12 + 120);
  swift_beginAccess(v13 + 116, &v78, 0LL, 0LL);
  char v49 = *(_BYTE *)(v13 + 120);
  if ((v48 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 120)) {
      goto LABEL_101;
    }
  }

  else
  {
    if ((v49 & 1) != 0) {
      goto LABEL_101;
    }
  }

  swift_beginAccess(v12 + 124, &v77, 0LL, 0LL);
  float v50 = *(float *)(v12 + 124);
  char v51 = *(_BYTE *)(v12 + 128);
  swift_beginAccess(v13 + 124, &v76, 0LL, 0LL);
  char v52 = *(_BYTE *)(v13 + 128);
  if ((v51 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 128)) {
      goto LABEL_101;
    }
  }

  else
  {
    if ((v52 & 1) != 0) {
      goto LABEL_101;
    }
  }

  swift_beginAccess(v12 + 129, &v75, 0LL, 0LL);
  int v53 = *(unsigned __int8 *)(v12 + 129);
  swift_beginAccess(v13 + 129, &v74, 0LL, 0LL);
  int v54 = *(unsigned __int8 *)(v13 + 129);
  if (v53 == 3)
  {
    if (v54 != 3) {
      goto LABEL_101;
    }
    goto LABEL_85;
  }

  char v55 = 0;
  if (v54 != 3 && v53 == v54)
  {
LABEL_85:
    swift_beginAccess(v12 + 130, &v73, 0LL, 0LL);
    int v56 = *(unsigned __int8 *)(v12 + 130);
    swift_beginAccess(v13 + 130, &v72, 0LL, 0LL);
    int v57 = *(unsigned __int8 *)(v13 + 130);
    if (v56 == 2)
    {
      if (v57 != 2) {
        goto LABEL_101;
      }
    }

    else if (v57 == 2 || ((v56 ^ ((v57 & 1) == 0)) & 1) == 0)
    {
      goto LABEL_101;
    }

    swift_beginAccess(v12 + 131, &v71, 0LL, 0LL);
    int v58 = *(unsigned __int8 *)(v12 + 131);
    swift_beginAccess(v13 + 131, &v70, 0LL, 0LL);
    int v59 = *(unsigned __int8 *)(v13 + 131);
    if (v58 == 2)
    {
      if (v59 != 2) {
        goto LABEL_101;
      }
    }

    else if (v59 == 2 || ((v58 ^ ((v59 & 1) == 0)) & 1) == 0)
    {
      goto LABEL_101;
    }

    swift_beginAccess(v12 + 132, &v69, 0LL, 0LL);
    int v60 = *(unsigned __int8 *)(v12 + 132);
    swift_beginAccess(v13 + 132, &v68, 0LL, 0LL);
    int v61 = *(unsigned __int8 *)(v13 + 132);
    if (v60 == 2)
    {
      a2 = v67;
      if (v61 == 2)
      {
LABEL_100:
        uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v63(v10, a1, v4);
        v63(v8, a2, v4);
        uint64_t v64 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
        char v55 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v64);
        uint64_t v65 = *(void (**)(char *, uint64_t))(v5 + 8);
        v65(v8, v4);
        v65(v10, v4);
        return v55 & 1;
      }
    }

    else if (v61 != 2)
    {
      char v62 = v60 ^ ((v61 & 1) == 0);
      a2 = v67;
      if ((v62 & 1) != 0) {
        goto LABEL_100;
      }
    }

LABEL_101:
    char v55 = 0;
  }

  return v55 & 1;
}

        __break(1u);
        goto LABEL_102;
      }

      swift_bridgeObjectRelease(v66);
      uint64_t v106 = v195;
      corelog.getter(v195);
      uint64_t v107 = swift_bridgeObjectRetain(v58);
      uint64_t v108 = (void *)Logger.logObject.getter(v107);
      uint64_t v109 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled((os_log_t)v108, v109))
      {

        swift_bridgeObjectRelease_n(v58, 2LL);
        int v53 = v106;
        double v17 = v205;
        v201(v53, v205);
        char v43 = v200;
        goto LABEL_16;
      }

      uint64_t v110 = swift_slowAlloc(22LL, -1LL);
      *(double *)&uint64_t v111 = COERCE_DOUBLE(swift_slowAlloc(32LL, -1LL));
      uint64_t v219 = *(double *)&v111;
      *(_DWORD *)uint64_t v110 = v183;
      uint64_t v217 = v209;
      uint64_t v112 = v184;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, v184, v110 + 4, v110 + 12);
      *(_WORD *)(v110 + 12) = 2080;
      uint64_t v213 = (char *)(v110 + 14);
      swift_bridgeObjectRetain(v58);
      uint64_t v113 = static String._fromSubstring(_:)(v56, v55, v212, v58);
      uint64_t v115 = v114;
      swift_bridgeObjectRelease(v58);
      uint64_t v217 = sub_1000181EC(v113, v115, (uint64_t *)&v219);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, v112, v213, v110 + 22);
      swift_bridgeObjectRelease_n(v58, 2LL);
      swift_bridgeObjectRelease(v115);
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v108,  v109,  "line %ld: '%s' is ill-formed. Please follow [mac],[timestamp],[channel],[rssidB],[isMoving]. Skip!",  (uint8_t *)v110,  0x16u);
      swift_arrayDestroy(v111, 1LL, v182);
      swift_slowDealloc(v111, -1LL, -1LL);
      swift_slowDealloc(v110, -1LL, -1LL);

      uint64_t v116 = v106;
      double v17 = v205;
      v201(v116, v205);
      char v51 = v209;
      char v43 = v200;
      float v44 = v206;
      float v50 = v198;
LABEL_17:
      if (++v51 == v207)
      {
        swift_bridgeObjectRelease(v50);
        uint64_t v158 = v204;
        uint64_t v159 = *(void *)&v203;
        uint64_t v160 = v202;
        goto LABEL_91;
      }
    }
  }

  swift_bridgeObjectRelease(v50);
  uint64_t v159 = 0LL;
  uint64_t v158 = &_swiftEmptyArrayStorage;
  uint64_t v160 = 1;
LABEL_91:
  sub_1002A2584(v159, v160 & 1, (uint64_t)v158);
  swift_bridgeObjectRelease(v158);
  (*(void (**)(char *, uint64_t))(v190 + 8))(v44, v191);
  uint64_t v161 = v43 + 24;
  swift_beginAccess(v43 + 24, &v219, 0LL, 0LL);
  if (!*(void *)(*(void *)(v43 + 24) + 16LL)) {
    goto LABEL_96;
  }
  uint64_t v162 = machContTimeSec()();
  swift_beginAccess(v43 + 24, &v217, 32LL, 0LL);
  if (!*(void *)(*(void *)v161 + 16LL)) {
    goto LABEL_106;
  }
  v163 = v186;
  uint64_t v164 = *(void *)v161
       + ((*(unsigned __int8 *)(v186 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v186 + 80));
  uint64_t v165 = v185;
  uint64_t v166 = v187;
  uint64_t v167 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v186 + 16))(v185, v164, v187);
  ALWiFiScanResult._scanTimestamp.getter(v167);
  uint64_t v168 = v192;
  (*(void (**)(char *, uint64_t))(v163 + 8))(v165, v166);
  swift_endAccess(&v217);
  uint64_t v169 = type metadata accessor for ALTimeStamp(0LL);
  uint64_t v170 = *(void *)(v169 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v170 + 48))(v168, 1LL, v169) == 1)
  {
LABEL_107:
    __break(1u);
  }

  else
  {
    uint64_t v171 = COERCE_DOUBLE(ALTimeStamp.machContinuousTimeSec.getter());
    uint64_t v173 = v172;
    (*(void (**)(char *, uint64_t))(v170 + 8))(v168, v169);
    if ((v173 & 1) == 0)
    {
      swift_beginAccess(v43 + 40, &v217, 1LL, 0LL);
      *(double *)(v43 + 40) = v162 - v171;
LABEL_96:
      corelog.getter(v193);
      uint64_t v174 = swift_retain(v43);
      uint64_t v175 = (os_log_s *)Logger.logObject.getter(v174);
      v176 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v175, v176))
      {
        v177 = swift_slowAlloc(22LL, -1LL);
        *(_DWORD *)v177 = 134218240;
        uint64_t v215 = *(void *)(*(void *)(v43 + 24) + 16LL);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v215, v216, v177 + 4, v177 + 12);
        *(_WORD *)(v177 + 12) = 2048;
        swift_beginAccess(v43 + 40, &v215, 0LL, 0LL);
        uint64_t v214 = *(void *)(v43 + 40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v214, &v215, v177 + 14, v177 + 22);
        swift_release(v43);
        _os_log_impl( (void *)&_mh_execute_header,  v175,  v176,  "Total Wifi scans from file: %ld. Offset is %f",  (uint8_t *)v177,  0x16u);
        swift_slowDealloc(v177, -1LL, -1LL);
        v178 = v189;
      }

      else
      {
        swift_release(v189);
        v178 = v43;
      }

      swift_release(v178);
      v179 = v188;
      swift_release(v43);

      v201(v193, v17);
      return v43;
    }
  }

  __break(1u);
LABEL_109:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Range requires lowerBound <= upperBound",  39LL,  2LL,  "Swift/Range.swift",  17LL,  2,  754LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_100112EE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v41 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0LL);
  uint64_t v12 = v11[5];
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 2)
  {
    if (v14 != 2) {
      goto LABEL_42;
    }
  }

  else if (v14 == 2 || ((((v14 & 1) == 0) ^ v13) & 1) == 0)
  {
    goto LABEL_42;
  }

  uint64_t v15 = v11[6];
  int v16 = *(unsigned __int8 *)(a1 + v15);
  int v17 = *(unsigned __int8 *)(a2 + v15);
  if (v16 == 2)
  {
    if (v17 != 2) {
      goto LABEL_42;
    }
  }

  else if (v17 == 2 || ((((v17 & 1) == 0) ^ v16) & 1) == 0)
  {
    goto LABEL_42;
  }

  uint64_t v18 = v11[7];
  int v19 = *(unsigned __int8 *)(a1 + v18);
  int v20 = *(unsigned __int8 *)(a2 + v18);
  if (v19 == 2)
  {
    if (v20 != 2) {
      goto LABEL_42;
    }
  }

  else if (v20 == 2 || ((((v20 & 1) == 0) ^ v19) & 1) == 0)
  {
    goto LABEL_42;
  }

  uint64_t v21 = v11[8];
  int v22 = *(unsigned __int8 *)(a1 + v21);
  int v23 = *(unsigned __int8 *)(a2 + v21);
  if (v22 == 2)
  {
    if (v23 != 2) {
      goto LABEL_42;
    }
  }

  else if (v23 == 2 || ((((v23 & 1) == 0) ^ v22) & 1) == 0)
  {
    goto LABEL_42;
  }

  uint64_t v24 = v11[9];
  int v25 = *(unsigned __int8 *)(a1 + v24);
  int v26 = *(unsigned __int8 *)(a2 + v24);
  if (v25 == 2)
  {
    if (v26 != 2) {
      goto LABEL_42;
    }
  }

  else if (v26 == 2 || ((((v26 & 1) == 0) ^ v25) & 1) == 0)
  {
    goto LABEL_42;
  }

  uint64_t v27 = v11[10];
  int v28 = *(unsigned __int8 *)(a1 + v27);
  int v29 = *(unsigned __int8 *)(a2 + v27);
  if (v28 == 2)
  {
    if (v29 != 2) {
      goto LABEL_42;
    }
  }

  else if (v29 == 2 || ((((v29 & 1) == 0) ^ v28) & 1) == 0)
  {
    goto LABEL_42;
  }

  uint64_t v30 = v11[11];
  int v31 = *(unsigned __int8 *)(a1 + v30);
  int v32 = *(unsigned __int8 *)(a2 + v30);
  if (v31 == 2)
  {
    if (v32 != 2) {
      goto LABEL_42;
    }
  }

  else if (v32 == 2 || ((((v32 & 1) == 0) ^ v31) & 1) == 0)
  {
    goto LABEL_42;
  }

  uint64_t v33 = v11[12];
  int v34 = *(unsigned __int8 *)(a1 + v33);
  int v35 = *(unsigned __int8 *)(a2 + v33);
  if (v34 == 2)
  {
    if (v35 == 2) {
      goto LABEL_41;
    }
LABEL_42:
    char v38 = 0;
    return v38 & 1;
  }

  if (v35 == 2 || ((((v35 & 1) == 0) ^ v34) & 1) == 0) {
    goto LABEL_42;
  }
LABEL_41:
  char v36 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v36(v10, a1, v4);
  v36(v8, a2, v4);
  uint64_t v37 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v38 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v37);
  char v39 = *(void (**)(char *, uint64_t))(v5 + 8);
  v39(v8, v4);
  v39(v10, v4);
  return v38 & 1;
}

uint64_t sub_1001131B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v25 - v9;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0LL);
  uint64_t v12 = *(int *)(v11 + 20);
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 8)
  {
    if (v14 != 8) {
      goto LABEL_16;
    }
  }

  else if (v14 == 8 || v13 != v14)
  {
    goto LABEL_16;
  }

  uint64_t v16 = *(int *)(v11 + 24);
  int v17 = *(unsigned __int8 *)(a1 + v16);
  int v18 = *(unsigned __int8 *)(a2 + v16);
  if (v17 != 4)
  {
    if (v18 != 4 && v17 == v18) {
      goto LABEL_11;
    }
LABEL_16:
    char v21 = 0;
    return v21 & 1;
  }

  if (v18 != 4) {
    goto LABEL_16;
  }
LABEL_11:
  int v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v19(v10, a1, v4);
  v19(v8, a2, v4);
  uint64_t v20 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v21 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v20);
  int v22 = *(void (**)(char *, uint64_t))(v5 + 8);
  v22(v8, v4);
  v22(v10, v4);
  return v21 & 1;
}

uint64_t sub_100113324(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v29 - v9;
  if ((sub_10010B338( *a1,  *a2,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection,  (uint64_t (*)(char *, char *))sub_10011EB84) & 1) == 0) {
    goto LABEL_10;
  }
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0LL);
  uint64_t v12 = v11;
  uint64_t v13 = v11[6];
  int v14 = (uint64_t *)((char *)a1 + v13);
  char v15 = *((_BYTE *)a1 + v13 + 8);
  uint64_t v16 = (uint64_t *)((char *)a2 + v13);
  int v17 = *((unsigned __int8 *)a2 + v13 + 8);
  if ((v15 & 1) != 0)
  {
    if (!v17) {
      goto LABEL_10;
    }
  }

  else
  {
    if (*v14 != *v16) {
      LOBYTE(v17) = 1;
    }
    if ((v17 & 1) != 0) {
      goto LABEL_10;
    }
  }

  uint64_t v18 = v11[7];
  int v19 = (uint64_t *)((char *)a1 + v18);
  char v20 = *((_BYTE *)a1 + v18 + 8);
  char v21 = (uint64_t *)((char *)a2 + v18);
  int v22 = *((unsigned __int8 *)a2 + v18 + 8);
  if ((v20 & 1) == 0)
  {
    if (*v19 != *v21) {
      LOBYTE(v22) = 1;
    }
    if ((v22 & 1) != 0) {
      goto LABEL_10;
    }
LABEL_15:
    uint64_t v25 = (char *)a1 + v11[5];
    int v26 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v26(v10, v25, v4);
    v26(v8, (char *)a2 + v12[5], v4);
    uint64_t v27 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v23 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v27);
    int v28 = *(void (**)(char *, uint64_t))(v5 + 8);
    v28(v8, v4);
    v28(v10, v4);
    return v23 & 1;
  }

  if (v22) {
    goto LABEL_15;
  }
LABEL_10:
  char v23 = 0;
  return v23 & 1;
}

uint64_t sub_1001134CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v75 = *(void *)(v4 - 8);
  uint64_t v76 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v74 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v73 = (char *)&v72 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v77 = (uint64_t)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100003A0C(&qword_10035C418);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100003A0C(&qword_100355538);
  uint64_t v15 = __chkstk_darwin(v14);
  int v17 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  char v20 = (char *)&v72 - v19;
  __chkstk_darwin(v18);
  int v22 = (char *)&v72 - v21;
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0LL);
  uint64_t v24 = *(int *)(v23 + 20);
  uint64_t v78 = a1;
  uint64_t v25 = a1 + v24;
  int v26 = (int *)v23;
  sub_10000E6C0(v25, (uint64_t)v22, &qword_100355538);
  uint64_t v27 = v26[5];
  uint64_t v79 = a2;
  sub_10000E6C0(a2 + v27, (uint64_t)v20, &qword_100355538);
  uint64_t v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E6C0((uint64_t)v22, (uint64_t)v13, &qword_100355538);
  sub_10000E6C0((uint64_t)v20, v28, &qword_100355538);
  uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1LL, v8) != 1)
  {
    sub_10000E6C0((uint64_t)v13, (uint64_t)v17, &qword_100355538);
    if (v29(v28, 1LL, v8) != 1)
    {
      uint64_t v32 = v77;
      sub_100003E68(v28, v77, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      char v33 = sub_100065750((uint64_t)v17, v32, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100004090(v32, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100015764((uint64_t)v20, &qword_100355538);
      sub_100015764((uint64_t)v22, &qword_100355538);
      sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100015764((uint64_t)v13, &qword_100355538);
      if ((v33 & 1) == 0) {
        goto LABEL_7;
      }
      goto LABEL_10;
    }

    sub_100015764((uint64_t)v20, &qword_100355538);
    sub_100015764((uint64_t)v22, &qword_100355538);
    sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    sub_100015764((uint64_t)v13, &qword_10035C418);
    goto LABEL_7;
  }

  sub_100015764((uint64_t)v20, &qword_100355538);
  sub_100015764((uint64_t)v22, &qword_100355538);
  if (v29(v28, 1LL, v8) != 1) {
    goto LABEL_6;
  }
  sub_100015764((uint64_t)v13, &qword_100355538);
LABEL_10:
  uint64_t v34 = v26[6];
  uint64_t v35 = v79;
  char v36 = (double *)(v78 + v34);
  char v37 = *(_BYTE *)(v78 + v34 + 8);
  char v38 = (double *)(v79 + v34);
  int v39 = *(unsigned __int8 *)(v79 + v34 + 8);
  if ((v37 & 1) != 0)
  {
    if (!v39) {
      goto LABEL_7;
    }
  }

  else
  {
    if (*v36 != *v38) {
      LOBYTE(v39) = 1;
    }
    if ((v39 & 1) != 0) {
      goto LABEL_7;
    }
  }

  uint64_t v40 = v26[7];
  uint64_t v41 = (double *)(v78 + v40);
  char v42 = *(_BYTE *)(v78 + v40 + 8);
  char v43 = (double *)(v79 + v40);
  int v44 = *(unsigned __int8 *)(v79 + v40 + 8);
  if ((v42 & 1) != 0)
  {
    if (!v44) {
      goto LABEL_7;
    }
  }

  else
  {
    if (*v41 != *v43) {
      LOBYTE(v44) = 1;
    }
    if ((v44 & 1) != 0) {
      goto LABEL_7;
    }
  }

  uint64_t v45 = v26[8];
  char v46 = (float *)(v78 + v45);
  char v47 = *(_BYTE *)(v78 + v45 + 4);
  char v48 = (float *)(v79 + v45);
  int v49 = *(unsigned __int8 *)(v79 + v45 + 4);
  if ((v47 & 1) != 0)
  {
    if (!v49) {
      goto LABEL_7;
    }
  }

  else
  {
    if (*v46 != *v48) {
      LOBYTE(v49) = 1;
    }
    if ((v49 & 1) != 0) {
      goto LABEL_7;
    }
  }

  uint64_t v50 = v26[9];
  char v51 = (float *)(v78 + v50);
  char v52 = *(_BYTE *)(v78 + v50 + 4);
  int v53 = (float *)(v79 + v50);
  int v54 = *(unsigned __int8 *)(v79 + v50 + 4);
  if ((v52 & 1) != 0)
  {
    if (!v54) {
      goto LABEL_7;
    }
  }

  else
  {
    if (*v51 != *v53) {
      LOBYTE(v54) = 1;
    }
    if ((v54 & 1) != 0) {
      goto LABEL_7;
    }
  }

  uint64_t v55 = v26[10];
  int v56 = (float *)(v78 + v55);
  char v57 = *(_BYTE *)(v78 + v55 + 4);
  int v58 = (float *)(v79 + v55);
  int v59 = *(unsigned __int8 *)(v79 + v55 + 4);
  if ((v57 & 1) != 0)
  {
    if (!v59) {
      goto LABEL_7;
    }
  }

  else
  {
    if (*v56 != *v58) {
      LOBYTE(v59) = 1;
    }
    if ((v59 & 1) != 0) {
      goto LABEL_7;
    }
  }

  uint64_t v60 = v26[11];
  int v61 = (_DWORD *)(v78 + v60);
  char v62 = *(_BYTE *)(v78 + v60 + 4);
  uint64_t v63 = (_DWORD *)(v79 + v60);
  int v64 = *(unsigned __int8 *)(v79 + v60 + 4);
  if ((v62 & 1) != 0)
  {
    if (v64)
    {
LABEL_46:
      uint64_t v66 = v75;
      uint64_t v65 = v76;
      uint64_t v67 = *(void (**)(char *))(v75 + 16);
      uint64_t v68 = v73;
      v67(v73);
      uint64_t v69 = v74;
      ((void (*)(char *, uint64_t, uint64_t))v67)(v74, v35, v65);
      uint64_t v70 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v30 = dispatch thunk of static Equatable.== infix(_:_:)(v68, v69, v65, v70);
      uint64_t v71 = *(void (**)(char *, uint64_t))(v66 + 8);
      v71(v69, v65);
      v71(v68, v65);
      return v30 & 1;
    }
  }

  else
  {
    if (*v61 != *v63) {
      LOBYTE(v64) = 1;
    }
    if ((v64 & 1) == 0) {
      goto LABEL_46;
    }
  }

uint64_t sub_1001139D0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v79 = a2;
  uint64_t v3 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v70 = *(void *)(v3 - 8);
  uint64_t v71 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v69 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v68 = (char *)&v68 - v6;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v73 = (uint64_t)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100003A0C(&qword_10035C418);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v76 = (uint64_t)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v68 - v13;
  uint64_t v15 = sub_100003A0C(&qword_100355538);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v72 = (uint64_t)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v75 = (uint64_t)&v68 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v78 = (uint64_t)&v68 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v68 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v68 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v68 - v28;
  uint64_t v30 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0LL);
  uint64_t v31 = *(int *)(v30 + 24);
  uint64_t v77 = a1;
  sub_10000E6C0((uint64_t)a1 + v31, (uint64_t)v29, &qword_100355538);
  uint64_t v32 = (int *)v30;
  sub_10000E6C0((uint64_t)v79 + *(int *)(v30 + 24), (uint64_t)v27, &qword_100355538);
  uint64_t v74 = v10;
  uint64_t v33 = *(int *)(v10 + 48);
  uint64_t v34 = v7;
  uint64_t v35 = (uint64_t)&v14[v33];
  sub_10000E6C0((uint64_t)v29, (uint64_t)v14, &qword_100355538);
  sub_10000E6C0((uint64_t)v27, v35, &qword_100355538);
  char v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v36((uint64_t)v14, 1LL, v34) == 1)
  {
    sub_100015764((uint64_t)v27, &qword_100355538);
    sub_100015764((uint64_t)v29, &qword_100355538);
    if (v36(v35, 1LL, v34) == 1)
    {
      sub_100015764((uint64_t)v14, &qword_100355538);
      goto LABEL_8;
    }

uint64_t sub_100114074(uint64_t a1, uint64_t a2)
{
  uint64_t v73 = a1;
  uint64_t v74 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v64 = *(void *)(v2 - 8);
  uint64_t v65 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v63 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  char v62 = (char *)&v61 - v5;
  uint64_t v71 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0LL);
  uint64_t v68 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v61 = (uint64_t)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v67 = sub_100003A0C(&qword_10035C4E8);
  __chkstk_darwin(v67);
  uint64_t v72 = (uint64_t)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100003A0C(&qword_1003555A0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v66 = (uint64_t)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v69 = (uint64_t)&v61 - v12;
  __chkstk_darwin(v11);
  uint64_t v70 = (uint64_t)&v61 - v13;
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100003A0C(&qword_10035C418);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100003A0C(&qword_100355538);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v61 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v61 - v28;
  uint64_t v30 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0LL);
  sub_10000E6C0(v73 + v30[5], (uint64_t)v29, &qword_100355538);
  sub_10000E6C0(v74 + v30[5], (uint64_t)v27, &qword_100355538);
  uint64_t v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  sub_10000E6C0((uint64_t)v29, (uint64_t)v20, &qword_100355538);
  sub_10000E6C0((uint64_t)v27, v31, &qword_100355538);
  uint64_t v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1LL, v14) == 1)
  {
    sub_100015764((uint64_t)v27, &qword_100355538);
    sub_100015764((uint64_t)v29, &qword_100355538);
    if (v32(v31, 1LL, v14) == 1)
    {
      sub_100015764((uint64_t)v20, &qword_100355538);
      goto LABEL_11;
    }

uint64_t sub_100114720(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v52 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0LL);
  uint64_t v12 = v11[5];
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 7)
  {
    if (v14 != 7) {
      goto LABEL_50;
    }
  }

  else if (v14 == 7 || v13 != v14)
  {
    goto LABEL_50;
  }

  uint64_t v16 = v11[6];
  uint64_t v17 = (_DWORD *)(a1 + v16);
  char v18 = *(_BYTE *)(a1 + v16 + 4);
  uint64_t v19 = (_DWORD *)(a2 + v16);
  int v20 = *(unsigned __int8 *)(a2 + v16 + 4);
  if ((v18 & 1) != 0)
  {
    if (!v20) {
      goto LABEL_50;
    }
  }

  else
  {
    if (*v17 != *v19) {
      LOBYTE(v20) = 1;
    }
    if ((v20 & 1) != 0) {
      goto LABEL_50;
    }
  }

  uint64_t v21 = v11[7];
  uint64_t v22 = (float *)(a1 + v21);
  char v23 = *(_BYTE *)(a1 + v21 + 4);
  uint64_t v24 = (float *)(a2 + v21);
  int v25 = *(unsigned __int8 *)(a2 + v21 + 4);
  if ((v23 & 1) != 0)
  {
    if (!v25) {
      goto LABEL_50;
    }
  }

  else
  {
    if (*v22 != *v24) {
      LOBYTE(v25) = 1;
    }
    if ((v25 & 1) != 0) {
      goto LABEL_50;
    }
  }

  uint64_t v26 = v11[8];
  uint64_t v27 = (float *)(a1 + v26);
  char v28 = *(_BYTE *)(a1 + v26 + 4);
  uint64_t v29 = (float *)(a2 + v26);
  int v30 = *(unsigned __int8 *)(a2 + v26 + 4);
  if ((v28 & 1) != 0)
  {
    if (!v30) {
      goto LABEL_50;
    }
  }

  else
  {
    if (*v27 != *v29) {
      LOBYTE(v30) = 1;
    }
    if ((v30 & 1) != 0) {
      goto LABEL_50;
    }
  }

  uint64_t v31 = v11[9];
  uint64_t v32 = (float *)(a1 + v31);
  char v33 = *(_BYTE *)(a1 + v31 + 4);
  uint64_t v34 = (float *)(a2 + v31);
  int v35 = *(unsigned __int8 *)(a2 + v31 + 4);
  if ((v33 & 1) != 0)
  {
    if (!v35) {
      goto LABEL_50;
    }
  }

  else
  {
    if (*v32 != *v34) {
      LOBYTE(v35) = 1;
    }
    if ((v35 & 1) != 0) {
      goto LABEL_50;
    }
  }

  uint64_t v36 = v11[10];
  char v37 = (float *)(a1 + v36);
  char v38 = *(_BYTE *)(a1 + v36 + 4);
  uint64_t v39 = (float *)(a2 + v36);
  int v40 = *(unsigned __int8 *)(a2 + v36 + 4);
  if ((v38 & 1) != 0)
  {
    if (!v40) {
      goto LABEL_50;
    }
  }

  else
  {
    if (*v37 != *v39) {
      LOBYTE(v40) = 1;
    }
    if ((v40 & 1) != 0) {
      goto LABEL_50;
    }
  }

  uint64_t v41 = v11[11];
  int v42 = *(unsigned __int8 *)(a1 + v41);
  int v43 = *(unsigned __int8 *)(a2 + v41);
  if (v42 == 2)
  {
    if (v43 != 2) {
      goto LABEL_50;
    }
  }

  else if (v43 == 2 || ((((v43 & 1) == 0) ^ v42) & 1) == 0)
  {
    goto LABEL_50;
  }

  uint64_t v44 = v11[12];
  int v45 = *(unsigned __int8 *)(a1 + v44);
  int v46 = *(unsigned __int8 *)(a2 + v44);
  if (v45 == 2)
  {
    if (v46 == 2) {
      goto LABEL_49;
    }
LABEL_50:
    char v49 = 0;
    return v49 & 1;
  }

  if (v46 == 2 || ((((v46 & 1) == 0) ^ v45) & 1) == 0) {
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v47(v10, a1, v4);
  v47(v8, a2, v4);
  uint64_t v48 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v49 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v48);
  uint64_t v50 = *(void (**)(char *, uint64_t))(v5 + 8);
  v50(v8, v4);
  v50(v10, v4);
  return v49 & 1;
}

uint64_t sub_1001149D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v28 - v9;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0LL);
  uint64_t v12 = *(int *)(v11 + 20);
  int v13 = (double *)(a1 + v12);
  char v14 = *(_BYTE *)(a1 + v12 + 8);
  uint64_t v15 = (double *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16) {
      goto LABEL_16;
    }
  }

  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if ((v16 & 1) != 0) {
      goto LABEL_16;
    }
  }

  uint64_t v17 = *(int *)(v11 + 24);
  char v18 = (void *)(a1 + v17);
  uint64_t v19 = *(void *)(a1 + v17 + 8);
  int v20 = (void *)(a2 + v17);
  uint64_t v21 = v20[1];
  if (!v19)
  {
    if (!v21)
    {
LABEL_17:
      uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v24(v10, a1, v4);
      v24(v8, a2, v4);
      uint64_t v25 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v23 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v25);
      uint64_t v26 = *(void (**)(char *, uint64_t))(v5 + 8);
      v26(v8, v4);
      v26(v10, v4);
      return v23 & 1;
    }

uint64_t sub_100114B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v56 = *(void *)(v4 - 8);
  uint64_t v57 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v55 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v54 = (char *)&v53 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v60 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100003A0C(&qword_10035C418);
  __chkstk_darwin(v11);
  int v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100003A0C(&qword_100355538);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  int v20 = (char *)&v53 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v53 - v21;
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0LL);
  uint64_t v24 = *(int *)(v23 + 20);
  uint64_t v58 = a1;
  uint64_t v25 = a1 + v24;
  uint64_t v26 = (int *)v23;
  sub_10000E6C0(v25, (uint64_t)v22, &qword_100355538);
  uint64_t v27 = v26[5];
  uint64_t v59 = a2;
  sub_10000E6C0(a2 + v27, (uint64_t)v20, &qword_100355538);
  uint64_t v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E6C0((uint64_t)v22, (uint64_t)v13, &qword_100355538);
  sub_10000E6C0((uint64_t)v20, v28, &qword_100355538);
  uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1LL, v8) == 1)
  {
    sub_100015764((uint64_t)v20, &qword_100355538);
    sub_100015764((uint64_t)v22, &qword_100355538);
    if (v29(v28, 1LL, v8) == 1)
    {
      sub_100015764((uint64_t)v13, &qword_100355538);
      goto LABEL_10;
    }

uint64_t sub_100114FD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v48 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v47 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v46 = (char *)&v43 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v45 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100003A0C(&qword_10035C458);
  __chkstk_darwin(v11);
  int v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100003A0C(&qword_100355630);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v49 = (uint64_t)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v43 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v43 - v20;
  uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0LL);
  uint64_t v23 = v22;
  uint64_t v24 = *(int *)(v22 + 20);
  int v25 = *(unsigned __int8 *)(a1 + v24);
  uint64_t v50 = a2;
  int v26 = *(unsigned __int8 *)(a2 + v24);
  if (v25 == 2)
  {
    if (v26 != 2) {
      goto LABEL_12;
    }
  }

  else if (v26 == 2 || ((((v26 & 1) == 0) ^ v25) & 1) == 0)
  {
    goto LABEL_12;
  }

  uint64_t v44 = v4;
  uint64_t v27 = a1;
  sub_10000E6C0(a1 + *(int *)(v22 + 24), (uint64_t)v21, &qword_100355630);
  sub_10000E6C0(v50 + *(int *)(v23 + 24), (uint64_t)v19, &qword_100355630);
  uint64_t v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E6C0((uint64_t)v21, (uint64_t)v13, &qword_100355630);
  sub_10000E6C0((uint64_t)v19, v28, &qword_100355630);
  uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1LL, v8) == 1)
  {
    sub_100015764((uint64_t)v19, &qword_100355630);
    sub_100015764((uint64_t)v21, &qword_100355630);
    int v30 = v29(v28, 1LL, v8);
    uint64_t v31 = v44;
    if (v30 == 1)
    {
      sub_100015764((uint64_t)v13, &qword_100355630);
LABEL_15:
      uint64_t v37 = v48;
      uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 16);
      int v39 = v46;
      v38(v46, v27, v31);
      int v40 = v47;
      v38(v47, v50, v31);
      uint64_t v41 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v33 = dispatch thunk of static Equatable.== infix(_:_:)(v39, v40, v31, v41);
      int v42 = *(void (**)(char *, uint64_t))(v37 + 8);
      v42(v40, v31);
      v42(v39, v31);
      return v33 & 1;
    }

    goto LABEL_11;
  }

  uint64_t v32 = v49;
  sub_10000E6C0((uint64_t)v13, v49, &qword_100355630);
  if (v29(v28, 1LL, v8) == 1)
  {
    sub_100015764((uint64_t)v19, &qword_100355630);
    sub_100015764((uint64_t)v21, &qword_100355630);
    sub_100004090(v32, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
LABEL_11:
    sub_100015764((uint64_t)v13, &qword_10035C458);
    goto LABEL_12;
  }

  uint64_t v35 = v45;
  sub_100003E68(v28, v45, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  char v36 = sub_1001156D8(v32, v35);
  sub_100004090(v35, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  sub_100015764((uint64_t)v19, &qword_100355630);
  sub_100015764((uint64_t)v21, &qword_100355630);
  sub_100004090(v32, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  sub_100015764((uint64_t)v13, &qword_100355630);
  uint64_t v31 = v44;
  if ((v36 & 1) != 0) {
    goto LABEL_15;
  }
LABEL_12:
  char v33 = 0;
  return v33 & 1;
}

uint64_t sub_1001153F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v24 - v9;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0LL);
  uint64_t v12 = *(int *)(v11 + 20);
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 14)
  {
    if (v14 != 14) {
      goto LABEL_15;
    }
  }

  else if (v14 == 14 || v13 != v14)
  {
    goto LABEL_15;
  }

  uint64_t v16 = *(int *)(v11 + 24);
  int v17 = *(unsigned __int8 *)(a1 + v16);
  int v18 = *(unsigned __int8 *)(a2 + v16);
  if (v17 == 2)
  {
    if (v18 != 2)
    {
LABEL_15:
      char v21 = 0;
      return v21 & 1;
    }
  }

  else if (v18 == 2 || ((((v18 & 1) == 0) ^ v17) & 1) == 0)
  {
    goto LABEL_15;
  }

  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v19(v10, a1, v4);
  v19(v8, a2, v4);
  uint64_t v20 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v21 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v20);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
  v22(v8, v4);
  v22(v10, v4);
  return v21 & 1;
}

uint64_t sub_100115574(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v18 - v9;
  if ((sub_10010B02C(*a1, *a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, sub_1000C9D48) & 1) != 0
    && (sub_10010B02C( a1[1],  a2[1],  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  sub_1000CF68C) & 1) != 0)
  {
    uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations(0LL);
    uint64_t v12 = (char *)a1 + *(int *)(v11 + 24);
    int v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, (char *)a2 + *(int *)(v11 + 24), v4);
    uint64_t v14 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v15 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v14);
    uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }

  else
  {
    char v15 = 0;
  }

  return v15 & 1;
}

uint64_t sub_1001156D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v62 - v9;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
  uint64_t v12 = (int *)v11;
  uint64_t v13 = *(int *)(v11 + 20);
  uint64_t v14 = (void *)(a1 + v13);
  char v15 = *(_BYTE *)(a1 + v13 + 8);
  uint64_t v16 = (void *)(a2 + v13);
  int v17 = *(unsigned __int8 *)(a2 + v13 + 8);
  if ((v15 & 1) != 0)
  {
    if (!v17) {
      goto LABEL_59;
    }
  }

  else
  {
    if (*v14 != *v16) {
      LOBYTE(v17) = 1;
    }
    if ((v17 & 1) != 0) {
      goto LABEL_59;
    }
  }

  uint64_t v18 = *(int *)(v11 + 24);
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = *(void *)(a1 + v18 + 8);
  char v21 = (void *)(a2 + v18);
  uint64_t v22 = v21[1];
  if (!v20)
  {
    if (v22) {
      goto LABEL_59;
    }
LABEL_16:
    uint64_t v25 = v12[7];
    int v26 = (_DWORD *)(a1 + v25);
    char v27 = *(_BYTE *)(a1 + v25 + 4);
    uint64_t v28 = (_DWORD *)(a2 + v25);
    int v29 = *(unsigned __int8 *)(a2 + v25 + 4);
    if ((v27 & 1) != 0)
    {
      if (!v29) {
        goto LABEL_59;
      }
    }

    else
    {
      if (*v26 != *v28) {
        LOBYTE(v29) = 1;
      }
      if ((v29 & 1) != 0) {
        goto LABEL_59;
      }
    }

    uint64_t v30 = v12[8];
    int v31 = *(unsigned __int8 *)(a1 + v30);
    int v32 = *(unsigned __int8 *)(a2 + v30);
    if (v31 == 4)
    {
      if (v32 != 4) {
        goto LABEL_59;
      }
    }

    else if (v32 == 4 || v31 != v32)
    {
      goto LABEL_59;
    }

    uint64_t v34 = v12[9];
    uint64_t v35 = (_DWORD *)(a1 + v34);
    char v36 = *(_BYTE *)(a1 + v34 + 4);
    uint64_t v37 = (_DWORD *)(a2 + v34);
    int v38 = *(unsigned __int8 *)(a2 + v34 + 4);
    if ((v36 & 1) != 0)
    {
      if (!v38) {
        goto LABEL_59;
      }
    }

    else
    {
      if (*v35 != *v37) {
        LOBYTE(v38) = 1;
      }
      if ((v38 & 1) != 0) {
        goto LABEL_59;
      }
    }

    uint64_t v39 = v12[10];
    int v40 = (float *)(a1 + v39);
    char v41 = *(_BYTE *)(a1 + v39 + 4);
    int v42 = (float *)(a2 + v39);
    int v43 = *(unsigned __int8 *)(a2 + v39 + 4);
    if ((v41 & 1) != 0)
    {
      if (!v43) {
        goto LABEL_59;
      }
    }

    else
    {
      if (*v40 != *v42) {
        LOBYTE(v43) = 1;
      }
      if ((v43 & 1) != 0) {
        goto LABEL_59;
      }
    }

    uint64_t v44 = v12[11];
    int v45 = *(unsigned __int8 *)(a1 + v44);
    int v46 = *(unsigned __int8 *)(a2 + v44);
    if (v45 == 2)
    {
      if (v46 != 2) {
        goto LABEL_59;
      }
    }

    else if (v46 == 2 || ((((v46 & 1) == 0) ^ v45) & 1) == 0)
    {
      goto LABEL_59;
    }

    uint64_t v47 = v12[12];
    int v48 = *(unsigned __int8 *)(a1 + v47);
    int v49 = *(unsigned __int8 *)(a2 + v47);
    if (v48 == 2)
    {
      if (v49 != 2) {
        goto LABEL_59;
      }
    }

    else if (v49 == 2 || ((((v49 & 1) == 0) ^ v48) & 1) == 0)
    {
      goto LABEL_59;
    }

    uint64_t v50 = v12[13];
    int v51 = *(unsigned __int8 *)(a1 + v50);
    int v52 = *(unsigned __int8 *)(a2 + v50);
    if (v51 != 4)
    {
      char v24 = 0;
      if (v52 == 4 || v51 != v52) {
        return v24 & 1;
      }
LABEL_57:
      uint64_t v53 = v12[14];
      uint64_t v54 = (_DWORD *)(a1 + v53);
      char v55 = *(_BYTE *)(a1 + v53 + 4);
      uint64_t v56 = (_DWORD *)(a2 + v53);
      int v57 = *(unsigned __int8 *)(a2 + v53 + 4);
      if ((v55 & 1) != 0)
      {
        if (!v57) {
          goto LABEL_59;
        }
      }

      else
      {
        if (*v54 != *v56) {
          LOBYTE(v57) = 1;
        }
        if ((v57 & 1) != 0) {
          goto LABEL_59;
        }
      }

      uint64_t v59 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v59(v10, a1, v4);
      v59(v8, a2, v4);
      uint64_t v60 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v24 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v60);
      uint64_t v61 = *(void (**)(char *, uint64_t))(v5 + 8);
      v61(v8, v4);
      v61(v10, v4);
      return v24 & 1;
    }

    if (v52 == 4) {
      goto LABEL_57;
    }
LABEL_59:
    char v24 = 0;
    return v24 & 1;
  }

  if (!v22) {
    goto LABEL_59;
  }
  if (*v19 == *v21 && v20 == v22) {
    goto LABEL_16;
  }
  char v24 = 0;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20) & 1) != 0) {
    goto LABEL_16;
  }
  return v24 & 1;
}

uint64_t sub_100115A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v73 = a1;
  uint64_t v74 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v64 = *(void *)(v2 - 8);
  uint64_t v65 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v63 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v62 = (char *)&v61 - v5;
  uint64_t v71 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0LL);
  uint64_t v68 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v61 = (uint64_t)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v67 = sub_100003A0C(&qword_10035C4B8);
  __chkstk_darwin(v67);
  uint64_t v72 = (uint64_t)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100003A0C(&qword_1003555D0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v66 = (uint64_t)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v69 = (uint64_t)&v61 - v12;
  __chkstk_darwin(v11);
  uint64_t v70 = (uint64_t)&v61 - v13;
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  int v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100003A0C(&qword_10035C418);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100003A0C(&qword_100355538);
  uint64_t v22 = __chkstk_darwin(v21);
  char v24 = (char *)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v22);
  char v27 = (char *)&v61 - v26;
  __chkstk_darwin(v25);
  int v29 = (char *)&v61 - v28;
  uint64_t v30 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0LL);
  sub_10000E6C0(v73 + v30[5], (uint64_t)v29, &qword_100355538);
  sub_10000E6C0(v74 + v30[5], (uint64_t)v27, &qword_100355538);
  uint64_t v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  sub_10000E6C0((uint64_t)v29, (uint64_t)v20, &qword_100355538);
  sub_10000E6C0((uint64_t)v27, v31, &qword_100355538);
  int v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1LL, v14) == 1)
  {
    sub_100015764((uint64_t)v27, &qword_100355538);
    sub_100015764((uint64_t)v29, &qword_100355538);
    if (v32(v31, 1LL, v14) == 1)
    {
      sub_100015764((uint64_t)v20, &qword_100355538);
      goto LABEL_11;
    }

uint64_t sub_1001160BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v54 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  char v53 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v52 = (char *)&v51 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v55 = (uint64_t)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100003A0C(&qword_10035C418);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100003A0C(&qword_100355538);
  uint64_t v15 = __chkstk_darwin(v14);
  int v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v51 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v51 - v21;
  uint64_t v23 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0LL);
  uint64_t v24 = a1;
  uint64_t v25 = v23;
  uint64_t v26 = v23[5];
  uint64_t v27 = *(char *)(v24 + v26);
  uint64_t v56 = a2;
  uint64_t v28 = *(char *)(a2 + v26);
  if (v27 == 72)
  {
    if ((_DWORD)v28 != 72) {
      goto LABEL_18;
    }
  }

  else if ((_DWORD)v28 == 72 || qword_1002C93B0[v27] != qword_1002C93B0[v28])
  {
    goto LABEL_18;
  }

  uint64_t v29 = v23[6];
  uint64_t v30 = (double *)(v24 + v29);
  char v31 = *(_BYTE *)(v24 + v29 + 8);
  int v32 = (double *)(v56 + v29);
  int v33 = *(unsigned __int8 *)(v56 + v29 + 8);
  if ((v31 & 1) != 0)
  {
    if (!v33) {
      goto LABEL_18;
    }
  }

  else
  {
    if (*v30 != *v32) {
      LOBYTE(v33) = 1;
    }
    if ((v33 & 1) != 0) {
      goto LABEL_18;
    }
  }

  uint64_t v51 = v4;
  uint64_t v34 = v24;
  sub_10000E6C0(v24 + v23[7], (uint64_t)v22, &qword_100355538);
  sub_10000E6C0(v56 + v25[7], (uint64_t)v20, &qword_100355538);
  uint64_t v35 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E6C0((uint64_t)v22, (uint64_t)v13, &qword_100355538);
  sub_10000E6C0((uint64_t)v20, v35, &qword_100355538);
  char v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v36((uint64_t)v13, 1LL, v8) != 1)
  {
    sub_10000E6C0((uint64_t)v13, (uint64_t)v17, &qword_100355538);
    if (v36(v35, 1LL, v8) != 1)
    {
      uint64_t v39 = v55;
      sub_100003E68(v35, v55, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      char v40 = sub_100065750((uint64_t)v17, v39, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100004090(v39, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100015764((uint64_t)v20, &qword_100355538);
      sub_100015764((uint64_t)v22, &qword_100355538);
      sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100015764((uint64_t)v13, &qword_100355538);
      if ((v40 & 1) == 0) {
        goto LABEL_18;
      }
      goto LABEL_21;
    }

    sub_100015764((uint64_t)v20, &qword_100355538);
    sub_100015764((uint64_t)v22, &qword_100355538);
    sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_17:
    sub_100015764((uint64_t)v13, &qword_10035C418);
    goto LABEL_18;
  }

  sub_100015764((uint64_t)v20, &qword_100355538);
  sub_100015764((uint64_t)v22, &qword_100355538);
  if (v36(v35, 1LL, v8) != 1) {
    goto LABEL_17;
  }
  sub_100015764((uint64_t)v13, &qword_100355538);
LABEL_21:
  uint64_t v41 = v25[8];
  uint64_t v42 = *(char *)(v34 + v41);
  uint64_t v43 = *(char *)(v56 + v41);
  if (v42 != 72)
  {
    if ((_DWORD)v43 == 72 || qword_1002C93B0[v42] != qword_1002C93B0[v43]) {
      goto LABEL_18;
    }
LABEL_26:
    uint64_t v44 = v54;
    uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t))(v54 + 16);
    uint64_t v46 = v51;
    uint64_t v47 = v52;
    v45(v52, v34, v51);
    uint64_t v48 = v53;
    v45(v53, v56, v46);
    uint64_t v49 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v37 = dispatch thunk of static Equatable.== infix(_:_:)(v47, v48, v46, v49);
    uint64_t v50 = *(void (**)(char *, uint64_t))(v44 + 8);
    v50(v48, v46);
    v50(v47, v46);
    return v37 & 1;
  }

  if ((_DWORD)v43 == 72) {
    goto LABEL_26;
  }
LABEL_18:
  char v37 = 0;
  return v37 & 1;
}

uint64_t sub_100116554(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v51 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0LL);
  uint64_t v12 = v11[5];
  uint64_t v13 = (double *)(a1 + v12);
  char v14 = *(_BYTE *)(a1 + v12 + 8);
  uint64_t v15 = (double *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16) {
      goto LABEL_47;
    }
  }

  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if ((v16 & 1) != 0) {
      goto LABEL_47;
    }
  }

  uint64_t v17 = v11[6];
  uint64_t v18 = (double *)(a1 + v17);
  char v19 = *(_BYTE *)(a1 + v17 + 8);
  uint64_t v20 = (double *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21) {
      goto LABEL_47;
    }
  }

  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if ((v21 & 1) != 0) {
      goto LABEL_47;
    }
  }

  uint64_t v22 = v11[7];
  int v23 = *(unsigned __int8 *)(a1 + v22);
  int v24 = *(unsigned __int8 *)(a2 + v22);
  if (v23 == 3)
  {
    if (v24 != 3) {
      goto LABEL_47;
    }
  }

  else if (v24 == 3 || v23 != v24)
  {
    goto LABEL_47;
  }

  uint64_t v26 = v11[8];
  int v27 = *(unsigned __int8 *)(a1 + v26);
  int v28 = *(unsigned __int8 *)(a2 + v26);
  if (v27 == 4)
  {
    if (v28 != 4) {
      goto LABEL_47;
    }
  }

  else if (v28 == 4 || v27 != v28)
  {
    goto LABEL_47;
  }

  uint64_t v30 = v11[9];
  char v31 = (double *)(a1 + v30);
  char v32 = *(_BYTE *)(a1 + v30 + 8);
  int v33 = (double *)(a2 + v30);
  int v34 = *(unsigned __int8 *)(a2 + v30 + 8);
  if ((v32 & 1) != 0)
  {
    if (!v34) {
      goto LABEL_47;
    }
  }

  else
  {
    if (*v31 != *v33) {
      LOBYTE(v34) = 1;
    }
    if ((v34 & 1) != 0) {
      goto LABEL_47;
    }
  }

  uint64_t v35 = v11[10];
  int v36 = *(unsigned __int8 *)(a1 + v35);
  int v37 = *(unsigned __int8 *)(a2 + v35);
  if (v36 == 4)
  {
    if (v37 != 4) {
      goto LABEL_47;
    }
    goto LABEL_40;
  }

  char v38 = 0;
  if (v37 != 4 && v36 == v37)
  {
LABEL_40:
    uint64_t v39 = v11[11];
    int v40 = *(unsigned __int8 *)(a1 + v39);
    int v41 = *(unsigned __int8 *)(a2 + v39);
    if (v40 != 2)
    {
      if (v41 == 2 || ((((v41 & 1) == 0) ^ v40) & 1) == 0) {
        goto LABEL_47;
      }
LABEL_45:
      uint64_t v42 = v11[12];
      uint64_t v43 = (float *)(a1 + v42);
      char v44 = *(_BYTE *)(a1 + v42 + 4);
      uint64_t v45 = (float *)(a2 + v42);
      int v46 = *(unsigned __int8 *)(a2 + v42 + 4);
      if ((v44 & 1) != 0)
      {
        if (!v46) {
          goto LABEL_47;
        }
      }

      else
      {
        if (*v43 != *v45) {
          LOBYTE(v46) = 1;
        }
        if ((v46 & 1) != 0) {
          goto LABEL_47;
        }
      }

      uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v48(v10, a1, v4);
      v48(v8, a2, v4);
      uint64_t v49 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v38 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v49);
      uint64_t v50 = *(void (**)(char *, uint64_t))(v5 + 8);
      v50(v8, v4);
      v50(v10, v4);
      return v38 & 1;
    }

    if (v41 == 2) {
      goto LABEL_45;
    }
LABEL_47:
    char v38 = 0;
  }

  return v38 & 1;
}

uint64_t sub_1001167FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v40 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL);
  uint64_t v12 = v11[5];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = *(void *)(a1 + v12 + 8);
  uint64_t v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  if (!v14)
  {
    if (v16) {
      goto LABEL_37;
    }
    goto LABEL_10;
  }

  if (!v16) {
    goto LABEL_37;
  }
  BOOL v17 = *v13 == *v15 && v14 == v16;
  if (v17 || (char v18 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_10:
    uint64_t v19 = v11[6];
    uint64_t v20 = (void *)(a1 + v19);
    uint64_t v21 = *(void *)(a1 + v19 + 8);
    uint64_t v22 = (void *)(a2 + v19);
    uint64_t v23 = v22[1];
    if (v21)
    {
      if (v23)
      {
        if (*v20 != *v22 || v21 != v23)
        {
          char v18 = 0;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            return v18 & 1;
          }
        }

LABEL_19:
        uint64_t v25 = v11[7];
        int v26 = *(unsigned __int8 *)(a1 + v25);
        int v27 = *(unsigned __int8 *)(a2 + v25);
        if (v26 == 67)
        {
          if (v27 != 67) {
            goto LABEL_37;
          }
        }

        else if (v27 == 67 || v26 != v27)
        {
          goto LABEL_37;
        }

        uint64_t v29 = v11[8];
        int v30 = *(unsigned __int8 *)(a1 + v29);
        int v31 = *(unsigned __int8 *)(a2 + v29);
        if (v30 == 5)
        {
          if (v31 != 5) {
            goto LABEL_37;
          }
        }

        else if (v31 == 5 || v30 != v31)
        {
          goto LABEL_37;
        }

        uint64_t v33 = v11[9];
        int v34 = *(unsigned __int8 *)(a1 + v33);
        int v35 = *(unsigned __int8 *)(a2 + v33);
        if (v34 == 3)
        {
          if (v35 != 3) {
            goto LABEL_37;
          }
        }

        else
        {
          char v18 = 0;
          if (v35 == 3 || v34 != v35) {
            return v18 & 1;
          }
        }

        int v37 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v37(v10, a1, v4);
        v37(v8, a2, v4);
        uint64_t v38 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
        char v18 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v38);
        uint64_t v39 = *(void (**)(char *, uint64_t))(v5 + 8);
        v39(v8, v4);
        v39(v10, v4);
        return v18 & 1;
      }
    }

    else if (!v23)
    {
      goto LABEL_19;
    }

  __break(1u);
}

LABEL_37:
    char v18 = 0;
  }

  return v18 & 1;
}

        int v35 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v35(v10, a1, v4);
        v35(v8, a2, v4);
        int v36 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
        int v27 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v36);
        int v37 = *(void (**)(char *, uint64_t))(v5 + 8);
        v37(v8, v4);
        v37(v10, v4);
        return v27 & 1;
      }
    }

    else if (!v32)
    {
      goto LABEL_37;
    }

    int v24 = 0;
  }

  return v24 & 1;
}

uint64_t sub_100116A30(uint64_t a1, uint64_t a2)
{
  uint64_t v123 = a2;
  uint64_t v3 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v103 = *(void *)(v3 - 8);
  uint64_t v104 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v102 = (char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v101 = (char *)&v99 - v6;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL);
  uint64_t v107 = *(void *)(v7 - 8);
  uint64_t v108 = v7;
  __chkstk_darwin(v7);
  uint64_t v100 = (uint64_t)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v106 = sub_100003A0C(&qword_10035C4E0);
  __chkstk_darwin(v106);
  uint64_t v109 = (uint64_t)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100003A0C(&qword_1003555A8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v105 = (uint64_t)&v99 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v111 = (char *)&v99 - v14;
  __chkstk_darwin(v13);
  uint64_t v112 = (char *)&v99 - v15;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v116 = (uint64_t)&v99 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_100003A0C(&qword_10035C418);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v113 = (uint64_t)&v99 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v117 = (uint64_t)&v99 - v23;
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v99 - v24;
  uint64_t v26 = sub_100003A0C(&qword_100355538);
  uint64_t v27 = __chkstk_darwin(v26);
  uint64_t v110 = (uint64_t)&v99 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v119 = (uint64_t)&v99 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v114 = (uint64_t)&v99 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v115 = (uint64_t)&v99 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v121 = (uint64_t)&v99 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v122 = (uint64_t)&v99 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  int v41 = (char *)&v99 - v40;
  uint64_t v42 = __chkstk_darwin(v39);
  char v44 = (char *)&v99 - v43;
  __chkstk_darwin(v42);
  int v46 = (char *)&v99 - v45;
  uint64_t v47 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0LL);
  uint64_t v48 = *(int *)(v47 + 20);
  uint64_t v120 = a1;
  sub_10000E6C0(a1 + v48, (uint64_t)v46, &qword_100355538);
  uint64_t v118 = (int *)v47;
  sub_10000E6C0(v123 + *(int *)(v47 + 20), (uint64_t)v44, &qword_100355538);
  uint64_t v49 = v19;
  uint64_t v50 = (uint64_t)&v25[*(int *)(v19 + 48)];
  sub_10000E6C0((uint64_t)v46, (uint64_t)v25, &qword_100355538);
  sub_10000E6C0((uint64_t)v44, v50, &qword_100355538);
  uint64_t v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  uint64_t v52 = v16;
  if (v51((uint64_t)v25, 1LL, v16) == 1)
  {
    sub_100015764((uint64_t)v44, &qword_100355538);
    sub_100015764((uint64_t)v46, &qword_100355538);
    if (v51(v50, 1LL, v16) == 1)
    {
      sub_100015764((uint64_t)v25, &qword_100355538);
      goto LABEL_8;
    }

uint64_t sub_100117594(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v38 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0LL);
  uint64_t v12 = v11;
  uint64_t v13 = v11[5];
  int v14 = *(unsigned __int8 *)(a1 + v13);
  int v15 = *(unsigned __int8 *)(a2 + v13);
  if (v14 == 5)
  {
    if (v15 != 5) {
      goto LABEL_35;
    }
  }

  else if (v15 == 5 || v14 != v15)
  {
    goto LABEL_35;
  }

  uint64_t v17 = v11[6];
  int v18 = *(unsigned __int8 *)(a1 + v17);
  int v19 = *(unsigned __int8 *)(a2 + v17);
  if (v18 == 3)
  {
    if (v19 != 3) {
      goto LABEL_35;
    }
  }

  else if (v19 == 3 || v18 != v19)
  {
    goto LABEL_35;
  }

  uint64_t v21 = v11[7];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = *(void *)(a1 + v21 + 8);
  uint64_t v24 = (void *)(a2 + v21);
  uint64_t v25 = v24[1];
  if (!v23)
  {
    if (v25) {
      goto LABEL_35;
    }
LABEL_26:
    uint64_t v28 = v12[8];
    uint64_t v29 = (void *)(a1 + v28);
    uint64_t v30 = *(void *)(a1 + v28 + 8);
    uint64_t v31 = (void *)(a2 + v28);
    uint64_t v32 = v31[1];
    if (v30)
    {
      if (v32)
      {
        if (*v29 != *v31 || v30 != v32)
        {
          char v27 = 0;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v29, v30) & 1) == 0) {
            return v27 & 1;
          }
        }

LABEL_35:
    char v27 = 0;
    return v27 & 1;
  }

  if (!v25) {
    goto LABEL_35;
  }
  if (*v22 == *v24 && v23 == v25) {
    goto LABEL_26;
  }
  char v27 = 0;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v22, v23) & 1) != 0) {
    goto LABEL_26;
  }
  return v27 & 1;
}

    uint64_t v33 = *(void *)(a2 + 72);
    sub_10005F2F8(v29, v30);
    sub_10005F2F8(v33, v32);
    sub_10005F30C(v29, v30);
    sub_10005F30C(v33, v32);
    return 0LL;
  }

  if (v32 >> 60 == 15) {
    goto LABEL_35;
  }
  uint64_t v34 = v29;
  uint64_t v61 = v29;
  uint64_t v35 = v31;
  sub_10005F2F8(v34, v30);
  swift_retain(a1);
  swift_retain(a2);
  sub_10005F2F8(v35, v32);
  sub_1000600A8(v61, v30);
  uint64_t v60 = v36;
  sub_10005F30C(v35, v32);
  sub_10005F30C(v61, v30);
  if ((v60 & 1) == 0) {
    goto LABEL_73;
  }
LABEL_37:
  swift_beginAccess(a1 + 88, &v78, 0LL, 0LL);
  uint64_t v37 = *(char *)(a1 + 88);
  swift_beginAccess(a2 + 88, &v77, 0LL, 0LL);
  uint64_t v38 = *(char *)(a2 + 88);
  if (v37 == 3)
  {
    if ((_DWORD)v38 != 3) {
      goto LABEL_73;
    }
  }

  else if ((_DWORD)v38 == 3 || qword_1002DA040[v37] != qword_1002DA040[v38])
  {
    goto LABEL_73;
  }

  swift_beginAccess(a1 + 96, &v76, 0LL, 0LL);
  uint64_t v39 = *(void *)(a1 + 96);
  uint64_t v40 = *(_BYTE *)(a1 + 104);
  swift_beginAccess(a2 + 96, &v75, 0LL, 0LL);
  if ((v40 & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 104) & 1) == 0) {
      goto LABEL_73;
    }
  }

  else if ((*(_BYTE *)(a2 + 104) & 1) != 0 || v39 != *(void *)(a2 + 96))
  {
    goto LABEL_73;
  }

  swift_beginAccess(a1 + 112, &v74, 0LL, 0LL);
  int v41 = *(void *)(a1 + 112);
  uint64_t v42 = *(_BYTE *)(a1 + 120);
  swift_beginAccess(a2 + 112, &v73, 0LL, 0LL);
  if ((v42 & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 120) & 1) == 0) {
      goto LABEL_73;
    }
  }

  else if ((*(_BYTE *)(a2 + 120) & 1) != 0 || v41 != *(void *)(a2 + 112))
  {
    goto LABEL_73;
  }

  swift_beginAccess(a1 + 124, &v72, 0LL, 0LL);
  uint64_t v43 = *(_DWORD *)(a1 + 124);
  char v44 = *(_BYTE *)(a1 + 128);
  swift_beginAccess(a2 + 124, &v71, 0LL, 0LL);
  if ((v44 & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 128) & 1) == 0) {
      goto LABEL_73;
    }
  }

  else if ((*(_BYTE *)(a2 + 128) & 1) != 0 || v43 != *(_DWORD *)(a2 + 124))
  {
    goto LABEL_73;
  }

  swift_beginAccess(a1 + 136, &v70, 0LL, 0LL);
  uint64_t v45 = *(void *)(a1 + 136);
  int v46 = *(void *)(a1 + 144);
  swift_beginAccess(a2 + 136, &v69, 0LL, 0LL);
  uint64_t v47 = *(void *)(a2 + 144);
  if (v46)
  {
    if (!v47
      || (v45 != *(void *)(a2 + 136) || v46 != v47)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(v45, v46) & 1) == 0)
    {
      goto LABEL_73;
    }
  }

  else if (v47)
  {
    goto LABEL_73;
  }

  swift_beginAccess(a1 + 152, &v68, 0LL, 0LL);
  uint64_t v48 = *(void *)(a1 + 152);
  uint64_t v49 = *(void *)(a1 + 160);
  swift_beginAccess(a2 + 152, &v67, 0LL, 0LL);
  uint64_t v50 = *(void *)(a2 + 160);
  if (!v49)
  {
    if (!v50) {
      goto LABEL_69;
    }
LABEL_73:
    swift_release(a1);
    swift_release(a2);
    return 0LL;
  }

  if (!v50
    || (v48 != *(void *)(a2 + 152) || v49 != v50) && (_stringCompareWithSmolCheck(_:_:expecting:)(v48, v49) & 1) == 0)
  {
    goto LABEL_73;
  }

  swift_bridgeObjectRelease(v3);
LABEL_36:
  v65[2] = sub_100003A0C(&qword_100368120);
  v65[3] = sub_100298788();
  uint64_t v64 = v3;
  (*(void (**)(uint64_t *, void))(*(void *)v1 + 304LL))(&v64, 0LL);

  sub_10001882C(&v64);
LABEL_37:
  swift_unknownObjectRelease(v17);
}

uint64_t sub_100117798(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v51 = a4;
  char v53 = a3;
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v48 = *(void *)(v6 - 8);
  uint64_t v49 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v47 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  int v46 = (char *)&v46 - v9;
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v50 = (uint64_t)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100003A0C(&qword_10035C418);
  __chkstk_darwin(v13);
  int v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100003A0C(&qword_100355538);
  uint64_t v17 = __chkstk_darwin(v16);
  int v19 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v46 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v46 - v23;
  uint64_t v25 = ((uint64_t (*)(void))v53)(0LL);
  uint64_t v26 = *(int *)(v25 + 24);
  uint64_t v52 = a1;
  uint64_t v27 = (uint64_t)a1 + v26;
  uint64_t v28 = v25;
  sub_10000E6C0(v27, (uint64_t)v24, &qword_100355538);
  uint64_t v29 = *(int *)(v28 + 24);
  char v53 = a2;
  sub_10000E6C0((uint64_t)a2 + v29, (uint64_t)v22, &qword_100355538);
  uint64_t v30 = (uint64_t)&v15[*(int *)(v13 + 48)];
  sub_10000E6C0((uint64_t)v24, (uint64_t)v15, &qword_100355538);
  sub_10000E6C0((uint64_t)v22, v30, &qword_100355538);
  uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v31((uint64_t)v15, 1LL, v10) == 1)
  {
    sub_100015764((uint64_t)v22, &qword_100355538);
    sub_100015764((uint64_t)v24, &qword_100355538);
    if (v31(v30, 1LL, v10) == 1)
    {
      sub_100015764((uint64_t)v15, &qword_100355538);
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  sub_10000E6C0((uint64_t)v15, (uint64_t)v19, &qword_100355538);
  if (v31(v30, 1LL, v10) == 1)
  {
    sub_100015764((uint64_t)v22, &qword_100355538);
    sub_100015764((uint64_t)v24, &qword_100355538);
    sub_100004090((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    sub_100015764((uint64_t)v15, &qword_10035C418);
LABEL_10:
    char v43 = 0;
    return v43 & 1;
  }

  uint64_t v32 = v50;
  sub_100003E68(v30, v50, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v33 = sub_100065750((uint64_t)v19, v32, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090(v32, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v22, &qword_100355538);
  sub_100015764((uint64_t)v24, &qword_100355538);
  sub_100004090((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v15, &qword_100355538);
  if ((v33 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v34 = v52;
  uint64_t v35 = v53;
  if ((sub_10010B1FC(*v52, *v53, v51) & 1) == 0) {
    goto LABEL_10;
  }
  uint64_t v36 = (char *)v34 + *(int *)(v28 + 20);
  uint64_t v38 = v48;
  uint64_t v37 = v49;
  uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
  uint64_t v40 = v46;
  v39(v46, v36, v49);
  int v41 = v47;
  v39(v47, (char *)v35 + *(int *)(v28 + 20), v37);
  uint64_t v42 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v43 = dispatch thunk of static Equatable.== infix(_:_:)(v40, v41, v37, v42);
  char v44 = *(void (**)(char *, uint64_t))(v38 + 8);
  v44(v41, v37);
  v44(v40, v37);
  return v43 & 1;
}

uint64_t sub_100117B94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v29 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0LL);
  uint64_t v12 = v11[5];
  uint64_t v13 = *(char *)(a1 + v12);
  uint64_t v14 = *(char *)(a2 + v12);
  if (v13 == 5)
  {
    if ((_DWORD)v14 != 5) {
      goto LABEL_22;
    }
  }

  else if ((_DWORD)v14 == 5 || qword_1002C95F0[v13] != qword_1002C95F0[v14])
  {
    goto LABEL_22;
  }

  uint64_t v15 = v11[6];
  uint64_t v16 = *(char *)(a1 + v15);
  uint64_t v17 = *(char *)(a2 + v15);
  if (v16 == 5)
  {
    if ((_DWORD)v17 != 5) {
      goto LABEL_22;
    }
  }

  else if ((_DWORD)v17 == 5 || qword_1002C95F0[v16] != qword_1002C95F0[v17])
  {
    goto LABEL_22;
  }

  uint64_t v18 = v11[7];
  int v19 = *(unsigned __int8 *)(a1 + v18);
  int v20 = *(unsigned __int8 *)(a2 + v18);
  if (v19 == 2)
  {
    if (v20 != 2) {
      goto LABEL_22;
    }
  }

  else if (v20 == 2 || ((((v20 & 1) == 0) ^ v19) & 1) == 0)
  {
    goto LABEL_22;
  }

  uint64_t v21 = v11[8];
  int v22 = *(unsigned __int8 *)(a1 + v21);
  int v23 = *(unsigned __int8 *)(a2 + v21);
  if (v22 == 2)
  {
    if (v23 == 2) {
      goto LABEL_21;
    }
LABEL_22:
    char v26 = 0;
    return v26 & 1;
  }

  if (v23 == 2 || ((((v23 & 1) == 0) ^ v22) & 1) == 0) {
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v24(v10, a1, v4);
  v24(v8, a2, v4);
  uint64_t v25 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v26 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v25);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v5 + 8);
  v27(v8, v4);
  v27(v10, v4);
  return v26 & 1;
}

uint64_t sub_100117D9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0LL) + 20);
  uint64_t v12 = (_DWORD *)(a1 + v11);
  char v13 = *(_BYTE *)(a1 + v11 + 4);
  uint64_t v14 = (_DWORD *)(a2 + v11);
  int v15 = *(unsigned __int8 *)(a2 + v11 + 4);
  if ((v13 & 1) == 0)
  {
    if (*v12 != *v14) {
      LOBYTE(v15) = 1;
    }
    if ((v15 & 1) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v17(v10, a1, v4);
    v17(v8, a2, v4);
    uint64_t v18 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v16 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v18);
    int v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v8, v4);
    v19(v10, v4);
    return v16 & 1;
  }

  if (v15) {
    goto LABEL_7;
  }
LABEL_3:
  char v16 = 0;
  return v16 & 1;
}

uint64_t sub_100117EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v120 = a1;
  uint64_t v121 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v101 = *(void *)(v2 - 8);
  uint64_t v102 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v100 = (char *)&v99 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v99 = (char *)&v99 - v5;
  uint64_t v112 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0LL);
  uint64_t v105 = *(void *)(v112 - 8);
  __chkstk_darwin(v112);
  uint64_t v103 = (uint64_t)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v104 = sub_100003A0C(&qword_10035C468);
  __chkstk_darwin(v104);
  uint64_t v106 = (uint64_t)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100003A0C(&qword_100355620);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v111 = (char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v109 = (uint64_t)&v99 - v12;
  __chkstk_darwin(v11);
  uint64_t v107 = (uint64_t)&v99 - v13;
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0LL);
  uint64_t v114 = *(void *)(v14 - 8);
  uint64_t v115 = v14;
  __chkstk_darwin(v14);
  uint64_t v108 = (uint64_t)&v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v113 = sub_100003A0C(&qword_10035C470);
  __chkstk_darwin(v113);
  uint64_t v116 = (uint64_t)&v99 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100003A0C(&qword_100355618);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v110 = (uint64_t)&v99 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v118 = (uint64_t)&v99 - v21;
  __chkstk_darwin(v20);
  uint64_t v119 = (uint64_t)&v99 - v22;
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  char v26 = (char *)&v99 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = sub_100003A0C(&qword_10035C418);
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v99 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = sub_100003A0C(&qword_100355538);
  uint64_t v31 = __chkstk_darwin(v30);
  char v33 = (char *)&v99 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = __chkstk_darwin(v31);
  uint64_t v36 = (char *)&v99 - v35;
  __chkstk_darwin(v34);
  uint64_t v38 = (char *)&v99 - v37;
  uint64_t v39 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0LL);
  sub_10000E6C0(v120 + *(int *)(v39 + 20), (uint64_t)v38, &qword_100355538);
  uint64_t v117 = (int *)v39;
  sub_10000E6C0(v121 + *(int *)(v39 + 20), (uint64_t)v36, &qword_100355538);
  uint64_t v40 = (uint64_t)&v29[*(int *)(v27 + 48)];
  sub_10000E6C0((uint64_t)v38, (uint64_t)v29, &qword_100355538);
  sub_10000E6C0((uint64_t)v36, v40, &qword_100355538);
  int v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  if (v41((uint64_t)v29, 1LL, v23) == 1)
  {
    sub_100015764((uint64_t)v36, &qword_100355538);
    sub_100015764((uint64_t)v38, &qword_100355538);
    if (v41(v40, 1LL, v23) == 1)
    {
      sub_100015764((uint64_t)v29, &qword_100355538);
      goto LABEL_8;
    }

uint64_t sub_10011893C( uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(char *, char *))
{
  char v53 = a4;
  int v54 = a5;
  uint64_t v56 = a3;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v50 = *(void *)(v7 - 8);
  uint64_t v51 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v49 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v48 = (char *)&v47 - v10;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v52 = (uint64_t)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100003A0C(&qword_10035C418);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100003A0C(&qword_100355538);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v47 - v22;
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v47 - v24;
  uint64_t v26 = ((uint64_t (*)(void))v56)(0LL);
  uint64_t v27 = *(int *)(v26 + 24);
  uint64_t v55 = a1;
  uint64_t v28 = (uint64_t)a1 + v27;
  uint64_t v29 = v26;
  sub_10000E6C0(v28, (uint64_t)v25, &qword_100355538);
  uint64_t v30 = *(int *)(v29 + 24);
  uint64_t v56 = a2;
  sub_10000E6C0((uint64_t)a2 + v30, (uint64_t)v23, &qword_100355538);
  uint64_t v31 = (uint64_t)&v16[*(int *)(v14 + 48)];
  sub_10000E6C0((uint64_t)v25, (uint64_t)v16, &qword_100355538);
  sub_10000E6C0((uint64_t)v23, v31, &qword_100355538);
  uint64_t v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (v32((uint64_t)v16, 1LL, v11) == 1)
  {
    sub_100015764((uint64_t)v23, &qword_100355538);
    sub_100015764((uint64_t)v25, &qword_100355538);
    if (v32(v31, 1LL, v11) == 1)
    {
      sub_100015764((uint64_t)v16, &qword_100355538);
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  sub_10000E6C0((uint64_t)v16, (uint64_t)v20, &qword_100355538);
  if (v32(v31, 1LL, v11) == 1)
  {
    sub_100015764((uint64_t)v23, &qword_100355538);
    sub_100015764((uint64_t)v25, &qword_100355538);
    sub_100004090((uint64_t)v20, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    sub_100015764((uint64_t)v16, &qword_10035C418);
LABEL_10:
    char v44 = 0;
    return v44 & 1;
  }

  uint64_t v33 = v52;
  sub_100003E68(v31, v52, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v34 = sub_100065750((uint64_t)v20, v33, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090(v33, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v23, &qword_100355538);
  sub_100015764((uint64_t)v25, &qword_100355538);
  sub_100004090((uint64_t)v20, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v16, &qword_100355538);
  if ((v34 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v35 = v55;
  uint64_t v36 = v56;
  if ((sub_10010B338(*v55, *v56, v53, v54) & 1) == 0) {
    goto LABEL_10;
  }
  uint64_t v37 = (char *)v35 + *(int *)(v29 + 20);
  uint64_t v39 = v50;
  uint64_t v38 = v51;
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
  int v41 = v48;
  v40(v48, v37, v51);
  uint64_t v42 = v49;
  v40(v49, (char *)v36 + *(int *)(v29 + 20), v38);
  uint64_t v43 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v44 = dispatch thunk of static Equatable.== infix(_:_:)(v41, v42, v38, v43);
  uint64_t v45 = *(void (**)(char *, uint64_t))(v39 + 8);
  v45(v42, v38);
  v45(v41, v38);
  return v44 & 1;
}

uint64_t sub_100118D38(uint64_t a1, uint64_t a2)
{
  uint64_t v73 = a1;
  uint64_t v74 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v64 = *(void *)(v2 - 8);
  uint64_t v65 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v63 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  char v62 = (char *)&v61 - v5;
  uint64_t v71 = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL);
  uint64_t v68 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v61 = (uint64_t)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v67 = sub_100003A0C(&qword_10035C4D0);
  __chkstk_darwin(v67);
  uint64_t v72 = (uint64_t)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100003A0C(&qword_1003555B8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v66 = (uint64_t)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v69 = (uint64_t)&v61 - v12;
  __chkstk_darwin(v11);
  uint64_t v70 = (uint64_t)&v61 - v13;
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100003A0C(&qword_10035C418);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100003A0C(&qword_100355538);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v61 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v61 - v28;
  uint64_t v30 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0LL);
  sub_10000E6C0(v73 + v30[5], (uint64_t)v29, &qword_100355538);
  sub_10000E6C0(v74 + v30[5], (uint64_t)v27, &qword_100355538);
  uint64_t v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  sub_10000E6C0((uint64_t)v29, (uint64_t)v20, &qword_100355538);
  sub_10000E6C0((uint64_t)v27, v31, &qword_100355538);
  uint64_t v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1LL, v14) == 1)
  {
    sub_100015764((uint64_t)v27, &qword_100355538);
    sub_100015764((uint64_t)v29, &qword_100355538);
    if (v32(v31, 1LL, v14) == 1)
    {
      sub_100015764((uint64_t)v20, &qword_100355538);
      goto LABEL_11;
    }

uint64_t sub_1001193E4(uint64_t a1, uint64_t a2)
{
  uint64_t v73 = a1;
  uint64_t v74 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v64 = *(void *)(v2 - 8);
  uint64_t v65 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v63 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  char v62 = (char *)&v61 - v5;
  uint64_t v71 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0LL);
  uint64_t v68 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v61 = (uint64_t)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v67 = sub_100003A0C(&qword_10035C4F0);
  __chkstk_darwin(v67);
  uint64_t v72 = (uint64_t)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100003A0C(&qword_100355598);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v66 = (uint64_t)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v69 = (uint64_t)&v61 - v12;
  __chkstk_darwin(v11);
  uint64_t v70 = (uint64_t)&v61 - v13;
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100003A0C(&qword_10035C418);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100003A0C(&qword_100355538);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v61 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v61 - v28;
  uint64_t v30 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0LL);
  sub_10000E6C0(v73 + v30[5], (uint64_t)v29, &qword_100355538);
  sub_10000E6C0(v74 + v30[5], (uint64_t)v27, &qword_100355538);
  uint64_t v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  sub_10000E6C0((uint64_t)v29, (uint64_t)v20, &qword_100355538);
  sub_10000E6C0((uint64_t)v27, v31, &qword_100355538);
  uint64_t v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1LL, v14) == 1)
  {
    sub_100015764((uint64_t)v27, &qword_100355538);
    sub_100015764((uint64_t)v29, &qword_100355538);
    if (v32(v31, 1LL, v14) == 1)
    {
      sub_100015764((uint64_t)v20, &qword_100355538);
      goto LABEL_11;
    }

uint64_t sub_100119A94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v69 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL);
  uint64_t v12 = v11[5];
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 3)
  {
    if (v14 != 3) {
      goto LABEL_64;
    }
  }

  else if (v14 == 3 || v13 != v14)
  {
    goto LABEL_64;
  }

  uint64_t v16 = v11[6];
  uint64_t v17 = (float *)(a1 + v16);
  char v18 = *(_BYTE *)(a1 + v16 + 4);
  uint64_t v19 = (float *)(a2 + v16);
  int v20 = *(unsigned __int8 *)(a2 + v16 + 4);
  if ((v18 & 1) != 0)
  {
    if (!v20) {
      goto LABEL_64;
    }
  }

  else
  {
    if (*v17 != *v19) {
      LOBYTE(v20) = 1;
    }
    if ((v20 & 1) != 0) {
      goto LABEL_64;
    }
  }

  uint64_t v21 = v11[7];
  uint64_t v22 = (float *)(a1 + v21);
  char v23 = *(_BYTE *)(a1 + v21 + 4);
  uint64_t v24 = (float *)(a2 + v21);
  int v25 = *(unsigned __int8 *)(a2 + v21 + 4);
  if ((v23 & 1) != 0)
  {
    if (!v25) {
      goto LABEL_64;
    }
  }

  else
  {
    if (*v22 != *v24) {
      LOBYTE(v25) = 1;
    }
    if ((v25 & 1) != 0) {
      goto LABEL_64;
    }
  }

  uint64_t v26 = v11[8];
  uint64_t v27 = (float *)(a1 + v26);
  char v28 = *(_BYTE *)(a1 + v26 + 4);
  uint64_t v29 = (float *)(a2 + v26);
  int v30 = *(unsigned __int8 *)(a2 + v26 + 4);
  if ((v28 & 1) != 0)
  {
    if (!v30) {
      goto LABEL_64;
    }
  }

  else
  {
    if (*v27 != *v29) {
      LOBYTE(v30) = 1;
    }
    if ((v30 & 1) != 0) {
      goto LABEL_64;
    }
  }

  uint64_t v31 = v11[9];
  uint64_t v32 = (float *)(a1 + v31);
  char v33 = *(_BYTE *)(a1 + v31 + 4);
  uint64_t v34 = (float *)(a2 + v31);
  int v35 = *(unsigned __int8 *)(a2 + v31 + 4);
  if ((v33 & 1) != 0)
  {
    if (!v35) {
      goto LABEL_64;
    }
  }

  else
  {
    if (*v32 != *v34) {
      LOBYTE(v35) = 1;
    }
    if ((v35 & 1) != 0) {
      goto LABEL_64;
    }
  }

  uint64_t v36 = v11[10];
  char v37 = (float *)(a1 + v36);
  char v38 = *(_BYTE *)(a1 + v36 + 4);
  uint64_t v39 = (float *)(a2 + v36);
  int v40 = *(unsigned __int8 *)(a2 + v36 + 4);
  if ((v38 & 1) != 0)
  {
    if (!v40) {
      goto LABEL_64;
    }
  }

  else
  {
    if (*v37 != *v39) {
      LOBYTE(v40) = 1;
    }
    if ((v40 & 1) != 0) {
      goto LABEL_64;
    }
  }

  uint64_t v41 = v11[11];
  char v42 = (float *)(a1 + v41);
  char v43 = *(_BYTE *)(a1 + v41 + 4);
  int v44 = (float *)(a2 + v41);
  int v45 = *(unsigned __int8 *)(a2 + v41 + 4);
  if ((v43 & 1) != 0)
  {
    if (!v45) {
      goto LABEL_64;
    }
  }

  else
  {
    if (*v42 != *v44) {
      LOBYTE(v45) = 1;
    }
    if ((v45 & 1) != 0) {
      goto LABEL_64;
    }
  }

  uint64_t v46 = v11[12];
  uint64_t v47 = (float *)(a1 + v46);
  char v48 = *(_BYTE *)(a1 + v46 + 4);
  uint64_t v49 = (float *)(a2 + v46);
  int v50 = *(unsigned __int8 *)(a2 + v46 + 4);
  if ((v48 & 1) != 0)
  {
    if (!v50) {
      goto LABEL_64;
    }
  }

  else
  {
    if (*v47 != *v49) {
      LOBYTE(v50) = 1;
    }
    if ((v50 & 1) != 0) {
      goto LABEL_64;
    }
  }

  uint64_t v51 = v11[13];
  uint64_t v52 = (float *)(a1 + v51);
  char v53 = *(_BYTE *)(a1 + v51 + 4);
  uint64_t v54 = (float *)(a2 + v51);
  int v55 = *(unsigned __int8 *)(a2 + v51 + 4);
  if ((v53 & 1) != 0)
  {
    if (!v55) {
      goto LABEL_64;
    }
  }

  else
  {
    if (*v52 != *v54) {
      LOBYTE(v55) = 1;
    }
    if ((v55 & 1) != 0) {
      goto LABEL_64;
    }
  }

  uint64_t v56 = v11[14];
  int v57 = *(unsigned __int8 *)(a1 + v56);
  int v58 = *(unsigned __int8 *)(a2 + v56);
  if (v57 == 8)
  {
    if (v58 == 8) {
      goto LABEL_62;
    }
LABEL_64:
    char v59 = 0;
    return v59 & 1;
  }

  char v59 = 0;
  if (v58 != 8 && v57 == v58)
  {
LABEL_62:
    uint64_t v60 = v11[15];
    uint64_t v61 = (float *)(a1 + v60);
    char v62 = *(_BYTE *)(a1 + v60 + 4);
    uint64_t v63 = (float *)(a2 + v60);
    int v64 = *(unsigned __int8 *)(a2 + v60 + 4);
    if ((v62 & 1) != 0)
    {
      if (!v64) {
        goto LABEL_64;
      }
    }

    else
    {
      if (*v61 != *v63) {
        LOBYTE(v64) = 1;
      }
      if ((v64 & 1) != 0) {
        goto LABEL_64;
      }
    }

    uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v66(v10, a1, v4);
    v66(v8, a2, v4);
    uint64_t v67 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v59 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v67);
    uint64_t v68 = *(void (**)(char *, uint64_t))(v5 + 8);
    v68(v8, v4);
    v68(v10, v4);
  }

  return v59 & 1;
}

uint64_t sub_100119DDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v63 = *(void *)(v4 - 8);
  uint64_t v64 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  char v62 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v61 = (char *)&v60 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v67 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100003A0C(&qword_10035C418);
  __chkstk_darwin(v11);
  int v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100003A0C(&qword_100355538);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  int v20 = (char *)&v60 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v60 - v21;
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL);
  uint64_t v24 = *(int *)(v23 + 20);
  uint64_t v65 = a1;
  uint64_t v25 = a1 + v24;
  uint64_t v26 = (int *)v23;
  sub_10000E6C0(v25, (uint64_t)v22, &qword_100355538);
  uint64_t v27 = v26[5];
  uint64_t v66 = a2;
  sub_10000E6C0(a2 + v27, (uint64_t)v20, &qword_100355538);
  uint64_t v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E6C0((uint64_t)v22, (uint64_t)v13, &qword_100355538);
  sub_10000E6C0((uint64_t)v20, v28, &qword_100355538);
  uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1LL, v8) == 1)
  {
    sub_100015764((uint64_t)v20, &qword_100355538);
    sub_100015764((uint64_t)v22, &qword_100355538);
    if (v29(v28, 1LL, v8) == 1)
    {
      sub_100015764((uint64_t)v13, &qword_100355538);
      goto LABEL_8;
    }

uint64_t sub_10011A2F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v25 - v9;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0LL);
  uint64_t v12 = *(int *)(v11 + 20);
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 4)
  {
    if (v14 != 4) {
      goto LABEL_16;
    }
  }

  else if (v14 == 4 || v13 != v14)
  {
    goto LABEL_16;
  }

  uint64_t v16 = *(int *)(v11 + 24);
  int v17 = *(unsigned __int8 *)(a1 + v16);
  int v18 = *(unsigned __int8 *)(a2 + v16);
  if (v17 != 4)
  {
    if (v18 != 4 && v17 == v18) {
      goto LABEL_11;
    }
LABEL_16:
    char v21 = 0;
    return v21 & 1;
  }

  if (v18 != 4) {
    goto LABEL_16;
  }
LABEL_11:
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v19(v10, a1, v4);
  v19(v8, a2, v4);
  uint64_t v20 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v21 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v20);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
  v22(v8, v4);
  v22(v10, v4);
  return v21 & 1;
}

uint64_t sub_10011A460(uint64_t a1, uint64_t a2)
{
  uint64_t v103 = a1;
  uint64_t v104 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v85 = *(void *)(v2 - 8);
  uint64_t v86 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  char v84 = (char *)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v83 = (char *)&v82 - v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL);
  uint64_t v89 = *(void *)(v6 - 8);
  uint64_t v90 = v6;
  __chkstk_darwin(v6);
  uint64_t v82 = (uint64_t)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v88 = sub_100003A0C(&qword_10035C420);
  __chkstk_darwin(v88);
  uint64_t v95 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100003A0C(&qword_100355668);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v92 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v93 = (char *)&v82 - v13;
  __chkstk_darwin(v12);
  uint64_t v94 = (char *)&v82 - v14;
  uint64_t v99 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0LL);
  uint64_t v97 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  uint64_t v87 = (uint64_t)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v96 = sub_100003A0C(&qword_10035C428);
  __chkstk_darwin(v96);
  uint64_t v100 = (uint64_t)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100003A0C(&qword_100355660);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v91 = (uint64_t)&v82 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v101 = (uint64_t)&v82 - v21;
  __chkstk_darwin(v20);
  uint64_t v98 = (uint64_t)&v82 - v22;
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v82 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = sub_100003A0C(&qword_10035C418);
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v82 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = sub_100003A0C(&qword_100355538);
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v33 = (char *)&v82 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = __chkstk_darwin(v31);
  char v36 = (char *)&v82 - v35;
  __chkstk_darwin(v34);
  int v38 = (char *)&v82 - v37;
  uint64_t v39 = type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0LL);
  sub_10000E6C0(v103 + *(int *)(v39 + 20), (uint64_t)v38, &qword_100355538);
  uint64_t v102 = (int *)v39;
  sub_10000E6C0(v104 + *(int *)(v39 + 20), (uint64_t)v36, &qword_100355538);
  uint64_t v40 = (uint64_t)&v29[*(int *)(v27 + 48)];
  sub_10000E6C0((uint64_t)v38, (uint64_t)v29, &qword_100355538);
  sub_10000E6C0((uint64_t)v36, v40, &qword_100355538);
  int v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  if (v41((uint64_t)v29, 1LL, v23) == 1)
  {
    sub_100015764((uint64_t)v36, &qword_100355538);
    sub_100015764((uint64_t)v38, &qword_100355538);
    if (v41(v40, 1LL, v23) == 1)
    {
      sub_100015764((uint64_t)v29, &qword_100355538);
      goto LABEL_11;
    }

uint64_t sub_10011ADE8(uint64_t a1, uint64_t a2)
{
  uint64_t v73 = a1;
  uint64_t v74 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v64 = *(void *)(v2 - 8);
  uint64_t v65 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v63 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v62 = (char *)&v61 - v5;
  uint64_t v71 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0LL);
  uint64_t v68 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v61 = (uint64_t)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v67 = sub_100003A0C(&qword_10035C490);
  __chkstk_darwin(v67);
  uint64_t v72 = (uint64_t)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100003A0C(&qword_1003555F8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v66 = (uint64_t)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v69 = (uint64_t)&v61 - v12;
  __chkstk_darwin(v11);
  uint64_t v70 = (uint64_t)&v61 - v13;
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100003A0C(&qword_10035C418);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100003A0C(&qword_100355538);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v61 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v61 - v28;
  uint64_t v30 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0LL);
  sub_10000E6C0(v73 + v30[5], (uint64_t)v29, &qword_100355538);
  sub_10000E6C0(v74 + v30[5], (uint64_t)v27, &qword_100355538);
  uint64_t v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  sub_10000E6C0((uint64_t)v29, (uint64_t)v20, &qword_100355538);
  sub_10000E6C0((uint64_t)v27, v31, &qword_100355538);
  uint64_t v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1LL, v14) == 1)
  {
    sub_100015764((uint64_t)v27, &qword_100355538);
    sub_100015764((uint64_t)v29, &qword_100355538);
    if (v32(v31, 1LL, v14) == 1)
    {
      sub_100015764((uint64_t)v20, &qword_100355538);
      goto LABEL_11;
    }

uint64_t sub_10011B498(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v101 = *(void *)(v4 - 8);
  uint64_t v102 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v100 = (char *)&v98 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v99 = (char *)&v98 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v103 = (uint64_t)&v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100003A0C(&qword_10035C418);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100003A0C(&qword_100355538);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v98 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v98 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v98 - v21;
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0LL);
  uint64_t v24 = *(int *)(v23 + 20);
  uint64_t v104 = a1;
  uint64_t v25 = a1 + v24;
  uint64_t v26 = (int *)v23;
  sub_10000E6C0(v25, (uint64_t)v22, &qword_100355538);
  uint64_t v27 = v26[5];
  uint64_t v105 = a2;
  sub_10000E6C0(a2 + v27, (uint64_t)v20, &qword_100355538);
  uint64_t v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E6C0((uint64_t)v22, (uint64_t)v13, &qword_100355538);
  sub_10000E6C0((uint64_t)v20, v28, &qword_100355538);
  uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1LL, v8) == 1)
  {
    sub_100015764((uint64_t)v20, &qword_100355538);
    sub_100015764((uint64_t)v22, &qword_100355538);
    if (v29(v28, 1LL, v8) == 1)
    {
      sub_100015764((uint64_t)v13, &qword_100355538);
      goto LABEL_8;
    }

uint64_t sub_10011BB28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v32 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0LL);
  uint64_t v12 = v11[5];
  uint64_t v13 = (float *)(a1 + v12);
  char v14 = *(_BYTE *)(a1 + v12 + 4);
  uint64_t v15 = (float *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 4);
  if ((v14 & 1) != 0)
  {
    if (!v16) {
      goto LABEL_15;
    }
  }

  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if ((v16 & 1) != 0) {
      goto LABEL_15;
    }
  }

  uint64_t v17 = v11[6];
  uint64_t v18 = (float *)(a1 + v17);
  char v19 = *(_BYTE *)(a1 + v17 + 4);
  uint64_t v20 = (float *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 4);
  if ((v19 & 1) == 0)
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if ((v21 & 1) != 0) {
      goto LABEL_15;
    }
LABEL_13:
    uint64_t v22 = v11[7];
    uint64_t v23 = (float *)(a1 + v22);
    char v24 = *(_BYTE *)(a1 + v22 + 4);
    uint64_t v25 = (float *)(a2 + v22);
    int v26 = *(unsigned __int8 *)(a2 + v22 + 4);
    if ((v24 & 1) != 0)
    {
      if (!v26) {
        goto LABEL_15;
      }
    }

    else
    {
      if (*v23 != *v25) {
        LOBYTE(v26) = 1;
      }
      if ((v26 & 1) != 0) {
        goto LABEL_15;
      }
    }

    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v29(v10, a1, v4);
    v29(v8, a2, v4);
    uint64_t v30 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v27 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v30);
    char v31 = *(void (**)(char *, uint64_t))(v5 + 8);
    v31(v8, v4);
    v31(v10, v4);
    return v27 & 1;
  }

  if (v21) {
    goto LABEL_13;
  }
LABEL_15:
  char v27 = 0;
  return v27 & 1;
}

uint64_t sub_10011BCD8(uint64_t a1, uint64_t a2)
{
  uint64_t v84 = a1;
  uint64_t v85 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v73 = *(void *)(v2 - 8);
  uint64_t v74 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v72 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  int v71 = (char *)&v70 - v5;
  uint64_t v81 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0LL);
  uint64_t v78 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v75 = (uint64_t)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v77 = sub_100003A0C(&qword_10035C488);
  __chkstk_darwin(v77);
  uint64_t v82 = (uint64_t)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100003A0C(&qword_100355610);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v76 = (uint64_t)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v83 = (uint64_t)&v70 - v12;
  __chkstk_darwin(v11);
  uint64_t v80 = (uint64_t)&v70 - v13;
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100003A0C(&qword_10035C418);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100003A0C(&qword_100355538);
  uint64_t v22 = __chkstk_darwin(v21);
  char v24 = (char *)&v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v22);
  char v27 = (char *)&v70 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v70 - v28;
  uint64_t v30 = type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0LL);
  sub_10000E6C0(v84 + *(int *)(v30 + 20), (uint64_t)v29, &qword_100355538);
  int v79 = (int *)v30;
  sub_10000E6C0(v85 + *(int *)(v30 + 20), (uint64_t)v27, &qword_100355538);
  uint64_t v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  sub_10000E6C0((uint64_t)v29, (uint64_t)v20, &qword_100355538);
  sub_10000E6C0((uint64_t)v27, v31, &qword_100355538);
  uint64_t v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1LL, v14) == 1)
  {
    sub_100015764((uint64_t)v27, &qword_100355538);
    sub_100015764((uint64_t)v29, &qword_100355538);
    if (v32(v31, 1LL, v14) == 1)
    {
      sub_100015764((uint64_t)v20, &qword_100355538);
      goto LABEL_8;
    }

uint64_t sub_10011C404(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v40 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Battery(0LL);
  uint64_t v12 = v11[5];
  uint64_t v13 = (double *)(a1 + v12);
  char v14 = *(_BYTE *)(a1 + v12 + 8);
  uint64_t v15 = (double *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16) {
      goto LABEL_32;
    }
  }

  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if ((v16 & 1) != 0) {
      goto LABEL_32;
    }
  }

  uint64_t v17 = v11[6];
  int v18 = *(unsigned __int8 *)(a1 + v17);
  int v19 = *(unsigned __int8 *)(a2 + v17);
  if (v18 == 2)
  {
    if (v19 != 2) {
      goto LABEL_32;
    }
  }

  else if (v19 == 2 || ((((v19 & 1) == 0) ^ v18) & 1) == 0)
  {
    goto LABEL_32;
  }

  uint64_t v20 = v11[7];
  int v21 = *(unsigned __int8 *)(a1 + v20);
  int v22 = *(unsigned __int8 *)(a2 + v20);
  if (v21 == 2)
  {
    if (v22 != 2) {
      goto LABEL_32;
    }
  }

  else if (v22 == 2 || ((((v22 & 1) == 0) ^ v21) & 1) == 0)
  {
    goto LABEL_32;
  }

  uint64_t v23 = v11[8];
  int v24 = *(unsigned __int8 *)(a1 + v23);
  int v25 = *(unsigned __int8 *)(a2 + v23);
  if (v24 == 5)
  {
    if (v25 != 5) {
      goto LABEL_32;
    }
  }

  else if (v25 == 5 || v24 != v25)
  {
    goto LABEL_32;
  }

  uint64_t v27 = v11[9];
  int v28 = *(unsigned __int8 *)(a1 + v27);
  int v29 = *(unsigned __int8 *)(a2 + v27);
  if (v28 != 2)
  {
    if (v29 == 2 || ((((v29 & 1) == 0) ^ v28) & 1) == 0) {
      goto LABEL_32;
    }
LABEL_30:
    uint64_t v30 = v11[10];
    uint64_t v31 = (_DWORD *)(a1 + v30);
    char v32 = *(_BYTE *)(a1 + v30 + 4);
    uint64_t v33 = (_DWORD *)(a2 + v30);
    int v34 = *(unsigned __int8 *)(a2 + v30 + 4);
    if ((v32 & 1) != 0)
    {
      if (!v34) {
        goto LABEL_32;
      }
    }

    else
    {
      if (*v31 != *v33) {
        LOBYTE(v34) = 1;
      }
      if ((v34 & 1) != 0) {
        goto LABEL_32;
      }
    }

    uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v37(v10, a1, v4);
    v37(v8, a2, v4);
    uint64_t v38 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v35 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v38);
    uint64_t v39 = *(void (**)(char *, uint64_t))(v5 + 8);
    v39(v8, v4);
    v39(v10, v4);
    return v35 & 1;
  }

  if (v29 == 2) {
    goto LABEL_30;
  }
LABEL_32:
  char v35 = 0;
  return v35 & 1;
}

uint64_t sub_10011C654(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v46 = *(void *)(v6 - 8);
  uint64_t v47 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v45 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v44 = (char *)&v41 - v9;
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v41 = (uint64_t)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100003A0C(&qword_10035C418);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100003A0C(&qword_100355538);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v48 = (uint64_t)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  int v21 = (char *)&v41 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v41 - v22;
  uint64_t v24 = a3(0LL);
  uint64_t v25 = *(int *)(v24 + 20);
  uint64_t v42 = a1;
  sub_10000E6C0(a1 + v25, (uint64_t)v23, &qword_100355538);
  uint64_t v26 = *(int *)(v24 + 20);
  uint64_t v43 = a2;
  sub_10000E6C0(a2 + v26, (uint64_t)v21, &qword_100355538);
  uint64_t v27 = (uint64_t)&v15[*(int *)(v13 + 48)];
  sub_10000E6C0((uint64_t)v23, (uint64_t)v15, &qword_100355538);
  sub_10000E6C0((uint64_t)v21, v27, &qword_100355538);
  int v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v28((uint64_t)v15, 1LL, v10) != 1)
  {
    uint64_t v29 = v48;
    sub_10000E6C0((uint64_t)v15, v48, &qword_100355538);
    if (v28(v27, 1LL, v10) != 1)
    {
      uint64_t v30 = v41;
      sub_100003E68(v27, v41, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      char v31 = sub_100065750(v29, v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100004090(v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100015764((uint64_t)v21, &qword_100355538);
      sub_100015764((uint64_t)v23, &qword_100355538);
      sub_100004090(v29, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100015764((uint64_t)v15, &qword_100355538);
      if ((v31 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_9:
      char v38 = 0;
      return v38 & 1;
    }

    sub_100015764((uint64_t)v21, &qword_100355538);
    sub_100015764((uint64_t)v23, &qword_100355538);
    sub_100004090(v29, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    sub_100015764((uint64_t)v15, &qword_10035C418);
    goto LABEL_9;
  }

  sub_100015764((uint64_t)v21, &qword_100355538);
  sub_100015764((uint64_t)v23, &qword_100355538);
  if (v28(v27, 1LL, v10) != 1) {
    goto LABEL_6;
  }
  sub_100015764((uint64_t)v15, &qword_100355538);
LABEL_8:
  uint64_t v33 = v46;
  uint64_t v32 = v47;
  int v34 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 16);
  char v35 = v44;
  v34(v44, v42, v47);
  uint64_t v36 = v45;
  v34(v45, v43, v32);
  uint64_t v37 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v38 = dispatch thunk of static Equatable.== infix(_:_:)(v35, v36, v32, v37);
  uint64_t v39 = *(void (**)(char *, uint64_t))(v33 + 8);
  v39(v36, v32);
  v39(v35, v32);
  return v38 & 1;
}

uint64_t sub_10011CA2C(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v65 = a3;
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v61 = *(void *)(v5 - 8);
  uint64_t v62 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v60 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  int v59 = (char *)&v58 - v8;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v64 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100003A0C(&qword_10035C418);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100003A0C(&qword_100355538);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  int v21 = (char *)&v58 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v58 - v22;
  uint64_t v24 = v65(0LL);
  uint64_t v25 = *(int *)(v24 + 20);
  uint64_t v63 = a1;
  uint64_t v26 = a1 + v25;
  uint64_t v27 = (int *)v24;
  sub_10000E6C0(v26, (uint64_t)v23, &qword_100355538);
  uint64_t v28 = v27[5];
  uint64_t v65 = a2;
  sub_10000E6C0((uint64_t)a2 + v28, (uint64_t)v21, &qword_100355538);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 48)];
  sub_10000E6C0((uint64_t)v23, (uint64_t)v14, &qword_100355538);
  sub_10000E6C0((uint64_t)v21, v29, &qword_100355538);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v30((uint64_t)v14, 1LL, v9) != 1)
  {
    uint64_t v31 = (uint64_t)v64;
    sub_10000E6C0((uint64_t)v14, (uint64_t)v18, &qword_100355538);
    if (v30(v29, 1LL, v9) != 1)
    {
      sub_100003E68(v29, v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      char v34 = sub_100065750((uint64_t)v18, v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100004090(v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100015764((uint64_t)v21, &qword_100355538);
      sub_100015764((uint64_t)v23, &qword_100355538);
      sub_100004090((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100015764((uint64_t)v14, &qword_100355538);
      if ((v34 & 1) == 0) {
        goto LABEL_7;
      }
      goto LABEL_10;
    }

    sub_100015764((uint64_t)v21, &qword_100355538);
    sub_100015764((uint64_t)v23, &qword_100355538);
    sub_100004090((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    sub_100015764((uint64_t)v14, &qword_10035C418);
    goto LABEL_7;
  }

  sub_100015764((uint64_t)v21, &qword_100355538);
  sub_100015764((uint64_t)v23, &qword_100355538);
  if (v30(v29, 1LL, v9) != 1) {
    goto LABEL_6;
  }
  sub_100015764((uint64_t)v14, &qword_100355538);
LABEL_10:
  uint64_t v35 = v27[6];
  uint64_t v36 = (float *)(v63 + v35);
  char v37 = *(_BYTE *)(v63 + v35 + 4);
  char v38 = v65;
  uint64_t v39 = (float *)((char *)v65 + v35);
  int v40 = *((unsigned __int8 *)v65 + v35 + 4);
  if ((v37 & 1) != 0)
  {
    if (!v40) {
      goto LABEL_7;
    }
  }

  else
  {
    if (*v36 != *v39) {
      LOBYTE(v40) = 1;
    }
    if ((v40 & 1) != 0) {
      goto LABEL_7;
    }
  }

  uint64_t v41 = v27[7];
  uint64_t v42 = (float *)(v63 + v41);
  char v43 = *(_BYTE *)(v63 + v41 + 4);
  uint64_t v44 = (float *)((char *)v65 + v41);
  int v45 = *((unsigned __int8 *)v65 + v41 + 4);
  if ((v43 & 1) != 0)
  {
    if (!v45) {
      goto LABEL_7;
    }
  }

  else
  {
    if (*v42 != *v44) {
      LOBYTE(v45) = 1;
    }
    if ((v45 & 1) != 0) {
      goto LABEL_7;
    }
  }

  uint64_t v46 = v27[8];
  uint64_t v47 = (float *)(v63 + v46);
  char v48 = *(_BYTE *)(v63 + v46 + 4);
  char v49 = (float *)((char *)v65 + v46);
  int v50 = *((unsigned __int8 *)v65 + v46 + 4);
  if ((v48 & 1) != 0)
  {
    if (v50)
    {
LABEL_28:
      uint64_t v52 = v61;
      uint64_t v51 = v62;
      char v53 = *(void (**)(char *))(v61 + 16);
      int v54 = v59;
      v53(v59);
      uint64_t v55 = v60;
      ((void (*)(char *, uint64_t (*)(void), uint64_t))v53)(v60, v38, v51);
      uint64_t v56 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v32 = dispatch thunk of static Equatable.== infix(_:_:)(v54, v55, v51, v56);
      char v57 = *(void (**)(char *, uint64_t))(v52 + 8);
      v57(v55, v51);
      v57(v54, v51);
      return v32 & 1;
    }
  }

  else
  {
    if (*v47 != *v49) {
      LOBYTE(v50) = 1;
    }
    if ((v50 & 1) == 0) {
      goto LABEL_28;
    }
  }

uint64_t sub_10011CEA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v55 = *(void *)(v4 - 8);
  uint64_t v56 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  int v54 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  char v53 = (char *)&v52 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v57 = (uint64_t)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100003A0C(&qword_10035C418);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100003A0C(&qword_100355538);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v52 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v52 - v21;
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0LL);
  uint64_t v24 = *(int *)(v23 + 20);
  uint64_t v58 = a1;
  uint64_t v25 = a1 + v24;
  uint64_t v26 = (int *)v23;
  sub_10000E6C0(v25, (uint64_t)v22, &qword_100355538);
  uint64_t v27 = v26[5];
  uint64_t v59 = a2;
  sub_10000E6C0(a2 + v27, (uint64_t)v20, &qword_100355538);
  uint64_t v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E6C0((uint64_t)v22, (uint64_t)v13, &qword_100355538);
  sub_10000E6C0((uint64_t)v20, v28, &qword_100355538);
  uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1LL, v8) != 1)
  {
    sub_10000E6C0((uint64_t)v13, (uint64_t)v17, &qword_100355538);
    if (v29(v28, 1LL, v8) != 1)
    {
      uint64_t v32 = v57;
      sub_100003E68(v28, v57, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      char v33 = sub_100065750((uint64_t)v17, v32, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100004090(v32, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100015764((uint64_t)v20, &qword_100355538);
      sub_100015764((uint64_t)v22, &qword_100355538);
      sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100015764((uint64_t)v13, &qword_100355538);
      if ((v33 & 1) == 0) {
        goto LABEL_7;
      }
      goto LABEL_10;
    }

    sub_100015764((uint64_t)v20, &qword_100355538);
    sub_100015764((uint64_t)v22, &qword_100355538);
    sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    sub_100015764((uint64_t)v13, &qword_10035C418);
    goto LABEL_7;
  }

  sub_100015764((uint64_t)v20, &qword_100355538);
  sub_100015764((uint64_t)v22, &qword_100355538);
  if (v29(v28, 1LL, v8) != 1) {
    goto LABEL_6;
  }
  sub_100015764((uint64_t)v13, &qword_100355538);
LABEL_10:
  uint64_t v34 = v26[6];
  uint64_t v35 = v59;
  uint64_t v36 = (float *)(v58 + v34);
  char v37 = *(_BYTE *)(v58 + v34 + 4);
  char v38 = (float *)(v59 + v34);
  int v39 = *(unsigned __int8 *)(v59 + v34 + 4);
  if ((v37 & 1) != 0)
  {
    if (!v39) {
      goto LABEL_7;
    }
  }

  else
  {
    if (*v36 != *v38) {
      LOBYTE(v39) = 1;
    }
    if ((v39 & 1) != 0) {
      goto LABEL_7;
    }
  }

  uint64_t v40 = v26[7];
  uint64_t v41 = (float *)(v58 + v40);
  char v42 = *(_BYTE *)(v58 + v40 + 4);
  char v43 = (float *)(v59 + v40);
  int v44 = *(unsigned __int8 *)(v59 + v40 + 4);
  if ((v42 & 1) != 0)
  {
    if (v44)
    {
LABEL_22:
      uint64_t v46 = v55;
      uint64_t v45 = v56;
      uint64_t v47 = *(void (**)(char *))(v55 + 16);
      char v48 = v53;
      v47(v53);
      char v49 = v54;
      ((void (*)(char *, uint64_t, uint64_t))v47)(v54, v35, v45);
      uint64_t v50 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v30 = dispatch thunk of static Equatable.== infix(_:_:)(v48, v49, v45, v50);
      uint64_t v51 = *(void (**)(char *, uint64_t))(v46 + 8);
      v51(v49, v45);
      v51(v48, v45);
      return v30 & 1;
    }
  }

  else
  {
    if (*v41 != *v43) {
      LOBYTE(v44) = 1;
    }
    if ((v44 & 1) == 0) {
      goto LABEL_22;
    }
  }

uint64_t sub_10011D2D8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v39 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0LL);
  uint64_t v12 = v11;
  uint64_t v13 = v11[6];
  uint64_t v14 = (double *)((char *)a1 + v13);
  char v15 = *((_BYTE *)a1 + v13 + 8);
  uint64_t v16 = (double *)((char *)a2 + v13);
  int v17 = *((unsigned __int8 *)a2 + v13 + 8);
  if ((v15 & 1) != 0)
  {
    if (!v17) {
      goto LABEL_27;
    }
  }

  else
  {
    if (*v14 != *v16) {
      LOBYTE(v17) = 1;
    }
    if ((v17 & 1) != 0) {
      goto LABEL_27;
    }
  }

  uint64_t v18 = v11[7];
  uint64_t v19 = (double *)((char *)a1 + v18);
  char v20 = *((_BYTE *)a1 + v18 + 8);
  uint64_t v21 = (double *)((char *)a2 + v18);
  int v22 = *((unsigned __int8 *)a2 + v18 + 8);
  if ((v20 & 1) != 0)
  {
    if (!v22) {
      goto LABEL_27;
    }
  }

  else
  {
    if (*v19 != *v21) {
      LOBYTE(v22) = 1;
    }
    if ((v22 & 1) != 0) {
      goto LABEL_27;
    }
  }

  uint64_t v23 = v11[8];
  uint64_t v24 = (double *)((char *)a1 + v23);
  char v25 = *((_BYTE *)a1 + v23 + 8);
  uint64_t v26 = (double *)((char *)a2 + v23);
  int v27 = *((unsigned __int8 *)a2 + v23 + 8);
  if ((v25 & 1) != 0)
  {
    if (!v27) {
      goto LABEL_27;
    }
  }

  else
  {
    if (*v24 != *v26) {
      LOBYTE(v27) = 1;
    }
    if ((v27 & 1) != 0) {
      goto LABEL_27;
    }
  }

  uint64_t v28 = v11[9];
  uint64_t v29 = (double *)((char *)a1 + v28);
  char v30 = *((_BYTE *)a1 + v28 + 8);
  uint64_t v31 = (double *)((char *)a2 + v28);
  int v32 = *((unsigned __int8 *)a2 + v28 + 8);
  if ((v30 & 1) != 0)
  {
    if (v32) {
      goto LABEL_25;
    }
LABEL_27:
    char v36 = 0;
    return v36 & 1;
  }

  if (*v29 != *v31) {
    LOBYTE(v32) = 1;
  }
  if ((v32 & 1) != 0) {
    goto LABEL_27;
  }
LABEL_25:
  if ((sub_10010A9B4(*a1, *a2) & 1) == 0) {
    goto LABEL_27;
  }
  char v33 = (char *)a1 + v12[5];
  uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v34(v10, v33, v4);
  v34(v8, (char *)a2 + v12[5], v4);
  uint64_t v35 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v36 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v35);
  char v37 = *(void (**)(char *, uint64_t))(v5 + 8);
  v37(v8, v4);
  v37(v10, v4);
  return v36 & 1;
}

uint64_t sub_10011D4DC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v90 = a1;
  uint64_t v91 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v79 = *(void *)(v2 - 8);
  uint64_t v80 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v78 = (char *)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v77 = (char *)&v76 - v5;
  uint64_t v89 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0LL);
  uint64_t v83 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  uint64_t v81 = (uint64_t)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v82 = sub_100003A0C(&qword_10035C430);
  __chkstk_darwin(v82);
  uint64_t v84 = (uint64_t)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100003A0C(&qword_100355658);
  uint64_t v9 = __chkstk_darwin(v8);
  int v88 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v86 = (char *)&v76 - v12;
  __chkstk_darwin(v11);
  int v87 = (char *)&v76 - v13;
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  int v17 = (uint64_t *)((char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v18 = sub_100003A0C(&qword_10035C438);
  __chkstk_darwin(v18);
  char v20 = (char *)&v76 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100003A0C(&qword_100355650);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (uint64_t *)((char *)&v76 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v25 = __chkstk_darwin(v22);
  int v27 = (char *)&v76 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v76 - v28;
  uint64_t v30 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0LL);
  sub_10000E6C0((uint64_t)v90 + *(int *)(v30 + 24), (uint64_t)v29, &qword_100355650);
  uint64_t v85 = (int *)v30;
  sub_10000E6C0((uint64_t)v91 + *(int *)(v30 + 24), (uint64_t)v27, &qword_100355650);
  uint64_t v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  sub_10000E6C0((uint64_t)v29, (uint64_t)v20, &qword_100355650);
  sub_10000E6C0((uint64_t)v27, v31, &qword_100355650);
  int v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1LL, v14) == 1)
  {
    sub_100015764((uint64_t)v27, &qword_100355650);
    sub_100015764((uint64_t)v29, &qword_100355650);
    if (v32(v31, 1LL, v14) == 1)
    {
      sub_100015764((uint64_t)v20, &qword_100355650);
      goto LABEL_9;
    }

uint64_t sub_10011DC50(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v50 = *(void *)(v4 - 8);
  uint64_t v51 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  int v49 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v48 = (char *)&v47 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v54 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100003A0C(&qword_10035C418);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100003A0C(&qword_100355538);
  uint64_t v15 = __chkstk_darwin(v14);
  int v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  char v20 = (char *)&v47 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v47 - v21;
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0LL);
  uint64_t v24 = *(int *)(v23 + 24);
  uint64_t v52 = a1;
  uint64_t v25 = (uint64_t)a1 + v24;
  uint64_t v26 = (int *)v23;
  sub_10000E6C0(v25, (uint64_t)v22, &qword_100355538);
  uint64_t v27 = v26[6];
  char v53 = a2;
  sub_10000E6C0((uint64_t)a2 + v27, (uint64_t)v20, &qword_100355538);
  uint64_t v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E6C0((uint64_t)v22, (uint64_t)v13, &qword_100355538);
  sub_10000E6C0((uint64_t)v20, v28, &qword_100355538);
  uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1LL, v8) == 1)
  {
    sub_100015764((uint64_t)v20, &qword_100355538);
    sub_100015764((uint64_t)v22, &qword_100355538);
    if (v29(v28, 1LL, v8) == 1)
    {
      sub_100015764((uint64_t)v13, &qword_100355538);
      goto LABEL_8;
    }

uint64_t sub_10011E088(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v39 - v11;
  uint64_t v13 = (int *)a3(0LL);
  uint64_t v14 = v13[5];
  uint64_t v15 = (double *)(a1 + v14);
  char v16 = *(_BYTE *)(a1 + v14 + 8);
  int v17 = (double *)(a2 + v14);
  int v18 = *(unsigned __int8 *)(a2 + v14 + 8);
  if ((v16 & 1) != 0)
  {
    if (!v18) {
      goto LABEL_21;
    }
  }

  else
  {
    if (*v15 != *v17) {
      LOBYTE(v18) = 1;
    }
    if ((v18 & 1) != 0) {
      goto LABEL_21;
    }
  }

  uint64_t v19 = v13[6];
  char v20 = (double *)(a1 + v19);
  char v21 = *(_BYTE *)(a1 + v19 + 8);
  uint64_t v22 = (double *)(a2 + v19);
  int v23 = *(unsigned __int8 *)(a2 + v19 + 8);
  if ((v21 & 1) != 0)
  {
    if (!v23) {
      goto LABEL_21;
    }
  }

  else
  {
    if (*v20 != *v22) {
      LOBYTE(v23) = 1;
    }
    if ((v23 & 1) != 0) {
      goto LABEL_21;
    }
  }

  uint64_t v24 = v13[7];
  uint64_t v25 = (double *)(a1 + v24);
  char v26 = *(_BYTE *)(a1 + v24 + 8);
  uint64_t v27 = (double *)(a2 + v24);
  int v28 = *(unsigned __int8 *)(a2 + v24 + 8);
  if ((v26 & 1) == 0)
  {
    if (*v25 != *v27) {
      LOBYTE(v28) = 1;
    }
    if ((v28 & 1) != 0) {
      goto LABEL_21;
    }
LABEL_19:
    uint64_t v29 = v13[8];
    uint64_t v30 = (double *)(a1 + v29);
    char v31 = *(_BYTE *)(a1 + v29 + 8);
    int v32 = (double *)(a2 + v29);
    int v33 = *(unsigned __int8 *)(a2 + v29 + 8);
    if ((v31 & 1) != 0)
    {
      if (!v33) {
        goto LABEL_21;
      }
    }

    else
    {
      if (*v30 != *v32) {
        LOBYTE(v33) = 1;
      }
      if ((v33 & 1) != 0) {
        goto LABEL_21;
      }
    }

    int v36 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v36(v12, a1, v6);
    v36(v10, a2, v6);
    uint64_t v37 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v34 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v10, v6, v37);
    uint64_t v38 = *(void (**)(char *, uint64_t))(v7 + 8);
    v38(v10, v6);
    v38(v12, v6);
    return v34 & 1;
  }

  if (v28) {
    goto LABEL_19;
  }
LABEL_21:
  char v34 = 0;
  return v34 & 1;
}

uint64_t sub_10011E270(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v78 = *(void *)(v4 - 8);
  uint64_t v79 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v77 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v76 = (char *)&v75 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100003A0C(&qword_10035C418);
  __chkstk_darwin(v12);
  uint64_t v80 = (uint64_t)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100003A0C(&qword_100355538);
  uint64_t v15 = __chkstk_darwin(v14);
  int v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  char v20 = (char *)&v75 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v75 - v21;
  int v23 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL);
  uint64_t v24 = v23;
  uint64_t v25 = v23[5];
  char v26 = (double *)(a1 + v25);
  char v27 = *(_BYTE *)(a1 + v25 + 8);
  int v28 = (double *)(a2 + v25);
  int v29 = *(unsigned __int8 *)(a2 + v25 + 8);
  if ((v27 & 1) != 0)
  {
    if (!v29) {
      goto LABEL_49;
    }
  }

  else
  {
    if (*v26 != *v28) {
      LOBYTE(v29) = 1;
    }
    if ((v29 & 1) != 0) {
      goto LABEL_49;
    }
  }

  uint64_t v30 = v23[6];
  char v31 = (double *)(a1 + v30);
  char v32 = *(_BYTE *)(a1 + v30 + 8);
  int v33 = (double *)(a2 + v30);
  int v34 = *(unsigned __int8 *)(a2 + v30 + 8);
  if ((v32 & 1) != 0)
  {
    if (!v34) {
      goto LABEL_49;
    }
  }

  else
  {
    if (*v31 != *v33) {
      LOBYTE(v34) = 1;
    }
    if ((v34 & 1) != 0) {
      goto LABEL_49;
    }
  }

  uint64_t v35 = v23[7];
  int v36 = (double *)(a1 + v35);
  char v37 = *(_BYTE *)(a1 + v35 + 8);
  uint64_t v38 = (double *)(a2 + v35);
  int v39 = *(unsigned __int8 *)(a2 + v35 + 8);
  if ((v37 & 1) != 0)
  {
    if (!v39) {
      goto LABEL_49;
    }
  }

  else
  {
    if (*v36 != *v38) {
      LOBYTE(v39) = 1;
    }
    if ((v39 & 1) != 0) {
      goto LABEL_49;
    }
  }

  uint64_t v40 = v23[8];
  char v41 = (double *)(a1 + v40);
  char v42 = *(_BYTE *)(a1 + v40 + 8);
  uint64_t v43 = (double *)(a2 + v40);
  int v44 = *(unsigned __int8 *)(a2 + v40 + 8);
  if ((v42 & 1) != 0)
  {
    if (!v44) {
      goto LABEL_49;
    }
  }

  else
  {
    if (*v41 != *v43) {
      LOBYTE(v44) = 1;
    }
    if ((v44 & 1) != 0) {
      goto LABEL_49;
    }
  }

  uint64_t v45 = v23[9];
  uint64_t v46 = (double *)(a1 + v45);
  char v47 = *(_BYTE *)(a1 + v45 + 8);
  uint64_t v48 = (double *)(a2 + v45);
  int v49 = *(unsigned __int8 *)(a2 + v45 + 8);
  if ((v47 & 1) != 0)
  {
    if (!v49) {
      goto LABEL_49;
    }
  }

  else
  {
    if (*v46 != *v48) {
      LOBYTE(v49) = 1;
    }
    if ((v49 & 1) != 0) {
      goto LABEL_49;
    }
  }

  uint64_t v50 = v23[10];
  uint64_t v51 = (double *)(a1 + v50);
  char v52 = *(_BYTE *)(a1 + v50 + 8);
  char v53 = (double *)(a2 + v50);
  int v54 = *(unsigned __int8 *)(a2 + v50 + 8);
  if ((v52 & 1) != 0)
  {
    if (!v54) {
      goto LABEL_49;
    }
  }

  else
  {
    if (*v51 != *v53) {
      LOBYTE(v54) = 1;
    }
    if ((v54 & 1) != 0) {
      goto LABEL_49;
    }
  }

  uint64_t v55 = v23[11];
  int v56 = (double *)(a1 + v55);
  char v57 = *(_BYTE *)(a1 + v55 + 8);
  uint64_t v58 = (double *)(a2 + v55);
  int v59 = *(unsigned __int8 *)(a2 + v55 + 8);
  if ((v57 & 1) != 0)
  {
    if (!v59) {
      goto LABEL_49;
    }
  }

  else
  {
    if (*v56 != *v58) {
      LOBYTE(v59) = 1;
    }
    if ((v59 & 1) != 0) {
      goto LABEL_49;
    }
  }

  sub_10000E6C0(a1 + v23[12], (uint64_t)v22, &qword_100355538);
  sub_10000E6C0(a2 + v24[12], (uint64_t)v20, &qword_100355538);
  uint64_t v60 = *(int *)(v12 + 48);
  uint64_t v61 = v80;
  uint64_t v62 = v80 + v60;
  sub_10000E6C0((uint64_t)v22, v80, &qword_100355538);
  uint64_t v75 = v62;
  sub_10000E6C0((uint64_t)v20, v62, &qword_100355538);
  char v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v63(v61, 1LL, v8) == 1)
  {
    sub_100015764((uint64_t)v20, &qword_100355538);
    uint64_t v61 = v80;
    sub_100015764((uint64_t)v22, &qword_100355538);
    if (v63(v75, 1LL, v8) == 1)
    {
      sub_100015764(v61, &qword_100355538);
LABEL_52:
      uint64_t v69 = v78;
      uint64_t v68 = v79;
      uint64_t v70 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 16);
      int v71 = v76;
      v70(v76, a1, v79);
      uint64_t v72 = v77;
      v70(v77, a2, v68);
      uint64_t v73 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v64 = dispatch thunk of static Equatable.== infix(_:_:)(v71, v72, v68, v73);
      uint64_t v74 = *(void (**)(char *, uint64_t))(v69 + 8);
      v74(v72, v68);
      v74(v71, v68);
      return v64 & 1;
    }

    goto LABEL_48;
  }

  sub_10000E6C0(v61, (uint64_t)v17, &qword_100355538);
  if (v63(v75, 1LL, v8) == 1)
  {
    sub_100015764((uint64_t)v20, &qword_100355538);
    sub_100015764((uint64_t)v22, &qword_100355538);
    sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_48:
    sub_100015764(v61, &qword_10035C418);
    goto LABEL_49;
  }

  uint64_t v66 = v61;
  sub_100003E68(v75, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v67 = sub_100065750((uint64_t)v17, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004090((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764((uint64_t)v20, &qword_100355538);
  sub_100015764((uint64_t)v22, &qword_100355538);
  sub_100004090((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015764(v66, &qword_100355538);
  if ((v67 & 1) != 0) {
    goto LABEL_52;
  }
LABEL_49:
  char v64 = 0;
  return v64 & 1;
}

uint64_t sub_10011E7BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v44 = *(void *)(v4 - 8);
  uint64_t v45 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v43 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  char v42 = (char *)&v39 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v39 = (uint64_t)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100003A0C(&qword_10035C460);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100003A0C(&qword_100355628);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v46 = (uint64_t)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v39 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v39 - v20;
  uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData(0LL);
  uint64_t v23 = *(int *)(v22 + 20);
  uint64_t v40 = a1;
  sub_10000E6C0(a1 + v23, (uint64_t)v21, &qword_100355628);
  uint64_t v24 = *(int *)(v22 + 20);
  uint64_t v41 = a2;
  sub_10000E6C0(a2 + v24, (uint64_t)v19, &qword_100355628);
  uint64_t v25 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E6C0((uint64_t)v21, (uint64_t)v13, &qword_100355628);
  sub_10000E6C0((uint64_t)v19, v25, &qword_100355628);
  char v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v26((uint64_t)v13, 1LL, v8) != 1)
  {
    uint64_t v27 = v46;
    sub_10000E6C0((uint64_t)v13, v46, &qword_100355628);
    if (v26(v25, 1LL, v8) != 1)
    {
      uint64_t v28 = v39;
      sub_100003E68(v25, v39, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
      char v29 = sub_10011E270(v27, v28);
      sub_100004090(v28, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
      sub_100015764((uint64_t)v19, &qword_100355628);
      sub_100015764((uint64_t)v21, &qword_100355628);
      sub_100004090(v27, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
      sub_100015764((uint64_t)v13, &qword_100355628);
      if ((v29 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_9:
      char v36 = 0;
      return v36 & 1;
    }

    sub_100015764((uint64_t)v19, &qword_100355628);
    sub_100015764((uint64_t)v21, &qword_100355628);
    sub_100004090(v27, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
LABEL_6:
    sub_100015764((uint64_t)v13, &qword_10035C460);
    goto LABEL_9;
  }

  sub_100015764((uint64_t)v19, &qword_100355628);
  sub_100015764((uint64_t)v21, &qword_100355628);
  if (v26(v25, 1LL, v8) != 1) {
    goto LABEL_6;
  }
  sub_100015764((uint64_t)v13, &qword_100355628);
LABEL_8:
  uint64_t v31 = v44;
  uint64_t v30 = v45;
  char v32 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 16);
  int v33 = v42;
  v32(v42, v40, v45);
  int v34 = v43;
  v32(v43, v41, v30);
  uint64_t v35 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v36 = dispatch thunk of static Equatable.== infix(_:_:)(v33, v34, v30, v35);
  char v37 = *(void (**)(char *, uint64_t))(v31 + 8);
  v37(v34, v30);
  v37(v33, v30);
  return v36 & 1;
}

uint64_t sub_10011EB84(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v52 - v9;
  if ((sub_10010A9B4(*a1, *a2) & 1) == 0) {
    goto LABEL_39;
  }
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0LL);
  uint64_t v12 = v11;
  uint64_t v13 = v11[6];
  uint64_t v14 = (double *)((char *)a1 + v13);
  char v15 = *((_BYTE *)a1 + v13 + 8);
  uint64_t v16 = (double *)((char *)a2 + v13);
  int v17 = *((unsigned __int8 *)a2 + v13 + 8);
  if ((v15 & 1) != 0)
  {
    if (!v17) {
      goto LABEL_39;
    }
  }

  else
  {
    if (*v14 != *v16) {
      LOBYTE(v17) = 1;
    }
    if ((v17 & 1) != 0) {
      goto LABEL_39;
    }
  }

  uint64_t v18 = v11[7];
  uint64_t v19 = (double *)((char *)a1 + v18);
  char v20 = *((_BYTE *)a1 + v18 + 8);
  uint64_t v21 = (double *)((char *)a2 + v18);
  int v22 = *((unsigned __int8 *)a2 + v18 + 8);
  if ((v20 & 1) != 0)
  {
    if (!v22) {
      goto LABEL_39;
    }
  }

  else
  {
    if (*v19 != *v21) {
      LOBYTE(v22) = 1;
    }
    if ((v22 & 1) != 0) {
      goto LABEL_39;
    }
  }

  uint64_t v23 = v11[8];
  int v24 = *((unsigned __int8 *)a1 + v23);
  int v25 = *((unsigned __int8 *)a2 + v23);
  if (v24 == 2)
  {
    if (v25 != 2) {
      goto LABEL_39;
    }
  }

  else if (v25 == 2 || ((((v25 & 1) == 0) ^ v24) & 1) == 0)
  {
    goto LABEL_39;
  }

  uint64_t v26 = v11[9];
  uint64_t v27 = (double *)((char *)a1 + v26);
  char v28 = *((_BYTE *)a1 + v26 + 8);
  char v29 = (double *)((char *)a2 + v26);
  int v30 = *((unsigned __int8 *)a2 + v26 + 8);
  if ((v28 & 1) != 0)
  {
    if (!v30) {
      goto LABEL_39;
    }
  }

  else
  {
    if (*v27 != *v29) {
      LOBYTE(v30) = 1;
    }
    if ((v30 & 1) != 0) {
      goto LABEL_39;
    }
  }

  uint64_t v31 = v11[10];
  char v32 = (double *)((char *)a1 + v31);
  char v33 = *((_BYTE *)a1 + v31 + 8);
  int v34 = (double *)((char *)a2 + v31);
  int v35 = *((unsigned __int8 *)a2 + v31 + 8);
  if ((v33 & 1) != 0)
  {
    if (!v35) {
      goto LABEL_39;
    }
  }

  else
  {
    if (*v32 != *v34) {
      LOBYTE(v35) = 1;
    }
    if ((v35 & 1) != 0) {
      goto LABEL_39;
    }
  }

  uint64_t v36 = v11[11];
  char v37 = (double *)((char *)a1 + v36);
  char v38 = *((_BYTE *)a1 + v36 + 8);
  uint64_t v39 = (double *)((char *)a2 + v36);
  int v40 = *((unsigned __int8 *)a2 + v36 + 8);
  if ((v38 & 1) == 0)
  {
    if (*v37 != *v39) {
      LOBYTE(v40) = 1;
    }
    if ((v40 & 1) != 0) {
      goto LABEL_39;
    }
LABEL_37:
    uint64_t v41 = v11[12];
    char v42 = (double *)((char *)a1 + v41);
    char v43 = *((_BYTE *)a1 + v41 + 8);
    uint64_t v44 = (double *)((char *)a2 + v41);
    int v45 = *((unsigned __int8 *)a2 + v41 + 8);
    if ((v43 & 1) != 0)
    {
      if (!v45) {
        goto LABEL_39;
      }
    }

    else
    {
      if (*v42 != *v44) {
        LOBYTE(v45) = 1;
      }
      if ((v45 & 1) != 0) {
        goto LABEL_39;
      }
    }

    uint64_t v48 = (char *)a1 + v11[5];
    int v49 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v49(v10, v48, v4);
    v49(v8, (char *)a2 + v12[5], v4);
    uint64_t v50 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v46 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v50);
    uint64_t v51 = *(void (**)(char *, uint64_t))(v5 + 8);
    v51(v8, v4);
    v51(v10, v4);
    return v46 & 1;
  }

  if (v40) {
    goto LABEL_37;
  }
LABEL_39:
  char v46 = 0;
  return v46 & 1;
}

uint64_t sub_10011EE24(uint64_t *a1, uint64_t *a2)
{
  uint64_t v74 = a1;
  uint64_t v75 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v64 = *(void *)(v2 - 8);
  uint64_t v65 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  char v63 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v62 = (char *)&v60 - v5;
  uint64_t v71 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0LL);
  uint64_t v68 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v61 = (uint64_t)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v67 = sub_100003A0C(&qword_10035C440);
  __chkstk_darwin(v67);
  uint64_t v72 = (uint64_t)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100003A0C(&qword_100355648);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v66 = (uint64_t)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v69 = (uint64_t)&v60 - v12;
  __chkstk_darwin(v11);
  uint64_t v70 = (uint64_t)&v60 - v13;
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  int v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100003A0C(&qword_10035C418);
  __chkstk_darwin(v18);
  char v20 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100003A0C(&qword_100355538);
  uint64_t v22 = __chkstk_darwin(v21);
  int v24 = (char *)&v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v60 - v26;
  __chkstk_darwin(v25);
  char v29 = (char *)&v60 - v28;
  uint64_t v30 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0LL);
  sub_10000E6C0((uint64_t)v74 + *(int *)(v30 + 28), (uint64_t)v29, &qword_100355538);
  uint64_t v73 = v30;
  sub_10000E6C0((uint64_t)v75 + *(int *)(v30 + 28), (uint64_t)v27, &qword_100355538);
  uint64_t v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  sub_10000E6C0((uint64_t)v29, (uint64_t)v20, &qword_100355538);
  sub_10000E6C0((uint64_t)v27, v31, &qword_100355538);
  char v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1LL, v14) == 1)
  {
    sub_100015764((uint64_t)v27, &qword_100355538);
    sub_100015764((uint64_t)v29, &qword_100355538);
    if (v32(v31, 1LL, v14) == 1)
    {
      sub_100015764((uint64_t)v20, &qword_100355538);
      goto LABEL_9;
    }

uint64_t sub_10011F4C0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v29 - v11;
  uint64_t v13 = a3(0LL);
  uint64_t v14 = *(int *)(v13 + 20);
  uint64_t v15 = (double *)(a1 + v14);
  char v16 = *(_BYTE *)(a1 + v14 + 8);
  int v17 = (double *)(a2 + v14);
  int v18 = *(unsigned __int8 *)(a2 + v14 + 8);
  if ((v16 & 1) == 0)
  {
    if (*v15 != *v17) {
      LOBYTE(v18) = 1;
    }
    if ((v18 & 1) != 0) {
      goto LABEL_9;
    }
LABEL_7:
    uint64_t v19 = *(int *)(v13 + 24);
    char v20 = (double *)(a1 + v19);
    char v21 = *(_BYTE *)(a1 + v19 + 8);
    uint64_t v22 = (double *)(a2 + v19);
    int v23 = *(unsigned __int8 *)(a2 + v19 + 8);
    if ((v21 & 1) != 0)
    {
      if (!v23) {
        goto LABEL_9;
      }
    }

    else
    {
      if (*v20 != *v22) {
        LOBYTE(v23) = 1;
      }
      if ((v23 & 1) != 0) {
        goto LABEL_9;
      }
    }

    uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v25(v12, a1, v6);
    v25(v10, a2, v6);
    uint64_t v26 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v24 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v10, v6, v26);
    uint64_t v27 = *(void (**)(char *, uint64_t))(v7 + 8);
    v27(v10, v6);
    v27(v12, v6);
    return v24 & 1;
  }

  if (v18) {
    goto LABEL_7;
  }
LABEL_9:
  char v24 = 0;
  return v24 & 1;
}

uint64_t sub_10011F640(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v36 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0LL);
  uint64_t v12 = v11[5];
  uint64_t v13 = (double *)(a1 + v12);
  char v14 = *(_BYTE *)(a1 + v12 + 8);
  uint64_t v15 = (double *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16) {
      goto LABEL_26;
    }
  }

  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if ((v16 & 1) != 0) {
      goto LABEL_26;
    }
  }

  uint64_t v17 = v11[6];
  int v18 = (double *)(a1 + v17);
  char v19 = *(_BYTE *)(a1 + v17 + 8);
  char v20 = (double *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21) {
      goto LABEL_26;
    }
  }

  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if ((v21 & 1) != 0) {
      goto LABEL_26;
    }
  }

  uint64_t v22 = v11[7];
  int v23 = (double *)(a1 + v22);
  char v24 = *(_BYTE *)(a1 + v22 + 8);
  uint64_t v25 = (double *)(a2 + v22);
  int v26 = *(unsigned __int8 *)(a2 + v22 + 8);
  if ((v24 & 1) != 0)
  {
    if (!v26) {
      goto LABEL_26;
    }
  }

  else
  {
    if (*v23 != *v25) {
      LOBYTE(v26) = 1;
    }
    if ((v26 & 1) != 0) {
      goto LABEL_26;
    }
  }

  uint64_t v27 = v11[8];
  int v28 = *(unsigned __int8 *)(a1 + v27);
  int v29 = *(unsigned __int8 *)(a2 + v27);
  if (v28 != 4)
  {
    if (v29 != 4 && v28 == v29) {
      goto LABEL_21;
    }
LABEL_26:
    char v32 = 0;
    return v32 & 1;
  }

  if (v29 != 4) {
    goto LABEL_26;
  }
LABEL_21:
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v30(v10, a1, v4);
  v30(v8, a2, v4);
  uint64_t v31 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v32 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v31);
  char v33 = *(void (**)(char *, uint64_t))(v5 + 8);
  v33(v8, v4);
  v33(v10, v4);
  return v32 & 1;
}

uint64_t sub_10011F81C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v42 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0LL);
  uint64_t v12 = v11[5];
  uint64_t v13 = (void *)(a1 + v12);
  char v14 = *(_BYTE *)(a1 + v12 + 8);
  uint64_t v15 = (void *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16) {
      goto LABEL_27;
    }
  }

  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if ((v16 & 1) != 0) {
      goto LABEL_27;
    }
  }

  uint64_t v17 = v11[6];
  int v18 = (double *)(a1 + v17);
  char v19 = *(_BYTE *)(a1 + v17 + 8);
  char v20 = (double *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21) {
      goto LABEL_27;
    }
  }

  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if ((v21 & 1) != 0) {
      goto LABEL_27;
    }
  }

  uint64_t v22 = v11[7];
  int v23 = (double *)(a1 + v22);
  char v24 = *(_BYTE *)(a1 + v22 + 8);
  uint64_t v25 = (double *)(a2 + v22);
  int v26 = *(unsigned __int8 *)(a2 + v22 + 8);
  if ((v24 & 1) != 0)
  {
    if (!v26) {
      goto LABEL_27;
    }
  }

  else
  {
    if (*v23 != *v25) {
      LOBYTE(v26) = 1;
    }
    if ((v26 & 1) != 0) {
      goto LABEL_27;
    }
  }

  uint64_t v27 = v11[8];
  int v28 = (double *)(a1 + v27);
  char v29 = *(_BYTE *)(a1 + v27 + 8);
  uint64_t v30 = (double *)(a2 + v27);
  int v31 = *(unsigned __int8 *)(a2 + v27 + 8);
  if ((v29 & 1) == 0)
  {
    if (*v28 != *v30) {
      LOBYTE(v31) = 1;
    }
    if ((v31 & 1) != 0) {
      goto LABEL_27;
    }
LABEL_25:
    uint64_t v32 = v11[9];
    char v33 = (double *)(a1 + v32);
    char v34 = *(_BYTE *)(a1 + v32 + 8);
    char v35 = (double *)(a2 + v32);
    int v36 = *(unsigned __int8 *)(a2 + v32 + 8);
    if ((v34 & 1) != 0)
    {
      if (!v36) {
        goto LABEL_27;
      }
    }

    else
    {
      if (*v33 != *v35) {
        LOBYTE(v36) = 1;
      }
      if ((v36 & 1) != 0) {
        goto LABEL_27;
      }
    }

    uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v39(v10, a1, v4);
    v39(v8, a2, v4);
    uint64_t v40 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v37 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v40);
    uint64_t v41 = *(void (**)(char *, uint64_t))(v5 + 8);
    v41(v8, v4);
    v41(v10, v4);
    return v37 & 1;
  }

  if (v31) {
    goto LABEL_25;
  }
LABEL_27:
  char v37 = 0;
  return v37 & 1;
}

uint64_t sub_10011FA34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v33 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0LL);
  uint64_t v12 = v11[5];
  uint64_t v13 = (double *)(a1 + v12);
  char v14 = *(_BYTE *)(a1 + v12 + 8);
  uint64_t v15 = (double *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16) {
      goto LABEL_24;
    }
  }

  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if ((v16 & 1) != 0) {
      goto LABEL_24;
    }
  }

  uint64_t v17 = v11[6];
  int v18 = (double *)(a1 + v17);
  char v19 = *(_BYTE *)(a1 + v17 + 8);
  char v20 = (double *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21) {
      goto LABEL_24;
    }
  }

  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if ((v21 & 1) != 0) {
      goto LABEL_24;
    }
  }

  uint64_t v22 = v11[7];
  int v23 = *(unsigned __int8 *)(a1 + v22);
  int v24 = *(unsigned __int8 *)(a2 + v22);
  if (v23 == 2)
  {
    if (v24 != 2) {
      goto LABEL_24;
    }
  }

  else if (v24 == 2 || ((((v24 & 1) == 0) ^ v23) & 1) == 0)
  {
    goto LABEL_24;
  }

  uint64_t v25 = v11[8];
  int v26 = *(unsigned __int8 *)(a1 + v25);
  int v27 = *(unsigned __int8 *)(a2 + v25);
  if (v26 == 2)
  {
    if (v27 == 2) {
      goto LABEL_23;
    }
LABEL_24:
    char v30 = 0;
    return v30 & 1;
  }

  if (v27 == 2 || ((((v27 & 1) == 0) ^ v26) & 1) == 0) {
    goto LABEL_24;
  }
LABEL_23:
  int v28 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v28(v10, a1, v4);
  v28(v8, a2, v4);
  uint64_t v29 = sub_10000FD98( &qword_1003516F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v30 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v29);
  int v31 = *(void (**)(char *, uint64_t))(v5 + 8);
  v31(v8, v4);
  v31(v10, v4);
  return v30 & 1;
}

unint64_t sub_10011FC28()
{
  unint64_t result = qword_1003559A0;
  if (!qword_1003559A0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BB1A0,  &type metadata for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType);
    atomic_store(result, (unint64_t *)&qword_1003559A0);
  }

  return result;
}

unint64_t sub_10011FC70()
{
  unint64_t result = qword_1003559A8;
  if (!qword_1003559A8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BB1C8,  &type metadata for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType);
    atomic_store(result, (unint64_t *)&qword_1003559A8);
  }

  return result;
}

unint64_t sub_10011FCB8()
{
  unint64_t result = qword_1003559B0;
  if (!qword_1003559B0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BB250,  &type metadata for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType);
    atomic_store(result, (unint64_t *)&qword_1003559B0);
  }

  return result;
}

uint64_t sub_10011FCFC()
{
  return sub_100010014(&qword_1003559B8, &qword_1003559C0);
}

unint64_t sub_10011FD24()
{
  unint64_t result = qword_1003559C8;
  if (!qword_1003559C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BB2C0, &type metadata for CLP_LogEntry_PrivateData_LocationType);
    atomic_store(result, (unint64_t *)&qword_1003559C8);
  }

  return result;
}

unint64_t sub_10011FD6C()
{
  unint64_t result = qword_1003559D0;
  if (!qword_1003559D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BB2E8, &type metadata for CLP_LogEntry_PrivateData_LocationType);
    atomic_store(result, (unint64_t *)&qword_1003559D0);
  }

  return result;
}

unint64_t sub_10011FDB4()
{
  unint64_t result = qword_1003559D8;
  if (!qword_1003559D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BB370, &type metadata for CLP_LogEntry_PrivateData_LocationType);
    atomic_store(result, (unint64_t *)&qword_1003559D8);
  }

  return result;
}

uint64_t sub_10011FDF8()
{
  return sub_100010014(&qword_1003559E0, &qword_1003559E8);
}

unint64_t sub_10011FE20()
{
  unint64_t result = qword_1003559F0;
  if (!qword_1003559F0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BB3E0,  &type metadata for CLP_LogEntry_PrivateData_ClientSatelliteConstellation);
    atomic_store(result, (unint64_t *)&qword_1003559F0);
  }

  return result;
}

unint64_t sub_10011FE68()
{
  unint64_t result = qword_1003559F8;
  if (!qword_1003559F8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BB408,  &type metadata for CLP_LogEntry_PrivateData_ClientSatelliteConstellation);
    atomic_store(result, (unint64_t *)&qword_1003559F8);
  }

  return result;
}

unint64_t sub_10011FEB0()
{
  unint64_t result = qword_100355A00;
  if (!qword_100355A00)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BB490,  &type metadata for CLP_LogEntry_PrivateData_ClientSatelliteConstellation);
    atomic_store(result, (unint64_t *)&qword_100355A00);
  }

  return result;
}

uint64_t sub_10011FEF4()
{
  return sub_100010014(&qword_100355A08, &qword_100355A10);
}

unint64_t sub_10011FF1C()
{
  unint64_t result = qword_100355A18;
  if (!qword_100355A18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BB500, &type metadata for CLP_LogEntry_PrivateData_BatchedLocationFixType);
    atomic_store(result, (unint64_t *)&qword_100355A18);
  }

  return result;
}

unint64_t sub_10011FF64()
{
  unint64_t result = qword_100355A20;
  if (!qword_100355A20)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BB528, &type metadata for CLP_LogEntry_PrivateData_BatchedLocationFixType);
    atomic_store(result, (unint64_t *)&qword_100355A20);
  }

  return result;
}

unint64_t sub_10011FFAC()
{
  unint64_t result = qword_100355A28;
  if (!qword_100355A28)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BB5B0, &type metadata for CLP_LogEntry_PrivateData_BatchedLocationFixType);
    atomic_store(result, (unint64_t *)&qword_100355A28);
  }

  return result;
}

uint64_t sub_10011FFF0()
{
  return sub_100010014(&qword_100355A30, &qword_100355A38);
}

unint64_t sub_100120018()
{
  unint64_t result = qword_100355A40;
  if (!qword_100355A40)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BB620, &type metadata for CLP_LogEntry_PrivateData_GnssModeOfOperation);
    atomic_store(result, (unint64_t *)&qword_100355A40);
  }

  return result;
}

unint64_t sub_100120060()
{
  unint64_t result = qword_100355A48;
  if (!qword_100355A48)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BB648, &type metadata for CLP_LogEntry_PrivateData_GnssModeOfOperation);
    atomic_store(result, (unint64_t *)&qword_100355A48);
  }

  return result;
}

unint64_t sub_1001200A8()
{
  unint64_t result = qword_100355A50;
  if (!qword_100355A50)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BB6D0, &type metadata for CLP_LogEntry_PrivateData_GnssModeOfOperation);
    atomic_store(result, (unint64_t *)&qword_100355A50);
  }

  return result;
}

uint64_t sub_1001200EC()
{
  return sub_100010014(&qword_100355A58, &qword_100355A60);
}

unint64_t sub_100120114()
{
  unint64_t result = qword_100355A68;
  if (!qword_100355A68)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BB740, &type metadata for CLP_LogEntry_PrivateData_RhythmicGnssWakeMode);
    atomic_store(result, (unint64_t *)&qword_100355A68);
  }

  return result;
}

unint64_t sub_10012015C()
{
  unint64_t result = qword_100355A70;
  if (!qword_100355A70)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BB768, &type metadata for CLP_LogEntry_PrivateData_RhythmicGnssWakeMode);
    atomic_store(result, (unint64_t *)&qword_100355A70);
  }

  return result;
}

unint64_t sub_1001201A4()
{
  unint64_t result = qword_100355A78;
  if (!qword_100355A78)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BB7F0, &type metadata for CLP_LogEntry_PrivateData_RhythmicGnssWakeMode);
    atomic_store(result, (unint64_t *)&qword_100355A78);
  }

  return result;
}

uint64_t sub_1001201E8()
{
  return sub_100010014(&qword_100355A80, &qword_100355A88);
}

unint64_t sub_100120210()
{
  unint64_t result = qword_100355A90;
  if (!qword_100355A90)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BB860, &type metadata for CLP_LogEntry_PrivateData_BatchMode);
    atomic_store(result, (unint64_t *)&qword_100355A90);
  }

  return result;
}

unint64_t sub_100120258()
{
  unint64_t result = qword_100355A98;
  if (!qword_100355A98)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BB888, &type metadata for CLP_LogEntry_PrivateData_BatchMode);
    atomic_store(result, (unint64_t *)&qword_100355A98);
  }

  return result;
}

unint64_t sub_1001202A0()
{
  unint64_t result = qword_100355AA0;
  if (!qword_100355AA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BB910, &type metadata for CLP_LogEntry_PrivateData_BatchMode);
    atomic_store(result, (unint64_t *)&qword_100355AA0);
  }

  return result;
}

uint64_t sub_1001202E4()
{
  return sub_100010014(&qword_100355AA8, &qword_100355AB0);
}

unint64_t sub_10012030C()
{
  unint64_t result = qword_100355AB8;
  if (!qword_100355AB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BB980, &type metadata for CLP_LogEntry_PrivateData_OperatingMode);
    atomic_store(result, (unint64_t *)&qword_100355AB8);
  }

  return result;
}

unint64_t sub_100120354()
{
  unint64_t result = qword_100355AC0;
  if (!qword_100355AC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BB9A8, &type metadata for CLP_LogEntry_PrivateData_OperatingMode);
    atomic_store(result, (unint64_t *)&qword_100355AC0);
  }

  return result;
}

unint64_t sub_10012039C()
{
  unint64_t result = qword_100355AC8;
  if (!qword_100355AC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BBA30, &type metadata for CLP_LogEntry_PrivateData_OperatingMode);
    atomic_store(result, (unint64_t *)&qword_100355AC8);
  }

  return result;
}

uint64_t sub_1001203E0()
{
  return sub_100010014(&qword_100355AD0, &qword_100355AD8);
}

unint64_t sub_100120408()
{
  unint64_t result = qword_100355AE0;
  if (!qword_100355AE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BBAA0, &type metadata for CLP_LogEntry_PrivateData_PipelineOperatingMode);
    atomic_store(result, (unint64_t *)&qword_100355AE0);
  }

  return result;
}

unint64_t sub_100120450()
{
  unint64_t result = qword_100355AE8;
  if (!qword_100355AE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BBAC8, &type metadata for CLP_LogEntry_PrivateData_PipelineOperatingMode);
    atomic_store(result, (unint64_t *)&qword_100355AE8);
  }

  return result;
}

unint64_t sub_100120498()
{
  unint64_t result = qword_100355AF0;
  if (!qword_100355AF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BBB50, &type metadata for CLP_LogEntry_PrivateData_PipelineOperatingMode);
    atomic_store(result, (unint64_t *)&qword_100355AF0);
  }

  return result;
}

uint64_t sub_1001204DC()
{
  return sub_100010014(&qword_100355AF8, &qword_100355B00);
}

unint64_t sub_100120504()
{
  unint64_t result = qword_100355B08;
  if (!qword_100355B08)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BBBC0, &type metadata for CLP_LogEntry_PrivateData_DominantMotionModeType);
    atomic_store(result, (unint64_t *)&qword_100355B08);
  }

  return result;
}

unint64_t sub_10012054C()
{
  unint64_t result = qword_100355B10;
  if (!qword_100355B10)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BBBE8, &type metadata for CLP_LogEntry_PrivateData_DominantMotionModeType);
    atomic_store(result, (unint64_t *)&qword_100355B10);
  }

  return result;
}

unint64_t sub_100120594()
{
  unint64_t result = qword_100355B18;
  if (!qword_100355B18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BBC70, &type metadata for CLP_LogEntry_PrivateData_DominantMotionModeType);
    atomic_store(result, (unint64_t *)&qword_100355B18);
  }

  return result;
}

uint64_t sub_1001205D8()
{
  return sub_100010014(&qword_100355B20, &qword_100355B28);
}

unint64_t sub_100120600()
{
  unint64_t result = qword_100355B30;
  if (!qword_100355B30)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BBCE0, &type metadata for CLP_LogEntry_PrivateData_ReachabilityType);
    atomic_store(result, (unint64_t *)&qword_100355B30);
  }

  return result;
}

unint64_t sub_100120648()
{
  unint64_t result = qword_100355B38;
  if (!qword_100355B38)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BBD08, &type metadata for CLP_LogEntry_PrivateData_ReachabilityType);
    atomic_store(result, (unint64_t *)&qword_100355B38);
  }

  return result;
}

unint64_t sub_100120690()
{
  unint64_t result = qword_100355B40;
  if (!qword_100355B40)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BBD90, &type metadata for CLP_LogEntry_PrivateData_ReachabilityType);
    atomic_store(result, (unint64_t *)&qword_100355B40);
  }

  return result;
}

uint64_t sub_1001206D4()
{
  return sub_100010014(&qword_100355B48, &qword_100355B50);
}

unint64_t sub_1001206FC()
{
  unint64_t result = qword_100355B58;
  if (!qword_100355B58)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BBE00, &type metadata for CLP_LogEntry_PrivateData_BatteryChargerType);
    atomic_store(result, (unint64_t *)&qword_100355B58);
  }

  return result;
}

unint64_t sub_100120744()
{
  unint64_t result = qword_100355B60;
  if (!qword_100355B60)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BBE28, &type metadata for CLP_LogEntry_PrivateData_BatteryChargerType);
    atomic_store(result, (unint64_t *)&qword_100355B60);
  }

  return result;
}

unint64_t sub_10012078C()
{
  unint64_t result = qword_100355B68;
  if (!qword_100355B68)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BBEB0, &type metadata for CLP_LogEntry_PrivateData_BatteryChargerType);
    atomic_store(result, (unint64_t *)&qword_100355B68);
  }

  return result;
}

uint64_t sub_1001207D0()
{
  return sub_100010014(&qword_100355B70, &qword_100355B78);
}

unint64_t sub_1001207F8()
{
  unint64_t result = qword_100355B80;
  if (!qword_100355B80)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BBF20,  &type metadata for CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel);
    atomic_store(result, (unint64_t *)&qword_100355B80);
  }

  return result;
}

unint64_t sub_100120840()
{
  unint64_t result = qword_100355B88;
  if (!qword_100355B88)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BBF48,  &type metadata for CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel);
    atomic_store(result, (unint64_t *)&qword_100355B88);
  }

  return result;
}

unint64_t sub_100120888()
{
  unint64_t result = qword_100355B90;
  if (!qword_100355B90)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BBFD0,  &type metadata for CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel);
    atomic_store(result, (unint64_t *)&qword_100355B90);
  }

  return result;
}

uint64_t sub_1001208CC()
{
  return sub_100010014(&qword_100355B98, &qword_100355BA0);
}

unint64_t sub_1001208F4()
{
  unint64_t result = qword_100355BA8;
  if (!qword_100355BA8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BC040,  &type metadata for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel);
    atomic_store(result, (unint64_t *)&qword_100355BA8);
  }

  return result;
}

unint64_t sub_10012093C()
{
  unint64_t result = qword_100355BB0;
  if (!qword_100355BB0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BC068,  &type metadata for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel);
    atomic_store(result, (unint64_t *)&qword_100355BB0);
  }

  return result;
}

unint64_t sub_100120984()
{
  unint64_t result = qword_100355BB8;
  if (!qword_100355BB8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BC0F0,  &type metadata for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel);
    atomic_store(result, (unint64_t *)&qword_100355BB8);
  }

  return result;
}

uint64_t sub_1001209C8()
{
  return sub_100010014(&qword_100355BC0, &qword_100355BC8);
}

unint64_t sub_1001209F0()
{
  unint64_t result = qword_100355BD0;
  if (!qword_100355BD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BC160, &type metadata for CLP_LogEntry_PrivateData_SensorFusionMode);
    atomic_store(result, (unint64_t *)&qword_100355BD0);
  }

  return result;
}

unint64_t sub_100120A38()
{
  unint64_t result = qword_100355BD8;
  if (!qword_100355BD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BC188, &type metadata for CLP_LogEntry_PrivateData_SensorFusionMode);
    atomic_store(result, (unint64_t *)&qword_100355BD8);
  }

  return result;
}

unint64_t sub_100120A80()
{
  unint64_t result = qword_100355BE0;
  if (!qword_100355BE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BC210, &type metadata for CLP_LogEntry_PrivateData_SensorFusionMode);
    atomic_store(result, (unint64_t *)&qword_100355BE0);
  }

  return result;
}

uint64_t sub_100120AC4()
{
  return sub_100010014(&qword_100355BE8, &qword_100355BF0);
}

unint64_t sub_100120AEC()
{
  unint64_t result = qword_100355BF8;
  if (!qword_100355BF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BC280, &type metadata for CLP_LogEntry_PrivateData_WifiAccessPointMode);
    atomic_store(result, (unint64_t *)&qword_100355BF8);
  }

  return result;
}

unint64_t sub_100120B34()
{
  unint64_t result = qword_100355C00;
  if (!qword_100355C00)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BC2A8, &type metadata for CLP_LogEntry_PrivateData_WifiAccessPointMode);
    atomic_store(result, (unint64_t *)&qword_100355C00);
  }

  return result;
}

unint64_t sub_100120B7C()
{
  unint64_t result = qword_100355C08;
  if (!qword_100355C08)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BC330, &type metadata for CLP_LogEntry_PrivateData_WifiAccessPointMode);
    atomic_store(result, (unint64_t *)&qword_100355C08);
  }

  return result;
}

uint64_t sub_100120BC0()
{
  return sub_100010014(&qword_100355C10, &qword_100355C18);
}

unint64_t sub_100120BEC()
{
  unint64_t result = qword_100355C20;
  if (!qword_100355C20)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BC3C8, &type metadata for CLP_LogEntry_PrivateData_WifiRfBand);
    atomic_store(result, (unint64_t *)&qword_100355C20);
  }

  return result;
}

unint64_t sub_100120C34()
{
  unint64_t result = qword_100355C28;
  if (!qword_100355C28)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BC450, &type metadata for CLP_LogEntry_PrivateData_WifiRfBand);
    atomic_store(result, (unint64_t *)&qword_100355C28);
  }

  return result;
}

uint64_t sub_100120C78()
{
  return sub_100010014(&qword_100355C30, &qword_100355C38);
}

unint64_t sub_100120CA0()
{
  unint64_t result = qword_100355C40;
  if (!qword_100355C40)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BC4C0, &type metadata for CLP_LogEntry_PrivateData_WifiScanType);
    atomic_store(result, (unint64_t *)&qword_100355C40);
  }

  return result;
}

unint64_t sub_100120CE8()
{
  unint64_t result = qword_100355C48;
  if (!qword_100355C48)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BC4E8, &type metadata for CLP_LogEntry_PrivateData_WifiScanType);
    atomic_store(result, (unint64_t *)&qword_100355C48);
  }

  return result;
}

unint64_t sub_100120D30()
{
  unint64_t result = qword_100355C50;
  if (!qword_100355C50)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BC570, &type metadata for CLP_LogEntry_PrivateData_WifiScanType);
    atomic_store(result, (unint64_t *)&qword_100355C50);
  }

  return result;
}

uint64_t sub_100120D74()
{
  return sub_100010014(&qword_100355C58, &qword_100355C60);
}

unint64_t sub_100120D9C()
{
  unint64_t result = qword_100355C68;
  if (!qword_100355C68)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BC5E0, &type metadata for CLP_LogEntry_PrivateData_WifiNotificationType);
    atomic_store(result, (unint64_t *)&qword_100355C68);
  }

  return result;
}

unint64_t sub_100120DE4()
{
  unint64_t result = qword_100355C70;
  if (!qword_100355C70)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BC608, &type metadata for CLP_LogEntry_PrivateData_WifiNotificationType);
    atomic_store(result, (unint64_t *)&qword_100355C70);
  }

  return result;
}

unint64_t sub_100120E2C()
{
  unint64_t result = qword_100355C78;
  if (!qword_100355C78)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BC690, &type metadata for CLP_LogEntry_PrivateData_WifiNotificationType);
    atomic_store(result, (unint64_t *)&qword_100355C78);
  }

  return result;
}

uint64_t sub_100120E70()
{
  return sub_100010014(&qword_100355C80, &qword_100355C88);
}

unint64_t sub_100120E98()
{
  unint64_t result = qword_100355C90;
  if (!qword_100355C90)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BC700, &type metadata for CLP_LogEntry_PrivateData_LocationServicesEnabled);
    atomic_store(result, (unint64_t *)&qword_100355C90);
  }

  return result;
}

unint64_t sub_100120EE0()
{
  unint64_t result = qword_100355C98;
  if (!qword_100355C98)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BC728, &type metadata for CLP_LogEntry_PrivateData_LocationServicesEnabled);
    atomic_store(result, (unint64_t *)&qword_100355C98);
  }

  return result;
}

unint64_t sub_100120F28()
{
  unint64_t result = qword_100355CA0;
  if (!qword_100355CA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BC7B0, &type metadata for CLP_LogEntry_PrivateData_LocationServicesEnabled);
    atomic_store(result, (unint64_t *)&qword_100355CA0);
  }

  return result;
}

uint64_t sub_100120F6C()
{
  return sub_100010014(&qword_100355CA8, &qword_100355CB0);
}

unint64_t sub_100120F94()
{
  unint64_t result = qword_100355CB8;
  if (!qword_100355CB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BC820, &type metadata for CLP_LogEntry_PrivateData_DataAvailability);
    atomic_store(result, (unint64_t *)&qword_100355CB8);
  }

  return result;
}

unint64_t sub_100120FDC()
{
  unint64_t result = qword_100355CC0;
  if (!qword_100355CC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BC848, &type metadata for CLP_LogEntry_PrivateData_DataAvailability);
    atomic_store(result, (unint64_t *)&qword_100355CC0);
  }

  return result;
}

unint64_t sub_100121024()
{
  unint64_t result = qword_100355CC8;
  if (!qword_100355CC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BC8D0, &type metadata for CLP_LogEntry_PrivateData_DataAvailability);
    atomic_store(result, (unint64_t *)&qword_100355CC8);
  }

  return result;
}

uint64_t sub_100121068()
{
  return sub_100010014(&qword_100355CD0, &qword_100355CD8);
}

unint64_t sub_100121090()
{
  unint64_t result = qword_100355CE0;
  if (!qword_100355CE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BC940, &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorType);
    atomic_store(result, (unint64_t *)&qword_100355CE0);
  }

  return result;
}

unint64_t sub_1001210D8()
{
  unint64_t result = qword_100355CE8;
  if (!qword_100355CE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BC968, &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorType);
    atomic_store(result, (unint64_t *)&qword_100355CE8);
  }

  return result;
}

unint64_t sub_100121120()
{
  unint64_t result = qword_100355CF0;
  if (!qword_100355CF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BC9F0, &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorType);
    atomic_store(result, (unint64_t *)&qword_100355CF0);
  }

  return result;
}

uint64_t sub_100121164()
{
  return sub_100010014(&qword_100355CF8, &qword_100355D00);
}

unint64_t sub_10012118C()
{
  unint64_t result = qword_100355D08;
  if (!qword_100355D08)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BCA60, &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorConfidence);
    atomic_store(result, (unint64_t *)&qword_100355D08);
  }

  return result;
}

unint64_t sub_1001211D4()
{
  unint64_t result = qword_100355D10;
  if (!qword_100355D10)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BCA88, &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorConfidence);
    atomic_store(result, (unint64_t *)&qword_100355D10);
  }

  return result;
}

unint64_t sub_10012121C()
{
  unint64_t result = qword_100355D18;
  if (!qword_100355D18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BCB10, &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorConfidence);
    atomic_store(result, (unint64_t *)&qword_100355D18);
  }

  return result;
}

uint64_t sub_100121260()
{
  return sub_100010014(&qword_100355D20, &qword_100355D28);
}

unint64_t sub_100121288()
{
  unint64_t result = qword_100355D30;
  if (!qword_100355D30)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BCB80,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType);
    atomic_store(result, (unint64_t *)&qword_100355D30);
  }

  return result;
}

unint64_t sub_1001212D0()
{
  unint64_t result = qword_100355D38;
  if (!qword_100355D38)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BCBA8,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType);
    atomic_store(result, (unint64_t *)&qword_100355D38);
  }

  return result;
}

unint64_t sub_100121318()
{
  unint64_t result = qword_100355D40;
  if (!qword_100355D40)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BCC30,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType);
    atomic_store(result, (unint64_t *)&qword_100355D40);
  }

  return result;
}

unint64_t sub_100121360()
{
  unint64_t result = qword_100355D48;
  if (!qword_100355D48)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BCC68,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType);
    atomic_store(result, (unint64_t *)&qword_100355D48);
  }

  return result;
}

unint64_t sub_1001213A8()
{
  unint64_t result = qword_100355D50;
  if (!qword_100355D50)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BCC90,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType);
    atomic_store(result, (unint64_t *)&qword_100355D50);
  }

  return result;
}

unint64_t sub_1001213F0()
{
  unint64_t result = qword_100355D58;
  if (!qword_100355D58)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BCD18,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType);
    atomic_store(result, (unint64_t *)&qword_100355D58);
  }

  return result;
}

uint64_t sub_100121434()
{
  return sub_100010014(&qword_100355D60, &qword_100355D68);
}

uint64_t sub_100121458()
{
  return sub_100010014(&qword_100355D70, &qword_100355D78);
}

unint64_t sub_100121480()
{
  unint64_t result = qword_100355D80;
  if (!qword_100355D80)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BCDC0,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType);
    atomic_store(result, (unint64_t *)&qword_100355D80);
  }

  return result;
}

unint64_t sub_1001214C8()
{
  unint64_t result = qword_100355D88;
  if (!qword_100355D88)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BCDE8,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType);
    atomic_store(result, (unint64_t *)&qword_100355D88);
  }

  return result;
}

unint64_t sub_100121510()
{
  unint64_t result = qword_100355D90;
  if (!qword_100355D90)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BCE70,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType);
    atomic_store(result, (unint64_t *)&qword_100355D90);
  }

  return result;
}

unint64_t sub_100121558()
{
  unint64_t result = qword_100355D98;
  if (!qword_100355D98)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BCEA8,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType);
    atomic_store(result, (unint64_t *)&qword_100355D98);
  }

  return result;
}

unint64_t sub_1001215A0()
{
  unint64_t result = qword_100355DA0;
  if (!qword_100355DA0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BCED0,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType);
    atomic_store(result, (unint64_t *)&qword_100355DA0);
  }

  return result;
}

unint64_t sub_1001215E8()
{
  unint64_t result = qword_100355DA8;
  if (!qword_100355DA8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BCF58,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType);
    atomic_store(result, (unint64_t *)&qword_100355DA8);
  }

  return result;
}

unint64_t sub_100121630()
{
  unint64_t result = qword_100355DB0;
  if (!qword_100355DB0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BCF90,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType);
    atomic_store(result, (unint64_t *)&qword_100355DB0);
  }

  return result;
}

unint64_t sub_100121678()
{
  unint64_t result = qword_100355DB8;
  if (!qword_100355DB8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BCFB8,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType);
    atomic_store(result, (unint64_t *)&qword_100355DB8);
  }

  return result;
}

unint64_t sub_1001216C0()
{
  unint64_t result = qword_100355DC0;
  if (!qword_100355DC0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD040,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType);
    atomic_store(result, (unint64_t *)&qword_100355DC0);
  }

  return result;
}

unint64_t sub_100121708()
{
  unint64_t result = qword_100355DC8;
  if (!qword_100355DC8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD078,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent);
    atomic_store(result, (unint64_t *)&qword_100355DC8);
  }

  return result;
}

unint64_t sub_100121750()
{
  unint64_t result = qword_100355DD0;
  if (!qword_100355DD0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD0A0,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent);
    atomic_store(result, (unint64_t *)&qword_100355DD0);
  }

  return result;
}

unint64_t sub_100121798()
{
  unint64_t result = qword_100355DD8;
  if (!qword_100355DD8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD128,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent);
    atomic_store(result, (unint64_t *)&qword_100355DD8);
  }

  return result;
}

unint64_t sub_1001217E0()
{
  unint64_t result = qword_100355DE0;
  if (!qword_100355DE0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD160,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType);
    atomic_store(result, (unint64_t *)&qword_100355DE0);
  }

  return result;
}

unint64_t sub_100121828()
{
  unint64_t result = qword_100355DE8;
  if (!qword_100355DE8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD188,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType);
    atomic_store(result, (unint64_t *)&qword_100355DE8);
  }

  return result;
}

unint64_t sub_100121870()
{
  unint64_t result = qword_100355DF0;
  if (!qword_100355DF0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD210,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType);
    atomic_store(result, (unint64_t *)&qword_100355DF0);
  }

  return result;
}

unint64_t sub_1001218B8()
{
  unint64_t result = qword_100355DF8;
  if (!qword_100355DF8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD248,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType);
    atomic_store(result, (unint64_t *)&qword_100355DF8);
  }

  return result;
}

unint64_t sub_100121900()
{
  unint64_t result = qword_100355E00;
  if (!qword_100355E00)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD270,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType);
    atomic_store(result, (unint64_t *)&qword_100355E00);
  }

  return result;
}

unint64_t sub_100121948()
{
  unint64_t result = qword_100355E08;
  if (!qword_100355E08)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD2F8,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType);
    atomic_store(result, (unint64_t *)&qword_100355E08);
  }

  return result;
}

unint64_t sub_100121990()
{
  unint64_t result = qword_100355E10;
  if (!qword_100355E10)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD330,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy);
    atomic_store(result, (unint64_t *)&qword_100355E10);
  }

  return result;
}

unint64_t sub_1001219D8()
{
  unint64_t result = qword_100355E18;
  if (!qword_100355E18)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD358,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy);
    atomic_store(result, (unint64_t *)&qword_100355E18);
  }

  return result;
}

unint64_t sub_100121A20()
{
  unint64_t result = qword_100355E20;
  if (!qword_100355E20)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD3E0,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy);
    atomic_store(result, (unint64_t *)&qword_100355E20);
  }

  return result;
}

uint64_t sub_100121A64()
{
  return sub_100010014(&qword_100355E28, &qword_100355E30);
}

uint64_t sub_100121A88()
{
  return sub_100010014(&qword_100355E38, &qword_100355E40);
}

uint64_t sub_100121AAC()
{
  return sub_100010014(&qword_100355E48, &qword_100355E50);
}

uint64_t sub_100121AD0()
{
  return sub_100010014(&qword_100355E58, &qword_100355E60);
}

uint64_t sub_100121AF4()
{
  return sub_100010014(&qword_100355E68, &qword_100355E70);
}

uint64_t sub_100121B18()
{
  return sub_100010014(&qword_100355E78, &qword_100355E80);
}

uint64_t sub_100121B3C()
{
  return sub_100010014(&qword_100355E88, &qword_100355E90);
}

unint64_t sub_100121B64()
{
  unint64_t result = qword_100355E98;
  if (!qword_100355E98)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD5A0,  &type metadata for CLP_LogEntry_PrivateData_Location.SignalQualityType);
    atomic_store(result, (unint64_t *)&qword_100355E98);
  }

  return result;
}

unint64_t sub_100121BAC()
{
  unint64_t result = qword_100355EA0;
  if (!qword_100355EA0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD5C8,  &type metadata for CLP_LogEntry_PrivateData_Location.SignalQualityType);
    atomic_store(result, (unint64_t *)&qword_100355EA0);
  }

  return result;
}

unint64_t sub_100121BF4()
{
  unint64_t result = qword_100355EA8;
  if (!qword_100355EA8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD650,  &type metadata for CLP_LogEntry_PrivateData_Location.SignalQualityType);
    atomic_store(result, (unint64_t *)&qword_100355EA8);
  }

  return result;
}

unint64_t sub_100121C3C()
{
  unint64_t result = qword_100355EB0;
  if (!qword_100355EB0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD688,  &type metadata for CLP_LogEntry_PrivateData_Location.MotionDetectedType);
    atomic_store(result, (unint64_t *)&qword_100355EB0);
  }

  return result;
}

unint64_t sub_100121C84()
{
  unint64_t result = qword_100355EB8;
  if (!qword_100355EB8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD6B0,  &type metadata for CLP_LogEntry_PrivateData_Location.MotionDetectedType);
    atomic_store(result, (unint64_t *)&qword_100355EB8);
  }

  return result;
}

unint64_t sub_100121CCC()
{
  unint64_t result = qword_100355EC0;
  if (!qword_100355EC0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD738,  &type metadata for CLP_LogEntry_PrivateData_Location.MotionDetectedType);
    atomic_store(result, (unint64_t *)&qword_100355EC0);
  }

  return result;
}

uint64_t sub_100121D10()
{
  return sub_100010014(&qword_100355EC8, &qword_100355ED0);
}

uint64_t sub_100121D34()
{
  return sub_100010014(&qword_100355ED8, &qword_100355EE0);
}

unint64_t sub_100121D5C()
{
  unint64_t result = qword_100355EE8;
  if (!qword_100355EE8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD7E0,  &type metadata for CLP_LogEntry_PrivateData_MotionActivity.MountedStateType);
    atomic_store(result, (unint64_t *)&qword_100355EE8);
  }

  return result;
}

unint64_t sub_100121DA4()
{
  unint64_t result = qword_100355EF0;
  if (!qword_100355EF0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD808,  &type metadata for CLP_LogEntry_PrivateData_MotionActivity.MountedStateType);
    atomic_store(result, (unint64_t *)&qword_100355EF0);
  }

  return result;
}

unint64_t sub_100121DEC()
{
  unint64_t result = qword_100355EF8;
  if (!qword_100355EF8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD890,  &type metadata for CLP_LogEntry_PrivateData_MotionActivity.MountedStateType);
    atomic_store(result, (unint64_t *)&qword_100355EF8);
  }

  return result;
}

unint64_t sub_100121E34()
{
  unint64_t result = qword_100355F00;
  if (!qword_100355F00)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD8C8,  &type metadata for CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType);
    atomic_store(result, (unint64_t *)&qword_100355F00);
  }

  return result;
}

unint64_t sub_100121E7C()
{
  unint64_t result = qword_100355F08;
  if (!qword_100355F08)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD8F0,  &type metadata for CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType);
    atomic_store(result, (unint64_t *)&qword_100355F08);
  }

  return result;
}

unint64_t sub_100121EC4()
{
  unint64_t result = qword_100355F10;
  if (!qword_100355F10)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD978,  &type metadata for CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType);
    atomic_store(result, (unint64_t *)&qword_100355F10);
  }

  return result;
}

unint64_t sub_100121F0C()
{
  unint64_t result = qword_100355F18;
  if (!qword_100355F18)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD9B0,  &type metadata for CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType);
    atomic_store(result, (unint64_t *)&qword_100355F18);
  }

  return result;
}

unint64_t sub_100121F54()
{
  unint64_t result = qword_100355F20;
  if (!qword_100355F20)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD9D8,  &type metadata for CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType);
    atomic_store(result, (unint64_t *)&qword_100355F20);
  }

  return result;
}

unint64_t sub_100121F9C()
{
  unint64_t result = qword_100355F28;
  if (!qword_100355F28)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BDA60,  &type metadata for CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType);
    atomic_store(result, (unint64_t *)&qword_100355F28);
  }

  return result;
}

uint64_t sub_100121FE0()
{
  return sub_100010014(&qword_100355F30, &qword_100355F38);
}

uint64_t sub_100122004()
{
  return sub_100010014(&qword_100355F40, &qword_100355F48);
}

uint64_t sub_100122028()
{
  return sub_100010014(&qword_100355F50, &qword_100355F58);
}

unint64_t sub_100122050()
{
  unint64_t result = qword_100355F60;
  if (!qword_100355F60)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BDB40,  &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType);
    atomic_store(result, (unint64_t *)&qword_100355F60);
  }

  return result;
}

unint64_t sub_100122098()
{
  unint64_t result = qword_100355F68;
  if (!qword_100355F68)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BDB68,  &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType);
    atomic_store(result, (unint64_t *)&qword_100355F68);
  }

  return result;
}

unint64_t sub_1001220E0()
{
  unint64_t result = qword_100355F70;
  if (!qword_100355F70)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BDBF0,  &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType);
    atomic_store(result, (unint64_t *)&qword_100355F70);
  }

  return result;
}

unint64_t sub_100122128()
{
  unint64_t result = qword_100355F78;
  if (!qword_100355F78)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BDC28,  &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType);
    atomic_store(result, (unint64_t *)&qword_100355F78);
  }

  return result;
}

unint64_t sub_100122170()
{
  unint64_t result = qword_100355F80;
  if (!qword_100355F80)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BDC50,  &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType);
    atomic_store(result, (unint64_t *)&qword_100355F80);
  }

  return result;
}

unint64_t sub_1001221B8()
{
  unint64_t result = qword_100355F88;
  if (!qword_100355F88)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BDCD8,  &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType);
    atomic_store(result, (unint64_t *)&qword_100355F88);
  }

  return result;
}

unint64_t sub_100122200()
{
  unint64_t result = qword_100355F90;
  if (!qword_100355F90)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BDD10,  &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode);
    atomic_store(result, (unint64_t *)&qword_100355F90);
  }

  return result;
}

unint64_t sub_100122248()
{
  unint64_t result = qword_100355F98;
  if (!qword_100355F98)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BDD38,  &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode);
    atomic_store(result, (unint64_t *)&qword_100355F98);
  }

  return result;
}

unint64_t sub_100122290()
{
  unint64_t result = qword_100355FA0;
  if (!qword_100355FA0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BDDC0,  &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode);
    atomic_store(result, (unint64_t *)&qword_100355FA0);
  }

  return result;
}

uint64_t sub_1001222D4()
{
  return sub_100010014(&qword_100355FA8, &qword_100355FB0);
}

uint64_t sub_1001222F8()
{
  return sub_100010014(&qword_100355FB8, &qword_100355FC0);
}

uint64_t sub_10012231C()
{
  return sub_100010014(&qword_100355FC8, &qword_100355FD0);
}

unint64_t sub_100122344()
{
  unint64_t result = qword_100355FD8;
  if (!qword_100355FD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BDEA0, &type metadata for CLP_LogEntry_PrivateData_WorkoutEvent.EventType);
    atomic_store(result, (unint64_t *)&qword_100355FD8);
  }

  return result;
}

unint64_t sub_10012238C()
{
  unint64_t result = qword_100355FE0;
  if (!qword_100355FE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BDEC8, &type metadata for CLP_LogEntry_PrivateData_WorkoutEvent.EventType);
    atomic_store(result, (unint64_t *)&qword_100355FE0);
  }

  return result;
}

unint64_t sub_1001223D4()
{
  unint64_t result = qword_100355FE8;
  if (!qword_100355FE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BDF50, &type metadata for CLP_LogEntry_PrivateData_WorkoutEvent.EventType);
    atomic_store(result, (unint64_t *)&qword_100355FE8);
  }

  return result;
}

uint64_t sub_100122418()
{
  return sub_100010014(&qword_100355FF0, &qword_100355FF8);
}

unint64_t sub_100122440()
{
  unint64_t result = qword_100356000;
  if (!qword_100356000)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BDFC0,  &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType);
    atomic_store(result, (unint64_t *)&qword_100356000);
  }

  return result;
}

unint64_t sub_100122488()
{
  unint64_t result = qword_100356008;
  if (!qword_100356008)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BDFE8,  &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType);
    atomic_store(result, (unint64_t *)&qword_100356008);
  }

  return result;
}

unint64_t sub_1001224D0()
{
  unint64_t result = qword_100356010;
  if (!qword_100356010)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE070,  &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType);
    atomic_store(result, (unint64_t *)&qword_100356010);
  }

  return result;
}

unint64_t sub_100122518()
{
  unint64_t result = qword_100356018;
  if (!qword_100356018)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE0A8,  &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType);
    atomic_store(result, (unint64_t *)&qword_100356018);
  }

  return result;
}

unint64_t sub_100122560()
{
  unint64_t result = qword_100356020;
  if (!qword_100356020)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE0D0,  &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType);
    atomic_store(result, (unint64_t *)&qword_100356020);
  }

  return result;
}

unint64_t sub_1001225A8()
{
  unint64_t result = qword_100356028;
  if (!qword_100356028)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE158,  &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType);
    atomic_store(result, (unint64_t *)&qword_100356028);
  }

  return result;
}

uint64_t sub_1001225EC()
{
  return sub_100010014(&qword_100356030, &qword_100356038);
}

uint64_t sub_100122610()
{
  return sub_100010014(&qword_100356040, &qword_100356048);
}

unint64_t sub_100122638()
{
  unint64_t result = qword_100356050;
  if (!qword_100356050)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE200,  &type metadata for CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType);
    atomic_store(result, (unint64_t *)&qword_100356050);
  }

  return result;
}

unint64_t sub_100122680()
{
  unint64_t result = qword_100356058;
  if (!qword_100356058)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE228,  &type metadata for CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType);
    atomic_store(result, (unint64_t *)&qword_100356058);
  }

  return result;
}

unint64_t sub_1001226C8()
{
  unint64_t result = qword_100356060;
  if (!qword_100356060)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE2B0,  &type metadata for CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType);
    atomic_store(result, (unint64_t *)&qword_100356060);
  }

  return result;
}

uint64_t sub_10012270C()
{
  return sub_100010014(&qword_100356068, &qword_100356070);
}

unint64_t sub_100122734()
{
  unint64_t result = qword_100356078;
  if (!qword_100356078)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE320,  &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType);
    atomic_store(result, (unint64_t *)&qword_100356078);
  }

  return result;
}

unint64_t sub_10012277C()
{
  unint64_t result = qword_100356080;
  if (!qword_100356080)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE348,  &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType);
    atomic_store(result, (unint64_t *)&qword_100356080);
  }

  return result;
}

unint64_t sub_1001227C4()
{
  unint64_t result = qword_100356088;
  if (!qword_100356088)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE3D0,  &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType);
    atomic_store(result, (unint64_t *)&qword_100356088);
  }

  return result;
}

unint64_t sub_10012280C()
{
  unint64_t result = qword_100356090;
  if (!qword_100356090)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE408,  &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType);
    atomic_store(result, (unint64_t *)&qword_100356090);
  }

  return result;
}

unint64_t sub_100122854()
{
  unint64_t result = qword_100356098;
  if (!qword_100356098)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE430,  &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType);
    atomic_store(result, (unint64_t *)&qword_100356098);
  }

  return result;
}

unint64_t sub_10012289C()
{
  unint64_t result = qword_1003560A0;
  if (!qword_1003560A0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE4B8,  &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType);
    atomic_store(result, (unint64_t *)&qword_1003560A0);
  }

  return result;
}

uint64_t sub_1001228E0()
{
  return sub_100010014(&qword_1003560A8, &qword_1003560B0);
}

uint64_t sub_100122904()
{
  return sub_100010014(&qword_1003560B8, &qword_1003560C0);
}

unint64_t sub_10012292C()
{
  unint64_t result = qword_1003560C8;
  if (!qword_1003560C8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE560,  &type metadata for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType);
    atomic_store(result, (unint64_t *)&qword_1003560C8);
  }

  return result;
}

unint64_t sub_100122974()
{
  unint64_t result = qword_1003560D0;
  if (!qword_1003560D0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE588,  &type metadata for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType);
    atomic_store(result, (unint64_t *)&qword_1003560D0);
  }

  return result;
}

unint64_t sub_1001229BC()
{
  unint64_t result = qword_1003560D8;
  if (!qword_1003560D8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE610,  &type metadata for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType);
    atomic_store(result, (unint64_t *)&qword_1003560D8);
  }

  return result;
}

uint64_t sub_100122A00()
{
  return sub_100010014(&qword_1003560E0, &qword_1003560E8);
}

unint64_t sub_100122A28()
{
  unint64_t result = qword_1003560F0;
  if (!qword_1003560F0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE680,  &type metadata for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType);
    atomic_store(result, (unint64_t *)&qword_1003560F0);
  }

  return result;
}

unint64_t sub_100122A70()
{
  unint64_t result = qword_1003560F8;
  if (!qword_1003560F8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE6A8,  &type metadata for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType);
    atomic_store(result, (unint64_t *)&qword_1003560F8);
  }

  return result;
}

unint64_t sub_100122AB8()
{
  unint64_t result = qword_100356100;
  if (!qword_100356100)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE730,  &type metadata for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType);
    atomic_store(result, (unint64_t *)&qword_100356100);
  }

  return result;
}

uint64_t sub_100122AFC()
{
  return sub_100010014(&qword_100356108, &qword_100356110);
}

unint64_t sub_100122B24()
{
  unint64_t result = qword_100356118;
  if (!qword_100356118)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE7A0,  &type metadata for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType);
    atomic_store(result, (unint64_t *)&qword_100356118);
  }

  return result;
}

unint64_t sub_100122B6C()
{
  unint64_t result = qword_100356120;
  if (!qword_100356120)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE7C8,  &type metadata for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType);
    atomic_store(result, (unint64_t *)&qword_100356120);
  }

  return result;
}

unint64_t sub_100122BB4()
{
  unint64_t result = qword_100356128;
  if (!qword_100356128)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE850,  &type metadata for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType);
    atomic_store(result, (unint64_t *)&qword_100356128);
  }

  return result;
}

uint64_t sub_100122BF8()
{
  return sub_100010014(&qword_100356130, &qword_100356138);
}

unint64_t sub_100122C20()
{
  unint64_t result = qword_100356140;
  if (!qword_100356140)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE8C0,  &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability);
    atomic_store(result, (unint64_t *)&qword_100356140);
  }

  return result;
}

unint64_t sub_100122C68()
{
  unint64_t result = qword_100356148;
  if (!qword_100356148)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE8E8,  &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability);
    atomic_store(result, (unint64_t *)&qword_100356148);
  }

  return result;
}

unint64_t sub_100122CB0()
{
  unint64_t result = qword_100356150;
  if (!qword_100356150)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE970,  &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability);
    atomic_store(result, (unint64_t *)&qword_100356150);
  }

  return result;
}

unint64_t sub_100122CF8()
{
  unint64_t result = qword_100356158;
  if (!qword_100356158)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE9A8,  &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource);
    atomic_store(result, (unint64_t *)&qword_100356158);
  }

  return result;
}

unint64_t sub_100122D40()
{
  unint64_t result = qword_100356160;
  if (!qword_100356160)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE9D0,  &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource);
    atomic_store(result, (unint64_t *)&qword_100356160);
  }

  return result;
}

unint64_t sub_100122D88()
{
  unint64_t result = qword_100356168;
  if (!qword_100356168)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BEA58,  &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource);
    atomic_store(result, (unint64_t *)&qword_100356168);
  }

  return result;
}

uint64_t sub_100122DCC()
{
  return sub_100010014(&qword_100356170, &qword_100356178);
}

uint64_t sub_100122DF0()
{
  return sub_100010014(&qword_100356180, &qword_100356188);
}

unint64_t sub_100122E18()
{
  unint64_t result = qword_100356190;
  if (!qword_100356190)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BEB00,  &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType);
    atomic_store(result, (unint64_t *)&qword_100356190);
  }

  return result;
}

unint64_t sub_100122E60()
{
  unint64_t result = qword_100356198;
  if (!qword_100356198)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BEB28,  &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType);
    atomic_store(result, (unint64_t *)&qword_100356198);
  }

  return result;
}

unint64_t sub_100122EA8()
{
  unint64_t result = qword_1003561A0;
  if (!qword_1003561A0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BEBB0,  &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType);
    atomic_store(result, (unint64_t *)&qword_1003561A0);
  }

  return result;
}

uint64_t sub_100122EEC()
{
  return sub_100010014(&qword_1003561A8, &qword_1003561B0);
}

unint64_t sub_100122F14()
{
  unint64_t result = qword_1003561B8;
  if (!qword_1003561B8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BEC20,  &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType);
    atomic_store(result, (unint64_t *)&qword_1003561B8);
  }

  return result;
}

unint64_t sub_100122F5C()
{
  unint64_t result = qword_1003561C0;
  if (!qword_1003561C0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BEC48,  &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType);
    atomic_store(result, (unint64_t *)&qword_1003561C0);
  }

  return result;
}

unint64_t sub_100122FA4()
{
  unint64_t result = qword_1003561C8;
  if (!qword_1003561C8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BECD0,  &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType);
    atomic_store(result, (unint64_t *)&qword_1003561C8);
  }

  return result;
}

uint64_t sub_100122FE8()
{
  return sub_100010014(&qword_1003561D0, &qword_1003561D8);
}

unint64_t sub_100123010()
{
  unint64_t result = qword_1003561E0;
  if (!qword_1003561E0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BED40,  &type metadata for CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType);
    atomic_store(result, (unint64_t *)&qword_1003561E0);
  }

  return result;
}

unint64_t sub_100123058()
{
  unint64_t result = qword_1003561E8;
  if (!qword_1003561E8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BED68,  &type metadata for CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType);
    atomic_store(result, (unint64_t *)&qword_1003561E8);
  }

  return result;
}

unint64_t sub_1001230A0()
{
  unint64_t result = qword_1003561F0;
  if (!qword_1003561F0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BEDF0,  &type metadata for CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType);
    atomic_store(result, (unint64_t *)&qword_1003561F0);
  }

  return result;
}

uint64_t sub_1001230E4()
{
  return sub_100010014(&qword_1003561F8, &qword_100356200);
}

unint64_t sub_10012310C()
{
  unint64_t result = qword_100356208;
  if (!qword_100356208)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BEE60,  &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateType);
    atomic_store(result, (unint64_t *)&qword_100356208);
  }

  return result;
}

unint64_t sub_100123154()
{
  unint64_t result = qword_100356210;
  if (!qword_100356210)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BEE88,  &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateType);
    atomic_store(result, (unint64_t *)&qword_100356210);
  }

  return result;
}

unint64_t sub_10012319C()
{
  unint64_t result = qword_100356218;
  if (!qword_100356218)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BEF10,  &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateType);
    atomic_store(result, (unint64_t *)&qword_100356218);
  }

  return result;
}

unint64_t sub_1001231E4()
{
  unint64_t result = qword_100356220;
  if (!qword_100356220)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BEF48,  &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType);
    atomic_store(result, (unint64_t *)&qword_100356220);
  }

  return result;
}

unint64_t sub_10012322C()
{
  unint64_t result = qword_100356228;
  if (!qword_100356228)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BEF70,  &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType);
    atomic_store(result, (unint64_t *)&qword_100356228);
  }

  return result;
}

unint64_t sub_100123274()
{
  unint64_t result = qword_100356230;
  if (!qword_100356230)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BEFF8,  &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType);
    atomic_store(result, (unint64_t *)&qword_100356230);
  }

  return result;
}

uint64_t sub_1001232B8()
{
  return sub_100010014(&qword_100356238, &qword_100356240);
}

uint64_t sub_1001232DC()
{
  return sub_100010014(&qword_100356248, &qword_100356250);
}

unint64_t sub_100123304()
{
  unint64_t result = qword_100356258;
  if (!qword_100356258)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BF0A0,  &type metadata for CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType);
    atomic_store(result, (unint64_t *)&qword_100356258);
  }

  return result;
}

unint64_t sub_10012334C()
{
  unint64_t result = qword_100356260;
  if (!qword_100356260)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BF0C8,  &type metadata for CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType);
    atomic_store(result, (unint64_t *)&qword_100356260);
  }

  return result;
}

unint64_t sub_100123394()
{
  unint64_t result = qword_100356268;
  if (!qword_100356268)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BF150,  &type metadata for CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType);
    atomic_store(result, (unint64_t *)&qword_100356268);
  }

  return result;
}

unint64_t sub_1001233DC()
{
  unint64_t result = qword_100356270;
  if (!qword_100356270)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BF188,  &type metadata for CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType);
    atomic_store(result, (unint64_t *)&qword_100356270);
  }

  return result;
}

unint64_t sub_100123424()
{
  unint64_t result = qword_100356278;
  if (!qword_100356278)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BF1B0,  &type metadata for CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType);
    atomic_store(result, (unint64_t *)&qword_100356278);
  }

  return result;
}

unint64_t sub_10012346C()
{
  unint64_t result = qword_100356280;
  if (!qword_100356280)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BF238,  &type metadata for CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType);
    atomic_store(result, (unint64_t *)&qword_100356280);
  }

  return result;
}

uint64_t sub_1001234B0()
{
  return sub_100010014(&qword_100356288, &qword_100356290);
}

uint64_t sub_1001234D4()
{
  return sub_100010014(&qword_100356298, &qword_1003562A0);
}

unint64_t sub_1001234FC()
{
  unint64_t result = qword_1003562A8;
  if (!qword_1003562A8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BF2E0,  &type metadata for CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame);
    atomic_store(result, (unint64_t *)&qword_1003562A8);
  }

  return result;
}

unint64_t sub_100123544()
{
  unint64_t result = qword_1003562B0;
  if (!qword_1003562B0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BF308,  &type metadata for CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame);
    atomic_store(result, (unint64_t *)&qword_1003562B0);
  }

  return result;
}

unint64_t sub_10012358C()
{
  unint64_t result = qword_1003562B8;
  if (!qword_1003562B8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BF390,  &type metadata for CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame);
    atomic_store(result, (unint64_t *)&qword_1003562B8);
  }

  return result;
}

uint64_t sub_1001235D0()
{
  return sub_100010014(&qword_1003562C0, &qword_1003562C8);
}

uint64_t sub_1001235F4()
{
  return sub_10000FD98( &qword_1003562D0,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF870);
}

uint64_t sub_100123620()
{
  return sub_10000FD98( (unint64_t *)&qword_1003552B8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF798);
}

uint64_t sub_10012364C()
{
  return sub_10000FD98( &qword_100355678,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF898);
}

uint64_t sub_100123678()
{
  return sub_10000FD98( &qword_1003562D8,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp,  (uint64_t)&unk_1002BF8D8);
}

uint64_t sub_1001236A4()
{
  return sub_10000FD98( &qword_1003562E0,  type metadata accessor for CLP_LogEntry_PrivateData_AccelSample,  (uint64_t)&unk_1002BF9D8);
}

uint64_t sub_1001236D0()
{
  return sub_10000FD98( &qword_100355688,  type metadata accessor for CLP_LogEntry_PrivateData_AccelSample,  (uint64_t)&unk_1002BF900);
}

uint64_t sub_1001236FC()
{
  return sub_10000FD98( &qword_100355680,  type metadata accessor for CLP_LogEntry_PrivateData_AccelSample,  (uint64_t)&unk_1002BFA00);
}

uint64_t sub_100123728()
{
  return sub_10000FD98( &qword_1003562E8,  type metadata accessor for CLP_LogEntry_PrivateData_AccelSample,  (uint64_t)&unk_1002BFA40);
}

uint64_t sub_100123754()
{
  return sub_10000FD98( &qword_1003562F0,  type metadata accessor for CLP_LogEntry_PrivateData_Accel,  (uint64_t)&unk_1002BFB40);
}

uint64_t sub_100123780()
{
  return sub_10000FD98( &qword_1003562F8,  type metadata accessor for CLP_LogEntry_PrivateData_Accel,  (uint64_t)&unk_1002BFA68);
}

uint64_t sub_1001237AC()
{
  return sub_10000FD98( &qword_100355690,  type metadata accessor for CLP_LogEntry_PrivateData_Accel,  (uint64_t)&unk_1002BFB68);
}

uint64_t sub_1001237D8()
{
  return sub_10000FD98( &qword_100356300,  type metadata accessor for CLP_LogEntry_PrivateData_Accel,  (uint64_t)&unk_1002BFBA8);
}

uint64_t sub_100123804()
{
  return sub_10000FD98( &qword_100356308,  type metadata accessor for CLP_LogEntry_PrivateData_GyroSample,  (uint64_t)&unk_1002BFCA8);
}

uint64_t sub_100123830()
{
  return sub_10000FD98( &qword_1003556A0,  type metadata accessor for CLP_LogEntry_PrivateData_GyroSample,  (uint64_t)&unk_1002BFBD0);
}

uint64_t sub_10012385C()
{
  return sub_10000FD98( &qword_100355698,  type metadata accessor for CLP_LogEntry_PrivateData_GyroSample,  (uint64_t)&unk_1002BFCD0);
}

uint64_t sub_100123888()
{
  return sub_10000FD98( &qword_100356310,  type metadata accessor for CLP_LogEntry_PrivateData_GyroSample,  (uint64_t)&unk_1002BFD10);
}

uint64_t sub_1001238B4()
{
  return sub_10000FD98( &qword_100356318,  type metadata accessor for CLP_LogEntry_PrivateData_Gyro,  (uint64_t)&unk_1002BFE10);
}

uint64_t sub_1001238E0()
{
  return sub_10000FD98( &qword_100356320,  type metadata accessor for CLP_LogEntry_PrivateData_Gyro,  (uint64_t)&unk_1002BFD38);
}

uint64_t sub_10012390C()
{
  return sub_10000FD98( &qword_1003556A8,  type metadata accessor for CLP_LogEntry_PrivateData_Gyro,  (uint64_t)&unk_1002BFE38);
}

uint64_t sub_100123938()
{
  return sub_10000FD98( &qword_100356328,  type metadata accessor for CLP_LogEntry_PrivateData_Gyro,  (uint64_t)&unk_1002BFE78);
}

uint64_t sub_100123964()
{
  return sub_10000FD98( &qword_100356330,  type metadata accessor for CLP_LogEntry_PrivateData_BaroSample,  (uint64_t)&unk_1002BFF78);
}

uint64_t sub_100123990()
{
  return sub_10000FD98( &qword_1003556B8,  type metadata accessor for CLP_LogEntry_PrivateData_BaroSample,  (uint64_t)&unk_1002BFEA0);
}

uint64_t sub_1001239BC()
{
  return sub_10000FD98( &qword_1003556B0,  type metadata accessor for CLP_LogEntry_PrivateData_BaroSample,  (uint64_t)&unk_1002BFFA0);
}

uint64_t sub_1001239E8()
{
  return sub_10000FD98( &qword_100356338,  type metadata accessor for CLP_LogEntry_PrivateData_BaroSample,  (uint64_t)&unk_1002BFFE0);
}

uint64_t sub_100123A14()
{
  return sub_10000FD98( &qword_100356340,  type metadata accessor for CLP_LogEntry_PrivateData_Baro,  (uint64_t)&unk_1002C00E0);
}

uint64_t sub_100123A40()
{
  return sub_10000FD98( &qword_100356348,  type metadata accessor for CLP_LogEntry_PrivateData_Baro,  (uint64_t)&unk_1002C0008);
}

uint64_t sub_100123A6C()
{
  return sub_10000FD98( &qword_1003556C0,  type metadata accessor for CLP_LogEntry_PrivateData_Baro,  (uint64_t)&unk_1002C0108);
}

uint64_t sub_100123A98()
{
  return sub_10000FD98( &qword_100356350,  type metadata accessor for CLP_LogEntry_PrivateData_Baro,  (uint64_t)&unk_1002C0148);
}

uint64_t sub_100123AC4()
{
  return sub_10000FD98( &qword_100356358,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate,  (uint64_t)&unk_1002C0248);
}

uint64_t sub_100123AF0()
{
  return sub_10000FD98( &qword_100356360,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate,  (uint64_t)&unk_1002C0170);
}

uint64_t sub_100123B1C()
{
  return sub_10000FD98( &qword_1003556C8,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate,  (uint64_t)&unk_1002C0270);
}

uint64_t sub_100123B48()
{
  return sub_10000FD98( &qword_100356368,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate,  (uint64_t)&unk_1002C02B0);
}

uint64_t sub_100123B74()
{
  return sub_10000FD98( &qword_100356370,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  (uint64_t)&unk_1002C03B0);
}

uint64_t sub_100123BA0()
{
  return sub_10000FD98( &qword_100355730,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  (uint64_t)&unk_1002C02D8);
}

uint64_t sub_100123BCC()
{
  return sub_10000FD98( &qword_1003556D0,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  (uint64_t)&unk_1002C03D8);
}

uint64_t sub_100123BF8()
{
  return sub_10000FD98( &qword_100356378,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation,  (uint64_t)&unk_1002C0418);
}

uint64_t sub_100123C24()
{
  return sub_10000FD98( &qword_100356380,  type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData,  (uint64_t)&unk_1002C0568);
}

uint64_t sub_100123C50()
{
  return sub_10000FD98( &qword_100356388,  type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData,  (uint64_t)&unk_1002C0490);
}

uint64_t sub_100123C7C()
{
  return sub_10000FD98( &qword_1003556D8,  type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData,  (uint64_t)&unk_1002C0590);
}

uint64_t sub_100123CA8()
{
  return sub_10000FD98( &qword_100356390,  type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData,  (uint64_t)&unk_1002C05D0);
}

uint64_t sub_100123CD4()
{
  return sub_10000FD98( &qword_100356398,  type metadata accessor for CLP_LogEntry_PrivateData_PressureSample,  (uint64_t)&unk_1002C06D0);
}

uint64_t sub_100123D00()
{
  return sub_10000FD98( &qword_1003563A0,  type metadata accessor for CLP_LogEntry_PrivateData_PressureSample,  (uint64_t)&unk_1002C05F8);
}

uint64_t sub_100123D2C()
{
  return sub_10000FD98( &qword_1003556E0,  type metadata accessor for CLP_LogEntry_PrivateData_PressureSample,  (uint64_t)&unk_1002C06F8);
}

uint64_t sub_100123D58()
{
  return sub_10000FD98( &qword_1003563A8,  type metadata accessor for CLP_LogEntry_PrivateData_PressureSample,  (uint64_t)&unk_1002C0738);
}

uint64_t sub_100123D84()
{
  return sub_10000FD98( &qword_1003563B0,  type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo,  (uint64_t)&unk_1002C0838);
}

uint64_t sub_100123DB0()
{
  return sub_10000FD98( &qword_1003563B8,  type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo,  (uint64_t)&unk_1002C0760);
}

uint64_t sub_100123DDC()
{
  return sub_10000FD98( &qword_1003556E8,  type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo,  (uint64_t)&unk_1002C0860);
}

uint64_t sub_100123E08()
{
  return sub_10000FD98( &qword_1003563C0,  type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo,  (uint64_t)&unk_1002C08A0);
}

uint64_t sub_100123E34()
{
  return sub_10000FD98( &qword_1003563C8,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  (uint64_t)&unk_1002C09A0);
}

uint64_t sub_100123E60()
{
  return sub_10000FD98( &qword_100355738,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  (uint64_t)&unk_1002C08C8);
}

uint64_t sub_100123E8C()
{
  return sub_10000FD98( &qword_1003556F0,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  (uint64_t)&unk_1002C09C8);
}

uint64_t sub_100123EB8()
{
  return sub_10000FD98( &qword_1003563D0,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate,  (uint64_t)&unk_1002C0A08);
}

uint64_t sub_100123EE4()
{
  return sub_10000FD98( &qword_1003563D8,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo,  (uint64_t)&unk_1002C0C20);
}

uint64_t sub_100123F10()
{
  return sub_10000FD98( &qword_1003563E0,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo,  (uint64_t)&unk_1002C0B48);
}

uint64_t sub_100123F3C()
{
  return sub_10000FD98( &qword_1003556F8,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo,  (uint64_t)&unk_1002C0C48);
}

uint64_t sub_100123F68()
{
  return sub_10000FD98( &qword_1003563E8,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo,  (uint64_t)&unk_1002C0C88);
}

uint64_t sub_100123F94()
{
  return sub_10000FD98( &qword_1003563F0,  type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus,  (uint64_t)&unk_1002C0D88);
}

uint64_t sub_100123FC0()
{
  return sub_10000FD98( &qword_1003563F8,  type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus,  (uint64_t)&unk_1002C0CB0);
}

uint64_t sub_100123FEC()
{
  return sub_10000FD98( &qword_100355700,  type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus,  (uint64_t)&unk_1002C0DB0);
}

uint64_t sub_100124018()
{
  return sub_10000FD98( &qword_100356400,  type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus,  (uint64_t)&unk_1002C0DF0);
}

uint64_t sub_100124044()
{
  return sub_10000FD98( &qword_100356408,  type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed,  (uint64_t)&unk_1002C0EF0);
}

uint64_t sub_100124070()
{
  return sub_10000FD98( &qword_100356410,  type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed,  (uint64_t)&unk_1002C0E18);
}

uint64_t sub_10012409C()
{
  return sub_10000FD98( &qword_100355708,  type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed,  (uint64_t)&unk_1002C0F18);
}

uint64_t sub_1001240C8()
{
  return sub_10000FD98( &qword_100356418,  type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed,  (uint64_t)&unk_1002C0F58);
}

uint64_t sub_1001240F4()
{
  return sub_10000FD98( &qword_100356420,  type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading,  (uint64_t)&unk_1002C1058);
}

uint64_t sub_100124120()
{
  return sub_10000FD98( &qword_100356428,  type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading,  (uint64_t)&unk_1002C0F80);
}

uint64_t sub_10012414C()
{
  return sub_10000FD98( &qword_100355710,  type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading,  (uint64_t)&unk_1002C1080);
}

uint64_t sub_100124178()
{
  return sub_10000FD98( &qword_100356430,  type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading,  (uint64_t)&unk_1002C10C0);
}

uint64_t sub_1001241A4()
{
  return sub_10000FD98( &qword_100356438,  type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable,  (uint64_t)&unk_1002C11C0);
}

uint64_t sub_1001241D0()
{
  return sub_10000FD98( &qword_100356440,  type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable,  (uint64_t)&unk_1002C10E8);
}

uint64_t sub_1001241FC()
{
  return sub_10000FD98( &qword_100355718,  type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable,  (uint64_t)&unk_1002C11E8);
}

uint64_t sub_100124228()
{
  return sub_10000FD98( &qword_100356448,  type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable,  (uint64_t)&unk_1002C1228);
}

uint64_t sub_100124254()
{
  return sub_10000FD98( &qword_100356450,  type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed,  (uint64_t)&unk_1002C1328);
}

uint64_t sub_100124280()
{
  return sub_10000FD98( &qword_100356458,  type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed,  (uint64_t)&unk_1002C1250);
}

uint64_t sub_1001242AC()
{
  return sub_10000FD98( &qword_100355720,  type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed,  (uint64_t)&unk_1002C1350);
}

uint64_t sub_1001242D8()
{
  return sub_10000FD98( &qword_100356460,  type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed,  (uint64_t)&unk_1002C1390);
}

uint64_t sub_100124304()
{
  return sub_10000FD98( &qword_100356468,  type metadata accessor for CLP_LogEntry_PrivateData_Location,  (uint64_t)&unk_1002C1490);
}

uint64_t sub_100124330()
{
  return sub_10000FD98( &qword_100356470,  type metadata accessor for CLP_LogEntry_PrivateData_Location,  (uint64_t)&unk_1002C13B8);
}

uint64_t sub_10012435C()
{
  return sub_10000FD98( &qword_100355728,  type metadata accessor for CLP_LogEntry_PrivateData_Location,  (uint64_t)&unk_1002C14B8);
}

uint64_t sub_100124388()
{
  return sub_10000FD98( &qword_100356478,  type metadata accessor for CLP_LogEntry_PrivateData_Location,  (uint64_t)&unk_1002C14F8);
}

uint64_t sub_1001243B4()
{
  return sub_10000FD98( &qword_100356480,  type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations,  (uint64_t)&unk_1002C1648);
}

uint64_t sub_1001243E0()
{
  return sub_10000FD98( &qword_100356488,  type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations,  (uint64_t)&unk_1002C1570);
}

uint64_t sub_10012440C()
{
  return sub_10000FD98( &qword_100355740,  type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations,  (uint64_t)&unk_1002C1670);
}

uint64_t sub_100124438()
{
  return sub_10000FD98( &qword_100356490,  type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations,  (uint64_t)&unk_1002C16B0);
}

uint64_t sub_100124464()
{
  return sub_10000FD98( &qword_100356498,  type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate,  (uint64_t)&unk_1002C17B0);
}

uint64_t sub_100124490()
{
  return sub_10000FD98( &qword_1003564A0,  type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate,  (uint64_t)&unk_1002C16D8);
}

uint64_t sub_1001244BC()
{
  return sub_10000FD98( &qword_100355748,  type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate,  (uint64_t)&unk_1002C17D8);
}

uint64_t sub_1001244E8()
{
  return sub_10000FD98( &qword_1003564A8,  type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate,  (uint64_t)&unk_1002C1818);
}

uint64_t sub_100124514()
{
  return sub_10000FD98( &qword_1003564B0,  type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl,  (uint64_t)&unk_1002C1918);
}

uint64_t sub_100124540()
{
  return sub_10000FD98( &qword_1003564B8,  type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl,  (uint64_t)&unk_1002C1840);
}

uint64_t sub_10012456C()
{
  return sub_10000FD98( &qword_100355750,  type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl,  (uint64_t)&unk_1002C1940);
}

uint64_t sub_100124598()
{
  return sub_10000FD98( &qword_1003564C0,  type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl,  (uint64_t)&unk_1002C1980);
}

uint64_t sub_1001245C4()
{
  return sub_10000FD98( &qword_1003564C8,  type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity,  (uint64_t)&unk_1002C1A80);
}

uint64_t sub_1001245F0()
{
  return sub_10000FD98( &qword_1003564D0,  type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity,  (uint64_t)&unk_1002C19A8);
}

uint64_t sub_10012461C()
{
  return sub_10000FD98( &qword_100355758,  type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity,  (uint64_t)&unk_1002C1AA8);
}

uint64_t sub_100124648()
{
  return sub_10000FD98( &qword_1003564D8,  type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity,  (uint64_t)&unk_1002C1AE8);
}

uint64_t sub_100124674()
{
  return sub_10000FD98( &qword_1003564E0,  type metadata accessor for CLP_LogEntry_PrivateData_MotionState,  (uint64_t)&unk_1002C1C60);
}

uint64_t sub_1001246A0()
{
  return sub_10000FD98( &qword_1003564E8,  type metadata accessor for CLP_LogEntry_PrivateData_MotionState,  (uint64_t)&unk_1002C1B88);
}

uint64_t sub_1001246CC()
{
  return sub_10000FD98( &qword_100355760,  type metadata accessor for CLP_LogEntry_PrivateData_MotionState,  (uint64_t)&unk_1002C1C88);
}

uint64_t sub_1001246F8()
{
  return sub_10000FD98( &qword_1003564F0,  type metadata accessor for CLP_LogEntry_PrivateData_MotionState,  (uint64_t)&unk_1002C1CC8);
}

uint64_t sub_100124724()
{
  return sub_10000FD98( &qword_1003564F8,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate,  (uint64_t)&unk_1002C1DC8);
}

uint64_t sub_100124750()
{
  return sub_10000FD98( &qword_100356500,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate,  (uint64_t)&unk_1002C1CF0);
}

uint64_t sub_10012477C()
{
  return sub_10000FD98( &qword_100355768,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate,  (uint64_t)&unk_1002C1DF0);
}

uint64_t sub_1001247A8()
{
  return sub_10000FD98( &qword_100356508,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate,  (uint64_t)&unk_1002C1E30);
}

uint64_t sub_1001247D4()
{
  return sub_10000FD98( &qword_100356510,  type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver,  (uint64_t)&unk_1002C1F30);
}

uint64_t sub_100124800()
{
  return sub_10000FD98( &qword_100356518,  type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver,  (uint64_t)&unk_1002C1E58);
}

uint64_t sub_10012482C()
{
  return sub_10000FD98( &qword_100355770,  type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver,  (uint64_t)&unk_1002C1F58);
}

uint64_t sub_100124858()
{
  return sub_10000FD98( &qword_100356520,  type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver,  (uint64_t)&unk_1002C1F98);
}

uint64_t sub_100124884()
{
  return sub_10000FD98( &qword_100356528,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings,  (uint64_t)&unk_1002C2098);
}

uint64_t sub_1001248B0()
{
  return sub_10000FD98( &qword_100356530,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings,  (uint64_t)&unk_1002C1FC0);
}

uint64_t sub_1001248DC()
{
  return sub_10000FD98( &qword_100355778,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings,  (uint64_t)&unk_1002C20C0);
}

uint64_t sub_100124908()
{
  return sub_10000FD98( &qword_100356538,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings,  (uint64_t)&unk_1002C2100);
}

uint64_t sub_100124934()
{
  return sub_10000FD98( &qword_100356540,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent,  (uint64_t)&unk_1002C2278);
}

uint64_t sub_100124960()
{
  return sub_10000FD98( &qword_100356548,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent,  (uint64_t)&unk_1002C21A0);
}

uint64_t sub_10012498C()
{
  return sub_10000FD98( &qword_100355780,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent,  (uint64_t)&unk_1002C22A0);
}

uint64_t sub_1001249B8()
{
  return sub_10000FD98( &qword_100356550,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent,  (uint64_t)&unk_1002C22E0);
}

uint64_t sub_1001249E4()
{
  return sub_10000FD98( &qword_100356558,  type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator,  (uint64_t)&unk_1002C2408);
}

uint64_t sub_100124A10()
{
  return sub_10000FD98( &qword_100356560,  type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator,  (uint64_t)&unk_1002C2330);
}

uint64_t sub_100124A3C()
{
  return sub_10000FD98( &qword_100355788,  type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator,  (uint64_t)&unk_1002C2430);
}

uint64_t sub_100124A68()
{
  return sub_10000FD98( &qword_100356568,  type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator,  (uint64_t)&unk_1002C2470);
}

uint64_t sub_100124A94()
{
  return sub_10000FD98( &qword_100356570,  type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics,  (uint64_t)&unk_1002C2570);
}

uint64_t sub_100124AC0()
{
  return sub_10000FD98( &qword_100356578,  type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics,  (uint64_t)&unk_1002C2498);
}

uint64_t sub_100124AEC()
{
  return sub_10000FD98( &qword_100355790,  type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics,  (uint64_t)&unk_1002C2598);
}

uint64_t sub_100124B18()
{
  return sub_10000FD98( &qword_100356580,  type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics,  (uint64_t)&unk_1002C25D8);
}

uint64_t sub_100124B44()
{
  return sub_10000FD98( &qword_100356588,  type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry,  (uint64_t)&unk_1002C2728);
}

uint64_t sub_100124B70()
{
  return sub_10000FD98( &qword_100356590,  type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry,  (uint64_t)&unk_1002C2650);
}

uint64_t sub_100124B9C()
{
  return sub_10000FD98( &qword_100355798,  type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry,  (uint64_t)&unk_1002C2750);
}

uint64_t sub_100124BC8()
{
  return sub_10000FD98( &qword_100356598,  type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry,  (uint64_t)&unk_1002C2790);
}

uint64_t sub_100124BF4()
{
  return sub_10000FD98( &qword_1003565A0,  type metadata accessor for CLP_LogEntry_PrivateData_Timer,  (uint64_t)&unk_1002C2890);
}

uint64_t sub_100124C20()
{
  return sub_10000FD98( &qword_1003565A8,  type metadata accessor for CLP_LogEntry_PrivateData_Timer,  (uint64_t)&unk_1002C27B8);
}

uint64_t sub_100124C4C()
{
  return sub_10000FD98( &qword_1003557A0,  type metadata accessor for CLP_LogEntry_PrivateData_Timer,  (uint64_t)&unk_1002C28B8);
}

uint64_t sub_100124C78()
{
  return sub_10000FD98( &qword_1003565B0,  type metadata accessor for CLP_LogEntry_PrivateData_Timer,  (uint64_t)&unk_1002C28F8);
}

uint64_t sub_100124CA4()
{
  return sub_10000FD98( &qword_1003565B8,  type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel,  (uint64_t)&unk_1002C29F8);
}

uint64_t sub_100124CD0()
{
  return sub_10000FD98( &qword_1003565C0,  type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel,  (uint64_t)&unk_1002C2920);
}

uint64_t sub_100124CFC()
{
  return sub_10000FD98( &qword_1003557A8,  type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel,  (uint64_t)&unk_1002C2A20);
}

uint64_t sub_100124D28()
{
  return sub_10000FD98( &qword_1003565C8,  type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel,  (uint64_t)&unk_1002C2A60);
}

uint64_t sub_100124D54()
{
  return sub_10000FD98( &qword_1003565D0,  type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel,  (uint64_t)&unk_1002C2B60);
}

uint64_t sub_100124D80()
{
  return sub_10000FD98( &qword_1003565D8,  type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel,  (uint64_t)&unk_1002C2A88);
}

uint64_t sub_100124DAC()
{
  return sub_10000FD98( &qword_1003557B0,  type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel,  (uint64_t)&unk_1002C2B88);
}

uint64_t sub_100124DD8()
{
  return sub_10000FD98( &qword_1003565E0,  type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel,  (uint64_t)&unk_1002C2BC8);
}

uint64_t sub_100124E04()
{
  return sub_10000FD98( &qword_1003565E8,  type metadata accessor for CLP_LogEntry_PrivateData_MapVector,  (uint64_t)&unk_1002C2CC8);
}

uint64_t sub_100124E30()
{
  return sub_10000FD98( &qword_1003565F0,  type metadata accessor for CLP_LogEntry_PrivateData_MapVector,  (uint64_t)&unk_1002C2BF0);
}

uint64_t sub_100124E5C()
{
  return sub_10000FD98( &qword_1003557B8,  type metadata accessor for CLP_LogEntry_PrivateData_MapVector,  (uint64_t)&unk_1002C2CF0);
}

uint64_t sub_100124E88()
{
  return sub_10000FD98( &qword_1003565F8,  type metadata accessor for CLP_LogEntry_PrivateData_MapVector,  (uint64_t)&unk_1002C2D30);
}

uint64_t sub_100124EB4()
{
  return sub_10000FD98( &qword_100356600,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance,  (uint64_t)&unk_1002C2E30);
}

uint64_t sub_100124EE0()
{
  return sub_10000FD98( &qword_100356608,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance,  (uint64_t)&unk_1002C2D58);
}

uint64_t sub_100124F0C()
{
  return sub_10000FD98( &qword_1003557C0,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance,  (uint64_t)&unk_1002C2E58);
}

uint64_t sub_100124F38()
{
  return sub_10000FD98( &qword_100356610,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance,  (uint64_t)&unk_1002C2E98);
}

uint64_t sub_100124F64()
{
  return sub_10000FD98( &qword_100356618,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification,  (uint64_t)&unk_1002C2F98);
}

uint64_t sub_100124F90()
{
  return sub_10000FD98( &qword_100356620,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification,  (uint64_t)&unk_1002C2EC0);
}

uint64_t sub_100124FBC()
{
  return sub_10000FD98( &qword_1003557C8,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification,  (uint64_t)&unk_1002C2FC0);
}

uint64_t sub_100124FE8()
{
  return sub_10000FD98( &qword_100356628,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification,  (uint64_t)&unk_1002C3000);
}

uint64_t sub_100125014()
{
  return sub_10000FD98( &qword_100356630,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  (uint64_t)&unk_1002C3100);
}

uint64_t sub_100125040()
{
  return sub_10000FD98( &qword_100356638,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  (uint64_t)&unk_1002C3028);
}

uint64_t sub_10012506C()
{
  return sub_10000FD98( &qword_1003557D0,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  (uint64_t)&unk_1002C3128);
}

uint64_t sub_100125098()
{
  return sub_10000FD98( &qword_100356640,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  (uint64_t)&unk_1002C3168);
}

uint64_t sub_1001250C4()
{
  return sub_10000FD98( &qword_100356648,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint,  (uint64_t)&unk_1002C3268);
}

uint64_t sub_1001250F0()
{
  return sub_10000FD98( &qword_100356650,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint,  (uint64_t)&unk_1002C3190);
}

uint64_t sub_10012511C()
{
  return sub_10000FD98( &qword_1003557D8,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint,  (uint64_t)&unk_1002C3290);
}

uint64_t sub_100125148()
{
  return sub_10000FD98( &qword_100356658,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint,  (uint64_t)&unk_1002C32D0);
}

uint64_t sub_100125174()
{
  return sub_10000FD98( &qword_100356660,  type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData,  (uint64_t)&unk_1002C33D0);
}

uint64_t sub_1001251A0()
{
  return sub_10000FD98( &qword_1003557E8,  type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData,  (uint64_t)&unk_1002C32F8);
}

uint64_t sub_1001251CC()
{
  return sub_10000FD98( &qword_1003557E0,  type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData,  (uint64_t)&unk_1002C33F8);
}

uint64_t sub_1001251F8()
{
  return sub_10000FD98( &qword_100356668,  type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData,  (uint64_t)&unk_1002C3438);
}

uint64_t sub_100125224()
{
  return sub_10000FD98( &qword_100356670,  type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint,  (uint64_t)&unk_1002C3538);
}

uint64_t sub_100125250()
{
  return sub_10000FD98( &qword_100356678,  type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint,  (uint64_t)&unk_1002C3460);
}

uint64_t sub_10012527C()
{
  return sub_10000FD98( &qword_1003557F0,  type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint,  (uint64_t)&unk_1002C3560);
}

uint64_t sub_1001252A8()
{
  return sub_10000FD98( &qword_100356680,  type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint,  (uint64_t)&unk_1002C35A0);
}

uint64_t sub_1001252D4()
{
  return sub_10000FD98( &qword_100356688,  type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification,  (uint64_t)&unk_1002C36C8);
}

uint64_t sub_100125300()
{
  return sub_10000FD98( &qword_100356690,  type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification,  (uint64_t)&unk_1002C35F0);
}

uint64_t sub_10012532C()
{
  return sub_10000FD98( &qword_1003557F8,  type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification,  (uint64_t)&unk_1002C36F0);
}

uint64_t sub_100125358()
{
  return sub_10000FD98( &qword_100356698,  type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification,  (uint64_t)&unk_1002C3730);
}

uint64_t sub_100125384()
{
  return sub_10000FD98( &qword_1003566A0,  type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState,  (uint64_t)&unk_1002C3880);
}

uint64_t sub_1001253B0()
{
  return sub_10000FD98( &qword_1003566A8,  type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState,  (uint64_t)&unk_1002C37A8);
}

uint64_t sub_1001253DC()
{
  return sub_10000FD98( &qword_100355800,  type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState,  (uint64_t)&unk_1002C38A8);
}

uint64_t sub_100125408()
{
  return sub_10000FD98( &qword_1003566B0,  type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState,  (uint64_t)&unk_1002C38E8);
}

uint64_t sub_100125434()
{
  return sub_10000FD98( &qword_1003566B8,  type metadata accessor for CLP_LogEntry_PrivateData_Battery,  (uint64_t)&unk_1002C39E8);
}

uint64_t sub_100125460()
{
  return sub_10000FD98( &qword_1003566C0,  type metadata accessor for CLP_LogEntry_PrivateData_Battery,  (uint64_t)&unk_1002C3910);
}

uint64_t sub_10012548C()
{
  return sub_10000FD98( &qword_100355808,  type metadata accessor for CLP_LogEntry_PrivateData_Battery,  (uint64_t)&unk_1002C3A10);
}

uint64_t sub_1001254B8()
{
  return sub_10000FD98( &qword_1003566C8,  type metadata accessor for CLP_LogEntry_PrivateData_Battery,  (uint64_t)&unk_1002C3A50);
}

uint64_t sub_1001254E4()
{
  return sub_10000FD98( &qword_1003566D0,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  (uint64_t)&unk_1002C3B50);
}

uint64_t sub_100125510()
{
  return sub_10000FD98( &qword_1003566D8,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  (uint64_t)&unk_1002C3A78);
}

uint64_t sub_10012553C()
{
  return sub_10000FD98( &qword_100355810,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  (uint64_t)&unk_1002C3B78);
}

uint64_t sub_100125568()
{
  return sub_10000FD98( &qword_1003566E0,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus,  (uint64_t)&unk_1002C3BB8);
}

uint64_t sub_100125594()
{
  return sub_10000FD98( &qword_1003566E8,  type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment,  (uint64_t)&unk_1002C3CE0);
}

uint64_t sub_1001255C0()
{
  return sub_10000FD98( &qword_1003566F0,  type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment,  (uint64_t)&unk_1002C3C08);
}

uint64_t sub_1001255EC()
{
  return sub_10000FD98( &qword_100355818,  type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment,  (uint64_t)&unk_1002C3D08);
}

uint64_t sub_100125618()
{
  return sub_10000FD98( &qword_1003566F8,  type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment,  (uint64_t)&unk_1002C3D48);
}

uint64_t sub_100125644()
{
  return sub_10000FD98( &qword_100356700,  type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo,  (uint64_t)&unk_1002C3E70);
}

uint64_t sub_100125670()
{
  return sub_10000FD98( &qword_100356708,  type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo,  (uint64_t)&unk_1002C3D98);
}

uint64_t sub_10012569C()
{
  return sub_10000FD98( &qword_100355820,  type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo,  (uint64_t)&unk_1002C3E98);
}

uint64_t sub_1001256C8()
{
  return sub_10000FD98( &qword_100356710,  type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo,  (uint64_t)&unk_1002C3ED8);
}

uint64_t sub_1001256F4()
{
  return sub_10000FD98( &qword_100356718,  type metadata accessor for CLP_LogEntry_PrivateData_MagSample,  (uint64_t)&unk_1002C3FD8);
}

uint64_t sub_100125720()
{
  return sub_10000FD98( &qword_100355830,  type metadata accessor for CLP_LogEntry_PrivateData_MagSample,  (uint64_t)&unk_1002C3F00);
}

uint64_t sub_10012574C()
{
  return sub_10000FD98( &qword_100355828,  type metadata accessor for CLP_LogEntry_PrivateData_MagSample,  (uint64_t)&unk_1002C4000);
}

uint64_t sub_100125778()
{
  return sub_10000FD98( &qword_100356720,  type metadata accessor for CLP_LogEntry_PrivateData_MagSample,  (uint64_t)&unk_1002C4040);
}

uint64_t sub_1001257A4()
{
  return sub_10000FD98( &qword_100356728,  type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer,  (uint64_t)&unk_1002C4140);
}

uint64_t sub_1001257D0()
{
  return sub_10000FD98( &qword_100356730,  type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer,  (uint64_t)&unk_1002C4068);
}

uint64_t sub_1001257FC()
{
  return sub_10000FD98( &qword_100355838,  type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer,  (uint64_t)&unk_1002C4168);
}

uint64_t sub_100125828()
{
  return sub_10000FD98( &qword_100356738,  type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer,  (uint64_t)&unk_1002C41A8);
}

uint64_t sub_100125854()
{
  return sub_10000FD98( &qword_100356740,  type metadata accessor for CLP_LogEntry_PrivateData_Reset,  (uint64_t)&unk_1002C42A8);
}

uint64_t sub_100125880()
{
  return sub_10000FD98( &qword_100356748,  type metadata accessor for CLP_LogEntry_PrivateData_Reset,  (uint64_t)&unk_1002C41D0);
}

uint64_t sub_1001258AC()
{
  return sub_10000FD98( &qword_100355840,  type metadata accessor for CLP_LogEntry_PrivateData_Reset,  (uint64_t)&unk_1002C42D0);
}

uint64_t sub_1001258D8()
{
  return sub_10000FD98( &qword_100356750,  type metadata accessor for CLP_LogEntry_PrivateData_Reset,  (uint64_t)&unk_1002C4310);
}

uint64_t sub_100125904()
{
  return sub_10000FD98( &qword_100356758,  type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace,  (uint64_t)&unk_1002C4410);
}

uint64_t sub_100125930()
{
  return sub_10000FD98( &qword_100356760,  type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace,  (uint64_t)&unk_1002C4338);
}

uint64_t sub_10012595C()
{
  return sub_10000FD98( &qword_100355848,  type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace,  (uint64_t)&unk_1002C4438);
}

uint64_t sub_100125988()
{
  return sub_10000FD98( &qword_100356768,  type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace,  (uint64_t)&unk_1002C4478);
}

uint64_t sub_1001259B4()
{
  return sub_10000FD98( &qword_100356770,  type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState,  (uint64_t)&unk_1002C4578);
}

uint64_t sub_1001259E0()
{
  return sub_10000FD98( &qword_100356778,  type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState,  (uint64_t)&unk_1002C44A0);
}

uint64_t sub_100125A0C()
{
  return sub_10000FD98( &qword_100355850,  type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState,  (uint64_t)&unk_1002C45A0);
}

uint64_t sub_100125A38()
{
  return sub_10000FD98( &qword_100356780,  type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState,  (uint64_t)&unk_1002C45E0);
}

uint64_t sub_100125A64()
{
  return sub_10000FD98( &qword_100356788,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  (uint64_t)&unk_1002C46E0);
}

uint64_t sub_100125A90()
{
  return sub_10000FD98( &qword_100356790,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  (uint64_t)&unk_1002C4608);
}

uint64_t sub_100125ABC()
{
  return sub_10000FD98( &qword_100355858,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  (uint64_t)&unk_1002C4708);
}

uint64_t sub_100125AE8()
{
  return sub_10000FD98( &qword_100356798,  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry,  (uint64_t)&unk_1002C4748);
}

uint64_t sub_100125B14()
{
  return sub_10000FD98( &qword_1003567A0,  type metadata accessor for CLP_LogEntry_PrivateData_StepCount,  (uint64_t)&unk_1002C4870);
}

uint64_t sub_100125B40()
{
  return sub_10000FD98( &qword_1003567A8,  type metadata accessor for CLP_LogEntry_PrivateData_StepCount,  (uint64_t)&unk_1002C4798);
}

uint64_t sub_100125B6C()
{
  return sub_10000FD98( &qword_100355860,  type metadata accessor for CLP_LogEntry_PrivateData_StepCount,  (uint64_t)&unk_1002C4898);
}

uint64_t sub_100125B98()
{
  return sub_10000FD98( &qword_1003567B0,  type metadata accessor for CLP_LogEntry_PrivateData_StepCount,  (uint64_t)&unk_1002C48D8);
}

uint64_t sub_100125BC4()
{
  return sub_10000FD98( &qword_1003567B8,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3,  (uint64_t)&unk_1002C49D8);
}

uint64_t sub_100125BF0()
{
  return sub_10000FD98( &qword_1003567C0,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3,  (uint64_t)&unk_1002C4900);
}

uint64_t sub_100125C1C()
{
  return sub_10000FD98( &qword_100355868,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3,  (uint64_t)&unk_1002C4A00);
}

uint64_t sub_100125C48()
{
  return sub_10000FD98( &qword_1003567C8,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3,  (uint64_t)&unk_1002C4A40);
}

uint64_t sub_100125C74()
{
  return sub_10000FD98( &qword_1003567D0,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4,  (uint64_t)&unk_1002C4B40);
}

uint64_t sub_100125CA0()
{
  return sub_10000FD98( &qword_1003567D8,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4,  (uint64_t)&unk_1002C4A68);
}

uint64_t sub_100125CCC()
{
  return sub_10000FD98( &qword_100355870,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4,  (uint64_t)&unk_1002C4B68);
}

uint64_t sub_100125CF8()
{
  return sub_10000FD98( &qword_1003567E0,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4,  (uint64_t)&unk_1002C4BA8);
}

uint64_t sub_100125D24()
{
  return sub_10000FD98( &qword_1003567E8,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  (uint64_t)&unk_1002C4CA8);
}

uint64_t sub_100125D50()
{
  return sub_10000FD98( &qword_1003567F0,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  (uint64_t)&unk_1002C4BD0);
}

uint64_t sub_100125D7C()
{
  return sub_10000FD98( &qword_100355878,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  (uint64_t)&unk_1002C4CD0);
}

uint64_t sub_100125DA8()
{
  return sub_10000FD98( &qword_1003567F8,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass,  (uint64_t)&unk_1002C4D10);
}

uint64_t sub_100125DD4()
{
  return sub_10000FD98( &qword_100356800,  type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample,  (uint64_t)&unk_1002C4E10);
}

uint64_t sub_100125E00()
{
  return sub_10000FD98( &qword_100355888,  type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample,  (uint64_t)&unk_1002C4D38);
}

uint64_t sub_100125E2C()
{
  return sub_10000FD98( &qword_100355880,  type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample,  (uint64_t)&unk_1002C4E38);
}

uint64_t sub_100125E58()
{
  return sub_10000FD98( &qword_100356808,  type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample,  (uint64_t)&unk_1002C4E78);
}

uint64_t sub_100125E84()
{
  return sub_10000FD98( &qword_100356810,  type metadata accessor for CLP_LogEntry_PrivateData_Compass,  (uint64_t)&unk_1002C4F78);
}

uint64_t sub_100125EB0()
{
  return sub_10000FD98( &qword_100356818,  type metadata accessor for CLP_LogEntry_PrivateData_Compass,  (uint64_t)&unk_1002C4EA0);
}

uint64_t sub_100125EDC()
{
  return sub_10000FD98( &qword_100355890,  type metadata accessor for CLP_LogEntry_PrivateData_Compass,  (uint64_t)&unk_1002C4FA0);
}

uint64_t sub_100125F08()
{
  return sub_10000FD98( &qword_100356820,  type metadata accessor for CLP_LogEntry_PrivateData_Compass,  (uint64_t)&unk_1002C4FE0);
}

uint64_t sub_100125F34()
{
  return sub_10000FD98( &qword_100356828,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  (uint64_t)&unk_1002C50E0);
}

uint64_t sub_100125F60()
{
  return sub_10000FD98( &qword_100356830,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  (uint64_t)&unk_1002C5008);
}

uint64_t sub_100125F8C()
{
  return sub_10000FD98( &qword_100355898,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  (uint64_t)&unk_1002C5108);
}

uint64_t sub_100125FB8()
{
  return sub_10000FD98( &qword_100356838,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion,  (uint64_t)&unk_1002C5148);
}

uint64_t sub_100125FE4()
{
  return sub_10000FD98( &qword_100356840,  type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus,  (uint64_t)&unk_1002C5248);
}

uint64_t sub_100126010()
{
  return sub_10000FD98( &qword_100356848,  type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus,  (uint64_t)&unk_1002C5170);
}

uint64_t sub_10012603C()
{
  return sub_10000FD98( &qword_1003558A0,  type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus,  (uint64_t)&unk_1002C5270);
}

uint64_t sub_100126068()
{
  return sub_10000FD98( &qword_100356850,  type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus,  (uint64_t)&unk_1002C52B0);
}

uint64_t sub_100126094()
{
  return sub_10000FD98( &qword_100356858,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample,  (uint64_t)&unk_1002C53B0);
}

uint64_t sub_1001260C0()
{
  return sub_10000FD98( &qword_1003558B0,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample,  (uint64_t)&unk_1002C52D8);
}

uint64_t sub_1001260EC()
{
  return sub_10000FD98( &qword_1003558A8,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample,  (uint64_t)&unk_1002C53D8);
}

uint64_t sub_100126118()
{
  return sub_10000FD98( &qword_100356860,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample,  (uint64_t)&unk_1002C5418);
}

uint64_t sub_100126144()
{
  return sub_10000FD98( &qword_100356868,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion,  (uint64_t)&unk_1002C5518);
}

uint64_t sub_100126170()
{
  return sub_10000FD98( &qword_100356870,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion,  (uint64_t)&unk_1002C5440);
}

uint64_t sub_10012619C()
{
  return sub_10000FD98( &qword_1003558B8,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion,  (uint64_t)&unk_1002C5540);
}

uint64_t sub_1001261C8()
{
  return sub_10000FD98( &qword_100356878,  type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion,  (uint64_t)&unk_1002C5580);
}

uint64_t sub_1001261F4()
{
  return sub_10000FD98( &qword_100356880,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData,  (uint64_t)&unk_1002C5680);
}

uint64_t sub_100126220()
{
  return sub_10000FD98( &qword_100356888,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData,  (uint64_t)&unk_1002C55A8);
}

uint64_t sub_10012624C()
{
  return sub_10000FD98( &qword_1003558C0,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData,  (uint64_t)&unk_1002C56A8);
}

uint64_t sub_100126278()
{
  return sub_10000FD98( &qword_100356890,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData,  (uint64_t)&unk_1002C56E8);
}

uint64_t sub_1001262A4()
{
  return sub_10000FD98( &qword_100356898,  type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData,  (uint64_t)&unk_1002C57E8);
}

uint64_t sub_1001262D0()
{
  return sub_10000FD98( &qword_1003568A0,  type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData,  (uint64_t)&unk_1002C5710);
}

uint64_t sub_1001262FC()
{
  return sub_10000FD98( &qword_1003558C8,  type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData,  (uint64_t)&unk_1002C5810);
}

uint64_t sub_100126328()
{
  return sub_10000FD98( &qword_1003568A8,  type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData,  (uint64_t)&unk_1002C5850);
}

uint64_t sub_100126354()
{
  return sub_10000FD98( &qword_1003568B0,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint,  (uint64_t)&unk_1002C5950);
}

uint64_t sub_100126380()
{
  return sub_10000FD98( &qword_100355288,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint,  (uint64_t)&unk_1002C5878);
}

uint64_t sub_1001263AC()
{
  return sub_10000FD98( &qword_1003558D0,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint,  (uint64_t)&unk_1002C5978);
}

uint64_t sub_1001263D8()
{
  return sub_10000FD98( &qword_1003568B8,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint,  (uint64_t)&unk_1002C59B8);
}

uint64_t sub_100126404()
{
  return sub_10000FD98( &qword_1003568C0,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState,  (uint64_t)&unk_1002C5AB8);
}

uint64_t sub_100126430()
{
  return sub_10000FD98( &qword_1003568C8,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState,  (uint64_t)&unk_1002C59E0);
}

uint64_t sub_10012645C()
{
  return sub_10000FD98( &qword_1003558D8,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState,  (uint64_t)&unk_1002C5AE0);
}

uint64_t sub_100126488()
{
  return sub_10000FD98( &qword_1003568D0,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState,  (uint64_t)&unk_1002C5B20);
}

uint64_t sub_1001264B4()
{
  return sub_10000FD98( &qword_1003568D8,  type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult,  (uint64_t)&unk_1002C5C20);
}

uint64_t sub_1001264E0()
{
  return sub_10000FD98( &qword_100355290,  type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult,  (uint64_t)&unk_1002C5B48);
}

uint64_t sub_10012650C()
{
  return sub_10000FD98( &qword_1003558E0,  type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult,  (uint64_t)&unk_1002C5C48);
}

uint64_t sub_100126538()
{
  return sub_10000FD98( &qword_1003568E0,  type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult,  (uint64_t)&unk_1002C5C88);
}

uint64_t sub_100126564()
{
  return sub_10000FD98( &qword_1003568E8,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  (uint64_t)&unk_1002C5D88);
}

uint64_t sub_100126590()
{
  return sub_10000FD98( &qword_100350F88,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  (uint64_t)&unk_1002C5CB0);
}

uint64_t sub_1001265BC()
{
  return sub_10000FD98( &qword_1003558E8,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  (uint64_t)&unk_1002C5DB0);
}

uint64_t sub_1001265E8()
{
  return sub_10000FD98( &qword_100351758,  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification,  (uint64_t)&unk_1002C5DF0);
}

uint64_t sub_100126614()
{
  return sub_10000FD98( &qword_1003568F0,  type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction,  (uint64_t)&unk_1002C5EF0);
}

uint64_t sub_100126640()
{
  return sub_10000FD98( &qword_1003568F8,  type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction,  (uint64_t)&unk_1002C5E18);
}

uint64_t sub_10012666C()
{
  return sub_10000FD98( &qword_1003558F0,  type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction,  (uint64_t)&unk_1002C5F18);
}

uint64_t sub_100126698()
{
  return sub_10000FD98( &qword_100356900,  type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction,  (uint64_t)&unk_1002C5F58);
}

uint64_t sub_1001266C4()
{
  return sub_10000FD98( &qword_100356908,  type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D,  (uint64_t)&unk_1002C60A8);
}

uint64_t sub_1001266F0()
{
  return sub_10000FD98( &qword_100355900,  type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D,  (uint64_t)&unk_1002C5FD0);
}

uint64_t sub_10012671C()
{
  return sub_10000FD98( &qword_1003558F8,  type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D,  (uint64_t)&unk_1002C60D0);
}

uint64_t sub_100126748()
{
  return sub_10000FD98( &qword_100356910,  type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D,  (uint64_t)&unk_1002C6110);
}

uint64_t sub_100126774()
{
  return sub_10000FD98( &qword_100356918,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection,  (uint64_t)&unk_1002C6210);
}

uint64_t sub_1001267A0()
{
  return sub_10000FD98( &qword_100355910,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection,  (uint64_t)&unk_1002C6138);
}

uint64_t sub_1001267CC()
{
  return sub_10000FD98( &qword_100355908,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection,  (uint64_t)&unk_1002C6238);
}

uint64_t sub_1001267F8()
{
  return sub_10000FD98( &qword_100356920,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection,  (uint64_t)&unk_1002C6278);
}

uint64_t sub_100126824()
{
  return sub_10000FD98( &qword_100356928,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding,  (uint64_t)&unk_1002C6378);
}

uint64_t sub_100126850()
{
  return sub_10000FD98( &qword_100355920,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding,  (uint64_t)&unk_1002C62A0);
}

uint64_t sub_10012687C()
{
  return sub_10000FD98( &qword_100355918,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding,  (uint64_t)&unk_1002C63A0);
}

uint64_t sub_1001268A8()
{
  return sub_10000FD98( &qword_100356930,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding,  (uint64_t)&unk_1002C63E0);
}

uint64_t sub_1001268D4()
{
  return sub_10000FD98( &qword_100356938,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData,  (uint64_t)&unk_1002C64E0);
}

uint64_t sub_100126900()
{
  return sub_10000FD98( &qword_100356940,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData,  (uint64_t)&unk_1002C6408);
}

uint64_t sub_10012692C()
{
  return sub_10000FD98( &qword_100355928,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData,  (uint64_t)&unk_1002C6508);
}

uint64_t sub_100126958()
{
  return sub_10000FD98( &qword_100356948,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData,  (uint64_t)&unk_1002C6548);
}

uint64_t sub_100126984()
{
  return sub_10000FD98( &qword_100356950,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch,  (uint64_t)&unk_1002C6648);
}

uint64_t sub_1001269B0()
{
  return sub_10000FD98( &qword_100355940,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch,  (uint64_t)&unk_1002C6570);
}

uint64_t sub_1001269DC()
{
  return sub_10000FD98( &qword_100355930,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch,  (uint64_t)&unk_1002C6670);
}

uint64_t sub_100126A08()
{
  return sub_10000FD98( &qword_100356958,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch,  (uint64_t)&unk_1002C66B0);
}

uint64_t sub_100126A34()
{
  return sub_10000FD98( &qword_100356960,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox,  (uint64_t)&unk_1002C67D8);
}

uint64_t sub_100126A60()
{
  return sub_10000FD98( &qword_100356968,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox,  (uint64_t)&unk_1002C6700);
}

uint64_t sub_100126A8C()
{
  return sub_10000FD98( &qword_100355938,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox,  (uint64_t)&unk_1002C6800);
}

uint64_t sub_100126AB8()
{
  return sub_10000FD98( &qword_100356970,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox,  (uint64_t)&unk_1002C6840);
}

uint64_t sub_100126AE4()
{
  return sub_10000FD98( &qword_100356978,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna,  (uint64_t)&unk_1002C6940);
}

uint64_t sub_100126B10()
{
  return sub_10000FD98( &qword_100355958,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna,  (uint64_t)&unk_1002C6868);
}

uint64_t sub_100126B3C()
{
  return sub_10000FD98( &qword_100355948,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna,  (uint64_t)&unk_1002C6968);
}

uint64_t sub_100126B68()
{
  return sub_10000FD98( &qword_100356980,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna,  (uint64_t)&unk_1002C69A8);
}

uint64_t sub_100126B94()
{
  return sub_10000FD98( &qword_100356988,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures,  (uint64_t)&unk_1002C6AD0);
}

uint64_t sub_100126BC0()
{
  return sub_10000FD98( &qword_100356990,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures,  (uint64_t)&unk_1002C69F8);
}

uint64_t sub_100126BEC()
{
  return sub_10000FD98( &qword_100355950,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures,  (uint64_t)&unk_1002C6AF8);
}

uint64_t sub_100126C18()
{
  return sub_10000FD98( &qword_100356998,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures,  (uint64_t)&unk_1002C6B38);
}

uint64_t sub_100126C44()
{
  return sub_10000FD98( &qword_1003569A0,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData,  (uint64_t)&unk_1002C6C38);
}

uint64_t sub_100126C70()
{
  return sub_10000FD98( &qword_1003569A8,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData,  (uint64_t)&unk_1002C6B60);
}

uint64_t sub_100126C9C()
{
  return sub_10000FD98( &qword_100355960,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData,  (uint64_t)&unk_1002C6C60);
}

uint64_t sub_100126CC8()
{
  return sub_10000FD98( &qword_1003569B0,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData,  (uint64_t)&unk_1002C6CA0);
}

uint64_t sub_100126CF4()
{
  return sub_10000FD98( &qword_1003569B8,  type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation,  (uint64_t)&unk_1002C6DA0);
}

uint64_t sub_100126D20()
{
  return sub_10000FD98( &qword_1003569C0,  type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation,  (uint64_t)&unk_1002C6CC8);
}

uint64_t sub_100126D4C()
{
  return sub_10000FD98( &qword_100355968,  type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation,  (uint64_t)&unk_1002C6DC8);
}

uint64_t sub_100126D78()
{
  return sub_10000FD98( &qword_1003569C8,  type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation,  (uint64_t)&unk_1002C6E08);
}

uint64_t sub_100126DA4()
{
  return sub_10000FD98( &qword_1003569D0,  type metadata accessor for CLP_LogEntry_PrivateData_WristState,  (uint64_t)&unk_1002C6F30);
}

uint64_t sub_100126DD0()
{
  return sub_10000FD98( &qword_1003569D8,  type metadata accessor for CLP_LogEntry_PrivateData_WristState,  (uint64_t)&unk_1002C6E58);
}

uint64_t sub_100126DFC()
{
  return sub_10000FD98( &qword_100355970,  type metadata accessor for CLP_LogEntry_PrivateData_WristState,  (uint64_t)&unk_1002C6F58);
}

uint64_t sub_100126E28()
{
  return sub_10000FD98( &qword_1003569E0,  type metadata accessor for CLP_LogEntry_PrivateData_WristState,  (uint64_t)&unk_1002C6F98);
}

uint64_t sub_100126E54()
{
  return sub_10000FD98( &qword_1003569E8,  type metadata accessor for CLP_LogEntry_PrivateData_WatchState,  (uint64_t)&unk_1002C70E8);
}

uint64_t sub_100126E80()
{
  return sub_10000FD98( &qword_1003569F0,  type metadata accessor for CLP_LogEntry_PrivateData_WatchState,  (uint64_t)&unk_1002C7010);
}

uint64_t sub_100126EAC()
{
  return sub_10000FD98( &qword_100355978,  type metadata accessor for CLP_LogEntry_PrivateData_WatchState,  (uint64_t)&unk_1002C7110);
}

uint64_t sub_100126ED8()
{
  return sub_10000FD98( &qword_1003569F8,  type metadata accessor for CLP_LogEntry_PrivateData_WatchState,  (uint64_t)&unk_1002C7150);
}

uint64_t sub_100126F04()
{
  return sub_10000FD98( &qword_100356A00,  type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference,  (uint64_t)&unk_1002C7250);
}

uint64_t sub_100126F30()
{
  return sub_10000FD98( &qword_100356A08,  type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference,  (uint64_t)&unk_1002C7178);
}

uint64_t sub_100126F5C()
{
  return sub_10000FD98( &qword_100355980,  type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference,  (uint64_t)&unk_1002C7278);
}

uint64_t sub_100126F88()
{
  return sub_10000FD98( &qword_100356A10,  type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference,  (uint64_t)&unk_1002C72B8);
}

uint64_t sub_100126FB4()
{
  return sub_10000FD98( &qword_100356A18,  type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit,  (uint64_t)&unk_1002C7408);
}

uint64_t sub_100126FE0()
{
  return sub_10000FD98( &qword_100356A20,  type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit,  (uint64_t)&unk_1002C7330);
}

uint64_t sub_10012700C()
{
  return sub_10000FD98( &qword_100355988,  type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit,  (uint64_t)&unk_1002C7430);
}

uint64_t sub_100127038()
{
  return sub_10000FD98( &qword_100356A28,  type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit,  (uint64_t)&unk_1002C7470);
}

uint64_t sub_100127064()
{
  return sub_10000FD98( &qword_100356A30,  type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate,  (uint64_t)&unk_1002C7570);
}

uint64_t sub_100127090()
{
  return sub_10000FD98( &qword_100356A38,  type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate,  (uint64_t)&unk_1002C7498);
}

uint64_t sub_1001270BC()
{
  return sub_10000FD98( &qword_100355990,  type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate,  (uint64_t)&unk_1002C7598);
}

uint64_t sub_1001270E8()
{
  return sub_10000FD98( &qword_100356A40,  type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate,  (uint64_t)&unk_1002C75D8);
}

uint64_t sub_100127114()
{
  return sub_10000FD98( &qword_100356A48,  type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample,  (uint64_t)&unk_1002C76D8);
}

uint64_t sub_100127140()
{
  return sub_10000FD98( &qword_100356A50,  type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample,  (uint64_t)&unk_1002C7600);
}

uint64_t sub_10012716C()
{
  return sub_10000FD98( &qword_100355998,  type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample,  (uint64_t)&unk_1002C7700);
}

uint64_t sub_100127198()
{
  return sub_10000FD98( &qword_100356A58,  type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample,  (uint64_t)&unk_1002C7740);
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType()
{
  return &type metadata for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_LocationType( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_LocationType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF2) {
    return ((uint64_t (*)(void))((char *)&loc_1001272B8 + 4 * byte_1002BB123[v4]))();
  }
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_1001272EC + 4 * byte_1002BB11E[v4]))();
}

uint64_t sub_1001272EC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001272F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001272FCLL);
  }
  return result;
}

uint64_t sub_100127308(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100127310LL);
  }
  *(_BYTE *)unint64_t result = a2 + 13;
  return result;
}

uint64_t sub_100127314(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012731C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_LocationType()
{
  return &type metadata for CLP_LogEntry_PrivateData_LocationType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteConstellation()
{
  return &type metadata for CLP_LogEntry_PrivateData_ClientSatelliteConstellation;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocationFixType()
{
  return &type metadata for CLP_LogEntry_PrivateData_BatchedLocationFixType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_GnssModeOfOperation()
{
  return &type metadata for CLP_LogEntry_PrivateData_GnssModeOfOperation;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssWakeMode()
{
  return &type metadata for CLP_LogEntry_PrivateData_RhythmicGnssWakeMode;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_BatchMode()
{
  return &type metadata for CLP_LogEntry_PrivateData_BatchMode;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_OperatingMode()
{
  return &type metadata for CLP_LogEntry_PrivateData_OperatingMode;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_PipelineOperatingMode()
{
  return &type metadata for CLP_LogEntry_PrivateData_PipelineOperatingMode;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_DominantMotionModeType( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xB9) {
    goto LABEL_17;
  }
  if (a2 + 71 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 71) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 71;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 71;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 71;
    }
  }

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_DominantMotionModeType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 71 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 71) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xB9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xB8) {
    return ((uint64_t (*)(void))((char *)&loc_100127494 + 4 * byte_1002BB12D[v4]))();
  }
  *a1 = a2 + 71;
  return ((uint64_t (*)(void))((char *)sub_1001274C8 + 4 * byte_1002BB128[v4]))();
}

uint64_t sub_1001274C8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001274D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001274D8LL);
  }
  return result;
}

uint64_t sub_1001274E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001274ECLL);
  }
  *(_BYTE *)unint64_t result = a2 + 71;
  return result;
}

uint64_t sub_1001274F0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001274F8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DominantMotionModeType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DominantMotionModeType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityType()
{
  return &type metadata for CLP_LogEntry_PrivateData_ReachabilityType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_BatteryChargerType()
{
  return &type metadata for CLP_LogEntry_PrivateData_BatteryChargerType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel()
{
  return &type metadata for CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel()
{
  return &type metadata for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionMode()
{
  return &type metadata for CLP_LogEntry_PrivateData_SensorFusionMode;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPointMode()
{
  return &type metadata for CLP_LogEntry_PrivateData_WifiAccessPointMode;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WifiRfBand()
{
  return &type metadata for CLP_LogEntry_PrivateData_WifiRfBand;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WifiScanType()
{
  return &type metadata for CLP_LogEntry_PrivateData_WifiScanType;
}

uint64_t _s10ALProtobuf45CLP_LogEntry_PrivateData_WifiNotificationTypeOwet_0( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF2) {
    goto LABEL_17;
  }
  if (a2 + 14 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 14) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 14;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }

uint64_t _s10ALProtobuf45CLP_LogEntry_PrivateData_WifiNotificationTypeOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF1) {
    return ((uint64_t (*)(void))((char *)&loc_100127680 + 4 * byte_1002BB137[v4]))();
  }
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_1001276B4 + 4 * byte_1002BB132[v4]))();
}

uint64_t sub_1001276B4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001276BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001276C4LL);
  }
  return result;
}

uint64_t sub_1001276D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001276D8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 14;
  return result;
}

uint64_t sub_1001276DC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001276E4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WifiNotificationType()
{
  return &type metadata for CLP_LogEntry_PrivateData_WifiNotificationType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_LocationServicesEnabled()
{
  return &type metadata for CLP_LogEntry_PrivateData_LocationServicesEnabled;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DataAvailability()
{
  return &type metadata for CLP_LogEntry_PrivateData_DataAvailability;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_IndoorOutdoorType()
{
  return &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_IndoorOutdoorConfidence()
{
  return &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorConfidence;
}

uint64_t sub_100127740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012774C);
}

uint64_t sub_100127750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012775C);
}

uint64_t sub_100127760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013A0F0(a1, a2, a3, (uint64_t)"\t");
}

uint64_t sub_100127784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100127790);
}

uint64_t sub_100127790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013EA24(a1, a2, a3, &qword_100355538);
}

uint64_t sub_10012779C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001277A8);
}

uint64_t sub_1001277A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10013EAB4(a1, a2, a3, a4, &qword_100355538);
}

void sub_1001277B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1001277E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001277EC);
}

uint64_t sub_1001277F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001277FC);
}

uint64_t *sub_100127804(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    int v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1LL, v12))
    {
      uint64_t v14 = sub_100003A0C(&qword_100355538);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      int v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      char v20 = &v10[v19];
      int v21 = &v11[v19];
      *(void *)char v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      int v23 = &v10[v22];
      int v24 = &v11[v22];
      *(void *)int v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
    }

    uint64_t v25 = a3[6];
    uint64_t v26 = a3[7];
    int v27 = (char *)a1 + v25;
    int v28 = (char *)a2 + v25;
    *(_DWORD *)int v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    uint64_t v29 = (char *)a1 + v26;
    char v30 = (char *)a2 + v26;
    *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
    v29[4] = v30[4];
    uint64_t v31 = a3[8];
    uint64_t v32 = (char *)a1 + v31;
    uint64_t v33 = (char *)a2 + v31;
    *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
    v32[4] = v33[4];
  }

  return a1;
}

uint64_t sub_1001279C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  int v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v8(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL))(v5, 1LL, v6);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v5, v4);
  }
  return result;
}

uint64_t sub_100127A60(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    int v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)int v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    int v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)int v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  uint64_t v27 = a1 + v24;
  uint64_t v28 = a2 + v24;
  *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
  *(_BYTE *)(v27 + 4) = *(_BYTE *)(v28 + 4);
  uint64_t v29 = a3[8];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  return a1;
}

uint64_t sub_100127BF0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    int v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)int v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    int v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)int v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  uint64_t v27 = a1 + v24;
  uint64_t v28 = a2 + v24;
  *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
  *(_BYTE *)(v27 + 4) = *(_BYTE *)(v28 + 4);
  uint64_t v29 = a3[8];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  return a1;
}

uint64_t sub_100127D80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100127D8C);
}

uint64_t sub_100127D8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013EA24(a1, a2, a3, &qword_100355538);
}

uint64_t sub_100127D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100127DA4);
}

uint64_t sub_100127DA4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10013EAB4(a1, a2, a3, a4, &qword_100355538);
}

uint64_t *sub_100127DB0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain(v4);
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (char *)v7 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    uint64_t v17 = *((void *)v16 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1LL, v16))
    {
      uint64_t v18 = sub_100003A0C(&qword_100355538);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      v12(v14, v15, v11);
      uint64_t v19 = v16[5];
      uint64_t v20 = &v14[v19];
      int v21 = &v15[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v16[6];
      uint64_t v23 = &v14[v22];
      uint64_t v24 = &v15[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      uint64_t v25 = v16[7];
      uint64_t v26 = &v14[v25];
      uint64_t v27 = &v15[v25];
      *(void *)uint64_t v26 = *(void *)v27;
      v26[8] = v27[8];
      (*(void (**)(char *, void, uint64_t, int *))(v17 + 56))(v14, 0LL, 1LL, v16);
    }
  }

  return v7;
}

uint64_t sub_100127F2C(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v9(v4, v5);
  uint64_t v6 = (char *)a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(char *, uint64_t))v9)(v6, v5);
  }
  return result;
}

uint64_t *sub_100127FDC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v16 = *((void *)v15 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1LL, v15))
  {
    uint64_t v17 = sub_100003A0C(&qword_100355538);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    v11(v13, v14, v10);
    uint64_t v18 = v15[5];
    uint64_t v19 = &v13[v18];
    uint64_t v20 = &v14[v18];
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = v15[6];
    uint64_t v22 = &v13[v21];
    uint64_t v23 = &v14[v21];
    *(void *)uint64_t v22 = *(void *)v23;
    v22[8] = v23[8];
    uint64_t v24 = v15[7];
    uint64_t v25 = &v13[v24];
    uint64_t v26 = &v14[v24];
    *(void *)uint64_t v25 = *(void *)v26;
    v25[8] = v26[8];
    (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0LL, 1LL, v15);
  }

  return a1;
}

void *sub_100128130(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100003A0C(&qword_100355538);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    v10(v12, v13, v9);
    uint64_t v17 = v14[5];
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v14[6];
    uint64_t v21 = &v12[v20];
    uint64_t v22 = &v13[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = v14[7];
    uint64_t v24 = &v12[v23];
    uint64_t v25 = &v13[v23];
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  return a1;
}

uint64_t sub_10012827C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100128288);
}

uint64_t sub_10012828C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100128298);
}

uint64_t *sub_10012829C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1LL, v12))
    {
      uint64_t v14 = sub_100003A0C(&qword_100355538);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
    }

    uint64_t v25 = a3[6];
    uint64_t v26 = a3[7];
    uint64_t v27 = (char *)a1 + v25;
    uint64_t v28 = (char *)a2 + v25;
    *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    uint64_t v29 = (char *)a1 + v26;
    uint64_t v30 = (char *)a2 + v26;
    *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
    v29[4] = v30[4];
  }

  return a1;
}

uint64_t sub_10012843C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  uint64_t v27 = a1 + v24;
  uint64_t v28 = a2 + v24;
  *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
  *(_BYTE *)(v27 + 4) = *(_BYTE *)(v28 + 4);
  return a1;
}

uint64_t sub_1001285B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v51 = a3;
  uint64_t v52 = a2;
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (char *)(a1 + v9);
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v13 = *((void *)v12 - 1);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, int *))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14(v11, 1LL, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      uint64_t v39 = v12[5];
      uint64_t v40 = &v10[v39];
      uint64_t v41 = &v11[v39];
      char v42 = v41[8];
      *(void *)uint64_t v40 = *(void *)v41;
      v40[8] = v42;
      uint64_t v43 = v12[6];
      uint64_t v44 = &v10[v43];
      uint64_t v45 = &v11[v43];
      char v46 = v45[8];
      *(void *)uint64_t v44 = *(void *)v45;
      v44[8] = v46;
      uint64_t v47 = v12[7];
      uint64_t v48 = &v10[v47];
      int v49 = &v11[v47];
      char v50 = v49[8];
      *(void *)uint64_t v48 = *(void *)v49;
      v48[8] = v50;
      goto LABEL_7;
    }

    sub_100004090((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  if (v16)
  {
LABEL_6:
    uint64_t v29 = sub_100003A0C(&qword_100355538);
    memcpy(v10, v11, *(void *)(*(void *)(v29 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  uint64_t v17 = v12[5];
  uint64_t v18 = &v10[v17];
  uint64_t v19 = &v11[v17];
  char v20 = v19[8];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v20;
  uint64_t v21 = v12[6];
  uint64_t v22 = &v10[v21];
  uint64_t v23 = &v11[v21];
  char v24 = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v24;
  uint64_t v25 = v12[7];
  uint64_t v26 = &v10[v25];
  uint64_t v27 = &v11[v25];
  char v28 = v27[8];
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v28;
  (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
LABEL_7:
  uint64_t v30 = *(int *)(v51 + 24);
  uint64_t v31 = a1 + v30;
  uint64_t v32 = (int *)(v52 + v30);
  int v33 = *v32;
  *(_BYTE *)(v31 + 4) = *((_BYTE *)v32 + 4);
  *(_DWORD *)uint64_t v31 = v33;
  uint64_t v34 = *(int *)(v51 + 28);
  uint64_t v35 = a1 + v34;
  int v36 = (int *)(v52 + v34);
  int v37 = *v36;
  *(_BYTE *)(v35 + 4) = *((_BYTE *)v36 + 4);
  *(_DWORD *)uint64_t v35 = v37;
  return a1;
}

uint64_t sub_1001287D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    int v15 = &v9[v14];
    int v16 = &v10[v14];
    *(void *)int v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  uint64_t v27 = a1 + v24;
  uint64_t v28 = a2 + v24;
  *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
  *(_BYTE *)(v27 + 4) = *(_BYTE *)(v28 + 4);
  return a1;
}

uint64_t sub_100128944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v43 = a3;
  uint64_t v44 = a2;
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (char *)(a1 + v9);
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v13 = *((void *)v12 - 1);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, int *))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14(v11, 1LL, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      uint64_t v34 = v12[5];
      uint64_t v35 = &v10[v34];
      int v36 = &v11[v34];
      *(void *)uint64_t v35 = *(void *)v36;
      v35[8] = v36[8];
      uint64_t v37 = v12[6];
      uint64_t v38 = &v10[v37];
      uint64_t v39 = &v11[v37];
      *(void *)uint64_t v38 = *(void *)v39;
      v38[8] = v39[8];
      uint64_t v40 = v12[7];
      uint64_t v41 = &v10[v40];
      char v42 = &v11[v40];
      *(void *)uint64_t v41 = *(void *)v42;
      v41[8] = v42[8];
      goto LABEL_7;
    }

    sub_100004090((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  if (v16)
  {
LABEL_6:
    uint64_t v26 = sub_100003A0C(&qword_100355538);
    memcpy(v10, v11, *(void *)(*(void *)(v26 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
  uint64_t v17 = v12[5];
  uint64_t v18 = &v10[v17];
  uint64_t v19 = &v11[v17];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  uint64_t v20 = v12[6];
  uint64_t v21 = &v10[v20];
  uint64_t v22 = &v11[v20];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  uint64_t v23 = v12[7];
  uint64_t v24 = &v10[v23];
  uint64_t v25 = &v11[v23];
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
LABEL_7:
  uint64_t v27 = *(int *)(v43 + 24);
  uint64_t v28 = *(int *)(v43 + 28);
  uint64_t v29 = a1 + v27;
  uint64_t v30 = v44 + v27;
  *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
  *(_BYTE *)(v29 + 4) = *(_BYTE *)(v30 + 4);
  uint64_t v31 = a1 + v28;
  uint64_t v32 = v44 + v28;
  *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
  *(_BYTE *)(v31 + 4) = *(_BYTE *)(v32 + 4);
  return a1;
}

uint64_t sub_100128B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100128B6C);
}

uint64_t sub_100128B6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013EA24(a1, a2, a3, &qword_100355538);
}

uint64_t sub_100128B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100128B84);
}

uint64_t sub_100128B84(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10013EAB4(a1, a2, a3, a4, &qword_100355538);
}

void sub_100128B90(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    sub_1000119EC( 319LL,  (unint64_t *)&unk_100356B40,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v5 <= 0x3F)
    {
      v6[1] = *(void *)(v4 - 8) + 64LL;
      v6[2] = &unk_1002C7CB8;
      v6[3] = &unk_1002C7CB8;
      swift_initStructMetadata(a1, 256LL, 4LL, v6, a1 + 16);
    }
  }

uint64_t sub_100128C30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100128C3C);
}

uint64_t sub_100128C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100128C4C);
}

uint64_t sub_100128C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100128C70);
}

uint64_t sub_100128C74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100128C80);
}

uint64_t sub_100128C84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007813C(a1, a2, a3, (uint64_t)"\t", (uint64_t)"\t");
}

uint64_t sub_100128C94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100128CA0);
}

uint64_t sub_100128CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100128CB0);
}

uint64_t sub_100128CB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100148D5C(a1, a2, a3, (uint64_t)&value witness table for Builtin.NativeObject + 64);
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType;
}

uint64_t sub_100128CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100128CF0);
}

uint64_t sub_100128CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100128D00);
}

uint64_t sub_100128D04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100148544(a1, a2, a3, (uint64_t)"\t", (uint64_t)"\t", (uint64_t)&unk_1002C7E68, (uint64_t)&unk_1002C7E68);
}

uint64_t sub_100128D20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100128D2C);
}

uint64_t sub_100128D30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100128D3C);
}

void *sub_100128D40(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *a1 = *a2;
    a1 = (void *)(v24 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v24);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    v9[4] = v10[4];
    *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
    uint64_t v11 = a3[7];
    uint64_t v12 = a3[8];
    uint64_t v13 = (char *)a1 + v11;
    uint64_t v14 = (char *)a2 + v11;
    v13[4] = v14[4];
    *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
    int v15 = (char *)a1 + v12;
    int v16 = (char *)a2 + v12;
    *(_DWORD *)int v15 = *(_DWORD *)v16;
    v15[4] = v16[4];
    uint64_t v17 = a3[9];
    uint64_t v18 = a3[10];
    uint64_t v19 = (char *)a1 + v17;
    uint64_t v20 = (char *)a2 + v17;
    *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
    v19[4] = v20[4];
    uint64_t v21 = (char *)a1 + v18;
    uint64_t v22 = (char *)a2 + v18;
    LODWORD(v19) = *(_DWORD *)v22;
    v21[4] = v22[4];
    *(_DWORD *)uint64_t v21 = (_DWORD)v19;
    uint64_t v23 = a3[12];
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *((_BYTE *)a1 + v23) = *((_BYTE *)a2 + v23);
  }

  return a1;
}

uint64_t sub_100128E5C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  uint64_t v16 = a3[9];
  uint64_t v17 = a3[10];
  uint64_t v18 = a1 + v16;
  uint64_t v19 = a2 + v16;
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  uint64_t v20 = a1 + v17;
  uint64_t v21 = a2 + v17;
  LODWORD(v18) = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  *(_DWORD *)uint64_t v20 = v18;
  uint64_t v22 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v22) = *(_BYTE *)(a2 + v22);
  return a1;
}

uint64_t sub_100128F4C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(_BYTE *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = v10;
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(_BYTE *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v14;
  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  char v18 = *(_BYTE *)(v17 + 4);
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = v18;
  uint64_t v19 = a3[9];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  char v22 = *(_BYTE *)(v21 + 4);
  *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = v22;
  uint64_t v23 = a3[10];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  char v26 = *(_BYTE *)(v25 + 4);
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = v26;
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_10012904C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  uint64_t v16 = a3[9];
  uint64_t v17 = a3[10];
  uint64_t v18 = a1 + v16;
  uint64_t v19 = a2 + v16;
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  uint64_t v20 = a1 + v17;
  uint64_t v21 = a2 + v17;
  LODWORD(v18) = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  *(_DWORD *)uint64_t v20 = v18;
  uint64_t v22 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v22) = *(_BYTE *)(a2 + v22);
  return a1;
}

uint64_t sub_10012913C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  uint64_t v16 = a3[9];
  uint64_t v17 = a3[10];
  uint64_t v18 = a1 + v16;
  uint64_t v19 = a2 + v16;
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  uint64_t v20 = a1 + v17;
  uint64_t v21 = a2 + v17;
  LODWORD(v18) = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  *(_DWORD *)uint64_t v20 = v18;
  uint64_t v22 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v22) = *(_BYTE *)(a2 + v22);
  return a1;
}

uint64_t sub_10012922C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100129238);
}

uint64_t sub_10012923C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100129248);
}

uint64_t sub_10012924C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013967C(a1, a2, a3, (uint64_t)&unk_1002C7EE0, (uint64_t)&unk_1002C7CB8);
}

uint64_t sub_100129260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012926C);
}

uint64_t sub_100129270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012927C);
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy;
}

void *sub_1001292F0(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (void *)(v18 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v18);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)uint64_t v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    uint64_t v16 = (char *)a1 + v14;
    uint64_t v17 = (char *)a2 + v14;
    *(void *)uint64_t v16 = *(void *)v17;
    v16[8] = v17[8];
    *((_BYTE *)a1 + v15) = *((_BYTE *)a2 + v15);
  }

  return a1;
}

uint64_t sub_1001293C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  return a1;
}

uint64_t sub_10012946C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
  *(void *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(_BYTE *)(v12 + 8) = v10;
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  LOBYTE(v10) = *(_BYTE *)(v16 + 8);
  *(void *)uint64_t v15 = *(void *)v16;
  *(_BYTE *)(v15 + 8) = v10;
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_10012951C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  return a1;
}

uint64_t sub_1001295C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  return a1;
}

uint64_t sub_10012966C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100129678);
}

uint64_t sub_100129678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  else {
    int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 32));
  }
  unsigned int v10 = v9 - 4;
  else {
    return 0LL;
  }
}

uint64_t sub_1001296FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100129708);
}

uint64_t sub_100129708(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 32)) = a2 + 4;
  return result;
}

uint64_t sub_100129780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100148544(a1, a2, a3, (uint64_t)"\t", (uint64_t)"\t", (uint64_t)"\t", (uint64_t)&unk_1002C7FF8);
}

uint64_t sub_1001297B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001297BC);
}

uint64_t sub_1001297C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001297CC);
}

uint64_t sub_1001297D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007813C(a1, a2, a3, (uint64_t)&unk_1002C8040, (uint64_t)&unk_1002C7E68);
}

uint64_t sub_1001297F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100129804);
}

uint64_t sub_100129808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100129814);
}

uint64_t sub_100129818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100148544(a1, a2, a3, (uint64_t)"\t", (uint64_t)"\t", (uint64_t)"\t", (uint64_t)"\t");
}

uint64_t sub_100129830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012983C);
}

uint64_t sub_100129840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012984C);
}

uint64_t *sub_100129850(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    unsigned int v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)unsigned int v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (uint64_t *)((char *)a1 + v9);
    uint64_t v13 = (uint64_t *)((char *)a2 + v9);
    uint64_t v14 = v13[1];
    void *v12 = *v13;
    v12[1] = v14;
    swift_bridgeObjectRetain(v14);
  }

  return a1;
}

uint64_t sub_100129900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = (void *)(a1 + v8);
  uint64_t v12 = (void *)(a2 + v8);
  uint64_t v13 = v12[1];
  *uint64_t v11 = *v12;
  v11[1] = v13;
  swift_bridgeObjectRetain(v13);
  return a1;
}

uint64_t sub_100129980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(_BYTE *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  void *v12 = *v13;
  uint64_t v14 = v13[1];
  uint64_t v15 = v12[1];
  v12[1] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t sub_100129A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  return a1;
}

uint64_t sub_100129A8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = (void *)(a1 + v8);
  uint64_t v12 = (uint64_t *)(a2 + v8);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  uint64_t v15 = v11[1];
  *uint64_t v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t sub_100129B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100129B1C);
}

uint64_t sub_100129B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100129B2C);
}

uint64_t sub_100129B30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007813C(a1, a2, a3, (uint64_t)"\t", (uint64_t)&unk_1002C80F0);
}

uint64_t sub_100129B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100129B50);
}

uint64_t sub_100129B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100129B60);
}

uint64_t sub_100129B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100129B70);
}

uint64_t sub_100129B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100129B80);
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_Location.SignalQualityType()
{
  return &type metadata for CLP_LogEntry_PrivateData_Location.SignalQualityType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_Location.MotionDetectedType()
{
  return &type metadata for CLP_LogEntry_PrivateData_Location.MotionDetectedType;
}

uint64_t *sub_100129BA4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    int v5 = (uint64_t *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain(v4);
  }

  else
  {
    int v5 = a1;
    uint64_t v6 = a2[1];
    a1[1] = v6;
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v6);
    v11(v8, v9, v10);
  }

  return v5;
}

uint64_t sub_100129C54(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t *sub_100129CA4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v10(v7, v8, v9);
  return a1;
}

uint64_t *sub_100129D24(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[1];
  uint64_t v9 = a1[1];
  a1[1] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24LL))(v11, v12, v13);
  return a1;
}

_OWORD *sub_100129DB0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t *sub_100129E0C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  return a1;
}

uint64_t sub_100129E88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100129E94);
}

uint64_t sub_100129E94(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 24)],  a2,  v8);
  }

uint64_t sub_100129F10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100129F1C);
}

char *sub_100129F1C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 24)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_100129F90(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[2] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void *sub_10012A008(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v12);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    uint64_t v9 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    v10[4] = v11[4];
    *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }

  return a1;
}

uint64_t sub_10012A0C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10012A15C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  uint64_t v7 = a3[8];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(_BYTE *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = v10;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10012A1F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10012A28C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10012A320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012A32C);
}

uint64_t sub_10012A330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012A33C);
}

uint64_t sub_10012A340(uint64_t a1)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_1002C8218;
    v4[2] = &unk_1002C7E68;
    void v4[3] = &unk_1002C8230;
    v4[4] = &unk_1002C7CB8;
    v4[5] = &unk_1002C7E68;
    swift_initStructMetadata(a1, 256LL, 6LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void *sub_10012A3D0(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v8);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }

  return a1;
}

uint64_t sub_10012A458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10012A4B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10012A510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10012A56C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10012A5C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012A5D4);
}

uint64_t sub_10012A5D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012A5E4);
}

uint64_t sub_10012A5E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100148D5C(a1, a2, a3, (uint64_t)&unk_1002C7E68);
}

uint64_t sub_10012A5F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012A600);
}

uint64_t sub_10012A604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012A610);
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity.MountedStateType()
{
  return &type metadata for CLP_LogEntry_PrivateData_MotionActivity.MountedStateType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType()
{
  return &type metadata for CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType()
{
  return &type metadata for CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType;
}

uint64_t *sub_10012A644(uint64_t *a1, uint64_t *a2, int *a3)
{
  return sub_100134724(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &qword_100355598);
}

uint64_t sub_10012A658(uint64_t a1, uint64_t a2)
{
  return sub_100134950(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

uint64_t sub_10012A664(uint64_t a1, uint64_t a2, int *a3)
{
  return sub_100134A48(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &qword_100355598);
}

uint64_t sub_10012A678(uint64_t a1, uint64_t a2, int *a3)
{
  return sub_100139840(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &qword_100355598);
}

uint64_t sub_10012A68C(uint64_t a1, uint64_t a2, int *a3)
{
  return sub_100134C64(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &qword_100355598);
}

uint64_t sub_10012A6A0(uint64_t a1, uint64_t a2, int *a3)
{
  return sub_100139B6C(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &qword_100355598);
}

uint64_t sub_10012A6B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012A6C0);
}

uint64_t sub_10012A6C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100139E78(a1, a2, a3, &qword_100355598);
}

uint64_t sub_10012A6CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012A6D8);
}

uint64_t sub_10012A6D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100139F30(a1, a2, a3, a4, &qword_100355598);
}

void sub_10012A6E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

char *sub_10012A6F8(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v18 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v18);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = a3[6];
    a1[a3[5]] = a2[a3[5]];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    *(void *)uint64_t v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = a3[7];
    uint64_t v13 = &a1[v12];
    uint64_t v14 = &a2[v12];
    uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    uint64_t v16 = *((void *)v15 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1LL, v15))
    {
      uint64_t v17 = sub_100003A0C(&qword_100355538);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
    }

    else
    {
      v8(v13, v14, v7);
      uint64_t v19 = v15[5];
      uint64_t v20 = &v13[v19];
      uint64_t v21 = &v14[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v15[6];
      uint64_t v23 = &v13[v22];
      uint64_t v24 = &v14[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      uint64_t v25 = v15[7];
      char v26 = &v13[v25];
      uint64_t v27 = &v14[v25];
      *(void *)char v26 = *(void *)v27;
      v26[8] = v27[8];
      (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0LL, 1LL, v15);
    }

    a1[a3[8]] = a2[a3[8]];
  }

  return a1;
}

uint64_t sub_10012A894(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v8(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 28);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL))(v5, 1LL, v6);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v5, v4);
  }
  return result;
}

uint64_t sub_10012A934(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100003A0C(&qword_100355538);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v14[6];
    uint64_t v21 = &v12[v20];
    uint64_t v22 = &v13[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = v14[7];
    uint64_t v24 = &v12[v23];
    uint64_t v25 = &v13[v23];
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_10012AAA4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v46 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 24);
  v7(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  char v11 = *(_BYTE *)(v10 + 8);
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = v11;
  uint64_t v47 = a3;
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v16 = *((void *)v15 - 1);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, int *))(v16 + 48);
  int v18 = v17(v13, 1LL, v15);
  int v19 = v17(v14, 1LL, v15);
  if (!v18)
  {
    if (!v19)
    {
      v7((uint64_t)v13, (uint64_t)v14, v6);
      uint64_t v34 = v15[5];
      uint64_t v35 = &v13[v34];
      int v36 = &v14[v34];
      char v37 = v36[8];
      *(void *)uint64_t v35 = *(void *)v36;
      v35[8] = v37;
      uint64_t v38 = v15[6];
      uint64_t v39 = &v13[v38];
      uint64_t v40 = &v14[v38];
      char v41 = v40[8];
      *(void *)uint64_t v39 = *(void *)v40;
      v39[8] = v41;
      uint64_t v42 = v15[7];
      uint64_t v43 = &v13[v42];
      uint64_t v44 = &v14[v42];
      char v45 = v44[8];
      *(void *)uint64_t v43 = *(void *)v44;
      v43[8] = v45;
      goto LABEL_7;
    }

    sub_100004090((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  if (v19)
  {
LABEL_6:
    uint64_t v32 = sub_100003A0C(&qword_100355538);
    memcpy(v13, v14, *(void *)(*(void *)(v32 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v13, v14, v6);
  uint64_t v20 = v15[5];
  uint64_t v21 = &v13[v20];
  uint64_t v22 = &v14[v20];
  char v23 = v22[8];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v23;
  uint64_t v24 = v15[6];
  uint64_t v25 = &v13[v24];
  char v26 = &v14[v24];
  char v27 = v26[8];
  *(void *)uint64_t v25 = *(void *)v26;
  v25[8] = v27;
  uint64_t v28 = v15[7];
  uint64_t v29 = &v13[v28];
  uint64_t v30 = &v14[v28];
  char v31 = v30[8];
  *(void *)uint64_t v29 = *(void *)v30;
  v29[8] = v31;
  (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0LL, 1LL, v15);
LABEL_7:
  *(_BYTE *)(a1 + v47[8]) = *(_BYTE *)(a2 + v47[8]);
  return a1;
}

uint64_t sub_10012ACC8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100003A0C(&qword_100355538);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    int v18 = &v12[v17];
    int v19 = &v13[v17];
    *(void *)int v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v14[6];
    uint64_t v21 = &v12[v20];
    uint64_t v22 = &v13[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = v14[7];
    uint64_t v24 = &v12[v23];
    uint64_t v25 = &v13[v23];
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_10012AE38(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v39 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 40);
  v7(a1, a2, v6);
  uint64_t v8 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v40 = a3;
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, int *))(v15 + 48);
  int v17 = v16(v12, 1LL, v14);
  int v18 = v16(v13, 1LL, v14);
  if (!v17)
  {
    if (!v18)
    {
      v7((uint64_t)v12, (uint64_t)v13, v6);
      uint64_t v30 = v14[5];
      char v31 = &v12[v30];
      uint64_t v32 = &v13[v30];
      *(void *)char v31 = *(void *)v32;
      v31[8] = v32[8];
      uint64_t v33 = v14[6];
      uint64_t v34 = &v12[v33];
      uint64_t v35 = &v13[v33];
      *(void *)uint64_t v34 = *(void *)v35;
      v34[8] = v35[8];
      uint64_t v36 = v14[7];
      char v37 = &v12[v36];
      uint64_t v38 = &v13[v36];
      *(void *)char v37 = *(void *)v38;
      v37[8] = v38[8];
      goto LABEL_7;
    }

    sub_100004090((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  if (v18)
  {
LABEL_6:
    uint64_t v28 = sub_100003A0C(&qword_100355538);
    memcpy(v12, v13, *(void *)(*(void *)(v28 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v12, v13, v6);
  uint64_t v19 = v14[5];
  uint64_t v20 = &v12[v19];
  uint64_t v21 = &v13[v19];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = v14[6];
  uint64_t v23 = &v12[v22];
  uint64_t v24 = &v13[v22];
  *(void *)uint64_t v23 = *(void *)v24;
  v23[8] = v24[8];
  uint64_t v25 = v14[7];
  char v26 = &v12[v25];
  char v27 = &v13[v25];
  *(void *)char v26 = *(void *)v27;
  v26[8] = v27[8];
  (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0LL, 1LL, v14);
LABEL_7:
  *(_BYTE *)(a1 + v40[8]) = *(_BYTE *)(a2 + v40[8]);
  return a1;
}

uint64_t sub_10012B058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012B064);
}

uint64_t sub_10012B064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  if ((_DWORD)a2 == 183)
  {
    else {
      int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    }
    unsigned int v10 = v9 - 72;
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v11 = sub_100003A0C(&qword_100355538);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))( a1 + *(int *)(a3 + 28),  a2,  v11);
  }

uint64_t sub_10012B114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012B120);
}

uint64_t sub_10012B120(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    if (a3 == 183)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 72;
      return result;
    }

    uint64_t v10 = sub_100003A0C(&qword_100355538);
    uint64_t v12 = a1 + *(int *)(a4 + 28);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

void sub_10012B1C4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    v6[1] = &unk_1002C8358;
    v6[2] = "\t";
    sub_1000119EC( 319LL,  (unint64_t *)&unk_100356B40,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v5 <= 0x3F)
    {
      v6[3] = *(void *)(v4 - 8) + 64LL;
      void v6[4] = &unk_1002C8358;
      swift_initStructMetadata(a1, 256LL, 5LL, v6, a1 + 16);
    }
  }

uint64_t *sub_10012B26C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    uint64_t v13 = *((void *)v12 - 1);
    uint64_t v52 = *(unsigned int (**)(char *, uint64_t, int *))(v13 + 48);
    if (v52(v11, 1LL, v12))
    {
      uint64_t v14 = sub_100003A0C(&qword_100355538);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      uint64_t v16 = v12[5];
      int v17 = &v10[v16];
      int v18 = &v11[v16];
      *(void *)int v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
    }

    uint64_t v25 = a3[6];
    uint64_t v26 = a3[7];
    char v27 = (char *)a1 + v25;
    uint64_t v28 = (char *)a2 + v25;
    *(_DWORD *)char v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    uint64_t v29 = (char *)a1 + v26;
    uint64_t v30 = (char *)a2 + v26;
    char v31 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0LL);
    uint64_t v32 = *((void *)v31 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v32 + 48))(v30, 1LL, v31))
    {
      uint64_t v33 = sub_100003A0C(&qword_1003555A0);
      memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64LL));
    }

    else
    {
      uint64_t v51 = v13;
      v8((uint64_t *)v29, (uint64_t *)v30, v7);
      v29[v31[5]] = v30[v31[5]];
      uint64_t v34 = v31[6];
      uint64_t v35 = &v29[v34];
      uint64_t v36 = &v30[v34];
      v35[8] = v36[8];
      *(void *)uint64_t v35 = *(void *)v36;
      uint64_t v37 = v31[7];
      uint64_t v38 = &v29[v37];
      uint64_t v39 = &v30[v37];
      if (v52(&v30[v37], 1LL, v12))
      {
        uint64_t v40 = sub_100003A0C(&qword_100355538);
        memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64LL));
      }

      else
      {
        v8((uint64_t *)v38, (uint64_t *)v39, v7);
        uint64_t v41 = v12[5];
        uint64_t v42 = &v38[v41];
        uint64_t v43 = &v39[v41];
        *(void *)uint64_t v42 = *(void *)v43;
        v42[8] = v43[8];
        uint64_t v44 = v12[6];
        char v45 = &v38[v44];
        uint64_t v46 = &v39[v44];
        *(void *)char v45 = *(void *)v46;
        v45[8] = v46[8];
        uint64_t v47 = v12[7];
        uint64_t v48 = &v38[v47];
        int v49 = &v39[v47];
        *(void *)uint64_t v48 = *(void *)v49;
        v48[8] = v49[8];
        (*(void (**)(char *, void, uint64_t, int *))(v51 + 56))(v38, 0LL, 1LL, v12);
      }

      v29[v31[8]] = v30[v31[8]];
      (*(void (**)(char *, void, uint64_t, int *))(v32 + 56))(v29, 0LL, 1LL, v31);
    }
  }

  return a1;
}

uint64_t sub_10012B57C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v12(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL);
  if (!v7(v5, 1LL, v6)) {
    v12(v5, v4);
  }
  uint64_t v8 = a1 + *(int *)(a2 + 28);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9);
  if (!(_DWORD)result)
  {
    v12(v8, v4);
    uint64_t v11 = v8 + *(int *)(v9 + 28);
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v11, 1LL, v6);
    if (!(_DWORD)result) {
      return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v4);
    }
  }

  return result;
}

uint64_t sub_10012B698(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  char v50 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  if (v50(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    int v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)int v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  char v27 = (char *)(a1 + v24);
  uint64_t v28 = (char *)(a2 + v24);
  uint64_t v29 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0LL);
  uint64_t v30 = *((void *)v29 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v30 + 48))(v28, 1LL, v29))
  {
    uint64_t v31 = sub_100003A0C(&qword_1003555A0);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64LL));
  }

  else
  {
    uint64_t v49 = v12;
    v7((uint64_t)v27, (uint64_t)v28, v6);
    v27[v29[5]] = v28[v29[5]];
    uint64_t v32 = v29[6];
    uint64_t v33 = &v27[v32];
    uint64_t v34 = &v28[v32];
    v33[8] = v34[8];
    *(void *)uint64_t v33 = *(void *)v34;
    uint64_t v35 = v29[7];
    uint64_t v36 = &v27[v35];
    uint64_t v37 = &v28[v35];
    if (v50(&v28[v35], 1LL, v11))
    {
      uint64_t v38 = sub_100003A0C(&qword_100355538);
      memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64LL));
    }

    else
    {
      v7((uint64_t)v36, (uint64_t)v37, v6);
      uint64_t v39 = v11[5];
      uint64_t v40 = &v36[v39];
      uint64_t v41 = &v37[v39];
      *(void *)uint64_t v40 = *(void *)v41;
      v40[8] = v41[8];
      uint64_t v42 = v11[6];
      uint64_t v43 = &v36[v42];
      uint64_t v44 = &v37[v42];
      *(void *)uint64_t v43 = *(void *)v44;
      v43[8] = v44[8];
      uint64_t v45 = v11[7];
      uint64_t v46 = &v36[v45];
      uint64_t v47 = &v37[v45];
      *(void *)uint64_t v46 = *(void *)v47;
      v46[8] = v47[8];
      (*(void (**)(char *, void, uint64_t, int *))(v49 + 56))(v36, 0LL, 1LL, v11);
    }

    v27[v29[8]] = v28[v29[8]];
    (*(void (**)(char *, void, uint64_t, int *))(v30 + 56))(v27, 0LL, 1LL, v29);
  }

  return a1;
}

uint64_t sub_10012B97C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v111 = *(void *)(v6 - 8);
  uint64_t v110 = *(void (**)(uint64_t, uint64_t, uint64_t))(v111 + 24);
  v110(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(void))(v11 + 48);
  int v13 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v8, 1LL, v10);
  int v14 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v9, 1LL, v10);
  uint64_t v109 = v11;
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v111 + 16))(v8, v9, v6);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      char v18 = v17[8];
      *(void *)uint64_t v16 = *(void *)v17;
      v16[8] = v18;
      uint64_t v19 = v10[6];
      uint64_t v20 = &v8[v19];
      uint64_t v21 = &v9[v19];
      char v22 = v21[8];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v22;
      uint64_t v23 = v10[7];
      uint64_t v24 = &v8[v23];
      uint64_t v25 = &v9[v23];
      char v26 = v25[8];
      *(void *)uint64_t v24 = *(void *)v25;
      v24[8] = v26;
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    sub_100004090((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v27 = sub_100003A0C(&qword_100355538);
    memcpy(v8, v9, *(void *)(*(void *)(v27 - 8) + 64LL));
    goto LABEL_7;
  }

  v110((uint64_t)v8, (uint64_t)v9, v6);
  uint64_t v49 = v10[5];
  char v50 = &v8[v49];
  uint64_t v51 = &v9[v49];
  char v52 = v51[8];
  *(void *)char v50 = *(void *)v51;
  v50[8] = v52;
  uint64_t v53 = v10[6];
  int v54 = &v8[v53];
  uint64_t v55 = &v9[v53];
  char v56 = v55[8];
  *(void *)int v54 = *(void *)v55;
  v54[8] = v56;
  uint64_t v57 = v10[7];
  uint64_t v58 = &v8[v57];
  int v59 = &v9[v57];
  char v60 = v59[8];
  *(void *)uint64_t v58 = *(void *)v59;
  v58[8] = v60;
LABEL_7:
  uint64_t v28 = a3[6];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = (int *)(a2 + v28);
  int v31 = *v30;
  *(_BYTE *)(v29 + 4) = *((_BYTE *)v30 + 4);
  *(_DWORD *)uint64_t v29 = v31;
  uint64_t v32 = a3[7];
  uint64_t v33 = (_BYTE *)(a1 + v32);
  uint64_t v34 = (_BYTE *)(a2 + v32);
  uint64_t v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0LL);
  uint64_t v36 = *((void *)v35 - 1);
  uint64_t v37 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v36 + 48);
  int v38 = v37(v33, 1LL, v35);
  int v39 = v37(v34, 1LL, v35);
  if (!v38)
  {
    if (v39)
    {
      sub_100004090((uint64_t)v33, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
      goto LABEL_13;
    }

    v110((uint64_t)v33, (uint64_t)v34, v6);
    v33[v35[5]] = v34[v35[5]];
    uint64_t v61 = v35[6];
    uint64_t v62 = &v33[v61];
    char v63 = &v34[v61];
    char v64 = v63[8];
    *(void *)uint64_t v62 = *(void *)v63;
    v62[8] = v64;
    uint64_t v65 = v35[7];
    uint64_t v66 = &v34[v65];
    uint64_t v108 = (uint64_t)&v33[v65];
    int v67 = v12();
    int v68 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v66, 1LL, v10);
    if (v67)
    {
      if (!v68)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v111 + 16))(v108, v66, v6);
        uint64_t v83 = v10[5];
        uint64_t v84 = v108 + v83;
        uint64_t v85 = &v66[v83];
        char v86 = v85[8];
        *(void *)uint64_t v84 = *(void *)v85;
        *(_BYTE *)(v84 + 8) = v86;
        uint64_t v87 = v10[6];
        uint64_t v88 = v108 + v87;
        uint64_t v89 = &v66[v87];
        char v90 = v89[8];
        *(void *)uint64_t v88 = *(void *)v89;
        *(_BYTE *)(v88 + 8) = v90;
        uint64_t v91 = v10[7];
        uint64_t v92 = v108 + v91;
        uint64_t v93 = &v66[v91];
        char v94 = v93[8];
        *(void *)uint64_t v92 = *(void *)v93;
        *(_BYTE *)(v92 + 8) = v94;
        (*(void (**)(uint64_t, void, uint64_t, int *))(v109 + 56))(v108, 0LL, 1LL, v10);
        goto LABEL_25;
      }

      size_t v69 = *(void *)(*(void *)(sub_100003A0C(&qword_100355538) - 8) + 64LL);
      uint64_t v70 = (void *)v108;
    }

    else
    {
      if (!v68)
      {
        v110(v108, (uint64_t)v66, v6);
        uint64_t v95 = v10[5];
        uint64_t v96 = v108 + v95;
        uint64_t v97 = &v66[v95];
        char v98 = v97[8];
        *(void *)uint64_t v96 = *(void *)v97;
        *(_BYTE *)(v96 + 8) = v98;
        uint64_t v99 = v10[6];
        uint64_t v100 = v108 + v99;
        uint64_t v101 = &v66[v99];
        char v102 = v101[8];
        *(void *)uint64_t v100 = *(void *)v101;
        *(_BYTE *)(v100 + 8) = v102;
        uint64_t v103 = v10[7];
        uint64_t v104 = v108 + v103;
        uint64_t v105 = &v66[v103];
        char v106 = v105[8];
        *(void *)uint64_t v104 = *(void *)v105;
        *(_BYTE *)(v104 + 8) = v106;
        goto LABEL_25;
      }

      sub_100004090(v108, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      size_t v69 = *(void *)(*(void *)(sub_100003A0C(&qword_100355538) - 8) + 64LL);
      uint64_t v70 = (void *)v108;
    }

    memcpy(v70, v66, v69);
LABEL_25:
    v33[v35[8]] = v34[v35[8]];
    return a1;
  }

  if (v39)
  {
LABEL_13:
    uint64_t v48 = sub_100003A0C(&qword_1003555A0);
    memcpy(v33, v34, *(void *)(*(void *)(v48 - 8) + 64LL));
    return a1;
  }

  uint64_t v112 = *(void (**)(char *, char *, uint64_t))(v111 + 16);
  v112(v33, v34, v6);
  v33[v35[5]] = v34[v35[5]];
  uint64_t v40 = v35[6];
  uint64_t v41 = &v33[v40];
  uint64_t v42 = &v34[v40];
  char v43 = v42[8];
  *(void *)uint64_t v41 = *(void *)v42;
  v41[8] = v43;
  uint64_t v44 = v35[7];
  uint64_t v45 = &v33[v44];
  uint64_t v46 = &v34[v44];
  if (((unsigned int (*)(_BYTE *, uint64_t, int *))v12)(&v34[v44], 1LL, v10))
  {
    uint64_t v47 = sub_100003A0C(&qword_100355538);
    memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64LL));
  }

  else
  {
    v112(v45, v46, v6);
    uint64_t v71 = v10[5];
    uint64_t v72 = &v45[v71];
    uint64_t v73 = &v46[v71];
    char v74 = v73[8];
    *(void *)uint64_t v72 = *(void *)v73;
    v72[8] = v74;
    uint64_t v75 = v10[6];
    uint64_t v76 = &v45[v75];
    uint64_t v77 = &v46[v75];
    char v78 = v77[8];
    *(void *)uint64_t v76 = *(void *)v77;
    v76[8] = v78;
    uint64_t v79 = v10[7];
    uint64_t v80 = &v45[v79];
    uint64_t v81 = &v46[v79];
    char v82 = v81[8];
    *(void *)uint64_t v80 = *(void *)v81;
    v80[8] = v82;
    (*(void (**)(char *, void, uint64_t, int *))(v109 + 56))(v45, 0LL, 1LL, v10);
  }

  v33[v35[8]] = v34[v35[8]];
  (*(void (**)(_BYTE *, void, uint64_t, int *))(v36 + 56))(v33, 0LL, 1LL, v35);
  return a1;
}

uint64_t sub_10012BF18(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  char v50 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  if (v50(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    char v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)char v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    char v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  uint64_t v27 = (char *)(a1 + v24);
  uint64_t v28 = (char *)(a2 + v24);
  uint64_t v29 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0LL);
  uint64_t v30 = *((void *)v29 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v30 + 48))(v28, 1LL, v29))
  {
    uint64_t v31 = sub_100003A0C(&qword_1003555A0);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64LL));
  }

  else
  {
    uint64_t v49 = v12;
    v7((uint64_t)v27, (uint64_t)v28, v6);
    v27[v29[5]] = v28[v29[5]];
    uint64_t v32 = v29[6];
    uint64_t v33 = &v27[v32];
    uint64_t v34 = &v28[v32];
    v33[8] = v34[8];
    *(void *)uint64_t v33 = *(void *)v34;
    uint64_t v35 = v29[7];
    uint64_t v36 = &v27[v35];
    uint64_t v37 = &v28[v35];
    if (v50(&v28[v35], 1LL, v11))
    {
      uint64_t v38 = sub_100003A0C(&qword_100355538);
      memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64LL));
    }

    else
    {
      v7((uint64_t)v36, (uint64_t)v37, v6);
      uint64_t v39 = v11[5];
      uint64_t v40 = &v36[v39];
      uint64_t v41 = &v37[v39];
      *(void *)uint64_t v40 = *(void *)v41;
      v40[8] = v41[8];
      uint64_t v42 = v11[6];
      char v43 = &v36[v42];
      uint64_t v44 = &v37[v42];
      *(void *)char v43 = *(void *)v44;
      v43[8] = v44[8];
      uint64_t v45 = v11[7];
      uint64_t v46 = &v36[v45];
      uint64_t v47 = &v37[v45];
      *(void *)uint64_t v46 = *(void *)v47;
      v46[8] = v47[8];
      (*(void (**)(char *, void, uint64_t, int *))(v49 + 56))(v36, 0LL, 1LL, v11);
    }

    v27[v29[8]] = v28[v29[8]];
    (*(void (**)(char *, void, uint64_t, int *))(v30 + 56))(v27, 0LL, 1LL, v29);
  }

  return a1;
}

uint64_t sub_10012C1FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v93 = *(void *)(v6 - 8);
  uint64_t v92 = *(void (**)(uint64_t, uint64_t, uint64_t))(v93 + 40);
  v92(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(void))(v11 + 48);
  int v13 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v8, 1LL, v10);
  int v14 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v9, 1LL, v10);
  uint64_t v91 = v11;
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v8, v9, v6);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      *(void *)uint64_t v16 = *(void *)v17;
      v16[8] = v17[8];
      uint64_t v18 = v10[6];
      uint64_t v19 = &v8[v18];
      uint64_t v20 = &v9[v18];
      *(void *)uint64_t v19 = *(void *)v20;
      v19[8] = v20[8];
      uint64_t v21 = v10[7];
      char v22 = &v8[v21];
      uint64_t v23 = &v9[v21];
      *(void *)char v22 = *(void *)v23;
      v22[8] = v23[8];
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    sub_100004090((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v24 = sub_100003A0C(&qword_100355538);
    memcpy(v8, v9, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_7;
  }

  v92((uint64_t)v8, (uint64_t)v9, v6);
  uint64_t v44 = v10[5];
  uint64_t v45 = &v8[v44];
  uint64_t v46 = &v9[v44];
  *(void *)uint64_t v45 = *(void *)v46;
  v45[8] = v46[8];
  uint64_t v47 = v10[6];
  uint64_t v48 = &v8[v47];
  uint64_t v49 = &v9[v47];
  *(void *)uint64_t v48 = *(void *)v49;
  v48[8] = v49[8];
  uint64_t v50 = v10[7];
  uint64_t v51 = &v8[v50];
  char v52 = &v9[v50];
  *(void *)uint64_t v51 = *(void *)v52;
  v51[8] = v52[8];
LABEL_7:
  uint64_t v25 = a3[6];
  uint64_t v26 = a3[7];
  uint64_t v27 = a1 + v25;
  uint64_t v28 = a2 + v25;
  *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
  *(_BYTE *)(v27 + 4) = *(_BYTE *)(v28 + 4);
  uint64_t v29 = (_BYTE *)(a1 + v26);
  uint64_t v30 = (_BYTE *)(a2 + v26);
  uint64_t v31 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0LL);
  uint64_t v32 = *((void *)v31 - 1);
  uint64_t v33 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v32 + 48);
  int v34 = v33(v29, 1LL, v31);
  int v35 = v33(v30, 1LL, v31);
  if (!v34)
  {
    if (v35)
    {
      sub_100004090((uint64_t)v29, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
      goto LABEL_13;
    }

    v92((uint64_t)v29, (uint64_t)v30, v6);
    v29[v31[5]] = v30[v31[5]];
    uint64_t v53 = v31[6];
    int v54 = &v29[v53];
    uint64_t v55 = &v30[v53];
    v54[8] = v55[8];
    *(void *)int v54 = *(void *)v55;
    uint64_t v56 = v31[7];
    uint64_t v57 = &v30[v56];
    uint64_t v90 = (uint64_t)&v29[v56];
    int v58 = v12();
    int v59 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v57, 1LL, v10);
    if (v58)
    {
      if (!v59)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v93 + 32))(v90, v57, v6);
        uint64_t v71 = v10[5];
        uint64_t v72 = v90 + v71;
        uint64_t v73 = &v57[v71];
        *(void *)uint64_t v72 = *(void *)v73;
        *(_BYTE *)(v72 + 8) = v73[8];
        uint64_t v74 = v10[6];
        uint64_t v75 = v90 + v74;
        uint64_t v76 = &v57[v74];
        *(void *)uint64_t v75 = *(void *)v76;
        *(_BYTE *)(v75 + 8) = v76[8];
        uint64_t v77 = v10[7];
        uint64_t v78 = v90 + v77;
        uint64_t v79 = &v57[v77];
        *(void *)uint64_t v78 = *(void *)v79;
        *(_BYTE *)(v78 + 8) = v79[8];
        (*(void (**)(uint64_t, void, uint64_t, int *))(v91 + 56))(v90, 0LL, 1LL, v10);
        goto LABEL_25;
      }

      size_t v60 = *(void *)(*(void *)(sub_100003A0C(&qword_100355538) - 8) + 64LL);
      uint64_t v61 = (void *)v90;
    }

    else
    {
      if (!v59)
      {
        v92(v90, (uint64_t)v57, v6);
        uint64_t v80 = v10[5];
        uint64_t v81 = v90 + v80;
        char v82 = &v57[v80];
        *(void *)uint64_t v81 = *(void *)v82;
        *(_BYTE *)(v81 + 8) = v82[8];
        uint64_t v83 = v10[6];
        uint64_t v84 = v90 + v83;
        uint64_t v85 = &v57[v83];
        *(void *)uint64_t v84 = *(void *)v85;
        *(_BYTE *)(v84 + 8) = v85[8];
        uint64_t v86 = v10[7];
        uint64_t v87 = v90 + v86;
        uint64_t v88 = &v57[v86];
        *(void *)uint64_t v87 = *(void *)v88;
        *(_BYTE *)(v87 + 8) = v88[8];
        goto LABEL_25;
      }

      sub_100004090(v90, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      size_t v60 = *(void *)(*(void *)(sub_100003A0C(&qword_100355538) - 8) + 64LL);
      uint64_t v61 = (void *)v90;
    }

    memcpy(v61, v57, v60);
LABEL_25:
    v29[v31[8]] = v30[v31[8]];
    return a1;
  }

  if (v35)
  {
LABEL_13:
    uint64_t v43 = sub_100003A0C(&qword_1003555A0);
    memcpy(v29, v30, *(void *)(*(void *)(v43 - 8) + 64LL));
    return a1;
  }

  char v94 = *(void (**)(char *, char *, uint64_t))(v93 + 32);
  v94(v29, v30, v6);
  v29[v31[5]] = v30[v31[5]];
  uint64_t v36 = v31[6];
  uint64_t v37 = &v29[v36];
  uint64_t v38 = &v30[v36];
  v37[8] = v38[8];
  *(void *)uint64_t v37 = *(void *)v38;
  uint64_t v39 = v31[7];
  uint64_t v40 = &v29[v39];
  uint64_t v41 = &v30[v39];
  if (((unsigned int (*)(_BYTE *, uint64_t, int *))v12)(&v30[v39], 1LL, v10))
  {
    uint64_t v42 = sub_100003A0C(&qword_100355538);
    memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64LL));
  }

  else
  {
    v94(v40, v41, v6);
    uint64_t v62 = v10[5];
    char v63 = &v40[v62];
    char v64 = &v41[v62];
    *(void *)char v63 = *(void *)v64;
    v63[8] = v64[8];
    uint64_t v65 = v10[6];
    uint64_t v66 = &v40[v65];
    int v67 = &v41[v65];
    *(void *)uint64_t v66 = *(void *)v67;
    v66[8] = v67[8];
    uint64_t v68 = v10[7];
    size_t v69 = &v40[v68];
    uint64_t v70 = &v41[v68];
    *(void *)size_t v69 = *(void *)v70;
    v69[8] = v70[8];
    (*(void (**)(char *, void, uint64_t, int *))(v91 + 56))(v40, 0LL, 1LL, v10);
  }

  v29[v31[8]] = v30[v31[8]];
  (*(void (**)(_BYTE *, void, uint64_t, int *))(v32 + 56))(v29, 0LL, 1LL, v31);
  return a1;
}

uint64_t sub_10012C794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012C7A0);
}

uint64_t sub_10012C7A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100139E78(a1, a2, a3, &qword_1003555A0);
}

uint64_t sub_10012C7AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012C7B8);
}

uint64_t sub_10012C7B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100139F30(a1, a2, a3, a4, &qword_1003555A0);
}

void sub_10012C7C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void *sub_10012C7D8(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (void *)(v17 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v17);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (void *)((char *)a1 + v8);
    uint64_t v11 = (void *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    int v13 = (void *)((char *)a1 + v9);
    int v14 = (void *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *int v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v16) = *((_BYTE *)a2 + v16);
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v15);
  }

  return a1;
}

uint64_t sub_10012C8A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 20) + 8));
  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 24) + 8));
}

uint64_t sub_10012C8FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  int v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  void *v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  return a1;
}

uint64_t sub_10012C99C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  void *v8 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a3[6];
  int v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  *int v13 = *v14;
  uint64_t v15 = v14[1];
  uint64_t v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10012CA68(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10012CAEC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v12 = v8[1];
  void *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = a3[6];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  uint64_t v18 = v14[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  uint64_t v19 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v19) = *(_BYTE *)(a2 + v19);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10012CB94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012CBA0);
}

uint64_t sub_10012CBA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  int v10 = v9 - 1;
  if (v10 < 0) {
    int v10 = -1;
  }
  return (v10 + 1);
}

uint64_t sub_10012CC2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012CC38);
}

uint64_t sub_10012CC38(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t sub_10012CCB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10012CCD8( a1,  a2,  a3,  (uint64_t)&unk_1002C80F0,  (uint64_t)&unk_1002C83D0,  (uint64_t)&unk_1002C8230,  (uint64_t)&unk_1002C8218);
}

uint64_t sub_10012CCD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v13 <= 0x3F)
  {
    v14[0] = *(void *)(result - 8) + 64LL;
    v14[1] = a4;
    v14[2] = a4;
    v14[3] = a5;
    v14[4] = a6;
    v14[5] = a7;
    swift_initStructMetadata(a1, 256LL, 6LL, v14, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xBE) {
    goto LABEL_17;
  }
  if (a2 + 66 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 66) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 66;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 66;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 66;
    }
  }

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 66 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 66) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xBE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xBD) {
    return ((uint64_t (*)(void))((char *)&loc_10012CE44 + 4 * byte_1002BB141[v4]))();
  }
  *a1 = a2 + 66;
  return ((uint64_t (*)(void))((char *)sub_10012CE78 + 4 * byte_1002BB13C[v4]))();
}

uint64_t sub_10012CE78(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012CE80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10012CE88LL);
  }
  return result;
}

uint64_t sub_10012CE94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10012CE9CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 66;
  return result;
}

uint64_t sub_10012CEA0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012CEA8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType()
{
  return &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType()
{
  return &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode()
{
  return &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode;
}

char *sub_10012CEE4(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v16 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v16);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    int v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    int v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    uint64_t v13 = *((void *)v12 - 1);
    uint64_t v14 = *(unsigned int (**)(char *, uint64_t, int *))(v13 + 48);
    if (v14(v11, 1LL, v12))
    {
      uint64_t v15 = sub_100003A0C(&qword_100355538);
      memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64LL));
    }

    else
    {
      v8(v10, v11, v7);
      uint64_t v17 = v12[5];
      uint64_t v18 = &v10[v17];
      uint64_t v19 = &v11[v17];
      *(void *)uint64_t v18 = *(void *)v19;
      v18[8] = v19[8];
      uint64_t v20 = v12[6];
      uint64_t v21 = &v10[v20];
      char v22 = &v11[v20];
      *(void *)uint64_t v21 = *(void *)v22;
      v21[8] = v22[8];
      uint64_t v23 = v12[7];
      uint64_t v24 = &v10[v23];
      uint64_t v25 = &v11[v23];
      *(void *)uint64_t v24 = *(void *)v25;
      v24[8] = v25[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
    }

    uint64_t v26 = a3[6];
    uint64_t v27 = &a1[v26];
    uint64_t v28 = &a2[v26];
    if (v14(&a2[v26], 1LL, v12))
    {
      uint64_t v29 = sub_100003A0C(&qword_100355538);
      memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64LL));
    }

    else
    {
      v8(v27, v28, v7);
      uint64_t v30 = v12[5];
      uint64_t v31 = &v27[v30];
      uint64_t v32 = &v28[v30];
      *(void *)uint64_t v31 = *(void *)v32;
      v31[8] = v32[8];
      uint64_t v33 = v12[6];
      int v34 = &v27[v33];
      int v35 = &v28[v33];
      *(void *)int v34 = *(void *)v35;
      v34[8] = v35[8];
      uint64_t v36 = v12[7];
      uint64_t v37 = &v27[v36];
      uint64_t v38 = &v28[v36];
      *(void *)uint64_t v37 = *(void *)v38;
      v37[8] = v38[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v27, 0LL, 1LL, v12);
    }

    uint64_t v39 = a3[8];
    a1[a3[7]] = a2[a3[7]];
    uint64_t v40 = &a1[v39];
    uint64_t v41 = &a2[v39];
    if (v14(&a2[v39], 1LL, v12))
    {
      uint64_t v42 = sub_100003A0C(&qword_100355538);
      memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64LL));
    }

    else
    {
      v8(v40, v41, v7);
      uint64_t v43 = v12[5];
      uint64_t v44 = &v40[v43];
      uint64_t v45 = &v41[v43];
      *(void *)uint64_t v44 = *(void *)v45;
      v44[8] = v45[8];
      uint64_t v46 = v12[6];
      uint64_t v47 = &v40[v46];
      uint64_t v48 = &v41[v46];
      *(void *)uint64_t v47 = *(void *)v48;
      v47[8] = v48[8];
      uint64_t v49 = v12[7];
      uint64_t v50 = &v40[v49];
      uint64_t v51 = &v41[v49];
      *(void *)uint64_t v50 = *(void *)v51;
      v50[8] = v51[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v40, 0LL, 1LL, v12);
    }

    uint64_t v52 = a3[9];
    uint64_t v53 = &a1[v52];
    int v54 = &a2[v52];
    uint64_t v55 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL);
    uint64_t v56 = *((void *)v55 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v56 + 48))(v54, 1LL, v55))
    {
      uint64_t v57 = sub_100003A0C(&qword_1003555A8);
      memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64LL));
    }

    else
    {
      v8(v53, v54, v7);
      uint64_t v58 = v55[5];
      int v59 = &v53[v58];
      size_t v60 = &v54[v58];
      uint64_t v61 = *((void *)v60 + 1);
      *(void *)int v59 = *(void *)v60;
      *((void *)v59 + 1) = v61;
      uint64_t v62 = v55[6];
      char v63 = &v53[v62];
      char v64 = &v54[v62];
      uint64_t v65 = *((void *)v64 + 1);
      *(void *)char v63 = *(void *)v64;
      *((void *)v63 + 1) = v65;
      v53[v55[7]] = v54[v55[7]];
      v53[v55[8]] = v54[v55[8]];
      v53[v55[9]] = v54[v55[9]];
      uint64_t v66 = *(void (**)(char *, void, uint64_t, int *))(v56 + 56);
      swift_bridgeObjectRetain(v61);
      swift_bridgeObjectRetain(v65);
      v66(v53, 0LL, 1LL, v55);
    }
  }

  return a1;
}

uint64_t sub_10012D2B0(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v5(a1, v4);
  uint64_t v6 = a1 + a2[5];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  int v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL);
  if (!v8(v6, 1LL, v7)) {
    v5(v6, v4);
  }
  uint64_t v9 = a1 + a2[6];
  if (!v8(v9, 1LL, v7)) {
    v5(v9, v4);
  }
  uint64_t v10 = a1 + a2[8];
  if (!v8(v10, 1LL, v7)) {
    v5(v10, v4);
  }
  uint64_t v11 = a1 + a2[9];
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48LL))(v11, 1LL, v12);
  if (!(_DWORD)result)
  {
    v5(v11, v4);
    swift_bridgeObjectRelease(*(void *)(v11 + *(int *)(v12 + 20) + 8));
    return swift_bridgeObjectRelease(*(void *)(v11 + *(int *)(v12 + 24) + 8));
  }

  return result;
}

uint64_t sub_10012D404(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  if (v13(v10, 1LL, v11))
  {
    uint64_t v14 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v15 = v11[5];
    uint64_t v16 = &v9[v15];
    uint64_t v17 = &v10[v15];
    *(void *)uint64_t v16 = *(void *)v17;
    v16[8] = v17[8];
    uint64_t v18 = v11[6];
    uint64_t v19 = &v9[v18];
    uint64_t v20 = &v10[v18];
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = v11[7];
    char v22 = &v9[v21];
    uint64_t v23 = &v10[v21];
    *(void *)char v22 = *(void *)v23;
    v22[8] = v23[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v24 = a3[6];
  uint64_t v25 = (char *)(a1 + v24);
  uint64_t v26 = (char *)(a2 + v24);
  if (v13((char *)(a2 + v24), 1LL, v11))
  {
    uint64_t v27 = sub_100003A0C(&qword_100355538);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v25, (uint64_t)v26, v6);
    uint64_t v28 = v11[5];
    uint64_t v29 = &v25[v28];
    uint64_t v30 = &v26[v28];
    *(void *)uint64_t v29 = *(void *)v30;
    v29[8] = v30[8];
    uint64_t v31 = v11[6];
    uint64_t v32 = &v25[v31];
    uint64_t v33 = &v26[v31];
    *(void *)uint64_t v32 = *(void *)v33;
    v32[8] = v33[8];
    uint64_t v34 = v11[7];
    int v35 = &v25[v34];
    uint64_t v36 = &v26[v34];
    *(void *)int v35 = *(void *)v36;
    v35[8] = v36[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v25, 0LL, 1LL, v11);
  }

  uint64_t v37 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  uint64_t v38 = (char *)(a1 + v37);
  uint64_t v39 = (char *)(a2 + v37);
  if (v13((char *)(a2 + v37), 1LL, v11))
  {
    uint64_t v40 = sub_100003A0C(&qword_100355538);
    memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v38, (uint64_t)v39, v6);
    uint64_t v41 = v11[5];
    uint64_t v42 = &v38[v41];
    uint64_t v43 = &v39[v41];
    *(void *)uint64_t v42 = *(void *)v43;
    v42[8] = v43[8];
    uint64_t v44 = v11[6];
    uint64_t v45 = &v38[v44];
    uint64_t v46 = &v39[v44];
    *(void *)uint64_t v45 = *(void *)v46;
    v45[8] = v46[8];
    uint64_t v47 = v11[7];
    uint64_t v48 = &v38[v47];
    uint64_t v49 = &v39[v47];
    *(void *)uint64_t v48 = *(void *)v49;
    v48[8] = v49[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v38, 0LL, 1LL, v11);
  }

  uint64_t v50 = a3[9];
  uint64_t v51 = (char *)(a1 + v50);
  uint64_t v52 = (char *)(a2 + v50);
  uint64_t v53 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL);
  uint64_t v54 = *((void *)v53 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v54 + 48))(v52, 1LL, v53))
  {
    uint64_t v55 = sub_100003A0C(&qword_1003555A8);
    memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v51, (uint64_t)v52, v6);
    uint64_t v56 = v53[5];
    uint64_t v57 = &v51[v56];
    uint64_t v58 = &v52[v56];
    uint64_t v59 = *((void *)v58 + 1);
    *(void *)uint64_t v57 = *(void *)v58;
    *((void *)v57 + 1) = v59;
    uint64_t v60 = v53[6];
    uint64_t v61 = &v51[v60];
    uint64_t v62 = &v52[v60];
    uint64_t v63 = *((void *)v62 + 1);
    *(void *)uint64_t v61 = *(void *)v62;
    *((void *)v61 + 1) = v63;
    v51[v53[7]] = v52[v53[7]];
    v51[v53[8]] = v52[v53[8]];
    v51[v53[9]] = v52[v53[9]];
    char v64 = *(void (**)(char *, void, uint64_t, int *))(v54 + 56);
    swift_bridgeObjectRetain(v59);
    swift_bridgeObjectRetain(v63);
    v64(v51, 0LL, 1LL, v53);
  }

  return a1;
}

uint64_t sub_10012D7A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v130 = *(void *)(v6 - 8);
  uint64_t v129 = *(void (**)(uint64_t, uint64_t, uint64_t))(v130 + 24);
  v129(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v130 + 16))(v8, v9, v6);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      char v18 = v17[8];
      *(void *)uint64_t v16 = *(void *)v17;
      v16[8] = v18;
      uint64_t v19 = v10[6];
      uint64_t v20 = &v8[v19];
      uint64_t v21 = &v9[v19];
      char v22 = v21[8];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v22;
      uint64_t v23 = v10[7];
      uint64_t v24 = &v8[v23];
      uint64_t v25 = &v9[v23];
      char v26 = v25[8];
      *(void *)uint64_t v24 = *(void *)v25;
      v24[8] = v26;
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    sub_100004090((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v27 = sub_100003A0C(&qword_100355538);
    memcpy(v8, v9, *(void *)(*(void *)(v27 - 8) + 64LL));
    goto LABEL_7;
  }

  v129((uint64_t)v8, (uint64_t)v9, v6);
  uint64_t v83 = v10[5];
  uint64_t v84 = &v8[v83];
  uint64_t v85 = &v9[v83];
  char v86 = v85[8];
  *(void *)uint64_t v84 = *(void *)v85;
  v84[8] = v86;
  uint64_t v87 = v10[6];
  uint64_t v88 = &v8[v87];
  uint64_t v89 = &v9[v87];
  char v90 = v89[8];
  *(void *)uint64_t v88 = *(void *)v89;
  v88[8] = v90;
  uint64_t v91 = v10[7];
  uint64_t v92 = &v8[v91];
  uint64_t v93 = &v9[v91];
  char v94 = v93[8];
  *(void *)uint64_t v92 = *(void *)v93;
  v92[8] = v94;
LABEL_7:
  uint64_t v28 = a3[6];
  uint64_t v29 = (char *)(a1 + v28);
  uint64_t v30 = (char *)(a2 + v28);
  int v31 = v12((char *)(a1 + v28), 1LL, v10);
  int v32 = v12(v30, 1LL, v10);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v130 + 16))(v29, v30, v6);
      uint64_t v33 = v10[5];
      uint64_t v34 = &v29[v33];
      int v35 = &v30[v33];
      char v36 = v35[8];
      *(void *)uint64_t v34 = *(void *)v35;
      v34[8] = v36;
      uint64_t v37 = v10[6];
      uint64_t v38 = &v29[v37];
      uint64_t v39 = &v30[v37];
      char v40 = v39[8];
      *(void *)uint64_t v38 = *(void *)v39;
      v38[8] = v40;
      uint64_t v41 = v10[7];
      uint64_t v42 = &v29[v41];
      uint64_t v43 = &v30[v41];
      char v44 = v43[8];
      *(void *)uint64_t v42 = *(void *)v43;
      v42[8] = v44;
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v29, 0LL, 1LL, v10);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v32)
  {
    sub_100004090((uint64_t)v29, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_12:
    uint64_t v45 = sub_100003A0C(&qword_100355538);
    memcpy(v29, v30, *(void *)(*(void *)(v45 - 8) + 64LL));
    goto LABEL_13;
  }

  v129((uint64_t)v29, (uint64_t)v30, v6);
  uint64_t v95 = v10[5];
  uint64_t v96 = &v29[v95];
  uint64_t v97 = &v30[v95];
  char v98 = v97[8];
  *(void *)uint64_t v96 = *(void *)v97;
  v96[8] = v98;
  uint64_t v99 = v10[6];
  uint64_t v100 = &v29[v99];
  uint64_t v101 = &v30[v99];
  char v102 = v101[8];
  *(void *)uint64_t v100 = *(void *)v101;
  v100[8] = v102;
  uint64_t v103 = v10[7];
  uint64_t v104 = &v29[v103];
  uint64_t v105 = &v30[v103];
  char v106 = v105[8];
  *(void *)uint64_t v104 = *(void *)v105;
  v104[8] = v106;
LABEL_13:
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  uint64_t v46 = a3[8];
  uint64_t v47 = (char *)(a1 + v46);
  uint64_t v48 = (char *)(a2 + v46);
  int v49 = v12((char *)(a1 + v46), 1LL, v10);
  int v50 = v12(v48, 1LL, v10);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v130 + 16))(v47, v48, v6);
      uint64_t v51 = v10[5];
      uint64_t v52 = &v47[v51];
      uint64_t v53 = &v48[v51];
      char v54 = v53[8];
      *(void *)uint64_t v52 = *(void *)v53;
      v52[8] = v54;
      uint64_t v55 = v10[6];
      uint64_t v56 = &v47[v55];
      uint64_t v57 = &v48[v55];
      char v58 = v57[8];
      *(void *)uint64_t v56 = *(void *)v57;
      v56[8] = v58;
      uint64_t v59 = v10[7];
      uint64_t v60 = &v47[v59];
      uint64_t v61 = &v48[v59];
      char v62 = v61[8];
      *(void *)uint64_t v60 = *(void *)v61;
      v60[8] = v62;
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v47, 0LL, 1LL, v10);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v50)
  {
    sub_100004090((uint64_t)v47, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_18:
    uint64_t v63 = sub_100003A0C(&qword_100355538);
    memcpy(v47, v48, *(void *)(*(void *)(v63 - 8) + 64LL));
    goto LABEL_19;
  }

  v129((uint64_t)v47, (uint64_t)v48, v6);
  uint64_t v107 = v10[5];
  uint64_t v108 = &v47[v107];
  uint64_t v109 = &v48[v107];
  char v110 = v109[8];
  *(void *)uint64_t v108 = *(void *)v109;
  v108[8] = v110;
  uint64_t v111 = v10[6];
  uint64_t v112 = &v47[v111];
  uint64_t v113 = &v48[v111];
  char v114 = v113[8];
  *(void *)uint64_t v112 = *(void *)v113;
  v112[8] = v114;
  uint64_t v115 = v10[7];
  uint64_t v116 = &v47[v115];
  uint64_t v117 = &v48[v115];
  char v118 = v117[8];
  *(void *)uint64_t v116 = *(void *)v117;
  v116[8] = v118;
LABEL_19:
  uint64_t v64 = a3[9];
  uint64_t v65 = (_BYTE *)(a1 + v64);
  uint64_t v66 = (_BYTE *)(a2 + v64);
  int v67 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL);
  uint64_t v68 = *((void *)v67 - 1);
  size_t v69 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v68 + 48);
  int v70 = v69(v65, 1LL, v67);
  int v71 = v69(v66, 1LL, v67);
  if (!v70)
  {
    if (!v71)
    {
      v129((uint64_t)v65, (uint64_t)v66, v6);
      uint64_t v119 = v67[5];
      uint64_t v120 = &v65[v119];
      uint64_t v121 = &v66[v119];
      *uint64_t v120 = *v121;
      uint64_t v122 = v121[1];
      uint64_t v123 = v120[1];
      v120[1] = v122;
      swift_bridgeObjectRetain(v122);
      swift_bridgeObjectRelease(v123);
      uint64_t v124 = v67[6];
      uint64_t v125 = &v65[v124];
      uint64_t v126 = &v66[v124];
      *uint64_t v125 = *v126;
      uint64_t v127 = v126[1];
      uint64_t v128 = v125[1];
      v125[1] = v127;
      swift_bridgeObjectRetain(v127);
      swift_bridgeObjectRelease(v128);
      v65[v67[7]] = v66[v67[7]];
      v65[v67[8]] = v66[v67[8]];
      v65[v67[9]] = v66[v67[9]];
      return a1;
    }

    sub_100004090((uint64_t)v65, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
    goto LABEL_24;
  }

  if (v71)
  {
LABEL_24:
    uint64_t v81 = sub_100003A0C(&qword_1003555A8);
    memcpy(v65, v66, *(void *)(*(void *)(v81 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v130 + 16))(v65, v66, v6);
  uint64_t v72 = v67[5];
  uint64_t v73 = &v65[v72];
  uint64_t v74 = &v66[v72];
  *uint64_t v73 = *v74;
  uint64_t v75 = v74[1];
  v73[1] = v75;
  uint64_t v76 = v67[6];
  uint64_t v77 = &v65[v76];
  uint64_t v78 = &v66[v76];
  *uint64_t v77 = *v78;
  uint64_t v79 = v78[1];
  v77[1] = v79;
  v65[v67[7]] = v66[v67[7]];
  v65[v67[8]] = v66[v67[8]];
  v65[v67[9]] = v66[v67[9]];
  uint64_t v80 = *(void (**)(_BYTE *, void, uint64_t, int *))(v68 + 56);
  swift_bridgeObjectRetain(v75);
  swift_bridgeObjectRetain(v79);
  v80(v65, 0LL, 1LL, v67);
  return a1;
}

uint64_t sub_10012DE10(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  int v13 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  if (v13(v10, 1LL, v11))
  {
    uint64_t v14 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v15 = v11[5];
    uint64_t v16 = &v9[v15];
    uint64_t v17 = &v10[v15];
    *(void *)uint64_t v16 = *(void *)v17;
    v16[8] = v17[8];
    uint64_t v18 = v11[6];
    uint64_t v19 = &v9[v18];
    uint64_t v20 = &v10[v18];
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = v11[7];
    char v22 = &v9[v21];
    uint64_t v23 = &v10[v21];
    *(void *)char v22 = *(void *)v23;
    v22[8] = v23[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v24 = a3[6];
  uint64_t v25 = (char *)(a1 + v24);
  char v26 = (char *)(a2 + v24);
  if (v13((char *)(a2 + v24), 1LL, v11))
  {
    uint64_t v27 = sub_100003A0C(&qword_100355538);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v25, (uint64_t)v26, v6);
    uint64_t v28 = v11[5];
    uint64_t v29 = &v25[v28];
    uint64_t v30 = &v26[v28];
    *(void *)uint64_t v29 = *(void *)v30;
    v29[8] = v30[8];
    uint64_t v31 = v11[6];
    int v32 = &v25[v31];
    uint64_t v33 = &v26[v31];
    *(void *)int v32 = *(void *)v33;
    v32[8] = v33[8];
    uint64_t v34 = v11[7];
    int v35 = &v25[v34];
    char v36 = &v26[v34];
    *(void *)int v35 = *(void *)v36;
    v35[8] = v36[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v25, 0LL, 1LL, v11);
  }

  uint64_t v37 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  uint64_t v38 = (char *)(a1 + v37);
  uint64_t v39 = (char *)(a2 + v37);
  if (v13((char *)(a2 + v37), 1LL, v11))
  {
    uint64_t v40 = sub_100003A0C(&qword_100355538);
    memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v38, (uint64_t)v39, v6);
    uint64_t v41 = v11[5];
    uint64_t v42 = &v38[v41];
    uint64_t v43 = &v39[v41];
    *(void *)uint64_t v42 = *(void *)v43;
    v42[8] = v43[8];
    uint64_t v44 = v11[6];
    uint64_t v45 = &v38[v44];
    uint64_t v46 = &v39[v44];
    *(void *)uint64_t v45 = *(void *)v46;
    v45[8] = v46[8];
    uint64_t v47 = v11[7];
    uint64_t v48 = &v38[v47];
    int v49 = &v39[v47];
    *(void *)uint64_t v48 = *(void *)v49;
    v48[8] = v49[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v38, 0LL, 1LL, v11);
  }

  uint64_t v50 = a3[9];
  uint64_t v51 = (char *)(a1 + v50);
  uint64_t v52 = (char *)(a2 + v50);
  uint64_t v53 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL);
  uint64_t v54 = *((void *)v53 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v54 + 48))(v52, 1LL, v53))
  {
    uint64_t v55 = sub_100003A0C(&qword_1003555A8);
    memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v51, (uint64_t)v52, v6);
    *(_OWORD *)&v51[v53[5]] = *(_OWORD *)&v52[v53[5]];
    *(_OWORD *)&v51[v53[6]] = *(_OWORD *)&v52[v53[6]];
    v51[v53[7]] = v52[v53[7]];
    v51[v53[8]] = v52[v53[8]];
    v51[v53[9]] = v52[v53[9]];
    (*(void (**)(char *, void, uint64_t, int *))(v54 + 56))(v51, 0LL, 1LL, v53);
  }

  return a1;
}

uint64_t sub_10012E194(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v105 = *(void *)(v6 - 8);
  uint64_t v104 = *(void (**)(uint64_t, uint64_t, uint64_t))(v105 + 40);
  v104(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v105 + 32))(v8, v9, v6);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      *(void *)uint64_t v16 = *(void *)v17;
      v16[8] = v17[8];
      uint64_t v18 = v10[6];
      uint64_t v19 = &v8[v18];
      uint64_t v20 = &v9[v18];
      *(void *)uint64_t v19 = *(void *)v20;
      v19[8] = v20[8];
      uint64_t v21 = v10[7];
      char v22 = &v8[v21];
      uint64_t v23 = &v9[v21];
      *(void *)char v22 = *(void *)v23;
      v22[8] = v23[8];
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    sub_100004090((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v24 = sub_100003A0C(&qword_100355538);
    memcpy(v8, v9, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_7;
  }

  v104((uint64_t)v8, (uint64_t)v9, v6);
  uint64_t v65 = v10[5];
  uint64_t v66 = &v8[v65];
  int v67 = &v9[v65];
  *(void *)uint64_t v66 = *(void *)v67;
  v66[8] = v67[8];
  uint64_t v68 = v10[6];
  size_t v69 = &v8[v68];
  int v70 = &v9[v68];
  *(void *)size_t v69 = *(void *)v70;
  v69[8] = v70[8];
  uint64_t v71 = v10[7];
  uint64_t v72 = &v8[v71];
  uint64_t v73 = &v9[v71];
  *(void *)uint64_t v72 = *(void *)v73;
  v72[8] = v73[8];
LABEL_7:
  uint64_t v25 = a3[6];
  char v26 = (char *)(a1 + v25);
  uint64_t v27 = (char *)(a2 + v25);
  int v28 = v12((char *)(a1 + v25), 1LL, v10);
  int v29 = v12(v27, 1LL, v10);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v105 + 32))(v26, v27, v6);
      uint64_t v30 = v10[5];
      uint64_t v31 = &v26[v30];
      int v32 = &v27[v30];
      *(void *)uint64_t v31 = *(void *)v32;
      v31[8] = v32[8];
      uint64_t v33 = v10[6];
      uint64_t v34 = &v26[v33];
      int v35 = &v27[v33];
      *(void *)uint64_t v34 = *(void *)v35;
      v34[8] = v35[8];
      uint64_t v36 = v10[7];
      uint64_t v37 = &v26[v36];
      uint64_t v38 = &v27[v36];
      *(void *)uint64_t v37 = *(void *)v38;
      v37[8] = v38[8];
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v26, 0LL, 1LL, v10);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v29)
  {
    sub_100004090((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_12:
    uint64_t v39 = sub_100003A0C(&qword_100355538);
    memcpy(v26, v27, *(void *)(*(void *)(v39 - 8) + 64LL));
    goto LABEL_13;
  }

  v104((uint64_t)v26, (uint64_t)v27, v6);
  uint64_t v74 = v10[5];
  uint64_t v75 = &v26[v74];
  uint64_t v76 = &v27[v74];
  *(void *)uint64_t v75 = *(void *)v76;
  v75[8] = v76[8];
  uint64_t v77 = v10[6];
  uint64_t v78 = &v26[v77];
  uint64_t v79 = &v27[v77];
  *(void *)uint64_t v78 = *(void *)v79;
  v78[8] = v79[8];
  uint64_t v80 = v10[7];
  uint64_t v81 = &v26[v80];
  char v82 = &v27[v80];
  *(void *)uint64_t v81 = *(void *)v82;
  v81[8] = v82[8];
LABEL_13:
  uint64_t v40 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  uint64_t v41 = (char *)(a1 + v40);
  uint64_t v42 = (char *)(a2 + v40);
  int v43 = v12((char *)(a1 + v40), 1LL, v10);
  int v44 = v12(v42, 1LL, v10);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(char *, char *, uint64_t))(v105 + 32))(v41, v42, v6);
      uint64_t v45 = v10[5];
      uint64_t v46 = &v41[v45];
      uint64_t v47 = &v42[v45];
      *(void *)uint64_t v46 = *(void *)v47;
      v46[8] = v47[8];
      uint64_t v48 = v10[6];
      int v49 = &v41[v48];
      uint64_t v50 = &v42[v48];
      *(void *)int v49 = *(void *)v50;
      v49[8] = v50[8];
      uint64_t v51 = v10[7];
      uint64_t v52 = &v41[v51];
      uint64_t v53 = &v42[v51];
      *(void *)uint64_t v52 = *(void *)v53;
      v52[8] = v53[8];
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v41, 0LL, 1LL, v10);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v44)
  {
    sub_100004090((uint64_t)v41, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_18:
    uint64_t v54 = sub_100003A0C(&qword_100355538);
    memcpy(v41, v42, *(void *)(*(void *)(v54 - 8) + 64LL));
    goto LABEL_19;
  }

  v104((uint64_t)v41, (uint64_t)v42, v6);
  uint64_t v83 = v10[5];
  uint64_t v84 = &v41[v83];
  uint64_t v85 = &v42[v83];
  *(void *)uint64_t v84 = *(void *)v85;
  v84[8] = v85[8];
  uint64_t v86 = v10[6];
  uint64_t v87 = &v41[v86];
  uint64_t v88 = &v42[v86];
  *(void *)uint64_t v87 = *(void *)v88;
  v87[8] = v88[8];
  uint64_t v89 = v10[7];
  char v90 = &v41[v89];
  uint64_t v91 = &v42[v89];
  *(void *)char v90 = *(void *)v91;
  v90[8] = v91[8];
LABEL_19:
  uint64_t v55 = a3[9];
  uint64_t v56 = (_BYTE *)(a1 + v55);
  uint64_t v57 = (_BYTE *)(a2 + v55);
  char v58 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0LL);
  uint64_t v59 = *((void *)v58 - 1);
  uint64_t v60 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v59 + 48);
  int v61 = v60(v56, 1LL, v58);
  int v62 = v60(v57, 1LL, v58);
  if (!v61)
  {
    if (!v62)
    {
      v104((uint64_t)v56, (uint64_t)v57, v6);
      uint64_t v92 = v58[5];
      uint64_t v93 = &v56[v92];
      char v94 = (uint64_t *)&v57[v92];
      uint64_t v96 = *v94;
      uint64_t v95 = v94[1];
      uint64_t v97 = v93[1];
      *uint64_t v93 = v96;
      v93[1] = v95;
      swift_bridgeObjectRelease(v97);
      uint64_t v98 = v58[6];
      uint64_t v99 = &v56[v98];
      uint64_t v100 = (uint64_t *)&v57[v98];
      uint64_t v102 = *v100;
      uint64_t v101 = v100[1];
      uint64_t v103 = v99[1];
      *uint64_t v99 = v102;
      v99[1] = v101;
      swift_bridgeObjectRelease(v103);
      v56[v58[7]] = v57[v58[7]];
      v56[v58[8]] = v57[v58[8]];
      v56[v58[9]] = v57[v58[9]];
      return a1;
    }

    sub_100004090((uint64_t)v56, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
    goto LABEL_24;
  }

  if (v62)
  {
LABEL_24:
    uint64_t v63 = sub_100003A0C(&qword_1003555A8);
    memcpy(v56, v57, *(void *)(*(void *)(v63 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v105 + 32))(v56, v57, v6);
  *(_OWORD *)&v56[v58[5]] = *(_OWORD *)&v57[v58[5]];
  *(_OWORD *)&v56[v58[6]] = *(_OWORD *)&v57[v58[6]];
  v56[v58[7]] = v57[v58[7]];
  v56[v58[8]] = v57[v58[8]];
  v56[v58[9]] = v57[v58[9]];
  (*(void (**)(_BYTE *, void, uint64_t, int *))(v59 + 56))(v56, 0LL, 1LL, v58);
  return a1;
}

uint64_t sub_10012E7B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012E7BC);
}

uint64_t sub_10012E7BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  uint64_t v9 = sub_100003A0C(&qword_100355538);
  uint64_t v10 = *(void *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    uint64_t v11 = v9;
    uint64_t v12 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }

  if ((_DWORD)a2 != 236)
  {
    uint64_t v11 = sub_100003A0C(&qword_1003555A8);
    uint64_t v10 = *(void *)(v11 - 8);
    uint64_t v12 = a3[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }

  else {
    int v13 = *(unsigned __int8 *)(a1 + a3[7]);
  }
  unsigned int v14 = v13 - 19;
  else {
    return 0LL;
  }
}

uint64_t sub_10012E894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012E8A0);
}

uint64_t sub_10012E8A0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t result = sub_100003A0C(&qword_100355538);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      uint64_t v10 = result;
      uint64_t v15 = a4[5];
    }

    else
    {
      if (a3 == 236)
      {
        *(_BYTE *)(a1 + a4[7]) = a2 + 19;
        return result;
      }

      uint64_t v10 = sub_100003A0C(&qword_1003555A8);
      uint64_t v14 = *(void *)(v10 - 8);
      uint64_t v15 = a4[9];
    }

    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_10012E96C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v8 = *(void *)(v2 - 8) + 64LL;
    sub_1000119EC( 319LL,  (unint64_t *)&unk_100356B40,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v5 <= 0x3F)
    {
      uint64_t v9 = *(void *)(v4 - 8) + 64LL;
      uint64_t v10 = v9;
      uint64_t v11 = &unk_1002C8448;
      uint64_t v12 = v9;
      sub_1000119EC( 319LL,  (unint64_t *)&unk_1003579E0,  type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
      if (v7 <= 0x3F)
      {
        uint64_t v13 = *(void *)(v6 - 8) + 64LL;
        swift_initStructMetadata(a1, 256LL, 6LL, &v8, a1 + 16);
      }
    }
  }

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_WorkoutEvent.EventType( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xEE) {
    goto LABEL_17;
  }
  if (a2 + 18 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 18) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 18;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 18;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 18;
    }
  }

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_WorkoutEvent.EventType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 18 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 18) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xEE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xED) {
    return ((uint64_t (*)(void))((char *)&loc_10012EB14 + 4 * byte_1002BB14B[v4]))();
  }
  *a1 = a2 + 18;
  return ((uint64_t (*)(void))((char *)sub_10012EB48 + 4 * byte_1002BB146[v4]))();
}

uint64_t sub_10012EB48(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012EB50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10012EB58LL);
  }
  return result;
}

uint64_t sub_10012EB64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10012EB6CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 18;
  return result;
}

uint64_t sub_10012EB70(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012EB78(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent.EventType()
{
  return &type metadata for CLP_LogEntry_PrivateData_WorkoutEvent.EventType;
}

uint64_t sub_10012EB94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012EBA0);
}

uint64_t sub_10012EBA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012EBB0);
}

void *sub_10012EBB4(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v36 = *a2;
    *a1 = *a2;
    a1 = (void *)(v36 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v36);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    v9[4] = v10[4];
    *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
    uint64_t v11 = a3[7];
    uint64_t v12 = a3[8];
    uint64_t v13 = (char *)a1 + v11;
    uint64_t v14 = (char *)a2 + v11;
    v13[4] = v14[4];
    *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
    uint64_t v15 = (char *)a1 + v12;
    uint64_t v16 = (char *)a2 + v12;
    *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
    v15[4] = v16[4];
    uint64_t v17 = a3[9];
    uint64_t v18 = a3[10];
    uint64_t v19 = (char *)a1 + v17;
    uint64_t v20 = (char *)a2 + v17;
    *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
    v19[4] = v20[4];
    uint64_t v21 = (char *)a1 + v18;
    char v22 = (char *)a2 + v18;
    LODWORD(v19) = *(_DWORD *)v22;
    v21[4] = v22[4];
    *(_DWORD *)uint64_t v21 = (_DWORD)v19;
    uint64_t v23 = a3[11];
    uint64_t v24 = a3[12];
    uint64_t v25 = (char *)a1 + v23;
    char v26 = (char *)a2 + v23;
    *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
    v25[4] = v26[4];
    uint64_t v27 = (char *)a1 + v24;
    int v28 = (char *)a2 + v24;
    *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    uint64_t v29 = a3[13];
    uint64_t v30 = a3[14];
    uint64_t v31 = (char *)a1 + v29;
    int v32 = (char *)a2 + v29;
    *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
    v31[4] = v32[4];
    *((_BYTE *)a1 + v30) = *((_BYTE *)a2 + v30);
    uint64_t v33 = a3[15];
    uint64_t v34 = (char *)a1 + v33;
    int v35 = (char *)a2 + v33;
    *(_DWORD *)uint64_t v34 = *(_DWORD *)v35;
    v34[4] = v35[4];
  }

  return a1;
}

uint64_t sub_10012ED30(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  uint64_t v16 = a3[9];
  uint64_t v17 = a3[10];
  uint64_t v18 = a1 + v16;
  uint64_t v19 = a2 + v16;
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  uint64_t v20 = a1 + v17;
  uint64_t v21 = a2 + v17;
  LODWORD(v18) = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  *(_DWORD *)uint64_t v20 = v18;
  uint64_t v22 = a3[11];
  uint64_t v23 = a3[12];
  uint64_t v24 = a1 + v22;
  uint64_t v25 = a2 + v22;
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = *(_BYTE *)(v25 + 4);
  uint64_t v26 = a1 + v23;
  uint64_t v27 = a2 + v23;
  *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
  *(_BYTE *)(v26 + 4) = *(_BYTE *)(v27 + 4);
  uint64_t v28 = a3[13];
  uint64_t v29 = a3[14];
  uint64_t v30 = a1 + v28;
  uint64_t v31 = a2 + v28;
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  *(_BYTE *)(a1 + v29) = *(_BYTE *)(a2 + v29);
  uint64_t v32 = a3[15];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  return a1;
}

uint64_t sub_10012EE80(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(_BYTE *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = v10;
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(_BYTE *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v14;
  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  char v18 = *(_BYTE *)(v17 + 4);
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = v18;
  uint64_t v19 = a3[9];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  char v22 = *(_BYTE *)(v21 + 4);
  *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = v22;
  uint64_t v23 = a3[10];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  char v26 = *(_BYTE *)(v25 + 4);
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = v26;
  uint64_t v27 = a3[11];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = (int *)(a2 + v27);
  int v30 = *v29;
  *(_BYTE *)(v28 + 4) = *((_BYTE *)v29 + 4);
  *(_DWORD *)uint64_t v28 = v30;
  uint64_t v31 = a3[12];
  uint64_t v32 = a1 + v31;
  uint64_t v33 = (int *)(a2 + v31);
  int v34 = *v33;
  *(_BYTE *)(v32 + 4) = *((_BYTE *)v33 + 4);
  *(_DWORD *)uint64_t v32 = v34;
  uint64_t v35 = a3[13];
  uint64_t v36 = a1 + v35;
  uint64_t v37 = (int *)(a2 + v35);
  int v38 = *v37;
  *(_BYTE *)(v36 + 4) = *((_BYTE *)v37 + 4);
  *(_DWORD *)uint64_t v36 = v38;
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  uint64_t v39 = a3[15];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  LOBYTE(v38) = *(_BYTE *)(v41 + 4);
  *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
  *(_BYTE *)(v40 + 4) = v38;
  return a1;
}

uint64_t sub_10012EFE4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  uint64_t v16 = a3[9];
  uint64_t v17 = a3[10];
  uint64_t v18 = a1 + v16;
  uint64_t v19 = a2 + v16;
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  uint64_t v20 = a1 + v17;
  uint64_t v21 = a2 + v17;
  LODWORD(v18) = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  *(_DWORD *)uint64_t v20 = v18;
  uint64_t v22 = a3[11];
  uint64_t v23 = a3[12];
  uint64_t v24 = a1 + v22;
  uint64_t v25 = a2 + v22;
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = *(_BYTE *)(v25 + 4);
  uint64_t v26 = a1 + v23;
  uint64_t v27 = a2 + v23;
  *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
  *(_BYTE *)(v26 + 4) = *(_BYTE *)(v27 + 4);
  uint64_t v28 = a3[13];
  uint64_t v29 = a3[14];
  uint64_t v30 = a1 + v28;
  uint64_t v31 = a2 + v28;
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  *(_BYTE *)(a1 + v29) = *(_BYTE *)(a2 + v29);
  uint64_t v32 = a3[15];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  return a1;
}

uint64_t sub_10012F134(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  uint64_t v16 = a3[9];
  uint64_t v17 = a3[10];
  uint64_t v18 = a1 + v16;
  uint64_t v19 = a2 + v16;
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  uint64_t v20 = a1 + v17;
  uint64_t v21 = a2 + v17;
  LODWORD(v18) = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  *(_DWORD *)uint64_t v20 = v18;
  uint64_t v22 = a3[11];
  uint64_t v23 = a3[12];
  uint64_t v24 = a1 + v22;
  uint64_t v25 = a2 + v22;
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = *(_BYTE *)(v25 + 4);
  uint64_t v26 = a1 + v23;
  uint64_t v27 = a2 + v23;
  *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
  *(_BYTE *)(v26 + 4) = *(_BYTE *)(v27 + 4);
  uint64_t v28 = a3[13];
  uint64_t v29 = a3[14];
  uint64_t v30 = a1 + v28;
  uint64_t v31 = a2 + v28;
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  *(_BYTE *)(a1 + v29) = *(_BYTE *)(a2 + v29);
  uint64_t v32 = a3[15];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  return a1;
}

uint64_t sub_10012F284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012F290);
}

uint64_t sub_10012F290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  else {
    int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  }
  unsigned int v10 = v9 - 3;
  else {
    return 0LL;
  }
}

uint64_t sub_10012F314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012F320);
}

uint64_t sub_10012F320(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 3;
  return result;
}

uint64_t sub_10012F398(uint64_t a1)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_1002C8218;
    v4[2] = &unk_1002C7CB8;
    void v4[3] = &unk_1002C7CB8;
    v4[4] = &unk_1002C7CB8;
    v4[5] = &unk_1002C7CB8;
    void v4[6] = &unk_1002C7CB8;
    v4[7] = &unk_1002C7CB8;
    v4[8] = &unk_1002C7CB8;
    v4[9] = &unk_1002C7CB8;
    v4[10] = &unk_1002C84C8;
    v4[11] = &unk_1002C7CB8;
    swift_initStructMetadata(a1, 256LL, 12LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType()
{
  return &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType()
{
  return &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType;
}

uint64_t *sub_10012F44C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    unsigned int v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1LL, v12))
    {
      uint64_t v14 = sub_100003A0C(&qword_100355538);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
    }

    uint64_t v25 = a3[6];
    uint64_t v26 = a3[7];
    uint64_t v27 = (char *)a1 + v25;
    uint64_t v28 = (char *)a2 + v25;
    *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    uint64_t v29 = (char *)a1 + v26;
    uint64_t v30 = (char *)a2 + v26;
    uint64_t v31 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL);
    uint64_t v32 = *((void *)v31 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v32 + 48))(v30, 1LL, v31))
    {
      uint64_t v33 = sub_100003A0C(&qword_1003555B8);
      memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64LL));
    }

    else
    {
      v8((uint64_t *)v29, (uint64_t *)v30, v7);
      v29[v31[5]] = v30[v31[5]];
      uint64_t v34 = v31[6];
      uint64_t v35 = &v29[v34];
      uint64_t v36 = &v30[v34];
      v35[4] = v36[4];
      *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
      uint64_t v37 = v31[7];
      int v38 = &v29[v37];
      uint64_t v39 = &v30[v37];
      v38[4] = v39[4];
      *(_DWORD *)int v38 = *(_DWORD *)v39;
      uint64_t v40 = v31[8];
      uint64_t v41 = &v29[v40];
      uint64_t v42 = &v30[v40];
      v41[4] = v42[4];
      *(_DWORD *)uint64_t v41 = *(_DWORD *)v42;
      uint64_t v43 = v31[9];
      int v44 = &v29[v43];
      uint64_t v45 = &v30[v43];
      v44[4] = v45[4];
      *(_DWORD *)int v44 = *(_DWORD *)v45;
      uint64_t v46 = v31[10];
      uint64_t v47 = &v29[v46];
      uint64_t v48 = &v30[v46];
      v47[4] = v48[4];
      *(_DWORD *)uint64_t v47 = *(_DWORD *)v48;
      uint64_t v49 = v31[11];
      uint64_t v50 = &v29[v49];
      uint64_t v51 = &v30[v49];
      *(_DWORD *)uint64_t v50 = *(_DWORD *)v51;
      v50[4] = v51[4];
      uint64_t v52 = v31[12];
      uint64_t v53 = &v29[v52];
      uint64_t v54 = &v30[v52];
      *(_DWORD *)uint64_t v53 = *(_DWORD *)v54;
      v53[4] = v54[4];
      uint64_t v55 = v31[13];
      uint64_t v56 = &v29[v55];
      uint64_t v57 = &v30[v55];
      *(_DWORD *)uint64_t v56 = *(_DWORD *)v57;
      v56[4] = v57[4];
      v29[v31[14]] = v30[v31[14]];
      uint64_t v58 = v31[15];
      uint64_t v59 = &v29[v58];
      uint64_t v60 = &v30[v58];
      *(_DWORD *)uint64_t v59 = *(_DWORD *)v60;
      v59[4] = v60[4];
      (*(void (**)(char *, void, uint64_t, int *))(v32 + 56))(v29, 0LL, 1LL, v31);
    }
  }

  return a1;
}

uint64_t sub_10012F764(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  unsigned int v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v10(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v7 = a1 + *(int *)(a2 + 28);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))(v7, 1LL, v8);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v7, v4);
  }
  return result;
}

uint64_t sub_10012F840(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  unsigned int v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  uint64_t v27 = (char *)(a1 + v24);
  uint64_t v28 = (char *)(a2 + v24);
  uint64_t v29 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL);
  uint64_t v30 = *((void *)v29 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v30 + 48))(v28, 1LL, v29))
  {
    uint64_t v31 = sub_100003A0C(&qword_1003555B8);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v27, (uint64_t)v28, v6);
    v27[v29[5]] = v28[v29[5]];
    uint64_t v32 = v29[6];
    uint64_t v33 = &v27[v32];
    uint64_t v34 = &v28[v32];
    v33[4] = v34[4];
    *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
    uint64_t v35 = v29[7];
    uint64_t v36 = &v27[v35];
    uint64_t v37 = &v28[v35];
    v36[4] = v37[4];
    *(_DWORD *)uint64_t v36 = *(_DWORD *)v37;
    uint64_t v38 = v29[8];
    uint64_t v39 = &v27[v38];
    uint64_t v40 = &v28[v38];
    v39[4] = v40[4];
    *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
    uint64_t v41 = v29[9];
    uint64_t v42 = &v27[v41];
    uint64_t v43 = &v28[v41];
    v42[4] = v43[4];
    *(_DWORD *)uint64_t v42 = *(_DWORD *)v43;
    uint64_t v44 = v29[10];
    uint64_t v45 = &v27[v44];
    uint64_t v46 = &v28[v44];
    v45[4] = v46[4];
    *(_DWORD *)uint64_t v45 = *(_DWORD *)v46;
    uint64_t v47 = v29[11];
    uint64_t v48 = &v27[v47];
    uint64_t v49 = &v28[v47];
    *(_DWORD *)uint64_t v48 = *(_DWORD *)v49;
    v48[4] = v49[4];
    uint64_t v50 = v29[12];
    uint64_t v51 = &v27[v50];
    uint64_t v52 = &v28[v50];
    *(_DWORD *)uint64_t v51 = *(_DWORD *)v52;
    v51[4] = v52[4];
    uint64_t v53 = v29[13];
    uint64_t v54 = &v27[v53];
    uint64_t v55 = &v28[v53];
    *(_DWORD *)uint64_t v54 = *(_DWORD *)v55;
    v54[4] = v55[4];
    v27[v29[14]] = v28[v29[14]];
    uint64_t v56 = v29[15];
    uint64_t v57 = &v27[v56];
    uint64_t v58 = &v28[v56];
    *(_DWORD *)uint64_t v57 = *(_DWORD *)v58;
    v57[4] = v58[4];
    (*(void (**)(char *, void, uint64_t, int *))(v30 + 56))(v27, 0LL, 1LL, v29);
  }

  return a1;
}

uint64_t sub_10012FB2C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v125 = *(void *)(v6 - 8);
  uint64_t v124 = *(void (**)(uint64_t, uint64_t, uint64_t))(v125 + 24);
  v124(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  unsigned int v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v125 + 16))(v8, v9, v6);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      char v18 = v17[8];
      *(void *)uint64_t v16 = *(void *)v17;
      v16[8] = v18;
      uint64_t v19 = v10[6];
      uint64_t v20 = &v8[v19];
      uint64_t v21 = &v9[v19];
      char v22 = v21[8];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v22;
      uint64_t v23 = v10[7];
      uint64_t v24 = &v8[v23];
      uint64_t v25 = &v9[v23];
      char v26 = v25[8];
      *(void *)uint64_t v24 = *(void *)v25;
      v24[8] = v26;
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    sub_100004090((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v27 = sub_100003A0C(&qword_100355538);
    memcpy(v8, v9, *(void *)(*(void *)(v27 - 8) + 64LL));
    goto LABEL_7;
  }

  v124((uint64_t)v8, (uint64_t)v9, v6);
  uint64_t v77 = v10[5];
  uint64_t v78 = &v8[v77];
  uint64_t v79 = &v9[v77];
  char v80 = v79[8];
  *(void *)uint64_t v78 = *(void *)v79;
  v78[8] = v80;
  uint64_t v81 = v10[6];
  char v82 = &v8[v81];
  uint64_t v83 = &v9[v81];
  char v84 = v83[8];
  *(void *)char v82 = *(void *)v83;
  v82[8] = v84;
  uint64_t v85 = v10[7];
  uint64_t v86 = &v8[v85];
  uint64_t v87 = &v9[v85];
  char v88 = v87[8];
  *(void *)uint64_t v86 = *(void *)v87;
  v86[8] = v88;
LABEL_7:
  uint64_t v28 = a3[6];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = (int *)(a2 + v28);
  int v31 = *v30;
  *(_BYTE *)(v29 + 4) = *((_BYTE *)v30 + 4);
  *(_DWORD *)uint64_t v29 = v31;
  uint64_t v32 = a3[7];
  uint64_t v33 = (_BYTE *)(a1 + v32);
  uint64_t v34 = (_BYTE *)(a2 + v32);
  uint64_t v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL);
  uint64_t v36 = *((void *)v35 - 1);
  uint64_t v37 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v36 + 48);
  int v38 = v37(v33, 1LL, v35);
  int v39 = v37(v34, 1LL, v35);
  if (!v38)
  {
    if (!v39)
    {
      v124((uint64_t)v33, (uint64_t)v34, v6);
      v33[v35[5]] = v34[v35[5]];
      uint64_t v89 = v35[6];
      char v90 = &v33[v89];
      uint64_t v91 = &v34[v89];
      char v92 = v91[4];
      *(_DWORD *)char v90 = *(_DWORD *)v91;
      v90[4] = v92;
      uint64_t v93 = v35[7];
      char v94 = &v33[v93];
      uint64_t v95 = &v34[v93];
      char v96 = v95[4];
      *(_DWORD *)char v94 = *(_DWORD *)v95;
      v94[4] = v96;
      uint64_t v97 = v35[8];
      uint64_t v98 = &v33[v97];
      uint64_t v99 = &v34[v97];
      char v100 = v99[4];
      *(_DWORD *)uint64_t v98 = *(_DWORD *)v99;
      v98[4] = v100;
      uint64_t v101 = v35[9];
      uint64_t v102 = &v33[v101];
      uint64_t v103 = &v34[v101];
      char v104 = v103[4];
      *(_DWORD *)uint64_t v102 = *(_DWORD *)v103;
      v102[4] = v104;
      uint64_t v105 = v35[10];
      char v106 = &v33[v105];
      uint64_t v107 = &v34[v105];
      char v108 = v107[4];
      *(_DWORD *)char v106 = *(_DWORD *)v107;
      v106[4] = v108;
      uint64_t v109 = v35[11];
      char v110 = &v33[v109];
      uint64_t v111 = &v34[v109];
      int v112 = *(_DWORD *)v111;
      v110[4] = v111[4];
      *(_DWORD *)char v110 = v112;
      uint64_t v113 = v35[12];
      char v114 = &v33[v113];
      uint64_t v115 = &v34[v113];
      int v116 = *(_DWORD *)v115;
      v114[4] = v115[4];
      *(_DWORD *)char v114 = v116;
      uint64_t v117 = v35[13];
      char v118 = &v33[v117];
      uint64_t v119 = &v34[v117];
      int v120 = *(_DWORD *)v119;
      v118[4] = v119[4];
      *(_DWORD *)char v118 = v120;
      v33[v35[14]] = v34[v35[14]];
      uint64_t v121 = v35[15];
      uint64_t v122 = &v33[v121];
      uint64_t v123 = &v34[v121];
      LOBYTE(v120) = v123[4];
      *(_DWORD *)uint64_t v122 = *(_DWORD *)v123;
      v122[4] = v120;
      return a1;
    }

    sub_100004090((uint64_t)v33, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
    goto LABEL_12;
  }

  if (v39)
  {
LABEL_12:
    uint64_t v75 = sub_100003A0C(&qword_1003555B8);
    memcpy(v33, v34, *(void *)(*(void *)(v75 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v125 + 16))(v33, v34, v6);
  v33[v35[5]] = v34[v35[5]];
  uint64_t v40 = v35[6];
  uint64_t v41 = &v33[v40];
  uint64_t v42 = &v34[v40];
  char v43 = v42[4];
  *(_DWORD *)uint64_t v41 = *(_DWORD *)v42;
  v41[4] = v43;
  uint64_t v44 = v35[7];
  uint64_t v45 = &v33[v44];
  uint64_t v46 = &v34[v44];
  char v47 = v46[4];
  *(_DWORD *)uint64_t v45 = *(_DWORD *)v46;
  v45[4] = v47;
  uint64_t v48 = v35[8];
  uint64_t v49 = &v33[v48];
  uint64_t v50 = &v34[v48];
  char v51 = v50[4];
  *(_DWORD *)uint64_t v49 = *(_DWORD *)v50;
  v49[4] = v51;
  uint64_t v52 = v35[9];
  uint64_t v53 = &v33[v52];
  uint64_t v54 = &v34[v52];
  char v55 = v54[4];
  *(_DWORD *)uint64_t v53 = *(_DWORD *)v54;
  v53[4] = v55;
  uint64_t v56 = v35[10];
  uint64_t v57 = &v33[v56];
  uint64_t v58 = &v34[v56];
  char v59 = v58[4];
  *(_DWORD *)uint64_t v57 = *(_DWORD *)v58;
  v57[4] = v59;
  uint64_t v60 = v35[11];
  int v61 = &v33[v60];
  int v62 = &v34[v60];
  int v63 = *(_DWORD *)v62;
  v61[4] = v62[4];
  *(_DWORD *)int v61 = v63;
  uint64_t v64 = v35[12];
  uint64_t v65 = &v33[v64];
  uint64_t v66 = &v34[v64];
  int v67 = *(_DWORD *)v66;
  v65[4] = v66[4];
  *(_DWORD *)uint64_t v65 = v67;
  uint64_t v68 = v35[13];
  size_t v69 = &v33[v68];
  int v70 = &v34[v68];
  int v71 = *(_DWORD *)v70;
  v69[4] = v70[4];
  *(_DWORD *)size_t v69 = v71;
  v33[v35[14]] = v34[v35[14]];
  uint64_t v72 = v35[15];
  uint64_t v73 = &v33[v72];
  uint64_t v74 = &v34[v72];
  LOBYTE(v71) = v74[4];
  *(_DWORD *)uint64_t v73 = *(_DWORD *)v74;
  v73[4] = v71;
  (*(void (**)(_BYTE *, void, uint64_t, int *))(v36 + 56))(v33, 0LL, 1LL, v35);
  return a1;
}

uint64_t sub_10013002C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  unsigned int v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    char v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)char v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    char v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  uint64_t v27 = (char *)(a1 + v24);
  uint64_t v28 = (char *)(a2 + v24);
  uint64_t v29 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL);
  uint64_t v30 = *((void *)v29 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v30 + 48))(v28, 1LL, v29))
  {
    uint64_t v31 = sub_100003A0C(&qword_1003555B8);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v27, (uint64_t)v28, v6);
    v27[v29[5]] = v28[v29[5]];
    uint64_t v32 = v29[6];
    uint64_t v33 = &v27[v32];
    uint64_t v34 = &v28[v32];
    v33[4] = v34[4];
    *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
    uint64_t v35 = v29[7];
    uint64_t v36 = &v27[v35];
    uint64_t v37 = &v28[v35];
    v36[4] = v37[4];
    *(_DWORD *)uint64_t v36 = *(_DWORD *)v37;
    uint64_t v38 = v29[8];
    int v39 = &v27[v38];
    uint64_t v40 = &v28[v38];
    v39[4] = v40[4];
    *(_DWORD *)int v39 = *(_DWORD *)v40;
    uint64_t v41 = v29[9];
    uint64_t v42 = &v27[v41];
    char v43 = &v28[v41];
    v42[4] = v43[4];
    *(_DWORD *)uint64_t v42 = *(_DWORD *)v43;
    uint64_t v44 = v29[10];
    uint64_t v45 = &v27[v44];
    uint64_t v46 = &v28[v44];
    v45[4] = v46[4];
    *(_DWORD *)uint64_t v45 = *(_DWORD *)v46;
    uint64_t v47 = v29[11];
    uint64_t v48 = &v27[v47];
    uint64_t v49 = &v28[v47];
    *(_DWORD *)uint64_t v48 = *(_DWORD *)v49;
    v48[4] = v49[4];
    uint64_t v50 = v29[12];
    char v51 = &v27[v50];
    uint64_t v52 = &v28[v50];
    *(_DWORD *)char v51 = *(_DWORD *)v52;
    v51[4] = v52[4];
    uint64_t v53 = v29[13];
    uint64_t v54 = &v27[v53];
    char v55 = &v28[v53];
    *(_DWORD *)uint64_t v54 = *(_DWORD *)v55;
    v54[4] = v55[4];
    v27[v29[14]] = v28[v29[14]];
    uint64_t v56 = v29[15];
    uint64_t v57 = &v27[v56];
    uint64_t v58 = &v28[v56];
    *(_DWORD *)uint64_t v57 = *(_DWORD *)v58;
    v57[4] = v58[4];
    (*(void (**)(char *, void, uint64_t, int *))(v30 + 56))(v27, 0LL, 1LL, v29);
  }

  return a1;
}

uint64_t sub_100130318(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v102 = *(void *)(v6 - 8);
  uint64_t v101 = *(void (**)(uint64_t, uint64_t, uint64_t))(v102 + 40);
  v101(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  unsigned int v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v102 + 32))(v8, v9, v6);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      *(void *)uint64_t v16 = *(void *)v17;
      v16[8] = v17[8];
      uint64_t v18 = v10[6];
      uint64_t v19 = &v8[v18];
      uint64_t v20 = &v9[v18];
      *(void *)uint64_t v19 = *(void *)v20;
      v19[8] = v20[8];
      uint64_t v21 = v10[7];
      char v22 = &v8[v21];
      uint64_t v23 = &v9[v21];
      *(void *)char v22 = *(void *)v23;
      v22[8] = v23[8];
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    sub_100004090((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v24 = sub_100003A0C(&qword_100355538);
    memcpy(v8, v9, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_7;
  }

  v101((uint64_t)v8, (uint64_t)v9, v6);
  uint64_t v65 = v10[5];
  uint64_t v66 = &v8[v65];
  int v67 = &v9[v65];
  *(void *)uint64_t v66 = *(void *)v67;
  v66[8] = v67[8];
  uint64_t v68 = v10[6];
  size_t v69 = &v8[v68];
  int v70 = &v9[v68];
  *(void *)size_t v69 = *(void *)v70;
  v69[8] = v70[8];
  uint64_t v71 = v10[7];
  uint64_t v72 = &v8[v71];
  uint64_t v73 = &v9[v71];
  *(void *)uint64_t v72 = *(void *)v73;
  v72[8] = v73[8];
LABEL_7:
  uint64_t v25 = a3[6];
  uint64_t v26 = a3[7];
  uint64_t v27 = a1 + v25;
  uint64_t v28 = a2 + v25;
  *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
  *(_BYTE *)(v27 + 4) = *(_BYTE *)(v28 + 4);
  uint64_t v29 = (_BYTE *)(a1 + v26);
  uint64_t v30 = (_BYTE *)(a2 + v26);
  uint64_t v31 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0LL);
  uint64_t v32 = *((void *)v31 - 1);
  uint64_t v33 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v32 + 48);
  int v34 = v33(v29, 1LL, v31);
  int v35 = v33(v30, 1LL, v31);
  if (!v34)
  {
    if (!v35)
    {
      v101((uint64_t)v29, (uint64_t)v30, v6);
      v29[v31[5]] = v30[v31[5]];
      uint64_t v74 = v31[6];
      uint64_t v75 = &v29[v74];
      uint64_t v76 = &v30[v74];
      v75[4] = v76[4];
      *(_DWORD *)uint64_t v75 = *(_DWORD *)v76;
      uint64_t v77 = v31[7];
      uint64_t v78 = &v29[v77];
      uint64_t v79 = &v30[v77];
      v78[4] = v79[4];
      *(_DWORD *)uint64_t v78 = *(_DWORD *)v79;
      uint64_t v80 = v31[8];
      uint64_t v81 = &v29[v80];
      char v82 = &v30[v80];
      v81[4] = v82[4];
      *(_DWORD *)uint64_t v81 = *(_DWORD *)v82;
      uint64_t v83 = v31[9];
      char v84 = &v29[v83];
      uint64_t v85 = &v30[v83];
      v84[4] = v85[4];
      *(_DWORD *)char v84 = *(_DWORD *)v85;
      uint64_t v86 = v31[10];
      uint64_t v87 = &v29[v86];
      char v88 = &v30[v86];
      v87[4] = v88[4];
      *(_DWORD *)uint64_t v87 = *(_DWORD *)v88;
      uint64_t v89 = v31[11];
      char v90 = &v29[v89];
      uint64_t v91 = &v30[v89];
      *(_DWORD *)char v90 = *(_DWORD *)v91;
      v90[4] = v91[4];
      uint64_t v92 = v31[12];
      uint64_t v93 = &v29[v92];
      char v94 = &v30[v92];
      *(_DWORD *)uint64_t v93 = *(_DWORD *)v94;
      v93[4] = v94[4];
      uint64_t v95 = v31[13];
      char v96 = &v29[v95];
      uint64_t v97 = &v30[v95];
      *(_DWORD *)char v96 = *(_DWORD *)v97;
      v96[4] = v97[4];
      v29[v31[14]] = v30[v31[14]];
      uint64_t v98 = v31[15];
      uint64_t v99 = &v29[v98];
      char v100 = &v30[v98];
      *(_DWORD *)uint64_t v99 = *(_DWORD *)v100;
      v99[4] = v100[4];
      return a1;
    }

    sub_100004090((uint64_t)v29, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
    goto LABEL_12;
  }

  if (v35)
  {
LABEL_12:
    uint64_t v63 = sub_100003A0C(&qword_1003555B8);
    memcpy(v29, v30, *(void *)(*(void *)(v63 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v102 + 32))(v29, v30, v6);
  v29[v31[5]] = v30[v31[5]];
  uint64_t v36 = v31[6];
  uint64_t v37 = &v29[v36];
  uint64_t v38 = &v30[v36];
  v37[4] = v38[4];
  *(_DWORD *)uint64_t v37 = *(_DWORD *)v38;
  uint64_t v39 = v31[7];
  uint64_t v40 = &v29[v39];
  uint64_t v41 = &v30[v39];
  v40[4] = v41[4];
  *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
  uint64_t v42 = v31[8];
  char v43 = &v29[v42];
  uint64_t v44 = &v30[v42];
  v43[4] = v44[4];
  *(_DWORD *)char v43 = *(_DWORD *)v44;
  uint64_t v45 = v31[9];
  uint64_t v46 = &v29[v45];
  uint64_t v47 = &v30[v45];
  v46[4] = v47[4];
  *(_DWORD *)uint64_t v46 = *(_DWORD *)v47;
  uint64_t v48 = v31[10];
  uint64_t v49 = &v29[v48];
  uint64_t v50 = &v30[v48];
  v49[4] = v50[4];
  *(_DWORD *)uint64_t v49 = *(_DWORD *)v50;
  uint64_t v51 = v31[11];
  uint64_t v52 = &v29[v51];
  uint64_t v53 = &v30[v51];
  *(_DWORD *)uint64_t v52 = *(_DWORD *)v53;
  v52[4] = v53[4];
  uint64_t v54 = v31[12];
  char v55 = &v29[v54];
  uint64_t v56 = &v30[v54];
  *(_DWORD *)char v55 = *(_DWORD *)v56;
  v55[4] = v56[4];
  uint64_t v57 = v31[13];
  uint64_t v58 = &v29[v57];
  char v59 = &v30[v57];
  *(_DWORD *)uint64_t v58 = *(_DWORD *)v59;
  v58[4] = v59[4];
  v29[v31[14]] = v30[v31[14]];
  uint64_t v60 = v31[15];
  int v61 = &v29[v60];
  int v62 = &v30[v60];
  *(_DWORD *)int v61 = *(_DWORD *)v62;
  v61[4] = v62[4];
  (*(void (**)(_BYTE *, void, uint64_t, int *))(v32 + 56))(v29, 0LL, 1LL, v31);
  return a1;
}

uint64_t sub_100130814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100130820);
}

uint64_t sub_100130820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100139E78(a1, a2, a3, &qword_1003555B8);
}

uint64_t sub_10013082C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100130838);
}

uint64_t sub_100130838(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100139F30(a1, a2, a3, a4, &qword_1003555B8);
}

void sub_100130844(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_10013086C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100130878);
}

uint64_t sub_100130878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013EA24(a1, a2, a3, &qword_100355538);
}

uint64_t sub_100130884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100130890);
}

uint64_t sub_100130890(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10013EAB4(a1, a2, a3, a4, &qword_100355538);
}

void sub_10013089C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *sub_1001308B0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    unsigned int v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1LL, v12))
    {
      uint64_t v14 = sub_100003A0C(&qword_100355538);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
    }

    uint64_t v25 = a3[6];
    uint64_t v26 = a3[7];
    uint64_t v27 = (char *)a1 + v25;
    uint64_t v28 = (char *)a2 + v25;
    *(void *)uint64_t v27 = *(void *)v28;
    v27[8] = v28[8];
    uint64_t v29 = (char *)a1 + v26;
    uint64_t v30 = (char *)a2 + v26;
    *(void *)uint64_t v29 = *(void *)v30;
    v29[8] = v30[8];
    uint64_t v31 = a3[8];
    uint64_t v32 = a3[9];
    uint64_t v33 = (char *)a1 + v31;
    int v34 = (char *)a2 + v31;
    *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
    v33[4] = v34[4];
    int v35 = (char *)a1 + v32;
    uint64_t v36 = (char *)a2 + v32;
    *(_DWORD *)int v35 = *(_DWORD *)v36;
    v35[4] = v36[4];
    uint64_t v37 = a3[10];
    uint64_t v38 = a3[11];
    uint64_t v39 = (char *)a1 + v37;
    uint64_t v40 = (char *)a2 + v37;
    int v41 = *(_DWORD *)v40;
    v39[4] = v40[4];
    *(_DWORD *)uint64_t v39 = v41;
    uint64_t v42 = (char *)a1 + v38;
    char v43 = (char *)a2 + v38;
    v42[4] = v43[4];
    *(_DWORD *)uint64_t v42 = *(_DWORD *)v43;
  }

  return a1;
}

uint64_t sub_100130AB8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  unsigned int v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(void *)uint64_t v25 = *(void *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  uint64_t v27 = a1 + v24;
  uint64_t v28 = a2 + v24;
  *(void *)uint64_t v27 = *(void *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  uint64_t v29 = a3[8];
  uint64_t v30 = a3[9];
  uint64_t v31 = a1 + v29;
  uint64_t v32 = a2 + v29;
  *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
  *(_BYTE *)(v31 + 4) = *(_BYTE *)(v32 + 4);
  uint64_t v33 = a1 + v30;
  uint64_t v34 = a2 + v30;
  *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  uint64_t v35 = a3[10];
  uint64_t v36 = a3[11];
  uint64_t v37 = a1 + v35;
  uint64_t v38 = (int *)(a2 + v35);
  int v39 = *v38;
  *(_BYTE *)(v37 + 4) = *((_BYTE *)v38 + 4);
  *(_DWORD *)uint64_t v37 = v39;
  uint64_t v40 = a1 + v36;
  uint64_t v41 = a2 + v36;
  *(_BYTE *)(v40 + 4) = *(_BYTE *)(v41 + 4);
  *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
  return a1;
}

uint64_t sub_100130C94(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v62 = *((void *)v12 - 1);
  uint64_t v63 = v10;
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v62 + 48);
  LODWORD(v10) = v13(v10, 1LL, v12);
  int v14 = v13((uint64_t)v11, 1LL, v12);
  if ((_DWORD)v10)
  {
    if (!v14)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v63, v11, v6);
      uint64_t v17 = v12[5];
      uint64_t v18 = v63 + v17;
      uint64_t v19 = &v11[v17];
      char v20 = v19[8];
      *(void *)uint64_t v18 = *(void *)v19;
      *(_BYTE *)(v18 + 8) = v20;
      uint64_t v21 = v12[6];
      uint64_t v22 = v63 + v21;
      uint64_t v23 = &v11[v21];
      char v24 = v23[8];
      *(void *)uint64_t v22 = *(void *)v23;
      *(_BYTE *)(v22 + 8) = v24;
      uint64_t v25 = v12[7];
      uint64_t v26 = v63 + v25;
      uint64_t v27 = &v11[v25];
      char v28 = v27[8];
      *(void *)uint64_t v26 = *(void *)v27;
      *(_BYTE *)(v26 + 8) = v28;
      (*(void (**)(uint64_t, void, uint64_t, int *))(v62 + 56))(v63, 0LL, 1LL, v12);
      goto LABEL_9;
    }

    size_t v15 = *(void *)(*(void *)(sub_100003A0C(&qword_100355538) - 8) + 64LL);
    uint64_t v16 = (void *)v63;
  }

  else
  {
    if (!v14)
    {
      v8(v63, (uint64_t)v11, v6);
      uint64_t v29 = v12[5];
      uint64_t v30 = v63 + v29;
      uint64_t v31 = &v11[v29];
      char v32 = v31[8];
      *(void *)uint64_t v30 = *(void *)v31;
      *(_BYTE *)(v30 + 8) = v32;
      uint64_t v33 = v12[6];
      uint64_t v34 = v63 + v33;
      uint64_t v35 = &v11[v33];
      char v36 = v35[8];
      *(void *)uint64_t v34 = *(void *)v35;
      *(_BYTE *)(v34 + 8) = v36;
      uint64_t v37 = v12[7];
      uint64_t v38 = v63 + v37;
      int v39 = &v11[v37];
      char v40 = v39[8];
      *(void *)uint64_t v38 = *(void *)v39;
      *(_BYTE *)(v38 + 8) = v40;
      goto LABEL_9;
    }

    sub_100004090(v63, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    size_t v15 = *(void *)(*(void *)(sub_100003A0C(&qword_100355538) - 8) + 64LL);
    uint64_t v16 = (void *)v63;
  }

  memcpy(v16, v11, v15);
LABEL_9:
  uint64_t v41 = a3[6];
  uint64_t v42 = a1 + v41;
  char v43 = (uint64_t *)(a2 + v41);
  uint64_t v44 = *v43;
  *(_BYTE *)(v42 + 8) = *((_BYTE *)v43 + 8);
  *(void *)uint64_t v42 = v44;
  uint64_t v45 = a3[7];
  uint64_t v46 = a1 + v45;
  uint64_t v47 = (uint64_t *)(a2 + v45);
  uint64_t v48 = *v47;
  *(_BYTE *)(v46 + 8) = *((_BYTE *)v47 + 8);
  *(void *)uint64_t v46 = v48;
  uint64_t v49 = a3[8];
  uint64_t v50 = a1 + v49;
  uint64_t v51 = a2 + v49;
  LODWORD(v48) = *(_DWORD *)v51;
  *(_BYTE *)(v50 + 4) = *(_BYTE *)(v51 + 4);
  *(_DWORD *)uint64_t v50 = v48;
  uint64_t v52 = a3[9];
  uint64_t v53 = a1 + v52;
  uint64_t v54 = a2 + v52;
  LODWORD(v48) = *(_DWORD *)v54;
  *(_BYTE *)(v53 + 4) = *(_BYTE *)(v54 + 4);
  *(_DWORD *)uint64_t v53 = v48;
  uint64_t v55 = a3[10];
  uint64_t v56 = a1 + v55;
  uint64_t v57 = a2 + v55;
  LODWORD(v48) = *(_DWORD *)v57;
  *(_BYTE *)(v56 + 4) = *(_BYTE *)(v57 + 4);
  *(_DWORD *)uint64_t v56 = v48;
  uint64_t v58 = a3[11];
  uint64_t v59 = a1 + v58;
  uint64_t v60 = a2 + v58;
  LODWORD(v48) = *(_DWORD *)v60;
  *(_BYTE *)(v59 + 4) = *(_BYTE *)(v60 + 4);
  *(_DWORD *)uint64_t v59 = v48;
  return a1;
}

uint64_t sub_100130F50(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    size_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)size_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(void *)uint64_t v25 = *(void *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  uint64_t v27 = a1 + v24;
  uint64_t v28 = a2 + v24;
  *(void *)uint64_t v27 = *(void *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  uint64_t v29 = a3[8];
  uint64_t v30 = a3[9];
  uint64_t v31 = a1 + v29;
  uint64_t v32 = a2 + v29;
  *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
  *(_BYTE *)(v31 + 4) = *(_BYTE *)(v32 + 4);
  uint64_t v33 = a1 + v30;
  uint64_t v34 = a2 + v30;
  *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  uint64_t v35 = a3[10];
  uint64_t v36 = a3[11];
  uint64_t v37 = a1 + v35;
  uint64_t v38 = (int *)(a2 + v35);
  int v39 = *v38;
  *(_BYTE *)(v37 + 4) = *((_BYTE *)v38 + 4);
  *(_DWORD *)uint64_t v37 = v39;
  uint64_t v40 = a1 + v36;
  uint64_t v41 = a2 + v36;
  *(_BYTE *)(v40 + 4) = *(_BYTE *)(v41 + 4);
  *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
  return a1;
}

uint64_t sub_10013112C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v55 = *((void *)v12 - 1);
  uint64_t v56 = v10;
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v55 + 48);
  LODWORD(v10) = v13(v10, 1LL, v12);
  int v14 = v13((uint64_t)v11, 1LL, v12);
  if ((_DWORD)v10)
  {
    if (!v14)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v56, v11, v6);
      uint64_t v17 = v12[5];
      uint64_t v18 = v56 + v17;
      uint64_t v19 = &v11[v17];
      *(void *)uint64_t v18 = *(void *)v19;
      *(_BYTE *)(v18 + 8) = v19[8];
      uint64_t v20 = v12[6];
      uint64_t v21 = v56 + v20;
      uint64_t v22 = &v11[v20];
      *(void *)uint64_t v21 = *(void *)v22;
      *(_BYTE *)(v21 + 8) = v22[8];
      uint64_t v23 = v12[7];
      uint64_t v24 = v56 + v23;
      uint64_t v25 = &v11[v23];
      *(void *)uint64_t v24 = *(void *)v25;
      *(_BYTE *)(v24 + 8) = v25[8];
      (*(void (**)(uint64_t, void, uint64_t, int *))(v55 + 56))(v56, 0LL, 1LL, v12);
      goto LABEL_9;
    }

    size_t v15 = *(void *)(*(void *)(sub_100003A0C(&qword_100355538) - 8) + 64LL);
    uint64_t v16 = (void *)v56;
  }

  else
  {
    if (!v14)
    {
      v8(v56, (uint64_t)v11, v6);
      uint64_t v26 = v12[5];
      uint64_t v27 = v56 + v26;
      uint64_t v28 = &v11[v26];
      *(void *)uint64_t v27 = *(void *)v28;
      *(_BYTE *)(v27 + 8) = v28[8];
      uint64_t v29 = v12[6];
      uint64_t v30 = v56 + v29;
      uint64_t v31 = &v11[v29];
      *(void *)uint64_t v30 = *(void *)v31;
      *(_BYTE *)(v30 + 8) = v31[8];
      uint64_t v32 = v12[7];
      uint64_t v33 = v56 + v32;
      uint64_t v34 = &v11[v32];
      *(void *)uint64_t v33 = *(void *)v34;
      *(_BYTE *)(v33 + 8) = v34[8];
      goto LABEL_9;
    }

    sub_100004090(v56, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    size_t v15 = *(void *)(*(void *)(sub_100003A0C(&qword_100355538) - 8) + 64LL);
    uint64_t v16 = (void *)v56;
  }

  memcpy(v16, v11, v15);
LABEL_9:
  uint64_t v35 = a3[6];
  uint64_t v36 = a3[7];
  uint64_t v37 = a1 + v35;
  uint64_t v38 = a2 + v35;
  *(void *)uint64_t v37 = *(void *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  uint64_t v39 = a1 + v36;
  uint64_t v40 = a2 + v36;
  *(void *)uint64_t v39 = *(void *)v40;
  *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
  uint64_t v41 = a3[8];
  uint64_t v42 = a3[9];
  uint64_t v43 = a1 + v41;
  uint64_t v44 = a2 + v41;
  *(_DWORD *)uint64_t v43 = *(_DWORD *)v44;
  *(_BYTE *)(v43 + 4) = *(_BYTE *)(v44 + 4);
  uint64_t v45 = a1 + v42;
  uint64_t v46 = a2 + v42;
  *(_DWORD *)uint64_t v45 = *(_DWORD *)v46;
  *(_BYTE *)(v45 + 4) = *(_BYTE *)(v46 + 4);
  uint64_t v47 = a3[10];
  uint64_t v48 = a3[11];
  uint64_t v49 = a1 + v47;
  uint64_t v50 = (int *)(a2 + v47);
  int v51 = *v50;
  *(_BYTE *)(v49 + 4) = *((_BYTE *)v50 + 4);
  *(_DWORD *)uint64_t v49 = v51;
  uint64_t v52 = a1 + v48;
  uint64_t v53 = a2 + v48;
  *(_BYTE *)(v52 + 4) = *(_BYTE *)(v53 + 4);
  *(_DWORD *)uint64_t v52 = *(_DWORD *)v53;
  return a1;
}

uint64_t sub_1001313DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001313E8);
}

uint64_t sub_1001313E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013EA24(a1, a2, a3, &qword_100355538);
}

uint64_t sub_1001313F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100131400);
}

uint64_t sub_100131400(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10013EAB4(a1, a2, a3, a4, &qword_100355538);
}

void sub_10013140C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

char *sub_100131424(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1LL, v12))
    {
      uint64_t v14 = sub_100003A0C(&qword_100355538);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      v8(v10, v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
    }

    uint64_t v25 = a3[6];
    uint64_t v26 = a3[7];
    uint64_t v27 = &a1[v25];
    uint64_t v28 = &a2[v25];
    *(void *)uint64_t v27 = *(void *)v28;
    v27[8] = v28[8];
    uint64_t v29 = &a1[v26];
    uint64_t v30 = &a2[v26];
    *(void *)uint64_t v29 = *(void *)v30;
    v29[8] = v30[8];
    uint64_t v31 = a3[8];
    uint64_t v32 = a3[9];
    uint64_t v33 = &a1[v31];
    uint64_t v34 = &a2[v31];
    *(void *)uint64_t v33 = *(void *)v34;
    v33[8] = v34[8];
    uint64_t v35 = &a1[v32];
    uint64_t v36 = &a2[v32];
    v35[8] = v36[8];
    *(void *)uint64_t v35 = *(void *)v36;
    uint64_t v37 = a3[10];
    uint64_t v38 = a3[11];
    uint64_t v39 = &a1[v37];
    uint64_t v40 = &a2[v37];
    *(void *)uint64_t v39 = *(void *)v40;
    v39[8] = v40[8];
    uint64_t v41 = &a1[v38];
    uint64_t v42 = &a2[v38];
    *(void *)uint64_t v41 = *(void *)v42;
    v41[8] = v42[8];
    uint64_t v43 = a3[12];
    uint64_t v44 = a3[13];
    uint64_t v45 = &a1[v43];
    uint64_t v46 = &a2[v43];
    *(void *)uint64_t v45 = *(void *)v46;
    v45[8] = v46[8];
    uint64_t v47 = &a1[v44];
    uint64_t v48 = &a2[v44];
    *(void *)uint64_t v47 = *(void *)v48;
    v47[8] = v48[8];
    uint64_t v49 = a3[14];
    uint64_t v50 = a3[15];
    int v51 = &a1[v49];
    uint64_t v52 = &a2[v49];
    *(void *)int v51 = *(void *)v52;
    v51[8] = v52[8];
    a1[v50] = a2[v50];
    uint64_t v53 = a3[17];
    a1[a3[16]] = a2[a3[16]];
    a1[v53] = a2[v53];
    a1[a3[18]] = a2[a3[18]];
  }

  return a1;
}

uint64_t sub_1001316A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(void *)uint64_t v25 = *(void *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  uint64_t v27 = a1 + v24;
  uint64_t v28 = a2 + v24;
  *(void *)uint64_t v27 = *(void *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  uint64_t v29 = a3[8];
  uint64_t v30 = a3[9];
  uint64_t v31 = a1 + v29;
  uint64_t v32 = a2 + v29;
  *(void *)uint64_t v31 = *(void *)v32;
  *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
  uint64_t v33 = a1 + v30;
  uint64_t v34 = a2 + v30;
  *(_BYTE *)(v33 + 8) = *(_BYTE *)(v34 + 8);
  *(void *)uint64_t v33 = *(void *)v34;
  uint64_t v35 = a3[10];
  uint64_t v36 = a3[11];
  uint64_t v37 = a1 + v35;
  uint64_t v38 = a2 + v35;
  *(void *)uint64_t v37 = *(void *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  uint64_t v39 = a1 + v36;
  uint64_t v40 = a2 + v36;
  *(void *)uint64_t v39 = *(void *)v40;
  *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
  uint64_t v41 = a3[12];
  uint64_t v42 = a3[13];
  uint64_t v43 = a1 + v41;
  uint64_t v44 = a2 + v41;
  *(void *)uint64_t v43 = *(void *)v44;
  *(_BYTE *)(v43 + 8) = *(_BYTE *)(v44 + 8);
  uint64_t v45 = a1 + v42;
  uint64_t v46 = a2 + v42;
  *(void *)uint64_t v45 = *(void *)v46;
  *(_BYTE *)(v45 + 8) = *(_BYTE *)(v46 + 8);
  uint64_t v47 = a3[14];
  uint64_t v48 = a3[15];
  uint64_t v49 = a1 + v47;
  uint64_t v50 = a2 + v47;
  *(void *)uint64_t v49 = *(void *)v50;
  *(_BYTE *)(v49 + 8) = *(_BYTE *)(v50 + 8);
  *(_BYTE *)(a1 + v48) = *(_BYTE *)(a2 + v48);
  uint64_t v51 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + v51) = *(_BYTE *)(a2 + v51);
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  return a1;
}

uint64_t sub_1001318F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v78 = *((void *)v12 - 1);
  uint64_t v79 = v10;
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v78 + 48);
  LODWORD(v10) = v13(v10, 1LL, v12);
  int v14 = v13((uint64_t)v11, 1LL, v12);
  if ((_DWORD)v10)
  {
    if (!v14)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v79, v11, v6);
      uint64_t v17 = v12[5];
      uint64_t v18 = v79 + v17;
      uint64_t v19 = &v11[v17];
      char v20 = v19[8];
      *(void *)uint64_t v18 = *(void *)v19;
      *(_BYTE *)(v18 + 8) = v20;
      uint64_t v21 = v12[6];
      uint64_t v22 = v79 + v21;
      uint64_t v23 = &v11[v21];
      char v24 = v23[8];
      *(void *)uint64_t v22 = *(void *)v23;
      *(_BYTE *)(v22 + 8) = v24;
      uint64_t v25 = v12[7];
      uint64_t v26 = v79 + v25;
      uint64_t v27 = &v11[v25];
      char v28 = v27[8];
      *(void *)uint64_t v26 = *(void *)v27;
      *(_BYTE *)(v26 + 8) = v28;
      (*(void (**)(uint64_t, void, uint64_t, int *))(v78 + 56))(v79, 0LL, 1LL, v12);
      goto LABEL_9;
    }

    size_t v15 = *(void *)(*(void *)(sub_100003A0C(&qword_100355538) - 8) + 64LL);
    uint64_t v16 = (void *)v79;
  }

  else
  {
    if (!v14)
    {
      v8(v79, (uint64_t)v11, v6);
      uint64_t v29 = v12[5];
      uint64_t v30 = v79 + v29;
      uint64_t v31 = &v11[v29];
      char v32 = v31[8];
      *(void *)uint64_t v30 = *(void *)v31;
      *(_BYTE *)(v30 + 8) = v32;
      uint64_t v33 = v12[6];
      uint64_t v34 = v79 + v33;
      uint64_t v35 = &v11[v33];
      char v36 = v35[8];
      *(void *)uint64_t v34 = *(void *)v35;
      *(_BYTE *)(v34 + 8) = v36;
      uint64_t v37 = v12[7];
      uint64_t v38 = v79 + v37;
      uint64_t v39 = &v11[v37];
      char v40 = v39[8];
      *(void *)uint64_t v38 = *(void *)v39;
      *(_BYTE *)(v38 + 8) = v40;
      goto LABEL_9;
    }

    sub_100004090(v79, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    size_t v15 = *(void *)(*(void *)(sub_100003A0C(&qword_100355538) - 8) + 64LL);
    uint64_t v16 = (void *)v79;
  }

  memcpy(v16, v11, v15);
LABEL_9:
  uint64_t v41 = a3[6];
  uint64_t v42 = a1 + v41;
  uint64_t v43 = (uint64_t *)(a2 + v41);
  uint64_t v44 = *v43;
  *(_BYTE *)(v42 + 8) = *((_BYTE *)v43 + 8);
  *(void *)uint64_t v42 = v44;
  uint64_t v45 = a3[7];
  uint64_t v46 = a1 + v45;
  uint64_t v47 = (uint64_t *)(a2 + v45);
  uint64_t v48 = *v47;
  *(_BYTE *)(v46 + 8) = *((_BYTE *)v47 + 8);
  *(void *)uint64_t v46 = v48;
  uint64_t v49 = a3[8];
  uint64_t v50 = a1 + v49;
  uint64_t v51 = (uint64_t *)(a2 + v49);
  uint64_t v52 = *v51;
  *(_BYTE *)(v50 + 8) = *((_BYTE *)v51 + 8);
  *(void *)uint64_t v50 = v52;
  uint64_t v53 = a3[9];
  uint64_t v54 = a1 + v53;
  uint64_t v55 = (uint64_t *)(a2 + v53);
  uint64_t v56 = *v55;
  *(_BYTE *)(v54 + 8) = *((_BYTE *)v55 + 8);
  *(void *)uint64_t v54 = v56;
  uint64_t v57 = a3[10];
  uint64_t v58 = a1 + v57;
  uint64_t v59 = (uint64_t *)(a2 + v57);
  uint64_t v60 = *v59;
  *(_BYTE *)(v58 + 8) = *((_BYTE *)v59 + 8);
  *(void *)uint64_t v58 = v60;
  uint64_t v61 = a3[11];
  uint64_t v62 = a1 + v61;
  uint64_t v63 = (uint64_t *)(a2 + v61);
  uint64_t v64 = *v63;
  *(_BYTE *)(v62 + 8) = *((_BYTE *)v63 + 8);
  *(void *)uint64_t v62 = v64;
  uint64_t v65 = a3[12];
  uint64_t v66 = a1 + v65;
  int v67 = (uint64_t *)(a2 + v65);
  uint64_t v68 = *v67;
  *(_BYTE *)(v66 + 8) = *((_BYTE *)v67 + 8);
  *(void *)uint64_t v66 = v68;
  uint64_t v69 = a3[13];
  uint64_t v70 = a1 + v69;
  uint64_t v71 = (uint64_t *)(a2 + v69);
  uint64_t v72 = *v71;
  *(_BYTE *)(v70 + 8) = *((_BYTE *)v71 + 8);
  *(void *)uint64_t v70 = v72;
  uint64_t v73 = a3[14];
  uint64_t v74 = a1 + v73;
  uint64_t v75 = (uint64_t *)(a2 + v73);
  uint64_t v76 = *v75;
  *(_BYTE *)(v74 + 8) = *((_BYTE *)v75 + 8);
  *(void *)uint64_t v74 = v76;
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  return a1;
}

uint64_t sub_100131C38(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    size_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)size_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(void *)uint64_t v25 = *(void *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  uint64_t v27 = a1 + v24;
  uint64_t v28 = a2 + v24;
  *(void *)uint64_t v27 = *(void *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  uint64_t v29 = a3[8];
  uint64_t v30 = a3[9];
  uint64_t v31 = a1 + v29;
  uint64_t v32 = a2 + v29;
  *(void *)uint64_t v31 = *(void *)v32;
  *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
  uint64_t v33 = a1 + v30;
  uint64_t v34 = a2 + v30;
  *(_BYTE *)(v33 + 8) = *(_BYTE *)(v34 + 8);
  *(void *)uint64_t v33 = *(void *)v34;
  uint64_t v35 = a3[10];
  uint64_t v36 = a3[11];
  uint64_t v37 = a1 + v35;
  uint64_t v38 = a2 + v35;
  *(void *)uint64_t v37 = *(void *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  uint64_t v39 = a1 + v36;
  uint64_t v40 = a2 + v36;
  *(void *)uint64_t v39 = *(void *)v40;
  *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
  uint64_t v41 = a3[12];
  uint64_t v42 = a3[13];
  uint64_t v43 = a1 + v41;
  uint64_t v44 = a2 + v41;
  *(void *)uint64_t v43 = *(void *)v44;
  *(_BYTE *)(v43 + 8) = *(_BYTE *)(v44 + 8);
  uint64_t v45 = a1 + v42;
  uint64_t v46 = a2 + v42;
  *(void *)uint64_t v45 = *(void *)v46;
  *(_BYTE *)(v45 + 8) = *(_BYTE *)(v46 + 8);
  uint64_t v47 = a3[14];
  uint64_t v48 = a3[15];
  uint64_t v49 = a1 + v47;
  uint64_t v50 = a2 + v47;
  *(void *)uint64_t v49 = *(void *)v50;
  *(_BYTE *)(v49 + 8) = *(_BYTE *)(v50 + 8);
  *(_BYTE *)(a1 + v48) = *(_BYTE *)(a2 + v48);
  uint64_t v51 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + v51) = *(_BYTE *)(a2 + v51);
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  return a1;
}

uint64_t sub_100131E8C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v65 = *((void *)v12 - 1);
  uint64_t v66 = v10;
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v65 + 48);
  LODWORD(v10) = v13(v10, 1LL, v12);
  int v14 = v13((uint64_t)v11, 1LL, v12);
  if ((_DWORD)v10)
  {
    if (!v14)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v66, v11, v6);
      uint64_t v17 = v12[5];
      uint64_t v18 = v66 + v17;
      uint64_t v19 = &v11[v17];
      *(void *)uint64_t v18 = *(void *)v19;
      *(_BYTE *)(v18 + 8) = v19[8];
      uint64_t v20 = v12[6];
      uint64_t v21 = v66 + v20;
      uint64_t v22 = &v11[v20];
      *(void *)uint64_t v21 = *(void *)v22;
      *(_BYTE *)(v21 + 8) = v22[8];
      uint64_t v23 = v12[7];
      uint64_t v24 = v66 + v23;
      uint64_t v25 = &v11[v23];
      *(void *)uint64_t v24 = *(void *)v25;
      *(_BYTE *)(v24 + 8) = v25[8];
      (*(void (**)(uint64_t, void, uint64_t, int *))(v65 + 56))(v66, 0LL, 1LL, v12);
      goto LABEL_9;
    }

    size_t v15 = *(void *)(*(void *)(sub_100003A0C(&qword_100355538) - 8) + 64LL);
    uint64_t v16 = (void *)v66;
  }

  else
  {
    if (!v14)
    {
      v8(v66, (uint64_t)v11, v6);
      uint64_t v26 = v12[5];
      uint64_t v27 = v66 + v26;
      uint64_t v28 = &v11[v26];
      *(void *)uint64_t v27 = *(void *)v28;
      *(_BYTE *)(v27 + 8) = v28[8];
      uint64_t v29 = v12[6];
      uint64_t v30 = v66 + v29;
      uint64_t v31 = &v11[v29];
      *(void *)uint64_t v30 = *(void *)v31;
      *(_BYTE *)(v30 + 8) = v31[8];
      uint64_t v32 = v12[7];
      uint64_t v33 = v66 + v32;
      uint64_t v34 = &v11[v32];
      *(void *)uint64_t v33 = *(void *)v34;
      *(_BYTE *)(v33 + 8) = v34[8];
      goto LABEL_9;
    }

    sub_100004090(v66, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    size_t v15 = *(void *)(*(void *)(sub_100003A0C(&qword_100355538) - 8) + 64LL);
    uint64_t v16 = (void *)v66;
  }

  memcpy(v16, v11, v15);
LABEL_9:
  uint64_t v35 = a3[6];
  uint64_t v36 = a3[7];
  uint64_t v37 = a1 + v35;
  uint64_t v38 = a2 + v35;
  *(void *)uint64_t v37 = *(void *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  uint64_t v39 = a1 + v36;
  uint64_t v40 = a2 + v36;
  *(void *)uint64_t v39 = *(void *)v40;
  *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
  uint64_t v41 = a3[8];
  uint64_t v42 = a3[9];
  uint64_t v43 = a1 + v41;
  uint64_t v44 = a2 + v41;
  *(void *)uint64_t v43 = *(void *)v44;
  *(_BYTE *)(v43 + 8) = *(_BYTE *)(v44 + 8);
  uint64_t v45 = a1 + v42;
  uint64_t v46 = a2 + v42;
  *(_BYTE *)(v45 + 8) = *(_BYTE *)(v46 + 8);
  *(void *)uint64_t v45 = *(void *)v46;
  uint64_t v47 = a3[10];
  uint64_t v48 = a3[11];
  uint64_t v49 = a1 + v47;
  uint64_t v50 = a2 + v47;
  *(void *)uint64_t v49 = *(void *)v50;
  *(_BYTE *)(v49 + 8) = *(_BYTE *)(v50 + 8);
  uint64_t v51 = a1 + v48;
  uint64_t v52 = a2 + v48;
  *(void *)uint64_t v51 = *(void *)v52;
  *(_BYTE *)(v51 + 8) = *(_BYTE *)(v52 + 8);
  uint64_t v53 = a3[12];
  uint64_t v54 = a3[13];
  uint64_t v55 = a1 + v53;
  uint64_t v56 = a2 + v53;
  *(void *)uint64_t v55 = *(void *)v56;
  *(_BYTE *)(v55 + 8) = *(_BYTE *)(v56 + 8);
  uint64_t v57 = a1 + v54;
  uint64_t v58 = a2 + v54;
  *(void *)uint64_t v57 = *(void *)v58;
  *(_BYTE *)(v57 + 8) = *(_BYTE *)(v58 + 8);
  uint64_t v59 = a3[14];
  uint64_t v60 = a3[15];
  uint64_t v61 = a1 + v59;
  uint64_t v62 = a2 + v59;
  *(void *)uint64_t v61 = *(void *)v62;
  *(_BYTE *)(v61 + 8) = *(_BYTE *)(v62 + 8);
  *(_BYTE *)(a1 + v60) = *(_BYTE *)(a2 + v60);
  uint64_t v63 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + v63) = *(_BYTE *)(a2 + v63);
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  return a1;
}

uint64_t sub_1001321B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001321C0);
}

uint64_t sub_1001321C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  uint64_t v11 = sub_100003A0C(&qword_100355538);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }

  unsigned int v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 60));
  if (v14 >= 2) {
    int v15 = ((v14 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v15 = -2;
  }
  if (v15 < 0) {
    int v15 = -1;
  }
  return (v15 + 1);
}

uint64_t sub_100132288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100132294);
}

uint64_t sub_100132294(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
    return v11(v12, a2, a2, v10);
  }

  uint64_t result = sub_100003A0C(&qword_100355538);
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }

  *(_BYTE *)(a1 + *(int *)(a4 + 60)) = a2 + 2;
  return result;
}

void sub_10013233C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    sub_1000119EC( 319LL,  (unint64_t *)&unk_100356B40,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v5 <= 0x3F)
    {
      v6[1] = *(void *)(v4 - 8) + 64LL;
      v6[2] = "\t";
      v6[3] = "\t";
      void v6[4] = "\t";
      void v6[5] = "\t";
      v6[6] = "\t";
      v6[7] = "\t";
      v6[8] = "\t";
      v6[9] = "\t";
      v6[10] = "\t";
      v6[11] = &unk_1002C7E68;
      v6[12] = &unk_1002C7E68;
      v6[13] = &unk_1002C7E68;
      v6[14] = &unk_1002C7E68;
      swift_initStructMetadata(a1, 256LL, 15LL, v6, a1 + 16);
    }
  }

uint64_t sub_1001323F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100132404);
}

uint64_t sub_100132408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100132414);
}

char *sub_100132418(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1LL, v12))
    {
      uint64_t v14 = sub_100003A0C(&qword_100355538);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      v8(v10, v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
    }

    uint64_t v25 = a3[6];
    uint64_t v26 = a3[7];
    uint64_t v27 = &a1[v25];
    uint64_t v28 = &a2[v25];
    *(void *)uint64_t v27 = *(void *)v28;
    v27[8] = v28[8];
    uint64_t v29 = &a1[v26];
    uint64_t v30 = &a2[v26];
    *(void *)uint64_t v29 = *(void *)v30;
    v29[8] = v30[8];
    uint64_t v31 = a3[8];
    uint64_t v32 = a3[9];
    uint64_t v33 = &a1[v31];
    uint64_t v34 = &a2[v31];
    *(void *)uint64_t v33 = *(void *)v34;
    v33[8] = v34[8];
    a1[v32] = a2[v32];
    uint64_t v35 = a3[11];
    a1[a3[10]] = a2[a3[10]];
    a1[v35] = a2[v35];
    a1[a3[12]] = a2[a3[12]];
  }

  return a1;
}

uint64_t sub_1001325FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(void *)uint64_t v25 = *(void *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  uint64_t v27 = a1 + v24;
  uint64_t v28 = a2 + v24;
  *(void *)uint64_t v27 = *(void *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  uint64_t v29 = a3[8];
  uint64_t v30 = a3[9];
  uint64_t v31 = a1 + v29;
  uint64_t v32 = a2 + v29;
  *(void *)uint64_t v31 = *(void *)v32;
  *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
  *(_BYTE *)(a1 + v30) = *(_BYTE *)(a2 + v30);
  uint64_t v33 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v33) = *(_BYTE *)(a2 + v33);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_1001327B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v54 = *((void *)v12 - 1);
  uint64_t v55 = v10;
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v54 + 48);
  LODWORD(v10) = v13(v10, 1LL, v12);
  int v14 = v13((uint64_t)v11, 1LL, v12);
  if ((_DWORD)v10)
  {
    if (!v14)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v55, v11, v6);
      uint64_t v17 = v12[5];
      uint64_t v18 = v55 + v17;
      uint64_t v19 = &v11[v17];
      char v20 = v19[8];
      *(void *)uint64_t v18 = *(void *)v19;
      *(_BYTE *)(v18 + 8) = v20;
      uint64_t v21 = v12[6];
      uint64_t v22 = v55 + v21;
      uint64_t v23 = &v11[v21];
      char v24 = v23[8];
      *(void *)uint64_t v22 = *(void *)v23;
      *(_BYTE *)(v22 + 8) = v24;
      uint64_t v25 = v12[7];
      uint64_t v26 = v55 + v25;
      uint64_t v27 = &v11[v25];
      char v28 = v27[8];
      *(void *)uint64_t v26 = *(void *)v27;
      *(_BYTE *)(v26 + 8) = v28;
      (*(void (**)(uint64_t, void, uint64_t, int *))(v54 + 56))(v55, 0LL, 1LL, v12);
      goto LABEL_9;
    }

    size_t v15 = *(void *)(*(void *)(sub_100003A0C(&qword_100355538) - 8) + 64LL);
    uint64_t v16 = (void *)v55;
  }

  else
  {
    if (!v14)
    {
      v8(v55, (uint64_t)v11, v6);
      uint64_t v29 = v12[5];
      uint64_t v30 = v55 + v29;
      uint64_t v31 = &v11[v29];
      char v32 = v31[8];
      *(void *)uint64_t v30 = *(void *)v31;
      *(_BYTE *)(v30 + 8) = v32;
      uint64_t v33 = v12[6];
      uint64_t v34 = v55 + v33;
      uint64_t v35 = &v11[v33];
      char v36 = v35[8];
      *(void *)uint64_t v34 = *(void *)v35;
      *(_BYTE *)(v34 + 8) = v36;
      uint64_t v37 = v12[7];
      uint64_t v38 = v55 + v37;
      uint64_t v39 = &v11[v37];
      char v40 = v39[8];
      *(void *)uint64_t v38 = *(void *)v39;
      *(_BYTE *)(v38 + 8) = v40;
      goto LABEL_9;
    }

    sub_100004090(v55, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    size_t v15 = *(void *)(*(void *)(sub_100003A0C(&qword_100355538) - 8) + 64LL);
    uint64_t v16 = (void *)v55;
  }

  memcpy(v16, v11, v15);
LABEL_9:
  uint64_t v41 = a3[6];
  uint64_t v42 = a1 + v41;
  uint64_t v43 = (uint64_t *)(a2 + v41);
  uint64_t v44 = *v43;
  *(_BYTE *)(v42 + 8) = *((_BYTE *)v43 + 8);
  *(void *)uint64_t v42 = v44;
  uint64_t v45 = a3[7];
  uint64_t v46 = a1 + v45;
  uint64_t v47 = (uint64_t *)(a2 + v45);
  uint64_t v48 = *v47;
  *(_BYTE *)(v46 + 8) = *((_BYTE *)v47 + 8);
  *(void *)uint64_t v46 = v48;
  uint64_t v49 = a3[8];
  uint64_t v50 = a1 + v49;
  uint64_t v51 = (uint64_t *)(a2 + v49);
  uint64_t v52 = *v51;
  *(_BYTE *)(v50 + 8) = *((_BYTE *)v51 + 8);
  *(void *)uint64_t v50 = v52;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_100132A4C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    size_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)size_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(void *)uint64_t v25 = *(void *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  uint64_t v27 = a1 + v24;
  uint64_t v28 = a2 + v24;
  *(void *)uint64_t v27 = *(void *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  uint64_t v29 = a3[8];
  uint64_t v30 = a3[9];
  uint64_t v31 = a1 + v29;
  uint64_t v32 = a2 + v29;
  *(void *)uint64_t v31 = *(void *)v32;
  *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
  *(_BYTE *)(a1 + v30) = *(_BYTE *)(a2 + v30);
  uint64_t v33 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v33) = *(_BYTE *)(a2 + v33);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_100132C04(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v47 = *((void *)v12 - 1);
  uint64_t v48 = v10;
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v47 + 48);
  LODWORD(v10) = v13(v10, 1LL, v12);
  int v14 = v13((uint64_t)v11, 1LL, v12);
  if ((_DWORD)v10)
  {
    if (!v14)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v48, v11, v6);
      uint64_t v17 = v12[5];
      uint64_t v18 = v48 + v17;
      uint64_t v19 = &v11[v17];
      *(void *)uint64_t v18 = *(void *)v19;
      *(_BYTE *)(v18 + 8) = v19[8];
      uint64_t v20 = v12[6];
      uint64_t v21 = v48 + v20;
      uint64_t v22 = &v11[v20];
      *(void *)uint64_t v21 = *(void *)v22;
      *(_BYTE *)(v21 + 8) = v22[8];
      uint64_t v23 = v12[7];
      uint64_t v24 = v48 + v23;
      uint64_t v25 = &v11[v23];
      *(void *)uint64_t v24 = *(void *)v25;
      *(_BYTE *)(v24 + 8) = v25[8];
      (*(void (**)(uint64_t, void, uint64_t, int *))(v47 + 56))(v48, 0LL, 1LL, v12);
      goto LABEL_9;
    }

    size_t v15 = *(void *)(*(void *)(sub_100003A0C(&qword_100355538) - 8) + 64LL);
    uint64_t v16 = (void *)v48;
  }

  else
  {
    if (!v14)
    {
      v8(v48, (uint64_t)v11, v6);
      uint64_t v26 = v12[5];
      uint64_t v27 = v48 + v26;
      uint64_t v28 = &v11[v26];
      *(void *)uint64_t v27 = *(void *)v28;
      *(_BYTE *)(v27 + 8) = v28[8];
      uint64_t v29 = v12[6];
      uint64_t v30 = v48 + v29;
      uint64_t v31 = &v11[v29];
      *(void *)uint64_t v30 = *(void *)v31;
      *(_BYTE *)(v30 + 8) = v31[8];
      uint64_t v32 = v12[7];
      uint64_t v33 = v48 + v32;
      uint64_t v34 = &v11[v32];
      *(void *)uint64_t v33 = *(void *)v34;
      *(_BYTE *)(v33 + 8) = v34[8];
      goto LABEL_9;
    }

    sub_100004090(v48, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    size_t v15 = *(void *)(*(void *)(sub_100003A0C(&qword_100355538) - 8) + 64LL);
    uint64_t v16 = (void *)v48;
  }

  memcpy(v16, v11, v15);
LABEL_9:
  uint64_t v35 = a3[6];
  uint64_t v36 = a3[7];
  uint64_t v37 = a1 + v35;
  uint64_t v38 = a2 + v35;
  *(void *)uint64_t v37 = *(void *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  uint64_t v39 = a1 + v36;
  uint64_t v40 = a2 + v36;
  *(void *)uint64_t v39 = *(void *)v40;
  *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
  uint64_t v41 = a3[8];
  uint64_t v42 = a3[9];
  uint64_t v43 = a1 + v41;
  uint64_t v44 = a2 + v41;
  *(void *)uint64_t v43 = *(void *)v44;
  *(_BYTE *)(v43 + 8) = *(_BYTE *)(v44 + 8);
  *(_BYTE *)(a1 + v42) = *(_BYTE *)(a2 + v42);
  uint64_t v45 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v45) = *(_BYTE *)(a2 + v45);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_100132E90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100132E9C);
}

uint64_t sub_100132EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100132EAC);
}

void sub_100132EB0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    sub_1000119EC( 319LL,  (unint64_t *)&unk_100356B40,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v5 <= 0x3F)
    {
      v6[1] = *(void *)(v4 - 8) + 64LL;
      v6[2] = "\t";
      v6[3] = "\t";
      void v6[4] = "\t";
      void v6[5] = &unk_1002C7E68;
      v6[6] = &unk_1002C7E68;
      v6[7] = &unk_1002C7E68;
      v6[8] = &unk_1002C7E68;
      swift_initStructMetadata(a1, 256LL, 9LL, v6, a1 + 16);
    }
  }

uint64_t *sub_100132F60(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v16);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    uint64_t v13 = *((void *)v12 - 1);
    int v14 = *(unsigned int (**)(char *, uint64_t, int *))(v13 + 48);
    if (v14(v11, 1LL, v12))
    {
      uint64_t v15 = sub_100003A0C(&qword_100355538);
      memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64LL));
    }

    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      uint64_t v17 = v12[5];
      uint64_t v18 = &v10[v17];
      uint64_t v19 = &v11[v17];
      *(void *)uint64_t v18 = *(void *)v19;
      v18[8] = v19[8];
      uint64_t v20 = v12[6];
      uint64_t v21 = &v10[v20];
      uint64_t v22 = &v11[v20];
      *(void *)uint64_t v21 = *(void *)v22;
      v21[8] = v22[8];
      uint64_t v23 = v12[7];
      uint64_t v24 = &v10[v23];
      uint64_t v25 = &v11[v23];
      *(void *)uint64_t v24 = *(void *)v25;
      v24[8] = v25[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
    }

    uint64_t v26 = a3[6];
    uint64_t v27 = a3[7];
    uint64_t v28 = (char *)a1 + v26;
    uint64_t v29 = (char *)a2 + v26;
    *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
    v28[4] = v29[4];
    uint64_t v30 = (char *)a1 + v27;
    uint64_t v31 = (char *)a2 + v27;
    uint64_t v32 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL);
    uint64_t v33 = *((void *)v32 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v33 + 48))(v31, 1LL, v32))
    {
      uint64_t v34 = sub_100003A0C(&qword_1003555C8);
      memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
    }

    else
    {
      uint64_t v58 = v13;
      uint64_t v59 = v33;
      v8((uint64_t *)v30, (uint64_t *)v31, v7);
      uint64_t v35 = v32[5];
      uint64_t v36 = &v30[v35];
      uint64_t v37 = &v31[v35];
      if (v14(&v31[v35], 1LL, v12))
      {
        uint64_t v38 = sub_100003A0C(&qword_100355538);
        memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64LL));
      }

      else
      {
        v8((uint64_t *)v36, (uint64_t *)v37, v7);
        uint64_t v39 = v12[5];
        uint64_t v40 = &v36[v39];
        uint64_t v41 = &v37[v39];
        *(void *)uint64_t v40 = *(void *)v41;
        v40[8] = v41[8];
        uint64_t v42 = v12[6];
        uint64_t v43 = &v36[v42];
        uint64_t v44 = &v37[v42];
        *(void *)uint64_t v43 = *(void *)v44;
        v43[8] = v44[8];
        uint64_t v45 = v12[7];
        uint64_t v46 = &v36[v45];
        uint64_t v47 = &v37[v45];
        *(void *)uint64_t v46 = *(void *)v47;
        v46[8] = v47[8];
        (*(void (**)(char *, void, uint64_t, int *))(v58 + 56))(v36, 0LL, 1LL, v12);
      }

      uint64_t v48 = v32[6];
      uint64_t v49 = &v30[v48];
      uint64_t v50 = &v31[v48];
      *(void *)uint64_t v49 = *(void *)v50;
      v49[8] = v50[8];
      uint64_t v51 = v32[7];
      uint64_t v52 = &v30[v51];
      uint64_t v53 = &v31[v51];
      v52[8] = v53[8];
      *(void *)uint64_t v52 = *(void *)v53;
      uint64_t v54 = v32[8];
      uint64_t v55 = &v30[v54];
      uint64_t v56 = &v31[v54];
      *(void *)uint64_t v55 = *(void *)v56;
      v55[8] = v56[8];
      v30[v32[9]] = v31[v32[9]];
      v30[v32[10]] = v31[v32[10]];
      v30[v32[11]] = v31[v32[11]];
      v30[v32[12]] = v31[v32[12]];
      (*(void (**)(char *, void, uint64_t, int *))(v59 + 56))(v30, 0LL, 1LL, v32);
    }
  }

  return a1;
}

uint64_t sub_1001332BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v12(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL);
  if (!v7(v5, 1LL, v6)) {
    v12(v5, v4);
  }
  uint64_t v8 = a1 + *(int *)(a2 + 28);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9);
  if (!(_DWORD)result)
  {
    v12(v8, v4);
    uint64_t v11 = v8 + *(int *)(v9 + 20);
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v11, 1LL, v6);
    if (!(_DWORD)result) {
      return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v4);
    }
  }

  return result;
}

uint64_t sub_1001333D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  if (v13(v10, 1LL, v11))
  {
    uint64_t v14 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v15 = v11[5];
    uint64_t v16 = &v9[v15];
    uint64_t v17 = &v10[v15];
    *(void *)uint64_t v16 = *(void *)v17;
    v16[8] = v17[8];
    uint64_t v18 = v11[6];
    uint64_t v19 = &v9[v18];
    uint64_t v20 = &v10[v18];
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = v11[7];
    uint64_t v22 = &v9[v21];
    uint64_t v23 = &v10[v21];
    *(void *)uint64_t v22 = *(void *)v23;
    v22[8] = v23[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v24 = a3[6];
  uint64_t v25 = a3[7];
  uint64_t v26 = a1 + v24;
  uint64_t v27 = a2 + v24;
  *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
  *(_BYTE *)(v26 + 4) = *(_BYTE *)(v27 + 4);
  uint64_t v28 = (char *)(a1 + v25);
  uint64_t v29 = (char *)(a2 + v25);
  uint64_t v30 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL);
  uint64_t v31 = *((void *)v30 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v31 + 48))(v29, 1LL, v30))
  {
    uint64_t v32 = sub_100003A0C(&qword_1003555C8);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64LL));
  }

  else
  {
    uint64_t v56 = v12;
    uint64_t v57 = v31;
    v7((uint64_t)v28, (uint64_t)v29, v6);
    uint64_t v33 = v30[5];
    uint64_t v34 = &v28[v33];
    uint64_t v35 = &v29[v33];
    if (v13(&v29[v33], 1LL, v11))
    {
      uint64_t v36 = sub_100003A0C(&qword_100355538);
      memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64LL));
    }

    else
    {
      v7((uint64_t)v34, (uint64_t)v35, v6);
      uint64_t v37 = v11[5];
      uint64_t v38 = &v34[v37];
      uint64_t v39 = &v35[v37];
      *(void *)uint64_t v38 = *(void *)v39;
      v38[8] = v39[8];
      uint64_t v40 = v11[6];
      uint64_t v41 = &v34[v40];
      uint64_t v42 = &v35[v40];
      *(void *)uint64_t v41 = *(void *)v42;
      v41[8] = v42[8];
      uint64_t v43 = v11[7];
      uint64_t v44 = &v34[v43];
      uint64_t v45 = &v35[v43];
      *(void *)uint64_t v44 = *(void *)v45;
      v44[8] = v45[8];
      (*(void (**)(char *, void, uint64_t, int *))(v56 + 56))(v34, 0LL, 1LL, v11);
    }

    uint64_t v46 = v30[6];
    uint64_t v47 = &v28[v46];
    uint64_t v48 = &v29[v46];
    *(void *)uint64_t v47 = *(void *)v48;
    v47[8] = v48[8];
    uint64_t v49 = v30[7];
    uint64_t v50 = &v28[v49];
    uint64_t v51 = &v29[v49];
    v50[8] = v51[8];
    *(void *)uint64_t v50 = *(void *)v51;
    uint64_t v52 = v30[8];
    uint64_t v53 = &v28[v52];
    uint64_t v54 = &v29[v52];
    *(void *)uint64_t v53 = *(void *)v54;
    v53[8] = v54[8];
    v28[v30[9]] = v29[v30[9]];
    v28[v30[10]] = v29[v30[10]];
    v28[v30[11]] = v29[v30[11]];
    v28[v30[12]] = v29[v30[12]];
    (*(void (**)(char *, void, uint64_t, int *))(v57 + 56))(v28, 0LL, 1LL, v30);
  }

  return a1;
}

uint64_t sub_100133708(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  __dst = *(void **)(v6 - 8);
  uint64_t v126 = (void (*)(uint64_t, uint64_t, uint64_t))__dst[3];
  v126(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(void))(v11 + 48);
  int v13 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v8, 1LL, v10);
  int v14 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v9, 1LL, v10);
  uint64_t v125 = v11;
  if (v13)
  {
    if (!v14)
    {
      ((void (*)(char *, char *, uint64_t))__dst[2])(v8, v9, v6);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      char v18 = v17[8];
      *(void *)uint64_t v16 = *(void *)v17;
      v16[8] = v18;
      uint64_t v19 = v10[6];
      uint64_t v20 = &v8[v19];
      uint64_t v21 = &v9[v19];
      char v22 = v21[8];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v22;
      uint64_t v23 = v10[7];
      uint64_t v24 = &v8[v23];
      uint64_t v25 = &v9[v23];
      char v26 = v25[8];
      *(void *)uint64_t v24 = *(void *)v25;
      v24[8] = v26;
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    sub_100004090((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v27 = sub_100003A0C(&qword_100355538);
    memcpy(v8, v9, *(void *)(*(void *)(v27 - 8) + 64LL));
    goto LABEL_7;
  }

  v126((uint64_t)v8, (uint64_t)v9, v6);
  uint64_t v45 = v10[5];
  uint64_t v46 = &v8[v45];
  uint64_t v47 = &v9[v45];
  char v48 = v47[8];
  *(void *)uint64_t v46 = *(void *)v47;
  v46[8] = v48;
  uint64_t v49 = v10[6];
  uint64_t v50 = &v8[v49];
  uint64_t v51 = &v9[v49];
  char v52 = v51[8];
  *(void *)uint64_t v50 = *(void *)v51;
  v50[8] = v52;
  uint64_t v53 = v10[7];
  uint64_t v54 = &v8[v53];
  uint64_t v55 = &v9[v53];
  char v56 = v55[8];
  *(void *)uint64_t v54 = *(void *)v55;
  v54[8] = v56;
LABEL_7:
  uint64_t v28 = a3[6];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = (int *)(a2 + v28);
  int v31 = *v30;
  *(_BYTE *)(v29 + 4) = *((_BYTE *)v30 + 4);
  *(_DWORD *)uint64_t v29 = v31;
  uint64_t v32 = a3[7];
  uint64_t v33 = (_BYTE *)(a1 + v32);
  uint64_t v34 = (_BYTE *)(a2 + v32);
  uint64_t v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL);
  uint64_t v36 = *((void *)v35 - 1);
  uint64_t v37 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v36 + 48);
  int v38 = v37(v33, 1LL, v35);
  int v39 = v37(v34, 1LL, v35);
  if (!v38)
  {
    if (v39)
    {
      sub_100004090((uint64_t)v33, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
      goto LABEL_13;
    }

    v126((uint64_t)v33, (uint64_t)v34, v6);
    uint64_t v57 = v35[5];
    uint64_t v58 = &v34[v57];
    uint64_t v124 = (uint64_t)&v33[v57];
    int v59 = v12();
    int v60 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v58, 1LL, v10);
    if (v59)
    {
      if (!v60)
      {
        ((void (*)(uint64_t, char *, uint64_t))__dst[2])(v124, v58, v6);
        uint64_t v87 = v10[5];
        uint64_t v88 = v124 + v87;
        uint64_t v89 = &v58[v87];
        char v90 = v89[8];
        *(void *)uint64_t v88 = *(void *)v89;
        *(_BYTE *)(v88 + 8) = v90;
        uint64_t v91 = v10[6];
        uint64_t v92 = v124 + v91;
        uint64_t v93 = &v58[v91];
        char v94 = v93[8];
        *(void *)uint64_t v92 = *(void *)v93;
        *(_BYTE *)(v92 + 8) = v94;
        uint64_t v95 = v10[7];
        uint64_t v96 = v124 + v95;
        uint64_t v97 = &v58[v95];
        char v98 = v97[8];
        *(void *)uint64_t v96 = *(void *)v97;
        *(_BYTE *)(v96 + 8) = v98;
        (*(void (**)(uint64_t, void, uint64_t, int *))(v125 + 56))(v124, 0LL, 1LL, v10);
        goto LABEL_25;
      }

      size_t v61 = *(void *)(*(void *)(sub_100003A0C(&qword_100355538) - 8) + 64LL);
      uint64_t v62 = (void *)v124;
    }

    else
    {
      if (!v60)
      {
        v126(v124, (uint64_t)v58, v6);
        uint64_t v99 = v10[5];
        uint64_t v100 = v124 + v99;
        uint64_t v101 = &v58[v99];
        char v102 = v101[8];
        *(void *)uint64_t v100 = *(void *)v101;
        *(_BYTE *)(v100 + 8) = v102;
        uint64_t v103 = v10[6];
        uint64_t v104 = v124 + v103;
        uint64_t v105 = &v58[v103];
        char v106 = v105[8];
        *(void *)uint64_t v104 = *(void *)v105;
        *(_BYTE *)(v104 + 8) = v106;
        uint64_t v107 = v10[7];
        uint64_t v108 = v124 + v107;
        uint64_t v109 = &v58[v107];
        char v110 = v109[8];
        *(void *)uint64_t v108 = *(void *)v109;
        *(_BYTE *)(v108 + 8) = v110;
        goto LABEL_25;
      }

      sub_100004090(v124, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      size_t v61 = *(void *)(*(void *)(sub_100003A0C(&qword_100355538) - 8) + 64LL);
      uint64_t v62 = (void *)v124;
    }

    memcpy(v62, v58, v61);
LABEL_25:
    uint64_t v111 = v35[6];
    int v112 = &v33[v111];
    uint64_t v113 = &v34[v111];
    uint64_t v114 = *(void *)v113;
    v112[8] = v113[8];
    *(void *)int v112 = v114;
    uint64_t v115 = v35[7];
    int v116 = &v33[v115];
    uint64_t v117 = &v34[v115];
    uint64_t v118 = *(void *)v117;
    v116[8] = v117[8];
    *(void *)int v116 = v118;
    uint64_t v119 = v35[8];
    int v120 = &v33[v119];
    uint64_t v121 = &v34[v119];
    uint64_t v122 = *(void *)v121;
    v120[8] = v121[8];
    *(void *)int v120 = v122;
    v33[v35[9]] = v34[v35[9]];
    v33[v35[10]] = v34[v35[10]];
    v33[v35[11]] = v34[v35[11]];
    v33[v35[12]] = v34[v35[12]];
    return a1;
  }

  if (v39)
  {
LABEL_13:
    uint64_t v44 = sub_100003A0C(&qword_1003555C8);
    memcpy(v33, v34, *(void *)(*(void *)(v44 - 8) + 64LL));
    return a1;
  }

  uint64_t v40 = (void (*)(char *, char *, uint64_t))__dst[2];
  v40(v33, v34, v6);
  uint64_t v41 = v35[5];
  __dsta = &v33[v41];
  uint64_t v42 = &v34[v41];
  if (((unsigned int (*)(_BYTE *, uint64_t, int *))v12)(&v34[v41], 1LL, v10))
  {
    uint64_t v43 = sub_100003A0C(&qword_100355538);
    memcpy(__dsta, v42, *(void *)(*(void *)(v43 - 8) + 64LL));
  }

  else
  {
    v40(__dsta, v42, v6);
    uint64_t v63 = v10[5];
    uint64_t v64 = &__dsta[v63];
    uint64_t v65 = &v42[v63];
    char v66 = v65[8];
    *(void *)uint64_t v64 = *(void *)v65;
    v64[8] = v66;
    uint64_t v67 = v10[6];
    uint64_t v68 = &__dsta[v67];
    uint64_t v69 = &v42[v67];
    char v70 = v69[8];
    *(void *)uint64_t v68 = *(void *)v69;
    v68[8] = v70;
    uint64_t v71 = v10[7];
    uint64_t v72 = &__dsta[v71];
    uint64_t v73 = &v42[v71];
    char v74 = v73[8];
    *(void *)uint64_t v72 = *(void *)v73;
    v72[8] = v74;
    (*(void (**)(char *, void, uint64_t, int *))(v125 + 56))(__dsta, 0LL, 1LL, v10);
  }

  uint64_t v75 = v35[6];
  uint64_t v76 = &v33[v75];
  uint64_t v77 = &v34[v75];
  uint64_t v78 = *(void *)v77;
  v76[8] = v77[8];
  *(void *)uint64_t v76 = v78;
  uint64_t v79 = v35[7];
  uint64_t v80 = &v33[v79];
  uint64_t v81 = &v34[v79];
  uint64_t v82 = *(void *)v81;
  v80[8] = v81[8];
  *(void *)uint64_t v80 = v82;
  uint64_t v83 = v35[8];
  char v84 = &v33[v83];
  uint64_t v85 = &v34[v83];
  uint64_t v86 = *(void *)v85;
  v84[8] = v85[8];
  *(void *)char v84 = v86;
  v33[v35[9]] = v34[v35[9]];
  v33[v35[10]] = v34[v35[10]];
  v33[v35[11]] = v34[v35[11]];
  v33[v35[12]] = v34[v35[12]];
  (*(void (**)(_BYTE *, void, uint64_t, int *))(v36 + 56))(v33, 0LL, 1LL, v35);
  return a1;
}

uint64_t sub_100133D44(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  int v13 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  if (v13(v10, 1LL, v11))
  {
    uint64_t v14 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v15 = v11[5];
    uint64_t v16 = &v9[v15];
    uint64_t v17 = &v10[v15];
    *(void *)uint64_t v16 = *(void *)v17;
    v16[8] = v17[8];
    uint64_t v18 = v11[6];
    uint64_t v19 = &v9[v18];
    uint64_t v20 = &v10[v18];
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = v11[7];
    char v22 = &v9[v21];
    uint64_t v23 = &v10[v21];
    *(void *)char v22 = *(void *)v23;
    v22[8] = v23[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v24 = a3[6];
  uint64_t v25 = a3[7];
  uint64_t v26 = a1 + v24;
  uint64_t v27 = a2 + v24;
  *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
  *(_BYTE *)(v26 + 4) = *(_BYTE *)(v27 + 4);
  uint64_t v28 = (char *)(a1 + v25);
  uint64_t v29 = (char *)(a2 + v25);
  uint64_t v30 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL);
  uint64_t v31 = *((void *)v30 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v31 + 48))(v29, 1LL, v30))
  {
    uint64_t v32 = sub_100003A0C(&qword_1003555C8);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64LL));
  }

  else
  {
    uint64_t v56 = v12;
    uint64_t v57 = v31;
    v7((uint64_t)v28, (uint64_t)v29, v6);
    uint64_t v33 = v30[5];
    uint64_t v34 = &v28[v33];
    uint64_t v35 = &v29[v33];
    if (v13(&v29[v33], 1LL, v11))
    {
      uint64_t v36 = sub_100003A0C(&qword_100355538);
      memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64LL));
    }

    else
    {
      v7((uint64_t)v34, (uint64_t)v35, v6);
      uint64_t v37 = v11[5];
      int v38 = &v34[v37];
      int v39 = &v35[v37];
      *(void *)int v38 = *(void *)v39;
      v38[8] = v39[8];
      uint64_t v40 = v11[6];
      uint64_t v41 = &v34[v40];
      uint64_t v42 = &v35[v40];
      *(void *)uint64_t v41 = *(void *)v42;
      v41[8] = v42[8];
      uint64_t v43 = v11[7];
      uint64_t v44 = &v34[v43];
      uint64_t v45 = &v35[v43];
      *(void *)uint64_t v44 = *(void *)v45;
      v44[8] = v45[8];
      (*(void (**)(char *, void, uint64_t, int *))(v56 + 56))(v34, 0LL, 1LL, v11);
    }

    uint64_t v46 = v30[6];
    uint64_t v47 = &v28[v46];
    char v48 = &v29[v46];
    *(void *)uint64_t v47 = *(void *)v48;
    v47[8] = v48[8];
    uint64_t v49 = v30[7];
    uint64_t v50 = &v28[v49];
    uint64_t v51 = &v29[v49];
    v50[8] = v51[8];
    *(void *)uint64_t v50 = *(void *)v51;
    uint64_t v52 = v30[8];
    uint64_t v53 = &v28[v52];
    uint64_t v54 = &v29[v52];
    *(void *)uint64_t v53 = *(void *)v54;
    v53[8] = v54[8];
    v28[v30[9]] = v29[v30[9]];
    v28[v30[10]] = v29[v30[10]];
    v28[v30[11]] = v29[v30[11]];
    v28[v30[12]] = v29[v30[12]];
    (*(void (**)(char *, void, uint64_t, int *))(v57 + 56))(v28, 0LL, 1LL, v30);
  }

  return a1;
}

uint64_t sub_100134074(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  __dst = *(void **)(v6 - 8);
  uint64_t v104 = (void (*)(uint64_t, uint64_t, uint64_t))__dst[5];
  v104(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(void))(v11 + 48);
  int v13 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v8, 1LL, v10);
  int v14 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v9, 1LL, v10);
  uint64_t v103 = v11;
  if (v13)
  {
    if (!v14)
    {
      ((void (*)(char *, char *, uint64_t))__dst[4])(v8, v9, v6);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      *(void *)uint64_t v16 = *(void *)v17;
      v16[8] = v17[8];
      uint64_t v18 = v10[6];
      uint64_t v19 = &v8[v18];
      uint64_t v20 = &v9[v18];
      *(void *)uint64_t v19 = *(void *)v20;
      v19[8] = v20[8];
      uint64_t v21 = v10[7];
      char v22 = &v8[v21];
      uint64_t v23 = &v9[v21];
      *(void *)char v22 = *(void *)v23;
      v22[8] = v23[8];
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    sub_100004090((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v24 = sub_100003A0C(&qword_100355538);
    memcpy(v8, v9, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_7;
  }

  v104((uint64_t)v8, (uint64_t)v9, v6);
  uint64_t v41 = v10[5];
  uint64_t v42 = &v8[v41];
  uint64_t v43 = &v9[v41];
  *(void *)uint64_t v42 = *(void *)v43;
  v42[8] = v43[8];
  uint64_t v44 = v10[6];
  uint64_t v45 = &v8[v44];
  uint64_t v46 = &v9[v44];
  *(void *)uint64_t v45 = *(void *)v46;
  v45[8] = v46[8];
  uint64_t v47 = v10[7];
  char v48 = &v8[v47];
  uint64_t v49 = &v9[v47];
  *(void *)char v48 = *(void *)v49;
  v48[8] = v49[8];
LABEL_7:
  uint64_t v25 = a3[6];
  uint64_t v26 = a3[7];
  uint64_t v27 = a1 + v25;
  uint64_t v28 = a2 + v25;
  *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
  *(_BYTE *)(v27 + 4) = *(_BYTE *)(v28 + 4);
  uint64_t v29 = (_BYTE *)(a1 + v26);
  uint64_t v30 = (_BYTE *)(a2 + v26);
  uint64_t v31 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0LL);
  uint64_t v32 = *((void *)v31 - 1);
  uint64_t v33 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v32 + 48);
  int v34 = v33(v29, 1LL, v31);
  int v35 = v33(v30, 1LL, v31);
  if (!v34)
  {
    if (v35)
    {
      sub_100004090((uint64_t)v29, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
      goto LABEL_13;
    }

    v104((uint64_t)v29, (uint64_t)v30, v6);
    uint64_t v50 = v31[5];
    uint64_t v51 = &v30[v50];
    uint64_t v102 = (uint64_t)&v29[v50];
    int v52 = v12();
    int v53 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v51, 1LL, v10);
    if (v52)
    {
      if (!v53)
      {
        ((void (*)(uint64_t, char *, uint64_t))__dst[4])(v102, v51, v6);
        uint64_t v74 = v10[5];
        uint64_t v75 = v102 + v74;
        uint64_t v76 = &v51[v74];
        *(void *)uint64_t v75 = *(void *)v76;
        *(_BYTE *)(v75 + 8) = v76[8];
        uint64_t v77 = v10[6];
        uint64_t v78 = v102 + v77;
        uint64_t v79 = &v51[v77];
        *(void *)uint64_t v78 = *(void *)v79;
        *(_BYTE *)(v78 + 8) = v79[8];
        uint64_t v80 = v10[7];
        uint64_t v81 = v102 + v80;
        uint64_t v82 = &v51[v80];
        *(void *)uint64_t v81 = *(void *)v82;
        *(_BYTE *)(v81 + 8) = v82[8];
        (*(void (**)(uint64_t, void, uint64_t, int *))(v103 + 56))(v102, 0LL, 1LL, v10);
        goto LABEL_25;
      }

      size_t v54 = *(void *)(*(void *)(sub_100003A0C(&qword_100355538) - 8) + 64LL);
      uint64_t v55 = (void *)v102;
    }

    else
    {
      if (!v53)
      {
        v104(v102, (uint64_t)v51, v6);
        uint64_t v83 = v10[5];
        uint64_t v84 = v102 + v83;
        uint64_t v85 = &v51[v83];
        *(void *)uint64_t v84 = *(void *)v85;
        *(_BYTE *)(v84 + 8) = v85[8];
        uint64_t v86 = v10[6];
        uint64_t v87 = v102 + v86;
        uint64_t v88 = &v51[v86];
        *(void *)uint64_t v87 = *(void *)v88;
        *(_BYTE *)(v87 + 8) = v88[8];
        uint64_t v89 = v10[7];
        uint64_t v90 = v102 + v89;
        uint64_t v91 = &v51[v89];
        *(void *)uint64_t v90 = *(void *)v91;
        *(_BYTE *)(v90 + 8) = v91[8];
        goto LABEL_25;
      }

      sub_100004090(v102, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      size_t v54 = *(void *)(*(void *)(sub_100003A0C(&qword_100355538) - 8) + 64LL);
      uint64_t v55 = (void *)v102;
    }

    memcpy(v55, v51, v54);
LABEL_25:
    uint64_t v92 = v31[6];
    uint64_t v93 = &v29[v92];
    char v94 = &v30[v92];
    *(void *)uint64_t v93 = *(void *)v94;
    v93[8] = v94[8];
    uint64_t v95 = v31[7];
    uint64_t v96 = &v29[v95];
    uint64_t v97 = &v30[v95];
    v96[8] = v97[8];
    *(void *)uint64_t v96 = *(void *)v97;
    uint64_t v98 = v31[8];
    uint64_t v99 = &v29[v98];
    uint64_t v100 = &v30[v98];
    *(void *)uint64_t v99 = *(void *)v100;
    v99[8] = v100[8];
    v29[v31[9]] = v30[v31[9]];
    v29[v31[10]] = v30[v31[10]];
    v29[v31[11]] = v30[v31[11]];
    v29[v31[12]] = v30[v31[12]];
    return a1;
  }

  if (v35)
  {
LABEL_13:
    uint64_t v40 = sub_100003A0C(&qword_1003555C8);
    memcpy(v29, v30, *(void *)(*(void *)(v40 - 8) + 64LL));
    return a1;
  }

  uint64_t v36 = (void (*)(char *, char *, uint64_t))__dst[4];
  v36(v29, v30, v6);
  uint64_t v37 = v31[5];
  __dsta = &v29[v37];
  int v38 = &v30[v37];
  if (((unsigned int (*)(_BYTE *, uint64_t, int *))v12)(&v30[v37], 1LL, v10))
  {
    uint64_t v39 = sub_100003A0C(&qword_100355538);
    memcpy(__dsta, v38, *(void *)(*(void *)(v39 - 8) + 64LL));
  }

  else
  {
    v36(__dsta, v38, v6);
    uint64_t v56 = v10[5];
    uint64_t v57 = &__dsta[v56];
    uint64_t v58 = &v38[v56];
    *(void *)uint64_t v57 = *(void *)v58;
    v57[8] = v58[8];
    uint64_t v59 = v10[6];
    int v60 = &__dsta[v59];
    size_t v61 = &v38[v59];
    *(void *)int v60 = *(void *)v61;
    v60[8] = v61[8];
    uint64_t v62 = v10[7];
    uint64_t v63 = &__dsta[v62];
    uint64_t v64 = &v38[v62];
    *(void *)uint64_t v63 = *(void *)v64;
    v63[8] = v64[8];
    (*(void (**)(char *, void, uint64_t, int *))(v103 + 56))(__dsta, 0LL, 1LL, v10);
  }

  uint64_t v65 = v31[6];
  char v66 = &v29[v65];
  uint64_t v67 = &v30[v65];
  *(void *)char v66 = *(void *)v67;
  v66[8] = v67[8];
  uint64_t v68 = v31[7];
  uint64_t v69 = &v29[v68];
  char v70 = &v30[v68];
  v69[8] = v70[8];
  *(void *)uint64_t v69 = *(void *)v70;
  uint64_t v71 = v31[8];
  uint64_t v72 = &v29[v71];
  uint64_t v73 = &v30[v71];
  *(void *)uint64_t v72 = *(void *)v73;
  v72[8] = v73[8];
  v29[v31[9]] = v30[v31[9]];
  v29[v31[10]] = v30[v31[10]];
  v29[v31[11]] = v30[v31[11]];
  v29[v31[12]] = v30[v31[12]];
  (*(void (**)(_BYTE *, void, uint64_t, int *))(v32 + 56))(v29, 0LL, 1LL, v31);
  return a1;
}

uint64_t sub_1001346AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001346B8);
}

uint64_t sub_1001346B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100139E78(a1, a2, a3, &qword_1003555C8);
}

uint64_t sub_1001346C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001346D0);
}

uint64_t sub_1001346D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100139F30(a1, a2, a3, a4, &qword_1003555C8);
}

void sub_1001346DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1001346F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001346FC);
}

uint64_t sub_100134700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013470C);
}

uint64_t *sub_100134710(uint64_t *a1, uint64_t *a2, int *a3)
{
  return sub_100134724( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &qword_1003555D0);
}

uint64_t *sub_100134724(uint64_t *a1, uint64_t *a2, int *a3, uint64_t (*a4)(void), uint64_t *a5)
{
  int v7 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v7 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v7 + 16LL) & ~(unint64_t)v7));
    swift_retain(v18);
  }

  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v11 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16LL);
    v11(a1, a2, v10);
    uint64_t v12 = a3[5];
    int v13 = (char *)a1 + v12;
    int v14 = (char *)a2 + v12;
    uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    uint64_t v16 = *((void *)v15 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1LL, v15))
    {
      uint64_t v17 = sub_100003A0C(&qword_100355538);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
    }

    else
    {
      v11((uint64_t *)v13, (uint64_t *)v14, v10);
      uint64_t v19 = v15[5];
      uint64_t v20 = &v13[v19];
      uint64_t v21 = &v14[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v15[6];
      uint64_t v23 = &v13[v22];
      uint64_t v24 = &v14[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      uint64_t v25 = v15[7];
      uint64_t v26 = &v13[v25];
      uint64_t v27 = &v14[v25];
      *(void *)uint64_t v26 = *(void *)v27;
      v26[8] = v27[8];
      (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0LL, 1LL, v15);
    }

    uint64_t v28 = a3[6];
    uint64_t v29 = a3[7];
    uint64_t v30 = (char *)a1 + v28;
    uint64_t v31 = (char *)a2 + v28;
    *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
    v30[4] = v31[4];
    uint64_t v32 = (char *)a1 + v29;
    uint64_t v33 = (char *)a2 + v29;
    uint64_t v34 = a4(0LL);
    uint64_t v35 = *(void *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1LL, v34))
    {
      uint64_t v36 = sub_100003A0C(a5);
      memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64LL));
    }

    else
    {
      v11((uint64_t *)v32, (uint64_t *)v33, v10);
      uint64_t v37 = *(int *)(v34 + 20);
      uint64_t v38 = *(void *)&v33[v37];
      *(void *)&v32[v37] = v38;
      uint64_t v39 = *(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56);
      swift_retain(v38);
      v39(v32, 0LL, 1LL, v34);
    }
  }

  return a1;
}

uint64_t sub_100134944(uint64_t a1, uint64_t a2)
{
  return sub_100134950(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

uint64_t sub_100134950(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  int v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL);
  v7(a1, v6);
  uint64_t v8 = a1 + *(int *)(a2 + 20);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v10 = a1 + *(int *)(a2 + 28);
  uint64_t v11 = a3(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v10, 1LL, v11);
  if (!(_DWORD)result)
  {
    v7(v10, v6);
    return swift_release(*(void *)(v10 + *(int *)(v11 + 20)));
  }

  return result;
}

uint64_t sub_100134A34(uint64_t a1, uint64_t a2, int *a3)
{
  return sub_100134A48( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &qword_1003555D0);
}

uint64_t sub_100134A48(uint64_t a1, uint64_t a2, int *a3, uint64_t (*a4)(void), uint64_t *a5)
{
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL);
  v10(a1, a2, v9);
  uint64_t v11 = a3[5];
  uint64_t v12 = (char *)(a1 + v11);
  int v13 = (char *)(a2 + v11);
  int v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100003A0C(&qword_100355538);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    v10((uint64_t)v12, (uint64_t)v13, v9);
    uint64_t v17 = v14[5];
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v14[6];
    uint64_t v21 = &v12[v20];
    uint64_t v22 = &v13[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = v14[7];
    uint64_t v24 = &v12[v23];
    uint64_t v25 = &v13[v23];
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v26 = a3[6];
  uint64_t v27 = a3[7];
  uint64_t v28 = a1 + v26;
  uint64_t v29 = a2 + v26;
  *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
  *(_BYTE *)(v28 + 4) = *(_BYTE *)(v29 + 4);
  uint64_t v30 = (char *)(a1 + v27);
  uint64_t v31 = (char *)(a2 + v27);
  uint64_t v32 = a4(0LL);
  uint64_t v33 = *(void *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1LL, v32))
  {
    uint64_t v34 = sub_100003A0C(a5);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
  }

  else
  {
    v10((uint64_t)v30, (uint64_t)v31, v9);
    uint64_t v35 = *(int *)(v32 + 20);
    uint64_t v36 = *(void *)&v31[v35];
    *(void *)&v30[v35] = v36;
    uint64_t v37 = *(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56);
    swift_retain(v36);
    v37(v30, 0LL, 1LL, v32);
  }

  return a1;
}

uint64_t sub_100134C3C(uint64_t a1, uint64_t a2, int *a3)
{
  return sub_100139840( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &qword_1003555D0);
}

uint64_t sub_100134C50(uint64_t a1, uint64_t a2, int *a3)
{
  return sub_100134C64( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &qword_1003555D0);
}

uint64_t sub_100134C64(uint64_t a1, uint64_t a2, int *a3, uint64_t (*a4)(void), uint64_t *a5)
{
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(a1, a2, v9);
  uint64_t v11 = a3[5];
  uint64_t v12 = (char *)(a1 + v11);
  int v13 = (char *)(a2 + v11);
  int v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100003A0C(&qword_100355538);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    v10((uint64_t)v12, (uint64_t)v13, v9);
    uint64_t v17 = v14[5];
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v14[6];
    uint64_t v21 = &v12[v20];
    uint64_t v22 = &v13[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = v14[7];
    uint64_t v24 = &v12[v23];
    uint64_t v25 = &v13[v23];
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v26 = a3[6];
  uint64_t v27 = a3[7];
  uint64_t v28 = a1 + v26;
  uint64_t v29 = a2 + v26;
  *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
  *(_BYTE *)(v28 + 4) = *(_BYTE *)(v29 + 4);
  uint64_t v30 = (char *)(a1 + v27);
  uint64_t v31 = (char *)(a2 + v27);
  uint64_t v32 = a4(0LL);
  uint64_t v33 = *(void *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1LL, v32))
  {
    uint64_t v34 = sub_100003A0C(a5);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
  }

  else
  {
    v10((uint64_t)v30, (uint64_t)v31, v9);
    *(void *)&v30[*(int *)(v32 + 20)] = *(void *)&v31[*(int *)(v32 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0LL, 1LL, v32);
  }

  return a1;
}

uint64_t sub_100134E54(uint64_t a1, uint64_t a2, int *a3)
{
  return sub_100139B6C( a1,  a2,  a3,  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance,  &qword_1003555D0);
}

uint64_t sub_100134E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100134E74);
}

uint64_t sub_100134E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100139E78(a1, a2, a3, &qword_1003555D0);
}

uint64_t sub_100134E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100134E8C);
}

uint64_t sub_100134E8C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100139F30(a1, a2, a3, a4, &qword_1003555D0);
}

void sub_100134E98(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100134EAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100134EB8);
}

uint64_t sub_100134EBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100134EC8);
}

uint64_t sub_100134ECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10012CCD8(a1, a2, a3, (uint64_t)"\t", (uint64_t)"\t", (uint64_t)"\t", (uint64_t)"\t");
}

void *sub_100134EE4(void *a1, char *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *(void *)a2;
  *a1 = *(void *)a2;
  if ((v3 & 0x20000) != 0)
  {
    int v7 = (void *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain(v4);
  }

  else
  {
    int v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = &a2[v8];
    uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    int v14 = (char *)v7 + v13;
    uint64_t v15 = &a2[v13];
    uint64_t v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    uint64_t v17 = *((void *)v16 - 1);
    uint64_t v18 = *(unsigned int (**)(char *, uint64_t, int *))(v17 + 48);
    if (v18(v15, 1LL, v16))
    {
      uint64_t v19 = sub_100003A0C(&qword_100355538);
      memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64LL));
    }

    else
    {
      v12(v14, v15, v11);
      uint64_t v20 = v16[5];
      uint64_t v21 = &v14[v20];
      uint64_t v22 = &v15[v20];
      *(void *)uint64_t v21 = *(void *)v22;
      v21[8] = v22[8];
      uint64_t v23 = v16[6];
      uint64_t v24 = &v14[v23];
      uint64_t v25 = &v15[v23];
      *(void *)uint64_t v24 = *(void *)v25;
      v24[8] = v25[8];
      uint64_t v26 = v16[7];
      uint64_t v27 = &v14[v26];
      uint64_t v28 = &v15[v26];
      *(void *)uint64_t v27 = *(void *)v28;
      v27[8] = v28[8];
      (*(void (**)(char *, void, uint64_t, int *))(v17 + 56))(v14, 0LL, 1LL, v16);
    }

    uint64_t v29 = a3[7];
    uint64_t v30 = (char *)v7 + v29;
    uint64_t v31 = &a2[v29];
    if (v18(&a2[v29], 1LL, v16))
    {
      uint64_t v32 = sub_100003A0C(&qword_100355538);
      memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64LL));
    }

    else
    {
      v12(v30, v31, v11);
      uint64_t v33 = v16[5];
      uint64_t v34 = &v30[v33];
      uint64_t v35 = &v31[v33];
      *(void *)uint64_t v34 = *(void *)v35;
      v34[8] = v35[8];
      uint64_t v36 = v16[6];
      uint64_t v37 = &v30[v36];
      uint64_t v38 = &v31[v36];
      *(void *)uint64_t v37 = *(void *)v38;
      v37[8] = v38[8];
      uint64_t v39 = v16[7];
      uint64_t v40 = &v30[v39];
      uint64_t v41 = &v31[v39];
      *(void *)uint64_t v40 = *(void *)v41;
      v40[8] = v41[8];
      (*(void (**)(char *, void, uint64_t, int *))(v17 + 56))(v30, 0LL, 1LL, v16);
    }

    uint64_t v42 = a3[9];
    *((_BYTE *)v7 + a3[8]) = a2[a3[8]];
    *((_BYTE *)v7 + v42) = a2[v42];
  }

  return v7;
}

uint64_t sub_10013513C(void *a1, int *a2)
{
  uint64_t v4 = (char *)a1 + a2[5];
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v11(v4, v5);
  uint64_t v6 = (char *)a1 + a2[6];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL);
  if (!v8(v6, 1LL, v7)) {
    v11(v6, v5);
  }
  uint64_t v9 = (char *)a1 + a2[7];
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v8)(v9, 1LL, v7);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(char *, uint64_t))v11)(v9, v5);
  }
  return result;
}

void *sub_100135228(void *a1, char *a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  *a1 = *(void *)a2;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = &a2[v7];
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)a1 + v12;
  int v14 = &a2[v12];
  uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v16 = *((void *)v15 - 1);
  uint64_t v17 = *(unsigned int (**)(char *, uint64_t, int *))(v16 + 48);
  if (v17(v14, 1LL, v15))
  {
    uint64_t v18 = sub_100003A0C(&qword_100355538);
    memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    v11(v13, v14, v10);
    uint64_t v19 = v15[5];
    uint64_t v20 = &v13[v19];
    uint64_t v21 = &v14[v19];
    *(void *)uint64_t v20 = *(void *)v21;
    v20[8] = v21[8];
    uint64_t v22 = v15[6];
    uint64_t v23 = &v13[v22];
    uint64_t v24 = &v14[v22];
    *(void *)uint64_t v23 = *(void *)v24;
    v23[8] = v24[8];
    uint64_t v25 = v15[7];
    uint64_t v26 = &v13[v25];
    uint64_t v27 = &v14[v25];
    *(void *)uint64_t v26 = *(void *)v27;
    v26[8] = v27[8];
    (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0LL, 1LL, v15);
  }

  uint64_t v28 = a3[7];
  uint64_t v29 = (char *)a1 + v28;
  uint64_t v30 = &a2[v28];
  if (v17(&a2[v28], 1LL, v15))
  {
    uint64_t v31 = sub_100003A0C(&qword_100355538);
    memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64LL));
  }

  else
  {
    v11(v29, v30, v10);
    uint64_t v32 = v15[5];
    uint64_t v33 = &v29[v32];
    uint64_t v34 = &v30[v32];
    *(void *)uint64_t v33 = *(void *)v34;
    v33[8] = v34[8];
    uint64_t v35 = v15[6];
    uint64_t v36 = &v29[v35];
    uint64_t v37 = &v30[v35];
    *(void *)uint64_t v36 = *(void *)v37;
    v36[8] = v37[8];
    uint64_t v38 = v15[7];
    uint64_t v39 = &v29[v38];
    uint64_t v40 = &v30[v38];
    *(void *)uint64_t v39 = *(void *)v40;
    v39[8] = v40[8];
    (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v29, 0LL, 1LL, v15);
  }

  uint64_t v41 = a3[9];
  *((_BYTE *)a1 + a3[8]) = a2[a3[8]];
  *((_BYTE *)a1 + v41) = a2[v41];
  return a1;
}

char *sub_100135458(char *a1, void *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *(void *)a1;
  *(void *)a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v76 = *(void (**)(char *, char *, uint64_t))(v12 + 24);
  v76(v9, v10, v11);
  uint64_t v13 = a3[6];
  int v14 = &a1[v13];
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v77 = *((void *)v16 - 1);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, int *))(v77 + 48);
  int v18 = v17(v14, 1LL, v16);
  int v19 = v17(v15, 1LL, v16);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v15, v11);
      uint64_t v20 = v16[5];
      uint64_t v21 = &v14[v20];
      uint64_t v22 = &v15[v20];
      char v23 = v22[8];
      *(void *)uint64_t v21 = *(void *)v22;
      v21[8] = v23;
      uint64_t v24 = v16[6];
      uint64_t v25 = &v14[v24];
      uint64_t v26 = &v15[v24];
      char v27 = v26[8];
      *(void *)uint64_t v25 = *(void *)v26;
      v25[8] = v27;
      uint64_t v28 = v16[7];
      uint64_t v29 = &v14[v28];
      uint64_t v30 = &v15[v28];
      char v31 = v30[8];
      *(void *)uint64_t v29 = *(void *)v30;
      v29[8] = v31;
      (*(void (**)(char *, void, uint64_t, int *))(v77 + 56))(v14, 0LL, 1LL, v16);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v19)
  {
    sub_100004090((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v32 = sub_100003A0C(&qword_100355538);
    memcpy(v14, v15, *(void *)(*(void *)(v32 - 8) + 64LL));
    goto LABEL_7;
  }

  v76(v14, v15, v11);
  uint64_t v52 = v16[5];
  int v53 = &v14[v52];
  size_t v54 = &v15[v52];
  char v55 = v54[8];
  *(void *)int v53 = *(void *)v54;
  v53[8] = v55;
  uint64_t v56 = v16[6];
  uint64_t v57 = &v14[v56];
  uint64_t v58 = &v15[v56];
  char v59 = v58[8];
  *(void *)uint64_t v57 = *(void *)v58;
  v57[8] = v59;
  uint64_t v60 = v16[7];
  size_t v61 = &v14[v60];
  uint64_t v62 = &v15[v60];
  char v63 = v62[8];
  *(void *)size_t v61 = *(void *)v62;
  v61[8] = v63;
LABEL_7:
  uint64_t v33 = a3[7];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = (char *)a2 + v33;
  int v36 = v17(&a1[v33], 1LL, v16);
  int v37 = v17(v35, 1LL, v16);
  if (!v36)
  {
    if (!v37)
    {
      v76(v34, v35, v11);
      uint64_t v64 = v16[5];
      uint64_t v65 = &v34[v64];
      char v66 = &v35[v64];
      char v67 = v66[8];
      *(void *)uint64_t v65 = *(void *)v66;
      v65[8] = v67;
      uint64_t v68 = v16[6];
      uint64_t v69 = &v34[v68];
      char v70 = &v35[v68];
      char v71 = v70[8];
      *(void *)uint64_t v69 = *(void *)v70;
      v69[8] = v71;
      uint64_t v72 = v16[7];
      uint64_t v73 = &v34[v72];
      uint64_t v74 = &v35[v72];
      char v75 = v74[8];
      *(void *)uint64_t v73 = *(void *)v74;
      v73[8] = v75;
      goto LABEL_13;
    }

    sub_100004090((uint64_t)v34, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_12;
  }

  if (v37)
  {
LABEL_12:
    uint64_t v50 = sub_100003A0C(&qword_100355538);
    memcpy(v34, v35, *(void *)(*(void *)(v50 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v34, v35, v11);
  uint64_t v38 = v16[5];
  uint64_t v39 = &v34[v38];
  uint64_t v40 = &v35[v38];
  char v41 = v40[8];
  *(void *)uint64_t v39 = *(void *)v40;
  v39[8] = v41;
  uint64_t v42 = v16[6];
  uint64_t v43 = &v34[v42];
  uint64_t v44 = &v35[v42];
  char v45 = v44[8];
  *(void *)uint64_t v43 = *(void *)v44;
  v43[8] = v45;
  uint64_t v46 = v16[7];
  uint64_t v47 = &v34[v46];
  char v48 = &v35[v46];
  char v49 = v48[8];
  *(void *)uint64_t v47 = *(void *)v48;
  v47[8] = v49;
  (*(void (**)(char *, void, uint64_t, int *))(v77 + 56))(v34, 0LL, 1LL, v16);
LABEL_13:
  a1[a3[8]] = *((_BYTE *)a2 + a3[8]);
  a1[a3[9]] = *((_BYTE *)a2 + a3[9]);
  return a1;
}

void *sub_1001357E4(void *a1, char *a2, int *a3)
{
  *a1 = *(void *)a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = &a2[v11];
  int v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = *(unsigned int (**)(char *, uint64_t, int *))(v15 + 48);
  if (v16(v13, 1LL, v14))
  {
    uint64_t v17 = sub_100003A0C(&qword_100355538);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    v10(v12, v13, v9);
    uint64_t v18 = v14[5];
    int v19 = &v12[v18];
    uint64_t v20 = &v13[v18];
    *(void *)int v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = v14[6];
    uint64_t v22 = &v12[v21];
    char v23 = &v13[v21];
    *(void *)uint64_t v22 = *(void *)v23;
    v22[8] = v23[8];
    uint64_t v24 = v14[7];
    uint64_t v25 = &v12[v24];
    uint64_t v26 = &v13[v24];
    *(void *)uint64_t v25 = *(void *)v26;
    v25[8] = v26[8];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v27 = a3[7];
  uint64_t v28 = (char *)a1 + v27;
  uint64_t v29 = &a2[v27];
  if (v16(&a2[v27], 1LL, v14))
  {
    uint64_t v30 = sub_100003A0C(&qword_100355538);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64LL));
  }

  else
  {
    v10(v28, v29, v9);
    uint64_t v31 = v14[5];
    uint64_t v32 = &v28[v31];
    uint64_t v33 = &v29[v31];
    *(void *)uint64_t v32 = *(void *)v33;
    v32[8] = v33[8];
    uint64_t v34 = v14[6];
    uint64_t v35 = &v28[v34];
    int v36 = &v29[v34];
    *(void *)uint64_t v35 = *(void *)v36;
    v35[8] = v36[8];
    uint64_t v37 = v14[7];
    uint64_t v38 = &v28[v37];
    uint64_t v39 = &v29[v37];
    *(void *)uint64_t v38 = *(void *)v39;
    v38[8] = v39[8];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v28, 0LL, 1LL, v14);
  }

  uint64_t v40 = a3[9];
  *((_BYTE *)a1 + a3[8]) = a2[a3[8]];
  *((_BYTE *)a1 + v40) = a2[v40];
  return a1;
}

char *sub_100135A0C(char *a1, void *a2, int *a3)
{
  uint64_t v6 = *(void *)a1;
  *(void *)a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = &a1[v7];
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v64 = *(void (**)(char *, char *, uint64_t))(v11 + 40);
  v64(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  int v14 = (char *)a2 + v12;
  uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v65 = *((void *)v15 - 1);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, int *))(v65 + 48);
  int v17 = v16(v13, 1LL, v15);
  int v18 = v16(v14, 1LL, v15);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v14, v10);
      uint64_t v19 = v15[5];
      uint64_t v20 = &v13[v19];
      uint64_t v21 = &v14[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v15[6];
      char v23 = &v13[v22];
      uint64_t v24 = &v14[v22];
      *(void *)char v23 = *(void *)v24;
      v23[8] = v24[8];
      uint64_t v25 = v15[7];
      uint64_t v26 = &v13[v25];
      uint64_t v27 = &v14[v25];
      *(void *)uint64_t v26 = *(void *)v27;
      v26[8] = v27[8];
      (*(void (**)(char *, void, uint64_t, int *))(v65 + 56))(v13, 0LL, 1LL, v15);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v18)
  {
    sub_100004090((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v28 = sub_100003A0C(&qword_100355538);
    memcpy(v13, v14, *(void *)(*(void *)(v28 - 8) + 64LL));
    goto LABEL_7;
  }

  v64(v13, v14, v10);
  uint64_t v46 = v15[5];
  uint64_t v47 = &v13[v46];
  char v48 = &v14[v46];
  *(void *)uint64_t v47 = *(void *)v48;
  v47[8] = v48[8];
  uint64_t v49 = v15[6];
  uint64_t v50 = &v13[v49];
  uint64_t v51 = &v14[v49];
  *(void *)uint64_t v50 = *(void *)v51;
  v50[8] = v51[8];
  uint64_t v52 = v15[7];
  int v53 = &v13[v52];
  size_t v54 = &v14[v52];
  *(void *)int v53 = *(void *)v54;
  v53[8] = v54[8];
LABEL_7:
  uint64_t v29 = a3[7];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = (char *)a2 + v29;
  int v32 = v16(&a1[v29], 1LL, v15);
  int v33 = v16(v31, 1LL, v15);
  if (!v32)
  {
    if (!v33)
    {
      v64(v30, v31, v10);
      uint64_t v55 = v15[5];
      uint64_t v56 = &v30[v55];
      uint64_t v57 = &v31[v55];
      *(void *)uint64_t v56 = *(void *)v57;
      v56[8] = v57[8];
      uint64_t v58 = v15[6];
      char v59 = &v30[v58];
      uint64_t v60 = &v31[v58];
      *(void *)char v59 = *(void *)v60;
      v59[8] = v60[8];
      uint64_t v61 = v15[7];
      uint64_t v62 = &v30[v61];
      char v63 = &v31[v61];
      *(void *)uint64_t v62 = *(void *)v63;
      v62[8] = v63[8];
      goto LABEL_13;
    }

    sub_100004090((uint64_t)v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_12;
  }

  if (v33)
  {
LABEL_12:
    uint64_t v43 = sub_100003A0C(&qword_100355538);
    memcpy(v30, v31, *(void *)(*(void *)(v43 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v30, v31, v10);
  uint64_t v34 = v15[5];
  uint64_t v35 = &v30[v34];
  int v36 = &v31[v34];
  *(void *)uint64_t v35 = *(void *)v36;
  v35[8] = v36[8];
  uint64_t v37 = v15[6];
  uint64_t v38 = &v30[v37];
  uint64_t v39 = &v31[v37];
  *(void *)uint64_t v38 = *(void *)v39;
  v38[8] = v39[8];
  uint64_t v40 = v15[7];
  char v41 = &v30[v40];
  uint64_t v42 = &v31[v40];
  *(void *)char v41 = *(void *)v42;
  v41[8] = v42[8];
  (*(void (**)(char *, void, uint64_t, int *))(v65 + 56))(v30, 0LL, 1LL, v15);
LABEL_13:
  uint64_t v44 = a3[9];
  a1[a3[8]] = *((_BYTE *)a2 + a3[8]);
  a1[v44] = *((_BYTE *)a2 + v44);
  return a1;
}

uint64_t sub_100135D8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100135D98);
}

uint64_t sub_100135D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100135DA8);
}

void sub_100135DAC(uint64_t a1)
{
  v6[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v6[1] = *(void *)(v2 - 8) + 64LL;
    sub_1000119EC( 319LL,  (unint64_t *)&unk_100356B40,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v5 <= 0x3F)
    {
      uint64_t v7 = *(void *)(v4 - 8) + 64LL;
      uint64_t v8 = v7;
      uint64_t v9 = &unk_1002C7EE0;
      uint64_t v10 = &unk_1002C7EE0;
      swift_initStructMetadata(a1, 256LL, 6LL, v6, a1 + 16);
    }
  }

uint64_t _s10ALProtobuf53CLP_LogEntry_PrivateData_ClientSatelliteConstellationOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_100135EA8 + 4 * byte_1002BB155[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100135EDC + 4 * byte_1002BB150[v4]))();
}

uint64_t sub_100135EDC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100135EE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100135EECLL);
  }
  return result;
}

uint64_t sub_100135EF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100135F00LL);
  }
  *(_BYTE *)uint64_t result = a2 + 6;
  return result;
}

uint64_t sub_100135F04(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100135F0C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType()
{
  return &type metadata for CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType;
}

void *sub_100135F28(void *a1, char *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *(void *)a2;
  *a1 = *(void *)a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain(v4);
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = *((void *)a2 + 1);
    a1[1] = v8;
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = &a2[v9];
    uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12);
    uint64_t v14 = a3[7];
    uint64_t v15 = (char *)v7 + v14;
    uint64_t v16 = &a2[v14];
    int v17 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    uint64_t v18 = *((void *)v17 - 1);
    uint64_t v19 = *(unsigned int (**)(char *, uint64_t, int *))(v18 + 48);
    if (v19(v16, 1LL, v17))
    {
      uint64_t v20 = sub_100003A0C(&qword_100355538);
      memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64LL));
    }

    else
    {
      v13(v15, v16, v12);
      uint64_t v21 = v17[5];
      uint64_t v22 = &v15[v21];
      char v23 = &v16[v21];
      *(void *)uint64_t v22 = *(void *)v23;
      v22[8] = v23[8];
      uint64_t v24 = v17[6];
      uint64_t v25 = &v15[v24];
      uint64_t v26 = &v16[v24];
      *(void *)uint64_t v25 = *(void *)v26;
      v25[8] = v26[8];
      uint64_t v27 = v17[7];
      uint64_t v28 = &v15[v27];
      uint64_t v29 = &v16[v27];
      *(void *)uint64_t v28 = *(void *)v29;
      v28[8] = v29[8];
      (*(void (**)(char *, void, uint64_t, int *))(v18 + 56))(v15, 0LL, 1LL, v17);
    }

    uint64_t v30 = a3[8];
    uint64_t v31 = (char *)v7 + v30;
    int v32 = &a2[v30];
    if (v19(&a2[v30], 1LL, v17))
    {
      uint64_t v33 = sub_100003A0C(&qword_100355538);
      memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64LL));
    }

    else
    {
      v13(v31, v32, v12);
      uint64_t v34 = v17[5];
      uint64_t v35 = &v31[v34];
      int v36 = &v32[v34];
      *(void *)uint64_t v35 = *(void *)v36;
      v35[8] = v36[8];
      uint64_t v37 = v17[6];
      uint64_t v38 = &v31[v37];
      uint64_t v39 = &v32[v37];
      *(void *)uint64_t v38 = *(void *)v39;
      v38[8] = v39[8];
      uint64_t v40 = v17[7];
      char v41 = &v31[v40];
      uint64_t v42 = &v32[v40];
      *(void *)char v41 = *(void *)v42;
      v41[8] = v42[8];
      (*(void (**)(char *, void, uint64_t, int *))(v18 + 56))(v31, 0LL, 1LL, v17);
    }

    uint64_t v43 = a3[9];
    uint64_t v44 = a3[10];
    char v45 = (char *)v7 + v43;
    uint64_t v46 = &a2[v43];
    *(_DWORD *)char v45 = *(_DWORD *)v46;
    v45[4] = v46[4];
    *((_BYTE *)v7 + v44) = a2[v44];
    uint64_t v47 = a3[11];
    uint64_t v48 = a3[12];
    uint64_t v49 = (char *)v7 + v47;
    uint64_t v50 = &a2[v47];
    *(_DWORD *)uint64_t v49 = *(_DWORD *)v50;
    v49[4] = v50[4];
    *((_BYTE *)v7 + v48) = a2[v48];
    *((_BYTE *)v7 + a3[13]) = a2[a3[13]];
  }

  return v7;
}

uint64_t sub_1001361D0(void *a1, int *a2)
{
  uint64_t v4 = (char *)a1 + a2[6];
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v11(v4, v5);
  uint64_t v6 = (char *)a1 + a2[7];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL);
  if (!v8(v6, 1LL, v7)) {
    v11(v6, v5);
  }
  uint64_t v9 = (char *)a1 + a2[8];
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v8)(v9, 1LL, v7);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(char *, uint64_t))v11)(v9, v5);
  }
  return result;
}

void *sub_1001362C4(void *a1, char *a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *((void *)a2 + 1);
  *a1 = *(void *)a2;
  a1[1] = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = &a2[v13];
  uint64_t v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v17 = *((void *)v16 - 1);
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, int *))(v17 + 48);
  if (v18(v15, 1LL, v16))
  {
    uint64_t v19 = sub_100003A0C(&qword_100355538);
    memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64LL));
  }

  else
  {
    v12(v14, v15, v11);
    uint64_t v20 = v16[5];
    uint64_t v21 = &v14[v20];
    uint64_t v22 = &v15[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = v16[6];
    uint64_t v24 = &v14[v23];
    uint64_t v25 = &v15[v23];
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    uint64_t v26 = v16[7];
    uint64_t v27 = &v14[v26];
    uint64_t v28 = &v15[v26];
    *(void *)uint64_t v27 = *(void *)v28;
    v27[8] = v28[8];
    (*(void (**)(char *, void, uint64_t, int *))(v17 + 56))(v14, 0LL, 1LL, v16);
  }

  uint64_t v29 = a3[8];
  uint64_t v30 = (char *)a1 + v29;
  uint64_t v31 = &a2[v29];
  if (v18(&a2[v29], 1LL, v16))
  {
    uint64_t v32 = sub_100003A0C(&qword_100355538);
    memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64LL));
  }

  else
  {
    v12(v30, v31, v11);
    uint64_t v33 = v16[5];
    uint64_t v34 = &v30[v33];
    uint64_t v35 = &v31[v33];
    *(void *)uint64_t v34 = *(void *)v35;
    v34[8] = v35[8];
    uint64_t v36 = v16[6];
    uint64_t v37 = &v30[v36];
    uint64_t v38 = &v31[v36];
    *(void *)uint64_t v37 = *(void *)v38;
    v37[8] = v38[8];
    uint64_t v39 = v16[7];
    uint64_t v40 = &v30[v39];
    char v41 = &v31[v39];
    *(void *)uint64_t v40 = *(void *)v41;
    v40[8] = v41[8];
    (*(void (**)(char *, void, uint64_t, int *))(v17 + 56))(v30, 0LL, 1LL, v16);
  }

  uint64_t v42 = a3[9];
  uint64_t v43 = a3[10];
  uint64_t v44 = (char *)a1 + v42;
  char v45 = &a2[v42];
  *(_DWORD *)uint64_t v44 = *(_DWORD *)v45;
  v44[4] = v45[4];
  *((_BYTE *)a1 + v43) = a2[v43];
  uint64_t v46 = a3[11];
  uint64_t v47 = a3[12];
  uint64_t v48 = (char *)a1 + v46;
  uint64_t v49 = &a2[v46];
  *(_DWORD *)uint64_t v48 = *(_DWORD *)v49;
  v48[4] = v49[4];
  *((_BYTE *)a1 + v47) = a2[v47];
  *((_BYTE *)a1 + a3[13]) = a2[a3[13]];
  return a1;
}

char *sub_10013653C(char *a1, void *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *(void *)a1;
  *(void *)a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[1];
  uint64_t v9 = *((void *)a1 + 1);
  *((void *)a1 + 1) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v86 = *(void (**)(char *, char *, uint64_t))(v14 + 24);
  v86(v11, v12, v13);
  uint64_t v15 = a3[7];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v87 = *((void *)v18 - 1);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, int *))(v87 + 48);
  int v20 = v19(v16, 1LL, v18);
  int v21 = v19(v17, 1LL, v18);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v17, v13);
      uint64_t v22 = v18[5];
      uint64_t v23 = &v16[v22];
      uint64_t v24 = &v17[v22];
      char v25 = v24[8];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v25;
      uint64_t v26 = v18[6];
      uint64_t v27 = &v16[v26];
      uint64_t v28 = &v17[v26];
      char v29 = v28[8];
      *(void *)uint64_t v27 = *(void *)v28;
      v27[8] = v29;
      uint64_t v30 = v18[7];
      uint64_t v31 = &v16[v30];
      uint64_t v32 = &v17[v30];
      char v33 = v32[8];
      *(void *)uint64_t v31 = *(void *)v32;
      v31[8] = v33;
      (*(void (**)(char *, void, uint64_t, int *))(v87 + 56))(v16, 0LL, 1LL, v18);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v21)
  {
    sub_100004090((uint64_t)v16, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v34 = sub_100003A0C(&qword_100355538);
    memcpy(v16, v17, *(void *)(*(void *)(v34 - 8) + 64LL));
    goto LABEL_7;
  }

  v86(v16, v17, v13);
  uint64_t v62 = v18[5];
  char v63 = &v16[v62];
  uint64_t v64 = &v17[v62];
  char v65 = v64[8];
  *(void *)char v63 = *(void *)v64;
  v63[8] = v65;
  uint64_t v66 = v18[6];
  char v67 = &v16[v66];
  uint64_t v68 = &v17[v66];
  char v69 = v68[8];
  *(void *)char v67 = *(void *)v68;
  v67[8] = v69;
  uint64_t v70 = v18[7];
  char v71 = &v16[v70];
  uint64_t v72 = &v17[v70];
  char v73 = v72[8];
  *(void *)char v71 = *(void *)v72;
  v71[8] = v73;
LABEL_7:
  uint64_t v35 = a3[8];
  uint64_t v36 = &a1[v35];
  uint64_t v37 = (char *)a2 + v35;
  int v38 = v19(&a1[v35], 1LL, v18);
  int v39 = v19(v37, 1LL, v18);
  if (!v38)
  {
    if (!v39)
    {
      v86(v36, v37, v13);
      uint64_t v74 = v18[5];
      char v75 = &v36[v74];
      uint64_t v76 = &v37[v74];
      char v77 = v76[8];
      *(void *)char v75 = *(void *)v76;
      v75[8] = v77;
      uint64_t v78 = v18[6];
      uint64_t v79 = &v36[v78];
      uint64_t v80 = &v37[v78];
      char v81 = v80[8];
      *(void *)uint64_t v79 = *(void *)v80;
      v79[8] = v81;
      uint64_t v82 = v18[7];
      uint64_t v83 = &v36[v82];
      uint64_t v84 = &v37[v82];
      char v85 = v84[8];
      *(void *)uint64_t v83 = *(void *)v84;
      v83[8] = v85;
      goto LABEL_13;
    }

    sub_100004090((uint64_t)v36, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_12;
  }

  if (v39)
  {
LABEL_12:
    uint64_t v52 = sub_100003A0C(&qword_100355538);
    memcpy(v36, v37, *(void *)(*(void *)(v52 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v36, v37, v13);
  uint64_t v40 = v18[5];
  char v41 = &v36[v40];
  uint64_t v42 = &v37[v40];
  char v43 = v42[8];
  *(void *)char v41 = *(void *)v42;
  v41[8] = v43;
  uint64_t v44 = v18[6];
  char v45 = &v36[v44];
  uint64_t v46 = &v37[v44];
  char v47 = v46[8];
  *(void *)char v45 = *(void *)v46;
  v45[8] = v47;
  uint64_t v48 = v18[7];
  uint64_t v49 = &v36[v48];
  uint64_t v50 = &v37[v48];
  char v51 = v50[8];
  *(void *)uint64_t v49 = *(void *)v50;
  v49[8] = v51;
  (*(void (**)(char *, void, uint64_t, int *))(v87 + 56))(v36, 0LL, 1LL, v18);
LABEL_13:
  uint64_t v53 = a3[9];
  size_t v54 = &a1[v53];
  uint64_t v55 = (char *)a2 + v53;
  int v56 = *(_DWORD *)v55;
  v54[4] = v55[4];
  *(_DWORD *)size_t v54 = v56;
  a1[a3[10]] = *((_BYTE *)a2 + a3[10]);
  uint64_t v57 = a3[11];
  uint64_t v58 = &a1[v57];
  char v59 = (char *)a2 + v57;
  int v60 = *(_DWORD *)v59;
  v58[4] = v59[4];
  *(_DWORD *)uint64_t v58 = v60;
  a1[a3[12]] = *((_BYTE *)a2 + a3[12]);
  a1[a3[13]] = *((_BYTE *)a2 + a3[13]);
  return a1;
}

_OWORD *sub_100136924(_OWORD *a1, char *a2, int *a3)
{
  *a1 = *(_OWORD *)a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = &a2[v11];
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = *(unsigned int (**)(char *, uint64_t, int *))(v15 + 48);
  if (v16(v13, 1LL, v14))
  {
    uint64_t v17 = sub_100003A0C(&qword_100355538);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    v10(v12, v13, v9);
    uint64_t v18 = v14[5];
    uint64_t v19 = &v12[v18];
    int v20 = &v13[v18];
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = v14[6];
    uint64_t v22 = &v12[v21];
    uint64_t v23 = &v13[v21];
    *(void *)uint64_t v22 = *(void *)v23;
    v22[8] = v23[8];
    uint64_t v24 = v14[7];
    char v25 = &v12[v24];
    uint64_t v26 = &v13[v24];
    *(void *)char v25 = *(void *)v26;
    v25[8] = v26[8];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v27 = a3[8];
  uint64_t v28 = (char *)a1 + v27;
  char v29 = &a2[v27];
  if (v16(&a2[v27], 1LL, v14))
  {
    uint64_t v30 = sub_100003A0C(&qword_100355538);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64LL));
  }

  else
  {
    v10(v28, v29, v9);
    uint64_t v31 = v14[5];
    uint64_t v32 = &v28[v31];
    char v33 = &v29[v31];
    *(void *)uint64_t v32 = *(void *)v33;
    v32[8] = v33[8];
    uint64_t v34 = v14[6];
    uint64_t v35 = &v28[v34];
    uint64_t v36 = &v29[v34];
    *(void *)uint64_t v35 = *(void *)v36;
    v35[8] = v36[8];
    uint64_t v37 = v14[7];
    int v38 = &v28[v37];
    int v39 = &v29[v37];
    *(void *)int v38 = *(void *)v39;
    v38[8] = v39[8];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v28, 0LL, 1LL, v14);
  }

  uint64_t v40 = a3[9];
  uint64_t v41 = a3[10];
  uint64_t v42 = (char *)a1 + v40;
  char v43 = &a2[v40];
  *(_DWORD *)uint64_t v42 = *(_DWORD *)v43;
  v42[4] = v43[4];
  *((_BYTE *)a1 + v41) = a2[v41];
  uint64_t v44 = a3[11];
  uint64_t v45 = a3[12];
  uint64_t v46 = (char *)a1 + v44;
  char v47 = &a2[v44];
  *(_DWORD *)uint64_t v46 = *(_DWORD *)v47;
  v46[4] = v47[4];
  *((_BYTE *)a1 + v45) = a2[v45];
  *((_BYTE *)a1 + a3[13]) = a2[a3[13]];
  return a1;
}

char *sub_100136B8C(char *a1, void *a2, int *a3)
{
  uint64_t v6 = *(void *)a1;
  *(void *)a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *((void *)a1 + 1);
  *((void *)a1 + 1) = a2[1];
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[6];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v72 = *(void (**)(char *, char *, uint64_t))(v12 + 40);
  v72(v9, v10, v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v73 = *((void *)v16 - 1);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, int *))(v73 + 48);
  int v18 = v17(v14, 1LL, v16);
  int v19 = v17(v15, 1LL, v16);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v15, v11);
      uint64_t v20 = v16[5];
      uint64_t v21 = &v14[v20];
      uint64_t v22 = &v15[v20];
      *(void *)uint64_t v21 = *(void *)v22;
      v21[8] = v22[8];
      uint64_t v23 = v16[6];
      uint64_t v24 = &v14[v23];
      char v25 = &v15[v23];
      *(void *)uint64_t v24 = *(void *)v25;
      v24[8] = v25[8];
      uint64_t v26 = v16[7];
      uint64_t v27 = &v14[v26];
      uint64_t v28 = &v15[v26];
      *(void *)uint64_t v27 = *(void *)v28;
      v27[8] = v28[8];
      (*(void (**)(char *, void, uint64_t, int *))(v73 + 56))(v14, 0LL, 1LL, v16);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v19)
  {
    sub_100004090((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v29 = sub_100003A0C(&qword_100355538);
    memcpy(v14, v15, *(void *)(*(void *)(v29 - 8) + 64LL));
    goto LABEL_7;
  }

  v72(v14, v15, v11);
  uint64_t v54 = v16[5];
  uint64_t v55 = &v14[v54];
  int v56 = &v15[v54];
  *(void *)uint64_t v55 = *(void *)v56;
  v55[8] = v56[8];
  uint64_t v57 = v16[6];
  uint64_t v58 = &v14[v57];
  char v59 = &v15[v57];
  *(void *)uint64_t v58 = *(void *)v59;
  v58[8] = v59[8];
  uint64_t v60 = v16[7];
  uint64_t v61 = &v14[v60];
  uint64_t v62 = &v15[v60];
  *(void *)uint64_t v61 = *(void *)v62;
  v61[8] = v62[8];
LABEL_7:
  uint64_t v30 = a3[8];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = (char *)a2 + v30;
  int v33 = v17(&a1[v30], 1LL, v16);
  int v34 = v17(v32, 1LL, v16);
  if (!v33)
  {
    if (!v34)
    {
      v72(v31, v32, v11);
      uint64_t v63 = v16[5];
      uint64_t v64 = &v31[v63];
      char v65 = &v32[v63];
      *(void *)uint64_t v64 = *(void *)v65;
      v64[8] = v65[8];
      uint64_t v66 = v16[6];
      char v67 = &v31[v66];
      uint64_t v68 = &v32[v66];
      *(void *)char v67 = *(void *)v68;
      v67[8] = v68[8];
      uint64_t v69 = v16[7];
      uint64_t v70 = &v31[v69];
      char v71 = &v32[v69];
      *(void *)uint64_t v70 = *(void *)v71;
      v70[8] = v71[8];
      goto LABEL_13;
    }

    sub_100004090((uint64_t)v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_12;
  }

  if (v34)
  {
LABEL_12:
    uint64_t v44 = sub_100003A0C(&qword_100355538);
    memcpy(v31, v32, *(void *)(*(void *)(v44 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v31, v32, v11);
  uint64_t v35 = v16[5];
  uint64_t v36 = &v31[v35];
  uint64_t v37 = &v32[v35];
  *(void *)uint64_t v36 = *(void *)v37;
  v36[8] = v37[8];
  uint64_t v38 = v16[6];
  int v39 = &v31[v38];
  uint64_t v40 = &v32[v38];
  *(void *)int v39 = *(void *)v40;
  v39[8] = v40[8];
  uint64_t v41 = v16[7];
  uint64_t v42 = &v31[v41];
  char v43 = &v32[v41];
  *(void *)uint64_t v42 = *(void *)v43;
  v42[8] = v43[8];
  (*(void (**)(char *, void, uint64_t, int *))(v73 + 56))(v31, 0LL, 1LL, v16);
LABEL_13:
  uint64_t v45 = a3[9];
  uint64_t v46 = a3[10];
  char v47 = &a1[v45];
  uint64_t v48 = (char *)a2 + v45;
  *(_DWORD *)char v47 = *(_DWORD *)v48;
  v47[4] = v48[4];
  a1[v46] = *((_BYTE *)a2 + v46);
  uint64_t v49 = a3[11];
  uint64_t v50 = a3[12];
  char v51 = &a1[v49];
  uint64_t v52 = (char *)a2 + v49;
  *(_DWORD *)char v51 = *(_DWORD *)v52;
  v51[4] = v52[4];
  a1[v50] = *((_BYTE *)a2 + v50);
  a1[a3[13]] = *((_BYTE *)a2 + a3[13]);
  return a1;
}

uint64_t sub_100136F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100136F68);
}

uint64_t sub_100136F68(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 24);
    }

    else
    {
      uint64_t v10 = sub_100003A0C(&qword_100355538);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 28);
    }

    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }

uint64_t sub_10013700C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100137018);
}

char *sub_100137018(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 24);
    }

    else
    {
      uint64_t v10 = sub_100003A0C(&qword_100355538);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 28);
    }

    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }

  return result;
}

void sub_1001370B8(uint64_t a1)
{
  v6[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    void v6[2] = *(void *)(v2 - 8) + 64LL;
    sub_1000119EC( 319LL,  (unint64_t *)&unk_100356B40,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v5 <= 0x3F)
    {
      uint64_t v7 = *(void *)(v4 - 8) + 64LL;
      uint64_t v8 = v7;
      uint64_t v9 = &unk_1002C7CB8;
      uint64_t v10 = &unk_1002C8230;
      uint64_t v11 = &unk_1002C7CB8;
      uint64_t v12 = &unk_1002C7E68;
      uint64_t v13 = &unk_1002C7E68;
      swift_initStructMetadata(a1, 256LL, 10LL, v6, a1 + 16);
    }
  }

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType()
{
  return &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10013726C + 4 * byte_1002BB15F[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001372A0 + 4 * byte_1002BB15A[v4]))();
}

uint64_t sub_1001372A0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001372A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001372B0LL);
  }
  return result;
}

uint64_t sub_1001372BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001372C4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1001372C8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001372D0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1001372DC(_BYTE *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType()
{
  return &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType;
}

uint64_t sub_1001372F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100137304);
}

uint64_t sub_100137308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100137314);
}

uint64_t sub_100137318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100148544( a1,  a2,  a3,  (uint64_t)&unk_1002C8230,  (uint64_t)&unk_1002C8230,  (uint64_t)&unk_1002C7E68,  (uint64_t)&unk_1002C7E68);
}

void *sub_100137334(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (void *)(v16 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v16);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)uint64_t v10 = *(void *)v11;
    v10[8] = v11[8];
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
    uint64_t v12 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
    uint64_t v13 = a3[10];
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    v14[4] = v15[4];
    *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  }

  return a1;
}

uint64_t sub_10013740C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  uint64_t v11 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  uint64_t v12 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(_BYTE *)(v13 + 4) = *(_BYTE *)(v14 + 4);
  *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
  return a1;
}

uint64_t sub_1001374B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
  *(void *)uint64_t v8 = v10;
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  uint64_t v11 = a3[10];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v10;
  return a1;
}

uint64_t sub_100137570(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  uint64_t v11 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  uint64_t v12 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(_BYTE *)(v13 + 4) = *(_BYTE *)(v14 + 4);
  *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
  return a1;
}

uint64_t sub_10013761C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  uint64_t v11 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  uint64_t v12 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(_BYTE *)(v13 + 4) = *(_BYTE *)(v14 + 4);
  *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
  return a1;
}

uint64_t sub_1001376C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001376D4);
}

uint64_t sub_1001376D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unsigned int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 2) {
    int v10 = ((v9 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v10 = -2;
  }
  if (v10 < 0) {
    int v10 = -1;
  }
  return (v10 + 1);
}

uint64_t sub_100137770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013777C);
}

uint64_t sub_100137780(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 2;
  return result;
}

uint64_t sub_1001377F8(uint64_t a1)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "\t";
    v4[2] = &unk_1002C7E68;
    void v4[3] = &unk_1002C7E68;
    v4[4] = &unk_1002C8230;
    v4[5] = &unk_1002C7E68;
    void v4[6] = &unk_1002C7CB8;
    swift_initStructMetadata(a1, 256LL, 7LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_10013788C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100137898);
}

uint64_t sub_10013789C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001378A8);
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xED) {
    goto LABEL_17;
  }
  if (a2 + 19 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 19) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 19;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 19;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 19;
    }
  }

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 19 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 19) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xED) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xEC) {
    return ((uint64_t (*)(void))((char *)&loc_100137988 + 4 * byte_1002BB169[v4]))();
  }
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_1001379BC + 4 * byte_1002BB164[v4]))();
}

uint64_t sub_1001379BC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001379C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001379CCLL);
  }
  return result;
}

uint64_t sub_1001379D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001379E0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 19;
  return result;
}

uint64_t sub_1001379E4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001379EC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType;
}

char *sub_100137A08(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    int v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    int v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1LL, v12))
    {
      uint64_t v14 = sub_100003A0C(&qword_100355538);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      v8(v10, v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      int v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
    }

    uint64_t v25 = a3[7];
    a1[a3[6]] = a2[a3[6]];
    a1[v25] = a2[v25];
    uint64_t v26 = a3[8];
    uint64_t v27 = &a1[v26];
    uint64_t v28 = &a2[v26];
    *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
  }

  return a1;
}

uint64_t sub_100137BA4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  int v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    int v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)int v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v23 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v23) = *(_BYTE *)(a2 + v23);
  uint64_t v24 = a3[8];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  return a1;
}

uint64_t sub_100137D14(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  char v47 = a3;
  uint64_t v9 = a3[5];
  int v10 = (char *)(a1 + v9);
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v46 = *((void *)v12 - 1);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, int *))(v46 + 48);
  int v14 = v13(v10, 1LL, v12);
  int v15 = v13(v11, 1LL, v12);
  if (!v14)
  {
    if (!v15)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      uint64_t v34 = v12[5];
      uint64_t v35 = &v10[v34];
      uint64_t v36 = &v11[v34];
      char v37 = v36[8];
      *(void *)uint64_t v35 = *(void *)v36;
      v35[8] = v37;
      uint64_t v38 = v12[6];
      int v39 = &v10[v38];
      uint64_t v40 = &v11[v38];
      char v41 = v40[8];
      *(void *)int v39 = *(void *)v40;
      v39[8] = v41;
      uint64_t v42 = v12[7];
      char v43 = &v10[v42];
      uint64_t v44 = &v11[v42];
      char v45 = v44[8];
      *(void *)char v43 = *(void *)v44;
      v43[8] = v45;
      goto LABEL_7;
    }

    sub_100004090((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  if (v15)
  {
LABEL_6:
    uint64_t v28 = sub_100003A0C(&qword_100355538);
    memcpy(v10, v11, *(void *)(*(void *)(v28 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  uint64_t v16 = v12[5];
  uint64_t v17 = &v10[v16];
  int v18 = &v11[v16];
  char v19 = v18[8];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v19;
  uint64_t v20 = v12[6];
  uint64_t v21 = &v10[v20];
  uint64_t v22 = &v11[v20];
  char v23 = v22[8];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v23;
  uint64_t v24 = v12[7];
  uint64_t v25 = &v10[v24];
  uint64_t v26 = &v11[v24];
  char v27 = v26[8];
  *(void *)uint64_t v25 = *(void *)v26;
  v25[8] = v27;
  (*(void (**)(char *, void, uint64_t, int *))(v46 + 56))(v10, 0LL, 1LL, v12);
LABEL_7:
  *(_BYTE *)(a1 + v47[6]) = *(_BYTE *)(a2 + v47[6]);
  *(_BYTE *)(a1 + v47[7]) = *(_BYTE *)(a2 + v47[7]);
  uint64_t v29 = v47[8];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = (int *)(a2 + v29);
  int v32 = *v31;
  *(_BYTE *)(v30 + 4) = *((_BYTE *)v31 + 4);
  *(_DWORD *)uint64_t v30 = v32;
  return a1;
}

uint64_t sub_100137F38(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  int v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    int v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)int v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    int v18 = &v9[v17];
    char v19 = &v10[v17];
    *(void *)int v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v23 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v23) = *(_BYTE *)(a2 + v23);
  uint64_t v24 = a3[8];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  return a1;
}

uint64_t sub_1001380A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  char v41 = a3;
  uint64_t v9 = a3[5];
  int v10 = (char *)(a1 + v9);
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v40 = *((void *)v12 - 1);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, int *))(v40 + 48);
  int v14 = v13(v10, 1LL, v12);
  int v15 = v13(v11, 1LL, v12);
  if (!v14)
  {
    if (!v15)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      uint64_t v31 = v12[5];
      int v32 = &v10[v31];
      int v33 = &v11[v31];
      *(void *)int v32 = *(void *)v33;
      v32[8] = v33[8];
      uint64_t v34 = v12[6];
      uint64_t v35 = &v10[v34];
      uint64_t v36 = &v11[v34];
      *(void *)uint64_t v35 = *(void *)v36;
      v35[8] = v36[8];
      uint64_t v37 = v12[7];
      uint64_t v38 = &v10[v37];
      int v39 = &v11[v37];
      *(void *)uint64_t v38 = *(void *)v39;
      v38[8] = v39[8];
      goto LABEL_7;
    }

    sub_100004090((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  if (v15)
  {
LABEL_6:
    uint64_t v25 = sub_100003A0C(&qword_100355538);
    memcpy(v10, v11, *(void *)(*(void *)(v25 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
  uint64_t v16 = v12[5];
  uint64_t v17 = &v10[v16];
  int v18 = &v11[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = v12[6];
  uint64_t v20 = &v10[v19];
  uint64_t v21 = &v11[v19];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = v12[7];
  uint64_t v23 = &v10[v22];
  uint64_t v24 = &v11[v22];
  *(void *)uint64_t v23 = *(void *)v24;
  v23[8] = v24[8];
  (*(void (**)(char *, void, uint64_t, int *))(v40 + 56))(v10, 0LL, 1LL, v12);
LABEL_7:
  uint64_t v26 = v41[7];
  *(_BYTE *)(a1 + v41[6]) = *(_BYTE *)(a2 + v41[6]);
  *(_BYTE *)(a1 + v26) = *(_BYTE *)(a2 + v26);
  uint64_t v27 = v41[8];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
  *(_BYTE *)(v28 + 4) = *(_BYTE *)(v29 + 4);
  return a1;
}

uint64_t sub_1001382C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001382D4);
}

uint64_t sub_1001382D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  uint64_t v11 = sub_100003A0C(&qword_100355538);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }

  else {
    int v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  }
  unsigned int v15 = v14 - 8;
  else {
    return 0LL;
  }
}

uint64_t sub_100138388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100138394);
}

uint64_t sub_100138394(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
    return v11(v12, a2, a2, v10);
  }

  uint64_t result = sub_100003A0C(&qword_100355538);
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }

  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 8;
  return result;
}

void sub_10013843C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t _s10ALProtobuf58CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevelOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_1001384A0 + 4 * byte_1002BB173[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1001384D4 + 4 * byte_1002BB16E[v4]))();
}

uint64_t sub_1001384D4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001384DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001384E4LL);
  }
  return result;
}

uint64_t sub_1001384F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001384F8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 7;
  return result;
}

uint64_t sub_1001384FC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100138504(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType()
{
  return &type metadata for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType;
}

uint64_t sub_100138520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013852C);
}

uint64_t sub_10013852C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  else {
    int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  }
  unsigned int v10 = v9 - 4;
  else {
    return 0LL;
  }
}

uint64_t sub_1001385B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001385BC);
}

uint64_t sub_1001385BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 4;
  return result;
}

uint64_t sub_100138634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007813C(a1, a2, a3, (uint64_t)&unk_1002C84C8, (uint64_t)&unk_1002C7FF8);
}

uint64_t sub_100138648(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v55 = a3;
  uint64_t v9 = a3[5];
  unsigned int v10 = (char *)(a1 + v9);
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v54 = *((void *)v12 - 1);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, int *))(v54 + 48);
  int v14 = v13(v10, 1LL, v12);
  int v15 = v13(v11, 1LL, v12);
  if (!v14)
  {
    if (!v15)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      uint64_t v42 = v12[5];
      char v43 = &v10[v42];
      uint64_t v44 = &v11[v42];
      char v45 = v44[8];
      *(void *)char v43 = *(void *)v44;
      v43[8] = v45;
      uint64_t v46 = v12[6];
      char v47 = &v10[v46];
      uint64_t v48 = &v11[v46];
      char v49 = v48[8];
      *(void *)char v47 = *(void *)v48;
      v47[8] = v49;
      uint64_t v50 = v12[7];
      char v51 = &v10[v50];
      uint64_t v52 = &v11[v50];
      char v53 = v52[8];
      *(void *)char v51 = *(void *)v52;
      v51[8] = v53;
      goto LABEL_7;
    }

    sub_100004090((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  if (v15)
  {
LABEL_6:
    uint64_t v28 = sub_100003A0C(&qword_100355538);
    memcpy(v10, v11, *(void *)(*(void *)(v28 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  uint64_t v16 = v12[5];
  uint64_t v17 = &v10[v16];
  int v18 = &v11[v16];
  char v19 = v18[8];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v19;
  uint64_t v20 = v12[6];
  uint64_t v21 = &v10[v20];
  uint64_t v22 = &v11[v20];
  char v23 = v22[8];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v23;
  uint64_t v24 = v12[7];
  uint64_t v25 = &v10[v24];
  uint64_t v26 = &v11[v24];
  char v27 = v26[8];
  *(void *)uint64_t v25 = *(void *)v26;
  v25[8] = v27;
  (*(void (**)(char *, void, uint64_t, int *))(v54 + 56))(v10, 0LL, 1LL, v12);
LABEL_7:
  uint64_t v29 = v55[6];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = (int *)(a2 + v29);
  int v32 = *v31;
  *(_BYTE *)(v30 + 4) = *((_BYTE *)v31 + 4);
  *(_DWORD *)uint64_t v30 = v32;
  uint64_t v33 = v55[7];
  uint64_t v34 = a1 + v33;
  uint64_t v35 = (int *)(a2 + v33);
  int v36 = *v35;
  *(_BYTE *)(v34 + 4) = *((_BYTE *)v35 + 4);
  *(_DWORD *)uint64_t v34 = v36;
  uint64_t v37 = v55[8];
  uint64_t v38 = a1 + v37;
  int v39 = (int *)(a2 + v37);
  int v40 = *v39;
  *(_BYTE *)(v38 + 4) = *((_BYTE *)v39 + 4);
  *(_DWORD *)uint64_t v38 = v40;
  return a1;
}

uint64_t sub_10013888C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v46 = a3;
  uint64_t v9 = a3[5];
  unsigned int v10 = (char *)(a1 + v9);
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v45 = *((void *)v12 - 1);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, int *))(v45 + 48);
  int v14 = v13(v10, 1LL, v12);
  int v15 = v13(v11, 1LL, v12);
  if (!v14)
  {
    if (!v15)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      uint64_t v36 = v12[5];
      uint64_t v37 = &v10[v36];
      uint64_t v38 = &v11[v36];
      *(void *)uint64_t v37 = *(void *)v38;
      v37[8] = v38[8];
      uint64_t v39 = v12[6];
      int v40 = &v10[v39];
      char v41 = &v11[v39];
      *(void *)int v40 = *(void *)v41;
      v40[8] = v41[8];
      uint64_t v42 = v12[7];
      char v43 = &v10[v42];
      uint64_t v44 = &v11[v42];
      *(void *)char v43 = *(void *)v44;
      v43[8] = v44[8];
      goto LABEL_7;
    }

    sub_100004090((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  if (v15)
  {
LABEL_6:
    uint64_t v25 = sub_100003A0C(&qword_100355538);
    memcpy(v10, v11, *(void *)(*(void *)(v25 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
  uint64_t v16 = v12[5];
  uint64_t v17 = &v10[v16];
  int v18 = &v11[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = v12[6];
  uint64_t v20 = &v10[v19];
  uint64_t v21 = &v11[v19];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = v12[7];
  char v23 = &v10[v22];
  uint64_t v24 = &v11[v22];
  *(void *)char v23 = *(void *)v24;
  v23[8] = v24[8];
  (*(void (**)(char *, void, uint64_t, int *))(v45 + 56))(v10, 0LL, 1LL, v12);
LABEL_7:
  uint64_t v26 = v46[6];
  uint64_t v27 = v46[7];
  uint64_t v28 = a1 + v26;
  uint64_t v29 = a2 + v26;
  *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
  *(_BYTE *)(v28 + 4) = *(_BYTE *)(v29 + 4);
  uint64_t v30 = a1 + v27;
  uint64_t v31 = a2 + v27;
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  uint64_t v32 = v46[8];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  return a1;
}

uint64_t sub_100138ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100138AD8);
}

uint64_t sub_100138AD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013EA24(a1, a2, a3, &qword_100355538);
}

uint64_t sub_100138AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100138AF0);
}

uint64_t sub_100138AF0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10013EAB4(a1, a2, a3, a4, &qword_100355538);
}

uint64_t sub_100138AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100138B08);
}

uint64_t sub_100138B0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100138B18);
}

uint64_t *sub_100138B1C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    unsigned int v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1LL, v12))
    {
      uint64_t v14 = sub_100003A0C(&qword_100355538);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      int v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      char v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)char v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
    }
  }

  return a1;
}

uint64_t sub_100138C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  unsigned int v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    int v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)int v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  return a1;
}

uint64_t sub_100138DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 20);
  unsigned int v10 = (char *)(a1 + v9);
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v13 = *((void *)v12 - 1);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, int *))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14(v11, 1LL, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      uint64_t v31 = v12[5];
      uint64_t v32 = &v10[v31];
      uint64_t v33 = &v11[v31];
      char v34 = v33[8];
      *(void *)uint64_t v32 = *(void *)v33;
      v32[8] = v34;
      uint64_t v35 = v12[6];
      uint64_t v36 = &v10[v35];
      uint64_t v37 = &v11[v35];
      char v38 = v37[8];
      *(void *)uint64_t v36 = *(void *)v37;
      v36[8] = v38;
      uint64_t v39 = v12[7];
      int v40 = &v10[v39];
      char v41 = &v11[v39];
      char v42 = v41[8];
      *(void *)int v40 = *(void *)v41;
      v40[8] = v42;
      return a1;
    }

    sub_100004090((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  if (v16)
  {
LABEL_6:
    uint64_t v29 = sub_100003A0C(&qword_100355538);
    memcpy(v10, v11, *(void *)(*(void *)(v29 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  uint64_t v17 = v12[5];
  int v18 = &v10[v17];
  uint64_t v19 = &v11[v17];
  char v20 = v19[8];
  *(void *)int v18 = *(void *)v19;
  v18[8] = v20;
  uint64_t v21 = v12[6];
  uint64_t v22 = &v10[v21];
  char v23 = &v11[v21];
  char v24 = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v24;
  uint64_t v25 = v12[7];
  uint64_t v26 = &v10[v25];
  uint64_t v27 = &v11[v25];
  char v28 = v27[8];
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v28;
  (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
  return a1;
}

uint64_t sub_100138F90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  unsigned int v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    int v15 = &v9[v14];
    int v16 = &v10[v14];
    *(void *)int v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    int v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)int v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  return a1;
}

uint64_t sub_1001390C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 20);
  unsigned int v10 = (char *)(a1 + v9);
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v13 = *((void *)v12 - 1);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, int *))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14(v11, 1LL, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      uint64_t v28 = v12[5];
      uint64_t v29 = &v10[v28];
      uint64_t v30 = &v11[v28];
      *(void *)uint64_t v29 = *(void *)v30;
      v29[8] = v30[8];
      uint64_t v31 = v12[6];
      uint64_t v32 = &v10[v31];
      uint64_t v33 = &v11[v31];
      *(void *)uint64_t v32 = *(void *)v33;
      v32[8] = v33[8];
      uint64_t v34 = v12[7];
      uint64_t v35 = &v10[v34];
      uint64_t v36 = &v11[v34];
      *(void *)uint64_t v35 = *(void *)v36;
      v35[8] = v36[8];
      return a1;
    }

    sub_100004090((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  if (v16)
  {
LABEL_6:
    uint64_t v26 = sub_100003A0C(&qword_100355538);
    memcpy(v10, v11, *(void *)(*(void *)(v26 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
  uint64_t v17 = v12[5];
  int v18 = &v10[v17];
  uint64_t v19 = &v11[v17];
  *(void *)int v18 = *(void *)v19;
  v18[8] = v19[8];
  uint64_t v20 = v12[6];
  uint64_t v21 = &v10[v20];
  uint64_t v22 = &v11[v20];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  uint64_t v23 = v12[7];
  char v24 = &v10[v23];
  uint64_t v25 = &v11[v23];
  *(void *)char v24 = *(void *)v25;
  v24[8] = v25[8];
  (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
  return a1;
}

uint64_t sub_1001392A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001392AC);
}

uint64_t sub_1001392AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013EA24(a1, a2, a3, &qword_100355538);
}

uint64_t sub_1001392B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001392C4);
}

uint64_t sub_1001392C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10013EAB4(a1, a2, a3, a4, &qword_100355538);
}

uint64_t sub_1001392D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001392DC);
}

uint64_t sub_1001392E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001392EC);
}

void *sub_1001392F0(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v12);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    uint64_t v9 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
    uint64_t v10 = a3[10];
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *((_BYTE *)a1 + v10) = *((_BYTE *)a2 + v10);
    uint64_t v11 = a3[12];
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
  }

  return a1;
}

uint64_t sub_1001393BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  return a1;
}

uint64_t sub_10013945C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_10013950C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  return a1;
}

uint64_t sub_1001395AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  return a1;
}

uint64_t sub_10013964C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100139658);
}

uint64_t sub_10013965C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100139668);
}

uint64_t sub_10013966C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013967C(a1, a2, a3, (uint64_t)&unk_1002C7E68, (uint64_t)&unk_1002C7E68);
}

uint64_t sub_10013967C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v9 <= 0x3F)
  {
    v10[0] = *(void *)(result - 8) + 64LL;
    v10[1] = a4;
    v10[2] = a5;
    v10[3] = a5;
    v10[4] = a5;
    v10[5] = a5;
    v10[6] = a5;
    v10[7] = &unk_1002C7E68;
    v10[8] = &unk_1002C7E68;
    swift_initStructMetadata(a1, 256LL, 9LL, v10, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_10013970C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100139718);
}

uint64_t sub_10013971C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100139728);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_100139778 + 4 * byte_1002BB17D[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1001397AC + 4 * byte_1002BB178[v4]))();
}

uint64_t sub_1001397AC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001397B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001397BCLL);
  }
  return result;
}

uint64_t sub_1001397C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001397D0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1001397D4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001397DC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType()
{
  return &type metadata for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType;
}

uint64_t *sub_1001397F8(uint64_t *a1, uint64_t *a2, int *a3)
{
  return sub_100134724(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &qword_1003555F8);
}

uint64_t sub_10013980C(uint64_t a1, uint64_t a2)
{
  return sub_100134950(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

uint64_t sub_100139818(uint64_t a1, uint64_t a2, int *a3)
{
  return sub_100134A48(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &qword_1003555F8);
}

uint64_t sub_10013982C(uint64_t a1, uint64_t a2, int *a3)
{
  return sub_100139840(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &qword_1003555F8);
}

uint64_t sub_100139840(uint64_t a1, uint64_t a2, int *a3, uint64_t (*a4)(void), uint64_t *a5)
{
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v63 = *(void *)(v8 - 8);
  uint64_t v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 24);
  v62(a1, a2, v8);
  uint64_t v9 = a3[5];
  uint64_t v10 = (char *)(a1 + v9);
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v13 = *((void *)v12 - 1);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, int *))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14(v11, 1LL, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v10, v11, v8);
      uint64_t v17 = v12[5];
      int v18 = &v10[v17];
      uint64_t v19 = &v11[v17];
      char v20 = v19[8];
      *(void *)int v18 = *(void *)v19;
      v18[8] = v20;
      uint64_t v21 = v12[6];
      uint64_t v22 = &v10[v21];
      uint64_t v23 = &v11[v21];
      char v24 = v23[8];
      *(void *)uint64_t v22 = *(void *)v23;
      v22[8] = v24;
      uint64_t v25 = v12[7];
      uint64_t v26 = &v10[v25];
      uint64_t v27 = &v11[v25];
      char v28 = v27[8];
      *(void *)uint64_t v26 = *(void *)v27;
      v26[8] = v28;
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v16)
  {
    sub_100004090((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v29 = sub_100003A0C(&qword_100355538);
    memcpy(v10, v11, *(void *)(*(void *)(v29 - 8) + 64LL));
    goto LABEL_7;
  }

  v62((uint64_t)v10, (uint64_t)v11, v8);
  uint64_t v47 = v12[5];
  uint64_t v48 = &v10[v47];
  char v49 = &v11[v47];
  char v50 = v49[8];
  *(void *)uint64_t v48 = *(void *)v49;
  v48[8] = v50;
  uint64_t v51 = v12[6];
  uint64_t v52 = &v10[v51];
  char v53 = &v11[v51];
  char v54 = v53[8];
  *(void *)uint64_t v52 = *(void *)v53;
  v52[8] = v54;
  uint64_t v55 = v12[7];
  int v56 = &v10[v55];
  uint64_t v57 = &v11[v55];
  char v58 = v57[8];
  *(void *)int v56 = *(void *)v57;
  v56[8] = v58;
LABEL_7:
  uint64_t v30 = a3[6];
  uint64_t v31 = a1 + v30;
  uint64_t v32 = (int *)(a2 + v30);
  int v33 = *v32;
  *(_BYTE *)(v31 + 4) = *((_BYTE *)v32 + 4);
  *(_DWORD *)uint64_t v31 = v33;
  uint64_t v34 = a3[7];
  uint64_t v35 = (char *)(a1 + v34);
  uint64_t v36 = (char *)(a2 + v34);
  uint64_t v37 = a4(0LL);
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
  int v40 = v39(v35, 1LL, v37);
  int v41 = v39(v36, 1LL, v37);
  if (!v40)
  {
    if (!v41)
    {
      v62((uint64_t)v35, (uint64_t)v36, v8);
      uint64_t v59 = *(int *)(v37 + 20);
      uint64_t v60 = *(void *)&v36[v59];
      uint64_t v61 = *(void *)&v35[v59];
      *(void *)&v35[v59] = v60;
      swift_retain(v60);
      swift_release(v61);
      return a1;
    }

    sub_100004090((uint64_t)v35, a4);
    goto LABEL_12;
  }

  if (v41)
  {
LABEL_12:
    uint64_t v45 = sub_100003A0C(a5);
    memcpy(v35, v36, *(void *)(*(void *)(v45 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v35, v36, v8);
  uint64_t v42 = *(int *)(v37 + 20);
  uint64_t v43 = *(void *)&v36[v42];
  *(void *)&v35[v42] = v43;
  uint64_t v44 = *(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56);
  swift_retain(v43);
  v44(v35, 0LL, 1LL, v37);
  return a1;
}

uint64_t sub_100139B44(uint64_t a1, uint64_t a2, int *a3)
{
  return sub_100134C64(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &qword_1003555F8);
}

uint64_t sub_100139B58(uint64_t a1, uint64_t a2, int *a3)
{
  return sub_100139B6C(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &qword_1003555F8);
}

uint64_t sub_100139B6C(uint64_t a1, uint64_t a2, int *a3, uint64_t (*a4)(void), uint64_t *a5)
{
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v52 = *(void *)(v8 - 8);
  uint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 40);
  v51(a1, a2, v8);
  uint64_t v9 = a3[5];
  uint64_t v10 = (char *)(a1 + v9);
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v13 = *((void *)v12 - 1);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, int *))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14(v11, 1LL, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v10, v11, v8);
      uint64_t v17 = v12[5];
      int v18 = &v10[v17];
      uint64_t v19 = &v11[v17];
      *(void *)int v18 = *(void *)v19;
      v18[8] = v19[8];
      uint64_t v20 = v12[6];
      uint64_t v21 = &v10[v20];
      uint64_t v22 = &v11[v20];
      *(void *)uint64_t v21 = *(void *)v22;
      v21[8] = v22[8];
      uint64_t v23 = v12[7];
      char v24 = &v10[v23];
      uint64_t v25 = &v11[v23];
      *(void *)char v24 = *(void *)v25;
      v24[8] = v25[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v16)
  {
    sub_100004090((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v26 = sub_100003A0C(&qword_100355538);
    memcpy(v10, v11, *(void *)(*(void *)(v26 - 8) + 64LL));
    goto LABEL_7;
  }

  v51((uint64_t)v10, (uint64_t)v11, v8);
  uint64_t v40 = v12[5];
  int v41 = &v10[v40];
  uint64_t v42 = &v11[v40];
  *(void *)int v41 = *(void *)v42;
  v41[8] = v42[8];
  uint64_t v43 = v12[6];
  uint64_t v44 = &v10[v43];
  uint64_t v45 = &v11[v43];
  *(void *)uint64_t v44 = *(void *)v45;
  v44[8] = v45[8];
  uint64_t v46 = v12[7];
  uint64_t v47 = &v10[v46];
  uint64_t v48 = &v11[v46];
  *(void *)uint64_t v47 = *(void *)v48;
  v47[8] = v48[8];
LABEL_7:
  uint64_t v27 = a3[6];
  uint64_t v28 = a3[7];
  uint64_t v29 = a1 + v27;
  uint64_t v30 = a2 + v27;
  *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
  *(_BYTE *)(v29 + 4) = *(_BYTE *)(v30 + 4);
  uint64_t v31 = (char *)(a1 + v28);
  uint64_t v32 = (char *)(a2 + v28);
  uint64_t v33 = a4(0LL);
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  int v36 = v35(v31, 1LL, v33);
  int v37 = v35(v32, 1LL, v33);
  if (!v36)
  {
    if (!v37)
    {
      v51((uint64_t)v31, (uint64_t)v32, v8);
      uint64_t v49 = *(int *)(v33 + 20);
      uint64_t v50 = *(void *)&v31[v49];
      *(void *)&v31[v49] = *(void *)&v32[v49];
      swift_release(v50);
      return a1;
    }

    sub_100004090((uint64_t)v31, a4);
    goto LABEL_12;
  }

  if (v37)
  {
LABEL_12:
    uint64_t v38 = sub_100003A0C(a5);
    memcpy(v31, v32, *(void *)(*(void *)(v38 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v31, v32, v8);
  *(void *)&v31[*(int *)(v33 + 20)] = *(void *)&v32[*(int *)(v33 + 20)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0LL, 1LL, v33);
  return a1;
}

uint64_t sub_100139E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100139E6C);
}

uint64_t sub_100139E6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100139E78(a1, a2, a3, &qword_1003555F8);
}

uint64_t sub_100139E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v13 = sub_100003A0C(&qword_100355538);
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v13;
      uint64_t v15 = *(int *)(a3 + 20);
    }

    else
    {
      uint64_t v10 = sub_100003A0C(a4);
      uint64_t v14 = *(void *)(v10 - 8);
      uint64_t v15 = *(int *)(a3 + 28);
    }

    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  }

  return v11(v12, a2, v10);
}

uint64_t sub_100139F18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100139F24);
}

uint64_t sub_100139F24(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100139F30(a1, a2, a3, a4, &qword_1003555F8);
}

uint64_t sub_100139F30(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  if (*(_DWORD *)(v11 + 84) == a3)
  {
    uint64_t v12 = v10;
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    uint64_t v14 = a1;
  }

  else
  {
    uint64_t v15 = sub_100003A0C(&qword_100355538);
    uint64_t v16 = *(void *)(v15 - 8);
    if (*(_DWORD *)(v16 + 84) == a3)
    {
      uint64_t v12 = v15;
      uint64_t v17 = *(int *)(a4 + 20);
    }

    else
    {
      uint64_t v12 = sub_100003A0C(a5);
      uint64_t v16 = *(void *)(v12 - 8);
      uint64_t v17 = *(int *)(a4 + 28);
    }

    uint64_t v14 = a1 + v17;
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
  }

  return v13(v14, a2, a2, v12);
}

void sub_100139FE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_100139FF4( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v8 = type metadata accessor for UnknownStorage(319LL);
  if (v9 <= 0x3F)
  {
    v14[0] = *(void *)(v8 - 8) + 64LL;
    sub_1000119EC( 319LL,  (unint64_t *)&unk_100356B40,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v11 <= 0x3F)
    {
      v14[1] = *(void *)(v10 - 8) + 64LL;
      v14[2] = &unk_1002C7CB8;
      sub_1000119EC(319LL, a4, a5);
      if (v13 <= 0x3F)
      {
        v14[3] = *(void *)(v12 - 8) + 64LL;
        swift_initStructMetadata(a1, 256LL, 4LL, v14, a1 + 16);
      }
    }
  }

uint64_t sub_10013A0C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013A0D0);
}

uint64_t sub_10013A0D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013A0E0);
}

uint64_t sub_10013A0E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013A0F0(a1, a2, a3, (uint64_t)&unk_1002C7CB8);
}

uint64_t sub_10013A0F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v7 <= 0x3F)
  {
    v8[0] = *(void *)(result - 8) + 64LL;
    v8[1] = a4;
    v8[2] = a4;
    v8[3] = a4;
    swift_initStructMetadata(a1, 256LL, 4LL, v8, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_10013A160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013A16C);
}

uint64_t sub_10013A170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013A17C);
}

uint64_t sub_10013A180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013A18C);
}

uint64_t sub_10013A190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013A19C);
}

char *sub_10013A1A0(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = &a1[v9];
    unint64_t v11 = &a2[v9];
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1LL, v12))
    {
      uint64_t v14 = sub_100003A0C(&qword_100355538);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      v8(v10, v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      int v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      char v24 = &v11[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
    }

    uint64_t v25 = a3[6];
    uint64_t v26 = &a1[v25];
    uint64_t v27 = &a2[v25];
    uint64_t v28 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0LL);
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1LL, v28))
    {
      uint64_t v30 = sub_100003A0C(&qword_100355610);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64LL));
    }

    else
    {
      v8(v26, v27, v7);
      uint64_t v31 = *(int *)(v28 + 20);
      uint64_t v32 = *(void *)&v27[v31];
      *(void *)&v26[v31] = v32;
      uint64_t v33 = *(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56);
      swift_retain(v32);
      v33(v26, 0LL, 1LL, v28);
    }

    uint64_t v34 = a3[7];
    uint64_t v35 = a3[8];
    int v36 = &a1[v34];
    int v37 = &a2[v34];
    *(_DWORD *)int v36 = *(_DWORD *)v37;
    v36[4] = v37[4];
    uint64_t v38 = &a1[v35];
    uint64_t v39 = &a2[v35];
    *(_DWORD *)uint64_t v38 = *(_DWORD *)v39;
    v38[4] = v39[4];
    a1[a3[9]] = a2[a3[9]];
  }

  return a1;
}

uint64_t sub_10013A3DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v5(a1, v4);
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v8 = a1 + *(int *)(a2 + 24);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9);
  if (!(_DWORD)result)
  {
    v5(v8, v4);
    return swift_release(*(void *)(v8 + *(int *)(v9 + 20)));
  }

  return result;
}

uint64_t sub_10013A4BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  unint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    int v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)int v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v23 = a3[6];
  char v24 = (char *)(a1 + v23);
  uint64_t v25 = (char *)(a2 + v23);
  uint64_t v26 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26))
  {
    uint64_t v28 = sub_100003A0C(&qword_100355610);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v24, (uint64_t)v25, v6);
    uint64_t v29 = *(int *)(v26 + 20);
    uint64_t v30 = *(void *)&v25[v29];
    *(void *)&v24[v29] = v30;
    uint64_t v31 = *(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56);
    swift_retain(v30);
    v31(v24, 0LL, 1LL, v26);
  }

  uint64_t v32 = a3[7];
  uint64_t v33 = a3[8];
  uint64_t v34 = a1 + v32;
  uint64_t v35 = a2 + v32;
  *(_DWORD *)uint64_t v34 = *(_DWORD *)v35;
  *(_BYTE *)(v34 + 4) = *(_BYTE *)(v35 + 4);
  uint64_t v36 = a1 + v33;
  uint64_t v37 = a2 + v33;
  *(_DWORD *)uint64_t v36 = *(_DWORD *)v37;
  *(_BYTE *)(v36 + 4) = *(_BYTE *)(v37 + 4);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10013A6CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v65 = *(void *)(v6 - 8);
  uint64_t v64 = *(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 24);
  v64(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v8, v9, v6);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      char v18 = v17[8];
      *(void *)uint64_t v16 = *(void *)v17;
      v16[8] = v18;
      uint64_t v19 = v10[6];
      uint64_t v20 = &v8[v19];
      uint64_t v21 = &v9[v19];
      char v22 = v21[8];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v22;
      uint64_t v23 = v10[7];
      char v24 = &v8[v23];
      uint64_t v25 = &v9[v23];
      char v26 = v25[8];
      *(void *)char v24 = *(void *)v25;
      v24[8] = v26;
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    sub_100004090((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v27 = sub_100003A0C(&qword_100355538);
    memcpy(v8, v9, *(void *)(*(void *)(v27 - 8) + 64LL));
    goto LABEL_7;
  }

  v64((uint64_t)v8, (uint64_t)v9, v6);
  uint64_t v49 = v10[5];
  uint64_t v50 = &v8[v49];
  uint64_t v51 = &v9[v49];
  char v52 = v51[8];
  *(void *)uint64_t v50 = *(void *)v51;
  v50[8] = v52;
  uint64_t v53 = v10[6];
  char v54 = &v8[v53];
  uint64_t v55 = &v9[v53];
  char v56 = v55[8];
  *(void *)char v54 = *(void *)v55;
  v54[8] = v56;
  uint64_t v57 = v10[7];
  char v58 = &v8[v57];
  uint64_t v59 = &v9[v57];
  char v60 = v59[8];
  *(void *)char v58 = *(void *)v59;
  v58[8] = v60;
LABEL_7:
  uint64_t v28 = a3[6];
  uint64_t v29 = (char *)(a1 + v28);
  uint64_t v30 = (char *)(a2 + v28);
  uint64_t v31 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0LL);
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  int v34 = v33(v29, 1LL, v31);
  int v35 = v33(v30, 1LL, v31);
  if (!v34)
  {
    if (!v35)
    {
      v64((uint64_t)v29, (uint64_t)v30, v6);
      uint64_t v61 = *(int *)(v31 + 20);
      uint64_t v62 = *(void *)&v30[v61];
      uint64_t v63 = *(void *)&v29[v61];
      *(void *)&v29[v61] = v62;
      swift_retain(v62);
      swift_release(v63);
      goto LABEL_13;
    }

    sub_100004090((uint64_t)v29, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
    goto LABEL_12;
  }

  if (v35)
  {
LABEL_12:
    uint64_t v39 = sub_100003A0C(&qword_100355610);
    memcpy(v29, v30, *(void *)(*(void *)(v39 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v29, v30, v6);
  uint64_t v36 = *(int *)(v31 + 20);
  uint64_t v37 = *(void *)&v30[v36];
  *(void *)&v29[v36] = v37;
  uint64_t v38 = *(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56);
  swift_retain(v37);
  v38(v29, 0LL, 1LL, v31);
LABEL_13:
  uint64_t v40 = a3[7];
  uint64_t v41 = a1 + v40;
  uint64_t v42 = (int *)(a2 + v40);
  int v43 = *v42;
  *(_BYTE *)(v41 + 4) = *((_BYTE *)v42 + 4);
  *(_DWORD *)uint64_t v41 = v43;
  uint64_t v44 = a3[8];
  uint64_t v45 = a1 + v44;
  uint64_t v46 = (int *)(a2 + v44);
  int v47 = *v46;
  *(_BYTE *)(v45 + 4) = *((_BYTE *)v46 + 4);
  *(_DWORD *)uint64_t v45 = v47;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10013A9F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    char v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)char v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    char v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v23 = a3[6];
  char v24 = (char *)(a1 + v23);
  uint64_t v25 = (char *)(a2 + v23);
  uint64_t v26 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26))
  {
    uint64_t v28 = sub_100003A0C(&qword_100355610);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v24, (uint64_t)v25, v6);
    *(void *)&v24[*(int *)(v26 + 20)] = *(void *)&v25[*(int *)(v26 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
  }

  uint64_t v29 = a3[7];
  uint64_t v30 = a3[8];
  uint64_t v31 = a1 + v29;
  uint64_t v32 = a2 + v29;
  *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
  *(_BYTE *)(v31 + 4) = *(_BYTE *)(v32 + 4);
  uint64_t v33 = a1 + v30;
  uint64_t v34 = a2 + v30;
  *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10013AC04(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v53 = *(void *)(v6 - 8);
  char v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 40);
  v52(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v8, v9, v6);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      *(void *)uint64_t v16 = *(void *)v17;
      v16[8] = v17[8];
      uint64_t v18 = v10[6];
      uint64_t v19 = &v8[v18];
      uint64_t v20 = &v9[v18];
      *(void *)uint64_t v19 = *(void *)v20;
      v19[8] = v20[8];
      uint64_t v21 = v10[7];
      char v22 = &v8[v21];
      uint64_t v23 = &v9[v21];
      *(void *)char v22 = *(void *)v23;
      v22[8] = v23[8];
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    sub_100004090((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v24 = sub_100003A0C(&qword_100355538);
    memcpy(v8, v9, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_7;
  }

  v52((uint64_t)v8, (uint64_t)v9, v6);
  uint64_t v41 = v10[5];
  uint64_t v42 = &v8[v41];
  int v43 = &v9[v41];
  *(void *)uint64_t v42 = *(void *)v43;
  v42[8] = v43[8];
  uint64_t v44 = v10[6];
  uint64_t v45 = &v8[v44];
  uint64_t v46 = &v9[v44];
  *(void *)uint64_t v45 = *(void *)v46;
  v45[8] = v46[8];
  uint64_t v47 = v10[7];
  uint64_t v48 = &v8[v47];
  uint64_t v49 = &v9[v47];
  *(void *)uint64_t v48 = *(void *)v49;
  v48[8] = v49[8];
LABEL_7:
  uint64_t v25 = a3[6];
  uint64_t v26 = (char *)(a1 + v25);
  uint64_t v27 = (char *)(a2 + v25);
  uint64_t v28 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  int v31 = v30(v26, 1LL, v28);
  int v32 = v30(v27, 1LL, v28);
  if (!v31)
  {
    if (!v32)
    {
      v52((uint64_t)v26, (uint64_t)v27, v6);
      uint64_t v50 = *(int *)(v28 + 20);
      uint64_t v51 = *(void *)&v26[v50];
      *(void *)&v26[v50] = *(void *)&v27[v50];
      swift_release(v51);
      goto LABEL_13;
    }

    sub_100004090((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
    goto LABEL_12;
  }

  if (v32)
  {
LABEL_12:
    uint64_t v33 = sub_100003A0C(&qword_100355610);
    memcpy(v26, v27, *(void *)(*(void *)(v33 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v26, v27, v6);
  *(void *)&v26[*(int *)(v28 + 20)] = *(void *)&v27[*(int *)(v28 + 20)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0LL, 1LL, v28);
LABEL_13:
  uint64_t v34 = a3[7];
  uint64_t v35 = a3[8];
  uint64_t v36 = a1 + v34;
  uint64_t v37 = a2 + v34;
  *(_DWORD *)uint64_t v36 = *(_DWORD *)v37;
  *(_BYTE *)(v36 + 4) = *(_BYTE *)(v37 + 4);
  uint64_t v38 = a1 + v35;
  uint64_t v39 = a2 + v35;
  *(_DWORD *)uint64_t v38 = *(_DWORD *)v39;
  *(_BYTE *)(v38 + 4) = *(_BYTE *)(v39 + 4);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10013AF20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013AF2C);
}

uint64_t sub_10013AF2C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  uint64_t v11 = sub_100003A0C(&qword_100355538);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v11;
    uint64_t v13 = a3[5];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }

  uint64_t v14 = sub_100003A0C(&qword_100355610);
  uint64_t v12 = *(void *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v14;
    uint64_t v13 = a3[6];
    goto LABEL_7;
  }

  unsigned int v16 = *(unsigned __int8 *)(a1 + a3[9]);
  if (v16 >= 2) {
    int v17 = ((v16 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v17 = -2;
  }
  if (v17 < 0) {
    int v17 = -1;
  }
  return (v17 + 1);
}

uint64_t sub_10013B01C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013B028);
}

uint64_t sub_10013B028(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
    return v11(v12, a2, a2, v10);
  }

  uint64_t v13 = sub_100003A0C(&qword_100355538);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v15 = a4[5];
LABEL_7:
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }

  uint64_t result = sub_100003A0C(&qword_100355610);
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v15 = a4[6];
    goto LABEL_7;
  }

  *(_BYTE *)(a1 + a4[9]) = a2 + 2;
  return result;
}

void sub_10013B0F8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v8[0] = *(void *)(v2 - 8) + 64LL;
    sub_1000119EC( 319LL,  (unint64_t *)&unk_100356B40,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v5 <= 0x3F)
    {
      v8[1] = *(void *)(v4 - 8) + 64LL;
      sub_1000119EC( 319LL,  (unint64_t *)&unk_100358AA8,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
      if (v7 <= 0x3F)
      {
        v8[2] = *(void *)(v6 - 8) + 64LL;
        v8[3] = &unk_1002C7CB8;
        void v8[4] = &unk_1002C7CB8;
        v8[5] = &unk_1002C7E68;
        swift_initStructMetadata(a1, 256LL, 6LL, v8, a1 + 16);
      }
    }
  }

uint64_t sub_10013B1CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013B1D8);
}

uint64_t sub_10013B1DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013B1E8);
}

uint64_t sub_10013B1EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013B1F8);
}

uint64_t sub_10013B1FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013B208);
}

uint64_t *sub_10013B20C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v11);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
    v9[4] = v10[4];
  }

  return a1;
}

uint64_t sub_10013B2A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  return a1;
}

uint64_t sub_10013B310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(_BYTE *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = v10;
  return a1;
}

uint64_t sub_10013B37C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  return a1;
}

uint64_t sub_10013B3E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  return a1;
}

uint64_t sub_10013B454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013B460);
}

uint64_t sub_10013B464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013B470);
}

uint64_t sub_10013B474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100148D5C(a1, a2, a3, (uint64_t)&unk_1002C7CB8);
}

char *sub_10013B480(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    char v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1LL, v12))
    {
      uint64_t v14 = sub_100003A0C(&qword_100355538);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      v8(v10, v11, v7);
      uint64_t v16 = v12[5];
      int v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)int v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
    }

    uint64_t v25 = a3[6];
    uint64_t v26 = &a1[v25];
    uint64_t v27 = &a2[v25];
    uint64_t v28 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0LL);
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1LL, v28))
    {
      uint64_t v30 = sub_100003A0C(&qword_100355618);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64LL));
    }

    else
    {
      v8(v26, v27, v7);
      uint64_t v31 = *(int *)(v28 + 20);
      uint64_t v32 = *(void *)&v27[v31];
      *(void *)&v26[v31] = v32;
      uint64_t v33 = *(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56);
      swift_retain(v32);
      v33(v26, 0LL, 1LL, v28);
    }

    uint64_t v34 = a3[8];
    a1[a3[7]] = a2[a3[7]];
    uint64_t v35 = &a1[v34];
    uint64_t v36 = &a2[v34];
    *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
    v35[4] = v36[4];
    uint64_t v37 = a3[10];
    a1[a3[9]] = a2[a3[9]];
    uint64_t v38 = &a1[v37];
    uint64_t v39 = &a2[v37];
    uint64_t v40 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0LL);
    uint64_t v41 = *(void *)(v40 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1LL, v40))
    {
      uint64_t v42 = sub_100003A0C(&qword_100355620);
      memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64LL));
    }

    else
    {
      v8(v38, v39, v7);
      uint64_t v43 = *(int *)(v40 + 20);
      uint64_t v44 = &v38[v43];
      uint64_t v45 = &v39[v43];
      *(_DWORD *)uint64_t v44 = *(_DWORD *)v45;
      v44[4] = v45[4];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0LL, 1LL, v40);
    }

    uint64_t v46 = a3[11];
    uint64_t v47 = a3[12];
    uint64_t v48 = &a1[v46];
    uint64_t v49 = &a2[v46];
    *(_DWORD *)uint64_t v48 = *(_DWORD *)v49;
    v48[4] = v49[4];
    uint64_t v50 = &a1[v47];
    uint64_t v51 = &a2[v47];
    *(_DWORD *)uint64_t v50 = *(_DWORD *)v51;
    v50[4] = v51[4];
  }

  return a1;
}

uint64_t sub_10013B778(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v12(a1, v4);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v7 = a1 + a2[6];
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))(v7, 1LL, v8))
  {
    v12(v7, v4);
    swift_release(*(void *)(v7 + *(int *)(v8 + 20)));
  }

  uint64_t v9 = a1 + a2[10];
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))(v9, 1LL, v10);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v9, v4);
  }
  return result;
}

uint64_t sub_10013B8AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v23 = a3[6];
  uint64_t v24 = (char *)(a1 + v23);
  uint64_t v25 = (char *)(a2 + v23);
  uint64_t v26 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26))
  {
    uint64_t v28 = sub_100003A0C(&qword_100355618);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v24, (uint64_t)v25, v6);
    uint64_t v29 = *(int *)(v26 + 20);
    uint64_t v30 = *(void *)&v25[v29];
    *(void *)&v24[v29] = v30;
    uint64_t v31 = *(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56);
    swift_retain(v30);
    v31(v24, 0LL, 1LL, v26);
  }

  uint64_t v32 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  uint64_t v35 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  uint64_t v36 = (char *)(a1 + v35);
  uint64_t v37 = (char *)(a2 + v35);
  uint64_t v38 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0LL);
  uint64_t v39 = *(void *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1LL, v38))
  {
    uint64_t v40 = sub_100003A0C(&qword_100355620);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v36, (uint64_t)v37, v6);
    uint64_t v41 = *(int *)(v38 + 20);
    uint64_t v42 = &v36[v41];
    uint64_t v43 = &v37[v41];
    *(_DWORD *)uint64_t v42 = *(_DWORD *)v43;
    v42[4] = v43[4];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0LL, 1LL, v38);
  }

  uint64_t v44 = a3[11];
  uint64_t v45 = a3[12];
  uint64_t v46 = a1 + v44;
  uint64_t v47 = a2 + v44;
  *(_DWORD *)uint64_t v46 = *(_DWORD *)v47;
  *(_BYTE *)(v46 + 4) = *(_BYTE *)(v47 + 4);
  uint64_t v48 = a1 + v45;
  uint64_t v49 = a2 + v45;
  *(_DWORD *)uint64_t v48 = *(_DWORD *)v49;
  *(_BYTE *)(v48 + 4) = *(_BYTE *)(v49 + 4);
  return a1;
}

uint64_t sub_10013BB78(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v86 = *(void *)(v6 - 8);
  char v85 = *(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 24);
  v85(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v8, v9, v6);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      char v18 = v17[8];
      *(void *)uint64_t v16 = *(void *)v17;
      v16[8] = v18;
      uint64_t v19 = v10[6];
      uint64_t v20 = &v8[v19];
      uint64_t v21 = &v9[v19];
      char v22 = v21[8];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v22;
      uint64_t v23 = v10[7];
      uint64_t v24 = &v8[v23];
      uint64_t v25 = &v9[v23];
      char v26 = v25[8];
      *(void *)uint64_t v24 = *(void *)v25;
      v24[8] = v26;
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    sub_100004090((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v27 = sub_100003A0C(&qword_100355538);
    memcpy(v8, v9, *(void *)(*(void *)(v27 - 8) + 64LL));
    goto LABEL_7;
  }

  v85((uint64_t)v8, (uint64_t)v9, v6);
  uint64_t v66 = v10[5];
  char v67 = &v8[v66];
  uint64_t v68 = &v9[v66];
  char v69 = v68[8];
  *(void *)char v67 = *(void *)v68;
  v67[8] = v69;
  uint64_t v70 = v10[6];
  char v71 = &v8[v70];
  uint64_t v72 = &v9[v70];
  char v73 = v72[8];
  *(void *)char v71 = *(void *)v72;
  v71[8] = v73;
  uint64_t v74 = v10[7];
  char v75 = &v8[v74];
  uint64_t v76 = &v9[v74];
  char v77 = v76[8];
  *(void *)char v75 = *(void *)v76;
  v75[8] = v77;
LABEL_7:
  uint64_t v28 = a3[6];
  uint64_t v29 = (char *)(a1 + v28);
  uint64_t v30 = (char *)(a2 + v28);
  uint64_t v31 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0LL);
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  int v34 = v33(v29, 1LL, v31);
  int v35 = v33(v30, 1LL, v31);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v29, v30, v6);
      uint64_t v36 = *(int *)(v31 + 20);
      uint64_t v37 = *(void *)&v30[v36];
      *(void *)&v29[v36] = v37;
      uint64_t v38 = *(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56);
      swift_retain(v37);
      v38(v29, 0LL, 1LL, v31);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v35)
  {
    sub_100004090((uint64_t)v29, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
LABEL_12:
    uint64_t v39 = sub_100003A0C(&qword_100355618);
    memcpy(v29, v30, *(void *)(*(void *)(v39 - 8) + 64LL));
    goto LABEL_13;
  }

  v85((uint64_t)v29, (uint64_t)v30, v6);
  uint64_t v78 = *(int *)(v31 + 20);
  uint64_t v79 = *(void *)&v30[v78];
  uint64_t v80 = *(void *)&v29[v78];
  *(void *)&v29[v78] = v79;
  swift_retain(v79);
  swift_release(v80);
LABEL_13:
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  uint64_t v40 = a3[8];
  uint64_t v41 = a1 + v40;
  uint64_t v42 = (int *)(a2 + v40);
  int v43 = *v42;
  *(_BYTE *)(v41 + 4) = *((_BYTE *)v42 + 4);
  *(_DWORD *)uint64_t v41 = v43;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  uint64_t v44 = a3[10];
  uint64_t v45 = (char *)(a1 + v44);
  uint64_t v46 = (char *)(a2 + v44);
  uint64_t v47 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0LL);
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48);
  int v50 = v49(v45, 1LL, v47);
  int v51 = v49(v46, 1LL, v47);
  if (!v50)
  {
    if (!v51)
    {
      v85((uint64_t)v45, (uint64_t)v46, v6);
      uint64_t v81 = *(int *)(v47 + 20);
      uint64_t v82 = &v45[v81];
      uint64_t v83 = &v46[v81];
      char v84 = v83[4];
      *(_DWORD *)uint64_t v82 = *(_DWORD *)v83;
      v82[4] = v84;
      goto LABEL_19;
    }

    sub_100004090((uint64_t)v45, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
    goto LABEL_18;
  }

  if (v51)
  {
LABEL_18:
    uint64_t v56 = sub_100003A0C(&qword_100355620);
    memcpy(v45, v46, *(void *)(*(void *)(v56 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v45, v46, v6);
  uint64_t v52 = *(int *)(v47 + 20);
  uint64_t v53 = &v45[v52];
  char v54 = &v46[v52];
  char v55 = v54[4];
  *(_DWORD *)uint64_t v53 = *(_DWORD *)v54;
  v53[4] = v55;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0LL, 1LL, v47);
LABEL_19:
  uint64_t v57 = a3[11];
  uint64_t v58 = a1 + v57;
  uint64_t v59 = (int *)(a2 + v57);
  int v60 = *v59;
  *(_BYTE *)(v58 + 4) = *((_BYTE *)v59 + 4);
  *(_DWORD *)uint64_t v58 = v60;
  uint64_t v61 = a3[12];
  uint64_t v62 = a1 + v61;
  uint64_t v63 = (int *)(a2 + v61);
  int v64 = *v63;
  *(_BYTE *)(v62 + 4) = *((_BYTE *)v63 + 4);
  *(_DWORD *)uint64_t v62 = v64;
  return a1;
}

uint64_t sub_10013BFD0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    char v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)char v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    char v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v23 = a3[6];
  uint64_t v24 = (char *)(a1 + v23);
  uint64_t v25 = (char *)(a2 + v23);
  uint64_t v26 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26))
  {
    uint64_t v28 = sub_100003A0C(&qword_100355618);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v24, (uint64_t)v25, v6);
    *(void *)&v24[*(int *)(v26 + 20)] = *(void *)&v25[*(int *)(v26 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
  }

  uint64_t v29 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  uint64_t v32 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  uint64_t v33 = (char *)(a1 + v32);
  int v34 = (char *)(a2 + v32);
  uint64_t v35 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0LL);
  uint64_t v36 = *(void *)(v35 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1LL, v35))
  {
    uint64_t v37 = sub_100003A0C(&qword_100355620);
    memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v33, (uint64_t)v34, v6);
    uint64_t v38 = *(int *)(v35 + 20);
    uint64_t v39 = &v33[v38];
    uint64_t v40 = &v34[v38];
    *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
    v39[4] = v40[4];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0LL, 1LL, v35);
  }

  uint64_t v41 = a3[11];
  uint64_t v42 = a3[12];
  uint64_t v43 = a1 + v41;
  uint64_t v44 = a2 + v41;
  *(_DWORD *)uint64_t v43 = *(_DWORD *)v44;
  *(_BYTE *)(v43 + 4) = *(_BYTE *)(v44 + 4);
  uint64_t v45 = a1 + v42;
  uint64_t v46 = a2 + v42;
  *(_DWORD *)uint64_t v45 = *(_DWORD *)v46;
  *(_BYTE *)(v45 + 4) = *(_BYTE *)(v46 + 4);
  return a1;
}

uint64_t sub_10013C298(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v71 = *(void *)(v6 - 8);
  uint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 40);
  v70(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v8, v9, v6);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      *(void *)uint64_t v16 = *(void *)v17;
      v16[8] = v17[8];
      uint64_t v18 = v10[6];
      uint64_t v19 = &v8[v18];
      uint64_t v20 = &v9[v18];
      *(void *)uint64_t v19 = *(void *)v20;
      v19[8] = v20[8];
      uint64_t v21 = v10[7];
      char v22 = &v8[v21];
      uint64_t v23 = &v9[v21];
      *(void *)char v22 = *(void *)v23;
      v22[8] = v23[8];
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    sub_100004090((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v24 = sub_100003A0C(&qword_100355538);
    memcpy(v8, v9, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_7;
  }

  v70((uint64_t)v8, (uint64_t)v9, v6);
  uint64_t v56 = v10[5];
  uint64_t v57 = &v8[v56];
  uint64_t v58 = &v9[v56];
  *(void *)uint64_t v57 = *(void *)v58;
  v57[8] = v58[8];
  uint64_t v59 = v10[6];
  int v60 = &v8[v59];
  uint64_t v61 = &v9[v59];
  *(void *)int v60 = *(void *)v61;
  v60[8] = v61[8];
  uint64_t v62 = v10[7];
  uint64_t v63 = &v8[v62];
  int v64 = &v9[v62];
  *(void *)uint64_t v63 = *(void *)v64;
  v63[8] = v64[8];
LABEL_7:
  uint64_t v25 = a3[6];
  uint64_t v26 = (char *)(a1 + v25);
  uint64_t v27 = (char *)(a2 + v25);
  uint64_t v28 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  int v31 = v30(v26, 1LL, v28);
  int v32 = v30(v27, 1LL, v28);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v26, v27, v6);
      *(void *)&v26[*(int *)(v28 + 20)] = *(void *)&v27[*(int *)(v28 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0LL, 1LL, v28);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v32)
  {
    sub_100004090((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
LABEL_12:
    uint64_t v33 = sub_100003A0C(&qword_100355618);
    memcpy(v26, v27, *(void *)(*(void *)(v33 - 8) + 64LL));
    goto LABEL_13;
  }

  v70((uint64_t)v26, (uint64_t)v27, v6);
  uint64_t v65 = *(int *)(v28 + 20);
  uint64_t v66 = *(void *)&v26[v65];
  *(void *)&v26[v65] = *(void *)&v27[v65];
  swift_release(v66);
LABEL_13:
  uint64_t v34 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
  *(_BYTE *)(v35 + 4) = *(_BYTE *)(v36 + 4);
  uint64_t v37 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  uint64_t v38 = (char *)(a1 + v37);
  uint64_t v39 = (char *)(a2 + v37);
  uint64_t v40 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0LL);
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48);
  int v43 = v42(v38, 1LL, v40);
  int v44 = v42(v39, 1LL, v40);
  if (!v43)
  {
    if (!v44)
    {
      v70((uint64_t)v38, (uint64_t)v39, v6);
      uint64_t v67 = *(int *)(v40 + 20);
      uint64_t v68 = &v38[v67];
      char v69 = &v39[v67];
      *(_DWORD *)uint64_t v68 = *(_DWORD *)v69;
      v68[4] = v69[4];
      goto LABEL_19;
    }

    sub_100004090((uint64_t)v38, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
    goto LABEL_18;
  }

  if (v44)
  {
LABEL_18:
    uint64_t v48 = sub_100003A0C(&qword_100355620);
    memcpy(v38, v39, *(void *)(*(void *)(v48 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v38, v39, v6);
  uint64_t v45 = *(int *)(v40 + 20);
  uint64_t v46 = &v38[v45];
  uint64_t v47 = &v39[v45];
  *(_DWORD *)uint64_t v46 = *(_DWORD *)v47;
  v46[4] = v47[4];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0LL, 1LL, v40);
LABEL_19:
  uint64_t v49 = a3[11];
  uint64_t v50 = a3[12];
  uint64_t v51 = a1 + v49;
  uint64_t v52 = a2 + v49;
  *(_DWORD *)uint64_t v51 = *(_DWORD *)v52;
  *(_BYTE *)(v51 + 4) = *(_BYTE *)(v52 + 4);
  uint64_t v53 = a1 + v50;
  uint64_t v54 = a2 + v50;
  *(_DWORD *)uint64_t v53 = *(_DWORD *)v54;
  *(_BYTE *)(v53 + 4) = *(_BYTE *)(v54 + 4);
  return a1;
}

uint64_t sub_10013C6D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013C6E4);
}

uint64_t sub_10013C6E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  uint64_t v11 = sub_100003A0C(&qword_100355538);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v11;
    uint64_t v13 = a3[5];
LABEL_11:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }

  uint64_t v14 = sub_100003A0C(&qword_100355618);
  uint64_t v12 = *(void *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v14;
    uint64_t v13 = a3[6];
    goto LABEL_11;
  }

  if ((_DWORD)a2 != 253)
  {
    uint64_t v8 = sub_100003A0C(&qword_100355620);
    uint64_t v12 = *(void *)(v8 - 8);
    uint64_t v13 = a3[10];
    goto LABEL_11;
  }

  unsigned int v15 = *(unsigned __int8 *)(a1 + a3[7]);
  if (v15 >= 2) {
    int v16 = ((v15 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v16 = -2;
  }
  if (v16 < 0) {
    int v16 = -1;
  }
  return (v16 + 1);
}

uint64_t sub_10013C7F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013C804);
}

uint64_t sub_10013C804(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v13 = sub_100003A0C(&qword_100355538);
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v15 = a4[5];
    }

    else
    {
      uint64_t result = sub_100003A0C(&qword_100355618);
      uint64_t v14 = *(void *)(result - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        uint64_t v10 = result;
        uint64_t v15 = a4[6];
      }

      else
      {
        if (a3 == 253)
        {
          *(_BYTE *)(a1 + a4[7]) = a2 + 2;
          return result;
        }

        uint64_t v10 = sub_100003A0C(&qword_100355620);
        uint64_t v14 = *(void *)(v10 - 8);
        uint64_t v15 = a4[10];
      }
    }

    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_10013C8F8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v10[0] = *(void *)(v2 - 8) + 64LL;
    sub_1000119EC( 319LL,  (unint64_t *)&unk_100356B40,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v5 <= 0x3F)
    {
      v10[1] = *(void *)(v4 - 8) + 64LL;
      sub_1000119EC(319LL, &qword_100358CC8, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
      if (v7 <= 0x3F)
      {
        v10[2] = *(void *)(v6 - 8) + 64LL;
        v10[3] = &unk_1002C7E68;
        v10[4] = &unk_1002C7CB8;
        v10[5] = &unk_1002C8230;
        sub_1000119EC( 319LL,  (unint64_t *)&unk_100358CD0,  type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
        if (v9 <= 0x3F)
        {
          v10[6] = *(void *)(v8 - 8) + 64LL;
          v10[7] = &unk_1002C7CB8;
          v10[8] = &unk_1002C7CB8;
          swift_initStructMetadata(a1, 256LL, 9LL, v10, a1 + 16);
        }
      }
    }
  }

uint64_t sub_10013CA04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013CA10);
}

uint64_t sub_10013CA14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013CA20);
}

uint64_t *sub_10013CA24(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v36 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v36 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v36);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    *(void *)uint64_t v11 = *(void *)v12;
    v11[8] = v12[8];
    uint64_t v13 = (char *)a1 + v10;
    uint64_t v14 = (char *)a2 + v10;
    *(void *)uint64_t v13 = *(void *)v14;
    v13[8] = v14[8];
    uint64_t v15 = a3[7];
    uint64_t v16 = a3[8];
    uint64_t v17 = (char *)a1 + v15;
    uint64_t v18 = (char *)a2 + v15;
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = v18[8];
    uint64_t v19 = (char *)a1 + v16;
    uint64_t v20 = (char *)a2 + v16;
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = a3[9];
    uint64_t v22 = a3[10];
    uint64_t v23 = (char *)a1 + v21;
    uint64_t v24 = (char *)a2 + v21;
    v23[8] = v24[8];
    *(void *)uint64_t v23 = *(void *)v24;
    uint64_t v25 = (char *)a1 + v22;
    uint64_t v26 = (char *)a2 + v22;
    v25[8] = v26[8];
    *(void *)uint64_t v25 = *(void *)v26;
    uint64_t v27 = a3[11];
    uint64_t v28 = a3[12];
    uint64_t v29 = (char *)a1 + v27;
    uint64_t v30 = (char *)a2 + v27;
    v29[8] = v30[8];
    int v31 = (char *)a1 + v28;
    int v32 = (char *)a2 + v28;
    *(void *)uint64_t v29 = *(void *)v30;
    uint64_t v33 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    uint64_t v34 = *((void *)v33 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v34 + 48))(v32, 1LL, v33))
    {
      uint64_t v35 = sub_100003A0C(&qword_100355538);
      memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64LL));
    }

    else
    {
      v8((uint64_t *)v31, (uint64_t *)v32, v7);
      uint64_t v37 = v33[5];
      uint64_t v38 = &v31[v37];
      uint64_t v39 = &v32[v37];
      *(void *)uint64_t v38 = *(void *)v39;
      v38[8] = v39[8];
      uint64_t v40 = v33[6];
      uint64_t v41 = &v31[v40];
      uint64_t v42 = &v32[v40];
      *(void *)uint64_t v41 = *(void *)v42;
      v41[8] = v42[8];
      uint64_t v43 = v33[7];
      int v44 = &v31[v43];
      uint64_t v45 = &v32[v43];
      *(void *)int v44 = *(void *)v45;
      v44[8] = v45[8];
      (*(void (**)(char *, void, uint64_t, int *))(v34 + 56))(v31, 0LL, 1LL, v33);
    }
  }

  return a1;
}

uint64_t sub_10013CC3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v8(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 48);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL))(v5, 1LL, v6);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v5, v4);
  }
  return result;
}

uint64_t sub_10013CCDC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  uint64_t v12 = a1 + v9;
  uint64_t v13 = a2 + v9;
  *(void *)uint64_t v12 = *(void *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(void *)uint64_t v16 = *(void *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  uint64_t v18 = a1 + v15;
  uint64_t v19 = a2 + v15;
  *(void *)uint64_t v18 = *(void *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  uint64_t v20 = a3[9];
  uint64_t v21 = a3[10];
  uint64_t v22 = a1 + v20;
  uint64_t v23 = a2 + v20;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  *(void *)uint64_t v22 = *(void *)v23;
  uint64_t v24 = a1 + v21;
  uint64_t v25 = a2 + v21;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  *(void *)uint64_t v24 = *(void *)v25;
  uint64_t v26 = a3[11];
  uint64_t v27 = a3[12];
  uint64_t v28 = a1 + v26;
  uint64_t v29 = a2 + v26;
  *(_BYTE *)(v28 + 8) = *(_BYTE *)(v29 + 8);
  uint64_t v30 = (char *)(a1 + v27);
  int v31 = (char *)(a2 + v27);
  *(void *)uint64_t v28 = *(void *)v29;
  int v32 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v33 = *((void *)v32 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v33 + 48))(v31, 1LL, v32))
  {
    uint64_t v34 = sub_100003A0C(&qword_100355538);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v30, (uint64_t)v31, v6);
    uint64_t v35 = v32[5];
    uint64_t v36 = &v30[v35];
    uint64_t v37 = &v31[v35];
    *(void *)uint64_t v36 = *(void *)v37;
    v36[8] = v37[8];
    uint64_t v38 = v32[6];
    uint64_t v39 = &v30[v38];
    uint64_t v40 = &v31[v38];
    *(void *)uint64_t v39 = *(void *)v40;
    v39[8] = v40[8];
    uint64_t v41 = v32[7];
    uint64_t v42 = &v30[v41];
    uint64_t v43 = &v31[v41];
    *(void *)uint64_t v42 = *(void *)v43;
    v42[8] = v43[8];
    (*(void (**)(char *, void, uint64_t, int *))(v33 + 56))(v30, 0LL, 1LL, v32);
  }

  return a1;
}

uint64_t sub_10013CEC8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  char v12 = *(_BYTE *)(v11 + 8);
  *(void *)uint64_t v10 = *(void *)v11;
  *(_BYTE *)(v10 + 8) = v12;
  uint64_t v13 = a3[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  char v16 = *(_BYTE *)(v15 + 8);
  *(void *)uint64_t v14 = *(void *)v15;
  *(_BYTE *)(v14 + 8) = v16;
  uint64_t v17 = a3[7];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  char v20 = *(_BYTE *)(v19 + 8);
  *(void *)uint64_t v18 = *(void *)v19;
  *(_BYTE *)(v18 + 8) = v20;
  uint64_t v21 = a3[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  char v24 = *(_BYTE *)(v23 + 8);
  *(void *)uint64_t v22 = *(void *)v23;
  *(_BYTE *)(v22 + 8) = v24;
  uint64_t v25 = a3[9];
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  char v28 = *(_BYTE *)(v27 + 8);
  *(void *)uint64_t v26 = *(void *)v27;
  *(_BYTE *)(v26 + 8) = v28;
  uint64_t v29 = a3[10];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  char v32 = *(_BYTE *)(v31 + 8);
  *(void *)uint64_t v30 = *(void *)v31;
  *(_BYTE *)(v30 + 8) = v32;
  uint64_t v33 = a3[11];
  uint64_t v34 = a1 + v33;
  uint64_t v35 = a2 + v33;
  char v36 = *(_BYTE *)(v35 + 8);
  *(void *)uint64_t v34 = *(void *)v35;
  *(_BYTE *)(v34 + 8) = v36;
  uint64_t v37 = a3[12];
  uint64_t v38 = (char *)(a1 + v37);
  uint64_t v39 = (char *)(a2 + v37);
  uint64_t v40 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v41 = *((void *)v40 - 1);
  uint64_t v42 = *(uint64_t (**)(char *, uint64_t, int *))(v41 + 48);
  int v43 = v42(v38, 1LL, v40);
  int v44 = v42(v39, 1LL, v40);
  if (!v43)
  {
    if (!v44)
    {
      v8((uint64_t)v38, (uint64_t)v39, v6);
      uint64_t v59 = v40[5];
      int v60 = &v38[v59];
      uint64_t v61 = &v39[v59];
      char v62 = v61[8];
      *(void *)int v60 = *(void *)v61;
      v60[8] = v62;
      uint64_t v63 = v40[6];
      int v64 = &v38[v63];
      uint64_t v65 = &v39[v63];
      char v66 = v65[8];
      *(void *)int v64 = *(void *)v65;
      v64[8] = v66;
      uint64_t v67 = v40[7];
      uint64_t v68 = &v38[v67];
      char v69 = &v39[v67];
      char v70 = v69[8];
      *(void *)uint64_t v68 = *(void *)v69;
      v68[8] = v70;
      return a1;
    }

    sub_100004090((uint64_t)v38, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  if (v44)
  {
LABEL_6:
    uint64_t v57 = sub_100003A0C(&qword_100355538);
    memcpy(v38, v39, *(void *)(*(void *)(v57 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v38, v39, v6);
  uint64_t v45 = v40[5];
  uint64_t v46 = &v38[v45];
  uint64_t v47 = &v39[v45];
  char v48 = v47[8];
  *(void *)uint64_t v46 = *(void *)v47;
  v46[8] = v48;
  uint64_t v49 = v40[6];
  uint64_t v50 = &v38[v49];
  uint64_t v51 = &v39[v49];
  char v52 = v51[8];
  *(void *)uint64_t v50 = *(void *)v51;
  v50[8] = v52;
  uint64_t v53 = v40[7];
  uint64_t v54 = &v38[v53];
  char v55 = &v39[v53];
  char v56 = v55[8];
  *(void *)uint64_t v54 = *(void *)v55;
  v54[8] = v56;
  (*(void (**)(char *, void, uint64_t, int *))(v41 + 56))(v38, 0LL, 1LL, v40);
  return a1;
}

uint64_t sub_10013D164(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  uint64_t v12 = a1 + v9;
  uint64_t v13 = a2 + v9;
  *(void *)uint64_t v12 = *(void *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(void *)uint64_t v16 = *(void *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  uint64_t v18 = a1 + v15;
  uint64_t v19 = a2 + v15;
  *(void *)uint64_t v18 = *(void *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  uint64_t v20 = a3[9];
  uint64_t v21 = a3[10];
  uint64_t v22 = a1 + v20;
  uint64_t v23 = a2 + v20;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  *(void *)uint64_t v22 = *(void *)v23;
  uint64_t v24 = a1 + v21;
  uint64_t v25 = a2 + v21;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  *(void *)uint64_t v24 = *(void *)v25;
  uint64_t v26 = a3[11];
  uint64_t v27 = a3[12];
  uint64_t v28 = a1 + v26;
  uint64_t v29 = a2 + v26;
  *(_BYTE *)(v28 + 8) = *(_BYTE *)(v29 + 8);
  uint64_t v30 = (char *)(a1 + v27);
  uint64_t v31 = (char *)(a2 + v27);
  *(void *)uint64_t v28 = *(void *)v29;
  char v32 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v33 = *((void *)v32 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v33 + 48))(v31, 1LL, v32))
  {
    uint64_t v34 = sub_100003A0C(&qword_100355538);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v30, (uint64_t)v31, v6);
    uint64_t v35 = v32[5];
    char v36 = &v30[v35];
    uint64_t v37 = &v31[v35];
    *(void *)char v36 = *(void *)v37;
    v36[8] = v37[8];
    uint64_t v38 = v32[6];
    uint64_t v39 = &v30[v38];
    uint64_t v40 = &v31[v38];
    *(void *)uint64_t v39 = *(void *)v40;
    v39[8] = v40[8];
    uint64_t v41 = v32[7];
    uint64_t v42 = &v30[v41];
    int v43 = &v31[v41];
    *(void *)uint64_t v42 = *(void *)v43;
    v42[8] = v43[8];
    (*(void (**)(char *, void, uint64_t, int *))(v33 + 56))(v30, 0LL, 1LL, v32);
  }

  return a1;
}

uint64_t sub_10013D350(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = a1 + v9;
  uint64_t v12 = a2 + v9;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  uint64_t v13 = a1 + v10;
  uint64_t v14 = a2 + v10;
  *(void *)uint64_t v13 = *(void *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v15;
  uint64_t v18 = a2 + v15;
  *(void *)uint64_t v17 = *(void *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  uint64_t v19 = a1 + v16;
  uint64_t v20 = a2 + v16;
  *(void *)uint64_t v19 = *(void *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  uint64_t v21 = a3[9];
  uint64_t v22 = a3[10];
  uint64_t v23 = a1 + v21;
  uint64_t v24 = a2 + v21;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  *(void *)uint64_t v23 = *(void *)v24;
  uint64_t v25 = a1 + v22;
  uint64_t v26 = a2 + v22;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  *(void *)uint64_t v25 = *(void *)v26;
  uint64_t v27 = a3[11];
  uint64_t v28 = a3[12];
  uint64_t v29 = a1 + v27;
  uint64_t v30 = a2 + v27;
  *(_BYTE *)(v29 + 8) = *(_BYTE *)(v30 + 8);
  uint64_t v31 = (char *)(a1 + v28);
  char v32 = (char *)(a2 + v28);
  *(void *)uint64_t v29 = *(void *)v30;
  uint64_t v33 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v34 = *((void *)v33 - 1);
  uint64_t v35 = *(uint64_t (**)(char *, uint64_t, int *))(v34 + 48);
  int v36 = v35(v31, 1LL, v33);
  int v37 = v35(v32, 1LL, v33);
  if (!v36)
  {
    if (!v37)
    {
      v8((uint64_t)v31, (uint64_t)v32, v6);
      uint64_t v49 = v33[5];
      uint64_t v50 = &v31[v49];
      uint64_t v51 = &v32[v49];
      *(void *)uint64_t v50 = *(void *)v51;
      v50[8] = v51[8];
      uint64_t v52 = v33[6];
      uint64_t v53 = &v31[v52];
      uint64_t v54 = &v32[v52];
      *(void *)uint64_t v53 = *(void *)v54;
      v53[8] = v54[8];
      uint64_t v55 = v33[7];
      char v56 = &v31[v55];
      uint64_t v57 = &v32[v55];
      *(void *)char v56 = *(void *)v57;
      v56[8] = v57[8];
      return a1;
    }

    sub_100004090((uint64_t)v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  if (v37)
  {
LABEL_6:
    uint64_t v47 = sub_100003A0C(&qword_100355538);
    memcpy(v31, v32, *(void *)(*(void *)(v47 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v31, v32, v6);
  uint64_t v38 = v33[5];
  uint64_t v39 = &v31[v38];
  uint64_t v40 = &v32[v38];
  *(void *)uint64_t v39 = *(void *)v40;
  v39[8] = v40[8];
  uint64_t v41 = v33[6];
  uint64_t v42 = &v31[v41];
  int v43 = &v32[v41];
  *(void *)uint64_t v42 = *(void *)v43;
  v42[8] = v43[8];
  uint64_t v44 = v33[7];
  uint64_t v45 = &v31[v44];
  uint64_t v46 = &v32[v44];
  *(void *)uint64_t v45 = *(void *)v46;
  v45[8] = v46[8];
  (*(void (**)(char *, void, uint64_t, int *))(v34 + 56))(v31, 0LL, 1LL, v33);
  return a1;
}

uint64_t sub_10013D5DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013D5E8);
}

uint64_t sub_10013D5E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }

  else
  {
    uint64_t v8 = sub_100003A0C(&qword_100355538);
    uint64_t v10 = a1 + *(int *)(a3 + 48);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_10013D660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013D66C);
}

uint64_t sub_10013D66C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v10 = sub_100003A0C(&qword_100355538);
    uint64_t v12 = a1 + *(int *)(a4 + 48);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

void sub_10013D6EC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    v6[1] = "\t";
    void v6[2] = "\t";
    void v6[3] = "\t";
    void v6[4] = "\t";
    void v6[5] = "\t";
    v6[6] = "\t";
    v6[7] = "\t";
    sub_1000119EC( 319LL,  (unint64_t *)&unk_100356B40,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v5 <= 0x3F)
    {
      v6[8] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 9LL, v6, a1 + 16);
    }
  }

uint64_t *sub_10013D794(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1LL, v12))
    {
      uint64_t v14 = sub_100003A0C(&qword_100355628);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      uint64_t v25 = v12[8];
      uint64_t v26 = &v10[v25];
      uint64_t v27 = &v11[v25];
      *(void *)uint64_t v26 = *(void *)v27;
      v26[8] = v27[8];
      uint64_t v28 = v12[9];
      uint64_t v29 = &v10[v28];
      uint64_t v30 = &v11[v28];
      *(void *)uint64_t v29 = *(void *)v30;
      v29[8] = v30[8];
      uint64_t v31 = v12[10];
      char v32 = &v10[v31];
      uint64_t v33 = &v11[v31];
      *(void *)char v32 = *(void *)v33;
      v32[8] = v33[8];
      uint64_t v34 = v12[11];
      uint64_t v35 = &v10[v34];
      int v36 = &v11[v34];
      *(void *)uint64_t v35 = *(void *)v36;
      v35[8] = v36[8];
      uint64_t v37 = v12[12];
      uint64_t v38 = &v10[v37];
      uint64_t v39 = &v11[v37];
      uint64_t v40 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
      uint64_t v41 = *((void *)v40 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v41 + 48))(v39, 1LL, v40))
      {
        uint64_t v42 = sub_100003A0C(&qword_100355538);
        memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64LL));
      }

      else
      {
        v8((uint64_t *)v38, (uint64_t *)v39, v7);
        uint64_t v43 = v40[5];
        uint64_t v44 = &v38[v43];
        uint64_t v45 = &v39[v43];
        *(void *)uint64_t v44 = *(void *)v45;
        v44[8] = v45[8];
        uint64_t v46 = v40[6];
        uint64_t v47 = &v38[v46];
        char v48 = &v39[v46];
        *(void *)uint64_t v47 = *(void *)v48;
        v47[8] = v48[8];
        uint64_t v49 = v40[7];
        uint64_t v50 = &v38[v49];
        uint64_t v51 = &v39[v49];
        *(void *)uint64_t v50 = *(void *)v51;
        v50[8] = v51[8];
        (*(void (**)(char *, void, uint64_t, int *))(v41 + 56))(v38, 0LL, 1LL, v40);
      }

      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
    }
  }

  return a1;
}

uint64_t sub_10013DA44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v10(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL))(v5, 1LL, v6);
  if (!(_DWORD)result)
  {
    v10(v5, v4);
    uint64_t v8 = v5 + *(int *)(v6 + 48);
    uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9);
    if (!(_DWORD)result) {
      return ((uint64_t (*)(uint64_t, uint64_t))v10)(v8, v4);
    }
  }

  return result;
}

uint64_t sub_10013DB24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100355628);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = v11[8];
    uint64_t v24 = &v9[v23];
    uint64_t v25 = &v10[v23];
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    uint64_t v26 = v11[9];
    uint64_t v27 = &v9[v26];
    uint64_t v28 = &v10[v26];
    *(void *)uint64_t v27 = *(void *)v28;
    v27[8] = v28[8];
    uint64_t v29 = v11[10];
    uint64_t v30 = &v9[v29];
    uint64_t v31 = &v10[v29];
    *(void *)uint64_t v30 = *(void *)v31;
    v30[8] = v31[8];
    uint64_t v32 = v11[11];
    uint64_t v33 = &v9[v32];
    uint64_t v34 = &v10[v32];
    *(void *)uint64_t v33 = *(void *)v34;
    v33[8] = v34[8];
    uint64_t v35 = v11[12];
    int v36 = &v9[v35];
    uint64_t v37 = &v10[v35];
    uint64_t v38 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    uint64_t v39 = *((void *)v38 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v39 + 48))(v37, 1LL, v38))
    {
      uint64_t v40 = sub_100003A0C(&qword_100355538);
      memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64LL));
    }

    else
    {
      v7((uint64_t)v36, (uint64_t)v37, v6);
      uint64_t v41 = v38[5];
      uint64_t v42 = &v36[v41];
      uint64_t v43 = &v37[v41];
      *(void *)uint64_t v42 = *(void *)v43;
      v42[8] = v43[8];
      uint64_t v44 = v38[6];
      uint64_t v45 = &v36[v44];
      uint64_t v46 = &v37[v44];
      *(void *)uint64_t v45 = *(void *)v46;
      v45[8] = v46[8];
      uint64_t v47 = v38[7];
      char v48 = &v36[v47];
      uint64_t v49 = &v37[v47];
      *(void *)char v48 = *(void *)v49;
      v48[8] = v49[8];
      (*(void (**)(char *, void, uint64_t, int *))(v39 + 56))(v36, 0LL, 1LL, v38);
    }

    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  return a1;
}

uint64_t sub_10013DDA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL);
  uint64_t v13 = *((void *)v12 - 1);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14((uint64_t)v11, 1LL, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8(v10, (uint64_t)v11, v6);
      uint64_t v55 = v12[5];
      uint64_t v56 = v10 + v55;
      uint64_t v57 = &v11[v55];
      char v58 = v57[8];
      *(void *)uint64_t v56 = *(void *)v57;
      *(_BYTE *)(v56 + 8) = v58;
      uint64_t v59 = v12[6];
      uint64_t v60 = v10 + v59;
      uint64_t v61 = &v11[v59];
      char v62 = v61[8];
      *(void *)uint64_t v60 = *(void *)v61;
      *(_BYTE *)(v60 + 8) = v62;
      uint64_t v63 = v12[7];
      uint64_t v64 = v10 + v63;
      uint64_t v65 = &v11[v63];
      char v66 = v65[8];
      *(void *)uint64_t v64 = *(void *)v65;
      *(_BYTE *)(v64 + 8) = v66;
      uint64_t v67 = v12[8];
      uint64_t v68 = v10 + v67;
      char v69 = &v11[v67];
      char v70 = v69[8];
      *(void *)uint64_t v68 = *(void *)v69;
      *(_BYTE *)(v68 + 8) = v70;
      uint64_t v71 = v12[9];
      uint64_t v72 = v10 + v71;
      char v73 = &v11[v71];
      char v74 = v73[8];
      *(void *)uint64_t v72 = *(void *)v73;
      *(_BYTE *)(v72 + 8) = v74;
      uint64_t v75 = v12[10];
      uint64_t v76 = v10 + v75;
      char v77 = &v11[v75];
      char v78 = v77[8];
      *(void *)uint64_t v76 = *(void *)v77;
      *(_BYTE *)(v76 + 8) = v78;
      uint64_t v79 = v12[11];
      uint64_t v80 = v10 + v79;
      uint64_t v81 = &v11[v79];
      char v82 = v81[8];
      *(void *)uint64_t v80 = *(void *)v81;
      *(_BYTE *)(v80 + 8) = v82;
      uint64_t v83 = v12[12];
      uint64_t v84 = v10 + v83;
      char v85 = &v11[v83];
      uint64_t v86 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
      uint64_t v87 = *((void *)v86 - 1);
      uint64_t v88 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v87 + 48);
      int v89 = v88(v84, 1LL, v86);
      int v90 = v88((uint64_t)v85, 1LL, v86);
      if (v89)
      {
        if (!v90)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v84, v85, v6);
          uint64_t v91 = v86[5];
          uint64_t v92 = v84 + v91;
          uint64_t v93 = &v85[v91];
          char v94 = v93[8];
          *(void *)uint64_t v92 = *(void *)v93;
          *(_BYTE *)(v92 + 8) = v94;
          uint64_t v95 = v86[6];
          uint64_t v96 = v84 + v95;
          uint64_t v97 = &v85[v95];
          char v98 = v97[8];
          *(void *)uint64_t v96 = *(void *)v97;
          *(_BYTE *)(v96 + 8) = v98;
          uint64_t v99 = v86[7];
          uint64_t v100 = v84 + v99;
          uint64_t v101 = &v85[v99];
          char v102 = v101[8];
          *(void *)uint64_t v100 = *(void *)v101;
          *(_BYTE *)(v100 + 8) = v102;
          (*(void (**)(uint64_t, void, uint64_t, int *))(v87 + 56))(v84, 0LL, 1LL, v86);
          return a1;
        }
      }

      else
      {
        if (!v90)
        {
          v8(v84, (uint64_t)v85, v6);
          uint64_t v116 = v86[5];
          uint64_t v117 = v84 + v116;
          uint64_t v118 = &v85[v116];
          char v119 = v118[8];
          *(void *)uint64_t v117 = *(void *)v118;
          *(_BYTE *)(v117 + 8) = v119;
          uint64_t v120 = v86[6];
          uint64_t v121 = v84 + v120;
          uint64_t v122 = &v85[v120];
          char v123 = v122[8];
          *(void *)uint64_t v121 = *(void *)v122;
          *(_BYTE *)(v121 + 8) = v123;
          uint64_t v124 = v86[7];
          uint64_t v125 = v84 + v124;
          uint64_t v126 = &v85[v124];
          char v127 = v126[8];
          *(void *)uint64_t v125 = *(void *)v126;
          *(_BYTE *)(v125 + 8) = v127;
          return a1;
        }

        sub_100004090(v84, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      }

      size_t v52 = *(void *)(*(void *)(sub_100003A0C(&qword_100355538) - 8) + 64LL);
      uint64_t v53 = (void *)v84;
      uint64_t v54 = v85;
      goto LABEL_8;
    }

    sub_100004090(v10, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
LABEL_7:
    size_t v52 = *(void *)(*(void *)(sub_100003A0C(&qword_100355628) - 8) + 64LL);
    uint64_t v53 = (void *)v10;
    uint64_t v54 = v11;
LABEL_8:
    memcpy(v53, v54, v52);
    return a1;
  }

  if (v16) {
    goto LABEL_7;
  }
  uint64_t v17 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 16);
  v17(v10, v11, v6);
  uint64_t v18 = v12[5];
  uint64_t v19 = v10 + v18;
  uint64_t v20 = &v11[v18];
  char v21 = v20[8];
  *(void *)uint64_t v19 = *(void *)v20;
  *(_BYTE *)(v19 + 8) = v21;
  uint64_t v22 = v12[6];
  uint64_t v23 = v10 + v22;
  uint64_t v24 = &v11[v22];
  char v25 = v24[8];
  *(void *)uint64_t v23 = *(void *)v24;
  *(_BYTE *)(v23 + 8) = v25;
  uint64_t v26 = v12[7];
  uint64_t v27 = v10 + v26;
  uint64_t v28 = &v11[v26];
  char v29 = v28[8];
  *(void *)uint64_t v27 = *(void *)v28;
  *(_BYTE *)(v27 + 8) = v29;
  uint64_t v30 = v12[8];
  uint64_t v31 = v10 + v30;
  uint64_t v32 = &v11[v30];
  char v33 = v32[8];
  *(void *)uint64_t v31 = *(void *)v32;
  *(_BYTE *)(v31 + 8) = v33;
  uint64_t v34 = v12[9];
  uint64_t v35 = v10 + v34;
  int v36 = &v11[v34];
  char v37 = v36[8];
  *(void *)uint64_t v35 = *(void *)v36;
  *(_BYTE *)(v35 + 8) = v37;
  uint64_t v38 = v12[10];
  uint64_t v39 = v10 + v38;
  uint64_t v40 = &v11[v38];
  char v41 = v40[8];
  *(void *)uint64_t v39 = *(void *)v40;
  *(_BYTE *)(v39 + 8) = v41;
  uint64_t v42 = v12[11];
  uint64_t v43 = v10 + v42;
  uint64_t v44 = &v11[v42];
  char v45 = v44[8];
  *(void *)uint64_t v43 = *(void *)v44;
  *(_BYTE *)(v43 + 8) = v45;
  uint64_t v46 = v12[12];
  uint64_t v47 = (char *)(v10 + v46);
  char v48 = &v11[v46];
  uint64_t v49 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v50 = *((void *)v49 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v50 + 48))(v48, 1LL, v49))
  {
    uint64_t v51 = sub_100003A0C(&qword_100355538);
    memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64LL));
  }

  else
  {
    v17((uint64_t)v47, v48, v6);
    uint64_t v103 = v49[5];
    uint64_t v104 = &v47[v103];
    uint64_t v105 = &v48[v103];
    char v106 = v105[8];
    *(void *)uint64_t v104 = *(void *)v105;
    v104[8] = v106;
    uint64_t v107 = v49[6];
    uint64_t v108 = &v47[v107];
    uint64_t v109 = &v48[v107];
    char v110 = v109[8];
    *(void *)uint64_t v108 = *(void *)v109;
    v108[8] = v110;
    uint64_t v111 = v49[7];
    int v112 = &v47[v111];
    uint64_t v113 = &v48[v111];
    char v114 = v113[8];
    *(void *)int v112 = *(void *)v113;
    v112[8] = v114;
    (*(void (**)(char *, void, uint64_t, int *))(v50 + 56))(v47, 0LL, 1LL, v49);
  }

  (*(void (**)(uint64_t, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
  return a1;
}

uint64_t sub_10013E298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100355628);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    int v15 = &v9[v14];
    int v16 = &v10[v14];
    *(void *)int v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    char v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)char v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = v11[8];
    uint64_t v24 = &v9[v23];
    char v25 = &v10[v23];
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    uint64_t v26 = v11[9];
    uint64_t v27 = &v9[v26];
    uint64_t v28 = &v10[v26];
    *(void *)uint64_t v27 = *(void *)v28;
    v27[8] = v28[8];
    uint64_t v29 = v11[10];
    uint64_t v30 = &v9[v29];
    uint64_t v31 = &v10[v29];
    *(void *)uint64_t v30 = *(void *)v31;
    v30[8] = v31[8];
    uint64_t v32 = v11[11];
    char v33 = &v9[v32];
    uint64_t v34 = &v10[v32];
    *(void *)char v33 = *(void *)v34;
    v33[8] = v34[8];
    uint64_t v35 = v11[12];
    int v36 = &v9[v35];
    char v37 = &v10[v35];
    uint64_t v38 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    uint64_t v39 = *((void *)v38 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v39 + 48))(v37, 1LL, v38))
    {
      uint64_t v40 = sub_100003A0C(&qword_100355538);
      memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64LL));
    }

    else
    {
      v7((uint64_t)v36, (uint64_t)v37, v6);
      uint64_t v41 = v38[5];
      uint64_t v42 = &v36[v41];
      uint64_t v43 = &v37[v41];
      *(void *)uint64_t v42 = *(void *)v43;
      v42[8] = v43[8];
      uint64_t v44 = v38[6];
      char v45 = &v36[v44];
      uint64_t v46 = &v37[v44];
      *(void *)char v45 = *(void *)v46;
      v45[8] = v46[8];
      uint64_t v47 = v38[7];
      char v48 = &v36[v47];
      uint64_t v49 = &v37[v47];
      *(void *)char v48 = *(void *)v49;
      v48[8] = v49[8];
      (*(void (**)(char *, void, uint64_t, int *))(v39 + 56))(v36, 0LL, 1LL, v38);
    }

    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  return a1;
}

uint64_t sub_10013E51C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0LL);
  uint64_t v13 = *((void *)v12 - 1);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14((uint64_t)v11, 1LL, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8(v10, (uint64_t)v11, v6);
      uint64_t v48 = v12[5];
      uint64_t v49 = v10 + v48;
      uint64_t v50 = &v11[v48];
      *(void *)uint64_t v49 = *(void *)v50;
      *(_BYTE *)(v49 + 8) = v50[8];
      uint64_t v51 = v12[6];
      uint64_t v52 = v10 + v51;
      uint64_t v53 = &v11[v51];
      *(void *)uint64_t v52 = *(void *)v53;
      *(_BYTE *)(v52 + 8) = v53[8];
      uint64_t v54 = v12[7];
      uint64_t v55 = v10 + v54;
      uint64_t v56 = &v11[v54];
      *(void *)uint64_t v55 = *(void *)v56;
      *(_BYTE *)(v55 + 8) = v56[8];
      uint64_t v57 = v12[8];
      uint64_t v58 = v10 + v57;
      uint64_t v59 = &v11[v57];
      *(void *)uint64_t v58 = *(void *)v59;
      *(_BYTE *)(v58 + 8) = v59[8];
      uint64_t v60 = v12[9];
      uint64_t v61 = v10 + v60;
      char v62 = &v11[v60];
      *(void *)uint64_t v61 = *(void *)v62;
      *(_BYTE *)(v61 + 8) = v62[8];
      uint64_t v63 = v12[10];
      uint64_t v64 = v10 + v63;
      uint64_t v65 = &v11[v63];
      *(void *)uint64_t v64 = *(void *)v65;
      *(_BYTE *)(v64 + 8) = v65[8];
      uint64_t v66 = v12[11];
      uint64_t v67 = v10 + v66;
      uint64_t v68 = &v11[v66];
      *(void *)uint64_t v67 = *(void *)v68;
      *(_BYTE *)(v67 + 8) = v68[8];
      uint64_t v69 = v12[12];
      uint64_t v70 = v10 + v69;
      uint64_t v71 = &v11[v69];
      uint64_t v72 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
      uint64_t v73 = *((void *)v72 - 1);
      char v74 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v73 + 48);
      int v75 = v74(v70, 1LL, v72);
      int v76 = v74((uint64_t)v71, 1LL, v72);
      if (v75)
      {
        if (!v76)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v70, v71, v6);
          uint64_t v77 = v72[5];
          uint64_t v78 = v70 + v77;
          uint64_t v79 = &v71[v77];
          *(void *)uint64_t v78 = *(void *)v79;
          *(_BYTE *)(v78 + 8) = v79[8];
          uint64_t v80 = v72[6];
          uint64_t v81 = v70 + v80;
          char v82 = &v71[v80];
          *(void *)uint64_t v81 = *(void *)v82;
          *(_BYTE *)(v81 + 8) = v82[8];
          uint64_t v83 = v72[7];
          uint64_t v84 = v70 + v83;
          char v85 = &v71[v83];
          *(void *)uint64_t v84 = *(void *)v85;
          *(_BYTE *)(v84 + 8) = v85[8];
          (*(void (**)(uint64_t, void, uint64_t, int *))(v73 + 56))(v70, 0LL, 1LL, v72);
          return a1;
        }
      }

      else
      {
        if (!v76)
        {
          v8(v70, (uint64_t)v71, v6);
          uint64_t v96 = v72[5];
          uint64_t v97 = v70 + v96;
          char v98 = &v71[v96];
          *(void *)uint64_t v97 = *(void *)v98;
          *(_BYTE *)(v97 + 8) = v98[8];
          uint64_t v99 = v72[6];
          uint64_t v100 = v70 + v99;
          uint64_t v101 = &v71[v99];
          *(void *)uint64_t v100 = *(void *)v101;
          *(_BYTE *)(v100 + 8) = v101[8];
          uint64_t v102 = v72[7];
          uint64_t v103 = v70 + v102;
          uint64_t v104 = &v71[v102];
          *(void *)uint64_t v103 = *(void *)v104;
          *(_BYTE *)(v103 + 8) = v104[8];
          return a1;
        }

        sub_100004090(v70, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      }

      size_t v45 = *(void *)(*(void *)(sub_100003A0C(&qword_100355538) - 8) + 64LL);
      uint64_t v46 = (void *)v70;
      uint64_t v47 = v71;
      goto LABEL_8;
    }

    sub_100004090(v10, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
LABEL_7:
    size_t v45 = *(void *)(*(void *)(sub_100003A0C(&qword_100355628) - 8) + 64LL);
    uint64_t v46 = (void *)v10;
    uint64_t v47 = v11;
LABEL_8:
    memcpy(v46, v47, v45);
    return a1;
  }

  if (v16) {
    goto LABEL_7;
  }
  uint64_t v17 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
  v17(v10, v11, v6);
  uint64_t v18 = v12[5];
  uint64_t v19 = v10 + v18;
  uint64_t v20 = &v11[v18];
  *(void *)uint64_t v19 = *(void *)v20;
  *(_BYTE *)(v19 + 8) = v20[8];
  uint64_t v21 = v12[6];
  uint64_t v22 = v10 + v21;
  uint64_t v23 = &v11[v21];
  *(void *)uint64_t v22 = *(void *)v23;
  *(_BYTE *)(v22 + 8) = v23[8];
  uint64_t v24 = v12[7];
  uint64_t v25 = v10 + v24;
  uint64_t v26 = &v11[v24];
  *(void *)uint64_t v25 = *(void *)v26;
  *(_BYTE *)(v25 + 8) = v26[8];
  uint64_t v27 = v12[8];
  uint64_t v28 = v10 + v27;
  uint64_t v29 = &v11[v27];
  *(void *)uint64_t v28 = *(void *)v29;
  *(_BYTE *)(v28 + 8) = v29[8];
  uint64_t v30 = v12[9];
  uint64_t v31 = v10 + v30;
  uint64_t v32 = &v11[v30];
  *(void *)uint64_t v31 = *(void *)v32;
  *(_BYTE *)(v31 + 8) = v32[8];
  uint64_t v33 = v12[10];
  uint64_t v34 = v10 + v33;
  uint64_t v35 = &v11[v33];
  *(void *)uint64_t v34 = *(void *)v35;
  *(_BYTE *)(v34 + 8) = v35[8];
  uint64_t v36 = v12[11];
  uint64_t v37 = v10 + v36;
  uint64_t v38 = &v11[v36];
  *(void *)uint64_t v37 = *(void *)v38;
  *(_BYTE *)(v37 + 8) = v38[8];
  uint64_t v39 = v12[12];
  uint64_t v40 = (char *)(v10 + v39);
  uint64_t v41 = &v11[v39];
  uint64_t v42 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v43 = *((void *)v42 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v43 + 48))(v41, 1LL, v42))
  {
    uint64_t v44 = sub_100003A0C(&qword_100355538);
    memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64LL));
  }

  else
  {
    v17((uint64_t)v40, v41, v6);
    uint64_t v86 = v42[5];
    uint64_t v87 = &v40[v86];
    uint64_t v88 = &v41[v86];
    *(void *)uint64_t v87 = *(void *)v88;
    v87[8] = v88[8];
    uint64_t v89 = v42[6];
    int v90 = &v40[v89];
    uint64_t v91 = &v41[v89];
    *(void *)int v90 = *(void *)v91;
    v90[8] = v91[8];
    uint64_t v92 = v42[7];
    uint64_t v93 = &v40[v92];
    char v94 = &v41[v92];
    *(void *)uint64_t v93 = *(void *)v94;
    v93[8] = v94[8];
    (*(void (**)(char *, void, uint64_t, int *))(v43 + 56))(v40, 0LL, 1LL, v42);
  }

  (*(void (**)(uint64_t, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
  return a1;
}

uint64_t sub_10013EA0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013EA18);
}

uint64_t sub_10013EA18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013EA24(a1, a2, a3, &qword_100355628);
}

uint64_t sub_10013EA24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v10 = sub_100003A0C(a4);
    uint64_t v12 = a1 + *(int *)(a3 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL);
  }

  return v11(v12, a2, v10);
}

uint64_t sub_10013EA9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013EAA8);
}

uint64_t sub_10013EAA8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10013EAB4(a1, a2, a3, a4, &qword_100355628);
}

uint64_t sub_10013EAB4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  if (*(_DWORD *)(v11 + 84) == a3)
  {
    uint64_t v12 = v10;
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    uint64_t v14 = a1;
  }

  else
  {
    uint64_t v12 = sub_100003A0C(a5);
    uint64_t v14 = a1 + *(int *)(a4 + 20);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL);
  }

  return v13(v14, a2, a2, v12);
}

void sub_10013EB3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10013EB50( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v8 = type metadata accessor for UnknownStorage(319LL);
  if (v9 <= 0x3F)
  {
    v12[0] = *(void *)(v8 - 8) + 64LL;
    sub_1000119EC(319LL, a4, a5);
    if (v11 <= 0x3F)
    {
      v12[1] = *(void *)(v10 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 2LL, v12, a1 + 16);
    }
  }

void *sub_10013EBEC(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v29 = *a2;
    *a1 = *a2;
    a1 = (void *)(v29 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v29);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    unint64_t v11 = (char *)a2 + v8;
    *(void *)uint64_t v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (void *)((char *)a1 + v9);
    uint64_t v13 = (void *)((char *)a2 + v9);
    uint64_t v14 = v13[1];
    void *v12 = *v13;
    v12[1] = v14;
    uint64_t v15 = a3[7];
    uint64_t v16 = a3[8];
    uint64_t v17 = (char *)a1 + v15;
    uint64_t v18 = (char *)a2 + v15;
    *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
    v17[4] = v18[4];
    *((_BYTE *)a1 + v16) = *((_BYTE *)a2 + v16);
    uint64_t v19 = a3[9];
    uint64_t v20 = a3[10];
    uint64_t v21 = (char *)a1 + v19;
    uint64_t v22 = (char *)a2 + v19;
    *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
    v21[4] = v22[4];
    uint64_t v23 = (char *)a1 + v20;
    uint64_t v24 = (char *)a2 + v20;
    *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
    v23[4] = v24[4];
    uint64_t v25 = a3[12];
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *((_BYTE *)a1 + v25) = *((_BYTE *)a2 + v25);
    uint64_t v26 = a3[14];
    *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
    uint64_t v27 = (char *)a1 + v26;
    uint64_t v28 = (char *)a2 + v26;
    *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    swift_bridgeObjectRetain(v14);
  }

  return a1;
}

uint64_t sub_10013ED28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 24) + 8));
}

uint64_t sub_10013ED70(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  unint64_t v11 = (void *)(a1 + v8);
  uint64_t v12 = (void *)(a2 + v8);
  uint64_t v13 = v12[1];
  *unint64_t v11 = *v12;
  v11[1] = v13;
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = *(_BYTE *)(v17 + 4);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  uint64_t v18 = a3[9];
  uint64_t v19 = a3[10];
  uint64_t v20 = a1 + v18;
  uint64_t v21 = a2 + v18;
  *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  uint64_t v22 = a1 + v19;
  uint64_t v23 = a2 + v19;
  *(_DWORD *)uint64_t v22 = *(_DWORD *)v23;
  *(_BYTE *)(v22 + 4) = *(_BYTE *)(v23 + 4);
  uint64_t v24 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v24) = *(_BYTE *)(a2 + v24);
  uint64_t v25 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
  *(_BYTE *)(v26 + 4) = *(_BYTE *)(v27 + 4);
  swift_bridgeObjectRetain(v13);
  return a1;
}

uint64_t sub_10013EE80(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
  *(void *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  void *v12 = *v13;
  uint64_t v14 = v13[1];
  uint64_t v15 = v12[1];
  v12[1] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = a3[7];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = (int *)(a2 + v16);
  int v19 = *v18;
  *(_BYTE *)(v17 + 4) = *((_BYTE *)v18 + 4);
  *(_DWORD *)uint64_t v17 = v19;
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  uint64_t v20 = a3[9];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = (int *)(a2 + v20);
  int v23 = *v22;
  *(_BYTE *)(v21 + 4) = *((_BYTE *)v22 + 4);
  *(_DWORD *)uint64_t v21 = v23;
  uint64_t v24 = a3[10];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = (int *)(a2 + v24);
  int v27 = *v26;
  *(_BYTE *)(v25 + 4) = *((_BYTE *)v26 + 4);
  *(_DWORD *)uint64_t v25 = v27;
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  uint64_t v28 = a3[14];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = (int *)(a2 + v28);
  int v31 = *v30;
  *(_BYTE *)(v29 + 4) = *((_BYTE *)v30 + 4);
  *(_DWORD *)uint64_t v29 = v31;
  return a1;
}

uint64_t sub_10013EFB8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v11 = a3[7];
  uint64_t v12 = a3[8];
  uint64_t v13 = a1 + v11;
  uint64_t v14 = a2 + v11;
  *(_BYTE *)(v13 + 4) = *(_BYTE *)(v14 + 4);
  *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  uint64_t v15 = a3[9];
  uint64_t v16 = a3[10];
  uint64_t v17 = a1 + v15;
  uint64_t v18 = a2 + v15;
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  uint64_t v19 = a1 + v16;
  uint64_t v20 = a2 + v16;
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = *(_BYTE *)(v20 + 4);
  uint64_t v21 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v21) = *(_BYTE *)(a2 + v21);
  uint64_t v22 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
  *(_BYTE *)(v23 + 4) = *(_BYTE *)(v24 + 4);
  return a1;
}

uint64_t sub_10013F0BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = (void *)(a1 + v8);
  uint64_t v12 = (uint64_t *)(a2 + v8);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  uint64_t v15 = v11[1];
  *uint64_t v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = a3[7];
  uint64_t v17 = a3[8];
  uint64_t v18 = a1 + v16;
  uint64_t v19 = a2 + v16;
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  uint64_t v20 = a3[9];
  uint64_t v21 = a3[10];
  uint64_t v22 = a1 + v20;
  uint64_t v23 = a2 + v20;
  *(_DWORD *)uint64_t v22 = *(_DWORD *)v23;
  *(_BYTE *)(v22 + 4) = *(_BYTE *)(v23 + 4);
  uint64_t v24 = a1 + v21;
  uint64_t v25 = a2 + v21;
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = *(_BYTE *)(v25 + 4);
  uint64_t v26 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v26) = *(_BYTE *)(a2 + v26);
  uint64_t v27 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
  *(_BYTE *)(v28 + 4) = *(_BYTE *)(v29 + 4);
  return a1;
}

uint64_t sub_10013F1D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013F1DC);
}

uint64_t sub_10013F1E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  int v10 = v9 - 1;
  if (v10 < 0) {
    int v10 = -1;
  }
  return (v10 + 1);
}

uint64_t sub_10013F26C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013F278);
}

uint64_t sub_10013F27C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 24) + 8) = a2;
  return result;
}

uint64_t sub_10013F2F8(uint64_t a1)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "\t";
    v4[2] = &unk_1002C80F0;
    void v4[3] = &unk_1002C7CB8;
    v4[4] = &unk_1002C7FF8;
    v4[5] = &unk_1002C7CB8;
    void v4[6] = &unk_1002C7CB8;
    void v4[7] = &unk_1002C7E68;
    v4[8] = &unk_1002C7E68;
    v4[9] = &unk_1002C7FF8;
    v4[10] = &unk_1002C7CB8;
    swift_initStructMetadata(a1, 256LL, 11LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

char *sub_10013F39C(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 24);
    a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
    int v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1LL, v12))
    {
      uint64_t v14 = sub_100003A0C(&qword_100355630);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      v8(v10, v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      uint64_t v22 = *((void *)v21 + 1);
      *(void *)uint64_t v20 = *(void *)v21;
      *((void *)v20 + 1) = v22;
      uint64_t v23 = v12[7];
      uint64_t v24 = &v10[v23];
      uint64_t v25 = &v11[v23];
      *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
      v24[4] = v25[4];
      v10[v12[8]] = v11[v12[8]];
      uint64_t v26 = v12[9];
      uint64_t v27 = &v10[v26];
      uint64_t v28 = &v11[v26];
      v27[4] = v28[4];
      *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
      uint64_t v29 = v12[10];
      uint64_t v30 = &v10[v29];
      int v31 = &v11[v29];
      *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
      v30[4] = v31[4];
      v10[v12[11]] = v11[v12[11]];
      v10[v12[12]] = v11[v12[12]];
      v10[v12[13]] = v11[v12[13]];
      uint64_t v32 = v12[14];
      uint64_t v33 = &v10[v32];
      uint64_t v34 = &v11[v32];
      *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
      v33[4] = v34[4];
      uint64_t v35 = *(void (**)(char *, void, uint64_t, int *))(v13 + 56);
      swift_bridgeObjectRetain(v22);
      v35(v10, 0LL, 1LL, v12);
    }
  }

  return a1;
}

uint64_t sub_10013F588(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v5(a1, v4);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7);
  if (!(_DWORD)result)
  {
    v5(v6, v4);
    return swift_bridgeObjectRelease(*(void *)(v6 + *(int *)(v7 + 24) + 8));
  }

  return result;
}

uint64_t sub_10013F628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  uint64_t v9 = (char *)(a1 + v8);
  int v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100355630);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    uint64_t v20 = *((void *)v19 + 1);
    *(void *)uint64_t v18 = *(void *)v19;
    *((void *)v18 + 1) = v20;
    uint64_t v21 = v11[7];
    uint64_t v22 = &v9[v21];
    uint64_t v23 = &v10[v21];
    *(_DWORD *)uint64_t v22 = *(_DWORD *)v23;
    v22[4] = v23[4];
    v9[v11[8]] = v10[v11[8]];
    uint64_t v24 = v11[9];
    uint64_t v25 = &v9[v24];
    uint64_t v26 = &v10[v24];
    v25[4] = v26[4];
    *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
    uint64_t v27 = v11[10];
    uint64_t v28 = &v9[v27];
    uint64_t v29 = &v10[v27];
    *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
    v28[4] = v29[4];
    v9[v11[11]] = v10[v11[11]];
    v9[v11[12]] = v10[v11[12]];
    v9[v11[13]] = v10[v11[13]];
    uint64_t v30 = v11[14];
    int v31 = &v9[v30];
    uint64_t v32 = &v10[v30];
    *(_DWORD *)int v31 = *(_DWORD *)v32;
    v31[4] = v32[4];
    uint64_t v33 = *(void (**)(char *, void, uint64_t, int *))(v12 + 56);
    swift_bridgeObjectRetain(v20);
    v33(v9, 0LL, 1LL, v11);
  }

  return a1;
}

uint64_t sub_10013F7E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  uint64_t v9 = *(int *)(a3 + 24);
  int v10 = (_BYTE *)(a1 + v9);
  uint64_t v11 = (_BYTE *)(a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
  uint64_t v13 = *((void *)v12 - 1);
  uint64_t v14 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14(v11, 1LL, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      uint64_t v40 = v12[5];
      uint64_t v41 = &v10[v40];
      uint64_t v42 = &v11[v40];
      uint64_t v43 = *(void *)v42;
      v41[8] = v42[8];
      *(void *)uint64_t v41 = v43;
      uint64_t v44 = v12[6];
      size_t v45 = &v10[v44];
      uint64_t v46 = &v11[v44];
      *size_t v45 = *v46;
      uint64_t v47 = v46[1];
      uint64_t v48 = v45[1];
      v45[1] = v47;
      swift_bridgeObjectRetain(v47);
      swift_bridgeObjectRelease(v48);
      uint64_t v49 = v12[7];
      uint64_t v50 = &v10[v49];
      uint64_t v51 = &v11[v49];
      int v52 = *(_DWORD *)v51;
      v50[4] = v51[4];
      *(_DWORD *)uint64_t v50 = v52;
      v10[v12[8]] = v11[v12[8]];
      uint64_t v53 = v12[9];
      uint64_t v54 = &v10[v53];
      uint64_t v55 = &v11[v53];
      int v56 = *(_DWORD *)v55;
      v54[4] = v55[4];
      *(_DWORD *)uint64_t v54 = v56;
      uint64_t v57 = v12[10];
      uint64_t v58 = &v10[v57];
      uint64_t v59 = &v11[v57];
      int v60 = *(_DWORD *)v59;
      v58[4] = v59[4];
      *(_DWORD *)uint64_t v58 = v60;
      v10[v12[11]] = v11[v12[11]];
      v10[v12[12]] = v11[v12[12]];
      v10[v12[13]] = v11[v12[13]];
      uint64_t v61 = v12[14];
      char v62 = &v10[v61];
      uint64_t v63 = &v11[v61];
      int v64 = *(_DWORD *)v63;
      v62[4] = v63[4];
      *(_DWORD *)char v62 = v64;
      return a1;
    }

    sub_100004090((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
    goto LABEL_6;
  }

  if (v16)
  {
LABEL_6:
    uint64_t v38 = sub_100003A0C(&qword_100355630);
    memcpy(v10, v11, *(void *)(*(void *)(v38 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v10, v11, v6);
  uint64_t v17 = v12[5];
  uint64_t v18 = &v10[v17];
  uint64_t v19 = &v11[v17];
  uint64_t v20 = *(void *)v19;
  v18[8] = v19[8];
  *(void *)uint64_t v18 = v20;
  uint64_t v21 = v12[6];
  uint64_t v22 = &v10[v21];
  uint64_t v23 = &v11[v21];
  void *v22 = *v23;
  uint64_t v24 = v23[1];
  v22[1] = v24;
  uint64_t v25 = v12[7];
  uint64_t v26 = &v10[v25];
  uint64_t v27 = &v11[v25];
  LOBYTE(v20) = v27[4];
  *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
  v26[4] = v20;
  v10[v12[8]] = v11[v12[8]];
  uint64_t v28 = v12[9];
  uint64_t v29 = &v10[v28];
  uint64_t v30 = &v11[v28];
  LODWORD(v20) = *(_DWORD *)v30;
  v29[4] = v30[4];
  *(_DWORD *)uint64_t v29 = v20;
  uint64_t v31 = v12[10];
  uint64_t v32 = &v10[v31];
  uint64_t v33 = &v11[v31];
  LOBYTE(v20) = v33[4];
  *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
  v32[4] = v20;
  v10[v12[11]] = v11[v12[11]];
  v10[v12[12]] = v11[v12[12]];
  v10[v12[13]] = v11[v12[13]];
  uint64_t v34 = v12[14];
  uint64_t v35 = &v10[v34];
  uint64_t v36 = &v11[v34];
  LODWORD(v20) = *(_DWORD *)v36;
  v35[4] = v36[4];
  *(_DWORD *)uint64_t v35 = v20;
  uint64_t v37 = *(void (**)(_BYTE *, void, uint64_t, int *))(v13 + 56);
  swift_bridgeObjectRetain(v24);
  v37(v10, 0LL, 1LL, v12);
  return a1;
}

uint64_t sub_10013FAE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  uint64_t v9 = (char *)(a1 + v8);
  int v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100355630);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    int v15 = &v9[v14];
    int v16 = &v10[v14];
    *(void *)int v15 = *(void *)v16;
    v15[8] = v16[8];
    *(_OWORD *)&v9[v11[6]] = *(_OWORD *)&v10[v11[6]];
    uint64_t v17 = v11[7];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v9[v11[8]] = v10[v11[8]];
    uint64_t v20 = v11[9];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    v21[4] = v22[4];
    *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
    uint64_t v23 = v11[10];
    uint64_t v24 = &v9[v23];
    uint64_t v25 = &v10[v23];
    *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
    v24[4] = v25[4];
    v9[v11[11]] = v10[v11[11]];
    v9[v11[12]] = v10[v11[12]];
    v9[v11[13]] = v10[v11[13]];
    uint64_t v26 = v11[14];
    uint64_t v27 = &v9[v26];
    uint64_t v28 = &v10[v26];
    *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  return a1;
}

uint64_t sub_10013FC9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  int v10 = (_BYTE *)(a1 + v9);
  uint64_t v11 = (_BYTE *)(a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0LL);
  uint64_t v13 = *((void *)v12 - 1);
  uint64_t v14 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14(v11, 1LL, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      uint64_t v34 = v12[5];
      uint64_t v35 = &v10[v34];
      uint64_t v36 = &v11[v34];
      *(void *)uint64_t v35 = *(void *)v36;
      v35[8] = v36[8];
      uint64_t v37 = v12[6];
      uint64_t v38 = &v10[v37];
      uint64_t v39 = (uint64_t *)&v11[v37];
      uint64_t v41 = *v39;
      uint64_t v40 = v39[1];
      uint64_t v42 = v38[1];
      *uint64_t v38 = v41;
      v38[1] = v40;
      swift_bridgeObjectRelease(v42);
      uint64_t v43 = v12[7];
      uint64_t v44 = &v10[v43];
      size_t v45 = &v11[v43];
      *(_DWORD *)uint64_t v44 = *(_DWORD *)v45;
      v44[4] = v45[4];
      v10[v12[8]] = v11[v12[8]];
      uint64_t v46 = v12[9];
      uint64_t v47 = &v10[v46];
      uint64_t v48 = &v11[v46];
      *(_DWORD *)uint64_t v47 = *(_DWORD *)v48;
      v47[4] = v48[4];
      uint64_t v49 = v12[10];
      uint64_t v50 = &v10[v49];
      uint64_t v51 = &v11[v49];
      *(_DWORD *)uint64_t v50 = *(_DWORD *)v51;
      v50[4] = v51[4];
      v10[v12[11]] = v11[v12[11]];
      v10[v12[12]] = v11[v12[12]];
      v10[v12[13]] = v11[v12[13]];
      uint64_t v52 = v12[14];
      uint64_t v53 = &v10[v52];
      uint64_t v54 = &v11[v52];
      v53[4] = v54[4];
      *(_DWORD *)uint64_t v53 = *(_DWORD *)v54;
      return a1;
    }

    sub_100004090((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
    goto LABEL_6;
  }

  if (v16)
  {
LABEL_6:
    uint64_t v32 = sub_100003A0C(&qword_100355630);
    memcpy(v10, v11, *(void *)(*(void *)(v32 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v10, v11, v6);
  uint64_t v17 = v12[5];
  uint64_t v18 = &v10[v17];
  uint64_t v19 = &v11[v17];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  *(_OWORD *)&v10[v12[6]] = *(_OWORD *)&v11[v12[6]];
  uint64_t v20 = v12[7];
  uint64_t v21 = &v10[v20];
  uint64_t v22 = &v11[v20];
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  v21[4] = v22[4];
  v10[v12[8]] = v11[v12[8]];
  uint64_t v23 = v12[9];
  uint64_t v24 = &v10[v23];
  uint64_t v25 = &v11[v23];
  v24[4] = v25[4];
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  uint64_t v26 = v12[10];
  uint64_t v27 = &v10[v26];
  uint64_t v28 = &v11[v26];
  *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
  v27[4] = v28[4];
  v10[v12[11]] = v11[v12[11]];
  v10[v12[12]] = v11[v12[12]];
  v10[v12[13]] = v11[v12[13]];
  uint64_t v29 = v12[14];
  uint64_t v30 = &v10[v29];
  uint64_t v31 = &v11[v29];
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  v30[4] = v31[4];
  (*(void (**)(_BYTE *, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
  return a1;
}

uint64_t sub_10013FF74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013FF80);
}

uint64_t sub_10013FF80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  if ((_DWORD)a2 != 253)
  {
    uint64_t v8 = sub_100003A0C(&qword_100355630);
    uint64_t v10 = a1 + *(int *)(a3 + 24);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL);
    return v9(v10, a2, v8);
  }

  unsigned int v11 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v11 >= 2) {
    int v12 = ((v11 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v12 = -2;
  }
  if (v12 < 0) {
    int v12 = -1;
  }
  return (v12 + 1);
}

uint64_t sub_100140044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100140050);
}

uint64_t sub_100140050(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unsigned int v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    if (a3 == 253)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
      return result;
    }

    uint64_t v10 = sub_100003A0C(&qword_100355630);
    uint64_t v12 = a1 + *(int *)(a4 + 24);
    unsigned int v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

void sub_1001400F4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    v6[1] = &unk_1002C7E68;
    sub_1000119EC( 319LL,  (unint64_t *)&unk_100358FD0,  type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
    if (v5 <= 0x3F)
    {
      void v6[2] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 3LL, v6, a1 + 16);
    }
  }

uint64_t *sub_100140190(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 24);
  v13(v9, v10, v11);
  uint64_t v14 = *(int *)(a3 + 24);
  int v15 = (char *)a1 + v14;
  int v16 = (char *)a2 + v14;
  uint64_t v17 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v18 = *((void *)v17 - 1);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, int *))(v18 + 48);
  LODWORD(v10) = v19(v15, 1LL, v17);
  int v20 = v19(v16, 1LL, v17);
  if (!(_DWORD)v10)
  {
    if (!v20)
    {
      v13(v15, v16, v11);
      uint64_t v35 = v17[5];
      uint64_t v36 = &v15[v35];
      uint64_t v37 = &v16[v35];
      char v38 = v37[8];
      *(void *)uint64_t v36 = *(void *)v37;
      v36[8] = v38;
      uint64_t v39 = v17[6];
      uint64_t v40 = &v15[v39];
      uint64_t v41 = &v16[v39];
      char v42 = v41[8];
      *(void *)uint64_t v40 = *(void *)v41;
      v40[8] = v42;
      uint64_t v43 = v17[7];
      uint64_t v44 = &v15[v43];
      size_t v45 = &v16[v43];
      char v46 = v45[8];
      *(void *)uint64_t v44 = *(void *)v45;
      v44[8] = v46;
      return a1;
    }

    sub_100004090((uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  if (v20)
  {
LABEL_6:
    uint64_t v33 = sub_100003A0C(&qword_100355538);
    memcpy(v15, v16, *(void *)(*(void *)(v33 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v16, v11);
  uint64_t v21 = v17[5];
  uint64_t v22 = &v15[v21];
  uint64_t v23 = &v16[v21];
  char v24 = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v24;
  uint64_t v25 = v17[6];
  uint64_t v26 = &v15[v25];
  uint64_t v27 = &v16[v25];
  char v28 = v27[8];
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v28;
  uint64_t v29 = v17[7];
  uint64_t v30 = &v15[v29];
  uint64_t v31 = &v16[v29];
  char v32 = v31[8];
  *(void *)uint64_t v30 = *(void *)v31;
  v30[8] = v32;
  (*(void (**)(char *, void, uint64_t, int *))(v18 + 56))(v15, 0LL, 1LL, v17);
  return a1;
}

uint64_t *sub_10014038C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (char *)a1 + v13;
  int v15 = (char *)a2 + v13;
  int v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v17 = *((void *)v16 - 1);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, int *))(v17 + 48);
  LODWORD(v9) = v18(v14, 1LL, v16);
  int v19 = v18(v15, 1LL, v16);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      v12(v14, v15, v10);
      uint64_t v31 = v16[5];
      char v32 = &v14[v31];
      uint64_t v33 = &v15[v31];
      *(void *)char v32 = *(void *)v33;
      v32[8] = v33[8];
      uint64_t v34 = v16[6];
      uint64_t v35 = &v14[v34];
      uint64_t v36 = &v15[v34];
      *(void *)uint64_t v35 = *(void *)v36;
      v35[8] = v36[8];
      uint64_t v37 = v16[7];
      char v38 = &v14[v37];
      uint64_t v39 = &v15[v37];
      *(void *)char v38 = *(void *)v39;
      v38[8] = v39[8];
      return a1;
    }

    sub_100004090((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  if (v19)
  {
LABEL_6:
    uint64_t v29 = sub_100003A0C(&qword_100355538);
    memcpy(v14, v15, *(void *)(*(void *)(v29 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v15, v10);
  uint64_t v20 = v16[5];
  uint64_t v21 = &v14[v20];
  uint64_t v22 = &v15[v20];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  uint64_t v23 = v16[6];
  char v24 = &v14[v23];
  uint64_t v25 = &v15[v23];
  *(void *)char v24 = *(void *)v25;
  v24[8] = v25[8];
  uint64_t v26 = v16[7];
  uint64_t v27 = &v14[v26];
  char v28 = &v15[v26];
  *(void *)uint64_t v27 = *(void *)v28;
  v27[8] = v28[8];
  (*(void (**)(char *, void, uint64_t, int *))(v17 + 56))(v14, 0LL, 1LL, v16);
  return a1;
}

uint64_t sub_100140580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10014058C);
}

uint64_t sub_100140590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10014059C);
}

void sub_1001405A0(uint64_t a1)
{
  v6[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v6[1] = *(void *)(v2 - 8) + 64LL;
    sub_1000119EC( 319LL,  (unint64_t *)&unk_100356B40,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v5 <= 0x3F)
    {
      void v6[2] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 3LL, v6, a1 + 16);
    }
  }

uint64_t sub_100140644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100140650);
}

uint64_t sub_100140654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100140660);
}

char *sub_100140664(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1LL, v12))
    {
      uint64_t v14 = sub_100003A0C(&qword_100355538);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      v8(v10, v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      char v24 = &v11[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
    }

    uint64_t v25 = a3[7];
    a1[a3[6]] = a2[a3[6]];
    uint64_t v26 = &a1[v25];
    uint64_t v27 = &a2[v25];
    *(void *)uint64_t v26 = *(void *)v27;
    v26[8] = v27[8];
    a1[a3[8]] = a2[a3[8]];
  }

  return a1;
}

uint64_t sub_100140800(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v23 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  *(void *)uint64_t v24 = *(void *)v25;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_100140970(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v47 = a3;
  uint64_t v9 = a3[5];
  uint64_t v10 = (char *)(a1 + v9);
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v46 = *((void *)v12 - 1);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, int *))(v46 + 48);
  int v14 = v13(v10, 1LL, v12);
  int v15 = v13(v11, 1LL, v12);
  if (!v14)
  {
    if (!v15)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      uint64_t v34 = v12[5];
      uint64_t v35 = &v10[v34];
      uint64_t v36 = &v11[v34];
      char v37 = v36[8];
      *(void *)uint64_t v35 = *(void *)v36;
      v35[8] = v37;
      uint64_t v38 = v12[6];
      uint64_t v39 = &v10[v38];
      uint64_t v40 = &v11[v38];
      char v41 = v40[8];
      *(void *)uint64_t v39 = *(void *)v40;
      v39[8] = v41;
      uint64_t v42 = v12[7];
      uint64_t v43 = &v10[v42];
      uint64_t v44 = &v11[v42];
      char v45 = v44[8];
      *(void *)uint64_t v43 = *(void *)v44;
      v43[8] = v45;
      goto LABEL_7;
    }

    sub_100004090((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  if (v15)
  {
LABEL_6:
    uint64_t v28 = sub_100003A0C(&qword_100355538);
    memcpy(v10, v11, *(void *)(*(void *)(v28 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  uint64_t v16 = v12[5];
  uint64_t v17 = &v10[v16];
  uint64_t v18 = &v11[v16];
  char v19 = v18[8];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v19;
  uint64_t v20 = v12[6];
  uint64_t v21 = &v10[v20];
  uint64_t v22 = &v11[v20];
  char v23 = v22[8];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v23;
  uint64_t v24 = v12[7];
  uint64_t v25 = &v10[v24];
  uint64_t v26 = &v11[v24];
  char v27 = v26[8];
  *(void *)uint64_t v25 = *(void *)v26;
  v25[8] = v27;
  (*(void (**)(char *, void, uint64_t, int *))(v46 + 56))(v10, 0LL, 1LL, v12);
LABEL_7:
  *(_BYTE *)(a1 + v47[6]) = *(_BYTE *)(a2 + v47[6]);
  uint64_t v29 = v47[7];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = (uint64_t *)(a2 + v29);
  uint64_t v32 = *v31;
  *(_BYTE *)(v30 + 8) = *((_BYTE *)v31 + 8);
  *(void *)uint64_t v30 = v32;
  *(_BYTE *)(a1 + v47[8]) = *(_BYTE *)(a2 + v47[8]);
  return a1;
}

uint64_t sub_100140B94(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    int v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)int v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    char v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v23 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  *(void *)uint64_t v24 = *(void *)v25;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_100140D04(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v40 = a3;
  uint64_t v9 = a3[5];
  uint64_t v10 = (char *)(a1 + v9);
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v39 = *((void *)v12 - 1);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, int *))(v39 + 48);
  int v14 = v13(v10, 1LL, v12);
  int v15 = v13(v11, 1LL, v12);
  if (!v14)
  {
    if (!v15)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      uint64_t v30 = v12[5];
      uint64_t v31 = &v10[v30];
      uint64_t v32 = &v11[v30];
      *(void *)uint64_t v31 = *(void *)v32;
      v31[8] = v32[8];
      uint64_t v33 = v12[6];
      uint64_t v34 = &v10[v33];
      uint64_t v35 = &v11[v33];
      *(void *)uint64_t v34 = *(void *)v35;
      v34[8] = v35[8];
      uint64_t v36 = v12[7];
      char v37 = &v10[v36];
      uint64_t v38 = &v11[v36];
      *(void *)char v37 = *(void *)v38;
      v37[8] = v38[8];
      goto LABEL_7;
    }

    sub_100004090((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  if (v15)
  {
LABEL_6:
    uint64_t v25 = sub_100003A0C(&qword_100355538);
    memcpy(v10, v11, *(void *)(*(void *)(v25 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
  uint64_t v16 = v12[5];
  uint64_t v17 = &v10[v16];
  uint64_t v18 = &v11[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = v12[6];
  uint64_t v20 = &v10[v19];
  uint64_t v21 = &v11[v19];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = v12[7];
  uint64_t v23 = &v10[v22];
  uint64_t v24 = &v11[v22];
  *(void *)uint64_t v23 = *(void *)v24;
  v23[8] = v24[8];
  (*(void (**)(char *, void, uint64_t, int *))(v39 + 56))(v10, 0LL, 1LL, v12);
LABEL_7:
  uint64_t v26 = v40[7];
  *(_BYTE *)(a1 + v40[6]) = *(_BYTE *)(a2 + v40[6]);
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  *(void *)uint64_t v27 = *(void *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  *(_BYTE *)(a1 + v40[8]) = *(_BYTE *)(a2 + v40[8]);
  return a1;
}

uint64_t sub_100140F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100140F30);
}

uint64_t sub_100140F30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  uint64_t v11 = sub_100003A0C(&qword_100355538);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }

  else {
    int v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  }
  unsigned int v15 = v14 - 4;
  else {
    return 0LL;
  }
}

uint64_t sub_100140FE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100140FF0);
}

uint64_t sub_100140FF0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
    return v11(v12, a2, a2, v10);
  }

  uint64_t result = sub_100003A0C(&qword_100355538);
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }

  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 4;
  return result;
}

void sub_100141098(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1001410B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = type metadata accessor for UnknownStorage(319LL);
  if (v11 <= 0x3F)
  {
    v14[0] = *(void *)(v10 - 8) + 64LL;
    sub_1000119EC( 319LL,  (unint64_t *)&unk_100356B40,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v13 <= 0x3F)
    {
      v14[1] = *(void *)(v12 - 8) + 64LL;
      v14[2] = a4;
      v14[3] = a5;
      void v14[4] = a6;
      swift_initStructMetadata(a1, 256LL, 5LL, v14, a1 + 16);
    }
  }

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability()
{
  return &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource()
{
  return &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource;
}

uint64_t sub_10014117C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100141188);
}

uint64_t sub_10014118C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100141198);
}

void *sub_10014119C(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain(v4);
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    unsigned int v15 = (char *)v7 + v13;
    uint64_t v16 = (char *)a2 + v13;
    *(void *)unsigned int v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = (char *)v7 + v14;
    uint64_t v18 = (char *)a2 + v14;
    *(void *)uint64_t v17 = *(void *)v18;
    uint64_t v19 = a3[8];
    uint64_t v20 = a3[9];
    char v21 = *((_BYTE *)a2 + v19);
    v17[8] = v18[8];
    *((_BYTE *)v7 + v19) = v21;
    uint64_t v22 = (char *)v7 + v20;
    *(void *)uint64_t v22 = *(void *)((char *)a2 + v20);
    v22[8] = *((_BYTE *)a2 + v20 + 8);
    uint64_t v23 = a3[10];
    uint64_t v24 = a3[11];
    uint64_t v25 = (char *)v7 + v23;
    uint64_t v26 = (char *)a2 + v23;
    *(void *)uint64_t v25 = *(void *)v26;
    v25[8] = v26[8];
    uint64_t v27 = (char *)v7 + v24;
    uint64_t v28 = (char *)a2 + v24;
    *(void *)uint64_t v27 = *(void *)v28;
    v27[8] = v28[8];
    uint64_t v29 = a3[12];
    uint64_t v30 = (char *)v7 + v29;
    uint64_t v31 = (char *)a2 + v29;
    *(void *)uint64_t v30 = *(void *)v31;
    v30[8] = v31[8];
  }

  return v7;
}

void *sub_1001412EC(void *a1, void *a2, int *a3)
{
  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v12;
  unsigned int v15 = (char *)a2 + v12;
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = (char *)a1 + v13;
  uint64_t v17 = (char *)a2 + v13;
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = a3[10];
  uint64_t v22 = a3[11];
  uint64_t v23 = (char *)a1 + v21;
  uint64_t v24 = (char *)a2 + v21;
  *(void *)uint64_t v23 = *(void *)v24;
  v23[8] = v24[8];
  uint64_t v25 = (char *)a1 + v22;
  uint64_t v26 = (char *)a2 + v22;
  *(void *)uint64_t v25 = *(void *)v26;
  v25[8] = v26[8];
  uint64_t v27 = a3[12];
  uint64_t v28 = (char *)a1 + v27;
  uint64_t v29 = (char *)a2 + v27;
  *(void *)uint64_t v28 = *(void *)v29;
  v28[8] = v29[8];
  return a1;
}

void *sub_100141414(void *a1, void *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = *(void *)v14;
  v13[8] = v14[8];
  *(void *)uint64_t v13 = v15;
  uint64_t v16 = a3[7];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  LOBYTE(v15) = v18[8];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v15;
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  uint64_t v19 = a3[9];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = *(void *)v21;
  v20[8] = v21[8];
  *(void *)uint64_t v20 = v22;
  uint64_t v23 = a3[10];
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  LOBYTE(v22) = v25[8];
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v22;
  uint64_t v26 = a3[11];
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  LOBYTE(v22) = v28[8];
  *(void *)uint64_t v27 = *(void *)v28;
  v27[8] = v22;
  uint64_t v29 = a3[12];
  uint64_t v30 = (char *)a1 + v29;
  uint64_t v31 = (char *)a2 + v29;
  LOBYTE(v22) = v31[8];
  *(void *)uint64_t v30 = *(void *)v31;
  v30[8] = v22;
  return a1;
}

void *sub_100141544(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v10;
  uint64_t v13 = (char *)a2 + v10;
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = (char *)a1 + v11;
  uint64_t v15 = (char *)a2 + v11;
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = a3[10];
  uint64_t v20 = a3[11];
  uint64_t v21 = (char *)a1 + v19;
  uint64_t v22 = (char *)a2 + v19;
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  uint64_t v23 = (char *)a1 + v20;
  uint64_t v24 = (char *)a2 + v20;
  *(void *)uint64_t v23 = *(void *)v24;
  v23[8] = v24[8];
  uint64_t v25 = a3[12];
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v27[8];
  return a1;
}

void *sub_100141658(void *a1, void *a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v11;
  uint64_t v14 = (char *)a2 + v11;
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = (char *)a1 + v12;
  uint64_t v16 = (char *)a2 + v12;
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  uint64_t v20 = a3[10];
  uint64_t v21 = a3[11];
  uint64_t v22 = (char *)a1 + v20;
  uint64_t v23 = (char *)a2 + v20;
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  uint64_t v24 = (char *)a1 + v21;
  uint64_t v25 = (char *)a2 + v21;
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  uint64_t v26 = a3[12];
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  *(void *)uint64_t v27 = *(void *)v28;
  v27[8] = v28[8];
  return a1;
}

uint64_t sub_100141774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100141780);
}

uint64_t sub_100141784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100141790);
}

uint64_t sub_100141794(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    v4[2] = "\t";
    void v4[3] = "\t";
    v4[4] = &unk_1002C7E68;
    v4[5] = "\t";
    void v4[6] = "\t";
    void v4[7] = "\t";
    v4[8] = "\t";
    swift_initStructMetadata(a1, 256LL, 9LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *sub_100141828(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain(v4);
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = (char *)v7 + v13;
    uint64_t v16 = (char *)a2 + v13;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = (char *)v7 + v14;
    uint64_t v18 = (char *)a2 + v14;
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = v18[8];
  }

  return v7;
}

uint64_t *sub_100141904(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v12;
  uint64_t v15 = (char *)a2 + v12;
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = (char *)a1 + v13;
  uint64_t v17 = (char *)a2 + v13;
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  return a1;
}

uint64_t *sub_1001419B8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  char v15 = v14[8];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v15;
  uint64_t v16 = a3[7];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  char v19 = v18[8];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v19;
  return a1;
}

void *sub_100141A6C(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v10;
  uint64_t v13 = (char *)a2 + v10;
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = (char *)a1 + v11;
  char v15 = (char *)a2 + v11;
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  return a1;
}

uint64_t *sub_100141B0C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v11;
  uint64_t v14 = (char *)a2 + v11;
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  char v15 = (char *)a1 + v12;
  uint64_t v16 = (char *)a2 + v12;
  *(void *)char v15 = *(void *)v16;
  v15[8] = v16[8];
  return a1;
}

uint64_t sub_100141BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100141BC0);
}

uint64_t sub_100141BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100141BD0);
}

uint64_t sub_100141BD4(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    v4[2] = "\t";
    void v4[3] = "\t";
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *sub_100141C58(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain(v4);
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2[1];
    a1[1] = v8;
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12);
    uint64_t v14 = a3[7];
    char v15 = (char *)v7 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    uint64_t v18 = *((void *)v17 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v18 + 48))(v16, 1LL, v17))
    {
      uint64_t v19 = sub_100003A0C(&qword_100355538);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64LL));
    }

    else
    {
      v13(v15, v16, v12);
      uint64_t v20 = v17[5];
      uint64_t v21 = &v15[v20];
      uint64_t v22 = &v16[v20];
      *(void *)uint64_t v21 = *(void *)v22;
      v21[8] = v22[8];
      uint64_t v23 = v17[6];
      uint64_t v24 = &v15[v23];
      uint64_t v25 = &v16[v23];
      *(void *)uint64_t v24 = *(void *)v25;
      v24[8] = v25[8];
      uint64_t v26 = v17[7];
      uint64_t v27 = &v15[v26];
      uint64_t v28 = &v16[v26];
      *(void *)uint64_t v27 = *(void *)v28;
      v27[8] = v28[8];
      (*(void (**)(char *, void, uint64_t, int *))(v18 + 56))(v15, 0LL, 1LL, v17);
    }

    uint64_t v29 = a3[8];
    uint64_t v30 = (char *)v7 + v29;
    uint64_t v31 = (char *)a2 + v29;
    uint64_t v32 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0LL);
    uint64_t v33 = *(void *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1LL, v32))
    {
      uint64_t v34 = sub_100003A0C(&qword_100355648);
      memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
    }

    else
    {
      v13(v30, v31, v12);
      uint64_t v35 = *(int *)(v32 + 20);
      uint64_t v36 = &v30[v35];
      char v37 = &v31[v35];
      *(void *)uint64_t v36 = *(void *)v37;
      v36[8] = v37[8];
      uint64_t v38 = *(int *)(v32 + 24);
      uint64_t v39 = &v30[v38];
      uint64_t v40 = &v31[v38];
      *(void *)uint64_t v39 = *(void *)v40;
      v39[8] = v40[8];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0LL, 1LL, v32);
    }
  }

  return v7;
}

uint64_t sub_100141EA4(void *a1, int *a2)
{
  uint64_t v4 = (char *)a1 + a2[6];
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v11(v4, v5);
  uint64_t v6 = (char *)a1 + a2[7];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v8 = (char *)a1 + a2[8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(char *, uint64_t))v11)(v8, v5);
  }
  return result;
}

uint64_t *sub_100141F98(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v13;
  char v15 = (char *)a2 + v13;
  uint64_t v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v17 = *((void *)v16 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1LL, v16))
  {
    uint64_t v18 = sub_100003A0C(&qword_100355538);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    v12(v14, v15, v11);
    uint64_t v19 = v16[5];
    uint64_t v20 = &v14[v19];
    uint64_t v21 = &v15[v19];
    *(void *)uint64_t v20 = *(void *)v21;
    v20[8] = v21[8];
    uint64_t v22 = v16[6];
    uint64_t v23 = &v14[v22];
    uint64_t v24 = &v15[v22];
    *(void *)uint64_t v23 = *(void *)v24;
    v23[8] = v24[8];
    uint64_t v25 = v16[7];
    uint64_t v26 = &v14[v25];
    uint64_t v27 = &v15[v25];
    *(void *)uint64_t v26 = *(void *)v27;
    v26[8] = v27[8];
    (*(void (**)(char *, void, uint64_t, int *))(v17 + 56))(v14, 0LL, 1LL, v16);
  }

  uint64_t v28 = a3[8];
  uint64_t v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  uint64_t v31 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0LL);
  uint64_t v32 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1LL, v31))
  {
    uint64_t v33 = sub_100003A0C(&qword_100355648);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64LL));
  }

  else
  {
    v12(v29, v30, v11);
    uint64_t v34 = *(int *)(v31 + 20);
    uint64_t v35 = &v29[v34];
    uint64_t v36 = &v30[v34];
    *(void *)uint64_t v35 = *(void *)v36;
    v35[8] = v36[8];
    uint64_t v37 = *(int *)(v31 + 24);
    uint64_t v38 = &v29[v37];
    uint64_t v39 = &v30[v37];
    *(void *)uint64_t v38 = *(void *)v39;
    v38[8] = v39[8];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0LL, 1LL, v31);
  }

  return a1;
}

uint64_t *sub_1001421B4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[1];
  uint64_t v9 = a1[1];
  a1[1] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v74 = *(void *)(v13 - 8);
  uint64_t v73 = *(void (**)(char *, char *, uint64_t))(v74 + 24);
  v73(v11, v12, v13);
  uint64_t v14 = a3[7];
  char v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v18 = *((void *)v17 - 1);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, int *))(v18 + 48);
  int v20 = v19(v15, 1LL, v17);
  int v21 = v19(v16, 1LL, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v15, v16, v13);
      uint64_t v22 = v17[5];
      uint64_t v23 = &v15[v22];
      uint64_t v24 = &v16[v22];
      char v25 = v24[8];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v25;
      uint64_t v26 = v17[6];
      uint64_t v27 = &v15[v26];
      uint64_t v28 = &v16[v26];
      char v29 = v28[8];
      *(void *)uint64_t v27 = *(void *)v28;
      v27[8] = v29;
      uint64_t v30 = v17[7];
      uint64_t v31 = &v15[v30];
      uint64_t v32 = &v16[v30];
      char v33 = v32[8];
      *(void *)uint64_t v31 = *(void *)v32;
      v31[8] = v33;
      (*(void (**)(char *, void, uint64_t, int *))(v18 + 56))(v15, 0LL, 1LL, v17);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v21)
  {
    sub_100004090((uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v34 = sub_100003A0C(&qword_100355538);
    memcpy(v15, v16, *(void *)(*(void *)(v34 - 8) + 64LL));
    goto LABEL_7;
  }

  v73(v15, v16, v13);
  uint64_t v53 = v17[5];
  uint64_t v54 = &v15[v53];
  uint64_t v55 = &v16[v53];
  char v56 = v55[8];
  *(void *)uint64_t v54 = *(void *)v55;
  v54[8] = v56;
  uint64_t v57 = v17[6];
  uint64_t v58 = &v15[v57];
  uint64_t v59 = &v16[v57];
  char v60 = v59[8];
  *(void *)uint64_t v58 = *(void *)v59;
  v58[8] = v60;
  uint64_t v61 = v17[7];
  char v62 = &v15[v61];
  uint64_t v63 = &v16[v61];
  char v64 = v63[8];
  *(void *)char v62 = *(void *)v63;
  v62[8] = v64;
LABEL_7:
  uint64_t v35 = a3[8];
  uint64_t v36 = (char *)a1 + v35;
  uint64_t v37 = (char *)a2 + v35;
  uint64_t v38 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0LL);
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 48);
  int v41 = v40(v36, 1LL, v38);
  int v42 = v40(v37, 1LL, v38);
  if (!v41)
  {
    if (!v42)
    {
      v73(v36, v37, v13);
      uint64_t v65 = *(int *)(v38 + 20);
      uint64_t v66 = &v36[v65];
      uint64_t v67 = &v37[v65];
      char v68 = v67[8];
      *(void *)uint64_t v66 = *(void *)v67;
      v66[8] = v68;
      uint64_t v69 = *(int *)(v38 + 24);
      uint64_t v70 = &v36[v69];
      uint64_t v71 = &v37[v69];
      char v72 = v71[8];
      *(void *)uint64_t v70 = *(void *)v71;
      v70[8] = v72;
      return a1;
    }

    sub_100004090((uint64_t)v36, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
    goto LABEL_12;
  }

  if (v42)
  {
LABEL_12:
    uint64_t v51 = sub_100003A0C(&qword_100355648);
    memcpy(v36, v37, *(void *)(*(void *)(v51 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v36, v37, v13);
  uint64_t v43 = *(int *)(v38 + 20);
  uint64_t v44 = &v36[v43];
  char v45 = &v37[v43];
  char v46 = v45[8];
  *(void *)uint64_t v44 = *(void *)v45;
  v44[8] = v46;
  uint64_t v47 = *(int *)(v38 + 24);
  uint64_t v48 = &v36[v47];
  uint64_t v49 = &v37[v47];
  char v50 = v49[8];
  *(void *)uint64_t v48 = *(void *)v49;
  v48[8] = v50;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0LL, 1LL, v38);
  return a1;
}

_OWORD *sub_10014251C(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100003A0C(&qword_100355538);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    v10(v12, v13, v9);
    uint64_t v17 = v14[5];
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v14[6];
    int v21 = &v12[v20];
    uint64_t v22 = &v13[v20];
    *(void *)int v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = v14[7];
    uint64_t v24 = &v12[v23];
    char v25 = &v13[v23];
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v26 = a3[8];
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  uint64_t v29 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0LL);
  uint64_t v30 = *(void *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1LL, v29))
  {
    uint64_t v31 = sub_100003A0C(&qword_100355648);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64LL));
  }

  else
  {
    v10(v27, v28, v9);
    uint64_t v32 = *(int *)(v29 + 20);
    char v33 = &v27[v32];
    uint64_t v34 = &v28[v32];
    *(void *)char v33 = *(void *)v34;
    v33[8] = v34[8];
    uint64_t v35 = *(int *)(v29 + 24);
    uint64_t v36 = &v27[v35];
    uint64_t v37 = &v28[v35];
    *(void *)uint64_t v36 = *(void *)v37;
    v36[8] = v37[8];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0LL, 1LL, v29);
  }

  return a1;
}

uint64_t *sub_100142728(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v62 = *(void *)(v11 - 8);
  uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v62 + 40);
  v61(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v16 = *((void *)v15 - 1);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, int *))(v16 + 48);
  int v18 = v17(v13, 1LL, v15);
  int v19 = v17(v14, 1LL, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v13, v14, v11);
      uint64_t v20 = v15[5];
      int v21 = &v13[v20];
      uint64_t v22 = &v14[v20];
      *(void *)int v21 = *(void *)v22;
      v21[8] = v22[8];
      uint64_t v23 = v15[6];
      uint64_t v24 = &v13[v23];
      char v25 = &v14[v23];
      *(void *)uint64_t v24 = *(void *)v25;
      v24[8] = v25[8];
      uint64_t v26 = v15[7];
      uint64_t v27 = &v13[v26];
      uint64_t v28 = &v14[v26];
      *(void *)uint64_t v27 = *(void *)v28;
      v27[8] = v28[8];
      (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0LL, 1LL, v15);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v19)
  {
    sub_100004090((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v29 = sub_100003A0C(&qword_100355538);
    memcpy(v13, v14, *(void *)(*(void *)(v29 - 8) + 64LL));
    goto LABEL_7;
  }

  v61(v13, v14, v11);
  uint64_t v46 = v15[5];
  uint64_t v47 = &v13[v46];
  uint64_t v48 = &v14[v46];
  *(void *)uint64_t v47 = *(void *)v48;
  v47[8] = v48[8];
  uint64_t v49 = v15[6];
  char v50 = &v13[v49];
  uint64_t v51 = &v14[v49];
  *(void *)char v50 = *(void *)v51;
  v50[8] = v51[8];
  uint64_t v52 = v15[7];
  uint64_t v53 = &v13[v52];
  uint64_t v54 = &v14[v52];
  *(void *)uint64_t v53 = *(void *)v54;
  v53[8] = v54[8];
LABEL_7:
  uint64_t v30 = a3[8];
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = (char *)a2 + v30;
  uint64_t v33 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0LL);
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  int v36 = v35(v31, 1LL, v33);
  int v37 = v35(v32, 1LL, v33);
  if (!v36)
  {
    if (!v37)
    {
      v61(v31, v32, v11);
      uint64_t v55 = *(int *)(v33 + 20);
      char v56 = &v31[v55];
      uint64_t v57 = &v32[v55];
      *(void *)char v56 = *(void *)v57;
      v56[8] = v57[8];
      uint64_t v58 = *(int *)(v33 + 24);
      uint64_t v59 = &v31[v58];
      char v60 = &v32[v58];
      *(void *)uint64_t v59 = *(void *)v60;
      v59[8] = v60[8];
      return a1;
    }

    sub_100004090((uint64_t)v31, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
    goto LABEL_12;
  }

  if (v37)
  {
LABEL_12:
    uint64_t v44 = sub_100003A0C(&qword_100355648);
    memcpy(v31, v32, *(void *)(*(void *)(v44 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v31, v32, v11);
  uint64_t v38 = *(int *)(v33 + 20);
  uint64_t v39 = &v31[v38];
  uint64_t v40 = &v32[v38];
  *(void *)uint64_t v39 = *(void *)v40;
  v39[8] = v40[8];
  uint64_t v41 = *(int *)(v33 + 24);
  int v42 = &v31[v41];
  uint64_t v43 = &v32[v41];
  *(void *)int v42 = *(void *)v43;
  v42[8] = v43[8];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0LL, 1LL, v33);
  return a1;
}

uint64_t sub_100142A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100142A8C);
}

uint64_t sub_100142A8C(char *a1, uint64_t a2, int *a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a3[6];
    }

    else
    {
      uint64_t v12 = sub_100003A0C(&qword_100355538);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a3[7];
      }

      else
      {
        uint64_t v10 = sub_100003A0C(&qword_100355648);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a3[8];
      }
    }

    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }

uint64_t sub_100142B58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100142B64);
}

char *sub_100142B64(char *result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a4[6];
    }

    else
    {
      uint64_t v12 = sub_100003A0C(&qword_100355538);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a4[7];
      }

      else
      {
        uint64_t v10 = sub_100003A0C(&qword_100355648);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a4[8];
      }
    }

    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }

  return result;
}

void sub_100142C2C(uint64_t a1)
{
  v8[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v8[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v8[2] = *(void *)(v2 - 8) + 64LL;
    sub_1000119EC( 319LL,  (unint64_t *)&unk_100356B40,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v5 <= 0x3F)
    {
      v8[3] = *(void *)(v4 - 8) + 64LL;
      sub_1000119EC( 319LL,  (unint64_t *)&unk_1003593A8,  type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
      if (v7 <= 0x3F)
      {
        void v8[4] = *(void *)(v6 - 8) + 64LL;
        swift_initStructMetadata(a1, 256LL, 5LL, v8, a1 + 16);
      }
    }
  }

void *sub_100142CFC(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    unint64_t v7 = (void *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain(v4);
  }

  else
  {
    unint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    v12(v9, v10, v11);
    uint64_t v13 = a3[7];
    *((_BYTE *)v7 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    uint64_t v14 = (char *)v7 + v13;
    uint64_t v15 = (char *)a2 + v13;
    void v14[4] = v15[4];
    *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
    uint64_t v16 = a3[8];
    uint64_t v17 = a3[9];
    int v18 = (char *)v7 + v16;
    int v19 = (char *)a2 + v16;
    v18[4] = v19[4];
    *(_DWORD *)int v18 = *(_DWORD *)v19;
    uint64_t v20 = (char *)v7 + v17;
    int v21 = (char *)a2 + v17;
    v20[4] = v21[4];
    *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  }

  return v7;
}

void *sub_100142DFC(void *a1, void *a2, int *a3)
{
  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  v13[4] = v14[4];
  *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
  uint64_t v15 = a3[8];
  uint64_t v16 = a3[9];
  uint64_t v17 = (char *)a1 + v15;
  int v18 = (char *)a2 + v15;
  v17[4] = v18[4];
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  int v19 = (char *)a1 + v16;
  uint64_t v20 = (char *)a2 + v16;
  v19[4] = v20[4];
  *(_DWORD *)int v19 = *(_DWORD *)v20;
  return a1;
}

void *sub_100142ED4(void *a1, void *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  char v15 = v14[4];
  *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
  v13[4] = v15;
  uint64_t v16 = a3[8];
  uint64_t v17 = (char *)a1 + v16;
  int v18 = (char *)a2 + v16;
  char v19 = v18[4];
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  v17[4] = v19;
  uint64_t v20 = a3[9];
  int v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  char v23 = v22[4];
  *(_DWORD *)int v21 = *(_DWORD *)v22;
  v21[4] = v23;
  return a1;
}

void *sub_100142FB0(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  v11[4] = v12[4];
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  uint64_t v13 = a3[8];
  uint64_t v14 = a3[9];
  char v15 = (char *)a1 + v13;
  uint64_t v16 = (char *)a2 + v13;
  v15[4] = v16[4];
  *(_DWORD *)char v15 = *(_DWORD *)v16;
  uint64_t v17 = (char *)a1 + v14;
  int v18 = (char *)a2 + v14;
  v17[4] = v18[4];
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  return a1;
}

void *sub_100143074(void *a1, void *a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  v12[4] = v13[4];
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  uint64_t v14 = a3[8];
  uint64_t v15 = a3[9];
  uint64_t v16 = (char *)a1 + v14;
  uint64_t v17 = (char *)a2 + v14;
  v16[4] = v17[4];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  int v18 = (char *)a1 + v15;
  char v19 = (char *)a2 + v15;
  v18[4] = v19[4];
  *(_DWORD *)int v18 = *(_DWORD *)v19;
  return a1;
}

uint64_t sub_100143140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10014314C);
}

uint64_t sub_100143150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10014315C);
}

uint64_t sub_100143160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100143648(a1, a2, a3, (uint64_t)&unk_1002C7FF8, (uint64_t)&unk_1002C7CB8);
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType()
{
  return &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType;
}

uint64_t *sub_100143184(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain(v4);
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = (char *)v7 + v13;
    uint64_t v16 = (char *)a2 + v13;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = (char *)v7 + v14;
    int v18 = (char *)a2 + v14;
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = v18[8];
    uint64_t v19 = a3[8];
    uint64_t v20 = a3[9];
    int v21 = (char *)v7 + v19;
    uint64_t v22 = (char *)a2 + v19;
    *(void *)int v21 = *(void *)v22;
    v21[8] = v22[8];
    char v23 = (char *)v7 + v20;
    uint64_t v24 = (char *)a2 + v20;
    *(void *)char v23 = *(void *)v24;
    v23[8] = v24[8];
  }

  return v7;
}

uint64_t *sub_100143294(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v12;
  uint64_t v15 = (char *)a2 + v12;
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = (char *)a1 + v13;
  uint64_t v17 = (char *)a2 + v13;
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = a3[8];
  uint64_t v19 = a3[9];
  uint64_t v20 = (char *)a1 + v18;
  int v21 = (char *)a2 + v18;
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = (char *)a1 + v19;
  char v23 = (char *)a2 + v19;
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  return a1;
}

uint64_t *sub_10014337C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  char v15 = v14[8];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v15;
  uint64_t v16 = a3[7];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  char v19 = v18[8];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v19;
  uint64_t v20 = a3[8];
  int v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  char v23 = v22[8];
  *(void *)int v21 = *(void *)v22;
  v21[8] = v23;
  uint64_t v24 = a3[9];
  char v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  char v27 = v26[8];
  *(void *)char v25 = *(void *)v26;
  v25[8] = v27;
  return a1;
}

void *sub_100143468(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v10;
  uint64_t v13 = (char *)a2 + v10;
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = (char *)a1 + v11;
  char v15 = (char *)a2 + v11;
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = a3[8];
  uint64_t v17 = a3[9];
  uint64_t v18 = (char *)a1 + v16;
  char v19 = (char *)a2 + v16;
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  uint64_t v20 = (char *)a1 + v17;
  int v21 = (char *)a2 + v17;
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  return a1;
}

uint64_t *sub_10014353C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v11;
  uint64_t v14 = (char *)a2 + v11;
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  char v15 = (char *)a1 + v12;
  uint64_t v16 = (char *)a2 + v12;
  *(void *)char v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = a3[8];
  uint64_t v18 = a3[9];
  char v19 = (char *)a1 + v17;
  uint64_t v20 = (char *)a2 + v17;
  *(void *)char v19 = *(void *)v20;
  v19[8] = v20[8];
  int v21 = (char *)a1 + v18;
  uint64_t v22 = (char *)a2 + v18;
  *(void *)int v21 = *(void *)v22;
  v21[8] = v22[8];
  return a1;
}

uint64_t sub_100143618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100143624);
}

uint64_t sub_100143628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100143634);
}

uint64_t sub_100143638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100143648(a1, a2, a3, (uint64_t)"\t", (uint64_t)"\t");
}

uint64_t sub_100143648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v10[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v9 <= 0x3F)
  {
    v10[1] = *(void *)(result - 8) + 64LL;
    v10[2] = a4;
    v10[3] = a5;
    v10[4] = a5;
    v10[5] = a5;
    swift_initStructMetadata(a1, 256LL, 6LL, v10, a1 + 16);
    return 0LL;
  }

  return result;
}

void *sub_1001436D8(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain(v4);
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    unint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = (void *)((char *)v7 + v13);
    char v15 = (void *)((char *)a2 + v13);
    uint64_t v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0LL);
    uint64_t v17 = *((void *)v16 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v17 + 48))(v15, 1LL, v16))
    {
      uint64_t v18 = sub_100003A0C(&qword_100355650);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      uint64_t v19 = *v15;
      *uint64_t v14 = *v15;
      uint64_t v20 = v16[5];
      int v21 = (char *)v14 + v20;
      uint64_t v54 = v11;
      uint64_t v22 = v12;
      char v23 = (char *)v15 + v20;
      swift_bridgeObjectRetain(v19);
      uint64_t v24 = v23;
      uint64_t v12 = v22;
      uint64_t v11 = v54;
      v12(v21, v24, v54);
      uint64_t v25 = v16[6];
      uint64_t v26 = (char *)v14 + v25;
      char v27 = (char *)v15 + v25;
      *(void *)uint64_t v26 = *(void *)v27;
      v26[8] = v27[8];
      uint64_t v28 = v16[7];
      uint64_t v29 = (char *)v14 + v28;
      uint64_t v30 = (char *)v15 + v28;
      *(void *)uint64_t v29 = *(void *)v30;
      v29[8] = v30[8];
      uint64_t v31 = v16[8];
      uint64_t v32 = (char *)v14 + v31;
      uint64_t v33 = (char *)v15 + v31;
      *(void *)uint64_t v32 = *(void *)v33;
      v32[8] = v33[8];
      uint64_t v34 = v16[9];
      uint64_t v35 = (char *)v14 + v34;
      int v36 = (char *)v15 + v34;
      *(void *)uint64_t v35 = *(void *)v36;
      v35[8] = v36[8];
      (*(void (**)(uint64_t *, void, uint64_t, int *))(v17 + 56))(v14, 0LL, 1LL, v16);
    }

    uint64_t v37 = a3[7];
    uint64_t v38 = a3[8];
    uint64_t v39 = (char *)v7 + v37;
    uint64_t v40 = (char *)a2 + v37;
    *(void *)uint64_t v39 = *(void *)v40;
    v39[8] = v40[8];
    *((_BYTE *)v7 + v38) = *((_BYTE *)a2 + v38);
    uint64_t v41 = a3[9];
    uint64_t v42 = a3[10];
    uint64_t v43 = (char *)v7 + v41;
    uint64_t v44 = (char *)a2 + v41;
    *(_DWORD *)uint64_t v43 = *(_DWORD *)v44;
    v43[4] = v44[4];
    char v45 = (char *)v7 + v42;
    uint64_t v46 = (char *)a2 + v42;
    uint64_t v47 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0LL);
    uint64_t v48 = *(void *)(v47 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1LL, v47))
    {
      uint64_t v49 = sub_100003A0C(&qword_100355658);
      memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64LL));
    }

    else
    {
      v12(v45, v46, v11);
      v45[*(int *)(v47 + 20)] = v46[*(int *)(v47 + 20)];
      v45[*(int *)(v47 + 24)] = v46[*(int *)(v47 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0LL, 1LL, v47);
    }

    uint64_t v50 = a3[11];
    uint64_t v51 = (char *)v7 + v50;
    uint64_t v52 = (char *)a2 + v50;
    *(void *)uint64_t v51 = *(void *)v52;
    v51[8] = v52[8];
  }

  return v7;
}

uint64_t sub_100143998(void *a1, int *a2)
{
  uint64_t v4 = (char *)a1 + a2[5];
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v11(v4, v5);
  uint64_t v6 = (char *)a1 + a2[6];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0LL);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7))
  {
    swift_bridgeObjectRelease(*(void *)v6);
    v11(&v6[*(int *)(v7 + 20)], v5);
  }

  uint64_t v8 = (char *)a1 + a2[10];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(char *, uint64_t))v11)(v8, v5);
  }
  return result;
}

void *sub_100143AA0(void *a1, void *a2, int *a3)
{
  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  char v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0LL);
  uint64_t v16 = *((void *)v15 - 1);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v16 + 48))(v14, 1LL, v15))
  {
    uint64_t v17 = sub_100003A0C(&qword_100355650);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    uint64_t v18 = *v14;
    *uint64_t v13 = *v14;
    uint64_t v19 = v15[5];
    uint64_t v20 = (char *)v13 + v19;
    uint64_t v53 = v10;
    int v21 = v11;
    uint64_t v22 = (char *)v14 + v19;
    swift_bridgeObjectRetain(v18);
    char v23 = v22;
    uint64_t v11 = v21;
    uint64_t v10 = v53;
    v11(v20, v23, v53);
    uint64_t v24 = v15[6];
    uint64_t v25 = (char *)v13 + v24;
    uint64_t v26 = (char *)v14 + v24;
    *(void *)uint64_t v25 = *(void *)v26;
    v25[8] = v26[8];
    uint64_t v27 = v15[7];
    uint64_t v28 = (char *)v13 + v27;
    uint64_t v29 = (char *)v14 + v27;
    *(void *)uint64_t v28 = *(void *)v29;
    v28[8] = v29[8];
    uint64_t v30 = v15[8];
    uint64_t v31 = (char *)v13 + v30;
    uint64_t v32 = (char *)v14 + v30;
    *(void *)uint64_t v31 = *(void *)v32;
    v31[8] = v32[8];
    uint64_t v33 = v15[9];
    uint64_t v34 = (char *)v13 + v33;
    uint64_t v35 = (char *)v14 + v33;
    *(void *)uint64_t v34 = *(void *)v35;
    v34[8] = v35[8];
    (*(void (**)(uint64_t *, void, uint64_t, int *))(v16 + 56))(v13, 0LL, 1LL, v15);
  }

  uint64_t v36 = a3[7];
  uint64_t v37 = a3[8];
  uint64_t v38 = (char *)a1 + v36;
  uint64_t v39 = (char *)a2 + v36;
  *(void *)uint64_t v38 = *(void *)v39;
  v38[8] = v39[8];
  *((_BYTE *)a1 + v37) = *((_BYTE *)a2 + v37);
  uint64_t v40 = a3[9];
  uint64_t v41 = a3[10];
  uint64_t v42 = (char *)a1 + v40;
  uint64_t v43 = (char *)a2 + v40;
  *(_DWORD *)uint64_t v42 = *(_DWORD *)v43;
  v42[4] = v43[4];
  uint64_t v44 = (char *)a1 + v41;
  char v45 = (char *)a2 + v41;
  uint64_t v46 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0LL);
  uint64_t v47 = *(void *)(v46 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1LL, v46))
  {
    uint64_t v48 = sub_100003A0C(&qword_100355658);
    memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64LL));
  }

  else
  {
    v11(v44, v45, v10);
    v44[*(int *)(v46 + 20)] = v45[*(int *)(v46 + 20)];
    v44[*(int *)(v46 + 24)] = v45[*(int *)(v46 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0LL, 1LL, v46);
  }

  uint64_t v49 = a3[11];
  uint64_t v50 = (char *)a1 + v49;
  uint64_t v51 = (char *)a2 + v49;
  *(void *)uint64_t v50 = *(void *)v51;
  v50[8] = v51[8];
  return a1;
}

void *sub_100143D38(void *a1, void *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v83 = *(void *)(v11 - 8);
  uint64_t v84 = v11;
  uint64_t v12 = *(void (**)(char *, char *))(v83 + 24);
  v12(v9, v10);
  uint64_t v13 = a3[6];
  uint64_t v14 = (void *)((char *)a1 + v13);
  char v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0LL);
  uint64_t v17 = *((void *)v16 - 1);
  uint64_t v18 = *(uint64_t (**)(uint64_t *, uint64_t, int *))(v17 + 48);
  int v19 = v18(v14, 1LL, v16);
  int v20 = v18(v15, 1LL, v16);
  char v82 = v12;
  if (v19)
  {
    if (!v20)
    {
      uint64_t v21 = *v15;
      *uint64_t v14 = *v15;
      uint64_t v22 = v16[5];
      char v23 = (char *)v14 + v22;
      uint64_t v24 = (char *)v15 + v22;
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v83 + 16);
      swift_bridgeObjectRetain(v21);
      v25(v23, v24, v84);
      uint64_t v26 = v16[6];
      uint64_t v27 = (char *)v14 + v26;
      uint64_t v28 = (char *)v15 + v26;
      char v29 = v28[8];
      *(void *)uint64_t v27 = *(void *)v28;
      v27[8] = v29;
      uint64_t v30 = v16[7];
      uint64_t v31 = (char *)v14 + v30;
      uint64_t v32 = (char *)v15 + v30;
      char v33 = v32[8];
      *(void *)uint64_t v31 = *(void *)v32;
      v31[8] = v33;
      uint64_t v34 = v16[8];
      uint64_t v35 = (char *)v14 + v34;
      uint64_t v36 = (char *)v15 + v34;
      char v37 = v36[8];
      *(void *)uint64_t v35 = *(void *)v36;
      v35[8] = v37;
      uint64_t v38 = v16[9];
      uint64_t v39 = (char *)v14 + v38;
      uint64_t v40 = (char *)v15 + v38;
      char v41 = v40[8];
      *(void *)uint64_t v39 = *(void *)v40;
      v39[8] = v41;
      (*(void (**)(uint64_t *, void, uint64_t, int *))(v17 + 56))(v14, 0LL, 1LL, v16);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v20)
  {
    sub_100004090( (uint64_t)v14,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
LABEL_6:
    uint64_t v42 = sub_100003A0C(&qword_100355650);
    memcpy(v14, v15, *(void *)(*(void *)(v42 - 8) + 64LL));
    goto LABEL_7;
  }

  uint64_t v64 = *v15;
  uint64_t v65 = *v14;
  *uint64_t v14 = *v15;
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRelease(v65);
  ((void (*)(char *, char *, uint64_t))v12)((char *)v14 + v16[5], (char *)v15 + v16[5], v84);
  uint64_t v66 = v16[6];
  uint64_t v67 = (char *)v14 + v66;
  char v68 = (char *)v15 + v66;
  char v69 = v68[8];
  *(void *)uint64_t v67 = *(void *)v68;
  v67[8] = v69;
  uint64_t v70 = v16[7];
  uint64_t v71 = (char *)v14 + v70;
  char v72 = (char *)v15 + v70;
  char v73 = v72[8];
  *(void *)uint64_t v71 = *(void *)v72;
  v71[8] = v73;
  uint64_t v74 = v16[8];
  int v75 = (char *)v14 + v74;
  int v76 = (char *)v15 + v74;
  char v77 = v76[8];
  *(void *)int v75 = *(void *)v76;
  v75[8] = v77;
  uint64_t v78 = v16[9];
  uint64_t v79 = (char *)v14 + v78;
  uint64_t v80 = (char *)v15 + v78;
  char v81 = v80[8];
  *(void *)uint64_t v79 = *(void *)v80;
  v79[8] = v81;
LABEL_7:
  uint64_t v43 = a3[7];
  uint64_t v44 = (char *)a1 + v43;
  char v45 = (char *)a2 + v43;
  uint64_t v46 = *(void *)v45;
  v44[8] = v45[8];
  *(void *)uint64_t v44 = v46;
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  uint64_t v47 = a3[9];
  uint64_t v48 = (char *)a1 + v47;
  uint64_t v49 = (char *)a2 + v47;
  LODWORD(v46) = *(_DWORD *)v49;
  v48[4] = v49[4];
  *(_DWORD *)uint64_t v48 = v46;
  uint64_t v50 = a3[10];
  uint64_t v51 = (char *)a1 + v50;
  uint64_t v52 = (char *)a2 + v50;
  uint64_t v53 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0LL);
  uint64_t v54 = *(void *)(v53 - 8);
  uint64_t v55 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v54 + 48);
  int v56 = v55(v51, 1LL, v53);
  int v57 = v55(v52, 1LL, v53);
  if (!v56)
  {
    if (!v57)
    {
      ((void (*)(_BYTE *, _BYTE *, uint64_t))v82)(v51, v52, v84);
      v51[*(int *)(v53 + 20)] = v52[*(int *)(v53 + 20)];
      v51[*(int *)(v53 + 24)] = v52[*(int *)(v53 + 24)];
      goto LABEL_13;
    }

    sub_100004090( (uint64_t)v51,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
    goto LABEL_12;
  }

  if (v57)
  {
LABEL_12:
    uint64_t v58 = sub_100003A0C(&qword_100355658);
    memcpy(v51, v52, *(void *)(*(void *)(v58 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v83 + 16))(v51, v52, v84);
  v51[*(int *)(v53 + 20)] = v52[*(int *)(v53 + 20)];
  v51[*(int *)(v53 + 24)] = v52[*(int *)(v53 + 24)];
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0LL, 1LL, v53);
LABEL_13:
  uint64_t v59 = a3[11];
  char v60 = (char *)a1 + v59;
  uint64_t v61 = (char *)a2 + v59;
  uint64_t v62 = *(void *)v61;
  v60[8] = v61[8];
  *(void *)char v60 = v62;
  return a1;
}

void *sub_100144108(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0LL);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100003A0C(&qword_100355650);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    void *v12 = *v13;
    v10((char *)v12 + v14[5], (char *)v13 + v14[5], v9);
    uint64_t v17 = v14[6];
    uint64_t v18 = (char *)v12 + v17;
    int v19 = (char *)v13 + v17;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v14[7];
    uint64_t v21 = (char *)v12 + v20;
    uint64_t v22 = (char *)v13 + v20;
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = v14[8];
    uint64_t v24 = (char *)v12 + v23;
    uint64_t v25 = (char *)v13 + v23;
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    uint64_t v26 = v14[9];
    uint64_t v27 = (char *)v12 + v26;
    uint64_t v28 = (char *)v13 + v26;
    *(void *)uint64_t v27 = *(void *)v28;
    v27[8] = v28[8];
    (*(void (**)(void *, void, uint64_t, int *))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v29 = a3[7];
  uint64_t v30 = a3[8];
  uint64_t v31 = (char *)a1 + v29;
  uint64_t v32 = (char *)a2 + v29;
  *(void *)uint64_t v31 = *(void *)v32;
  v31[8] = v32[8];
  *((_BYTE *)a1 + v30) = *((_BYTE *)a2 + v30);
  uint64_t v33 = a3[9];
  uint64_t v34 = a3[10];
  uint64_t v35 = (char *)a1 + v33;
  uint64_t v36 = (char *)a2 + v33;
  *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
  v35[4] = v36[4];
  char v37 = (char *)a1 + v34;
  uint64_t v38 = (char *)a2 + v34;
  uint64_t v39 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0LL);
  uint64_t v40 = *(void *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1LL, v39))
  {
    uint64_t v41 = sub_100003A0C(&qword_100355658);
    memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64LL));
  }

  else
  {
    v10(v37, v38, v9);
    v37[*(int *)(v39 + 20)] = v38[*(int *)(v39 + 20)];
    v37[*(int *)(v39 + 24)] = v38[*(int *)(v39 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0LL, 1LL, v39);
  }

  uint64_t v42 = a3[11];
  uint64_t v43 = (char *)a1 + v42;
  uint64_t v44 = (char *)a2 + v42;
  *(void *)uint64_t v43 = *(void *)v44;
  v43[8] = v44[8];
  return a1;
}

void *sub_100144374(void *a1, void *a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v66 = *(void *)(v10 - 8);
  uint64_t v65 = *(void (**)(char *, char *, uint64_t))(v66 + 40);
  v65(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0LL);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, int *))(v15 + 48);
  int v17 = v16(v12, 1LL, v14);
  int v18 = v16(v13, 1LL, v14);
  if (v17)
  {
    if (!v18)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      (*(void (**)(char *, char *, uint64_t))(v66 + 32))(&v12[v14[5]], &v13[v14[5]], v10);
      uint64_t v19 = v14[6];
      uint64_t v20 = &v12[v19];
      uint64_t v21 = &v13[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v14[7];
      uint64_t v23 = &v12[v22];
      uint64_t v24 = &v13[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      uint64_t v25 = v14[8];
      uint64_t v26 = &v12[v25];
      uint64_t v27 = &v13[v25];
      *(void *)uint64_t v26 = *(void *)v27;
      v26[8] = v27[8];
      uint64_t v28 = v14[9];
      uint64_t v29 = &v12[v28];
      uint64_t v30 = &v13[v28];
      *(void *)uint64_t v29 = *(void *)v30;
      v29[8] = v30[8];
      (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0LL, 1LL, v14);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v18)
  {
    sub_100004090( (uint64_t)v12,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
LABEL_6:
    uint64_t v31 = sub_100003A0C(&qword_100355650);
    memcpy(v12, v13, *(void *)(*(void *)(v31 - 8) + 64LL));
    goto LABEL_7;
  }

  uint64_t v52 = *(void *)v12;
  *(void *)uint64_t v12 = *(void *)v13;
  swift_bridgeObjectRelease(v52);
  v65(&v12[v14[5]], &v13[v14[5]], v10);
  uint64_t v53 = v14[6];
  uint64_t v54 = &v12[v53];
  uint64_t v55 = &v13[v53];
  *(void *)uint64_t v54 = *(void *)v55;
  v54[8] = v55[8];
  uint64_t v56 = v14[7];
  int v57 = &v12[v56];
  uint64_t v58 = &v13[v56];
  *(void *)int v57 = *(void *)v58;
  v57[8] = v58[8];
  uint64_t v59 = v14[8];
  char v60 = &v12[v59];
  uint64_t v61 = &v13[v59];
  *(void *)char v60 = *(void *)v61;
  v60[8] = v61[8];
  uint64_t v62 = v14[9];
  uint64_t v63 = &v12[v62];
  uint64_t v64 = &v13[v62];
  *(void *)uint64_t v63 = *(void *)v64;
  v63[8] = v64[8];
LABEL_7:
  uint64_t v32 = a3[7];
  uint64_t v33 = a3[8];
  uint64_t v34 = (char *)a1 + v32;
  uint64_t v35 = (char *)a2 + v32;
  *(void *)uint64_t v34 = *(void *)v35;
  v34[8] = v35[8];
  *((_BYTE *)a1 + v33) = *((_BYTE *)a2 + v33);
  uint64_t v36 = a3[9];
  uint64_t v37 = a3[10];
  uint64_t v38 = (char *)a1 + v36;
  uint64_t v39 = (char *)a2 + v36;
  *(_DWORD *)uint64_t v38 = *(_DWORD *)v39;
  v38[4] = v39[4];
  uint64_t v40 = (char *)a1 + v37;
  uint64_t v41 = (char *)a2 + v37;
  uint64_t v42 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0LL);
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48);
  int v45 = v44(v40, 1LL, v42);
  int v46 = v44(v41, 1LL, v42);
  if (!v45)
  {
    if (!v46)
    {
      v65(v40, v41, v10);
      v40[*(int *)(v42 + 20)] = v41[*(int *)(v42 + 20)];
      v40[*(int *)(v42 + 24)] = v41[*(int *)(v42 + 24)];
      goto LABEL_13;
    }

    sub_100004090( (uint64_t)v40,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
    goto LABEL_12;
  }

  if (v46)
  {
LABEL_12:
    uint64_t v47 = sub_100003A0C(&qword_100355658);
    memcpy(v40, v41, *(void *)(*(void *)(v47 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v40, v41, v10);
  v40[*(int *)(v42 + 20)] = v41[*(int *)(v42 + 20)];
  v40[*(int *)(v42 + 24)] = v41[*(int *)(v42 + 24)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0LL, 1LL, v42);
LABEL_13:
  uint64_t v48 = a3[11];
  uint64_t v49 = (char *)a1 + v48;
  uint64_t v50 = (char *)a2 + v48;
  *(void *)uint64_t v49 = *(void *)v50;
  v49[8] = v50[8];
  return a1;
}

uint64_t sub_10014472C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100144738);
}

uint64_t sub_100144738(char *a1, uint64_t a2, int *a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a3[5];
    }

    else
    {
      uint64_t v12 = sub_100003A0C(&qword_100355650);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a3[6];
      }

      else
      {
        uint64_t v10 = sub_100003A0C(&qword_100355658);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a3[10];
      }
    }

    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }

uint64_t sub_100144804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100144810);
}

char *sub_100144810(char *result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a4[5];
    }

    else
    {
      uint64_t v12 = sub_100003A0C(&qword_100355650);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a4[6];
      }

      else
      {
        uint64_t v10 = sub_100003A0C(&qword_100355658);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a4[10];
      }
    }

    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }

  return result;
}

void sub_1001448D8(uint64_t a1)
{
  v8[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v8[1] = *(void *)(v2 - 8) + 64LL;
    sub_1000119EC( 319LL,  &qword_100359560,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
    if (v5 <= 0x3F)
    {
      v8[2] = *(void *)(v4 - 8) + 64LL;
      v8[3] = "\t";
      void v8[4] = &unk_1002C7FF8;
      void v8[5] = &unk_1002C7CB8;
      sub_1000119EC( 319LL,  (unint64_t *)&unk_100359568,  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
      if (v7 <= 0x3F)
      {
        void v8[6] = *(void *)(v6 - 8) + 64LL;
        v8[7] = "\t";
        swift_initStructMetadata(a1, 256LL, 8LL, v8, a1 + 16);
      }
    }
  }

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType()
{
  return &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType;
}

uint64_t sub_1001449D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001449E0);
}

uint64_t sub_1001449E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001449F0);
}

uint64_t sub_1001449F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007813C(a1, a2, a3, (uint64_t)&unk_1002C7E68, (uint64_t)&unk_1002C7E68);
}

void *sub_100144A04(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    unint64_t v7 = (void *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain(v4);
  }

  else
  {
    unint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = (char *)v7 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    uint64_t v17 = *((void *)v16 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1LL, v16))
    {
      uint64_t v18 = sub_100003A0C(&qword_100355538);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      v12(v14, v15, v11);
      uint64_t v19 = v16[5];
      uint64_t v20 = &v14[v19];
      uint64_t v21 = &v15[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v16[6];
      uint64_t v23 = &v14[v22];
      uint64_t v24 = &v15[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      uint64_t v25 = v16[7];
      uint64_t v26 = &v14[v25];
      uint64_t v27 = &v15[v25];
      *(void *)uint64_t v26 = *(void *)v27;
      v26[8] = v27[8];
      (*(void (**)(char *, void, uint64_t, int *))(v17 + 56))(v14, 0LL, 1LL, v16);
    }

    *((_BYTE *)v7 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  }

  return v7;
}

void *sub_100144B94(void *a1, void *a2, int *a3)
{
  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v16 = *((void *)v15 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1LL, v15))
  {
    uint64_t v17 = sub_100003A0C(&qword_100355538);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    v11(v13, v14, v10);
    uint64_t v18 = v15[5];
    uint64_t v19 = &v13[v18];
    uint64_t v20 = &v14[v18];
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = v15[6];
    uint64_t v22 = &v13[v21];
    uint64_t v23 = &v14[v21];
    *(void *)uint64_t v22 = *(void *)v23;
    v22[8] = v23[8];
    uint64_t v24 = v15[7];
    uint64_t v25 = &v13[v24];
    uint64_t v26 = &v14[v24];
    *(void *)uint64_t v25 = *(void *)v26;
    v25[8] = v26[8];
    (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0LL, 1LL, v15);
  }

  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  return a1;
}

void *sub_100144CFC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 24);
  v13(v9, v10, v11);
  uint64_t v48 = a3;
  uint64_t v49 = a2;
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v18 = *((void *)v17 - 1);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, int *))(v18 + 48);
  int v20 = v19(v15, 1LL, v17);
  int v21 = v19(v16, 1LL, v17);
  if (!v20)
  {
    if (!v21)
    {
      v13(v15, v16, v11);
      uint64_t v36 = v17[5];
      uint64_t v37 = &v15[v36];
      uint64_t v38 = &v16[v36];
      char v39 = v38[8];
      *(void *)uint64_t v37 = *(void *)v38;
      v37[8] = v39;
      uint64_t v40 = v17[6];
      uint64_t v41 = &v15[v40];
      uint64_t v42 = &v16[v40];
      char v43 = v42[8];
      *(void *)uint64_t v41 = *(void *)v42;
      v41[8] = v43;
      uint64_t v44 = v17[7];
      int v45 = &v15[v44];
      int v46 = &v16[v44];
      char v47 = v46[8];
      *(void *)int v45 = *(void *)v46;
      v45[8] = v47;
      goto LABEL_7;
    }

    sub_100004090((uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  if (v21)
  {
LABEL_6:
    uint64_t v34 = sub_100003A0C(&qword_100355538);
    memcpy(v15, v16, *(void *)(*(void *)(v34 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v16, v11);
  uint64_t v22 = v17[5];
  uint64_t v23 = &v15[v22];
  uint64_t v24 = &v16[v22];
  char v25 = v24[8];
  *(void *)uint64_t v23 = *(void *)v24;
  v23[8] = v25;
  uint64_t v26 = v17[6];
  uint64_t v27 = &v15[v26];
  uint64_t v28 = &v16[v26];
  char v29 = v28[8];
  *(void *)uint64_t v27 = *(void *)v28;
  v27[8] = v29;
  uint64_t v30 = v17[7];
  uint64_t v31 = &v15[v30];
  uint64_t v32 = &v16[v30];
  char v33 = v32[8];
  *(void *)uint64_t v31 = *(void *)v32;
  v31[8] = v33;
  (*(void (**)(char *, void, uint64_t, int *))(v18 + 56))(v15, 0LL, 1LL, v17);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(v48 + 28)) = *((_BYTE *)v49 + *(int *)(v48 + 28));
  return a1;
}

void *sub_100144F14(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100003A0C(&qword_100355538);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    v10(v12, v13, v9);
    uint64_t v17 = v14[5];
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v14[6];
    int v21 = &v12[v20];
    uint64_t v22 = &v13[v20];
    *(void *)int v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = v14[7];
    uint64_t v24 = &v12[v23];
    char v25 = &v13[v23];
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  return a1;
}

void *sub_100145074(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  uint64_t v41 = a3;
  uint64_t v42 = a2;
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v17 = *((void *)v16 - 1);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, int *))(v17 + 48);
  int v19 = v18(v14, 1LL, v16);
  int v20 = v18(v15, 1LL, v16);
  if (!v19)
  {
    if (!v20)
    {
      v12(v14, v15, v10);
      uint64_t v32 = v16[5];
      char v33 = &v14[v32];
      uint64_t v34 = &v15[v32];
      *(void *)char v33 = *(void *)v34;
      v33[8] = v34[8];
      uint64_t v35 = v16[6];
      uint64_t v36 = &v14[v35];
      uint64_t v37 = &v15[v35];
      *(void *)uint64_t v36 = *(void *)v37;
      v36[8] = v37[8];
      uint64_t v38 = v16[7];
      char v39 = &v14[v38];
      uint64_t v40 = &v15[v38];
      *(void *)char v39 = *(void *)v40;
      v39[8] = v40[8];
      goto LABEL_7;
    }

    sub_100004090((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }

  if (v20)
  {
LABEL_6:
    uint64_t v30 = sub_100003A0C(&qword_100355538);
    memcpy(v14, v15, *(void *)(*(void *)(v30 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v15, v10);
  uint64_t v21 = v16[5];
  uint64_t v22 = &v14[v21];
  uint64_t v23 = &v15[v21];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  uint64_t v24 = v16[6];
  char v25 = &v14[v24];
  uint64_t v26 = &v15[v24];
  *(void *)char v25 = *(void *)v26;
  v25[8] = v26[8];
  uint64_t v27 = v16[7];
  uint64_t v28 = &v14[v27];
  char v29 = &v15[v27];
  *(void *)uint64_t v28 = *(void *)v29;
  v28[8] = v29[8];
  (*(void (**)(char *, void, uint64_t, int *))(v17 + 56))(v14, 0LL, 1LL, v16);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(v41 + 28)) = *((_BYTE *)v42 + *(int *)(v41 + 28));
  return a1;
}

uint64_t sub_100145284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100145290);
}

uint64_t sub_100145294(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 20);
    }

    else
    {
      uint64_t v10 = sub_100003A0C(&qword_100355538);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 24);
    }

    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }

uint64_t sub_100145338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100145344);
}

char *sub_100145348(char *result, uint64_t a2, int a3, uint64_t a4)
{
  unint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 20);
    }

    else
    {
      uint64_t v10 = sub_100003A0C(&qword_100355538);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 24);
    }

    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }

  return result;
}

void sub_1001453E8(uint64_t a1)
{
  v6[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v6[1] = *(void *)(v2 - 8) + 64LL;
    sub_1000119EC( 319LL,  (unint64_t *)&unk_100356B40,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v5 <= 0x3F)
    {
      void v6[2] = *(void *)(v4 - 8) + 64LL;
      void v6[3] = &unk_1002C7E68;
      swift_initStructMetadata(a1, 256LL, 4LL, v6, a1 + 16);
    }
  }

void *sub_100145494(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v9);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
  }

  return a1;
}

uint64_t sub_100145524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t sub_100145588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1001455F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t sub_100145654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t sub_1001456B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001456C4);
}

uint64_t sub_1001456C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  else {
    int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  }
  unsigned int v10 = v9 - 4;
  else {
    return 0LL;
  }
}

uint64_t sub_100145748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100145754);
}

uint64_t sub_100145754(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 4;
  return result;
}

uint64_t sub_1001457CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007813C(a1, a2, a3, (uint64_t)&unk_1002C7FF8, (uint64_t)&unk_1002C7FF8);
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType()
{
  return &type metadata for CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType;
}

char *sub_1001457EC(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    unsigned int v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1LL, v12))
    {
      uint64_t v14 = sub_100003A0C(&qword_100355538);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      v8(v10, v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      int v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)int v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
    }

    uint64_t v25 = a3[7];
    a1[a3[6]] = a2[a3[6]];
    a1[v25] = a2[v25];
    uint64_t v26 = a3[9];
    a1[a3[8]] = a2[a3[8]];
    a1[v26] = a2[v26];
    uint64_t v27 = a3[11];
    a1[a3[10]] = a2[a3[10]];
    a1[v27] = a2[v27];
  }

  return a1;
}

uint64_t sub_100145994(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  unsigned int v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v23 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v23) = *(_BYTE *)(a2 + v23);
  uint64_t v24 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v24) = *(_BYTE *)(a2 + v24);
  uint64_t v25 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v25) = *(_BYTE *)(a2 + v25);
  return a1;
}

uint64_t sub_100145B10(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v42 = *((void *)v12 - 1);
  uint64_t v43 = v10;
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v42 + 48);
  LODWORD(v10) = v13(v10, 1LL, v12);
  int v14 = v13((uint64_t)v11, 1LL, v12);
  if ((_DWORD)v10)
  {
    if (!v14)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v43, v11, v6);
      uint64_t v17 = v12[5];
      uint64_t v18 = v43 + v17;
      uint64_t v19 = &v11[v17];
      char v20 = v19[8];
      *(void *)uint64_t v18 = *(void *)v19;
      *(_BYTE *)(v18 + 8) = v20;
      uint64_t v21 = v12[6];
      uint64_t v22 = v43 + v21;
      uint64_t v23 = &v11[v21];
      char v24 = v23[8];
      *(void *)uint64_t v22 = *(void *)v23;
      *(_BYTE *)(v22 + 8) = v24;
      uint64_t v25 = v12[7];
      uint64_t v26 = v43 + v25;
      uint64_t v27 = &v11[v25];
      char v28 = v27[8];
      *(void *)uint64_t v26 = *(void *)v27;
      *(_BYTE *)(v26 + 8) = v28;
      (*(void (**)(uint64_t, void, uint64_t, int *))(v42 + 56))(v43, 0LL, 1LL, v12);
      goto LABEL_9;
    }

    size_t v15 = *(void *)(*(void *)(sub_100003A0C(&qword_100355538) - 8) + 64LL);
    uint64_t v16 = (void *)v43;
  }

  else
  {
    if (!v14)
    {
      v8(v43, (uint64_t)v11, v6);
      uint64_t v29 = v12[5];
      uint64_t v30 = v43 + v29;
      uint64_t v31 = &v11[v29];
      char v32 = v31[8];
      *(void *)uint64_t v30 = *(void *)v31;
      *(_BYTE *)(v30 + 8) = v32;
      uint64_t v33 = v12[6];
      uint64_t v34 = v43 + v33;
      uint64_t v35 = &v11[v33];
      char v36 = v35[8];
      *(void *)uint64_t v34 = *(void *)v35;
      *(_BYTE *)(v34 + 8) = v36;
      uint64_t v37 = v12[7];
      uint64_t v38 = v43 + v37;
      char v39 = &v11[v37];
      char v40 = v39[8];
      *(void *)uint64_t v38 = *(void *)v39;
      *(_BYTE *)(v38 + 8) = v40;
      goto LABEL_9;
    }

    sub_100004090(v43, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    size_t v15 = *(void *)(*(void *)(sub_100003A0C(&qword_100355538) - 8) + 64LL);
    uint64_t v16 = (void *)v43;
  }

  memcpy(v16, v11, v15);
LABEL_9:
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_100145D6C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    size_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)size_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v23 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v23) = *(_BYTE *)(a2 + v23);
  uint64_t v24 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v24) = *(_BYTE *)(a2 + v24);
  uint64_t v25 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v25) = *(_BYTE *)(a2 + v25);
  return a1;
}

uint64_t sub_100145EE8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v39 = *((void *)v12 - 1);
  uint64_t v40 = v10;
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v39 + 48);
  LODWORD(v10) = v13(v10, 1LL, v12);
  int v14 = v13((uint64_t)v11, 1LL, v12);
  if ((_DWORD)v10)
  {
    if (!v14)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v40, v11, v6);
      uint64_t v17 = v12[5];
      uint64_t v18 = v40 + v17;
      uint64_t v19 = &v11[v17];
      *(void *)uint64_t v18 = *(void *)v19;
      *(_BYTE *)(v18 + 8) = v19[8];
      uint64_t v20 = v12[6];
      uint64_t v21 = v40 + v20;
      uint64_t v22 = &v11[v20];
      *(void *)uint64_t v21 = *(void *)v22;
      *(_BYTE *)(v21 + 8) = v22[8];
      uint64_t v23 = v12[7];
      uint64_t v24 = v40 + v23;
      uint64_t v25 = &v11[v23];
      *(void *)uint64_t v24 = *(void *)v25;
      *(_BYTE *)(v24 + 8) = v25[8];
      (*(void (**)(uint64_t, void, uint64_t, int *))(v39 + 56))(v40, 0LL, 1LL, v12);
      goto LABEL_9;
    }

    size_t v15 = *(void *)(*(void *)(sub_100003A0C(&qword_100355538) - 8) + 64LL);
    uint64_t v16 = (void *)v40;
  }

  else
  {
    if (!v14)
    {
      v8(v40, (uint64_t)v11, v6);
      uint64_t v26 = v12[5];
      uint64_t v27 = v40 + v26;
      char v28 = &v11[v26];
      *(void *)uint64_t v27 = *(void *)v28;
      *(_BYTE *)(v27 + 8) = v28[8];
      uint64_t v29 = v12[6];
      uint64_t v30 = v40 + v29;
      uint64_t v31 = &v11[v29];
      *(void *)uint64_t v30 = *(void *)v31;
      *(_BYTE *)(v30 + 8) = v31[8];
      uint64_t v32 = v12[7];
      uint64_t v33 = v40 + v32;
      uint64_t v34 = &v11[v32];
      *(void *)uint64_t v33 = *(void *)v34;
      *(_BYTE *)(v33 + 8) = v34[8];
      goto LABEL_9;
    }

    sub_100004090(v40, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    size_t v15 = *(void *)(*(void *)(sub_100003A0C(&qword_100355538) - 8) + 64LL);
    uint64_t v16 = (void *)v40;
  }

  memcpy(v16, v11, v15);
LABEL_9:
  uint64_t v35 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v35) = *(_BYTE *)(a2 + v35);
  uint64_t v36 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v36) = *(_BYTE *)(a2 + v36);
  uint64_t v37 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v37) = *(_BYTE *)(a2 + v37);
  return a1;
}

uint64_t sub_100146138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100146144);
}

uint64_t sub_100146148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  uint64_t v11 = sub_100003A0C(&qword_100355538);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }

  unsigned int v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 36));
  if (v14 >= 2) {
    int v15 = ((v14 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v15 = -2;
  }
  if (v15 < 0) {
    int v15 = -1;
  }
  return (v15 + 1);
}

uint64_t sub_100146210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10014621C);
}

uint64_t sub_100146220(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
    return v11(v12, a2, a2, v10);
  }

  uint64_t result = sub_100003A0C(&qword_100355538);
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }

  *(_BYTE *)(a1 + *(int *)(a4 + 36)) = a2 + 2;
  return result;
}

void sub_1001462C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1001462E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = type metadata accessor for UnknownStorage(319LL);
  if (v11 <= 0x3F)
  {
    v14[0] = *(void *)(v10 - 8) + 64LL;
    sub_1000119EC( 319LL,  (unint64_t *)&unk_100356B40,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v13 <= 0x3F)
    {
      v14[1] = *(void *)(v12 - 8) + 64LL;
      v14[2] = a4;
      v14[3] = a4;
      void v14[4] = a5;
      void v14[5] = a6;
      void v14[6] = a6;
      v14[7] = a6;
      swift_initStructMetadata(a1, 256LL, 8LL, v14, a1 + 16);
    }
  }

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WristState.WristStateType()
{
  return &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateType;
}

uint64_t _s10ALProtobuf35CLP_LogEntry_PrivateData_WifiRfBandOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1001463F0 + 4 * byte_1002BB187[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100146424 + 4 * byte_1002BB182[v4]))();
}

uint64_t sub_100146424(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014642C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100146434LL);
  }
  return result;
}

uint64_t sub_100146440(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100146448LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10014644C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100146454(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType()
{
  return &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType;
}

uint64_t *sub_100146470(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    unint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
    uint64_t v13 = *((void *)v12 - 1);
    uint64_t v55 = *(unsigned int (**)(char *, uint64_t, int *))(v13 + 48);
    uint64_t v54 = v13;
    if (v55(v11, 1LL, v12))
    {
      uint64_t v14 = sub_100003A0C(&qword_100355538);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
    }

    uint64_t v25 = a3[6];
    uint64_t v26 = a3[7];
    uint64_t v27 = (char *)a1 + v25;
    char v28 = (char *)a2 + v25;
    *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    uint64_t v29 = (char *)a1 + v26;
    uint64_t v30 = (char *)a2 + v26;
    uint64_t v31 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0LL);
    uint64_t v32 = *(void *)(v31 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1LL, v31))
    {
      uint64_t v33 = sub_100003A0C(&qword_100355660);
      memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64LL));
    }

    else
    {
      v8((uint64_t *)v29, (uint64_t *)v30, v7);
      v29[*(int *)(v31 + 20)] = v30[*(int *)(v31 + 20)];
      v29[*(int *)(v31 + 24)] = v30[*(int *)(v31 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0LL, 1LL, v31);
    }

    uint64_t v34 = a3[8];
    uint64_t v35 = (char *)a1 + v34;
    uint64_t v36 = (char *)a2 + v34;
    uint64_t v37 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL);
    uint64_t v38 = *((void *)v37 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v38 + 48))(v36, 1LL, v37))
    {
      uint64_t v39 = sub_100003A0C(&qword_100355668);
      memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64LL));
    }

    else
    {
      v8((uint64_t *)v35, (uint64_t *)v36, v7);
      uint64_t v40 = v37[5];
      uint64_t v41 = &v35[v40];
      uint64_t v42 = &v36[v40];
      if (v55(&v36[v40], 1LL, v12))
      {
        uint64_t v43 = sub_100003A0C(&qword_100355538);
        memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64LL));
      }

      else
      {
        v8((uint64_t *)v41, (uint64_t *)v42, v7);
        uint64_t v44 = v12[5];
        int v45 = &v41[v44];
        int v46 = &v42[v44];
        *(void *)int v45 = *(void *)v46;
        v45[8] = v46[8];
        uint64_t v47 = v12[6];
        uint64_t v48 = &v41[v47];
        uint64_t v49 = &v42[v47];
        *(void *)uint64_t v48 = *(void *)v49;
        v48[8] = v49[8];
        uint64_t v50 = v12[7];
        uint64_t v51 = &v41[v50];
        uint64_t v52 = &v42[v50];
        *(void *)uint64_t v51 = *(void *)v52;
        v51[8] = v52[8];
        (*(void (**)(char *, void, uint64_t, int *))(v54 + 56))(v41, 0LL, 1LL, v12);
      }

      v35[v37[6]] = v36[v37[6]];
      v35[v37[7]] = v36[v37[7]];
      v35[v37[8]] = v36[v37[8]];
      v35[v37[9]] = v36[v37[9]];
      v35[v37[10]] = v36[v37[10]];
      v35[v37[11]] = v36[v37[11]];
      (*(void (**)(char *, void, uint64_t, int *))(v38 + 56))(v35, 0LL, 1LL, v37);
    }
  }

  return a1;
}

uint64_t sub_10014682C(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v14(a1, v4);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL);
  if (!v7(v5, 1LL, v6)) {
    v14(v5, v4);
  }
  uint64_t v8 = a1 + a2[7];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0LL);
  uint64_t v10 = a1 + a2[8];
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v10, 1LL, v11);
  if (!(_DWORD)result)
  {
    v14(v10, v4);
    uint64_t v13 = v10 + *(int *)(v11 + 20);
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v13, 1LL, v6);
    if (!(_DWORD)result) {
      return ((uint64_t (*)(uint64_t, uint64_t))v14)(v13, v4);
    }
  }

  return result;
}

uint64_t sub_100146984(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v53 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  uint64_t v52 = v12;
  if (v53(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  uint64_t v27 = (void *)(a1 + v24);
  char v28 = (const void *)(a2 + v24);
  uint64_t v29 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0LL);
  uint64_t v30 = *(void *)(v29 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48))(v28, 1LL, v29))
  {
    uint64_t v31 = sub_100003A0C(&qword_100355660);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v27, (uint64_t)v28, v6);
    *((_BYTE *)v27 + *(int *)(v29 + 20)) = *((_BYTE *)v28 + *(int *)(v29 + 20));
    *((_BYTE *)v27 + *(int *)(v29 + 24)) = *((_BYTE *)v28 + *(int *)(v29 + 24));
    (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0LL, 1LL, v29);
  }

  uint64_t v32 = a3[8];
  uint64_t v33 = (char *)(a1 + v32);
  uint64_t v34 = (char *)(a2 + v32);
  uint64_t v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL);
  uint64_t v36 = *((void *)v35 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v36 + 48))(v34, 1LL, v35))
  {
    uint64_t v37 = sub_100003A0C(&qword_100355668);
    memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v33, (uint64_t)v34, v6);
    uint64_t v38 = v35[5];
    uint64_t v39 = &v33[v38];
    uint64_t v40 = &v34[v38];
    if (v53(&v34[v38], 1LL, v11))
    {
      uint64_t v41 = sub_100003A0C(&qword_100355538);
      memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64LL));
    }

    else
    {
      v7((uint64_t)v39, (uint64_t)v40, v6);
      uint64_t v42 = v11[5];
      uint64_t v43 = &v39[v42];
      uint64_t v44 = &v40[v42];
      *(void *)uint64_t v43 = *(void *)v44;
      v43[8] = v44[8];
      uint64_t v45 = v11[6];
      int v46 = &v39[v45];
      uint64_t v47 = &v40[v45];
      *(void *)int v46 = *(void *)v47;
      v46[8] = v47[8];
      uint64_t v48 = v11[7];
      uint64_t v49 = &v39[v48];
      uint64_t v50 = &v40[v48];
      *(void *)uint64_t v49 = *(void *)v50;
      v49[8] = v50[8];
      (*(void (**)(char *, void, uint64_t, int *))(v52 + 56))(v39, 0LL, 1LL, v11);
    }

    v33[v35[6]] = v34[v35[6]];
    v33[v35[7]] = v34[v35[7]];
    v33[v35[8]] = v34[v35[8]];
    v33[v35[9]] = v34[v35[9]];
    v33[v35[10]] = v34[v35[10]];
    v33[v35[11]] = v34[v35[11]];
    (*(void (**)(char *, void, uint64_t, int *))(v36 + 56))(v33, 0LL, 1LL, v35);
  }

  return a1;
}

uint64_t sub_100146D14(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v118 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v118(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v117 = a1;
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, int *))(v12 + 48);
  int v14 = v13(v9, 1LL, v11);
  char v114 = v13;
  int v15 = v13(v10, 1LL, v11);
  uint64_t v113 = v12;
  uint64_t v115 = v7;
  uint64_t v116 = v6;
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v10, v6);
      uint64_t v16 = v11[5];
      uint64_t v17 = &v9[v16];
      uint64_t v18 = &v10[v16];
      char v19 = v18[8];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v19;
      uint64_t v20 = v11[6];
      uint64_t v21 = &v9[v20];
      uint64_t v22 = &v10[v20];
      char v23 = v22[8];
      *(void *)uint64_t v21 = *(void *)v22;
      v21[8] = v23;
      uint64_t v24 = v11[7];
      uint64_t v25 = &v9[v24];
      uint64_t v26 = &v10[v24];
      char v27 = v26[8];
      *(void *)uint64_t v25 = *(void *)v26;
      v25[8] = v27;
      (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v15)
  {
    sub_100004090((uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v28 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v28 - 8) + 64LL));
    goto LABEL_7;
  }

  v118((uint64_t)v9, (uint64_t)v10, v6);
  uint64_t v58 = v11[5];
  uint64_t v59 = &v9[v58];
  char v60 = &v10[v58];
  char v61 = v60[8];
  *(void *)uint64_t v59 = *(void *)v60;
  v59[8] = v61;
  uint64_t v62 = v11[6];
  uint64_t v63 = &v9[v62];
  uint64_t v64 = &v10[v62];
  char v65 = v64[8];
  *(void *)uint64_t v63 = *(void *)v64;
  v63[8] = v65;
  uint64_t v66 = v11[7];
  uint64_t v67 = &v9[v66];
  char v68 = &v10[v66];
  char v69 = v68[8];
  *(void *)uint64_t v67 = *(void *)v68;
  v67[8] = v69;
LABEL_7:
  uint64_t v29 = v117;
  uint64_t v30 = a3[6];
  uint64_t v31 = v117 + v30;
  uint64_t v32 = (int *)(a2 + v30);
  int v33 = *v32;
  *(_BYTE *)(v31 + 4) = *((_BYTE *)v32 + 4);
  *(_DWORD *)uint64_t v31 = v33;
  uint64_t v34 = a3[7];
  uint64_t v35 = (_BYTE *)(v117 + v34);
  uint64_t v36 = (_BYTE *)(a2 + v34);
  uint64_t v37 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0LL);
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v38 + 48);
  int v40 = v39(v35, 1LL, v37);
  int v41 = v39(v36, 1LL, v37);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v115 + 16))(v35, v36, v116);
      v35[*(int *)(v37 + 20)] = v36[*(int *)(v37 + 20)];
      v35[*(int *)(v37 + 24)] = v36[*(int *)(v37 + 24)];
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0LL, 1LL, v37);
LABEL_13:
      uint64_t v43 = v118;
      goto LABEL_14;
    }

uint64_t sub_1001473B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v53 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  uint64_t v52 = v12;
  if (v53(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    int v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)int v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    char v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  char v27 = (void *)(a1 + v24);
  uint64_t v28 = (const void *)(a2 + v24);
  uint64_t v29 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0LL);
  uint64_t v30 = *(void *)(v29 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48))(v28, 1LL, v29))
  {
    uint64_t v31 = sub_100003A0C(&qword_100355660);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v27, (uint64_t)v28, v6);
    *((_BYTE *)v27 + *(int *)(v29 + 20)) = *((_BYTE *)v28 + *(int *)(v29 + 20));
    *((_BYTE *)v27 + *(int *)(v29 + 24)) = *((_BYTE *)v28 + *(int *)(v29 + 24));
    (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0LL, 1LL, v29);
  }

  uint64_t v32 = a3[8];
  int v33 = (char *)(a1 + v32);
  uint64_t v34 = (char *)(a2 + v32);
  uint64_t v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0LL);
  uint64_t v36 = *((void *)v35 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v36 + 48))(v34, 1LL, v35))
  {
    uint64_t v37 = sub_100003A0C(&qword_100355668);
    memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64LL));
  }

  else
  {
    v7((uint64_t)v33, (uint64_t)v34, v6);
    uint64_t v38 = v35[5];
    uint64_t v39 = &v33[v38];
    int v40 = &v34[v38];
    if (v53(&v34[v38], 1LL, v11))
    {
      uint64_t v41 = sub_100003A0C(&qword_100355538);
      memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64LL));
    }

    else
    {
      v7((uint64_t)v39, (uint64_t)v40, v6);
      uint64_t v42 = v11[5];
      uint64_t v43 = &v39[v42];
      uint64_t v44 = &v40[v42];
      *(void *)uint64_t v43 = *(void *)v44;
      v43[8] = v44[8];
      uint64_t v45 = v11[6];
      int v46 = &v39[v45];
      uint64_t v47 = &v40[v45];
      *(void *)int v46 = *(void *)v47;
      v46[8] = v47[8];
      uint64_t v48 = v11[7];
      uint64_t v49 = &v39[v48];
      int v50 = &v40[v48];
      *(void *)uint64_t v49 = *(void *)v50;
      v49[8] = v50[8];
      (*(void (**)(char *, void, uint64_t, int *))(v52 + 56))(v39, 0LL, 1LL, v11);
    }

    v33[v35[6]] = v34[v35[6]];
    v33[v35[7]] = v34[v35[7]];
    v33[v35[8]] = v34[v35[8]];
    v33[v35[9]] = v34[v35[9]];
    v33[v35[10]] = v34[v35[10]];
    v33[v35[11]] = v34[v35[11]];
    (*(void (**)(char *, void, uint64_t, int *))(v36 + 56))(v33, 0LL, 1LL, v35);
  }

  return a1;
}

uint64_t sub_100147744(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v102 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v102(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v101 = a1;
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, int *))(v12 + 48);
  int v14 = v13(v9, 1LL, v11);
  char v98 = v13;
  int v15 = v13(v10, 1LL, v11);
  uint64_t v97 = v12;
  uint64_t v99 = v7;
  uint64_t v100 = v6;
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v10, v6);
      uint64_t v16 = v11[5];
      uint64_t v17 = &v9[v16];
      uint64_t v18 = &v10[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v11[6];
      uint64_t v20 = &v9[v19];
      uint64_t v21 = &v10[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v11[7];
      uint64_t v23 = &v9[v22];
      uint64_t v24 = &v10[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0LL, 1LL, v11);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v15)
  {
    sub_100004090((uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v25 = sub_100003A0C(&qword_100355538);
    memcpy(v9, v10, *(void *)(*(void *)(v25 - 8) + 64LL));
    goto LABEL_7;
  }

  v102((uint64_t)v9, (uint64_t)v10, v6);
  uint64_t v54 = v11[5];
  uint64_t v55 = &v9[v54];
  uint64_t v56 = &v10[v54];
  *(void *)uint64_t v55 = *(void *)v56;
  v55[8] = v56[8];
  uint64_t v57 = v11[6];
  uint64_t v58 = &v9[v57];
  uint64_t v59 = &v10[v57];
  *(void *)uint64_t v58 = *(void *)v59;
  v58[8] = v59[8];
  uint64_t v60 = v11[7];
  char v61 = &v9[v60];
  uint64_t v62 = &v10[v60];
  *(void *)char v61 = *(void *)v62;
  v61[8] = v62[8];
LABEL_7:
  uint64_t v26 = v101;
  uint64_t v27 = a3[6];
  uint64_t v28 = a3[7];
  uint64_t v29 = v101 + v27;
  uint64_t v30 = a2 + v27;
  *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
  *(_BYTE *)(v29 + 4) = *(_BYTE *)(v30 + 4);
  uint64_t v31 = (_BYTE *)(v101 + v28);
  uint64_t v32 = (_BYTE *)(a2 + v28);
  uint64_t v33 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0LL);
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v34 + 48);
  int v36 = v35(v31, 1LL, v33);
  int v37 = v35(v32, 1LL, v33);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v99 + 32))(v31, v32, v100);
      v31[*(int *)(v33 + 20)] = v32[*(int *)(v33 + 20)];
      v31[*(int *)(v33 + 24)] = v32[*(int *)(v33 + 24)];
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0LL, 1LL, v33);
LABEL_13:
      uint64_t v39 = v102;
      goto LABEL_14;
    }

uint64_t sub_100147DE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100147DEC);
}

uint64_t sub_100147DEC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }

  else
  {
    uint64_t v11 = sub_100003A0C(&qword_100355538);
    uint64_t v12 = *(void *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      uint64_t v8 = v11;
      uint64_t v13 = a3[5];
    }

    else
    {
      uint64_t v14 = sub_100003A0C(&qword_100355660);
      uint64_t v12 = *(void *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        uint64_t v8 = v14;
        uint64_t v13 = a3[7];
      }

      else
      {
        uint64_t v8 = sub_100003A0C(&qword_100355668);
        uint64_t v12 = *(void *)(v8 - 8);
        uint64_t v13 = a3[8];
      }
    }

    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_100147EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100147EC0);
}

uint64_t sub_100147EC0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v13 = sub_100003A0C(&qword_100355538);
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v15 = a4[5];
    }

    else
    {
      uint64_t v16 = sub_100003A0C(&qword_100355660);
      uint64_t v14 = *(void *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        uint64_t v10 = v16;
        uint64_t v15 = a4[7];
      }

      else
      {
        uint64_t v10 = sub_100003A0C(&qword_100355668);
        uint64_t v14 = *(void *)(v10 - 8);
        uint64_t v15 = a4[8];
      }
    }

    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_100147F90(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v10[0] = *(void *)(v2 - 8) + 64LL;
    sub_1000119EC( 319LL,  (unint64_t *)&unk_100356B40,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v5 <= 0x3F)
    {
      v10[1] = *(void *)(v4 - 8) + 64LL;
      v10[2] = &unk_1002C7CB8;
      sub_1000119EC(319LL, &qword_100359838, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
      if (v7 <= 0x3F)
      {
        v10[3] = *(void *)(v6 - 8) + 64LL;
        sub_1000119EC( 319LL,  (unint64_t *)&unk_100359840,  type metadata accessor for CLP_LogEntry_PrivateData_WristState);
        if (v9 <= 0x3F)
        {
          v10[4] = *(void *)(v8 - 8) + 64LL;
          swift_initStructMetadata(a1, 256LL, 5LL, v10, a1 + 16);
        }
      }
    }
  }

void *sub_100148084(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (void *)(v17 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v17);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    uint64_t v9 = a3[7];
    uint64_t v10 = a3[8];
    uint64_t v11 = (void *)((char *)a1 + v9);
    uint64_t v12 = (void *)((char *)a2 + v9);
    uint64_t v13 = v12[1];
    *uint64_t v11 = *v12;
    v11[1] = v13;
    uint64_t v14 = (void *)((char *)a1 + v10);
    uint64_t v15 = (void *)((char *)a2 + v10);
    uint64_t v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v16);
  }

  return a1;
}

uint64_t sub_100148144(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 28) + 8));
  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 32) + 8));
}

uint64_t sub_10014819C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a3[8];
  uint64_t v10 = (void *)(a1 + v8);
  uint64_t v11 = (void *)(a2 + v8);
  uint64_t v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  uint64_t v13 = (void *)(a1 + v9);
  uint64_t v14 = (void *)(a2 + v9);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v15);
  return a1;
}

uint64_t sub_100148230(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  uint64_t v7 = a3[7];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  void *v8 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a3[8];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  *uint64_t v13 = *v14;
  uint64_t v15 = v14[1];
  uint64_t v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

uint64_t sub_1001482F0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  return a1;
}

uint64_t sub_100148368(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  uint64_t v13 = v9[1];
  *uint64_t v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = a3[8];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (uint64_t *)(a2 + v14);
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  uint64_t v19 = v15[1];
  *uint64_t v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease(v19);
  return a1;
}

uint64_t sub_100148404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100148410);
}

uint64_t sub_100148410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  int v10 = v9 - 1;
  if (v10 < 0) {
    int v10 = -1;
  }
  return (v10 + 1);
}

uint64_t sub_10014849C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001484A8);
}

uint64_t sub_1001484A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 28) + 8) = a2;
  return result;
}

uint64_t sub_100148524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100148544( a1,  a2,  a3,  (uint64_t)&unk_1002C8230,  (uint64_t)&unk_1002C8218,  (uint64_t)&unk_1002C80F0,  (uint64_t)&unk_1002C80F0);
}

uint64_t sub_100148544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v13 <= 0x3F)
  {
    v14[0] = *(void *)(result - 8) + 64LL;
    v14[1] = a4;
    v14[2] = a5;
    v14[3] = a6;
    void v14[4] = a7;
    swift_initStructMetadata(a1, 256LL, 5LL, v14, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t _s10ALProtobuf47CLP_LogEntry_PrivateData_BatchedLocationFixTypeOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_100148620 + 4 * byte_1002BB191[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100148654 + 4 * byte_1002BB18C[v4]))();
}

uint64_t sub_100148654(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014865C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100148664LL);
  }
  return result;
}

uint64_t sub_100148670(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100148678LL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_10014867C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100148684(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType()
{
  return &type metadata for CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType()
{
  return &type metadata for CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType;
}

uint64_t sub_1001486B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001486BC);
}

uint64_t sub_1001486C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001486CC);
}

void *sub_1001486D0(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (void *)(v22 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v22);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    int v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)int v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    unint64_t v13 = (char *)a2 + v9;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
    uint64_t v15 = a3[9];
    uint64_t v16 = a3[10];
    uint64_t v17 = (char *)a1 + v15;
    uint64_t v18 = (char *)a2 + v15;
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = v18[8];
    *((_BYTE *)a1 + v16) = *((_BYTE *)a2 + v16);
    uint64_t v19 = a3[12];
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    uint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
    v20[4] = v21[4];
  }

  return a1;
}

uint64_t sub_1001487DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  uint64_t v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  uint64_t v14 = a3[9];
  uint64_t v15 = a3[10];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(void *)uint64_t v16 = *(void *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  uint64_t v18 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = *(_BYTE *)(v20 + 4);
  return a1;
}

uint64_t sub_1001488BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
  *(void *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(_BYTE *)(v12 + 8) = v10;
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  uint64_t v14 = a3[9];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = (uint64_t *)(a2 + v14);
  uint64_t v17 = *v16;
  *(_BYTE *)(v15 + 8) = *((_BYTE *)v16 + 8);
  *(void *)uint64_t v15 = v17;
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  uint64_t v18 = a3[12];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  LODWORD(v17) = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = *(_BYTE *)(v20 + 4);
  *(_DWORD *)uint64_t v19 = v17;
  return a1;
}

uint64_t sub_1001489AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  uint64_t v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  uint64_t v14 = a3[9];
  uint64_t v15 = a3[10];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(void *)uint64_t v16 = *(void *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  uint64_t v18 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = *(_BYTE *)(v20 + 4);
  return a1;
}

uint64_t sub_100148A8C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  uint64_t v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  uint64_t v14 = a3[9];
  uint64_t v15 = a3[10];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(void *)uint64_t v16 = *(void *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  uint64_t v18 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = *(_BYTE *)(v20 + 4);
  return a1;
}

uint64_t sub_100148B6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100148B78);
}

uint64_t sub_100148B7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unsigned int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 44));
  if (v9 >= 2) {
    int v10 = ((v9 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v10 = -2;
  }
  if (v10 < 0) {
    int v10 = -1;
  }
  return (v10 + 1);
}

uint64_t sub_100148C14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100148C20);
}

uint64_t sub_100148C24(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 44)) = a2 + 2;
  return result;
}

uint64_t sub_100148C9C(uint64_t a1)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "\t";
    v4[2] = "\t";
    void v4[3] = &unk_1002C8218;
    void v4[4] = &unk_1002C7FF8;
    v4[5] = "\t";
    void v4[6] = &unk_1002C7FF8;
    void v4[7] = &unk_1002C7E68;
    v4[8] = &unk_1002C7CB8;
    swift_initStructMetadata(a1, 256LL, 9LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_100148D3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100148D48);
}

uint64_t sub_100148D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100148D58);
}

uint64_t sub_100148D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v7 <= 0x3F)
  {
    v8[0] = *(void *)(result - 8) + 64LL;
    v8[1] = a4;
    swift_initStructMetadata(a1, 256LL, 2LL, v8, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t _s10ALProtobuf57CLP_LogEntry_PrivateData_ClientLocationReferenceFrameTypeOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100148E14 + 4 * byte_1002BB19B[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100148E48 + 4 * byte_1002BB196[v4]))();
}

uint64_t sub_100148E48(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100148E50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100148E58LL);
  }
  return result;
}

uint64_t sub_100148E64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100148E6CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100148E70(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100148E78(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame()
{
  return &type metadata for CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame;
}

uint64_t sub_100148E94()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0LL);
}

void sub_100148E9C(uint64_t a1)
{
  uint64_t v4 = &unk_1002C7FF8;
  sub_1000119EC( 319LL,  (unint64_t *)&unk_100359AD8,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  if (v3 <= 0x3F)
  {
    uint64_t v5 = *(void *)(v2 - 8) + 64LL;
    uint64_t v6 = "\t";
    unint64_t v7 = "\t";
    uint64_t v8 = "\t";
    uint64_t v9 = "\t";
    int v10 = "\t";
    uint64_t v11 = "\t";
    uint64_t v12 = "\t";
    uint64_t v13 = "\t";
    uint64_t v14 = &unk_1002C7CB8;
    uint64_t v15 = "\t";
    uint64_t v16 = &unk_1002C8040;
    uint64_t v17 = v5;
    uint64_t v18 = "\t";
    uint64_t v19 = &unk_1002C7CB8;
    uint64_t v20 = &unk_1002C8230;
    uint64_t v21 = &unk_1002C8218;
    uint64_t v22 = &unk_1002C8218;
    uint64_t v23 = &unk_1002C84C8;
    uint64_t v24 = "\t";
    uint64_t v25 = &unk_1002C7E68;
    swift_updateClassMetadata2(a1, 256LL, 22LL, &v4, a1 + 80);
  }

uint64_t sub_100148F80()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0LL);
}

void sub_100148F88(uint64_t a1)
{
  v11[2] = "\t";
  v11[3] = "\t";
  v11[4] = "\t";
  v11[5] = &unk_1002C7CB8;
  v11[6] = &unk_1002C7CB8;
  v11[7] = &unk_1002C7CB8;
  v11[8] = &unk_1002C7E68;
  v11[9] = &unk_1002C7FF8;
  sub_1000119EC( 319LL,  (unint64_t *)&unk_100359AD8,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(v2 - 8) + 64LL;
    v11[10] = v4;
    v11[11] = "\t";
    v11[12] = &unk_1002C7CB8;
    v11[13] = &unk_1002C7CB8;
    v11[14] = &unk_1002C7E68;
    sub_1000119EC(319LL, &qword_100359E40, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
    if (v6 <= 0x3F)
    {
      v11[15] = *(void *)(v5 - 8) + 64LL;
      v11[16] = &unk_1002C7FF8;
      v11[17] = &unk_1002C7CB8;
      v11[18] = v4;
      v11[19] = "\t";
      v11[20] = "\t";
      v11[21] = &unk_1002C8218;
      v11[22] = &unk_1002C7E68;
      sub_1000119EC(319LL, &qword_100359E48, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
      if (v8 <= 0x3F)
      {
        v11[23] = *(void *)(v7 - 8) + 64LL;
        _BYTE v11[24] = "\t";
        v11[25] = "\t";
        v11[26] = "\t";
        v11[27] = "\t";
        v11[28] = "\t";
        v11[29] = "\t";
        v11[30] = &unk_1002C7E68;
        v11[31] = "\t";
        v11[32] = "\t";
        v11[33] = &unk_1002C7E68;
        v11[34] = v4;
        v11[35] = "\t";
        v11[36] = &unk_1002C8218;
        v11[37] = "\t";
        v11[38] = "\t";
        v11[39] = "\t";
        v11[40] = "\t";
        v11[41] = "\t";
        v11[42] = &unk_1002C7E68;
        v11[43] = "\t";
        v11[44] = "\t";
        v11[45] = (char *)&value witness table for Builtin.BridgeObject + 64;
        v11[46] = &unk_1002C8218;
        sub_1000119EC( 319LL,  (unint64_t *)&unk_100359E50,  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
        if (v10 <= 0x3F)
        {
          v11[47] = *(void *)(v9 - 8) + 64LL;
          v11[48] = &unk_1002C8218;
          v11[49] = "\t";
          v11[50] = "\t";
          v11[51] = &unk_1002C7FF8;
          v11[52] = &unk_1002C7E68;
          v11[53] = &unk_1002C8218;
          v11[54] = &unk_1002C8230;
          v11[55] = &unk_1002C7E68;
          swift_updateClassMetadata2(a1, 256LL, 56LL, v11, a1 + 80);
        }
      }
    }
  }

uint64_t sub_100149138()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0LL);
}

void sub_100149140(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v18[0] = *(void *)(v2 - 8) + 64LL;
    v18[1] = &unk_1002C7CB8;
    sub_1000119EC(319LL, &qword_10035A5F8, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
    if (v5 <= 0x3F)
    {
      v18[2] = *(void *)(v4 - 8) + 64LL;
      sub_1000119EC(319LL, &qword_10035A600, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
      if (v7 <= 0x3F)
      {
        v18[3] = *(void *)(v6 - 8) + 64LL;
        sub_1000119EC(319LL, &qword_10035A608, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
        if (v9 <= 0x3F)
        {
          v18[4] = *(void *)(v8 - 8) + 64LL;
          v18[5] = &unk_1002C7E68;
          v18[6] = "\t";
          v18[7] = &unk_1002C8218;
          sub_1000119EC(319LL, &qword_10035A610, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
          if (v11 <= 0x3F)
          {
            v18[8] = *(void *)(v10 - 8) + 64LL;
            sub_1000119EC(319LL, &qword_10035A618, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
            if (v13 <= 0x3F)
            {
              v18[9] = *(void *)(v12 - 8) + 64LL;
              sub_1000119EC( 319LL,  &qword_10035A620,  type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
              if (v15 <= 0x3F)
              {
                v18[10] = *(void *)(v14 - 8) + 64LL;
                v18[11] = &unk_1002C8218;
                sub_1000119EC( 319LL,  (unint64_t *)&unk_10035A628,  type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
                if (v17 <= 0x3F)
                {
                  v18[12] = *(void *)(v16 - 8) + 64LL;
                  swift_updateClassMetadata2(a1, 256LL, 13LL, v18, a1 + 80);
                }
              }
            }
          }
        }
      }
    }
  }

uint64_t sub_100149310()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0LL);
}

void sub_100149318(uint64_t a1)
{
  v4[0] = &unk_1002C8358;
  v4[1] = &unk_1002C7FF8;
  v4[2] = &unk_1002C8218;
  void v4[3] = &unk_1002C7FF8;
  void v4[4] = &unk_1002C7E68;
  v4[5] = &unk_1002C7CB8;
  void v4[6] = "\t";
  void v4[7] = &unk_1002C7E68;
  v4[8] = &unk_1002C7FF8;
  void v4[9] = "\t";
  v4[10] = "\t";
  void v4[11] = &unk_1002C8358;
  void v4[12] = &unk_1002C7FF8;
  sub_1000119EC( 319LL,  (unint64_t *)&unk_100356B40,  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  if (v3 <= 0x3F)
  {
    uint64_t v5 = *(void *)(v2 - 8) + 64LL;
    uint64_t v6 = v5;
    swift_updateClassMetadata2(a1, 256LL, 15LL, v4, a1 + 80);
  }

uint64_t sub_1001493E0()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0LL);
}

void sub_1001493E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1001493FC()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0LL);
}

void sub_100149404(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_100149418( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t))
{
  if (v9 <= 0x3F)
  {
    v12[0] = *(void *)(v8 - 8) + 64LL;
    v12[1] = &unk_1002C7CB8;
    sub_1000119EC(319LL, a4, a5);
    if (v11 <= 0x3F)
    {
      void v12[2] = *(void *)(v10 - 8) + 64LL;
      swift_updateClassMetadata2(a1, 256LL, 3LL, v12, a1 + 80);
    }
  }

uint64_t sub_1001494D0()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0LL);
}

void sub_1001494D8(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = "\t";
    v4[2] = "\t";
    void v4[3] = "\t";
    void v4[4] = "\t";
    v4[5] = "\t";
    void v4[6] = &unk_1002C8218;
    void v4[7] = "\t";
    v4[8] = "\t";
    void v4[9] = "\t";
    v4[10] = &unk_1002C7E68;
    void v4[11] = "\t";
    void v4[12] = "\t";
    void v4[13] = "\t";
    v4[14] = "\t";
    swift_updateClassMetadata2(a1, 256LL, 15LL, v4, a1 + 80);
  }

uint64_t sub_100149588()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0LL);
}

void sub_100149590(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v8[0] = *(void *)(v2 - 8) + 64LL;
    v8[1] = &unk_1002C7CB8;
    void v8[2] = &unk_1002C9290;
    sub_1000119EC(319LL, &qword_10035AF80, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
    if (v5 <= 0x3F)
    {
      v8[3] = *(void *)(v4 - 8) + 64LL;
      sub_1000119EC( 319LL,  (unint64_t *)&unk_10035AF88,  type metadata accessor for CLP_LogEntry_PrivateData_Battery);
      if (v7 <= 0x3F)
      {
        void v8[4] = *(void *)(v6 - 8) + 64LL;
        void v8[5] = &unk_1002C7E68;
        void v8[6] = &unk_1002C7E68;
        v8[7] = &unk_1002C7E68;
        void v8[8] = &unk_1002C7E68;
        v8[9] = &unk_1002C7E68;
        v8[10] = &unk_1002C7CB8;
        v8[11] = &unk_1002C7CB8;
        v8[12] = &unk_1002C7E68;
        swift_updateClassMetadata2(a1, 256LL, 13LL, v8, a1 + 80);
      }
    }
  }

uint64_t sub_10014968C()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0LL);
}

void sub_100149694(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v8[0] = *(void *)(v2 - 8) + 64LL;
    v8[1] = v8[0];
    void v8[2] = v8[0];
    v8[3] = &unk_1002C7CB8;
    void v8[4] = "\t";
    void v8[5] = "\t";
    void v8[6] = &unk_1002C7CB8;
    v8[7] = &unk_1002C7CB8;
    void v8[8] = "\t";
    v8[9] = "\t";
    v8[10] = "\t";
    v8[11] = &unk_1002C7CB8;
    v8[12] = &unk_1002C80F0;
    void v8[13] = &unk_1002C7E68;
    v8[14] = &unk_1002C7E68;
    sub_1000119EC(319LL, &qword_10035B1D0, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
    if (v5 <= 0x3F)
    {
      v8[15] = *(void *)(v4 - 8) + 64LL;
      v8[16] = &unk_1002C7CB8;
      v8[17] = &unk_1002C7CB8;
      v8[18] = &unk_1002C7CB8;
      v8[19] = &unk_1002C7CB8;
      v8[20] = &unk_1002C7CB8;
      v8[21] = &unk_1002C7CB8;
      v8[22] = &unk_1002C92A8;
      sub_1000119EC( 319LL,  (unint64_t *)&unk_10035B1D8,  type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
      if (v7 <= 0x3F)
      {
        v8[23] = *(void *)(v6 - 8) + 64LL;
        swift_updateClassMetadata2(a1, 256LL, 24LL, v8, a1 + 80);
      }
    }
  }

uint64_t sub_1001497B4()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0LL);
}

void sub_1001497BC(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    v6[1] = v6[0];
    void v6[2] = &unk_1002C7CB8;
    void v6[3] = &unk_1002C7CB8;
    void v6[4] = &unk_1002C7CB8;
    void v6[5] = &unk_1002C84C8;
    v6[6] = &unk_1002C7E68;
    v6[7] = &unk_1002C7CB8;
    v6[8] = &unk_1002C7CB8;
    void v6[9] = &unk_1002C7CB8;
    sub_1000119EC( 319LL,  (unint64_t *)&unk_10035B588,  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
    if (v5 <= 0x3F)
    {
      v6[10] = *(void *)(v4 - 8) + 64LL;
      swift_updateClassMetadata2(a1, 256LL, 11LL, v6, a1 + 80);
    }
  }

uint64_t sub_100149888()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0LL);
}

void sub_100149890(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    uint64_t v6 = *(void *)(v2 - 8) + 64LL;
    sub_1000119EC(319LL, &qword_10035B580, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    if (v5 <= 0x3F)
    {
      uint64_t v7 = *(void *)(v4 - 8) + 64LL;
      uint64_t v8 = v7;
      uint64_t v9 = v7;
      uint64_t v10 = &unk_1002C84C8;
      unint64_t v11 = &unk_1002C7E68;
      uint64_t v12 = &unk_1002C7E68;
      unint64_t v13 = &unk_1002C7E68;
      uint64_t v14 = &unk_1002C7CB8;
      swift_updateClassMetadata2(a1, 256LL, 9LL, &v6, a1 + 80);
    }
  }

uint64_t sub_100149958()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0LL);
}

void sub_100149960(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v8[0] = *(void *)(v2 - 8) + 64LL;
    v8[1] = &unk_1002C7CB8;
    void v8[2] = &unk_1002C92C0;
    v8[3] = &unk_1002C92C0;
    void v8[4] = &unk_1002C7E68;
    sub_1000119EC(319LL, &qword_10035B950, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
    if (v5 <= 0x3F)
    {
      void v8[5] = *(void *)(v4 - 8) + 64LL;
      sub_1000119EC( 319LL,  (unint64_t *)&unk_10035B958,  type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
      if (v7 <= 0x3F)
      {
        void v8[6] = *(void *)(v6 - 8) + 64LL;
        v8[7] = &unk_1002C7E68;
        void v8[8] = &unk_1002C7E68;
        v8[9] = &unk_1002C7E68;
        v8[10] = &unk_1002C7E68;
        swift_updateClassMetadata2(a1, 256LL, 11LL, v8, a1 + 80);
      }
    }
  }

uint64_t sub_100149A58()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0LL);
}

void sub_100149A60(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v8[0] = *(void *)(v2 - 8) + 64LL;
    v8[1] = v8[0];
    void v8[2] = v8[0];
    v8[3] = v8[0];
    sub_1000119EC( 319LL,  (unint64_t *)&unk_10035BB60,  type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
    if (v5 <= 0x3F)
    {
      void v8[4] = *(void *)(v4 - 8) + 64LL;
      sub_1000119EC( 319LL,  (unint64_t *)&unk_100359AD8,  type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
      if (v7 <= 0x3F)
      {
        void v8[5] = *(void *)(v6 - 8) + 64LL;
        void v8[6] = "\t";
        swift_updateClassMetadata2(a1, 256LL, 7LL, v8, a1 + 80);
      }
    }
  }

unint64_t sub_100149B3C()
{
  unint64_t result = qword_10035C238;
  if (!qword_10035C238)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BF348,  &type metadata for CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame);
    atomic_store(result, (unint64_t *)&qword_10035C238);
  }

  return result;
}

unint64_t sub_100149B80()
{
  unint64_t result = qword_10035C240;
  if (!qword_10035C240)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BF1F0,  &type metadata for CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType);
    atomic_store(result, (unint64_t *)&qword_10035C240);
  }

  return result;
}

unint64_t sub_100149BC4()
{
  unint64_t result = qword_10035C248;
  if (!qword_10035C248)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BF108,  &type metadata for CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType);
    atomic_store(result, (unint64_t *)&qword_10035C248);
  }

  return result;
}

unint64_t sub_100149C08()
{
  unint64_t result = qword_10035C250;
  if (!qword_10035C250)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BEFB0,  &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType);
    atomic_store(result, (unint64_t *)&qword_10035C250);
  }

  return result;
}

unint64_t sub_100149C4C()
{
  unint64_t result = qword_10035C258;
  if (!qword_10035C258)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BEEC8,  &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateType);
    atomic_store(result, (unint64_t *)&qword_10035C258);
  }

  return result;
}

unint64_t sub_100149C90()
{
  unint64_t result = qword_10035C260;
  if (!qword_10035C260)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BEDA8,  &type metadata for CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType);
    atomic_store(result, (unint64_t *)&qword_10035C260);
  }

  return result;
}

unint64_t sub_100149CD4()
{
  unint64_t result = qword_10035C268;
  if (!qword_10035C268)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BEC88,  &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType);
    atomic_store(result, (unint64_t *)&qword_10035C268);
  }

  return result;
}

unint64_t sub_100149D18()
{
  unint64_t result = qword_10035C270;
  if (!qword_10035C270)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BEB68,  &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType);
    atomic_store(result, (unint64_t *)&qword_10035C270);
  }

  return result;
}

unint64_t sub_100149D5C()
{
  unint64_t result = qword_10035C278;
  if (!qword_10035C278)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BEA10,  &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource);
    atomic_store(result, (unint64_t *)&qword_10035C278);
  }

  return result;
}

unint64_t sub_100149DA0()
{
  unint64_t result = qword_10035C280;
  if (!qword_10035C280)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE928,  &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability);
    atomic_store(result, (unint64_t *)&qword_10035C280);
  }

  return result;
}

unint64_t sub_100149DE4()
{
  unint64_t result = qword_10035C288;
  if (!qword_10035C288)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE808,  &type metadata for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType);
    atomic_store(result, (unint64_t *)&qword_10035C288);
  }

  return result;
}

unint64_t sub_100149E28()
{
  unint64_t result = qword_10035C290;
  if (!qword_10035C290)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE6E8,  &type metadata for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType);
    atomic_store(result, (unint64_t *)&qword_10035C290);
  }

  return result;
}

unint64_t sub_100149E6C()
{
  unint64_t result = qword_10035C298;
  if (!qword_10035C298)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE5C8,  &type metadata for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType);
    atomic_store(result, (unint64_t *)&qword_10035C298);
  }

  return result;
}

unint64_t sub_100149EB0()
{
  unint64_t result = qword_10035C2A0;
  if (!qword_10035C2A0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE470,  &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType);
    atomic_store(result, (unint64_t *)&qword_10035C2A0);
  }

  return result;
}

unint64_t sub_100149EF4()
{
  unint64_t result = qword_10035C2A8;
  if (!qword_10035C2A8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE388,  &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType);
    atomic_store(result, (unint64_t *)&qword_10035C2A8);
  }

  return result;
}

unint64_t sub_100149F38()
{
  unint64_t result = qword_10035C2B0;
  if (!qword_10035C2B0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE268,  &type metadata for CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType);
    atomic_store(result, (unint64_t *)&qword_10035C2B0);
  }

  return result;
}

unint64_t sub_100149F7C()
{
  unint64_t result = qword_10035C2B8;
  if (!qword_10035C2B8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE110,  &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType);
    atomic_store(result, (unint64_t *)&qword_10035C2B8);
  }

  return result;
}

unint64_t sub_100149FC0()
{
  unint64_t result = qword_10035C2C0;
  if (!qword_10035C2C0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BE028,  &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType);
    atomic_store(result, (unint64_t *)&qword_10035C2C0);
  }

  return result;
}

unint64_t sub_10014A004()
{
  unint64_t result = qword_10035C2C8;
  if (!qword_10035C2C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BDF08, &type metadata for CLP_LogEntry_PrivateData_WorkoutEvent.EventType);
    atomic_store(result, (unint64_t *)&qword_10035C2C8);
  }

  return result;
}

unint64_t sub_10014A048()
{
  unint64_t result = qword_10035C2D0;
  if (!qword_10035C2D0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BDD78,  &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode);
    atomic_store(result, (unint64_t *)&qword_10035C2D0);
  }

  return result;
}

unint64_t sub_10014A08C()
{
  unint64_t result = qword_10035C2D8;
  if (!qword_10035C2D8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BDC90,  &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType);
    atomic_store(result, (unint64_t *)&qword_10035C2D8);
  }

  return result;
}

unint64_t sub_10014A0D0()
{
  unint64_t result = qword_10035C2E0;
  if (!qword_10035C2E0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BDBA8,  &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType);
    atomic_store(result, (unint64_t *)&qword_10035C2E0);
  }

  return result;
}

unint64_t sub_10014A114()
{
  unint64_t result = qword_10035C2E8;
  if (!qword_10035C2E8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BDA18,  &type metadata for CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType);
    atomic_store(result, (unint64_t *)&qword_10035C2E8);
  }

  return result;
}

unint64_t sub_10014A158()
{
  unint64_t result = qword_10035C2F0;
  if (!qword_10035C2F0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD930,  &type metadata for CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType);
    atomic_store(result, (unint64_t *)&qword_10035C2F0);
  }

  return result;
}

unint64_t sub_10014A19C()
{
  unint64_t result = qword_10035C2F8;
  if (!qword_10035C2F8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD848,  &type metadata for CLP_LogEntry_PrivateData_MotionActivity.MountedStateType);
    atomic_store(result, (unint64_t *)&qword_10035C2F8);
  }

  return result;
}

unint64_t sub_10014A1E0()
{
  unint64_t result = qword_10035C300;
  if (!qword_10035C300)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD6F0,  &type metadata for CLP_LogEntry_PrivateData_Location.MotionDetectedType);
    atomic_store(result, (unint64_t *)&qword_10035C300);
  }

  return result;
}

unint64_t sub_10014A224()
{
  unint64_t result = qword_10035C308;
  if (!qword_10035C308)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD608,  &type metadata for CLP_LogEntry_PrivateData_Location.SignalQualityType);
    atomic_store(result, (unint64_t *)&qword_10035C308);
  }

  return result;
}

unint64_t sub_10014A268()
{
  unint64_t result = qword_10035C310;
  if (!qword_10035C310)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD398,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy);
    atomic_store(result, (unint64_t *)&qword_10035C310);
  }

  return result;
}

unint64_t sub_10014A2AC()
{
  unint64_t result = qword_10035C318;
  if (!qword_10035C318)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD2B0,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType);
    atomic_store(result, (unint64_t *)&qword_10035C318);
  }

  return result;
}

unint64_t sub_10014A2F0()
{
  unint64_t result = qword_10035C320;
  if (!qword_10035C320)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD1C8,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType);
    atomic_store(result, (unint64_t *)&qword_10035C320);
  }

  return result;
}

unint64_t sub_10014A334()
{
  unint64_t result = qword_10035C328;
  if (!qword_10035C328)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BD0E0,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent);
    atomic_store(result, (unint64_t *)&qword_10035C328);
  }

  return result;
}

unint64_t sub_10014A378()
{
  unint64_t result = qword_10035C330;
  if (!qword_10035C330)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BCFF8,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType);
    atomic_store(result, (unint64_t *)&qword_10035C330);
  }

  return result;
}

unint64_t sub_10014A3BC()
{
  unint64_t result = qword_10035C338;
  if (!qword_10035C338)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BCF10,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType);
    atomic_store(result, (unint64_t *)&qword_10035C338);
  }

  return result;
}

unint64_t sub_10014A400()
{
  unint64_t result = qword_10035C340;
  if (!qword_10035C340)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BCE28,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType);
    atomic_store(result, (unint64_t *)&qword_10035C340);
  }

  return result;
}

unint64_t sub_10014A444()
{
  unint64_t result = qword_10035C348;
  if (!qword_10035C348)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BCCD0,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType);
    atomic_store(result, (unint64_t *)&qword_10035C348);
  }

  return result;
}

unint64_t sub_10014A488()
{
  unint64_t result = qword_10035C350;
  if (!qword_10035C350)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BCBE8,  &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType);
    atomic_store(result, (unint64_t *)&qword_10035C350);
  }

  return result;
}

unint64_t sub_10014A4CC()
{
  unint64_t result = qword_10035C358;
  if (!qword_10035C358)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BCAC8, &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorConfidence);
    atomic_store(result, (unint64_t *)&qword_10035C358);
  }

  return result;
}

unint64_t sub_10014A510()
{
  unint64_t result = qword_10035C360;
  if (!qword_10035C360)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BC9A8, &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorType);
    atomic_store(result, (unint64_t *)&qword_10035C360);
  }

  return result;
}

unint64_t sub_10014A554()
{
  unint64_t result = qword_10035C368;
  if (!qword_10035C368)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BC888, &type metadata for CLP_LogEntry_PrivateData_DataAvailability);
    atomic_store(result, (unint64_t *)&qword_10035C368);
  }

  return result;
}

unint64_t sub_10014A598()
{
  unint64_t result = qword_10035C370;
  if (!qword_10035C370)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BC768, &type metadata for CLP_LogEntry_PrivateData_LocationServicesEnabled);
    atomic_store(result, (unint64_t *)&qword_10035C370);
  }

  return result;
}

unint64_t sub_10014A5DC()
{
  unint64_t result = qword_10035C378;
  if (!qword_10035C378)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BC648, &type metadata for CLP_LogEntry_PrivateData_WifiNotificationType);
    atomic_store(result, (unint64_t *)&qword_10035C378);
  }

  return result;
}

unint64_t sub_10014A620()
{
  unint64_t result = qword_10035C380;
  if (!qword_10035C380)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BC528, &type metadata for CLP_LogEntry_PrivateData_WifiScanType);
    atomic_store(result, (unint64_t *)&qword_10035C380);
  }

  return result;
}

unint64_t sub_10014A664()
{
  unint64_t result = qword_10035C388;
  if (!qword_10035C388)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BC2E8, &type metadata for CLP_LogEntry_PrivateData_WifiAccessPointMode);
    atomic_store(result, (unint64_t *)&qword_10035C388);
  }

  return result;
}

unint64_t sub_10014A6A8()
{
  unint64_t result = qword_10035C390;
  if (!qword_10035C390)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BC1C8, &type metadata for CLP_LogEntry_PrivateData_SensorFusionMode);
    atomic_store(result, (unint64_t *)&qword_10035C390);
  }

  return result;
}

unint64_t sub_10014A6EC()
{
  unint64_t result = qword_10035C398;
  if (!qword_10035C398)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BC0A8,  &type metadata for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel);
    atomic_store(result, (unint64_t *)&qword_10035C398);
  }

  return result;
}

unint64_t sub_10014A730()
{
  unint64_t result = qword_10035C3A0;
  if (!qword_10035C3A0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BBF88,  &type metadata for CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel);
    atomic_store(result, (unint64_t *)&qword_10035C3A0);
  }

  return result;
}

unint64_t sub_10014A774()
{
  unint64_t result = qword_10035C3A8;
  if (!qword_10035C3A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BBE68, &type metadata for CLP_LogEntry_PrivateData_BatteryChargerType);
    atomic_store(result, (unint64_t *)&qword_10035C3A8);
  }

  return result;
}

unint64_t sub_10014A7B8()
{
  unint64_t result = qword_10035C3B0;
  if (!qword_10035C3B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BBD48, &type metadata for CLP_LogEntry_PrivateData_ReachabilityType);
    atomic_store(result, (unint64_t *)&qword_10035C3B0);
  }

  return result;
}

unint64_t sub_10014A7FC()
{
  unint64_t result = qword_10035C3B8;
  if (!qword_10035C3B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BBC28, &type metadata for CLP_LogEntry_PrivateData_DominantMotionModeType);
    atomic_store(result, (unint64_t *)&qword_10035C3B8);
  }

  return result;
}

unint64_t sub_10014A840()
{
  unint64_t result = qword_10035C3C0;
  if (!qword_10035C3C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BBB08, &type metadata for CLP_LogEntry_PrivateData_PipelineOperatingMode);
    atomic_store(result, (unint64_t *)&qword_10035C3C0);
  }

  return result;
}

unint64_t sub_10014A884()
{
  unint64_t result = qword_10035C3C8;
  if (!qword_10035C3C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BB9E8, &type metadata for CLP_LogEntry_PrivateData_OperatingMode);
    atomic_store(result, (unint64_t *)&qword_10035C3C8);
  }

  return result;
}

unint64_t sub_10014A8C8()
{
  unint64_t result = qword_10035C3D0;
  if (!qword_10035C3D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BB8C8, &type metadata for CLP_LogEntry_PrivateData_BatchMode);
    atomic_store(result, (unint64_t *)&qword_10035C3D0);
  }

  return result;
}

unint64_t sub_10014A90C()
{
  unint64_t result = qword_10035C3D8;
  if (!qword_10035C3D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BB7A8, &type metadata for CLP_LogEntry_PrivateData_RhythmicGnssWakeMode);
    atomic_store(result, (unint64_t *)&qword_10035C3D8);
  }

  return result;
}

unint64_t sub_10014A950()
{
  unint64_t result = qword_10035C3E0;
  if (!qword_10035C3E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BB688, &type metadata for CLP_LogEntry_PrivateData_GnssModeOfOperation);
    atomic_store(result, (unint64_t *)&qword_10035C3E0);
  }

  return result;
}

unint64_t sub_10014A994()
{
  unint64_t result = qword_10035C3E8;
  if (!qword_10035C3E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BB568, &type metadata for CLP_LogEntry_PrivateData_BatchedLocationFixType);
    atomic_store(result, (unint64_t *)&qword_10035C3E8);
  }

  return result;
}

unint64_t sub_10014A9D8()
{
  unint64_t result = qword_10035C3F0;
  if (!qword_10035C3F0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BB448,  &type metadata for CLP_LogEntry_PrivateData_ClientSatelliteConstellation);
    atomic_store(result, (unint64_t *)&qword_10035C3F0);
  }

  return result;
}

unint64_t sub_10014AA1C()
{
  unint64_t result = qword_10035C3F8;
  if (!qword_10035C3F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002BB328, &type metadata for CLP_LogEntry_PrivateData_LocationType);
    atomic_store(result, (unint64_t *)&qword_10035C3F8);
  }

  return result;
}

unint64_t sub_10014AA60()
{
  unint64_t result = qword_10035C400;
  if (!qword_10035C400)
  {
    unint64_t result = swift_getWitnessTable( &unk_1002BB208,  &type metadata for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType);
    atomic_store(result, (unint64_t *)&qword_10035C400);
  }

  return result;
}

uint64_t sub_10014AADC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = &v8[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t result = swift_beginAccess(&dword_10036A690, v9, 1LL, 0LL);
  if (dword_10036A690 == -1)
  {
    __break(1u);
  }

  else
  {
    ++dword_10036A690;
    sub_100004C14((uint64_t)v4);
    uint64_t v6 = v0 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb;
    sub_10014B03C((uint64_t)v4, v1 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb);
    swift_beginAccess(v6, v8, 33LL, 0LL);
    sub_10000350C(0);
    sub_10000361C(dword_10036A690);
    swift_endAccess(v8);
    uint64_t v7 = mach_continuous_time();
    swift_beginAccess(v6, v8, 33LL, 0LL);
    sub_1000033F8(v7);
    swift_endAccess(v8);
    return v1;
  }

  return result;
}

int *sub_10014ABEC()
{
  return &dword_10036A690;
}

uint64_t ALProtoRequest.__allocating_init(wifiResultOptions:)(uint64_t a1)
{
  return sub_10014AC44(a1, 3);
}

uint64_t type metadata accessor for ALProtoRequest(uint64_t a1)
{
  uint64_t result = qword_100396B50;
  if (!qword_100396B50) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ALProtoRequest);
  }
  return result;
}

uint64_t ALProtoRequest.__allocating_init(btResultOptions:)(uint64_t a1)
{
  return sub_10014AC44(a1, 4);
}

uint64_t sub_10014AC44(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v7 = type metadata accessor for ALProtoRequest(0LL);
  uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  sub_10014AADC();
  uint64_t v9 = v8 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb;
  swift_beginAccess(v8 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb, v13, 33LL, 0LL);
  swift_retain(v8);
  sub_100003720(a2);
  swift_endAccess(v13);
  sub_100083764(v6);
  swift_beginAccess(v9, v13, 33LL, 0LL);
  sub_100003A60((uint64_t)v6);
  swift_endAccess(v13);
  swift_release(v8);
  uint64_t v10 = type metadata accessor for ALResultOptions(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(a1, v10);
  return v8;
}

uint64_t ALProtoRequest.__allocating_init(data:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for BinaryDecodingOptions(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t v17 = 0LL;
  memset(v16, 0, sizeof(v16));
  BinaryDecodingOptions.init()(v13);
  unint64_t v14 = sub_10014AFF4();
  Message.init(serializedData:extensions:partial:options:)(a1, a2, v16, 0LL, v9, v10, v14);
  if (v3) {
    swift_deallocPartialClassInstance( v13,  v4,  *(unsigned int *)(*(void *)v13 + 48LL),  *(unsigned __int16 *)(*(void *)v13 + 52LL));
  }
  else {
    sub_10014B03C((uint64_t)v12, v13 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb);
  }
  return v13;
}

uint64_t ALProtoRequest.init(data:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for BinaryDecodingOptions(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = 0LL;
  memset(v17, 0, sizeof(v17));
  BinaryDecodingOptions.init()(v11);
  unint64_t v14 = sub_10014AFF4();
  Message.init(serializedData:extensions:partial:options:)(a1, a2, v17, 0LL, v9, v10, v14);
  if (v3)
  {
    uint64_t v15 = type metadata accessor for ALProtoRequest(0LL);
    swift_deallocPartialClassInstance( v4,  v15,  *(unsigned int *)(*(void *)v4 + 48LL),  *(unsigned __int16 *)(*(void *)v4 + 52LL));
  }

  else
  {
    sub_10014B03C((uint64_t)v13, v4 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb);
  }

  return v4;
}

unint64_t sub_10014AFF4()
{
  unint64_t result = qword_100351010;
  if (!qword_100351010)
  {
    uint64_t v1 = type metadata accessor for CLP_LogEntry_AONLoc_Request(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1002B361C, v1);
    atomic_store(result, (unint64_t *)&qword_100351010);
  }

  return result;
}

uint64_t sub_10014B03C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10014B080()
{
  uint64_t v1 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t))(*(void *)v0 + 128LL))(v2);
  unint64_t v5 = sub_10014AFF4();
  uint64_t v6 = Message.serializedData(partial:)(0LL, v1, v5);
  sub_10014B12C((uint64_t)v4);
  return v6;
}

uint64_t sub_10014B12C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

BOOL sub_10014B168()
{
  return sub_10014B178(3);
}

BOOL sub_10014B170()
{
  return sub_10014B178(4);
}

BOOL sub_10014B178(char a1)
{
  uint64_t v3 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = *(void (**)(uint64_t))(*(void *)v1 + 128LL);
  v10(v7);
  BOOL v11 = sub_1000037AC();
  uint64_t v12 = sub_10014B12C((uint64_t)v9);
  if (!v11) {
    return 0LL;
  }
  v10(v12);
  char v13 = sub_1000036F8();
  sub_10014B12C((uint64_t)v6);
  char v20 = v13;
  char v19 = a1;
  unint64_t v14 = sub_10000FE6C();
  dispatch thunk of RawRepresentable.rawValue.getter(&v18, &type metadata for CLP_LogEntry_AONLoc_Request.TypeEnum, v14);
  dispatch thunk of RawRepresentable.rawValue.getter(&v17, &type metadata for CLP_LogEntry_AONLoc_Request.TypeEnum, v14);
  return v18 == v17;
}

uint64_t sub_10014B29C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_10014B2EC(v3, a1);
}

uint64_t sub_10014B2EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10014B330(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb;
  swift_beginAccess(v3, v5, 33LL, 0LL);
  sub_10014B388(a1, v3);
  return swift_endAccess(v5);
}

uint64_t sub_10014B388(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

void *sub_10014B3CC(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

uint64_t sub_10014B410()
{
  return dword_10036A690;
}

uint64_t sub_10014B450(int a1)
{
  uint64_t result = swift_beginAccess(&dword_10036A690, v3, 1LL, 0LL);
  dword_10036A690 = a1;
  return result;
}

void *sub_10014B494(uint64_t a1)
{
  return &j__swift_endAccess;
}

uint64_t ALProtoRequest.deinit()
{
  return v0;
}

uint64_t ALProtoRequest.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_10014B528()
{
  return type metadata accessor for ALProtoRequest(0LL);
}

uint64_t sub_10014B530(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 1LL, &v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t method lookup function for ALProtoRequest(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ALProtoRequest);
}

uint64_t dispatch thunk of ALProtoRequest.__allocating_init(data:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of ALProtoRequest.serializedData()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104LL))();
}

uint64_t dispatch thunk of ALProtoRequest.isWiFiResult()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112LL))();
}

uint64_t dispatch thunk of ALProtoRequest.isBtResult()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120LL))();
}

uint64_t sub_10014B5F8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C96C();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_10014B630@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1001C2384(a1);
  *a2 = result;
  return result;
}

unint64_t sub_10014B654@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1001C2384(*a1);
  *a2 = result;
  return result;
}

_UNKNOWN **sub_10014B67C()
{
  return &off_100342CC0;
}

void sub_10014B688(void *a1@<X8>)
{
  *a1 = &off_100342CC0;
}

uint64_t sub_10014B698(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C928();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014B6D0()
{
  return &off_100342CF8;
}

void sub_10014B6DC(void *a1@<X8>)
{
  *a1 = &off_100342CF8;
}

uint64_t sub_10014B6EC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C8E4();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014B724()
{
  return &off_100342D20;
}

void sub_10014B730(void *a1@<X8>)
{
  *a1 = &off_100342D48;
}

uint64_t sub_10014B740(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C8A0();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014B778()
{
  return &off_100342D70;
}

void sub_10014B784(void *a1@<X8>)
{
  *a1 = &off_100342D70;
}

uint64_t sub_10014B798(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C85C();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_10014B7D0@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1001C2394(a1);
  *a2 = result;
  return result;
}

unint64_t sub_10014B7F4@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1001C2394(*a1);
  *a2 = result;
  return result;
}

_UNKNOWN **sub_10014B81C()
{
  return &off_100342D98;
}

void sub_10014B828(void *a1@<X8>)
{
  *a1 = &off_100342D98;
}

uint64_t sub_10014B838(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C818();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014B870()
{
  return &off_100342DD0;
}

void sub_10014B87C(void *a1@<X8>)
{
  *a1 = &off_100342DF8;
}

uint64_t sub_10014B890(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C7D4();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_10014B8C8@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1001C23A4(a1);
  *a2 = result;
  return result;
}

unint64_t sub_10014B8EC@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1001C23A4(*a1);
  *a2 = result;
  return result;
}

_UNKNOWN **sub_10014B914()
{
  return &off_100342E20;
}

void sub_10014B920(void *a1@<X8>)
{
  *a1 = &off_100342E20;
}

uint64_t sub_10014B934(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C790();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_10014B96C@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1001C23B4(a1);
  *a2 = result;
  return result;
}

unint64_t sub_10014B990@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1001C23B4(*a1);
  *a2 = result;
  return result;
}

_UNKNOWN **sub_10014B9B8()
{
  return &off_100342E68;
}

void sub_10014B9C4(void *a1@<X8>)
{
  *a1 = &off_100342E68;
}

uint64_t sub_10014B9D4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C74C();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014BA0C()
{
  return &off_100342EA0;
}

void sub_10014BA18(void *a1@<X8>)
{
  *a1 = &off_100342EA0;
}

uint64_t sub_10014BA28(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C708();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014BA60()
{
  return &off_100342EC8;
}

void sub_10014BA6C(void *a1@<X8>)
{
  *a1 = &off_100342EC8;
}

uint64_t sub_10014BA7C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C6C4();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014BAB4()
{
  return &off_100342EF0;
}

void sub_10014BAC0(void *a1@<X8>)
{
  *a1 = &off_100342F18;
}

uint64_t sub_10014BAD0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C680();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014BB08()
{
  return &off_100342F40;
}

void sub_10014BB14(void *a1@<X8>)
{
  *a1 = &off_100342F68;
}

uint64_t sub_10014BB28(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C63C();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014BB60()
{
  return &off_100342F90;
}

void sub_10014BB6C(void *a1@<X8>)
{
  *a1 = &off_100342F90;
}

uint64_t sub_10014BB7C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C5F8();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014BBB4()
{
  return &off_100342FC0;
}

void sub_10014BBC0(void *a1@<X8>)
{
  *a1 = &off_100342FE8;
}

uint64_t sub_10014BBD0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C5B4();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014BC08()
{
  return &off_100343010;
}

void sub_10014BC14(void *a1@<X8>)
{
  *a1 = &off_100343010;
}

uint64_t sub_10014BC24(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C570();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014BC5C()
{
  return &off_100343038;
}

void sub_10014BC68(void *a1@<X8>)
{
  *a1 = &off_100343038;
}

uint64_t sub_10014BC78(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C52C();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014BCB0()
{
  return &off_100343060;
}

void sub_10014BCBC(void *a1@<X8>)
{
  *a1 = &off_100343088;
}

uint64_t sub_10014BCCC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C4E8();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014BD04()
{
  return &off_1003430B0;
}

void sub_10014BD10(void *a1@<X8>)
{
  *a1 = &off_1003430D8;
}

uint64_t sub_10014BD20(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C4A4();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014BD58()
{
  return &off_100343100;
}

void sub_10014BD64(void *a1@<X8>)
{
  *a1 = &off_100343128;
}

uint64_t sub_10014BD78(char a1)
{
  return qword_1002D6F18[a1];
}

BOOL sub_10014BD8C(char *a1, char *a2)
{
  return qword_1002D6F18[*a1] == qword_1002D6F18[*a2];
}

uint64_t sub_10014BDB0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C460();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_10014BDE8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1001C23C4(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10014BE0C()
{
  return qword_1002D6F18[*v0];
}

uint64_t sub_10014BE20@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1001C23C4(*a1);
  *a2 = result;
  return result;
}

void sub_10014BE48(void *a1@<X8>)
{
  *a1 = qword_1002D6F18[*v1];
}

_UNKNOWN **sub_10014BE60()
{
  return &off_100343150;
}

void sub_10014BE6C(void *a1@<X8>)
{
  *a1 = &off_100343150;
}

uint64_t sub_10014BE80(char a1)
{
  return qword_1002D6F50[a1];
}

BOOL sub_10014BE94(char *a1, char *a2)
{
  return qword_1002D6F50[*a1] == qword_1002D6F50[*a2];
}

uint64_t sub_10014BEB8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C41C();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_10014BEF0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1001C2424(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10014BF14()
{
  return qword_1002D6F50[*v0];
}

uint64_t sub_10014BF28@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1001C2424(*a1);
  *a2 = result;
  return result;
}

void sub_10014BF50(void *a1@<X8>)
{
  *a1 = qword_1002D6F50[*v1];
}

_UNKNOWN **sub_10014BF68()
{
  return &off_100343178;
}

void sub_10014BF74(void *a1@<X8>)
{
  *a1 = &off_100343178;
}

uint64_t sub_10014BF84(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C3D8();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014BFBC()
{
  return &off_1003431A0;
}

void sub_10014BFC8(void *a1@<X8>)
{
  *a1 = &off_1003431C8;
}

uint64_t sub_10014BFD8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C394();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014C010()
{
  return &off_1003431F0;
}

void sub_10014C01C(void *a1@<X8>)
{
  *a1 = &off_1003431F0;
}

uint64_t sub_10014C02C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C350();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014C064()
{
  return &off_100343218;
}

void sub_10014C070(void *a1@<X8>)
{
  *a1 = &off_100343218;
}

uint64_t sub_10014C080(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C30C();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_10014C0B8@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1001C248C(a1);
  *a2 = result;
  return result;
}

unint64_t sub_10014C0DC@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1001C248C(*a1);
  *a2 = result;
  return result;
}

_UNKNOWN **sub_10014C104()
{
  return &off_100343240;
}

void sub_10014C110(void *a1@<X8>)
{
  *a1 = &off_100343240;
}

uint64_t sub_10014C120(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C2C8();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014C158()
{
  return &off_100343270;
}

void sub_10014C164(void *a1@<X8>)
{
  *a1 = &off_100343270;
}

uint64_t sub_10014C174(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C284();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014C1AC()
{
  return &off_100343298;
}

void sub_10014C1B8(void *a1@<X8>)
{
  *a1 = &off_100343298;
}

uint64_t sub_10014C1C8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C240();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014C200()
{
  return &off_1003432C0;
}

void sub_10014C20C(void *a1@<X8>)
{
  *a1 = &off_1003432C0;
}

uint64_t sub_10014C220(char a1)
{
  return qword_1002D6FE0[a1];
}

BOOL sub_10014C234(char *a1, char *a2)
{
  return qword_1002D6FE0[*a1] == qword_1002D6FE0[*a2];
}

uint64_t sub_10014C258(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C1FC();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_10014C290()
{
  return qword_1002D6FE0[*v0];
}

void sub_10014C2A4(void *a1@<X8>)
{
  *a1 = qword_1002D6FE0[*v1];
}

_UNKNOWN **sub_10014C2BC()
{
  return &off_1003432E8;
}

void sub_10014C2C8(void *a1@<X8>)
{
  *a1 = &off_100343310;
}

uint64_t sub_10014C2D8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001D584C();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014C310()
{
  return &off_100343338;
}

void sub_10014C31C(void *a1@<X8>)
{
  *a1 = &off_100343338;
}

uint64_t sub_10014C32C(uint64_t a1)
{
  return sub_1001C249C(a1);
}

uint64_t sub_10014C340(char a1)
{
  return qword_1002D6F90[a1];
}

BOOL sub_10014C354(char *a1, char *a2)
{
  return qword_1002D6F90[*a1] == qword_1002D6F90[*a2];
}

uint64_t sub_10014C378(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C1B8();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_10014C3B0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1001C249C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10014C3D4()
{
  return qword_1002D6F90[*v0];
}

uint64_t sub_10014C3E8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1001C249C(*a1);
  *a2 = result;
  return result;
}

void sub_10014C410(void *a1@<X8>)
{
  *a1 = qword_1002D6F90[*v1];
}

_UNKNOWN **sub_10014C428()
{
  return &off_100343360;
}

void sub_10014C434(void *a1@<X8>)
{
  *a1 = &off_100343360;
}

uint64_t sub_10014C444(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C174();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014C47C()
{
  return &off_100343390;
}

void sub_10014C488(void *a1@<X8>)
{
  *a1 = &off_1003433B8;
}

uint64_t sub_10014C498(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C130();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014C4D0()
{
  return &off_1003433E0;
}

void sub_10014C4DC(void *a1@<X8>)
{
  *a1 = &off_1003433E0;
}

uint64_t sub_10014C4EC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C0EC();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_10014C524@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1001C2524(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10014C548@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1001C2524(*a1);
  *a2 = result;
  return result;
}

_UNKNOWN **sub_10014C570()
{
  return &off_100343410;
}

void sub_10014C57C(void *a1@<X8>)
{
  *a1 = &off_100343438;
}

uint64_t sub_10014C58C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C0A8();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014C5C4()
{
  return &off_100343460;
}

void sub_10014C5D0(void *a1@<X8>)
{
  *a1 = &off_100343488;
}

uint64_t sub_10014C5E0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C064();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014C618()
{
  return &off_1003434B0;
}

void sub_10014C624(void *a1@<X8>)
{
  *a1 = &off_1003434D8;
}

uint64_t sub_10014C634(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020C020();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014C66C()
{
  return &off_100343500;
}

void sub_10014C678(void *a1@<X8>)
{
  *a1 = &off_100343500;
}

uint64_t sub_10014C688(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020BFDC();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014C6C0()
{
  return &off_100343528;
}

void sub_10014C6CC(void *a1@<X8>)
{
  *a1 = &off_100343550;
}

uint64_t sub_10014C6DC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020BF98();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014C714()
{
  return &off_100343578;
}

void sub_10014C720(void *a1@<X8>)
{
  *a1 = &off_1003435A0;
}

uint64_t sub_10014C730(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10020BF54();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014C768()
{
  return &off_1003435C8;
}

void sub_10014C774(void *a1@<X8>)
{
  *a1 = &off_1003435C8;
}

uint64_t sub_10014C784()
{
  return sub_10001A698(type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

uint64_t sub_10014C790(char a1)
{
  return sub_10001A6CC(a1, type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

uint64_t (*sub_10014C79C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Configuration(0LL) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10014C7E4()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Configuration(0LL) + 20)) != 2;
}

uint64_t sub_10014C80C()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_Configuration(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_10014C830()
{
  return sub_10001A798(type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

uint64_t sub_10014C83C(char a1)
{
  return sub_10001A7CC(a1, type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

uint64_t (*sub_10014C848(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Configuration(0LL) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10014C890()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Configuration(0LL) + 24)) != 2;
}

uint64_t sub_10014C8B8()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_Configuration(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

double sub_10014C8DC()
{
  return sub_100027BE4(type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

uint64_t sub_10014C8E8(double a1)
{
  return sub_100027C28(type metadata accessor for Proto_Gnss_Emergency_Configuration, a1);
}

uint64_t (*sub_10014C8F4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Configuration(0LL) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_100003480;
}

BOOL sub_10014C94C()
{
  return sub_100027CC4(type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

uint64_t sub_10014C958()
{
  return sub_100027D00(type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

int *sub_10014C964@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for Proto_Gnss_Emergency_Configuration(0LL);
  *(_BYTE *)(a1 + result[5]) = 2;
  *(_BYTE *)(a1 + result[6]) = 2;
  uint64_t v3 = a1 + result[7];
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  return result;
}

double sub_10014C9B4()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 16, v3, 0LL, 0LL);
  double result = *(double *)(v1 + 16);
  if (*(_BYTE *)(v1 + 24)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_10014CA0C(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 185LL, 7LL);
    sub_1001C2590(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 16, v11, 1LL, 0LL);
  *(double *)(v9 + 16) = a1;
  *(_BYTE *)(v9 + 24) = 0;
  return result;
}

void (*sub_10014CAAC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0LL, 0LL);
  double v6 = *(double *)(v5 + 16);
  if (*(_BYTE *)(v5 + 24)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10014CB30;
}

void sub_10014CB30(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 88);
    uint64_t v8 = *(void *)(v3 + 80);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 185LL, 7LL);
    sub_1001C2590(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_10014CBFC()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 16, v3, 0LL, 0LL);
  return (*(_BYTE *)(v1 + 24) & 1) == 0;
}

uint64_t sub_10014CC4C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 185LL, 7LL);
    sub_1001C2590(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 16, v9, 1LL, 0LL);
  *(void *)(v7 + 16) = 0LL;
  *(_BYTE *)(v7 + 24) = 1;
  return result;
}

double sub_10014CCE4()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 32, v3, 0LL, 0LL);
  double result = *(double *)(v1 + 32);
  if (*(_BYTE *)(v1 + 40)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_10014CD3C(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 185LL, 7LL);
    sub_1001C2590(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 32, v11, 1LL, 0LL);
  *(double *)(v9 + 32) = a1;
  *(_BYTE *)(v9 + 40) = 0;
  return result;
}

void (*sub_10014CDDC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 32, v3, 0LL, 0LL);
  double v6 = *(double *)(v5 + 32);
  if (*(_BYTE *)(v5 + 40)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10014CE60;
}

void sub_10014CE60(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 88);
    uint64_t v8 = *(void *)(v3 + 80);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 185LL, 7LL);
    sub_1001C2590(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_10014CF2C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 32, v3, 0LL, 0LL);
  return (*(_BYTE *)(v1 + 40) & 1) == 0;
}

uint64_t sub_10014CF7C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 185LL, 7LL);
    sub_1001C2590(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 32, v9, 1LL, 0LL);
  *(void *)(v7 + 32) = 0LL;
  *(_BYTE *)(v7 + 40) = 1;
  return result;
}

double sub_10014D014()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 48, v3, 0LL, 0LL);
  double result = *(double *)(v1 + 48);
  if (*(_BYTE *)(v1 + 56)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_10014D06C(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 185LL, 7LL);
    sub_1001C2590(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 48, v11, 1LL, 0LL);
  *(double *)(v9 + 48) = a1;
  *(_BYTE *)(v9 + 56) = 0;
  return result;
}

void (*sub_10014D10C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 48, v3, 0LL, 0LL);
  double v6 = *(double *)(v5 + 48);
  if (*(_BYTE *)(v5 + 56)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10014D190;
}

void sub_10014D190(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 88);
    uint64_t v8 = *(void *)(v3 + 80);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 185LL, 7LL);
    sub_1001C2590(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_10014D25C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 48, v3, 0LL, 0LL);
  return (*(_BYTE *)(v1 + 56) & 1) == 0;
}

uint64_t sub_10014D2AC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 185LL, 7LL);
    sub_1001C2590(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 48, v9, 1LL, 0LL);
  *(void *)(v7 + 48) = 0LL;
  *(_BYTE *)(v7 + 56) = 1;
  return result;
}

double sub_10014D344()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 64, v3, 0LL, 0LL);
  double result = *(double *)(v1 + 64);
  if (*(_BYTE *)(v1 + 72)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_10014D39C(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 185LL, 7LL);
    sub_1001C2590(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 64, v11, 1LL, 0LL);
  *(double *)(v9 + 64) = a1;
  *(_BYTE *)(v9 + 72) = 0;
  return result;
}

void (*sub_10014D43C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 64, v3, 0LL, 0LL);
  double v6 = *(double *)(v5 + 64);
  if (*(_BYTE *)(v5 + 72)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10014D4C0;
}

void sub_10014D4C0(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 88);
    uint64_t v8 = *(void *)(v3 + 80);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 185LL, 7LL);
    sub_1001C2590(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_10014D58C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 64, v3, 0LL, 0LL);
  return (*(_BYTE *)(v1 + 72) & 1) == 0;
}

uint64_t sub_10014D5DC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 185LL, 7LL);
    sub_1001C2590(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 64, v9, 1LL, 0LL);
  *(void *)(v7 + 64) = 0LL;
  *(_BYTE *)(v7 + 72) = 1;
  return result;
}

double sub_10014D674()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 80, v3, 0LL, 0LL);
  double result = *(double *)(v1 + 80);
  if (*(_BYTE *)(v1 + 88)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_10014D6CC(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 185LL, 7LL);
    sub_1001C2590(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 80, v11, 1LL, 0LL);
  *(double *)(v9 + 80) = a1;
  *(_BYTE *)(v9 + 88) = 0;
  return result;
}

void (*sub_10014D76C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 80, v3, 0LL, 0LL);
  double v6 = *(double *)(v5 + 80);
  if (*(_BYTE *)(v5 + 88)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10014D7F0;
}

void sub_10014D7F0(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 88);
    uint64_t v8 = *(void *)(v3 + 80);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 185LL, 7LL);
    sub_1001C2590(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_10014D8BC()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 80, v3, 0LL, 0LL);
  return (*(_BYTE *)(v1 + 88) & 1) == 0;
}

uint64_t sub_10014D90C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 185LL, 7LL);
    sub_1001C2590(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 80, v9, 1LL, 0LL);
  *(void *)(v7 + 80) = 0LL;
  *(_BYTE *)(v7 + 88) = 1;
  return result;
}

double sub_10014D9A4()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 96, v3, 0LL, 0LL);
  double result = *(double *)(v1 + 96);
  if (*(_BYTE *)(v1 + 104)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_10014D9FC(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 185LL, 7LL);
    sub_1001C2590(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 96, v11, 1LL, 0LL);
  *(double *)(v9 + 96) = a1;
  *(_BYTE *)(v9 + 104) = 0;
  return result;
}

void (*sub_10014DA9C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 96, v3, 0LL, 0LL);
  double v6 = *(double *)(v5 + 96);
  if (*(_BYTE *)(v5 + 104)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10014DB20;
}

void sub_10014DB20(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 88);
    uint64_t v8 = *(void *)(v3 + 80);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 185LL, 7LL);
    sub_1001C2590(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_10014DBEC()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 96, v3, 0LL, 0LL);
  return (*(_BYTE *)(v1 + 104) & 1) == 0;
}

uint64_t sub_10014DC3C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 185LL, 7LL);
    sub_1001C2590(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 96, v9, 1LL, 0LL);
  *(void *)(v7 + 96) = 0LL;
  *(_BYTE *)(v7 + 104) = 1;
  return result;
}

uint64_t sub_10014DCD4()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 108, v3, 0LL, 0LL);
  if (*(_BYTE *)(v1 + 112)) {
    return 0LL;
  }
  else {
    return *(unsigned int *)(v1 + 108);
  }
}

uint64_t sub_10014DD28(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 185LL, 7LL);
    sub_1001C2590(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 108, v11, 1LL, 0LL);
  *(_DWORD *)(v9 + 108) = a1;
  *(_BYTE *)(v9 + 112) = 0;
  return result;
}

void (*sub_10014DDC8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 108, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)(v5 + 108);
  if (*(_BYTE *)(v5 + 112)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_10014DE48;
}

void sub_10014DE48(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 185LL, 7LL);
    sub_1001C2590(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_10014DF14()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 108, v3, 0LL, 0LL);
  return (*(_BYTE *)(v1 + 112) & 1) == 0;
}

uint64_t sub_10014DF64()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 185LL, 7LL);
    sub_1001C2590(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 108, v9, 1LL, 0LL);
  *(_DWORD *)(v7 + 108) = 0;
  *(_BYTE *)(v7 + 112) = 1;
  return result;
}

uint64_t sub_10014DFFC()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 113, v3, 0LL, 0LL);
  if (*(_BYTE *)(v1 + 113) == 18) {
    return 0LL;
  }
  else {
    return *(unsigned __int8 *)(v1 + 113);
  }
}

uint64_t sub_10014E04C(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 185LL, 7LL);
    sub_1001C2590(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 113, v11, 1LL, 0LL);
  *(_BYTE *)(v9 + 113) = a1;
  return result;
}

void (*sub_10014E0E8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 113, v3, 0LL, 0LL);
  int v6 = *(unsigned __int8 *)(v5 + 113);
  if (v6 == 18) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10014E164;
}

void sub_10014E164(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 185LL, 7LL);
    sub_1001C2590(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_10014E230()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 113, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 113) != 18;
}

uint64_t sub_10014E280()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 185LL, 7LL);
    sub_1001C2590(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 113, v9, 1LL, 0LL);
  *(_BYTE *)(v7 + 113) = 18;
  return result;
}

uint64_t sub_10014E314()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 114, v3, 0LL, 0LL);
  if (*(_BYTE *)(v1 + 114) == 4) {
    return 0LL;
  }
  else {
    return *(unsigned __int8 *)(v1 + 114);
  }
}

uint64_t sub_10014E364(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 185LL, 7LL);
    sub_1001C2590(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 114, v11, 1LL, 0LL);
  *(_BYTE *)(v9 + 114) = a1;
  return result;
}

void (*sub_10014E400(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 114, v3, 0LL, 0LL);
  int v6 = *(unsigned __int8 *)(v5 + 114);
  if (v6 == 4) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10014E47C;
}

void sub_10014E47C(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 185LL, 7LL);
    sub_1001C2590(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_10014E548()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 114, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 114) != 4;
}

uint64_t sub_10014E598()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 185LL, 7LL);
    sub_1001C2590(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 114, v9, 1LL, 0LL);
  *(_BYTE *)(v7 + 114) = 4;
  return result;
}

uint64_t sub_10014E62C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 115, v3, 0LL, 0LL);
  if (*(_BYTE *)(v1 + 115) == 7) {
    return 0LL;
  }
  else {
    return *(unsigned __int8 *)(v1 + 115);
  }
}

uint64_t sub_10014E67C(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 185LL, 7LL);
    sub_1001C2590(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 115, v11, 1LL, 0LL);
  *(_BYTE *)(v9 + 115) = a1;
  return result;
}

void (*sub_10014E718(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 115, v3, 0LL, 0LL);
  int v6 = *(unsigned __int8 *)(v5 + 115);
  if (v6 == 7) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10014E794;
}

void sub_10014E794(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 185LL, 7LL);
    sub_1001C2590(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_10014E860()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 115, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 115) != 7;
}

uint64_t sub_10014E8B0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 185LL, 7LL);
    sub_1001C2590(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 115, v9, 1LL, 0LL);
  *(_BYTE *)(v7 + 115) = 7;
  return result;
}

double sub_10014E944()
{
  return sub_100156E08(type metadata accessor for Proto_Gnss_Emergency_SummaryReport);
}

uint64_t sub_10014E950(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 185LL, 7LL);
    sub_1001C2590(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 120, v11, 1LL, 0LL);
  *(double *)(v9 + 120) = a1;
  *(_BYTE *)(v9 + 128) = 0;
  return result;
}

void (*sub_10014E9F0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 120, v3, 0LL, 0LL);
  double v6 = *(double *)(v5 + 120);
  if (*(_BYTE *)(v5 + 128)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10014EA74;
}

void sub_10014EA74(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 88);
    uint64_t v8 = *(void *)(v3 + 80);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 185LL, 7LL);
    sub_1001C2590(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_10014EB40()
{
  return sub_100157070(type metadata accessor for Proto_Gnss_Emergency_SummaryReport);
}

uint64_t sub_10014EB4C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 185LL, 7LL);
    sub_1001C2590(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 120, v9, 1LL, 0LL);
  *(void *)(v7 + 120) = 0LL;
  *(_BYTE *)(v7 + 128) = 1;
  return result;
}

double sub_10014EBE4()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 136, v3, 0LL, 0LL);
  double result = *(double *)(v1 + 136);
  if (*(_BYTE *)(v1 + 144)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_10014EC3C(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 185LL, 7LL);
    sub_1001C2590(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 136, v11, 1LL, 0LL);
  *(double *)(v9 + 136) = a1;
  *(_BYTE *)(v9 + 144) = 0;
  return result;
}

void (*sub_10014ECDC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 136, v3, 0LL, 0LL);
  double v6 = *(double *)(v5 + 136);
  if (*(_BYTE *)(v5 + 144)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10014ED60;
}

void sub_10014ED60(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 88);
    uint64_t v8 = *(void *)(v3 + 80);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 185LL, 7LL);
    sub_1001C2590(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_10014EE2C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 136, v3, 0LL, 0LL);
  return (*(_BYTE *)(v1 + 144) & 1) == 0;
}

uint64_t sub_10014EE7C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 185LL, 7LL);
    sub_1001C2590(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 136, v9, 1LL, 0LL);
  *(void *)(v7 + 136) = 0LL;
  *(_BYTE *)(v7 + 144) = 1;
  return result;
}

double sub_10014EF14()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 152, v3, 0LL, 0LL);
  double result = *(double *)(v1 + 152);
  if (*(_BYTE *)(v1 + 160)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_10014EF6C(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 185LL, 7LL);
    sub_1001C2590(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 152, v11, 1LL, 0LL);
  *(double *)(v9 + 152) = a1;
  *(_BYTE *)(v9 + 160) = 0;
  return result;
}

void (*sub_10014F00C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 152, v3, 0LL, 0LL);
  double v6 = *(double *)(v5 + 152);
  if (*(_BYTE *)(v5 + 160)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10014F090;
}

void sub_10014F090(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 88);
    uint64_t v8 = *(void *)(v3 + 80);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 185LL, 7LL);
    sub_1001C2590(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_10014F15C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 152, v3, 0LL, 0LL);
  return (*(_BYTE *)(v1 + 160) & 1) == 0;
}

uint64_t sub_10014F1AC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 185LL, 7LL);
    sub_1001C2590(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 152, v9, 1LL, 0LL);
  *(void *)(v7 + 152) = 0LL;
  *(_BYTE *)(v7 + 160) = 1;
  return result;
}

uint64_t sub_10014F244()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 161, v3, 0LL, 0LL);
  if (*(_BYTE *)(v1 + 161) == 8) {
    return 0LL;
  }
  else {
    return *(unsigned __int8 *)(v1 + 161);
  }
}

uint64_t sub_10014F294(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 185LL, 7LL);
    sub_1001C2590(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 161, v11, 1LL, 0LL);
  *(_BYTE *)(v9 + 161) = a1;
  return result;
}

void (*sub_10014F330(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 161, v3, 0LL, 0LL);
  int v6 = *(unsigned __int8 *)(v5 + 161);
  if (v6 == 8) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10014F3AC;
}

void sub_10014F3AC(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 185LL, 7LL);
    sub_1001C2590(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_10014F478()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 161, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 161) != 8;
}

uint64_t sub_10014F4C8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 185LL, 7LL);
    sub_1001C2590(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 161, v9, 1LL, 0LL);
  *(_BYTE *)(v7 + 161) = 8;
  return result;
}

uint64_t sub_10014F55C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 162, v3, 0LL, 0LL);
  if (*(_BYTE *)(v1 + 162) == 17) {
    return 0LL;
  }
  else {
    return *(unsigned __int8 *)(v1 + 162);
  }
}

uint64_t sub_10014F5AC(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 185LL, 7LL);
    sub_1001C2590(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 162, v11, 1LL, 0LL);
  *(_BYTE *)(v9 + 162) = a1;
  return result;
}

void (*sub_10014F648(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 162, v3, 0LL, 0LL);
  int v6 = *(unsigned __int8 *)(v5 + 162);
  if (v6 == 17) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10014F6C4;
}

void sub_10014F6C4(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 185LL, 7LL);
    sub_1001C2590(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_10014F790()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 162, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 162) != 17;
}

uint64_t sub_10014F7E0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 185LL, 7LL);
    sub_1001C2590(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 162, v9, 1LL, 0LL);
  *(_BYTE *)(v7 + 162) = 17;
  return result;
}

uint64_t sub_10014F874()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 163, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 163) & 1;
}

uint64_t sub_10014F8C0(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 185LL, 7LL);
    sub_1001C2590(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 163, v11, 1LL, 0LL);
  *(_BYTE *)(v9 + 163) = a1 & 1;
  return result;
}

void (*sub_10014F960(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 163, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 163) & 1;
  return sub_10014F9D8;
}

void sub_10014F9D8(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 185LL, 7LL);
    sub_1001C2590(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_10014FA9C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 163, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 163) != 2;
}

uint64_t sub_10014FAEC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 185LL, 7LL);
    sub_1001C2590(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 163, v9, 1LL, 0LL);
  *(_BYTE *)(v7 + 163) = 2;
  return result;
}

uint64_t sub_10014FB80()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 164, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 164) & 1;
}

uint64_t sub_10014FBCC(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 185LL, 7LL);
    sub_1001C2590(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 164, v11, 1LL, 0LL);
  *(_BYTE *)(v9 + 164) = a1 & 1;
  return result;
}

void (*sub_10014FC6C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 164, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 164) & 1;
  return sub_10014FCE4;
}

void sub_10014FCE4(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 185LL, 7LL);
    sub_1001C2590(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_10014FDA8()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 164, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 164) != 2;
}

uint64_t sub_10014FDF8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 185LL, 7LL);
    sub_1001C2590(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 164, v9, 1LL, 0LL);
  *(_BYTE *)(v7 + 164) = 2;
  return result;
}

uint64_t sub_10014FE8C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 168, v3, 0LL, 0LL);
  if (*(_BYTE *)(v1 + 176)) {
    return 0LL;
  }
  else {
    return *(void *)(v1 + 168);
  }
}

uint64_t sub_10014FEE0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 185LL, 7LL);
    sub_1001C2590(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 168, v11, 1LL, 0LL);
  *(void *)(v9 + 168) = a1;
  *(_BYTE *)(v9 + 176) = 0;
  return result;
}

void (*sub_10014FF80(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 168, v3, 0LL, 0LL);
  uint64_t v6 = *(void *)(v5 + 168);
  if (*(_BYTE *)(v5 + 176)) {
    uint64_t v6 = 0LL;
  }
  v3[9] = v6;
  return sub_100150000;
}

void sub_100150000(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 88);
    uint64_t v8 = *(void *)(v3 + 80);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 185LL, 7LL);
    sub_1001C2590(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_1001500CC()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 168, v3, 0LL, 0LL);
  return (*(_BYTE *)(v1 + 176) & 1) == 0;
}

uint64_t sub_10015011C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 185LL, 7LL);
    sub_1001C2590(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 168, v9, 1LL, 0LL);
  *(void *)(v7 + 168) = 0LL;
  *(_BYTE *)(v7 + 176) = 1;
  return result;
}

uint64_t sub_1001501B4()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 180, v3, 0LL, 0LL);
  if (*(_BYTE *)(v1 + 184)) {
    return 0LL;
  }
  else {
    return *(unsigned int *)(v1 + 180);
  }
}

uint64_t sub_100150208(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 185LL, 7LL);
    sub_1001C2590(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 180, v11, 1LL, 0LL);
  *(_DWORD *)(v9 + 180) = a1;
  *(_BYTE *)(v9 + 184) = 0;
  return result;
}

void (*sub_1001502A8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 180, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)(v5 + 180);
  if (*(_BYTE *)(v5 + 184)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_100150328;
}

void sub_100150328(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 185LL, 7LL);
    sub_1001C2590(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_1001503F4()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20));
  swift_beginAccess(v1 + 180, v3, 0LL, 0LL);
  return (*(_BYTE *)(v1 + 184) & 1) == 0;
}

uint64_t sub_100150444()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 185LL, 7LL);
    sub_1001C2590(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 180, v9, 1LL, 0LL);
  *(_DWORD *)(v7 + 180) = 0;
  *(_BYTE *)(v7 + 184) = 1;
  return result;
}

uint64_t sub_1001504DC@<X0>(uint64_t a1@<X8>)
{
  return sub_100024054( type metadata accessor for Proto_Gnss_Emergency_SummaryReport,  &qword_100396CB0,  &qword_100396CB8,  (uint64_t)sub_10018844C,  a1);
}

uint64_t sub_100150500()
{
  return sub_1000365F4(&qword_100396CB0, &qword_100396CB8, (uint64_t)sub_10018844C);
}

uint64_t sub_10015051C()
{
  return sub_1000191E8(type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t sub_100150528(int a1)
{
  return sub_100019228(a1, type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t (*sub_100150534(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0LL) + 20);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100150584()
{
  return sub_1000192B8(type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t sub_100150590()
{
  return sub_1000192F4(type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t sub_10015059C()
{
  return sub_10009E808(type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t sub_1001505A8(uint64_t a1, uint64_t a2)
{
  return sub_10009E868(a1, a2, type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t (*sub_1001505B4(uint64_t a1))(uint64_t *, char)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0LL) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  int v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }

  else
  {
    uint64_t v6 = 0LL;
    unint64_t v7 = 0xE000000000000000LL;
  }

  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v5);
  return sub_100096B94;
}

BOOL sub_10015061C()
{
  return sub_10009E920(type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t sub_100150628()
{
  return sub_10009E95C(type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t sub_100150634()
{
  return sub_10001A898(type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t sub_100150640(char a1)
{
  return sub_10000534C(a1, type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t (*sub_10015064C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0LL) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100150694()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0LL) + 28)) != 2;
}

uint64_t sub_1001506BC()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_1001506E0()
{
  return sub_10001A96C(type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t sub_1001506EC(char a1)
{
  return sub_10001A9A0(a1, type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t (*sub_1001506F8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0LL) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100150740()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0LL) + 32)) != 2;
}

uint64_t sub_100150768()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

uint64_t sub_10015078C()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0LL) + 36)) & 1;
}

uint64_t sub_1001507B0(char a1)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_1001507DC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0LL) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100150824()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0LL) + 36)) != 2;
}

uint64_t sub_10015084C()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

uint64_t sub_100150870()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0LL) + 40)) & 1;
}

uint64_t sub_100150894(char a1)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*sub_1001508C0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0LL) + 40);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100150908()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0LL) + 40)) != 2;
}

uint64_t sub_100150930()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 40)) = 2;
  return result;
}

int *sub_100150954@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0LL);
  uint64_t v3 = a1 + result[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  int v4 = (void *)(a1 + result[6]);
  *int v4 = 0LL;
  v4[1] = 0LL;
  *(_BYTE *)(a1 + result[7]) = 2;
  *(_BYTE *)(a1 + result[8]) = 2;
  *(_BYTE *)(a1 + result[9]) = 2;
  *(_BYTE *)(a1 + result[10]) = 2;
  return result;
}

uint64_t sub_1001509C0()
{
  return sub_10001A698(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_1001509CC(char a1)
{
  return sub_10001A6CC(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*sub_1001509D8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0LL) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100150A20()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0LL) + 20)) != 2;
}

uint64_t sub_100150A48()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_100150A6C()
{
  return sub_10002DF9C(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150A78(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*sub_100150A84(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100150AD4()
{
  return sub_1000277C8(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150AE0()
{
  return sub_100027804(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150AEC()
{
  return sub_1000B8E14(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150AF8(int a1)
{
  return sub_1000B8E54(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*sub_100150B04(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0LL) + 28);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100150B54()
{
  return sub_100020BD0(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150B60()
{
  return sub_100020C0C(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150B6C()
{
  return sub_1000A9EA0(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150B78(int a1)
{
  return sub_1000A9EE0(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*sub_100150B84(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0LL) + 32);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100150BD4()
{
  return sub_100027938(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150BE0()
{
  return sub_100027974(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150BEC()
{
  return sub_1000B5040(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150BF8(int a1)
{
  return sub_1000B5080(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*sub_100150C04(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0LL) + 36);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100150C54()
{
  return sub_10002828C(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150C60()
{
  return sub_1000282C8(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150C6C()
{
  return sub_100151524(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150C78(int a1)
{
  return sub_100151564(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*sub_100150C84(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0LL) + 40);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100150CD4()
{
  return sub_10003374C(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150CE0()
{
  return sub_100033788(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150CEC()
{
  return sub_1000A6DE4(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150CF8(int a1)
{
  return sub_1000A6E24(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*sub_100150D04(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0LL) + 44);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100150D54()
{
  return sub_100033884(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150D60()
{
  return sub_1000338C0(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150D6C()
{
  return sub_1001516F8(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150D78(int a1)
{
  return sub_100151738(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*sub_100150D84(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0LL) + 48);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100150DD4()
{
  return sub_1000B3C60(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150DE0()
{
  return sub_1000B3C9C(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150DEC()
{
  return sub_10015DAD0(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150DF8(int a1)
{
  return sub_10015DB10(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*sub_100150E04(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0LL) + 52);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100150E54()
{
  return sub_10015DBA0(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150E60()
{
  return sub_10015DBDC(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150E6C()
{
  return sub_10015DC18(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150E78(int a1)
{
  return sub_10015DC58(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*sub_100150E84(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0LL) + 56);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100150ED4()
{
  return sub_10015DCE8(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150EE0()
{
  return sub_10015DD24(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

int *sub_100150EEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0LL);
  *(_BYTE *)(a1 + result[5]) = 2;
  uint64_t v3 = a1 + result[6];
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  uint64_t v4 = a1 + result[7];
  *(_DWORD *)uint64_t v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  uint64_t v5 = a1 + result[8];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  uint64_t v6 = a1 + result[9];
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  uint64_t v7 = a1 + result[10];
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  uint64_t v8 = a1 + result[11];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + result[12];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1 + result[13];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  uint64_t v11 = a1 + result[14];
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  return result;
}

uint64_t sub_100150FB4()
{
  return sub_10001A698(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t sub_100150FC0(char a1)
{
  return sub_10001A6CC(a1, type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t (*sub_100150FCC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo(0LL) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100151014()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo(0LL) + 20)) != 2;
}

uint64_t sub_10015103C()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_100151060()
{
  return sub_10002DF9C(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t sub_10015106C(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t (*sub_100151078(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1001510C8()
{
  return sub_1000277C8(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t sub_1001510D4()
{
  return sub_100027804(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t sub_1001510E0()
{
  return sub_1000B8E14(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t sub_1001510EC(int a1)
{
  return sub_1000B8E54(a1, type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t (*sub_1001510F8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo(0LL) + 28);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100151148()
{
  return sub_100020BD0(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t sub_100151154()
{
  return sub_100020C0C(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t sub_100151160()
{
  return sub_1000A9EA0(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t sub_10015116C(int a1)
{
  return sub_1000A9EE0(a1, type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t (*sub_100151178(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo(0LL) + 32);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1001511C8()
{
  return sub_100027938(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t sub_1001511D4()
{
  return sub_100027974(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t sub_1001511E0()
{
  return sub_1000B5040(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t sub_1001511EC(int a1)
{
  return sub_1000B5080(a1, type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t (*sub_1001511F8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo(0LL) + 36);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100151248()
{
  return sub_10002828C(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t sub_100151254()
{
  return sub_1000282C8(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

int *sub_100151260@<X0>(uint64_t a1@<X8>)
{
  return sub_100152490(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo, a1);
}

uint64_t sub_10015126C()
{
  return sub_10001A698(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_100151278(char a1)
{
  return sub_10001A6CC(a1, type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t (*sub_100151284(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0LL) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1001512CC()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0LL) + 20)) != 2;
}

uint64_t sub_1001512F4()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_100151318()
{
  return sub_10002DF9C(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_100151324(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t (*sub_100151330(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100151380()
{
  return sub_1000277C8(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_10015138C()
{
  return sub_100027804(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_100151398()
{
  return sub_1000B8E14(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_1001513A4(int a1)
{
  return sub_1000B8E54(a1, type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t (*sub_1001513B0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0LL) + 28);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100151400()
{
  return sub_100020BD0(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_10015140C()
{
  return sub_100020C0C(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_100151418()
{
  return sub_1000A9EA0(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_100151424(int a1)
{
  return sub_1000A9EE0(a1, type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t (*sub_100151430(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0LL) + 32);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100151480()
{
  return sub_100027938(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_10015148C()
{
  return sub_100027974(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_100151498()
{
  return sub_1000B5040(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_1001514A4(int a1)
{
  return sub_1000B5080(a1, type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t (*sub_1001514B0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0LL) + 36);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100151500()
{
  return sub_10002828C(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_10015150C()
{
  return sub_1000282C8(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_100151518()
{
  return sub_100151524(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_100151524(uint64_t (*a1)(void))
{
  uint64_t v2 = (_BYTE *)(v1 + *(int *)(a1(0LL) + 40));
  if (v2[4]) {
    return 0LL;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t sub_100151558(int a1)
{
  return sub_100151564(a1, type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_100151564(int a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0LL);
  uint64_t v5 = v2 + *(int *)(result + 40);
  *(_DWORD *)uint64_t v5 = a1;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_100151598(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0LL) + 40);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1001515E8()
{
  return sub_10003374C(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_1001515F4()
{
  return sub_100033788(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_100151600()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0LL) + 44));
  if (v1 == 4) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_100151628(char a1)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*sub_100151654(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0LL) + 44);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1001516A0()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0LL) + 44)) != 4;
}

uint64_t sub_1001516C8()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 44)) = 4;
  return result;
}

uint64_t sub_1001516EC()
{
  return sub_1001516F8(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_1001516F8(uint64_t (*a1)(void))
{
  uint64_t v2 = (_BYTE *)(v1 + *(int *)(a1(0LL) + 48));
  if (v2[4]) {
    return 0LL;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t sub_10015172C(int a1)
{
  return sub_100151738(a1, type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_100151738(int a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0LL);
  uint64_t v5 = v2 + *(int *)(result + 48);
  *(_DWORD *)uint64_t v5 = a1;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_10015176C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0LL) + 48);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1001517BC()
{
  return sub_1000B3C60(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_1001517C8()
{
  return sub_1000B3C9C(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

int *sub_1001517D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0LL);
  *(_BYTE *)(a1 + result[5]) = 2;
  uint64_t v3 = a1 + result[6];
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  uint64_t v4 = a1 + result[7];
  *(_DWORD *)uint64_t v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  uint64_t v5 = a1 + result[8];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  uint64_t v6 = a1 + result[9];
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  uint64_t v7 = a1 + result[10];
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  *(_BYTE *)(a1 + result[11]) = 4;
  uint64_t v8 = a1 + result[12];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  return result;
}

uint64_t sub_100151878()
{
  return sub_10017A664(type metadata accessor for Proto_Gnss_Emergency_LocationId);
}

uint64_t sub_100151884(char a1)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_LocationId(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_1001518B0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationId(0LL) + 32);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 7) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1001518FC()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationId(0LL) + 32)) != 7;
}

uint64_t sub_100151924()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_LocationId(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 7;
  return result;
}

uint64_t sub_100151948@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationId(0LL) + 28);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t sub_100151990(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationId(0LL) + 28);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
}

uint64_t (*sub_1001519D8())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_100151A00@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  a1[1] = &_swiftEmptyArrayStorage;
  a1[2] = &_swiftEmptyArrayStorage;
  uint64_t v2 = type metadata accessor for Proto_Gnss_Emergency_LocationId(0LL);
  uint64_t result = UnknownStorage.init()();
  *((_BYTE *)a1 + *(int *)(v2 + 32)) = 7;
  return result;
}

uint64_t sub_100151A50()
{
  return sub_1000191E8(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest);
}

uint64_t sub_100151A5C(int a1)
{
  return sub_100019228(a1, type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest);
}

uint64_t (*sub_100151A68(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest(0LL) + 20);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100151AB8()
{
  return sub_1000192B8(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest);
}

uint64_t sub_100151AC4()
{
  return sub_1000192F4(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest);
}

uint64_t sub_100151AD0()
{
  return sub_10001A798(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest);
}

uint64_t sub_100151ADC(char a1)
{
  return sub_10001A7CC(a1, type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest);
}

uint64_t (*sub_100151AE8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest(0LL) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100151B30()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest(0LL) + 24)) != 2;
}

uint64_t sub_100151B58()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_100151B7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest(0LL);
  uint64_t v3 = a1 + *(int *)(result + 20);
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  *(_BYTE *)(a1 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_100151BC4()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0LL) + 20));
  unint64_t v2 = v1[1];
  if (v2 >> 60 == 15) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *v1;
  }
  sub_10005F2F8(*v1, v2);
  return v3;
}

uint64_t sub_100151C10(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0LL) + 20);
  uint64_t result = sub_10005F30C(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t (*sub_100151C54(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0LL) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  int v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0LL;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000LL;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  sub_10005F2F8(v5, v6);
  return sub_100151CB4;
}

uint64_t sub_100151CB4(uint64_t a1, char a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16) + *(int *)(a1 + 24);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)v3;
  unint64_t v6 = *(void *)(v3 + 8);
  if ((a2 & 1) != 0)
  {
    sub_100017F58(*(void *)a1, v2);
    sub_10005F30C(v5, v6);
    *(void *)uint64_t v3 = v4;
    *(void *)(v3 + 8) = v2;
    return sub_100017F9C(v4, v2);
  }

  else
  {
    uint64_t result = sub_10005F30C(*(void *)v3, *(void *)(v3 + 8));
    *(void *)uint64_t v3 = v4;
    *(void *)(v3 + 8) = v2;
  }

  return result;
}

BOOL sub_100151D3C()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0LL) + 20) + 8) >> 60 != 15LL;
}

double sub_100151D6C()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0LL) + 20);
  sub_10005F30C(*(void *)v1, *(void *)(v1 + 8));
  double result = 0.0;
  *(_OWORD *)uint64_t v1 = xmmword_1002B4290;
  return result;
}

uint64_t sub_100151DA8()
{
  return sub_10001A798(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t sub_100151DB4(char a1)
{
  return sub_10001A7CC(a1, type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t (*sub_100151DC0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0LL) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100151E08()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0LL) + 24)) != 2;
}

uint64_t sub_100151E30()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_100151E54()
{
  return sub_10001A898(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t sub_100151E60(char a1)
{
  return sub_10000534C(a1, type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t (*sub_100151E6C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0LL) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100151EB4()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0LL) + 28)) != 2;
}

uint64_t sub_100151EDC()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_100151F00()
{
  return sub_1000A9EA0(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t sub_100151F0C(int a1)
{
  return sub_1000A9EE0(a1, type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t (*sub_100151F18(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0LL) + 32);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100151F68()
{
  return sub_100027938(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t sub_100151F74()
{
  return sub_100027974(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t sub_100151F80()
{
  return sub_1000B5040(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t sub_100151F8C(int a1)
{
  return sub_1000B5080(a1, type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t (*sub_100151F98(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0LL) + 36);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100151FE8()
{
  return sub_10002828C(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t sub_100151FF4()
{
  return sub_1000282C8(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

double sub_100152000@<D0>(uint64_t a1@<X8>)
{
  unint64_t v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0LL);
  double result = 0.0;
  *(_OWORD *)(a1 + v2[5]) = xmmword_1002B4290;
  *(_BYTE *)(a1 + v2[6]) = 2;
  *(_BYTE *)(a1 + v2[7]) = 2;
  uint64_t v4 = a1 + v2[8];
  *(_DWORD *)uint64_t v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  uint64_t v5 = a1 + v2[9];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  return result;
}

uint64_t sub_100152070()
{
  return 0LL;
}

uint64_t sub_10015207C()
{
  return sub_10017C8BC(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList);
}

uint64_t sub_100152088(char a1)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_1001520B4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList(0LL) + 24);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100152100()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList(0LL) + 24)) != 6;
}

uint64_t sub_100152128()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 6;
  return result;
}

uint64_t sub_10015214C@<X0>(uint64_t a1@<X8>)
{
  return sub_100005424(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList, a1);
}

uint64_t sub_100152158(uint64_t a1)
{
  return sub_10000547C(a1, type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList);
}

uint64_t (*sub_100152164())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_10015218C@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  uint64_t v2 = type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList(0LL);
  uint64_t result = UnknownStorage.init()();
  *((_BYTE *)a1 + *(int *)(v2 + 24)) = 6;
  return result;
}

uint64_t sub_1001521D8()
{
  return sub_10001A698(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t sub_1001521E4(char a1)
{
  return sub_10001A6CC(a1, type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t (*sub_1001521F0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_QoP(0LL) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100152238()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_QoP(0LL) + 20)) != 2;
}

uint64_t sub_100152260()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_QoP(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_100152284()
{
  return sub_10002DF9C(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t sub_100152290(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t (*sub_10015229C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_QoP(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1001522EC()
{
  return sub_1000277C8(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t sub_1001522F8()
{
  return sub_100027804(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t sub_100152304()
{
  return sub_1000B8E14(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t sub_100152310(int a1)
{
  return sub_1000B8E54(a1, type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t (*sub_10015231C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_QoP(0LL) + 28);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015236C()
{
  return sub_100020BD0(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t sub_100152378()
{
  return sub_100020C0C(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t sub_100152384()
{
  return sub_1000A9EA0(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t sub_100152390(int a1)
{
  return sub_1000A9EE0(a1, type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t (*sub_10015239C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_QoP(0LL) + 32);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1001523EC()
{
  return sub_100027938(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t sub_1001523F8()
{
  return sub_100027974(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t sub_100152404()
{
  return sub_1000B5040(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t sub_100152410(int a1)
{
  return sub_1000B5080(a1, type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t (*sub_10015241C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_QoP(0LL) + 36);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015246C()
{
  return sub_10002828C(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t sub_100152478()
{
  return sub_1000282C8(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

int *sub_100152484@<X0>(uint64_t a1@<X8>)
{
  return sub_100152490(type metadata accessor for Proto_Gnss_Emergency_QoP, a1);
}

int *sub_100152490@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (int *)a1(0LL);
  *(_BYTE *)(a2 + result[5]) = 2;
  uint64_t v5 = a2 + result[6];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  uint64_t v6 = a2 + result[7];
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  uint64_t v7 = a2 + result[8];
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  uint64_t v8 = a2 + result[9];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  return result;
}

uint64_t sub_10015250C()
{
  return sub_10001A798(type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

uint64_t sub_100152518(char a1)
{
  return sub_10001A7CC(a1, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

uint64_t (*sub_100152524(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0LL) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10015256C()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0LL) + 24)) != 2;
}

uint64_t sub_100152594()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_1001525B8()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0LL) + 28));
  if (v1 == 5) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_1001525E0(char a1)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_10015260C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0LL) + 28);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100152658()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0LL) + 28)) != 5;
}

uint64_t sub_100152680()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 5;
  return result;
}

uint64_t sub_1001526A4()
{
  return sub_10015473C(type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

uint64_t sub_1001526B0(uint64_t a1, uint64_t a2)
{
  return sub_10015479C(a1, a2, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

uint64_t (*sub_1001526BC(uint64_t a1))(uint64_t *, char)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0LL) + 32);
  *(_DWORD *)(a1 + 24) = v3;
  int v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }

  else
  {
    uint64_t v6 = 0LL;
    unint64_t v7 = 0xE000000000000000LL;
  }

  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v5);
  return sub_100096B94;
}

BOOL sub_100152724()
{
  return sub_100154854(type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

uint64_t sub_100152730()
{
  return sub_100154890(type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

uint64_t sub_10015273C@<X0>(uint64_t a1@<X8>)
{
  return sub_100005424(type metadata accessor for Proto_Gnss_Emergency_SLPAddress, a1);
}

uint64_t sub_100152748(uint64_t a1)
{
  return sub_10000547C(a1, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

uint64_t (*sub_100152754())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_10015277C@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  uint64_t v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0LL);
  uint64_t result = UnknownStorage.init()();
  *((_BYTE *)a1 + v2[6]) = 2;
  *((_BYTE *)a1 + v2[7]) = 5;
  int v4 = (void *)((char *)a1 + v2[8]);
  *int v4 = 0LL;
  v4[1] = 0LL;
  return result;
}

uint64_t sub_1001527E0()
{
  return sub_10001A698(type metadata accessor for Proto_Gnss_Emergency_Notification);
}

uint64_t sub_1001527EC(char a1)
{
  return sub_10001A6CC(a1, type metadata accessor for Proto_Gnss_Emergency_Notification);
}

uint64_t (*sub_1001527F8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Notification(0LL) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100152840()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Notification(0LL) + 20)) != 2;
}

uint64_t sub_100152868()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_Notification(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_10015288C()
{
  return sub_10001A798(type metadata accessor for Proto_Gnss_Emergency_Notification);
}

uint64_t sub_100152898(char a1)
{
  return sub_10001A7CC(a1, type metadata accessor for Proto_Gnss_Emergency_Notification);
}

uint64_t (*sub_1001528A4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Notification(0LL) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1001528EC()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Notification(0LL) + 24)) != 2;
}

uint64_t sub_100152914()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_Notification(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_100152938@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_Notification(0LL);
  *(_BYTE *)(a1 + *(int *)(result + 20)) = 2;
  *(_BYTE *)(a1 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_100152974@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C620);
  __chkstk_darwin(v3);
  unint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t inited = type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0LL);
  sub_10000E6C0(v1 + *(int *)(inited + 20), (uint64_t)v5, &qword_10035C620);
  unint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0LL);
  *a1 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  *((_BYTE *)a1 + v7[6]) = 2;
  *((_BYTE *)a1 + v7[7]) = 5;
  uint64_t v8 = (void *)((char *)a1 + v7[8]);
  void *v8 = 0LL;
  v8[1] = 0LL;
  return sub_100015764((uint64_t)v5, &qword_10035C620);
}

uint64_t sub_100152A84(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension,  &qword_10035C620,  type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

void (*sub_100152AA0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C620);
  unint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_10035C620);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    *((_BYTE *)v9 + v6[6]) = 2;
    *((_BYTE *)v9 + v6[7]) = 5;
    uint64_t v11 = (void *)((char *)v9 + v6[8]);
    *uint64_t v11 = 0LL;
    v11[1] = 0LL;
    sub_100015764((uint64_t)v5, &qword_10035C620);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
  }

  return sub_100152BF0;
}

void sub_100152BF0(uint64_t a1, char a2)
{
}

BOOL sub_100152C04()
{
  return sub_100031370( &qword_10035C620,  type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension,  type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

uint64_t sub_100152C20()
{
  return sub_100031448( type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension,  &qword_10035C620,  type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

uint64_t sub_100152C3C()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0LL) + 24));
  if (v1 == 4) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_100152C64(char a1)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_100152C90(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0LL) + 24);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100152CDC()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0LL) + 24)) != 4;
}

uint64_t sub_100152D04()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 4;
  return result;
}

uint64_t sub_100152D28@<X0>(uint64_t a1@<X8>)
{
  uint64_t inited = type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0LL);
  uint64_t v3 = a1 + *(int *)(inited + 20);
  uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))( v3,  1LL,  1LL,  v4);
  *(_BYTE *)(a1 + *(int *)(inited + 24)) = 4;
  return result;
}

uint64_t sub_100152D94@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for Proto_Gnss_Emergency_SLPAddress, a1);
}

uint64_t sub_100152DA0()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0LL) + 20));
  swift_beginAccess(v1 + 16, v3, 0LL, 0LL);
  if (*(_BYTE *)(v1 + 16) == 18) {
    return 0LL;
  }
  else {
    return *(unsigned __int8 *)(v1 + 16);
  }
}

uint64_t sub_100152DF0(char a1)
{
  return sub_10016D534( a1,  type metadata accessor for Proto_Gnss_Emergency_Init,  type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass,  (void (*)(uint64_t))sub_10018E344);
}

void (*sub_100152E0C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0LL, 0LL);
  int v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 18) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_100152E88;
}

void sub_100152E88(uint64_t *a1, char a2)
{
}

BOOL sub_100152E9C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0LL) + 20));
  swift_beginAccess(v1 + 16, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 16) != 18;
}

uint64_t sub_100152EEC()
{
  return sub_10016D7B8( type metadata accessor for Proto_Gnss_Emergency_Init,  type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass,  (void (*)(uint64_t))sub_10018E344,  18);
}

uint64_t sub_100152F0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C628);
  __chkstk_darwin(v3);
  uint64_t v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v14, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_10035C628);
  uint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_QoP(0LL);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v7[5]) = 2;
  uint64_t v8 = a1 + v7[6];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v7[7];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v7[8];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  uint64_t v11 = a1 + v7[9];
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  return sub_100015764((uint64_t)v5, &qword_10035C628);
}

uint64_t sub_100153060(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C628);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10018E344(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_QoP);
  uint64_t v17 = type metadata accessor for Proto_Gnss_Emergency_QoP(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_10035C628);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__qop;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__qop,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_10035C628);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1001531E0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C628);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_QoP(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_10035C628);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    uint64_t v11 = &v9[v6[6]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[7]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[8]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    uint64_t v14 = &v9[v6[9]];
    *(_DWORD *)uint64_t v14 = 0;
    void v14[4] = 1;
    sub_100015764((uint64_t)v5, &qword_10035C628);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_QoP);
  }

  return sub_100153364;
}

void sub_100153364(uint64_t a1, char a2)
{
}

BOOL sub_100153378()
{
  return sub_10001D054( &qword_10035C628,  type metadata accessor for Proto_Gnss_Emergency_Init,  &OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__qop,  type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t sub_10015339C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_10035C628);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10018E344(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_QoP(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__qop;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__qop,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_10035C628);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1001534CC@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C620);
  __chkstk_darwin(v3);
  uint64_t v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v11, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_10035C620);
  uint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0LL);
  *a1 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  *((_BYTE *)a1 + v7[6]) = 2;
  *((_BYTE *)a1 + v7[7]) = 5;
  uint64_t v8 = (void *)((char *)a1 + v7[8]);
  void *v8 = 0LL;
  v8[1] = 0LL;
  return sub_100015764((uint64_t)v5, &qword_10035C620);
}

uint64_t sub_100153604(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C620);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10018E344(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
  uint64_t v17 = type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_10035C620);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__slpAddress;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__slpAddress,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_10035C620);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100153784(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C620);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_10035C620);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    *((_BYTE *)v9 + v6[6]) = 2;
    *((_BYTE *)v9 + v6[7]) = 5;
    uint64_t v11 = (void *)((char *)v9 + v6[8]);
    *uint64_t v11 = 0LL;
    v11[1] = 0LL;
    sub_100015764((uint64_t)v5, &qword_10035C620);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
  }

  return sub_1001538EC;
}

void sub_1001538EC(uint64_t a1, char a2)
{
}

BOOL sub_100153900()
{
  return sub_10001D054( &qword_10035C620,  type metadata accessor for Proto_Gnss_Emergency_Init,  &OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__slpAddress,  type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

uint64_t sub_100153924()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_10035C620);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10018E344(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__slpAddress;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__slpAddress,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_10035C620);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100153A54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C630);
  __chkstk_darwin(v3);
  uint64_t v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v10, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_10035C630);
  uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_Notification(0LL);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = 2;
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = 2;
  return sub_100015764((uint64_t)v5, &qword_10035C630);
}

uint64_t sub_100153B6C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C630);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10018E344(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_Notification);
  uint64_t v17 = type metadata accessor for Proto_Gnss_Emergency_Notification(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_10035C630);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__notification;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__notification,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_10035C630);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100153CEC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C630);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_Notification(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_10035C630);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    v9[*(int *)(v6 + 20)] = 2;
    v9[*(int *)(v6 + 24)] = 2;
    sub_100015764((uint64_t)v5, &qword_10035C630);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_Notification);
  }

  return sub_100153E34;
}

void sub_100153E34(uint64_t a1, char a2)
{
}

BOOL sub_100153E48()
{
  return sub_10001D054( &qword_10035C630,  type metadata accessor for Proto_Gnss_Emergency_Init,  &OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__notification,  type metadata accessor for Proto_Gnss_Emergency_Notification);
}

uint64_t sub_100153E6C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_10035C630);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10018E344(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_Notification(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__notification;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__notification,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_10035C630);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100153F9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C638);
  __chkstk_darwin(v3);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v12, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_10035C638);
  uint64_t inited = type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(inited + 20);
  uint64_t v9 = type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  *(_BYTE *)(a1 + *(int *)(inited + 24)) = 4;
  return sub_100015764((uint64_t)v5, &qword_10035C638);
}

uint64_t sub_1001540D8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C638);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10018E344(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension);
  uint64_t inited = type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(inited - 8) + 56LL))(v9, 0LL, 1LL, inited);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_10035C638);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__suplInitv2Extension;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__suplInitv2Extension,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_10035C638);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100154258(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C638);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t inited = type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0LL);
  uint64_t v7 = *(void *)(inited - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_10035C638);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, inited) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(inited + 20)];
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
    v9[*(int *)(inited + 24)] = 4;
    sub_100015764((uint64_t)v5, &qword_10035C638);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension);
  }

  return sub_1001543C4;
}

void sub_1001543C4(uint64_t a1, char a2)
{
}

BOOL sub_1001543D8()
{
  return sub_10001D054( &qword_10035C638,  type metadata accessor for Proto_Gnss_Emergency_Init,  &OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__suplInitv2Extension,  type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension);
}

uint64_t sub_1001543FC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_10035C638);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10018E344(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t inited = type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(inited - 8) + 56LL))(v4, 1LL, 1LL, inited);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__suplInitv2Extension;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__suplInitv2Extension,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_10035C638);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10015452C@<X0>(uint64_t a1@<X8>)
{
  return sub_100024054( type metadata accessor for Proto_Gnss_Emergency_Init,  &qword_100396D28,  &qword_100396D30,  (uint64_t)sub_10018E244,  a1);
}

uint64_t sub_100154550()
{
  return sub_1000365F4(&qword_100396D28, &qword_100396D30, (uint64_t)sub_10018E244);
}

uint64_t sub_10015456C()
{
  return sub_1000191E8(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t sub_100154578(int a1)
{
  return sub_100019228(a1, type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t (*sub_100154584(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0LL) + 20);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1001545D4()
{
  return sub_1000192B8(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t sub_1001545E0()
{
  return sub_1000192F4(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t sub_1001545EC()
{
  return sub_10009E808(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t sub_1001545F8(uint64_t a1, uint64_t a2)
{
  return sub_10009E868(a1, a2, type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t (*sub_100154604(uint64_t a1))(uint64_t *, char)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0LL) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  int v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }

  else
  {
    uint64_t v6 = 0LL;
    unint64_t v7 = 0xE000000000000000LL;
  }

  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v5);
  return sub_100096B94;
}

BOOL sub_10015466C()
{
  return sub_10009E920(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t sub_100154678()
{
  return sub_10009E95C(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t sub_100154684()
{
  return sub_10001A898(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t sub_100154690(char a1)
{
  return sub_10000534C(a1, type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t (*sub_10015469C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0LL) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1001546E4()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0LL) + 28)) != 2;
}

uint64_t sub_10015470C()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_SuplContext(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_100154730()
{
  return sub_10015473C(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t sub_10015473C(uint64_t (*a1)(void))
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1(0LL) + 32));
  uint64_t v3 = v2[1];
  if (v3) {
    uint64_t v4 = *v2;
  }
  else {
    uint64_t v4 = 0LL;
  }
  swift_bridgeObjectRetain(v3);
  return v4;
}

uint64_t sub_100154790(uint64_t a1, uint64_t a2)
{
  return sub_10015479C(a1, a2, type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t sub_10015479C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = (void *)(v3 + *(int *)(a3(0LL) + 32));
  uint64_t result = swift_bridgeObjectRelease(v6[1]);
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*sub_1001547E0(uint64_t a1))(uint64_t *, char)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0LL) + 32);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }

  else
  {
    uint64_t v6 = 0LL;
    unint64_t v7 = 0xE000000000000000LL;
  }

  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v5);
  return sub_100096B94;
}

BOOL sub_100154848()
{
  return sub_100154854(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

BOOL sub_100154854(uint64_t (*a1)(void))
{
  return *(void *)(v1 + *(int *)(a1(0LL) + 32) + 8) != 0LL;
}

uint64_t sub_100154884()
{
  return sub_100154890(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t sub_100154890(uint64_t (*a1)(void))
{
  uint64_t v2 = (void *)(v1 + *(int *)(a1(0LL) + 32));
  uint64_t result = swift_bridgeObjectRelease(v2[1]);
  *uint64_t v2 = 0LL;
  v2[1] = 0LL;
  return result;
}

uint64_t sub_1001548C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C640);
  __chkstk_darwin(v3);
  unint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SuplContext(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 36), (uint64_t)v5, &qword_10035C640);
  unint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_Configuration(0LL);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v7[5]) = 2;
  *(_BYTE *)(a1 + v7[6]) = 2;
  uint64_t v8 = a1 + v7[7];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  return sub_100015764((uint64_t)v5, &qword_10035C640);
}

uint64_t sub_1001549CC(uint64_t a1)
{
  return sub_10015D620( a1,  type metadata accessor for Proto_Gnss_Emergency_SuplContext,  &qword_10035C640,  type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

void (*sub_1001549E8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C640);
  unint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_Configuration(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0LL) + 36);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_10035C640);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    uint64_t v11 = &v9[v6[7]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    sub_100015764((uint64_t)v5, &qword_10035C640);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_Configuration);
  }

  return sub_100154B2C;
}

void sub_100154B2C(uint64_t a1, char a2)
{
}

BOOL sub_100154B40()
{
  return sub_10015D804( &qword_10035C640,  type metadata accessor for Proto_Gnss_Emergency_SuplContext,  type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

uint64_t sub_100154B5C()
{
  return sub_10015D8DC( type metadata accessor for Proto_Gnss_Emergency_SuplContext,  &qword_10035C640,  type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

uint64_t sub_100154B78()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0LL) + 40));
  uint64_t v2 = v1[1];
  if (v2) {
    uint64_t v3 = *v1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  swift_bridgeObjectRetain(v2);
  return v3;
}

uint64_t sub_100154BC8(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0LL) + 40));
  uint64_t result = swift_bridgeObjectRelease(v5[1]);
  *unint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_100154C0C(uint64_t a1))(uint64_t *, char)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0LL) + 40);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }

  else
  {
    uint64_t v6 = 0LL;
    unint64_t v7 = 0xE000000000000000LL;
  }

  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v5);
  return sub_100096B94;
}

BOOL sub_100154C74()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0LL) + 40) + 8) != 0LL;
}

uint64_t sub_100154CA0()
{
  uint64_t v1 = (void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0LL) + 40));
  uint64_t result = swift_bridgeObjectRelease(v1[1]);
  *uint64_t v1 = 0LL;
  v1[1] = 0LL;
  return result;
}

uint64_t sub_100154CD4()
{
  return sub_1000A3B84(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t sub_100154CE0(char a1)
{
  return sub_1000A3BB8(a1, type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t (*sub_100154CEC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0LL) + 44);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100154D34()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0LL) + 44)) != 2;
}

uint64_t sub_100154D5C()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_SuplContext(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 44)) = 2;
  return result;
}

uint64_t sub_100154D80()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0LL) + 48)) & 1;
}

uint64_t sub_100154DA4(char a1)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_SuplContext(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*sub_100154DD0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0LL) + 48);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100154E18()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0LL) + 48)) != 2;
}

uint64_t sub_100154E40()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_SuplContext(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 48)) = 2;
  return result;
}

uint64_t sub_100154E64()
{
  return sub_10017E06C(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t sub_100154E70(char a1)
{
  return sub_10017E0A0(a1, type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t (*sub_100154E7C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0LL) + 52);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100154EC4()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0LL) + 52)) != 2;
}

uint64_t sub_100154EEC()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_SuplContext(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 52)) = 2;
  return result;
}

uint64_t sub_100154F10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_SuplContext(0LL);
  uint64_t v3 = a1 + v2[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  uint64_t v4 = (void *)(a1 + v2[6]);
  *uint64_t v4 = 0LL;
  v4[1] = 0LL;
  *(_BYTE *)(a1 + v2[7]) = 2;
  unint64_t v5 = (void *)(a1 + v2[8]);
  *unint64_t v5 = 0LL;
  v5[1] = 0LL;
  uint64_t v6 = a1 + v2[9];
  uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_Configuration(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v6,  1LL,  1LL,  v7);
  uint64_t v9 = (void *)(a1 + v2[10]);
  *uint64_t v9 = 0LL;
  v9[1] = 0LL;
  *(_BYTE *)(a1 + v2[11]) = 2;
  *(_BYTE *)(a1 + v2[12]) = 2;
  *(_BYTE *)(a1 + v2[13]) = 2;
  return result;
}

uint64_t sub_100154FCC@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for Proto_Gnss_Emergency_Configuration, a1);
}

uint64_t sub_100154FD8()
{
  return sub_1001591A8(type metadata accessor for Proto_Gnss_Emergency_SessionStatus);
}

uint64_t sub_100154FE4(int a1)
{
  return sub_100168F3C( a1,  type metadata accessor for Proto_Gnss_Emergency_SessionStatus,  type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass,  (void (*)(uint64_t))sub_100191070);
}

void (*sub_100155000(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)(v5 + 16);
  if (*(_BYTE *)(v5 + 20)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_100155080;
}

void sub_100155080(uint64_t *a1, char a2)
{
}

BOOL sub_100155094()
{
  return sub_10002EE20(type metadata accessor for Proto_Gnss_Emergency_SessionStatus);
}

uint64_t sub_1001550A0()
{
  return sub_10002EE90( type metadata accessor for Proto_Gnss_Emergency_SessionStatus,  type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass,  (void (*)(uint64_t))sub_100191070);
}

uint64_t sub_1001550BC()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20));
  swift_beginAccess(v1 + 21, v3, 0LL, 0LL);
  if (*(_BYTE *)(v1 + 21) == 18) {
    return 0LL;
  }
  else {
    return *(unsigned __int8 *)(v1 + 21);
  }
}

uint64_t sub_10015510C(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_100191070(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 21, v12, 1LL, 0LL);
  *(_BYTE *)(v10 + 21) = a1;
  return result;
}

void (*sub_1001551B0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 21, v3, 0LL, 0LL);
  int v6 = *(unsigned __int8 *)(v5 + 21);
  if (v6 == 18) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10015522C;
}

void sub_10015522C(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_100191070(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_100155300()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20));
  swift_beginAccess(v1 + 21, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 21) != 18;
}

uint64_t sub_100155350()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_100191070(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 21, v10, 1LL, 0LL);
  *(_BYTE *)(v8 + 21) = 18;
  return result;
}

uint64_t sub_1001553EC()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20));
  swift_beginAccess(v1 + 22, v3, 0LL, 0LL);
  if (*(_BYTE *)(v1 + 22) == 33) {
    return 0LL;
  }
  else {
    return *(unsigned __int8 *)(v1 + 22);
  }
}

uint64_t sub_10015543C(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_100191070(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 22, v12, 1LL, 0LL);
  *(_BYTE *)(v10 + 22) = a1;
  return result;
}

void (*sub_1001554E0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 22, v3, 0LL, 0LL);
  int v6 = *(unsigned __int8 *)(v5 + 22);
  if (v6 == 33) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10015555C;
}

void sub_10015555C(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_100191070(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_100155630()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20));
  swift_beginAccess(v1 + 22, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 22) != 33;
}

uint64_t sub_100155680()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_100191070(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 22, v10, 1LL, 0LL);
  *(_BYTE *)(v8 + 22) = 33;
  return result;
}

uint64_t sub_10015571C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20));
  swift_beginAccess(v1 + 23, v3, 0LL, 0LL);
  if (*(_BYTE *)(v1 + 23) == 24) {
    return 0LL;
  }
  else {
    return *(unsigned __int8 *)(v1 + 23);
  }
}

uint64_t sub_10015576C(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_100191070(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 23, v12, 1LL, 0LL);
  *(_BYTE *)(v10 + 23) = a1;
  return result;
}

void (*sub_100155810(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 23, v3, 0LL, 0LL);
  int v6 = *(unsigned __int8 *)(v5 + 23);
  if (v6 == 24) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10015588C;
}

void sub_10015588C(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_100191070(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_100155960()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20));
  swift_beginAccess(v1 + 23, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 23) != 24;
}

uint64_t sub_1001559B0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_100191070(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 23, v10, 1LL, 0LL);
  *(_BYTE *)(v8 + 23) = 24;
  return result;
}

double sub_100155A4C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20));
  swift_beginAccess(v1 + 24, v3, 0LL, 0LL);
  double result = *(double *)(v1 + 24);
  if (*(_BYTE *)(v1 + 32)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100155AA4(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_100191070(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 24, v12, 1LL, 0LL);
  *(double *)(v10 + 24) = a1;
  *(_BYTE *)(v10 + 32) = 0;
  return result;
}

void (*sub_100155B4C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 24, v3, 0LL, 0LL);
  double v6 = *(double *)(v5 + 24);
  if (*(_BYTE *)(v5 + 32)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_100155BD0;
}

void sub_100155BD0(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 88);
    uint64_t v8 = *(void *)(v3 + 80);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_100191070(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_100155CA4()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20));
  swift_beginAccess(v1 + 24, v3, 0LL, 0LL);
  return (*(_BYTE *)(v1 + 32) & 1) == 0;
}

uint64_t sub_100155CF4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_100191070(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 24, v10, 1LL, 0LL);
  *(void *)(v8 + 24) = 0LL;
  *(_BYTE *)(v8 + 32) = 1;
  return result;
}

double sub_100155D94()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20));
  swift_beginAccess(v1 + 40, v3, 0LL, 0LL);
  double result = *(double *)(v1 + 40);
  if (*(_BYTE *)(v1 + 48)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100155DEC(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_100191070(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 40, v12, 1LL, 0LL);
  *(double *)(v10 + 40) = a1;
  *(_BYTE *)(v10 + 48) = 0;
  return result;
}

void (*sub_100155E94(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 40, v3, 0LL, 0LL);
  double v6 = *(double *)(v5 + 40);
  if (*(_BYTE *)(v5 + 48)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_100155F18;
}

void sub_100155F18(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 88);
    uint64_t v8 = *(void *)(v3 + 80);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_100191070(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_100155FEC()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20));
  swift_beginAccess(v1 + 40, v3, 0LL, 0LL);
  return (*(_BYTE *)(v1 + 48) & 1) == 0;
}

uint64_t sub_10015603C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_100191070(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 40, v10, 1LL, 0LL);
  *(void *)(v8 + 40) = 0LL;
  *(_BYTE *)(v8 + 48) = 1;
  return result;
}

double sub_1001560DC()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20));
  swift_beginAccess(v1 + 56, v3, 0LL, 0LL);
  double result = *(double *)(v1 + 56);
  if (*(_BYTE *)(v1 + 64)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100156134(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_100191070(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 56, v12, 1LL, 0LL);
  *(double *)(v10 + 56) = a1;
  *(_BYTE *)(v10 + 64) = 0;
  return result;
}

void (*sub_1001561DC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 56, v3, 0LL, 0LL);
  double v6 = *(double *)(v5 + 56);
  if (*(_BYTE *)(v5 + 64)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_100156260;
}

void sub_100156260(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 88);
    uint64_t v8 = *(void *)(v3 + 80);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_100191070(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_100156334()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20));
  swift_beginAccess(v1 + 56, v3, 0LL, 0LL);
  return (*(_BYTE *)(v1 + 64) & 1) == 0;
}

uint64_t sub_100156384()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_100191070(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 56, v10, 1LL, 0LL);
  *(void *)(v8 + 56) = 0LL;
  *(_BYTE *)(v8 + 64) = 1;
  return result;
}

double sub_100156424()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20));
  swift_beginAccess(v1 + 72, v3, 0LL, 0LL);
  double result = *(double *)(v1 + 72);
  if (*(_BYTE *)(v1 + 80)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_10015647C(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_100191070(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 72, v12, 1LL, 0LL);
  *(double *)(v10 + 72) = a1;
  *(_BYTE *)(v10 + 80) = 0;
  return result;
}

void (*sub_100156524(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 72, v3, 0LL, 0LL);
  double v6 = *(double *)(v5 + 72);
  if (*(_BYTE *)(v5 + 80)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1001565A8;
}

void sub_1001565A8(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 88);
    uint64_t v8 = *(void *)(v3 + 80);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_100191070(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_10015667C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20));
  swift_beginAccess(v1 + 72, v3, 0LL, 0LL);
  return (*(_BYTE *)(v1 + 80) & 1) == 0;
}

uint64_t sub_1001566CC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_100191070(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 72, v10, 1LL, 0LL);
  *(void *)(v8 + 72) = 0LL;
  *(_BYTE *)(v8 + 80) = 1;
  return result;
}

double sub_10015676C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20));
  swift_beginAccess(v1 + 88, v3, 0LL, 0LL);
  double result = *(double *)(v1 + 88);
  if (*(_BYTE *)(v1 + 96)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1001567C4(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_100191070(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 88, v12, 1LL, 0LL);
  *(double *)(v10 + 88) = a1;
  *(_BYTE *)(v10 + 96) = 0;
  return result;
}

void (*sub_10015686C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 88, v3, 0LL, 0LL);
  double v6 = *(double *)(v5 + 88);
  if (*(_BYTE *)(v5 + 96)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1001568F0;
}

void sub_1001568F0(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 88);
    uint64_t v8 = *(void *)(v3 + 80);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_100191070(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_1001569C4()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20));
  swift_beginAccess(v1 + 88, v3, 0LL, 0LL);
  return (*(_BYTE *)(v1 + 96) & 1) == 0;
}

uint64_t sub_100156A14()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_100191070(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 88, v10, 1LL, 0LL);
  *(void *)(v8 + 88) = 0LL;
  *(_BYTE *)(v8 + 96) = 1;
  return result;
}

double sub_100156AB4()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20));
  swift_beginAccess(v1 + 104, v3, 0LL, 0LL);
  double result = *(double *)(v1 + 104);
  if (*(_BYTE *)(v1 + 112)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100156B0C(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_100191070(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 104, v12, 1LL, 0LL);
  *(double *)(v10 + 104) = a1;
  *(_BYTE *)(v10 + 112) = 0;
  return result;
}

void (*sub_100156BB4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 104, v3, 0LL, 0LL);
  double v6 = *(double *)(v5 + 104);
  if (*(_BYTE *)(v5 + 112)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_100156C38;
}

void sub_100156C38(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 88);
    uint64_t v8 = *(void *)(v3 + 80);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_100191070(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_100156D0C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20));
  swift_beginAccess(v1 + 104, v3, 0LL, 0LL);
  return (*(_BYTE *)(v1 + 112) & 1) == 0;
}

uint64_t sub_100156D5C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_100191070(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 104, v10, 1LL, 0LL);
  *(void *)(v8 + 104) = 0LL;
  *(_BYTE *)(v8 + 112) = 1;
  return result;
}

double sub_100156DFC()
{
  return sub_100156E08(type metadata accessor for Proto_Gnss_Emergency_SessionStatus);
}

double sub_100156E08(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0LL) + 20));
  swift_beginAccess(v2 + 120, v4, 0LL, 0LL);
  double result = *(double *)(v2 + 120);
  if (*(_BYTE *)(v2 + 128)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100156E64(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_100191070(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 120, v12, 1LL, 0LL);
  *(double *)(v10 + 120) = a1;
  *(_BYTE *)(v10 + 128) = 0;
  return result;
}

void (*sub_100156F0C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 120, v3, 0LL, 0LL);
  double v6 = *(double *)(v5 + 120);
  if (*(_BYTE *)(v5 + 128)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_100156F90;
}

void sub_100156F90(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 88);
    uint64_t v8 = *(void *)(v3 + 80);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_100191070(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_100157064()
{
  return sub_100157070(type metadata accessor for Proto_Gnss_Emergency_SessionStatus);
}

BOOL sub_100157070(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0LL) + 20));
  swift_beginAccess(v2 + 120, v4, 0LL, 0LL);
  return (*(_BYTE *)(v2 + 128) & 1) == 0;
}

uint64_t sub_1001570C4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_100191070(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 120, v10, 1LL, 0LL);
  *(void *)(v8 + 120) = 0LL;
  *(_BYTE *)(v8 + 128) = 1;
  return result;
}

uint64_t sub_100157164()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20));
  swift_beginAccess(v1 + 129, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 129) & 1;
}

uint64_t sub_1001571B0(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_100191070(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 129, v12, 1LL, 0LL);
  *(_BYTE *)(v10 + 129) = a1 & 1;
  return result;
}

void (*sub_100157258(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 129, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 129) & 1;
  return sub_1001572D0;
}

void sub_1001572D0(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_100191070(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_10015739C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20));
  swift_beginAccess(v1 + 129, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 129) != 2;
}

uint64_t sub_1001573EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_100191070(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 129, v10, 1LL, 0LL);
  *(_BYTE *)(v8 + 129) = 2;
  return result;
}

uint64_t sub_100157488()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20));
  swift_beginAccess(v1 + 130, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 130) & 1;
}

uint64_t sub_1001574D4(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_100191070(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 130, v12, 1LL, 0LL);
  *(_BYTE *)(v10 + 130) = a1 & 1;
  return result;
}

void (*sub_10015757C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 130, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 130) & 1;
  return sub_1001575F4;
}

void sub_1001575F4(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_100191070(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_1001576C0()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20));
  swift_beginAccess(v1 + 130, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 130) != 2;
}

uint64_t sub_100157710()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_100191070(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 130, v10, 1LL, 0LL);
  *(_BYTE *)(v8 + 130) = 2;
  return result;
}

uint64_t sub_1001577AC()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20));
  swift_beginAccess(v1 + 131, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 131) & 1;
}

uint64_t sub_1001577F8(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_100191070(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 131, v12, 1LL, 0LL);
  *(_BYTE *)(v10 + 131) = a1 & 1;
  return result;
}

void (*sub_1001578A0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 131, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 131) & 1;
  return sub_100157918;
}

void sub_100157918(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_100191070(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_1001579E4()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20));
  swift_beginAccess(v1 + 131, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 131) != 2;
}

uint64_t sub_100157A34()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_100191070(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 131, v10, 1LL, 0LL);
  *(_BYTE *)(v8 + 131) = 2;
  return result;
}

uint64_t sub_100157AD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C648);
  __chkstk_darwin(v3);
  uint64_t v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v17, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_10035C648);
  uint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  uint64_t v11 = a1 + v7[8];
  *(void *)uint64_t v11 = 0LL;
  *(_BYTE *)(v11 + 8) = 1;
  uint64_t v12 = a1 + v7[9];
  *(void *)uint64_t v12 = 0LL;
  *(_BYTE *)(v12 + 8) = 1;
  uint64_t v13 = a1 + v7[10];
  *(_DWORD *)uint64_t v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  uint64_t v14 = a1 + v7[11];
  *(_DWORD *)uint64_t v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  return sub_100015764((uint64_t)v5, &qword_10035C648);
}

int *sub_100157C48@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation(0LL);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(void *)uint64_t v4 = 0LL;
  *(_BYTE *)(v4 + 8) = 1;
  uint64_t v5 = a1 + result[7];
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + 8) = 1;
  uint64_t v6 = a1 + result[8];
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  uint64_t v7 = a1 + result[9];
  *(void *)uint64_t v7 = 0LL;
  *(_BYTE *)(v7 + 8) = 1;
  uint64_t v8 = a1 + result[10];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + result[11];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  return result;
}

uint64_t sub_100157CE4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C648);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_100191070(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation);
  uint64_t v17 = type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_10035C648);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefLocation;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefLocation,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_10035C648);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100157E64(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C648);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_10035C648);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0LL;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    uint64_t v14 = &v9[v6[8]];
    *(void *)uint64_t v14 = 0LL;
    void v14[8] = 1;
    uint64_t v15 = &v9[v6[9]];
    *(void *)uint64_t v15 = 0LL;
    v15[8] = 1;
    uint64_t v16 = &v9[v6[10]];
    *(_DWORD *)uint64_t v16 = 0;
    v16[4] = 1;
    uint64_t v17 = &v9[v6[11]];
    *(_DWORD *)uint64_t v17 = 0;
    v17[4] = 1;
    sub_100015764((uint64_t)v5, &qword_10035C648);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation);
  }

  return sub_10015800C;
}

void sub_10015800C(uint64_t a1, char a2)
{
}

BOOL sub_100158020()
{
  return sub_10001D054( &qword_10035C648,  type metadata accessor for Proto_Gnss_Emergency_SessionStatus,  &OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefLocation,  type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation);
}

uint64_t sub_100158044()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_10035C648);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_100191070(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefLocation;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefLocation,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_10035C648);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100158174@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C650);
  __chkstk_darwin(v3);
  uint64_t v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v13, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_10035C650);
  uint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v7[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = 1;
  return sub_100015764((uint64_t)v5, &qword_10035C650);
}

int *sub_1001582AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime(0LL);
  uint64_t v3 = a1 + result[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  uint64_t v4 = a1 + result[6];
  *(_DWORD *)uint64_t v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  uint64_t v5 = a1 + result[7];
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + 8) = 1;
  return result;
}

uint64_t sub_100158308(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C650);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_100191070(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime);
  uint64_t v17 = type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_10035C650);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefTime;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefTime,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_10035C650);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100158488(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C650);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_10035C650);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0LL;
    v13[8] = 1;
    sub_100015764((uint64_t)v5, &qword_10035C650);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime);
  }

  return sub_1001585F0;
}

void sub_1001585F0(uint64_t a1, char a2)
{
}

BOOL sub_100158604()
{
  return sub_10001D054( &qword_10035C650,  type metadata accessor for Proto_Gnss_Emergency_SessionStatus,  &OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefTime,  type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime);
}

uint64_t sub_100158628()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_10035C650);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_100191070(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefTime;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefTime,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_10035C650);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100158758@<X0>(uint64_t a1@<X8>)
{
  return sub_100024054( type metadata accessor for Proto_Gnss_Emergency_SessionStatus,  &qword_100396D48,  &qword_100396D50,  (uint64_t)sub_100190F74,  a1);
}

uint64_t sub_10015877C()
{
  return sub_1000365F4(&qword_100396D48, &qword_100396D50, (uint64_t)sub_100190F74);
}

uint64_t sub_100158798()
{
  return sub_1000191E8(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t sub_1001587A4(int a1)
{
  return sub_100019228(a1, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t (*sub_1001587B0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime(0LL) + 20);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100158800()
{
  return sub_1000192B8(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t sub_10015880C()
{
  return sub_1000192F4(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t sub_100158818()
{
  return sub_10002DF9C(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t sub_100158824(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t (*sub_100158830(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100158880()
{
  return sub_1000277C8(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t sub_10015888C()
{
  return sub_100027804(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t sub_100158898@<X0>(uint64_t a1@<X8>)
{
  return sub_10015AC98(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime, a1);
}

uint64_t sub_1001588A4@<X0>(uint64_t a1@<X8>)
{
  return sub_100170F80( &qword_10035C658,  type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime,  type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime,  a1);
}

uint64_t sub_1001588C0(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime,  &qword_10035C658,  type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

void (*sub_1001588DC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C658);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_10035C658);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    sub_100015764((uint64_t)v5, &qword_10035C658);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
  }

  return sub_100158A1C;
}

void sub_100158A1C(uint64_t a1, char a2)
{
}

BOOL sub_100158A30()
{
  return sub_100031370( &qword_10035C658,  type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime,  type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t sub_100158A4C()
{
  return sub_100031448( type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime,  &qword_10035C658,  type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t sub_100158A68()
{
  return sub_10002DF9C(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t sub_100158A74(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t (*sub_100158A80(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100158AD0()
{
  return sub_1000277C8(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t sub_100158ADC()
{
  return sub_100027804(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t sub_100158AE8()
{
  return sub_1000B8E14(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t sub_100158AF4(int a1)
{
  return sub_1000B8E54(a1, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t (*sub_100158B00(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0LL) + 28);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100158B50()
{
  return sub_100020BD0(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t sub_100158B5C()
{
  return sub_100020C0C(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t sub_100158B68()
{
  return sub_1000A9EA0(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t sub_100158B74(int a1)
{
  return sub_1000A9EE0(a1, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t (*sub_100158B80(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0LL) + 32);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100158BD0()
{
  return sub_100027938(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t sub_100158BDC()
{
  return sub_100027974(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t sub_100158BE8()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0LL) + 36));
  if (v1 == 5) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_100158C10(char a1)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_100158C3C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0LL) + 36);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100158C88()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0LL) + 36)) != 5;
}

uint64_t sub_100158CB0()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 5;
  return result;
}

uint64_t sub_100158CD4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0LL);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))( v3,  1LL,  1LL,  v4);
  uint64_t v6 = a1 + v2[6];
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  uint64_t v7 = a1 + v2[7];
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  uint64_t v8 = a1 + v2[8];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  *(_BYTE *)(a1 + v2[9]) = 5;
  return result;
}

uint64_t sub_100158D74@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime, a1);
}

uint64_t sub_100158D80()
{
  return sub_1000191E8(type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t sub_100158D8C(int a1)
{
  return sub_100019228(a1, type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t (*sub_100158D98(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Plmn(0LL) + 20);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100158DE8()
{
  return sub_1000192B8(type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t sub_100158DF4()
{
  return sub_1000192F4(type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t sub_100158E00()
{
  return sub_10002DF9C(type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t sub_100158E0C(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t (*sub_100158E18(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Plmn(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100158E68()
{
  return sub_1000277C8(type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t sub_100158E74()
{
  return sub_100027804(type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t sub_100158E80()
{
  return sub_1000B8E14(type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t sub_100158E8C(int a1)
{
  return sub_1000B8E54(a1, type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t (*sub_100158E98(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Plmn(0LL) + 28);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100158EE8()
{
  return sub_100020BD0(type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t sub_100158EF4()
{
  return sub_100020C0C(type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

int *sub_100158F00@<X0>(uint64_t a1@<X8>)
{
  return sub_10015BD5C(type metadata accessor for Proto_Gnss_Emergency_Plmn, a1);
}

uint64_t sub_100158F0C()
{
  return sub_10015B754(type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
}

uint64_t sub_100158F18(char a1)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_100158F44(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0LL) + 20);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100158F90()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0LL) + 20)) != 6;
}

uint64_t sub_100158FB8()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 6;
  return result;
}

uint64_t sub_100158FDC()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0LL) + 24));
  if (v1 == 7) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_100159004(char a1)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_100159030(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0LL) + 24);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 7) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10015907C()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0LL) + 24)) != 7;
}

uint64_t sub_1001590A4()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 7;
  return result;
}

uint64_t sub_1001590C8()
{
  return sub_1000B8E14(type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
}

uint64_t sub_1001590D4(int a1)
{
  return sub_1000B8E54(a1, type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
}

uint64_t (*sub_1001590E0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0LL) + 28);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100159130()
{
  return sub_100020BD0(type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
}

uint64_t sub_10015913C()
{
  return sub_100020C0C(type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
}

int *sub_100159148@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0LL);
  *(_BYTE *)(a1 + result[5]) = 6;
  *(_BYTE *)(a1 + result[6]) = 7;
  uint64_t v3 = a1 + result[7];
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

uint64_t sub_10015919C()
{
  return sub_1001591A8(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_1001591A8(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0LL) + 20));
  swift_beginAccess(v2 + 16, v4, 0LL, 0LL);
  if (*(_BYTE *)(v2 + 20)) {
    return 0LL;
  }
  else {
    return *(unsigned int *)(v2 + 16);
  }
}

uint64_t sub_100159200(int a1)
{
  return sub_10017317C( a1,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass,  133LL,  (void (*)(uint64_t))sub_1001C2CE4);
}

void (*sub_100159220(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)(v5 + 16);
  if (*(_BYTE *)(v5 + 20)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1001592A0;
}

void sub_1001592A0(uint64_t *a1, char a2)
{
}

BOOL sub_1001592B8()
{
  return sub_10002EE20(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_1001592C4()
{
  return sub_1001733D0( type metadata accessor for Proto_Gnss_Emergency_PositionRequest,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass,  133LL,  (void (*)(uint64_t))sub_1001C2CE4);
}

uint64_t sub_1001592E4()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0LL) + 20));
  swift_beginAccess(v1 + 21, v3, 0LL, 0LL);
  if (*(_BYTE *)(v1 + 21) == 5) {
    return 0LL;
  }
  else {
    return *(unsigned __int8 *)(v1 + 21);
  }
}

uint64_t sub_100159334(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 133LL, 7LL);
    sub_1001C2CE4(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 21, v11, 1LL, 0LL);
  *(_BYTE *)(v9 + 21) = a1;
  return result;
}

void (*sub_1001593D0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 21, v3, 0LL, 0LL);
  int v6 = *(unsigned __int8 *)(v5 + 21);
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10015944C;
}

void sub_10015944C(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 133LL, 7LL);
    sub_1001C2CE4(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_100159518()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0LL) + 20));
  swift_beginAccess(v1 + 21, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 21) != 5;
}

uint64_t sub_100159568()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 133LL, 7LL);
    sub_1001C2CE4(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 21, v9, 1LL, 0LL);
  *(_BYTE *)(v7 + 21) = 5;
  return result;
}

uint64_t sub_1001595FC()
{
  return sub_10016918C(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159608(int a1)
{
  return sub_1001734AC( a1,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass,  133LL,  (void (*)(uint64_t))sub_1001C2CE4);
}

void (*sub_100159628(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 24, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)(v5 + 24);
  if (*(_BYTE *)(v5 + 28)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1001596A8;
}

void sub_1001596A8(uint64_t *a1, char a2)
{
}

BOOL sub_1001596C0()
{
  return sub_1001693EC(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_1001596CC()
{
  return sub_100173700( type metadata accessor for Proto_Gnss_Emergency_PositionRequest,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass,  133LL,  (void (*)(uint64_t))sub_1001C2CE4);
}

uint64_t sub_1001596EC()
{
  return sub_1001694EC(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_1001596F8(int a1)
{
  return sub_1001737DC( a1,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass,  133LL,  (void (*)(uint64_t))sub_1001C2CE4);
}

void (*sub_100159718(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 32, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)(v5 + 32);
  if (*(_BYTE *)(v5 + 36)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_100159798;
}

void sub_100159798(uint64_t *a1, char a2)
{
}

BOOL sub_1001597B0()
{
  return sub_10016974C(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_1001597BC()
{
  return sub_100173A30( type metadata accessor for Proto_Gnss_Emergency_PositionRequest,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass,  133LL,  (void (*)(uint64_t))sub_1001C2CE4);
}

uint64_t sub_1001597DC()
{
  return sub_10016984C(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_1001597E8(int a1)
{
  return sub_100173B0C( a1,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass,  133LL,  (void (*)(uint64_t))sub_1001C2CE4);
}

void (*sub_100159808(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 40, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)(v5 + 40);
  if (*(_BYTE *)(v5 + 44)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_100159888;
}

void sub_100159888(uint64_t *a1, char a2)
{
}

BOOL sub_1001598A0()
{
  return sub_100169AAC(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_1001598AC()
{
  return sub_100173D60( type metadata accessor for Proto_Gnss_Emergency_PositionRequest,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass,  133LL,  (void (*)(uint64_t))sub_1001C2CE4);
}

uint64_t sub_1001598CC()
{
  return sub_100173E1C(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_1001598D8(int a1)
{
  return sub_100173E94( a1,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass,  133LL,  (void (*)(uint64_t))sub_1001C2CE4);
}

void (*sub_1001598F8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 48, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)(v5 + 48);
  if (*(_BYTE *)(v5 + 52)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_100159978;
}

void sub_100159978(uint64_t *a1, char a2)
{
}

BOOL sub_100159990()
{
  return sub_1001740C8(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_10015999C()
{
  return sub_10017413C( type metadata accessor for Proto_Gnss_Emergency_PositionRequest,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass,  133LL,  (void (*)(uint64_t))sub_1001C2CE4);
}

uint64_t sub_1001599BC()
{
  return sub_1001741F8(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_1001599C8(int a1)
{
  return sub_100174270( a1,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass,  133LL,  (void (*)(uint64_t))sub_1001C2CE4);
}

void (*sub_1001599E8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 56, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)(v5 + 56);
  if (*(_BYTE *)(v5 + 60)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_100159A68;
}

void sub_100159A68(uint64_t *a1, char a2)
{
}

BOOL sub_100159A80()
{
  return sub_1001744A4(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159A8C()
{
  return sub_100174518( type metadata accessor for Proto_Gnss_Emergency_PositionRequest,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass,  133LL,  (void (*)(uint64_t))sub_1001C2CE4);
}

uint64_t sub_100159AAC()
{
  return sub_1001745D4(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159AB8(int a1)
{
  return sub_10017464C( a1,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass,  133LL,  (void (*)(uint64_t))sub_1001C2CE4);
}

void (*sub_100159AD8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 64, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)(v5 + 64);
  if (*(_BYTE *)(v5 + 68)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_100159B58;
}

void sub_100159B58(uint64_t *a1, char a2)
{
}

BOOL sub_100159B70()
{
  return sub_100174880(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159B7C()
{
  return sub_1001748F4( type metadata accessor for Proto_Gnss_Emergency_PositionRequest,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass,  133LL,  (void (*)(uint64_t))sub_1001C2CE4);
}

uint64_t sub_100159B9C()
{
  return sub_1001749B0(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159BA8(int a1)
{
  return sub_100174A28( a1,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass,  133LL,  (void (*)(uint64_t))sub_1001C2CE4);
}

void (*sub_100159BC8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 72, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)(v5 + 72);
  if (*(_BYTE *)(v5 + 76)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_100159C48;
}

void sub_100159C48(uint64_t *a1, char a2)
{
}

BOOL sub_100159C60()
{
  return sub_100174C5C(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159C6C()
{
  return sub_100174CD0( type metadata accessor for Proto_Gnss_Emergency_PositionRequest,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass,  133LL,  (void (*)(uint64_t))sub_1001C2CE4);
}

uint64_t sub_100159C8C()
{
  return sub_100174D8C(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159C98(int a1)
{
  return sub_100174E04( a1,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass,  133LL,  (void (*)(uint64_t))sub_1001C2CE4);
}

void (*sub_100159CB8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 80, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)(v5 + 80);
  if (*(_BYTE *)(v5 + 84)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_100159D38;
}

void sub_100159D38(uint64_t *a1, char a2)
{
}

BOOL sub_100159D50()
{
  return sub_100175038(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159D5C()
{
  return sub_1001750AC( type metadata accessor for Proto_Gnss_Emergency_PositionRequest,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass,  133LL,  (void (*)(uint64_t))sub_1001C2CE4);
}

uint64_t sub_100159D7C()
{
  return sub_100175168(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159D88(int a1)
{
  return sub_1001751E0( a1,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass,  133LL,  (void (*)(uint64_t))sub_1001C2CE4);
}

void (*sub_100159DA8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 88, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)(v5 + 88);
  if (*(_BYTE *)(v5 + 92)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_100159E28;
}

void sub_100159E28(uint64_t *a1, char a2)
{
}

BOOL sub_100159E40()
{
  return sub_100175414(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159E4C()
{
  return sub_100175488( type metadata accessor for Proto_Gnss_Emergency_PositionRequest,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass,  133LL,  (void (*)(uint64_t))sub_1001C2CE4);
}

uint64_t sub_100159E6C()
{
  return sub_100175544(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159E78(int a1)
{
  return sub_1001755BC( a1,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass,  133LL,  (void (*)(uint64_t))sub_1001C2CE4);
}

void (*sub_100159E98(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 96, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)(v5 + 96);
  if (*(_BYTE *)(v5 + 100)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_100159F18;
}

void sub_100159F18(uint64_t *a1, char a2)
{
}

BOOL sub_100159F30()
{
  return sub_1001757F0(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159F3C()
{
  return sub_100175864( type metadata accessor for Proto_Gnss_Emergency_PositionRequest,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass,  133LL,  (void (*)(uint64_t))sub_1001C2CE4);
}

uint64_t sub_100159F5C()
{
  return sub_100175920(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159F68(int a1)
{
  return sub_100175998( a1,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass,  133LL,  (void (*)(uint64_t))sub_1001C2CE4);
}

void (*sub_100159F88(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 104, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)(v5 + 104);
  if (*(_BYTE *)(v5 + 108)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_10015A008;
}

void sub_10015A008(uint64_t *a1, char a2)
{
}

BOOL sub_10015A020()
{
  return sub_100175BCC(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_10015A02C()
{
  return sub_100175C40( type metadata accessor for Proto_Gnss_Emergency_PositionRequest,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass,  133LL,  (void (*)(uint64_t))sub_1001C2CE4);
}

uint64_t sub_10015A04C()
{
  return sub_100175CFC(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_10015A058(int a1)
{
  return sub_100175D74( a1,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass,  133LL,  (void (*)(uint64_t))sub_1001C2CE4);
}

void (*sub_10015A078(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 112, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)(v5 + 112);
  if (*(_BYTE *)(v5 + 116)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_10015A0F8;
}

void sub_10015A0F8(uint64_t *a1, char a2)
{
}

BOOL sub_10015A110()
{
  return sub_100175FA8(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_10015A11C()
{
  return sub_10017601C( type metadata accessor for Proto_Gnss_Emergency_PositionRequest,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass,  133LL,  (void (*)(uint64_t))sub_1001C2CE4);
}

uint64_t sub_10015A13C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0LL) + 20));
  swift_beginAccess(v1 + 117, v3, 0LL, 0LL);
  if (*(_BYTE *)(v1 + 117) == 7) {
    return 0LL;
  }
  else {
    return *(unsigned __int8 *)(v1 + 117);
  }
}

uint64_t sub_10015A18C(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass();
    uint64_t v7 = swift_allocObject(v6, 133LL, 7LL);
    sub_1001C2CE4(v5);
    uint64_t v8 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v8);
  }

  uint64_t v9 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v9 + 117, v11, 1LL, 0LL);
  *(_BYTE *)(v9 + 117) = a1;
  return result;
}

void (*sub_10015A228(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 117, v3, 0LL, 0LL);
  int v6 = *(unsigned __int8 *)(v5 + 117);
  if (v6 == 7) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_10015A2A4;
}

void sub_10015A2A4(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass();
    uint64_t v11 = swift_allocObject(v10, 133LL, 7LL);
    sub_1001C2CE4(v9);
    uint64_t v12 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v12);
  }

BOOL sub_10015A370()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0LL) + 20));
  swift_beginAccess(v1 + 117, v3, 0LL, 0LL);
  return *(_BYTE *)(v1 + 117) != 7;
}

uint64_t sub_10015A3C0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass();
    uint64_t v5 = swift_allocObject(v4, 133LL, 7LL);
    sub_1001C2CE4(v3);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v6);
  }

  uint64_t v7 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v7 + 117, v9, 1LL, 0LL);
  *(_BYTE *)(v7 + 117) = 7;
  return result;
}

uint64_t sub_10015A454()
{
  return sub_1001760D8(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_10015A460(int a1)
{
  return sub_100176150( a1,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass,  133LL,  (void (*)(uint64_t))sub_1001C2CE4);
}

void (*sub_10015A480(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 120, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)(v5 + 120);
  if (*(_BYTE *)(v5 + 124)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_10015A500;
}

void sub_10015A500(uint64_t *a1, char a2)
{
}

BOOL sub_10015A518()
{
  return sub_100176384(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_10015A524()
{
  return sub_1001763F8( type metadata accessor for Proto_Gnss_Emergency_PositionRequest,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass,  133LL,  (void (*)(uint64_t))sub_1001C2CE4);
}

uint64_t sub_10015A544()
{
  return sub_1001764B4(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_10015A550(int a1)
{
  return sub_10017652C( a1,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass,  133LL,  (void (*)(uint64_t))sub_1001C2CE4);
}

void (*sub_10015A570(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 128, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)(v5 + 128);
  if (*(_BYTE *)(v5 + 132)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_10015A5F0;
}

void sub_10015A5F0(uint64_t *a1, char a2)
{
}

BOOL sub_10015A608()
{
  return sub_100176760(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_10015A614()
{
  return sub_1001767D4( type metadata accessor for Proto_Gnss_Emergency_PositionRequest,  type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass,  133LL,  (void (*)(uint64_t))sub_1001C2CE4);
}

uint64_t sub_10015A634@<X0>(uint64_t a1@<X8>)
{
  return sub_100024054( type metadata accessor for Proto_Gnss_Emergency_PositionRequest,  &qword_100396D80,  &qword_100396D88,  (uint64_t)sub_1001947F8,  a1);
}

uint64_t sub_10015A658()
{
  return sub_1000365F4(&qword_100396D80, &qword_100396D88, (uint64_t)sub_1001947F8);
}

uint64_t sub_10015A674@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C660);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_10035C660);
  uint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  uint64_t v9 = type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  uint64_t v10 = a1 + v7[6];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  uint64_t v11 = a1 + v7[7];
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  uint64_t v12 = a1 + v7[8];
  *(_DWORD *)uint64_t v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  *(_BYTE *)(a1 + v7[9]) = 5;
  return sub_100015764((uint64_t)v5, &qword_10035C660);
}

uint64_t sub_10015A7C4(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured,  &qword_10035C660,  type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

void (*sub_10015A7E0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C660);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_10035C660);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
    uint64_t v13 = &v9[v6[6]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    uint64_t v14 = &v9[v6[7]];
    *(_DWORD *)uint64_t v14 = 0;
    void v14[4] = 1;
    uint64_t v15 = &v9[v6[8]];
    *(_DWORD *)uint64_t v15 = 0;
    v15[4] = 1;
    v9[v6[9]] = 5;
    sub_100015764((uint64_t)v5, &qword_10035C660);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
  }

  return sub_10015A968;
}

void sub_10015A968(uint64_t a1, char a2)
{
}

BOOL sub_10015A97C()
{
  return sub_100031370( &qword_10035C660,  type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured,  type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t sub_10015A998()
{
  return sub_100031448( type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured,  &qword_10035C660,  type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t sub_10015A9B4@<X0>(uint64_t a1@<X8>)
{
  return sub_10015B120( &qword_10035C658,  type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured,  type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime,  a1);
}

uint64_t sub_10015A9D0(uint64_t a1)
{
  return sub_1000308E8( a1,  type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured,  &qword_10035C658,  type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

void (*sub_10015A9EC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C658);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_10035C658);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    sub_100015764((uint64_t)v5, &qword_10035C658);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
  }

  return sub_100158A1C;
}

BOOL sub_10015AB2C()
{
  return sub_100019928( &qword_10035C658,  type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured,  type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t sub_10015AB48()
{
  return sub_100019A00( type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured,  &qword_10035C658,  type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t sub_10015AB64@<X0>(uint64_t a1@<X8>)
{
  return sub_1001719A4( type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured,  type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime,  type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime,  a1);
}

uint64_t sub_10015AB80@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime, a1);
}

uint64_t sub_10015AB8C()
{
  return sub_1000191E8(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

uint64_t sub_10015AB98(int a1)
{
  return sub_100019228(a1, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

uint64_t (*sub_10015ABA4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased(0LL) + 20);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015ABF4()
{
  return sub_1000192B8(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

uint64_t sub_10015AC00()
{
  return sub_1000192F4(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

uint64_t sub_10015AC0C()
{
  return sub_10002DF9C(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

uint64_t sub_10015AC18(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

uint64_t (*sub_10015AC24(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015AC74()
{
  return sub_1000277C8(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

uint64_t sub_10015AC80()
{
  return sub_100027804(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

uint64_t sub_10015AC8C@<X0>(uint64_t a1@<X8>)
{
  return sub_10015AC98(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased, a1);
}

uint64_t sub_10015AC98@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = a1(0LL);
  uint64_t v5 = a2 + *(int *)(result + 20);
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  uint64_t v6 = a2 + *(int *)(result + 24);
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  return result;
}

uint64_t sub_10015ACE8()
{
  return sub_1000191E8(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

uint64_t sub_10015ACF4(int a1)
{
  return sub_100019228(a1, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

uint64_t (*sub_10015AD00(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted(0LL) + 20);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015AD50()
{
  return sub_1000192B8(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

uint64_t sub_10015AD5C()
{
  return sub_1000192F4(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

uint64_t sub_10015AD68()
{
  return sub_10002DF9C(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

uint64_t sub_10015AD74(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

uint64_t (*sub_10015AD80(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015ADD0()
{
  return sub_1000277C8(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

uint64_t sub_10015ADDC()
{
  return sub_100027804(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

uint64_t sub_10015ADE8@<X0>(uint64_t a1@<X8>)
{
  return sub_10015AC98(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted, a1);
}

uint64_t sub_10015ADF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C668);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_10035C668);
  uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  uint64_t v9 = type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  uint64_t v10 = a1 + *(int *)(v7 + 24);
  uint64_t v11 = type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v10, 1LL, 1LL, v11);
  return sub_100015764((uint64_t)v5, &qword_10035C668);
}

uint64_t sub_10015AF28(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured,  &qword_10035C668,  type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured);
}

void (*sub_10015AF44(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C668);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_10035C668);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
    uint64_t v13 = &v9[*(int *)(v6 + 24)];
    uint64_t v14 = type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
    sub_100015764((uint64_t)v5, &qword_10035C668);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured);
  }

  return sub_10015B0B8;
}

void sub_10015B0B8(uint64_t a1, char a2)
{
}

BOOL sub_10015B0CC()
{
  return sub_100031370( &qword_10035C668,  type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured,  type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured);
}

uint64_t sub_10015B0E8()
{
  return sub_100031448( type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured,  &qword_10035C668,  type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured);
}

uint64_t sub_10015B104@<X0>(uint64_t a1@<X8>)
{
  return sub_10015B120( &qword_10035C670,  type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured,  type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased,  a1);
}

uint64_t sub_10015B120@<X0>( uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = sub_100003A0C(a1);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a2(0LL);
  sub_10000E6C0(v4 + *(int *)(v12 + 24), (uint64_t)v11, a1);
  uint64_t v13 = a3(0LL);
  UnknownStorage.init()();
  uint64_t v14 = a4 + *(int *)(v13 + 20);
  *(_DWORD *)uint64_t v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  uint64_t v15 = a4 + *(int *)(v13 + 24);
  *(_DWORD *)uint64_t v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  return sub_100015764((uint64_t)v11, a1);
}

uint64_t sub_10015B220(uint64_t a1)
{
  return sub_1000308E8( a1,  type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured,  &qword_10035C670,  type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

void (*sub_10015B23C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C670);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_10035C670);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    sub_100015764((uint64_t)v5, &qword_10035C670);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
  }

  return sub_10015B37C;
}

void sub_10015B37C(uint64_t a1, char a2)
{
}

BOOL sub_10015B390()
{
  return sub_100019928( &qword_10035C670,  type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured,  type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

uint64_t sub_10015B3AC()
{
  return sub_100019A00( type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured,  &qword_10035C670,  type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

uint64_t sub_10015B3C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C678);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_10035C678);
  uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + *(int *)(v7 + 24);
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  return sub_100015764((uint64_t)v5, &qword_10035C678);
}

uint64_t sub_10015B4C8(uint64_t a1)
{
  return sub_100030C2C( a1,  type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured,  &qword_10035C678,  type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

void (*sub_10015B4E4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C678);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_10035C678);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    sub_100015764((uint64_t)v5, &qword_10035C678);
  }

  else
  {
    sub_100003E68( (uint64_t)v5,  (uint64_t)v9,  type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
  }

  return sub_10015B624;
}

void sub_10015B624(uint64_t a1, char a2)
{
}

BOOL sub_10015B638()
{
  return sub_10002D37C( &qword_10035C678,  type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured,  type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

uint64_t sub_10015B654()
{
  return sub_10002D454( type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured,  &qword_10035C678,  type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

uint64_t sub_10015B670@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured(0LL);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  uint64_t v5 = a1 + v2[6];
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
  uint64_t v7 = a1 + v2[7];
  uint64_t v8 = type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 1LL, 1LL, v8);
}

uint64_t sub_10015B724@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured, a1);
}

uint64_t sub_10015B730@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased, a1);
}

uint64_t sub_10015B73C@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted, a1);
}

uint64_t sub_10015B748()
{
  return sub_10015B754(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams);
}

uint64_t sub_10015B754(uint64_t (*a1)(void))
{
  unsigned int v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0LL) + 20));
  if (v2 == 6) {
    return 0LL;
  }
  else {
    return v2;
  }
}

uint64_t sub_10015B780(char a1)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_10015B7AC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams(0LL) + 20);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10015B7F8()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams(0LL) + 20)) != 6;
}

uint64_t sub_10015B820()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 6;
  return result;
}

uint64_t sub_10015B844@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C680);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_10035C680);
  uint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  uint64_t v9 = type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  uint64_t v10 = a1 + v7[6];
  uint64_t v11 = type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v10, 1LL, 1LL, v11);
  uint64_t v12 = a1 + v7[7];
  uint64_t v13 = type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
  return sub_100015764((uint64_t)v5, &qword_10035C680);
}

uint64_t sub_10015B9A4(uint64_t a1)
{
  return sub_1000308E8( a1,  type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams,  &qword_10035C680,  type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured);
}

void (*sub_10015B9C0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C680);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_10035C680);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
    uint64_t v13 = &v9[v6[6]];
    uint64_t v14 = type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
    uint64_t v15 = &v9[v6[7]];
    uint64_t v16 = type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v15, 1LL, 1LL, v16);
    sub_100015764((uint64_t)v5, &qword_10035C680);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured);
  }

  return sub_10015BB60;
}

void sub_10015BB60(uint64_t a1, char a2)
{
}

BOOL sub_10015BB74()
{
  return sub_100019928( &qword_10035C680,  type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams,  type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured);
}

uint64_t sub_10015BB90()
{
  return sub_100019A00( type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams,  &qword_10035C680,  type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured);
}

uint64_t sub_10015BBAC@<X0>(uint64_t a1@<X8>)
{
  return sub_10015F540( type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams,  6,  type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured,  a1);
}

uint64_t sub_10015BBC4@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured, a1);
}

uint64_t sub_10015BBD0()
{
  return sub_1000191E8(type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t sub_10015BBDC(int a1)
{
  return sub_100019228(a1, type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t (*sub_10015BBE8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0LL) + 20);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015BC38()
{
  return sub_1000192B8(type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t sub_10015BC44()
{
  return sub_1000192F4(type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t sub_10015BC50()
{
  return sub_10002DF9C(type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t sub_10015BC5C(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t (*sub_10015BC68(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015BCB8()
{
  return sub_1000277C8(type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t sub_10015BCC4()
{
  return sub_100027804(type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t sub_10015BCD0()
{
  return sub_1000B8E14(type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t sub_10015BCDC(int a1)
{
  return sub_1000B8E54(a1, type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t (*sub_10015BCE8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0LL) + 28);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015BD38()
{
  return sub_100020BD0(type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t sub_10015BD44()
{
  return sub_100020C0C(type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

int *sub_10015BD50@<X0>(uint64_t a1@<X8>)
{
  return sub_10015BD5C(type metadata accessor for Proto_Gnss_Emergency_GpsTOD, a1);
}

int *sub_10015BD5C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (int *)a1(0LL);
  uint64_t v5 = a2 + result[5];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  uint64_t v6 = a2 + result[6];
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  uint64_t v7 = a2 + result[7];
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  return result;
}

uint64_t sub_10015BDBC()
{
  return sub_1000191E8(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t sub_10015BDC8(int a1)
{
  return sub_100019228(a1, type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t (*sub_10015BDD4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0LL) + 20);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015BE24()
{
  return sub_1000192B8(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t sub_10015BE30()
{
  return sub_1000192F4(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t sub_10015BE3C()
{
  return sub_10002DF9C(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t sub_10015BE48(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t (*sub_10015BE54(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015BEA4()
{
  return sub_1000277C8(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t sub_10015BEB0()
{
  return sub_100027804(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t sub_10015BEBC()
{
  return sub_1000B8E14(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t sub_10015BEC8(int a1)
{
  return sub_1000B8E54(a1, type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t (*sub_10015BED4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0LL) + 28);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015BF24()
{
  return sub_100020BD0(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t sub_10015BF30()
{
  return sub_100020C0C(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t sub_10015BF3C()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0LL) + 32));
  if (v1 == 4) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_10015BF64(char a1)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_10015BF90(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0LL) + 32);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10015BFDC()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0LL) + 32)) != 4;
}

uint64_t sub_10015C004()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 4;
  return result;
}

uint64_t sub_10015C028()
{
  return sub_1000B5040(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t sub_10015C034(int a1)
{
  return sub_1000B5080(a1, type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t (*sub_10015C040(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0LL) + 36);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015C090()
{
  return sub_10002828C(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t sub_10015C09C()
{
  return sub_1000282C8(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t sub_10015C0A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C688);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 40), (uint64_t)v5, &qword_10035C688);
  uint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v7[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v7[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return sub_100015764((uint64_t)v5, &qword_10035C688);
}

uint64_t sub_10015C1B8(uint64_t a1)
{
  return sub_1000B9A4C( a1,  type metadata accessor for Proto_Gnss_Emergency_LocationInfo,  &qword_10035C688,  type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

void (*sub_10015C1D4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C688);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0LL) + 40);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_10035C688);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    sub_100015764((uint64_t)v5, &qword_10035C688);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
  }

  return sub_10015C324;
}

void sub_10015C324(uint64_t a1, char a2)
{
}

BOOL sub_10015C338()
{
  return sub_1000B9C24( &qword_10035C688,  type metadata accessor for Proto_Gnss_Emergency_LocationInfo,  type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t sub_10015C354()
{
  return sub_1000B9CFC( type metadata accessor for Proto_Gnss_Emergency_LocationInfo,  &qword_10035C688,  type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t sub_10015C370@<X0>(uint64_t a1@<X8>)
{
  unsigned int v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0LL);
  uint64_t v3 = a1 + v2[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  uint64_t v4 = a1 + v2[6];
  *(_DWORD *)uint64_t v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  uint64_t v5 = a1 + v2[7];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  *(_BYTE *)(a1 + v2[8]) = 4;
  uint64_t v6 = a1 + v2[9];
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  uint64_t v7 = a1 + v2[10];
  uint64_t v8 = type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 1LL, 1LL, v8);
}

uint64_t sub_10015C410@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for Proto_Gnss_Emergency_GpsTOD, a1);
}

uint64_t sub_10015C41C()
{
  return sub_1000191E8(type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t sub_10015C428(int a1)
{
  return sub_100019228(a1, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t (*sub_10015C434(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_CellInfo(0LL) + 20);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015C484()
{
  return sub_1000192B8(type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t sub_10015C490()
{
  return sub_1000192F4(type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t sub_10015C49C()
{
  return sub_10002DF9C(type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t sub_10015C4A8(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t (*sub_10015C4B4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_CellInfo(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015C504()
{
  return sub_1000277C8(type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t sub_10015C510()
{
  return sub_100027804(type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t sub_10015C51C()
{
  return sub_1000B8E14(type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t sub_10015C528(int a1)
{
  return sub_1000B8E54(a1, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t (*sub_10015C534(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_CellInfo(0LL) + 28);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015C584()
{
  return sub_100020BD0(type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t sub_10015C590()
{
  return sub_100020C0C(type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t sub_10015C59C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C690);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_CellInfo(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 32), (uint64_t)v5, &qword_10035C690);
  uint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_Plmn(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v7[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v7[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return sub_100015764((uint64_t)v5, &qword_10035C690);
}

uint64_t sub_10015C6AC(uint64_t a1)
{
  return sub_1000343F8( a1,  type metadata accessor for Proto_Gnss_Emergency_CellInfo,  &qword_10035C690,  type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

void (*sub_10015C6C8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C690);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_Plmn(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_CellInfo(0LL) + 32);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_10035C690);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    sub_100015764((uint64_t)v5, &qword_10035C690);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_Plmn);
  }

  return sub_10015C818;
}

void sub_10015C818(uint64_t a1, char a2)
{
}

BOOL sub_10015C82C()
{
  return sub_10002E400( &qword_10035C690,  type metadata accessor for Proto_Gnss_Emergency_CellInfo,  type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t sub_10015C848()
{
  return sub_10002E4D8( type metadata accessor for Proto_Gnss_Emergency_CellInfo,  &qword_10035C690,  type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t sub_10015C864@<X0>(uint64_t a1@<X8>)
{
  unsigned int v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_CellInfo(0LL);
  uint64_t v3 = a1 + v2[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  uint64_t v4 = a1 + v2[6];
  *(_DWORD *)uint64_t v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  uint64_t v5 = a1 + v2[7];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  uint64_t v6 = a1 + v2[8];
  uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_Plmn(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t sub_10015C8E8@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for Proto_Gnss_Emergency_Plmn, a1);
}

uint64_t sub_10015C8F4()
{
  uint64_t v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0LL) + 20));
  if (v1[8]) {
    return 0LL;
  }
  else {
    return *(void *)v1;
  }
}

uint64_t sub_10015C924(uint64_t a1)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0LL);
  uint64_t v4 = v1 + *(int *)(result + 20);
  *(void *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_10015C958(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0LL) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8)) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_100004AD8;
}

BOOL sub_10015C9AC()
{
  return sub_10001FD00(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

uint64_t sub_10015C9B8()
{
  return sub_10001FD3C(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

uint64_t sub_10015C9C4()
{
  return sub_10002DF9C(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

uint64_t sub_10015C9D0(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

uint64_t (*sub_10015C9DC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015CA2C()
{
  return sub_1000277C8(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

uint64_t sub_10015CA38()
{
  return sub_100027804(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

uint64_t sub_10015CA44()
{
  return sub_1000B8E14(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

uint64_t sub_10015CA50(int a1)
{
  return sub_1000B8E54(a1, type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

uint64_t (*sub_10015CA5C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0LL) + 28);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015CAAC()
{
  return sub_100020BD0(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

uint64_t sub_10015CAB8()
{
  return sub_100020C0C(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

uint64_t sub_10015CAC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C698);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 32), (uint64_t)v5, &qword_10035C698);
  uint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_CellInfo(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v7[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v7[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  uint64_t v11 = a1 + v7[8];
  uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_Plmn(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
  return sub_100015764((uint64_t)v5, &qword_10035C698);
}

uint64_t sub_10015CC00(uint64_t a1)
{
  return sub_1000343F8( a1,  type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured,  &qword_10035C698,  type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

void (*sub_10015CC1C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C698);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_CellInfo(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0LL) + 32);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_10035C698);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    uint64_t v14 = &v9[v6[8]];
    uint64_t v15 = type metadata accessor for Proto_Gnss_Emergency_Plmn(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v14, 1LL, 1LL, v15);
    sub_100015764((uint64_t)v5, &qword_10035C698);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
  }

  return sub_10015CD98;
}

void sub_10015CD98(uint64_t a1, char a2)
{
}

BOOL sub_10015CDAC()
{
  return sub_10002E400( &qword_10035C698,  type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured,  type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t sub_10015CDC8()
{
  return sub_10002E4D8( type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured,  &qword_10035C698,  type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t sub_10015CDE4@<X0>(uint64_t a1@<X8>)
{
  unsigned int v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0LL);
  uint64_t v3 = a1 + v2[5];
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = 1;
  uint64_t v4 = a1 + v2[6];
  *(_DWORD *)uint64_t v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  uint64_t v5 = a1 + v2[7];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  uint64_t v6 = a1 + v2[8];
  uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_CellInfo(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t sub_10015CE68@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for Proto_Gnss_Emergency_CellInfo, a1);
}

uint64_t sub_10015CE74()
{
  return sub_1000191E8(type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
}

uint64_t sub_10015CE80(int a1)
{
  return sub_100019228(a1, type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
}

uint64_t (*sub_10015CE8C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured(0LL) + 20);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015CEDC()
{
  return sub_1000192B8(type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
}

uint64_t sub_10015CEE8()
{
  return sub_1000192F4(type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
}

uint64_t sub_10015CEF4()
{
  return sub_10002DF9C(type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
}

uint64_t sub_10015CF00(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
}

uint64_t (*sub_10015CF0C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015CF5C()
{
  return sub_1000277C8(type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
}

uint64_t sub_10015CF68()
{
  return sub_100027804(type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
}

uint64_t sub_10015CF74@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C698);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_10035C698);
  uint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_CellInfo(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v7[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v7[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  uint64_t v11 = a1 + v7[8];
  uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_Plmn(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
  return sub_100015764((uint64_t)v5, &qword_10035C698);
}

uint64_t sub_10015D0B0(uint64_t a1)
{
  return sub_100030C2C( a1,  type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured,  &qword_10035C698,  type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

void (*sub_10015D0CC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C698);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_CellInfo(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_10035C698);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    uint64_t v14 = &v9[v6[8]];
    uint64_t v15 = type metadata accessor for Proto_Gnss_Emergency_Plmn(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v14, 1LL, 1LL, v15);
    sub_100015764((uint64_t)v5, &qword_10035C698);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
  }

  return sub_10015CD98;
}

BOOL sub_10015D248()
{
  return sub_10002D37C( &qword_10035C698,  type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured,  type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t sub_10015D264()
{
  return sub_10002D454( type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured,  &qword_10035C698,  type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t sub_10015D280@<X0>(uint64_t a1@<X8>)
{
  unsigned int v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured(0LL);
  uint64_t v3 = a1 + v2[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  uint64_t v4 = a1 + v2[6];
  *(_DWORD *)uint64_t v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  uint64_t v5 = a1 + v2[7];
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_CellInfo(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
}

uint64_t sub_10015D2F4()
{
  return sub_1000191E8(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D300(int a1)
{
  return sub_100019228(a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t (*sub_10015D30C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0LL) + 20);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015D35C()
{
  return sub_1000192B8(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D368()
{
  return sub_1000192F4(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D374()
{
  return sub_10002DF9C(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D380(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t (*sub_10015D38C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015D3DC()
{
  return sub_1000277C8(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D3E8()
{
  return sub_100027804(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D3F4()
{
  return sub_1000B8E14(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D400(int a1)
{
  return sub_1000B8E54(a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t (*sub_10015D40C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0LL) + 28);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015D45C()
{
  return sub_100020BD0(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D468()
{
  return sub_100020C0C(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D474()
{
  return sub_1000A9EA0(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D480(int a1)
{
  return sub_1000A9EE0(a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t (*sub_10015D48C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0LL) + 32);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015D4DC()
{
  return sub_100027938(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D4E8()
{
  return sub_100027974(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D4F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C690);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 36), (uint64_t)v5, &qword_10035C690);
  uint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_Plmn(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v7[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v7[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return sub_100015764((uint64_t)v5, &qword_10035C690);
}

uint64_t sub_10015D604(uint64_t a1)
{
  return sub_10015D620( a1,  type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell,  &qword_10035C690,  type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t sub_10015D620( uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v8 = v4 + *(int *)(a2(0LL) + 36);
  sub_100015764(v8, a3);
  sub_100003E68(a1, v8, a4);
  uint64_t v9 = a4(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 0LL, 1LL, v9);
}

void (*sub_10015D698(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C690);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_Plmn(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0LL) + 36);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_10035C690);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    sub_100015764((uint64_t)v5, &qword_10035C690);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_Plmn);
  }

  return sub_10015C818;
}

BOOL sub_10015D7E8()
{
  return sub_10015D804( &qword_10035C690,  type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell,  type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

BOOL sub_10015D804(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = sub_100003A0C(a1);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a2(0LL);
  sub_10000E6C0(v3 + *(int *)(v10 + 36), (uint64_t)v9, a1);
  uint64_t v11 = a3(0LL);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v9, 1LL, v11) != 1;
  sub_100015764((uint64_t)v9, a1);
  return v12;
}

uint64_t sub_10015D8C0()
{
  return sub_10015D8DC( type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell,  &qword_10035C690,  type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t sub_10015D8DC(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0LL) + 36);
  sub_100015764(v6, a2);
  uint64_t v7 = a3(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t sub_10015D944()
{
  return sub_100151524(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D950(int a1)
{
  return sub_100151564(a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t (*sub_10015D95C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0LL) + 40);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015D9AC()
{
  return sub_10003374C(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D9B8()
{
  return sub_100033788(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D9C4()
{
  return sub_1000A6DE4(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D9D0(int a1)
{
  return sub_1000A6E24(a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t (*sub_10015D9DC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0LL) + 44);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015DA2C()
{
  return sub_100033884(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015DA38()
{
  return sub_1000338C0(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015DA44()
{
  return sub_1001516F8(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015DA50(int a1)
{
  return sub_100151738(a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t (*sub_10015DA5C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0LL) + 48);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015DAAC()
{
  return sub_1000B3C60(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015DAB8()
{
  return sub_1000B3C9C(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015DAC4()
{
  return sub_10015DAD0(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015DAD0(uint64_t (*a1)(void))
{
  unsigned int v2 = (_BYTE *)(v1 + *(int *)(a1(0LL) + 52));
  if (v2[4]) {
    return 0LL;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t sub_10015DB04(int a1)
{
  return sub_10015DB10(a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015DB10(int a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0LL);
  uint64_t v5 = v2 + *(int *)(result + 52);
  *(_DWORD *)uint64_t v5 = a1;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_10015DB44(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0LL) + 52);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015DB94()
{
  return sub_10015DBA0(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

BOOL sub_10015DBA0(uint64_t (*a1)(void))
{
  return (*(_BYTE *)(v1 + *(int *)(a1(0LL) + 52) + 4) & 1) == 0;
}

uint64_t sub_10015DBD0()
{
  return sub_10015DBDC(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015DBDC(uint64_t (*a1)(void))
{
  uint64_t result = a1(0LL);
  uint64_t v3 = v1 + *(int *)(result + 52);
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

uint64_t sub_10015DC0C()
{
  return sub_10015DC18(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015DC18(uint64_t (*a1)(void))
{
  uint64_t v2 = (_BYTE *)(v1 + *(int *)(a1(0LL) + 56));
  if (v2[4]) {
    return 0LL;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t sub_10015DC4C(int a1)
{
  return sub_10015DC58(a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015DC58(int a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0LL);
  uint64_t v5 = v2 + *(int *)(result + 56);
  *(_DWORD *)uint64_t v5 = a1;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_10015DC8C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0LL) + 56);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015DCDC()
{
  return sub_10015DCE8(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

BOOL sub_10015DCE8(uint64_t (*a1)(void))
{
  return (*(_BYTE *)(v1 + *(int *)(a1(0LL) + 56) + 4) & 1) == 0;
}

uint64_t sub_10015DD18()
{
  return sub_10015DD24(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015DD24(uint64_t (*a1)(void))
{
  uint64_t result = a1(0LL);
  uint64_t v3 = v1 + *(int *)(result + 56);
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

uint64_t sub_10015DD54()
{
  return sub_100172C48(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015DD60(int a1)
{
  return sub_100172C88(a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t (*sub_10015DD6C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0LL) + 60);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015DDBC()
{
  return sub_100172D18(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015DDC8()
{
  return sub_100172D54(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015DDD4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0LL);
  uint64_t v3 = a1 + v2[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  uint64_t v4 = a1 + v2[6];
  *(_DWORD *)uint64_t v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  uint64_t v5 = a1 + v2[7];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  uint64_t v6 = a1 + v2[8];
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  uint64_t v7 = a1 + v2[9];
  uint64_t v8 = type metadata accessor for Proto_Gnss_Emergency_Plmn(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))( v7,  1LL,  1LL,  v8);
  uint64_t v10 = a1 + v2[10];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  uint64_t v11 = a1 + v2[11];
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  uint64_t v12 = a1 + v2[12];
  *(_DWORD *)uint64_t v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  uint64_t v13 = a1 + v2[13];
  *(_DWORD *)uint64_t v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  uint64_t v14 = a1 + v2[14];
  *(_DWORD *)uint64_t v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  uint64_t v15 = a1 + v2[15];
  *(_DWORD *)uint64_t v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  return result;
}

uint64_t sub_10015DED8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C6A0);
  __chkstk_darwin(v3);
  uint64_t v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v15, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_10035C6A0);
  uint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v7[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  uint64_t v11 = a1 + v7[8];
  uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_CellInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
  return sub_100015764((uint64_t)v5, &qword_10035C6A0);
}

uint64_t sub_10015E03C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C6A0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10019A47C(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
  uint64_t v17 = type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_10035C6A0);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__utranTime;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__utranTime,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_10035C6A0);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10015E1BC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C6A0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_10035C6A0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0LL;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    uint64_t v14 = &v9[v6[8]];
    uint64_t v15 = type metadata accessor for Proto_Gnss_Emergency_CellInfo(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v14, 1LL, 1LL, v15);
    sub_100015764((uint64_t)v5, &qword_10035C6A0);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
  }

  return sub_10015E350;
}

void sub_10015E350(uint64_t a1, char a2)
{
}

BOOL sub_10015E364()
{
  return sub_10001D054( &qword_10035C6A0,  type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured,  &OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__utranTime,  type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

uint64_t sub_10015E388()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_10035C6A0);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10019A47C(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__utranTime;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__utranTime,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_10035C6A0);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10015E4B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C6A8);
  __chkstk_darwin(v3);
  uint64_t v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v14, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_10035C6A8);
  uint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v7[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v7[7];
  uint64_t v11 = type metadata accessor for Proto_Gnss_Emergency_CellInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v10, 1LL, 1LL, v11);
  return sub_100015764((uint64_t)v5, &qword_10035C6A8);
}

uint64_t sub_10015E60C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C6A8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10019A47C(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
  uint64_t v17 = type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_10035C6A8);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__geranTime;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__geranTime,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_10035C6A8);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10015E78C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C6A8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_10035C6A8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    uint64_t v14 = type metadata accessor for Proto_Gnss_Emergency_CellInfo(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
    sub_100015764((uint64_t)v5, &qword_10035C6A8);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
  }

  return sub_10015E910;
}

void sub_10015E910(uint64_t a1, char a2)
{
}

BOOL sub_10015E924()
{
  return sub_10001D054( &qword_10035C6A8,  type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured,  &OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__geranTime,  type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
}

uint64_t sub_10015E948()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_10035C6A8);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10019A47C(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__geranTime;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__geranTime,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_10035C6A8);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10015EA78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C6B0);
  __chkstk_darwin(v3);
  uint64_t v5 = &v22[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v22, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_10035C6B0);
  uint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v7[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v7[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  uint64_t v11 = a1 + v7[8];
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  uint64_t v12 = a1 + v7[9];
  uint64_t v13 = type metadata accessor for Proto_Gnss_Emergency_Plmn(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
  uint64_t v14 = a1 + v7[10];
  *(_DWORD *)uint64_t v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  uint64_t v15 = a1 + v7[11];
  *(_DWORD *)uint64_t v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  uint64_t v16 = a1 + v7[12];
  *(_DWORD *)uint64_t v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  uint64_t v17 = a1 + v7[13];
  *(_DWORD *)uint64_t v17 = 0;
  *(_BYTE *)(v17 + 4) = 1;
  uint64_t v18 = a1 + v7[14];
  *(_DWORD *)uint64_t v18 = 0;
  *(_BYTE *)(v18 + 4) = 1;
  uint64_t v19 = a1 + v7[15];
  *(_DWORD *)uint64_t v19 = 0;
  *(_BYTE *)(v19 + 4) = 1;
  return sub_100015764((uint64_t)v5, &qword_10035C6B0);
}

uint64_t sub_10015EC54(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C6B0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_10019A47C(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
  uint64_t v17 = type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_10035C6B0);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__eutranTime;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__eutranTime,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_10035C6B0);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10015EDD4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C6B0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_10035C6B0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    uint64_t v14 = &v9[v6[8]];
    *(_DWORD *)uint64_t v14 = 0;
    void v14[4] = 1;
    uint64_t v15 = &v9[v6[9]];
    uint64_t v16 = type metadata accessor for Proto_Gnss_Emergency_Plmn(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v15, 1LL, 1LL, v16);
    uint64_t v17 = &v9[v6[10]];
    *(_DWORD *)uint64_t v17 = 0;
    v17[4] = 1;
    uint64_t v18 = &v9[v6[11]];
    *(_DWORD *)uint64_t v18 = 0;
    v18[4] = 1;
    uint64_t v19 = &v9[v6[12]];
    *(_DWORD *)uint64_t v19 = 0;
    v19[4] = 1;
    char v20 = &v9[v6[13]];
    *(_DWORD *)char v20 = 0;
    v20[4] = 1;
    uint64_t v21 = &v9[v6[14]];
    *(_DWORD *)uint64_t v21 = 0;
    v21[4] = 1;
    uint64_t v22 = &v9[v6[15]];
    *(_DWORD *)uint64_t v22 = 0;
    v22[4] = 1;
    sub_100015764((uint64_t)v5, &qword_10035C6B0);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
  }

  return sub_10015EFD8;
}

void sub_10015EFD8(uint64_t a1, char a2)
{
}

BOOL sub_10015EFEC()
{
  return sub_10001D054( &qword_10035C6B0,  type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured,  &OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__eutranTime,  type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015F010()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_10035C6B0);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_10019A47C(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__eutranTime;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__eutranTime,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_10035C6B0);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10015F140@<X0>(uint64_t a1@<X8>)
{
  return sub_100024054( type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured,  &qword_100396DF0,  &qword_100396DF8,  (uint64_t)sub_10019A3B4,  a1);
}

uint64_t sub_10015F164()
{
  return sub_1000365F4(&qword_100396DF0, &qword_100396DF8, (uint64_t)sub_10019A3B4);
}

uint64_t sub_10015F180()
{
  return sub_10015B754(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams);
}

uint64_t sub_10015F18C(char a1)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_10015F1B8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams(0LL) + 20);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10015F204()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams(0LL) + 20)) != 6;
}

uint64_t sub_10015F22C()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 6;
  return result;
}

uint64_t sub_10015F250@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C6B8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_10035C6B8);
  uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0LL);
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (qword_100396DF0 != -1) {
    swift_once(&qword_100396DF0, sub_10019A3B4);
  }
  uint64_t v9 = qword_100396DF8;
  *(void *)(a1 + v8) = qword_100396DF8;
  swift_retain(v9);
  return sub_100015764((uint64_t)v5, &qword_10035C6B8);
}

uint64_t sub_10015F368(uint64_t a1)
{
  return sub_1000308E8( a1,  type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams,  &qword_10035C6B8,  type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured);
}

void (*sub_10015F384(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C6B8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_10035C6B8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = *(int *)(v6 + 20);
    if (qword_100396DF0 != -1) {
      swift_once(&qword_100396DF0, sub_10019A3B4);
    }
    uint64_t v12 = qword_100396DF8;
    *(void *)&v9[v11] = qword_100396DF8;
    swift_retain(v12);
    sub_100015764((uint64_t)v5, &qword_10035C6B8);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured);
  }

  return sub_10015F4DC;
}

void sub_10015F4DC(uint64_t a1, char a2)
{
}

BOOL sub_10015F4F0()
{
  return sub_100019928( &qword_10035C6B8,  type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams,  type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured);
}

uint64_t sub_10015F50C()
{
  return sub_100019A00( type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams,  &qword_10035C6B8,  type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured);
}

uint64_t sub_10015F528@<X0>(uint64_t a1@<X8>)
{
  return sub_10015F540( type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams,  6,  type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured,  a1);
}

uint64_t sub_10015F540@<X0>( uint64_t (*a1)(void)@<X0>, char a2@<W1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1(0LL);
  *(_BYTE *)(a4 + *(int *)(v8 + 20)) = a2;
  uint64_t v9 = a4 + *(int *)(v8 + 24);
  uint64_t v10 = a3(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))( v9,  1LL,  1LL,  v10);
}

uint64_t sub_10015F5AC@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured, a1);
}

uint64_t sub_10015F5B8()
{
  return sub_10015B754(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t sub_10015F5C4(char a1)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_10015F5F0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0LL) + 20);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10015F63C()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0LL) + 20)) != 6;
}

uint64_t sub_10015F664()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 6;
  return result;
}

uint64_t sub_10015F688()
{
  return sub_10002DF9C(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t sub_10015F694(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t (*sub_10015F6A0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015F6F0()
{
  return sub_1000277C8(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t sub_10015F6FC()
{
  return sub_100027804(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t sub_10015F708()
{
  return sub_1000B8E14(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t sub_10015F714(int a1)
{
  return sub_1000B8E54(a1, type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t (*sub_10015F720(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0LL) + 28);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015F770()
{
  return sub_100020BD0(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t sub_10015F77C()
{
  return sub_100020C0C(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t sub_10015F788()
{
  return sub_1000A9EA0(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t sub_10015F794(int a1)
{
  return sub_1000A9EE0(a1, type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t (*sub_10015F7A0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0LL) + 32);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015F7F0()
{
  return sub_100027938(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t sub_10015F7FC()
{
  return sub_100027974(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t sub_10015F808()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0LL) + 36));
  if (v1 == 4) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_10015F830(char a1)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_10015F85C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0LL) + 36);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10015F8A8()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0LL) + 36)) != 4;
}

uint64_t sub_10015F8D0()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 4;
  return result;
}

uint64_t sub_10015F8F4()
{
  return sub_100151524(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t sub_10015F900(int a1)
{
  return sub_100151564(a1, type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t (*sub_10015F90C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0LL) + 40);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015F95C()
{
  return sub_10003374C(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t sub_10015F968()
{
  return sub_100033788(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

int *sub_10015F974@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0LL);
  *(_BYTE *)(a1 + result[5]) = 6;
  uint64_t v3 = a1 + result[6];
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  uint64_t v4 = a1 + result[7];
  *(_DWORD *)uint64_t v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  uint64_t v5 = a1 + result[8];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  *(_BYTE *)(a1 + result[9]) = 4;
  uint64_t v6 = a1 + result[10];
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  return result;
}

uint64_t sub_10015F9F8()
{
  return sub_1000191E8(type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_10015FA04(int a1)
{
  return sub_100019228(a1, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t (*sub_10015FA10(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0LL) + 20);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015FA60()
{
  return sub_1000192B8(type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_10015FA6C()
{
  return sub_1000192F4(type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_10015FA78()
{
  return sub_10002DF9C(type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_10015FA84(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t (*sub_10015FA90(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015FAE0()
{
  return sub_1000277C8(type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_10015FAEC()
{
  return sub_100027804(type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_10015FAF8@<X0>(uint64_t a1@<X8>)
{
  return sub_10015AC98(type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint, a1);
}

uint64_t sub_10015FB04@<X0>(uint64_t a1@<X8>)
{
  return sub_100170F80( &qword_10035C6C0,  type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle,  type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint,  a1);
}

uint64_t sub_10015FB20(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle,  &qword_10035C6C0,  type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

void (*sub_10015FB3C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C6C0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_10035C6C0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    sub_100015764((uint64_t)v5, &qword_10035C6C0);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
  }

  return sub_10015FC7C;
}

void sub_10015FC7C(uint64_t a1, char a2)
{
}

BOOL sub_10015FC90()
{
  return sub_100031370( &qword_10035C6C0,  type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle,  type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_10015FCAC()
{
  return sub_100031448( type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle,  &qword_10035C6C0,  type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_10015FCC8()
{
  return sub_10002DF9C(type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle);
}

uint64_t sub_10015FCD4(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle);
}

uint64_t (*sub_10015FCE0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015FD30()
{
  return sub_1000277C8(type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle);
}

uint64_t sub_10015FD3C()
{
  return sub_100027804(type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle);
}

uint64_t sub_10015FD48@<X0>(uint64_t a1@<X8>)
{
  return sub_100160E48(type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle, a1);
}

uint64_t sub_10015FD54@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint, a1);
}

uint64_t sub_10015FD60@<X0>(uint64_t a1@<X8>)
{
  return sub_100170F80( &qword_10035C6C0,  type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse,  type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint,  a1);
}

uint64_t sub_10015FD7C(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse,  &qword_10035C6C0,  type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

void (*sub_10015FD98(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C6C0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_10035C6C0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    sub_100015764((uint64_t)v5, &qword_10035C6C0);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
  }

  return sub_10015FC7C;
}

BOOL sub_10015FED8()
{
  return sub_100031370( &qword_10035C6C0,  type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse,  type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_10015FEF4()
{
  return sub_100031448( type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse,  &qword_10035C6C0,  type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_10015FF10()
{
  return sub_10002DF9C(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t sub_10015FF1C(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t (*sub_10015FF28(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015FF78()
{
  return sub_1000277C8(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t sub_10015FF84()
{
  return sub_100027804(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t sub_10015FF90()
{
  return sub_1000B8E14(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t sub_10015FF9C(int a1)
{
  return sub_1000B8E54(a1, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t (*sub_10015FFA8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse(0LL) + 28);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10015FFF8()
{
  return sub_100020BD0(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t sub_100160004()
{
  return sub_100020C0C(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t sub_100160010()
{
  return sub_1000A9EA0(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t sub_10016001C(int a1)
{
  return sub_1000A9EE0(a1, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t (*sub_100160028(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse(0LL) + 32);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100160078()
{
  return sub_100027938(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t sub_100160084()
{
  return sub_100027974(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t sub_100160090()
{
  return sub_1000B5040(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t sub_10016009C(int a1)
{
  return sub_1000B5080(a1, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t (*sub_1001600A8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse(0LL) + 36);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1001600F8()
{
  return sub_10002828C(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t sub_100160104()
{
  return sub_1000282C8(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t sub_100160110@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse(0LL);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))( v3,  1LL,  1LL,  v4);
  uint64_t v6 = a1 + v2[6];
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  uint64_t v7 = a1 + v2[7];
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  uint64_t v8 = a1 + v2[8];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v2[9];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  return result;
}

uint64_t sub_1001601B4@<X0>(uint64_t a1@<X8>)
{
  return sub_100170F80( &qword_10035C6C0,  type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid,  type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint,  a1);
}

uint64_t sub_1001601D0(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid,  &qword_10035C6C0,  type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

void (*sub_1001601EC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C6C0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_10035C6C0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    sub_100015764((uint64_t)v5, &qword_10035C6C0);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
  }

  return sub_10015FC7C;
}

BOOL sub_10016032C()
{
  return sub_100031370( &qword_10035C6C0,  type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid,  type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_100160348()
{
  return sub_100031448( type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid,  &qword_10035C6C0,  type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_100160364()
{
  return sub_10002DF9C(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_100160370(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t (*sub_10016037C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1001603CC()
{
  return sub_1000277C8(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_1001603D8()
{
  return sub_100027804(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_1001603E4()
{
  return sub_1000B8E14(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_1001603F0(int a1)
{
  return sub_1000B8E54(a1, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t (*sub_1001603FC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0LL) + 28);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10016044C()
{
  return sub_100020BD0(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_100160458()
{
  return sub_100020C0C(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_100160464()
{
  return sub_1000A9EA0(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_100160470(int a1)
{
  return sub_1000A9EE0(a1, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t (*sub_10016047C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0LL) + 32);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1001604CC()
{
  return sub_100027938(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_1001604D8()
{
  return sub_100027974(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_1001604E4()
{
  return sub_1000B5040(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_1001604F0(int a1)
{
  return sub_1000B5080(a1, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t (*sub_1001604FC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0LL) + 36);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10016054C()
{
  return sub_10002828C(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_100160558()
{
  return sub_1000282C8(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_100160564()
{
  return sub_100151524(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_100160570(int a1)
{
  return sub_100151564(a1, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t (*sub_10016057C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0LL) + 40);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1001605CC()
{
  return sub_10003374C(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_1001605D8()
{
  return sub_100033788(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_1001605E4()
{
  return sub_1000A6DE4(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_1001605F0(int a1)
{
  return sub_1000A6E24(a1, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t (*sub_1001605FC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0LL) + 44);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10016064C()
{
  return sub_100033884(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_100160658()
{
  return sub_1000338C0(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_100160664@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0LL);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))( v3,  1LL,  1LL,  v4);
  uint64_t v6 = a1 + v2[6];
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  uint64_t v7 = a1 + v2[7];
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  uint64_t v8 = a1 + v2[8];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v2[9];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v2[10];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  uint64_t v11 = a1 + v2[11];
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  return result;
}

uint64_t sub_100160728@<X0>(uint64_t a1@<X8>)
{
  return sub_100170F80( &qword_10035C6C0,  type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc,  type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint,  a1);
}

uint64_t sub_100160744(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc,  &qword_10035C6C0,  type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

void (*sub_100160760(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C6C0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_10035C6C0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    sub_100015764((uint64_t)v5, &qword_10035C6C0);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
  }

  return sub_10015FC7C;
}

BOOL sub_1001608A0()
{
  return sub_100031370( &qword_10035C6C0,  type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc,  type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_1001608BC()
{
  return sub_100031448( type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc,  &qword_10035C6C0,  type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_1001608D8()
{
  return sub_10002DF9C(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t sub_1001608E4(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t (*sub_1001608F0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100160940()
{
  return sub_1000277C8(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t sub_10016094C()
{
  return sub_100027804(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t sub_100160958()
{
  return sub_1000B8E14(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t sub_100160964(int a1)
{
  return sub_1000B8E54(a1, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t (*sub_100160970(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0LL) + 28);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1001609C0()
{
  return sub_100020BD0(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t sub_1001609CC()
{
  return sub_100020C0C(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t sub_1001609D8()
{
  return sub_1000A9EA0(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t sub_1001609E4(int a1)
{
  return sub_1000A9EE0(a1, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t (*sub_1001609F0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0LL) + 32);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100160A40()
{
  return sub_100027938(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t sub_100160A4C()
{
  return sub_100027974(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t sub_100160A58()
{
  return sub_1000B5040(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t sub_100160A64(int a1)
{
  return sub_1000B5080(a1, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t (*sub_100160A70(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0LL) + 36);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100160AC0()
{
  return sub_10002828C(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t sub_100160ACC()
{
  return sub_1000282C8(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t sub_100160AD8()
{
  return sub_100151524(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t sub_100160AE4(int a1)
{
  return sub_100151564(a1, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t (*sub_100160AF0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0LL) + 40);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100160B40()
{
  return sub_10003374C(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t sub_100160B4C()
{
  return sub_100033788(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t sub_100160B58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0LL);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))( v3,  1LL,  1LL,  v4);
  uint64_t v6 = a1 + v2[6];
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  uint64_t v7 = a1 + v2[7];
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  uint64_t v8 = a1 + v2[8];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v2[9];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v2[10];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return result;
}

uint64_t sub_100160C0C@<X0>(uint64_t a1@<X8>)
{
  return sub_100170F80( &qword_10035C6C0,  type metadata accessor for Proto_Gnss_Emergency_PointAltitude,  type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint,  a1);
}

uint64_t sub_100160C28(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for Proto_Gnss_Emergency_PointAltitude,  &qword_10035C6C0,  type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

void (*sub_100160C44(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C6C0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointAltitude(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_10035C6C0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    sub_100015764((uint64_t)v5, &qword_10035C6C0);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
  }

  return sub_10015FC7C;
}

BOOL sub_100160D84()
{
  return sub_100031370( &qword_10035C6C0,  type metadata accessor for Proto_Gnss_Emergency_PointAltitude,  type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_100160DA0()
{
  return sub_100031448( type metadata accessor for Proto_Gnss_Emergency_PointAltitude,  &qword_10035C6C0,  type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_100160DBC()
{
  return sub_10002DF9C(type metadata accessor for Proto_Gnss_Emergency_PointAltitude);
}

uint64_t sub_100160DC8(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for Proto_Gnss_Emergency_PointAltitude);
}

uint64_t (*sub_100160DD4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointAltitude(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100160E24()
{
  return sub_1000277C8(type metadata accessor for Proto_Gnss_Emergency_PointAltitude);
}

uint64_t sub_100160E30()
{
  return sub_100027804(type metadata accessor for Proto_Gnss_Emergency_PointAltitude);
}

uint64_t sub_100160E3C@<X0>(uint64_t a1@<X8>)
{
  return sub_100160E48(type metadata accessor for Proto_Gnss_Emergency_PointAltitude, a1);
}

uint64_t sub_100160E48@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1(0LL);
  uint64_t v5 = a2 + *(int *)(v4 + 20);
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))( v5,  1LL,  1LL,  v6);
  uint64_t v8 = a2 + *(int *)(v4 + 24);
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  return result;
}

uint64_t sub_100160EC0()
{
  return sub_10002DF9C(type metadata accessor for Proto_Gnss_Emergency_Polygon);
}

uint64_t sub_100160ECC(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for Proto_Gnss_Emergency_Polygon);
}

uint64_t (*sub_100160ED8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Polygon(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100160F28()
{
  return sub_1000277C8(type metadata accessor for Proto_Gnss_Emergency_Polygon);
}

uint64_t sub_100160F34()
{
  return sub_100027804(type metadata accessor for Proto_Gnss_Emergency_Polygon);
}

uint64_t sub_100160F40@<X0>(uint64_t a1@<X8>)
{
  return sub_100005424(type metadata accessor for Proto_Gnss_Emergency_Polygon, a1);
}

uint64_t sub_100160F4C(uint64_t a1)
{
  return sub_10000547C(a1, type metadata accessor for Proto_Gnss_Emergency_Polygon);
}

uint64_t (*sub_100160F58())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_100160F80@<X0>(void *a1@<X8>)
{
  return sub_100170858(type metadata accessor for Proto_Gnss_Emergency_Polygon, a1);
}

uint64_t sub_100160F8C@<X0>(uint64_t a1@<X8>)
{
  return sub_100162C28( &qword_10035C6C8,  &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainCircle,  type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle,  a1);
}

uint64_t sub_100160FA8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C6C8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1001C33C4(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle);
  uint64_t v17 = type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_10035C6C8);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainCircle;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainCircle,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_10035C6C8);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10016112C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C6C8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_10035C6C8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
    uint64_t v13 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    sub_100015764((uint64_t)v5, &qword_10035C6C8);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle);
  }

  return sub_1001612A0;
}

void sub_1001612A0(uint64_t a1, char a2)
{
}

BOOL sub_1001612B4()
{
  return sub_10001D054( &qword_10035C6C8,  type metadata accessor for Proto_Gnss_Emergency_ShapeInfo,  &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainCircle,  type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle);
}

uint64_t sub_1001612D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_10035C6C8);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1001C33C4(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainCircle;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainCircle,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_10035C6C8);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10016140C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C6D0);
  __chkstk_darwin(v3);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v16, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_10035C6D0);
  uint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  uint64_t v9 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  uint64_t v10 = a1 + v7[6];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  uint64_t v11 = a1 + v7[7];
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  uint64_t v12 = a1 + v7[8];
  *(_DWORD *)uint64_t v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  uint64_t v13 = a1 + v7[9];
  *(_DWORD *)uint64_t v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  return sub_100015764((uint64_t)v5, &qword_10035C6D0);
}

uint64_t sub_100161588(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C6D0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1001C33C4(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
  uint64_t v17 = type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_10035C6D0);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainEllipse;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainEllipse,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_10035C6D0);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10016170C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C6D0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_10035C6D0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
    uint64_t v13 = &v9[v6[6]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    uint64_t v14 = &v9[v6[7]];
    *(_DWORD *)uint64_t v14 = 0;
    void v14[4] = 1;
    uint64_t v15 = &v9[v6[8]];
    *(_DWORD *)uint64_t v15 = 0;
    v15[4] = 1;
    uint64_t v16 = &v9[v6[9]];
    *(_DWORD *)uint64_t v16 = 0;
    v16[4] = 1;
    sub_100015764((uint64_t)v5, &qword_10035C6D0);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
  }

  return sub_1001618B0;
}

void sub_1001618B0(uint64_t a1, char a2)
{
}

BOOL sub_1001618C4()
{
  return sub_10001D054( &qword_10035C6D0,  type metadata accessor for Proto_Gnss_Emergency_ShapeInfo,  &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainEllipse,  type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t sub_1001618E8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_10035C6D0);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1001C33C4(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainEllipse;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainEllipse,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_10035C6D0);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100161A1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C6D8);
  __chkstk_darwin(v3);
  uint64_t v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v18, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_10035C6D8);
  uint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48LL))(v5, 1LL, v7) != 1) {
    return sub_100003E68( (uint64_t)v5,  a1,  type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  uint64_t v9 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  uint64_t v10 = a1 + v7[6];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  uint64_t v11 = a1 + v7[7];
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  uint64_t v12 = a1 + v7[8];
  *(_DWORD *)uint64_t v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  uint64_t v13 = a1 + v7[9];
  *(_DWORD *)uint64_t v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  uint64_t v14 = a1 + v7[10];
  *(_DWORD *)uint64_t v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  uint64_t v15 = a1 + v7[11];
  *(_DWORD *)uint64_t v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  return sub_100015764((uint64_t)v5, &qword_10035C6D8);
}

uint64_t sub_100161BB8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C6D8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1001C33C4(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
  uint64_t v17 = type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_10035C6D8);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitudeUncertainEllipsoid;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitudeUncertainEllipsoid,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_10035C6D8);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100161D3C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C6D8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_10035C6D8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
    uint64_t v13 = &v9[v6[6]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    uint64_t v14 = &v9[v6[7]];
    *(_DWORD *)uint64_t v14 = 0;
    void v14[4] = 1;
    uint64_t v15 = &v9[v6[8]];
    *(_DWORD *)uint64_t v15 = 0;
    v15[4] = 1;
    uint64_t v16 = &v9[v6[9]];
    *(_DWORD *)uint64_t v16 = 0;
    v16[4] = 1;
    uint64_t v17 = &v9[v6[10]];
    *(_DWORD *)uint64_t v17 = 0;
    v17[4] = 1;
    uint64_t v18 = &v9[v6[11]];
    *(_DWORD *)uint64_t v18 = 0;
    v18[4] = 1;
    sub_100015764((uint64_t)v5, &qword_10035C6D8);
  }

  else
  {
    sub_100003E68( (uint64_t)v5,  (uint64_t)v9,  type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
  }

  return sub_100161F00;
}

void sub_100161F00(uint64_t a1, char a2)
{
}

BOOL sub_100161F14()
{
  return sub_10001D054( &qword_10035C6D8,  type metadata accessor for Proto_Gnss_Emergency_ShapeInfo,  &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitudeUncertainEllipsoid,  type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_100161F38()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_10035C6D8);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1001C33C4(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitudeUncertainEllipsoid;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitudeUncertainEllipsoid,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_10035C6D8);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10016206C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C6E0);
  __chkstk_darwin(v3);
  uint64_t v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v17, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_10035C6E0);
  uint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  uint64_t v9 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  uint64_t v10 = a1 + v7[6];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  uint64_t v11 = a1 + v7[7];
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  uint64_t v12 = a1 + v7[8];
  *(_DWORD *)uint64_t v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  uint64_t v13 = a1 + v7[9];
  *(_DWORD *)uint64_t v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  uint64_t v14 = a1 + v7[10];
  *(_DWORD *)uint64_t v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  return sub_100015764((uint64_t)v5, &qword_10035C6E0);
}

uint64_t sub_1001621F8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C6E0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1001C33C4(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
  uint64_t v17 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_10035C6E0);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidArc;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidArc,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_10035C6E0);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10016237C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C6E0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_10035C6E0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
    uint64_t v13 = &v9[v6[6]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    uint64_t v14 = &v9[v6[7]];
    *(_DWORD *)uint64_t v14 = 0;
    void v14[4] = 1;
    uint64_t v15 = &v9[v6[8]];
    *(_DWORD *)uint64_t v15 = 0;
    v15[4] = 1;
    uint64_t v16 = &v9[v6[9]];
    *(_DWORD *)uint64_t v16 = 0;
    v16[4] = 1;
    uint64_t v17 = &v9[v6[10]];
    *(_DWORD *)uint64_t v17 = 0;
    v17[4] = 1;
    sub_100015764((uint64_t)v5, &qword_10035C6E0);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
  }

  return sub_100162530;
}

void sub_100162530(uint64_t a1, char a2)
{
}

BOOL sub_100162544()
{
  return sub_10001D054( &qword_10035C6E0,  type metadata accessor for Proto_Gnss_Emergency_ShapeInfo,  &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidArc,  type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t sub_100162568()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_10035C6E0);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1001C33C4(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidArc;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidArc,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_10035C6E0);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10016269C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C6C0);
  __chkstk_darwin(v3);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v12, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_10035C6C0);
  uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + *(int *)(v7 + 24);
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  return sub_100015764((uint64_t)v5, &qword_10035C6C0);
}

uint64_t sub_1001627C4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C6C0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1001C33C4(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
  uint64_t v17 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_10035C6C0);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidPoint;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidPoint,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_10035C6C0);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100162948(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C6C0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_10035C6C0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    sub_100015764((uint64_t)v5, &qword_10035C6C0);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
  }

  return sub_100162AA0;
}

void sub_100162AA0(uint64_t a1, char a2)
{
}

BOOL sub_100162AB4()
{
  return sub_10001D054( &qword_10035C6C0,  type metadata accessor for Proto_Gnss_Emergency_ShapeInfo,  &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidPoint,  type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_100162AD8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_10035C6C0);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1001C33C4(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidPoint;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidPoint,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_10035C6C0);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100162C0C@<X0>(uint64_t a1@<X8>)
{
  return sub_100162C28( &qword_10035C6E8,  &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitude,  type metadata accessor for Proto_Gnss_Emergency_PointAltitude,  a1);
}

uint64_t sub_100162C28@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = sub_100003A0C(a1);
  __chkstk_darwin(v9);
  uint64_t v11 = &v19[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v12 = *(void *)(v4 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0LL) + 20)) + *a2;
  swift_beginAccess(v12, v19, 0LL, 0LL);
  sub_10000E6C0(v12, (uint64_t)v11, a1);
  uint64_t v13 = a3(0LL);
  UnknownStorage.init()();
  uint64_t v14 = a4 + *(int *)(v13 + 20);
  uint64_t v15 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v14, 1LL, 1LL, v15);
  uint64_t v16 = a4 + *(int *)(v13 + 24);
  *(_DWORD *)uint64_t v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  return sub_100015764((uint64_t)v11, a1);
}

uint64_t sub_100162D70(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C6E8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1001C33C4(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_PointAltitude);
  uint64_t v17 = type metadata accessor for Proto_Gnss_Emergency_PointAltitude(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_10035C6E8);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitude;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitude,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_10035C6E8);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100162EF4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C6E8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_PointAltitude(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_10035C6E8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
    uint64_t v13 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    sub_100015764((uint64_t)v5, &qword_10035C6E8);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_PointAltitude);
  }

  return sub_100163068;
}

void sub_100163068(uint64_t a1, char a2)
{
}

BOOL sub_10016307C()
{
  return sub_10001D054( &qword_10035C6E8,  type metadata accessor for Proto_Gnss_Emergency_ShapeInfo,  &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitude,  type metadata accessor for Proto_Gnss_Emergency_PointAltitude);
}

uint64_t sub_1001630A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_10035C6E8);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1001C33C4(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_PointAltitude(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitude;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitude,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_10035C6E8);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1001631D4@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C6F0);
  __chkstk_darwin(v3);
  uint64_t v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v11, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_10035C6F0);
  uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_Polygon(0LL);
  *a1 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  uint64_t v8 = (char *)a1 + *(int *)(v7 + 24);
  *(_DWORD *)uint64_t v8 = 0;
  void v8[4] = 1;
  return sub_100015764((uint64_t)v5, &qword_10035C6F0);
}

uint64_t sub_1001632FC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C6F0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1001C33C4(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_Polygon);
  uint64_t v17 = type metadata accessor for Proto_Gnss_Emergency_Polygon(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_10035C6F0);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__polygon;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__polygon,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_10035C6F0);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100163480(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C6F0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_Polygon(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_10035C6F0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    uint64_t v11 = (char *)v9 + *(int *)(v6 + 24);
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    sub_100015764((uint64_t)v5, &qword_10035C6F0);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_Polygon);
  }

  return sub_1001635D8;
}

void sub_1001635D8(uint64_t a1, char a2)
{
}

BOOL sub_1001635EC()
{
  return sub_10001D054( &qword_10035C6F0,  type metadata accessor for Proto_Gnss_Emergency_ShapeInfo,  &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__polygon,  type metadata accessor for Proto_Gnss_Emergency_Polygon);
}

uint64_t sub_100163610()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_10035C6F0);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1001C33C4(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_Polygon(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__polygon;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__polygon,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_10035C6F0);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100163744()
{
  return sub_10008D164( type metadata accessor for Proto_Gnss_Emergency_ShapeInfo,  &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__noLocation);
}

uint64_t sub_100163758(int a1)
{
  return sub_10008D1EC( a1,  type metadata accessor for Proto_Gnss_Emergency_ShapeInfo,  type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass,  (void (*)(uint64_t))sub_1001C33C4,  &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__noLocation);
}

void (*sub_10016377C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__noLocation;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_100163808;
}

void sub_100163808(uint64_t *a1, char a2)
{
}

BOOL sub_100163824()
{
  return sub_100022E8C( type metadata accessor for Proto_Gnss_Emergency_ShapeInfo,  &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__noLocation);
}

uint64_t sub_100163838()
{
  return sub_10008D488( type metadata accessor for Proto_Gnss_Emergency_ShapeInfo,  type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass,  (void (*)(uint64_t))sub_1001C33C4,  &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__noLocation);
}

uint64_t sub_10016385C@<X0>(uint64_t a1@<X8>)
{
  return sub_100024054( type metadata accessor for Proto_Gnss_Emergency_ShapeInfo,  &qword_100396E50,  &qword_100396E58,  (uint64_t)sub_10019F620,  a1);
}

uint64_t sub_100163880()
{
  return sub_1000365F4(&qword_100396E50, &qword_100396E58, (uint64_t)sub_10019F620);
}

uint64_t sub_10016389C()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocEstimate(0LL) + 20));
  if (v1 == 9) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_1001638C4(char a1)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_LocEstimate(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_1001638F0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocEstimate(0LL) + 20);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 9) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10016393C()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocEstimate(0LL) + 20)) != 9;
}

uint64_t sub_100163964()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_LocEstimate(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 9;
  return result;
}

uint64_t sub_100163988@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C6F8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_LocEstimate(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_10035C6F8);
  uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0LL);
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (qword_100396E50 != -1) {
    swift_once(&qword_100396E50, sub_10019F620);
  }
  uint64_t v9 = qword_100396E58;
  *(void *)(a1 + v8) = qword_100396E58;
  swift_retain(v9);
  return sub_100015764((uint64_t)v5, &qword_10035C6F8);
}

uint64_t sub_100163AA0(uint64_t a1)
{
  return sub_1000308E8( a1,  type metadata accessor for Proto_Gnss_Emergency_LocEstimate,  &qword_10035C6F8,  type metadata accessor for Proto_Gnss_Emergency_ShapeInfo);
}

void (*sub_100163ABC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C6F8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocEstimate(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_10035C6F8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = *(int *)(v6 + 20);
    if (qword_100396E50 != -1) {
      swift_once(&qword_100396E50, sub_10019F620);
    }
    uint64_t v12 = qword_100396E58;
    *(void *)&v9[v11] = qword_100396E58;
    swift_retain(v12);
    sub_100015764((uint64_t)v5, &qword_10035C6F8);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo);
  }

  return sub_100163C14;
}

void sub_100163C14(uint64_t a1, char a2)
{
}

BOOL sub_100163C28()
{
  return sub_100019928( &qword_10035C6F8,  type metadata accessor for Proto_Gnss_Emergency_LocEstimate,  type metadata accessor for Proto_Gnss_Emergency_ShapeInfo);
}

uint64_t sub_100163C44()
{
  return sub_100019A00( type metadata accessor for Proto_Gnss_Emergency_LocEstimate,  &qword_10035C6F8,  type metadata accessor for Proto_Gnss_Emergency_ShapeInfo);
}

uint64_t sub_100163C60@<X0>(uint64_t a1@<X8>)
{
  return sub_10015F540( type metadata accessor for Proto_Gnss_Emergency_LocEstimate,  9,  type metadata accessor for Proto_Gnss_Emergency_ShapeInfo,  a1);
}

uint64_t sub_100163C78()
{
  return 9LL;
}

uint64_t sub_100163C80@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo, a1);
}

uint64_t sub_100163C8C()
{
  return sub_1000191E8(type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

uint64_t sub_100163C98(int a1)
{
  return sub_100019228(a1, type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

uint64_t (*sub_100163CA4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity(0LL) + 20);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100163CF4()
{
  return sub_1000192B8(type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

uint64_t sub_100163D00()
{
  return sub_1000192F4(type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

uint64_t sub_100163D0C()
{
  return sub_10002DF9C(type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

uint64_t sub_100163D18(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

uint64_t (*sub_100163D24(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100163D74()
{
  return sub_1000277C8(type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

uint64_t sub_100163D80()
{
  return sub_100027804(type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

uint64_t sub_100163D8C@<X0>(uint64_t a1@<X8>)
{
  return sub_10015AC98(type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity, a1);
}

uint64_t sub_100163D98()
{
  return sub_1000191E8(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t sub_100163DA4(int a1)
{
  return sub_100019228(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t (*sub_100163DB0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity(0LL) + 20);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100163E00()
{
  return sub_1000192B8(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t sub_100163E0C()
{
  return sub_1000192F4(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t sub_100163E18()
{
  return sub_10002DF9C(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t sub_100163E24(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t (*sub_100163E30(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100163E80()
{
  return sub_1000277C8(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t sub_100163E8C()
{
  return sub_100027804(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t sub_100163E98()
{
  return sub_1000B8E14(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t sub_100163EA4(int a1)
{
  return sub_1000B8E54(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t (*sub_100163EB0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity(0LL) + 28);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100163F00()
{
  return sub_100020BD0(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t sub_100163F0C()
{
  return sub_100020C0C(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t sub_100163F18()
{
  return sub_1000A9EA0(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t sub_100163F24(int a1)
{
  return sub_1000A9EE0(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t (*sub_100163F30(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity(0LL) + 32);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100163F80()
{
  return sub_100027938(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t sub_100163F8C()
{
  return sub_100027974(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

int *sub_100163F98@<X0>(uint64_t a1@<X8>)
{
  return sub_10016D458(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity, a1);
}

uint64_t sub_100163FA4()
{
  return sub_1000191E8(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t sub_100163FB0(int a1)
{
  return sub_100019228(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t (*sub_100163FBC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity(0LL) + 20);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10016400C()
{
  return sub_1000192B8(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t sub_100164018()
{
  return sub_1000192F4(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t sub_100164024()
{
  return sub_10002DF9C(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t sub_100164030(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t (*sub_10016403C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10016408C()
{
  return sub_1000277C8(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t sub_100164098()
{
  return sub_100027804(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t sub_1001640A4()
{
  return sub_1000B8E14(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t sub_1001640B0(int a1)
{
  return sub_1000B8E54(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t (*sub_1001640BC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity(0LL) + 28);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_10016410C()
{
  return sub_100020BD0(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t sub_100164118()
{
  return sub_100020C0C(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

int *sub_100164124@<X0>(uint64_t a1@<X8>)
{
  return sub_10015BD5C(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity, a1);
}

uint64_t sub_100164130()
{
  return sub_1000191E8(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_10016413C(int a1)
{
  return sub_100019228(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t (*sub_100164148(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0LL) + 20);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100164198()
{
  return sub_1000192B8(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_1001641A4()
{
  return sub_1000192F4(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_1001641B0()
{
  return sub_10002DF9C(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_1001641BC(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t (*sub_1001641C8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100164218()
{
  return sub_1000277C8(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_100164224()
{
  return sub_100027804(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_100164230()
{
  return sub_1000B8E14(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_10016423C(int a1)
{
  return sub_1000B8E54(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t (*sub_100164248(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0LL) + 28);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100164298()
{
  return sub_100020BD0(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_1001642A4()
{
  return sub_100020C0C(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_1001642B0()
{
  return sub_1000A9EA0(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_1001642BC(int a1)
{
  return sub_1000A9EE0(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t (*sub_1001642C8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0LL) + 32);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100164318()
{
  return sub_100027938(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_100164324()
{
  return sub_100027974(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_100164330()
{
  return sub_1000B5040(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_10016433C(int a1)
{
  return sub_1000B5080(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t (*sub_100164348(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0LL) + 36);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100164398()
{
  return sub_10002828C(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_1001643A4()
{
  return sub_1000282C8(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_1001643B0()
{
  return sub_100151524(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_1001643BC(int a1)
{
  return sub_100151564(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t (*sub_1001643C8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0LL) + 40);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100164418()
{
  return sub_10003374C(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_100164424()
{
  return sub_100033788(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

int *sub_100164430@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0LL);
  uint64_t v3 = a1 + result[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  uint64_t v4 = a1 + result[6];
  *(_DWORD *)uint64_t v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  uint64_t v5 = a1 + result[7];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  uint64_t v6 = a1 + result[8];
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  uint64_t v7 = a1 + result[9];
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  uint64_t v8 = a1 + result[10];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  return result;
}

uint64_t sub_1001644BC@<X0>(uint64_t a1@<X8>)
{
  return sub_100170F80( &qword_10035C700,  type metadata accessor for Proto_Gnss_Emergency_VelocityInfo,  type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity,  a1);
}

uint64_t sub_1001644D8(uint64_t a1)
{
  return sub_100033EB8( a1,  type metadata accessor for Proto_Gnss_Emergency_VelocityInfo,  &qword_10035C700,  type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

void (*sub_1001644F4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C700);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_10035C700);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    sub_100015764((uint64_t)v5, &qword_10035C700);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
  }

  return sub_100164634;
}

void sub_100164634(uint64_t a1, char a2)
{
}

BOOL sub_100164648()
{
  return sub_100031370( &qword_10035C700,  type metadata accessor for Proto_Gnss_Emergency_VelocityInfo,  type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

uint64_t sub_100164664()
{
  return sub_100031448( type metadata accessor for Proto_Gnss_Emergency_VelocityInfo,  &qword_10035C700,  type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

uint64_t sub_100164680@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C708);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_10035C708);
  uint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v7[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v7[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  uint64_t v11 = a1 + v7[8];
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  return sub_100015764((uint64_t)v5, &qword_10035C708);
}

uint64_t sub_1001647A0(uint64_t a1)
{
  return sub_1000308E8( a1,  type metadata accessor for Proto_Gnss_Emergency_VelocityInfo,  &qword_10035C708,  type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

void (*sub_1001647BC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C708);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_10035C708);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    uint64_t v14 = &v9[v6[8]];
    *(_DWORD *)uint64_t v14 = 0;
    void v14[4] = 1;
    sub_100015764((uint64_t)v5, &qword_10035C708);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
  }

  return sub_10016491C;
}

void sub_10016491C(uint64_t a1, char a2)
{
}

BOOL sub_100164930()
{
  return sub_100019928( &qword_10035C708,  type metadata accessor for Proto_Gnss_Emergency_VelocityInfo,  type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t sub_10016494C()
{
  return sub_100019A00( type metadata accessor for Proto_Gnss_Emergency_VelocityInfo,  &qword_10035C708,  type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t sub_100164968@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C710);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_10035C710);
  uint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v7[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v7[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return sub_100015764((uint64_t)v5, &qword_10035C710);
}

uint64_t sub_100164A78(uint64_t a1)
{
  return sub_100030C2C( a1,  type metadata accessor for Proto_Gnss_Emergency_VelocityInfo,  &qword_10035C710,  type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

void (*sub_100164A94(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C710);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_10035C710);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    sub_100015764((uint64_t)v5, &qword_10035C710);
  }

  else
  {
    sub_100003E68( (uint64_t)v5,  (uint64_t)v9,  type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
  }

  return sub_100164BE4;
}

void sub_100164BE4(uint64_t a1, char a2)
{
}

BOOL sub_100164BF8()
{
  return sub_10002D37C( &qword_10035C710,  type metadata accessor for Proto_Gnss_Emergency_VelocityInfo,  type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t sub_100164C14()
{
  return sub_10002D454( type metadata accessor for Proto_Gnss_Emergency_VelocityInfo,  &qword_10035C710,  type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t sub_100164C30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C718);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 32), (uint64_t)v5, &qword_10035C718);
  uint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48LL))(v5, 1LL, v7) != 1) {
    return sub_100003E68( (uint64_t)v5,  a1,  type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v7[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v7[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  uint64_t v11 = a1 + v7[8];
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  uint64_t v12 = a1 + v7[9];
  *(_DWORD *)uint64_t v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  uint64_t v13 = a1 + v7[10];
  *(_DWORD *)uint64_t v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  return sub_100015764((uint64_t)v5, &qword_10035C718);
}

uint64_t sub_100164D70(uint64_t a1)
{
  return sub_1000343F8( a1,  type metadata accessor for Proto_Gnss_Emergency_VelocityInfo,  &qword_10035C718,  type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

void (*sub_100164D8C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C718);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0LL) + 32);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_10035C718);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    uint64_t v14 = &v9[v6[8]];
    *(_DWORD *)uint64_t v14 = 0;
    void v14[4] = 1;
    uint64_t v15 = &v9[v6[9]];
    *(_DWORD *)uint64_t v15 = 0;
    v15[4] = 1;
    uint64_t v16 = &v9[v6[10]];
    *(_DWORD *)uint64_t v16 = 0;
    v16[4] = 1;
    sub_100015764((uint64_t)v5, &qword_10035C718);
  }

  else
  {
    sub_100003E68( (uint64_t)v5,  (uint64_t)v9,  type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
  }

  return sub_100164F0C;
}

void sub_100164F0C(uint64_t a1, char a2)
{
}

BOOL sub_100164F20()
{
  return sub_10002E400( &qword_10035C718,  type metadata accessor for Proto_Gnss_Emergency_VelocityInfo,  type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_100164F3C()
{
  return sub_10002E4D8( type metadata accessor for Proto_Gnss_Emergency_VelocityInfo,  &qword_10035C718,  type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_100164F58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0LL);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  uint64_t v5 = a1 + v2[6];
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
  uint64_t v7 = a1 + v2[7];
  uint64_t v8 = type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 1LL, 1LL, v8);
  uint64_t v9 = a1 + v2[8];
  uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))( v9,  1LL,  1LL,  v10);
}

uint64_t sub_100165038@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity, a1);
}

uint64_t sub_100165044@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity, a1);
}

uint64_t sub_100165050@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity, a1);
}

uint64_t sub_10016505C@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity, a1);
}

uint64_t sub_100165068()
{
  return sub_10015B754(type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate);
}

uint64_t sub_100165074(char a1)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_1001650A0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate(0LL) + 20);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_1001650EC()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate(0LL) + 20)) != 6;
}

uint64_t sub_100165114()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 6;
  return result;
}

uint64_t sub_100165138@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C720);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_10035C720);
  uint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  uint64_t v9 = type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  uint64_t v10 = a1 + v7[6];
  uint64_t v11 = type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v10, 1LL, 1LL, v11);
  uint64_t v12 = a1 + v7[7];
  uint64_t v13 = type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
  uint64_t v14 = a1 + v7[8];
  uint64_t v15 = type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v14, 1LL, 1LL, v15);
  return sub_100015764((uint64_t)v5, &qword_10035C720);
}

uint64_t sub_1001652C4(uint64_t a1)
{
  return sub_1000308E8( a1,  type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate,  &qword_10035C720,  type metadata accessor for Proto_Gnss_Emergency_VelocityInfo);
}

void (*sub_1001652E0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C720);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_10035C720);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
    uint64_t v13 = &v9[v6[6]];
    uint64_t v14 = type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
    uint64_t v15 = &v9[v6[7]];
    uint64_t v16 = type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v15, 1LL, 1LL, v16);
    uint64_t v17 = &v9[v6[8]];
    uint64_t v18 = type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v17, 1LL, 1LL, v18);
    sub_100015764((uint64_t)v5, &qword_10035C720);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo);
  }

  return sub_1001654AC;
}

void sub_1001654AC(uint64_t a1, char a2)
{
}

BOOL sub_1001654C0()
{
  return sub_100019928( &qword_10035C720,  type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate,  type metadata accessor for Proto_Gnss_Emergency_VelocityInfo);
}

uint64_t sub_1001654DC()
{
  return sub_100019A00( type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate,  &qword_10035C720,  type metadata accessor for Proto_Gnss_Emergency_VelocityInfo);
}

uint64_t sub_1001654F8@<X0>(uint64_t a1@<X8>)
{
  return sub_10015F540( type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate,  6,  type metadata accessor for Proto_Gnss_Emergency_VelocityInfo,  a1);
}

uint64_t sub_100165510@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for Proto_Gnss_Emergency_VelocityInfo, a1);
}

uint64_t sub_10016551C()
{
  return sub_10016ADC4(type metadata accessor for Proto_Gnss_Emergency_PositionReport);
}

uint64_t sub_100165528(char a1)
{
  return sub_10016AE34( a1,  type metadata accessor for Proto_Gnss_Emergency_PositionReport,  type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass,  (void (*)(uint64_t))sub_1001C3B2C);
}

void (*sub_100165544(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0LL, 0LL);
  int v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 9) {
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)v3 + 84) = v6;
  return sub_1001655C0;
}

void sub_1001655C0(uint64_t *a1, char a2)
{
}

BOOL sub_1001655D4()
{
  return sub_10016B068(type metadata accessor for Proto_Gnss_Emergency_PositionReport);
}

uint64_t sub_1001655E0()
{
  return sub_10016B0D8( type metadata accessor for Proto_Gnss_Emergency_PositionReport,  type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass,  (void (*)(uint64_t))sub_1001C3B2C);
}

uint64_t sub_1001655FC()
{
  return sub_10016B198(type metadata accessor for Proto_Gnss_Emergency_PositionReport);
}

uint64_t sub_100165608(int a1)
{
  return sub_10016B20C( a1,  type metadata accessor for Proto_Gnss_Emergency_PositionReport,  type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass,  (void (*)(uint64_t))sub_1001C3B2C);
}

void (*sub_100165624(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 20, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)(v5 + 20);
  if (*(_BYTE *)(v5 + 24)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1001656A4;
}

void sub_1001656A4(uint64_t *a1, char a2)
{
}

BOOL sub_1001656B8()
{
  return sub_10016B448(type metadata accessor for Proto_Gnss_Emergency_PositionReport);
}

uint64_t sub_1001656C4()
{
  return sub_10016B4B8( type metadata accessor for Proto_Gnss_Emergency_PositionReport,  type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass,  (void (*)(uint64_t))sub_1001C3B2C);
}

uint64_t sub_1001656E0@<X0>(uint64_t a1@<X8>)
{
  return sub_10017ED10( type metadata accessor for Proto_Gnss_Emergency_PositionReport,  &OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo,  a1);
}

uint64_t sub_1001656F4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C728);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1001C3B2C(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
  uint64_t v17 = type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_10035C728);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_10035C728);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100165878(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C728);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_10035C728);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 6;
    v9[v6[6]] = 7;
    uint64_t v11 = &v9[v6[7]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    sub_100015764((uint64_t)v5, &qword_10035C728);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
  }

  return sub_1001659D8;
}

void sub_1001659D8(uint64_t a1, char a2)
{
}

BOOL sub_1001659EC()
{
  return sub_10001D054( &qword_10035C728,  type metadata accessor for Proto_Gnss_Emergency_PositionReport,  &OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo,  type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
}

uint64_t sub_100165A10()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_10035C728);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1001C3B2C(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_10035C728);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100165B44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C730);
  __chkstk_darwin(v3);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v16, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_10035C730);
  uint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v7[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v7[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  *(_BYTE *)(a1 + v7[8]) = 4;
  uint64_t v11 = a1 + v7[9];
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  uint64_t v12 = a1 + v7[10];
  uint64_t v13 = type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
  return sub_100015764((uint64_t)v5, &qword_10035C730);
}

uint64_t sub_100165CC4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C730);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1001C3B2C(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
  uint64_t v17 = type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_10035C730);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locationInfo;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locationInfo,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_10035C730);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100165E48(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C730);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_10035C730);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    v9[v6[8]] = 4;
    uint64_t v14 = &v9[v6[9]];
    *(_DWORD *)uint64_t v14 = 0;
    void v14[4] = 1;
    uint64_t v15 = &v9[v6[10]];
    uint64_t v16 = type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v15, 1LL, 1LL, v16);
    sub_100015764((uint64_t)v5, &qword_10035C730);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
  }

  return sub_100165FF8;
}

void sub_100165FF8(uint64_t a1, char a2)
{
}

BOOL sub_10016600C()
{
  return sub_10001D054( &qword_10035C730,  type metadata accessor for Proto_Gnss_Emergency_PositionReport,  &OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locationInfo,  type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t sub_100166030()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_10035C730);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1001C3B2C(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locationInfo;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locationInfo,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_10035C730);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100166164@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C738);
  __chkstk_darwin(v3);
  uint64_t v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v14, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_10035C738);
  uint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0LL);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v7[5]) = 6;
  uint64_t v8 = a1 + v7[6];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v7[7];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v7[8];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  *(_BYTE *)(a1 + v7[9]) = 4;
  uint64_t v11 = a1 + v7[10];
  *(_DWORD *)uint64_t v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  return sub_100015764((uint64_t)v5, &qword_10035C738);
}

uint64_t sub_1001662C4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C738);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1001C3B2C(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
  uint64_t v17 = type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_10035C738);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssLocationInfo;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssLocationInfo,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_10035C738);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100166448(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C738);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_10035C738);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 6;
    uint64_t v11 = &v9[v6[6]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[7]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[8]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    v9[v6[9]] = 4;
    uint64_t v14 = &v9[v6[10]];
    *(_DWORD *)uint64_t v14 = 0;
    void v14[4] = 1;
    sub_100015764((uint64_t)v5, &qword_10035C738);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
  }

  return sub_1001665D8;
}

void sub_1001665D8(uint64_t a1, char a2)
{
}

BOOL sub_1001665EC()
{
  return sub_10001D054( &qword_10035C738,  type metadata accessor for Proto_Gnss_Emergency_PositionReport,  &OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssLocationInfo,  type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t sub_100166610()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_10035C738);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1001C3B2C(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssLocationInfo;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssLocationInfo,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_10035C738);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100166744@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C740);
  __chkstk_darwin(v3);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v12, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_10035C740);
  uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_LocEstimate(0LL);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = 9;
  uint64_t v8 = a1 + *(int *)(v7 + 24);
  uint64_t v9 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  return sub_100015764((uint64_t)v5, &qword_10035C740);
}

uint64_t sub_100166880(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C740);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1001C3B2C(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_LocEstimate);
  uint64_t v17 = type metadata accessor for Proto_Gnss_Emergency_LocEstimate(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_10035C740);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locEstimate;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locEstimate,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_10035C740);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100166A04(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C740);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_LocEstimate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_10035C740);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    v9[*(int *)(v6 + 20)] = 9;
    uint64_t v11 = &v9[*(int *)(v6 + 24)];
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
    sub_100015764((uint64_t)v5, &qword_10035C740);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_LocEstimate);
  }

  return sub_100166B70;
}

void sub_100166B70(uint64_t a1, char a2)
{
}

BOOL sub_100166B84()
{
  return sub_10001D054( &qword_10035C740,  type metadata accessor for Proto_Gnss_Emergency_PositionReport,  &OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locEstimate,  type metadata accessor for Proto_Gnss_Emergency_LocEstimate);
}

uint64_t sub_100166BA8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_10035C740);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1001C3B2C(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_LocEstimate(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locEstimate;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locEstimate,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_10035C740);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100166CDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C748);
  __chkstk_darwin(v3);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v12, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_10035C748);
  uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate(0LL);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = 6;
  uint64_t v8 = a1 + *(int *)(v7 + 24);
  uint64_t v9 = type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  return sub_100015764((uint64_t)v5, &qword_10035C748);
}

uint64_t sub_100166E18(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C748);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1001C3B2C(v14);
    swift_release(v11);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate);
  uint64_t v17 = type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_10035C748);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__velocityEstimate;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__velocityEstimate,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_10035C748);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100166F9C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C748);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_10035C748);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    v9[*(int *)(v6 + 20)] = 6;
    uint64_t v11 = &v9[*(int *)(v6 + 24)];
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
    sub_100015764((uint64_t)v5, &qword_10035C748);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate);
  }

  return sub_100167108;
}

void sub_100167108(uint64_t a1, char a2)
{
}

BOOL sub_10016711C()
{
  return sub_10001D054( &qword_10035C748,  type metadata accessor for Proto_Gnss_Emergency_PositionReport,  &OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__velocityEstimate,  type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate);
}

uint64_t sub_100167140()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_10035C748);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1001C3B2C(v9);
    swift_release(v6);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__velocityEstimate;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__velocityEstimate,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_10035C748);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100167274()
{
  return sub_10008D164( type metadata accessor for Proto_Gnss_Emergency_PositionReport,  &OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__technologySource);
}

uint64_t sub_100167288(int a1)
{
  return sub_10008D1EC( a1,  type metadata accessor for Proto_Gnss_Emergency_PositionReport,  type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass,  (void (*)(uint64_t))sub_1001C3B2C,  &OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__technologySource);
}

void (*sub_1001672AC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__technologySource;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_100167338;
}

void sub_100167338(uint64_t *a1, char a2)
{
}

BOOL sub_100167354()
{
  return sub_100022E8C( type metadata accessor for Proto_Gnss_Emergency_PositionReport,  &OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__technologySource);
}

uint64_t sub_100167368()
{
  return sub_10008D488( type metadata accessor for Proto_Gnss_Emergency_PositionReport,  type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass,  (void (*)(uint64_t))sub_1001C3B2C,  &OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__technologySource);
}

uint64_t sub_10016738C@<X0>(uint64_t a1@<X8>)
{
  return sub_100024054( type metadata accessor for Proto_Gnss_Emergency_PositionReport,  &qword_100396EA0,  &qword_100396EA8,  (uint64_t)sub_1001A4A54,  a1);
}

uint64_t sub_1001673B0()
{
  return sub_1000365F4(&qword_100396EA0, &qword_100396EA8, (uint64_t)sub_1001A4A54);
}

uint64_t sub_1001673CC()
{
  return sub_1000191E8(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_1001673D8(int a1)
{
  return sub_100019228(a1, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t (*sub_1001673E4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement(0LL) + 20);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100167434()
{
  return sub_1000192B8(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_100167440()
{
  return sub_1000192F4(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_10016744C()
{
  return sub_10002DF9C(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_100167458(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t (*sub_100167464(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1001674B4()
{
  return sub_1000277C8(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_1001674C0()
{
  return sub_100027804(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_1001674CC()
{
  return sub_1000B8E14(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_1001674D8(int a1)
{
  return sub_1000B8E54(a1, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t (*sub_1001674E4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement(0LL) + 28);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100167534()
{
  return sub_100020BD0(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_100167540()
{
  return sub_100020C0C(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_10016754C()
{
  return sub_1000A9EA0(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_100167558(int a1)
{
  return sub_1000A9EE0(a1, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t (*sub_100167564(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement(0LL) + 32);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1001675B4()
{
  return sub_100027938(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_1001675C0()
{
  return sub_100027974(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_1001675CC()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement(0LL) + 36));
  if (v1 == 6) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_1001675F4(char a1)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_100167620(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement(0LL) + 36);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_10016766C()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement(0LL) + 36)) != 6;
}

uint64_t sub_100167694()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 6;
  return result;
}

uint64_t sub_1001676B8()
{
  return sub_100151524(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_1001676C4(int a1)
{
  return sub_100151564(a1, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t (*sub_1001676D0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement(0LL) + 40);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100167720()
{
  return sub_10003374C(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_10016772C()
{
  return sub_100033788(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_100167738()
{
  return sub_1000A6DE4(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_100167744(int a1)
{
  return sub_1000A6E24(a1, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t (*sub_100167750(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement(0LL) + 44);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1001677A0()
{
  return sub_100033884(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_1001677AC()
{
  return sub_1000338C0(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_1001677B8()
{
  return sub_1001516F8(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_1001677C4(int a1)
{
  return sub_100151738(a1, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t (*sub_1001677D0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement(0LL) + 48);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100167820()
{
  return sub_1000B3C60(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_10016782C()
{
  return sub_1000B3C9C(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_100167838()
{
  return sub_10015DAD0(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_100167844(int a1)
{
  return sub_10015DB10(a1, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t (*sub_100167850(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement(0LL) + 52);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1001678A0()
{
  return sub_10015DBA0(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_1001678AC()
{
  return sub_10015DBDC(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

int *sub_1001678B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement(0LL);
  uint64_t v3 = a1 + result[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  uint64_t v4 = a1 + result[6];
  *(_DWORD *)uint64_t v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  uint64_t v5 = a1 + result[7];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  uint64_t v6 = a1 + result[8];
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  *(_BYTE *)(a1 + result[9]) = 6;
  uint64_t v7 = a1 + result[10];
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  uint64_t v8 = a1 + result[11];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + result[12];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1 + result[13];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return result;
}

uint64_t sub_100167970()
{
  return sub_10002DF9C(type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

uint64_t sub_10016797C(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

uint64_t (*sub_100167988(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1001679D8()
{
  return sub_1000277C8(type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

uint64_t sub_1001679E4()
{
  return sub_100027804(type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

uint64_t sub_1001679F0()
{
  return sub_1000B8E14(type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

uint64_t sub_1001679FC(int a1)
{
  return sub_1000B8E54(a1, type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

uint64_t (*sub_100167A08(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo(0LL) + 28);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100167A58()
{
  return sub_100020BD0(type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

uint64_t sub_100167A64()
{
  return sub_100020C0C(type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

uint64_t sub_100167A70()
{
  return sub_1000A9EA0(type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

uint64_t sub_100167A7C(int a1)
{
  return sub_1000A9EE0(a1, type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

uint64_t (*sub_100167A88(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo(0LL) + 32);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100167AD8()
{
  return sub_100027938(type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

uint64_t sub_100167AE4()
{
  return sub_100027974(type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

uint64_t sub_100167AF0@<X0>(uint64_t a1@<X8>)
{
  return sub_100005424(type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo, a1);
}

uint64_t sub_100167AFC(uint64_t a1)
{
  return sub_10000547C(a1, type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

uint64_t (*sub_100167B08())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_100167B30@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  uint64_t v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo(0LL);
  uint64_t result = UnknownStorage.init()();
  int v4 = (char *)a1 + v2[6];
  *(_DWORD *)int v4 = 0;
  void v4[4] = 1;
  uint64_t v5 = (char *)a1 + v2[7];
  *(_DWORD *)uint64_t v5 = 0;
  v5[4] = 1;
  uint64_t v6 = (char *)a1 + v2[8];
  *(_DWORD *)uint64_t v6 = 0;
  void v6[4] = 1;
  return result;
}

uint64_t sub_100167BA4()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
  if (v1 == 7) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_100167BCC(char a1)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_100167BF8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss(0LL) + 20);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 7) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100003798;
}

BOOL sub_100167C44()
{
  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss(0LL) + 20)) != 7;
}

uint64_t sub_100167C6C()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 7;
  return result;
}

uint64_t sub_100167C90@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C750);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_10035C750);
  uint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48LL))(v5, 1LL, v7) != 1) {
    return sub_100003E68( (uint64_t)v5,  (uint64_t)a1,  type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
  }
  *a1 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  uint64_t v8 = (char *)a1 + v7[6];
  *(_DWORD *)uint64_t v8 = 0;
  void v8[4] = 1;
  uint64_t v9 = (char *)a1 + v7[7];
  *(_DWORD *)uint64_t v9 = 0;
  v9[4] = 1;
  uint64_t v10 = (char *)a1 + v7[8];
  *(_DWORD *)uint64_t v10 = 0;
  v10[4] = 1;
  return sub_100015764((uint64_t)v5, &qword_10035C750);
}

uint64_t sub_100167DB0(uint64_t a1)
{
  return sub_1000308E8( a1,  type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss,  &qword_10035C750,  type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

void (*sub_100167DCC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C750);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo(0LL);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_10035C750);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    *uint64_t v9 = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    uint64_t v11 = (char *)v9 + v6[6];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = (char *)v9 + v6[7];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = (char *)v9 + v6[8];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    sub_100015764((uint64_t)v5, &qword_10035C750);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
  }

  return sub_100167F2C;
}

void sub_100167F2C(uint64_t a1, char a2)
{
}

BOOL sub_100167F40()
{
  return sub_100019928( &qword_10035C750,  type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss,  type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

uint64_t sub_100167F5C()
{
  return sub_100019A00( type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss,  &qword_10035C750,  type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

uint64_t sub_100167F78@<X0>(uint64_t a1@<X8>)
{
  return sub_10015F540( type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss,  7,  type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo,  a1);
}

uint64_t sub_100167F90@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo, a1);
}

uint64_t sub_100167F9C()
{
  return sub_10015B754(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_100167FA8(char a1)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_100167FD4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0LL) + 20);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100168020()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0LL) + 20)) != 6;
}

uint64_t sub_100168048()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 6;
  return result;
}

uint64_t sub_10016806C()
{
  return sub_10002DF9C(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_100168078(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t (*sub_100168084(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1001680D4()
{
  return sub_1000277C8(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_1001680E0()
{
  return sub_100027804(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_1001680EC()
{
  return sub_1000B8E14(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_1001680F8(int a1)
{
  return sub_1000B8E54(a1, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t (*sub_100168104(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0LL) + 28);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100168154()
{
  return sub_100020BD0(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_100168160()
{
  return sub_100020C0C(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_10016816C()
{
  return sub_1000A9EA0(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_100168178(int a1)
{
  return sub_1000A9EE0(a1, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t (*sub_100168184(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0LL) + 32);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1001681D4()
{
  return sub_100027938(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_1001681E0()
{
  return sub_100027974(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_1001681EC()
{
  return sub_1000B5040(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_1001681F8(int a1)
{
  return sub_1000B5080(a1, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t (*sub_100168204(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0LL) + 36);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100168254()
{
  return sub_10002828C(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_100168260()
{
  return sub_1000282C8(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_10016826C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C758);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 40), (uint64_t)v5, &qword_10035C758);
  uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams(0LL);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = 6;
  uint64_t v8 = a1 + *(int *)(v7 + 24);
  uint64_t v9 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  return sub_100015764((uint64_t)v5, &qword_10035C758);
}

uint64_t sub_100168380(uint64_t a1)
{
  return sub_1000B9A4C( a1,  type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements,  &qword_10035C758,  type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams);
}

void (*sub_10016839C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C758);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0LL) + 40);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_10035C758);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    v9[*(int *)(v6 + 20)] = 6;
    uint64_t v11 = &v9[*(int *)(v6 + 24)];
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
    sub_100015764((uint64_t)v5, &qword_10035C758);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams);
  }

  return sub_1001684F0;
}

void sub_1001684F0(uint64_t a1, char a2)
{
}

BOOL sub_100168504()
{
  return sub_1000B9C24( &qword_10035C758,  type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements,  type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams);
}

uint64_t sub_100168520()
{
  return sub_1000B9CFC( type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements,  &qword_10035C758,  type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams);
}

uint64_t sub_10016853C()
{
  return sub_1000A6DE4(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_100168548(int a1)
{
  return sub_1000A6E24(a1, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t (*sub_100168554(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0LL) + 44);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1001685A4()
{
  return sub_100033884(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_1001685B0()
{
  return sub_1000338C0(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_1001685BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C760);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0LL);
  sub_10000E6C0(v1 + *(int *)(v6 + 48), (uint64_t)v5, &qword_10035C760);
  uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v5, 1LL, v7) != 1) {
    return sub_100003E68( (uint64_t)v5,  a1,  type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss);
  }
  UnknownStorage.init()();
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = 7;
  uint64_t v8 = a1 + *(int *)(v7 + 24);
  uint64_t v9 = type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  return sub_100015764((uint64_t)v5, &qword_10035C760);
}

uint64_t sub_1001686D0(uint64_t a1)
{
  return sub_10017DD28( a1,  type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements,  &qword_10035C760,  type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss);
}

void (*sub_1001686EC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C760);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0LL) + 48);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E6C0(v1 + v10, (uint64_t)v5, &qword_10035C760);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    v9[*(int *)(v6 + 20)] = 7;
    uint64_t v11 = &v9[*(int *)(v6 + 24)];
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
    sub_100015764((uint64_t)v5, &qword_10035C760);
  }

  else
  {
    sub_100003E68( (uint64_t)v5,  (uint64_t)v9,  type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss);
  }

  return sub_100168840;
}

void sub_100168840(uint64_t a1, char a2)
{
}

BOOL sub_100168854()
{
  return sub_10017DF20( &qword_10035C760,  type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements,  type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss);
}

uint64_t sub_100168870()
{
  return sub_10017DFF8( type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements,  &qword_10035C760,  type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss);
}

uint64_t sub_10016888C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0LL);
  *(_BYTE *)(a1 + v2[5]) = 6;
  uint64_t v3 = a1 + v2[6];
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  uint64_t v4 = a1 + v2[7];
  *(_DWORD *)uint64_t v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  uint64_t v5 = a1 + v2[8];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  uint64_t v6 = a1 + v2[9];
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  uint64_t v7 = a1 + v2[10];
  uint64_t v8 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 1LL, 1LL, v8);
  uint64_t v9 = a1 + v2[11];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v2[12];
  uint64_t v11 = type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))( v10,  1LL,  1LL,  v11);
}

uint64_t sub_100168974@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams, a1);
}

uint64_t sub_100168980@<X0>(uint64_t a1@<X8>)
{
  return sub_100004D18(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss, a1);
}

uint64_t sub_10016898C()
{
  return sub_1000191E8(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168998(int a1)
{
  return sub_100019228(a1, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t (*sub_1001689A4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement(0LL) + 20);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_1001689F4()
{
  return sub_1000192B8(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168A00()
{
  return sub_1000192F4(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168A0C()
{
  return sub_10002DF9C(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168A18(int a1)
{
  return sub_10002DFDC(a1, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t (*sub_100168A24(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement(0LL) + 24);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100168A74()
{
  return sub_1000277C8(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168A80()
{
  return sub_100027804(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168A8C()
{
  return sub_1000B8E14(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168A98(int a1)
{
  return sub_1000B8E54(a1, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t (*sub_100168AA4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement(0LL) + 28);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100168AF4()
{
  return sub_100020BD0(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168B00()
{
  return sub_100020C0C(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168B0C()
{
  return sub_1000A9EA0(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168B18(int a1)
{
  return sub_1000A9EE0(a1, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t (*sub_100168B24(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement(0LL) + 32);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100168B74()
{
  return sub_100027938(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168B80()
{
  return sub_100027974(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168B8C()
{
  return sub_1000B5040(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168B98(int a1)
{
  return sub_1000B5080(a1, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t (*sub_100168BA4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement(0LL) + 36);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100168BF4()
{
  return sub_10002828C(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168C00()
{
  return sub_1000282C8(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168C0C()
{
  return sub_100151524(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168C18(int a1)
{
  return sub_100151564(a1, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t (*sub_100168C24(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement(0LL) + 40);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100168C74()
{
  return sub_10003374C(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168C80()
{
  return sub_100033788(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168C8C()
{
  return sub_1001723E4(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168C98(char a1)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*sub_100168CC4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement(0LL) + 44);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6) {
    LOBYTE(v4) = 0;
  }
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004390;
}

BOOL sub_100168D10()
{
  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement(0LL) + 44)) != 6;
}

uint64_t sub_100168D38()
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement(0LL);
  *(_BYTE *)(v0 + *(int *)(result + 44)) = 6;
  return result;
}

uint64_t sub_100168D5C()
{
  return sub_1001516F8(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168D68(int a1)
{
  return sub_100151738(a1, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t (*sub_100168D74(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement(0LL) + 48);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100168DC4()
{
  return sub_1000B3C60(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168DD0()
{
  return sub_1000B3C9C(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168DDC()
{
  return sub_10015DAD0(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168DE8(int a1)
{
  return sub_10015DB10(a1, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t (*sub_100168DF4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement(0LL) + 52);
  if (*(_BYTE *)(v1 + v3 + 4)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(v1 + v3);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003590;
}

BOOL sub_100168E44()
{
  return sub_10015DBA0(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168E50()
{
  return sub_10015DBDC(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

int *sub_100168E5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int *)type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement(0LL);
  uint64_t v3 = a1 + result[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  uint64_t v4 = a1 + result[6];
  *(_DWORD *)uint64_t v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  uint64_t v5 = a1 + result[7];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  uint64_t v6 = a1 + result[8];
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  uint64_t v7 = a1 + result[9];
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  uint64_t v8 = a1 + result[10];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  *(_BYTE *)(a1 + result[11]) = 6;
  uint64_t v9 = a1 + result[12];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1 + result[13];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return result;
}

uint64_t sub_100168F14()
{
  return sub_1001591A8(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements);
}

uint64_t sub_100168F20(int a1)
{
  return sub_100168F3C( a1,  type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements,  type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass,  (void (*)(uint64_t))sub_1001A98A4);
}

uint64_t sub_100168F3C( int a1, uint64_t (*a2)(void), uint64_t (*a3)(void), void (*a4)(uint64_t))
{
  uint64_t v7 = v4;
  uint64_t v9 = *(int *)(a2(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v4 + v9)) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v4 + v9);
    uint64_t v11 = a3(0LL);
    uint64_t v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v13 = swift_retain(v10);
    a4(v13);
    uint64_t v14 = *(void *)(v7 + v9);
    *(void *)(v7 + v9) = v12;
    swift_release(v14);
  }

  uint64_t v15 = *(void *)(v7 + v9);
  uint64_t result = swift_beginAccess(v15 + 16, v17, 1LL, 0LL);
  *(_DWORD *)(v15 + 16) = a1;
  *(_BYTE *)(v15 + 20) = 0;
  return result;
}

void (*sub_100168FEC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)(v5 + 16);
  if (*(_BYTE *)(v5 + 20)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_10016906C;
}

void sub_10016906C(uint64_t *a1, char a2)
{
}

void sub_100169080(uint64_t *a1, char a2, uint64_t (*a3)(void), void (*a4)(uint64_t))
{
  uint64_t v7 = *a1;
  int v8 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v10 = v7 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v10 = v7 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v11 = *(int *)(v7 + 84);
    uint64_t v12 = *(void *)(v7 + 72);
    uint64_t v13 = *(void *)(v12 + v11);
    uint64_t v14 = a3(0LL);
    uint64_t v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    uint64_t v16 = swift_retain(v13);
    a4(v16);
    uint64_t v17 = *(void *)(v12 + v11);
    *(void *)(v12 + v11) = v15;
    swift_release(v17);
  }

BOOL sub_100169158()
{
  return sub_10002EE20(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements);
}

uint64_t sub_100169164()
{
  return sub_10002EE90( type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements,  type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass,  (void (*)(uint64_t))sub_1001A98A4);
}

uint64_t sub_100169180()
{
  return sub_10016918C(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements);
}

uint64_t sub_10016918C(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0LL) + 20));
  swift_beginAccess(v2 + 24, v4, 0LL, 0LL);
  if (*(_BYTE *)(v2 + 28)) {
    return 0LL;
  }
  else {
    return *(unsigned int *)(v2 + 24);
  }
}

uint64_t sub_1001691E4(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_1001A98A4(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 24, v12, 1LL, 0LL);
  *(_DWORD *)(v10 + 24) = a1;
  *(_BYTE *)(v10 + 28) = 0;
  return result;
}

void (*sub_10016928C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 24, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)(v5 + 24);
  if (*(_BYTE *)(v5 + 28)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_10016930C;
}

void sub_10016930C(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_1001A98A4(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_1001693E0()
{
  return sub_1001693EC(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements);
}

BOOL sub_1001693EC(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0LL) + 20));
  swift_beginAccess(v2 + 24, v4, 0LL, 0LL);
  return (*(_BYTE *)(v2 + 28) & 1) == 0;
}

uint64_t sub_100169440()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_1001A98A4(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 24, v10, 1LL, 0LL);
  *(_DWORD *)(v8 + 24) = 0;
  *(_BYTE *)(v8 + 28) = 1;
  return result;
}

uint64_t sub_1001694E0()
{
  return sub_1001694EC(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements);
}

uint64_t sub_1001694EC(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0LL) + 20));
  swift_beginAccess(v2 + 32, v4, 0LL, 0LL);
  if (*(_BYTE *)(v2 + 36)) {
    return 0LL;
  }
  else {
    return *(unsigned int *)(v2 + 32);
  }
}

uint64_t sub_100169544(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_1001A98A4(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 32, v12, 1LL, 0LL);
  *(_DWORD *)(v10 + 32) = a1;
  *(_BYTE *)(v10 + 36) = 0;
  return result;
}

void (*sub_1001695EC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 32, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)(v5 + 32);
  if (*(_BYTE *)(v5 + 36)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_10016966C;
}

void sub_10016966C(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_1001A98A4(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_100169740()
{
  return sub_10016974C(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements);
}

BOOL sub_10016974C(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0LL) + 20));
  swift_beginAccess(v2 + 32, v4, 0LL, 0LL);
  return (*(_BYTE *)(v2 + 36) & 1) == 0;
}

uint64_t sub_1001697A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_1001A98A4(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 32, v10, 1LL, 0LL);
  *(_DWORD *)(v8 + 32) = 0;
  *(_BYTE *)(v8 + 36) = 1;
  return result;
}

uint64_t sub_100169840()
{
  return sub_10016984C(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements);
}

uint64_t sub_10016984C(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0LL) + 20));
  swift_beginAccess(v2 + 40, v4, 0LL, 0LL);
  if (*(_BYTE *)(v2 + 44)) {
    return 0LL;
  }
  else {
    return *(unsigned int *)(v2 + 40);
  }
}

uint64_t sub_1001698A4(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_1001A98A4(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess(v10 + 40, v12, 1LL, 0LL);
  *(_DWORD *)(v10 + 40) = a1;
  *(_BYTE *)(v10 + 44) = 0;
  return result;
}

void (*sub_10016994C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 40, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)(v5 + 40);
  if (*(_BYTE *)(v5 + 44)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1001699CC;
}

void sub_1001699CC(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0LL);
    uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v12 = swift_retain(v9);
    sub_1001A98A4(v12);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v11;
    swift_release(v13);
  }

BOOL sub_100169AA0()
{
  return sub_100169AAC(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements);
}

BOOL sub_100169AAC(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0LL) + 20));
  swift_beginAccess(v2 + 40, v4, 0LL, 0LL);
  return (*(_BYTE *)(v2 + 44) & 1) == 0;
}

uint64_t sub_100169B00()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v2)) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v6 = swift_retain(v3);
    sub_1001A98A4(v6);
    uint64_t v7 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    swift_release(v7);
  }

  uint64_t v8 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess(v8 + 40, v10, 1LL, 0LL);
  *(_DWORD *)(v8 + 40) = 0;
  *(_BYTE *)(v8 + 44) = 1;
  return result;
}

uint64_t sub_100169BA0()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0LL) + 20));
  swift_beginAccess(v1 + 48, v3, 0LL, 0LL);
  return swift_bridgeObjectRetain(*(void *)(v1 + 48));
}

uint64_t sub_100169BEC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_1001A98A4(v8);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  swift_beginAccess(v10 + 48, v13, 1LL, 0LL);
  uint64_t v11 = *(void *)(v10 + 48);
  *(void *)(v10 + 48) = a1;
  return swift_bridgeObjectRelease(v11);
}

void (*sub_100169C98(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 48, v3, 0LL, 0LL);
  uint64_t v6 = *(void *)(v5 + 48);
  v3[9] = v6;
  swift_bridgeObjectRetain(v6);
  return sub_100169D14;
}

void sub_100169D14(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(int *)(*a1 + 88);
  uint64_t v5 = *(void *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(*(void *)(*a1 + 72));
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v5 + v4)) & 1) == 0)
    {
      uint64_t v6 = *(int *)(v2 + 88);
      uint64_t v7 = *(void *)(v2 + 80);
      uint64_t v8 = *(void *)(v7 + v6);
      uint64_t v9 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0LL);
      uint64_t v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
      uint64_t v11 = swift_retain(v8);
      sub_1001A98A4(v11);
      uint64_t v12 = *(void *)(v7 + v6);
      *(void *)(v7 + v6) = v10;
      swift_release(v12);
    }

    uint64_t v13 = *(void *)(*(void *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess(v13 + 48, v2 + 24, 1LL, 0LL);
    uint64_t v14 = *(void *)(v13 + 48);
    *(void *)(v13 + 48) = v3;
    swift_bridgeObjectRelease(v14);
    uint64_t v15 = *(void *)(v2 + 72);
  }

  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v5 + v4)) & 1) == 0)
    {
      uint64_t v16 = *(int *)(v2 + 88);
      uint64_t v17 = *(void *)(v2 + 80);
      uint64_t v18 = *(void *)(v17 + v16);
      uint64_t v19 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0LL);
      uint64_t v20 = swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
      uint64_t v21 = swift_retain(v18);
      sub_1001A98A4(v21);
      uint64_t v22 = *(void *)(v17 + v16);
      *(void *)(v17 + v16) = v20;
      swift_release(v22);
    }

    uint64_t v23 = *(void *)(*(void *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess(v23 + 48, v2 + 48, 1LL, 0LL);
    uint64_t v15 = *(void *)(v23 + 48);
    *(void *)(v23 + 48) = v3;
  }

  swift_bridgeObjectRelease(v15);
  free((void *)v2);
}

uint64_t sub_100169E68@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C768);
  __chkstk_darwin(v3);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v12, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_10035C768);
  uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams(0LL);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = 6;
  uint64_t v8 = a1 + *(int *)(v7 + 24);
  uint64_t v9 = type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  return sub_100015764((uint64_t)v5, &qword_10035C768);
}

uint64_t sub_100169FA4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C768);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1001A98A4(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams);
  uint64_t v17 = type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_10035C768);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__measuredTimeParams;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__measuredTimeParams,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_10035C768);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10016A124(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C768);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_10035C768);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    v9[*(int *)(v6 + 20)] = 6;
    uint64_t v11 = &v9[*(int *)(v6 + 24)];
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
    sub_100015764((uint64_t)v5, &qword_10035C768);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams);
  }

  return sub_10016A290;
}

void sub_10016A290(uint64_t a1, char a2)
{
}

BOOL sub_10016A2A4()
{
  return sub_10001D054( &qword_10035C768,  type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements,  &OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__measuredTimeParams,  type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams);
}

uint64_t sub_10016A2C8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A0C(&qword_10035C768);
  __chkstk_darwin(v2);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + v5)) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + v5);
    uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0LL);
    uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v9 = swift_retain(v6);
    sub_1001A98A4(v9);
    uint64_t v10 = *(void *)(v1 + v5);
    *(void *)(v1 + v5) = v8;
    swift_release(v10);
  }

  uint64_t v11 = *(void *)(v1 + v5);
  uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__measuredTimeParams;
  swift_beginAccess( v11 + OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__measuredTimeParams,  v16,  33LL,  0LL);
  swift_retain(v11);
  sub_10000E5D4((uint64_t)v4, v13, &qword_10035C768);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10016A3F8()
{
  return sub_10008D164( type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements,  &OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__codePhaseAmbiguity);
}

uint64_t sub_10016A40C(int a1)
{
  return sub_10016A4F0( a1,  &OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__codePhaseAmbiguity);
}

void (*sub_10016A418(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__codePhaseAmbiguity;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_10016A4A4;
}

void sub_10016A4A4(uint64_t *a1, char a2)
{
}

BOOL sub_10016A4B0()
{
  return sub_100022E8C( type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements,  &OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__codePhaseAmbiguity);
}

uint64_t sub_10016A4C4()
{
  return sub_10016A73C(&OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__codePhaseAmbiguity);
}

uint64_t sub_10016A4D0()
{
  return sub_10008D164( type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements,  &OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsTodpresent);
}

uint64_t sub_10016A4E4(int a1)
{
  return sub_10016A4F0( a1,  &OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsTodpresent);
}

uint64_t sub_10016A4F0(int a1, void *a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v2 + v6);
    uint64_t v8 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0LL);
    uint64_t v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v10 = swift_retain(v7);
    sub_1001A98A4(v10);
    uint64_t v11 = *(void *)(v4 + v6);
    *(void *)(v4 + v6) = v9;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v4 + v6) + *a2;
  uint64_t result = swift_beginAccess(v12, v14, 1LL, 0LL);
  *(_DWORD *)uint64_t v12 = a1;
  *(_BYTE *)(v12 + 4) = 0;
  return result;
}

void (*sub_10016A5A4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsTodpresent;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  int v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_10016A630;
}

void sub_10016A630(uint64_t *a1, char a2)
{
}

void sub_10016A63C(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = *a1;
  int v6 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v8 = v5 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v8 = v5 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v9 = *(int *)(v5 + 84);
    uint64_t v10 = *(void *)(v5 + 72);
    uint64_t v11 = *(void *)(v10 + v9);
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1001A98A4(v14);
    uint64_t v15 = *(void *)(v10 + v9);
    *(void *)(v10 + v9) = v13;
    swift_release(v15);
  }

BOOL sub_10016A71C()
{
  return sub_100022E8C( type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements,  &OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsTodpresent);
}

uint64_t sub_10016A730()
{
  return sub_10016A73C(&OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsTodpresent);
}

uint64_t sub_10016A73C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0LL);
    uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v8 = swift_retain(v5);
    sub_1001A98A4(v8);
    uint64_t v9 = *(void *)(v3 + v4);
    *(void *)(v3 + v4) = v7;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v3 + v4) + *a1;
  uint64_t result = swift_beginAccess(v10, v12, 1LL, 0LL);
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return result;
}

uint64_t sub_10016A7F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A0C(&qword_10035C688);
  __chkstk_darwin(v3);
  uint64_t v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v13, 0LL, 0LL);
  sub_10000E6C0(v6, (uint64_t)v5, &qword_10035C688);
  uint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0LL);
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v7[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v7[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return sub_100015764((uint64_t)v5, &qword_10035C688);
}

uint64_t sub_10016A928(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C688);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v10)) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v1 + v10);
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = swift_retain(v11);
    sub_1001A98A4(v14);
    uint64_t v15 = *(void *)(v2 + v10);
    *(void *)(v2 + v10) = v13;
    swift_release(v15);
  }

  uint64_t v16 = *(void *)(v2 + v10);
  sub_100003E68(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
  uint64_t v17 = type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 0LL, 1LL, v17);
  sub_10000E590((uint64_t)v9, (uint64_t)v7, &qword_10035C688);
  uint64_t v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsTod;
  swift_beginAccess( v16 + OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsTod,  v21,  33LL,  0LL);
  swift_retain(v16);
  sub_10000E5D4((uint64_t)v7, v18, &qword_10035C688);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10016AAA8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100003A0C(&qword_10035C688);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_10000E6C0(v10, (uint64_t)v5, &qword_10035C688);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    sub_100015764((uint64_t)v5, &qword_10035C688);
  }

  else
  {
    sub_100003E68((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
  }

  return sub_10016AC10;
}